{"sha": "18060eb81ebae87a96a3173dc83fd778d7e9359a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDYwZWI4MWViYWU4N2E5NmEzMTczZGM4M2ZkNzc4ZDdlOTM1OWE=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-01-06T00:52:15Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-01-07T00:39:31Z"}, "message": "Split test cases into separate files", "tree": {"sha": "23112883eee65bd14745423f669f71d568c19d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23112883eee65bd14745423f669f71d568c19d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18060eb81ebae87a96a3173dc83fd778d7e9359a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18060eb81ebae87a96a3173dc83fd778d7e9359a", "html_url": "https://github.com/rust-lang/rust/commit/18060eb81ebae87a96a3173dc83fd778d7e9359a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18060eb81ebae87a96a3173dc83fd778d7e9359a/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6a6069a7918a48340a7e30cb7d6794d2804e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6a6069a7918a48340a7e30cb7d6794d2804e46", "html_url": "https://github.com/rust-lang/rust/commit/9e6a6069a7918a48340a7e30cb7d6794d2804e46"}], "stats": {"total": 1203, "additions": 620, "deletions": 583}, "files": [{"sha": "2c354b5ef6ecb5748b01ed717636df1045deb30d", "filename": "tests/ui/atomic_ordering.rs", "status": "removed", "additions": 0, "deletions": 196, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/9e6a6069a7918a48340a7e30cb7d6794d2804e46/tests%2Fui%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6a6069a7918a48340a7e30cb7d6794d2804e46/tests%2Fui%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering.rs?ref=9e6a6069a7918a48340a7e30cb7d6794d2804e46", "patch": "@@ -1,196 +0,0 @@\n-#![warn(clippy::invalid_atomic_ordering)]\n-\n-use std::sync::atomic::{\n-    AtomicBool, AtomicI16, AtomicI32, AtomicI64, AtomicI8, AtomicIsize, AtomicPtr, AtomicU16, AtomicU32, AtomicU64,\n-    AtomicU8, AtomicUsize, Ordering,\n-};\n-\n-fn main() {\n-    // `AtomicBool` test cases\n-    let x = AtomicBool::new(true);\n-\n-    // Allowed load ordering modes\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-\n-    // Disallowed load ordering modes\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    // Allowed store ordering modes\n-    x.store(false, Ordering::Release);\n-    x.store(false, Ordering::SeqCst);\n-    x.store(false, Ordering::Relaxed);\n-\n-    // Disallowed store ordering modes\n-    x.store(false, Ordering::Acquire);\n-    x.store(false, Ordering::AcqRel);\n-\n-    // `AtomicI8` test cases\n-    let x = AtomicI8::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicI16` test cases\n-    let x = AtomicI16::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicI32` test cases\n-    let x = AtomicI32::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicI64` test cases\n-    let x = AtomicI64::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicIsize` test cases\n-    let x = AtomicIsize::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicPtr` test cases\n-    let ptr = &mut 5;\n-    let other_ptr = &mut 10;\n-    let x = AtomicPtr::new(ptr);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(other_ptr, Ordering::Release);\n-    x.store(other_ptr, Ordering::SeqCst);\n-    x.store(other_ptr, Ordering::Relaxed);\n-    x.store(other_ptr, Ordering::Acquire);\n-    x.store(other_ptr, Ordering::AcqRel);\n-\n-    // `AtomicU8` test cases\n-    let x = AtomicU8::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicU16` test cases\n-    let x = AtomicU16::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicU32` test cases\n-    let x = AtomicU32::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicU64` test cases\n-    let x = AtomicU64::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-\n-    // `AtomicUsize` test cases\n-    let x = AtomicUsize::new(0);\n-\n-    let _ = x.load(Ordering::Acquire);\n-    let _ = x.load(Ordering::SeqCst);\n-    let _ = x.load(Ordering::Relaxed);\n-    let _ = x.load(Ordering::Release);\n-    let _ = x.load(Ordering::AcqRel);\n-\n-    x.store(1, Ordering::Release);\n-    x.store(1, Ordering::SeqCst);\n-    x.store(1, Ordering::Relaxed);\n-    x.store(1, Ordering::Acquire);\n-    x.store(1, Ordering::AcqRel);\n-}"}, {"sha": "7485eef39feb3e3ce37718c0f46e6104c6165647", "filename": "tests/ui/atomic_ordering.stderr", "status": "removed", "additions": 0, "deletions": 387, "changes": 387, "blob_url": "https://github.com/rust-lang/rust/blob/9e6a6069a7918a48340a7e30cb7d6794d2804e46/tests%2Fui%2Fatomic_ordering.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e6a6069a7918a48340a7e30cb7d6794d2804e46/tests%2Fui%2Fatomic_ordering.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering.stderr?ref=9e6a6069a7918a48340a7e30cb7d6794d2804e46", "patch": "@@ -1,387 +0,0 @@\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:18:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:19:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:27:20\n-   |\n-LL |     x.store(false, Ordering::Acquire);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:28:20\n-   |\n-LL |     x.store(false, Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:36:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:37:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:42:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:43:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:51:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:52:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:57:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:58:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:66:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:67:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:72:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:73:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:81:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:82:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:87:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:88:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:96:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:97:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:102:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:103:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:113:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:114:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:119:24\n-   |\n-LL |     x.store(other_ptr, Ordering::Acquire);\n-   |                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:120:24\n-   |\n-LL |     x.store(other_ptr, Ordering::AcqRel);\n-   |                        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:128:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:129:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:134:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:135:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:143:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:144:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:149:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:150:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:158:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:159:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:164:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:165:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:173:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:174:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:179:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:180:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:188:20\n-   |\n-LL |     let _ = x.load(Ordering::Release);\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic loads cannot have `Release` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:189:20\n-   |\n-LL |     let _ = x.load(Ordering::AcqRel);\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:194:16\n-   |\n-LL |     x.store(1, Ordering::Acquire);\n-   |                ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n-  --> $DIR/atomic_ordering.rs:195:16\n-   |\n-LL |     x.store(1, Ordering::AcqRel);\n-   |                ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n-\n-error: aborting due to 48 previous errors\n-"}, {"sha": "cdbde79b19ebf53f8db58975f6258a9bd13e6abc", "filename": "tests/ui/atomic_ordering_bool.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_bool.rs?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,25 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicBool, Ordering};\n+\n+fn main() {\n+    let x = AtomicBool::new(true);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(false, Ordering::Release);\n+    x.store(false, Ordering::SeqCst);\n+    x.store(false, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(false, Ordering::Acquire);\n+    x.store(false, Ordering::AcqRel);\n+}"}, {"sha": "397b893aed96478901847e26a6b0ae032b57ca51", "filename": "tests/ui/atomic_ordering_bool.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_bool.stderr?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,35 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:14:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:15:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:23:20\n+   |\n+LL |     x.store(false, Ordering::Acquire);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:24:20\n+   |\n+LL |     x.store(false, Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "40a00ba3de3505435770d984a270a36bd98d88ae", "filename": "tests/ui/atomic_ordering_int.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_int.rs?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,86 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicI16, AtomicI32, AtomicI64, AtomicI8, AtomicIsize, Ordering};\n+\n+fn main() {\n+    // `AtomicI8` test cases\n+    let x = AtomicI8::new(0);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicI16` test cases\n+    let x = AtomicI16::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicI32` test cases\n+    let x = AtomicI32::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicI64` test cases\n+    let x = AtomicI64::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicIsize` test cases\n+    let x = AtomicIsize::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+}"}, {"sha": "bbaf234d3c9f8d0ef3d5ba2a828d9bb05d2af2fb", "filename": "tests/ui/atomic_ordering_int.stderr", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_int.stderr?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,163 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:15:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:16:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:24:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:25:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:33:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:34:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:39:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:40:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:48:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:49:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:54:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:55:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:63:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:64:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:69:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:70:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:78:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:79:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:84:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:85:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "ecbb05c7fbc39508e993bc56b5822fbedf5f03d8", "filename": "tests/ui/atomic_ordering_ptr.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_ptr.rs?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+\n+fn main() {\n+    let ptr = &mut 5;\n+    let other_ptr = &mut 10;\n+    let x = AtomicPtr::new(ptr);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(other_ptr, Ordering::Release);\n+    x.store(other_ptr, Ordering::SeqCst);\n+    x.store(other_ptr, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(other_ptr, Ordering::Acquire);\n+    x.store(other_ptr, Ordering::AcqRel);\n+}"}, {"sha": "558ae55518d5a9e26e302a715d0976beeeb2593f", "filename": "tests/ui/atomic_ordering_ptr.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_ptr.stderr?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,35 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:16:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:17:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:25:24\n+   |\n+LL |     x.store(other_ptr, Ordering::Acquire);\n+   |                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:26:24\n+   |\n+LL |     x.store(other_ptr, Ordering::AcqRel);\n+   |                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a0d5d7c401035d686cd18a90617d5d7c81c28a1e", "filename": "tests/ui/atomic_ordering_uint.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_uint.rs?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,86 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicU16, AtomicU32, AtomicU64, AtomicU8, AtomicUsize, Ordering};\n+\n+fn main() {\n+    // `AtomicU8` test cases\n+    let x = AtomicU8::new(0);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicU16` test cases\n+    let x = AtomicU16::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicU32` test cases\n+    let x = AtomicU32::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicU64` test cases\n+    let x = AtomicU64::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicUsize` test cases\n+    let x = AtomicUsize::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+}"}, {"sha": "5703135bcf1e2a4bb613eba2bfa984f7002ae9b0", "filename": "tests/ui/atomic_ordering_uint.stderr", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18060eb81ebae87a96a3173dc83fd778d7e9359a/tests%2Fui%2Fatomic_ordering_uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_uint.stderr?ref=18060eb81ebae87a96a3173dc83fd778d7e9359a", "patch": "@@ -0,0 +1,163 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:15:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:16:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:24:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:25:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:33:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:34:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:39:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:40:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:48:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:49:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:54:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:55:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:63:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:64:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:69:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:70:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:78:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:79:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:84:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:85:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 20 previous errors\n+"}]}