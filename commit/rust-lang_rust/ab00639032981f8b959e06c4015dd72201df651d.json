{"sha": "ab00639032981f8b959e06c4015dd72201df651d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDA2MzkwMzI5ODFmOGI5NTllMDZjNDAxNWRkNzIyMDFkZjY1MWQ=", "commit": {"author": {"name": "darksv", "email": "darek969-12@o2.pl", "date": "2018-09-15T15:05:08Z"}, "committer": {"name": "darksv", "email": "darek969-12@o2.pl", "date": "2018-09-15T15:05:08Z"}, "message": "independent tests for incremental reparsing of blocks and leaves", "tree": {"sha": "a1b5376097cc39deb25877bca867846f38e55e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b5376097cc39deb25877bca867846f38e55e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab00639032981f8b959e06c4015dd72201df651d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab00639032981f8b959e06c4015dd72201df651d", "html_url": "https://github.com/rust-lang/rust/commit/ab00639032981f8b959e06c4015dd72201df651d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab00639032981f8b959e06c4015dd72201df651d/comments", "author": {"login": "darksv", "id": 6718130, "node_id": "MDQ6VXNlcjY3MTgxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/6718130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darksv", "html_url": "https://github.com/darksv", "followers_url": "https://api.github.com/users/darksv/followers", "following_url": "https://api.github.com/users/darksv/following{/other_user}", "gists_url": "https://api.github.com/users/darksv/gists{/gist_id}", "starred_url": "https://api.github.com/users/darksv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darksv/subscriptions", "organizations_url": "https://api.github.com/users/darksv/orgs", "repos_url": "https://api.github.com/users/darksv/repos", "events_url": "https://api.github.com/users/darksv/events{/privacy}", "received_events_url": "https://api.github.com/users/darksv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "darksv", "id": 6718130, "node_id": "MDQ6VXNlcjY3MTgxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/6718130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darksv", "html_url": "https://github.com/darksv", "followers_url": "https://api.github.com/users/darksv/followers", "following_url": "https://api.github.com/users/darksv/following{/other_user}", "gists_url": "https://api.github.com/users/darksv/gists{/gist_id}", "starred_url": "https://api.github.com/users/darksv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darksv/subscriptions", "organizations_url": "https://api.github.com/users/darksv/orgs", "repos_url": "https://api.github.com/users/darksv/repos", "events_url": "https://api.github.com/users/darksv/events{/privacy}", "received_events_url": "https://api.github.com/users/darksv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46cee0415c957f3262ad68cbe617b642f29f347e", "url": "https://api.github.com/repos/rust-lang/rust/commits/46cee0415c957f3262ad68cbe617b642f29f347e", "html_url": "https://github.com/rust-lang/rust/commit/46cee0415c957f3262ad68cbe617b642f29f347e"}], "stats": {"total": 116, "additions": 68, "deletions": 48}, "files": [{"sha": "da44913c53825d65261d65bb213a56b9d9418059", "filename": "crates/libsyntax2/src/reparsing.rs", "status": "modified", "additions": 68, "deletions": 48, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/ab00639032981f8b959e06c4015dd72201df651d/crates%2Flibsyntax2%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab00639032981f8b959e06c4015dd72201df651d/crates%2Flibsyntax2%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Freparsing.rs?ref=ab00639032981f8b959e06c4015dd72201df651d", "patch": "@@ -187,30 +187,52 @@ fn merge_errors(\n     res\n }\n \n-#[cfg(test)]\n-use super::{File, text_utils, test_utils, utils};\n-\n #[cfg(test)]\n mod tests {\n-    use super::{*, utils::dump_tree};\n+    use super::{\n+        super::{\n+            File,\n+            test_utils::extract_range,\n+            text_utils::replace_range,\n+            utils::dump_tree,\n+        },\n+        reparse_leaf, reparse_block, AtomEdit, GreenNode, SyntaxError, SyntaxNodeRef,\n+    };\n \n-    #[test]\n-    fn reparse_test() {\n-        fn do_check(before: &str, replace_with: &str) {\n-            let (range, before) = test_utils::extract_range(before);\n-            let after = text_utils::replace_range(before.clone(), range, replace_with);\n+    fn do_check<F>(\n+        before: &str,\n+        replace_with: &str,\n+        reparser: F,\n+    ) where\n+        for<'a> F: Fn(\n+            SyntaxNodeRef<'a>,\n+            &AtomEdit,\n+        ) -> Option<(SyntaxNodeRef<'a>, GreenNode, Vec<SyntaxError>)>\n+    {\n+        let (range, before) = extract_range(before);\n+        let after = replace_range(before.clone(), range, replace_with);\n \n-            let fully_reparsed = File::parse(&after);\n-            let incrementally_reparsed = {\n-                let f = File::parse(&before);\n-                let edit = AtomEdit { delete: range, insert: replace_with.to_string() };\n-                f.incremental_reparse(&edit).expect(\"cannot incrementally reparse\")\n-            };\n-            assert_eq_text!(\n-                &dump_tree(fully_reparsed.syntax()),\n-                &dump_tree(incrementally_reparsed.syntax()),\n-            )\n-        }\n+        let fully_reparsed = File::parse(&after);\n+        let incrementally_reparsed = {\n+            let f = File::parse(&before);\n+            let edit = AtomEdit { delete: range, insert: replace_with.to_string() };\n+            let (node, green, new_errors) =\n+                reparser(f.syntax(), &edit).expect(\"cannot incrementally reparse\");\n+            let green_root = node.replace_with(green);\n+            let errors = super::merge_errors(f.errors(), new_errors, node, &edit);\n+            File::new(green_root, errors)\n+        };\n+\n+        assert_eq_text!(\n+            &dump_tree(fully_reparsed.syntax()),\n+            &dump_tree(incrementally_reparsed.syntax()),\n+        )\n+    }\n+\n+    #[test]\n+    fn reparse_block_tests() {\n+        let do_check = |before, replace_to|\n+            do_check(before, replace_to, reparse_block);\n \n         do_check(r\"\n fn foo() {\n@@ -243,11 +265,6 @@ mod foo {\n trait Foo {\n     type <|>Foo<|>;\n }\n-\", \"Output\");\n-        do_check(r\"\n-trait Foo {\n-    type<|> Foo<|>;\n-}\n \", \"Output\");\n         do_check(r\"\n impl IntoIterator<Item=i32> for Foo {\n@@ -275,49 +292,52 @@ extern {\n     fn<|>;<|>\n }\n \", \" exit(code: c_int)\");\n+    }\n+\n+    #[test]\n+    fn reparse_leaf_tests() {\n+        let do_check = |before, replace_to|\n+            do_check(before, replace_to, reparse_leaf);\n+\n         do_check(r\"<|><|>\n-fn foo() -> i32 {\n-    1\n-}\n+fn foo() -> i32 { 1 }\n \", \"\\n\\n\\n   \\n\");\n         do_check(r\"\n fn foo() -> <|><|> {}\n \", \"  \\n\");\n         do_check(r\"\n-fn <|>foo<|>() -> i32 {\n-    1\n-}\n+fn <|>foo<|>() -> i32 { 1 }\n \", \"bar\");\n         do_check(r\"\n-fn aa<|><|>bb() {\n-\n-}\n-\", \"foofoo\");\n+fn foo<|><|>foo() {  }\n+\", \"bar\");\n         do_check(r\"\n-fn aabb /* <|><|> */ () {\n-\n-}\n+fn foo /* <|><|> */ () {}\n \", \"some comment\");\n         do_check(r\"\n-fn aabb <|><|> () {\n-\n-}\n+fn baz <|><|> () {}\n \", \"    \\t\\t\\n\\n\");\n         do_check(r\"\n-trait foo {\n-// comment <|><|>\n-}\n-\", \"\\n\");\n+fn baz <|><|> () {}\n+\", \"    \\t\\t\\n\\n\");\n         do_check(r\"\n-/// good <|><|>omment\n-mod {\n-}\n+/// foo <|><|>omment\n+mod { }\n \", \"c\");\n         do_check(r#\"\n fn -> &str { \"Hello<|><|>\" }\n \"#, \", world\");\n         do_check(r#\"\n fn -> &str { // \"Hello<|><|>\"\n \"#, \", world\");\n+        do_check(r##\"\n+fn -> &str { r#\"Hello<|><|>\"#\n+\"##, \", world\");\n+        do_check(r\"\n+#[derive(<|>Copy<|>)]\n+enum Foo {\n+\n+}\n+\", \"Clone\");\n     }\n }\n\\ No newline at end of file"}]}