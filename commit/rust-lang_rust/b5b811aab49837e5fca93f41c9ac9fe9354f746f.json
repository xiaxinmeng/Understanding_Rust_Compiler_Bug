{"sha": "b5b811aab49837e5fca93f41c9ac9fe9354f746f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YjgxMWFhYjQ5ODM3ZTVmY2E5M2Y0MWM5YWM5ZmU5MzU0Zjc0NmY=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-01T14:18:09Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-01T14:18:09Z"}, "message": "review comments", "tree": {"sha": "2127b884862bdbc35ef3d3c545de2a86c2a537e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2127b884862bdbc35ef3d3c545de2a86c2a537e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b811aab49837e5fca93f41c9ac9fe9354f746f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b811aab49837e5fca93f41c9ac9fe9354f746f", "html_url": "https://github.com/rust-lang/rust/commit/b5b811aab49837e5fca93f41c9ac9fe9354f746f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b811aab49837e5fca93f41c9ac9fe9354f746f/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "528355c541b2f5d54d91a642355e39e01d93c75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/528355c541b2f5d54d91a642355e39e01d93c75f", "html_url": "https://github.com/rust-lang/rust/commit/528355c541b2f5d54d91a642355e39e01d93c75f"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "ada9a0f887a1a71fa5a9336928b6b4a0d62aa5e0", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -1,5 +1,6 @@\n use rustc_middle::mir;\n use rustc_middle::ty::layout::HasTyCtxt;\n+use rustc_middle::ty::InstanceDef;\n use rustc_middle::ty::{self, Ty};\n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n@@ -231,8 +232,13 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             if ecx.tcx.is_const_fn_raw(def.did) {\n                 // If this function is a `const fn` then under certain circumstances we\n                 // can evaluate call via the query system, thus memoizing all future calls.\n-                if ecx.try_eval_const_fn_call(instance, ret, args)? {\n-                    return Ok(None);\n+                match instance.def {\n+                    InstanceDef::Intrinsic(_) => {\n+                        if ecx.try_eval_const_fn_call(instance, ret, args)? {\n+                            return Ok(None);\n+                        }\n+                    }\n+                    _ => {}\n                 }\n             } else {\n                 // Some functions we support even if they are non-const -- but avoid testing"}, {"sha": "4bc263730c3497c94c835723c03f2c74c4aa4af2", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -344,7 +344,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 let align = match Align::from_bytes(align) {\n                     Ok(a) => a,\n-                    Err(err) => bug!(\"align has to power of 2, {}\", err),\n+                    Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n                 };\n \n                 let ptr ="}, {"sha": "1319ecd5b2ea4c1a69026d2e0b922b49888c9ad0", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -42,7 +42,7 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n     fn may_leak(self) -> bool {\n         match self {\n             MemoryKind::Stack => false,\n-            MemoryKind::Heap => true,\n+            MemoryKind::Heap => false,\n             MemoryKind::Vtable => true,\n             MemoryKind::CallerLocation => true,\n             MemoryKind::Machine(k) => k.may_leak(),\n@@ -54,7 +54,7 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             MemoryKind::Stack => write!(f, \"stack variable\"),\n-            MemoryKind::Heap => write!(f, \"heap variable\"),\n+            MemoryKind::Heap => write!(f, \"heap allocation\"),\n             MemoryKind::Vtable => write!(f, \"vtable\"),\n             MemoryKind::CallerLocation => write!(f, \"caller location\"),\n             MemoryKind::Machine(m) => write!(f, \"{}\", m),"}, {"sha": "73df8e53f82a4d2c5ae84d9995328d2fa4bf5e00", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -1734,7 +1734,7 @@ extern \"rust-intrinsic\" {\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n \n     /// Allocate at compile time. Should not be called at runtime.\n-    #[rustc_const_unstable(feature = \"const_heap\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     #[cfg(not(bootstrap))]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n }"}, {"sha": "0d809ca9a622b7fa7c04e196b89d9bafdf3dcbac", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -0,0 +1,17 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: i32 = foo();\n+const fn foo() -> i32 {\n+    unsafe {\n+        let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+        //~^ error: any use of this value will cause an error [const_err]\n+    }\n+    1\n+\n+}\n+\n+fn main() {}"}, {"sha": "41c1b977269a321d740f1c93557381ec494a3d4b", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -0,0 +1,17 @@\n+error: any use of this value will cause an error\n+  --> $DIR/alloc_intrinsic_errors.rs:10:17\n+   |\n+LL | const FOO: i32 = foo();\n+   | -----------------------\n+...\n+LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 align has to be a power of 2, `3` is not a power of 2\n+   |                 inside `foo` at $DIR/alloc_intrinsic_errors.rs:10:17\n+   |                 inside `FOO` at $DIR/alloc_intrinsic_errors.rs:7:18\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "7cfe4734c1da098610d0c509714f23f16587754f", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -1,11 +1,11 @@\n-// run-pass\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n \n const FOO: *const i32 = foo();\n+//~^ error: untyped pointers are not allowed in constant\n \n const fn foo() -> &'static i32 {\n     let t = unsafe {"}, {"sha": "cabd39dde31a79c958a679bfad2af37330946e33", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.stderr?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -0,0 +1,8 @@\n+error: untyped pointers are not allowed in constant\n+  --> $DIR/alloc_intrinsic_nontransient.rs:7:1\n+   |\n+LL | const FOO: *const i32 = foo();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}