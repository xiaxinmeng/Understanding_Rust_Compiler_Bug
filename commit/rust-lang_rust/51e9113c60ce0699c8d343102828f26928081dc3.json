{"sha": "51e9113c60ce0699c8d343102828f26928081dc3", "node_id": "C_kwDOAAsO6NoAKDUxZTkxMTNjNjBjZTA2OTljOGQzNDMxMDI4MjhmMjY5MjgwODFkYzM", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2022-08-01T12:31:23Z"}, "committer": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2022-08-27T16:07:00Z"}, "message": "Add `span_contains_comments` util", "tree": {"sha": "590bf1507e1a8cb57b53d8abc50fd8fd7cbd76d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590bf1507e1a8cb57b53d8abc50fd8fd7cbd76d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e9113c60ce0699c8d343102828f26928081dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e9113c60ce0699c8d343102828f26928081dc3", "html_url": "https://github.com/rust-lang/rust/commit/51e9113c60ce0699c8d343102828f26928081dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e9113c60ce0699c8d343102828f26928081dc3/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8bd600009dd087f6c2cd4b354cf016b2072fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8bd600009dd087f6c2cd4b354cf016b2072fd3", "html_url": "https://github.com/rust-lang/rust/commit/be8bd600009dd087f6c2cd4b354cf016b2072fd3"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "4c5adde61906a5a0a59463fc3e767d85238c5d0e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51e9113c60ce0699c8d343102828f26928081dc3/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e9113c60ce0699c8d343102828f26928081dc3/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=51e9113c60ce0699c8d343102828f26928081dc3", "patch": "@@ -87,6 +87,7 @@ use rustc_hir::{\n     Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n     TraitRef, TyKind, UnOp,\n };\n+use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n@@ -104,6 +105,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::sym;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -2278,6 +2280,18 @@ pub fn walk_to_expr_usage<'tcx, T>(\n     None\n }\n \n+/// Checks whether a given span has any comment token\n+/// This checks for all types of comment: line \"//\", block \"/**\", doc \"///\" \"//!\"\n+pub fn span_contains_comment(sm: &SourceMap, span: Span) -> bool {\n+    let Ok(snippet) = sm.span_to_snippet(span) else { return false };\n+    return tokenize(&snippet).any(|token| {\n+        matches!(\n+            token.kind,\n+            TokenKind::BlockComment { .. } | TokenKind::LineComment { .. }\n+        )\n+    });\n+}\n+\n macro_rules! op_utils {\n     ($($name:ident $assign:ident)*) => {\n         /// Binary operation traits like `LangItem::Add`"}]}