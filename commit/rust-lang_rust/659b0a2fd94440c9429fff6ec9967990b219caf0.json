{"sha": "659b0a2fd94440c9429fff6ec9967990b219caf0", "node_id": "C_kwDOAAsO6NoAKDY1OWIwYTJmZDk0NDQwYzk0MjlmZmY2ZWM5OTY3OTkwYjIxOWNhZjA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-12T11:19:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-30T15:40:15Z"}, "message": "Bless tests.", "tree": {"sha": "9d591cae31537ce05b6eb3b64401db6197a76e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d591cae31537ce05b6eb3b64401db6197a76e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659b0a2fd94440c9429fff6ec9967990b219caf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659b0a2fd94440c9429fff6ec9967990b219caf0", "html_url": "https://github.com/rust-lang/rust/commit/659b0a2fd94440c9429fff6ec9967990b219caf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659b0a2fd94440c9429fff6ec9967990b219caf0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faa7d4221be02551d475e5b359a1317401bcfd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/faa7d4221be02551d475e5b359a1317401bcfd0d", "html_url": "https://github.com/rust-lang/rust/commit/faa7d4221be02551d475e5b359a1317401bcfd0d"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "a288b90d7924e96de619596b1eede797573fb423", "filename": "src/test/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=659b0a2fd94440c9429fff6ec9967990b219caf0", "patch": "@@ -48,7 +48,6 @@ fn main() {\n pub struct CompilerCalls;\n \n impl rustc_driver::Callbacks for CompilerCalls {\n-\n     // In this callback we override the mir_borrowck query.\n     fn config(&mut self, config: &mut Config) {\n         assert!(config.override_queries.is_none());\n@@ -64,12 +63,10 @@ impl rustc_driver::Callbacks for CompilerCalls {\n     ) -> Compilation {\n         compiler.session().abort_if_errors();\n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n-\n             // Collect definition ids of MIR bodies.\n             let hir = tcx.hir();\n-            let krate = hir.krate();\n             let mut visitor = HirVisitor { bodies: Vec::new() };\n-            krate.visit_all_item_likes(&mut visitor);\n+            hir.visit_all_item_likes(&mut visitor);\n \n             // Trigger borrow checking of all bodies.\n             for def_id in visitor.bodies {"}, {"sha": "e726f8402ef9d0edc8b39d59587efbd5e7b59dfb", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=659b0a2fd94440c9429fff6ec9967990b219caf0", "patch": "@@ -13,6 +13,7 @@ extern crate rustc_ast;\n use rustc_ast::attr;\n use rustc_driver::plugin::Registry;\n use rustc_lint::{LateContext, LateLintPass, LintContext, LintPass};\n+use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::symbol::Symbol;\n \n macro_rules! fake_lint_pass {\n@@ -26,13 +27,14 @@ macro_rules! fake_lint_pass {\n         }\n \n         impl LateLintPass<'_> for $struct {\n-            fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n+            fn check_crate(&mut self, cx: &LateContext) {\n                 let attrs = cx.tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n+                let span = cx.tcx.def_span(CRATE_DEF_ID);\n                 $(\n                     if !cx.sess().contains_name(attrs, $attr) {\n                         cx.lint(CRATE_NOT_OKAY, |lint| {\n                              let msg = format!(\"crate is not marked with #![{}]\", $attr);\n-                             lint.build(&msg).set_span(krate.module().inner).emit()\n+                             lint.build(&msg).set_span(span).emit()\n                         });\n                     }\n                 )*"}, {"sha": "4bbed5029802dbe9e43ea35cb3fd0faf148e0361", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=659b0a2fd94440c9429fff6ec9967990b219caf0", "patch": "@@ -8,13 +8,13 @@ extern crate rustc_hir;\n extern crate rustc_lint;\n #[macro_use]\n extern crate rustc_session;\n-extern crate rustc_span;\n extern crate rustc_ast;\n+extern crate rustc_span;\n \n use rustc_driver::plugin::Registry;\n-use rustc_lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::symbol::Symbol;\n-use rustc_ast::attr;\n \n declare_lint! {\n     CRATE_NOT_OKAY,\n@@ -25,13 +25,12 @@ declare_lint! {\n declare_lint_pass!(Pass => [CRATE_NOT_OKAY]);\n \n impl<'tcx> LateLintPass<'tcx> for Pass {\n-    fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext) {\n         let attrs = cx.tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n+        let span = cx.tcx.def_span(CRATE_DEF_ID);\n         if !cx.sess().contains_name(attrs, Symbol::intern(\"crate_okay\")) {\n             cx.lint(CRATE_NOT_OKAY, |lint| {\n-                lint.build(\"crate is not marked with #![crate_okay]\")\n-                    .set_span(krate.module().inner)\n-                    .emit()\n+                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit()\n             });\n         }\n     }"}, {"sha": "882f314655d8377092265a0880836e1b97bc67f3", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=659b0a2fd94440c9429fff6ec9967990b219caf0", "patch": "@@ -23,7 +23,13 @@ LL | pub fn foo() {}\n \n error: requires `sized` lang_item\n \n-error: aborting due to 3 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0432, E0603.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "42ce456d962a1562bf81db8b1762099e74059a95", "filename": "src/test/ui/privacy/privacy3.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/659b0a2fd94440c9429fff6ec9967990b219caf0/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr?ref=659b0a2fd94440c9429fff6ec9967990b219caf0", "patch": "@@ -6,6 +6,12 @@ LL |     use bar::gpriv;\n \n error: requires `sized` lang_item\n \n-error: aborting due to 2 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}]}