{"sha": "de607f1b5cc99d8ac773205702e184c2461d5e12", "node_id": "C_kwDOAAsO6NoAKGRlNjA3ZjFiNWNjOTlkOGFjNzczMjA1NzAyZTE4NGMyNDYxZDVlMTI", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2023-04-29T06:23:54Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2023-05-27T14:35:16Z"}, "message": "Add support for nested panics to miri", "tree": {"sha": "a555b7e7bf9e20f7b949013161b74e42c0bc4da5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a555b7e7bf9e20f7b949013161b74e42c0bc4da5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de607f1b5cc99d8ac773205702e184c2461d5e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de607f1b5cc99d8ac773205702e184c2461d5e12", "html_url": "https://github.com/rust-lang/rust/commit/de607f1b5cc99d8ac773205702e184c2461d5e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de607f1b5cc99d8ac773205702e184c2461d5e12/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef7f0e697bf4f0b8797527ba54f954e452253463", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7f0e697bf4f0b8797527ba54f954e452253463", "html_url": "https://github.com/rust-lang/rust/commit/ef7f0e697bf4f0b8797527ba54f954e452253463"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "25c8df43ee26c8201523021c17a69fb352acc2d6", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=de607f1b5cc99d8ac773205702e184c2461d5e12", "patch": "@@ -133,10 +133,15 @@ pub struct Thread<'mir, 'tcx> {\n     /// The join status.\n     join_status: ThreadJoinStatus,\n \n-    /// The temporary used for storing the argument of\n-    /// the call to `miri_start_panic` (the panic payload) when unwinding.\n+    /// Stack of active panic payloads for the current thread. Used for storing\n+    /// the argument of the call to `miri_start_panic` (the panic payload) when unwinding.\n     /// This is pointer-sized, and matches the `Payload` type in `src/libpanic_unwind/miri.rs`.\n-    pub(crate) panic_payload: Option<Scalar<Provenance>>,\n+    ///\n+    /// In real unwinding, the payload gets passed as an argument to the landing pad,\n+    /// which then forwards it to 'Resume'. However this argument is implicit in MIR,\n+    /// so we have to store it out-of-band. When there are multiple active unwinds,\n+    /// the innermost one is always caught first, so we can store them as a stack.\n+    pub(crate) panic_payloads: Vec<Scalar<Provenance>>,\n \n     /// Last OS error location in memory. It is a 32-bit integer.\n     pub(crate) last_error: Option<MPlaceTy<'tcx, Provenance>>,\n@@ -206,7 +211,7 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n             stack: Vec::new(),\n             top_user_relevant_frame: None,\n             join_status: ThreadJoinStatus::Joinable,\n-            panic_payload: None,\n+            panic_payloads: Vec::new(),\n             last_error: None,\n             on_stack_empty,\n         }\n@@ -216,7 +221,7 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n impl VisitTags for Thread<'_, '_> {\n     fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let Thread {\n-            panic_payload,\n+            panic_payloads: panic_payload,\n             last_error,\n             stack,\n             top_user_relevant_frame: _,\n@@ -226,7 +231,9 @@ impl VisitTags for Thread<'_, '_> {\n             on_stack_empty: _, // we assume the closure captures no GC-relevant state\n         } = self;\n \n-        panic_payload.visit_tags(visit);\n+        for payload in panic_payload {\n+            payload.visit_tags(visit);\n+        }\n         last_error.visit_tags(visit);\n         for frame in stack {\n             frame.visit_tags(visit)"}, {"sha": "7aefdfcb976afa6b7688daa1ded2c66c651e7b81", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=de607f1b5cc99d8ac773205702e184c2461d5e12", "patch": "@@ -63,8 +63,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let [payload] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n         let payload = this.read_scalar(payload)?;\n         let thread = this.active_thread_mut();\n-        assert!(thread.panic_payload.is_none(), \"the panic runtime should avoid double-panics\");\n-        thread.panic_payload = Some(payload);\n+        thread.panic_payloads.push(payload);\n \n         // Jump to the unwind block to begin unwinding.\n         this.unwind_to_block(unwind)?;\n@@ -146,7 +145,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n             // The Thread's `panic_payload` holds what was passed to `miri_start_panic`.\n             // This is exactly the second argument we need to pass to `catch_fn`.\n-            let payload = this.active_thread_mut().panic_payload.take().unwrap();\n+            let payload = this.active_thread_mut().panic_payloads.pop().unwrap();\n \n             // Push the `catch_fn` stackframe.\n             let f_instance = this.get_ptr_fn(catch_unwind.catch_fn)?.as_instance()?;"}, {"sha": "adb30714269e8a1495405de728da57dd55eaafa5", "filename": "src/tools/miri/tests/fail/panic/double_panic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs?ref=de607f1b5cc99d8ac773205702e184c2461d5e12", "patch": "@@ -1,6 +1,4 @@\n-//@error-in-other-file: the program aborted\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-//@normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@normalize-stderr-test: \"\\n  +[0-9]+:[^\\n]+\" -> \"$1\"\n //@normalize-stderr-test: \"\\n at [^\\n]+\" -> \"$1\"\n \n@@ -11,6 +9,7 @@ impl Drop for Foo {\n     }\n }\n fn main() {\n+    //~^ERROR: panic in a function that cannot unwind\n     let _foo = Foo;\n     panic!(\"first\");\n }"}, {"sha": "b6ac56f15d4b5033e28e8977d351408d1a2c9867", "filename": "src/tools/miri/tests/fail/panic/double_panic.stderr", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr?ref=de607f1b5cc99d8ac773205702e184c2461d5e12", "patch": "@@ -2,30 +2,17 @@ thread 'main' panicked at 'first', $DIR/double_panic.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n thread 'main' panicked at 'second', $DIR/double_panic.rs:LL:CC\n stack backtrace:\n-thread panicked while panicking. aborting.\n-error: abnormal termination: the program aborted execution\n-  --> RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n-   |\n-LL |     ABORT();\n-   | ^ the program aborted execution\n-   |\n-   = note: inside `std::sys::PLATFORM::abort_internal` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-note: inside `<Foo as std::ops::Drop>::drop`\n+error: abnormal termination: panic in a function that cannot unwind\n   --> $DIR/double_panic.rs:LL:CC\n    |\n-LL |         panic!(\"second\");\n-   | ^\n-   = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-note: inside `main`\n-  --> $DIR/double_panic.rs:LL:CC\n+LL | / fn main() {\n+LL | |\n+LL | |     let _foo = Foo;\n+LL | |     panic!(\"first\");\n+LL | | }\n+   | |_^ panic in a function that cannot unwind\n    |\n-LL | }\n-   | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: inside `main` at $DIR/double_panic.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "884813150ad2adb2b88599cc0295cf2d5d070be8", "filename": "src/tools/miri/tests/pass/panic/nested_panic_caught.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fnested_panic_caught.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fnested_panic_caught.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fnested_panic_caught.rs?ref=de607f1b5cc99d8ac773205702e184c2461d5e12", "patch": "@@ -0,0 +1,25 @@\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"\\n  +[0-9]+:[^\\n]+\" -> \"$1\"\n+//@normalize-stderr-test: \"\\n at [^\\n]+\" -> \"$1\"\n+\n+// Checks that nested panics work correctly.\n+\n+use std::panic::catch_unwind;\n+\n+fn double() {\n+    struct Double;\n+\n+    impl Drop for Double {\n+        fn drop(&mut self) {\n+            let _ = catch_unwind(|| panic!(\"twice\"));\n+        }\n+    }\n+\n+    let _d = Double;\n+\n+    panic!(\"once\");\n+}\n+\n+fn main() {\n+    assert!(catch_unwind(|| double()).is_err());\n+}"}, {"sha": "4e2593242df75ee81de35be48e23df2454ab8659", "filename": "src/tools/miri/tests/pass/panic/nested_panic_caught.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fnested_panic_caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de607f1b5cc99d8ac773205702e184c2461d5e12/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fnested_panic_caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fnested_panic_caught.stderr?ref=de607f1b5cc99d8ac773205702e184c2461d5e12", "patch": "@@ -0,0 +1,4 @@\n+thread 'main' panicked at 'once', $DIR/nested_panic_caught.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+thread 'main' panicked at 'twice', $DIR/nested_panic_caught.rs:LL:CC\n+stack backtrace:"}]}