{"sha": "ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZTEyMDdiYTM1ZmQ3YmFmZDkzOTFiOWYxNGEyYTNkMGU0Zjg1ZmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T11:28:46Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T11:28:46Z"}, "message": "Move external-reachability checker to trans\n\nPreparation for a fix for issue #2020", "tree": {"sha": "c067e61bf2af6432a0951137a20b150c3208a3b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c067e61bf2af6432a0951137a20b150c3208a3b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "html_url": "https://github.com/rust-lang/rust/commit/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccaace6587c1e6c1323b8f36ec4a1c07bcfe4ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccaace6587c1e6c1323b8f36ec4a1c07bcfe4ccd", "html_url": "https://github.com/rust-lang/rust/commit/ccaace6587c1e6c1323b8f36ec4a1c07bcfe4ccd"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "e36b982ff12ac0010ab2b6e0860359895b33ed37", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "patch": "@@ -29,8 +29,7 @@ export encode_def_id;\n type abbrev_map = map::hashmap<ty::t, tyencode::ty_abbrev>;\n \n type encode_ctxt = {ccx: @crate_ctxt,\n-                    type_abbrevs: abbrev_map,\n-                    reachable: reachable::map};\n+                    type_abbrevs: abbrev_map};\n \n // Path table encoding\n fn encode_name(ebml_w: ebml::writer, name: str) {\n@@ -97,7 +96,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                             module: _mod, path: [str], &index: [entry<str>]) {\n     // FIXME factor out add_to_index/start/encode_name/encode_def_id/end ops\n     for it: @item in module.items {\n-        if !ecx.reachable.contains_key(it.id) ||\n+        if !ecx.ccx.reachable.contains_key(it.id) ||\n            !ast_util::is_exported(it.ident, module) { cont; }\n         alt it.node {\n           item_const(_, _) {\n@@ -430,7 +429,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n \n     let tcx = ecx.ccx.tcx;\n     let must_write = alt item.node { item_enum(_, _) { true } _ { false } };\n-    if !must_write && !ecx.reachable.contains_key(item.id) { ret; }\n+    if !must_write && !ecx.ccx.reachable.contains_key(item.id) { ret; }\n     *index += [{val: item.id, pos: ebml_w.writer.tell()}];\n \n     alt item.node {\n@@ -598,7 +597,7 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                                nitem: @native_item,\n                                index: @mutable [entry<int>],\n                                path: ast_map::path, abi: native_abi) {\n-    if !ecx.reachable.contains_key(nitem.id) { ret; }\n+    if !ecx.ccx.reachable.contains_key(nitem.id) { ret; }\n     *index += [{val: nitem.id, pos: ebml_w.writer.tell()}];\n \n     ebml_w.start_tag(tag_items_data_item);\n@@ -861,12 +860,7 @@ fn encode_hash(ebml_w: ebml::writer, hash: str) {\n }\n \n fn encode_metadata(cx: @crate_ctxt, crate: @crate) -> [u8] {\n-\n-    let reachable = reachable::find_reachable(cx, crate.node.module);\n-    let abbrevs = ty::new_ty_hash();\n-    let ecx = @{ccx: cx,\n-                type_abbrevs: abbrevs,\n-                reachable: reachable};\n+    let ecx = @{ccx: cx, type_abbrevs: ty::new_ty_hash()};\n \n     let buf = io::mem_buffer();\n     let buf_w = io::mem_buffer_writer(buf);"}, {"sha": "6a64f2ddc2f370f223ebedd5bbc96246d195959a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "patch": "@@ -4604,6 +4604,8 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     -> (ModuleRef, link::link_meta) {\n     let sha = std::sha1::sha1();\n     let link_meta = link::build_link_meta(sess, *crate, output, sha);\n+    let reachable = reachable::find_reachable(crate.node.module, emap, tcx,\n+                                              maps.method_map);\n \n     // Append \".rc\" to crate name as LLVM module identifier.\n     //\n@@ -4658,6 +4660,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           intrinsics: intrinsics,\n           item_vals: int_hash::<ValueRef>(),\n           exp_map: emap,\n+          reachable: reachable,\n           item_symbols: int_hash::<str>(),\n           mutable main_fn: none::<ValueRef>,\n           link_meta: link_meta,"}, {"sha": "940a1848821edc0d8d12462e3c8d758eaa5a9145", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "patch": "@@ -79,6 +79,7 @@ type crate_ctxt = {\n      intrinsics: hashmap<str, ValueRef>,\n      item_vals: hashmap<ast::node_id, ValueRef>,\n      exp_map: resolve::exp_map,\n+     reachable: reachable::map,\n      item_symbols: hashmap<ast::node_id, str>,\n      mutable main_fn: option<ValueRef>,\n      link_meta: link::link_meta,"}, {"sha": "696932dd901af293073e9989a5899c5af3bb34f1", "filename": "src/rustc/middle/trans/reachable.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "patch": "@@ -5,7 +5,6 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-import middle::{resolve, ast_map, typeck};\n import syntax::ast::*;\n import syntax::{visit, ast_util};\n import syntax::ast_util::def_id_of_def;\n@@ -16,13 +15,15 @@ export map, find_reachable;\n \n type map = std::map::hashmap<node_id, ()>;\n \n-type ctx = {ccx: @middle::trans::common::crate_ctxt,\n+type ctx = {exp_map: resolve::exp_map,\n+            tcx: ty::ctxt,\n+            method_map: typeck::method_map,\n             rmap: map};\n \n-fn find_reachable(ccx: @middle::trans::common::crate_ctxt, crate_mod: _mod)\n-    -> map {\n+fn find_reachable(crate_mod: _mod, exp_map: resolve::exp_map,\n+                  tcx: ty::ctxt, method_map: typeck::method_map) -> map {\n     let rmap = std::map::int_hash();\n-    let cx = {ccx: ccx, rmap: rmap};\n+    let cx = {exp_map: exp_map, tcx: tcx, method_map: method_map, rmap: rmap};\n     traverse_public_mod(cx, crate_mod);\n     traverse_all_resources(cx, crate_mod);\n     rmap\n@@ -50,14 +51,14 @@ fn traverse_exports(cx: ctx, vis: [@view_item]) -> bool {\n }\n \n fn traverse_export(cx: ctx, exp_id: node_id) {\n-    option::may(cx.ccx.exp_map.find(exp_id)) {|defs|\n+    option::may(cx.exp_map.find(exp_id)) {|defs|\n         for def in defs { traverse_def_id(cx, def.id); }\n     }\n }\n \n fn traverse_def_id(cx: ctx, did: def_id) {\n     if did.crate != local_crate { ret; }\n-    alt cx.ccx.tcx.items.get(did.node) {\n+    alt cx.tcx.items.get(did.node) {\n       ast_map::node_item(item, _) { traverse_public_item(cx, item); }\n       ast_map::node_method(_, impl_id, _) { traverse_def_id(cx, impl_id); }\n       ast_map::node_native_item(item, _, _) { cx.rmap.insert(item.id, ()); }\n@@ -106,10 +107,10 @@ fn traverse_inline_body(cx: ctx, body: blk) {\n     fn traverse_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         alt e.node {\n           expr_path(_) {\n-            traverse_def_id(cx, def_id_of_def(cx.ccx.tcx.def_map.get(e.id)));\n+            traverse_def_id(cx, def_id_of_def(cx.tcx.def_map.get(e.id)));\n           }\n           expr_field(_, _, _) {\n-            alt cx.ccx.maps.method_map.find(e.id) {\n+            alt cx.method_map.find(e.id) {\n               some(typeck::method_static(did)) { traverse_def_id(cx, did); }\n               _ {}\n             }", "previous_filename": "src/rustc/metadata/reachable.rs"}, {"sha": "2560d02ebc443bc392783a9416a2350b94ff9071", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "patch": "@@ -28,6 +28,7 @@ mod middle {\n         mod shape;\n         mod debuginfo;\n         mod type_use;\n+        mod reachable;\n     }\n     mod ty;\n     mod ast_map;\n@@ -131,7 +132,6 @@ mod metadata {\n     mod creader;\n     mod cstore;\n     mod csearch;\n-    mod reachable;\n }\n \n mod driver {"}]}