{"sha": "91fe4ae0900c1ef361952a6c8e0647e70598741c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZmU0YWUwOTAwYzFlZjM2MTk1MmE2YzhlMDY0N2U3MDU5ODc0MWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-28T17:50:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-28T17:51:12Z"}, "message": "rustc: Joseph and the Amazing Technicolor Error Messages", "tree": {"sha": "7e4211ab5b5909be34b5b9cb2e2c2738dc385f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e4211ab5b5909be34b5b9cb2e2c2738dc385f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fe4ae0900c1ef361952a6c8e0647e70598741c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fe4ae0900c1ef361952a6c8e0647e70598741c", "html_url": "https://github.com/rust-lang/rust/commit/91fe4ae0900c1ef361952a6c8e0647e70598741c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fe4ae0900c1ef361952a6c8e0647e70598741c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "616ae95f6b4d3e427776e055ac6470010b4962a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/616ae95f6b4d3e427776e055ac6470010b4962a3", "html_url": "https://github.com/rust-lang/rust/commit/616ae95f6b4d3e427776e055ac6470010b4962a3"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "9dba5e58bbffb5195616c2854208c7e254b429f2", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/91fe4ae0900c1ef361952a6c8e0647e70598741c/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe4ae0900c1ef361952a6c8e0647e70598741c/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=91fe4ae0900c1ef361952a6c8e0647e70598741c", "patch": "@@ -3,6 +3,8 @@ import front.codemap;\n import util.common.span;\n import util.common.ty_mach;\n import std._uint;\n+import std.Term;\n+import std.io;\n import std.map;\n \n tag os {\n@@ -26,6 +28,17 @@ type cfg = rec(os os,\n type crate_metadata = rec(str name,\n                           vec[u8] data);\n \n+fn emit_diagnostic(span sp, str msg, str kind, u8 color, codemap.codemap cm) {\n+    auto lo = codemap.lookup_pos(cm, sp.lo);\n+    auto hi = codemap.lookup_pos(cm, sp.hi);\n+    io.stdout().write_str(#fmt(\"%s:%u:%u:%u:%u: \", lo.filename, lo.line,\n+                               lo.col, hi.line, hi.col));\n+    Term.fg(io.stdout().get_buf_writer(), color);\n+    io.stdout().write_str(#fmt(\"%s:\", kind));\n+    Term.reset(io.stdout().get_buf_writer());\n+    io.stdout().write_str(#fmt(\" %s\\n\", msg));\n+}\n+\n state obj session(ast.crate_num cnum, cfg targ,\n                   map.hashmap[int, crate_metadata] crates,\n                   mutable vec[@ast.meta_item] metadata,\n@@ -40,13 +53,8 @@ state obj session(ast.crate_num cnum, cfg targ,\n     }\n \n     fn span_err(span sp, str msg) {\n-        auto lo = codemap.lookup_pos(cm, sp.lo);\n-        auto hi = codemap.lookup_pos(cm, sp.hi);\n-        log_err #fmt(\"%s:%u:%u:%u:%u: error: %s\",\n-                     lo.filename,\n-                     lo.line, lo.col,\n-                     hi.line, hi.col,\n-                     msg);\n+        // FIXME: Use constants, but rustboot doesn't know how to export them.\n+        emit_diagnostic(sp, msg, \"error\", 9u8, cm);\n         fail;\n     }\n \n@@ -63,13 +71,8 @@ state obj session(ast.crate_num cnum, cfg targ,\n     }\n \n     fn span_warn(span sp, str msg) {\n-        auto lo = codemap.lookup_pos(cm, sp.lo);\n-        auto hi = codemap.lookup_pos(cm, sp.hi);\n-        log_err #fmt(\"%s:%u:%u:%u:%u: warning: %s\",\n-                     lo.filename,\n-                     lo.line, lo.col,\n-                     hi.line, hi.col,\n-                     msg);\n+        // FIXME: Use constants, but rustboot doesn't know how to export them.\n+        emit_diagnostic(sp, msg, \"warning\", 11u8, cm);\n     }\n \n     fn bug(str msg) {\n@@ -78,13 +81,9 @@ state obj session(ast.crate_num cnum, cfg targ,\n     }\n \n     fn span_unimpl(span sp, str msg) {\n-        auto lo = codemap.lookup_pos(cm, sp.lo);\n-        auto hi = codemap.lookup_pos(cm, sp.hi);\n-        log_err #fmt(\"%s:%u:%u:%u:%u: error: unimplemented %s\",\n-                     lo.filename,\n-                     lo.line, lo.col,\n-                     hi.line, hi.col,\n-                     msg);\n+        // FIXME: Use constants, but rustboot doesn't know how to export them.\n+        emit_diagnostic(sp, \"internal compiler error: unimplemented \" + msg,\n+                        \"error\", 9u8, cm);\n         fail;\n     }\n "}]}