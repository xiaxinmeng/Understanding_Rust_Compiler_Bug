{"sha": "2a990f7c0fe4d00042269beb7ee67d0082de4e07", "node_id": "C_kwDOAAsO6NoAKDJhOTkwZjdjMGZlNGQwMDA0MjI2OWJlYjdlZTY3ZDAwODJkZTRlMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T16:26:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T16:26:56Z"}, "message": "Auto merge of #99409 - tmiasko:atomic-tests, r=m-ou-se\n\nTest codegen of atomic compare-exchange with additional memory orderings\n\n* Add a test for atomic operations introduced in #97423 & #98383.\n* Add a test for fallback code generation strategy used on LLVM 12 introduced in #98385. Use a separate test case instead of a revision system since test will be gone once LLVM 12 is no longer supported.", "tree": {"sha": "8cace533f5b6f347179d2ee84607187af7573a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cace533f5b6f347179d2ee84607187af7573a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a990f7c0fe4d00042269beb7ee67d0082de4e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a990f7c0fe4d00042269beb7ee67d0082de4e07", "html_url": "https://github.com/rust-lang/rust/commit/2a990f7c0fe4d00042269beb7ee67d0082de4e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a990f7c0fe4d00042269beb7ee67d0082de4e07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c32dcbba187d1ee0dbe92dc152cb9c2f3f42900c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c32dcbba187d1ee0dbe92dc152cb9c2f3f42900c", "html_url": "https://github.com/rust-lang/rust/commit/c32dcbba187d1ee0dbe92dc152cb9c2f3f42900c"}, {"sha": "8ebaf14d0cf553e2c4bfa4fab0996a293b8e3375", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebaf14d0cf553e2c4bfa4fab0996a293b8e3375", "html_url": "https://github.com/rust-lang/rust/commit/8ebaf14d0cf553e2c4bfa4fab0996a293b8e3375"}], "stats": {"total": 110, "additions": 109, "deletions": 1}, "files": [{"sha": "bd4c63dcff1d726033c7ece216065f7beb583a44", "filename": "src/test/codegen/atomic-operations-llvm-12.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2a990f7c0fe4d00042269beb7ee67d0082de4e07/src%2Ftest%2Fcodegen%2Fatomic-operations-llvm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a990f7c0fe4d00042269beb7ee67d0082de4e07/src%2Ftest%2Fcodegen%2Fatomic-operations-llvm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fatomic-operations-llvm-12.rs?ref=2a990f7c0fe4d00042269beb7ee67d0082de4e07", "patch": "@@ -0,0 +1,84 @@\n+// Code generation of atomic operations for LLVM 12\n+// ignore-llvm-version: 13 - 99\n+// compile-flags: -O\n+#![crate_type = \"lib\"]\n+\n+use std::sync::atomic::{AtomicI32, Ordering::*};\n+\n+// CHECK-LABEL: @compare_exchange\n+#[no_mangle]\n+pub fn compare_exchange(a: &AtomicI32) {\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 10 monotonic monotonic\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 11 acquire acquire\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 12 seq_cst seq_cst\n+    let _ = a.compare_exchange(0, 10, Relaxed, Relaxed);\n+    let _ = a.compare_exchange(0, 11, Relaxed, Acquire);\n+    let _ = a.compare_exchange(0, 12, Relaxed, SeqCst);\n+\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 20 release monotonic\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 21 acq_rel acquire\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 22 seq_cst seq_cst\n+    let _ = a.compare_exchange(0, 20, Release, Relaxed);\n+    let _ = a.compare_exchange(0, 21, Release, Acquire);\n+    let _ = a.compare_exchange(0, 22, Release, SeqCst);\n+\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 30 acquire monotonic\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 31 acquire acquire\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 32 seq_cst seq_cst\n+    let _ = a.compare_exchange(0, 30, Acquire, Relaxed);\n+    let _ = a.compare_exchange(0, 31, Acquire, Acquire);\n+    let _ = a.compare_exchange(0, 32, Acquire, SeqCst);\n+\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 40 acq_rel monotonic\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 41 acq_rel acquire\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 42 seq_cst seq_cst\n+    let _ = a.compare_exchange(0, 40, AcqRel, Relaxed);\n+    let _ = a.compare_exchange(0, 41, AcqRel, Acquire);\n+    let _ = a.compare_exchange(0, 42, AcqRel, SeqCst);\n+\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 50 seq_cst monotonic\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 51 seq_cst acquire\n+    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 52 seq_cst seq_cst\n+    let _ = a.compare_exchange(0, 50, SeqCst, Relaxed);\n+    let _ = a.compare_exchange(0, 51, SeqCst, Acquire);\n+    let _ = a.compare_exchange(0, 52, SeqCst, SeqCst);\n+}\n+\n+// CHECK-LABEL: @compare_exchange_weak\n+#[no_mangle]\n+pub fn compare_exchange_weak(w: &AtomicI32) {\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 10 monotonic monotonic\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 11 acquire acquire\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 12 seq_cst seq_cst\n+    let _ = w.compare_exchange_weak(1, 10, Relaxed, Relaxed);\n+    let _ = w.compare_exchange_weak(1, 11, Relaxed, Acquire);\n+    let _ = w.compare_exchange_weak(1, 12, Relaxed, SeqCst);\n+\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 20 release monotonic\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 21 acq_rel acquire\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 22 seq_cst seq_cst\n+    let _ = w.compare_exchange_weak(1, 20, Release, Relaxed);\n+    let _ = w.compare_exchange_weak(1, 21, Release, Acquire);\n+    let _ = w.compare_exchange_weak(1, 22, Release, SeqCst);\n+\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 30 acquire monotonic\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 31 acquire acquire\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 32 seq_cst seq_cst\n+    let _ = w.compare_exchange_weak(1, 30, Acquire, Relaxed);\n+    let _ = w.compare_exchange_weak(1, 31, Acquire, Acquire);\n+    let _ = w.compare_exchange_weak(1, 32, Acquire, SeqCst);\n+\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 40 acq_rel monotonic\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 41 acq_rel acquire\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 42 seq_cst seq_cst\n+    let _ = w.compare_exchange_weak(1, 40, AcqRel, Relaxed);\n+    let _ = w.compare_exchange_weak(1, 41, AcqRel, Acquire);\n+    let _ = w.compare_exchange_weak(1, 42, AcqRel, SeqCst);\n+\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 50 seq_cst monotonic\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 51 seq_cst acquire\n+    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 52 seq_cst seq_cst\n+    let _ = w.compare_exchange_weak(1, 50, SeqCst, Relaxed);\n+    let _ = w.compare_exchange_weak(1, 51, SeqCst, Acquire);\n+    let _ = w.compare_exchange_weak(1, 52, SeqCst, SeqCst);\n+}"}, {"sha": "771cf58725aaa7e4d7b36afd9f3483d363e3af2c", "filename": "src/test/codegen/atomic-operations.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a990f7c0fe4d00042269beb7ee67d0082de4e07/src%2Ftest%2Fcodegen%2Fatomic-operations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a990f7c0fe4d00042269beb7ee67d0082de4e07/src%2Ftest%2Fcodegen%2Fatomic-operations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fatomic-operations.rs?ref=2a990f7c0fe4d00042269beb7ee67d0082de4e07", "patch": "@@ -1,5 +1,5 @@\n // Code generation of atomic operations.\n-//\n+// min-llvm-version: 13.0\n // compile-flags: -O\n #![crate_type = \"lib\"]\n \n@@ -9,20 +9,32 @@ use std::sync::atomic::{AtomicI32, Ordering::*};\n #[no_mangle]\n pub fn compare_exchange(a: &AtomicI32) {\n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 10 monotonic monotonic\n+    // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 11 monotonic acquire\n+    // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 12 monotonic seq_cst\n     let _ = a.compare_exchange(0, 10, Relaxed, Relaxed);\n+    let _ = a.compare_exchange(0, 11, Relaxed, Acquire);\n+    let _ = a.compare_exchange(0, 12, Relaxed, SeqCst);\n \n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 20 release monotonic\n+    // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 21 release acquire\n+    // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 22 release seq_cst\n     let _ = a.compare_exchange(0, 20, Release, Relaxed);\n+    let _ = a.compare_exchange(0, 21, Release, Acquire);\n+    let _ = a.compare_exchange(0, 22, Release, SeqCst);\n \n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 30 acquire monotonic\n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 31 acquire acquire\n+    // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 32 acquire seq_cst\n     let _ = a.compare_exchange(0, 30, Acquire, Relaxed);\n     let _ = a.compare_exchange(0, 31, Acquire, Acquire);\n+    let _ = a.compare_exchange(0, 32, Acquire, SeqCst);\n \n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 40 acq_rel monotonic\n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 41 acq_rel acquire\n+    // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 42 acq_rel seq_cst\n     let _ = a.compare_exchange(0, 40, AcqRel, Relaxed);\n     let _ = a.compare_exchange(0, 41, AcqRel, Acquire);\n+    let _ = a.compare_exchange(0, 42, AcqRel, SeqCst);\n \n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 50 seq_cst monotonic\n     // CHECK: cmpxchg {{i32\\*|ptr}} %{{.*}}, i32 0, i32 51 seq_cst acquire\n@@ -36,20 +48,32 @@ pub fn compare_exchange(a: &AtomicI32) {\n #[no_mangle]\n pub fn compare_exchange_weak(w: &AtomicI32) {\n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 10 monotonic monotonic\n+    // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 11 monotonic acquire\n+    // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 12 monotonic seq_cst\n     let _ = w.compare_exchange_weak(1, 10, Relaxed, Relaxed);\n+    let _ = w.compare_exchange_weak(1, 11, Relaxed, Acquire);\n+    let _ = w.compare_exchange_weak(1, 12, Relaxed, SeqCst);\n \n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 20 release monotonic\n+    // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 21 release acquire\n+    // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 22 release seq_cst\n     let _ = w.compare_exchange_weak(1, 20, Release, Relaxed);\n+    let _ = w.compare_exchange_weak(1, 21, Release, Acquire);\n+    let _ = w.compare_exchange_weak(1, 22, Release, SeqCst);\n \n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 30 acquire monotonic\n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 31 acquire acquire\n+    // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 32 acquire seq_cst\n     let _ = w.compare_exchange_weak(1, 30, Acquire, Relaxed);\n     let _ = w.compare_exchange_weak(1, 31, Acquire, Acquire);\n+    let _ = w.compare_exchange_weak(1, 32, Acquire, SeqCst);\n \n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 40 acq_rel monotonic\n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 41 acq_rel acquire\n+    // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 42 acq_rel seq_cst\n     let _ = w.compare_exchange_weak(1, 40, AcqRel, Relaxed);\n     let _ = w.compare_exchange_weak(1, 41, AcqRel, Acquire);\n+    let _ = w.compare_exchange_weak(1, 42, AcqRel, SeqCst);\n \n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 50 seq_cst monotonic\n     // CHECK: cmpxchg weak {{i32\\*|ptr}} %{{.*}}, i32 1, i32 51 seq_cst acquire"}]}