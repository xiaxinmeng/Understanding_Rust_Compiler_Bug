{"sha": "fd109fb587904cfecc1149e068814bfd38feb83c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMTA5ZmI1ODc5MDRjZmVjYzExNDllMDY4ODE0YmZkMzhmZWI4M2M=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-09T20:17:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-09T20:17:37Z"}, "message": "Merge #8784\n\n8784: feat: auto-insert `}` when typing `{` in use item r=jonas-schievink a=jonas-schievink\n\n![Peek 2021-05-09 22-14](https://user-images.githubusercontent.com/1786438/117585742-45983f80-b114-11eb-80fc-d44f480fd012.gif)\r\n\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/8636\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "f01047f151a5ccd4ffa1dcb56b2af0b5721df01b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01047f151a5ccd4ffa1dcb56b2af0b5721df01b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd109fb587904cfecc1149e068814bfd38feb83c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmENhCRBK7hj4Ov3rIwAAF+8IAAOfnLBFlXp40AXLkU+H9a2o\nXka+/d2KYAeUmn8nZx6x+uczTHtKvLeDyUPWBi/nnLWAqz6gR0DnByPQIgoafP6n\nFXOjJXDKzqzSxgmrUHsw2T9J02RPyFxss9EX3JjSKcdIrBJDQRritKBQ68zk67Hj\nbu07EN4RYrv55+6kseYeB1Jc2gHw6n1iaUGrc0fBPNIoIO8x71RZgPXW+xNYE9Gq\nESU8At0p0yS7Y3C/4CYzY9FJYumQpKTo/BfC5yj2rMViKlW/PwJTihqBbInoFjN6\n2BsOhy4/o7lN8SwGMfrVKXbxdCi46scfjiOMDiKBZ3bsoMVrbtZ/aQoxQ0Rj1ng=\n=1LN1\n-----END PGP SIGNATURE-----\n", "payload": "tree f01047f151a5ccd4ffa1dcb56b2af0b5721df01b\nparent 75a5c0a5348950078b6572271d39740da9fba069\nparent 64f97fb2ad630a9194a2a064292718ccc00cb17d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620591457 +0000\ncommitter GitHub <noreply@github.com> 1620591457 +0000\n\nMerge #8784\n\n8784: feat: auto-insert `}` when typing `{` in use item r=jonas-schievink a=jonas-schievink\n\n![Peek 2021-05-09 22-14](https://user-images.githubusercontent.com/1786438/117585742-45983f80-b114-11eb-80fc-d44f480fd012.gif)\r\n\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/8636\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd109fb587904cfecc1149e068814bfd38feb83c", "html_url": "https://github.com/rust-lang/rust/commit/fd109fb587904cfecc1149e068814bfd38feb83c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd109fb587904cfecc1149e068814bfd38feb83c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a5c0a5348950078b6572271d39740da9fba069", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a5c0a5348950078b6572271d39740da9fba069", "html_url": "https://github.com/rust-lang/rust/commit/75a5c0a5348950078b6572271d39740da9fba069"}, {"sha": "64f97fb2ad630a9194a2a064292718ccc00cb17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f97fb2ad630a9194a2a064292718ccc00cb17d", "html_url": "https://github.com/rust-lang/rust/commit/64f97fb2ad630a9194a2a064292718ccc00cb17d"}], "stats": {"total": 150, "additions": 131, "deletions": 19}, "files": [{"sha": "4ad49eca0dac5a6d20920cf7c7b0b609ebfcd8d7", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 131, "deletions": 19, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/fd109fb587904cfecc1149e068814bfd38feb83c/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd109fb587904cfecc1149e068814bfd38feb83c/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=fd109fb587904cfecc1149e068814bfd38feb83c", "patch": "@@ -88,7 +88,7 @@ fn on_char_typed_inner(\n }\n \n /// Inserts a closing `}` when the user types an opening `{`, wrapping an existing expression in a\n-/// block.\n+/// block, or a part of a `use` item.\n fn on_opening_brace_typed(file: &Parse<SourceFile>, offset: TextSize) -> Option<TextEdit> {\n     if !stdx::always!(file.tree().syntax().text().char_at(offset) == Some('{')) {\n         return None;\n@@ -99,30 +99,59 @@ fn on_opening_brace_typed(file: &Parse<SourceFile>, offset: TextSize) -> Option<\n     // Remove the `{` to get a better parse tree, and reparse\n     let file = file.reparse(&Indel::delete(brace_token.text_range()));\n \n-    let mut expr: ast::Expr = find_node_at_offset(file.tree().syntax(), offset)?;\n-    if expr.syntax().text_range().start() != offset {\n-        return None;\n+    if let Some(edit) = brace_expr(&file.tree(), offset) {\n+        return Some(edit);\n     }\n \n-    // Enclose the outermost expression starting at `offset`\n-    while let Some(parent) = expr.syntax().parent() {\n-        if parent.text_range().start() != expr.syntax().text_range().start() {\n-            break;\n-        }\n+    if let Some(edit) = brace_use_path(&file.tree(), offset) {\n+        return Some(edit);\n+    }\n \n-        match ast::Expr::cast(parent) {\n-            Some(parent) => expr = parent,\n-            None => break,\n+    return None;\n+\n+    fn brace_use_path(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+        let segment: ast::PathSegment = find_node_at_offset(file.syntax(), offset)?;\n+        if segment.syntax().text_range().start() != offset {\n+            return None;\n         }\n-    }\n \n-    // If it's a statement in a block, we don't know how many statements should be included\n-    if ast::ExprStmt::can_cast(expr.syntax().parent()?.kind()) {\n-        return None;\n+        let tree: ast::UseTree = find_node_at_offset(file.syntax(), offset)?;\n+\n+        Some(TextEdit::insert(\n+            tree.syntax().text_range().end() + TextSize::of(\"{\"),\n+            \"}\".to_string(),\n+        ))\n     }\n \n-    // Insert `}` right after the expression.\n-    Some(TextEdit::insert(expr.syntax().text_range().end() + TextSize::of(\"{\"), \"}\".to_string()))\n+    fn brace_expr(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+        let mut expr: ast::Expr = find_node_at_offset(file.syntax(), offset)?;\n+        if expr.syntax().text_range().start() != offset {\n+            return None;\n+        }\n+\n+        // Enclose the outermost expression starting at `offset`\n+        while let Some(parent) = expr.syntax().parent() {\n+            if parent.text_range().start() != expr.syntax().text_range().start() {\n+                break;\n+            }\n+\n+            match ast::Expr::cast(parent) {\n+                Some(parent) => expr = parent,\n+                None => break,\n+            }\n+        }\n+\n+        // If it's a statement in a block, we don't know how many statements should be included\n+        if ast::ExprStmt::can_cast(expr.syntax().parent()?.kind()) {\n+            return None;\n+        }\n+\n+        // Insert `}` right after the expression.\n+        Some(TextEdit::insert(\n+            expr.syntax().text_range().end() + TextSize::of(\"{\"),\n+            \"}\".to_string(),\n+        ))\n+    }\n }\n \n /// Returns an edit which should be applied after `=` was typed. Primarily,\n@@ -440,7 +469,7 @@ fn foo() -> { 92 }\n     }\n \n     #[test]\n-    fn adds_closing_brace() {\n+    fn adds_closing_brace_for_expr() {\n         type_char(\n             '{',\n             r#\"\n@@ -519,4 +548,87 @@ fn f() {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn adds_closing_brace_for_use_tree() {\n+        type_char(\n+            '{',\n+            r#\"\n+use some::$0Path;\n+            \"#,\n+            r#\"\n+use some::{Path};\n+            \"#,\n+        );\n+        type_char(\n+            '{',\n+            r#\"\n+use some::{Path, $0Other};\n+            \"#,\n+            r#\"\n+use some::{Path, {Other}};\n+            \"#,\n+        );\n+        type_char(\n+            '{',\n+            r#\"\n+use some::{$0Path, Other};\n+            \"#,\n+            r#\"\n+use some::{{Path}, Other};\n+            \"#,\n+        );\n+        type_char(\n+            '{',\n+            r#\"\n+use some::path::$0to::Item;\n+            \"#,\n+            r#\"\n+use some::path::{to::Item};\n+            \"#,\n+        );\n+        type_char(\n+            '{',\n+            r#\"\n+use some::$0path::to::Item;\n+            \"#,\n+            r#\"\n+use some::{path::to::Item};\n+            \"#,\n+        );\n+        type_char(\n+            '{',\n+            r#\"\n+use $0some::path::to::Item;\n+            \"#,\n+            r#\"\n+use {some::path::to::Item};\n+            \"#,\n+        );\n+        type_char(\n+            '{',\n+            r#\"\n+use some::path::$0to::{Item};\n+            \"#,\n+            r#\"\n+use some::path::{to::{Item}};\n+            \"#,\n+        );\n+        type_char(\n+            '{',\n+            r#\"\n+use $0Thing as _;\n+            \"#,\n+            r#\"\n+use {Thing as _};\n+            \"#,\n+        );\n+\n+        type_char_noop(\n+            '{',\n+            r#\"\n+use some::pa$0th::to::Item;\n+            \"#,\n+        );\n+    }\n }"}]}