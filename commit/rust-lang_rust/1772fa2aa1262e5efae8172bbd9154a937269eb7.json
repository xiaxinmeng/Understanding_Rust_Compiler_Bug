{"sha": "1772fa2aa1262e5efae8172bbd9154a937269eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NzJmYTJhYTEyNjJlNWVmYWU4MTcyYmJkOTE1NGE5MzcyNjllYjc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-22T22:46:52Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T10:09:23Z"}, "message": "Rename Box::*_nonnull_raw to *_non_null_raw", "tree": {"sha": "f9ba4b85556f9086671ed9024796568f0b288d73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ba4b85556f9086671ed9024796568f0b288d73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1772fa2aa1262e5efae8172bbd9154a937269eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1772fa2aa1262e5efae8172bbd9154a937269eb7", "html_url": "https://github.com/rust-lang/rust/commit/1772fa2aa1262e5efae8172bbd9154a937269eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1772fa2aa1262e5efae8172bbd9154a937269eb7/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "html_url": "https://github.com/rust-lang/rust/commit/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "95ba517a7a9cf0e98f45be1f795017040c3def9a", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1772fa2aa1262e5efae8172bbd9154a937269eb7", "patch": "@@ -286,7 +286,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Arc { ptr: Box::into_nonnull_raw(x), phantom: PhantomData }\n+        Arc { ptr: Box::into_non_null_raw(x), phantom: PhantomData }\n     }\n \n     /// Returns the contained value, if the `Arc` has exactly one strong reference.\n@@ -991,7 +991,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Box::into_nonnull_raw(box ArcInner {\n+                ptr: Box::into_non_null_raw(box ArcInner {\n                     strong: atomic::AtomicUsize::new(0),\n                     weak: atomic::AtomicUsize::new(1),\n                     data: uninitialized(),"}, {"sha": "a1563483f1e26543963d13dd515567522277ae6b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1772fa2aa1262e5efae8172bbd9154a937269eb7", "patch": "@@ -290,13 +290,13 @@ impl<T: ?Sized> Box<T> {\n     /// ```\n     /// fn main() {\n     ///     let x = Box::new(5);\n-    ///     let ptr = Box::into_nonnull_raw(x);\n-    ///     let x = unsafe { Box::from_nonnull_raw(ptr) };\n+    ///     let ptr = Box::into_non_null_raw(x);\n+    ///     let x = unsafe { Box::from_non_null_raw(ptr) };\n     /// }\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     #[inline]\n-    pub unsafe fn from_nonnull_raw(u: NonNull<T>) -> Self {\n+    pub unsafe fn from_non_null_raw(u: NonNull<T>) -> Self {\n         Box(u.into())\n     }\n \n@@ -323,7 +323,7 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n-        Box::into_nonnull_raw(b).as_ptr()\n+        Box::into_non_null_raw(b).as_ptr()\n     }\n \n     /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n@@ -333,34 +333,34 @@ impl<T: ?Sized> Box<T> {\n     /// caller should properly destroy `T` and release the memory. The\n     /// proper way to do so is to either convert the `NonNull<T>` pointer:\n     ///\n-    /// - Into a `Box` with the [`Box::from_nonnull_raw`] function.\n+    /// - Into a `Box` with the [`Box::from_non_null_raw`] function.\n     ///\n     /// - Into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n     ///   function.\n     ///\n     /// Note: this is an associated function, which means that you have\n-    /// to call it as `Box::into_nonnull_raw(b)`\n-    /// instead of `b.into_nonnull_raw()`. This\n+    /// to call it as `Box::into_non_null_raw(b)`\n+    /// instead of `b.into_non_null_raw()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n-    /// [`Box::from_nonnull_raw`]: struct.Box.html#method.from_nonnull_raw\n+    /// [`Box::from_non_null_raw`]: struct.Box.html#method.from_non_null_raw\n     /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// fn main() {\n     ///     let x = Box::new(5);\n-    ///     let ptr = Box::into_nonnull_raw(x);\n+    ///     let ptr = Box::into_non_null_raw(x);\n     /// }\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     #[inline]\n-    pub fn into_nonnull_raw(b: Box<T>) -> NonNull<T> {\n+    pub fn into_non_null_raw(b: Box<T>) -> NonNull<T> {\n         Box::into_unique(b).into()\n     }\n \n-    #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_nonnull_raw instead\")]\n+    #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_non_null_raw instead\")]\n     #[inline]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n         let unique = b.0;"}, {"sha": "8ec0110060aa6c95a5372db1eb474475f041e39f", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=1772fa2aa1262e5efae8172bbd9154a937269eb7", "patch": "@@ -157,7 +157,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(Box::into_nonnull_raw(node));\n+            let node = Some(Box::into_non_null_raw(node));\n \n             match self.head {\n                 None => self.tail = node,\n@@ -192,7 +192,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(Box::into_nonnull_raw(node));\n+            let node = Some(Box::into_non_null_raw(node));\n \n             match self.tail {\n                 None => self.head = node,\n@@ -986,7 +986,7 @@ impl<'a, T> IterMut<'a, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(Box::into_nonnull_raw(box Node {\n+                let node = Some(Box::into_non_null_raw(box Node {\n                     next: Some(head),\n                     prev: Some(prev),\n                     element,"}, {"sha": "c3270e4e21d938aa3ed9a2db30bd9f4337dc21a4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1772fa2aa1262e5efae8172bbd9154a937269eb7/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1772fa2aa1262e5efae8172bbd9154a937269eb7", "patch": "@@ -311,7 +311,7 @@ impl<T> Rc<T> {\n             // pointers, which ensures that the weak destructor never frees\n             // the allocation while the strong destructor is running, even\n             // if the weak pointer is stored inside the strong one.\n-            ptr: Box::into_nonnull_raw(box RcBox {\n+            ptr: Box::into_non_null_raw(box RcBox {\n                 strong: Cell::new(1),\n                 weak: Cell::new(1),\n                 value,\n@@ -1190,7 +1190,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Box::into_nonnull_raw(box RcBox {\n+                ptr: Box::into_non_null_raw(box RcBox {\n                     strong: Cell::new(0),\n                     weak: Cell::new(1),\n                     value: uninitialized(),"}]}