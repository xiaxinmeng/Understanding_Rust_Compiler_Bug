{"sha": "c2b153b133d244015e4d174d893e75a733db12df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYjE1M2IxMzNkMjQ0MDE1ZTRkMTc0ZDg5M2U3NWE3MzNkYjEyZGY=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-01-14T00:46:30Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-01-25T18:57:35Z"}, "message": "Expand the sort docs", "tree": {"sha": "92782faf278cfa5a2f9c4c1186b87c55416cf688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92782faf278cfa5a2f9c4c1186b87c55416cf688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b153b133d244015e4d174d893e75a733db12df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b153b133d244015e4d174d893e75a733db12df", "html_url": "https://github.com/rust-lang/rust/commit/c2b153b133d244015e4d174d893e75a733db12df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b153b133d244015e4d174d893e75a733db12df/comments", "author": null, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3568f14bafa2bf62c50fd8589b48be6e31991d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3568f14bafa2bf62c50fd8589b48be6e31991d", "html_url": "https://github.com/rust-lang/rust/commit/2a3568f14bafa2bf62c50fd8589b48be6e31991d"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "211394180e86135c48e899b8264dbcd22a7abbc4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c2b153b133d244015e4d174d893e75a733db12df/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b153b133d244015e4d174d893e75a733db12df/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c2b153b133d244015e4d174d893e75a733db12df", "patch": "@@ -1064,11 +1064,17 @@ impl<T> [T] {\n \n     /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`.\n     ///\n-    /// This sort is stable and `O(n log n)` worst-case. \n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n-    /// # Current Implementation\n+    /// # Current implementation\n     /// \n-    /// The current implementation allocates temporary storage half the size of `self`.\n+    /// The current algorithm is an adaptive, iterative merge sort inspired by\n+    /// [timsort](https://en.wikipedia.org/wiki/Timsort).\n+    /// It is designed to be very fast in cases where the slice is nearly sorted, or consists of\n+    /// two or more sorted sequences concatenated one after another.\n+    ///\n+    /// Also, it allocates temporary storage half the size of `self`, but for short slices a\n+    /// non-allocating insertion sort is used instead.\n     ///\n     /// # Examples\n     ///\n@@ -1086,11 +1092,19 @@ impl<T> [T] {\n         self.sort_by(|a, b| a.cmp(b))\n     }\n \n-    /// Sorts the slice, in place, using `f` to extract a key by which to\n-    /// order the sort by.\n+    /// Sorts the slice using `f` to extract a key to compare elements by.\n+    ///\n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// The current algorithm is an adaptive, iterative merge sort inspired by\n+    /// [timsort](https://en.wikipedia.org/wiki/Timsort).\n+    /// It is designed to be very fast in cases where the slice is nearly sorted, or consists of\n+    /// two or more sorted sequences concatenated one after another.\n     ///\n-    /// This sort is stable and `O(n log n)` worst-case, but allocates\n-    /// temporary storage half the size of `self`.\n+    /// Also, it allocates temporary storage half the size of `self`, but for short slices a\n+    /// non-allocating insertion sort is used instead.\n     ///\n     /// # Examples\n     ///\n@@ -1108,11 +1122,19 @@ impl<T> [T] {\n         self.sort_by(|a, b| f(a).cmp(&f(b)))\n     }\n \n-    /// Sorts the slice, in place, using `compare` to compare\n-    /// elements.\n+    /// Sorts the slice using `compare` to compare elements.\n+    ///\n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// The current algorithm is an adaptive, iterative merge sort inspired by\n+    /// [timsort](https://en.wikipedia.org/wiki/Timsort).\n+    /// It is designed to be very fast in cases where the slice is nearly sorted, or consists of\n+    /// two or more sorted sequences concatenated one after another.\n     ///\n-    /// This sort is stable and `O(n log n)` worst-case, but allocates\n-    /// temporary storage half the size of `self`.\n+    /// Also, it allocates temporary storage half the size of `self`, but for short slices a\n+    /// non-allocating insertion sort is used instead.\n     ///\n     /// # Examples\n     ///"}]}