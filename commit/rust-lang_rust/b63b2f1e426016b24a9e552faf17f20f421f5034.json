{"sha": "b63b2f1e426016b24a9e552faf17f20f421f5034", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2M2IyZjFlNDI2MDE2YjI0YTllNTUyZmFmMTdmMjBmNDIxZjUwMzQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-30T18:31:56Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-07-08T21:55:57Z"}, "message": "PR feedback\n\n- Add `:Sized` assertion in interpreter impl\n- Use `Scalar::from_bool` instead of `ScalarInt: From<bool>`\n- Remove unneeded comparison in intrinsic typeck\n- Make this UB to call with undef, not just return undef in that case", "tree": {"sha": "658ac690110bf23bcc83092face25a06de6bf989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/658ac690110bf23bcc83092face25a06de6bf989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b63b2f1e426016b24a9e552faf17f20f421f5034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b63b2f1e426016b24a9e552faf17f20f421f5034", "html_url": "https://github.com/rust-lang/rust/commit/b63b2f1e426016b24a9e552faf17f20f421f5034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b63b2f1e426016b24a9e552faf17f20f421f5034/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2456495a260827217d3c612d6c577c2f165c61eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2456495a260827217d3c612d6c577c2f165c61eb", "html_url": "https://github.com/rust-lang/rust/commit/2456495a260827217d3c612d6c577c2f165c61eb"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "ad9cf3e7d2fe9b39ff56da6088261455cf60753c", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b63b2f1e426016b24a9e552faf17f20f421f5034/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63b2f1e426016b24a9e552faf17f20f421f5034/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=b63b2f1e426016b24a9e552faf17f20f421f5034", "patch": "@@ -570,11 +570,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         rhs: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n     ) -> InterpResult<'tcx, Scalar<M::PointerTag>> {\n         let layout = self.layout_of(lhs.layout.ty.builtin_deref(true).unwrap().ty)?;\n+        assert!(!layout.is_unsized());\n \n         let lhs = self.read_scalar(lhs)?.check_init()?;\n         let rhs = self.read_scalar(rhs)?.check_init()?;\n         let lhs_bytes = self.memory.read_bytes(lhs, layout.size)?;\n         let rhs_bytes = self.memory.read_bytes(rhs, layout.size)?;\n-        Ok(Scalar::Int((lhs_bytes == rhs_bytes).into()))\n+        Ok(Scalar::from_bool(lhs_bytes == rhs_bytes))\n     }\n }"}, {"sha": "6661df21ed952cef4b2748a90e4748d75a6fd491", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b63b2f1e426016b24a9e552faf17f20f421f5034/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63b2f1e426016b24a9e552faf17f20f421f5034/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=b63b2f1e426016b24a9e552faf17f20f421f5034", "patch": "@@ -381,11 +381,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::nontemporal_store => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n \n             sym::raw_eq => {\n-                let param_count = if intrinsic_name == sym::raw_eq { 2 } else { 1 };\n                 let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0) };\n                 let param_ty =\n                     tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0));\n-                (1, vec![param_ty; param_count], tcx.types.bool)\n+                (1, vec![param_ty; 2], tcx.types.bool)\n             }\n \n             other => {"}, {"sha": "238f00e41b3afae97c1b765cd753f197958b0dd5", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b63b2f1e426016b24a9e552faf17f20f421f5034/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63b2f1e426016b24a9e552faf17f20f421f5034/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=b63b2f1e426016b24a9e552faf17f20f421f5034", "patch": "@@ -1924,8 +1924,12 @@ extern \"rust-intrinsic\" {\n     ///\n     /// # Safety\n     ///\n-    /// This doesn't take into account padding, so if `T` has padding\n-    /// the result will be `undef`, which cannot be exposed to safe code.\n+    /// It's UB to call this if any of the *bytes* in `*a` or `*b` are uninitialized.\n+    /// Note that this is a stricter criterion than just the *values* being\n+    /// fully-initialized: if `T` has padding, it's UB to call this intrinsic.\n+    ///\n+    /// (The implementation is allowed to branch on the results of comparisons,\n+    /// which is UB if any of their inputs are `undef`.)\n     #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_intrinsic_raw_eq\", issue = \"none\")]\n     pub fn raw_eq<T>(a: &T, b: &T) -> bool;"}]}