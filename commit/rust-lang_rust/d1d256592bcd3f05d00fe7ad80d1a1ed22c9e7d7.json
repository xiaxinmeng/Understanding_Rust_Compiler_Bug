{"sha": "d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDI1NjU5MmJjZDNmMDVkMDBmZTdhZDgwZDFhMWVkMjJjOWU3ZDc=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-06T13:58:32Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-08T11:13:48Z"}, "message": "suggest to add move keyword for generator", "tree": {"sha": "eb2ec9c537cf2bbaaf70fdd3e1744479d3b690d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2ec9c537cf2bbaaf70fdd3e1744479d3b690d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "html_url": "https://github.com/rust-lang/rust/commit/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd2356fe7d8500a2b555a8b43761625e17223860", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2356fe7d8500a2b555a8b43761625e17223860", "html_url": "https://github.com/rust-lang/rust/commit/dd2356fe7d8500a2b555a8b43761625e17223860"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "2f9df7bd77e847bd99e0e5850f613ca2a35dc015", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "patch": "@@ -750,6 +750,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let kind_place = kind.filter(|_| place_desc.is_some()).map(|k| (k, place_span.0));\n         let explanation = self.explain_why_borrow_contains_point(location, &borrow, kind_place);\n \n+        debug!(\n+            \"report_borrowed_value_does_not_live_long_enough(place_desc: {:?}, explanation: {:?})\",\n+            place_desc,\n+            explanation\n+        );\n         let err = match (place_desc, explanation) {\n             (Some(_), _) if self.is_place_thread_local(root_place) => {\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span)\n@@ -790,6 +795,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 span,\n                 &format!(\"`{}`\", name),\n             ),\n+            (\n+                Some(ref name),\n+                BorrowExplanation::MustBeValidFor {\n+                    category: category @ ConstraintCategory::OpaqueType,\n+                    from_closure: false,\n+                    ref region_name,\n+                    span,\n+                    ..\n+                },\n+\n+            ) if borrow_spans.for_generator() => self.report_escaping_closure_capture(\n+                borrow_spans.args_or_use(),\n+                borrow_span,\n+                region_name,\n+                category,\n+                span,\n+                &format!(\"`{}`\", name),\n+            ),\n             (\n                 ref name,\n                 BorrowExplanation::MustBeValidFor {\n@@ -1214,6 +1237,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             ConstraintCategory::Return => {\n                 err.span_note(constraint_span, \"closure is returned here\");\n             }\n+            ConstraintCategory::OpaqueType => {\n+                err.span_note(constraint_span, \"generator is returned here\");\n+            }\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n                 err.span_note("}, {"sha": "5354b45f92d0a236dfd90f1cfa5f0d69db94ed34", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "patch": "@@ -17,6 +17,7 @@ use syntax_pos::Span;\n \n mod find_use;\n \n+#[derive(Debug)]\n pub(in crate::borrow_check) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span),\n     UsedLaterInLoop(LaterUseKind, Span),\n@@ -35,7 +36,7 @@ pub(in crate::borrow_check) enum BorrowExplanation {\n     Unexplained,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n pub(in crate::borrow_check) enum LaterUseKind {\n     TraitCapture,\n     ClosureCapture,"}, {"sha": "f004b4180ddc9c30fd424f4bfe8b21f66cb76434", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed?ref=d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+// run-rustfix\n+\n+fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+    let x = 0u32;\n+    Box::new(async move { x } )\n+    //~^ ERROR E0373\n+}\n+\n+fn main() {\n+    let _foo = foo();\n+}"}, {"sha": "4f35fd52ca39beed26bfb01c5becd7ef41c7e593", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs?ref=d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "patch": "@@ -1,9 +1,12 @@\n // edition:2018\n-#![feature(async_closure,async_await)]\n+// run-rustfix\n+\n fn foo() -> Box<impl std::future::Future<Output = u32>> {\n     let x = 0u32;\n     Box::new(async { x } )\n     //~^ ERROR E0373\n }\n \n-fn main() {}\n+fn main() {\n+    let _foo = foo();\n+}"}, {"sha": "af17ecc86fbf9b1d52d8b942e91a07189019daaa", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "patch": "@@ -1,5 +1,5 @@\n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n-  --> $DIR/async-borrowck-escaping-block-error.rs:5:20\n+  --> $DIR/async-borrowck-escaping-block-error.rs:6:20\n    |\n LL |     Box::new(async { x } )\n    |                    ^^-^^\n@@ -8,7 +8,7 @@ LL |     Box::new(async { x } )\n    |                    may outlive borrowed value `x`\n    |\n note: generator is returned here\n-  --> $DIR/async-borrowck-escaping-block-error.rs:3:13\n+  --> $DIR/async-borrowck-escaping-block-error.rs:4:13\n    |\n LL | fn foo() -> Box<impl std::future::Future<Output = u32>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}