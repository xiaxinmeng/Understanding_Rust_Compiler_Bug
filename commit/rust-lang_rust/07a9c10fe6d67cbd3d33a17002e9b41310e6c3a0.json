{"sha": "07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "node_id": "C_kwDOAAsO6NoAKDA3YTljMTBmZTZkNjdjYmQzZDMzYTE3MDAyZTliNDEzMTBlNmMzYTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-09T16:32:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-09T16:32:19Z"}, "message": "Rollup merge of #101612 - tmiasko:repeat128, r=lcnr\n\nFix code generation of `Rvalue::Repeat` with 128 bit values\n\nCloses #101585.", "tree": {"sha": "ba410d3e40134b96bf3083f0d5ad02656baff2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba410d3e40134b96bf3083f0d5ad02656baff2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjG2qTCRBK7hj4Ov3rIwAAegsIAGkyRE5FQNI40MYEvjXEcmFM\nGSQTZ6DvCuvRnYBkNr+GxXxUF1aGUKtgJmo3Kuv55NbR0Ox/UP1Dhh8Oy8EBCN+0\neHlz/iqimaAXmwn9Qml33G300VcRlTEVEzuD8amau6aBlXOmq6xTPiM7gBdMJscQ\nUnf3fd/Itg3Ry8S9k8Qf2vwYQJEEJeqqM8FEg2+ioZO236NopDLE5GWvrkEw94yk\nHmWf3GT4K8hnUuYW05WwUJ2e/QdfssQol+inDRXqXZIiksSQuENVQBrR7HoI2HXA\neNXqi0SP+pWK7djz5JKueb0ELtCkpeeQUz1AT3GxiDLblZUcUMaUHnmiD4U8jtA=\n=YEzb\n-----END PGP SIGNATURE-----\n", "payload": "tree ba410d3e40134b96bf3083f0d5ad02656baff2cc\nparent ae4973281bee496f107ed9db5c3ff1487981af4e\nparent e4d3abfe7720c05f0f2e752d3054236341cd5e9e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662741139 +0530\ncommitter GitHub <noreply@github.com> 1662741139 +0530\n\nRollup merge of #101612 - tmiasko:repeat128, r=lcnr\n\nFix code generation of `Rvalue::Repeat` with 128 bit values\n\nCloses #101585.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "html_url": "https://github.com/rust-lang/rust/commit/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4973281bee496f107ed9db5c3ff1487981af4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4973281bee496f107ed9db5c3ff1487981af4e", "html_url": "https://github.com/rust-lang/rust/commit/ae4973281bee496f107ed9db5c3ff1487981af4e"}, {"sha": "e4d3abfe7720c05f0f2e752d3054236341cd5e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d3abfe7720c05f0f2e752d3054236341cd5e9e", "html_url": "https://github.com/rust-lang/rust/commit/e4d3abfe7720c05f0f2e752d3054236341cd5e9e"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "acee9134fb96e48a26c3d4eb7a465c8d66ac6bf9", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "patch": "@@ -215,7 +215,11 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn const_to_opt_uint(&self, v: &'ll Value) -> Option<u64> {\n-        try_as_const_integral(v).map(|v| unsafe { llvm::LLVMConstIntGetZExtValue(v) })\n+        try_as_const_integral(v).and_then(|v| unsafe {\n+            let mut i = 0u64;\n+            let success = llvm::LLVMRustConstIntGetZExtValue(v, &mut i);\n+            success.then_some(i)\n+        })\n     }\n \n     fn const_to_opt_u128(&self, v: &'ll Value, sign_ext: bool) -> Option<u128> {"}, {"sha": "ce27dc5a5d1ea23c61a094fbc07150630c4663e7", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "patch": "@@ -1096,7 +1096,7 @@ extern \"C\" {\n     pub fn LLVMConstInt(IntTy: &Type, N: c_ulonglong, SignExtend: Bool) -> &Value;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n     pub fn LLVMConstReal(RealTy: &Type, N: f64) -> &Value;\n-    pub fn LLVMConstIntGetZExtValue(ConstantVal: &ConstantInt) -> c_ulonglong;\n+    pub fn LLVMRustConstIntGetZExtValue(ConstantVal: &ConstantInt, Value: &mut u64) -> bool;\n     pub fn LLVMRustConstInt128Get(\n         ConstantVal: &ConstantInt,\n         SExt: bool,"}, {"sha": "574746e340b7bff7f041ccfb4d9f9dca62e4d7fe", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let size = bx.const_usize(dest.layout.size.bytes());\n \n                     // Use llvm.memset.p0i8.* to initialize all zero arrays\n-                    if bx.cx().const_to_opt_uint(v) == Some(0) {\n+                    if bx.cx().const_to_opt_u128(v, false) == Some(0) {\n                         let fill = bx.cx().const_u8(0);\n                         bx.memset(start, fill, size, dest.align, MemFlags::empty());\n                         return bx;"}, {"sha": "6ee3c7d68213ee9382413d66975ee048ed9bb7f3", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "patch": "@@ -1618,6 +1618,14 @@ extern \"C\" LLVMValueRef LLVMRustConstInBoundsGEP2(LLVMTypeRef Ty,\n   return wrap(ConstantExpr::getInBoundsGetElementPtr(unwrap(Ty), Val, IdxList));\n }\n \n+extern \"C\" bool LLVMRustConstIntGetZExtValue(LLVMValueRef CV, uint64_t *value) {\n+    auto C = unwrap<llvm::ConstantInt>(CV);\n+    if (C->getBitWidth() > 64)\n+      return false;\n+    *value = C->getZExtValue();\n+    return true;\n+}\n+\n // Returns true if both high and low were successfully set. Fails in case constant wasn\u2019t any of\n // the common sizes (1, 8, 16, 32, 64, 128 bits)\n extern \"C\" bool LLVMRustConstInt128Get(LLVMValueRef CV, bool sext, uint64_t *high, uint64_t *low)"}, {"sha": "c6a686597e9c810f4f9c3192de750fc3632f66bc", "filename": "src/test/ui/codegen/issue-101585-128bit-repeat.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs?ref=07a9c10fe6d67cbd3d33a17002e9b41310e6c3a0", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for issue 101585.\n+// run-pass\n+\n+fn main() {\n+    fn min_array_ok() -> [i128; 1] {\n+        [i128::MIN]\n+    }\n+    assert_eq!(min_array_ok(), [-170141183460469231731687303715884105728i128]);\n+\n+    fn min_array_nok() -> [i128; 1] {\n+        [i128::MIN; 1]\n+    }\n+    assert_eq!(min_array_nok(), [-170141183460469231731687303715884105728i128]);\n+}"}]}