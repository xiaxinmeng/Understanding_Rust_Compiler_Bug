{"sha": "be1ecce01feddf3c81e0a1215a7dc21814d35862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMWVjY2UwMWZlZGRmM2M4MWUwYTEyMTVhN2RjMjE4MTRkMzU4NjI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-15T12:51:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-15T12:51:45Z"}, "message": "Rollup merge of #68141 - euclio:replace-bindings-with-winapi, r=alexcrichton\n\nuse winapi for non-stdlib Windows bindings", "tree": {"sha": "098ec6815fdb19966d5c5c7b92d92edeab550a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098ec6815fdb19966d5c5c7b92d92edeab550a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be1ecce01feddf3c81e0a1215a7dc21814d35862", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeHwrhCRBK7hj4Ov3rIwAAdHIIAEg5FMGfNyoI9DIPGl8z3c4q\n13f9JF9w/nST06kK3TDTRUPY/DyZybFCckDAwZYqYnWQrlljRbacQWM4VShSZfW+\nZSgalK6KL3tnZNDWhbJD92IlJmrQjvW6Y92BciIN8ajbp79L/qUkppX8CLKazOaz\nDoWIOBsobV5sOxvkfQrMRDErBBjNOS+SPeVyGpNPzYAho3OXYzwKdAuTG66XNnaf\nt68M5ShZDuccZ8xw9AfQ7JH0i7hqyrUwImNJ6CUVPp/op6NexR2DHf0iXFBXf449\ndbFYZ1NgWHlNySu06yajeRDcKEk5IzFLaMIpJ7oPirUyQWOL5MyuZx4GlQB9rNs=\n=XlL9\n-----END PGP SIGNATURE-----\n", "payload": "tree 098ec6815fdb19966d5c5c7b92d92edeab550a05\nparent 89b065dbd2b953ea3ae15ebfb67a799e8b0a3ecc\nparent 7b564c67deb6f5e9d7102871d63a9ad3d7161278\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1579092705 +0900\ncommitter GitHub <noreply@github.com> 1579092705 +0900\n\nRollup merge of #68141 - euclio:replace-bindings-with-winapi, r=alexcrichton\n\nuse winapi for non-stdlib Windows bindings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be1ecce01feddf3c81e0a1215a7dc21814d35862", "html_url": "https://github.com/rust-lang/rust/commit/be1ecce01feddf3c81e0a1215a7dc21814d35862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be1ecce01feddf3c81e0a1215a7dc21814d35862/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b065dbd2b953ea3ae15ebfb67a799e8b0a3ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b065dbd2b953ea3ae15ebfb67a799e8b0a3ecc", "html_url": "https://github.com/rust-lang/rust/commit/89b065dbd2b953ea3ae15ebfb67a799e8b0a3ecc"}, {"sha": "7b564c67deb6f5e9d7102871d63a9ad3d7161278", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b564c67deb6f5e9d7102871d63a9ad3d7161278", "html_url": "https://github.com/rust-lang/rust/commit/7b564c67deb6f5e9d7102871d63a9ad3d7161278"}], "stats": {"total": 357, "additions": 94, "deletions": 263}, "files": [{"sha": "6ac2ce062ff88e2376b7ae154103ff1d0e8ac4c9", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -201,6 +201,7 @@ dependencies = [\n  \"serde_json\",\n  \"time\",\n  \"toml\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3491,6 +3492,7 @@ dependencies = [\n  \"serialize\",\n  \"smallvec 1.0.0\",\n  \"stable_deref_trait\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3518,6 +3520,7 @@ dependencies = [\n  \"rustc_target\",\n  \"serialize\",\n  \"syntax\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3537,6 +3540,7 @@ dependencies = [\n  \"term_size\",\n  \"termcolor\",\n  \"unicode-width\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3648,6 +3652,7 @@ dependencies = [\n  \"smallvec 1.0.0\",\n  \"syntax\",\n  \"tempfile\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3717,6 +3722,7 @@ dependencies = [\n  \"smallvec 1.0.0\",\n  \"stable_deref_trait\",\n  \"syntax\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]"}, {"sha": "c09f58cc591a69365e2004e8cfe0c298b3b52229", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -49,5 +49,9 @@ lazy_static = \"1.3.0\"\n time = \"0.1\"\n ignore = \"0.4.10\"\n \n+[target.'cfg(windows)'.dependencies.winapi]\n+version = \"0.3\"\n+features = [\"fileapi\", \"ioapiset\", \"jobapi2\", \"handleapi\", \"winioctl\"]\n+\n [dev-dependencies]\n pretty_assertions = \"0.5\""}, {"sha": "efeb86540b7b7215b2c0ce2182022a1514fbe3a4", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 10, "deletions": 78, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -35,84 +35,16 @@ use std::io;\n use std::mem;\n use std::ptr;\n \n-type HANDLE = *mut u8;\n-type BOOL = i32;\n-type DWORD = u32;\n-type LPHANDLE = *mut HANDLE;\n-type LPVOID = *mut u8;\n-type JOBOBJECTINFOCLASS = i32;\n-type SIZE_T = usize;\n-type LARGE_INTEGER = i64;\n-type UINT = u32;\n-type ULONG_PTR = usize;\n-type ULONGLONG = u64;\n-\n-const FALSE: BOOL = 0;\n-const DUPLICATE_SAME_ACCESS: DWORD = 0x2;\n-const PROCESS_DUP_HANDLE: DWORD = 0x40;\n-const JobObjectExtendedLimitInformation: JOBOBJECTINFOCLASS = 9;\n-const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: DWORD = 0x2000;\n-const JOB_OBJECT_LIMIT_PRIORITY_CLASS: DWORD = 0x00000020;\n-const SEM_FAILCRITICALERRORS: UINT = 0x0001;\n-const SEM_NOGPFAULTERRORBOX: UINT = 0x0002;\n-const BELOW_NORMAL_PRIORITY_CLASS: DWORD = 0x00004000;\n-\n-extern \"system\" {\n-    fn CreateJobObjectW(lpJobAttributes: *mut u8, lpName: *const u8) -> HANDLE;\n-    fn CloseHandle(hObject: HANDLE) -> BOOL;\n-    fn GetCurrentProcess() -> HANDLE;\n-    fn OpenProcess(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD) -> HANDLE;\n-    fn DuplicateHandle(\n-        hSourceProcessHandle: HANDLE,\n-        hSourceHandle: HANDLE,\n-        hTargetProcessHandle: HANDLE,\n-        lpTargetHandle: LPHANDLE,\n-        dwDesiredAccess: DWORD,\n-        bInheritHandle: BOOL,\n-        dwOptions: DWORD,\n-    ) -> BOOL;\n-    fn AssignProcessToJobObject(hJob: HANDLE, hProcess: HANDLE) -> BOOL;\n-    fn SetInformationJobObject(\n-        hJob: HANDLE,\n-        JobObjectInformationClass: JOBOBJECTINFOCLASS,\n-        lpJobObjectInformation: LPVOID,\n-        cbJobObjectInformationLength: DWORD,\n-    ) -> BOOL;\n-    fn SetErrorMode(mode: UINT) -> UINT;\n-}\n-\n-#[repr(C)]\n-struct JOBOBJECT_EXTENDED_LIMIT_INFORMATION {\n-    BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,\n-    IoInfo: IO_COUNTERS,\n-    ProcessMemoryLimit: SIZE_T,\n-    JobMemoryLimit: SIZE_T,\n-    PeakProcessMemoryUsed: SIZE_T,\n-    PeakJobMemoryUsed: SIZE_T,\n-}\n-\n-#[repr(C)]\n-struct IO_COUNTERS {\n-    ReadOperationCount: ULONGLONG,\n-    WriteOperationCount: ULONGLONG,\n-    OtherOperationCount: ULONGLONG,\n-    ReadTransferCount: ULONGLONG,\n-    WriteTransferCount: ULONGLONG,\n-    OtherTransferCount: ULONGLONG,\n-}\n-\n-#[repr(C)]\n-struct JOBOBJECT_BASIC_LIMIT_INFORMATION {\n-    PerProcessUserTimeLimit: LARGE_INTEGER,\n-    PerJobUserTimeLimit: LARGE_INTEGER,\n-    LimitFlags: DWORD,\n-    MinimumWorkingsetSize: SIZE_T,\n-    MaximumWorkingsetSize: SIZE_T,\n-    ActiveProcessLimit: DWORD,\n-    Affinity: ULONG_PTR,\n-    PriorityClass: DWORD,\n-    SchedulingClass: DWORD,\n-}\n+use winapi::shared::minwindef::{DWORD, FALSE, LPVOID};\n+use winapi::um::errhandlingapi::SetErrorMode;\n+use winapi::um::handleapi::{CloseHandle, DuplicateHandle};\n+use winapi::um::jobapi2::{AssignProcessToJobObject, CreateJobObjectW, SetInformationJobObject};\n+use winapi::um::processthreadsapi::{GetCurrentProcess, OpenProcess};\n+use winapi::um::winbase::{BELOW_NORMAL_PRIORITY_CLASS, SEM_NOGPFAULTERRORBOX};\n+use winapi::um::winnt::{\n+    JobObjectExtendedLimitInformation, DUPLICATE_SAME_ACCESS, JOBOBJECT_EXTENDED_LIMIT_INFORMATION,\n+    JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE, JOB_OBJECT_LIMIT_PRIORITY_CLASS, PROCESS_DUP_HANDLE,\n+};\n \n pub unsafe fn setup(build: &mut Build) {\n     // Enable the Windows Error Reporting dialog which msys disables,"}, {"sha": "7d1efe4610f9ce1e2168e255af31205b59f704f0", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 13, "deletions": 49, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -123,37 +123,24 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n     // what can be found here:\n     //\n     // http://www.flexhex.com/docs/articles/hard-links.phtml\n-    //\n-    // Copied from std\n     #[cfg(windows)]\n-    #[allow(nonstandard_style)]\n     fn symlink_dir_inner(target: &Path, junction: &Path) -> io::Result<()> {\n         use std::ffi::OsStr;\n         use std::os::windows::ffi::OsStrExt;\n         use std::ptr;\n \n-        const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: usize = 16 * 1024;\n-        const GENERIC_WRITE: DWORD = 0x40000000;\n-        const OPEN_EXISTING: DWORD = 3;\n-        const FILE_FLAG_OPEN_REPARSE_POINT: DWORD = 0x00200000;\n-        const FILE_FLAG_BACKUP_SEMANTICS: DWORD = 0x02000000;\n-        const FSCTL_SET_REPARSE_POINT: DWORD = 0x900a4;\n-        const IO_REPARSE_TAG_MOUNT_POINT: DWORD = 0xa0000003;\n-        const FILE_SHARE_DELETE: DWORD = 0x4;\n-        const FILE_SHARE_READ: DWORD = 0x1;\n-        const FILE_SHARE_WRITE: DWORD = 0x2;\n-\n-        type BOOL = i32;\n-        type DWORD = u32;\n-        type HANDLE = *mut u8;\n-        type LPCWSTR = *const u16;\n-        type LPDWORD = *mut DWORD;\n-        type LPOVERLAPPED = *mut u8;\n-        type LPSECURITY_ATTRIBUTES = *mut u8;\n-        type LPVOID = *mut u8;\n-        type WCHAR = u16;\n-        type WORD = u16;\n-\n+        use winapi::shared::minwindef::{DWORD, WORD};\n+        use winapi::um::fileapi::{CreateFileW, OPEN_EXISTING};\n+        use winapi::um::handleapi::CloseHandle;\n+        use winapi::um::ioapiset::DeviceIoControl;\n+        use winapi::um::winbase::{FILE_FLAG_BACKUP_SEMANTICS, FILE_FLAG_OPEN_REPARSE_POINT};\n+        use winapi::um::winioctl::FSCTL_SET_REPARSE_POINT;\n+        use winapi::um::winnt::{\n+            FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE, GENERIC_WRITE,\n+            IO_REPARSE_TAG_MOUNT_POINT, MAXIMUM_REPARSE_DATA_BUFFER_SIZE, WCHAR,\n+        };\n+\n+        #[allow(non_snake_case)]\n         #[repr(C)]\n         struct REPARSE_MOUNTPOINT_DATA_BUFFER {\n             ReparseTag: DWORD,\n@@ -165,29 +152,6 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n             ReparseTarget: WCHAR,\n         }\n \n-        extern \"system\" {\n-            fn CreateFileW(\n-                lpFileName: LPCWSTR,\n-                dwDesiredAccess: DWORD,\n-                dwShareMode: DWORD,\n-                lpSecurityAttributes: LPSECURITY_ATTRIBUTES,\n-                dwCreationDisposition: DWORD,\n-                dwFlagsAndAttributes: DWORD,\n-                hTemplateFile: HANDLE,\n-            ) -> HANDLE;\n-            fn DeviceIoControl(\n-                hDevice: HANDLE,\n-                dwIoControlCode: DWORD,\n-                lpInBuffer: LPVOID,\n-                nInBufferSize: DWORD,\n-                lpOutBuffer: LPVOID,\n-                nOutBufferSize: DWORD,\n-                lpBytesReturned: LPDWORD,\n-                lpOverlapped: LPOVERLAPPED,\n-            ) -> BOOL;\n-            fn CloseHandle(hObject: HANDLE) -> BOOL;\n-        }\n-\n         fn to_u16s<S: AsRef<OsStr>>(s: S) -> io::Result<Vec<u16>> {\n             Ok(s.as_ref().encode_wide().chain(Some(0)).collect())\n         }\n@@ -212,7 +176,7 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n                 ptr::null_mut(),\n             );\n \n-            let mut data = [0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n+            let mut data = [0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize];\n             let db = data.as_mut_ptr() as *mut REPARSE_MOUNTPOINT_DATA_BUFFER;\n             let buf = &mut (*db).ReparseTarget as *mut u16;\n             let mut i = 0;"}, {"sha": "b894aabd9010073f222cb5f4b7b43bce29fa75e9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -34,7 +34,6 @@\n #![feature(const_transmute)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n-#![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(overlapping_marker_traits)]"}, {"sha": "fb4f818c4b2492b003fc0811b96c3dcc86a35fc0", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -31,3 +31,6 @@ measureme = \"0.7.1\"\n [dependencies.parking_lot]\n version = \"0.9\"\n features = [\"nightly\"]\n+\n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }"}, {"sha": "2a0139fa90d5a2b742cf9c0c11fd3372b3834066", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -87,39 +87,11 @@ cfg_if! {\n     } else if #[cfg(windows)] {\n         use std::mem;\n         use std::os::windows::prelude::*;\n-        use std::os::windows::raw::HANDLE;\n         use std::fs::{File, OpenOptions};\n-        use std::os::raw::{c_ulong, c_int};\n-\n-        type DWORD = c_ulong;\n-        type BOOL = c_int;\n-        type ULONG_PTR = usize;\n-\n-        type LPOVERLAPPED = *mut OVERLAPPED;\n-        const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x0000_0002;\n-        const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x0000_0001;\n-\n-        const FILE_SHARE_DELETE: DWORD = 0x4;\n-        const FILE_SHARE_READ: DWORD = 0x1;\n-        const FILE_SHARE_WRITE: DWORD = 0x2;\n-\n-        #[repr(C)]\n-        struct OVERLAPPED {\n-            Internal: ULONG_PTR,\n-            InternalHigh: ULONG_PTR,\n-            Offset: DWORD,\n-            OffsetHigh: DWORD,\n-            hEvent: HANDLE,\n-        }\n \n-        extern \"system\" {\n-            fn LockFileEx(hFile: HANDLE,\n-                          dwFlags: DWORD,\n-                          dwReserved: DWORD,\n-                          nNumberOfBytesToLockLow: DWORD,\n-                          nNumberOfBytesToLockHigh: DWORD,\n-                          lpOverlapped: LPOVERLAPPED) -> BOOL;\n-        }\n+        use winapi::um::minwinbase::{OVERLAPPED, LOCKFILE_FAIL_IMMEDIATELY, LOCKFILE_EXCLUSIVE_LOCK};\n+        use winapi::um::fileapi::LockFileEx;\n+        use winapi::um::winnt::{FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE};\n \n         #[derive(Debug)]\n         pub struct Lock {"}, {"sha": "6db2910bca4967cc82befdaf20898737d3ce42bd", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -33,9 +33,6 @@ extern crate libc;\n #[macro_use]\n extern crate cfg_if;\n \n-#[cfg(windows)]\n-extern crate libc;\n-\n pub use rustc_serialize::hex::ToHex;\n \n #[inline(never)]"}, {"sha": "004db0a79a8808fbfc6e2681a828752cdd51acf9", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -569,39 +569,19 @@ fn get_resident() -> Option<usize> {\n \n #[cfg(windows)]\n fn get_resident() -> Option<usize> {\n-    type BOOL = i32;\n-    type DWORD = u32;\n-    type HANDLE = *mut u8;\n-    use libc::size_t;\n-    #[repr(C)]\n-    #[allow(non_snake_case)]\n-    struct PROCESS_MEMORY_COUNTERS {\n-        cb: DWORD,\n-        PageFaultCount: DWORD,\n-        PeakWorkingSetSize: size_t,\n-        WorkingSetSize: size_t,\n-        QuotaPeakPagedPoolUsage: size_t,\n-        QuotaPagedPoolUsage: size_t,\n-        QuotaPeakNonPagedPoolUsage: size_t,\n-        QuotaNonPagedPoolUsage: size_t,\n-        PagefileUsage: size_t,\n-        PeakPagefileUsage: size_t,\n-    }\n-    #[allow(non_camel_case_types)]\n-    type PPROCESS_MEMORY_COUNTERS = *mut PROCESS_MEMORY_COUNTERS;\n-    #[link(name = \"psapi\")]\n-    extern \"system\" {\n-        fn GetCurrentProcess() -> HANDLE;\n-        fn GetProcessMemoryInfo(\n-            Process: HANDLE,\n-            ppsmemCounters: PPROCESS_MEMORY_COUNTERS,\n-            cb: DWORD,\n-        ) -> BOOL;\n-    }\n-    let mut pmc: PROCESS_MEMORY_COUNTERS = unsafe { std::mem::zeroed() };\n-    pmc.cb = std::mem::size_of_val(&pmc) as DWORD;\n-    match unsafe { GetProcessMemoryInfo(GetCurrentProcess(), &mut pmc, pmc.cb) } {\n+    use std::mem::{self, MaybeUninit};\n+    use winapi::shared::minwindef::DWORD;\n+    use winapi::um::processthreadsapi::GetCurrentProcess;\n+    use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n+\n+    let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n+    match unsafe {\n+        GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n+    } {\n         0 => None,\n-        _ => Some(pmc.WorkingSetSize as usize),\n+        _ => {\n+            let pmc = unsafe { pmc.assume_init() };\n+            Some(pmc.WorkingSetSize as usize)\n+        }\n     }\n }"}, {"sha": "b856e5da5a093262125cd339be50409ab79f436c", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -32,5 +32,8 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n \n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }\n+\n [features]\n llvm = ['rustc_interface/llvm']"}, {"sha": "019ff431bcb97d2f56ecfc05a6abba63aff89134", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -514,15 +514,10 @@ fn stdout_isatty() -> bool {\n \n #[cfg(windows)]\n fn stdout_isatty() -> bool {\n-    type DWORD = u32;\n-    type BOOL = i32;\n-    type HANDLE = *mut u8;\n-    type LPDWORD = *mut u32;\n-    const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n-    extern \"system\" {\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n-        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n-    }\n+    use winapi::um::consoleapi::GetConsoleMode;\n+    use winapi::um::processenv::GetStdHandle;\n+    use winapi::um::winbase::STD_OUTPUT_HANDLE;\n+\n     unsafe {\n         let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n         let mut out = 0;\n@@ -1214,11 +1209,8 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     #[cfg(windows)]\n     unsafe {\n         if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n-            extern \"system\" {\n-                fn DebugBreak();\n-            }\n             // Trigger a debugger if we crashed during bootstrap\n-            DebugBreak();\n+            winapi::um::debugapi::DebugBreak();\n         }\n     }\n }"}, {"sha": "01ea80659d6b9d021095e82faa5b6de594bb2fff", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -19,3 +19,6 @@ atty = \"0.2\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.6.1\"\n term_size = \"0.3.1\"\n+\n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"handleapi\", \"synchapi\", \"winbase\"] }"}, {"sha": "a73472021d4127bd246b1543c8d1d9d22eba1dcb", "filename": "src/librustc_errors/lock.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_errors%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_errors%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flock.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -12,31 +12,14 @@\n use std::any::Any;\n \n #[cfg(windows)]\n-#[allow(nonstandard_style)]\n pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n     use std::ffi::CString;\n     use std::io;\n \n-    type LPSECURITY_ATTRIBUTES = *mut u8;\n-    type BOOL = i32;\n-    type LPCSTR = *const u8;\n-    type HANDLE = *mut u8;\n-    type DWORD = u32;\n-\n-    const INFINITE: DWORD = !0;\n-    const WAIT_OBJECT_0: DWORD = 0;\n-    const WAIT_ABANDONED: DWORD = 0x00000080;\n-\n-    extern \"system\" {\n-        fn CreateMutexA(\n-            lpMutexAttributes: LPSECURITY_ATTRIBUTES,\n-            bInitialOwner: BOOL,\n-            lpName: LPCSTR,\n-        ) -> HANDLE;\n-        fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n-        fn ReleaseMutex(hMutex: HANDLE) -> BOOL;\n-        fn CloseHandle(hObject: HANDLE) -> BOOL;\n-    }\n+    use winapi::shared::ntdef::HANDLE;\n+    use winapi::um::handleapi::CloseHandle;\n+    use winapi::um::synchapi::{CreateMutexA, ReleaseMutex, WaitForSingleObject};\n+    use winapi::um::winbase::{INFINITE, WAIT_ABANDONED, WAIT_OBJECT_0};\n \n     struct Handle(HANDLE);\n \n@@ -65,7 +48,7 @@ pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n         //\n         // This will silently create one if it doesn't already exist, or it'll\n         // open up a handle to one if it already exists.\n-        let mutex = CreateMutexA(std::ptr::null_mut(), 0, cname.as_ptr() as *const u8);\n+        let mutex = CreateMutexA(std::ptr::null_mut(), 0, cname.as_ptr());\n         if mutex.is_null() {\n             panic!(\n                 \"failed to create global mutex named `{}`: {}\","}, {"sha": "7baae90beabb5a50d5e97786abe2323d8fbc2d28", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -43,6 +43,9 @@ rustc_resolve = { path = \"../librustc_resolve\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n \n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"libloaderapi\"] }\n+\n [dev-dependencies]\n rustc_target = { path = \"../librustc_target\" }\n "}, {"sha": "21f9fa48165918f254e716ce59519bda17e4fa01", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -340,19 +340,17 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     fn current_dll_path() -> Option<PathBuf> {\n         use std::ffi::OsString;\n         use std::os::windows::prelude::*;\n+        use std::ptr;\n \n-        extern \"system\" {\n-            fn GetModuleHandleExW(dwFlags: u32, lpModuleName: usize, phModule: *mut usize) -> i32;\n-            fn GetModuleFileNameW(hModule: usize, lpFilename: *mut u16, nSize: u32) -> u32;\n-        }\n-\n-        const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS: u32 = 0x00000004;\n+        use winapi::um::libloaderapi::{\n+            GetModuleFileNameW, GetModuleHandleExW, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n+        };\n \n         unsafe {\n-            let mut module = 0;\n+            let mut module = ptr::null_mut();\n             let r = GetModuleHandleExW(\n                 GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n-                current_dll_path as usize,\n+                current_dll_path as usize as *mut _,\n                 &mut module,\n             );\n             if r == 0 {"}, {"sha": "0a0bcb190bea720b1b90c7746d371915ce3f4967", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -27,3 +27,6 @@ rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+\n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"errhandlingapi\", \"libloaderapi\"] }"}, {"sha": "f04d0239d49237f04810d567b5c262cc405e6a10", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -111,9 +111,9 @@ mod dl {\n     ) -> Result<*mut u8, String> {\n         check_for_errors_in(|| libc::dlsym(handle as *mut libc::c_void, symbol) as *mut u8)\n     }\n+\n     pub(super) unsafe fn close(handle: *mut u8) {\n         libc::dlclose(handle as *mut libc::c_void);\n-        ()\n     }\n }\n \n@@ -124,27 +124,15 @@ mod dl {\n     use std::os::windows::prelude::*;\n     use std::ptr;\n \n-    use libc::{c_char, c_uint, c_void};\n-\n-    type DWORD = u32;\n-    type HMODULE = *mut u8;\n-    type BOOL = i32;\n-    type LPCWSTR = *const u16;\n-    type LPCSTR = *const i8;\n-\n-    extern \"system\" {\n-        fn SetThreadErrorMode(dwNewMode: DWORD, lpOldMode: *mut DWORD) -> c_uint;\n-        fn LoadLibraryW(name: LPCWSTR) -> HMODULE;\n-        fn GetModuleHandleExW(dwFlags: DWORD, name: LPCWSTR, handle: *mut HMODULE) -> BOOL;\n-        fn GetProcAddress(handle: HMODULE, name: LPCSTR) -> *mut c_void;\n-        fn FreeLibrary(handle: HMODULE) -> BOOL;\n-    }\n+    use winapi::shared::minwindef::HMODULE;\n+    use winapi::um::errhandlingapi::SetThreadErrorMode;\n+    use winapi::um::libloaderapi::{FreeLibrary, GetModuleHandleExW, GetProcAddress, LoadLibraryW};\n+    use winapi::um::winbase::SEM_FAILCRITICALERRORS;\n \n     pub(super) fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> {\n         // disable \"dll load failed\" error dialog.\n         let prev_error_mode = unsafe {\n-            // SEM_FAILCRITICALERRORS 0x01\n-            let new_error_mode = 1;\n+            let new_error_mode = SEM_FAILCRITICALERRORS;\n             let mut prev_error_mode = 0;\n             let result = SetThreadErrorMode(new_error_mode, &mut prev_error_mode);\n             if result == 0 {\n@@ -156,12 +144,12 @@ mod dl {\n         let result = match filename {\n             Some(filename) => {\n                 let filename_str: Vec<_> = filename.encode_wide().chain(Some(0)).collect();\n-                let result = unsafe { LoadLibraryW(filename_str.as_ptr()) };\n+                let result = unsafe { LoadLibraryW(filename_str.as_ptr()) } as *mut u8;\n                 ptr_result(result)\n             }\n             None => {\n                 let mut handle = ptr::null_mut();\n-                let succeeded = unsafe { GetModuleHandleExW(0 as DWORD, ptr::null(), &mut handle) };\n+                let succeeded = unsafe { GetModuleHandleExW(0, ptr::null(), &mut handle) };\n                 if succeeded == 0 {\n                     Err(io::Error::last_os_error().to_string())\n                 } else {\n@@ -177,7 +165,10 @@ mod dl {\n         result\n     }\n \n-    pub(super) unsafe fn symbol(handle: *mut u8, symbol: *const c_char) -> Result<*mut u8, String> {\n+    pub(super) unsafe fn symbol(\n+        handle: *mut u8,\n+        symbol: *const libc::c_char,\n+    ) -> Result<*mut u8, String> {\n         let ptr = GetProcAddress(handle as HMODULE, symbol) as *mut u8;\n         ptr_result(ptr)\n     }"}, {"sha": "3a114a0b71517de80c20bcb2b7133e0e4167dbaf", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ecce01feddf3c81e0a1215a7dc21814d35862/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=be1ecce01feddf3c81e0a1215a7dc21814d35862", "patch": "@@ -42,10 +42,8 @@ mod tests;\n #[cfg(windows)]\n fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use std::sync::Mutex;\n-    const SEM_NOGPFAULTERRORBOX: u32 = 0x0002;\n-    extern \"system\" {\n-        fn SetErrorMode(mode: u32) -> u32;\n-    }\n+    use winapi::um::errhandlingapi::SetErrorMode;\n+    use winapi::um::winbase::SEM_NOGPFAULTERRORBOX;\n \n     lazy_static! {\n         static ref LOCK: Mutex<()> = { Mutex::new(()) };"}]}