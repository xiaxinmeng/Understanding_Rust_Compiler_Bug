{"sha": "8152da22a1414eb4b79c102d40e646a911382697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNTJkYTIyYTE0MTRlYjRiNzljMTAyZDQwZTY0NmE5MTEzODI2OTc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-03-03T21:19:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-03-05T20:13:56Z"}, "message": "Extract mir_opt_level to a method and use Option to be able to know if the value is provided or not", "tree": {"sha": "c119975b071963bf2e44c8a2b58fd193a10f606b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c119975b071963bf2e44c8a2b58fd193a10f606b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8152da22a1414eb4b79c102d40e646a911382697", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmBCkQQACgkQgTGiTgx5\n76+RZw//RGqmBoB+4NGagz4xNuzDURHDMEiVxWgPYsfSisv8pD3lBvLxyTVvuuF7\nEq7MUGJXBtznthaE/UQAIOQrTy1umJgPTzeFO0Yk9WBzpKpGU6pVRYx9fR4OR3dG\npasOP4NQ/upAaV+rQAU/hP70NC5OlC+oENhk5VCno2PNjsqyIocHh0CLpIIu58UG\nKI4XMa7t0+VPRJMqvYC1Z4mYNArBdddHOpJNMjz5eVxNsARMo4akUkRXuLR+yf0R\nlaBzTtKOiwFGrsli7F6uf0yWU/SvDfWcbFQlvrzeErkHR2BtcHI/Gk81sDKAlZ2j\n8UaozLLnVnw7TpnJ3OmvLCSt93n6Xi0AfJQXjxhMQSw/eCouqa6os0H45/+A7D33\nGEhD19AIbUEtmSKR+aFG1kv/OHhDWT3klJn9f1zB15i+DrfDcYvmhnNJOG48m078\nN1FVUWqwFL5iYhOYqu6Q/9BZMkJAemVkLICziGlo2KAozm7KNSAO+nHyN4ozvJi9\n1FGAPi4a1UVUPFP5/V9KLm8ZHCjypC3MLy6Xt55j/IkNvCZcW1yJ4NH5WcKb7wsu\niqjQnS0YLpmm3E+BdahmLFYaOdruJDdviq1a41scZ8AtgdvVnNx2w7syez4CCx64\nMM1+N5mKZK5R4MJBubK0rKkFlw5ep5hTvRFSSCF3Yvf21jYmK/4=\n=hEDI\n-----END PGP SIGNATURE-----", "payload": "tree c119975b071963bf2e44c8a2b58fd193a10f606b\nparent 409920873cf8a95739a55dc5fe5adb05e1b4758e\nauthor Santiago Pastorino <spastorino@gmail.com> 1614806355 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1614975236 -0300\n\nExtract mir_opt_level to a method and use Option to be able to know if the value is provided or not\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8152da22a1414eb4b79c102d40e646a911382697", "html_url": "https://github.com/rust-lang/rust/commit/8152da22a1414eb4b79c102d40e646a911382697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8152da22a1414eb4b79c102d40e646a911382697/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409920873cf8a95739a55dc5fe5adb05e1b4758e", "url": "https://api.github.com/repos/rust-lang/rust/commits/409920873cf8a95739a55dc5fe5adb05e1b4758e", "html_url": "https://github.com/rust-lang/rust/commit/409920873cf8a95739a55dc5fe5adb05e1b4758e"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "522f7ddd8cd28c60732602436a8fd9a48093de08", "filename": "compiler/rustc_mir/src/transform/const_goto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -28,7 +28,7 @@ pub struct ConstGoto;\n \n impl<'tcx> MirPass<'tcx> for ConstGoto {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+        if tcx.sess.mir_opt_level() < 3 {\n             return;\n         }\n         trace!(\"Running ConstGoto on {:?}\", body.source);"}, {"sha": "2fdd55626ef160c34ca87c97b814cb64129fc9c8", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -725,7 +725,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 3 {\n+        if self.tcx.sess.mir_opt_level() >= 3 {\n             self.eval_rvalue_with_identities(rvalue, place)\n         } else {\n             self.use_ecx(|this| this.ecx.eval_rvalue_into_place(rvalue, place))\n@@ -903,7 +903,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n     /// Returns `true` if and only if this `op` should be const-propagated into.\n     fn should_const_prop(&mut self, op: &OpTy<'tcx>) -> bool {\n-        let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n+        let mir_opt_level = self.tcx.sess.mir_opt_level();\n \n         if mir_opt_level == 0 {\n             return false;\n@@ -1073,7 +1073,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n         // Only const prop copies and moves on `mir_opt_level=2` as doing so\n         // currently slightly increases compile time in some cases.\n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+        if self.tcx.sess.mir_opt_level() >= 2 {\n             self.propagate_operand(operand)\n         }\n     }"}, {"sha": "ed2ff4fde9e02eafd53b962b873d204bdded48d4", "filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -16,7 +16,7 @@ pub struct DeduplicateBlocks;\n \n impl<'tcx> MirPass<'tcx> for DeduplicateBlocks {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+        if tcx.sess.mir_opt_level() < 3 {\n             return;\n         }\n         debug!(\"Running DeduplicateBlocks on `{:?}`\", body.source);"}, {"sha": "01e61f95eed9d6e4ded74ddab372e65784c6b6e6", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // Only run at mir-opt-level=2 or higher for now (we don't fix up debuginfo and remove\n         // storage statements at the moment).\n-        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n+        if tcx.sess.mir_opt_level() <= 1 {\n             return;\n         }\n "}, {"sha": "ae9a1ed4680aa23d31a5707439660222c386c4f6", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -26,7 +26,7 @@ pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n+        if tcx.sess.mir_opt_level() < 2 {\n             return;\n         }\n         trace!(\"running EarlyOtherwiseBranch on {:?}\", body.source);"}, {"sha": "d07c141561a9eba6565f212b770ad863a8620217", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -52,7 +52,7 @@ crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n         return enabled;\n     }\n \n-    tcx.sess.opts.debugging_opts.mir_opt_level >= 2\n+    tcx.sess.mir_opt_level() >= 2\n }\n \n impl<'tcx> MirPass<'tcx> for Inline {"}, {"sha": "5d876300ea3914e0f2ae87b56aa69ea1d8b8a09f", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -40,7 +40,7 @@ pub struct MatchBranchSimplification;\n \n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n+        if tcx.sess.mir_opt_level() <= 1 {\n             return;\n         }\n "}, {"sha": "13546442f6652a5ef98b56227d7dd865ed3e7035", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -475,7 +475,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n }\n \n fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let mir_opt_level = tcx.sess.opts.debugging_opts.mir_opt_level;\n+    let mir_opt_level = tcx.sess.mir_opt_level();\n \n     // Lowering generator control-flow and variables has to happen before we do anything else\n     // to them. We run some optimizations before that, because they may be harder to do on the state"}, {"sha": "0f5b080d483f289505c02829251d334a986ac9e7", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -10,7 +10,7 @@ pub struct MultipleReturnTerminators;\n \n impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+        if tcx.sess.mir_opt_level() < 3 {\n             return;\n         }\n "}, {"sha": "445dc12909c14dce14c6bab3af46c90689a50857", "filename": "compiler/rustc_mir/src/transform/nrvo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -34,7 +34,7 @@ pub struct RenameReturnPlace;\n \n impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut mir::Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n+        if tcx.sess.mir_opt_level() == 0 {\n             return;\n         }\n "}, {"sha": "dbb2d3ded6e893d0714ae83ba3ebb076971a10cc", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -12,7 +12,7 @@ pub struct UnreachablePropagation;\n \n impl MirPass<'_> for UnreachablePropagation {\n     fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+        if tcx.sess.mir_opt_level() < 3 {\n             // Enable only under -Zmir-opt-level=3 as in some cases (check the deeply-nested-opt\n             // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n             return;"}, {"sha": "f25828e21618f4c31f436e7883ff05114466c9be", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -1938,21 +1938,23 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(SymbolManglingVersion::V0) => {}\n         }\n \n-        if debugging_opts.mir_opt_level > 1 {\n-            // Functions inlined during MIR transform can, at best, make it impossible to\n-            // effectively cover inlined functions, and, at worst, break coverage map generation\n-            // during LLVM codegen. For example, function counter IDs are only unique within a\n-            // function. Inlining after these counters are injected can produce duplicate counters,\n-            // resulting in an invalid coverage map (and ICE); so this option combination is not\n-            // allowed.\n-            early_warn(\n-                error_format,\n-                &format!(\n-                    \"`-Z mir-opt-level={}` (or any level > 1) enables function inlining, which \\\n+        if let Some(mir_opt_level) = debugging_opts.mir_opt_level {\n+            if mir_opt_level > 1 {\n+                // Functions inlined during MIR transform can, at best, make it impossible to\n+                // effectively cover inlined functions, and, at worst, break coverage map generation\n+                // during LLVM codegen. For example, function counter IDs are only unique within a\n+                // function. Inlining after these counters are injected can produce duplicate counters,\n+                // resulting in an invalid coverage map (and ICE); so this option combination is not\n+                // allowed.\n+                early_warn(\n+                    error_format,\n+                    &format!(\n+                        \"`-Z mir-opt-level={}` (or any level > 1) enables function inlining, which \\\n                     is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\",\n-                    debugging_opts.mir_opt_level,\n-                ),\n-            );\n+                        mir_opt_level,\n+                    ),\n+                );\n+            }\n         }\n     }\n "}, {"sha": "3999bc8680e4f296c66ad32d496d24651c4d126e", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -999,8 +999,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n-    mir_opt_level: usize = (1, parse_uint, [TRACKED],\n-        \"MIR optimization level (0-3; default: 1)\"),\n+    mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+        \"MIR optimization level (0-3; default: Some(1) in non optimized builds and Some(2) in optimized builds)\"),\n     mutable_noalias: bool = (false, parse_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: no)\"),\n     new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],"}, {"sha": "927b5479c33db14240ea3870b884e77377647ff6", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8152da22a1414eb4b79c102d40e646a911382697/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=8152da22a1414eb4b79c102d40e646a911382697", "patch": "@@ -640,6 +640,9 @@ impl Session {\n     pub fn binary_dep_depinfo(&self) -> bool {\n         self.opts.debugging_opts.binary_dep_depinfo\n     }\n+    pub fn mir_opt_level(&self) -> usize {\n+        self.opts.debugging_opts.mir_opt_level.unwrap_or(1)\n+    }\n \n     /// Gets the features enabled for the current compilation session.\n     /// DO NOT USE THIS METHOD if there is a TyCtxt available, as it circumvents"}]}