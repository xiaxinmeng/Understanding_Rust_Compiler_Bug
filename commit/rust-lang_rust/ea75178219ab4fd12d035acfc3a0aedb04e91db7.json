{"sha": "ea75178219ab4fd12d035acfc3a0aedb04e91db7", "node_id": "C_kwDOAAsO6NoAKGVhNzUxNzgyMTlhYjRmZDEyZDAzNWFjZmMzYTBhZWRiMDRlOTFkYjc", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-20T05:11:23Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-24T14:21:19Z"}, "message": "separate definitions and `HIR` owners\n\nfix a ui test\n\nuse `into`\n\nfix clippy ui test\n\nfix a run-make-fulldeps test\n\nimplement `IntoQueryParam<DefId>` for `OwnerId`\n\nuse `OwnerId` for more queries\n\nchange the type of `ParentOwnerIterator::Item` to `(OwnerId, OwnerNode)`", "tree": {"sha": "6f75a3ad8e115d7d9142ef171ebf9940ab8f6a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f75a3ad8e115d7d9142ef171ebf9940ab8f6a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea75178219ab4fd12d035acfc3a0aedb04e91db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea75178219ab4fd12d035acfc3a0aedb04e91db7", "html_url": "https://github.com/rust-lang/rust/commit/ea75178219ab4fd12d035acfc3a0aedb04e91db7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea75178219ab4fd12d035acfc3a0aedb04e91db7/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "html_url": "https://github.com/rust-lang/rust/commit/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644"}], "stats": {"total": 170, "additions": 85, "deletions": 85}, "files": [{"sha": "e54d71fc8e417576b83895617d72f30b570fe36e", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -704,7 +704,7 @@ fn walk_parents<'tcx>(\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n-                let ty = cx.tcx.type_of(def_id);\n+                let ty = cx.tcx.type_of(def_id.def_id);\n                 Some(ty_auto_deref_stability(cx, ty, precedence).position_for_result(cx))\n             },\n "}, {"sha": "f48ba526d51e1693daf593a777ccf4956273128d", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -233,11 +233,11 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                     let body = cx.tcx.hir().body(body_id);\n                     let mut fpu = FindPanicUnwrap {\n                         cx,\n-                        typeck_results: cx.tcx.typeck(item.def_id),\n+                        typeck_results: cx.tcx.typeck(item.def_id.def_id),\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(body.value);\n-                    lint_for_missing_headers(cx, item.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+                    lint_for_missing_headers(cx, item.def_id.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n                 }\n             },\n             hir::ItemKind::Impl(impl_) => {\n@@ -268,7 +268,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.def_id, item.span, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.def_id.def_id, item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -283,11 +283,11 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             let body = cx.tcx.hir().body(body_id);\n             let mut fpu = FindPanicUnwrap {\n                 cx,\n-                typeck_results: cx.tcx.typeck(item.def_id),\n+                typeck_results: cx.tcx.typeck(item.def_id.def_id),\n                 panic_span: None,\n             };\n             fpu.visit_expr(body.value);\n-            lint_for_missing_headers(cx, item.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(cx, item.def_id.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }"}, {"sha": "c39a909b3ccb990d490f2b87e1e835986bdfcb03", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -297,7 +297,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id)) {\n+            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id.def_id)) {\n                 check_variant(cx, self.threshold, def, item_name, item.span);\n             }\n         }"}, {"sha": "a6ddb26e2dee3486eac4a8c99ef88d14c08d41b4", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             }\n         }\n \n-        let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n+        let parent_id = cx.tcx.hir().get_parent_item(hir_id).def_id;\n         let parent_node = cx.tcx.hir().find_by_def_id(parent_id);\n \n         let mut trait_self_ty = None;"}, {"sha": "f3d9ebc5f12de4cda2ba2b8dedb077d02e22d3e7", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -73,7 +73,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n-            if cx.access_levels.is_exported(item.def_id);\n+            if cx.access_levels.is_exported(item.def_id.def_id);\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {"}, {"sha": "407dd1b39575f4d63596ea341c8be18a2d7917f1", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -33,7 +33,7 @@ impl<'tcx> LateLintPass<'tcx> for Exit {\n             if let ExprKind::Path(ref path) = path_expr.kind;\n             if let Some(def_id) = cx.qpath_res(path, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::EXIT);\n-            let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n+            let parent = cx.tcx.hir().get_parent_item(e.hir_id).def_id;\n             if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find_by_def_id(parent);\n             // If the next item up is a function we check if it is an entry point\n             // and only then emit a linter warning"}, {"sha": "ef24a5d06ad0b58f5f6d612e4eae5477ed5d53a5", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -107,7 +107,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n                 let body = cx.tcx.hir().body(body_id);\n                 let mut fpu = FindPanicUnwrap {\n                     lcx: cx,\n-                    typeck_results: cx.tcx.typeck(impl_item.id.def_id),\n+                    typeck_results: cx.tcx.typeck(impl_item.id.def_id.def_id),\n                     result: Vec::new(),\n                 };\n                 fpu.visit_expr(body.value);"}, {"sha": "d6d33bda173817713ce8941edd67d25813c619a7", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n     if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n+        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n@@ -31,7 +31,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.def_id,\n+                item.def_id.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this function could have a `#[must_use]` attribute\",\n             );\n@@ -41,19 +41,19 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n \n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n+        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id).is_none() {\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.def_id,\n+                item.def_id.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this method could have a `#[must_use]` attribute\",\n             );\n@@ -63,7 +63,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n \n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n+        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n@@ -78,7 +78,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n                     sig.decl,\n                     body,\n                     item.span,\n-                    item.def_id,\n+                    item.def_id.def_id,\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );\n@@ -171,7 +171,7 @@ fn is_mutable_pat(cx: &LateContext<'_>, pat: &hir::Pat<'_>, tys: &mut DefIdSet)\n         return false; // ignore `_` patterns\n     }\n     if cx.tcx.has_typeck_results(pat.hir_id.owner.to_def_id()) {\n-        is_mutable_ty(cx, cx.tcx.typeck(pat.hir_id.owner).pat_ty(pat), pat.span, tys)\n+        is_mutable_ty(cx, cx.tcx.typeck(pat.hir_id.owner.def_id).pat_ty(pat), pat.span, tys)\n     } else {\n         false\n     }\n@@ -218,7 +218,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     if self.cx.tcx.has_typeck_results(arg.hir_id.owner.to_def_id())\n                         && is_mutable_ty(\n                             self.cx,\n-                            self.cx.tcx.typeck(arg.hir_id.owner).expr_ty(arg),\n+                            self.cx.tcx.typeck(arg.hir_id.owner.def_id).expr_ty(arg),\n                             arg.span,\n                             &mut tys,\n                         )\n@@ -236,7 +236,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     if self.cx.tcx.has_typeck_results(arg.hir_id.owner.to_def_id())\n                         && is_mutable_ty(\n                             self.cx,\n-                            self.cx.tcx.typeck(arg.hir_id.owner).expr_ty(arg),\n+                            self.cx.tcx.typeck(arg.hir_id.owner.def_id).expr_ty(arg),\n                             arg.span,\n                             &mut tys,\n                         )"}, {"sha": "0b50431fbaaba5b03eaa560af954b18160fc3bd8", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -28,7 +28,7 @@ pub(super) fn check_fn<'tcx>(\n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(eid)) = item.kind {\n         let body = cx.tcx.hir().body(eid);\n-        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.def_id);\n+        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.def_id.def_id);\n     }\n }\n "}, {"sha": "113c4e9f50910859e65f857ebfb405c0e11573ed", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -34,9 +34,9 @@ fn result_err_ty<'tcx>(\n \n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, large_err_threshold: u64) {\n     if let hir::ItemKind::Fn(ref sig, _generics, _) = item.kind\n-        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id, item.span)\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n     {\n-        if cx.access_levels.is_exported(item.def_id) {\n+        if cx.access_levels.is_exported(item.def_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -47,10 +47,10 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, l\n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem<'tcx>, large_err_threshold: u64) {\n     // Don't lint if method is a trait's implementation, we can't do anything about those\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind\n-        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id, item.span)\n-        && trait_ref_of_method(cx, item.def_id).is_none()\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n+        && trait_ref_of_method(cx, item.def_id.def_id).is_none()\n     {\n-        if cx.access_levels.is_exported(item.def_id) {\n+        if cx.access_levels.is_exported(item.def_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -61,8 +61,8 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem\n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::TraitItem<'tcx>, large_err_threshold: u64) {\n     if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id, item.span) {\n-            if cx.access_levels.is_exported(item.def_id) {\n+        if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span) {\n+            if cx.access_levels.is_exported(item.def_id.def_id) {\n                 check_result_unit_err(cx, err_ty, fn_header_span);\n             }\n             check_result_large_err(cx, err_ty, hir_ty.span, large_err_threshold);"}, {"sha": "804fdc2da08897ebda1573b206487f978434448c", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -112,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(item.def_id) {\n+        if !cx.access_levels.is_exported(item.def_id.def_id) {\n             return;\n         }\n "}, {"sha": "cb6c2ec0fb98539e3bdf4ad3883f66902d65600b", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.def_id).is_none();\n+            if trait_ref_of_method(cx, impl_item.def_id.def_id).is_none();\n \n             then {\n                 show_lint(cx, impl_item);"}, {"sha": "2027c23d328c9714397d55b7e8b0fcabd05718d1", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n         let name = item.ident.name.as_str();\n         if matches!(name, \"iter\" | \"iter_mut\") {\n             if let TraitItemKind::Fn(fn_sig, _) = &item.kind {\n-                check_sig(cx, name, fn_sig, item.def_id);\n+                check_sig(cx, name, fn_sig, item.def_id.def_id);\n             }\n         }\n     }\n@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n             )\n         {\n             if let ImplItemKind::Fn(fn_sig, _) = &item.kind {\n-                check_sig(cx, name, fn_sig, item.def_id);\n+                check_sig(cx, name, fn_sig, item.def_id.def_id);\n             }\n         }\n     }"}, {"sha": "7d15dd4cb216488caf619bd3c3afcf625459645e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n-            if cx.access_levels.is_exported(item.def_id);\n+            if cx.access_levels.is_exported(item.def_id.def_id);\n             if matches!(sig.decl.output, FnRetTy::Return(_));\n             if let Some(imp) = get_parent_as_impl(cx.tcx, item.hir_id());\n             if imp.of_trait.is_none();\n@@ -210,7 +210,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.def_id) && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n+    if cx.access_levels.is_exported(visited_trait.def_id.def_id) && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n         fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);"}, {"sha": "399a03187d9937083403655ffd51b7e8b1077e64", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id.def_id).is_none();\n             check_fn_inner(\n                 cx,\n                 sig.decl,\n@@ -276,7 +276,7 @@ fn could_use_elision<'tcx>(\n         let mut checker = BodyLifetimeChecker {\n             lifetimes_used_in_body: false,\n         };\n-        checker.visit_expr(body.value);\n+        checker.visit_expr(&body.value);\n         if checker.lifetimes_used_in_body {\n             return false;\n         }"}, {"sha": "be7f96e9bb07742c5b058fbbebeae5be649eadeb", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -69,7 +69,7 @@ fn check_for_mutation<'tcx>(\n         ExprUseVisitor::new(\n             &mut delegate,\n             &infcx,\n-            body.hir_id.owner,\n+            body.hir_id.owner.def_id,\n             cx.param_env,\n             cx.typeck_results(),\n         )"}, {"sha": "53e7565bd33f33d88065948e14c31290b9bc1974", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -166,7 +166,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             if let Some((id, span)) = iter.next()\n                 && iter.next().is_none()\n             {\n-                self.potential_enums.push((item.def_id, id, item.span, span));\n+                self.potential_enums.push((item.def_id.def_id, id, item.span, span));\n             }\n         }\n     }"}, {"sha": "ddb6d1ca26c91030f738cf96b910ee2b4951fd4c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -3250,7 +3250,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n@@ -3259,7 +3259,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(sig.decl, cx.tcx.hir().body(id)).next();\n \n-            let method_sig = cx.tcx.fn_sig(impl_item.def_id);\n+            let method_sig = cx.tcx.fn_sig(impl_item.def_id.def_id);\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n \n             let first_arg_ty = method_sig.inputs().iter().next();\n@@ -3269,7 +3269,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             then {\n                 // if this impl block implements a trait, lint in trait definition instead\n-                if !implements_trait && cx.access_levels.is_exported(impl_item.def_id) {\n+                if !implements_trait && cx.access_levels.is_exported(impl_item.def_id.def_id) {\n                     // check missing trait implementations\n                     for method_config in &TRAIT_METHODS {\n                         if name == method_config.method_name &&\n@@ -3301,7 +3301,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n                 if sig.decl.implicit_self.has_implicit_self()\n                     && !(self.avoid_breaking_exported_api\n-                        && cx.access_levels.is_exported(impl_item.def_id))\n+                        && cx.access_levels.is_exported(impl_item.def_id.def_id))\n                 {\n                     wrong_self_convention::check(\n                         cx,"}, {"sha": "f24b41411c8168e78afbbfbef6ffea6ab6d67724", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -136,7 +136,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         // Const fns are not allowed as methods in a trait.\n         {\n-            let parent = cx.tcx.hir().get_parent_item(hir_id);\n+            let parent = cx.tcx.hir().get_parent_item(hir_id).def_id;\n             if parent != CRATE_DEF_ID {\n                 if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent) {\n                     if let hir::ItemKind::Trait(..) = &item.kind {"}, {"sha": "47219556676889518b49f52485e08cb33424eb28", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let at_root = cx.tcx.local_parent(it.def_id) == CRATE_DEF_ID;\n+                    let at_root = cx.tcx.local_parent(it.def_id.def_id) == CRATE_DEF_ID;\n                     if at_root {\n                         return;\n                     }"}, {"sha": "9d5764ac0926071c5b1b35185ce4e04794b16349", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(it.def_id) {\n+        if !cx.access_levels.is_exported(it.def_id.def_id) {\n             return;\n         }\n         match it.kind {\n@@ -142,7 +142,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.def_id) {\n+        if !cx.access_levels.is_exported(impl_item.def_id.def_id) {\n             return;\n         }\n \n@@ -159,7 +159,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.def_id) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.def_id.def_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "25d6ca83a94bc7e2d099e8a9e1a81b1a071e2e1d", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.def_id).is_none() {\n+            if trait_ref_of_method(cx, item.def_id.def_id).is_none() {\n                 check_sig(cx, item.hir_id(), sig.decl);\n             }\n         }"}, {"sha": "357a71693d2c38e1e0e4f71c41453967fa518520", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             // can't be implemented for unsafe new\n                             return;\n                         }\n-                        if cx.tcx.is_doc_hidden(impl_item.def_id) {\n+                        if cx.tcx.is_doc_hidden(impl_item.def_id.def_id) {\n                             // shouldn't be implemented when it is hidden in docs\n                             return;\n                         }\n@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                         if_chain! {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n-                            if cx.access_levels.is_reachable(impl_item.def_id);\n+                            if cx.access_levels.is_reachable(impl_item.def_id.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if self_ty == return_ty(cx, id);"}, {"sha": "616ef9e2f867f825d83a05cdc643f3b985a70952", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -286,7 +286,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_def_id = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+            let item_def_id = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n             let item = cx.tcx.hir().expect_item(item_def_id);\n \n             match &item.kind {"}, {"sha": "d64a9cf71e17a9a036530de5a09688643094224f", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                 ..\n             })) => {\n                 #[allow(trivial_casts)]\n-                if let Some(Node::Item(item)) = get_parent_node(cx.tcx, cx.tcx.hir().local_def_id_to_hir_id(def_id))\n+                if let Some(Node::Item(item)) = get_parent_node(cx.tcx, def_id.into())\n                     && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.def_id)\n                     && let Some(trait_item_id) = cx.tcx.associated_item(def_id).trait_item_def_id\n                 {"}, {"sha": "2c22c8b3d081997a3953511a2ff99c36c0dffc73", "filename": "clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -28,7 +28,7 @@ pub(super) fn check<'tcx>(\n             if_chain! {\n                 if let Some((_, lang_item)) = binop_traits(op.node);\n                 if let Ok(trait_id) = cx.tcx.lang_items().require(lang_item);\n-                let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id);\n+                let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id).def_id;\n                 if trait_ref_of_method(cx, parent_fn)\n                     .map_or(true, |t| t.path.res.def_id() != trait_id);\n                 if implements_trait(cx, ty, trait_id, &[rty.into()]);"}, {"sha": "6b2eea48932250b6b9ebf79b633a9f6e5c21641b", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -261,7 +261,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.def_id, method_sig.decl, None);\n+            self.check_poly_fn(cx, item.def_id.def_id, method_sig.decl, None);\n         }\n     }\n "}, {"sha": "3c6ca9d98975d3631ec254a2c8040f9d119ba434", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -46,8 +46,8 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if_chain! {\n-            if cx.tcx.visibility(item.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id());\n-            if !cx.access_levels.is_exported(item.def_id) && self.is_exported.last() == Some(&false);\n+            if cx.tcx.visibility(item.def_id.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id());\n+            if !cx.access_levels.is_exported(item.def_id.def_id) && self.is_exported.last() == Some(&false);\n             if is_not_macro_export(item);\n             then {\n                 let span = item.span.with_hi(item.ident.span.hi());\n@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n         }\n \n         if let ItemKind::Mod { .. } = item.kind {\n-            self.is_exported.push(cx.access_levels.is_exported(item.def_id));\n+            self.is_exported.push(cx.access_levels.is_exported(item.def_id.def_id));\n         }\n     }\n "}, {"sha": "16d702a3868d183c400ef972c9827e06849d3110", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n         if let TraitItemKind::Fn(ref sig, _) = item.kind {\n-            check_method(cx, sig.decl, item.def_id, item.span, item.hir_id());\n+            check_method(cx, sig.decl, item.def_id.def_id, item.span, item.hir_id());\n         }\n     }\n }"}, {"sha": "1ac538f4c7c074cff2e64222d6876d9624e1be2f", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             _ => return,\n         }\n \n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n         let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "d47ed459387ef9c123088d9962be8abed61f00db", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -64,11 +64,11 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n \n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n-            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n+            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id).def_id;\n             if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get_by_def_id(parent_fn);\n             if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n             let body = cx.tcx.hir().body(body_id);\n-            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n+            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id).def_id;\n             if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n             let trait_id = trait_ref.path.res.def_id();\n             if ![binop_trait_id, op_assign_trait_id].contains(&trait_id);"}, {"sha": "8e90d20265ce13a05284a5d405200c204846b670", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -42,7 +42,7 @@ pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n /// messages. This function will panic if that occurs.\n fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n     let hir_id = e.hir_id;\n-    let local_def_id = hir_id.owner;\n+    let local_def_id = hir_id.owner.def_id;\n \n     Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n         let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, hir_id);"}, {"sha": "1268c23206a6f77cf1fc671393a86799a1253fbc", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -104,7 +104,7 @@ fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id:\n         if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n         if synthetic;\n-        if let Some(generics) = cx.tcx.hir().get_generics(id.owner);\n+        if let Some(generics) = cx.tcx.hir().get_generics(id.owner.def_id);\n         if let Some(pred) = generics.bounds_for_param(did.expect_local()).next();\n         then {\n             Some(pred.bounds)"}, {"sha": "aca55817c52503bb102ff69c7ad0b78e66c5e2cb", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -313,7 +313,7 @@ impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BO\n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n         let is_in_trait_impl =\n-            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id)) {\n+            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id).def_id) {\n                 matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n             } else {\n                 false\n@@ -333,7 +333,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        let is_exported = cx.access_levels.is_exported(item.def_id);\n+        let is_exported = cx.access_levels.is_exported(item.def_id.def_id);\n \n         match item.kind {\n             ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(\n@@ -353,7 +353,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         match item.kind {\n             ImplItemKind::Const(ty, _) => {\n                 let is_in_trait_impl = if let Some(hir::Node::Item(item)) =\n-                    cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()))\n+                    cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()).def_id)\n                 {\n                     matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n                 } else {\n@@ -390,7 +390,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &TraitItem<'_>) {\n-        let is_exported = cx.access_levels.is_exported(item.def_id);\n+        let is_exported = cx.access_levels.is_exported(item.def_id.def_id);\n \n         let context = CheckTyContext {\n             is_exported,"}, {"sha": "713fe06bad436985d6a0d3cfc04a6aee97aaa620", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -54,14 +54,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n-            if !cx.access_levels.is_exported(impl_item.def_id) || !self.avoid_breaking_exported_api;\n+            if !cx.access_levels.is_exported(impl_item.def_id.def_id) || !self.avoid_breaking_exported_api;\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);"}, {"sha": "baa53ba664f6944becd037eb9ad6b92911dc2264", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -111,7 +111,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tc\n         let body = cx.tcx.hir().body(body_id);\n         let mut fpu = FindExpectUnwrap {\n             lcx: cx,\n-            typeck_results: cx.tcx.typeck(impl_item.def_id),\n+            typeck_results: cx.tcx.typeck(impl_item.def_id.def_id),\n             result: Vec::new(),\n         };\n         fpu.visit_expr(body.value);"}, {"sha": "2c71f35d490cb2554f1a545b00d500ba23903526", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -105,7 +105,7 @@ impl LateLintPass<'_> for UpperCaseAcronyms {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &Item<'_>) {\n         // do not lint public items or in macros\n         if in_external_macro(cx.sess(), it.span)\n-            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.def_id))\n+            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.def_id.def_id))\n         {\n             return;\n         }"}, {"sha": "ce51cb693fc0255ef273fc45a15f87ad4e0a0239", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !is_from_proc_macro(cx, item); // expensive, should be last check\n             then {\n                 StackItem::Check {\n-                    impl_id: item.def_id,\n+                    impl_id: item.def_id.def_id,\n                     in_body: 0,\n                     types_to_skip: std::iter::once(self_ty.hir_id).collect(),\n                 }"}, {"sha": "1df3135c962d122c9ecc6064fd0a8733d83be17d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n \n fn check_item(cx: &LateContext<'_>, hir_id: HirId) {\n     let hir = cx.tcx.hir();\n-    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner()) {\n+    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner().def_id) {\n         check_node(cx, hir_id, |v| {\n             v.expr(&v.bind(\"expr\", hir.body(body_id).value));\n         });"}, {"sha": "2604b1ee7c56aa2c1a38691f7a33de556304f080", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -120,14 +120,14 @@ impl LateLintPass<'_> for WildcardImports {\n         if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n         }\n-        let module = cx.tcx.parent_module_from_def_id(item.def_id);\n-        if cx.tcx.visibility(item.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n+        let module = cx.tcx.parent_module_from_def_id(item.def_id.def_id);\n+        if cx.tcx.visibility(item.def_id.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n             return;\n         }\n         if_chain! {\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n             if self.warn_on_all || !self.check_exceptions(item, use_path.segments);\n-            let used_imports = cx.tcx.names_imported_by_glob_use(item.def_id);\n+            let used_imports = cx.tcx.names_imported_by_glob_use(item.def_id.def_id);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "386f3c527f1741244fad52cf23ef0242160bb230", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -72,7 +72,7 @@ fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let second_parent_id = cx\n         .tcx\n         .hir()\n-        .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(parent_id));\n+        .get_parent_item(parent_id.into()).def_id;\n     if let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(second_parent_id) {\n         if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;"}, {"sha": "9343cf457b341277011cfea5d115fe7aa3533303", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -78,7 +78,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n@@ -212,7 +212,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n /// }\n /// ```\n pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n-    let parent_id = cx.tcx.hir().get_parent_item(id);\n+    let parent_id = cx.tcx.hir().get_parent_item(id).def_id;\n     match cx.tcx.hir().get_by_def_id(parent_id) {\n         Node::Item(&Item {\n             kind: ItemKind::Const(..) | ItemKind::Static(..),\n@@ -597,8 +597,8 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, def_id: LocalDefId) ->\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n     let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n     if_chain! {\n-        if parent_impl != CRATE_DEF_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl);\n+        if parent_impl != hir::CRATE_OWNER_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl.def_id);\n         if let hir::ItemKind::Impl(impl_) = &item.kind;\n         then {\n             return impl_.of_trait.as_ref();\n@@ -1104,7 +1104,7 @@ pub fn is_in_panic_handler(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n \n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n-    let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n+    let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id).def_id;\n     match cx.tcx.hir().find_by_def_id(parent_id) {\n         Some(\n             Node::Item(Item { ident, .. })\n@@ -1648,7 +1648,7 @@ pub fn any_parent_has_attr(tcx: TyCtxt<'_>, node: HirId, symbol: Symbol) -> bool\n             return true;\n         }\n         prev_enclosing_node = Some(enclosing_node);\n-        enclosing_node = map.local_def_id_to_hir_id(map.get_parent_item(enclosing_node));\n+        enclosing_node = map.get_parent_item(enclosing_node).into();\n     }\n \n     false"}, {"sha": "a7c08839f5241f189dc8659e669a5696432ab441", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea75178219ab4fd12d035acfc3a0aedb04e91db7/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=ea75178219ab4fd12d035acfc3a0aedb04e91db7", "patch": "@@ -21,7 +21,7 @@ pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) ->\n         ExprUseVisitor::new(\n             &mut delegate,\n             &infcx,\n-            expr.hir_id.owner,\n+            expr.hir_id.owner.def_id,\n             cx.param_env,\n             cx.typeck_results(),\n         )"}]}