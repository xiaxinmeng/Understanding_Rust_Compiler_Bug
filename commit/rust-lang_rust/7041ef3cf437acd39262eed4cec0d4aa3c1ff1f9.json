{"sha": "7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDFlZjNjZjQzN2FjZDM5MjYyZWVkNGNlYzBkNGFhM2MxZmYxZjk=", "commit": {"author": {"name": "andjo403", "email": "andjo403@users.noreply.github.com", "date": "2018-02-14T20:08:21Z"}, "committer": {"name": "andjo403", "email": "andjo403@users.noreply.github.com", "date": "2018-02-16T06:44:32Z"}, "message": "lookup exported symbols only when needed.\n\nreduces the time to emit dep-info and metadata.", "tree": {"sha": "73d2b1a05080ae393f8040bb2fa91533bb220ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d2b1a05080ae393f8040bb2fa91533bb220ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9", "html_url": "https://github.com/rust-lang/rust/commit/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9/comments", "author": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "html_url": "https://github.com/rust-lang/rust/commit/3ec5a99aaa0084d97a9e845b34fdf03d1462c475"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "c440393a25f0a9dcb8cbd7e8a5a1a2fc9407602e", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9", "patch": "@@ -122,8 +122,9 @@ pub(crate) fn run(cgcx: &CodegenContext,\n             None\n         }\n     };\n-\n-    let mut symbol_white_list = cgcx.exported_symbols[&LOCAL_CRATE]\n+    let exported_symbols = cgcx.exported_symbols\n+        .as_ref().expect(\"needs exported symbols for LTO\");\n+    let mut symbol_white_list = exported_symbols[&LOCAL_CRATE]\n         .iter()\n         .filter_map(symbol_filter)\n         .collect::<Vec<CString>>();\n@@ -156,8 +157,10 @@ pub(crate) fn run(cgcx: &CodegenContext,\n         }\n \n         for &(cnum, ref path) in cgcx.each_linked_rlib_for_lto.iter() {\n+            let exported_symbols = cgcx.exported_symbols\n+                .as_ref().expect(\"needs exported symbols for LTO\");\n             symbol_white_list.extend(\n-                cgcx.exported_symbols[&cnum]\n+                exported_symbols[&cnum]\n                     .iter()\n                     .filter_map(symbol_filter));\n "}, {"sha": "af5178eb565dbdd658d88520f766def7c50afbe2", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7041ef3cf437acd39262eed4cec0d4aa3c1ff1f9", "patch": "@@ -333,7 +333,7 @@ pub struct CodegenContext {\n     pub no_landing_pads: bool,\n     pub save_temps: bool,\n     pub fewer_names: bool,\n-    pub exported_symbols: Arc<ExportedSymbols>,\n+    pub exported_symbols: Option<Arc<ExportedSymbols>>,\n     pub opts: Arc<config::Options>,\n     pub crate_types: Vec<config::CrateType>,\n     pub each_linked_rlib_for_lto: Vec<(CrateNum, PathBuf)>,\n@@ -1394,14 +1394,25 @@ fn start_executing_work(tcx: TyCtxt,\n                         allocator_config: Arc<ModuleConfig>)\n                         -> thread::JoinHandle<Result<CompiledModules, ()>> {\n     let coordinator_send = tcx.tx_to_llvm_workers.clone();\n-    let mut exported_symbols = FxHashMap();\n-    exported_symbols.insert(LOCAL_CRATE, tcx.exported_symbols(LOCAL_CRATE));\n-    for &cnum in tcx.crates().iter() {\n-        exported_symbols.insert(cnum, tcx.exported_symbols(cnum));\n-    }\n-    let exported_symbols = Arc::new(exported_symbols);\n     let sess = tcx.sess;\n \n+    let exported_symbols = match sess.lto() {\n+        Lto::No => None,\n+        Lto::ThinLocal => {\n+            let mut exported_symbols = FxHashMap();\n+            exported_symbols.insert(LOCAL_CRATE, tcx.exported_symbols(LOCAL_CRATE));\n+            Some(Arc::new(exported_symbols))\n+        }\n+        Lto::Yes | Lto::Fat | Lto::Thin => {\n+            let mut exported_symbols = FxHashMap();\n+            exported_symbols.insert(LOCAL_CRATE, tcx.exported_symbols(LOCAL_CRATE));\n+            for &cnum in tcx.crates().iter() {\n+                exported_symbols.insert(cnum, tcx.exported_symbols(cnum));\n+            }\n+            Some(Arc::new(exported_symbols))\n+        }\n+    };\n+\n     // First up, convert our jobserver into a helper thread so we can use normal\n     // mpsc channels to manage our messages and such.\n     // After we've requested tokens then we'll, when we can,"}]}