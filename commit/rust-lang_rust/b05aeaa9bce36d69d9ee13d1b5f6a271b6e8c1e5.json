{"sha": "b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNWFlYWE5YmNlMzZkNjlkOWVlMTNkMWI1ZjZhMjcxYjZlOGMxZTU=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-10-06T21:32:38Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-10-06T21:32:38Z"}, "message": "Run fmt", "tree": {"sha": "6a2a1a4068713c9034a138b292708c64fe3a9717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2a1a4068713c9034a138b292708c64fe3a9717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl984nYACgkQLO/Nsn7Q\nvnm/Ww//R1sNFXj5STXkt2voXVeC7UMbooBX+5iK5Jgaa3o6f52x/c7Da+62RaS8\n47ehVmV77v+1o9hGTfVuyt+FH63U3CRcOFz834jgNfz9YruqgRWA5KJ2wjgcQ1Pf\noFGltRmGwN0xsB16y5UtpiG8oy/tt3kDvhmx+rX2uN6lrzBmF8apVXCsT0vBDMNI\niKFMP+2uFV2dvHzoO+Eu248iHGZFLbmJFWh+OfD4DsDLTaQ0MsolvBJwfbk9n0T2\nfKsU826vBUEX8clR4BRNAKQNxr0DFYx08xUY24K2xg/LnaYx2ptq+64iO+3ivgUo\nBXKOXwcocvyO4sZ+60pN8oTyQaL82HHgefUS3cVYov0RPZEN/rSXoo6nZmY/PVmf\nkZCfSN3CT6WZ5OgJOny72ieMTcQyygvKm1ejiMTcpLXqqaEPWPGm69JoqxTNgSFs\nAwmjnf4EjHyGOGMnM84tRJuT6QyASjJinHZBZ24sYuSAcA16RbXYAucmXpcSqQVv\n8TV3fjun3zjK9k+KtKweeZlav1NcHrqiKlcSAfqDVV9ClMI8NqszcfaUjIqICYdP\ndsXjVE4z/hwf71DGZLsUopvrjUlYcWMZFRnXqxv15bBA1TiAb3JN/ZggJxyndjKo\nHYGTmYJXrLkdtzrMBzHzsIM2OmwAkavWDdOYGVXe2z9k5j/7o48=\n=z0zI\n-----END PGP SIGNATURE-----", "payload": "tree 6a2a1a4068713c9034a138b292708c64fe3a9717\nparent adb7fc6283711c881186ca85bb9ac3bb8add099b\nauthor flip1995 <hello@philkrones.com> 1602019958 +0200\ncommitter flip1995 <hello@philkrones.com> 1602019958 +0200\n\nRun fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "html_url": "https://github.com/rust-lang/rust/commit/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adb7fc6283711c881186ca85bb9ac3bb8add099b", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb7fc6283711c881186ca85bb9ac3bb8add099b", "html_url": "https://github.com/rust-lang/rust/commit/adb7fc6283711c881186ca85bb9ac3bb8add099b"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "71a30d1c33d4f385bfd918058ede1a3df2fd4049", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "ec70b2f1e2039fe92912755991e20fedbbff9a43", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "patch": "@@ -1668,9 +1668,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = *ret_ty.kind() {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n-                    if let ty::PredicateAtom::Projection(projection_predicate) =\n-                        predicate.skip_binders()\n-                    {\n+                    if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n                         // walk the associated type and check for Self\n                         if contains_ty(projection_predicate.ty, self_ty) {\n                             return;"}, {"sha": "b2a8e3f08d5e0569c6dc2a189f7e456b45d1a4c4", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "patch": "@@ -1287,8 +1287,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n-                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some()\n-                    {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }\n                 }"}]}