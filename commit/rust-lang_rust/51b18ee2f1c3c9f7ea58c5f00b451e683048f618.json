{"sha": "51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYjE4ZWUyZjFjM2M5ZjdlYTU4YzVmMDBiNDUxZTY4MzA0OGY2MTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T12:18:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T12:18:41Z"}, "message": "Merge #5587\n\n5587: Finish use grammar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1152a079401b2d34bcc903f7935fe1aff0b7b3db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1152a079401b2d34bcc903f7935fe1aff0b7b3db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIrqhCRBK7hj4Ov3rIwAAdHIIAHTNvXG3PJZxF0JGM/qZDIYD\n52nS2LDpLfeeayPTTOjdp2v1ZHQrwG2kdhUgFS8nqc+1DfY22kWP1FhgTVhu7pUZ\n1/wmEK9/cbxD8QSR8EcwkxsJcZqsiYowSL8sm8ztmYqaQoTJ9Cx1h3qwIgr1wIJX\ndfCG9Dfs72wutWGHoM/OYEPzf4D/E5YB0W79Y0MdWJ80FvdQB4K34ogBBeO8FPYJ\nqVuu2F6XL988ghz0sHjAdxrkQ6BnFJUoq+aM1mNGgOIeh1vnh129VAZy+wCxD5XH\nvrApN9f3Im0nx2qrx9nnKQbU1aZeaNvLEzMuUFjJQMrUKGQOhWOBTa/9m7UpuLA=\n=hfmW\n-----END PGP SIGNATURE-----\n", "payload": "tree 1152a079401b2d34bcc903f7935fe1aff0b7b3db\nparent 9042009b7f1ba0f85e892ac5184fa4542d0c10f5\nparent 02cac962e133d420485bc7b64698902dcc26a5e7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596111521 +0000\ncommitter GitHub <noreply@github.com> 1596111521 +0000\n\nMerge #5587\n\n5587: Finish use grammar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "html_url": "https://github.com/rust-lang/rust/commit/51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9042009b7f1ba0f85e892ac5184fa4542d0c10f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9042009b7f1ba0f85e892ac5184fa4542d0c10f5", "html_url": "https://github.com/rust-lang/rust/commit/9042009b7f1ba0f85e892ac5184fa4542d0c10f5"}, {"sha": "02cac962e133d420485bc7b64698902dcc26a5e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cac962e133d420485bc7b64698902dcc26a5e7", "html_url": "https://github.com/rust-lang/rust/commit/02cac962e133d420485bc7b64698902dcc26a5e7"}], "stats": {"total": 406, "additions": 222, "deletions": 184}, "files": [{"sha": "01e7b7a44cba776197fbf55e7d7b5eed69cb5c6c", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -92,7 +92,7 @@ impl AutoImportAssets {\n \n     fn for_regular_path(path_under_caret: ast::Path, ctx: &AssistContext) -> Option<Self> {\n         let syntax_under_caret = path_under_caret.syntax().to_owned();\n-        if syntax_under_caret.ancestors().find_map(ast::UseItem::cast).is_some() {\n+        if syntax_under_caret.ancestors().find_map(ast::Use::cast).is_some() {\n             return None;\n         }\n "}, {"sha": "c775fe25c52fdfcf8f79dc01facf93d42e6273ab", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     let mut rewriter = SyntaxRewriter::default();\n     let mut offset = ctx.offset();\n \n-    if let Some(use_item) = tree.syntax().parent().and_then(ast::UseItem::cast) {\n+    if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n         let (merged, to_delete) = next_prev()\n             .filter_map(|dir| neighbor(&use_item, dir))\n             .filter_map(|it| Some((it.clone(), it.use_tree()?)))"}, {"sha": "53496ede1508bd00ac4a54051de2018a16b30865", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn replace_qualified_name_with_use(\n ) -> Option<()> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n-    if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n+    if path.syntax().ancestors().find_map(ast::Use::cast).is_some() {\n         return None;\n     }\n \n@@ -85,7 +85,7 @@ fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path:\n             match child {\n                 // Don't modify `use` items, as this can break the `use` item when injecting a new\n                 // import into the use tree.\n-                ast::UseItem(_it) => continue,\n+                ast::Use(_it) => continue,\n                 // Don't descend into submodules, they don't have the same `use` items in scope.\n                 ast::Module(_it) => continue,\n "}, {"sha": "617afe2e945f6b40cdb96e72e737cf810de8e273", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -225,7 +225,7 @@ fn walk_use_tree_for_best_action(\n                 current_use_tree\n                     .syntax()\n                     .ancestors()\n-                    .find_map(ast::UseItem::cast)\n+                    .find_map(ast::Use::cast)\n                     .map(|it| it.syntax().clone()),\n                 true,\n             );\n@@ -254,7 +254,7 @@ fn walk_use_tree_for_best_action(\n             current_use_tree\n                 .syntax()\n                 .ancestors()\n-                .find_map(ast::UseItem::cast)\n+                .find_map(ast::Use::cast)\n                 .map(|it| it.syntax().clone()),\n             true,\n         ),\n@@ -304,7 +304,7 @@ fn walk_use_tree_for_best_action(\n                 current_use_tree\n                     .syntax()\n                     .ancestors()\n-                    .find_map(ast::UseItem::cast)\n+                    .find_map(ast::Use::cast)\n                     .map(|it| it.syntax().clone()),\n                 true,\n             );\n@@ -377,7 +377,7 @@ fn best_action_for_target(\n     let mut storage = Vec::with_capacity(16); // this should be the only allocation\n     let best_action = container\n         .children()\n-        .filter_map(ast::UseItem::cast)\n+        .filter_map(ast::Use::cast)\n         .filter_map(|it| it.use_tree())\n         .map(|u| walk_use_tree_for_best_action(&mut storage, None, u, target))\n         .fold(None, |best, a| match best {"}, {"sha": "5c57d8bde3b9a1da1fbd9ccedbf725030137afb5", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -670,7 +670,7 @@ impl ExprCollector<'_> {\n                     }\n                     ast::Item::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n                     ast::Item::ImplDef(_)\n-                    | ast::Item::UseItem(_)\n+                    | ast::Item::Use(_)\n                     | ast::Item::ExternCrate(_)\n                     | ast::Item::Module(_)\n                     | ast::Item::MacroCall(_) => return None,"}, {"sha": "0bab9c6d8b0da8e78e81c02ca65ddd60577c7a57", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -411,7 +411,7 @@ macro_rules! mod_items {\n }\n \n mod_items! {\n-    Import in imports -> ast::UseItem,\n+    Import in imports -> ast::Use,\n     ExternCrate in extern_crates -> ast::ExternCrate,\n     Function in functions -> ast::FnDef,\n     Struct in structs -> ast::StructDef,\n@@ -482,7 +482,7 @@ pub struct Import {\n     pub is_prelude: bool,\n     /// AST ID of the `use` or `extern crate` item this import was derived from. Note that many\n     /// `Import`s can map to the same `use` item.\n-    pub ast_id: FileAstId<ast::UseItem>,\n+    pub ast_id: FileAstId<ast::Use>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "8bd0362dce893edd2a0184219199ed51e177b995", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -95,7 +95,7 @@ impl Ctx {\n             ast::Item::TraitDef(_) | ast::Item::ImplDef(_) | ast::Item::ExternBlock(_) => {}\n \n             // These don't have inner items.\n-            ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::UseItem(_) => {}\n+            ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::Use(_) => {}\n         };\n \n         let attrs = Attrs::new(item, &self.hygiene);\n@@ -110,7 +110,7 @@ impl Ctx {\n             ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n             ast::Item::TraitDef(ast) => self.lower_trait(ast).map(Into::into),\n             ast::Item::ImplDef(ast) => self.lower_impl(ast).map(Into::into),\n-            ast::Item::UseItem(ast) => Some(ModItems(\n+            ast::Item::Use(ast) => Some(ModItems(\n                 self.lower_use(ast).into_iter().map(Into::into).collect::<SmallVec<_>>(),\n             )),\n             ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast).map(Into::into),\n@@ -469,7 +469,7 @@ impl Ctx {\n         Some(id(self.data().impls.alloc(res)))\n     }\n \n-    fn lower_use(&mut self, use_item: &ast::UseItem) -> Vec<FileItemTreeId<Import>> {\n+    fn lower_use(&mut self, use_item: &ast::Use) -> Vec<FileItemTreeId<Import>> {\n         // FIXME: cfg_attr\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let visibility = self.lower_visibility(use_item);"}, {"sha": "3f2e29d9ed3f75073e9245a5f960ce7ae297b9be", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -228,9 +228,9 @@ fn smoke() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: false, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: false, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Use>(0) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Use>(0) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n             ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrate>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]"}, {"sha": "68b9f89c375ebdfd69157271ab5f733893aa6e25", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -67,7 +67,7 @@ impl ModPath {\n \n     /// Calls `cb` with all paths, represented by this use item.\n     pub(crate) fn expand_use_item(\n-        item_src: InFile<ast::UseItem>,\n+        item_src: InFile<ast::Use>,\n         hygiene: &Hygiene,\n         mut cb: impl FnMut(ModPath, &ast::UseTree, /* is_glob */ bool, Option<ImportAlias>),\n     ) {"}, {"sha": "cc55f6dd6babb772149f40859ee1f4095e574778", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -36,7 +36,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) expected_type: Option<Type>,\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n     pub(super) function_syntax: Option<ast::FnDef>,\n-    pub(super) use_item_syntax: Option<ast::UseItem>,\n+    pub(super) use_item_syntax: Option<ast::Use>,\n     pub(super) record_lit_syntax: Option<ast::RecordLit>,\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n     pub(super) record_field_syntax: Option<ast::RecordField>,\n@@ -343,7 +343,7 @@ impl<'a> CompletionContext<'a> {\n         }\n \n         self.use_item_syntax =\n-            self.sema.ancestors_with_macros(self.token.parent()).find_map(ast::UseItem::cast);\n+            self.sema.ancestors_with_macros(self.token.parent()).find_map(ast::Use::cast);\n \n         self.function_syntax = self\n             .sema"}, {"sha": "bad0791463d5b1a5c7308da1e7bdd134fc6ebade", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n             }\n             NodeOrToken::Node(node) => {\n                 // Fold groups of imports\n-                if node.kind() == USE_ITEM && !visited_imports.contains(&node) {\n+                if node.kind() == USE && !visited_imports.contains(&node) {\n                     if let Some(range) = contiguous_range_for_group(&node, &mut visited_imports) {\n                         res.push(Fold { range, kind: FoldKind::Imports })\n                     }\n@@ -83,7 +83,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n         COMMENT => Some(FoldKind::Comment),\n-        USE_ITEM => Some(FoldKind::Imports),\n+        USE => Some(FoldKind::Imports),\n         ARG_LIST | PARAM_LIST => Some(FoldKind::ArgList),\n         RECORD_FIELD_DEF_LIST\n         | RECORD_FIELD_PAT_LIST"}, {"sha": "8e836a77e1d4c27b11d39794dff9925b74b83a66", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -7,7 +7,7 @@ pub(super) fn use_item(p: &mut Parser, m: Marker) {\n     p.bump(T![use]);\n     use_tree(p, true);\n     p.expect(T![;]);\n-    m.complete(p, USE_ITEM);\n+    m.complete(p, USE);\n }\n \n /// Parse a use 'tree', such as `some::path` in `use some::path;`"}, {"sha": "4f35e0baa58b13861b5814a366b59196cda048f1", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -130,7 +130,7 @@ pub enum SyntaxKind {\n     RET_TYPE,\n     EXTERN_CRATE,\n     MODULE,\n-    USE_ITEM,\n+    USE,\n     STATIC_DEF,\n     CONST_DEF,\n     TRAIT_DEF,"}, {"sha": "213dc494fffcc5e88060cdb55b7a96b4cf61c146", "filename": "crates/ra_ssr/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fsearch.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -237,7 +237,7 @@ fn is_search_permitted(node: &SyntaxNode) -> bool {\n     // and the code is `use foo::{baz, bar}`, we'll match `bar`, since it resolves to `foo::bar`.\n     // However we'll then replace just the part we matched `bar`. We probably need to instead remove\n     // `bar` and insert a new use declaration.\n-    node.kind() != SyntaxKind::USE_ITEM\n+    node.kind() != SyntaxKind::USE\n }\n \n impl UsageCache {"}, {"sha": "6ebe10ff65eddcd2c4b1aad50e54e31003b25bee", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -262,9 +262,9 @@ impl ast::PathSegment {\n     }\n }\n \n-impl ast::UseItem {\n+impl ast::Use {\n     #[must_use]\n-    pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::UseItem {\n+    pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::Use {\n         if let Some(old) = self.use_tree() {\n             return self.replace_descendant(old, use_tree);\n         }"}, {"sha": "be657699ff53054e11a40c5b0fefd6a5dfba3020", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 93, "deletions": 91, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -213,12 +213,12 @@ impl UnionDef {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UseItem {\n+pub struct Use {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for UseItem {}\n-impl ast::VisibilityOwner for UseItem {}\n-impl UseItem {\n+impl ast::AttrsOwner for Use {}\n+impl ast::VisibilityOwner for Use {}\n+impl Use {\n     pub fn use_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![use]) }\n     pub fn use_tree(&self) -> Option<UseTree> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n@@ -268,6 +268,36 @@ pub struct Rename {\n impl ast::NameOwner for Rename {}\n impl Rename {\n     pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n+    pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct UseTree {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl UseTree {\n+    pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn star_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![*]) }\n+    pub fn use_tree_list(&self) -> Option<UseTreeList> { support::child(&self.syntax) }\n+    pub fn rename(&self) -> Option<Rename> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Path {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl Path {\n+    pub fn qualifier(&self) -> Option<Path> { support::child(&self.syntax) }\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn segment(&self) -> Option<PathSegment> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct UseTreeList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl UseTreeList {\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n+    pub fn use_trees(&self) -> AstChildren<UseTree> { support::children(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Abi {\n@@ -433,15 +463,6 @@ impl PathType {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Path {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl Path {\n-    pub fn qualifier(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n-    pub fn segment(&self) -> Option<PathSegment> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1178,26 +1199,6 @@ impl Param {\n     pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UseTree {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl UseTree {\n-    pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n-    pub fn star_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![*]) }\n-    pub fn use_tree_list(&self) -> Option<UseTreeList> { support::child(&self.syntax) }\n-    pub fn rename(&self) -> Option<Rename> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UseTreeList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl UseTreeList {\n-    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn use_trees(&self) -> AstChildren<UseTree> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1282,7 +1283,7 @@ pub enum Item {\n     TraitDef(TraitDef),\n     TypeAliasDef(TypeAliasDef),\n     UnionDef(UnionDef),\n-    UseItem(UseItem),\n+    Use(Use),\n }\n impl ast::AttrsOwner for Item {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1561,8 +1562,8 @@ impl AstNode for UnionDef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for UseItem {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_ITEM }\n+impl AstNode for Use {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1627,6 +1628,39 @@ impl AstNode for Rename {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for UseTree {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for Path {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for UseTreeList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Abi {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ABI }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1825,17 +1859,6 @@ impl AstNode for PathType {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Path {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for PointerType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == POINTER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2672,28 +2695,6 @@ impl AstNode for Param {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for UseTree {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for UseTreeList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for PathSegment {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_SEGMENT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2810,15 +2811,16 @@ impl From<TypeAliasDef> for Item {\n impl From<UnionDef> for Item {\n     fn from(node: UnionDef) -> Item { Item::UnionDef(node) }\n }\n-impl From<UseItem> for Item {\n-    fn from(node: UseItem) -> Item { Item::UseItem(node) }\n+impl From<Use> for Item {\n+    fn from(node: Use) -> Item { Item::Use(node) }\n }\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE | FN_DEF | IMPL_DEF | MACRO_CALL\n-            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | UNION_DEF\n-            | USE_ITEM => true,\n+            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | UNION_DEF | USE => {\n+                true\n+            }\n             _ => false,\n         }\n     }\n@@ -2837,7 +2839,7 @@ impl AstNode for Item {\n             TRAIT_DEF => Item::TraitDef(TraitDef { syntax }),\n             TYPE_ALIAS_DEF => Item::TypeAliasDef(TypeAliasDef { syntax }),\n             UNION_DEF => Item::UnionDef(UnionDef { syntax }),\n-            USE_ITEM => Item::UseItem(UseItem { syntax }),\n+            USE => Item::Use(Use { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -2857,7 +2859,7 @@ impl AstNode for Item {\n             Item::TraitDef(it) => &it.syntax,\n             Item::TypeAliasDef(it) => &it.syntax,\n             Item::UnionDef(it) => &it.syntax,\n-            Item::UseItem(it) => &it.syntax,\n+            Item::Use(it) => &it.syntax,\n         }\n     }\n }\n@@ -3530,7 +3532,7 @@ impl std::fmt::Display for UnionDef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for UseItem {\n+impl std::fmt::Display for Use {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3560,6 +3562,21 @@ impl std::fmt::Display for Rename {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for UseTree {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Path {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for UseTreeList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Abi {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3650,11 +3667,6 @@ impl std::fmt::Display for PathType {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Path {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for PointerType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4035,16 +4047,6 @@ impl std::fmt::Display for Param {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for UseTree {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for UseTreeList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for PathSegment {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "0ff69bc2d1dd03fc6f0a52c2ce0427e5f9cf5f34", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -60,7 +60,7 @@ pub fn use_tree_list(use_trees: impl IntoIterator<Item = ast::UseTree>) -> ast::\n     ast_from_text(&format!(\"use {{{}}};\", use_trees))\n }\n \n-pub fn use_item(use_tree: ast::UseTree) -> ast::UseItem {\n+pub fn use_item(use_tree: ast::UseTree) -> ast::Use {\n     ast_from_text(&format!(\"use {};\", use_tree))\n }\n "}, {"sha": "4cfd1bce4b1739768ff4b50796e921e9b1b42a30", "filename": "crates/ra_syntax/test_data/parser/err/0002_duplicate_shebang.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -6,7 +6,7 @@ SOURCE_FILE@0..42\n     BANG@22..23 \"!\"\n   ERROR@23..24\n     SLASH@23..24 \"/\"\n-  USE_ITEM@24..28\n+  USE@24..28\n     USE_KW@24..27 \"use\"\n     ERROR@27..28\n       SLASH@27..28 \"/\""}, {"sha": "9a0f4665efc9981009ae559a266789794427a600", "filename": "crates/ra_syntax/test_data/parser/err/0004_use_path_bad_segment.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..12\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..11"}, {"sha": "0415085b06f0731d30a2dfe73d6369569b84220f", "filename": "crates/ra_syntax/test_data/parser/err/0035_use_recover.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..48\n-  USE_ITEM@0..13\n+  USE@0..13\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..12\n@@ -14,10 +14,10 @@ SOURCE_FILE@0..48\n             IDENT@9..12 \"bar\"\n     SEMICOLON@12..13 \";\"\n   WHITESPACE@13..14 \"\\n\"\n-  USE_ITEM@14..17\n+  USE@14..17\n     USE_KW@14..17 \"use\"\n   WHITESPACE@17..18 \"\\n\"\n-  USE_ITEM@18..33\n+  USE@18..33\n     USE_KW@18..21 \"use\"\n     WHITESPACE@21..22 \" \"\n     USE_TREE@22..32\n@@ -31,7 +31,7 @@ SOURCE_FILE@0..48\n             IDENT@29..32 \"baz\"\n     SEMICOLON@32..33 \";\"\n   WHITESPACE@33..34 \"\\n\"\n-  USE_ITEM@34..37\n+  USE@34..37\n     USE_KW@34..37 \"use\"\n   WHITESPACE@37..38 \"\\n\"\n   FN_DEF@38..47"}, {"sha": "ef6172f8a1ad0991e92a23fa784581a17d4238e2", "filename": "crates/ra_syntax/test_data/parser/err/0036_partial_use.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..37\n-  USE_ITEM@0..36\n+  USE@0..36\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..36"}, {"sha": "284c8715b35f3d02cf54d23e7fee6120471e3e16", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..98\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..11\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..98\n           CRATE_KW@6..11 \"crate\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n-  USE_ITEM@13..54\n+  USE@13..54\n     USE_KW@13..16 \"use\"\n     WHITESPACE@16..17 \" \"\n     USE_TREE@17..53\n@@ -52,7 +52,7 @@ SOURCE_FILE@0..98\n         R_CURLY@52..53 \"}\"\n     SEMICOLON@53..54 \";\"\n   WHITESPACE@54..55 \"\\n\"\n-  USE_ITEM@55..72\n+  USE@55..72\n     USE_KW@55..58 \"use\"\n     WHITESPACE@58..59 \" \"\n     USE_TREE@59..71\n@@ -66,7 +66,7 @@ SOURCE_FILE@0..98\n           CRATE_KW@66..71 \"crate\"\n     SEMICOLON@71..72 \";\"\n   WHITESPACE@72..73 \"\\n\"\n-  USE_ITEM@73..97\n+  USE@73..97\n     USE_KW@73..76 \"use\"\n     WHITESPACE@76..77 \" \"\n     USE_TREE@77..96"}, {"sha": "2049a9d724f4fb8221878e31e70f77342b7478a7", "filename": "crates/ra_syntax/test_data/parser/err/0041_illegal_super_keyword_location.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..67\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..11\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..67\n           SUPER_KW@6..11 \"super\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n-  USE_ITEM@13..26\n+  USE@13..26\n     USE_KW@13..16 \"use\"\n     WHITESPACE@16..17 \" \"\n     USE_TREE@17..25\n@@ -23,7 +23,7 @@ SOURCE_FILE@0..67\n           SUPER_KW@20..25 \"super\"\n     SEMICOLON@25..26 \";\"\n   WHITESPACE@26..27 \"\\n\"\n-  USE_ITEM@27..47\n+  USE@27..47\n     USE_KW@27..30 \"use\"\n     WHITESPACE@30..31 \" \"\n     USE_TREE@31..46\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..67\n           SUPER_KW@41..46 \"super\"\n     SEMICOLON@46..47 \";\"\n   WHITESPACE@47..48 \"\\n\"\n-  USE_ITEM@48..66\n+  USE@48..66\n     USE_KW@48..51 \"use\"\n     WHITESPACE@51..52 \" \"\n     USE_TREE@52..65"}, {"sha": "deadf56b4b5a08d0e08ecfd80c28b63c9b2c67db", "filename": "crates/ra_syntax/test_data/parser/err/0042_illegal_self_keyword_location.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..25\n-  USE_ITEM@0..11\n+  USE@0..11\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..10\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..25\n           SELF_KW@6..10 \"self\"\n     SEMICOLON@10..11 \";\"\n   WHITESPACE@11..12 \"\\n\"\n-  USE_ITEM@12..24\n+  USE@12..24\n     USE_KW@12..15 \"use\"\n     WHITESPACE@15..16 \" \"\n     USE_TREE@16..23"}, {"sha": "2f59d0606c09d4527befe77fc4c2ffd6ea7c9253", "filename": "crates/ra_syntax/test_data/parser/inline/err/0015_empty_segment.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..13\n-  USE_ITEM@0..12\n+  USE@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..12"}, {"sha": "1e80dd7e27f02740fe636aed24b9bd6a859900c6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0002_use_tree_list.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..249\n-  USE_ITEM@0..58\n+  USE@0..58\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..57\n@@ -51,7 +51,7 @@ SOURCE_FILE@0..249\n   WHITESPACE@58..59 \" \"\n   COMMENT@59..97 \"// Rust 2018 (with a  ...\"\n   WHITESPACE@97..98 \"\\n\"\n-  USE_ITEM@98..121\n+  USE@98..121\n     USE_KW@98..101 \"use\"\n     WHITESPACE@101..102 \" \"\n     USE_TREE@102..120\n@@ -77,7 +77,7 @@ SOURCE_FILE@0..249\n   WHITESPACE@121..122 \" \"\n   COMMENT@122..134 \"// Rust 2015\"\n   WHITESPACE@134..135 \"\\n\"\n-  USE_ITEM@135..166\n+  USE@135..166\n     USE_KW@135..138 \"use\"\n     WHITESPACE@138..139 \" \"\n     USE_TREE@139..165\n@@ -104,7 +104,7 @@ SOURCE_FILE@0..249\n   WHITESPACE@166..167 \" \"\n   COMMENT@167..179 \"// Rust 2015\"\n   WHITESPACE@179..180 \"\\n\"\n-  USE_ITEM@180..205\n+  USE@180..205\n     USE_KW@180..183 \"use\"\n     WHITESPACE@183..184 \" \"\n     USE_TREE@184..204"}, {"sha": "b3623c4455de650ea2dc7ccec9547bf204e77691", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0020_use_star.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,20 +1,20 @@\n SOURCE_FILE@0..60\n-  USE_ITEM@0..6\n+  USE@0..6\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..5\n       STAR@4..5 \"*\"\n     SEMICOLON@5..6 \";\"\n   WHITESPACE@6..7 \"\\n\"\n-  USE_ITEM@7..15\n+  USE@7..15\n     USE_KW@7..10 \"use\"\n     WHITESPACE@10..11 \" \"\n     USE_TREE@11..14\n       COLON2@11..13 \"::\"\n       STAR@13..14 \"*\"\n     SEMICOLON@14..15 \";\"\n   WHITESPACE@15..16 \"\\n\"\n-  USE_ITEM@16..36\n+  USE@16..36\n     USE_KW@16..19 \"use\"\n     WHITESPACE@19..20 \" \"\n     USE_TREE@20..35\n@@ -35,7 +35,7 @@ SOURCE_FILE@0..60\n         R_CURLY@34..35 \"}\"\n     SEMICOLON@35..36 \";\"\n   WHITESPACE@36..37 \"\\n\"\n-  USE_ITEM@37..59\n+  USE@37..59\n     USE_KW@37..40 \"use\"\n     WHITESPACE@40..41 \" \"\n     USE_TREE@41..58"}, {"sha": "60b517230e8b3a70b7db131054d60ef3a7ffc58c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0043_use_alias.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..198\n-  USE_ITEM@0..28\n+  USE@0..28\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..27\n@@ -20,7 +20,7 @@ SOURCE_FILE@0..198\n           IDENT@18..27 \"some_name\"\n     SEMICOLON@27..28 \";\"\n   WHITESPACE@28..29 \"\\n\"\n-  USE_ITEM@29..181\n+  USE@29..181\n     USE_KW@29..32 \"use\"\n     WHITESPACE@32..33 \" \"\n     USE_TREE@33..180\n@@ -121,7 +121,7 @@ SOURCE_FILE@0..198\n         R_CURLY@179..180 \"}\"\n     SEMICOLON@180..181 \";\"\n   WHITESPACE@181..182 \"\\n\"\n-  USE_ITEM@182..197\n+  USE@182..197\n     USE_KW@182..185 \"use\"\n     WHITESPACE@185..186 \" \"\n     USE_TREE@186..196"}, {"sha": "702f2e0b0aab124715ef14d300833d2e8491536f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0067_crate_path.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..16\n-  USE_ITEM@0..15\n+  USE@0..15\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..14"}, {"sha": "c4c5bc51e3e3d7330e1dced1af4a9ec00a16800f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0069_use_tree_list_after_path.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..37\n-  USE_ITEM@0..18\n+  USE@0..18\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..17\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..37\n         R_CURLY@16..17 \"}\"\n     SEMICOLON@17..18 \";\"\n   WHITESPACE@18..19 \"\\n\"\n-  USE_ITEM@19..36\n+  USE@19..36\n     USE_KW@19..22 \"use\"\n     WHITESPACE@22..23 \" \"\n     USE_TREE@23..35"}, {"sha": "82028096f831d2b667aa94ac58a247b5999ac7a1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0110_use_path.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0110_use_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0110_use_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0110_use_path.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..154\n-  USE_ITEM@0..17\n+  USE@0..17\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..16\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..154\n   WHITESPACE@17..18 \" \"\n   COMMENT@18..45 \"// Rust 2018 - All fl ...\"\n   WHITESPACE@45..46 \"\\n\"\n-  USE_ITEM@46..61\n+  USE@46..61\n     USE_KW@46..49 \"use\"\n     WHITESPACE@49..50 \" \"\n     USE_TREE@50..60\n@@ -24,7 +24,7 @@ SOURCE_FILE@0..154\n   WHITESPACE@61..62 \" \"\n   COMMENT@62..91 \"// Rust 2018 - Anchor ...\"\n   WHITESPACE@91..92 \"\\n\"\n-  USE_ITEM@92..124\n+  USE@92..124\n     USE_KW@92..95 \"use\"\n     WHITESPACE@95..96 \" \"\n     USE_TREE@96..123"}, {"sha": "6be1cf9fc83f0bd03b695bdc525c12d867b30e18", "filename": "crates/ra_syntax/test_data/parser/ok/0009_use_item.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0009_use_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0009_use_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0009_use_item.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..19\n-  USE_ITEM@0..8\n+  USE@0..8\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..7\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..19\n             IDENT@4..7 \"foo\"\n     SEMICOLON@7..8 \";\"\n   WHITESPACE@8..9 \"\\n\"\n-  USE_ITEM@9..19\n+  USE@9..19\n     USE_KW@9..12 \"use\"\n     WHITESPACE@12..13 \" \"\n     USE_TREE@13..18"}, {"sha": "4d49e7933747d0f54a5ed46a964b46818b07fe96", "filename": "crates/ra_syntax/test_data/parser/ok/0010_use_path_segments.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0010_use_path_segments.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0010_use_path_segments.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0010_use_path_segments.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..40\n-  USE_ITEM@0..20\n+  USE@0..20\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..19\n@@ -20,7 +20,7 @@ SOURCE_FILE@0..40\n             IDENT@16..19 \"baz\"\n     SEMICOLON@19..20 \";\"\n   WHITESPACE@20..21 \"\\n\"\n-  USE_ITEM@21..39\n+  USE@21..39\n     USE_KW@21..24 \"use\"\n     WHITESPACE@24..25 \" \"\n     USE_TREE@25..38"}, {"sha": "66ab13660951756852e513045c493ad43e885bf0", "filename": "crates/ra_syntax/test_data/parser/ok/0013_use_path_self_super.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..38\n-  USE_ITEM@0..14\n+  USE@0..14\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..13\n@@ -13,7 +13,7 @@ SOURCE_FILE@0..38\n             IDENT@10..13 \"foo\"\n     SEMICOLON@13..14 \";\"\n   WHITESPACE@14..15 \"\\n\"\n-  USE_ITEM@15..37\n+  USE@15..37\n     USE_KW@15..18 \"use\"\n     WHITESPACE@18..19 \" \"\n     USE_TREE@19..36"}, {"sha": "4389d2d4bce35234f03b401eb7733ff177138606", "filename": "crates/ra_syntax/test_data/parser/ok/0014_use_tree.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0014_use_tree.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0014_use_tree.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0014_use_tree.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,20 +1,20 @@\n SOURCE_FILE@0..81\n-  USE_ITEM@0..6\n+  USE@0..6\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..5\n       STAR@4..5 \"*\"\n     SEMICOLON@5..6 \";\"\n   WHITESPACE@6..7 \"\\n\"\n-  USE_ITEM@7..15\n+  USE@7..15\n     USE_KW@7..10 \"use\"\n     WHITESPACE@10..11 \" \"\n     USE_TREE@11..14\n       COLON2@11..13 \"::\"\n       STAR@13..14 \"*\"\n     SEMICOLON@14..15 \";\"\n   WHITESPACE@15..16 \"\\n\"\n-  USE_ITEM@16..25\n+  USE@16..25\n     USE_KW@16..19 \"use\"\n     WHITESPACE@19..20 \" \"\n     USE_TREE@20..24\n@@ -24,7 +24,7 @@ SOURCE_FILE@0..81\n         R_CURLY@23..24 \"}\"\n     SEMICOLON@24..25 \";\"\n   WHITESPACE@25..26 \"\\n\"\n-  USE_ITEM@26..33\n+  USE@26..33\n     USE_KW@26..29 \"use\"\n     WHITESPACE@29..30 \" \"\n     USE_TREE@30..32\n@@ -33,7 +33,7 @@ SOURCE_FILE@0..81\n         R_CURLY@31..32 \"}\"\n     SEMICOLON@32..33 \";\"\n   WHITESPACE@33..34 \"\\n\"\n-  USE_ITEM@34..45\n+  USE@34..45\n     USE_KW@34..37 \"use\"\n     WHITESPACE@37..38 \" \"\n     USE_TREE@38..44\n@@ -45,7 +45,7 @@ SOURCE_FILE@0..81\n       STAR@43..44 \"*\"\n     SEMICOLON@44..45 \";\"\n   WHITESPACE@45..46 \"\\n\"\n-  USE_ITEM@46..58\n+  USE@46..58\n     USE_KW@46..49 \"use\"\n     WHITESPACE@49..50 \" \"\n     USE_TREE@50..57\n@@ -59,7 +59,7 @@ SOURCE_FILE@0..81\n         R_CURLY@56..57 \"}\"\n     SEMICOLON@57..58 \";\"\n   WHITESPACE@58..59 \"\\n\"\n-  USE_ITEM@59..80\n+  USE@59..80\n     USE_KW@59..62 \"use\"\n     WHITESPACE@62..63 \" \"\n     USE_TREE@63..79"}, {"sha": "d7e93f7eb753ec7f5ad125a1dde5edbace104e17", "filename": "crates/ra_syntax/test_data/parser/ok/0015_use_tree.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0015_use_tree.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0015_use_tree.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0015_use_tree.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..55\n-  USE_ITEM@0..15\n+  USE@0..15\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n     USE_TREE@4..14\n@@ -15,7 +15,7 @@ SOURCE_FILE@0..55\n           IDENT@11..14 \"bar\"\n     SEMICOLON@14..15 \";\"\n   WHITESPACE@15..16 \"\\n\"\n-  USE_ITEM@16..54\n+  USE@16..54\n     USE_KW@16..19 \"use\"\n     WHITESPACE@19..20 \" \"\n     USE_TREE@20..53"}, {"sha": "bbdf896d10b201b11f64753f2f51a145137c0ff1", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -78,7 +78,7 @@ SOURCE_FILE@0..3813\n       STRING@399..404 \"\\\"128\\\"\"\n     R_BRACK@404..405 \"]\"\n   WHITESPACE@405..407 \"\\n\\n\"\n-  USE_ITEM@407..427\n+  USE@407..427\n     USE_KW@407..410 \"use\"\n     WHITESPACE@410..411 \" \"\n     USE_TREE@411..426\n@@ -98,7 +98,7 @@ SOURCE_FILE@0..3813\n             IDENT@422..426 \"Cell\"\n     SEMICOLON@426..427 \";\"\n   WHITESPACE@427..428 \"\\n\"\n-  USE_ITEM@428..447\n+  USE@428..447\n     USE_KW@428..431 \"use\"\n     WHITESPACE@431..432 \" \"\n     USE_TREE@432..446"}, {"sha": "3a58217c479847357d980a80b90c9c2efeafb7db", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -100,7 +100,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"RET_TYPE\",\n         \"EXTERN_CRATE\",\n         \"MODULE\",\n-        \"USE_ITEM\",\n+        \"USE\",\n         \"STATIC_DEF\",\n         \"CONST_DEF\",\n         \"TRAIT_DEF\","}, {"sha": "c77fc8a8d09e04f3eb781c331e359f1f850cb956", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -543,6 +543,10 @@ fn lower_enum(grammar: &Grammar, rule: &Rule) -> Option<Vec<String>> {\n }\n \n fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) {\n+    if lower_comma_list(acc, grammar, rule) {\n+        return;\n+    }\n+\n     match rule {\n         Rule::Node(node) => {\n             let field = Field::Node { name: grammar[*node].name.clone(), src: FieldSrc::Shorthand };\n@@ -595,6 +599,37 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) {\n     }\n }\n \n+// (T (',' T)* ','?)?\n+fn lower_comma_list(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) -> bool {\n+    let rule = match rule {\n+        Rule::Opt(it) => it,\n+        _ => return false,\n+    };\n+    let rule = match &**rule {\n+        Rule::Seq(it) => it,\n+        _ => return false,\n+    };\n+    let (node, repeat, trailing_comma) = match rule.as_slice() {\n+        [Rule::Node(node), Rule::Rep(repeat), Rule::Opt(trailing_comma)] => {\n+            (node, repeat, trailing_comma)\n+        }\n+        _ => return false,\n+    };\n+    let repeat = match &**repeat {\n+        Rule::Seq(it) => it,\n+        _ => return false,\n+    };\n+    match repeat.as_slice() {\n+        [comma, Rule::Node(n)] if comma == &**trailing_comma && n == node => (),\n+        _ => return false,\n+    }\n+    let name = grammar[*node].name.clone();\n+    let label = pluralize(&to_lower_snake_case(&name));\n+    let field = Field::Node { name: label.clone(), src: FieldSrc::Many(name) };\n+    acc.push(field);\n+    true\n+}\n+\n fn deduplicate_fields(ast: &mut AstSrc) {\n     for node in &mut ast.nodes {\n         let mut i = 0;"}, {"sha": "449b0242fb422d34eeee16cd2b4b918fd6945fdf", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/51b18ee2f1c3c9f7ea58c5f00b451e683048f618/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=51b18ee2f1c3c9f7ea58c5f00b451e683048f618", "patch": "@@ -17,7 +17,7 @@ Item =\n | TraitDef\n | TypeAliasDef\n | UnionDef\n-| UseItem\n+| Use\n \n Module =\n   Attr* Visibility? 'mod' Name\n@@ -29,6 +29,19 @@ ItemList =\n ExternCrate =\n   Attr* Visibility? 'extern' 'crate' (NameRef | 'self') Rename? ';'\n \n+Rename =\n+  'as' (Name | '_')\n+\n+Use =\n+  Attr* Visibility? 'use' UseTree ';'\n+\n+UseTree =\n+  (Path? '::')? ('*' | UseTreeList )\n+| Path Rename?\n+\n+UseTreeList =\n+  '{' (UseTree (',' UseTree)* ','?)? '}'\n+\n FnDef =\n  Attr* Visibility? Abi? 'const' 'default' 'async' 'unsafe' 'fn' Name TypeParamList?\n  ParamList RetType?\n@@ -395,18 +408,6 @@ Param =\n   Attr* Pat (':' ascribed_type:TypeRef)\n | '...'\n \n-UseItem =\n-  Attr* Visibility? 'use' UseTree ';'\n-\n-UseTree =\n-  Path ('::' ('*' | UseTreeList))  Rename?\n-\n-UseTreeList =\n-  '{' UseTree* '}'\n-\n-Rename =\n-  'as' Name\n-\n Path =\n   (qualifier:Path '::')? segment:PathSegment\n "}]}