{"sha": "06d02e0a1e15a329501e3da8b278be4ca4a381b2", "node_id": "C_kwDOAAsO6NoAKDA2ZDAyZTBhMWUxNWEzMjk1MDFlM2RhOGIyNzhiZTRjYTRhMzgxYjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-25T22:48:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-25T22:48:08Z"}, "message": "Auto merge of #14893 - HKalbasi:dev, r=HKalbasi\n\nFix `need-mut` false positive in closure capture of match scrutinee\n\nFix `need-mut` false positive on self.", "tree": {"sha": "90bc52105ce4c699760560268072c1c6e3e395ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90bc52105ce4c699760560268072c1c6e3e395ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d02e0a1e15a329501e3da8b278be4ca4a381b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d02e0a1e15a329501e3da8b278be4ca4a381b2", "html_url": "https://github.com/rust-lang/rust/commit/06d02e0a1e15a329501e3da8b278be4ca4a381b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d02e0a1e15a329501e3da8b278be4ca4a381b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcd3a6b037dc39a458d52d7e22b033b01720ff1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd3a6b037dc39a458d52d7e22b033b01720ff1b", "html_url": "https://github.com/rust-lang/rust/commit/fcd3a6b037dc39a458d52d7e22b033b01720ff1b"}, {"sha": "780349bdafb7983d59d07891abe4225e28d96541", "url": "https://api.github.com/repos/rust-lang/rust/commits/780349bdafb7983d59d07891abe4225e28d96541", "html_url": "https://github.com/rust-lang/rust/commit/780349bdafb7983d59d07891abe4225e28d96541"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "36626ed1a9b1f6156d5f61365fcc725063931d6f", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=06d02e0a1e15a329501e3da8b278be4ca4a381b2", "patch": "@@ -227,9 +227,8 @@ impl Body {\n         });\n     }\n \n-    pub fn walk_pats(&self, pat_id: PatId, f: &mut impl FnMut(PatId)) {\n+    pub fn walk_pats_shallow(&self, pat_id: PatId, mut f: impl FnMut(PatId)) {\n         let pat = &self[pat_id];\n-        f(pat_id);\n         match pat {\n             Pat::Range { .. }\n             | Pat::Lit(..)\n@@ -239,23 +238,28 @@ impl Body {\n             | Pat::Missing => {}\n             &Pat::Bind { subpat, .. } => {\n                 if let Some(subpat) = subpat {\n-                    self.walk_pats(subpat, f);\n+                    f(subpat);\n                 }\n             }\n             Pat::Or(args) | Pat::Tuple { args, .. } | Pat::TupleStruct { args, .. } => {\n-                args.iter().copied().for_each(|p| self.walk_pats(p, f));\n+                args.iter().copied().for_each(|p| f(p));\n             }\n-            Pat::Ref { pat, .. } => self.walk_pats(*pat, f),\n+            Pat::Ref { pat, .. } => f(*pat),\n             Pat::Slice { prefix, slice, suffix } => {\n                 let total_iter = prefix.iter().chain(slice.iter()).chain(suffix.iter());\n-                total_iter.copied().for_each(|p| self.walk_pats(p, f));\n+                total_iter.copied().for_each(|p| f(p));\n             }\n             Pat::Record { args, .. } => {\n-                args.iter().for_each(|RecordFieldPat { pat, .. }| self.walk_pats(*pat, f));\n+                args.iter().for_each(|RecordFieldPat { pat, .. }| f(*pat));\n             }\n-            Pat::Box { inner } => self.walk_pats(*inner, f),\n+            Pat::Box { inner } => f(*inner),\n         }\n     }\n+\n+    pub fn walk_pats(&self, pat_id: PatId, f: &mut impl FnMut(PatId)) {\n+        f(pat_id);\n+        self.walk_pats_shallow(pat_id, |p| self.walk_pats(p, f));\n+    }\n }\n \n impl Default for Body {"}, {"sha": "787c5c54a2916e4fffd3b9ec4b913aab6d7afe43", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=06d02e0a1e15a329501e3da8b278be4ca4a381b2", "patch": "@@ -643,7 +643,21 @@ impl InferenceContext<'_> {\n             }\n             None => *result = Some(ck),\n         };\n-        self.body.walk_pats(pat, &mut |p| match &self.body[p] {\n+\n+        self.walk_pat_inner(\n+            pat,\n+            &mut update_result,\n+            BorrowKind::Mut { allow_two_phase_borrow: false },\n+        );\n+    }\n+\n+    fn walk_pat_inner(\n+        &mut self,\n+        p: PatId,\n+        update_result: &mut impl FnMut(CaptureKind),\n+        mut for_mut: BorrowKind,\n+    ) {\n+        match &self.body[p] {\n             Pat::Ref { .. }\n             | Pat::Box { .. }\n             | Pat::Missing\n@@ -678,13 +692,15 @@ impl InferenceContext<'_> {\n                     }\n                 }\n                 crate::BindingMode::Ref(r) => match r {\n-                    Mutability::Mut => update_result(CaptureKind::ByRef(BorrowKind::Mut {\n-                        allow_two_phase_borrow: false,\n-                    })),\n+                    Mutability::Mut => update_result(CaptureKind::ByRef(for_mut)),\n                     Mutability::Not => update_result(CaptureKind::ByRef(BorrowKind::Shared)),\n                 },\n             },\n-        });\n+        }\n+        if self.result.pat_adjustments.get(&p).map_or(false, |x| !x.is_empty()) {\n+            for_mut = BorrowKind::Unique;\n+        }\n+        self.body.walk_pats_shallow(p, |p| self.walk_pat_inner(p, update_result, for_mut));\n     }\n \n     fn expr_ty(&self, expr: ExprId) -> Ty {"}, {"sha": "576e7f3fc619cf7b2518c08682275c5a2ab9916d", "filename": "crates/hir-ty/src/layout/tests/closure.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests%2Fclosure.rs?ref=06d02e0a1e15a329501e3da8b278be4ca4a381b2", "patch": "@@ -201,7 +201,7 @@ fn match_pattern() {\n         ]\n         |x: i64| {\n             match y {\n-                X(_a, _b, _c) => x,\n+                X(_a, _, _c) => x,\n             }\n         }\n     }\n@@ -217,6 +217,18 @@ fn match_pattern() {\n             }\n         }\n     }\n+    size_and_align_expr! {\n+        minicore: copy;\n+        stmts: [\n+            struct X(i64, i32, (u8, i128));\n+            let y: X = X(2, 5, (7, 3));\n+        ]\n+        |x: i64| {\n+            match y {\n+                ref _y => x,\n+            }\n+        }\n+    }\n }\n \n #[test]"}, {"sha": "45b44c2c5ca912d3a95556d3ed027d38541cbd26", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d02e0a1e15a329501e3da8b278be4ca4a381b2/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=06d02e0a1e15a329501e3da8b278be4ca4a381b2", "patch": "@@ -352,6 +352,32 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn match_closure_capture() {\n+        check_diagnostics(\n+            r#\"\n+//- minicore: option\n+fn main() {\n+    let mut v = &mut Some(2);\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n+    let _ = || match v {\n+        Some(k) => {\n+            *k = 5;\n+        }\n+        None => {}\n+    };\n+    let v = &mut Some(2);\n+    let _ = || match v {\n+                   //^ \ud83d\udca1 error: cannot mutate immutable variable `v`\n+        ref mut k => {\n+            *k = &mut Some(5);\n+        }\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn match_bindings() {\n         check_diagnostics("}]}