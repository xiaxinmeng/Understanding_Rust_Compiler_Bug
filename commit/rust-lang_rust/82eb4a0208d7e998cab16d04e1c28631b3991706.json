{"sha": "82eb4a0208d7e998cab16d04e1c28631b3991706", "node_id": "C_kwDOAAsO6NoAKDgyZWI0YTAyMDhkN2U5OThjYWIxNmQwNGUxYzI4NjMxYjM5OTE3MDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-15T15:52:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-15T15:52:36Z"}, "message": "Rollup merge of #112486 - jieyouxu:issue-112472, r=oli-obk\n\nFix suggestion for E0404 not dealing with multiple generics\n\nFixes #112472.", "tree": {"sha": "eeffa6c91e26de94be0cfdf30ae950e52221470b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeffa6c91e26de94be0cfdf30ae950e52221470b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82eb4a0208d7e998cab16d04e1c28631b3991706", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkizPECRBK7hj4Ov3rIwAAHTkIAIheSKWzmGNmddhRHuwc+sMW\n8hplK93gMyMhgDRTb/wP7QuQaJWRi+VNx6Nj17x5V1w/bc8VdxOnCYzYclWFwwP5\nuKf9QCO1kiC88XNUL+vy2hB64lAaZzrCD+HKYxvy46UNz/GtIFwLgPXBYQqi7YfQ\nkVgMKjehSTZ/sY2j1GAlbpVrql/516bOPn6qYzzQY3rXaJWBAD0giN1RxqTkfUm3\nPge7jEtZ24pOHOfxv5iicHJJUifYKA9eqG43qQNv8cSZr7zNXSgbjh3m5fmrMQwj\nkdY3jep5KzqM6V//UdvqCjkmrTb0ODs3JrIIvWu8rJZHGAR6SWcG5dTcUHijoso=\n=jd/r\n-----END PGP SIGNATURE-----\n", "payload": "tree eeffa6c91e26de94be0cfdf30ae950e52221470b\nparent 9bc95a4bc99321d69369912aba53de2d477a2bce\nparent 32ae8810fcc6d96a1e7e5447f5b35759ca338ed9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686844356 +0200\ncommitter GitHub <noreply@github.com> 1686844356 +0200\n\nRollup merge of #112486 - jieyouxu:issue-112472, r=oli-obk\n\nFix suggestion for E0404 not dealing with multiple generics\n\nFixes #112472.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82eb4a0208d7e998cab16d04e1c28631b3991706", "html_url": "https://github.com/rust-lang/rust/commit/82eb4a0208d7e998cab16d04e1c28631b3991706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82eb4a0208d7e998cab16d04e1c28631b3991706/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc95a4bc99321d69369912aba53de2d477a2bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc95a4bc99321d69369912aba53de2d477a2bce", "html_url": "https://github.com/rust-lang/rust/commit/9bc95a4bc99321d69369912aba53de2d477a2bce"}, {"sha": "32ae8810fcc6d96a1e7e5447f5b35759ca338ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/32ae8810fcc6d96a1e7e5447f5b35759ca338ed9", "html_url": "https://github.com/rust-lang/rust/commit/32ae8810fcc6d96a1e7e5447f5b35759ca338ed9"}], "stats": {"total": 218, "additions": 182, "deletions": 36}, "files": [{"sha": "83b7e13905aee7d7e8c01b0285a777bc9c782895", "filename": "compiler/rustc_ast_pretty/src/pprust/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs?ref=82eb4a0208d7e998cab16d04e1c28631b3991706", "patch": "@@ -32,6 +32,10 @@ pub fn bounds_to_string(bounds: &[ast::GenericBound]) -> String {\n     State::new().bounds_to_string(bounds)\n }\n \n+pub fn where_bound_predicate_to_string(where_bound_predicate: &ast::WhereBoundPredicate) -> String {\n+    State::new().where_bound_predicate_to_string(where_bound_predicate)\n+}\n+\n pub fn pat_to_string(pat: &ast::Pat) -> String {\n     State::new().pat_to_string(pat)\n }"}, {"sha": "59239b49eddd81414a3747dd3c379e18f04479ac", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=82eb4a0208d7e998cab16d04e1c28631b3991706", "patch": "@@ -824,6 +824,13 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         Self::to_string(|s| s.print_type_bounds(bounds))\n     }\n \n+    fn where_bound_predicate_to_string(\n+        &self,\n+        where_bound_predicate: &ast::WhereBoundPredicate,\n+    ) -> String {\n+        Self::to_string(|s| s.print_where_bound_predicate(where_bound_predicate))\n+    }\n+\n     fn pat_to_string(&self, pat: &ast::Pat) -> String {\n         Self::to_string(|s| s.print_pat(pat))\n     }"}, {"sha": "5c01b7ea70a13419ffecebbd2e325c0fc79c65af", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=82eb4a0208d7e998cab16d04e1c28631b3991706", "patch": "@@ -623,19 +623,8 @@ impl<'a> State<'a> {\n \n     pub fn print_where_predicate(&mut self, predicate: &ast::WherePredicate) {\n         match predicate {\n-            ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n-                bound_generic_params,\n-                bounded_ty,\n-                bounds,\n-                ..\n-            }) => {\n-                self.print_formal_generic_params(bound_generic_params);\n-                self.print_type(bounded_ty);\n-                self.word(\":\");\n-                if !bounds.is_empty() {\n-                    self.nbsp();\n-                    self.print_type_bounds(bounds);\n-                }\n+            ast::WherePredicate::BoundPredicate(where_bound_predicate) => {\n+                self.print_where_bound_predicate(where_bound_predicate);\n             }\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 lifetime,\n@@ -658,6 +647,19 @@ impl<'a> State<'a> {\n         }\n     }\n \n+    pub fn print_where_bound_predicate(\n+        &mut self,\n+        where_bound_predicate: &ast::WhereBoundPredicate,\n+    ) {\n+        self.print_formal_generic_params(&where_bound_predicate.bound_generic_params);\n+        self.print_type(&where_bound_predicate.bounded_ty);\n+        self.word(\":\");\n+        if !where_bound_predicate.bounds.is_empty() {\n+            self.nbsp();\n+            self.print_type_bounds(&where_bound_predicate.bounds);\n+        }\n+    }\n+\n     fn print_use_tree(&mut self, tree: &ast::UseTree) {\n         match &tree.kind {\n             ast::UseTreeKind::Simple(rename) => {"}, {"sha": "7284b33f09d8e57d21a7b7fb13dbc68a24dfffa5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 69, "deletions": 23, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eb4a0208d7e998cab16d04e1c28631b3991706/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=82eb4a0208d7e998cab16d04e1c28631b3991706", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{\n     self as ast, AssocItemKind, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind,\n     MethodCall, NodeId, Path, Ty, TyKind, DUMMY_NODE_ID,\n };\n-use rustc_ast_pretty::pprust::path_segment_to_string;\n+use rustc_ast_pretty::pprust::where_bound_predicate_to_string;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n@@ -1050,7 +1050,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             };\n \n         // Confirm that the target is an associated type.\n-        let (ty, position, path) = if let ast::TyKind::Path(Some(qself), path) = &bounded_ty.kind {\n+        let (ty, _, path) = if let ast::TyKind::Path(Some(qself), path) = &bounded_ty.kind {\n             // use this to verify that ident is a type param.\n             let Some(partial_res) = self.r.partial_res_map.get(&bounded_ty.id) else {\n                 return false;\n@@ -1079,37 +1079,19 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 return false;\n             }\n             if let (\n-                [ast::PathSegment { ident: constrain_ident, args: None, .. }],\n+                [ast::PathSegment { args: None, .. }],\n                 [ast::GenericBound::Trait(poly_trait_ref, ast::TraitBoundModifier::None)],\n             ) = (&type_param_path.segments[..], &bounds[..])\n             {\n                 if let [ast::PathSegment { ident, args: None, .. }] =\n                     &poly_trait_ref.trait_ref.path.segments[..]\n                 {\n                     if ident.span == span {\n+                        let Some(new_where_bound_predicate) = mk_where_bound_predicate(path, poly_trait_ref, ty) else { return false; };\n                         err.span_suggestion_verbose(\n                             *where_span,\n                             format!(\"constrain the associated type to `{}`\", ident),\n-                            format!(\n-                                \"{}: {}<{} = {}>\",\n-                                self.r\n-                                    .tcx\n-                                    .sess\n-                                    .source_map()\n-                                    .span_to_snippet(ty.span) // Account for `<&'a T as Foo>::Bar`.\n-                                    .unwrap_or_else(|_| constrain_ident.to_string()),\n-                                path.segments[..position]\n-                                    .iter()\n-                                    .map(|segment| path_segment_to_string(segment))\n-                                    .collect::<Vec<_>>()\n-                                    .join(\"::\"),\n-                                path.segments[position..]\n-                                    .iter()\n-                                    .map(|segment| path_segment_to_string(segment))\n-                                    .collect::<Vec<_>>()\n-                                    .join(\"::\"),\n-                                ident,\n-                            ),\n+                            where_bound_predicate_to_string(&new_where_bound_predicate),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n@@ -2605,6 +2587,70 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n     }\n }\n \n+fn mk_where_bound_predicate(\n+    path: &Path,\n+    poly_trait_ref: &ast::PolyTraitRef,\n+    ty: &ast::Ty,\n+) -> Option<ast::WhereBoundPredicate> {\n+    use rustc_span::DUMMY_SP;\n+    let modified_segments = {\n+        let mut segments = path.segments.clone();\n+        let [preceding @ .., second_last, last] = segments.as_mut_slice() else { return None; };\n+        let mut segments = ThinVec::from(preceding);\n+\n+        let added_constraint = ast::AngleBracketedArg::Constraint(ast::AssocConstraint {\n+            id: DUMMY_NODE_ID,\n+            ident: last.ident,\n+            gen_args: None,\n+            kind: ast::AssocConstraintKind::Equality {\n+                term: ast::Term::Ty(ast::ptr::P(ast::Ty {\n+                    kind: ast::TyKind::Path(None, poly_trait_ref.trait_ref.path.clone()),\n+                    id: DUMMY_NODE_ID,\n+                    span: DUMMY_SP,\n+                    tokens: None,\n+                })),\n+            },\n+            span: DUMMY_SP,\n+        });\n+\n+        match second_last.args.as_deref_mut() {\n+            Some(ast::GenericArgs::AngleBracketed(ast::AngleBracketedArgs { args, .. })) => {\n+                args.push(added_constraint);\n+            }\n+            Some(_) => return None,\n+            None => {\n+                second_last.args =\n+                    Some(ast::ptr::P(ast::GenericArgs::AngleBracketed(ast::AngleBracketedArgs {\n+                        args: ThinVec::from([added_constraint]),\n+                        span: DUMMY_SP,\n+                    })));\n+            }\n+        }\n+\n+        segments.push(second_last.clone());\n+        segments\n+    };\n+\n+    let new_where_bound_predicate = ast::WhereBoundPredicate {\n+        span: DUMMY_SP,\n+        bound_generic_params: ThinVec::new(),\n+        bounded_ty: ast::ptr::P(ty.clone()),\n+        bounds: vec![ast::GenericBound::Trait(\n+            ast::PolyTraitRef {\n+                bound_generic_params: ThinVec::new(),\n+                trait_ref: ast::TraitRef {\n+                    path: ast::Path { segments: modified_segments, span: DUMMY_SP, tokens: None },\n+                    ref_id: DUMMY_NODE_ID,\n+                },\n+                span: DUMMY_SP,\n+            },\n+            ast::TraitBoundModifier::None,\n+        )],\n+    };\n+\n+    Some(new_where_bound_predicate)\n+}\n+\n /// Report lifetime/lifetime shadowing as an error.\n pub(super) fn signal_lifetime_shadowing(sess: &Session, orig: Ident, shadower: Ident) {\n     let mut err = struct_span_err!("}, {"sha": "892697493b7a9a41302540ec099843ac2fcca93b", "filename": "tests/ui/resolve/issue-112472-multi-generics-suggestion.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/82eb4a0208d7e998cab16d04e1c28631b3991706/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/82eb4a0208d7e998cab16d04e1c28631b3991706/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.fixed?ref=82eb4a0208d7e998cab16d04e1c28631b3991706", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+use std::marker::PhantomData;\n+use std::convert::{self, TryFrom};\n+\n+#[allow(unused)]\n+struct Codec<EncodeLine, DecodeLine> {\n+    phantom_decode: PhantomData<DecodeLine>,\n+    phantom_encode: PhantomData<EncodeLine>,\n+}\n+\n+pub enum ParseError {}\n+\n+impl<EncodeLine, DecodeLine> Codec<EncodeLine, DecodeLine> where\n+    DecodeLine: Debug + convert::TryFrom<String>,\n+    DecodeLine: convert::TryFrom<String, Error = ParseError>,\n+    //~^ ERROR expected trait, found enum `ParseError`\n+    //~| HELP constrain the associated type to `ParseError`\n+{\n+}\n+\n+impl<EncodeLine, DecodeLine> Codec<EncodeLine, DecodeLine> where\n+    DecodeLine: Debug + TryFrom<String>,\n+    DecodeLine: TryFrom<String, Error = ParseError>,\n+    //~^ ERROR expected trait, found enum `ParseError`\n+    //~| HELP constrain the associated type to `ParseError`\n+{\n+}\n+\n+fn main() {}"}, {"sha": "2b2f5f1ad8d0798973b554d9fb4ce8b489d94615", "filename": "tests/ui/resolve/issue-112472-multi-generics-suggestion.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/82eb4a0208d7e998cab16d04e1c28631b3991706/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eb4a0208d7e998cab16d04e1c28631b3991706/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.rs?ref=82eb4a0208d7e998cab16d04e1c28631b3991706", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+use std::marker::PhantomData;\n+use std::convert::{self, TryFrom};\n+\n+#[allow(unused)]\n+struct Codec<EncodeLine, DecodeLine> {\n+    phantom_decode: PhantomData<DecodeLine>,\n+    phantom_encode: PhantomData<EncodeLine>,\n+}\n+\n+pub enum ParseError {}\n+\n+impl<EncodeLine, DecodeLine> Codec<EncodeLine, DecodeLine> where\n+    DecodeLine: Debug + convert::TryFrom<String>,\n+    <DecodeLine as convert::TryFrom<String>>::Error: ParseError,\n+    //~^ ERROR expected trait, found enum `ParseError`\n+    //~| HELP constrain the associated type to `ParseError`\n+{\n+}\n+\n+impl<EncodeLine, DecodeLine> Codec<EncodeLine, DecodeLine> where\n+    DecodeLine: Debug + TryFrom<String>,\n+    <DecodeLine as TryFrom<String>>::Error: ParseError,\n+    //~^ ERROR expected trait, found enum `ParseError`\n+    //~| HELP constrain the associated type to `ParseError`\n+{\n+}\n+\n+fn main() {}"}, {"sha": "f463e2dad2cfc987a286784799bfe66ad11349f3", "filename": "tests/ui/resolve/issue-112472-multi-generics-suggestion.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82eb4a0208d7e998cab16d04e1c28631b3991706/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82eb4a0208d7e998cab16d04e1c28631b3991706/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-112472-multi-generics-suggestion.stderr?ref=82eb4a0208d7e998cab16d04e1c28631b3991706", "patch": "@@ -0,0 +1,25 @@\n+error[E0404]: expected trait, found enum `ParseError`\n+  --> $DIR/issue-112472-multi-generics-suggestion.rs:17:54\n+   |\n+LL |     <DecodeLine as convert::TryFrom<String>>::Error: ParseError,\n+   |                                                      ^^^^^^^^^^ not a trait\n+   |\n+help: constrain the associated type to `ParseError`\n+   |\n+LL |     DecodeLine: convert::TryFrom<String, Error = ParseError>,\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0404]: expected trait, found enum `ParseError`\n+  --> $DIR/issue-112472-multi-generics-suggestion.rs:25:45\n+   |\n+LL |     <DecodeLine as TryFrom<String>>::Error: ParseError,\n+   |                                             ^^^^^^^^^^ not a trait\n+   |\n+help: constrain the associated type to `ParseError`\n+   |\n+LL |     DecodeLine: TryFrom<String, Error = ParseError>,\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0404`."}]}