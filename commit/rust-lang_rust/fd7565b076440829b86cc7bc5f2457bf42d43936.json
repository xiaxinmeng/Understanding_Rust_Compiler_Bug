{"sha": "fd7565b076440829b86cc7bc5f2457bf42d43936", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNzU2NWIwNzY0NDA4MjliODZjYzdiYzVmMjQ1N2JmNDJkNDM5MzY=", "commit": {"author": {"name": "Artyom Pavlov", "email": "newpavlov@gmail.com", "date": "2018-09-19T15:40:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-19T15:40:33Z"}, "message": "Added tracking issue, fixed check, 1.30 -> 1.31", "tree": {"sha": "a2b93e243acd8957233e6a0f01800e3f3edbd4b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b93e243acd8957233e6a0f01800e3f3edbd4b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7565b076440829b86cc7bc5f2457bf42d43936", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbom3xCRBK7hj4Ov3rIwAAdHIIAI4YuxlVg651JS5RZke49cPM\npH/XuDFJPvHm4CWl2wvN43lin5/oOkmoaQ1OoiicGcRw3+Qk+Qwneb9NE8ZDbK3A\nxc8pmmxLgM3nt7oH/zPUAYh14Sxpxg+FGga9jMZiQs0b24sZ7CeSIHYKzb2Mbsa3\nLsQuzYVgopTCHCUqrJMHCxlpDTvVPAJJdPTwj1FfyslEnzJa80HfTZQPUqT3VQUl\nfieKwdP0G0DIYOvBc9NOv0jQEiflhrQjBXWAwKWHG3pkL3Tc7CXuZYu42vf+xE2K\nxcAtGC3eA959Vw50E87mrB63fIg5LV5Q/s2DqHrxh3UU+1ZIADQS+vBtfD4ZOfM=\n=s8xA\n-----END PGP SIGNATURE-----\n", "payload": "tree a2b93e243acd8957233e6a0f01800e3f3edbd4b6\nparent 2aca69757f078ac3aad9c2aff3c357ca35e5c486\nauthor Artyom Pavlov <newpavlov@gmail.com> 1537371633 +0300\ncommitter GitHub <noreply@github.com> 1537371633 +0300\n\nAdded tracking issue, fixed check, 1.30 -> 1.31"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7565b076440829b86cc7bc5f2457bf42d43936", "html_url": "https://github.com/rust-lang/rust/commit/fd7565b076440829b86cc7bc5f2457bf42d43936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7565b076440829b86cc7bc5f2457bf42d43936/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aca69757f078ac3aad9c2aff3c357ca35e5c486", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aca69757f078ac3aad9c2aff3c357ca35e5c486", "html_url": "https://github.com/rust-lang/rust/commit/2aca69757f078ac3aad9c2aff3c357ca35e5c486"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "12c29a324b87e9d51da8de0d9fd75ebf9a47e7d1", "filename": "src/libcore/time.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd7565b076440829b86cc7bc5f2457bf42d43936/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7565b076440829b86cc7bc5f2457bf42d43936/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=fd7565b076440829b86cc7bc5f2457bf42d43936", "patch": "@@ -30,7 +30,7 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n const NANOS_PER_MICRO: u32 = 1_000;\n const MILLIS_PER_SEC: u64 = 1_000;\n const MICROS_PER_SEC: u64 = 1_000_000;\n-const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128) - 1) as f64;\n+const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n \n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n@@ -472,7 +472,7 @@ impl Duration {\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.as_float_secs(), 2.7);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn as_float_secs(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n@@ -491,14 +491,14 @@ impl Duration {\n     /// let dur = Duration::from_float_secs(2.7);\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn from_float_secs(secs: f64) -> Duration {\n         let nanos =  secs * (NANOS_PER_SEC as f64);\n         if !nanos.is_finite() {\n             panic!(\"got non-finite value when converting float to duration\");\n         }\n-        if nanos > MAX_NANOS_F64 {\n+        if nanos >= MAX_NANOS_F64 {\n             panic!(\"overflow when converting float to duration\");\n         }\n         if nanos < 0.0 {\n@@ -525,7 +525,7 @@ impl Duration {\n     /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n     /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn mul_f64(self, rhs: f64) -> Duration {\n         Duration::from_float_secs(rhs * self.as_float_secs())\n@@ -546,7 +546,7 @@ impl Duration {\n     /// // note that truncation is used, not rounding\n     /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn div_f64(self, rhs: f64) -> Duration {\n         Duration::from_float_secs(self.as_float_secs() / rhs)\n@@ -563,7 +563,7 @@ impl Duration {\n     /// let dur2 = Duration::new(5, 400_000_000);\n     /// assert_eq!(dur1.div_duration(dur2), 0.5);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn div_duration(self, rhs: Duration) -> f64 {\n         self.as_float_secs() / rhs.as_float_secs()\n@@ -611,7 +611,7 @@ impl Mul<u32> for Duration {\n     }\n }\n \n-#[stable(feature = \"symmetric_u32_duration_mul\", since = \"1.30.0\")]\n+#[stable(feature = \"symmetric_u32_duration_mul\", since = \"1.31.0\")]\n impl Mul<Duration> for u32 {\n     type Output = Duration;\n "}]}