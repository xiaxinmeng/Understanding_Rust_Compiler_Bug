{"sha": "7504897e6b4b1121191bc6612bcbcce1f70f5f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MDQ4OTdlNmI0YjExMjExOTFiYzY2MTJiY2JjY2UxZjcwZjVmMDY=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2017-02-04T02:25:20Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2017-02-04T02:25:45Z"}, "message": "Don't link \"nobundle\" libs which had  already been included in upstream crate.", "tree": {"sha": "4147de473dad415e9308536327faf5a13f0d0bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4147de473dad415e9308536327faf5a13f0d0bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7504897e6b4b1121191bc6612bcbcce1f70f5f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7504897e6b4b1121191bc6612bcbcce1f70f5f06", "html_url": "https://github.com/rust-lang/rust/commit/7504897e6b4b1121191bc6612bcbcce1f70f5f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7504897e6b4b1121191bc6612bcbcce1f70f5f06/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae2174fc5bfef0b2220a44d5e371220f3dca532", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae2174fc5bfef0b2220a44d5e371220f3dca532", "html_url": "https://github.com/rust-lang/rust/commit/3ae2174fc5bfef0b2220a44d5e371220f3dca532"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "a228689363fc31c30fb4eb9aa042f792b9fdd370", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -685,6 +685,9 @@ impl<'a> CrateLoader<'a> {\n         for id in self.get_foreign_items_of_kind(cstore::NativeStatic) {\n             self.cstore.add_statically_included_foreign_item(id);\n         }\n+        for id in self.get_foreign_items_of_kind(cstore::NativeStaticNobundle) {\n+            self.cstore.add_statically_included_foreign_item(id);\n+        }\n     }\n \n     fn register_dllimport_foreign_items(&mut self) {"}, {"sha": "20842ea3fe54d4f1cda93a3a5de7995ea42a3a9b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -896,7 +896,7 @@ fn link_args(cmd: &mut Linker,\n     // on other dylibs (e.g. other native deps).\n     add_local_native_libraries(cmd, sess);\n     add_upstream_rust_crates(cmd, sess, crate_type, tmpdir);\n-    add_upstream_native_libraries(cmd, sess);\n+    add_upstream_native_libraries(cmd, sess, crate_type);\n \n     // # Telling the linker what we're doing\n \n@@ -1213,7 +1213,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n // generic function calls a native function, then the generic function must\n // be instantiated in the target crate, meaning that the native symbol must\n // also be resolved in the target crate.\n-fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {\n+fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session, crate_type: config::CrateType) {\n     // Be sure to use a topological sorting of crates because there may be\n     // interdependencies between native libraries. When passing -nodefaultlibs,\n     // for example, almost all native libraries depend on libc, so we have to\n@@ -1223,6 +1223,9 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {\n     // This passes RequireStatic, but the actual requirement doesn't matter,\n     // we're just getting an ordering of crate numbers, we're not worried about\n     // the paths.\n+    let formats = sess.dependency_formats.borrow();\n+    let data = formats.get(&crate_type).unwrap();\n+\n     let crates = sess.cstore.used_crates(LinkagePreference::RequireStatic);\n     for (cnum, _) in crates {\n         for lib in sess.cstore.native_libraries(cnum) {\n@@ -1232,8 +1235,15 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {\n             match lib.kind {\n                 NativeLibraryKind::NativeUnknown => cmd.link_dylib(&lib.name.as_str()),\n                 NativeLibraryKind::NativeFramework => cmd.link_framework(&lib.name.as_str()),\n-                NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(&lib.name.as_str()),\n-\n+                NativeLibraryKind::NativeStaticNobundle => {\n+                    // Link \"static-nobundle\" native libs only if the crate they originate from\n+                    // is being linked statically to the current crate.  If it's linked dynamically\n+                    // or is an rlib already included via some other dylib crate, the symbols from\n+                    // native libs will have already been included in that dylib.\n+                    if data[cnum.as_usize() - 1] == Linkage::Static {\n+                        cmd.link_staticlib(&lib.name.as_str())\n+                    }\n+                },\n                 // ignore statically included native libraries here as we've\n                 // already included them when we included the rust library\n                 // previously"}, {"sha": "7f352f1da517d215215c740b0d82286a05f0724d", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -450,6 +450,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n             writeln!(f, \"LIBRARY\")?;\n             writeln!(f, \"EXPORTS\")?;\n             for symbol in self.info.exports[&crate_type].iter() {\n+                debug!(\"  _{}\", symbol);\n                 writeln!(f, \"  {}\", symbol)?;\n             }\n             Ok(())"}, {"sha": "3eac12f5cc9fd761bcc986a9687fc80e5f0c25db", "filename": "src/test/run-make/static-nobundle/Makefile", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -1,13 +1,21 @@\n -include ../tools.mk\n \n-all: $(call NATIVE_STATICLIB,foo)\n-\t$(RUSTC) bar.rs\n+# aaa is a native static library\n+# bbb is a rlib\n+# ccc is a dylib\n+# ddd is an executable\n \n-\t# Check that libbar.rlib does not contain the definition of `func`\n-\tnm $(TMPDIR)/libbar.rlib | (! grep \"T _*func\")\n-\tnm $(TMPDIR)/libbar.rlib | grep \"U _*func\"\n+all: $(call NATIVE_STATICLIB,aaa)\n+\t$(RUSTC) bbb.rs --crate-type=rlib\n \n-\t# Check that foo gets passed to the linker (as either `-l foo` or `foo.lib`)\n-\t$(RUSTC) main.rs -Z print-link-args | grep -e \"-l[\\\" ]*foo\" -e \"foo.lib\"\n+\t# Check that bbb does NOT contain the definition of `native_func`\n+\tnm $(TMPDIR)/libbbb.rlib | (! grep \"T _*native_func\")\n+\tnm $(TMPDIR)/libbbb.rlib | grep \"U _*native_func\"\n \n-\t$(call RUN,main)\n+\t# Check that aaa gets linked (either as `-l aaa` or `aaa.lib`) when building ccc.\n+\t$(RUSTC) ccc.rs -C prefer-dynamic --crate-type=dylib -Z print-link-args | grep -e \"-l[\\\" ]*aaa\" -e \"aaa.lib\"\n+\n+\t# Check that aaa does NOT get linked when building ddd.\n+\t$(RUSTC) ddd.rs -Z print-link-args | (! grep -e \"-l[\\\" ]*aaa\" -e \"aaa.lib\")\n+\n+\t$(call RUN,ddd)"}, {"sha": "806ef878c705233af4d5b8fe283b9a0b7c43eddd", "filename": "src/test/run-make/static-nobundle/aaa.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Faaa.c", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Faaa.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Faaa.c?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-void func() {}\n+void native_func() {}", "previous_filename": "src/test/run-make/static-nobundle/foo.c"}, {"sha": "2bd69c9932723b9ac2acf074426b244139ce7ae9", "filename": "src/test/run-make/static-nobundle/bbb.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fbbb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fbbb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fbbb.rs?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,13 +11,13 @@\n #![crate_type = \"rlib\"]\n #![feature(static_nobundle)]\n \n-#[link(name = \"foo\", kind = \"static-nobundle\")]\n+#[link(name = \"aaa\", kind = \"static-nobundle\")]\n extern {\n-    pub fn func();\n+    pub fn native_func();\n }\n \n pub fn wrapped_func() {\n     unsafe {\n-        func();\n+        native_func();\n     }\n }", "previous_filename": "src/test/run-make/static-nobundle/bar.rs"}, {"sha": "bd34753a00d128c06c7dcdd868d58477a202766a", "filename": "src/test/run-make/static-nobundle/ccc.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fccc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fccc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fccc.rs?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"dylib\"]\n+\n+extern crate bbb;\n+\n+pub fn do_work() {\n+    unsafe { bbb::native_func(); }\n+    bbb::wrapped_func();\n+}\n+\n+pub fn do_work_generic<T>() {\n+    unsafe { bbb::native_func(); }\n+    bbb::wrapped_func();\n+}"}, {"sha": "f7d23a899f7581313c84385e12cd16a170410c9d", "filename": "src/test/run-make/static-nobundle/ddd.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fddd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7504897e6b4b1121191bc6612bcbcce1f70f5f06/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fddd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fddd.rs?ref=7504897e6b4b1121191bc6612bcbcce1f70f5f06", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate bar;\n+extern crate ccc;\n \n fn main() {\n-    unsafe { bar::func(); }\n-    bar::wrapped_func();\n+    ccc::do_work();\n+    ccc::do_work_generic::<i16>();\n+    ccc::do_work_generic::<i32>();\n }", "previous_filename": "src/test/run-make/static-nobundle/main.rs"}]}