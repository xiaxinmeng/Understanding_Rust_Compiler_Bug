{"sha": "367eddf5b1777928ca0119932a877aaec757293a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2N2VkZGY1YjE3Nzc5MjhjYTAxMTk5MzJhODc3YWFlYzc1NzI5M2E=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-21T18:29:03Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-05T19:01:39Z"}, "message": "remove interner field from string_reader", "tree": {"sha": "47d4bead5bb22748573ec88ebbcac4a2b5defe77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d4bead5bb22748573ec88ebbcac4a2b5defe77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/367eddf5b1777928ca0119932a877aaec757293a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/367eddf5b1777928ca0119932a877aaec757293a", "html_url": "https://github.com/rust-lang/rust/commit/367eddf5b1777928ca0119932a877aaec757293a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/367eddf5b1777928ca0119932a877aaec757293a/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19cbd0d284026e785b24f5d619620d09a1b4d6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/19cbd0d284026e785b24f5d619620d09a1b4d6f1", "html_url": "https://github.com/rust-lang/rust/commit/19cbd0d284026e785b24f5d619620d09a1b4d6f1"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "60aa32f22cf4a6083dac63dc1f2f1c08d45d33cc", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/367eddf5b1777928ca0119932a877aaec757293a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367eddf5b1777928ca0119932a877aaec757293a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=367eddf5b1777928ca0119932a877aaec757293a", "patch": "@@ -327,9 +327,7 @@ pub fn gather_comments_and_literals(span_diagnostic:\n     let itr = parse::token::mk_fake_ident_interner();\n     let cm = CodeMap::new();\n     let filemap = cm.new_filemap(path, src);\n-    let rdr = lexer::new_low_level_string_reader(span_diagnostic,\n-                                                 filemap,\n-                                                 itr);\n+    let rdr = lexer::new_low_level_string_reader(span_diagnostic, filemap);\n \n     let mut comments: ~[cmnt] = ~[];\n     let mut literals: ~[lit] = ~[];"}, {"sha": "76149e7894df394a5717e44f19ada10de26729f3", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/367eddf5b1777928ca0119932a877aaec757293a/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367eddf5b1777928ca0119932a877aaec757293a/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=367eddf5b1777928ca0119932a877aaec757293a", "patch": "@@ -50,25 +50,22 @@ pub struct StringReader {\n     // The last character to be read\n     curr: char,\n     filemap: @codemap::FileMap,\n-    interner: @token::ident_interner,\n     /* cached: */\n     peek_tok: token::Token,\n     peek_span: span\n }\n \n pub fn new_string_reader(span_diagnostic: @span_handler,\n-                         filemap: @codemap::FileMap,\n-                         itr: @token::ident_interner)\n+                         filemap: @codemap::FileMap)\n                       -> @mut StringReader {\n-    let r = new_low_level_string_reader(span_diagnostic, filemap, itr);\n+    let r = new_low_level_string_reader(span_diagnostic, filemap);\n     string_advance_token(r); /* fill in peek_* */\n     return r;\n }\n \n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n pub fn new_low_level_string_reader(span_diagnostic: @span_handler,\n-                                   filemap: @codemap::FileMap,\n-                                   itr: @token::ident_interner)\n+                                   filemap: @codemap::FileMap)\n                                 -> @mut StringReader {\n     // Force the initial reader bump to start on a fresh line\n     let initial_char = '\\n';\n@@ -79,7 +76,6 @@ pub fn new_low_level_string_reader(span_diagnostic: @span_handler,\n         col: CharPos(0),\n         curr: initial_char,\n         filemap: filemap,\n-        interner: itr,\n         /* dummy values; not read */\n         peek_tok: token::EOF,\n         peek_span: codemap::dummy_sp()\n@@ -100,7 +96,6 @@ fn dup_string_reader(r: @mut StringReader) -> @mut StringReader {\n         col: r.col,\n         curr: r.curr,\n         filemap: r.filemap,\n-        interner: get_ident_interner(),\n         peek_tok: copy r.peek_tok,\n         peek_span: copy r.peek_span\n     }\n@@ -788,25 +783,22 @@ mod test {\n \n     // represents a testing reader (incl. both reader and interner)\n     struct Env {\n-        interner: @token::ident_interner,\n         string_reader: @mut StringReader\n     }\n \n     // open a string reader for the given string\n     fn setup(teststr: ~str) -> Env {\n         let cm = CodeMap::new();\n         let fm = cm.new_filemap(~\"zebra.rs\", @teststr);\n-        let ident_interner = token::get_ident_interner();\n         let span_handler =\n             diagnostic::mk_span_handler(diagnostic::mk_handler(None),@cm);\n         Env {\n-            interner: ident_interner,\n-            string_reader: new_string_reader(span_handler,fm,ident_interner)\n+            string_reader: new_string_reader(span_handler,fm)\n         }\n     }\n \n     #[test] fn t1 () {\n-        let Env {interner: ident_interner, string_reader} =\n+        let Env {string_reader} =\n             setup(~\"/* my source file */ \\\n                     fn main() { io::println(~\\\"zebra\\\"); }\\n\");\n         let id = str_to_ident(\"fn\");\n@@ -838,39 +830,39 @@ mod test {\n     }\n \n     // make the identifier by looking up the string in the interner\n-    fn mk_ident (env: Env, id: &str, is_mod_name: bool) -> token::Token {\n+    fn mk_ident (id: &str, is_mod_name: bool) -> token::Token {\n         token::IDENT (str_to_ident(id),is_mod_name)\n     }\n \n     #[test] fn doublecolonparsing () {\n         let env = setup (~\"a b\");\n         check_tokenization (env,\n-                           ~[mk_ident (env,\"a\",false),\n-                             mk_ident (env,\"b\",false)]);\n+                           ~[mk_ident(\"a\",false),\n+                             mk_ident(\"b\",false)]);\n     }\n \n     #[test] fn dcparsing_2 () {\n         let env = setup (~\"a::b\");\n         check_tokenization (env,\n-                           ~[mk_ident (env,\"a\",true),\n+                           ~[mk_ident(\"a\",true),\n                              token::MOD_SEP,\n-                             mk_ident (env,\"b\",false)]);\n+                             mk_ident(\"b\",false)]);\n     }\n \n     #[test] fn dcparsing_3 () {\n         let env = setup (~\"a ::b\");\n         check_tokenization (env,\n-                           ~[mk_ident (env,\"a\",false),\n+                           ~[mk_ident(\"a\",false),\n                              token::MOD_SEP,\n-                             mk_ident (env,\"b\",false)]);\n+                             mk_ident(\"b\",false)]);\n     }\n \n     #[test] fn dcparsing_4 () {\n         let env = setup (~\"a:: b\");\n         check_tokenization (env,\n-                           ~[mk_ident (env,\"a\",true),\n+                           ~[mk_ident(\"a\",true),\n                              token::MOD_SEP,\n-                             mk_ident (env,\"b\",false)]);\n+                             mk_ident(\"b\",false)]);\n     }\n \n     #[test] fn character_a() {"}, {"sha": "f5c0f309add1cd727d741420ba4043320968d13a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/367eddf5b1777928ca0119932a877aaec757293a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367eddf5b1777928ca0119932a877aaec757293a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=367eddf5b1777928ca0119932a877aaec757293a", "patch": "@@ -306,9 +306,7 @@ pub fn filemap_to_tts(sess: @mut ParseSess, filemap: @FileMap)\n     // it appears to me that the cfg doesn't matter here... indeed,\n     // parsing tt's probably shouldn't require a parser at all.\n     let cfg = ~[];\n-    let srdr = lexer::new_string_reader(copy sess.span_diagnostic,\n-                                        filemap,\n-                                        get_ident_interner());\n+    let srdr = lexer::new_string_reader(copy sess.span_diagnostic, filemap);\n     let p1 = Parser(sess, cfg, srdr as @reader);\n     p1.parse_all_token_trees()\n }"}]}