{"sha": "6afb8f58d18311109081cfaff2fa5a02948989c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZmI4ZjU4ZDE4MzExMTA5MDgxY2ZhZmYyZmE1YTAyOTQ4OTg5YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-04T21:15:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-04T21:15:54Z"}, "message": "Auto merge of #26470 - l0kod:process-session-leader, r=alexcrichton\n\nAdd a new method `CommandExt::session_leader(&mut self, on: bool)` to create a new session (cf. `setsid(2)`) for the child process. This means that the child is the leader of a new process group. The parent process remains the child reaper of the new process.\r\n\r\nThis is not enough to create a daemon process. The *init* process should be the child reaper of a daemon. This can be achieved if the parent process exit. Moreover, a daemon should not have a controlling terminal. To acheive this, a session leader (the child) must spawn another process (the daemon) in the same session.\r\n\r\ncc rust-lang/rfcs#941\r\ncc #17176", "tree": {"sha": "53d9e67674cfc62b3617f3d4b2108754fb734a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d9e67674cfc62b3617f3d4b2108754fb734a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6afb8f58d18311109081cfaff2fa5a02948989c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6afb8f58d18311109081cfaff2fa5a02948989c3", "html_url": "https://github.com/rust-lang/rust/commit/6afb8f58d18311109081cfaff2fa5a02948989c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6afb8f58d18311109081cfaff2fa5a02948989c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb11d65d08c3e28cfe3387eaa946d56bdc016900", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb11d65d08c3e28cfe3387eaa946d56bdc016900", "html_url": "https://github.com/rust-lang/rust/commit/eb11d65d08c3e28cfe3387eaa946d56bdc016900"}, {"sha": "b3df1e6b4812d8eefc4e7fdf61264aad15af719c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3df1e6b4812d8eefc4e7fdf61264aad15af719c", "html_url": "https://github.com/rust-lang/rust/commit/b3df1e6b4812d8eefc4e7fdf61264aad15af719c"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "06c5261bb42a8224836fb31bd944ce653017ca1f", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6afb8f58d18311109081cfaff2fa5a02948989c3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afb8f58d18311109081cfaff2fa5a02948989c3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=6afb8f58d18311109081cfaff2fa5a02948989c3", "patch": "@@ -32,6 +32,17 @@ pub trait CommandExt {\n     /// the same semantics as the `uid` field.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn gid(&mut self, id: gid_t) -> &mut process::Command;\n+\n+    /// Create a new session (cf. `setsid(2)`) for the child process. This means that the child is\n+    /// the leader of a new process group. The parent process remains the child reaper of the new\n+    /// process.\n+    ///\n+    /// This is not enough to create a daemon process. The *init* process should be the child\n+    /// reaper of a daemon. This can be achieved if the parent process exit. Moreover, a daemon\n+    /// should not have a controlling terminal. To acheive this, a session leader (the child) must\n+    /// spawn another process (the daemon) in the same session.\n+    #[unstable(feature = \"process_session_leader\", reason = \"recently added\")]\n+    fn session_leader(&mut self, on: bool) -> &mut process::Command;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -45,6 +56,11 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().gid = Some(id);\n         self\n     }\n+\n+    fn session_leader(&mut self, on: bool) -> &mut process::Command {\n+        self.as_inner_mut().session_leader = on;\n+        self\n+    }\n }\n \n /// Unix-specific extensions to `std::process::ExitStatus`"}, {"sha": "2a365cff6cb9464805b9098e8eb4d425b318a106", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6afb8f58d18311109081cfaff2fa5a02948989c3/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afb8f58d18311109081cfaff2fa5a02948989c3/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=6afb8f58d18311109081cfaff2fa5a02948989c3", "patch": "@@ -36,7 +36,7 @@ pub struct Command {\n     pub cwd: Option<CString>,\n     pub uid: Option<uid_t>,\n     pub gid: Option<gid_t>,\n-    pub detach: bool, // not currently exposed in std::process\n+    pub session_leader: bool,\n }\n \n impl Command {\n@@ -48,7 +48,7 @@ impl Command {\n             cwd: None,\n             uid: None,\n             gid: None,\n-            detach: false,\n+            session_leader: false,\n         }\n     }\n \n@@ -302,7 +302,7 @@ impl Process {\n                 fail(&mut output);\n             }\n         }\n-        if cfg.detach {\n+        if cfg.session_leader {\n             // Don't check the error of setsid because it fails if we're the\n             // process leader already. We just forked so it shouldn't return\n             // error, but ignore it anyway."}]}