{"sha": "1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjY5NzBjZjJiZmY1ZmQyYmI4ZjgxOTRiY2ZiYjZkMDUwZWY4NjU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-02T20:54:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-02T20:54:36Z"}, "message": "Rollup merge of #54728 - alexcrichton:renumber-issues, r=nikomatsakis\n\nRenumber `proc_macro` tracking issues\n\nLots of issue links in the compiler still point to https://github.com/rust-lang/rust/issues/38356 which is a bit of a monster issue that isn't serving much purpose any more. I've split the issue into a number of more fine-grained tracking issues to track stabilizations.", "tree": {"sha": "45aca41607f6498a09417577e2c87e11c32100cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45aca41607f6498a09417577e2c87e11c32100cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbs9sNCRBK7hj4Ov3rIwAAdHIIAA8JPbjVw5O8srcA0CexY0QM\nruBTdzaBC+2VtRhgUQf9Ls+nWT5/ytj/mOZg/sjYYXfr8juZS0UTii/qQ3+2xnnK\nc7vLuu2oXvxvFqnNRECAVqPInCYTfk6xL1x3LOpU58N/+lYL9DVjairxDRXt7OWn\nFZEXnmlo98bmq1A6pbgTsUYABCvpiSLT51ds8gOQedWyH270msb+lV0tk4jpKkg9\nxkiDdaT7tS2phgzDrDbM0MoY4/XRljBzbvzBlA2hWCuA1eQJB5H2DrSPCEvztt6N\netzvNmGCyYXkXaI6zICeKj8jjpa/scXXIxqjqsMfmvl/OCMaLDC013XX7qy+orw=\n=dY7V\n-----END PGP SIGNATURE-----\n", "payload": "tree 45aca41607f6498a09417577e2c87e11c32100cc\nparent d9d96637d4996051fb4fdda9adef73e8da2c71cd\nparent 615214480a589426caf3121d9f68a7f6946b7126\nauthor Pietro Albini <pietro@pietroalbini.org> 1538513676 +0200\ncommitter GitHub <noreply@github.com> 1538513676 +0200\n\nRollup merge of #54728 - alexcrichton:renumber-issues, r=nikomatsakis\n\nRenumber `proc_macro` tracking issues\n\nLots of issue links in the compiler still point to https://github.com/rust-lang/rust/issues/38356 which is a bit of a monster issue that isn't serving much purpose any more. I've split the issue into a number of more fine-grained tracking issues to track stabilizations.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "html_url": "https://github.com/rust-lang/rust/commit/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9d96637d4996051fb4fdda9adef73e8da2c71cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d96637d4996051fb4fdda9adef73e8da2c71cd", "html_url": "https://github.com/rust-lang/rust/commit/d9d96637d4996051fb4fdda9adef73e8da2c71cd"}, {"sha": "615214480a589426caf3121d9f68a7f6946b7126", "url": "https://api.github.com/repos/rust-lang/rust/commits/615214480a589426caf3121d9f68a7f6946b7126", "html_url": "https://github.com/rust-lang/rust/commit/615214480a589426caf3121d9f68a7f6946b7126"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "1a2b16a4fed063654eb6b59e0c0e4f9e51470783", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "patch": "@@ -142,7 +142,7 @@ impl fmt::Debug for TokenStream {\n     }\n }\n \n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub use quote::{quote, quote_span};\n \n /// Creates a token stream containing a single token tree.\n@@ -252,7 +252,7 @@ pub mod token_stream {\n /// To quote `$` itself, use `$$`.\n ///\n /// This is a dummy macro, the actual implementation is in `quote::quote`.`\n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n #[macro_export]\n macro_rules! quote { () => {} }\n \n@@ -283,7 +283,7 @@ macro_rules! diagnostic_method {\n \n impl Span {\n     /// A span that resolves at the macro definition site.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_def_site\", issue = \"54724\")]\n     pub fn def_site() -> Span {\n         ::__internal::with_sess(|_, data| data.def_site)\n     }\n@@ -298,7 +298,7 @@ impl Span {\n     }\n \n     /// The original source file into which this span points.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source_file(&self) -> SourceFile {\n         SourceFile {\n             source_file: __internal::lookup_char_pos(self.0.lo()).file,\n@@ -307,21 +307,21 @@ impl Span {\n \n     /// The `Span` for the tokens in the previous macro expansion from which\n     /// `self` was generated from, if any.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn parent(&self) -> Option<Span> {\n         self.0.parent().map(Span)\n     }\n \n     /// The span for the origin source code that `self` was generated from. If\n     /// this `Span` wasn't generated from other macro expansions then the return\n     /// value is the same as `*self`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source(&self) -> Span {\n         Span(self.0.source_callsite())\n     }\n \n     /// Get the starting line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn start(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.lo());\n         LineColumn {\n@@ -331,7 +331,7 @@ impl Span {\n     }\n \n     /// Get the ending line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn end(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.hi());\n         LineColumn {\n@@ -343,7 +343,7 @@ impl Span {\n     /// Create a new span encompassing `self` and `other`.\n     ///\n     /// Returns `None` if `self` and `other` are from different files.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn join(&self, other: Span) -> Option<Span> {\n         let self_loc = __internal::lookup_char_pos(self.0.lo());\n         let other_loc = __internal::lookup_char_pos(other.0.lo());\n@@ -355,20 +355,20 @@ impl Span {\n \n     /// Creates a new span with the same line/column information as `self` but\n     /// that resolves symbols as though it were at `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn resolved_at(&self, other: Span) -> Span {\n         Span(self.0.with_ctxt(other.0.ctxt()))\n     }\n \n     /// Creates a new span with the same name resolution behavior as `self` but\n     /// with the line/column information of `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn located_at(&self, other: Span) -> Span {\n         other.resolved_at(*self)\n     }\n \n     /// Compares to spans to see if they're equal.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn eq(&self, other: &Span) -> bool {\n         self.0 == other.0\n     }\n@@ -391,33 +391,33 @@ impl fmt::Debug for Span {\n }\n \n /// A line-column pair representing the start or end of a `Span`.\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct LineColumn {\n     /// The 1-indexed line in the source file on which the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub line: usize,\n     /// The 0-indexed column (in UTF-8 characters) in the source file on which\n     /// the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub column: usize\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Send for LineColumn {}\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Sync for LineColumn {}\n \n /// The source file of a given `Span`.\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Clone)]\n pub struct SourceFile {\n     source_file: Lrc<syntax_pos::SourceFile>,\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Send for SourceFile {}\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Sync for SourceFile {}\n \n impl SourceFile {\n@@ -431,7 +431,7 @@ impl SourceFile {\n     /// the command line, the path as given may not actually be valid.\n     ///\n     /// [`is_real`]: #method.is_real\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn path(&self) -> PathBuf {\n         match self.source_file.name {\n             FileName::Real(ref path) => path.clone(),\n@@ -441,7 +441,7 @@ impl SourceFile {\n \n     /// Returns `true` if this source file is a real source file, and not generated by an external\n     /// macro's expansion.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn is_real(&self) -> bool {\n         // This is a hack until intercrate spans are implemented and we can have real source files\n         // for spans generated in external macros.\n@@ -451,7 +451,7 @@ impl SourceFile {\n }\n \n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl fmt::Debug for SourceFile {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SourceFile\")\n@@ -461,14 +461,14 @@ impl fmt::Debug for SourceFile {\n     }\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl PartialEq for SourceFile {\n     fn eq(&self, other: &Self) -> bool {\n         Lrc::ptr_eq(&self.source_file, &other.source_file)\n     }\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl Eq for SourceFile {}\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n@@ -679,7 +679,7 @@ impl Group {\n     /// pub fn span_open(&self) -> Span {\n     ///                 ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_open(&self) -> Span {\n         Span(self.span.open)\n     }\n@@ -690,7 +690,7 @@ impl Group {\n     /// pub fn span_close(&self) -> Span {\n     ///                        ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_close(&self) -> Span {\n         Span(self.span.close)\n     }\n@@ -881,7 +881,7 @@ impl Ident {\n     }\n \n     /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).\n-    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"54723\")]\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         if !Ident::is_valid(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)"}, {"sha": "0f454a79055a050038d8cc8aea9289743c21154b", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "patch": "@@ -70,7 +70,7 @@ macro_rules! quote {\n /// This is the actual `quote!()` proc macro.\n ///\n /// It is manually loaded in `CStore::load_macro_untracked`.\n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote(stream: TokenStream) -> TokenStream {\n     if stream.is_empty() {\n         return quote!(::TokenStream::new());\n@@ -144,7 +144,7 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n \n /// Quote a `Span` into a `TokenStream`.\n /// This is needed to implement a custom quoter.\n-#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote_span(_: Span) -> TokenStream {\n     quote!(::Span::def_site())\n }"}, {"sha": "adbe2f9d4393f52f1f6ef426b56a778b6f8d0fbd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "patch": "@@ -441,10 +441,10 @@ declare_features! (\n \n     // Allows macro invocations on modules expressions and statements and\n     // procedural macros to expand to non-items.\n-    (active, proc_macro_mod, \"1.27.0\", Some(38356), None),\n-    (active, proc_macro_expr, \"1.27.0\", Some(38356), None),\n-    (active, proc_macro_non_items, \"1.27.0\", Some(38356), None),\n-    (active, proc_macro_gen, \"1.27.0\", Some(38356), None),\n+    (active, proc_macro_mod, \"1.27.0\", Some(54727), None),\n+    (active, proc_macro_expr, \"1.27.0\", Some(54727), None),\n+    (active, proc_macro_non_items, \"1.27.0\", Some(54727), None),\n+    (active, proc_macro_gen, \"1.27.0\", Some(54727), None),\n \n     // #[doc(alias = \"...\")]\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n@@ -502,7 +502,7 @@ declare_features! (\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n \n     // Non-builtin attributes in inner attribute position\n-    (active, custom_inner_attributes, \"1.30.0\", Some(38356), None),\n+    (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n     // Self struct constructor  (RFC 2302)\n     (active, self_struct_ctor, \"1.30.0\", Some(51994), None),"}, {"sha": "383016f990eb6a009531ca229f1f7ddbdee44284", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/multispan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmultispan.rs?ref=1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro_diagnostic, proc_macro_span)]\n+#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]\n \n extern crate proc_macro;\n "}, {"sha": "569a458f55a44cf4fb06012a4a051836ddb1ae1c", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/three-equals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs?ref=1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro_diagnostic, proc_macro_span)]\n+#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]\n \n extern crate proc_macro;\n "}, {"sha": "98361c879ff6866e7a52d446da2bd9bca5106aca", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1826970cf2bff5fd2bb8f8194bcfbb6d050ef865/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=1826970cf2bff5fd2bb8f8194bcfbb6d050ef865", "patch": "@@ -6,7 +6,7 @@ LL | #[foo] //~ ERROR is currently unknown to the compiler\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: non-builtin inner attributes are unstable (see issue #38356)\n+error[E0658]: non-builtin inner attributes are unstable (see issue #54726)\n   --> $DIR/issue-36530.rs:15:5\n    |\n LL |     #![foo] //~ ERROR is currently unknown to the compiler"}]}