{"sha": "cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkM2JkZWI5MWE4MjE0YWFmOGMwNzNjZWYzYzdhZDcwMjk5YzQ1NDI=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-12T02:12:17Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-12T19:23:54Z"}, "message": "Remove feature gate directives for `if_let`, `while_let`, and `tuple_indexing`.", "tree": {"sha": "13f6514da4af5dc44f2048e7c9ee7009259d404b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13f6514da4af5dc44f2048e7c9ee7009259d404b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "html_url": "https://github.com/rust-lang/rust/commit/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5921241a3146cccaffc336a0d1ade1a90e3517f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5921241a3146cccaffc336a0d1ade1a90e3517f", "html_url": "https://github.com/rust-lang/rust/commit/a5921241a3146cccaffc336a0d1ade1a90e3517f"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "1b04698406d874d92abd5b26dddcf9e50525759f", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -2549,10 +2549,6 @@ The currently implemented features of the reference compiler are:\n * `default_type_params` - Allows use of default type parameters. The future of\n                           this feature is uncertain.\n \n-* `if_let` - Allows use of the `if let` syntax.\n-\n-* `while_let` - Allows use of the `while let` syntax.\n-\n * `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n                  are inherently unstable and no promise about them is made.\n \n@@ -2639,8 +2635,6 @@ The currently implemented features of the reference compiler are:\n                         which is considered wildly unsafe and will be\n                         obsoleted by language improvements.\n \n-* `tuple_indexing` - Allows use of tuple indexing (expressions like `expr.0`)\n-\n * `associated_types` - Allows type aliases in traits. Experimental.\n \n If a feature is promoted to a language feature, then all existing programs will"}, {"sha": "5d915d6a59b1578bcb2517b7e13e5b79f1f5c835", "filename": "src/test/compile-fail/issue-19096.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n fn main() {\n     let t = (42i, 42i);\n     t.0::<int>; //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `::`"}, {"sha": "a151a837f77d2d3444dbc37eae4b5544bc4fc94d", "filename": "src/test/run-pass/borrow-tuple-fields.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct Foo(int, int);\n \n fn main() {"}, {"sha": "4dff2ea55f16a4add6a7efe4d50f4ee73a6129f8", "filename": "src/test/run-pass/if-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-let.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(if_let)]\n-\n pub fn main() {\n     let x = Some(3i);\n     if let Some(y) = x {"}, {"sha": "63f57e0a2e85eaea056cfe042e1ca0c2e6bbbea8", "filename": "src/test/run-pass/issue-18412.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fissue-18412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fissue-18412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18412.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n // Test that non-static methods can be assigned to local variables as\n // function pointers.\n "}, {"sha": "d42bda6cd5d420139953d59c0eaa09853859eaf0", "filename": "src/test/run-pass/issue-19244.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19244.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct MyStruct { field: uint }\n const STRUCT: MyStruct = MyStruct { field: 42 };\n const TUP: (uint,) = (43,);"}, {"sha": "3efc2ee50f3587983db33b7873e39ca0883db7bd", "filename": "src/test/run-pass/issue-19367.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19367.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n struct S {\n     o: Option<String>\n }"}, {"sha": "eccd841e357b608ebf9b44a0720729ed91649a87", "filename": "src/test/run-pass/tuple-index-fat-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct Foo<'a>(&'a [int]);\n \n fn main() {"}, {"sha": "78e0cad47129a9d4d7c30819c98a3299c141a92c", "filename": "src/test/run-pass/tuple-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Ftuple-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Ftuple-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-index.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tuple_indexing)]\n-\n struct Point(int, int);\n \n fn main() {"}, {"sha": "94a45817ee580109f985114c35d2e287c30631fe", "filename": "src/test/run-pass/while-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3bdeb91a8214aaf8c073cef3c7ad70299c4542/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-let.rs?ref=cd3bdeb91a8214aaf8c073cef3c7ad70299c4542", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(while_let)]\n-\n use std::collections::BinaryHeap;\n \n fn make_pq() -> BinaryHeap<int> {"}]}