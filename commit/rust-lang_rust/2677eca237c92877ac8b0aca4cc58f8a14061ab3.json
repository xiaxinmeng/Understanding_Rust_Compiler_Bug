{"sha": "2677eca237c92877ac8b0aca4cc58f8a14061ab3", "node_id": "C_kwDOAAsO6NoAKDI2NzdlY2EyMzdjOTI4NzdhYzhiMGFjYTRjYzU4ZjhhMTQwNjFhYjM", "commit": {"author": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2022-02-28T20:29:06Z"}, "committer": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2022-03-08T19:07:29Z"}, "message": "Switch the primary diagnostic to `unknown_lints`\n\nThis also affects the `non_exhaustive_omitted_patterns` and\n`must_not_suspend` lints as they are not stable. This also changes the\ndiagnostic level to pull from `unknown_lints` instead of always being\nallow or deny.", "tree": {"sha": "284bb67b638103311ca28bd24e4bb7c7552dffca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284bb67b638103311ca28bd24e4bb7c7552dffca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2677eca237c92877ac8b0aca4cc58f8a14061ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2677eca237c92877ac8b0aca4cc58f8a14061ab3", "html_url": "https://github.com/rust-lang/rust/commit/2677eca237c92877ac8b0aca4cc58f8a14061ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2677eca237c92877ac8b0aca4cc58f8a14061ab3/comments", "author": null, "committer": null, "parents": [{"sha": "885275207810dc0143b56bc4357461aa4c8ed07b", "url": "https://api.github.com/repos/rust-lang/rust/commits/885275207810dc0143b56bc4357461aa4c8ed07b", "html_url": "https://github.com/rust-lang/rust/commit/885275207810dc0143b56bc4357461aa4c8ed07b"}], "stats": {"total": 452, "additions": 310, "deletions": 142}, "files": [{"sha": "2b28fc2c0115e5bd3230198a96f1be1e42be3889", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -17,7 +17,7 @@ use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     Level, Lint, LintExpectationId, LintId,\n };\n-use rustc_session::parse::feature_err;\n+use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n@@ -104,10 +104,8 @@ impl<'s> LintLevelsBuilder<'s> {\n     fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n-        self.cur = self.sets.list.push(LintSet {\n-            specs: FxHashMap::default(),\n-            parent: COMMAND_LINE,\n-        });\n+        self.cur =\n+            self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: COMMAND_LINE });\n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n             store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);\n             let orig_level = level;\n@@ -134,11 +132,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n     /// (e.g. if a forbid was already inserted on the same scope), then emits a\n     /// diagnostic with no change to `specs`.\n-    fn insert_spec(\n-        &mut self,\n-        id: LintId,\n-        (level, src): LevelAndSource,\n-    ) {\n+    fn insert_spec(&mut self, id: LintId, (level, src): LevelAndSource) {\n         let (old_level, old_src) =\n             self.sets.get_lint_level(id.lint, self.cur, Some(self.current_specs()), &self.sess);\n         // Setting to a non-forbid level is an error if the lint previously had\n@@ -163,7 +157,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                 };\n                 debug!(\n                     \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n-                    fcw_warning, self.current_specs(), old_src, id_name\n+                    fcw_warning,\n+                    self.current_specs(),\n+                    old_src,\n+                    id_name\n                 );\n \n                 let decorate_diag = |diag: &mut Diagnostic| {\n@@ -249,10 +246,8 @@ impl<'s> LintLevelsBuilder<'s> {\n         source_hir_id: Option<HirId>,\n     ) -> BuilderPush {\n         let prev = self.cur;\n-        self.cur = self.sets.list.push(LintSet {\n-            specs: FxHashMap::default(),\n-            parent: prev,\n-        });\n+        self.cur = self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: prev });\n+\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for (attr_index, attr) in attrs.iter().enumerate() {\n@@ -391,8 +386,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n                                 let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                                let (lvl, src) =\n-                                    self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), &sess);\n+                                let (lvl, src) = self.sets.get_lint_level(\n+                                    lint,\n+                                    self.cur,\n+                                    Some(self.current_specs()),\n+                                    &sess,\n+                                );\n                                 struct_lint_level(\n                                     self.sess,\n                                     lint,\n@@ -462,8 +461,12 @@ impl<'s> LintLevelsBuilder<'s> {\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n                         let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                        let (renamed_lint_level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), &sess);\n+                        let (renamed_lint_level, src) = self.sets.get_lint_level(\n+                            lint,\n+                            self.cur,\n+                            Some(self.current_specs()),\n+                            &sess,\n+                        );\n                         struct_lint_level(\n                             self.sess,\n                             lint,\n@@ -486,8 +489,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                     }\n                     CheckLintNameResult::NoLint(suggestion) => {\n                         let lint = builtin::UNKNOWN_LINTS;\n-                        let (level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), self.sess);\n+                        let (level, src) = self.sets.get_lint_level(\n+                            lint,\n+                            self.cur,\n+                            Some(self.current_specs()),\n+                            self.sess,\n+                        );\n                         struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n                             let name = if let Some(tool_ident) = tool_ident {\n                                 format!(\"{}::{}\", tool_ident.name, name)\n@@ -594,16 +601,14 @@ impl<'s> LintLevelsBuilder<'s> {\n     fn check_gated_lint(&self, lint_id: LintId, span: Span) -> bool {\n         if let Some(feature) = lint_id.lint.feature_gate {\n             if !self.sess.features_untracked().enabled(feature) {\n-                let (unknown_lints_level, _) = self.lint_level(builtin::UNKNOWN_LINTS);\n-                if unknown_lints_level != Level::Allow {\n-                    feature_err(\n-                        &self.sess.parse_sess,\n-                        feature,\n-                        span,\n-                        &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower()),\n-                    )\n-                    .emit();\n-                }\n+                let (level, src) = self.lint_level(builtin::UNKNOWN_LINTS);\n+                struct_lint_level(self.sess, lint_id.lint, level, src, Some(span.into()), |lint| {\n+                    let mut db =\n+                        lint.build(&format!(\"unknown lint: `{}`\", lint_id.lint.name_lower()));\n+                    db.note(&format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower(),));\n+                    add_feature_diagnostics(&mut db, &self.sess.parse_sess, feature);\n+                    db.emit();\n+                });\n                 return false;\n             }\n         }"}, {"sha": "f6ad46cc01888f22df5b21791b56b5fe940394c7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -3775,6 +3775,7 @@ declare_lint! {\n \n declare_lint! {\n     #[doc(hidden)]\n+    /// Added for testing unsable lints; perma-unstable.\n     pub TEST_UNSTABLE_LINT,\n     Deny,\n     \"this unstable lint is only for testing\","}, {"sha": "d34a3360a83e215a0621fa36f49742fac19e6454", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -98,7 +98,26 @@ pub fn feature_err_issue<'a>(\n     explain: &str,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n+    add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n+    err\n+}\n+\n+/// Adds the diagnostics for a feature to an existing error.\n+pub fn add_feature_diagnostics<'a>(err: &mut Diagnostic, sess: &'a ParseSess, feature: Symbol) {\n+    add_feature_diagnostics_for_issue(err, sess, feature, GateIssue::Language);\n+}\n \n+/// Adds the diagnostics for a feature to an existing error.\n+///\n+/// This variant allows you to control whether it is a library or language feature.\n+/// Almost always, you want to use this for a language feature. If so, prefer\n+/// `add_feature_diagnostics`.\n+pub fn add_feature_diagnostics_for_issue<'a>(\n+    err: &mut Diagnostic,\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    issue: GateIssue,\n+) {\n     if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n             \"see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n@@ -110,8 +129,6 @@ pub fn feature_err_issue<'a>(\n     if sess.unstable_features.is_nightly_build() {\n         err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n     }\n-\n-    err\n }\n \n /// Info about a parsing session."}, {"sha": "29a6e1f8a016dce09c0fc95ff37c9e1803075725", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -1,31 +1,34 @@\n+// check-fail\n+\n #![deny(non_exhaustive_omitted_patterns)]\n-//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+//~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n #![allow(non_exhaustive_omitted_patterns)]\n-//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+//~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n \n fn main() {\n     enum Foo {\n         A, B, C,\n     }\n \n     #[allow(non_exhaustive_omitted_patterns)]\n+    //~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n     match Foo::A {\n         Foo::A => {}\n         Foo::B => {}\n     }\n-    //~^^^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~^^^^ ERROR non-exhaustive patterns: `C` not covered\n \n     match Foo::A {\n         Foo::A => {}\n         Foo::B => {}\n         #[warn(non_exhaustive_omitted_patterns)]\n         _ => {}\n     }\n-    //~^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~^^^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n }"}, {"sha": "94568c96b40a3a40c6726cc70b5e497069487a7a", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -1,93 +1,119 @@\n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1\n    |\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(non_exhaustive_omitted_patterns)]` on by default\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1\n    |\n LL | #![allow(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9\n    |\n LL |         #[warn(non_exhaustive_omitted_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1\n    |\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1\n    |\n LL | #![allow(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9\n    |\n LL |         #[warn(non_exhaustive_omitted_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error: aborting due to 10 previous errors\n+error[E0004]: non-exhaustive patterns: `C` not covered\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:20:11\n+   |\n+LL | /     enum Foo {\n+LL | |         A, B, C,\n+   | |               - not covered\n+LL | |     }\n+   | |_____- `Foo` defined here\n+...\n+LL |       match Foo::A {\n+   |             ^^^^^^ pattern `C` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n \n-For more information about this error, try `rustc --explain E0658`.\n+error: aborting due to previous error; 10 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "c398394cbe1a6afa26dad4c797a5f65250955968", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+// `test_unstable_lint` is for testing and should never be stabilized.\n+#![allow(test_unstable_lint)]\n+//~^ WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "eab89f02018bf2c8114a7ccd57792b69586634b7", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,30 @@\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(test_unstable_lint)]` on by default\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "b73a76555296fc5b5c7e1c2dae7cbc65d6b42d16", "filename": "src/test/ui/lint/must_not_suspend/gated.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -1,12 +1,15 @@\n+// check-pass\n+\n // edition:2018\n-#![deny(must_not_suspend)]  //~ ERROR the `must_not_suspend`\n-//~| ERROR the `must_not_suspend`\n-//~| ERROR the `must_not_suspend`\n+#![deny(must_not_suspend)]\n+//~^ WARNING unknown lint: `must_not_suspend`\n+//~| WARNING unknown lint: `must_not_suspend`\n+//~| WARNING unknown lint: `must_not_suspend`\n \n async fn other() {}\n \n pub async fn uhoh(m: std::sync::Mutex<()>) {\n-    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    let _guard = m.lock().unwrap();\n     other().await;\n }\n "}, {"sha": "3d6877045ff78e2266898fa873bb5d748127e833", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -1,54 +1,33 @@\n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(must_not_suspend)]` on by default\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error: `MutexGuard` held across a suspend point, but should not be\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-LL |     other().await;\n-   |            ------ the value is held across this suspend point\n-   |\n-note: the lint level is defined here\n-  --> $DIR/gated.rs:2:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-\n-error: aborting due to 4 previous errors\n+warning: 3 warnings emitted\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "dcc06850de174d15d56e732be7fc3343ab61170d", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-command-line.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,6 @@\n+// check-fail\n+// compile-flags: -Dunknown_lints -Atest_unstable_lint\n+// error-pattern: unknown lint: `test_unstable_lint`\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+fn main() {}"}, {"sha": "c840849a27d9da91d5a5ff9ce6423809a6d51626", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-command-line.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,18 @@\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: `-D test-unstable-lint` implied by `-D unknown-lints`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c6c60b12d83e91615d814014381743cb3954d4cb", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-inline.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,9 @@\n+// check-fail\n+\n+#![deny(unknown_lints)]\n+#![allow(test_unstable_lint)]\n+//~^ ERROR unknown lint: `test_unstable_lint`\n+//~| ERROR unknown lint: `test_unstable_lint`\n+//~| ERROR unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "6e909f9902c4f9f79a7a70e778c5ee8ff565f421", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-inline.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,35 @@\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deny-unstable-lint-inline.rs:3:9\n+   |\n+LL | #![deny(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+   = note: `#[deny(test_unstable_lint)]` implied by `#[deny(unknown_lints)]`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7663abffd9b48ba30d5bc24bcc7a5d7557d0a643", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-command-line.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -1,5 +0,0 @@\n-// check-fail\n-// compile-flags: -Atest_unstable_lint\n-// error-pattern: the `test_unstable_lint` lint is unstable\n-\n-fn main() {}"}, {"sha": "d088f4c8fe5aa9f0bab14e8cb516b5f59b9e5498", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-command-line.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.stderr?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: the `test_unstable_lint` lint is unstable\n-   |\n-   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n-\n-error[E0658]: the `test_unstable_lint` lint is unstable\n-   |\n-   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "43789906ed6f00bda60241d2a62409e3161a372f", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-inline.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -1,6 +0,0 @@\n-// check-fail\n-// error-pattern: the `test_unstable_lint` lint is unstable\n-\n-#![allow(test_unstable_lint)]\n-\n-fn main() {}"}, {"sha": "5ec85f346fec5577bb9b4a5eb6f33ffa76b0eeac", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-inline.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.stderr?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: the `test_unstable_lint` lint is unstable\n-  --> $DIR/unstable-lint-inline.rs:4:1\n-   |\n-LL | #![allow(test_unstable_lint)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n-\n-error[E0658]: the `test_unstable_lint` lint is unstable\n-  --> $DIR/unstable-lint-inline.rs:4:1\n-   |\n-LL | #![allow(test_unstable_lint)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3778291ebb44771c555548ba79c94c5bece4bf63", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+// compile-flags: -Wunknown_lints -Atest_unstable_lint\n+// error-pattern: unknown lint: `test_unstable_lint`\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+fn main() {}"}, {"sha": "a45bed843c71db73133ba888cd3198b91dc501f5", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,18 @@\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: `-W test-unstable-lint` implied by `-W unknown-lints`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "f4247e4569eb7ed7be7439cf5cac23760d669173", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![warn(unknown_lints)]\n+#![allow(test_unstable_lint)]\n+//~^ WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "ce6bd0f3ef99466a87e80fed25e125a0e1acc635", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2677eca237c92877ac8b0aca4cc58f8a14061ab3/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr?ref=2677eca237c92877ac8b0aca4cc58f8a14061ab3", "patch": "@@ -0,0 +1,35 @@\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:3:9\n+   |\n+LL | #![warn(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+   = note: `#[warn(test_unstable_lint)]` implied by `#[warn(unknown_lints)]`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}]}