{"sha": "1070f08aaba30cfe2aba587a911fcbdf35f6cdbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNzBmMDhhYWJhMzBjZmUyYWJhNTg3YTkxMWZjYmRmMzVmNmNkYmM=", "commit": {"author": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-22T16:16:26Z"}, "committer": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-24T06:20:40Z"}, "message": "Deduplicated macro code", "tree": {"sha": "369baa174e004100571a42e20e569a369f677a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/369baa174e004100571a42e20e569a369f677a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1070f08aaba30cfe2aba587a911fcbdf35f6cdbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1070f08aaba30cfe2aba587a911fcbdf35f6cdbc", "html_url": "https://github.com/rust-lang/rust/commit/1070f08aaba30cfe2aba587a911fcbdf35f6cdbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1070f08aaba30cfe2aba587a911fcbdf35f6cdbc/comments", "author": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa801a92900d1a44ab5efb005b4bbb0353af206", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa801a92900d1a44ab5efb005b4bbb0353af206", "html_url": "https://github.com/rust-lang/rust/commit/baa801a92900d1a44ab5efb005b4bbb0353af206"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "a18a4dbd3e214f9a764fac279df862e3f5373981", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1070f08aaba30cfe2aba587a911fcbdf35f6cdbc/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1070f08aaba30cfe2aba587a911fcbdf35f6cdbc/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=1070f08aaba30cfe2aba587a911fcbdf35f6cdbc", "patch": "@@ -52,30 +52,6 @@ macro_rules! def_reg_class {\n \n #[macro_use]\n macro_rules! def_regs {\n-    ($arch:ident $arch_reg:ident $arch_regclass:ident {}) => {\n-        #[allow(unreachable_code)]\n-        #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n-        pub enum $arch_reg {}\n-\n-        impl $arch_reg {\n-            pub fn parse(\n-                _arch: super::InlineAsmArch,\n-                mut _has_feature: impl FnMut(&str) -> bool,\n-                _name: &str,\n-            ) -> Result<Self, &'static str> {\n-                Err(\"unknown register\")\n-            }\n-        }\n-\n-        pub(super) fn fill_reg_map(\n-            _arch: super::InlineAsmArch,\n-            mut _has_feature: impl FnMut(&str) -> bool,\n-            _map: &mut rustc_data_structures::fx::FxHashMap<\n-                super::InlineAsmRegClass,\n-                rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n-            >,\n-        ) {}\n-    };\n     ($arch:ident $arch_reg:ident $arch_regclass:ident {\n         $(\n             $reg:ident: $class:ident $(, $extra_class:ident)* = [$reg_name:literal $(, $alias:literal)*] $(% $filter:ident)?,\n@@ -84,6 +60,7 @@ macro_rules! def_regs {\n             #error = [$($bad_reg:literal),+] => $error:literal,\n         )*\n     }) => {\n+        #[allow(unreachable_code)]\n         #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n         #[allow(non_camel_case_types)]\n         pub enum $arch_reg {\n@@ -126,19 +103,20 @@ macro_rules! def_regs {\n         pub(super) fn fill_reg_map(\n             _arch: super::InlineAsmArch,\n             mut _has_feature: impl FnMut(&str) -> bool,\n-            map: &mut rustc_data_structures::fx::FxHashMap<\n+            _map: &mut rustc_data_structures::fx::FxHashMap<\n                 super::InlineAsmRegClass,\n                 rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n             >,\n         ) {\n+            #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n                 if $($filter(_arch, &mut _has_feature, true).is_ok() &&)? true {\n-                    if let Some(set) = map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n+                    if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }\n                     $(\n-                        if let Some(set) = map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$extra_class)) {\n+                        if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$extra_class)) {\n                             set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                         }\n                     )*"}]}