{"sha": "d8308ece3656c2174faf4891d96e7be868a28eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MzA4ZWNlMzY1NmMyMTc0ZmFmNDg5MWQ5NmU3YmU4NjhhMjhlYjc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-20T19:38:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-20T19:38:17Z"}, "message": "Move Object creation into metadata.rs", "tree": {"sha": "99121dddfa9a9b9a46e1674806399199e32047d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99121dddfa9a9b9a46e1674806399199e32047d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8308ece3656c2174faf4891d96e7be868a28eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8308ece3656c2174faf4891d96e7be868a28eb7", "html_url": "https://github.com/rust-lang/rust/commit/d8308ece3656c2174faf4891d96e7be868a28eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8308ece3656c2174faf4891d96e7be868a28eb7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a929c952d42d874b15dadb17bc6837484a01e893", "url": "https://api.github.com/repos/rust-lang/rust/commits/a929c952d42d874b15dadb17bc6837484a01e893", "html_url": "https://github.com/rust-lang/rust/commit/a929c952d42d874b15dadb17bc6837484a01e893"}], "stats": {"total": 140, "additions": 62, "deletions": 78}, "files": [{"sha": "aa8e417e4eb162583735e7536cccffb3ea6817fa", "filename": "src/backend.rs", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d8308ece3656c2174faf4891d96e7be868a28eb7/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8308ece3656c2174faf4891d96e7be868a28eb7/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=d8308ece3656c2174faf4891d96e7be868a28eb7", "patch": "@@ -9,37 +9,13 @@ use cranelift_codegen::isa::TargetIsa;\n use cranelift_module::FuncId;\n use cranelift_object::{ObjectBuilder, ObjectModule, ObjectProduct};\n \n-use object::write::*;\n-use object::{RelocationEncoding, SectionKind, SymbolFlags};\n+use object::write::{Relocation, StandardSegment};\n+use object::{RelocationEncoding, SectionKind};\n \n use gimli::SectionId;\n \n use crate::debuginfo::{DebugReloc, DebugRelocName};\n \n-pub(crate) trait WriteMetadata {\n-    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>);\n-}\n-\n-impl WriteMetadata for object::write::Object {\n-    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>) {\n-        let segment = self.segment_name(object::write::StandardSegment::Data).to_vec();\n-        let section_id = self.add_section(segment, b\".rustc\".to_vec(), object::SectionKind::Data);\n-        let offset = self.append_section_data(section_id, &data, 1);\n-        // For MachO and probably PE this is necessary to prevent the linker from throwing away the\n-        // .rustc section. For ELF this isn't necessary, but it also doesn't harm.\n-        self.add_symbol(object::write::Symbol {\n-            name: symbol_name.into_bytes(),\n-            value: offset,\n-            size: data.len() as u64,\n-            kind: object::SymbolKind::Data,\n-            scope: object::SymbolScope::Dynamic,\n-            weak: false,\n-            section: SymbolSection::Section(section_id),\n-            flags: SymbolFlags::None,\n-        });\n-    }\n-}\n-\n pub(crate) trait WriteDebugInfo {\n     type SectionId: Copy;\n \n@@ -112,48 +88,6 @@ impl WriteDebugInfo for ObjectProduct {\n     }\n }\n \n-pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n-    let triple = crate::target_triple(sess);\n-\n-    let binary_format = match triple.binary_format {\n-        target_lexicon::BinaryFormat::Elf => object::BinaryFormat::Elf,\n-        target_lexicon::BinaryFormat::Coff => object::BinaryFormat::Coff,\n-        target_lexicon::BinaryFormat::Macho => object::BinaryFormat::MachO,\n-        binary_format => sess.fatal(&format!(\"binary format {} is unsupported\", binary_format)),\n-    };\n-    let architecture = match triple.architecture {\n-        target_lexicon::Architecture::Aarch64(_) => object::Architecture::Aarch64,\n-        target_lexicon::Architecture::Arm(_) => object::Architecture::Arm,\n-        target_lexicon::Architecture::Avr => object::Architecture::Avr,\n-        target_lexicon::Architecture::Hexagon => object::Architecture::Hexagon,\n-        target_lexicon::Architecture::Mips32(_) => object::Architecture::Mips,\n-        target_lexicon::Architecture::Mips64(_) => object::Architecture::Mips64,\n-        target_lexicon::Architecture::Msp430 => object::Architecture::Msp430,\n-        target_lexicon::Architecture::Powerpc => object::Architecture::PowerPc,\n-        target_lexicon::Architecture::Powerpc64 => object::Architecture::PowerPc64,\n-        target_lexicon::Architecture::Powerpc64le => todo!(),\n-        target_lexicon::Architecture::Riscv32(_) => object::Architecture::Riscv32,\n-        target_lexicon::Architecture::Riscv64(_) => object::Architecture::Riscv64,\n-        target_lexicon::Architecture::S390x => object::Architecture::S390x,\n-        target_lexicon::Architecture::Sparc64 => object::Architecture::Sparc64,\n-        target_lexicon::Architecture::Sparcv9 => object::Architecture::Sparc64,\n-        target_lexicon::Architecture::X86_32(_) => object::Architecture::I386,\n-        target_lexicon::Architecture::X86_64 => object::Architecture::X86_64,\n-        architecture => {\n-            sess.fatal(&format!(\"target architecture {:?} is unsupported\", architecture,))\n-        }\n-    };\n-    let endian = match triple.endianness().unwrap() {\n-        target_lexicon::Endianness::Little => object::Endianness::Little,\n-        target_lexicon::Endianness::Big => object::Endianness::Big,\n-    };\n-\n-    let mut metadata_object = object::write::Object::new(binary_format, architecture, endian);\n-    metadata_object.add_file_symbol(name.as_bytes().to_vec());\n-    f(&mut metadata_object);\n-    metadata_object.write().unwrap()\n-}\n-\n pub(crate) fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectModule {\n     let mut builder =\n         ObjectBuilder::new(isa, name + \".o\", cranelift_module::default_libcall_names()).unwrap();"}, {"sha": "7b65b48802352865f4107843145b73def72b0cc3", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8308ece3656c2174faf4891d96e7be868a28eb7/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8308ece3656c2174faf4891d96e7be868a28eb7/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=d8308ece3656c2174faf4891d96e7be868a28eb7", "patch": "@@ -267,9 +267,7 @@ pub(crate) fn run_aot(\n             let tmp_file =\n                 tcx.output_filenames(()).temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n-            let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n-                crate::metadata::write_metadata(tcx, object);\n-            });\n+            let obj = crate::metadata::new_metadata_object(tcx, &metadata_cgu_name);\n \n             if let Err(err) = std::fs::write(&tmp_file, obj) {\n                 tcx.sess.fatal(&format!(\"error writing metadata object file: {}\", err));"}, {"sha": "47d103296420139b72b714f7ee6c8f3223b88116", "filename": "src/metadata.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d8308ece3656c2174faf4891d96e7be868a28eb7/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8308ece3656c2174faf4891d96e7be868a28eb7/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=d8308ece3656c2174faf4891d96e7be868a28eb7", "patch": "@@ -1,20 +1,72 @@\n //! Writing of the rustc metadata for dylibs\n \n-use rustc_middle::ty::TyCtxt;\n+use object::write::{Object, StandardSegment, Symbol, SymbolSection};\n+use object::{SectionKind, SymbolFlags, SymbolKind, SymbolScope};\n \n-use crate::backend::WriteMetadata;\n+use rustc_middle::ty::TyCtxt;\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub(crate) fn write_metadata<O: WriteMetadata>(tcx: TyCtxt<'_>, object: &mut O) {\n+pub(crate) fn new_metadata_object(tcx: TyCtxt<'_>, cgu_name: &str) -> Vec<u8> {\n     use snap::write::FrameEncoder;\n     use std::io::Write;\n \n     let metadata = tcx.encode_metadata();\n     let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n     FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data).unwrap();\n \n-    object.add_rustc_section(\n-        rustc_middle::middle::exported_symbols::metadata_symbol_name(tcx),\n-        compressed,\n-    );\n+    let triple = crate::target_triple(tcx.sess);\n+\n+    let binary_format = match triple.binary_format {\n+        target_lexicon::BinaryFormat::Elf => object::BinaryFormat::Elf,\n+        target_lexicon::BinaryFormat::Coff => object::BinaryFormat::Coff,\n+        target_lexicon::BinaryFormat::Macho => object::BinaryFormat::MachO,\n+        binary_format => tcx.sess.fatal(&format!(\"binary format {} is unsupported\", binary_format)),\n+    };\n+    let architecture = match triple.architecture {\n+        target_lexicon::Architecture::Aarch64(_) => object::Architecture::Aarch64,\n+        target_lexicon::Architecture::Arm(_) => object::Architecture::Arm,\n+        target_lexicon::Architecture::Avr => object::Architecture::Avr,\n+        target_lexicon::Architecture::Hexagon => object::Architecture::Hexagon,\n+        target_lexicon::Architecture::Mips32(_) => object::Architecture::Mips,\n+        target_lexicon::Architecture::Mips64(_) => object::Architecture::Mips64,\n+        target_lexicon::Architecture::Msp430 => object::Architecture::Msp430,\n+        target_lexicon::Architecture::Powerpc => object::Architecture::PowerPc,\n+        target_lexicon::Architecture::Powerpc64 => object::Architecture::PowerPc64,\n+        target_lexicon::Architecture::Powerpc64le => todo!(),\n+        target_lexicon::Architecture::Riscv32(_) => object::Architecture::Riscv32,\n+        target_lexicon::Architecture::Riscv64(_) => object::Architecture::Riscv64,\n+        target_lexicon::Architecture::S390x => object::Architecture::S390x,\n+        target_lexicon::Architecture::Sparc64 => object::Architecture::Sparc64,\n+        target_lexicon::Architecture::Sparcv9 => object::Architecture::Sparc64,\n+        target_lexicon::Architecture::X86_32(_) => object::Architecture::I386,\n+        target_lexicon::Architecture::X86_64 => object::Architecture::X86_64,\n+        architecture => {\n+            tcx.sess.fatal(&format!(\"target architecture {:?} is unsupported\", architecture,))\n+        }\n+    };\n+    let endian = match triple.endianness().unwrap() {\n+        target_lexicon::Endianness::Little => object::Endianness::Little,\n+        target_lexicon::Endianness::Big => object::Endianness::Big,\n+    };\n+\n+    let mut object = Object::new(binary_format, architecture, endian);\n+    object.add_file_symbol(cgu_name.as_bytes().to_vec());\n+\n+    let segment = object.segment_name(StandardSegment::Data).to_vec();\n+    let section_id = object.add_section(segment, b\".rustc\".to_vec(), SectionKind::Data);\n+    let offset = object.append_section_data(section_id, &compressed, 1);\n+    // For MachO and probably PE this is necessary to prevent the linker from throwing away the\n+    // .rustc section. For ELF this isn't necessary, but it also doesn't harm.\n+    object.add_symbol(Symbol {\n+        name: rustc_middle::middle::exported_symbols::metadata_symbol_name(tcx).into_bytes(),\n+        value: offset,\n+        size: compressed.len() as u64,\n+        kind: SymbolKind::Data,\n+        scope: SymbolScope::Dynamic,\n+        weak: false,\n+        section: SymbolSection::Section(section_id),\n+        flags: SymbolFlags::None,\n+    });\n+\n+    object.write().unwrap()\n }"}]}