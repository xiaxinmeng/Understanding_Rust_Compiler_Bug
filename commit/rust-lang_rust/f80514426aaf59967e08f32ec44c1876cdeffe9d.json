{"sha": "f80514426aaf59967e08f32ec44c1876cdeffe9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MDUxNDQyNmFhZjU5OTY3ZTA4ZjMyZWM0NGMxODc2Y2RlZmZlOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-10T04:50:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-10T04:50:08Z"}, "message": "Auto merge of #39712 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #39587, #39674, #39693, #39700, #39705, #39707\n- Failed merges:", "tree": {"sha": "86ec1b1290f4d2d3fbe6e4dcc46332c87a407c22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ec1b1290f4d2d3fbe6e4dcc46332c87a407c22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f80514426aaf59967e08f32ec44c1876cdeffe9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f80514426aaf59967e08f32ec44c1876cdeffe9d", "html_url": "https://github.com/rust-lang/rust/commit/f80514426aaf59967e08f32ec44c1876cdeffe9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f80514426aaf59967e08f32ec44c1876cdeffe9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a70eb598a76edb0941f628a87946b40f2a1c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a70eb598a76edb0941f628a87946b40f2a1c83", "html_url": "https://github.com/rust-lang/rust/commit/24a70eb598a76edb0941f628a87946b40f2a1c83"}, {"sha": "84ad5157937d27db02479a4aa329ea0365e88130", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ad5157937d27db02479a4aa329ea0365e88130", "html_url": "https://github.com/rust-lang/rust/commit/84ad5157937d27db02479a4aa329ea0365e88130"}], "stats": {"total": 179, "additions": 101, "deletions": 78}, "files": [{"sha": "47f505ad37e744c6b440d1f41b7b004482b7bda0", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -150,6 +150,7 @@ struct Build {\n     python: Option<String>,\n     full_bootstrap: Option<bool>,\n     extended: Option<bool>,\n+    verbose: Option<usize>,\n     sanitizers: Option<bool>,\n }\n \n@@ -296,6 +297,7 @@ impl Config {\n         set(&mut config.vendor, build.vendor);\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n+        set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n \n         if let Some(ref install) = toml.install {"}, {"sha": "5f4303a728c5c2c46b3d63afe6b54fcc32b21299", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -124,6 +124,9 @@\n # disabled by default.\n #extended = false\n \n+# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n+#verbose = 0\n+\n # Build the sanitizer runtimes\n #sanitizers = false\n "}, {"sha": "6c48c29ecd1512fa3e013310b1c220a9e732d1a1", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -434,7 +434,7 @@ impl<'a> Display for Arguments<'a> {\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for an empty format, `{}`.\n@@ -477,7 +477,7 @@ pub trait Debug {\n pub trait Display {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `o` character.\n@@ -524,7 +524,7 @@ pub trait Display {\n pub trait Octal {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `b` character.\n@@ -571,7 +571,7 @@ pub trait Octal {\n pub trait Binary {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `x` character.\n@@ -619,7 +619,7 @@ pub trait Binary {\n pub trait LowerHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `X` character.\n@@ -667,7 +667,7 @@ pub trait LowerHex {\n pub trait UpperHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `p` character.\n@@ -712,7 +712,7 @@ pub trait UpperHex {\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `e` character.\n@@ -755,7 +755,7 @@ pub trait Pointer {\n pub trait LowerExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `E` character.\n@@ -798,7 +798,7 @@ pub trait LowerExp {\n pub trait UpperExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// The `write` function takes an output stream, a precompiled format string,"}, {"sha": "59bcb340ec99a07accf078d53eb04d628ee5a275", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -1324,7 +1324,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n pub trait AddAssign<Rhs=Self> {\n     /// The method for the `+=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn add_assign(&mut self, Rhs);\n+    fn add_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! add_assign_impl {\n@@ -1380,7 +1380,7 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait SubAssign<Rhs=Self> {\n     /// The method for the `-=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn sub_assign(&mut self, Rhs);\n+    fn sub_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! sub_assign_impl {\n@@ -1425,7 +1425,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait MulAssign<Rhs=Self> {\n     /// The method for the `*=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn mul_assign(&mut self, Rhs);\n+    fn mul_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! mul_assign_impl {\n@@ -1470,7 +1470,7 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait DivAssign<Rhs=Self> {\n     /// The method for the `/=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn div_assign(&mut self, Rhs);\n+    fn div_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! div_assign_impl {\n@@ -1514,7 +1514,7 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait RemAssign<Rhs=Self> {\n     /// The method for the `%=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn rem_assign(&mut self, Rhs);\n+    fn rem_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! rem_assign_impl {\n@@ -1600,7 +1600,7 @@ rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait BitAndAssign<Rhs=Self> {\n     /// The method for the `&=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn bitand_assign(&mut self, Rhs);\n+    fn bitand_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! bitand_assign_impl {\n@@ -1644,7 +1644,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n pub trait BitOrAssign<Rhs=Self> {\n     /// The method for the `|=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn bitor_assign(&mut self, Rhs);\n+    fn bitor_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! bitor_assign_impl {\n@@ -1688,7 +1688,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n pub trait BitXorAssign<Rhs=Self> {\n     /// The method for the `^=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn bitxor_assign(&mut self, Rhs);\n+    fn bitxor_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! bitxor_assign_impl {\n@@ -1732,7 +1732,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n pub trait ShlAssign<Rhs> {\n     /// The method for the `<<=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn shl_assign(&mut self, Rhs);\n+    fn shl_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! shl_assign_impl {\n@@ -1797,7 +1797,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n pub trait ShrAssign<Rhs=Self> {\n     /// The method for the `>>=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn shr_assign(&mut self, Rhs);\n+    fn shr_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! shr_assign_impl {"}, {"sha": "8493afe98bc5742b285c99bcd029af2b430ad42e", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -240,7 +240,7 @@ pub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n \n #[doc(hidden)]\n trait CharEq {\n-    fn matches(&mut self, char) -> bool;\n+    fn matches(&mut self, c: char) -> bool;\n     fn only_ascii(&self) -> bool;\n }\n \n@@ -1178,8 +1178,8 @@ impl TwoWaySearcher {\n trait TwoWayStrategy {\n     type Output;\n     fn use_early_reject() -> bool;\n-    fn rejecting(usize, usize) -> Self::Output;\n-    fn matching(usize, usize) -> Self::Output;\n+    fn rejecting(a: usize, b: usize) -> Self::Output;\n+    fn matching(a: usize, b: usize) -> Self::Output;\n }\n \n /// Skip to match intervals as quickly as possible"}, {"sha": "4fe3730bbe24985c88a6e0dd61d51a634750e0e2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -1000,6 +1000,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n+/// be discarded.\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n                                            incremental_hashes_map: &IncrementalHashesMap)"}, {"sha": "f492ab12e3f991f5fac03104fd9195800c295b20", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -212,11 +212,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 self.lookup_op_method(expr, ty_mut.ty, vec![rhs_ty_var],\n                                     Symbol::intern(name), trait_def_id,\n                                     lhs_expr).is_ok() {\n-                                err.span_note(\n-                                    lhs_expr.span,\n+                                err.note(\n                                     &format!(\n-                                        \"this is a reference of type that `{}` can be applied to, \\\n-                                        you need to dereference this variable once for this \\\n+                                        \"this is a reference to a type that `{}` can be applied \\\n+                                        to; you need to dereference this variable once for this \\\n                                         operation to work\",\n                                     op.node.as_str()));\n                             }\n@@ -244,11 +243,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                          rhs_expr, rhs_ty_var, &mut err) {\n                                 // This has nothing here because it means we did string\n                                 // concatenation (e.g. \"Hello \" + \"World!\"). This means\n-                                // we don't want the span in the else clause to be emmitted\n+                                // we don't want the note in the else clause to be emitted\n                             } else {\n-                                span_note!(&mut err, lhs_expr.span,\n-                                            \"an implementation of `{}` might be missing for `{}`\",\n-                                            missing_trait, lhs_ty);\n+                                err.note(\n+                                    &format!(\"an implementation of `{}` might be missing for `{}`\",\n+                                             missing_trait, lhs_ty));\n                             }\n                         }\n                         err.emit();\n@@ -271,16 +270,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           rhs_expr: &'gcx hir::Expr,\n                           rhs_ty_var: Ty<'tcx>,\n                           mut err: &mut errors::DiagnosticBuilder) -> bool {\n-        // If this function returns false it means we use it to make sure we print\n-        // out the an \"implementation of span_note!\" above where this function is\n-        // called and if true we don't.\n+        // If this function returns true it means a note was printed, so we don't need\n+        // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n         let mut is_string_addition = false;\n         let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n         if let TyRef(_, l_ty) = lhs_ty.sty {\n             if let TyRef(_, r_ty) = rhs_ty.sty {\n                 if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr {\n-                    span_note!(&mut err, lhs_expr.span,\n-                            \"`+` can't be used to concatenate two `&str` strings\");\n+                    err.note(\"`+` can't be used to concatenate two `&str` strings\");\n                     let codemap = self.tcx.sess.codemap();\n                     let suggestion =\n                         match (codemap.span_to_snippet(lhs_expr.span),"}, {"sha": "b051928ff9d3c69abad69a90b18bdb231ab01984", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -802,6 +802,10 @@ impl<'a> Parser<'a> {\n         let mut first: bool = true;\n         let mut v = vec![];\n         while !kets.contains(&&self.token) {\n+            match self.token {\n+                token::CloseDelim(..) | token::Eof => break,\n+                _ => {}\n+            };\n             match sep.sep {\n                 Some(ref t) => {\n                     if first {\n@@ -2608,9 +2612,12 @@ impl<'a> Parser<'a> {\n             return Ok((None, kleene_op));\n         }\n \n-        let separator = self.bump_and_get();\n+        let separator = match self.token {\n+            token::CloseDelim(..) => None,\n+            _ => Some(self.bump_and_get()),\n+        };\n         match parse_kleene_op(self)? {\n-            Some(zerok) => Ok((Some(separator), zerok)),\n+            Some(zerok) => Ok((separator, zerok)),\n             None => return Err(self.fatal(\"expected `*` or `+`\"))\n         }\n     }\n@@ -2647,7 +2654,7 @@ impl<'a> Parser<'a> {\n                     tts: tts,\n                 })))\n             },\n-            token::CloseDelim(_) | token::Eof => unreachable!(),\n+            token::CloseDelim(..) | token::Eof => Ok(TokenTree::Token(self.span, token::Eof)),\n             token::Dollar | token::SubstNt(..) if self.quote_depth > 0 => self.parse_unquoted(),\n             _ => Ok(TokenTree::Token(self.span, self.bump_and_get())),\n         }"}, {"sha": "23ca026f541dd0ceeef51add2857946239caba8d", "filename": "src/test/compile-fail/binary-op-on-double-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinary-op-on-double-ref.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let vr = v.iter().filter(|x| {\n         x % 2 == 0\n         //~^ ERROR binary operation `%` cannot be applied to type `&&{integer}`\n-        //~| NOTE this is a reference of type that `%` can be applied to\n+        //~| NOTE this is a reference to a type that `%` can be applied to\n         //~| NOTE an implementation of `std::ops::Rem` might be missing for `&&{integer}`\n     });\n     println!(\"{:?}\", vr);"}, {"sha": "0d61878cd8073b25164202a1c41aa42803df15e5", "filename": "src/test/compile-fail/feature-gate-const-indexing.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-const-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-const-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-const-indexing.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+fn main() {\n+    const ARR: [i32; 6] = [42, 43, 44, 45, 46, 47];\n+    const IDX: usize = 3;\n+    const VAL: i32 = ARR[IDX];\n+    const BLUB: [i32; (ARR[0] - 41) as usize] = [5]; //~ ERROR constant evaluation error\n+}"}, {"sha": "6994d2199d276d4f7b18ff31e491659c4be83ab7", "filename": "src/test/compile-fail/issue-39388.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Fissue-39388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Fissue-39388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39388.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! assign {\n+    (($($a:tt)*) = ($($b:tt))*) => { //~ ERROR expected `*` or `+`\n+        $($a)* = $($b)*\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d601249c036b1a1654dd912b924bb80597fc9b48", "filename": "src/test/compile-fail/issue-39616.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Fissue-39616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fcompile-fail%2Fissue-39616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39616.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(a: [0; 1]) {} //~ ERROR expected type, found `0`\n+//~| ERROR expected one of `->`, `where`, or `{`, found `]`\n+// FIXME(jseyfried): avoid emitting the second error (preexisting)\n+\n+fn main() {}"}, {"sha": "ee1a32c4c16cf775cb7b897aea2ee79f74780a7e", "filename": "src/test/parse-fail/issue-39018.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -1,28 +0,0 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n- --> src/test/ui/span/issue-39018.rs:2:13\n-  |\n-2 |     let x = \"Hello \" + \"World!\";\n-  |             ^^^^^^^^\n-  |\n-note: `+` can't be used to concatenate two `&str` strings\n- --> src/test/ui/span/issue-39018.rs:2:13\n-  |\n-2 |     let x = \"Hello \" + \"World!\";\n-  |             ^^^^^^^^\n-help: to_owned() can be used to create an owned `String` from a string reference. This allows concatenation since the `String` is owned.\n-  |     let x = \"Hello \".to_owned() + \"World!\";\n-\n-error[E0369]: binary operation `+` cannot be applied to type `World`\n- --> src/test/ui/span/issue-39018.rs:7:13\n-  |\n-7 |     let y = World::Hello + World::Goodbye;\n-  |             ^^^^^^^^^^^^\n-  |\n-note: an implementation of `std::ops::Add` might be missing for `World`\n- --> src/test/ui/span/issue-39018.rs:7:13\n-  |\n-7 |     let y = World::Hello + World::Goodbye;\n-  |             ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "9d6d4570c6ba6f2a8830f1178f79fdd838c84db0", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -4,11 +4,7 @@ error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n 12 |     let x = \"Hello \" + \"World!\";\n    |             ^^^^^^^^\n    |\n-note: `+` can't be used to concatenate two `&str` strings\n-  --> $DIR/issue-39018.rs:12:13\n-   |\n-12 |     let x = \"Hello \" + \"World!\";\n-   |             ^^^^^^^^\n+   = note: `+` can't be used to concatenate two `&str` strings\n help: to_owned() can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left.\n    |     let x = \"Hello \".to_owned() + \"World!\";\n \n@@ -18,11 +14,7 @@ error[E0369]: binary operation `+` cannot be applied to type `World`\n 17 |     let y = World::Hello + World::Goodbye;\n    |             ^^^^^^^^^^^^\n    |\n-note: an implementation of `std::ops::Add` might be missing for `World`\n-  --> $DIR/issue-39018.rs:17:13\n-   |\n-17 |     let y = World::Hello + World::Goodbye;\n-   |             ^^^^^^^^^^^^\n+   = note: an implementation of `std::ops::Add` might be missing for `World`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "707d5da50bf73e961fa33ecf1614e2212d1c9277", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80514426aaf59967e08f32ec44c1876cdeffe9d/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=f80514426aaf59967e08f32ec44c1876cdeffe9d", "patch": "@@ -167,7 +167,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     // FIXME get this whitelist empty.\n     let whitelist = vec![\n         \"abi_ptx\", \"simd\", \"static_recursion\",\n-        \"cfg_target_has_atomic\", \"staged_api\", \"const_indexing\",\n+        \"cfg_target_has_atomic\", \"staged_api\",\n         \"unboxed_closures\", \"stmt_expr_attributes\",\n         \"cfg_target_thread_local\", \"unwind_attributes\",\n         \"inclusive_range_syntax\""}]}