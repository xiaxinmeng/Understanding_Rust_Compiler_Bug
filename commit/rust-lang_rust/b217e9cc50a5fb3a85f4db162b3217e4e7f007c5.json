{"sha": "b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMTdlOWNjNTBhNWZiM2E4NWY0ZGIxNjJiMzIxN2U0ZTdmMDA3YzU=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-06-12T16:47:07Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-08-04T14:41:05Z"}, "message": "add implicit Sized bound to associated types", "tree": {"sha": "596cc128f6a6a0d3a0cdd82dc59ecdde6d60ed75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596cc128f6a6a0d3a0cdd82dc59ecdde6d60ed75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "html_url": "https://github.com/rust-lang/rust/commit/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f2a040d10d0a747312ecd19fe1a253771063e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2a040d10d0a747312ecd19fe1a253771063e0d", "html_url": "https://github.com/rust-lang/rust/commit/8f2a040d10d0a747312ecd19fe1a253771063e0d"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "333d934ed37c1671254a9f549125fb4eac3e3010", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "patch": "@@ -412,13 +412,28 @@ pub(crate) fn associated_ty_data_query(\n         .with_type_param_mode(crate::lower::TypeParamLoweringMode::Variable);\n     let self_ty =\n         TyKind::BoundVar(BoundVar::new(crate::DebruijnIndex::INNERMOST, 0)).intern(&Interner);\n-    let bounds = type_alias_data\n+    let mut bounds: Vec<_> = type_alias_data\n         .bounds\n         .iter()\n         .flat_map(|bound| ctx.lower_type_bound(bound, self_ty.clone(), false))\n         .filter_map(|pred| generic_predicate_to_inline_bound(db, &pred, &self_ty))\n         .collect();\n \n+    if !ctx.unsized_types.borrow().contains(&self_ty) {\n+        let sized_trait = resolver\n+            .krate()\n+            .and_then(|krate| db.lang_item(krate, \"sized\".into()))\n+            .and_then(|lang_item| lang_item.as_trait().map(to_chalk_trait_id));\n+        let sized_bound = sized_trait.into_iter().map(|sized_trait| {\n+            let trait_bound =\n+                rust_ir::TraitBound { trait_id: sized_trait, args_no_self: Default::default() };\n+            let inline_bound = rust_ir::InlineBound::TraitBound(trait_bound);\n+            chalk_ir::Binders::empty(&Interner, inline_bound)\n+        });\n+        bounds.extend(sized_bound);\n+        bounds.shrink_to_fit();\n+    }\n+\n     // FIXME: Re-enable where clauses on associated types when an upstream chalk bug is fixed.\n     //        (rust-analyzer#9052)\n     // let where_clauses = convert_where_clauses(db, type_alias.into(), &bound_vars);"}, {"sha": "4544c6138935546c67bee025f62c989a08527a1b", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "patch": "@@ -66,8 +66,8 @@ pub struct TyLoweringContext<'a> {\n     /// Splitting this up would be a possible fix.\n     opaque_type_data: RefCell<Vec<ReturnTypeImplTrait>>,\n     expander: RefCell<Option<Expander>>,\n-    /// Keeps tracking types with explicit `?Sized` bounds.\n-    unsized_types: RefCell<FxHashSet<Ty>>,\n+    /// Tracks types with explicit `?Sized` bounds.\n+    pub(crate) unsized_types: RefCell<FxHashSet<Ty>>,\n }\n \n impl<'a> TyLoweringContext<'a> {\n@@ -796,7 +796,7 @@ impl<'a> TyLoweringContext<'a> {\n                     .and_then(|krate| self.db.lang_item(krate, \"sized\".into()))\n                     .and_then(|lang_item| lang_item.as_trait());\n                 // Don't lower associated type bindings as the only possible relaxed trait bound\n-                // `?Sized` has none of them.\n+                // `?Sized` has no of them.\n                 // If we got another trait here ignore the bound completely.\n                 let trait_id = self\n                     .lower_trait_ref_from_path(path, Some(self_ty.clone()))\n@@ -996,7 +996,6 @@ pub(crate) fn generic_predicates_for_param_query(\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     let generics = generics(db.upcast(), param_id.parent);\n-    // TODO(iDawer): add implicitly sized clauses?\n     resolver\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them"}, {"sha": "aa4234969b9a0ba993688f9ad87195e0f836c403", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "patch": "@@ -1312,3 +1312,31 @@ impl<'a, T> IntoIterator for &'a [T] {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn sized_blanket_impl() {\n+    check_infer(\n+        r#\"\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+trait Foo { fn foo() -> u8; }\n+impl<T: Sized> Foo for T {}\n+fn f<S: Sized, T, U: ?Sized>() {\n+    u32::foo;\n+    S::foo;\n+    T::foo;\n+    U::foo;\n+    <[u32]>::foo;\n+}\n+\"#,\n+        expect![[r#\"\n+            127..198 '{     ...foo; }': ()\n+            133..141 'u32::foo': fn foo<u32>() -> u8\n+            147..153 'S::foo': fn foo<S>() -> u8\n+            159..165 'T::foo': fn foo<T>() -> u8\n+            171..177 'U::foo': {unknown}\n+            183..195 '<[u32]>::foo': {unknown}\n+        \"#]],\n+    );\n+}"}, {"sha": "dfcc4608c16463fd8cad8faf957f552ae8958b09", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b217e9cc50a5fb3a85f4db162b3217e4e7f007c5/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=b217e9cc50a5fb3a85f4db162b3217e4e7f007c5", "patch": "@@ -3515,3 +3515,35 @@ fn test() {\n \"#,\n     );\n }\n+\n+#[test]\n+fn associated_type_sized_bounds() {\n+    check_infer(\n+        r#\"\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+struct Yes;\n+trait IsSized { const IS_SIZED: Yes; }\n+impl<T: Sized> IsSized for T { const IS_SIZED: Yes = Yes; }\n+\n+trait Foo {\n+    type Explicit: Sized;\n+    type Implicit;\n+    type Relaxed: ?Sized;\n+}\n+fn f<F: Foo>() {\n+    F::Explicit::IS_SIZED;\n+    F::Implicit::IS_SIZED;\n+    F::Relaxed::IS_SIZED;\n+}\n+\"#,\n+        expect![[r#\"\n+            142..145 'Yes': Yes\n+            250..333 '{     ...ZED; }': ()\n+            256..277 'F::Exp..._SIZED': Yes\n+            283..304 'F::Imp..._SIZED': Yes\n+            310..330 'F::Rel..._SIZED': {unknown}\n+        \"#]],\n+    );\n+}"}]}