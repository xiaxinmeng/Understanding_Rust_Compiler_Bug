{"sha": "30a7a5b8fa0f0c6262322d353020ff556708082e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYTdhNWI4ZmEwZjBjNjI2MjMyMmQzNTMwMjBmZjU1NjcwODA4MmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-17T06:14:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T04:19:59Z"}, "message": "Define cfg(rtopt) when optimizing. Turn off runtime sanity checks\n\nNaturally, and sadly, turning off sanity checks in the runtime is\na noticable performance win. The particular test I'm running goes from\n~1.5 s to ~1.3s.\n\nSanity checks are turned *on* when not optimizing, or when cfg\nincludes `rtdebug` or `rtassert`.", "tree": {"sha": "f35e3f0b3b2f0dd8baad3d447a1c50bc33ba5909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35e3f0b3b2f0dd8baad3d447a1c50bc33ba5909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a7a5b8fa0f0c6262322d353020ff556708082e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a7a5b8fa0f0c6262322d353020ff556708082e", "html_url": "https://github.com/rust-lang/rust/commit/30a7a5b8fa0f0c6262322d353020ff556708082e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a7a5b8fa0f0c6262322d353020ff556708082e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c75d36d0e81508d4e7614104abb44fa19179c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c75d36d0e81508d4e7614104abb44fa19179c03", "html_url": "https://github.com/rust-lang/rust/commit/4c75d36d0e81508d4e7614104abb44fa19179c03"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "0575f48c4c467d7695119ccd9a4afea7aa6dba71", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30a7a5b8fa0f0c6262322d353020ff556708082e/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/30a7a5b8fa0f0c6262322d353020ff556708082e/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=30a7a5b8fa0f0c6262322d353020ff556708082e", "patch": "@@ -96,7 +96,8 @@ ifdef CFG_DISABLE_OPTIMIZE\n   $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))\n   CFG_RUSTC_FLAGS +=\n else\n-  CFG_RUSTC_FLAGS += -O\n+  # The rtopt cfg turns off runtime sanity checks\n+  CFG_RUSTC_FLAGS += -O --cfg rtopt\n endif\n \n ifdef CFG_ENABLE_DEBUG"}, {"sha": "5378a2c798d8723a40fd103ccbe46822b0a878dc", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30a7a5b8fa0f0c6262322d353020ff556708082e/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a7a5b8fa0f0c6262322d353020ff556708082e/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=30a7a5b8fa0f0c6262322d353020ff556708082e", "patch": "@@ -27,8 +27,10 @@ macro_rules! rtdebug (\n \n macro_rules! rtassert (\n     ( $arg:expr ) => ( {\n-        if !$arg {\n-            rtabort!(\"assertion failed: %s\", stringify!($arg));\n+        if ::rt::util::ENFORCE_SANITY {\n+            if !$arg {\n+                rtabort!(\"assertion failed: %s\", stringify!($arg));\n+            }\n         }\n     } )\n )"}, {"sha": "c3f5b11a93066cb34e9737737bf937f850ae886b", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30a7a5b8fa0f0c6262322d353020ff556708082e/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a7a5b8fa0f0c6262322d353020ff556708082e/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=30a7a5b8fa0f0c6262322d353020ff556708082e", "patch": "@@ -19,6 +19,9 @@ use unstable::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n #[cfg(target_os=\"macos\")]\n use unstable::running_on_valgrind;\n \n+// Indicates whether we should perform expensive sanity checks, including rtassert!\n+pub static ENFORCE_SANITY: bool = !cfg!(rtopt) || cfg!(rtdebug) || cfg!(rtassert);\n+\n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];"}]}