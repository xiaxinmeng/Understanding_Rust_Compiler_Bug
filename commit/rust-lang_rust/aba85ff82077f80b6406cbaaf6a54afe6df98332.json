{"sha": "aba85ff82077f80b6406cbaaf6a54afe6df98332", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYTg1ZmY4MjA3N2Y4MGI2NDA2Y2JhYWY2YTU0YWZlNmRmOTgzMzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-06-04T01:56:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-06-08T00:14:35Z"}, "message": "Enable rustdoc to document safe wasm intrinsics\n\nThis commit fixes an issue not found during #84988 where rustdoc is used\nto document cross-platform intrinsics but it was requiring that\nfunctions which use `#[target_feature]` are `unsafe` erroneously, even\nif they're WebAssembly specific. Rustdoc today, for example, already has\na special case where it enables annotations like\n`#[target_feature(enable = \"simd128\")]` on platforms other than\nWebAssembly. The purpose of this commit is to relax the \"require all\n`#[target_feature]` functions are `unsafe`\" requirement for all targets\nwhenever rustdoc is running, enabling all targets to fully document\nother targets, such as WebAssembly, where intrinsics functions aren't\nalways `unsafe`.", "tree": {"sha": "cc30a389f47a407324046b2f102637bf9f25b9ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc30a389f47a407324046b2f102637bf9f25b9ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aba85ff82077f80b6406cbaaf6a54afe6df98332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aba85ff82077f80b6406cbaaf6a54afe6df98332", "html_url": "https://github.com/rust-lang/rust/commit/aba85ff82077f80b6406cbaaf6a54afe6df98332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aba85ff82077f80b6406cbaaf6a54afe6df98332/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a60327063e82413eed50a10df3b7d19b77bda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a60327063e82413eed50a10df3b7d19b77bda0", "html_url": "https://github.com/rust-lang/rust/commit/e4a60327063e82413eed50a10df3b7d19b77bda0"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "ee3ac3b62d9ec7ed5d56b03004ad24a21a634700", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aba85ff82077f80b6406cbaaf6a54afe6df98332/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba85ff82077f80b6406cbaaf6a54afe6df98332/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=aba85ff82077f80b6406cbaaf6a54afe6df98332", "patch": "@@ -2771,7 +2771,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if tcx.sess.check_name(attr, sym::target_feature) {\n             if !tcx.is_closure(id) && tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n-                if tcx.sess.target.is_like_wasm {\n+                if tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc {\n                     // The `#[target_feature]` attribute is allowed on\n                     // WebAssembly targets on all functions, including safe\n                     // ones. Other targets require that `#[target_feature]` is\n@@ -2785,6 +2785,10 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     // deterministic trap. There is no undefined behavior when\n                     // executing WebAssembly so `#[target_feature]` is allowed\n                     // on safe functions (but again, only for WebAssembly)\n+                    //\n+                    // Note that this is also allowed if `actually_rustdoc` so\n+                    // if a target is documenting some wasm-specific code then\n+                    // it's not spuriously denied.\n                 } else if !tcx.features().target_feature_11 {\n                     let mut err = feature_err(\n                         &tcx.sess.parse_sess,"}, {"sha": "80b15ace0ee950d1b1df93246a5b7ccbcc6cc0c9", "filename": "src/test/rustdoc-ui/wasm-safe.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aba85ff82077f80b6406cbaaf6a54afe6df98332/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba85ff82077f80b6406cbaaf6a54afe6df98332/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs?ref=aba85ff82077f80b6406cbaaf6a54afe6df98332", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+#![feature(wasm_target_feature)]\n+\n+#[cfg(any(target_arch = \"wasm32\", doc))]\n+#[target_feature(enable = \"simd128\")]\n+pub fn foo() {}"}]}