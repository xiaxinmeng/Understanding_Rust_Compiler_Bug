{"sha": "3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjUxZjU5MWY3ZmZkZDQ1ZjUxY2QxZDQyYTQwMDI0ODJhZjJiZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T08:13:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T08:13:59Z"}, "message": "Auto merge of #1077 - RalfJung:unwind_to_block, r=RalfJung\n\nadjust for goto_block refactoring\n\nThe Miri side of https://github.com/rust-lang/rust/pull/66646", "tree": {"sha": "7aeae1a7dbcb93d8fcea24a0b48a0940b6ae6947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aeae1a7dbcb93d8fcea24a0b48a0940b6ae6947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "html_url": "https://github.com/rust-lang/rust/commit/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91cec06f4c32a49b027db745d424beaff2b7a694", "url": "https://api.github.com/repos/rust-lang/rust/commits/91cec06f4c32a49b027db745d424beaff2b7a694", "html_url": "https://github.com/rust-lang/rust/commit/91cec06f4c32a49b027db745d424beaff2b7a694"}, {"sha": "a04620eb697eb064902d5c1b5f7584fa68a1bcfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04620eb697eb064902d5c1b5f7584fa68a1bcfd", "html_url": "https://github.com/rust-lang/rust/commit/a04620eb697eb064902d5c1b5f7584fa68a1bcfd"}], "stats": {"total": 101, "additions": 46, "deletions": 55}, "files": [{"sha": "b5ab3053c5cf8f62de1f69ac39c37bea52f86c6d", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -1 +1 @@\n-bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa\n+809e180a76ce97340bf4354ff357bc59e3ca40b2"}, {"sha": "3524029475a9cd4d6320b3a6c58bb455c25e6e6d", "filename": "src/eval.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -201,16 +201,18 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n     // Process the result.\n     match res {\n         Ok(return_code) => {\n-            let leaks = ecx.memory.leak_report();\n             // Disable the leak test on some platforms where we do not\n             // correctly implement TLS destructors.\n             let target_os = ecx.tcx.tcx.sess.target.target.target_os.to_lowercase();\n             let ignore_leaks = target_os == \"windows\" || target_os == \"macos\";\n-            if !ignore_leaks && leaks != 0 {\n-                tcx.sess.err(\"the evaluated program leaked memory\");\n-                // Ignore the provided return code - let the reported error\n-                // determine the return code.\n-                return None;\n+            if !ignore_leaks {\n+                let leaks = ecx.memory.leak_report();\n+                if leaks != 0 {\n+                    tcx.sess.err(\"the evaluated program leaked memory\");\n+                    // Ignore the provided return code - let the reported error\n+                    // determine the return code.\n+                    return None;\n+                }\n             }\n             return Some(return_code)\n         }"}, {"sha": "c405329141985ce7842cb3e9e00723311628ab3f", "filename": "src/machine.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -186,22 +186,21 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        ret: Option<mir::BasicBlock>,\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n-        ecx.find_fn(instance, args, dest, ret, unwind)\n+        ecx.find_fn(instance, args, ret, unwind)\n     }\n \n     #[inline(always)]\n     fn call_extra_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: Dlsym,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        ret: Option<mir::BasicBlock>,\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_dlsym(fn_val, args, dest, ret)\n+        ecx.call_dlsym(fn_val, args, ret)\n     }\n \n     #[inline(always)]\n@@ -210,11 +209,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        ret: Option<mir::BasicBlock>,\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_intrinsic(span, instance, args, dest, ret, unwind)\n+        ecx.call_intrinsic(span, instance, args, ret, unwind)\n     }\n \n     #[inline(always)]"}, {"sha": "dfee4066da1b0d1986d5b5e06007dafdb001a2e1", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -27,15 +27,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         dlsym: Dlsym,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        ret: Option<mir::BasicBlock>,\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n     ) -> InterpResult<'tcx> {\n         use self::Dlsym::*;\n \n         let this = self.eval_context_mut();\n-\n-        let dest = dest.expect(\"we don't support any diverging dlsym\");\n-        let ret = ret.expect(\"dest is `Some` but ret is `None`\");\n+        let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n \n         match dlsym {\n             GetEntropy => {\n@@ -46,8 +43,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n \n-        this.goto_block(Some(ret))?;\n         this.dump_place(*dest);\n+        this.go_to_block(ret);\n         Ok(())\n     }\n }"}, {"sha": "b136260f751ec9cc84d782776a09327055d1489f", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -114,8 +114,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         def_id: DefId,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        ret: Option<mir::BasicBlock>,\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n@@ -129,7 +128,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tcx = &{ this.tcx.tcx };\n \n         // First: functions that diverge.\n-        match link_name {\n+        let (dest, ret) = match link_name {\n             // Note that this matches calls to the *foreign* item `__rust_start_panic* -\n             // that is, calls to `extern \"Rust\" { fn __rust_start_panic(...) }`.\n             // We forward this to the underlying *implementation* in the panic runtime crate.\n@@ -154,15 +153,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 return Err(InterpError::Exit(code).into());\n             }\n             _ => {\n-                if dest.is_none() {\n+                if let Some(p) = ret {\n+                    p\n+                } else {\n                     throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name);\n                 }\n             }\n-        }\n+        };\n \n-        // Next: functions that assume a ret and dest.\n-        let dest = dest.expect(\"we already checked for a dest\");\n-        let ret = ret.expect(\"dest is `Some` but ret is `None`\");\n+        // Next: functions that return.\n         match link_name {\n             \"malloc\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n@@ -928,8 +927,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n         }\n \n-        this.goto_block(Some(ret))?;\n         this.dump_place(*dest);\n+        this.go_to_block(ret);\n         Ok(None)\n     }\n "}, {"sha": "00886328030bbc035a61a5091b00422877828309", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -16,12 +16,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        _ret: Option<mir::BasicBlock>,\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        if this.emulate_intrinsic(span, instance, args, dest)? {\n+        if this.emulate_intrinsic(span, instance, args, ret)? {\n             return Ok(());\n         }\n         let tcx = &{this.tcx.tcx};\n@@ -32,23 +31,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // that might still hang around!\n         let intrinsic_name = &*tcx.item_name(instance.def_id()).as_str();\n \n-        // Handle diverging intrinsics\n-        match intrinsic_name {\n+        // Handle diverging intrinsics.\n+        let (dest, ret) = match intrinsic_name {\n             \"abort\" => {\n                 // FIXME: Add a better way of indicating 'abnormal' termination,\n                 // since this is not really an 'unsupported' behavior\n                 throw_unsup_format!(\"the evaluated program aborted!\");\n             }\n             \"miri_start_panic\" => return this.handle_miri_start_panic(args, unwind),\n-            _ => {}\n-        }\n-\n-        // Handle non-diverging intrinsics\n-        // The intrinsic itself cannot diverge (otherwise, we would have handled it above),\n-        // so if we got here without a return place that's UB (can happen e.g., for transmute returning `!`).\n-        let dest = match dest {\n-            Some(dest) => dest,\n-            None => throw_ub!(Unreachable)\n+            _ => {\n+                if let Some(p) = ret {\n+                    p\n+                } else {\n+                    throw_unsup_format!(\"unimplemented (diverging) intrinsic: {}\", intrinsic_name);\n+                }\n+            }\n         };\n \n         match intrinsic_name {\n@@ -581,6 +578,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             name => throw_unsup_format!(\"unimplemented intrinsic: {}\", name),\n         }\n \n+        this.dump_place(*dest);\n+        this.go_to_block(ret);\n         Ok(())\n     }\n }"}, {"sha": "2e8aea3f86e05132aace5422ad87687f5cb47929", "filename": "src/shims/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -16,25 +16,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: Option<PlaceTy<'tcx, Tag>>,\n-        ret: Option<mir::BasicBlock>,\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n         trace!(\n             \"eval_fn_call: {:#?}, {:?}\",\n             instance,\n-            dest.map(|place| *place)\n+            ret.map(|p| *p.0)\n         );\n \n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n-            let dest = dest.unwrap();\n+            let (dest, ret) = ret.unwrap();\n             let n = this\n                 .align_offset(args[0], args[1])?\n                 .unwrap_or_else(|| this.truncate(u128::max_value(), dest.layout));\n             this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n-            this.goto_block(ret)?;\n+            this.go_to_block(ret);\n             return Ok(None);\n         }\n \n@@ -46,7 +45,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // to run extra MIR), and Ok(Some(body)) if we found MIR to run for the\n             // foreign function\n             // Any needed call to `goto_block` will be performed by `emulate_foreign_item`.\n-            return this.emulate_foreign_item(instance.def_id(), args, dest, ret, unwind);\n+            return this.emulate_foreign_item(instance.def_id(), args, ret, unwind);\n         }\n \n         // Otherwise, load the MIR."}, {"sha": "42028738822a2c726c4eb3e285d58e4545668911", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf51f591f7ffdd45f51cd1d42a4002482af2bd5/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=3bf51f591f7ffdd45f51cd1d42a4002482af2bd5", "patch": "@@ -53,10 +53,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.machine.panic_payload = Some(scalar);\n \n         // Jump to the unwind block to begin unwinding.\n-        // We don't use `goto_block` as that is just meant for normal returns.\n-        let next_frame = this.frame_mut();\n-        next_frame.block = unwind;\n-        next_frame.stmt = 0;\n+        this.unwind_to_block(unwind);\n         return Ok(())\n     }\n "}]}