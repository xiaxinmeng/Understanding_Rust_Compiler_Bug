{"sha": "536020c5f97883aa9f2a90897a5adb520486d2e1", "node_id": "C_kwDOAAsO6NoAKDUzNjAyMGM1Zjk3ODgzYWE5ZjJhOTA4OTdhNWFkYjUyMDQ4NmQyZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T18:21:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T18:21:26Z"}, "message": "Auto merge of #97224 - matthiaskrgr:rollup-it5nw68, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #97109 (Fix misleading `cannot infer type for type parameter` error)\n - #97187 (Reverse condition in Vec::retain_mut doctest)\n - #97201 (Fix typo)\n - #97203 (Minor tweaks to rustc book summary formatting.)\n - #97208 (Do not emit the lint `unused_attributes` for *inherent* `#[doc(hidden)]` associated items)\n - #97215 (Add complexity estimation of iterating over HashSet and HashMap)\n - #97220 (Add regression test for#81827)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ad6c44b81684d98d09459b5117e2ae34a445cb19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad6c44b81684d98d09459b5117e2ae34a445cb19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/536020c5f97883aa9f2a90897a5adb520486d2e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/536020c5f97883aa9f2a90897a5adb520486d2e1", "html_url": "https://github.com/rust-lang/rust/commit/536020c5f97883aa9f2a90897a5adb520486d2e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/536020c5f97883aa9f2a90897a5adb520486d2e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5caa5a8421f84cb7664f999b7635801bcf3f96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5caa5a8421f84cb7664f999b7635801bcf3f96a", "html_url": "https://github.com/rust-lang/rust/commit/b5caa5a8421f84cb7664f999b7635801bcf3f96a"}, {"sha": "6c0c7f1787f2ab55e80386ac3d94a63cf32daef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0c7f1787f2ab55e80386ac3d94a63cf32daef2", "html_url": "https://github.com/rust-lang/rust/commit/6c0c7f1787f2ab55e80386ac3d94a63cf32daef2"}], "stats": {"total": 352, "additions": 312, "deletions": 40}, "files": [{"sha": "e1a2a237c2324525d6d0ef882b96a1a9cfbb0706", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -866,6 +866,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n \n+            self.report_ambiguous_type_parameter(&mut err, arg);\n             err.span_label(\n                 span,\n                 arg_data.cannot_infer_msg(use_diag.filter(|d| d.applies_to(span))),\n@@ -933,6 +934,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn report_ambiguous_type_parameter(&self, err: &mut Diagnostic, arg: GenericArg<'tcx>) {\n+        if let GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Infer(ty::TyVar(ty_vid)) = *ty.kind()\n+        {\n+            let mut inner = self.inner.borrow_mut();\n+            let ty_vars = &inner.type_variables();\n+            let var_origin = ty_vars.var_origin(ty_vid);\n+            if let TypeVariableOriginKind::TypeParameterDefinition(_, Some(def_id)) =\n+                var_origin.kind\n+                && let Some(parent_def_id) = self.tcx.parent(def_id).as_local()\n+                && let Some(node) = self.tcx.hir().find_by_def_id(parent_def_id)\n+            {\n+                match node {\n+                    hir::Node::Item(item) if matches!(item.kind, hir::ItemKind::Impl(_) | hir::ItemKind::Fn(..)) => (),\n+                    hir::Node::ImplItem(impl_item) if matches!(impl_item.kind, hir::ImplItemKind::Fn(..)) => (),\n+                    _ => return,\n+                }\n+                err.span_help(self.tcx.def_span(def_id), \"type parameter declared here\");\n+            }\n+        }\n+    }\n+\n     pub fn need_type_info_err_in_generator(\n         &self,\n         kind: hir::GeneratorKind,"}, {"sha": "3d5da114ecfde758cbb09e21d9738b8b0cb1d564", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -832,7 +832,7 @@ impl CheckAttrVisitor<'_> {\n             let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n             let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n \n-            if Target::from_item(containing_item) == Target::Impl {\n+            if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = containing_item.kind {\n                 let meta_items = attr.meta_item_list().unwrap();\n \n                 let (span, replacement_span) = if meta_items.len() == 1 {"}, {"sha": "62bc04cadeebccf51f94914fb986052aadaf6e03", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1470,11 +1470,11 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// ```\n     /// let mut vec = vec![1, 2, 3, 4];\n-    /// vec.retain_mut(|x| if *x > 3 {\n-    ///     false\n-    /// } else {\n+    /// vec.retain_mut(|x| if *x <= 3 {\n     ///     *x += 1;\n     ///     true\n+    /// } else {\n+    ///     false\n     /// });\n     /// assert_eq!(vec, [2, 3, 4]);\n     /// ```"}, {"sha": "969f5dde4f05d915c7c70943b47000df0c10624b", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -344,6 +344,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"{key}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over keys takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn keys(&self) -> Keys<'_, K, V> {\n         Keys { inner: self.iter() }\n@@ -370,6 +375,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// vec.sort_unstable();\n     /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over keys takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -395,6 +405,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"{val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over values takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn values(&self) -> Values<'_, K, V> {\n         Values { inner: self.iter() }\n@@ -422,6 +437,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"{val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over values takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n     pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {\n         ValuesMut { inner: self.iter_mut() }\n@@ -448,6 +468,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// vec.sort_unstable();\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over values takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -473,6 +498,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {key} val: {val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over map takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n@@ -503,6 +533,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {key} val: {val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over map takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n@@ -633,6 +668,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, this operation takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]"}, {"sha": "4ac0e081c2e2d2bbcac2c1ca92a8726207d6e428", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -184,6 +184,11 @@ impl<T, S> HashSet<T, S> {\n     ///     println!(\"{x}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over set takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -312,6 +317,11 @@ impl<T, S> HashSet<T, S> {\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, this operation takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)"}, {"sha": "7b2c35c0593d59dc08b3725e85770c2e2bed0382", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,19 +1,20 @@\n # The Rustc Book\n \n - [What is rustc?](what-is-rustc.md)\n-- [Command-line arguments](command-line-arguments.md)\n+- [Command-line Arguments](command-line-arguments.md)\n+    - [Codegen Options](codegen-options/index.md)\n - [Lints](lints/index.md)\n-    - [Lint levels](lints/levels.md)\n+    - [Lint Levels](lints/levels.md)\n     - [Lint Groups](lints/groups.md)\n-    - [Lint listing](lints/listing/index.md)\n-        - [Allowed-by-default lints](lints/listing/allowed-by-default.md)\n-        - [Warn-by-default lints](lints/listing/warn-by-default.md)\n-        - [Deny-by-default lints](lints/listing/deny-by-default.md)\n-- [Codegen options](codegen-options/index.md)\n+    - [Lint Listing](lints/listing/index.md)\n+        - [Allowed-by-default Lints](lints/listing/allowed-by-default.md)\n+        - [Warn-by-default Lints](lints/listing/warn-by-default.md)\n+        - [Deny-by-default Lints](lints/listing/deny-by-default.md)\n - [JSON Output](json.md)\n - [Tests](tests/index.md)\n - [Platform Support](platform-support.md)\n-    - [Template for target-specific documentation](platform-support/TEMPLATE.md)\n+    - [Target Tier Policy](target-tier-policy.md)\n+    - [Template for Target-specific Documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n@@ -25,13 +26,12 @@\n     - [*-unknown-openbsd](platform-support/openbsd.md)\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)\n-- [Target Tier Policy](target-tier-policy.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)\n     - [Known Issues](targets/known-issues.md)\n - [Profile-guided Optimization](profile-guided-optimization.md)\n - [Instrumentation-based Code Coverage](instrument-coverage.md)\n-- [Linker-plugin based LTO](linker-plugin-lto.md)\n+- [Linker-plugin-based LTO](linker-plugin-lto.md)\n - [Exploit Mitigations](exploit-mitigations.md)\n - [Contributing to `rustc`](contributing.md)"}, {"sha": "b1c3b618cec021d45aca29431893da2041a62cdc", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,4 +1,4 @@\n-# Codegen options\n+# Codegen Options\n \n All of these options are passed to `rustc` via the `-C` flag, short for \"codegen.\" You can see\n a version of this list for your exact compiler by running `rustc -C help`."}, {"sha": "73e7764a11d37822c7883b02ede93ce192760955", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,4 +1,4 @@\n-# Command-line arguments\n+# Command-line Arguments\n \n Here's a list of command-line arguments to `rustc` and what they do.\n "}, {"sha": "0ae9e53af3cd2ee3d05bf62ac0cedb685c8568c1", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,4 +1,4 @@\n-# `instrument-coverage`\n+# Instrumentation-based Code Coverage\n \n ## Introduction\n "}, {"sha": "9c644dd404dc428d57b7a62a68d740041c9a0111", "filename": "src/doc/rustc/src/linker-plugin-lto.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,4 +1,4 @@\n-# Linker-plugin-LTO\n+# Linker-plugin-based LTO\n \n The `-C linker-plugin-lto` flag allows for deferring the LTO optimization\n to the actual linking step, which in turn allows for performing"}, {"sha": "93892d6ade61b28c3322ff1764f984ed8ceca815", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,4 +1,4 @@\n-# Lint levels\n+# Lint Levels\n \n In `rustc`, lints are divided into five *levels*:\n "}, {"sha": "8c4c0b9c5581d77bf9d549e5f46ad9c0a35d9908", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,3 +1,3 @@\n-# Allowed-by-default lints\n+# Allowed-by-default Lints\n \n This file is auto-generated by the lint-docs script."}, {"sha": "12f511423b49aaed5a17e8728d5f267dec63de87", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,3 +1,3 @@\n-# Deny-by-default lints\n+# Deny-by-default Lints\n \n This file is auto-generated by the lint-docs script."}, {"sha": "791a80274e205ec5a0f24f95b64fdbaf4f0152b4", "filename": "src/doc/rustc/src/lints/listing/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,4 +1,4 @@\n-# Lint listing\n+# Lint Listing\n \n This section lists out all of the lints, grouped by their default lint levels.\n "}, {"sha": "84d67764f7d637e091398b5059ecdc7ce1e92ada", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,3 +1,3 @@\n-# Warn-by-default lints\n+# Warn-by-default Lints\n \n This file is auto-generated by the lint-docs script."}, {"sha": "721c234c6e60ad01e38df9087f970d20bac3b021", "filename": "src/doc/rustc/src/platform-support/pc-windows-gnullvm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -4,7 +4,7 @@\n \n Windows targets similar to `*-pc-windows-gnu` but using UCRT as the runtime and various LLVM tools/libraries instead of GCC/Binutils.\n \n-Target triples avaiable so far:\n+Target triples available so far:\n - `aarch64-pc-windows-gnullvm`\n - `x86_64-pc-windows-gnullvm`\n \n@@ -26,7 +26,7 @@ Like with any other Windows target created binaries are in PE format.\n ## Building the target\n \n For cross-compilation I recommend using [llvm-mingw](https://github.com/mstorsjo/llvm-mingw) toolchain, one change that seems necessary beside configuring corss compilers is disabling experimental `m86k` target. Otherwise LLVM build fails with `multiple definition ...` errors.\n-Native bootstrapping builds require rather fragile hacks until host artifacts are avaiable so I won't describe them here.\n+Native bootstrapping builds require rather fragile hacks until host artifacts are available so I won't describe them here.\n \n ## Building Rust programs\n "}, {"sha": "d9cf7ce30f936370b361604b469b45fbfa1c903a", "filename": "src/doc/rustc/src/profile-guided-optimization.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,4 +1,4 @@\n-# Profile Guided Optimization\n+# Profile-guided Optimization\n \n `rustc` supports doing profile-guided optimization (PGO).\n This chapter describes what PGO is, what it is good for, and how it can be used."}, {"sha": "3f44a54e80adc9cd5a284e96c19ec3c73b5eed8a", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -5,6 +5,12 @@ LL |     let _ = foo([0; 1]);\n    |         -   ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |         |\n    |         consider giving this pattern a type\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-83249.rs:12:8\n+   |\n+LL | fn foo<T: Foo>(_: [u8; T::N]) -> T {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "caa582d87f527295e587364270f9893ff04077d9", "filename": "src/test/ui/consts/issue-64662.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,12 +3,24 @@ error[E0282]: type annotations needed\n    |\n LL |     A = foo(),\n    |         ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-64662.rs:6:14\n+   |\n+LL | const fn foo<T>() -> isize {\n+   |              ^\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-64662.rs:3:9\n    |\n LL |     B = foo(),\n    |         ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-64662.rs:6:14\n+   |\n+LL | const fn foo<T>() -> isize {\n+   |              ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e58c9d3116a1c6af71b47ae788e1aaf43c63b37d", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -37,6 +37,12 @@ error[E0282]: type annotations needed\n    |\n LL |     bfnr(x);\n    |     ^^^^ cannot infer type for type parameter `U` declared on the function `bfnr`\n+   |\n+help: type parameter declared here\n+  --> $DIR/E0401.rs:4:13\n+   |\n+LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n+   |             ^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "dc70ed661d2234515210458c0f5cdd333f1da573", "filename": "src/test/ui/inference/ambiguous_type_parameter.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -0,0 +1,17 @@\n+use std::collections::HashMap;\n+\n+trait Store<K, V> {\n+    fn get_raw(&self, key: &K) -> Option<()>;\n+}\n+\n+struct InMemoryStore;\n+\n+impl<K> Store<String, HashMap<K, String>> for InMemoryStore {\n+    fn get_raw(&self, key: &String) -> Option<()> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    InMemoryStore.get_raw(&String::default()); //~ ERROR type annotations needed\n+}"}, {"sha": "47ef1948aee9fcab453c46c92602cd45070c5b45", "filename": "src/test/ui/inference/ambiguous_type_parameter.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/ambiguous_type_parameter.rs:16:19\n+   |\n+LL |     InMemoryStore.get_raw(&String::default());\n+   |                   ^^^^^^^ cannot infer type for type parameter `K`\n+   |\n+help: type parameter declared here\n+  --> $DIR/ambiguous_type_parameter.rs:9:6\n+   |\n+LL | impl<K> Store<String, HashMap<K, String>> for InMemoryStore {\n+   |      ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "51fac5f79df475c54592504c9bef7914a09d745d", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -6,6 +6,11 @@ LL |     let foo = foo(1, \"\");\n    |         |\n    |         consider giving `foo` the explicit type `Foo<_, _, W, Z>`, where the type parameter `W` is specified\n    |\n+help: type parameter declared here\n+  --> $DIR/erase-type-params-in-label.rs:25:14\n+   |\n+LL | fn foo<T, K, W: Default, Z: Default>(t: T, k: K) -> Foo<T, K, W, Z> {\n+   |              ^\n    = note: cannot satisfy `_: Default`\n note: required by a bound in `foo`\n   --> $DIR/erase-type-params-in-label.rs:25:17\n@@ -25,6 +30,11 @@ LL |     let bar = bar(1, \"\");\n    |         |\n    |         consider giving `bar` the explicit type `Bar<_, _, Z>`, where the type parameter `Z` is specified\n    |\n+help: type parameter declared here\n+  --> $DIR/erase-type-params-in-label.rs:14:14\n+   |\n+LL | fn bar<T, K, Z: Default>(t: T, k: K) -> Bar<T, K, Z> {\n+   |              ^\n    = note: cannot satisfy `_: Default`\n note: required by a bound in `bar`\n   --> $DIR/erase-type-params-in-label.rs:14:17"}, {"sha": "edf97c0aed47ee04b51a62d76543e763a82a06e5", "filename": "src/test/ui/inference/issue-86162-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -4,6 +4,11 @@ error[E0283]: type annotations needed\n LL |     foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n    |     ^^^ cannot infer type for type parameter `impl Clone` declared on the function `foo`\n    |\n+help: type parameter declared here\n+  --> $DIR/issue-86162-1.rs:3:11\n+   |\n+LL | fn foo(x: impl Clone) {}\n+   |           ^^^^^^^^^^\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `foo`\n   --> $DIR/issue-86162-1.rs:3:16"}, {"sha": "c642ebb057603b51aba7d53ffb803e103e2a48d5", "filename": "src/test/ui/inference/issue-86162-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -4,6 +4,11 @@ error[E0283]: type annotations needed\n LL |     Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n    |     ^^^^^^^^ cannot infer type for type parameter `impl Clone` declared on the associated function `bar`\n    |\n+help: type parameter declared here\n+  --> $DIR/issue-86162-2.rs:8:15\n+   |\n+LL |     fn bar(x: impl Clone) {}\n+   |               ^^^^^^^^^^\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `Foo::bar`\n   --> $DIR/issue-86162-2.rs:8:20"}, {"sha": "f548692d785830f649b0ba637b89f75da3aac0e7", "filename": "src/test/ui/issues/issue-6458.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |    foo(TypeWithState(marker::PhantomData));\n    |    ^^^ cannot infer type for type parameter `State` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-6458.rs:6:12\n+   |\n+LL | pub fn foo<State>(_: TypeWithState<State>) {}\n+   |            ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "362ad55707a4a37fc2c715880cd6c6f4df191361", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.fixed", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,5 +1,7 @@\n-#![deny(unused_attributes)]\n+#![feature(inherent_associated_types)]\n+#![allow(dead_code, incomplete_features)]\n #![crate_type = \"lib\"]\n+#![deny(unused_attributes)]\n // run-rustfix\n \n pub trait Trait {\n@@ -12,6 +14,17 @@ pub trait Trait {\n \n pub struct Implementor;\n \n+impl Implementor {\n+    #[doc(hidden)] // no error\n+    type Inh = ();\n+\n+    #[doc(hidden)] // no error\n+    const INH: () = ();\n+\n+    #[doc(hidden)] // no error\n+    fn inh() {}\n+}\n+\n impl Trait for Implementor {\n     \n     type It = ();"}, {"sha": "d493ed6dae2065ba01f36624ac7b70021df6ca7d", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,5 +1,7 @@\n-#![deny(unused_attributes)]\n+#![feature(inherent_associated_types)]\n+#![allow(dead_code, incomplete_features)]\n #![crate_type = \"lib\"]\n+#![deny(unused_attributes)]\n // run-rustfix\n \n pub trait Trait {\n@@ -12,6 +14,17 @@ pub trait Trait {\n \n pub struct Implementor;\n \n+impl Implementor {\n+    #[doc(hidden)] // no error\n+    type Inh = ();\n+\n+    #[doc(hidden)] // no error\n+    const INH: () = ();\n+\n+    #[doc(hidden)] // no error\n+    fn inh() {}\n+}\n+\n impl Trait for Implementor {\n     #[doc(hidden)]\n     type It = ();"}, {"sha": "f167bd460db3edd8ccdb3915eb5dae59a3eee5e3", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -1,19 +1,19 @@\n error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:16:5\n+  --> $DIR/unused-attr-doc-hidden.rs:29:5\n    |\n LL |     #[doc(hidden)]\n    |     ^^^^^^^^^^^^^^ help: remove this attribute\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-attr-doc-hidden.rs:1:9\n+  --> $DIR/unused-attr-doc-hidden.rs:4:9\n    |\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n \n error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:21:5\n+  --> $DIR/unused-attr-doc-hidden.rs:34:5\n    |\n LL |     #[doc(hidden)]\n    |     ^^^^^^^^^^^^^^ help: remove this attribute\n@@ -22,7 +22,7 @@ LL |     #[doc(hidden)]\n    = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n \n error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:26:11\n+  --> $DIR/unused-attr-doc-hidden.rs:39:11\n    |\n LL |     #[doc(hidden, alias = \"aka\")]\n    |           ^^^^^^--\n@@ -33,7 +33,7 @@ LL |     #[doc(hidden, alias = \"aka\")]\n    = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n \n error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:31:27\n+  --> $DIR/unused-attr-doc-hidden.rs:44:27\n    |\n LL |     #[doc(alias = \"this\", hidden,)]\n    |                           ^^^^^^-\n@@ -44,7 +44,7 @@ LL |     #[doc(alias = \"this\", hidden,)]\n    = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n \n error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:36:11\n+  --> $DIR/unused-attr-doc-hidden.rs:49:11\n    |\n LL |     #[doc(hidden, hidden)]\n    |           ^^^^^^--\n@@ -55,7 +55,7 @@ LL |     #[doc(hidden, hidden)]\n    = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n \n error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:36:19\n+  --> $DIR/unused-attr-doc-hidden.rs:49:19\n    |\n LL |     #[doc(hidden, hidden)]\n    |                   ^^^^^^ help: remove this attribute"}, {"sha": "2aa2b0e6a3c2c062071485cf219f489948fd4c30", "filename": "src/test/ui/missing/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer type for type parameter `X` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/missing-type-parameter.rs:1:8\n+   |\n+LL | fn foo<X>() { }\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "7ec58159413234f1b28e24442144d6121316c0de", "filename": "src/test/ui/parser/issue-81827.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fparser%2Fissue-81827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fparser%2Fissue-81827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-81827.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: mismatched closing delimiter: `]`\n+// error-pattern: expected one of `)` or `,`, found `{`\n+\n+#![crate_name=\"0\"]\n+\n+\n+\n+fn main() {}\n+\n+fn r()->i{0|{#[cfg(r(0{]0"}, {"sha": "069de33919494658162f84c21cabf37c923f562c", "filename": "src/test/ui/parser/issue-81827.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fparser%2Fissue-81827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fparser%2Fissue-81827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-81827.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -0,0 +1,35 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-81827.rs:11:27\n+   |\n+LL | fn r()->i{0|{#[cfg(r(0{]0\n+   |          -  -             ^\n+   |          |  |\n+   |          |  unclosed delimiter\n+   |          unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-81827.rs:11:27\n+   |\n+LL | fn r()->i{0|{#[cfg(r(0{]0\n+   |          -  -             ^\n+   |          |  |\n+   |          |  unclosed delimiter\n+   |          unclosed delimiter\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-81827.rs:11:23\n+   |\n+LL | fn r()->i{0|{#[cfg(r(0{]0\n+   |               -       ^^ mismatched closing delimiter\n+   |               |       |\n+   |               |       unclosed delimiter\n+   |               closing delimiter possibly meant for this\n+\n+error: expected one of `)` or `,`, found `{`\n+  --> $DIR/issue-81827.rs:11:23\n+   |\n+LL | fn r()->i{0|{#[cfg(r(0{]0\n+   |                       ^ expected one of `)` or `,`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a4cfee55633731c2c43a6924a26e3f8e76e294f8", "filename": "src/test/ui/suggestions/fn-needing-specified-return-type-param.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -5,6 +5,12 @@ LL |     let _ = f;\n    |         -   ^ cannot infer type for type parameter `A` declared on the function `f`\n    |         |\n    |         consider giving this pattern the explicit type `fn() -> A`, where the type parameter `A` is specified\n+   |\n+help: type parameter declared here\n+  --> $DIR/fn-needing-specified-return-type-param.rs:1:6\n+   |\n+LL | fn f<A>() -> A { unimplemented!() }\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "da7461347106ffa68a2ca0c6b8061bce17aeb9c7", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,13 +3,24 @@ error[E0282]: type annotations needed\n    |\n LL |     test(22, std::default::Default::default());\n    |     ^^^^ cannot infer type for type parameter `U` declared on the function `test`\n+   |\n+help: type parameter declared here\n+  --> $DIR/multidispatch-convert-ambig-dest.rs:20:11\n+   |\n+LL | fn test<T,U>(_: T, _: U)\n+   |           ^\n \n error[E0283]: type annotations needed\n   --> $DIR/multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n    |     ^^^^ cannot infer type for type parameter `U` declared on the function `test`\n    |\n+help: type parameter declared here\n+  --> $DIR/multidispatch-convert-ambig-dest.rs:20:11\n+   |\n+LL | fn test<T,U>(_: T, _: U)\n+   |           ^\n note: multiple `impl`s satisfying `i32: Convert<_>` found\n   --> $DIR/multidispatch-convert-ambig-dest.rs:8:1\n    |"}, {"sha": "3c8d7450f96fa1f4bf200399e8c089cce13cd507", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -16,6 +16,11 @@ LL |     a.method();\n    |     | cannot infer type for type parameter `U`\n    |     this method call resolves to `U`\n    |\n+help: type parameter declared here\n+  --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:12:9\n+   |\n+LL | impl<T, U> V<U> for A<T>\n+   |         ^\n note: multiple `impl`s satisfying `B: I<_>` found\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:5:1\n    |"}, {"sha": "501fa7c8c67c198adfc54c5abeb899e5dd40fcbb", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn-with-assoc-type.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/unbounded-type-param-in-fn-with-assoc-type.rs:3:8\n+   |\n+LL | fn foo<T, U = u64>() -> (T, U) {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "d01c3a7d4e220258e1d35aeed2765c4948704dab", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/unbounded-type-param-in-fn.rs:1:8\n+   |\n+LL | fn foo<T>() -> T {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "64fdbfe7db4c899d1fe8352d268966d7aa01cfcd", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -4,6 +4,11 @@ error[E0283]: type annotations needed\n LL |     foo(42);\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n+help: type parameter declared here\n+  --> $DIR/type-annotation-needed.rs:1:8\n+   |\n+LL | fn foo<T: Into<String>>(x: i32) {}\n+   |        ^\n    = note: cannot satisfy `_: Into<String>`\n note: required by a bound in `foo`\n   --> $DIR/type-annotation-needed.rs:1:11"}, {"sha": "857feb7732536bdd6a4d0d70677859efc784cc28", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -482,20 +482,20 @@ fn lint_name(line: &str) -> Result<String, &'static str> {\n     }\n }\n \n-static ALLOWED_MD: &str = r#\"# Allowed-by-default lints\n+static ALLOWED_MD: &str = r#\"# Allowed-by-default Lints\n \n These lints are all set to the 'allow' level by default. As such, they won't show up\n unless you set them to a higher lint level with a flag or attribute.\n \n \"#;\n \n-static WARN_MD: &str = r#\"# Warn-by-default lints\n+static WARN_MD: &str = r#\"# Warn-by-default Lints\n \n These lints are all set to the 'warn' level by default.\n \n \"#;\n \n-static DENY_MD: &str = r#\"# Deny-by-default lints\n+static DENY_MD: &str = r#\"# Deny-by-default Lints\n \n These lints are all set to the 'deny' level by default.\n "}, {"sha": "d26f4ee894fad47e06775b84580d806c16109734", "filename": "src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,7 +3,7 @@\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n //! CPU and encodes them in a `usize` where each bit position represents\n-//! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n+//! whether a feature is available (bit is set) or unavailable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the\n //! the `__crate::detect::check_for!` macro is used to map string literals (e.g.,"}, {"sha": "02d5eed1c2923ce759f98ebc7e9869f99f4dca0a", "filename": "src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536020c5f97883aa9f2a90897a5adb520486d2e1/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=536020c5f97883aa9f2a90897a5adb520486d2e1", "patch": "@@ -3,7 +3,7 @@\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n //! CPU and encodes them in a `usize` where each bit position represents\n-//! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n+//! whether a feature is available (bit is set) or unavailable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the\n //! the `__crate::detect::check_for!` macro is used to map string literals (e.g.,"}]}