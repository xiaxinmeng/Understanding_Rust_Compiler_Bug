{"sha": "4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MzdiNGIxNTA5YzNjMTViNDFhMDU0ODljNGJkZGQyZmUzMGUzM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T19:59:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T19:59:52Z"}, "message": "Auto merge of #77464 - ecstatic-morse:const-fn-impl-trait, r=oli-obk\n\nGive `impl Trait` in a `const fn` its own feature gate\n\n...previously it was gated under `#![feature(const_fn)]`.\n\nI think we actually want to do this in all const-contexts? If so, this should be `#![feature(const_impl_trait)]` instead. I don't think there's any way to make use of `impl Trait` within a `const` initializer.\n\ncc #77463\n\nr? `@oli-obk`", "tree": {"sha": "24a3f1fac288682219ed0781afbb3f4e175e560f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a3f1fac288682219ed0781afbb3f4e175e560f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "html_url": "https://github.com/rust-lang/rust/commit/4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28928c750c2c82b1bf27bd6100542f01a377e748", "url": "https://api.github.com/repos/rust-lang/rust/commits/28928c750c2c82b1bf27bd6100542f01a377e748", "html_url": "https://github.com/rust-lang/rust/commit/28928c750c2c82b1bf27bd6100542f01a377e748"}, {"sha": "b5693a39d9d7d1b5404c188899bf7d983c79dfe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5693a39d9d7d1b5404c188899bf7d983c79dfe3", "html_url": "https://github.com/rust-lang/rust/commit/b5693a39d9d7d1b5404c188899bf7d983c79dfe3"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "bc2244219156cae0f4c725b39a23f21d93448365", "filename": "compiler/rustc_error_codes/src/error_codes/E0723.md", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0723.md", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0723.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0723.md?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -3,12 +3,8 @@ An unstable feature in `const` contexts was used.\n Erroneous code example:\n \n ```compile_fail,E0723\n-trait T {}\n-\n-impl T for () {}\n-\n-const fn foo() -> impl T { // error: `impl Trait` in const fn is unstable\n-    ()\n+const fn foo<T: Copy>(_: T) { // error!\n+   // ...\n }\n ```\n \n@@ -18,11 +14,7 @@ feature flag:\n ```\n #![feature(const_fn)]\n \n-trait T {}\n-\n-impl T for () {}\n-\n-const fn foo() -> impl T {\n-    ()\n+const fn foo<T: Copy>(_: T) { // ok!\n+   // ...\n }\n ```"}, {"sha": "1982d098542baf6fa63a70049028dceca53e6a6c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -596,6 +596,9 @@ declare_features! (\n     /// Allows rustc to inject a default alloc_error_handler\n     (active, default_alloc_error_handler, \"1.48.0\", Some(66741), None),\n \n+    /// Allows argument and return position `impl Trait` in a `const fn`.\n+    (active, const_impl_trait, \"1.48.0\", Some(77463), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "63b20c7c0273dc4bf3137278dde6ccaae0b8a1d7", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -558,12 +558,17 @@ pub mod ty {\n     #[derive(Debug)]\n     pub struct ImplTrait;\n     impl NonConstOp for ImplTrait {\n-        fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-            mcf_status_in_item(ccx)\n+        fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+            Status::Unstable(sym::const_impl_trait)\n         }\n \n         fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-            mcf_build_error(ccx, span, \"`impl Trait` in const fn is unstable\")\n+            feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_impl_trait,\n+                span,\n+                &format!(\"`impl Trait` is not allowed in {}s\", ccx.const_kind()),\n+            )\n         }\n     }\n "}, {"sha": "a2184c00a28fb1b0f8ac0adccff3f770674031a1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -359,6 +359,7 @@ symbols! {\n         const_fn_union,\n         const_generics,\n         const_if_match,\n+        const_impl_trait,\n         const_in_array_repeat_expressions,\n         const_indexing,\n         const_let,"}, {"sha": "3aa68aa1d8d127ad3242b8354e007d83cae89a5e", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -83,6 +83,7 @@\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n #![feature(const_assume)]\n+#![cfg_attr(not(bootstrap), feature(const_impl_trait))]\n #![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n #![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n #![feature(const_generics)]"}, {"sha": "e062c9f0aa38c4cc80c0187b22e510edf041027a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -1,9 +1,10 @@\n+// gate-test-const_impl_trait\n+\n struct AlanTuring<T>(T);\n-const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> {\n-    //~^ ERROR `impl Trait` in const fn is unstable\n+const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { //~ `impl Trait`\n     AlanTuring(0)\n }\n \n-const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n+const fn no_rpit() -> impl std::fmt::Debug {} //~ `impl Trait`\n \n fn main() {}"}, {"sha": "01c797cd96b4db422420dad736e7ec007fadcbd6", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_impl_trait.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -1,21 +1,21 @@\n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn_impl_trait.rs:2:24\n+error[E0658]: `impl Trait` is not allowed in constant functions\n+  --> $DIR/min_const_fn_impl_trait.rs:4:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #77463 <https://github.com/rust-lang/rust/issues/77463> for more information\n+   = help: add `#![feature(const_impl_trait)]` to the crate attributes to enable\n \n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn_impl_trait.rs:7:23\n+error[E0658]: `impl Trait` is not allowed in constant functions\n+  --> $DIR/min_const_fn_impl_trait.rs:8:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #77463 <https://github.com/rust-lang/rust/issues/77463> for more information\n+   = help: add `#![feature(const_impl_trait)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6e1973bd18aabf25d30fdf9d6535afbf5f5f8b45", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_fn, const_fn_fn_ptr_basics)]\n+#![feature(const_impl_trait, const_fn_fn_ptr_basics)]\n #![feature(type_alias_impl_trait)]\n \n type Foo = impl Fn() -> usize;"}, {"sha": "4582d5386f08f0e9ac6dacfaa4046d81d2f25e8e", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(const_fn, generators, generator_trait, type_alias_impl_trait)]\n+#![feature(const_impl_trait, generators, generator_trait, type_alias_impl_trait)]\n \n use std::ops::Generator;\n "}, {"sha": "58f0f5b2f65dc4925aba6847b9f3ad3579fdea4a", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn, type_alias_impl_trait)]\n+#![feature(const_impl_trait, type_alias_impl_trait)]\n \n type Bar = impl Send;\n "}, {"sha": "74ffa6084268ea5bea87a85eb03019dfce16dd11", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4437b4b1509c3c15b41a05489c4bddd2fe30e33f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn, type_alias_impl_trait)]\n+#![feature(const_impl_trait, type_alias_impl_trait)]\n \n type Foo = impl Send;\n "}]}