{"sha": "f469860dc23cd432b76a1d6779ce2f1206805c6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0Njk4NjBkYzIzY2Q0MzJiNzZhMWQ2Nzc5Y2UyZjEyMDY4MDVjNmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-06T13:15:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-12T12:24:11Z"}, "message": "lint diverging expressions that are sub-expressions of others", "tree": {"sha": "d8ab45f4e125540d0a0cf5b8ea399620ec822c9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8ab45f4e125540d0a0cf5b8ea399620ec822c9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f469860dc23cd432b76a1d6779ce2f1206805c6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX1p5rAAoJEFbW7qD8Z6xGtsMP/RK8QO2vZw9tsl8UiKoufnyP\nqcInF7a3gTkZvXabgh6Q6fZ0y6XiFXskkrlDL9EwsqVe5xo7A5PoU46kXhF+cOeE\npuCjG3Cm1wW8uLT32YwSIrogQh7dxGXOc322ztae8b2g2ulhpMzkbO8IXxuOG8sf\ncTy407dw/9yfmielusqkNmy1lt9bG1q24sds/ZgQ9Dpez3+PD/ITUQfELZWe2PhO\nG1i3Ez7rmgbwxZhw8tYcpvQyNI9jTrX0mZMM+qLdS1bWK5PznIEQJkSqcAi5CN5P\nFo50s5SRC/5j5EhepYietb2Bqx4lhcypVqNJnNftf3QCdsrQcTOTgOtOidsupniH\nJdBU7Ya0lea+A3pN9sNM3LmEmCX51SS9c5zrwYcdbtTm/lwjG9Cv52p4YDJsD/BY\n/FTM7WwKV7hEdVohRDxebPkDg757X4QDyygMvDFKyUkhRpKUGufNJAUTqoBsrd1a\nJ3dJ3BEb0/i5N15SXXv63l37qFOL7Y9Y/TLQUWXhHyuNpqGLsNujW4928mrFD0XC\n+aY3wFmZDpLoFEiAk1nsJE4IwUadThTzI56mpE7bj02jbAai7/qBjJy5V0fdzmHq\nhnMZSrj3pImyNOVfSHE/16RkmUJx70gCPHPWzUL8b3zJOAIP6b2b8WoezI4u+XfJ\nltrOTqbfjLey2SKYP5Vj\n=xffZ\n-----END PGP SIGNATURE-----", "payload": "tree d8ab45f4e125540d0a0cf5b8ea399620ec822c9c\nparent cb49e4e21014c18cde6d90aaa21c936150b90a54\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473167736 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473683051 +0200\n\nlint diverging expressions that are sub-expressions of others\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f469860dc23cd432b76a1d6779ce2f1206805c6f", "html_url": "https://github.com/rust-lang/rust/commit/f469860dc23cd432b76a1d6779ce2f1206805c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f469860dc23cd432b76a1d6779ce2f1206805c6f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb49e4e21014c18cde6d90aaa21c936150b90a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb49e4e21014c18cde6d90aaa21c936150b90a54", "html_url": "https://github.com/rust-lang/rust/commit/cb49e4e21014c18cde6d90aaa21c936150b90a54"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "84bbf87d29c24907dd2a046bcca97fa58d802ba8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f469860dc23cd432b76a1d6779ce2f1206805c6f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f469860dc23cd432b76a1d6779ce2f1206805c6f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f469860dc23cd432b76a1d6779ce2f1206805c6f", "patch": "@@ -211,6 +211,7 @@ All notable changes to this project will be documented in this file.\n [`cyclomatic_complexity`]: https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity\n [`deprecated_semver`]: https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver\n [`derive_hash_xor_eq`]: https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq\n+[`diverging_sub_expression`]: https://github.com/Manishearth/rust-clippy/wiki#diverging_sub_expression\n [`doc_markdown`]: https://github.com/Manishearth/rust-clippy/wiki#doc_markdown\n [`double_neg`]: https://github.com/Manishearth/rust-clippy/wiki#double_neg\n [`drop_ref`]: https://github.com/Manishearth/rust-clippy/wiki#drop_ref"}, {"sha": "ba0973b0e67f47dfa1131a421577d524d5f6c88e", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f469860dc23cd432b76a1d6779ce2f1206805c6f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f469860dc23cd432b76a1d6779ce2f1206805c6f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f469860dc23cd432b76a1d6779ce2f1206805c6f", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 170 lints included in this crate:\n+There are 171 lints included in this crate:\n \n name                                                                                                                 | default | triggers on\n ---------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -50,6 +50,7 @@ name\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                       | warn    | functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | use of `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                             | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n+[diverging_sub_expression](https://github.com/Manishearth/rust-clippy/wiki#diverging_sub_expression)                 | warn    | whether an expression contains a diverging sub expression\n [doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | presence of `_`, `::` or camel-case outside backticks in documentation\n [double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                             | warn    | `--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | calls to `std::mem::drop` with a reference instead of an owned value"}, {"sha": "d6964c156eb1049faee1c6a41a6703297fbd822f", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f469860dc23cd432b76a1d6779ce2f1206805c6f/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f469860dc23cd432b76a1d6779ce2f1206805c6f/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=f469860dc23cd432b76a1d6779ce2f1206805c6f", "patch": "@@ -1,8 +1,9 @@\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{Visitor, walk_expr};\n use rustc::hir::*;\n+use rustc::ty;\n use rustc::lint::*;\n-use utils::{get_parent_expr, span_note_and_lint};\n+use utils::{get_parent_expr, span_note_and_lint, span_lint};\n \n /// **What it does:** Checks for a read and a write to the same variable where\n /// whether the read occurs before or after the write depends on the evaluation\n@@ -26,12 +27,32 @@ declare_lint! {\n     \"whether a variable read occurs before a write depends on sub-expression evaluation order\"\n }\n \n+/// **What it does:** Checks for diverging calls that are not match arms or statements.\n+///\n+/// **Why is this bad?** It is often confusing to read. In addition, the\n+/// sub-expression evaluation order for Rust is not well documented.\n+///\n+/// **Known problems:** Someone might want to use `some_bool || panic!()` as a shorthand.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let a = b() || panic!() || c();\n+/// // `c()` is dead, `panic!()` is only called if `b()` returns `false`\n+/// let x = (a, b, c, panic!());\n+/// // can simply be replaced by `panic!()`\n+/// ```\n+declare_lint! {\n+    pub DIVERGING_SUB_EXPRESSION,\n+    Warn,\n+    \"whether an expression contains a diverging sub expression\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct EvalOrderDependence;\n \n impl LintPass for EvalOrderDependence {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(EVAL_ORDER_DEPENDENCE)\n+        lint_array!(EVAL_ORDER_DEPENDENCE, DIVERGING_SUB_EXPRESSION)\n     }\n }\n \n@@ -56,6 +77,75 @@ impl LateLintPass for EvalOrderDependence {\n             _ => {}\n         }\n     }\n+    fn check_stmt(&mut self, cx: &LateContext, stmt: &Stmt) {\n+        match stmt.node {\n+            StmtExpr(ref e, _) | StmtSemi(ref e, _) => DivergenceVisitor(cx).maybe_walk_expr(e),\n+            StmtDecl(ref d, _) => {\n+                if let DeclLocal(ref local) = d.node {\n+                    if let Local { init: Some(ref e), .. } = **local {\n+                        DivergenceVisitor(cx).visit_expr(e);\n+                    }\n+                }\n+            },\n+        }\n+    }\n+}\n+\n+struct DivergenceVisitor<'a, 'tcx: 'a>(&'a LateContext<'a, 'tcx>);\n+\n+impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n+    fn maybe_walk_expr(&mut self, e: &Expr) {\n+        match e.node {\n+            ExprClosure(..) => {},\n+            ExprMatch(ref e, ref arms, _) => {\n+                self.visit_expr(e);\n+                for arm in arms {\n+                    if let Some(ref guard) = arm.guard {\n+                        self.visit_expr(guard);\n+                    }\n+                    // make sure top level arm expressions aren't linted\n+                    walk_expr(self, &*arm.body);\n+                }\n+            }\n+            _ => walk_expr(self, e),\n+        }\n+    }\n+    fn report_diverging_sub_expr(&mut self, e: &Expr) {\n+        span_lint(\n+            self.0,\n+            DIVERGING_SUB_EXPRESSION,\n+            e.span,\n+            \"sub-expression diverges\",\n+        );\n+    }\n+}\n+\n+impl<'a, 'tcx, 'v> Visitor<'v> for DivergenceVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, e: &'v Expr) {\n+        // this match can be replaced by just the default arm, once\n+        // https://github.com/rust-lang/rust/issues/35121 makes sure that\n+        // ! is propagated properly\n+        match e.node {\n+            ExprAgain(_) |\n+            ExprBreak(_) |\n+            ExprRet(_) => self.report_diverging_sub_expr(e),\n+            ExprCall(ref func, _) => match self.0.tcx.expr_ty(func).sty {\n+                ty::TyFnDef(_, _, fn_ty) |\n+                ty::TyFnPtr(fn_ty) => if let ty::TyNever = self.0.tcx.erase_late_bound_regions(&fn_ty.sig).output.sty {\n+                    self.report_diverging_sub_expr(e);\n+                },\n+                _ => {},\n+            },\n+            ExprMethodCall(..) => { /* TODO */ },\n+            _ => if let ty::TyNever = self.0.tcx.expr_ty(e).sty {\n+                self.report_diverging_sub_expr(e);\n+            },\n+        }\n+        self.maybe_walk_expr(e);\n+    }\n+    fn visit_block(&mut self, _: &'v Block) {\n+        // don't continue over blocks, LateLintPass already does that\n+    }\n }\n \n /// Walks up the AST from the the given write expression (`vis.write_expr`)"}, {"sha": "27842d6addd8b265f16e2a603cf69d7908dd95c4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f469860dc23cd432b76a1d6779ce2f1206805c6f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f469860dc23cd432b76a1d6779ce2f1206805c6f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f469860dc23cd432b76a1d6779ce2f1206805c6f", "patch": "@@ -332,6 +332,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         eq_op::EQ_OP,\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n+        eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n         eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         format::USELESS_FORMAT,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,"}, {"sha": "929ef911f43c0faf74a74bc8b762e50628323810", "filename": "tests/compile-fail/diverging_sub_expression.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f469860dc23cd432b76a1d6779ce2f1206805c6f/tests%2Fcompile-fail%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f469860dc23cd432b76a1d6779ce2f1206805c6f/tests%2Fcompile-fail%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiverging_sub_expression.rs?ref=f469860dc23cd432b76a1d6779ce2f1206805c6f", "patch": "@@ -0,0 +1,14 @@\n+#![feature(plugin, never_type)]\n+#![plugin(clippy)]\n+#![deny(diverging_sub_expression)]\n+\n+#[allow(empty_loop)]\n+fn diverge() -> ! { loop {} }\n+\n+#[allow(unused_variables, unnecessary_operation)]\n+fn main() {\n+    let b = true;\n+    b || diverge(); //~ ERROR sub-expression diverges\n+    let y = (5, diverge(), 6); //~ ERROR sub-expression diverges\n+    println!(\"{}\", y.1); //~ ERROR sub-expression diverges\n+}"}]}