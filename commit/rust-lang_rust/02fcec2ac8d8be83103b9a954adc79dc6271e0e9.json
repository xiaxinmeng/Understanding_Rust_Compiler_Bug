{"sha": "02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "node_id": "C_kwDOAAsO6NoAKDAyZmNlYzJhYzhkOGJlODMxMDNiOWE5NTRhZGM3OWRjNjI3MWUwZTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:29:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:29:30Z"}, "message": "Rollup merge of #99795 - compiler-errors:delay-specialization-normalize-error, r=spastorino\n\nDelay a bug when failed to normalize trait ref during specialization\n\nThe error messages still kinda suck here but they don't ICE anymore...\n\nFixes #45814\nFixes #43037\n\nr? types", "tree": {"sha": "f6a610d996e7ba853e976615431d93b1c7368171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6a610d996e7ba853e976615431d93b1c7368171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tqqCRBK7hj4Ov3rIwAAeW0IAGG/lxcPKR2bfM7CN/Te1p5M\ne/WqH9NMa46ZbNkOsSrx9QclsVryM4wKifEd8ik9upJRifpRAbZD55vpjshl8dq/\nSiUkX4cQd4AS6uzXMDAa5LkXyDZboONadzAGIMPAmHEbstay7so99MQ5f3Syebnk\neaXMSkZWO6dk98+a9U2KjOHmbifo3TjDwW+z/pmhyabP2KyeBlypjhZlTsY0h+AZ\nrO+blUTtdYP053efaUicoxCoXEnka8bLK4evbvEwyabEG5whjpIBBdkQAyzaF+8R\nxEuPCaiNu8Dx8LSvwWWCR7rjF3rkLSjZmIykmVY+1XaRFbV3Ogne+AU6xEUmJQc=\n=M0Y4\n-----END PGP SIGNATURE-----\n", "payload": "tree f6a610d996e7ba853e976615431d93b1c7368171\nparent 9c18fdc71f867d7a9269051867bd73983f80d4be\nparent 16a3601f62e1a2e2ae34668005a317d931e13a09\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558570 +0200\ncommitter GitHub <noreply@github.com> 1659558570 +0200\n\nRollup merge of #99795 - compiler-errors:delay-specialization-normalize-error, r=spastorino\n\nDelay a bug when failed to normalize trait ref during specialization\n\nThe error messages still kinda suck here but they don't ICE anymore...\n\nFixes #45814\nFixes #43037\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "html_url": "https://github.com/rust-lang/rust/commit/02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c18fdc71f867d7a9269051867bd73983f80d4be", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c18fdc71f867d7a9269051867bd73983f80d4be", "html_url": "https://github.com/rust-lang/rust/commit/9c18fdc71f867d7a9269051867bd73983f80d4be"}, {"sha": "16a3601f62e1a2e2ae34668005a317d931e13a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a3601f62e1a2e2ae34668005a317d931e13a09", "html_url": "https://github.com/rust-lang/rust/commit/16a3601f62e1a2e2ae34668005a317d931e13a09"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "6223c5ea33913e2dc300c25320abeb1997ee9eeb", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "patch": "@@ -151,8 +151,6 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:\n     tcx.infer_ctxt().enter(|infcx| {\n-        // Normalize the trait reference. The WF rules ought to ensure\n-        // that this always succeeds.\n         let impl1_trait_ref = match traits::fully_normalize(\n             &infcx,\n             FulfillmentContext::new(),\n@@ -161,8 +159,12 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n             impl1_trait_ref,\n         ) {\n             Ok(impl1_trait_ref) => impl1_trait_ref,\n-            Err(err) => {\n-                bug!(\"failed to fully normalize {:?}: {:?}\", impl1_trait_ref, err);\n+            Err(_errors) => {\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(impl1_def_id),\n+                    format!(\"failed to fully normalize {impl1_trait_ref}\"),\n+                );\n+                impl1_trait_ref\n             }\n         };\n "}, {"sha": "c49119f9c095b73e07a3361c57e6d72bfeb69dd5", "filename": "src/test/ui/specialization/issue-43037.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs?ref=02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "patch": "@@ -0,0 +1,20 @@\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+trait X {}\n+trait Y: X {}\n+trait Z {\n+    type Assoc: Y;\n+}\n+struct A<T>(T);\n+\n+impl<T> Y for T where T: X {}\n+impl<T: X> Z for A<T> {\n+    type Assoc = T;\n+}\n+\n+// this impl is invalid, but causes an ICE anyway\n+impl<T> From<<A<T> as Z>::Assoc> for T {}\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+\n+fn main() {}"}, {"sha": "4249cd89477160e549188d49c1bf642336c99235", "filename": "src/test/ui/specialization/issue-43037.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.stderr?ref=02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "patch": "@@ -0,0 +1,12 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/issue-43037.rs:17:6\n+   |\n+LL | impl<T> From<<A<T> as Z>::Assoc> for T {}\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "8ee5d3e2e58da627b5b3d942493867a70035300d", "filename": "src/test/ui/specialization/issue-45814.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs?ref=02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "patch": "@@ -0,0 +1,12 @@\n+//~ ERROR overflow evaluating the requirement `T: Trait<_>`\n+\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+pub trait Trait<T> {}\n+\n+default impl<T, U> Trait<T> for U {}\n+\n+impl<T> Trait<<T as Iterator>::Item> for T {}\n+\n+fn main() {}"}, {"sha": "ab6adf477c97888b7b4a7e182f9fbf5276263a35", "filename": "src/test/ui/specialization/issue-45814.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02fcec2ac8d8be83103b9a954adc79dc6271e0e9/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr?ref=02fcec2ac8d8be83103b9a954adc79dc6271e0e9", "patch": "@@ -0,0 +1,14 @@\n+error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_45814`)\n+note: required because of the requirements on the impl of `Trait<_>` for `T`\n+  --> $DIR/issue-45814.rs:8:20\n+   |\n+LL | default impl<T, U> Trait<T> for U {}\n+   |                    ^^^^^^^^     ^\n+   = note: 128 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `Trait<_>` for `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}