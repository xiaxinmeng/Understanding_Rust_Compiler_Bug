{"sha": "7fc1685c47e316d1377e4d54393db6c18ff8a744", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYzE2ODVjNDdlMzE2ZDEzNzdlNGQ1NDM5M2RiNmMxOGZmOGE3NDQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-06T21:37:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-14T01:35:59Z"}, "message": "Tweak output of type mismatch between \"then\" and `else` `if` arms", "tree": {"sha": "9c5a1fa330c0c21572752dbfb09af875ae3e2a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c5a1fa330c0c21572752dbfb09af875ae3e2a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc1685c47e316d1377e4d54393db6c18ff8a744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc1685c47e316d1377e4d54393db6c18ff8a744", "html_url": "https://github.com/rust-lang/rust/commit/7fc1685c47e316d1377e4d54393db6c18ff8a744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc1685c47e316d1377e4d54393db6c18ff8a744/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aee7ed335cfcaad33a6f6492497588b3d421b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aee7ed335cfcaad33a6f6492497588b3d421b2d", "html_url": "https://github.com/rust-lang/rust/commit/9aee7ed335cfcaad33a6f6492497588b3d421b2d"}], "stats": {"total": 251, "additions": 238, "deletions": 13}, "files": [{"sha": "d61b37ef7c8f1368776fb70d3336c332dd1faffa", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -511,6 +511,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             },\n+            ObligationCauseCode::IfExpression { then, outer } => {\n+                err.span_label(then, \"expected because of this\");\n+                outer.map(|sp| err.span_label(sp, \"if and else have incompatible types\"));\n+            }\n             _ => (),\n         }\n     }\n@@ -1460,7 +1464,7 @@ impl<'tcx> ObligationCause<'tcx> {\n                 }\n                 _ => \"match arms have incompatible types\",\n             }),\n-            IfExpression => Error0308(\"if and else have incompatible types\"),\n+            IfExpression { .. } => Error0308(\"if and else have incompatible types\"),\n             IfExpressionWithNoElse => Error0317(\"if may be missing an else clause\"),\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n             StartFunctionType => Error0308(\"start function has wrong type\"),\n@@ -1488,7 +1492,7 @@ impl<'tcx> ObligationCause<'tcx> {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\",\n                 _ => \"match arms have compatible types\",\n             },\n-            IfExpression => \"if and else have compatible types\",\n+            IfExpression { .. } => \"if and else have compatible types\",\n             IfExpressionWithNoElse => \"if missing an else returns ()\",\n             MainFunctionType => \"`main` function has the correct type\",\n             StartFunctionType => \"`start` function has the correct type\","}, {"sha": "367a7eacdfcaf50dd4e61a592f163f65a79e82ad", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -1445,7 +1445,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::ExprAssignable |\n             ObligationCauseCode::MatchExpressionArm { .. } |\n             ObligationCauseCode::MatchExpressionArmPattern { .. } |\n-            ObligationCauseCode::IfExpression |\n+            ObligationCauseCode::IfExpression { .. } |\n             ObligationCauseCode::IfExpressionWithNoElse |\n             ObligationCauseCode::MainFunctionType |\n             ObligationCauseCode::StartFunctionType |"}, {"sha": "3f3f489013cffcbc6c3347609a14388f140cab12", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -229,7 +229,10 @@ pub enum ObligationCauseCode<'tcx> {\n     MatchExpressionArmPattern { span: Span, ty: Ty<'tcx> },\n \n     /// Computing common supertype in an if expression\n-    IfExpression,\n+    IfExpression {\n+        then: Span,\n+        outer: Option<Span>,\n+    },\n \n     /// Computing common supertype of an if expression with no else counter-part\n     IfExpressionWithNoElse,"}, {"sha": "a1dd99457d1e66d2c5f0f67065c3ca829dd6fd32", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::MatchExpressionArmPattern { span, ty } => {\n                 tcx.lift(&ty).map(|ty| super::MatchExpressionArmPattern { span, ty })\n             }\n-            super::IfExpression => Some(super::IfExpression),\n+            super::IfExpression { then, outer } => Some(super::IfExpression { then, outer }),\n             super::IfExpressionWithNoElse => Some(super::IfExpressionWithNoElse),\n             super::MainFunctionType => Some(super::MainFunctionType),\n             super::StartFunctionType => Some(super::StartFunctionType),"}, {"sha": "9939c2a12b860e2b086446ecaccf5eb492368125", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -3366,7 +3366,93 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let coerce_to_ty = expected.coercion_target_type(self, sp);\n         let mut coerce: DynamicCoerceMany = CoerceMany::new(coerce_to_ty);\n \n-        let if_cause = self.cause(sp, ObligationCauseCode::IfExpression);\n+        let mut outer_sp = if self.tcx.sess.source_map().is_multiline(sp) {\n+            // The `if`/`else` isn't in one line in the output, include some context to make it\n+            // clear it is an if/else expression:\n+            // ```\n+            // LL |      let x = if true {\n+            //    | _____________-\n+            // LL ||         10i32\n+            //    ||         ----- expected because of this\n+            // LL ||     } else {\n+            // LL ||         10u32\n+            //    ||         ^^^^^ expected i32, found u32\n+            // LL ||     };\n+            //    ||_____- if and else have incompatible types\n+            // ```\n+            Some(sp)\n+        } else {\n+            // The entire expression is in one line, only point at the arms\n+            // ```\n+            // LL |     let x = if true { 10i32 } else { 10u32 };\n+            //    |                       -----          ^^^^^ expected i32, found u32\n+            //    |                       |\n+            //    |                       expected because of this\n+            // ```\n+            None\n+        };\n+        let error_sp = opt_else_expr.map(|expr| {\n+            if let ExprKind::Block(block, _) = &expr.node {\n+                if let Some(expr) = &block.expr {\n+                    expr.span\n+                } else if let Some(stmt) = block.stmts.last() {\n+                    // possibly incorrect trailing `;` in the else arm\n+                    stmt.span\n+                } else {  // empty block, point at its entirety\n+                    // Avoid overlapping spans that aren't as readable:\n+                    // ```\n+                    // 2 |        let x = if true {\n+                    //   |   _____________-\n+                    // 3 |  |         3\n+                    //   |  |         - expected because of this\n+                    // 4 |  |     } else {\n+                    //   |  |____________^\n+                    // 5 | ||\n+                    // 6 | ||     };\n+                    //   | ||     ^\n+                    //   | ||_____|\n+                    //   | |______if and else have incompatible types\n+                    //   |        expected integer, found ()\n+                    // ```\n+                    // by not pointing at the entire expression:\n+                    // ```\n+                    // 2 |       let x = if true {\n+                    //   |               ------- if and else have incompatible types\n+                    // 3 |           3\n+                    //   |           - expected because of this\n+                    // 4 |       } else {\n+                    //   |  ____________^\n+                    // 5 | |\n+                    // 6 | |     };\n+                    //   | |_____^ expected integer, found ()\n+                    // ```\n+                    if outer_sp.is_some() {\n+                        outer_sp = Some(self.tcx.sess.source_map().def_span(sp));\n+                    }\n+                    expr.span\n+                }\n+            } else { // shouldn't happen unless the parser has done something weird\n+                expr.span\n+            }\n+        }).unwrap_or(sp);  // shouldn't be needed\n+        let then_sp = if let ExprKind::Block(block, _) = &then_expr.node {\n+            if let Some(expr) = &block.expr {\n+                expr.span\n+            } else if let Some(stmt) = block.stmts.last() {\n+                // possibly incorrect trailing `;` in the else arm\n+                stmt.span\n+            } else {  // empty block, point at its entirety\n+                outer_sp = None;  // same as in `error_sp`, cleanup output\n+                then_expr.span\n+            }\n+        } else {  // shouldn't happen unless the parser has done something weird\n+            then_expr.span\n+        };\n+\n+        let if_cause = self.cause(error_sp, ObligationCauseCode::IfExpression {\n+            then: then_sp,\n+            outer: outer_sp,\n+        });\n         coerce.coerce(self, &if_cause, then_expr, then_ty);\n \n         if let Some(else_expr) = opt_else_expr {"}, {"sha": "37955a29d2421d481e270bed7b7d94ce40b92f5d", "filename": "src/test/ui/if-else-type-mismatch.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -0,0 +1,34 @@\n+fn main() {\n+    let _ = if true {\n+        42i32\n+    } else {\n+        42u32\n+    };\n+    //~^^ ERROR if and else have incompatible types\n+    let _ = if true { 42i32 } else { 42u32 };\n+    //~^ ERROR if and else have incompatible types\n+    let _ = if true {\n+        42i32;\n+    } else {\n+        42u32\n+    };\n+    //~^^ ERROR if and else have incompatible types\n+    let _ = if true {\n+        42i32\n+    } else {\n+        42u32;\n+    };\n+    //~^^ ERROR if and else have incompatible types\n+    let _ = if true {\n+\n+    } else {\n+        42u32\n+    };\n+    //~^^ ERROR if and else have incompatible types\n+    let _ = if true {\n+        42i32\n+    } else {\n+\n+    };\n+    //~^^^ ERROR if and else have incompatible types\n+}"}, {"sha": "d20edc57cbda16bf1995add3b34c23e9ac631e76", "filename": "src/test/ui/if-else-type-mismatch.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -0,0 +1,92 @@\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/if-else-type-mismatch.rs:5:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |         42i32\n+   | |         ----- expected because of this\n+LL | |     } else {\n+LL | |         42u32\n+   | |         ^^^^^ expected i32, found u32\n+LL | |     };\n+   | |_____- if and else have incompatible types\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/if-else-type-mismatch.rs:8:38\n+   |\n+LL |     let _ = if true { 42i32 } else { 42u32 };\n+   |                       -----          ^^^^^ expected i32, found u32\n+   |                       |\n+   |                       expected because of this\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/if-else-type-mismatch.rs:13:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |         42i32;\n+   | |         ------ expected because of this\n+LL | |     } else {\n+LL | |         42u32\n+   | |         ^^^^^ expected (), found u32\n+LL | |     };\n+   | |_____- if and else have incompatible types\n+   |\n+   = note: expected type `()`\n+              found type `u32`\n+\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/if-else-type-mismatch.rs:19:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |         42i32\n+   | |         ----- expected because of this\n+LL | |     } else {\n+LL | |         42u32;\n+   | |         ^^^^^^ expected i32, found ()\n+LL | |     };\n+   | |_____- if and else have incompatible types\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/if-else-type-mismatch.rs:25:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________________-\n+LL | |\n+LL | |     } else {\n+   | |_____- expected because of this\n+LL |           42u32\n+   |           ^^^^^ expected (), found u32\n+   |\n+   = note: expected type `()`\n+              found type `u32`\n+\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/if-else-type-mismatch.rs:30:12\n+   |\n+LL |       let _ = if true {\n+   |               ------- if and else have incompatible types\n+LL |           42i32\n+   |           ----- expected because of this\n+LL |       } else {\n+   |  ____________^\n+LL | |\n+LL | |     };\n+   | |_____^ expected i32, found ()\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "74b925f72fff02248f7542a72a2beabce559e4cb", "filename": "src/test/ui/if/if-branch-types.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: if and else have incompatible types\n-  --> $DIR/if-branch-types.rs:2:13\n+  --> $DIR/if-branch-types.rs:2:38\n    |\n LL |     let x = if true { 10i32 } else { 10u32 };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found u32\n+   |                       -----          ^^^^^ expected i32, found u32\n+   |                       |\n+   |                       expected because of this\n    |\n    = note: expected type `i32`\n               found type `u32`"}, {"sha": "60e70ddcd97019d20a1aa0c2cab400f6da47db52", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -1,13 +1,15 @@\n error[E0308]: if and else have incompatible types\n-  --> $DIR/region-invariant-static-error-reporting.rs:14:15\n+  --> $DIR/region-invariant-static-error-reporting.rs:17:9\n    |\n LL |       let bad = if x.is_some() {\n-   |  _______________^\n+   |  _______________-\n LL | |         x.unwrap()\n+   | |         ---------- expected because of this\n LL | |     } else {\n LL | |         mk_static()\n+   | |         ^^^^^^^^^^^ lifetime mismatch\n LL | |     };\n-   | |_____^ lifetime mismatch\n+   | |_____- if and else have incompatible types\n    |\n    = note: expected type `Invariant<'a>`\n               found type `Invariant<'static>`"}, {"sha": "87809d212d79dd4e6b31b19c053b30ed43c80541", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fc1685c47e316d1377e4d54393db6c18ff8a744/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=7fc1685c47e316d1377e4d54393db6c18ff8a744", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: if and else have incompatible types\n-  --> $DIR/str-array-assignment.rs:3:11\n+  --> $DIR/str-array-assignment.rs:3:37\n    |\n LL |   let t = if true { s[..2] } else { s };\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found &str\n+   |                     ------          ^ expected str, found &str\n+   |                     |\n+   |                     expected because of this\n    |\n    = note: expected type `str`\n               found type `&str`"}]}