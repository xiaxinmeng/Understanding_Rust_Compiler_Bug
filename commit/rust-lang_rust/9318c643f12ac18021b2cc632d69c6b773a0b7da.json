{"sha": "9318c643f12ac18021b2cc632d69c6b773a0b7da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMThjNjQzZjEyYWMxODAyMWIyY2M2MzJkNjljNmI3NzNhMGI3ZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-17T13:43:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-17T14:55:16Z"}, "message": "internal: make it easier to isolate IO", "tree": {"sha": "f240bea9e75f915c0b062ac5567026bf0f44b7b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f240bea9e75f915c0b062ac5567026bf0f44b7b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9318c643f12ac18021b2cc632d69c6b773a0b7da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9318c643f12ac18021b2cc632d69c6b773a0b7da", "html_url": "https://github.com/rust-lang/rust/commit/9318c643f12ac18021b2cc632d69c6b773a0b7da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9318c643f12ac18021b2cc632d69c6b773a0b7da/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "html_url": "https://github.com/rust-lang/rust/commit/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507"}], "stats": {"total": 93, "additions": 58, "deletions": 35}, "files": [{"sha": "86c9404c84c47cec22195fedf8d1cd6b18a28600", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -3,6 +3,7 @@\n use std::{\n     borrow::Borrow,\n     convert::{TryFrom, TryInto},\n+    ffi::OsStr,\n     ops,\n     path::{Component, Path, PathBuf},\n };\n@@ -97,13 +98,6 @@ impl AbsPathBuf {\n #[repr(transparent)]\n pub struct AbsPath(Path);\n \n-impl ops::Deref for AbsPath {\n-    type Target = Path;\n-    fn deref(&self) -> &Path {\n-        &self.0\n-    }\n-}\n-\n impl AsRef<Path> for AbsPath {\n     fn as_ref(&self) -> &Path {\n         &self.0\n@@ -168,6 +162,40 @@ impl AbsPath {\n     pub fn strip_prefix(&self, base: &AbsPath) -> Option<&RelPath> {\n         self.0.strip_prefix(base).ok().map(RelPath::new_unchecked)\n     }\n+    pub fn starts_with(&self, base: &AbsPath) -> bool {\n+        self.0.starts_with(&base.0)\n+    }\n+\n+    // region:delegate-methods\n+\n+    // Note that we deliberately don't implement `Deref<Target = Path>` here.\n+    //\n+    // The problem with `Path` is that it directly exposes convenience IO-ing\n+    // methods. For example, `Path::exists` delegates to `fs::metadata`.\n+    //\n+    // For `AbsPath`, we want to make sure that this is a POD type, and that all\n+    // IO goes via `fs`. That way, it becomes easier to mock IO when we need it.\n+\n+    pub fn file_name(&self) -> Option<&OsStr> {\n+        self.0.file_name()\n+    }\n+    pub fn extension(&self) -> Option<&OsStr> {\n+        self.0.extension()\n+    }\n+    pub fn file_stem(&self) -> Option<&OsStr> {\n+        self.0.file_stem()\n+    }\n+    pub fn as_os_str(&self) -> &OsStr {\n+        self.0.as_os_str()\n+    }\n+    pub fn display(&self) -> std::path::Display<'_> {\n+        self.0.display()\n+    }\n+    #[deprecated(note = \"use std::fs::metadata().is_ok() instead\")]\n+    pub fn exists(&self) -> bool {\n+        self.0.exists()\n+    }\n+    // endregion:delegate-methods\n }\n \n /// Wrapper around a relative [`PathBuf`].\n@@ -224,13 +252,6 @@ impl RelPathBuf {\n #[repr(transparent)]\n pub struct RelPath(Path);\n \n-impl ops::Deref for RelPath {\n-    type Target = Path;\n-    fn deref(&self) -> &Path {\n-        &self.0\n-    }\n-}\n-\n impl AsRef<Path> for RelPath {\n     fn as_ref(&self) -> &Path {\n         &self.0"}, {"sha": "0903fbfedafa96f725bf64c3b6a7fc9e3726160a", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -86,6 +86,7 @@ impl ProcMacroClient {\n         Ok(ProcMacroClient { process: Arc::new(Mutex::new(process)) })\n     }\n \n+    // TODO: use paths::AbsPath here\n     pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n         let _p = profile::span(\"ProcMacroClient::by_dylib_path\");\n         match version::read_dylib_info(dylib_path) {"}, {"sha": "92ead0c43567ba3d88fa8f9930f4ba93f9585b45", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -258,7 +258,7 @@ impl WorkspaceBuildData {\n             inject_cargo_env(package, package_build_data);\n             if let Some(out_dir) = &package_build_data.out_dir {\n                 // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n-                if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n+                if let Some(out_dir) = out_dir.as_os_str().to_str().map(|s| s.to_owned()) {\n                     package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n                 }\n             }"}, {"sha": "5f65b7bbe6ebb9eb7620f504c1b40412c6b026c6", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -273,11 +273,11 @@ impl CargoWorkspace {\n                 .parent()\n                 .map(|p| p.to_path_buf())\n                 .or(cwd)\n-                .map(|dir| dir.to_string_lossy().to_string())\n-                .unwrap_or_else(|| \"<failed to get path>\".into());\n+                .map(|dir| format!(\" in `{}`\", dir.display()))\n+                .unwrap_or_default();\n \n             format!(\n-                \"Failed to run `cargo metadata --manifest-path {}` in `{}`\",\n+                \"Failed to run `cargo metadata --manifest-path {}`{}\",\n                 cargo_toml.display(),\n                 workdir\n             )"}, {"sha": "22364cfd04ccacc5f1dcfe078f594eed341074b0", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -24,7 +24,7 @@ mod rustc_cfg;\n mod build_data;\n \n use std::{\n-    fs::{read_dir, ReadDir},\n+    fs::{self, read_dir, ReadDir},\n     io,\n     process::Command,\n };\n@@ -54,10 +54,10 @@ pub enum ProjectManifest {\n \n impl ProjectManifest {\n     pub fn from_manifest_file(path: AbsPathBuf) -> Result<ProjectManifest> {\n-        if path.ends_with(\"rust-project.json\") {\n+        if path.file_name().unwrap_or_default() == \"rust-project.json\" {\n             return Ok(ProjectManifest::ProjectJson(path));\n         }\n-        if path.ends_with(\"Cargo.toml\") {\n+        if path.file_name().unwrap_or_default() == \"Cargo.toml\" {\n             return Ok(ProjectManifest::CargoToml(path));\n         }\n         bail!(\"project root must point to Cargo.toml or rust-project.json: {}\", path.display())\n@@ -91,15 +91,15 @@ impl ProjectManifest {\n         }\n \n         fn find_in_parent_dirs(path: &AbsPath, target_file_name: &str) -> Option<AbsPathBuf> {\n-            if path.ends_with(target_file_name) {\n+            if path.file_name().unwrap_or_default() == target_file_name {\n                 return Some(path.to_path_buf());\n             }\n \n             let mut curr = Some(path);\n \n             while let Some(path) = curr {\n                 let candidate = path.join(target_file_name);\n-                if candidate.exists() {\n+                if fs::metadata(&candidate).is_ok() {\n                     return Some(candidate);\n                 }\n                 curr = path.parent();"}, {"sha": "b89c5a3598a7e09c000306f77606def5d238729a", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -4,7 +4,7 @@\n //! but we can't process `.rlib` and need source code instead. The source code\n //! is typically installed with `rustup component add rust-src` command.\n \n-use std::{convert::TryFrom, env, ops, path::PathBuf, process::Command};\n+use std::{convert::TryFrom, env, fs, ops, path::PathBuf, process::Command};\n \n use anyhow::{format_err, Result};\n use la_arena::{Arena, Idx};\n@@ -73,7 +73,7 @@ impl Sysroot {\n             let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n                 .iter()\n                 .map(|it| sysroot_src_dir.join(it))\n-                .find(|it| it.exists());\n+                .find(|it| fs::metadata(it).is_ok());\n \n             if let Some(root) = root {\n                 sysroot.crates.alloc(SysrootCrateData {\n@@ -142,7 +142,7 @@ fn discover_sysroot_src_dir(\n         let path = AbsPathBuf::try_from(path.as_str())\n             .map_err(|path| format_err!(\"RUST_SRC_PATH must be absolute: {}\", path.display()))?;\n         let core = path.join(\"core\");\n-        if core.exists() {\n+        if fs::metadata(&core).is_ok() {\n             log::debug!(\"Discovered sysroot by RUST_SRC_PATH: {}\", path.display());\n             return Ok(path);\n         }\n@@ -171,7 +171,7 @@ try installing the Rust source the same way you installed rustc\",\n fn get_rustc_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     let rustc_src = sysroot_path.join(\"lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\");\n     log::debug!(\"Checking for rustc source code: {}\", rustc_src.display());\n-    if rustc_src.exists() {\n+    if fs::metadata(&rustc_src).is_ok() {\n         Some(rustc_src)\n     } else {\n         None\n@@ -182,7 +182,7 @@ fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     // Try the new path first since the old one still exists.\n     let rust_src = sysroot_path.join(\"lib/rustlib/src/rust\");\n     log::debug!(\"Checking sysroot (looking for `library` and `src` dirs): {}\", rust_src.display());\n-    [\"library\", \"src\"].iter().map(|it| rust_src.join(it)).find(|it| it.exists())\n+    [\"library\", \"src\"].iter().map(|it| rust_src.join(it)).find(|it| fs::metadata(it).is_ok())\n }\n \n impl SysrootCrateData {"}, {"sha": "f96d9bb08a9340b9ee986cf36a39b0712a750d15", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -2,7 +2,7 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n+use std::{collections::VecDeque, fmt, fs, process::Command};\n \n use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n@@ -311,8 +311,8 @@ impl ProjectWorkspace {\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n-        let proc_macro_loader = |path: &Path| match proc_macro_client {\n-            Some(client) => client.by_dylib_path(path),\n+        let proc_macro_loader = |path: &AbsPath| match proc_macro_client {\n+            Some(client) => client.by_dylib_path(path.as_ref()), // TODO\n             None => Vec::new(),\n         };\n \n@@ -364,7 +364,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -431,7 +431,7 @@ fn project_json_to_crate_graph(\n fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     build_data_map: Option<&WorkspaceBuildData>,\n@@ -616,7 +616,7 @@ fn handle_rustc_crates(\n     crate_graph: &mut CrateGraph,\n     rustc_build_data_map: Option<&WorkspaceBuildData>,\n     cfg_options: &CfgOptions,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &[(CrateName, CrateId)],\n     cargo: &CargoWorkspace,\n@@ -708,7 +708,7 @@ fn add_target_crate_root(\n     pkg: &cargo_workspace::PackageData,\n     build_data: Option<&PackageBuildData>,\n     cfg_options: &CfgOptions,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     file_id: FileId,\n     cargo_name: &str,\n ) -> CrateId {"}, {"sha": "0ad56e00d7cba1f9691a2be7a260b6ffb1fe09d8", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318c643f12ac18021b2cc632d69c6b773a0b7da/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=9318c643f12ac18021b2cc632d69c6b773a0b7da", "patch": "@@ -121,6 +121,7 @@ impl VfsPath {\n                 #[cfg(windows)]\n                 {\n                     use windows_paths::Encode;\n+                    let path: &std::path::Path = path.as_ref();\n                     let components = path.components();\n                     let mut add_sep = false;\n                     for component in components {"}]}