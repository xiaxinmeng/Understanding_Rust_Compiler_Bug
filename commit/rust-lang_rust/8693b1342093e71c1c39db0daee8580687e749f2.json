{"sha": "8693b1342093e71c1c39db0daee8580687e749f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OTNiMTM0MjA5M2U3MWMxYzM5ZGIwZGFlZTg1ODA2ODdlNzQ5ZjI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-20T11:15:58Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-20T11:15:58Z"}, "message": "Merge #298\n\n298: docs for input queries r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "de330adb9f09ab79cde7d90be8645423eebb84bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de330adb9f09ab79cde7d90be8645423eebb84bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8693b1342093e71c1c39db0daee8580687e749f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8693b1342093e71c1c39db0daee8580687e749f2", "html_url": "https://github.com/rust-lang/rust/commit/8693b1342093e71c1c39db0daee8580687e749f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8693b1342093e71c1c39db0daee8580687e749f2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "d8c6b8d999079fdd601b07b91fc46f40f17ee4f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c6b8d999079fdd601b07b91fc46f40f17ee4f1", "html_url": "https://github.com/rust-lang/rust/commit/d8c6b8d999079fdd601b07b91fc46f40f17ee4f1"}, {"sha": "bb2bafb606cb38f0a9ec8bb44693c149ba4288cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2bafb606cb38f0a9ec8bb44693c149ba4288cd", "html_url": "https://github.com/rust-lang/rust/commit/bb2bafb606cb38f0a9ec8bb44693c149ba4288cd"}], "stats": {"total": 69, "additions": 51, "deletions": 18}, "files": [{"sha": "823db0034bcd0d2f57bc2eafca6a54e5b6178632", "filename": "ARCHITECTURE.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8693b1342093e71c1c39db0daee8580687e749f2/ARCHITECTURE.md", "raw_url": "https://github.com/rust-lang/rust/raw/8693b1342093e71c1c39db0daee8580687e749f2/ARCHITECTURE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ARCHITECTURE.md?ref=8693b1342093e71c1c39db0daee8580687e749f2", "patch": "@@ -91,7 +91,9 @@ We use [salsa][https://github.com/salsa-rs/salsa] crate for incremental and\n on-demand computation. Roughly, you can think of salsa as a key-value store, but\n it also can compute derived values using specified functions. The `ra_db` crate\n provides a basic infrastructure for interracting with salsa. Crucially, it\n-defines most of the \"input\" queries: facts supplied by the client of the analyzer.\n+defines most of the \"input\" queries: facts supplied by the client of the\n+analyzer. Reading the docs of the `ra_db::input` module should be useful:\n+everithing else is strictly derived from thouse inputs.\n \n ### `crates/ra_hir`\n "}, {"sha": "5e5db84c33f445ead3dce6f637f9a0456aa6987b", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8693b1342093e71c1c39db0daee8580687e749f2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8693b1342093e71c1c39db0daee8580687e749f2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8693b1342093e71c1c39db0daee8580687e749f2", "patch": "@@ -546,7 +546,7 @@ name = \"parking_lot\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lock_api 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -567,10 +567,10 @@ name = \"parking_lot_core\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "b44d9297a90969db75fa1f013b7b8ef145514efe", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8693b1342093e71c1c39db0daee8580687e749f2/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8693b1342093e71c1c39db0daee8580687e749f2/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=8693b1342093e71c1c39db0daee8580687e749f2", "patch": "@@ -105,9 +105,6 @@ impl AnalysisHostImpl {\n             self.db\n                 .query_mut(ra_db::FileTextQuery)\n                 .set(remove_file.file_id, Default::default());\n-            self.db\n-                .query_mut(ra_db::FileRelativePathQuery)\n-                .set(remove_file.file_id, Default::default());\n             source_root.files.remove(&remove_file.path);\n         }\n         self.db"}, {"sha": "0957305211ea9641f2d4a5a6145ff41df74d65b5", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8693b1342093e71c1c39db0daee8580687e749f2/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8693b1342093e71c1c39db0daee8580687e749f2/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=8693b1342093e71c1c39db0daee8580687e749f2", "patch": "@@ -1,24 +1,55 @@\n+/// This modules specifies the input to rust-analyzer. In some sense, this is\n+/// **the** most important module, because all other fancy stuff is strickly\n+/// derived from this input.\n use std::sync::Arc;\n \n use rustc_hash::{FxHashMap};\n use relative_path::RelativePathBuf;\n use ra_syntax::SmolStr;\n use salsa;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct SourceRootId(pub u32);\n-\n+/// `FileId` is an integer which uniquely identifies a file. File paths are\n+/// messy and system-dependent, so most of the code should work directly with\n+/// `FileId`, without inspecting the path. The mapping between `FileId` and path\n+/// and `SourceRoot` is constant. File rename is represented as a pair of\n+/// deletion/creation.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct FileId(pub u32);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct CrateId(pub u32);\n+/// Files are grouped into source roots. A source root is a directory on the\n+/// file systems which is watched for changes. Typically it corresponds to a\n+/// Cargo package. Source roots *might* be nested: in this case, file belongs to\n+/// the nearest enclosing source root. Path to files are always relative to a\n+/// source root, and analyzer does not know the root path of the source root at\n+/// all. So, a file from one source root can't refere a file in another source\n+/// root by path.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct SourceRootId(pub u32);\n+\n+#[derive(Default, Clone, Debug, PartialEq, Eq)]\n+pub struct SourceRoot {\n+    pub files: FxHashMap<RelativePathBuf, FileId>,\n+}\n \n+/// `CrateGraph` is a bit of information which turns a set of text files into a\n+/// number of Rust crates. Each Crate is the `FileId` of it's root module, the\n+/// set of cfg flags (not yet implemented) and the set of dependencies. Note\n+/// that, due to cfg's, there might be several crates for a single `FileId`! As\n+/// in the rust-lang proper, a crate does not have a name. Instead, names are\n+/// specified on dependency edges. That is, a crate might be known under\n+/// different names in different dependant crates.\n+///\n+/// Note that `CrateGraph` is build-system agnostic: it's a concept of the Rust\n+/// langauge proper, not a concept of the build system. In practice, we get\n+/// `CrateGraph` by lowering `cargo metadata` output.\n #[derive(Debug, Clone, Default, PartialEq, Eq)]\n pub struct CrateGraph {\n     arena: FxHashMap<CrateId, CrateData>,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct CrateId(pub u32);\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n struct CrateData {\n     file_id: FileId,\n@@ -57,7 +88,7 @@ impl CrateGraph {\n         assert!(prev.is_none());\n         crate_id\n     }\n-    //FIXME: check that we don't have cycles here.\n+    // FIXME: check that we don't have cycles here.\n     // Just a simple depth first search from `to` should work,\n     // the graph is small.\n     pub fn add_dep(&mut self, from: CrateId, name: SmolStr, to: CrateId) {\n@@ -83,6 +114,7 @@ impl CrateGraph {\n \n salsa::query_group! {\n     pub trait FilesDatabase: salsa::Database {\n+        /// Text of the file.\n         fn file_text(file_id: FileId) -> Arc<String> {\n             type FileTextQuery;\n             storage input;\n@@ -92,30 +124,32 @@ salsa::query_group! {\n             type FileRelativePathQuery;\n             storage input;\n         }\n+        /// Source root of the file.\n         fn file_source_root(file_id: FileId) -> SourceRootId {\n             type FileSourceRootQuery;\n             storage input;\n         }\n+        /// Contents of the source root.\n         fn source_root(id: SourceRootId) -> Arc<SourceRoot> {\n             type SourceRootQuery;\n             storage input;\n         }\n+        /// The set of \"local\" (that is, from the current workspace) roots.\n+        /// Files in local roots are assumed to change frequently.\n         fn local_roots() -> Arc<Vec<SourceRootId>> {\n             type LocalRootsQuery;\n             storage input;\n         }\n+        /// The set of roots for crates.io libraries.\n+        /// Files in libraries are assumed to never change.\n         fn library_roots() -> Arc<Vec<SourceRootId>> {\n             type LibraryRootsQuery;\n             storage input;\n         }\n+        /// The crate graph.\n         fn crate_graph() -> Arc<CrateGraph> {\n             type CrateGraphQuery;\n             storage input;\n         }\n     }\n }\n-\n-#[derive(Default, Clone, Debug, PartialEq, Eq)]\n-pub struct SourceRoot {\n-    pub files: FxHashMap<RelativePathBuf, FileId>,\n-}"}]}