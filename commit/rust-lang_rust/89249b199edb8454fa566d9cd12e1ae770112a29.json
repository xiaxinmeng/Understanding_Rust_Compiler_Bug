{"sha": "89249b199edb8454fa566d9cd12e1ae770112a29", "node_id": "C_kwDOAAsO6NoAKDg5MjQ5YjE5OWVkYjg0NTRmYTU2NmQ5Y2QxMmUxYWU3NzAxMTJhMjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-13T19:35:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-13T19:35:54Z"}, "message": "Rollup merge of #97875 - JohnTitor:rm-infer-static-outlives-requirements, r=pnkfelix\n\nRemove the `infer_static_outlives_requirements` feature\n\nCloses #54185\nr? ``@pnkfelix``", "tree": {"sha": "751c353df33c73c1efa7ae47ee3af4c12515ab9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/751c353df33c73c1efa7ae47ee3af4c12515ab9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89249b199edb8454fa566d9cd12e1ae770112a29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJip5GaCRBK7hj4Ov3rIwAA5NsIAAICKsKz6WgvEKizdWVxGFf9\nn4uwUWcIGV5cF4b5tvoMEF7Eb6JBAfcHAhLGfKtcbykeKiTUhkf7MJZbCucAdYcE\nVbAL7kUQuOjpxMVPrCFXUUnaQCfWi+C2WEWMASIGE1Nk2YQiTN14xxsWOtPEzl/Z\nr8w7jDrhc1H7+Eqoab/qIjJ4DEMVTh47gkWcvjqtDTRvnJWC4dHEVqvhZX2AJXv0\nM3sRmuorADOS/NQgd4Kj6aRJcaOkiafpTYOL/EZgsv57kNxFAWrqi80XAjN6YKfN\n0uMj8xZ1VjgqGYxzgbir6RFvHo0c9gdWxI4YheTGYNz5D/VC9xCRrDAFSrliJ1I=\n=9kyT\n-----END PGP SIGNATURE-----\n", "payload": "tree 751c353df33c73c1efa7ae47ee3af4c12515ab9e\nparent e13eeedefc1429b15af6320aa69de2c64e9c3afc\nparent 40913c6061c2826f31d7724e77c6011dc92aeb19\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1655148954 +0200\ncommitter GitHub <noreply@github.com> 1655148954 +0200\n\nRollup merge of #97875 - JohnTitor:rm-infer-static-outlives-requirements, r=pnkfelix\n\nRemove the `infer_static_outlives_requirements` feature\n\nCloses #54185\nr? ``@pnkfelix``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89249b199edb8454fa566d9cd12e1ae770112a29", "html_url": "https://github.com/rust-lang/rust/commit/89249b199edb8454fa566d9cd12e1ae770112a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89249b199edb8454fa566d9cd12e1ae770112a29/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e13eeedefc1429b15af6320aa69de2c64e9c3afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e13eeedefc1429b15af6320aa69de2c64e9c3afc", "html_url": "https://github.com/rust-lang/rust/commit/e13eeedefc1429b15af6320aa69de2c64e9c3afc"}, {"sha": "40913c6061c2826f31d7724e77c6011dc92aeb19", "url": "https://api.github.com/repos/rust-lang/rust/commits/40913c6061c2826f31d7724e77c6011dc92aeb19", "html_url": "https://github.com/rust-lang/rust/commit/40913c6061c2826f31d7724e77c6011dc92aeb19"}], "stats": {"total": 136, "additions": 13, "deletions": 123}, "files": [{"sha": "56269a3c67414bcb72bf1da0f5ffe3ab2e4d59ea", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=89249b199edb8454fa566d9cd12e1ae770112a29", "patch": "@@ -409,8 +409,6 @@ declare_features! (\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n-    /// Allows inferring `'static` outlives requirements (RFC 2093).\n-    (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n     /// Allows associated types in inherent impls.\n     (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n     /// Allow anonymous constants from an inline `const` block"}, {"sha": "54626caaf53ea43e6ee7dde15639984d7cdb4ef2", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=89249b199edb8454fa566d9cd12e1ae770112a29", "patch": "@@ -109,6 +109,9 @@ declare_features! (\n     /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n     (removed, in_band_lifetimes, \"1.23.0\", Some(44524), None,\n      Some(\"removed due to unsolved ergonomic questions and added lifetime resolution complexity\")),\n+    /// Allows inferring `'static` outlives requirements (RFC 2093).\n+    (removed, infer_static_outlives_requirements, \"1.63.0\", Some(54185), None,\n+     Some(\"removed as it caused some confusion and discussion was inactive for years\")),\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (removed, lazy_normalization_consts, \"1.46.0\", Some(72219), None, Some(\"superseded by `generic_const_exprs`\")),\n     /// Allows using the `#[link_args]` attribute."}, {"sha": "29695caafb4c1b495e45990117c99b2b07897298", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=89249b199edb8454fa566d9cd12e1ae770112a29", "patch": "@@ -2113,7 +2113,6 @@ impl ExplicitOutlivesRequirements {\n         tcx: TyCtxt<'tcx>,\n         bounds: &hir::GenericBounds<'_>,\n         inferred_outlives: &[ty::Region<'tcx>],\n-        infer_static: bool,\n     ) -> Vec<(usize, Span)> {\n         use rustc_middle::middle::resolve_lifetime::Region;\n \n@@ -2123,9 +2122,6 @@ impl ExplicitOutlivesRequirements {\n             .filter_map(|(i, bound)| {\n                 if let hir::GenericBound::Outlives(lifetime) = bound {\n                     let is_inferred = match tcx.named_region(lifetime.hir_id) {\n-                        Some(Region::Static) if infer_static => {\n-                            inferred_outlives.iter().any(|r| matches!(**r, ty::ReStatic))\n-                        }\n                         Some(Region::EarlyBound(index, ..)) => inferred_outlives.iter().any(|r| {\n                             if let ty::ReEarlyBound(ebr) = **r { ebr.index == index } else { false }\n                         }),\n@@ -2201,7 +2197,6 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         use rustc_middle::middle::resolve_lifetime::Region;\n \n-        let infer_static = cx.tcx.features().infer_static_outlives_requirements;\n         let def_id = item.def_id;\n         if let hir::ItemKind::Struct(_, ref hir_generics)\n         | hir::ItemKind::Enum(_, ref hir_generics)\n@@ -2262,12 +2257,8 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     continue;\n                 }\n \n-                let bound_spans = self.collect_outlives_bound_spans(\n-                    cx.tcx,\n-                    bounds,\n-                    &relevant_lifetimes,\n-                    infer_static,\n-                );\n+                let bound_spans =\n+                    self.collect_outlives_bound_spans(cx.tcx, bounds, &relevant_lifetimes);\n                 bound_count += bound_spans.len();\n \n                 let drop_predicate = bound_spans.len() == bounds.len();"}, {"sha": "14e3048cadc62453499e56c798857e743786a98f", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89249b199edb8454fa566d9cd12e1ae770112a29/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=89249b199edb8454fa566d9cd12e1ae770112a29", "patch": "@@ -21,7 +21,7 @@ pub fn insert_outlives_predicate<'tcx>(\n ) {\n     // If the `'a` region is bound within the field type itself, we\n     // don't want to propagate this constraint to the header.\n-    if !is_free_region(tcx, outlived_region) {\n+    if !is_free_region(outlived_region) {\n         return;\n     }\n \n@@ -119,7 +119,7 @@ pub fn insert_outlives_predicate<'tcx>(\n         }\n \n         GenericArgKind::Lifetime(r) => {\n-            if !is_free_region(tcx, r) {\n+            if !is_free_region(r) {\n                 return;\n             }\n             required_predicates.entry(ty::OutlivesPredicate(kind, outlived_region)).or_insert(span);\n@@ -131,7 +131,7 @@ pub fn insert_outlives_predicate<'tcx>(\n     }\n }\n \n-fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n+fn is_free_region(region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n     match *region {\n         // These correspond to `T: 'a` relationships:\n@@ -144,13 +144,12 @@ fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n         ty::ReEarlyBound(_) => true,\n \n         // These correspond to `T: 'static` relationships which can be\n-        // rather surprising. We are therefore putting this behind a\n-        // feature flag:\n+        // rather surprising.\n         //\n         //     struct Foo<'a, T> {\n         //         field: &'static T, // this would generate a ReStatic\n         //     }\n-        ty::ReStatic => tcx.sess.features_untracked().infer_static_outlives_requirements,\n+        ty::ReStatic => false,\n \n         // Late-bound regions can appear in `fn` types:\n         //"}, {"sha": "5f3f1b4dd8a3189a451776ab4e024d86cd553e68", "filename": "src/doc/unstable-book/src/language-features/infer-static-outlives-requirements.md", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "raw_url": "https://github.com/rust-lang/rust/raw/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md?ref=e13eeedefc1429b15af6320aa69de2c64e9c3afc", "patch": "@@ -1,44 +0,0 @@\n-# `infer_static_outlives_requirements`\n-\n-The tracking issue for this feature is: [#54185]\n-\n-[#54185]: https://github.com/rust-lang/rust/issues/54185\n-\n-------------------------\n-The `infer_static_outlives_requirements` feature indicates that certain\n-`'static` outlives requirements can be inferred by the compiler rather than\n-stating them explicitly.\n-\n-Note: It is an accompanying feature to `infer_outlives_requirements`,\n-which must be enabled to infer outlives requirements.\n-\n-For example, currently generic struct definitions that contain\n-references, require where-clauses of the form T: 'static. By using\n-this feature the outlives predicates will be inferred, although\n-they may still be written explicitly.\n-\n-```rust,ignore (pseudo-Rust)\n-struct Foo<U> where U: 'static { // <-- currently required\n-    bar: Bar<U>\n-}\n-struct Bar<T: 'static> {\n-    x: T,\n-}\n-```\n-\n-\n-## Examples:\n-\n-```rust,ignore (pseudo-Rust)\n-#![feature(infer_outlives_requirements)]\n-#![feature(infer_static_outlives_requirements)]\n-\n-#[rustc_outlives]\n-// Implicitly infer U: 'static\n-struct Foo<U> {\n-    bar: Bar<U>\n-}\n-struct Bar<T: 'static> {\n-    x: T,\n-}\n-```"}, {"sha": "65792a74ea4d584e4301aec66f983b44a2b0614f", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.rs?ref=e13eeedefc1429b15af6320aa69de2c64e9c3afc", "patch": "@@ -1,12 +0,0 @@\n-// Needs an explicit where clause stating outlives condition. (RFC 2093)\n-\n-// Type T needs to outlive lifetime 'static.\n-struct Foo<U> {\n-    bar: Bar<U> //~ ERROR the parameter type `U` may not live long enough [E0310]\n-}\n-struct Bar<T: 'static> {\n-    x: T,\n-}\n-\n-\n-fn main() { }"}, {"sha": "7ffebab415334ea26629d5a57b452a7a4b02be29", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=e13eeedefc1429b15af6320aa69de2c64e9c3afc", "patch": "@@ -1,19 +0,0 @@\n-error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:10\n-   |\n-LL |     bar: Bar<U>\n-   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds...\n-   |\n-note: ...that is required by this bound\n-  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:7:15\n-   |\n-LL | struct Bar<T: 'static> {\n-   |               ^^^^^^^\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | struct Foo<U: 'static> {\n-   |             +++++++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0310`."}, {"sha": "d3940b13b11ae71bdd418db61fdf92cae93f986b", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89249b199edb8454fa566d9cd12e1ae770112a29/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89249b199edb8454fa566d9cd12e1ae770112a29/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs?ref=89249b199edb8454fa566d9cd12e1ae770112a29", "patch": "@@ -1,7 +1,5 @@\n /*\n- * We don't infer `T: 'static` outlives relationships by default.\n- * Instead an additional feature gate `infer_static_outlives_requirements`\n- * is required.\n+ * We don't infer `T: 'static` outlives relationships.\n  */\n \n struct Foo<U> {"}, {"sha": "0c388f5fe411b14d111d5d52634b51ef03826da9", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89249b199edb8454fa566d9cd12e1ae770112a29/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89249b199edb8454fa566d9cd12e1ae770112a29/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=89249b199edb8454fa566d9cd12e1ae770112a29", "patch": "@@ -1,11 +1,11 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/dont-infer-static.rs:8:10\n+  --> $DIR/dont-infer-static.rs:6:10\n    |\n LL |     bar: Bar<U>\n    |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n-  --> $DIR/dont-infer-static.rs:10:15\n+  --> $DIR/dont-infer-static.rs:8:15\n    |\n LL | struct Bar<T: 'static> {\n    |               ^^^^^^^"}, {"sha": "bd778e3b136234f3351467c67890ccc51e6e9654", "filename": "src/test/ui/rfc-2093-infer-outlives/infer-static.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs?ref=e13eeedefc1429b15af6320aa69de2c64e9c3afc", "patch": "@@ -1,12 +0,0 @@\n-#![feature(rustc_attrs)]\n-#![feature(infer_static_outlives_requirements)]\n-\n-#[rustc_outlives]\n-struct Foo<U> { //~ ERROR rustc_outlives\n-    bar: Bar<U>\n-}\n-struct Bar<T: 'static> {\n-    x: T,\n-}\n-\n-fn main() {}"}, {"sha": "6fbb7cf4cb8a6709ab9b417841572549709864c3", "filename": "src/test/ui/rfc-2093-infer-outlives/infer-static.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e13eeedefc1429b15af6320aa69de2c64e9c3afc/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr?ref=e13eeedefc1429b15af6320aa69de2c64e9c3afc", "patch": "@@ -1,12 +0,0 @@\n-error: rustc_outlives\n-  --> $DIR/infer-static.rs:5:1\n-   |\n-LL | / struct Foo<U> {\n-LL | |     bar: Bar<U>\n-LL | | }\n-   | |_^\n-   |\n-   = note: U: 'static\n-\n-error: aborting due to previous error\n-"}]}