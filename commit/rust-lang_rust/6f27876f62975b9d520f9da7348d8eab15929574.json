{"sha": "6f27876f62975b9d520f9da7348d8eab15929574", "node_id": "C_kwDOAAsO6NoAKDZmMjc4NzZmNjI5NzViOWQ1MjBmOWRhNzM0OGQ4ZWFiMTU5Mjk1NzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-10T23:41:00Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-10T23:41:06Z"}, "message": "Use OpaqueTypeKey in query response", "tree": {"sha": "46b2032ec596aa06e29e51ec3ba376754bf5dce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b2032ec596aa06e29e51ec3ba376754bf5dce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f27876f62975b9d520f9da7348d8eab15929574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f27876f62975b9d520f9da7348d8eab15929574", "html_url": "https://github.com/rust-lang/rust/commit/6f27876f62975b9d520f9da7348d8eab15929574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f27876f62975b9d520f9da7348d8eab15929574/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba14074bb4cc12bfe918eabd0d52a3999b2a461", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba14074bb4cc12bfe918eabd0d52a3999b2a461", "html_url": "https://github.com/rust-lang/rust/commit/cba14074bb4cc12bfe918eabd0d52a3999b2a461"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "de9afbbcaabbd3f433c6eb8dd47a6b8dd851af3d", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f27876f62975b9d520f9da7348d8eab15929574/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f27876f62975b9d520f9da7348d8eab15929574/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=6f27876f62975b9d520f9da7348d8eab15929574", "patch": "@@ -153,20 +153,22 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     /// Used by the new solver as that one takes the opaque types at the end of a probe\n     /// to deal with multiple candidates without having to recompute them.\n-    pub fn clone_opaque_types_for_query_response(&self) -> Vec<(Ty<'tcx>, Ty<'tcx>)> {\n+    pub fn clone_opaque_types_for_query_response(\n+        &self,\n+    ) -> Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)> {\n         self.inner\n             .borrow()\n             .opaque_type_storage\n             .opaque_types\n             .iter()\n-            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n+            .map(|(k, v)| (*k, v.hidden_type.ty))\n             .collect()\n     }\n \n-    fn take_opaque_types_for_query_response(&self) -> Vec<(Ty<'tcx>, Ty<'tcx>)> {\n+    fn take_opaque_types_for_query_response(&self) -> Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)> {\n         std::mem::take(&mut self.inner.borrow_mut().opaque_type_storage.opaque_types)\n             .into_iter()\n-            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n+            .map(|(k, v)| (k, v.hidden_type.ty))\n             .collect()\n     }\n \n@@ -507,8 +509,22 @@ impl<'tcx> InferCtxt<'tcx> {\n             let a = substitute_value(self.tcx, &result_subst, a);\n             let b = substitute_value(self.tcx, &result_subst, b);\n             debug!(?a, ?b, \"constrain opaque type\");\n-            obligations\n-                .extend(self.at(cause, param_env).eq(DefineOpaqueTypes::Yes, a, b)?.obligations);\n+            // We use equate here instead of, for example, just registering the\n+            // opaque type's hidden value directly, because we may be instantiating\n+            // a query response that was canonicalized in an InferCtxt that had\n+            // a different defining anchor. In that case, we may have inferred\n+            // `NonLocalOpaque := LocalOpaque` but can only instantiate it in\n+            // the other direction as `LocalOpaque := NonLocalOpaque`. Using eq\n+            // here allows us to try both directions (in `InferCtxt::handle_opaque_type`).\n+            obligations.extend(\n+                self.at(cause, param_env)\n+                    .eq(\n+                        DefineOpaqueTypes::Yes,\n+                        self.tcx.mk_opaque(a.def_id.to_def_id(), a.substs),\n+                        b,\n+                    )?\n+                    .obligations,\n+            );\n         }\n \n         Ok(InferOk { value: result_subst, obligations })"}, {"sha": "56171314944cc6ba243fc2798e3101947352c074", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f27876f62975b9d520f9da7348d8eab15929574/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f27876f62975b9d520f9da7348d8eab15929574/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=6f27876f62975b9d520f9da7348d8eab15929574", "patch": "@@ -280,7 +280,7 @@ pub struct QueryResponse<'tcx, R> {\n     /// should get its hidden type inferred. So we bubble the opaque type\n     /// and the type it was compared against upwards and let the query caller\n     /// handle it.\n-    pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n+    pub opaque_types: Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)>,\n     pub value: R,\n }\n "}, {"sha": "1511c906d1e86854e4bb8178731dbda5d6f4b202", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f27876f62975b9d520f9da7348d8eab15929574/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f27876f62975b9d520f9da7348d8eab15929574/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=6f27876f62975b9d520f9da7348d8eab15929574", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> std::ops::Deref for ExternalConstraints<'tcx> {\n pub struct ExternalConstraintsData<'tcx> {\n     // FIXME: implement this.\n     pub region_constraints: QueryRegionConstraints<'tcx>,\n-    pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n+    pub opaque_types: Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)>,\n }\n \n // FIXME: Having to clone `region_constraints` for folding feels bad and"}]}