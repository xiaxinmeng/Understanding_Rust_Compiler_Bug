{"sha": "758931948f3bd1a871133777279fbf5c8cebea8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ODkzMTk0OGYzYmQxYTg3MTEzMzc3NzI3OWZiZjVjOGNlYmVhOGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-02T04:30:21Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T08:55:45Z"}, "message": "Unsupport the await!(..) macro.", "tree": {"sha": "1c31e519c172ab51222ac07635cd7a30fb342121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c31e519c172ab51222ac07635cd7a30fb342121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/758931948f3bd1a871133777279fbf5c8cebea8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/758931948f3bd1a871133777279fbf5c8cebea8f", "html_url": "https://github.com/rust-lang/rust/commit/758931948f3bd1a871133777279fbf5c8cebea8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/758931948f3bd1a871133777279fbf5c8cebea8f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eeaaa722d6ac6d24de6e4d3faefb7c44e674b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eeaaa722d6ac6d24de6e4d3faefb7c44e674b37", "html_url": "https://github.com/rust-lang/rust/commit/4eeaaa722d6ac6d24de6e4d3faefb7c44e674b37"}], "stats": {"total": 114, "additions": 42, "deletions": 72}, "files": [{"sha": "026c3cc6f95b20bda97a1d72554f9765315ef88b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -4685,7 +4685,7 @@ impl<'a> LoweringContext<'a> {\n                     })\n                 })\n             }\n-            ExprKind::Await(_origin, ref expr) => self.lower_await(e.span, expr),\n+            ExprKind::Await(ref expr) => self.lower_await(e.span, expr),\n             ExprKind::Closure(\n                 capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n             ) => {"}, {"sha": "b633705a65f5d6518b18e956cbba36759c1608f8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -1178,7 +1178,7 @@ pub enum ExprKind {\n     /// preexisting defs.\n     Async(CaptureBy, NodeId, P<Block>),\n     /// An await expression (`my_future.await`).\n-    Await(AwaitOrigin, P<Expr>),\n+    Await(P<Expr>),\n \n     /// A try block (`try { ... }`).\n     TryBlock(P<Block>),"}, {"sha": "beab3ecce7482404fac8e5674a4ef48e5be8624d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -468,10 +468,6 @@ declare_features! (\n     // Allows async and await syntax.\n     (active, async_await, \"1.28.0\", Some(50547), None),\n \n-    // Allows await! macro-like syntax.\n-    // This will likely be removed prior to stabilization of async/await.\n-    (active, await_macro, \"1.28.0\", Some(50547), None),\n-\n     // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n@@ -627,6 +623,8 @@ declare_features! (\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n+    (removed, await_macro, \"1.37.0\", Some(50547), None,\n+     Some(\"subsumed by `.await` syntax\")),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n@@ -2109,19 +2107,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Async(..) => {\n                 gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n             }\n-            ast::ExprKind::Await(origin, _) => {\n-                match origin {\n-                    ast::AwaitOrigin::FieldLike =>\n-                        gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\"),\n-                    ast::AwaitOrigin::MacroLike =>\n-                        gate_feature_post!(\n-                            &self,\n-                            await_macro,\n-                            e.span,\n-                            \"`await!(<expr>)` macro syntax is unstable, and will soon be removed \\\n-                            in favor of `<expr>.await` syntax.\"\n-                        ),\n-                }\n+            ast::ExprKind::Await(_) => {\n+                gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\");\n             }\n             _ => {}\n         }"}, {"sha": "7b328e817bf8e36b624686af6ee7aa557f2d09cd", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -1139,7 +1139,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n             vis.visit_id(node_id);\n             vis.visit_block(body);\n         }\n-        ExprKind::Await(_origin, expr) => vis.visit_expr(expr),\n+        ExprKind::Await(expr) => vis.visit_expr(expr),\n         ExprKind::Assign(el, er) => {\n             vis.visit_expr(el);\n             vis.visit_expr(er);"}, {"sha": "730efb5ef013cdd73e56772d45d3d42c4be0017b", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -869,13 +869,23 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Consume alternative await syntaxes like `await <expr>`, `await? <expr>`, `await(<expr>)`\n-    /// and `await { <expr> }`.\n+    /// Consume alternative await syntaxes like `await!(<expr>)`, `await <expr>`,\n+    /// `await? <expr>`, `await(<expr>)`, and `await { <expr> }`.\n     crate fn parse_incorrect_await_syntax(\n         &mut self,\n         lo: Span,\n         await_sp: Span,\n     ) -> PResult<'a, (Span, ExprKind)> {\n+        if self.token == token::Not {\n+            // Handle `await!(<expr>)`.\n+            self.expect(&token::Not)?;\n+            self.expect(&token::OpenDelim(token::Paren))?;\n+            let expr = self.parse_expr()?;\n+            self.expect(&token::CloseDelim(token::Paren))?;\n+            let sp = self.error_on_incorrect_await(lo, self.prev_span, &expr, false);\n+            return Ok((sp, ExprKind::Await(expr)))\n+        }\n+\n         let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n         let expr = if self.token == token::OpenDelim(token::Brace) {\n             // Handle `await { <expr> }`.\n@@ -893,18 +903,23 @@ impl<'a> Parser<'a> {\n             err.span_label(await_sp, \"while parsing this incorrect await expression\");\n             err\n         })?;\n+        let sp = self.error_on_incorrect_await(lo, expr.span, &expr, is_question);\n+        Ok((sp, ExprKind::Await(expr)))\n+    }\n+\n+    fn error_on_incorrect_await(&self, lo: Span, hi: Span, expr: &Expr, is_question: bool) -> Span {\n         let expr_str = self.span_to_snippet(expr.span)\n             .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n         let suggestion = format!(\"{}.await{}\", expr_str, if is_question { \"?\" } else { \"\" });\n-        let sp = lo.to(expr.span);\n+        let sp = lo.to(hi);\n         let app = match expr.node {\n             ExprKind::Try(_) => Applicability::MaybeIncorrect, // `await <expr>?`\n             _ => Applicability::MachineApplicable,\n         };\n         self.struct_span_err(sp, \"incorrect use of `await`\")\n             .span_suggestion(sp, \"`await` is a postfix operation\", suggestion, app)\n             .emit();\n-        Ok((sp, ExprKind::Await(ast::AwaitOrigin::FieldLike, expr)))\n+        sp\n     }\n \n     /// If encountering `future.await()`, consume and emit error."}, {"sha": "7fda9158b4bdfed7e05c39621c8d43bf11ea5fb4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -2234,7 +2234,7 @@ impl<'a> Parser<'a> {\n                 } else if self.eat_keyword(kw::Let) {\n                     return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n-                    let (await_hi, e_kind) = self.parse_await_macro_or_alt(lo, self.prev_span)?;\n+                    let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;\n                 } else if self.token.is_path_start() {\n@@ -2282,31 +2282,6 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    /// Parse `await!(<expr>)` calls, or alternatively recover from incorrect but reasonable\n-    /// alternative syntaxes `await <expr>`, `await? <expr>`, `await(<expr>)` and\n-    /// `await { <expr> }`.\n-    fn parse_await_macro_or_alt(\n-        &mut self,\n-        lo: Span,\n-        await_sp: Span,\n-    ) -> PResult<'a, (Span, ExprKind)> {\n-        if self.token == token::Not {\n-            // Handle correct `await!(<expr>)`.\n-            // FIXME: make this an error when `await!` is no longer supported\n-            // https://github.com/rust-lang/rust/issues/60610\n-            self.expect(&token::Not)?;\n-            self.expect(&token::OpenDelim(token::Paren))?;\n-            let expr = self.parse_expr().map_err(|mut err| {\n-                err.span_label(await_sp, \"while parsing this await macro call\");\n-                err\n-            })?;\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-            Ok((self.prev_span, ExprKind::Await(ast::AwaitOrigin::MacroLike, expr)))\n-        } else { // Handle `await <expr>`.\n-            self.parse_incorrect_await_syntax(lo, await_sp)\n-        }\n-    }\n-\n     fn maybe_parse_struct_expr(\n         &mut self,\n         lo: Span,\n@@ -2509,18 +2484,19 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n-    // Assuming we have just parsed `.`, continue parsing into an expression.\n+    fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n+        let span = lo.to(self.prev_span);\n+        let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), ThinVec::new());\n+        self.recover_from_await_method_call();\n+        Ok(await_expr)\n+    }\n+\n+    /// Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         if self.token.span.rust_2018() && self.eat_keyword(kw::Await) {\n-            let span = lo.to(self.prev_span);\n-            let await_expr = self.mk_expr(\n-                span,\n-                ExprKind::Await(ast::AwaitOrigin::FieldLike, self_arg),\n-                ThinVec::new(),\n-            );\n-            self.recover_from_await_method_call();\n-            return Ok(await_expr);\n+            return self.mk_await_expr(self_arg, lo);\n         }\n+\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n "}, {"sha": "88ff6ee9071014deb7efefb3b46af59be7ba269c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -2120,17 +2120,9 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Await(origin, ref expr) => {\n-                match origin {\n-                    ast::AwaitOrigin::MacroLike => {\n-                        self.s.word(\"await!\");\n-                        self.print_expr_maybe_paren(expr, parser::PREC_FORCE_PAREN);\n-                    }\n-                    ast::AwaitOrigin::FieldLike => {\n-                        self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n-                        self.s.word(\".await\");\n-                    }\n-                }\n+            ast::ExprKind::Await(ref expr) => {\n+                self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n+                self.s.word(\".await\");\n             }\n             ast::ExprKind::Assign(ref lhs, ref rhs) => {\n                 let prec = AssocOp::Assign.precedence() as i8;"}, {"sha": "d71358f45c470ec3bb787bf288bfaca4cf7f801a", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -382,7 +382,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             // X { y: 1 } + X { y: 2 }\n             contains_exterior_struct_lit(&lhs) || contains_exterior_struct_lit(&rhs)\n         }\n-        ast::ExprKind::Await(_, ref x) |\n+        ast::ExprKind::Await(ref x) |\n         ast::ExprKind::Unary(_, ref x) |\n         ast::ExprKind::Cast(ref x, _) |\n         ast::ExprKind::Type(ref x, _) |"}, {"sha": "5fee8ed81ab3bde39034848b4d3729c52fed09a5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758931948f3bd1a871133777279fbf5c8cebea8f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=758931948f3bd1a871133777279fbf5c8cebea8f", "patch": "@@ -757,7 +757,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Async(_, _, ref body) => {\n             visitor.visit_block(body);\n         }\n-        ExprKind::Await(_, ref expr) => visitor.visit_expr(expr),\n+        ExprKind::Await(ref expr) => visitor.visit_expr(expr),\n         ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n             visitor.visit_expr(left_hand_expression);\n             visitor.visit_expr(right_hand_expression);"}]}