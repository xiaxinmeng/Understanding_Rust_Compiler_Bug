{"sha": "baf5f2da8b99c23bed127912f79532eb497b3e0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZjVmMmRhOGI5OWMyM2JlZDEyNzkxMmY3OTUzMmViNDk3YjNlMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T16:25:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T16:25:13Z"}, "message": "Auto merge of #6401 - ebroto:pin_to_a_nightly, r=ebroto\n\n\ud83d\udccc Pin Clippy to a nightly \ud83d\udccc\n\nchangelog: Pin Clippy to a specific nightly version (No more master/custom toolchain required to compile Clippy)\n\nAddresses partially #5561. As proposed there in [this comment](https://github.com/rust-lang/rust-clippy/issues/5561#issuecomment-623109095), this kicks off the process, to help us get acquainted with how the syncs should work, before working on improving the tooling.\n\nOpen questions:\n* When performing a rustup, we will need to exclude the commits that were merged that same day, or else wait until that nightly is released. I did not update the documentation about this part, mainly because I'm not sure about how to do that.\n* When should we perform the rustups now? My first idea is to do it at the same time we do the clippyups, to have a clear cadence and to avoid the two copies of the repo to diverge enough to make the process painful.\n* Who does the rustups now? If we follow my previous idea and do both rustup and clippyup at the same time, it would be more work for `@flip1995` who currently does the clippyups. I would prefer to establish some kind of rotation to spead the work. Other ideas?\n* I'm not sure if this affects the release process in any way.\n* ???\n\n`@rust-lang/clippy` thoughts?\n\nr? `@flip1995`", "tree": {"sha": "4e648801b227e79408ee482a199fc2d7b232d6c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e648801b227e79408ee482a199fc2d7b232d6c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baf5f2da8b99c23bed127912f79532eb497b3e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baf5f2da8b99c23bed127912f79532eb497b3e0b", "html_url": "https://github.com/rust-lang/rust/commit/baf5f2da8b99c23bed127912f79532eb497b3e0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baf5f2da8b99c23bed127912f79532eb497b3e0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27fd6ed58145a6cf9789ef82deb3be8182c92915", "url": "https://api.github.com/repos/rust-lang/rust/commits/27fd6ed58145a6cf9789ef82deb3be8182c92915", "html_url": "https://github.com/rust-lang/rust/commit/27fd6ed58145a6cf9789ef82deb3be8182c92915"}, {"sha": "836325e9d9530114b296f73306c03318d8a52c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/836325e9d9530114b296f73306c03318d8a52c0a", "html_url": "https://github.com/rust-lang/rust/commit/836325e9d9530114b296f73306c03318d8a52c0a"}], "stats": {"total": 258, "additions": 58, "deletions": 200}, "files": [{"sha": "530e60001f726b1a7525c42c667aa4b0684b4faf", "filename": ".github/workflows/clippy.yml", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -35,29 +35,11 @@ jobs:\n       with:\n         github_token: \"${{ secrets.github_token }}\"\n \n-    - name: rust-toolchain\n-      uses: actions-rs/toolchain@v1.0.6\n-      with:\n-        toolchain: nightly\n-        target: x86_64-unknown-linux-gnu\n-        profile: minimal\n-\n     - name: Checkout\n       uses: actions/checkout@v2.3.3\n \n-    - name: Run cargo update\n-      run: cargo update\n-\n-    - name: Cache cargo dir\n-      uses: actions/cache@v2\n-      with:\n-        path: ~/.cargo\n-        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-${{ hashFiles('Cargo.lock') }}\n-        restore-keys: |\n-          ${{ runner.os }}-x86_64-unknown-linux-gnu\n-\n-    - name: Master Toolchain Setup\n-      run: bash setup-toolchain.sh\n+    - name: Install toolchain\n+      run: rustup show active-toolchain\n \n     # Run\n     - name: Set LD_LIBRARY_PATH (Linux)\n@@ -66,13 +48,13 @@ jobs:\n         echo \"LD_LIBRARY_PATH=${SYSROOT}/lib${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}\" >> $GITHUB_ENV\n \n     - name: Build\n-      run: cargo build --features deny-warnings\n+      run: cargo build --features deny-warnings,internal-lints\n \n     - name: Test\n-      run: cargo test --features deny-warnings\n+      run: cargo test --features deny-warnings,internal-lints\n \n     - name: Test clippy_lints\n-      run: cargo test --features deny-warnings\n+      run: cargo test --features deny-warnings,internal-lints\n       working-directory: clippy_lints\n \n     - name: Test rustc_tools_util\n@@ -98,9 +80,3 @@ jobs:\n         cargo dev new_lint --name new_late_pass --pass late\n         cargo check\n         git reset --hard HEAD\n-\n-    # Cleanup\n-    - name: Run cargo-cache --autoclean\n-      run: |\n-        cargo +nightly install cargo-cache --no-default-features --features ci-autoclean cargo-cache\n-        cargo cache"}, {"sha": "5d846eb64c78e5c0f78d72e682a961605879f928", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 13, "deletions": 84, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -23,6 +23,7 @@ jobs:\n     - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n       with:\n         github_token: \"${{ secrets.github_token }}\"\n+\n     - name: Checkout\n       uses: actions/checkout@v2.3.3\n       with:\n@@ -84,31 +85,11 @@ jobs:\n         sudo apt-get install gcc-multilib libssl-dev:i386 libgit2-dev:i386\n       if: matrix.host == 'i686-unknown-linux-gnu'\n \n-    - name: rust-toolchain\n-      uses: actions-rs/toolchain@v1.0.6\n-      with:\n-        toolchain: nightly\n-        target: ${{ matrix.host }}\n-        profile: minimal\n-\n     - name: Checkout\n       uses: actions/checkout@v2.3.3\n \n-    - name: Run cargo update\n-      run: cargo update\n-\n-    - name: Cache cargo dir\n-      uses: actions/cache@v2\n-      with:\n-        path: ~/.cargo\n-        key: ${{ runner.os }}-${{ matrix.host }}-${{ hashFiles('Cargo.lock') }}\n-        restore-keys: |\n-          ${{ runner.os }}-${{ matrix.host }}\n-\n-    - name: Master Toolchain Setup\n-      run: bash setup-toolchain.sh\n-      env:\n-        HOST_TOOLCHAIN: ${{ matrix.host }}\n+    - name: Install toolchain\n+      run: rustup show active-toolchain\n \n     # Run\n     - name: Set LD_LIBRARY_PATH (Linux)\n@@ -128,13 +109,13 @@ jobs:\n         SYSROOT=$(rustc --print sysroot)\n         echo \"$SYSROOT/bin\" >> $GITHUB_PATH\n \n-    - name: Build with internal lints\n+    - name: Build\n       run: cargo build --features deny-warnings,internal-lints\n \n-    - name: Test with internal lints\n+    - name: Test\n       run: cargo test --features deny-warnings,internal-lints\n \n-    - name: Test clippy_lints with internal lints\n+    - name: Test clippy_lints\n       run: cargo test --features deny-warnings,internal-lints\n       working-directory: clippy_lints\n \n@@ -155,12 +136,6 @@ jobs:\n       env:\n         OS: ${{ runner.os }}\n \n-    # Cleanup\n-    - name: Run cargo-cache --autoclean\n-      run: |\n-        cargo +nightly install cargo-cache --no-default-features --features ci-autoclean cargo-cache\n-        cargo cache\n-\n   integration_build:\n     needs: changelog\n     runs-on: ubuntu-latest\n@@ -171,29 +146,11 @@ jobs:\n       with:\n         github_token: \"${{ secrets.github_token }}\"\n \n-    - name: rust-toolchain\n-      uses: actions-rs/toolchain@v1.0.6\n-      with:\n-        toolchain: nightly\n-        target: x86_64-unknown-linux-gnu\n-        profile: minimal\n-\n     - name: Checkout\n       uses: actions/checkout@v2.3.3\n \n-    - name: Run cargo update\n-      run: cargo update\n-\n-    - name: Cache cargo dir\n-      uses: actions/cache@v2\n-      with:\n-        path: ~/.cargo\n-        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-${{ hashFiles('Cargo.lock') }}\n-        restore-keys: |\n-          ${{ runner.os }}-x86_64-unknown-linux-gnu\n-\n-    - name: Master Toolchain Setup\n-      run: bash setup-toolchain.sh\n+    - name: Install toolchain\n+      run: rustup show active-toolchain\n \n     # Run\n     - name: Build Integration Test\n@@ -214,11 +171,6 @@ jobs:\n         name: target\n         path: target\n \n-    # Cleanup\n-    - name: Run cargo-cache --autoclean\n-      run: |\n-        cargo +nightly install cargo-cache --no-default-features --features ci-autoclean cargo-cache\n-        cargo cache\n   integration:\n     needs: integration_build\n     strategy:\n@@ -252,29 +204,11 @@ jobs:\n       with:\n         github_token: \"${{ secrets.github_token }}\"\n \n-    - name: rust-toolchain\n-      uses: actions-rs/toolchain@v1.0.6\n-      with:\n-        toolchain: nightly\n-        target: x86_64-unknown-linux-gnu\n-        profile: minimal\n-\n     - name: Checkout\n       uses: actions/checkout@v2.3.3\n \n-    - name: Run cargo update\n-      run: cargo update\n-\n-    - name: Cache cargo dir\n-      uses: actions/cache@v2\n-      with:\n-        path: ~/.cargo\n-        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-${{ hashFiles('Cargo.lock') }}\n-        restore-keys: |\n-          ${{ runner.os }}-x86_64-unknown-linux-gnu\n-\n-    - name: Master Toolchain Setup\n-      run: bash setup-toolchain.sh\n+    - name: Install toolchain\n+      run: rustup show active-toolchain\n \n     # Download\n     - name: Download target dir\n@@ -288,16 +222,11 @@ jobs:\n \n     # Run\n     - name: Test ${{ matrix.integration }}\n-      run: $CARGO_TARGET_DIR/debug/integration\n+      run: |\n+        RUSTUP_TOOLCHAIN=\"$(rustup show active-toolchain | grep -o -E \"nightly-[0-9]{4}-[0-9]{2}-[0-9]{2}\")\" \\\n+          $CARGO_TARGET_DIR/debug/integration\n       env:\n         INTEGRATION: ${{ matrix.integration }}\n-        RUSTUP_TOOLCHAIN: master\n-\n-    # Cleanup\n-    - name: Run cargo-cache --autoclean\n-      run: |\n-        cargo +nightly install cargo-cache --no-default-features --features ci-autoclean cargo-cache\n-        cargo cache\n \n   # These jobs doesn't actually test anything, but they're only used to tell\n   # bors the build completed, as there is no practical way to detect when a"}, {"sha": "95da775b7bc360ce4fcdb59e6fbb6a3935aa4766", "filename": ".github/workflows/clippy_dev.yml", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/.github%2Fworkflows%2Fclippy_dev.yml", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/.github%2Fworkflows%2Fclippy_dev.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_dev.yml?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -22,16 +22,20 @@ jobs:\n \n     steps:\n     # Setup\n+    - name: Checkout\n+      uses: actions/checkout@v2.3.3\n+\n+    - name: remove toolchain file\n+      run: rm rust-toolchain\n+\n     - name: rust-toolchain\n       uses: actions-rs/toolchain@v1.0.6\n       with:\n         toolchain: nightly\n         target: x86_64-unknown-linux-gnu\n         profile: minimal\n         components: rustfmt\n-\n-    - name: Checkout\n-      uses: actions/checkout@v2.3.3\n+        default: true\n \n     # Run\n     - name: Build"}, {"sha": "0a3c602b9e261797ae53fd754a89a0090eb27edd", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -70,8 +70,8 @@ But we can make it nest-less by using [if_chain] macro, [like this][nest-less].\n \n [`E-medium`] issues are generally pretty easy too, though it's recommended you work on an [`good first issue`]\n first. Sometimes they are only somewhat involved code wise, but not difficult per-se.\n-Note that [`E-medium`] issues may require some knowledge of Clippy internals or some \n-debugging to find the actual problem behind the issue. \n+Note that [`E-medium`] issues may require some knowledge of Clippy internals or some\n+debugging to find the actual problem behind the issue.\n \n [`T-middle`] issues can be more involved and require verifying types. The [`ty`] module contains a\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\n@@ -182,18 +182,26 @@ That's why the `else_if_without_else` example uses the `register_early_pass` fun\n [early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n [late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n \n-## Fixing build failures caused by Rust\n+## Syncing changes between Clippy and [`rust-lang/rust`]\n \n-Clippy currently gets built with `rustc` of the `rust-lang/rust` `master`\n-branch. Most of the times we have to adapt to the changes and only very rarely\n-there's an actual bug in Rust.\n+Clippy currently gets built with a pinned nightly version.\n \n-If you decide to make Clippy work again with a Rust commit that breaks it, you\n-have to sync the `rust-lang/rust-clippy` repository with the `subtree` copy of\n-Clippy in the `rust-lang/rust` repository.\n+In the `rust-lang/rust` repository, where rustc resides, there's a copy of Clippy\n+that compiler hackers modify from time to time to adapt to changes in the unstable\n+API of the compiler.\n \n-For general information about `subtree`s in the Rust repository see [Rust's\n-`CONTRIBUTING.md`][subtree].\n+We need to sync these changes back to this repository periodically, and the changes\n+made to this repository in the meantime also need to be synced to the `rust-lang/rust` repository.\n+\n+To avoid flooding the `rust-lang/rust` PR queue, this two-way sync process is done\n+in a bi-weekly basis if there's no urgent changes. This is done starting on the day of\n+the Rust stable release and then every other week. That way we guarantee that we keep\n+this repo up to date with the latest compiler API, and every feature in Clippy is available\n+for 2 weeks in nightly, before it can get to beta. For reference, the first sync\n+following this cadence was performed the 2020-08-27.\n+\n+This process is described in detail in the following sections. For general information\n+about `subtree`s in the Rust repository see [Rust's `CONTRIBUTING.md`][subtree].\n \n ### Patching git-subtree to work with big repos\n \n@@ -222,13 +230,14 @@ This shell has a hardcoded recursion limit set to 1000. In order to make this pr\n you need to force the script to run `bash` instead. You can do this by editing the first\n line of the `git-subtree` script and changing `sh` to `bash`.\n \n-### Performing the sync\n+### Performing the sync from [`rust-lang/rust`] to Clippy\n \n Here is a TL;DR version of the sync process (all of the following commands have\n to be run inside the `rust` directory):\n \n-1. Clone the [`rust-lang/rust`] repository\n-2. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n+1. Clone the [`rust-lang/rust`] repository or make sure it is up to date.\n+2. Checkout the commit from the latest available nightly. You can get it using `rustup check`.\n+3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n     ```bash\n     # Make sure to change `your-github-name` to your github name in the following command\n     git subtree push -P src/tools/clippy git@github.com:your-github-name/rust-clippy sync-from-rust\n@@ -246,17 +255,11 @@ to be run inside the `rust` directory):\n     git checkout sync-from-rust\n     git merge upstream/master\n     ```\n-3. Open a PR to `rust-lang/rust-clippy` and wait for it to get merged (to\n+4. Open a PR to `rust-lang/rust-clippy` and wait for it to get merged (to\n    accelerate the process ping the `@rust-lang/clippy` team in your PR and/or\n    ~~annoy~~ ask them in the [Zulip] stream.)\n-   \n-### Syncing back changes in Clippy to [`rust-lang/rust`]\n \n-To avoid flooding the [`rust-lang/rust`] PR queue, changes in Clippy's repo are synced back\n-in a bi-weekly basis if there's no urgent changes. This is done starting on the day of\n-the Rust stable release and then every other week. That way we guarantee that\n-every feature in Clippy is available for 2 weeks in nightly, before it can get to beta.\n-For reference, the first sync following this cadence was performed the 2020-08-27.\n+### Performing the sync from Clippy to [`rust-lang/rust`]\n \n All of the following commands have to be run inside the `rust` directory.\n "}, {"sha": "8b2a8a238900a7aab09f24bb6e7be16d807a8cc8", "filename": "doc/basics.md", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -1,16 +1,14 @@\n # Basics for hacking on Clippy\n \n This document explains the basics for hacking on Clippy. Besides others, this\n-includes how to set-up the development environment, how to build and how to test\n-Clippy. For a more in depth description on the codebase take a look at [Adding\n-Lints] or [Common Tools].\n+includes how to build and test Clippy. For a more in depth description on\n+the codebase take a look at [Adding Lints] or [Common Tools].\n \n [Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n [Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n \n - [Basics for hacking on Clippy](#basics-for-hacking-on-clippy)\n   - [Get the code](#get-the-code)\n-  - [Setup](#setup)\n   - [Building and Testing](#building-and-testing)\n   - [`cargo dev`](#cargo-dev)\n   - [PR](#pr)\n@@ -38,29 +36,9 @@ git rebase upstream/master\n git push\n ```\n \n-## Setup\n-\n-Next we need to setup the toolchain to compile Clippy. Since Clippy heavily\n-relies on compiler internals it is build with the latest rustc master. To get\n-this toolchain, you can just use the `setup-toolchain.sh` script or use\n-`rustup-toolchain-install-master`:\n-\n-```bash\n-bash setup-toolchain.sh\n-# OR\n-cargo install rustup-toolchain-install-master\n-# For better IDE integration also add `-c rustfmt -c rust-src` (optional)\n-rustup-toolchain-install-master -f -n master -c rustc-dev -c llvm-tools\n-rustup override set master\n-```\n-\n-_Note:_ Sometimes you may get compiler errors when building Clippy, even if you\n-didn't change anything. Normally those will be fixed by a maintainer in a few hours. \n-\n ## Building and Testing\n \n-Once the `master` toolchain is installed, you can build and test Clippy like\n-every other Rust project:\n+You can build and test Clippy like every other Rust project:\n \n ```bash\n cargo build  # builds Clippy"}, {"sha": "dfa7dea449a67b742c7e54c04e7289a14b9a18b6", "filename": "rust-toolchain", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -1 +1,3 @@\n-nightly\n+[toolchain]\n+channel = \"nightly-2020-12-09\"\n+components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\", \"rustfmt\"]"}, {"sha": "191ea4315a6b5a8a29e56f6440f88115c466e8b9", "filename": "setup-toolchain.sh", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/27fd6ed58145a6cf9789ef82deb3be8182c92915/setup-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/27fd6ed58145a6cf9789ef82deb3be8182c92915/setup-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/setup-toolchain.sh?ref=27fd6ed58145a6cf9789ef82deb3be8182c92915", "patch": "@@ -1,36 +0,0 @@\n-#!/usr/bin/env bash\n-# Set up the appropriate rustc toolchain\n-\n-set -e\n-\n-cd \"$(dirname \"$0\")\"\n-\n-RTIM_PATH=$(command -v rustup-toolchain-install-master) || INSTALLED=false\n-CARGO_HOME=${CARGO_HOME:-$HOME/.cargo}\n-\n-# Check if RTIM is not installed or installed in other locations not in ~/.cargo/bin\n-if [[ \"$INSTALLED\" == false || \"$RTIM_PATH\" == $CARGO_HOME/bin/rustup-toolchain-install-master ]]; then\n-    cargo +nightly install rustup-toolchain-install-master\n-else\n-    VERSION=$(rustup-toolchain-install-master -V | grep -o \"[0-9.]*\")\n-    REMOTE=$(cargo +nightly search rustup-toolchain-install-master | grep -o \"[0-9.]*\")\n-    echo \"info: skipping updating rustup-toolchain-install-master at $RTIM_PATH\"\n-    echo \"      current version : $VERSION\"\n-    echo \"      remote version  : $REMOTE\"\n-fi\n-\n-RUST_COMMIT=$(git ls-remote https://github.com/rust-lang/rust master | awk '{print $1}')\n-\n-if rustc +master -Vv 2>/dev/null | grep -q \"$RUST_COMMIT\"; then\n-    echo \"info: master toolchain is up-to-date\"\n-    exit 0\n-fi\n-\n-if [[ -n \"$HOST_TOOLCHAIN\" ]]; then\n-    TOOLCHAIN=('--host' \"$HOST_TOOLCHAIN\")\n-else\n-    TOOLCHAIN=()\n-fi\n-\n-rustup-toolchain-install-master -f -n master \"${TOOLCHAIN[@]}\" -c rustc-dev -c llvm-tools -- \"$RUST_COMMIT\"\n-rustup override set master"}, {"sha": "1718089e8bd27db39c2d7e4c64d15810547b988d", "filename": "tests/integration.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf5f2da8b99c23bed127912f79532eb497b3e0b/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=baf5f2da8b99c23bed127912f79532eb497b3e0b", "patch": "@@ -72,6 +72,8 @@ fn integration_test() {\n         panic!(\"incompatible crate versions\");\n     } else if stderr.contains(\"failed to run `rustc` to learn about target-specific information\") {\n         panic!(\"couldn't find librustc_driver, consider setting `LD_LIBRARY_PATH`\");\n+    } else if stderr.contains(\"toolchain\") && stderr.contains(\"is not installed\") {\n+        panic!(\"missing required toolchain\");\n     }\n \n     match output.status.code() {"}]}