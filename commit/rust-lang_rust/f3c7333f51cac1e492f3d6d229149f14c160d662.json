{"sha": "f3c7333f51cac1e492f3d6d229149f14c160d662", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYzczMzNmNTFjYWMxZTQ5MmYzZDZkMjI5MTQ5ZjE0YzE2MGQ2NjI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-26T22:54:36Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-07T21:54:04Z"}, "message": "Cleanup `depth`s.", "tree": {"sha": "f4b84271b70cd5c823d942266ead2fc8be29082b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4b84271b70cd5c823d942266ead2fc8be29082b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3c7333f51cac1e492f3d6d229149f14c160d662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c7333f51cac1e492f3d6d229149f14c160d662", "html_url": "https://github.com/rust-lang/rust/commit/f3c7333f51cac1e492f3d6d229149f14c160d662", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3c7333f51cac1e492f3d6d229149f14c160d662/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b43693229d72441872cad96842b5bcd6ba9f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b43693229d72441872cad96842b5bcd6ba9f1b", "html_url": "https://github.com/rust-lang/rust/commit/21b43693229d72441872cad96842b5bcd6ba9f1b"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "b5cd9f53d6915657dc374c5b4b8e97f7b3f76415", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3c7333f51cac1e492f3d6d229149f14c160d662/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3c7333f51cac1e492f3d6d229149f14c160d662/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f3c7333f51cac1e492f3d6d229149f14c160d662", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let (expansion, mut invocations) = self.collect_invocations(expansion);\n         invocations.reverse();\n \n-        let mut expansions = vec![vec![(0, expansion)]];\n+        let mut expansions = Vec::new();\n         while let Some(invoc) = invocations.pop() {\n             let ExpansionData { depth, mark, .. } = invoc.expansion_data;\n             self.cx.current_expansion = invoc.expansion_data.clone();\n@@ -236,13 +236,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 None => invoc.expansion_kind.dummy(invoc.span()),\n             };\n \n-            self.cx.current_expansion.depth = depth + 1;\n             let (expansion, new_invocations) = self.collect_invocations(expansion);\n \n-            if expansions.len() == depth {\n+            if expansions.len() < depth {\n                 expansions.push(Vec::new());\n             }\n-            expansions[depth].push((mark.as_u32(), expansion));\n+            expansions[depth - 1].push((mark.as_u32(), expansion));\n             if !self.cx.ecfg.single_step {\n                 invocations.extend(new_invocations.into_iter().rev());\n             }\n@@ -253,12 +252,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n         while let Some(expansions) = expansions.pop() {\n             for (mark, expansion) in expansions.into_iter().rev() {\n-                let expansion = expansion.fold_with(&mut placeholder_expander);\n                 placeholder_expander.add(ast::NodeId::from_u32(mark), expansion);\n             }\n         }\n \n-        placeholder_expander.remove(ast::NodeId::from_u32(0))\n+        expansion.fold_with(&mut placeholder_expander)\n     }\n \n     fn collect_invocations(&mut self, expansion: Expansion) -> (Expansion, Vec<Invocation>) {\n@@ -541,7 +539,11 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         self.invocations.push(Invocation {\n             kind: kind,\n             expansion_kind: expansion_kind,\n-            expansion_data: ExpansionData { mark: mark, ..self.cx.current_expansion.clone() },\n+            expansion_data: ExpansionData {\n+                mark: mark,\n+                depth: self.cx.current_expansion.depth + 1,\n+                ..self.cx.current_expansion.clone()\n+            },\n         });\n         placeholder(expansion_kind, ast::NodeId::from_u32(mark.as_u32()))\n     }"}, {"sha": "e323dd2f623276c16de3cfd6682194867f5c1ec1", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3c7333f51cac1e492f3d6d229149f14c160d662/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3c7333f51cac1e492f3d6d229149f14c160d662/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=f3c7333f51cac1e492f3d6d229149f14c160d662", "patch": "@@ -88,10 +88,11 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n     }\n \n     pub fn add(&mut self, id: ast::NodeId, expansion: Expansion) {\n+        let expansion = expansion.fold_with(self);\n         self.expansions.insert(id, expansion);\n     }\n \n-    pub fn remove(&mut self, id: ast::NodeId) -> Expansion {\n+    fn remove(&mut self, id: ast::NodeId) -> Expansion {\n         self.expansions.remove(&id).unwrap()\n     }\n }"}]}