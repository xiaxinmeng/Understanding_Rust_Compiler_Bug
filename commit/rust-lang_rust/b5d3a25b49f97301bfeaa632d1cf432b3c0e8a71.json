{"sha": "b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "node_id": "C_kwDOAAsO6NoAKGI1ZDNhMjViNDlmOTczMDFiZmVhYTYzMmQxY2Y0MzJiM2MwZThhNzE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T00:52:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T17:08:01Z"}, "message": "detect when unused bits of a SIMD bitmask are non-0", "tree": {"sha": "79bc9f9112c7328b0a42f1f1e2801068892b9034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79bc9f9112c7328b0a42f1f1e2801068892b9034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "html_url": "https://github.com/rust-lang/rust/commit/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfed3c4f0d285df97c0e9cbe342665b8b37b7a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfed3c4f0d285df97c0e9cbe342665b8b37b7a96", "html_url": "https://github.com/rust-lang/rust/commit/bfed3c4f0d285df97c0e9cbe342665b8b37b7a96"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "495ad93951fecf38767a2fb1bd947678440d9c71", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "patch": "@@ -669,10 +669,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let (yes, yes_len) = this.operand_to_simd(yes)?;\n                 let (no, no_len) = this.operand_to_simd(no)?;\n                 let (dest, dest_len) = this.place_to_simd(dest)?;\n+                let bitmask_len = dest_len.max(8);\n \n                 assert!(mask.layout.ty.is_integral());\n-                assert_eq!(dest_len.max(8), mask.layout.size.bits());\n-                assert!(dest_len <= 64);\n+                assert!(bitmask_len <= 64);\n+                assert_eq!(bitmask_len, mask.layout.size.bits());\n                 assert_eq!(dest_len, yes_len);\n                 assert_eq!(dest_len, no_len);\n \n@@ -684,14 +685,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .unwrap();\n                 for i in 0..dest_len {\n                     let mask =\n-                        mask & (1 << simd_bitmask_index(i, dest_len, this.data_layout().endian));\n+                        mask & (1 << simd_bitmask_index(i, bitmask_len, this.data_layout().endian));\n                     let yes = this.read_immediate(&this.mplace_index(&yes, i)?.into())?;\n                     let no = this.read_immediate(&this.mplace_index(&no, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n \n                     let val = if mask != 0 { yes } else { no };\n                     this.write_immediate(*val, &dest.into())?;\n                 }\n+                for i in dest_len..bitmask_len {\n+                    // If the mask is \"padded\", ensure that padding is all-zero.\n+                    let mask =\n+                        mask & (1 << simd_bitmask_index(i, bitmask_len, this.data_layout().endian));\n+                    if mask != 0 {\n+                        throw_ub_format!(\n+                            \"a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\"\n+                        );\n+                    }\n+                }\n             }\n             #[rustfmt::skip]\n             \"simd_cast\" | \"simd_as\" => {\n@@ -820,16 +831,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"simd_bitmask\" => {\n                 let &[ref op] = check_arg_count(args)?;\n                 let (op, op_len) = this.operand_to_simd(op)?;\n+                let bitmask_len = op_len.max(8);\n \n                 assert!(dest.layout.ty.is_integral());\n-                assert_eq!(op_len.max(8), dest.layout.size.bits());\n-                assert!(op_len <= 64);\n+                assert!(bitmask_len <= 64);\n+                assert_eq!(bitmask_len, dest.layout.size.bits());\n \n                 let mut res = 0u64;\n                 for i in 0..op_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     if simd_element_to_bool(op)? {\n-                        res |= 1 << simd_bitmask_index(i, op_len, this.data_layout().endian);\n+                        res |= 1 << simd_bitmask_index(i, bitmask_len, this.data_layout().endian);\n                     }\n                 }\n                 this.write_int(res, dest)?;\n@@ -1370,10 +1382,10 @@ fn simd_element_to_bool<'tcx>(elem: ImmTy<'tcx, Tag>) -> InterpResult<'tcx, bool\n     })\n }\n \n-fn simd_bitmask_index(idx: u64, len: u64, endianess: Endian) -> u64 {\n-    assert!(idx < len);\n+fn simd_bitmask_index(idx: u64, bitmask_len: u64, endianess: Endian) -> u64 {\n+    assert!(idx < bitmask_len);\n     match endianess {\n         Endian::Little => idx,\n-        Endian::Big => len.max(8) - 1 - idx, // reverse order of bits\n+        Endian::Big => bitmask_len - 1 - idx, // reverse order of bits\n     }\n }"}, {"sha": "ab69072c30976d1237525d8554602dcdabc53892", "filename": "tests/compile-fail/intrinsics/simd-select-bitmask-invalid.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-bitmask-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-bitmask-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-bitmask-invalid.rs?ref=b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_select_bitmask<M, T>(m: M, yes: T, no: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(0, 1);\n+    simd_select_bitmask(0b11111111u8, x, x); //~ERROR bitmask less than 8 bits long must be filled with 0s for the remaining bits\n+} }"}, {"sha": "98f67cfcd7e1364e8e73a4e2406ff092a19cf710", "filename": "tests/compile-fail/intrinsics/simd-select-invalid-bool.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-invalid-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-invalid-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-invalid-bool.rs?ref=b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_select<M, T>(m: M, yes: T, no: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(0, 1);\n+    simd_select(x, x, x); //~ERROR must be all-0-bits or all-1-bits\n+} }"}]}