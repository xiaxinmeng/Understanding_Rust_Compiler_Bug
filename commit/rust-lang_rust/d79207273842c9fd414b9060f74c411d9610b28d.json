{"sha": "d79207273842c9fd414b9060f74c411d9610b28d", "node_id": "C_kwDOAAsO6NoAKGQ3OTIwNzI3Mzg0MmM5ZmQ0MTRiOTA2MGY3NGM0MTFkOTYxMGIyOGQ", "commit": {"author": {"name": "Tim Neumann", "email": "timnn@google.com", "date": "2023-01-06T11:40:45Z"}, "committer": {"name": "Tim Neumann", "email": "timnn@google.com", "date": "2023-01-16T18:09:39Z"}, "message": "compiletest: Generic support for \"no-\" versions of boolean directives.", "tree": {"sha": "1ce7e5c3d6a2536ce02ba03b1eecd65bbb8d6e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce7e5c3d6a2536ce02ba03b1eecd65bbb8d6e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d79207273842c9fd414b9060f74c411d9610b28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d79207273842c9fd414b9060f74c411d9610b28d", "html_url": "https://github.com/rust-lang/rust/commit/d79207273842c9fd414b9060f74c411d9610b28d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d79207273842c9fd414b9060f74c411d9610b28d/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481725984b4cd94ef5c00917b01c1771b6e5299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/481725984b4cd94ef5c00917b01c1771b6e5299c", "html_url": "https://github.com/rust-lang/rust/commit/481725984b4cd94ef5c00917b01c1771b6e5299c"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "6b7ae073dbcc6fa976e159bf6c13af10882e8e9a", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d79207273842c9fd414b9060f74c411d9610b28d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79207273842c9fd414b9060f74c411d9610b28d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d79207273842c9fd414b9060f74c411d9610b28d", "patch": "@@ -725,6 +725,10 @@ impl Config {\n             && matches!(line.as_bytes().get(directive.len()), None | Some(&b' ') | Some(&b':'))\n     }\n \n+    fn parse_negative_name_directive(&self, line: &str, directive: &str) -> bool {\n+        line.starts_with(\"no-\") && self.parse_name_directive(&line[3..], directive)\n+    }\n+\n     pub fn parse_name_value_directive(&self, line: &str, directive: &str) -> Option<String> {\n         let colon = directive.len();\n         if line.starts_with(directive) && line.as_bytes().get(colon) == Some(&b':') {\n@@ -754,8 +758,17 @@ impl Config {\n     }\n \n     fn set_name_directive(&self, line: &str, directive: &str, value: &mut bool) {\n-        if !*value {\n-            *value = self.parse_name_directive(line, directive)\n+        match value {\n+            true => {\n+                if self.parse_negative_name_directive(line, directive) {\n+                    *value = false;\n+                }\n+            }\n+            false => {\n+                if self.parse_name_directive(line, directive) {\n+                    *value = true;\n+                }\n+            }\n         }\n     }\n "}]}