{"sha": "15226f91bb1193946bccfbdd4074d4c507c3cc49", "node_id": "C_kwDOAAsO6NoAKDE1MjI2ZjkxYmIxMTkzOTQ2YmNjZmJkZDQwNzRkNGM1MDdjM2NjNDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T00:30:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T00:30:19Z"}, "message": "Auto merge of #10166 - sulami:master, r=giraffate\n\nunused_self: Don't trigger if the method body contains todo!()\n\nIf the author is using todo!(), presumably they intend to use self at some point later, so we don't have a good basis to recommend factoring out to an associated function.\n\nFixes #10117.\n\n---\n\nchangelog: Enhancement: [`unused_self`]: No longer lints, if the method body contains a `todo!()` call\n[#10166](https://github.com/rust-lang/rust-clippy/pull/10166)\n<!-- changelog_checked -->", "tree": {"sha": "df873eec8966cf39662892bc55709ac9b6efc3ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df873eec8966cf39662892bc55709ac9b6efc3ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15226f91bb1193946bccfbdd4074d4c507c3cc49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15226f91bb1193946bccfbdd4074d4c507c3cc49", "html_url": "https://github.com/rust-lang/rust/commit/15226f91bb1193946bccfbdd4074d4c507c3cc49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15226f91bb1193946bccfbdd4074d4c507c3cc49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b2a3d9fe20784bb1be0ac87a15fea015c3eac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b2a3d9fe20784bb1be0ac87a15fea015c3eac2", "html_url": "https://github.com/rust-lang/rust/commit/41b2a3d9fe20784bb1be0ac87a15fea015c3eac2"}, {"sha": "e443604a24029e0ffd77f917e82980539fdacbbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e443604a24029e0ffd77f917e82980539fdacbbe", "html_url": "https://github.com/rust-lang/rust/commit/e443604a24029e0ffd77f917e82980539fdacbbe"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "f864c520302e4a56b294e2b8b66b290f005addfb", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/15226f91bb1193946bccfbdd4074d4c507c3cc49/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15226f91bb1193946bccfbdd4074d4c507c3cc49/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=15226f91bb1193946bccfbdd4074d4c507c3cc49", "patch": "@@ -1,9 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::visitors::is_local_used;\n use if_chain::if_chain;\n-use rustc_hir::{Impl, ImplItem, ImplItemKind, ItemKind};\n+use rustc_hir::{Body, Impl, ImplItem, ImplItemKind, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use std::ops::ControlFlow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -57,6 +59,20 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.owner_id);\n+        let contains_todo = |cx, body: &'_ Body<'_>| -> bool {\n+            clippy_utils::visitors::for_each_expr(body.value, |e| {\n+                if let Some(macro_call) = root_macro_call_first_node(cx, e) {\n+                    if cx.tcx.item_name(macro_call.def_id).as_str() == \"todo\" {\n+                        ControlFlow::Break(())\n+                    } else {\n+                        ControlFlow::Continue(())\n+                    }\n+                } else {\n+                    ControlFlow::Continue(())\n+                }\n+            })\n+            .is_some()\n+        };\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n@@ -65,6 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);\n+            if !contains_todo(cx, body);\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "55bd5607185c67ec5f07eb9847f2e4ee4524c8b7", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15226f91bb1193946bccfbdd4074d4c507c3cc49/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15226f91bb1193946bccfbdd4074d4c507c3cc49/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=15226f91bb1193946bccfbdd4074d4c507c3cc49", "patch": "@@ -60,6 +60,16 @@ mod unused_self_allow {\n         // shouldn't trigger for public methods\n         pub fn unused_self_move(self) {}\n     }\n+\n+    pub struct E;\n+\n+    impl E {\n+        // shouldn't trigger if body contains todo!()\n+        pub fn unused_self_todo(self) {\n+            let x = 42;\n+            todo!()\n+        }\n+    }\n }\n \n pub use unused_self_allow::D;"}]}