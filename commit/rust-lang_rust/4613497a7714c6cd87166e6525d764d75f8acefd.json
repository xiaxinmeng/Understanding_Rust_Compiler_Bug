{"sha": "4613497a7714c6cd87166e6525d764d75f8acefd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MTM0OTdhNzcxNGM2Y2Q4NzE2NmU2NTI1ZDc2NGQ3NWY4YWNlZmQ=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-02T18:27:02Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-02T18:27:02Z"}, "message": "Merge branch 'master' of github.com:rust-analyzer/rust-analyzer into fix_4202", "tree": {"sha": "2527ae2c0ef2ef100efee3fcb8899f8e34d0d573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2527ae2c0ef2ef100efee3fcb8899f8e34d0d573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4613497a7714c6cd87166e6525d764d75f8acefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4613497a7714c6cd87166e6525d764d75f8acefd", "html_url": "https://github.com/rust-lang/rust/commit/4613497a7714c6cd87166e6525d764d75f8acefd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4613497a7714c6cd87166e6525d764d75f8acefd/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e28888aa41b2845b47adb7314aed99d3c48679", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e28888aa41b2845b47adb7314aed99d3c48679", "html_url": "https://github.com/rust-lang/rust/commit/19e28888aa41b2845b47adb7314aed99d3c48679"}, {"sha": "89e1f97515c36ab97bd378d972cabec0feb6d77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e1f97515c36ab97bd378d972cabec0feb6d77e", "html_url": "https://github.com/rust-lang/rust/commit/89e1f97515c36ab97bd378d972cabec0feb6d77e"}], "stats": {"total": 25367, "additions": 13661, "deletions": 11706}, "files": [{"sha": "3f52f31f805d85989f947f32fb1d35a9ef713e34", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -39,7 +39,6 @@ jobs:\n       with:\n         toolchain: stable\n         profile: minimal\n-        target: x86_64-unknown-linux-musl\n         override: true\n \n     - name: Install Nodejs"}, {"sha": "6a2fff906510d2bb89b9e1f45235e1c224604db6", "filename": ".vscode/launch.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Flaunch.json?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -41,7 +41,7 @@\n       \"outFiles\": [\n         \"${workspaceFolder}/editors/code/out/**/*.js\"\n       ],\n-      \"preLaunchTask\": \"Build Extension\",\n+      \"preLaunchTask\": \"Build Server and Extension\",\n       \"skipFiles\": [\n         \"<node_internals>/**/*.js\"\n       ],\n@@ -62,7 +62,7 @@\n       \"outFiles\": [\n         \"${workspaceFolder}/editors/code/out/**/*.js\"\n       ],\n-      \"preLaunchTask\": \"Build Extension\",\n+      \"preLaunchTask\": \"Build Server (Release) and Extension\",\n       \"skipFiles\": [\n         \"<node_internals>/**/*.js\"\n       ],"}, {"sha": "0969ce89a107ffcd711d086754d13c25edeaeffa", "filename": ".vscode/tasks.json", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/.vscode%2Ftasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/.vscode%2Ftasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Ftasks.json?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -4,7 +4,7 @@\n   \"version\": \"2.0.0\",\n   \"tasks\": [\n     {\n-      \"label\": \"Build Extension\",\n+      \"label\": \"Build Extension in Background\",\n       \"group\": \"build\",\n       \"type\": \"npm\",\n       \"script\": \"watch\",\n@@ -15,12 +15,41 @@\n       },\n       \"isBackground\": true,\n     },\n+    {\n+      \"label\": \"Build Extension\",\n+      \"group\": \"build\",\n+      \"type\": \"npm\",\n+      \"script\": \"build\",\n+      \"path\": \"editors/code/\",\n+      \"problemMatcher\": {\n+        \"base\": \"$tsc\",\n+        \"fileLocation\": [\"relative\", \"${workspaceFolder}/editors/code/\"]\n+      },\n+    },\n     {\n       \"label\": \"Build Server\",\n       \"group\": \"build\",\n       \"type\": \"shell\",\n       \"command\": \"cargo build --package rust-analyzer\",\n       \"problemMatcher\": \"$rustc\"\n     },\n+    {\n+      \"label\": \"Build Server (Release)\",\n+      \"group\": \"build\",\n+      \"type\": \"shell\",\n+      \"command\": \"cargo build --release --package rust-analyzer\",\n+      \"problemMatcher\": \"$rustc\"\n+    },\n+\n+    {\n+      \"label\": \"Build Server and Extension\",\n+      \"dependsOn\": [\"Build Server\", \"Build Extension\"],\n+      \"problemMatcher\": \"$rustc\"\n+    },\n+    {\n+      \"label\": \"Build Server (Release) and Extension\",\n+      \"dependsOn\": [\"Build Server (Release)\", \"Build Extension\"],\n+      \"problemMatcher\": \"$rustc\"\n+    }\n   ]\n }"}, {"sha": "5d50a766fe5ac1bee5ce6204a141b608983df933", "filename": "Cargo.lock", "status": "modified", "additions": 54, "deletions": 34, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -58,19 +58,19 @@ dependencies = [\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.36\"\n+version = \"0.1.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78848718ee1255a2485d1309ad9cdecfc2e7d0362dd11c6829364c6b35ae1bc7\"\n+checksum = \"18fbebbe1c9d1f383a9cc7e8ccdb471b91c8d024ee9c2ca5b5346121fe8b4399\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n ]\n \n [[package]]\n name = \"base64\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n+checksum = \"7d5ca2cd0adc3f48f9e9ea5a6bbdf9ccc0bfade884847e484d452414c7ccffb3\"\n \n [[package]]\n name = \"bitflags\"\n@@ -170,7 +170,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"chalk-macros\",\n  \"chalk-rust-ir\",\n- \"ena\",\n+ \"ena 0.13.1\",\n  \"itertools\",\n  \"petgraph\",\n  \"rustc-hash\",\n@@ -199,14 +199,15 @@ dependencies = [\n \n [[package]]\n name = \"console\"\n-version = \"0.10.0\"\n+version = \"0.10.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6728a28023f207181b193262711102bfbaf47cc9d13bc71d0736607ef8efe88c\"\n+checksum = \"2586208b33573b7f76ccfbe5adb076394c88deaf81b84d7213969805b0a952a7\"\n dependencies = [\n  \"clicolors-control\",\n  \"encode_unicode\",\n  \"lazy_static\",\n  \"libc\",\n+ \"terminal_size\",\n  \"termios\",\n  \"winapi 0.3.8\",\n ]\n@@ -315,6 +316,15 @@ dependencies = [\n  \"log\",\n ]\n \n+[[package]]\n+name = \"ena\"\n+version = \"0.14.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d7402b94a93c24e742487327a7cd839dc9d36fec9de9fb25b09f2dae459f36c3\"\n+dependencies = [\n+ \"log\",\n+]\n+\n [[package]]\n name = \"encode_unicode\"\n version = \"0.3.6\"\n@@ -381,9 +391,9 @@ dependencies = [\n \n [[package]]\n name = \"fst\"\n-version = \"0.4.1\"\n+version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4eaf9ea41cc964d742f7fc7861db75d2d6e83a3ce0d897d5c6f8b621f015ddc8\"\n+checksum = \"81f9cac32c1741cdf6b66be7dcf0d9c7f25ccf12f8aa84c16cfa31f9f14513b3\"\n \n [[package]]\n name = \"fuchsia-zircon\"\n@@ -447,9 +457,9 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.11\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8a0d737e0f947a1864e93d33fdef4af8445a00d1ed8dc0c8ddb73139ea6abf15\"\n+checksum = \"61565ff7aaace3525556587bd2dc31d4a07071957be715e63ce7b1eccf51a8f4\"\n dependencies = [\n  \"libc\",\n ]\n@@ -645,9 +655,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-types\"\n-version = \"0.73.0\"\n+version = \"0.74.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"93d0cf64ea141b43d9e055f6b9df13f0bce32b103d84237509ce0a571ab9b159\"\n+checksum = \"57c0e6a2b8837d27b29deb3f3e6dc1c6d2f57947677f9be1024e482ec5b59525\"\n dependencies = [\n  \"base64\",\n  \"bitflags\",\n@@ -696,9 +706,9 @@ dependencies = [\n \n [[package]]\n name = \"mio\"\n-version = \"0.6.21\"\n+version = \"0.6.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"302dec22bcf6bae6dfb69c647187f4b4d0fb6f535521f7bc022430ce8e12008f\"\n+checksum = \"fce347092656428bc8eaf6201042cb551b8d67855af7374542a92a0fbfcac430\"\n dependencies = [\n  \"cfg-if\",\n  \"fuchsia-zircon\",\n@@ -739,9 +749,9 @@ dependencies = [\n \n [[package]]\n name = \"net2\"\n-version = \"0.2.33\"\n+version = \"0.2.34\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n+checksum = \"2ba7c918ac76704fb42afcbbb43891e72731f3dcca3bef2a19786297baf14af7\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -814,19 +824,19 @@ dependencies = [\n \n [[package]]\n name = \"paste\"\n-version = \"0.1.10\"\n+version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ab4fb1930692d1b6a9cfabdde3d06ea0a7d186518e2f4d67660d8970e2fa647a\"\n+checksum = \"a3c897744f63f34f7ae3a024d9162bb5001f4ad661dd24bea0dc9f075d2de1c6\"\n dependencies = [\n  \"paste-impl\",\n  \"proc-macro-hack\",\n ]\n \n [[package]]\n name = \"paste-impl\"\n-version = \"0.1.10\"\n+version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a62486e111e571b1e93b710b61e8f493c0013be39629b714cb166bdb06aa5a8a\"\n+checksum = \"66fd6f92e3594f2dd7b3fc23e42d82e292f7bcda6d8e5dcd167072327234ab89\"\n dependencies = [\n  \"proc-macro-hack\",\n  \"proc-macro2\",\n@@ -885,9 +895,9 @@ dependencies = [\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.3\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2bdc6c187c65bca4260c9011c9e3132efe4909da44726bad24cf7572ae338d7f\"\n+checksum = \"4c1f4b0efa5fc5e8ceb705136bfee52cfdb6a4e3509f770b478cd6ed434232a7\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -1023,7 +1033,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"chalk-rust-ir\",\n  \"chalk-solve\",\n- \"ena\",\n+ \"ena 0.14.0\",\n  \"insta\",\n  \"itertools\",\n  \"log\",\n@@ -1193,9 +1203,9 @@ dependencies = [\n \n [[package]]\n name = \"ra_vfs\"\n-version = \"0.5.3\"\n+version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58a265769d5e5655345a9fcbd870a1a7c3658558c0d8efaed79e0669358f46b8\"\n+checksum = \"fcaa5615f420134aea7667253db101d03a5c5f300eac607872dc2a36407b2ac9\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n@@ -1374,9 +1384,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"652.0.0\"\n+version = \"656.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3a6a43c4d0889218c5e2ae68ffea239f303fc05ab1078c73f74e63feb87f7889\"\n+checksum = \"9cbba98ec46e96a4663197dfa8c0378752de2006e314e5400c0ca74929d6692f\"\n dependencies = [\n  \"unicode-xid\",\n ]\n@@ -1486,18 +1496,18 @@ checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.104\"\n+version = \"1.0.106\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"414115f25f818d7dfccec8ee535d76949ae78584fc4f79a6f45a904bf8ab4449\"\n+checksum = \"36df6ac6412072f67cf767ebbde4133a5b2e88e76dc6187fa7104cd16f783399\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.104\"\n+version = \"1.0.106\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"128f9e303a5a29922045a830221b8f78ec74a5f544944f3d5984f8ec3895ef64\"\n+checksum = \"9e549e3abf4fb8621bd1609f11dfc9f5e50320802273b12f3811a67e6716ea6c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -1506,9 +1516,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.51\"\n+version = \"1.0.52\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"da07b57ee2623368351e9a0488bb0b261322a15a6e0ae53e243cbdc0f4208da9\"\n+checksum = \"a7894c8ed05b7a3a279aeb79025fdec1d3158080b75b98a08faf2806bb799edd\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -1606,6 +1616,16 @@ dependencies = [\n  \"winapi 0.3.8\",\n ]\n \n+[[package]]\n+name = \"terminal_size\"\n+version = \"0.1.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8038f95fc7a6f351163f4b964af631bd26c9e828f7db085f2a84aca56f70d13b\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi 0.3.8\",\n+]\n+\n [[package]]\n name = \"termios\"\n version = \"0.3.2\""}, {"sha": "9ac65ab397fa0eb005bcdb855228d081e0c060d1", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -85,6 +85,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             ast::TypeRef::PathType(path_type) => path_type.path()?,\n             _ => return None,\n         };\n+        // FIXME: use `hir::Path::from_src` instead.\n         let path = hir::Path::from_ast(path)?;\n         let resolution = self.source_scope.resolve_hir_path(&path)?;\n         match resolution {\n@@ -128,6 +129,7 @@ impl<'a> QualifyPaths<'a> {\n             // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n             return None;\n         }\n+        // FIXME: use `hir::Path::from_src` instead.\n         let hir_path = hir::Path::from_ast(p.clone());\n         let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {"}, {"sha": "6696cc832300b8bf289d731f69756b5bbb1db8c5", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -180,7 +180,9 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 { todo!() }\n+    fn foo(&self) -> u32 {\n+        todo!()\n+    }\n \n }\n \"#####,\n@@ -726,3 +728,22 @@ use std::{collections::HashMap};\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_unwrap_block() {\n+    check(\n+        \"unwrap_block\",\n+        r#####\"\n+fn foo() {\n+    if true {<|>\n+        println!(\"foo\");\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn foo() {\n+    println!(\"foo\");\n+}\n+\"#####,\n+    )\n+}"}, {"sha": "49deb670175c0c6e213c6a18b262718c08fd8cf1", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,11 +1,12 @@\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n     TextSize,\n };\n use stdx::format_to;\n \n-use crate::{Assist, AssistCtx, AssistId};\n-use ra_ide_db::RootDatabase;\n+use crate::{utils::FamousDefs, Assist, AssistCtx, AssistId};\n+use test_utils::tested_by;\n \n // Assist add_from_impl_for_enum\n //\n@@ -41,7 +42,8 @@ pub(crate) fn add_from_impl_for_enum(ctx: AssistCtx) -> Option<Assist> {\n         _ => return None,\n     };\n \n-    if already_has_from_impl(ctx.sema, &variant) {\n+    if existing_from_impl(ctx.sema, &variant).is_some() {\n+        tested_by!(test_add_from_impl_already_exists);\n         return None;\n     }\n \n@@ -70,41 +72,33 @@ impl From<{0}> for {1} {{\n     )\n }\n \n-fn already_has_from_impl(\n+fn existing_from_impl(\n     sema: &'_ hir::Semantics<'_, RootDatabase>,\n     variant: &ast::EnumVariant,\n-) -> bool {\n-    let scope = sema.scope(&variant.syntax());\n+) -> Option<()> {\n+    let variant = sema.to_def(variant)?;\n+    let enum_ = variant.parent_enum(sema.db);\n+    let krate = enum_.module(sema.db).krate();\n \n-    let from_path = ast::make::path_from_text(\"From\");\n-    let from_hir_path = match hir::Path::from_ast(from_path) {\n-        Some(p) => p,\n-        None => return false,\n-    };\n-    let from_trait = match scope.resolve_hir_path(&from_hir_path) {\n-        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(t))) => t,\n-        _ => return false,\n-    };\n+    let from_trait = FamousDefs(sema, krate).core_convert_From()?;\n \n-    let e: hir::Enum = match sema.to_def(&variant.parent_enum()) {\n-        Some(e) => e,\n-        None => return false,\n-    };\n-    let e_ty = e.ty(sema.db);\n+    let enum_type = enum_.ty(sema.db);\n \n-    let hir_enum_var: hir::EnumVariant = match sema.to_def(variant) {\n-        Some(ev) => ev,\n-        None => return false,\n-    };\n-    let var_ty = hir_enum_var.fields(sema.db)[0].signature_ty(sema.db);\n+    let wrapped_type = variant.fields(sema.db).get(0)?.signature_ty(sema.db);\n \n-    e_ty.impls_trait(sema.db, from_trait, &[var_ty])\n+    if enum_type.impls_trait(sema.db, from_trait, &[wrapped_type]) {\n+        Some(())\n+    } else {\n+        None\n+    }\n }\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n+\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n+    use test_utils::covers;\n \n     #[test]\n     fn test_add_from_impl_for_enum() {\n@@ -136,36 +130,40 @@ mod tests {\n         );\n     }\n \n+    fn check_not_applicable(ra_fixture: &str) {\n+        let fixture =\n+            format!(\"//- main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+        check_assist_not_applicable(add_from_impl_for_enum, &fixture)\n+    }\n+\n     #[test]\n     fn test_add_from_impl_no_element() {\n-        check_assist_not_applicable(add_from_impl_for_enum, \"enum A { <|>One }\");\n+        check_not_applicable(\"enum A { <|>One }\");\n     }\n \n     #[test]\n     fn test_add_from_impl_more_than_one_element_in_tuple() {\n-        check_assist_not_applicable(add_from_impl_for_enum, \"enum A { <|>One(u32, String) }\");\n+        check_not_applicable(\"enum A { <|>One(u32, String) }\");\n     }\n \n     #[test]\n     fn test_add_from_impl_struct_variant() {\n-        check_assist_not_applicable(add_from_impl_for_enum, \"enum A { <|>One { x: u32 } }\");\n+        check_not_applicable(\"enum A { <|>One { x: u32 } }\");\n     }\n \n     #[test]\n     fn test_add_from_impl_already_exists() {\n-        check_assist_not_applicable(\n-            add_from_impl_for_enum,\n-            r#\"enum A { <|>One(u32), }\n+        covers!(test_add_from_impl_already_exists);\n+        check_not_applicable(\n+            r#\"\n+enum A { <|>One(u32), }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n         A::One(v)\n     }\n }\n-\n-pub trait From<T> {\n-    fn from(T) -> Self;\n-}\"#,\n+\"#,\n         );\n     }\n "}, {"sha": "e466c9a86d87ae6b8a3003af9a5865278d6a524f", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 116, "deletions": 78, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,6 +1,10 @@\n use hir::HasSource;\n use ra_syntax::{\n-    ast::{self, edit, make, AstNode, NameOwner},\n+    ast::{\n+        self,\n+        edit::{self, IndentLevel},\n+        make, AstNode, NameOwner,\n+    },\n     SmolStr,\n };\n \n@@ -40,7 +44,9 @@ enum AddMissingImplMembersMode {\n // }\n //\n // impl Trait<u32> for () {\n-//     fn foo(&self) -> u32 { todo!() }\n+//     fn foo(&self) -> u32 {\n+//         todo!()\n+//     }\n //\n // }\n // ```\n@@ -165,7 +171,9 @@ fn add_missing_impl_members_inner(\n \n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     if fn_def.body().is_none() {\n-        fn_def.with_body(make::block_from_expr(make::expr_todo()))\n+        let body = make::block_expr(None, Some(make::expr_todo()));\n+        let body = IndentLevel(1).increase_indent(body);\n+        fn_def.with_body(body)\n     } else {\n         fn_def\n     }\n@@ -181,7 +189,7 @@ mod tests {\n     fn test_add_missing_impl_members() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -197,8 +205,8 @@ struct S;\n impl Foo for S {\n     fn bar(&self) {}\n <|>\n-}\",\n-            \"\n+}\"#,\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -215,18 +223,22 @@ impl Foo for S {\n     fn bar(&self) {}\n     <|>type Output;\n     const CONST: usize = 42;\n-    fn foo(&self) { todo!() }\n-    fn baz(&self) { todo!() }\n+    fn foo(&self) {\n+        todo!()\n+    }\n+    fn baz(&self) {\n+        todo!()\n+    }\n \n-}\",\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_copied_overriden_members() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo {\n     fn foo(&self);\n     fn bar(&self) -> bool { true }\n@@ -238,8 +250,8 @@ struct S;\n impl Foo for S {\n     fn bar(&self) {}\n <|>\n-}\",\n-            \"\n+}\"#,\n+            r#\"\n trait Foo {\n     fn foo(&self);\n     fn bar(&self) -> bool { true }\n@@ -250,146 +262,162 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    <|>fn foo(&self) { todo!() }\n+    <|>fn foo(&self) {\n+        todo!()\n+    }\n \n-}\",\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_empty_impl_def() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S { <|> }\",\n-            \"\n+impl Foo for S { <|> }\"#,\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { todo!() }\n-}\",\n+    <|>fn foo(&self) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn fill_in_type_params_1() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n-impl Foo<u32> for S { <|> }\",\n-            \"\n+impl Foo<u32> for S { <|> }\"#,\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl Foo<u32> for S {\n-    <|>fn foo(&self, t: u32) -> &u32 { todo!() }\n-}\",\n+    <|>fn foo(&self, t: u32) -> &u32 {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn fill_in_type_params_2() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n-impl<U> Foo<U> for S { <|> }\",\n-            \"\n+impl<U> Foo<U> for S { <|> }\"#,\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl<U> Foo<U> for S {\n-    <|>fn foo(&self, t: U) -> &U { todo!() }\n-}\",\n+    <|>fn foo(&self, t: U) -> &U {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_cursor_after_empty_impl_def() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S {}<|>\",\n-            \"\n+impl Foo for S {}<|>\"#,\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { todo!() }\n-}\",\n+    <|>fn foo(&self) {\n+        todo!()\n+    }\n+}\"#,\n         )\n     }\n \n     #[test]\n     fn test_qualify_path_1() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar;\n     trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar;\n     trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_generic() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo { fn foo(&self, bar: Bar<u32>); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo { fn foo(&self, bar: Bar<u32>); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<u32>) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_and_substitute_param() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n }\n struct S;\n-impl foo::Foo<u32> for S { <|> }\",\n-            \"\n+impl foo::Foo<u32> for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n }\n struct S;\n impl foo::Foo<u32> for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<u32>) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n@@ -398,122 +426,130 @@ impl foo::Foo<u32> for S {\n         // when substituting params, the substituted param should not be qualified!\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     trait Foo<T> { fn foo(&self, bar: T); }\n     pub struct Param;\n }\n struct Param;\n struct S;\n-impl foo::Foo<Param> for S { <|> }\",\n-            \"\n+impl foo::Foo<Param> for S { <|> }\"#,\n+            r#\"\n mod foo {\n     trait Foo<T> { fn foo(&self, bar: T); }\n     pub struct Param;\n }\n struct Param;\n struct S;\n impl foo::Foo<Param> for S {\n-    <|>fn foo(&self, bar: Param) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: Param) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_associated_item() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     impl Bar<T> { type Assoc = u32; }\n     trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     impl Bar<T> { type Assoc = u32; }\n     trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_nested() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     pub struct Baz;\n     trait Foo { fn foo(&self, bar: Bar<Baz>); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     pub struct Baz;\n     trait Foo { fn foo(&self, bar: Bar<Baz>); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_fn_trait_notation() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub trait Fn<Args> { type Output; }\n     trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub trait Fn<Args> { type Output; }\n     trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_empty_trait() {\n         check_assist_not_applicable(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo;\n struct S;\n-impl Foo for S { <|> }\",\n+impl Foo for S { <|> }\"#,\n         )\n     }\n \n     #[test]\n     fn test_ignore_unnamed_trait_members_and_default_methods() {\n         check_assist_not_applicable(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo {\n     fn (arg: u32);\n     fn valid(some: u32) -> bool { false }\n }\n struct S;\n-impl Foo for S { <|> }\",\n+impl Foo for S { <|> }\"#,\n         )\n     }\n \n@@ -544,7 +580,9 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>type Output;\n-    fn foo(&self) { todo!() }\n+    fn foo(&self) {\n+        todo!()\n+    }\n }\"#,\n         )\n     }\n@@ -553,7 +591,7 @@ impl Foo for S {\n     fn test_default_methods() {\n         check_assist(\n             add_missing_default_members,\n-            \"\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -563,8 +601,8 @@ trait Foo {\n     fn foo(some: u32) -> bool;\n }\n struct S;\n-impl Foo for S { <|> }\",\n-            \"\n+impl Foo for S { <|> }\"#,\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -576,7 +614,7 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>fn valid(some: u32) -> bool { false }\n-}\",\n+}\"#,\n         )\n     }\n }"}, {"sha": "eede2fe91dec903d0a3ac8a3958982ae3676df17", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -2,7 +2,7 @@ use std::{iter::once, ops::RangeInclusive};\n \n use ra_syntax::{\n     algo::replace_children,\n-    ast::{self, edit::IndentLevel, make, Block, Pat::TupleStructPat},\n+    ast::{self, edit::IndentLevel, make},\n     AstNode,\n     SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n     SyntaxNode,\n@@ -47,7 +47,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n     // Check if there is an IfLet that we can handle.\n     let if_let_pat = match cond.pat() {\n         None => None, // No IfLet, supported.\n-        Some(TupleStructPat(pat)) if pat.args().count() == 1 => {\n+        Some(ast::Pat::TupleStructPat(pat)) if pat.args().count() == 1 => {\n             let path = pat.path()?;\n             match path.qualifier() {\n                 None => {\n@@ -61,9 +61,9 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n     };\n \n     let cond_expr = cond.expr()?;\n-    let then_block = if_expr.then_branch()?.block()?;\n+    let then_block = if_expr.then_branch()?;\n \n-    let parent_block = if_expr.syntax().parent()?.ancestors().find_map(ast::Block::cast)?;\n+    let parent_block = if_expr.syntax().parent()?.ancestors().find_map(ast::BlockExpr::cast)?;\n \n     if parent_block.expr()? != if_expr.clone().into() {\n         return None;\n@@ -80,7 +80,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    let parent_container = parent_block.syntax().parent()?.parent()?;\n+    let parent_container = parent_block.syntax().parent()?;\n \n     let early_expression: ast::Expr = match parent_container.kind() {\n         WHILE_EXPR | LOOP_EXPR => make::expr_continue(),\n@@ -144,13 +144,13 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n             }\n         };\n         edit.target(if_expr.syntax().text_range());\n-        edit.replace_ast(parent_block, ast::Block::cast(new_block).unwrap());\n+        edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n         edit.set_cursor(cursor_position);\n \n         fn replace(\n             new_expr: &SyntaxNode,\n-            then_block: &Block,\n-            parent_block: &Block,\n+            then_block: &ast::BlockExpr,\n+            parent_block: &ast::BlockExpr,\n             if_expr: &ast::IfExpr,\n         ) -> SyntaxNode {\n             let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());"}, {"sha": "60ec536a7c9df8bb506c5485cb8667dd7bac0acf", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -89,6 +89,7 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n             | (ast::Expr::ParenExpr(_), _)\n             | (ast::Expr::PathExpr(_), _)\n             | (ast::Expr::BlockExpr(_), _)\n+            | (ast::Expr::EffectExpr(_), _)\n             | (_, ast::Expr::CallExpr(_))\n             | (_, ast::Expr::TupleExpr(_))\n             | (_, ast::Expr::ArrayExpr(_))"}, {"sha": "39c656305982de28e7efbd35b6af34518991ca14", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -111,7 +111,7 @@ fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n /// expression like a lambda or match arm.\n fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n     expr.syntax().ancestors().find_map(|node| {\n-        if let Some(expr) = node.parent().and_then(ast::Block::cast).and_then(|it| it.expr()) {\n+        if let Some(expr) = node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr()) {\n             if expr.syntax() == &node {\n                 tested_by!(test_introduce_var_last_expr);\n                 return Some((node, false));"}, {"sha": "b084dd9ee22ce383dfb4d9250b6f8e7eb3ad3e9d", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -113,9 +113,9 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n         \"Move condition to match guard\",\n         |edit| {\n             edit.target(if_expr.syntax().text_range());\n-            let then_only_expr = then_block.block().and_then(|it| it.statements().next()).is_none();\n+            let then_only_expr = then_block.statements().next().is_none();\n \n-            match &then_block.block().and_then(|it| it.expr()) {\n+            match &then_block.expr() {\n                 Some(then_expr) if then_only_expr => {\n                     edit.replace(if_expr.syntax().text_range(), then_expr.syntax().text())\n                 }"}, {"sha": "9841f6980bc3e01cff360b540e87915027eb9784", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,11 +1,10 @@\n use ra_fmt::unwrap_trivial_block;\n use ra_syntax::{\n-    ast::{self, make},\n+    ast::{self, edit::IndentLevel, make},\n     AstNode,\n };\n \n-use crate::{Assist, AssistCtx, AssistId};\n-use ast::edit::IndentLevel;\n+use crate::{utils::TryEnum, Assist, AssistCtx, AssistId};\n \n // Assist: replace_if_let_with_match\n //\n@@ -44,15 +43,21 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n         ast::ElseBranch::IfExpr(_) => return None,\n     };\n \n-    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", |edit| {\n+    let sema = ctx.sema;\n+    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", move |edit| {\n         let match_expr = {\n             let then_arm = {\n                 let then_expr = unwrap_trivial_block(then_block);\n-                make::match_arm(vec![pat], then_expr)\n+                make::match_arm(vec![pat.clone()], then_expr)\n             };\n             let else_arm = {\n+                let pattern = sema\n+                    .type_of_pat(&pat)\n+                    .and_then(|ty| TryEnum::from_ty(sema, &ty))\n+                    .map(|it| it.sad_pattern())\n+                    .unwrap_or_else(|| make::placeholder_pat().into());\n                 let else_expr = unwrap_trivial_block(else_block);\n-                make::match_arm(vec![make::placeholder_pat().into()], else_expr)\n+                make::match_arm(vec![pattern], else_expr)\n             };\n             make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]))\n         };\n@@ -68,6 +73,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+\n     use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n@@ -145,4 +151,64 @@ impl VariantData {\n         }\",\n         );\n     }\n+\n+    #[test]\n+    fn special_case_option() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn foo(x: Option<i32>) {\n+    <|>if let Some(x) = x {\n+        println!(\"{}\", x)\n+    } else {\n+        println!(\"none\")\n+    }\n+}\n+           \"#,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn foo(x: Option<i32>) {\n+    <|>match x {\n+        Some(x) => println!(\"{}\", x),\n+        None => println!(\"none\"),\n+    }\n+}\n+           \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn special_case_result() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+use Result::*;\n+\n+fn foo(x: Result<i32, ()>) {\n+    <|>if let Ok(x) = x {\n+        println!(\"{}\", x)\n+    } else {\n+        println!(\"none\")\n+    }\n+}\n+           \"#,\n+            r#\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+use Result::*;\n+\n+fn foo(x: Result<i32, ()>) {\n+    <|>match x {\n+        Ok(x) => println!(\"{}\", x),\n+        Err(_) => println!(\"none\"),\n+    }\n+}\n+           \"#,\n+        );\n+    }\n }"}, {"sha": "0cf23b754e8d635a06f30a509bdbf46327bee3a7", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,6 +1,5 @@\n use std::iter::once;\n \n-use hir::Adt;\n use ra_syntax::{\n     ast::{\n         self,\n@@ -12,6 +11,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n+    utils::TryEnum,\n     AssistId,\n };\n \n@@ -45,20 +45,10 @@ pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n     let init = let_stmt.initializer()?;\n     let original_pat = let_stmt.pat()?;\n     let ty = ctx.sema.type_of_expr(&init)?;\n-    let enum_ = match ty.as_adt() {\n-        Some(Adt::Enum(it)) => it,\n-        _ => return None,\n-    };\n-    let happy_case =\n-        [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter().find_map(|(known_type, happy_case)| {\n-            if &enum_.name(ctx.db).to_string() == known_type {\n-                return Some(happy_case);\n-            }\n-            None\n-        });\n+    let happy_variant = TryEnum::from_ty(ctx.sema, &ty).map(|it| it.happy_case());\n \n     ctx.add_assist(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", |edit| {\n-        let with_placeholder: ast::Pat = match happy_case {\n+        let with_placeholder: ast::Pat = match happy_variant {\n             None => make::placeholder_pat().into(),\n             Some(var_name) => make::tuple_struct_pat(\n                 make::path_unqualified(make::path_segment(make::name_ref(var_name))),"}, {"sha": "918e8dd8dae5ce36abc80e41979c66101561af3b", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn replace_qualified_name_with_use(ctx: AssistCtx) -> Option<Assist>\n         return None;\n     }\n \n-    let hir_path = hir::Path::from_ast(path.clone())?;\n+    let hir_path = ctx.sema.lower_path(&path)?;\n     let segments = collect_hir_path_segments(&hir_path)?;\n     if segments.len() < 2 {\n         return None;"}, {"sha": "62d4ea5220259f070d026aefdf6f04c13272a1f2", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,12 +1,11 @@\n use std::iter;\n \n use ra_syntax::{\n-    ast::{self, make},\n+    ast::{self, edit::IndentLevel, make},\n     AstNode,\n };\n \n-use crate::{Assist, AssistCtx, AssistId};\n-use ast::edit::IndentLevel;\n+use crate::{utils::TryEnum, Assist, AssistCtx, AssistId};\n \n // Assist: replace_unwrap_with_match\n //\n@@ -38,42 +37,27 @@ pub(crate) fn replace_unwrap_with_match(ctx: AssistCtx) -> Option<Assist> {\n     }\n     let caller = method_call.expr()?;\n     let ty = ctx.sema.type_of_expr(&caller)?;\n+    let happy_variant = TryEnum::from_ty(ctx.sema, &ty)?.happy_case();\n \n-    let type_name = ty.as_adt()?.name(ctx.sema.db).to_string();\n+    ctx.add_assist(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", |edit| {\n+        let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n+        let it = make::bind_pat(make::name(\"a\")).into();\n+        let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n-    for (unwrap_type, variant_name) in [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter() {\n-        if &type_name == unwrap_type {\n-            return ctx.add_assist(\n-                AssistId(\"replace_unwrap_with_match\"),\n-                \"Replace unwrap with match\",\n-                |edit| {\n-                    let ok_path =\n-                        make::path_unqualified(make::path_segment(make::name_ref(variant_name)));\n-                    let it = make::bind_pat(make::name(\"a\")).into();\n-                    let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n+        let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n+        let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n-                    let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n-                    let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n+        let unreachable_call = make::unreachable_macro_call().into();\n+        let err_arm = make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n \n-                    let unreachable_call = make::unreachable_macro_call().into();\n-                    let err_arm = make::match_arm(\n-                        iter::once(make::placeholder_pat().into()),\n-                        unreachable_call,\n-                    );\n+        let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n+        let match_expr = make::expr_match(caller.clone(), match_arm_list);\n+        let match_expr = IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n \n-                    let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n-                    let match_expr = make::expr_match(caller.clone(), match_arm_list);\n-                    let match_expr =\n-                        IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n-\n-                    edit.target(method_call.syntax().text_range());\n-                    edit.set_cursor(caller.syntax().text_range().start());\n-                    edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n-                },\n-            );\n-        }\n-    }\n-    None\n+        edit.target(method_call.syntax().text_range());\n+        edit.set_cursor(caller.syntax().text_range().start());\n+        edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "58649c47eb6dac68a83f6489be3984ecb84a2db7", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "added", "additions": 348, "deletions": 0, "changes": 348, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,348 @@\n+use crate::{Assist, AssistCtx, AssistId};\n+\n+use ast::{BlockExpr, Expr, ForExpr, IfExpr, LoopBodyOwner, LoopExpr, WhileExpr};\n+use ra_fmt::unwrap_trivial_block;\n+use ra_syntax::{ast, AstNode, TextRange, T};\n+\n+// Assist: unwrap_block\n+//\n+// This assist removes if...else, for, while and loop control statements to just keep the body.\n+//\n+// ```\n+// fn foo() {\n+//     if true {<|>\n+//         println!(\"foo\");\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn foo() {\n+//     println!(\"foo\");\n+// }\n+// ```\n+pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n+    let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n+\n+    let res = if let Some(if_expr) = l_curly_token.ancestors().find_map(IfExpr::cast) {\n+        // if expression\n+        let expr_to_unwrap = if_expr.blocks().find_map(|expr| extract_expr(ctx.frange.range, expr));\n+        let expr_to_unwrap = expr_to_unwrap?;\n+        // Find if we are in a else if block\n+        let ancestor = if_expr.syntax().ancestors().skip(1).find_map(ast::IfExpr::cast);\n+\n+        if let Some(ancestor) = ancestor {\n+            Some((ast::Expr::IfExpr(ancestor), expr_to_unwrap))\n+        } else {\n+            Some((ast::Expr::IfExpr(if_expr), expr_to_unwrap))\n+        }\n+    } else if let Some(for_expr) = l_curly_token.ancestors().find_map(ForExpr::cast) {\n+        // for expression\n+        let block_expr = for_expr.loop_body()?;\n+        extract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::ForExpr(for_expr), expr_to_unwrap))\n+    } else if let Some(while_expr) = l_curly_token.ancestors().find_map(WhileExpr::cast) {\n+        // while expression\n+        let block_expr = while_expr.loop_body()?;\n+        extract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::WhileExpr(while_expr), expr_to_unwrap))\n+    } else if let Some(loop_expr) = l_curly_token.ancestors().find_map(LoopExpr::cast) {\n+        // loop expression\n+        let block_expr = loop_expr.loop_body()?;\n+        extract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap))\n+    } else {\n+        None\n+    };\n+\n+    let (expr, expr_to_unwrap) = res?;\n+    ctx.add_assist(AssistId(\"unwrap_block\"), \"Unwrap block\", |edit| {\n+        edit.set_cursor(expr.syntax().text_range().start());\n+        edit.target(expr_to_unwrap.syntax().text_range());\n+\n+        let pat_start: &[_] = &[' ', '{', '\\n'];\n+        let expr_to_unwrap = expr_to_unwrap.to_string();\n+        let expr_string = expr_to_unwrap.trim_start_matches(pat_start);\n+        let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n+        expr_string_lines.pop(); // Delete last line\n+\n+        let expr_string = expr_string_lines\n+            .into_iter()\n+            .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n+            .collect::<Vec<String>>()\n+            .join(\"\\n\");\n+\n+        edit.replace(expr.syntax().text_range(), expr_string);\n+    })\n+}\n+\n+fn extract_expr(cursor_range: TextRange, block: BlockExpr) -> Option<Expr> {\n+    let cursor_in_range = block.l_curly_token()?.text_range().contains_range(cursor_range);\n+\n+    if cursor_in_range {\n+        Some(unwrap_trivial_block(block))\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn simple_if() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                bar();\n+                if true {<|>\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                bar();\n+                <|>foo();\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                bar();\n+                if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {<|>\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                bar();\n+                <|>println!(\"bar\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {<|>\n+                    println!(\"bar\");\n+                } else {\n+                    println!(\"foo\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                <|>println!(\"bar\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_bad_cursor_position() {\n+        check_assist_not_applicable(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                bar();<|>\n+                if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_for() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                for i in 0..5 {<|>\n+                    if true {\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                <|>if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_in_for() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                for i in 0..5 {\n+                    if true {<|>\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                for i in 0..5 {\n+                    <|>foo();\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_loop() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                loop {<|>\n+                    if true {\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                <|>if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_while() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                while true {<|>\n+                    if true {\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                <|>if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_in_while_bad_cursor_position() {\n+        check_assist_not_applicable(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                while true {\n+                    if true {\n+                        foo();<|>\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "c5df86600f51d24cc45a7525a5bb61b19c00dba3", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -143,6 +143,7 @@ mod handlers {\n     mod split_import;\n     mod add_from_impl_for_enum;\n     mod reorder_fields;\n+    mod unwrap_block;\n \n     pub(crate) fn all() -> &'static [AssistHandler] {\n         &[\n@@ -181,6 +182,7 @@ mod handlers {\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n             add_from_impl_for_enum::add_from_impl_for_enum,\n+            unwrap_block::unwrap_block,\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,"}, {"sha": "8d910205f0ab332d9fecc40cc94909e3c242abee", "filename": "crates/ra_assists/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -8,4 +8,5 @@ test_utils::marks![\n     test_not_inline_mut_variable\n     test_not_applicable_if_variable_unused\n     change_visibility_field_false_positive\n+    test_add_from_impl_already_exists\n ];"}, {"sha": "efd9886978a59b8f9aedec2663cf0a13441a010f", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,7 +1,9 @@\n //! Assorted functions shared by several assists.\n pub(crate) mod insert_use;\n \n-use hir::Semantics;\n+use std::iter;\n+\n+use hir::{Adt, Crate, Semantics, Trait, Type};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, make, NameOwner},\n@@ -99,3 +101,109 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n         _ => None,\n     }\n }\n+\n+#[derive(Clone, Copy)]\n+pub(crate) enum TryEnum {\n+    Result,\n+    Option,\n+}\n+\n+impl TryEnum {\n+    const ALL: [TryEnum; 2] = [TryEnum::Option, TryEnum::Result];\n+\n+    pub(crate) fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n+        let enum_ = match ty.as_adt() {\n+            Some(Adt::Enum(it)) => it,\n+            _ => return None,\n+        };\n+        TryEnum::ALL.iter().find_map(|&var| {\n+            if &enum_.name(sema.db).to_string() == var.type_name() {\n+                return Some(var);\n+            }\n+            None\n+        })\n+    }\n+\n+    pub(crate) fn happy_case(self) -> &'static str {\n+        match self {\n+            TryEnum::Result => \"Ok\",\n+            TryEnum::Option => \"Some\",\n+        }\n+    }\n+\n+    pub(crate) fn sad_pattern(self) -> ast::Pat {\n+        match self {\n+            TryEnum::Result => make::tuple_struct_pat(\n+                make::path_unqualified(make::path_segment(make::name_ref(\"Err\"))),\n+                iter::once(make::placeholder_pat().into()),\n+            )\n+            .into(),\n+            TryEnum::Option => make::bind_pat(make::name(\"None\")).into(),\n+        }\n+    }\n+\n+    fn type_name(self) -> &'static str {\n+        match self {\n+            TryEnum::Result => \"Result\",\n+            TryEnum::Option => \"Option\",\n+        }\n+    }\n+}\n+\n+/// Helps with finding well-know things inside the standard library. This is\n+/// somewhat similar to the known paths infra inside hir, but it different; We\n+/// want to make sure that IDE specific paths don't become interesting inside\n+/// the compiler itself as well.\n+pub(crate) struct FamousDefs<'a, 'b>(pub(crate) &'a Semantics<'b, RootDatabase>, pub(crate) Crate);\n+\n+#[allow(non_snake_case)]\n+impl FamousDefs<'_, '_> {\n+    #[cfg(test)]\n+    pub(crate) const FIXTURE: &'static str = r#\"\n+//- /libcore.rs crate:core\n+pub mod convert{\n+    pub trait From<T> {\n+        fn from(T) -> Self;\n+    }\n+}\n+\n+pub mod prelude { pub use crate::convert::From }\n+#[prelude_import]\n+pub use prelude::*;\n+\"#;\n+\n+    pub(crate) fn core_convert_From(&self) -> Option<Trait> {\n+        self.find_trait(\"core:convert:From\")\n+    }\n+\n+    fn find_trait(&self, path: &str) -> Option<Trait> {\n+        let db = self.0.db;\n+        let mut path = path.split(':');\n+        let trait_ = path.next_back()?;\n+        let std_crate = path.next()?;\n+        let std_crate = self\n+            .1\n+            .dependencies(db)\n+            .into_iter()\n+            .find(|dep| &dep.name.to_string() == std_crate)?\n+            .krate;\n+\n+        let mut module = std_crate.root_module(db)?;\n+        for segment in path {\n+            module = module.children(db).find_map(|child| {\n+                let name = child.name(db)?;\n+                if &name.to_string() == segment {\n+                    Some(child)\n+                } else {\n+                    None\n+                }\n+            })?;\n+        }\n+        let def =\n+            module.scope(db, None).into_iter().find(|(name, _def)| &name.to_string() == trait_)?.1;\n+        match def {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "324c33d9dd28dd554e23af4c5b8c6521a1b5f0d5", "filename": "crates/ra_flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_flycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_flycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2FCargo.toml?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -6,7 +6,7 @@ authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n crossbeam-channel = \"0.4.0\"\n-lsp-types = { version = \"0.73.0\", features = [\"proposed\"] }\n+lsp-types = { version = \"0.74.0\", features = [\"proposed\"] }\n log = \"0.4.8\"\n cargo_metadata = \"0.9.1\"\n serde_json = \"1.0.48\""}, {"sha": "f910ded9da6f3ca57b6fcd9dfa2d039ffb0c3528", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -42,7 +42,6 @@ pub fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n }\n \n pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n-    let block = block.block()?;\n     let has_anything_else = |thing: &SyntaxNode| -> bool {\n         let mut non_trivial_children =\n             block.syntax().children_with_tokens().filter(|it| match it.kind() {\n@@ -57,18 +56,17 @@ pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n             return None;\n         }\n         return Some(expr);\n-    } else {\n-        // Unwrap `{ continue; }`\n-        let (stmt,) = block.statements().next_tuple()?;\n-        if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n-            if has_anything_else(expr_stmt.syntax()) {\n-                return None;\n-            }\n-            let expr = expr_stmt.expr()?;\n-            match expr.syntax().kind() {\n-                CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n-                _ => (),\n-            }\n+    }\n+    // Unwrap `{ continue; }`\n+    let (stmt,) = block.statements().next_tuple()?;\n+    if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n+        if has_anything_else(expr_stmt.syntax()) {\n+            return None;\n+        }\n+        let expr = expr_stmt.expr()?;\n+        match expr.syntax().kind() {\n+            CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n+            _ => (),\n         }\n     }\n     None"}, {"sha": "af59aa1b6cf4156a462a68623fff5a13db9ab1cf", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -953,6 +953,16 @@ impl TypeParam {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         self.id.parent.module(db.upcast()).into()\n     }\n+\n+    pub fn ty(self, db: &dyn HirDatabase) -> Type {\n+        let resolver = self.id.parent.resolver(db.upcast());\n+        let environment = TraitEnvironment::lower(db, &resolver);\n+        let ty = Ty::Placeholder(self.id);\n+        Type {\n+            krate: self.id.parent.module(db.upcast()).krate,\n+            ty: InEnvironment { value: ty, environment },\n+        }\n+    }\n }\n \n // FIXME: rename from `ImplDef` to `Impl`\n@@ -1157,18 +1167,21 @@ impl Type {\n \n     pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n         if let Ty::Apply(a_ty) = &self.ty.value {\n-            if let TypeCtor::Adt(AdtId::StructId(s)) = a_ty.ctor {\n-                let var_def = s.into();\n-                return db\n-                    .field_types(var_def)\n-                    .iter()\n-                    .map(|(local_id, ty)| {\n-                        let def = Field { parent: var_def.into(), id: local_id };\n-                        let ty = ty.clone().subst(&a_ty.parameters);\n-                        (def, self.derived(ty))\n-                    })\n-                    .collect();\n-            }\n+            let variant_id = match a_ty.ctor {\n+                TypeCtor::Adt(AdtId::StructId(s)) => s.into(),\n+                TypeCtor::Adt(AdtId::UnionId(u)) => u.into(),\n+                _ => return Vec::new(),\n+            };\n+\n+            return db\n+                .field_types(variant_id)\n+                .iter()\n+                .map(|(local_id, ty)| {\n+                    let def = Field { parent: variant_id.into(), id: local_id };\n+                    let ty = ty.clone().subst(&a_ty.parameters);\n+                    (def, self.derived(ty))\n+                })\n+                .collect();\n         };\n         Vec::new()\n     }"}, {"sha": "c5df4ac24da474e969eac53c332326164a49b214", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -70,6 +70,7 @@ pub use hir_def::{\n     type_ref::Mutability,\n };\n pub use hir_expand::{\n-    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n+    hygiene::Hygiene, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId,\n+    MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "515e5eb1713beff9ca63217f5407f8b04d565481", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -8,7 +8,8 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver},\n     AsMacroCall, TraitId,\n };\n-use hir_expand::ExpansionInfo;\n+use hir_expand::{hygiene::Hygiene, ExpansionInfo};\n+use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n use ra_prof::profile;\n@@ -24,8 +25,9 @@ use crate::{\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n     AssocItem, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module, ModuleDef,\n-    Name, Origin, Path, ScopeDef, Trait, Type, TypeParam,\n+    Name, Origin, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam,\n };\n+use resolver::TypeNs;\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum PathResolution {\n@@ -40,6 +42,44 @@ pub enum PathResolution {\n     AssocItem(AssocItem),\n }\n \n+impl PathResolution {\n+    fn in_type_ns(&self) -> Option<TypeNs> {\n+        match self {\n+            PathResolution::Def(ModuleDef::Adt(adt)) => Some(TypeNs::AdtId((*adt).into())),\n+            PathResolution::Def(ModuleDef::BuiltinType(builtin)) => {\n+                Some(TypeNs::BuiltinType(*builtin))\n+            }\n+            PathResolution::Def(ModuleDef::Const(_))\n+            | PathResolution::Def(ModuleDef::EnumVariant(_))\n+            | PathResolution::Def(ModuleDef::Function(_))\n+            | PathResolution::Def(ModuleDef::Module(_))\n+            | PathResolution::Def(ModuleDef::Static(_))\n+            | PathResolution::Def(ModuleDef::Trait(_)) => None,\n+            PathResolution::Def(ModuleDef::TypeAlias(alias)) => {\n+                Some(TypeNs::TypeAliasId((*alias).into()))\n+            }\n+            PathResolution::Local(_) | PathResolution::Macro(_) => None,\n+            PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n+            PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n+            PathResolution::AssocItem(AssocItem::Const(_))\n+            | PathResolution::AssocItem(AssocItem::Function(_)) => None,\n+            PathResolution::AssocItem(AssocItem::TypeAlias(alias)) => {\n+                Some(TypeNs::TypeAliasId((*alias).into()))\n+            }\n+        }\n+    }\n+\n+    /// Returns an iterator over associated types that may be specified after this path (using\n+    /// `Ty::Assoc` syntax).\n+    pub fn assoc_type_shorthand_candidates<R>(\n+        &self,\n+        db: &dyn HirDatabase,\n+        mut cb: impl FnMut(TypeAlias) -> Option<R>,\n+    ) -> Option<R> {\n+        associated_type_shorthand_candidates(db, self.in_type_ns()?, |_, _, id| cb(id.into()))\n+    }\n+}\n+\n /// Primary API to get semantic information, like types, from syntax trees.\n pub struct Semantics<'db, DB> {\n     pub db: &'db DB,\n@@ -206,6 +246,11 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n+    pub fn lower_path(&self, path: &ast::Path) -> Option<Path> {\n+        let src = self.find_file(path.syntax().clone());\n+        Path::from_src(path.clone(), &Hygiene::new(self.db.upcast(), src.file_id.into()))\n+    }\n+\n     pub fn resolve_bind_pat_to_const(&self, pat: &ast::BindPat) -> Option<ModuleDef> {\n         self.analyze(pat.syntax()).resolve_bind_pat_to_const(self.db, pat)\n     }"}, {"sha": "8af64fdc1b2583104ff3cc305bfdc74da502bf11", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -151,7 +151,7 @@ impl SourceToDefCtx<'_, '_> {\n         let krate = self.file_to_def(file_id)?.krate;\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = Some(AstId::new(src.file_id, file_ast_id));\n-        Some(MacroDefId { krate: Some(krate), ast_id, kind })\n+        Some(MacroDefId { krate: Some(krate), ast_id, kind, local_inner: false })\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {"}, {"sha": "c63d1b8473ef7dd931c05eafdb82f0f812446284", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -224,7 +224,8 @@ impl SourceAnalyzer {\n             }\n         }\n         // This must be a normal source file rather than macro file.\n-        let hir_path = crate::Path::from_ast(path.clone())?;\n+        let hir_path =\n+            crate::Path::from_src(path.clone(), &Hygiene::new(db.upcast(), self.file_id))?;\n         resolve_hir_path(db, &self.resolver, &hir_path)\n     }\n "}, {"sha": "8eef518283536b4a65d21bf1b78dfa7677bf57ad", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -12,9 +12,15 @@ use ra_prof::profile;\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n use crate::{\n-    body::CfgExpander, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n-    type_ref::TypeRef, visibility::RawVisibility, EnumId, HasModule, LocalEnumVariantId,\n-    LocalFieldId, Lookup, ModuleId, StructId, UnionId, VariantId,\n+    body::{CfgExpander, LowerCtx},\n+    db::DefDatabase,\n+    src::HasChildSource,\n+    src::HasSource,\n+    trace::Trace,\n+    type_ref::TypeRef,\n+    visibility::RawVisibility,\n+    EnumId, HasModule, LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StructId, UnionId,\n+    VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -198,6 +204,8 @@ fn lower_struct(\n     trace: &mut Trace<FieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n     ast: &InFile<ast::StructKind>,\n ) -> StructKind {\n+    let ctx = LowerCtx::new(db, ast.file_id);\n+\n     match &ast.value {\n         ast::StructKind::Tuple(fl) => {\n             for (i, fd) in fl.fields().enumerate() {\n@@ -210,7 +218,7 @@ fn lower_struct(\n                     || Either::Left(fd.clone()),\n                     || FieldData {\n                         name: Name::new_tuple_field(i),\n-                        type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n+                        type_ref: TypeRef::from_ast_opt(&ctx, fd.type_ref()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );\n@@ -228,7 +236,7 @@ fn lower_struct(\n                     || Either::Right(fd.clone()),\n                     || FieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n-                        type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n+                        type_ref: TypeRef::from_ast_opt(&ctx, fd.ascribed_type()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );"}, {"sha": "576cd0c65ba984b9b00dccf62877588e18981564", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -140,6 +140,7 @@ impl Attr {\n     }\n }\n \n+#[derive(Debug, Clone, Copy)]\n pub struct AttrQuery<'a> {\n     attrs: &'a Attrs,\n     key: &'static str,"}, {"sha": "4edaad9600afce6223a2f6b2eb42a227325d5d94", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -15,6 +15,8 @@ use ra_prof::profile;\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n \n+pub(crate) use lower::LowerCtx;\n+\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,"}, {"sha": "687216dc35ea90a72d43f0c0f57d08d580dcd1e6", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -3,8 +3,9 @@\n \n use either::Either;\n use hir_expand::{\n+    hygiene::Hygiene,\n     name::{name, AsName, Name},\n-    MacroDefId, MacroDefKind,\n+    HirFileId, MacroDefId, MacroDefKind,\n };\n use ra_arena::Arena;\n use ra_syntax::{\n@@ -26,7 +27,7 @@ use crate::{\n         LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     item_scope::BuiltinShadowMode,\n-    path::GenericArgs,\n+    path::{GenericArgs, Path},\n     type_ref::{Mutability, TypeRef},\n     AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n     StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n@@ -35,17 +36,37 @@ use crate::{\n use super::{ExprSource, PatSource};\n use ast::AstChildren;\n \n+pub(crate) struct LowerCtx {\n+    hygiene: Hygiene,\n+}\n+\n+impl LowerCtx {\n+    pub fn new(db: &dyn DefDatabase, file_id: HirFileId) -> Self {\n+        LowerCtx { hygiene: Hygiene::new(db.upcast(), file_id) }\n+    }\n+    pub fn with_hygiene(hygiene: &Hygiene) -> Self {\n+        LowerCtx { hygiene: hygiene.clone() }\n+    }\n+\n+    pub fn lower_path(&self, ast: ast::Path) -> Option<Path> {\n+        Path::from_src(ast, &self.hygiene)\n+    }\n+}\n+\n pub(super) fn lower(\n     db: &dyn DefDatabase,\n     def: DefWithBodyId,\n     expander: Expander,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n+    let ctx = LowerCtx::new(db, expander.current_file_id.clone());\n+\n     ExprCollector {\n         db,\n         def,\n         expander,\n+        ctx,\n         source_map: BodySourceMap::default(),\n         body: Body {\n             exprs: Arena::default(),\n@@ -62,7 +83,7 @@ struct ExprCollector<'a> {\n     db: &'a dyn DefDatabase,\n     def: DefWithBodyId,\n     expander: Expander,\n-\n+    ctx: LowerCtx,\n     body: Body,\n     source_map: BodySourceMap,\n }\n@@ -182,10 +203,16 @@ impl ExprCollector<'_> {\n \n                 self.alloc_expr(Expr::If { condition, then_branch, else_branch }, syntax_ptr)\n             }\n-            ast::Expr::TryBlockExpr(e) => {\n-                let body = self.collect_block_opt(e.body());\n-                self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n-            }\n+            ast::Expr::EffectExpr(e) => match e.effect() {\n+                ast::Effect::Try(_) => {\n+                    let body = self.collect_block_opt(e.block_expr());\n+                    self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n+                }\n+                // FIXME: we need to record these effects somewhere...\n+                ast::Effect::Async(_) | ast::Effect::Label(_) | ast::Effect::Unsafe(_) => {\n+                    self.collect_block_opt(e.block_expr())\n+                }\n+            },\n             ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n                 let body = self.collect_block_opt(e.loop_body());\n@@ -241,7 +268,8 @@ impl ExprCollector<'_> {\n                     Vec::new()\n                 };\n                 let method_name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n-                let generic_args = e.type_arg_list().and_then(GenericArgs::from_ast);\n+                let generic_args =\n+                    e.type_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx, it));\n                 self.alloc_expr(\n                     Expr::MethodCall { receiver, method_name, args, generic_args },\n                     syntax_ptr,\n@@ -347,7 +375,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::CastExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let type_ref = TypeRef::from_ast_opt(e.type_ref());\n+                let type_ref = TypeRef::from_ast_opt(&self.ctx, e.type_ref());\n                 self.alloc_expr(Expr::Cast { expr, type_ref }, syntax_ptr)\n             }\n             ast::Expr::RefExpr(e) => {\n@@ -369,12 +397,16 @@ impl ExprCollector<'_> {\n                 if let Some(pl) = e.param_list() {\n                     for param in pl.params() {\n                         let pat = self.collect_pat_opt(param.pat());\n-                        let type_ref = param.ascribed_type().map(TypeRef::from_ast);\n+                        let type_ref =\n+                            param.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx, it));\n                         args.push(pat);\n                         arg_types.push(type_ref);\n                     }\n                 }\n-                let ret_type = e.ret_type().and_then(|r| r.type_ref()).map(TypeRef::from_ast);\n+                let ret_type = e\n+                    .ret_type()\n+                    .and_then(|r| r.type_ref())\n+                    .map(|it| TypeRef::from_ast(&self.ctx, it));\n                 let body = self.collect_expr_opt(e.body());\n                 self.alloc_expr(Expr::Lambda { args, arg_types, ret_type, body }, syntax_ptr)\n             }\n@@ -434,6 +466,7 @@ impl ExprCollector<'_> {\n                         krate: Some(self.expander.module.krate),\n                         ast_id: Some(self.expander.ast_id(&e)),\n                         kind: MacroDefKind::Declarative,\n+                        local_inner: false,\n                     };\n                     self.body.item_scope.define_legacy_macro(name, mac);\n \n@@ -468,19 +501,15 @@ impl ExprCollector<'_> {\n         }\n     }\n \n-    fn collect_block(&mut self, expr: ast::BlockExpr) -> ExprId {\n-        let syntax_node_ptr = AstPtr::new(&expr.clone().into());\n-        let block = match expr.block() {\n-            Some(block) => block,\n-            None => return self.alloc_expr(Expr::Missing, syntax_node_ptr),\n-        };\n+    fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n+        let syntax_node_ptr = AstPtr::new(&block.clone().into());\n         self.collect_block_items(&block);\n         let statements = block\n             .statements()\n             .map(|s| match s {\n                 ast::Stmt::LetStmt(stmt) => {\n                     let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref = stmt.ascribed_type().map(TypeRef::from_ast);\n+                    let type_ref = stmt.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx, it));\n                     let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n                     Statement::Let { pat, type_ref, initializer }\n                 }\n@@ -491,7 +520,7 @@ impl ExprCollector<'_> {\n         self.alloc_expr(Expr::Block { statements, tail }, syntax_node_ptr)\n     }\n \n-    fn collect_block_items(&mut self, block: &ast::Block) {\n+    fn collect_block_items(&mut self, block: &ast::BlockExpr) {\n         let container = ContainerId::DefWithBodyId(self.def);\n         for item in block.items() {\n             let (def, name): (ModuleDefId, Option<ast::Name>) = match item {"}, {"sha": "7a2067e49cb7fef0f783d6e3c1ce4c6245c27722", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -15,6 +15,7 @@ use ra_syntax::ast::{\n \n use crate::{\n     attr::Attrs,\n+    body::LowerCtx,\n     db::DefDatabase,\n     path::{path, AssociatedTypeBinding, GenericArgs, Path},\n     src::HasSource,\n@@ -40,13 +41,14 @@ impl FunctionData {\n     pub(crate) fn fn_data_query(db: &impl DefDatabase, func: FunctionId) -> Arc<FunctionData> {\n         let loc = func.lookup(db);\n         let src = loc.source(db);\n+        let ctx = LowerCtx::new(db, src.file_id);\n         let name = src.value.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();\n         let mut has_self_param = false;\n         if let Some(param_list) = src.value.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n                 let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n-                    TypeRef::from_ast(type_ref)\n+                    TypeRef::from_ast(&ctx, type_ref)\n                 } else {\n                     let self_type = TypeRef::Path(name![Self].into());\n                     match self_param.kind() {\n@@ -63,14 +65,14 @@ impl FunctionData {\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n+                let type_ref = TypeRef::from_ast_opt(&ctx, param.ascribed_type());\n                 params.push(type_ref);\n             }\n         }\n         let attrs = Attrs::new(&src.value, &Hygiene::new(db.upcast(), src.file_id));\n \n         let ret_type = if let Some(type_ref) = src.value.ret_type().and_then(|rt| rt.type_ref()) {\n-            TypeRef::from_ast(type_ref)\n+            TypeRef::from_ast(&ctx, type_ref)\n         } else {\n             TypeRef::unit()\n         };\n@@ -122,15 +124,16 @@ impl TypeAliasData {\n         let loc = typ.lookup(db);\n         let node = loc.source(db);\n         let name = node.value.name().map_or_else(Name::missing, |n| n.as_name());\n-        let type_ref = node.value.type_ref().map(TypeRef::from_ast);\n+        let lower_ctx = LowerCtx::new(db, node.file_id);\n+        let type_ref = node.value.type_ref().map(|it| TypeRef::from_ast(&lower_ctx, it));\n         let vis_default = RawVisibility::default_for_container(loc.container);\n         let visibility = RawVisibility::from_ast_with_default(\n             db,\n             vis_default,\n             node.as_ref().map(|n| n.visibility()),\n         );\n         let bounds = if let Some(bound_list) = node.value.type_bound_list() {\n-            bound_list.bounds().map(TypeBound::from_ast).collect()\n+            bound_list.bounds().map(|it| TypeBound::from_ast(&lower_ctx, it)).collect()\n         } else {\n             Vec::new()\n         };\n@@ -223,9 +226,10 @@ impl ImplData {\n         let _p = profile(\"impl_data_query\");\n         let impl_loc = id.lookup(db);\n         let src = impl_loc.source(db);\n+        let lower_ctx = LowerCtx::new(db, src.file_id);\n \n-        let target_trait = src.value.target_trait().map(TypeRef::from_ast);\n-        let target_type = TypeRef::from_ast_opt(src.value.target_type());\n+        let target_trait = src.value.target_trait().map(|it| TypeRef::from_ast(&lower_ctx, it));\n+        let target_type = TypeRef::from_ast_opt(&lower_ctx, src.value.target_type());\n         let is_negative = src.value.excl_token().is_some();\n         let module_id = impl_loc.container.module(db);\n \n@@ -279,8 +283,9 @@ impl ConstData {\n         vis_default: RawVisibility,\n         node: InFile<N>,\n     ) -> ConstData {\n+        let ctx = LowerCtx::new(db, node.file_id);\n         let name = node.value.name().map(|n| n.as_name());\n-        let type_ref = TypeRef::from_ast_opt(node.value.ascribed_type());\n+        let type_ref = TypeRef::from_ast_opt(&ctx, node.value.ascribed_type());\n         let visibility =\n             RawVisibility::from_ast_with_default(db, vis_default, node.map(|n| n.visibility()));\n         ConstData { name, type_ref, visibility }"}, {"sha": "09a5241f7812b533f0e63c9509f2747a3eddd8c6", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 47, "deletions": 21, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -15,6 +15,7 @@ use ra_prof::profile;\n use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n+    body::LowerCtx,\n     child_by_source::ChildBySource,\n     db::DefDatabase,\n     dyn_map::DynMap,\n@@ -80,11 +81,13 @@ impl GenericParams {\n     fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {\n         let mut generics = GenericParams { types: Arena::default(), where_predicates: Vec::new() };\n         let mut sm = ArenaMap::default();\n+\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         let file_id = match def {\n             GenericDefId::FunctionId(it) => {\n                 let src = it.lookup(db).source(db);\n-                generics.fill(&mut sm, &src.value);\n+                let lower_ctx = LowerCtx::new(db, src.file_id);\n+                generics.fill(&lower_ctx, &mut sm, &src.value);\n                 // lower `impl Trait` in arguments\n                 let data = db.function_data(it);\n                 for param in &data.params {\n@@ -94,21 +97,25 @@ impl GenericParams {\n             }\n             GenericDefId::AdtId(AdtId::StructId(it)) => {\n                 let src = it.lookup(db).source(db);\n-                generics.fill(&mut sm, &src.value);\n+                let lower_ctx = LowerCtx::new(db, src.file_id);\n+                generics.fill(&lower_ctx, &mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::UnionId(it)) => {\n                 let src = it.lookup(db).source(db);\n-                generics.fill(&mut sm, &src.value);\n+                let lower_ctx = LowerCtx::new(db, src.file_id);\n+                generics.fill(&lower_ctx, &mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::EnumId(it)) => {\n                 let src = it.lookup(db).source(db);\n-                generics.fill(&mut sm, &src.value);\n+                let lower_ctx = LowerCtx::new(db, src.file_id);\n+                generics.fill(&lower_ctx, &mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::TraitId(it) => {\n                 let src = it.lookup(db).source(db);\n+                let lower_ctx = LowerCtx::new(db, src.file_id);\n \n                 // traits get the Self type as an implicit first type parameter\n                 let self_param_id = generics.types.alloc(TypeParamData {\n@@ -120,22 +127,26 @@ impl GenericParams {\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name![Self].into());\n-                generics.fill_bounds(&src.value, self_param);\n+                generics.fill_bounds(&lower_ctx, &src.value, self_param);\n \n-                generics.fill(&mut sm, &src.value);\n+                generics.fill(&lower_ctx, &mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::TypeAliasId(it) => {\n                 let src = it.lookup(db).source(db);\n-                generics.fill(&mut sm, &src.value);\n+                let lower_ctx = LowerCtx::new(db, src.file_id);\n+\n+                generics.fill(&lower_ctx, &mut sm, &src.value);\n                 src.file_id\n             }\n             // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n             // type-parameter, but rather is a type-alias for impl's target\n             // type, so this is handled by the resolver.\n             GenericDefId::ImplId(it) => {\n                 let src = it.lookup(db).source(db);\n-                generics.fill(&mut sm, &src.value);\n+                let lower_ctx = LowerCtx::new(db, src.file_id);\n+\n+                generics.fill(&lower_ctx, &mut sm, &src.value);\n                 src.file_id\n             }\n             // We won't be using this ID anyway\n@@ -145,28 +156,38 @@ impl GenericParams {\n         (generics, InFile::new(file_id, sm))\n     }\n \n-    fn fill(&mut self, sm: &mut SourceMap, node: &dyn TypeParamsOwner) {\n+    fn fill(&mut self, lower_ctx: &LowerCtx, sm: &mut SourceMap, node: &dyn TypeParamsOwner) {\n         if let Some(params) = node.type_param_list() {\n-            self.fill_params(sm, params)\n+            self.fill_params(lower_ctx, sm, params)\n         }\n         if let Some(where_clause) = node.where_clause() {\n-            self.fill_where_predicates(where_clause);\n+            self.fill_where_predicates(lower_ctx, where_clause);\n         }\n     }\n \n-    fn fill_bounds(&mut self, node: &dyn ast::TypeBoundsOwner, type_ref: TypeRef) {\n+    fn fill_bounds(\n+        &mut self,\n+        lower_ctx: &LowerCtx,\n+        node: &dyn ast::TypeBoundsOwner,\n+        type_ref: TypeRef,\n+    ) {\n         for bound in\n             node.type_bound_list().iter().flat_map(|type_bound_list| type_bound_list.bounds())\n         {\n-            self.add_where_predicate_from_bound(bound, type_ref.clone());\n+            self.add_where_predicate_from_bound(lower_ctx, bound, type_ref.clone());\n         }\n     }\n \n-    fn fill_params(&mut self, sm: &mut SourceMap, params: ast::TypeParamList) {\n+    fn fill_params(\n+        &mut self,\n+        lower_ctx: &LowerCtx,\n+        sm: &mut SourceMap,\n+        params: ast::TypeParamList,\n+    ) {\n         for type_param in params.type_params() {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n-            let default = type_param.default_type().map(TypeRef::from_ast);\n+            let default = type_param.default_type().map(|it| TypeRef::from_ast(lower_ctx, it));\n             let param = TypeParamData {\n                 name: Some(name.clone()),\n                 default,\n@@ -176,29 +197,34 @@ impl GenericParams {\n             sm.insert(param_id, Either::Right(type_param.clone()));\n \n             let type_ref = TypeRef::Path(name.into());\n-            self.fill_bounds(&type_param, type_ref);\n+            self.fill_bounds(&lower_ctx, &type_param, type_ref);\n         }\n     }\n \n-    fn fill_where_predicates(&mut self, where_clause: ast::WhereClause) {\n+    fn fill_where_predicates(&mut self, lower_ctx: &LowerCtx, where_clause: ast::WhereClause) {\n         for pred in where_clause.predicates() {\n             let type_ref = match pred.type_ref() {\n                 Some(type_ref) => type_ref,\n                 None => continue,\n             };\n-            let type_ref = TypeRef::from_ast(type_ref);\n+            let type_ref = TypeRef::from_ast(lower_ctx, type_ref);\n             for bound in pred.type_bound_list().iter().flat_map(|l| l.bounds()) {\n-                self.add_where_predicate_from_bound(bound, type_ref.clone());\n+                self.add_where_predicate_from_bound(lower_ctx, bound, type_ref.clone());\n             }\n         }\n     }\n \n-    fn add_where_predicate_from_bound(&mut self, bound: ast::TypeBound, type_ref: TypeRef) {\n+    fn add_where_predicate_from_bound(\n+        &mut self,\n+        lower_ctx: &LowerCtx,\n+        bound: ast::TypeBound,\n+        type_ref: TypeRef,\n+    ) {\n         if bound.question_token().is_some() {\n             // FIXME: remove this bound\n             return;\n         }\n-        let bound = TypeBound::from_ast(bound);\n+        let bound = TypeBound::from_ast(lower_ctx, bound);\n         self.where_predicates\n             .push(WherePredicate { target: WherePredicateTarget::TypeRef(type_ref), bound });\n     }"}, {"sha": "bf3968bd62ac04366ff86f2080bc2c5a7ac7111d", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -204,6 +204,7 @@ impl DefCollector<'_> {\n                 ast_id: None,\n                 krate: Some(krate),\n                 kind: MacroDefKind::CustomDerive(expander),\n+                local_inner: false,\n             };\n \n             self.define_proc_macro(name.clone(), macro_id);\n@@ -941,6 +942,7 @@ impl ModCollector<'_, '_> {\n                     ast_id: Some(ast_id.ast_id),\n                     krate: Some(self.def_collector.def_map.krate),\n                     kind: MacroDefKind::Declarative,\n+                    local_inner: mac.local_inner,\n                 };\n                 self.def_collector.define_macro(self.module_id, name.clone(), macro_id, mac.export);\n             }"}, {"sha": "a71503c76ecdfa3aec10bc4d22dff4994f6ccd56", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -188,6 +188,7 @@ pub(super) struct MacroData {\n     pub(super) path: ModPath,\n     pub(super) name: Option<Name>,\n     pub(super) export: bool,\n+    pub(super) local_inner: bool,\n     pub(super) builtin: bool,\n }\n \n@@ -401,14 +402,32 @@ impl RawItemsCollector {\n \n         let name = m.name().map(|it| it.as_name());\n         let ast_id = self.source_ast_id_map.ast_id(&m);\n-        // FIXME: cfg_attr\n-        let export = m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"macro_export\");\n \n         // FIXME: cfg_attr\n-        let builtin =\n-            m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"rustc_builtin_macro\");\n+        let export_attr = attrs.by_key(\"macro_export\");\n+\n+        let export = export_attr.exists();\n+        let local_inner = if export {\n+            export_attr.tt_values().map(|it| &it.token_trees).flatten().any(|it| match it {\n+                tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n+                    ident.text.contains(\"local_inner_macros\")\n+                }\n+                _ => false,\n+            })\n+        } else {\n+            false\n+        };\n+\n+        let builtin = attrs.by_key(\"rustc_builtin_macro\").exists();\n \n-        let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export, builtin });\n+        let m = self.raw_items.macros.alloc(MacroData {\n+            ast_id,\n+            path,\n+            name,\n+            export,\n+            local_inner,\n+            builtin,\n+        });\n         self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n "}, {"sha": "9bc0e628747c586181a9621e90a3c77b41ea897b", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -135,6 +135,43 @@ fn macro_rules_export_with_local_inner_macros_are_visible() {\n     \"###);\n }\n \n+#[test]\n+fn local_inner_macros_makes_local_macros_usable() {\n+    let map = def_map(\n+        \"\n+        //- /main.rs crate:main deps:foo\n+        foo::structs!(Foo, Bar);\n+        mod bar;\n+        //- /bar.rs\n+        use crate::*;\n+        //- /lib.rs crate:foo\n+        #[macro_export(local_inner_macros)]\n+        macro_rules! structs {\n+            ($($i:ident),*) => {\n+                inner!($($i),*);\n+            }\n+        }\n+        #[macro_export]\n+        macro_rules! inner {\n+            ($($i:ident),*) => {\n+                $(struct $i { field: u32 } )*\n+            }\n+        }\n+        \",\n+    );\n+    assert_snapshot!(map, @r###\"\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22ee\n+   \u22eecrate::bar\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+    \"###);\n+}\n+\n #[test]\n fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n     let map = def_map("}, {"sha": "e84efe2abd04e6edbfbd7f9f264a0b9c4611d945", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -7,6 +7,7 @@ use std::{\n     sync::Arc,\n };\n \n+use crate::body::LowerCtx;\n use hir_expand::{\n     hygiene::Hygiene,\n     name::{AsName, Name},\n@@ -244,8 +245,8 @@ impl<'a> PathSegments<'a> {\n }\n \n impl GenericArgs {\n-    pub(crate) fn from_ast(node: ast::TypeArgList) -> Option<GenericArgs> {\n-        lower::lower_generic_args(node)\n+    pub(crate) fn from_ast(lower_ctx: &LowerCtx, node: ast::TypeArgList) -> Option<GenericArgs> {\n+        lower::lower_generic_args(lower_ctx, node)\n     }\n \n     pub(crate) fn empty() -> GenericArgs {"}, {"sha": "6a0c019fdff9862530ac35d254186e742a871254", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -13,6 +13,7 @@ use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner, TypeBoundsOwner};\n \n use super::AssociatedTypeBinding;\n use crate::{\n+    body::LowerCtx,\n     path::{GenericArg, GenericArgs, ModPath, Path, PathKind},\n     type_ref::{TypeBound, TypeRef},\n };\n@@ -26,6 +27,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n     let mut type_anchor = None;\n     let mut segments = Vec::new();\n     let mut generic_args = Vec::new();\n+    let ctx = LowerCtx::with_hygiene(hygiene);\n     loop {\n         let segment = path.segment()?;\n \n@@ -40,9 +42,10 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                     Either::Left(name) => {\n                         let args = segment\n                             .type_arg_list()\n-                            .and_then(lower_generic_args)\n+                            .and_then(|it| lower_generic_args(&ctx, it))\n                             .or_else(|| {\n                                 lower_generic_args_from_fn_path(\n+                                    &ctx,\n                                     segment.param_list(),\n                                     segment.ret_type(),\n                                 )\n@@ -60,7 +63,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n             ast::PathSegmentKind::Type { type_ref, trait_ref } => {\n                 assert!(path.qualifier().is_none()); // this can only occur at the first segment\n \n-                let self_type = TypeRef::from_ast(type_ref?);\n+                let self_type = TypeRef::from_ast(&ctx, type_ref?);\n \n                 match trait_ref {\n                     // <T>::foo\n@@ -113,6 +116,21 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n     }\n     segments.reverse();\n     generic_args.reverse();\n+\n+    // handle local_inner_macros :\n+    // Basically, even in rustc it is quite hacky:\n+    // https://github.com/rust-lang/rust/blob/614f273e9388ddd7804d5cbc80b8865068a3744e/src/librustc_resolve/macros.rs#L456\n+    // We follow what it did anyway :)\n+    if segments.len() == 1 && kind == PathKind::Plain {\n+        if let Some(macro_call) = path.syntax().parent().and_then(ast::MacroCall::cast) {\n+            if macro_call.is_bang() {\n+                if let Some(crate_id) = hygiene.local_inner_macros() {\n+                    kind = PathKind::DollarCrate(crate_id);\n+                }\n+            }\n+        }\n+    }\n+\n     let mod_path = ModPath { kind, segments };\n     return Some(Path { type_anchor, mod_path, generic_args });\n \n@@ -128,10 +146,13 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n     }\n }\n \n-pub(super) fn lower_generic_args(node: ast::TypeArgList) -> Option<GenericArgs> {\n+pub(super) fn lower_generic_args(\n+    lower_ctx: &LowerCtx,\n+    node: ast::TypeArgList,\n+) -> Option<GenericArgs> {\n     let mut args = Vec::new();\n     for type_arg in node.type_args() {\n-        let type_ref = TypeRef::from_ast_opt(type_arg.type_ref());\n+        let type_ref = TypeRef::from_ast_opt(lower_ctx, type_arg.type_ref());\n         args.push(GenericArg::Type(type_ref));\n     }\n     // lifetimes ignored for now\n@@ -140,9 +161,9 @@ pub(super) fn lower_generic_args(node: ast::TypeArgList) -> Option<GenericArgs>\n         let assoc_type_arg: ast::AssocTypeArg = assoc_type_arg;\n         if let Some(name_ref) = assoc_type_arg.name_ref() {\n             let name = name_ref.as_name();\n-            let type_ref = assoc_type_arg.type_ref().map(TypeRef::from_ast);\n+            let type_ref = assoc_type_arg.type_ref().map(|it| TypeRef::from_ast(lower_ctx, it));\n             let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n-                l.bounds().map(TypeBound::from_ast).collect()\n+                l.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n             } else {\n                 Vec::new()\n             };\n@@ -159,6 +180,7 @@ pub(super) fn lower_generic_args(node: ast::TypeArgList) -> Option<GenericArgs>\n /// Collect `GenericArgs` from the parts of a fn-like path, i.e. `Fn(X, Y)\n /// -> Z` (which desugars to `Fn<(X, Y), Output=Z>`).\n fn lower_generic_args_from_fn_path(\n+    ctx: &LowerCtx,\n     params: Option<ast::ParamList>,\n     ret_type: Option<ast::RetType>,\n ) -> Option<GenericArgs> {\n@@ -167,14 +189,14 @@ fn lower_generic_args_from_fn_path(\n     if let Some(params) = params {\n         let mut param_types = Vec::new();\n         for param in params.params() {\n-            let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n+            let type_ref = TypeRef::from_ast_opt(&ctx, param.ascribed_type());\n             param_types.push(type_ref);\n         }\n         let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n         args.push(arg);\n     }\n     if let Some(ret_type) = ret_type {\n-        let type_ref = TypeRef::from_ast_opt(ret_type.type_ref());\n+        let type_ref = TypeRef::from_ast_opt(&ctx, ret_type.type_ref());\n         bindings.push(AssociatedTypeBinding {\n             name: name![Output],\n             type_ref: Some(type_ref),"}, {"sha": "5bdad9efdef3276a61202853552bdac2b9907909", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -3,7 +3,7 @@\n \n use ra_syntax::ast::{self, TypeAscriptionOwner, TypeBoundsOwner};\n \n-use crate::path::Path;\n+use crate::{body::LowerCtx, path::Path};\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Mutability {\n@@ -64,30 +64,34 @@ pub enum TypeBound {\n \n impl TypeRef {\n     /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n-    pub(crate) fn from_ast(node: ast::TypeRef) -> Self {\n+    pub(crate) fn from_ast(ctx: &LowerCtx, node: ast::TypeRef) -> Self {\n         match node {\n-            ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(inner.type_ref()),\n+            ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(&ctx, inner.type_ref()),\n             ast::TypeRef::TupleType(inner) => {\n-                TypeRef::Tuple(inner.fields().map(TypeRef::from_ast).collect())\n+                TypeRef::Tuple(inner.fields().map(|it| TypeRef::from_ast(ctx, it)).collect())\n             }\n             ast::TypeRef::NeverType(..) => TypeRef::Never,\n             ast::TypeRef::PathType(inner) => {\n                 // FIXME: Use `Path::from_src`\n-                inner.path().and_then(Path::from_ast).map(TypeRef::Path).unwrap_or(TypeRef::Error)\n+                inner\n+                    .path()\n+                    .and_then(|it| ctx.lower_path(it))\n+                    .map(TypeRef::Path)\n+                    .unwrap_or(TypeRef::Error)\n             }\n             ast::TypeRef::PointerType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n+                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.type_ref());\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::ArrayType(inner) => {\n-                TypeRef::Array(Box::new(TypeRef::from_ast_opt(inner.type_ref())))\n+                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.type_ref())))\n             }\n             ast::TypeRef::SliceType(inner) => {\n-                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(inner.type_ref())))\n+                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.type_ref())))\n             }\n             ast::TypeRef::ReferenceType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n+                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.type_ref());\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), mutability)\n             }\n@@ -96,30 +100,33 @@ impl TypeRef {\n                 let ret_ty = inner\n                     .ret_type()\n                     .and_then(|rt| rt.type_ref())\n-                    .map(TypeRef::from_ast)\n+                    .map(|it| TypeRef::from_ast(ctx, it))\n                     .unwrap_or_else(|| TypeRef::Tuple(Vec::new()));\n                 let mut params = if let Some(pl) = inner.param_list() {\n-                    pl.params().map(|p| p.ascribed_type()).map(TypeRef::from_ast_opt).collect()\n+                    pl.params()\n+                        .map(|p| p.ascribed_type())\n+                        .map(|it| TypeRef::from_ast_opt(&ctx, it))\n+                        .collect()\n                 } else {\n                     Vec::new()\n                 };\n                 params.push(ret_ty);\n                 TypeRef::Fn(params)\n             }\n             // for types are close enough for our purposes to the inner type for now...\n-            ast::TypeRef::ForType(inner) => TypeRef::from_ast_opt(inner.type_ref()),\n+            ast::TypeRef::ForType(inner) => TypeRef::from_ast_opt(&ctx, inner.type_ref()),\n             ast::TypeRef::ImplTraitType(inner) => {\n-                TypeRef::ImplTrait(type_bounds_from_ast(inner.type_bound_list()))\n+                TypeRef::ImplTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n             ast::TypeRef::DynTraitType(inner) => {\n-                TypeRef::DynTrait(type_bounds_from_ast(inner.type_bound_list()))\n+                TypeRef::DynTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n         }\n     }\n \n-    pub(crate) fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n+    pub(crate) fn from_ast_opt(ctx: &LowerCtx, node: Option<ast::TypeRef>) -> Self {\n         if let Some(node) = node {\n-            TypeRef::from_ast(node)\n+            TypeRef::from_ast(ctx, node)\n         } else {\n             TypeRef::Error\n         }\n@@ -180,24 +187,27 @@ impl TypeRef {\n     }\n }\n \n-pub(crate) fn type_bounds_from_ast(type_bounds_opt: Option<ast::TypeBoundList>) -> Vec<TypeBound> {\n+pub(crate) fn type_bounds_from_ast(\n+    lower_ctx: &LowerCtx,\n+    type_bounds_opt: Option<ast::TypeBoundList>,\n+) -> Vec<TypeBound> {\n     if let Some(type_bounds) = type_bounds_opt {\n-        type_bounds.bounds().map(TypeBound::from_ast).collect()\n+        type_bounds.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n     } else {\n         vec![]\n     }\n }\n \n impl TypeBound {\n-    pub(crate) fn from_ast(node: ast::TypeBound) -> Self {\n+    pub(crate) fn from_ast(ctx: &LowerCtx, node: ast::TypeBound) -> Self {\n         match node.kind() {\n             ast::TypeBoundKind::PathType(path_type) => {\n                 let path = match path_type.path() {\n                     Some(p) => p,\n                     None => return TypeBound::Error,\n                 };\n-                // FIXME: Use `Path::from_src`\n-                let path = match Path::from_ast(path) {\n+\n+                let path = match ctx.lower_path(path) {\n                     Some(p) => p,\n                     None => return TypeBound::Error,\n                 };"}, {"sha": "1dc9cac6651e18f377e01e8bd888707211f1dfd2", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -38,7 +38,7 @@ macro_rules! register_builtin {\n                  _ => return None,\n             };\n \n-            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind) })\n+            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind), local_inner: false })\n         }\n     };\n }"}, {"sha": "d8b3d342ce3a3b4a4a85de03cc47c21281e3cee4", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -73,11 +73,13 @@ pub fn find_builtin_macro(\n             krate: Some(krate),\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltIn(kind),\n+            local_inner: false,\n         }),\n         Either::Right(kind) => Some(MacroDefId {\n             krate: Some(krate),\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltInEager(kind),\n+            local_inner: false,\n         }),\n     }\n }\n@@ -406,6 +408,7 @@ mod tests {\n                     krate: Some(CrateId(0)),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n                     kind: MacroDefKind::BuiltIn(expander),\n+                    local_inner: false,\n                 };\n \n                 let loc = MacroCallLoc {\n@@ -425,6 +428,7 @@ mod tests {\n                     krate: Some(CrateId(0)),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n                     kind: MacroDefKind::BuiltInEager(expander),\n+                    local_inner: false,\n                 };\n \n                 let args = macro_calls[1].token_tree().unwrap();"}, {"sha": "4c12d0a15962283f01820ccc03fabb4528bdcd6d", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -330,7 +330,7 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n             FragmentKind::Expr\n         }\n         // FIXME: Expand to statements in appropriate positions; HIR lowering needs to handle that\n-        EXPR_STMT | BLOCK => FragmentKind::Expr,\n+        EXPR_STMT | BLOCK_EXPR => FragmentKind::Expr,\n         ARG_LIST => FragmentKind::Expr,\n         TRY_EXPR => FragmentKind::Expr,\n         TUPLE_EXPR => FragmentKind::Expr,\n@@ -342,7 +342,6 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n         CONDITION => FragmentKind::Expr,\n         BREAK_EXPR => FragmentKind::Expr,\n         RETURN_EXPR => FragmentKind::Expr,\n-        BLOCK_EXPR => FragmentKind::Expr,\n         MATCH_EXPR => FragmentKind::Expr,\n         MATCH_ARM => FragmentKind::Expr,\n         MATCH_GUARD => FragmentKind::Expr,"}, {"sha": "6b482a60c5400ef4f157c05b2caf10bc140f19b7", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -12,35 +12,38 @@ use crate::{\n     HirFileId, HirFileIdRepr, MacroCallId, MacroDefKind,\n };\n \n-#[derive(Debug)]\n+#[derive(Clone, Debug)]\n pub struct Hygiene {\n     // This is what `$crate` expands to\n     def_crate: Option<CrateId>,\n+\n+    // Indiciate this is a local inner macro\n+    local_inner: bool,\n }\n \n impl Hygiene {\n     pub fn new(db: &dyn AstDatabase, file_id: HirFileId) -> Hygiene {\n-        let def_crate = match file_id.0 {\n-            HirFileIdRepr::FileId(_) => None,\n+        let (def_crate, local_inner) = match file_id.0 {\n+            HirFileIdRepr::FileId(_) => (None, false),\n             HirFileIdRepr::MacroFile(macro_file) => match macro_file.macro_call_id {\n                 MacroCallId::LazyMacro(id) => {\n                     let loc = db.lookup_intern_macro(id);\n                     match loc.def.kind {\n-                        MacroDefKind::Declarative => loc.def.krate,\n-                        MacroDefKind::BuiltIn(_) => None,\n-                        MacroDefKind::BuiltInDerive(_) => None,\n-                        MacroDefKind::BuiltInEager(_) => None,\n-                        MacroDefKind::CustomDerive(_) => None,\n+                        MacroDefKind::Declarative => (loc.def.krate, loc.def.local_inner),\n+                        MacroDefKind::BuiltIn(_) => (None, false),\n+                        MacroDefKind::BuiltInDerive(_) => (None, false),\n+                        MacroDefKind::BuiltInEager(_) => (None, false),\n+                        MacroDefKind::CustomDerive(_) => (None, false),\n                     }\n                 }\n-                MacroCallId::EagerMacro(_id) => None,\n+                MacroCallId::EagerMacro(_id) => (None, false),\n             },\n         };\n-        Hygiene { def_crate }\n+        Hygiene { def_crate, local_inner }\n     }\n \n     pub fn new_unhygienic() -> Hygiene {\n-        Hygiene { def_crate: None }\n+        Hygiene { def_crate: None, local_inner: false }\n     }\n \n     // FIXME: this should just return name\n@@ -52,4 +55,12 @@ impl Hygiene {\n         }\n         Either::Left(name_ref.as_name())\n     }\n+\n+    pub fn local_inner_macros(&self) -> Option<CrateId> {\n+        if self.local_inner {\n+            self.def_crate\n+        } else {\n+            None\n+        }\n+    }\n }"}, {"sha": "f440c073ba8abd6ebedc28a4e5374a3e8d6126e9", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -204,6 +204,8 @@ pub struct MacroDefId {\n     pub krate: Option<CrateId>,\n     pub ast_id: Option<AstId<ast::MacroCall>>,\n     pub kind: MacroDefKind,\n+\n+    pub local_inner: bool,\n }\n \n impl MacroDefId {"}, {"sha": "65db6d1b088892bf122a6ea63bb526e10d3a9876", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -11,7 +11,7 @@ doctest = false\n itertools = \"0.9.0\"\n arrayvec = \"0.5.1\"\n smallvec = \"1.2.0\"\n-ena = \"0.13.1\"\n+ena = \"0.14.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n "}, {"sha": "a6f56c661e2a7b509371b954d58c0dd894c37c88", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -66,7 +66,8 @@ pub use autoderef::autoderef;\n pub use infer::{InferTy, InferenceResult};\n pub use lower::CallableDef;\n pub use lower::{\n-    callable_item_sig, ImplTraitLoweringMode, TyDefId, TyLoweringContext, ValueTyDefId,\n+    associated_type_shorthand_candidates, callable_item_sig, ImplTraitLoweringMode, TyDefId,\n+    TyLoweringContext, ValueTyDefId,\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n "}, {"sha": "9ad6dbe075a2b26b2cfbfdc014cf43e2bca193c0", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 88, "deletions": 55, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -17,9 +17,9 @@ use hir_def::{\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AssocContainerId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule,\n-    ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n-    VariantId,\n+    AdtId, AssocContainerId, AssocItemId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n+    HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n+    UnionId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n@@ -34,6 +34,7 @@ use crate::{\n     Binders, BoundVar, DebruijnIndex, FnSig, GenericPredicate, PolyFnSig, ProjectionPredicate,\n     ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n+use hir_expand::name::Name;\n \n #[derive(Debug)]\n pub struct TyLoweringContext<'a> {\n@@ -383,61 +384,38 @@ impl Ty {\n         res: Option<TypeNs>,\n         segment: PathSegment<'_>,\n     ) -> Ty {\n-        let traits_from_env: Vec<_> = match res {\n-            Some(TypeNs::SelfType(impl_id)) => match ctx.db.impl_trait(impl_id) {\n-                None => return Ty::Unknown,\n-                Some(trait_ref) => vec![trait_ref.value],\n-            },\n-            Some(TypeNs::GenericParam(param_id)) => {\n-                let predicates = ctx.db.generic_predicates_for_param(param_id);\n-                let mut traits_: Vec<_> = predicates\n-                    .iter()\n-                    .filter_map(|pred| match &pred.value {\n-                        GenericPredicate::Implemented(tr) => Some(tr.clone()),\n-                        _ => None,\n-                    })\n-                    .collect();\n-                // Handle `Self::Type` referring to own associated type in trait definitions\n-                if let GenericDefId::TraitId(trait_id) = param_id.parent {\n-                    let generics = generics(ctx.db.upcast(), trait_id.into());\n-                    if generics.params.types[param_id.local_id].provenance\n-                        == TypeParamProvenance::TraitSelf\n-                    {\n-                        let trait_ref = TraitRef {\n-                            trait_: trait_id,\n-                            substs: Substs::bound_vars(&generics, DebruijnIndex::INNERMOST),\n+        if let Some(res) = res {\n+            let ty =\n+                associated_type_shorthand_candidates(ctx.db, res, move |name, t, associated_ty| {\n+                    if name == segment.name {\n+                        let substs = match ctx.type_param_mode {\n+                            TypeParamLoweringMode::Placeholder => {\n+                                // if we're lowering to placeholders, we have to put\n+                                // them in now\n+                                let s = Substs::type_params(\n+                                    ctx.db,\n+                                    ctx.resolver.generic_def().expect(\n+                                        \"there should be generics if there's a generic param\",\n+                                    ),\n+                                );\n+                                t.substs.clone().subst_bound_vars(&s)\n+                            }\n+                            TypeParamLoweringMode::Variable => t.substs.clone(),\n                         };\n-                        traits_.push(trait_ref);\n+                        // FIXME handle type parameters on the segment\n+                        return Some(Ty::Projection(ProjectionTy {\n+                            associated_ty,\n+                            parameters: substs,\n+                        }));\n                     }\n-                }\n-                traits_\n-            }\n-            _ => return Ty::Unknown,\n-        };\n-        let traits = traits_from_env.into_iter().flat_map(|t| all_super_trait_refs(ctx.db, t));\n-        for t in traits {\n-            if let Some(associated_ty) =\n-                ctx.db.trait_data(t.trait_).associated_type_by_name(&segment.name)\n-            {\n-                let substs = match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => {\n-                        // if we're lowering to placeholders, we have to put\n-                        // them in now\n-                        let s = Substs::type_params(\n-                            ctx.db,\n-                            ctx.resolver\n-                                .generic_def()\n-                                .expect(\"there should be generics if there's a generic param\"),\n-                        );\n-                        t.substs.subst_bound_vars(&s)\n-                    }\n-                    TypeParamLoweringMode::Variable => t.substs,\n-                };\n-                // FIXME handle (forbid) type parameters on the segment\n-                return Ty::Projection(ProjectionTy { associated_ty, parameters: substs });\n-            }\n+\n+                    None\n+                });\n+\n+            ty.unwrap_or(Ty::Unknown)\n+        } else {\n+            Ty::Unknown\n         }\n-        Ty::Unknown\n     }\n \n     fn from_hir_path_inner(\n@@ -694,6 +672,61 @@ pub fn callable_item_sig(db: &dyn HirDatabase, def: CallableDef) -> PolyFnSig {\n     }\n }\n \n+pub fn associated_type_shorthand_candidates<R>(\n+    db: &dyn HirDatabase,\n+    res: TypeNs,\n+    mut cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,\n+) -> Option<R> {\n+    let traits_from_env: Vec<_> = match res {\n+        TypeNs::SelfType(impl_id) => match db.impl_trait(impl_id) {\n+            None => vec![],\n+            Some(trait_ref) => vec![trait_ref.value],\n+        },\n+        TypeNs::GenericParam(param_id) => {\n+            let predicates = db.generic_predicates_for_param(param_id);\n+            let mut traits_: Vec<_> = predicates\n+                .iter()\n+                .filter_map(|pred| match &pred.value {\n+                    GenericPredicate::Implemented(tr) => Some(tr.clone()),\n+                    _ => None,\n+                })\n+                .collect();\n+            // Handle `Self::Type` referring to own associated type in trait definitions\n+            if let GenericDefId::TraitId(trait_id) = param_id.parent {\n+                let generics = generics(db.upcast(), trait_id.into());\n+                if generics.params.types[param_id.local_id].provenance\n+                    == TypeParamProvenance::TraitSelf\n+                {\n+                    let trait_ref = TraitRef {\n+                        trait_: trait_id,\n+                        substs: Substs::bound_vars(&generics, DebruijnIndex::INNERMOST),\n+                    };\n+                    traits_.push(trait_ref);\n+                }\n+            }\n+            traits_\n+        }\n+        _ => vec![],\n+    };\n+\n+    for t in traits_from_env.into_iter().flat_map(move |t| all_super_trait_refs(db, t)) {\n+        let data = db.trait_data(t.trait_);\n+\n+        for (name, assoc_id) in &data.items {\n+            match assoc_id {\n+                AssocItemId::TypeAliasId(alias) => {\n+                    if let Some(result) = cb(name, &t, *alias) {\n+                        return Some(result);\n+                    }\n+                }\n+                AssocItemId::FunctionId(_) | AssocItemId::ConstId(_) => {}\n+            }\n+        }\n+    }\n+\n+    None\n+}\n+\n /// Build the type of all specific fields of a struct or enum variant.\n pub(crate) fn field_types_query(\n     db: &dyn HirDatabase,"}, {"sha": "29e38a06c466c405023921fe86364729cc7079ae", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -338,6 +338,46 @@ pub fn baz() -> usize { 31usize }\n     assert_eq!(\"(i32, usize)\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_macro_with_dollar_crate_is_correct_in_trait_associate_type() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:foo\n+use foo::Trait;\n+\n+fn test() {\n+    let msg = foo::Message(foo::MessageRef);\n+    let r = msg.deref();\n+    r<|>;\n+}\n+\n+//- /lib.rs crate:foo\n+pub struct MessageRef;\n+pub struct Message(MessageRef);\n+\n+pub trait Trait {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+#[macro_export]\n+macro_rules! expand {\n+    () => {\n+        impl Trait for Message {\n+            type Target = $crate::MessageRef;\n+            fn deref(&self) ->  &Self::Target {\n+                &self.0\n+            }\n+        }\n+    }\n+}\n+\n+expand!();\n+\"#,\n+    );\n+    assert_eq!(\"&MessageRef\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_type_value_non_legacy_macro_use_as() {\n     assert_snapshot!(\n@@ -387,6 +427,32 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_local_inner_macros() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:foo\n+fn test() {\n+    let x = foo::foo!(1);\n+    x<|>;\n+}\n+\n+//- /lib.rs crate:foo\n+#[macro_export(local_inner_macros)]\n+macro_rules! foo {\n+    (1) => { bar!() };\n+}\n+\n+#[macro_export]\n+macro_rules! bar {\n+    () => { 42 }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"i32\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_builtin_macros_line() {\n     assert_snapshot!("}, {"sha": "3d3088965dec6074e0a14156ec713b73e3fa1f8f", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1755,3 +1755,35 @@ fn main() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn effects_smoke_test() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn main() {\n+    let x = unsafe { 92 };\n+    let y = async { async { () }.await };\n+    let z = try { () };\n+    let t = 'a: { 92 };\n+}\n+\"#),\n+        @r###\"\n+    11..131 '{     ...2 }; }': ()\n+    21..22 'x': i32\n+    32..38 '{ 92 }': i32\n+    34..36 '92': i32\n+    48..49 'y': {unknown}\n+    58..80 '{ asyn...wait }': {unknown}\n+    60..78 'async ....await': {unknown}\n+    66..72 '{ () }': ()\n+    68..70 '()': ()\n+    90..91 'z': {unknown}\n+    94..104 'try { () }': {unknown}\n+    98..104 '{ () }': ()\n+    100..102 '()': ()\n+    114..115 't': i32\n+    122..128 '{ 92 }': i32\n+    124..126 '92': i32\n+    \"###\n+    )\n+}"}, {"sha": "05f825c6fe22225b0042e229789a528142a1b752", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -249,6 +249,44 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_union_field_completion() {\n+        assert_debug_snapshot!(\n+            do_ref_completion(\n+                r\"\n+            union Un {\n+                field: u8,\n+                other: u16,\n+            }\n+\n+            fn foo(u: Un) {\n+                u.<|>\n+            }\n+            \",\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"field\",\n+                source_range: 140..140,\n+                delete: 140..140,\n+                insert: \"field\",\n+                kind: Field,\n+                detail: \"u8\",\n+            },\n+            CompletionItem {\n+                label: \"other\",\n+                source_range: 140..140,\n+                delete: 140..140,\n+                insert: \"other\",\n+                kind: Field,\n+                detail: \"u16\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn test_method_completion() {\n         assert_debug_snapshot!("}, {"sha": "aa56a5cd870311d45deaef28088552c1977b7378", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 261, "deletions": 11, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -5,19 +5,29 @@ use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n use crate::completion::{CompletionContext, Completions};\n+use rustc_hash::FxHashSet;\n \n pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let path = match &ctx.path_prefix {\n         Some(path) => path.clone(),\n         _ => return,\n     };\n-    let def = match ctx.scope().resolve_hir_path(&path) {\n-        Some(PathResolution::Def(def)) => def,\n-        _ => return,\n+    let scope = ctx.scope();\n+    let context_module = scope.module();\n+\n+    let res = match scope.resolve_hir_path(&path) {\n+        Some(res) => res,\n+        None => return,\n     };\n-    let context_module = ctx.scope().module();\n-    match def {\n-        hir::ModuleDef::Module(module) => {\n+\n+    // Add associated types on type parameters and `Self`.\n+    res.assoc_type_shorthand_candidates(ctx.db, |alias| {\n+        acc.add_type_alias(ctx, alias);\n+        None::<()>\n+    });\n+\n+    match res {\n+        PathResolution::Def(hir::ModuleDef::Module(module)) => {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n                 if ctx.use_item_syntax.is_some() {\n@@ -35,7 +45,8 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 acc.add_resolution(ctx, name.to_string(), &def);\n             }\n         }\n-        hir::ModuleDef::Adt(_) | hir::ModuleDef::TypeAlias(_) => {\n+        PathResolution::Def(def @ hir::ModuleDef::Adt(_))\n+        | PathResolution::Def(def @ hir::ModuleDef::TypeAlias(_)) => {\n             if let hir::ModuleDef::Adt(Adt::Enum(e)) = def {\n                 for variant in e.variants(ctx.db) {\n                     acc.add_enum_variant(ctx, variant, None);\n@@ -46,8 +57,10 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };\n-            // Iterate assoc types separately\n-            // FIXME: complete T::AssocType\n+\n+            // XXX: For parity with Rust bug #22519, this does not complete Ty::AssocType.\n+            // (where AssocType is defined on a trait, not an inherent impl)\n+\n             let krate = ctx.krate;\n             if let Some(krate) = krate {\n                 let traits_in_scope = ctx.scope().traits_in_scope();\n@@ -65,6 +78,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     None::<()>\n                 });\n \n+                // Iterate assoc types separately\n                 ty.iterate_impl_items(ctx.db, krate, |item| {\n                     if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {\n                         return None;\n@@ -77,7 +91,8 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 });\n             }\n         }\n-        hir::ModuleDef::Trait(t) => {\n+        PathResolution::Def(hir::ModuleDef::Trait(t)) => {\n+            // Handles `Trait::assoc` as well as `<Ty as Trait>::assoc`.\n             for item in t.items(ctx.db) {\n                 if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {\n                     continue;\n@@ -91,8 +106,38 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 }\n             }\n         }\n+        PathResolution::TypeParam(_) | PathResolution::SelfType(_) => {\n+            if let Some(krate) = ctx.krate {\n+                let ty = match res {\n+                    PathResolution::TypeParam(param) => param.ty(ctx.db),\n+                    PathResolution::SelfType(impl_def) => impl_def.target_ty(ctx.db),\n+                    _ => return,\n+                };\n+\n+                let traits_in_scope = ctx.scope().traits_in_scope();\n+                let mut seen = FxHashSet::default();\n+                ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n+                    if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {\n+                        return None;\n+                    }\n+\n+                    // We might iterate candidates of a trait multiple times here, so deduplicate\n+                    // them.\n+                    if seen.insert(item) {\n+                        match item {\n+                            hir::AssocItem::Function(func) => {\n+                                acc.add_function(ctx, func, None);\n+                            }\n+                            hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n+                            hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n+                        }\n+                    }\n+                    None::<()>\n+                });\n+            }\n+        }\n         _ => {}\n-    };\n+    }\n }\n \n #[cfg(test)]\n@@ -843,6 +888,211 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_ty_param_assoc_ty() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                trait Super {\n+                    type Ty;\n+                    const CONST: u8;\n+                    fn func() {}\n+                    fn method(&self) {}\n+                }\n+\n+                trait Sub: Super {\n+                    type SubTy;\n+                    const C2: ();\n+                    fn subfunc() {}\n+                    fn submethod(&self) {}\n+                }\n+\n+                fn foo<T: Sub>() {\n+                    T::<|>\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"C2\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"C2\",\n+                kind: Const,\n+                detail: \"const C2: ();\",\n+            },\n+            CompletionItem {\n+                label: \"CONST\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"CONST\",\n+                kind: Const,\n+                detail: \"const CONST: u8;\",\n+            },\n+            CompletionItem {\n+                label: \"SubTy\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"SubTy\",\n+                kind: TypeAlias,\n+                detail: \"type SubTy;\",\n+            },\n+            CompletionItem {\n+                label: \"Ty\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"Ty\",\n+                kind: TypeAlias,\n+                detail: \"type Ty;\",\n+            },\n+            CompletionItem {\n+                label: \"func()\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"func()$0\",\n+                kind: Function,\n+                lookup: \"func\",\n+                detail: \"fn func()\",\n+            },\n+            CompletionItem {\n+                label: \"method()\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"method()$0\",\n+                kind: Method,\n+                lookup: \"method\",\n+                detail: \"fn method(&self)\",\n+            },\n+            CompletionItem {\n+                label: \"subfunc()\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"subfunc()$0\",\n+                kind: Function,\n+                lookup: \"subfunc\",\n+                detail: \"fn subfunc()\",\n+            },\n+            CompletionItem {\n+                label: \"submethod()\",\n+                source_range: 219..219,\n+                delete: 219..219,\n+                insert: \"submethod()$0\",\n+                kind: Method,\n+                lookup: \"submethod\",\n+                detail: \"fn submethod(&self)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_self_param_assoc_ty() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                trait Super {\n+                    type Ty;\n+                    const CONST: u8 = 0;\n+                    fn func() {}\n+                    fn method(&self) {}\n+                }\n+\n+                trait Sub: Super {\n+                    type SubTy;\n+                    const C2: () = ();\n+                    fn subfunc() {}\n+                    fn submethod(&self) {}\n+                }\n+\n+                struct Wrap<T>(T);\n+                impl<T> Super for Wrap<T> {}\n+                impl<T> Sub for Wrap<T> {\n+                    fn subfunc() {\n+                        // Should be able to assume `Self: Sub + Super`\n+                        Self::<|>\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"C2\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"C2\",\n+                kind: Const,\n+                detail: \"const C2: () = ();\",\n+            },\n+            CompletionItem {\n+                label: \"CONST\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"CONST\",\n+                kind: Const,\n+                detail: \"const CONST: u8 = 0;\",\n+            },\n+            CompletionItem {\n+                label: \"SubTy\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"SubTy\",\n+                kind: TypeAlias,\n+                detail: \"type SubTy;\",\n+            },\n+            CompletionItem {\n+                label: \"Ty\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"Ty\",\n+                kind: TypeAlias,\n+                detail: \"type Ty;\",\n+            },\n+            CompletionItem {\n+                label: \"func()\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"func()$0\",\n+                kind: Function,\n+                lookup: \"func\",\n+                detail: \"fn func()\",\n+            },\n+            CompletionItem {\n+                label: \"method()\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"method()$0\",\n+                kind: Method,\n+                lookup: \"method\",\n+                detail: \"fn method(&self)\",\n+            },\n+            CompletionItem {\n+                label: \"subfunc()\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"subfunc()$0\",\n+                kind: Function,\n+                lookup: \"subfunc\",\n+                detail: \"fn subfunc()\",\n+            },\n+            CompletionItem {\n+                label: \"submethod()\",\n+                source_range: 365..365,\n+                delete: 365..365,\n+                insert: \"submethod()$0\",\n+                kind: Method,\n+                lookup: \"submethod\",\n+                detail: \"fn submethod(&self)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_type_alias() {\n         assert_debug_snapshot!("}, {"sha": "a6a5568de0bf55dffcdb591a6ae352a54ed38efa", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -53,7 +53,7 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n                 // Variants with trivial paths are already added by the existing completion logic,\n                 // so we should avoid adding these twice\n                 if path.segments.len() > 1 {\n-                    acc.add_enum_variant(ctx, variant, Some(path.to_string()));\n+                    acc.add_qualified_enum_variant(ctx, variant, path);\n                 }\n             }\n         }\n@@ -1173,6 +1173,7 @@ mod tests {\n                 delete: 248..250,\n                 insert: \"Foo::Bar\",\n                 kind: EnumVariant,\n+                lookup: \"Bar\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1181,6 +1182,7 @@ mod tests {\n                 delete: 248..250,\n                 insert: \"Foo::Baz\",\n                 kind: EnumVariant,\n+                lookup: \"Baz\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1189,6 +1191,7 @@ mod tests {\n                 delete: 248..250,\n                 insert: \"Foo::Quux\",\n                 kind: EnumVariant,\n+                lookup: \"Quux\",\n                 detail: \"()\",\n             },\n         ]\n@@ -1231,6 +1234,7 @@ mod tests {\n                 delete: 219..221,\n                 insert: \"Foo::Bar\",\n                 kind: EnumVariant,\n+                lookup: \"Bar\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1239,6 +1243,7 @@ mod tests {\n                 delete: 219..221,\n                 insert: \"Foo::Baz\",\n                 kind: EnumVariant,\n+                lookup: \"Baz\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1247,6 +1252,7 @@ mod tests {\n                 delete: 219..221,\n                 insert: \"Foo::Quux\",\n                 kind: EnumVariant,\n+                lookup: \"Quux\",\n                 detail: \"()\",\n             },\n         ]\n@@ -1285,6 +1291,7 @@ mod tests {\n                 delete: 185..186,\n                 insert: \"Foo::Bar\",\n                 kind: EnumVariant,\n+                lookup: \"Bar\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1293,6 +1300,7 @@ mod tests {\n                 delete: 185..186,\n                 insert: \"Foo::Baz\",\n                 kind: EnumVariant,\n+                lookup: \"Baz\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1301,6 +1309,7 @@ mod tests {\n                 delete: 185..186,\n                 insert: \"Foo::Quux\",\n                 kind: EnumVariant,\n+                lookup: \"Quux\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1353,6 +1362,7 @@ mod tests {\n                 delete: 98..99,\n                 insert: \"m::E::V\",\n                 kind: EnumVariant,\n+                lookup: \"V\",\n                 detail: \"()\",\n             },\n         ]"}, {"sha": "c529752d42d9ad22955dafd7e142ed1ed2ee7a08", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -344,7 +344,7 @@ impl<'a> CompletionContext<'a> {\n                                 stmt.syntax().text_range() == name_ref.syntax().text_range(),\n                             );\n                         }\n-                        if let Some(block) = ast::Block::cast(node) {\n+                        if let Some(block) = ast::BlockExpr::cast(node) {\n                             return Some(\n                                 block.expr().map(|e| e.syntax().text_range())\n                                     == Some(name_ref.syntax().text_range()),"}, {"sha": "2edb130cf7bfca726dce877a8d8ad2e8f1951dba", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,6 +1,6 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, StructKind, Type};\n+use hir::{Docs, HasAttrs, HasSource, HirDisplay, ModPath, ScopeDef, StructKind, Type};\n use ra_syntax::ast::NameOwner;\n use stdx::SepBy;\n use test_utils::tested_by;\n@@ -246,14 +246,37 @@ impl Completions {\n             .add_to(self);\n     }\n \n+    pub(crate) fn add_qualified_enum_variant(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        variant: hir::EnumVariant,\n+        path: ModPath,\n+    ) {\n+        self.add_enum_variant_impl(ctx, variant, None, Some(path))\n+    }\n+\n     pub(crate) fn add_enum_variant(\n         &mut self,\n         ctx: &CompletionContext,\n         variant: hir::EnumVariant,\n         local_name: Option<String>,\n+    ) {\n+        self.add_enum_variant_impl(ctx, variant, local_name, None)\n+    }\n+\n+    fn add_enum_variant_impl(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        variant: hir::EnumVariant,\n+        local_name: Option<String>,\n+        path: Option<ModPath>,\n     ) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = local_name.unwrap_or_else(|| variant.name(ctx.db).to_string());\n+        let qualified_name = match &path {\n+            Some(it) => it.to_string(),\n+            None => name.to_string(),\n+        };\n         let detail_types = variant\n             .fields(ctx.db)\n             .into_iter()\n@@ -271,16 +294,23 @@ impl Completions {\n                 .surround_with(\"{ \", \" }\")\n                 .to_string(),\n         };\n-        let mut res =\n-            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone())\n-                .kind(CompletionItemKind::EnumVariant)\n-                .set_documentation(variant.docs(ctx.db))\n-                .set_deprecated(is_deprecated)\n-                .detail(detail);\n+        let mut res = CompletionItem::new(\n+            CompletionKind::Reference,\n+            ctx.source_range(),\n+            qualified_name.clone(),\n+        )\n+        .kind(CompletionItemKind::EnumVariant)\n+        .set_documentation(variant.docs(ctx.db))\n+        .set_deprecated(is_deprecated)\n+        .detail(detail);\n+\n+        if path.is_some() {\n+            res = res.lookup_by(name);\n+        }\n \n         if variant_kind == StructKind::Tuple {\n             let params = Params::Anonymous(variant.fields(ctx.db).len());\n-            res = res.add_call_parens(ctx, name, params)\n+            res = res.add_call_parens(ctx, qualified_name, params)\n         }\n \n         res.add_to(self);"}, {"sha": "db3907fe64e13afe8194abb13e1a209fda488b8f", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -26,6 +26,8 @@ pub struct FunctionSignature {\n     pub kind: CallableKind,\n     /// Optional visibility\n     pub visibility: Option<String>,\n+    /// Qualifiers like `async`, `unsafe`, ...\n+    pub qualifier: FunctionQualifier,\n     /// Name of the function\n     pub name: Option<String>,\n     /// Documentation for the function\n@@ -46,6 +48,16 @@ pub struct FunctionSignature {\n     pub has_self_param: bool,\n }\n \n+#[derive(Debug, Default)]\n+pub struct FunctionQualifier {\n+    // `async` and `const` are mutually exclusive. Do we need to enforcing it here?\n+    pub is_async: bool,\n+    pub is_const: bool,\n+    pub is_unsafe: bool,\n+    /// The string `extern \"..\"`\n+    pub extern_abi: Option<String>,\n+}\n+\n impl FunctionSignature {\n     pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n         self.doc = doc;\n@@ -83,6 +95,8 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::StructConstructor,\n                 visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+                // Do we need `const`?\n+                qualifier: Default::default(),\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: node.name().map(|n| n.text().to_string()),\n                 parameters: params,\n@@ -128,6 +142,8 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::VariantConstructor,\n                 visibility: None,\n+                // Do we need `const`?\n+                qualifier: Default::default(),\n                 name: Some(name),\n                 ret_type: None,\n                 parameters: params,\n@@ -151,6 +167,7 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::Macro,\n                 visibility: None,\n+                qualifier: Default::default(),\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: None,\n                 parameters: params,\n@@ -223,6 +240,12 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n         FunctionSignature {\n             kind: CallableKind::Function,\n             visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+            qualifier: FunctionQualifier {\n+                is_async: node.async_token().is_some(),\n+                is_const: node.const_token().is_some(),\n+                is_unsafe: node.unsafe_token().is_some(),\n+                extern_abi: node.abi().map(|n| n.to_string()),\n+            },\n             name: node.name().map(|n| n.text().to_string()),\n             ret_type: node\n                 .ret_type()\n@@ -246,6 +269,23 @@ impl Display for FunctionSignature {\n             write!(f, \"{} \", t)?;\n         }\n \n+        if self.qualifier.is_async {\n+            write!(f, \"async \")?;\n+        }\n+\n+        if self.qualifier.is_const {\n+            write!(f, \"const \")?;\n+        }\n+\n+        if self.qualifier.is_unsafe {\n+            write!(f, \"unsafe \")?;\n+        }\n+\n+        if let Some(extern_abi) = &self.qualifier.extern_abi {\n+            // Keyword `extern` is included in the string.\n+            write!(f, \"{} \", extern_abi)?;\n+        }\n+\n         if let Some(name) = &self.name {\n             match self.kind {\n                 CallableKind::Function => write!(f, \"fn {}\", name)?,"}, {"sha": "d37260e9647a6087637ff7ee17869027b46fdf0c", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -33,7 +33,11 @@ impl ShortLabel for ast::EnumDef {\n \n impl ShortLabel for ast::TraitDef {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_node(self, \"trait \")\n+        if self.unsafe_token().is_some() {\n+            short_label_from_node(self, \"unsafe trait \")\n+        } else {\n+            short_label_from_node(self, \"trait \")\n+        }\n     }\n }\n "}, {"sha": "8657377dedaace2d1e3a0021123388ee12b648eb", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -88,7 +88,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n         | ITEM_LIST\n         | EXTERN_ITEM_LIST\n         | USE_TREE_LIST\n-        | BLOCK\n+        | BLOCK_EXPR\n         | MATCH_ARM_LIST\n         | ENUM_VARIANT_LIST\n         | TOKEN_TREE => Some(FoldKind::Block),"}, {"sha": "54d31885822732dd84ca5ae1a73d774ebef19097", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -844,4 +844,40 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"fn foo()\\n```\\n\\n<- `\\u{3000}` here\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_hover_function_show_qualifiers() {\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            async fn foo<|>() {}\n+            \",\n+            &[\"async fn foo()\"],\n+        );\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            pub const unsafe fn foo<|>() {}\n+            \",\n+            &[\"pub const unsafe fn foo()\"],\n+        );\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            pub(crate) async unsafe extern \"C\" fn foo<|>() {}\n+            \"#,\n+            &[r#\"pub(crate) async unsafe extern \"C\" fn foo()\"#],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_trait_show_qualifiers() {\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            unsafe trait foo<|>() {}\n+            \",\n+            &[\"unsafe trait foo\"],\n+        );\n+    }\n }"}, {"sha": "63fd6b3e457163107162a01dfe92f9be4c656c98", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -129,8 +129,10 @@ fn has_comma_after(node: &SyntaxNode) -> bool {\n }\n \n fn join_single_expr_block(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Option<()> {\n-    let block = ast::Block::cast(token.parent())?;\n-    let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n+    let block_expr = ast::BlockExpr::cast(token.parent())?;\n+    if !block_expr.is_standalone() {\n+        return None;\n+    }\n     let expr = extract_trivial_expression(&block_expr)?;\n \n     let block_range = block_expr.syntax().text_range();\n@@ -662,4 +664,67 @@ fn main() {\n         \",\n         )\n     }\n+\n+    #[test]\n+    fn join_lines_mandatory_blocks_block() {\n+        check_join_lines(\n+            r\"\n+<|>fn foo() {\n+    92\n+}\n+        \",\n+            r\"\n+<|>fn foo() { 92\n+}\n+        \",\n+        );\n+\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    <|>if true {\n+        92\n+    }\n+}\n+        \",\n+            r\"\n+fn foo() {\n+    <|>if true { 92\n+    }\n+}\n+        \",\n+        );\n+\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    <|>loop {\n+        92\n+    }\n+}\n+        \",\n+            r\"\n+fn foo() {\n+    <|>loop { 92\n+    }\n+}\n+        \",\n+        );\n+\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    <|>unsafe {\n+        92\n+    }\n+}\n+        \",\n+            r\"\n+fn foo() {\n+    <|>unsafe { 92\n+    }\n+}\n+        \",\n+        );\n+    }\n }"}, {"sha": "86c70ff830b8ff4cfa862731db1d0fdc0438d884", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 35, "deletions": 42, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -120,9 +120,8 @@ SOURCE_FILE@0..11\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..11\n-      BLOCK@9..11\n-        L_CURLY@9..10 \"{\"\n-        R_CURLY@10..11 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      R_CURLY@10..11 \"}\"\n \"#\n             .trim()\n         );\n@@ -153,26 +152,25 @@ SOURCE_FILE@0..60\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..60\n-      BLOCK@10..60\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        EXPR_STMT@16..58\n-          MACRO_CALL@16..57\n-            PATH@16..22\n-              PATH_SEGMENT@16..22\n-                NAME_REF@16..22\n-                  IDENT@16..22 \"assert\"\n-            BANG@22..23 \"!\"\n-            TOKEN_TREE@23..57\n-              L_PAREN@23..24 \"(\"\n-              STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n-              COMMA@52..53 \",\"\n-              WHITESPACE@53..54 \" \"\n-              STRING@54..56 \"\\\"\\\"\"\n-              R_PAREN@56..57 \")\"\n-          SEMICOLON@57..58 \";\"\n-        WHITESPACE@58..59 \"\\n\"\n-        R_CURLY@59..60 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      EXPR_STMT@16..58\n+        MACRO_CALL@16..57\n+          PATH@16..22\n+            PATH_SEGMENT@16..22\n+              NAME_REF@16..22\n+                IDENT@16..22 \"assert\"\n+          BANG@22..23 \"!\"\n+          TOKEN_TREE@23..57\n+            L_PAREN@23..24 \"(\"\n+            STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n+            COMMA@52..53 \",\"\n+            WHITESPACE@53..54 \" \"\n+            STRING@54..56 \"\\\"\\\"\"\n+            R_PAREN@56..57 \")\"\n+        SEMICOLON@57..58 \";\"\n+      WHITESPACE@58..59 \"\\n\"\n+      R_CURLY@59..60 \"}\"\n \"#\n             .trim()\n         );\n@@ -196,9 +194,8 @@ FN_DEF@0..11\n     R_PAREN@7..8 \")\"\n   WHITESPACE@8..9 \" \"\n   BLOCK_EXPR@9..11\n-    BLOCK@9..11\n-      L_CURLY@9..10 \"{\"\n-      R_CURLY@10..11 \"}\"\n+    L_CURLY@9..10 \"{\"\n+    R_CURLY@10..11 \"}\"\n \"#\n             .trim()\n         );\n@@ -265,10 +262,9 @@ SOURCE_FILE@0..12\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n \"#\n             .trim()\n         );\n@@ -300,10 +296,9 @@ SOURCE_FILE@0..12\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n \"#\n             .trim()\n         );\n@@ -334,10 +329,9 @@ SOURCE_FILE@0..25\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n   FN_DEF@13..25\n     FN_KW@13..15 \"fn\"\n@@ -349,10 +343,9 @@ SOURCE_FILE@0..25\n       R_PAREN@20..21 \")\"\n     WHITESPACE@21..22 \" \"\n     BLOCK_EXPR@22..25\n-      BLOCK@22..25\n-        L_CURLY@22..23 \"{\"\n-        WHITESPACE@23..24 \"\\n\"\n-        R_CURLY@24..25 \"}\"\n+      L_CURLY@22..23 \"{\"\n+      WHITESPACE@23..24 \"\\n\"\n+      R_CURLY@24..25 \"}\"\n \"#\n             .trim()\n         );"}, {"sha": "c43003fd63df3f215d8b706b3601f4a151d4032c", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 75, "deletions": 77, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -266,21 +266,20 @@ fn test_expr_order() {\n       L_PAREN@5..6 \"(\"\n       R_PAREN@6..7 \")\"\n     BLOCK_EXPR@7..15\n-      BLOCK@7..15\n-        L_CURLY@7..8 \"{\"\n-        EXPR_STMT@8..14\n-          BIN_EXPR@8..13\n-            BIN_EXPR@8..11\n-              LITERAL@8..9\n-                INT_NUMBER@8..9 \"1\"\n-              PLUS@9..10 \"+\"\n-              LITERAL@10..11\n-                INT_NUMBER@10..11 \"1\"\n-            STAR@11..12 \"*\"\n-            LITERAL@12..13\n-              INT_NUMBER@12..13 \"2\"\n-          SEMICOLON@13..14 \";\"\n-        R_CURLY@14..15 \"}\"\"#,\n+      L_CURLY@7..8 \"{\"\n+      EXPR_STMT@8..14\n+        BIN_EXPR@8..13\n+          BIN_EXPR@8..11\n+            LITERAL@8..9\n+              INT_NUMBER@8..9 \"1\"\n+            PLUS@9..10 \"+\"\n+            LITERAL@10..11\n+              INT_NUMBER@10..11 \"1\"\n+          STAR@11..12 \"*\"\n+          LITERAL@12..13\n+            INT_NUMBER@12..13 \"2\"\n+        SEMICOLON@13..14 \";\"\n+      R_CURLY@14..15 \"}\"\"#,\n     );\n }\n \n@@ -1114,68 +1113,67 @@ fn test_vec() {\n     assert_eq!(\n         format!(\"{:#?}\", tree).trim(),\n         r#\"BLOCK_EXPR@0..45\n-  BLOCK@0..45\n-    L_CURLY@0..1 \"{\"\n-    LET_STMT@1..20\n-      LET_KW@1..4 \"let\"\n-      BIND_PAT@4..8\n-        MUT_KW@4..7 \"mut\"\n-        NAME@7..8\n-          IDENT@7..8 \"v\"\n-      EQ@8..9 \"=\"\n-      CALL_EXPR@9..19\n-        PATH_EXPR@9..17\n-          PATH@9..17\n-            PATH@9..12\n-              PATH_SEGMENT@9..12\n-                NAME_REF@9..12\n-                  IDENT@9..12 \"Vec\"\n-            COLON2@12..14 \"::\"\n-            PATH_SEGMENT@14..17\n-              NAME_REF@14..17\n-                IDENT@14..17 \"new\"\n-        ARG_LIST@17..19\n-          L_PAREN@17..18 \"(\"\n-          R_PAREN@18..19 \")\"\n-      SEMICOLON@19..20 \";\"\n-    EXPR_STMT@20..33\n-      METHOD_CALL_EXPR@20..32\n-        PATH_EXPR@20..21\n-          PATH@20..21\n-            PATH_SEGMENT@20..21\n-              NAME_REF@20..21\n-                IDENT@20..21 \"v\"\n-        DOT@21..22 \".\"\n-        NAME_REF@22..26\n-          IDENT@22..26 \"push\"\n-        ARG_LIST@26..32\n-          L_PAREN@26..27 \"(\"\n-          LITERAL@27..31\n-            INT_NUMBER@27..31 \"1u32\"\n-          R_PAREN@31..32 \")\"\n-      SEMICOLON@32..33 \";\"\n-    EXPR_STMT@33..43\n-      METHOD_CALL_EXPR@33..42\n-        PATH_EXPR@33..34\n-          PATH@33..34\n-            PATH_SEGMENT@33..34\n-              NAME_REF@33..34\n-                IDENT@33..34 \"v\"\n-        DOT@34..35 \".\"\n-        NAME_REF@35..39\n-          IDENT@35..39 \"push\"\n-        ARG_LIST@39..42\n-          L_PAREN@39..40 \"(\"\n-          LITERAL@40..41\n-            INT_NUMBER@40..41 \"2\"\n-          R_PAREN@41..42 \")\"\n-      SEMICOLON@42..43 \";\"\n-    PATH_EXPR@43..44\n-      PATH@43..44\n-        PATH_SEGMENT@43..44\n-          NAME_REF@43..44\n-            IDENT@43..44 \"v\"\n-    R_CURLY@44..45 \"}\"\"#\n+  L_CURLY@0..1 \"{\"\n+  LET_STMT@1..20\n+    LET_KW@1..4 \"let\"\n+    BIND_PAT@4..8\n+      MUT_KW@4..7 \"mut\"\n+      NAME@7..8\n+        IDENT@7..8 \"v\"\n+    EQ@8..9 \"=\"\n+    CALL_EXPR@9..19\n+      PATH_EXPR@9..17\n+        PATH@9..17\n+          PATH@9..12\n+            PATH_SEGMENT@9..12\n+              NAME_REF@9..12\n+                IDENT@9..12 \"Vec\"\n+          COLON2@12..14 \"::\"\n+          PATH_SEGMENT@14..17\n+            NAME_REF@14..17\n+              IDENT@14..17 \"new\"\n+      ARG_LIST@17..19\n+        L_PAREN@17..18 \"(\"\n+        R_PAREN@18..19 \")\"\n+    SEMICOLON@19..20 \";\"\n+  EXPR_STMT@20..33\n+    METHOD_CALL_EXPR@20..32\n+      PATH_EXPR@20..21\n+        PATH@20..21\n+          PATH_SEGMENT@20..21\n+            NAME_REF@20..21\n+              IDENT@20..21 \"v\"\n+      DOT@21..22 \".\"\n+      NAME_REF@22..26\n+        IDENT@22..26 \"push\"\n+      ARG_LIST@26..32\n+        L_PAREN@26..27 \"(\"\n+        LITERAL@27..31\n+          INT_NUMBER@27..31 \"1u32\"\n+        R_PAREN@31..32 \")\"\n+    SEMICOLON@32..33 \";\"\n+  EXPR_STMT@33..43\n+    METHOD_CALL_EXPR@33..42\n+      PATH_EXPR@33..34\n+        PATH@33..34\n+          PATH_SEGMENT@33..34\n+            NAME_REF@33..34\n+              IDENT@33..34 \"v\"\n+      DOT@34..35 \".\"\n+      NAME_REF@35..39\n+        IDENT@35..39 \"push\"\n+      ARG_LIST@39..42\n+        L_PAREN@39..40 \"(\"\n+        LITERAL@40..41\n+          INT_NUMBER@40..41 \"2\"\n+        R_PAREN@41..42 \")\"\n+    SEMICOLON@42..43 \";\"\n+  PATH_EXPR@43..44\n+    PATH@43..44\n+      PATH_SEGMENT@43..44\n+        NAME_REF@43..44\n+          IDENT@43..44 \"v\"\n+  R_CURLY@44..45 \"}\"\"#\n     );\n }\n "}, {"sha": "be0cd5661bd6be0db8f19a22e4ae2fabb85525e9", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -54,7 +54,7 @@ pub(crate) mod fragments {\n     use super::*;\n \n     pub(crate) use super::{\n-        expressions::block, paths::type_path as path, patterns::pattern, types::type_,\n+        expressions::block_expr, paths::type_path as path, patterns::pattern, types::type_,\n     };\n \n     pub(crate) fn expr(p: &mut Parser) {\n@@ -143,7 +143,7 @@ pub(crate) fn reparser(\n     parent: Option<SyntaxKind>,\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n-        BLOCK => expressions::naked_block,\n+        BLOCK_EXPR => expressions::block_expr,\n         RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n         RECORD_FIELD_LIST => items::record_field_list,\n         ENUM_VARIANT_LIST => items::enum_variant_list,"}, {"sha": "34f0397686fb04720acdf53ddddf9a0d1a95a2cd", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -2,7 +2,7 @@\n \n mod atom;\n \n-pub(crate) use self::atom::match_arm_list;\n+pub(crate) use self::atom::{block_expr, match_arm_list};\n pub(super) use self::atom::{literal, LITERAL_FIRST};\n use super::*;\n \n@@ -49,28 +49,6 @@ fn expr_no_struct(p: &mut Parser) {\n     expr_bp(p, r, 1);\n }\n \n-// test block\n-// fn a() {}\n-// fn b() { let _ = 1; }\n-// fn c() { 1; 2; }\n-// fn d() { 1; 2 }\n-pub(crate) fn block(p: &mut Parser) {\n-    if !p.at(T!['{']) {\n-        p.error(\"expected a block\");\n-        return;\n-    }\n-    atom::block_expr(p, None);\n-}\n-\n-pub(crate) fn naked_block(p: &mut Parser) {\n-    assert!(p.at(T!['{']));\n-    let m = p.start();\n-    p.bump(T!['{']);\n-    expr_block_contents(p);\n-    p.expect(T!['}']);\n-    m.complete(p, BLOCK);\n-}\n-\n fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n     match kind {\n         BIN_EXPR | RANGE_EXPR | IF_EXPR => false,\n@@ -197,7 +175,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n     }\n }\n \n-pub(crate) fn expr_block_contents(p: &mut Parser) {\n+pub(super) fn expr_block_contents(p: &mut Parser) {\n     // This is checked by a validator\n     attributes::inner_attributes(p);\n "}, {"sha": "706a2f796b217a313f4c545668bc183cefb4191e", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 58, "deletions": 28, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -92,7 +92,12 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n                 T![loop] => loop_expr(p, Some(m)),\n                 T![for] => for_expr(p, Some(m)),\n                 T![while] => while_expr(p, Some(m)),\n-                T!['{'] => block_expr(p, Some(m)),\n+                // test labeled_block\n+                // fn f() { 'label: {}; }\n+                T!['{'] => {\n+                    block_expr(p);\n+                    m.complete(p, EFFECT_EXPR)\n+                }\n                 _ => {\n                     // test_err misplaced_label_err\n                     // fn main() {\n@@ -108,13 +113,17 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             let m = p.start();\n             p.bump(T![async]);\n             p.eat(T![move]);\n-            block_expr(p, Some(m))\n+            block_expr(p);\n+            m.complete(p, EFFECT_EXPR)\n         }\n         T![match] => match_expr(p),\n+        // test unsafe_block\n+        // fn f() { unsafe { } }\n         T![unsafe] if la == T!['{'] => {\n             let m = p.start();\n             p.bump(T![unsafe]);\n-            block_expr(p, Some(m))\n+            block_expr(p);\n+            m.complete(p, EFFECT_EXPR)\n         }\n         T!['{'] => {\n             // test for_range_from\n@@ -123,7 +132,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             //        break;\n             //    }\n             // }\n-            block_expr(p, None)\n+            block_expr_unchecked(p)\n         }\n         T![return] => return_expr(p),\n         T![continue] => continue_expr(p),\n@@ -134,7 +143,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         }\n     };\n     let blocklike = match done.kind() {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | TRY_BLOCK_EXPR => {\n+        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | EFFECT_EXPR => {\n             BlockLike::Block\n         }\n         _ => BlockLike::NotBlock,\n@@ -231,13 +240,9 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     p.eat(T![move]);\n     params::param_list_closure(p);\n     if opt_fn_ret_type(p) {\n-        if p.at(T!['{']) {\n-            // test lambda_ret_block\n-            // fn main() { || -> i32 { 92 }(); }\n-            block_expr(p, None);\n-        } else {\n-            p.error(\"expected `{`\");\n-        }\n+        // test lambda_ret_block\n+        // fn main() { || -> i32 { 92 }(); }\n+        block_expr(p);\n     } else {\n         if p.at_ts(EXPR_FIRST) {\n             expr(p);\n@@ -261,13 +266,13 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n     let m = p.start();\n     p.bump(T![if]);\n     cond(p);\n-    block(p);\n+    block_expr(p);\n     if p.at(T![else]) {\n         p.bump(T![else]);\n         if p.at(T![if]) {\n             if_expr(p);\n         } else {\n-            block(p);\n+            block_expr(p);\n         }\n     }\n     m.complete(p, IF_EXPR)\n@@ -295,7 +300,7 @@ fn loop_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![loop]));\n     let m = m.unwrap_or_else(|| p.start());\n     p.bump(T![loop]);\n-    block(p);\n+    block_expr(p);\n     m.complete(p, LOOP_EXPR)\n }\n \n@@ -310,7 +315,7 @@ fn while_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     let m = m.unwrap_or_else(|| p.start());\n     p.bump(T![while]);\n     cond(p);\n-    block(p);\n+    block_expr(p);\n     m.complete(p, WHILE_EXPR)\n }\n \n@@ -325,7 +330,7 @@ fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     patterns::pattern(p);\n     p.expect(T![in]);\n     expr_no_struct(p);\n-    block(p);\n+    block_expr(p);\n     m.complete(p, FOR_EXPR)\n }\n \n@@ -458,16 +463,25 @@ fn match_guard(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, MATCH_GUARD)\n }\n \n-// test block_expr\n-// fn foo() {\n-//     {};\n-//     unsafe {};\n-//     'label: {};\n-// }\n-pub(super) fn block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+// test block\n+// fn a() {}\n+// fn b() { let _ = 1; }\n+// fn c() { 1; 2; }\n+// fn d() { 1; 2 }\n+pub(crate) fn block_expr(p: &mut Parser) {\n+    if !p.at(T!['{']) {\n+        p.error(\"expected a block\");\n+        return;\n+    }\n+    block_expr_unchecked(p);\n+}\n+\n+fn block_expr_unchecked(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T!['{']));\n-    let m = m.unwrap_or_else(|| p.start());\n-    naked_block(p);\n+    let m = p.start();\n+    p.bump(T!['{']);\n+    expr_block_contents(p);\n+    p.expect(T!['}']);\n     m.complete(p, BLOCK_EXPR)\n }\n \n@@ -535,9 +549,25 @@ fn break_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![try]));\n     let m = m.unwrap_or_else(|| p.start());\n+    // Special-case `try!` as macro.\n+    // This is a hack until we do proper edition support\n+    if p.nth_at(1, T![!]) {\n+        // test try_macro_fallback\n+        // fn foo() { try!(Ok(())); }\n+        let path = p.start();\n+        let path_segment = p.start();\n+        let name_ref = p.start();\n+        p.bump_remap(IDENT);\n+        name_ref.complete(p, NAME_REF);\n+        path_segment.complete(p, PATH_SEGMENT);\n+        path.complete(p, PATH);\n+        let _block_like = items::macro_call_after_excl(p);\n+        return m.complete(p, MACRO_CALL);\n+    }\n+\n     p.bump(T![try]);\n-    block(p);\n-    m.complete(p, TRY_EXPR)\n+    block_expr(p);\n+    m.complete(p, EFFECT_EXPR)\n }\n \n // test box_expr"}, {"sha": "67a924de53977c0111d997f78f19342564bf53ee", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -329,7 +329,7 @@ fn fn_def(p: &mut Parser) {\n     if p.at(T![;]) {\n         p.bump(T![;]);\n     } else {\n-        expressions::block(p)\n+        expressions::block_expr(p)\n     }\n }\n \n@@ -415,6 +415,17 @@ pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n     if p.at(IDENT) {\n         name(p);\n     }\n+    // Special-case `macro_rules! try`.\n+    // This is a hack until we do proper edition support\n+\n+    // test try_macro_rules\n+    // macro_rules! try { () => {} }\n+    if p.at(T![try]) {\n+        let m = p.start();\n+        p.bump_remap(IDENT);\n+        m.complete(p, NAME);\n+    }\n+\n     match p.current() {\n         T!['{'] => {\n             token_tree(p);"}, {"sha": "3a0c7a31a852b2a544febe467832f6081143c2e9", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -47,7 +47,7 @@ fn use_tree(p: &mut Parser, top_level: bool) {\n         // use {crate::path::from::root, or::path::from::crate_name}; // Rust 2018 (with a crate named `or`)\n         // use {path::from::root}; // Rust 2015\n         // use ::{some::arbritrary::path}; // Rust 2015\n-        // use ::{{{crate::export}}}; // Nonsensical but perfectly legal nestnig\n+        // use ::{{{root::export}}}; // Nonsensical but perfectly legal nesting\n         T!['{'] => {\n             use_tree_list(p);\n         }"}, {"sha": "2d61f9d8083a241ca19018a92b2a7879e70eae98", "filename": "crates/ra_parser/src/grammar/type_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -48,7 +48,7 @@ fn type_arg(p: &mut Parser) {\n             m.complete(p, ASSOC_TYPE_ARG);\n         }\n         T!['{'] => {\n-            expressions::block(p);\n+            expressions::block_expr(p);\n             m.complete(p, CONST_ARG);\n         }\n         k if k.is_literal() => {"}, {"sha": "e08ad4dae673c05849be77039389f62f0c3a6d6a", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -112,7 +112,7 @@ pub fn parse_fragment(\n         FragmentKind::Type => grammar::fragments::type_,\n         FragmentKind::Pattern => grammar::fragments::pattern,\n         FragmentKind::Item => grammar::fragments::item,\n-        FragmentKind::Block => grammar::fragments::block,\n+        FragmentKind::Block => grammar::fragments::block_expr,\n         FragmentKind::Visibility => grammar::fragments::opt_visibility,\n         FragmentKind::MetaItem => grammar::fragments::meta_item,\n         FragmentKind::Statement => grammar::fragments::stmt,"}, {"sha": "e7404492a8e9399aa6a36a2cbc4555dab82d3e29", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -191,7 +191,7 @@ pub enum SyntaxKind {\n     RECORD_LIT,\n     RECORD_FIELD_LIST,\n     RECORD_FIELD,\n-    TRY_BLOCK_EXPR,\n+    EFFECT_EXPR,\n     BOX_EXPR,\n     CALL_EXPR,\n     INDEX_EXPR,\n@@ -204,7 +204,6 @@ pub enum SyntaxKind {\n     PREFIX_EXPR,\n     RANGE_EXPR,\n     BIN_EXPR,\n-    BLOCK,\n     EXTERN_BLOCK,\n     EXTERN_ITEM_LIST,\n     ENUM_VARIANT,"}, {"sha": "886e148703d7ab36c30da75d7cc38b965412f461", "filename": "crates/ra_proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2FCargo.toml?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -21,4 +21,4 @@ test_utils = { path = \"../test_utils\" }\n cargo_metadata = \"0.9.1\"\n difference = \"2.0.0\"\n # used as proc macro test target\n-serde_derive = \"=1.0.104\"\n+serde_derive = \"=1.0.106\""}, {"sha": "1437794c9e23a3030a97bda224f6dc9cadaf8437", "filename": "crates/ra_proc_macro_srv/src/cli.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,15 +1,17 @@\n //! Driver for proc macro server\n \n-use crate::{expand_task, list_macros};\n+use crate::ProcMacroSrv;\n use ra_proc_macro::msg::{self, Message};\n use std::io;\n \n pub fn run() -> io::Result<()> {\n+    let mut srv = ProcMacroSrv::default();\n+\n     while let Some(req) = read_request()? {\n         let res = match req {\n-            msg::Request::ListMacro(task) => Ok(msg::Response::ListMacro(list_macros(&task))),\n+            msg::Request::ListMacro(task) => srv.list_macros(&task).map(msg::Response::ListMacro),\n             msg::Request::ExpansionMacro(task) => {\n-                expand_task(&task).map(msg::Response::ExpansionMacro)\n+                srv.expand(&task).map(msg::Response::ExpansionMacro)\n             }\n         };\n "}, {"sha": "aa84e951cd5601636490c9ffe2f0638a7c2ade1c", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 69, "deletions": 44, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -2,13 +2,12 @@\n \n use crate::{proc_macro::bridge, rustc_server::TokenStream};\n use std::fs::File;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n use goblin::{mach::Mach, Object};\n use libloading::Library;\n use memmap::Mmap;\n use ra_proc_macro::ProcMacroKind;\n-\n use std::io;\n \n const NEW_REGISTRAR_SYMBOL: &str = \"_rustc_proc_macro_decls_\";\n@@ -109,23 +108,21 @@ impl ProcMacroLibraryLibloading {\n     }\n }\n \n-type ProcMacroLibraryImpl = ProcMacroLibraryLibloading;\n-\n pub struct Expander {\n-    libs: Vec<ProcMacroLibraryImpl>,\n+    inner: ProcMacroLibraryLibloading,\n }\n \n impl Expander {\n-    pub fn new(lib: &Path) -> Result<Expander, String> {\n+    pub fn new(lib: &Path) -> io::Result<Expander> {\n         // Some libraries for dynamic loading require canonicalized path even when it is\n         // already absolute\n-        let lib = lib\n-            .canonicalize()\n-            .unwrap_or_else(|err| panic!(\"Cannot canonicalize {}: {:?}\", lib.display(), err));\n+        let lib = lib.canonicalize()?;\n+\n+        let lib = ensure_file_with_lock_free_access(&lib)?;\n \n-        let library = ProcMacroLibraryImpl::open(&lib).map_err(|e| e.to_string())?;\n+        let library = ProcMacroLibraryLibloading::open(&lib)?;\n \n-        Ok(Expander { libs: vec![library] })\n+        Ok(Expander { inner: library })\n     }\n \n     pub fn expand(\n@@ -141,48 +138,46 @@ impl Expander {\n                 TokenStream::with_subtree(attr.clone())\n             });\n \n-        for lib in &self.libs {\n-            for proc_macro in &lib.exported_macros {\n-                match proc_macro {\n-                    bridge::client::ProcMacro::CustomDerive { trait_name, client, .. }\n-                        if *trait_name == macro_name =>\n-                    {\n-                        let res = client.run(\n-                            &crate::proc_macro::bridge::server::SameThread,\n-                            crate::rustc_server::Rustc::default(),\n-                            parsed_body,\n-                        );\n-                        return res.map(|it| it.subtree);\n-                    }\n-                    bridge::client::ProcMacro::Bang { name, client } if *name == macro_name => {\n-                        let res = client.run(\n-                            &crate::proc_macro::bridge::server::SameThread,\n-                            crate::rustc_server::Rustc::default(),\n-                            parsed_body,\n-                        );\n-                        return res.map(|it| it.subtree);\n-                    }\n-                    bridge::client::ProcMacro::Attr { name, client } if *name == macro_name => {\n-                        let res = client.run(\n-                            &crate::proc_macro::bridge::server::SameThread,\n-                            crate::rustc_server::Rustc::default(),\n-                            parsed_attributes,\n-                            parsed_body,\n-                        );\n-                        return res.map(|it| it.subtree);\n-                    }\n-                    _ => continue,\n+        for proc_macro in &self.inner.exported_macros {\n+            match proc_macro {\n+                bridge::client::ProcMacro::CustomDerive { trait_name, client, .. }\n+                    if *trait_name == macro_name =>\n+                {\n+                    let res = client.run(\n+                        &crate::proc_macro::bridge::server::SameThread,\n+                        crate::rustc_server::Rustc::default(),\n+                        parsed_body,\n+                    );\n+                    return res.map(|it| it.subtree);\n+                }\n+                bridge::client::ProcMacro::Bang { name, client } if *name == macro_name => {\n+                    let res = client.run(\n+                        &crate::proc_macro::bridge::server::SameThread,\n+                        crate::rustc_server::Rustc::default(),\n+                        parsed_body,\n+                    );\n+                    return res.map(|it| it.subtree);\n+                }\n+                bridge::client::ProcMacro::Attr { name, client } if *name == macro_name => {\n+                    let res = client.run(\n+                        &crate::proc_macro::bridge::server::SameThread,\n+                        crate::rustc_server::Rustc::default(),\n+                        parsed_attributes,\n+                        parsed_body,\n+                    );\n+                    return res.map(|it| it.subtree);\n                 }\n+                _ => continue,\n             }\n         }\n \n         Err(bridge::PanicMessage::String(\"Nothing to expand\".to_string()))\n     }\n \n     pub fn list_macros(&self) -> Vec<(String, ProcMacroKind)> {\n-        self.libs\n+        self.inner\n+            .exported_macros\n             .iter()\n-            .flat_map(|it| &it.exported_macros)\n             .map(|proc_macro| match proc_macro {\n                 bridge::client::ProcMacro::CustomDerive { trait_name, .. } => {\n                     (trait_name.to_string(), ProcMacroKind::CustomDerive)\n@@ -197,3 +192,33 @@ impl Expander {\n             .collect()\n     }\n }\n+\n+/// Copy the dylib to temp directory to prevent locking in Windows\n+#[cfg(windows)]\n+fn ensure_file_with_lock_free_access(path: &Path) -> io::Result<PathBuf> {\n+    use std::{ffi::OsString, time::SystemTime};\n+\n+    let mut to = std::env::temp_dir();\n+\n+    let file_name = path.file_name().ok_or_else(|| {\n+        io::Error::new(\n+            io::ErrorKind::InvalidInput,\n+            format!(\"File path is invalid: {}\", path.display()),\n+        )\n+    })?;\n+\n+    // generate a time deps unique number\n+    let t = SystemTime::now().duration_since(std::time::UNIX_EPOCH).expect(\"Time went backwards\");\n+\n+    let mut unique_name = OsString::from(t.as_millis().to_string());\n+    unique_name.push(file_name);\n+\n+    to.push(unique_name);\n+    std::fs::copy(path, &to).unwrap();\n+    Ok(to)\n+}\n+\n+#[cfg(unix)]\n+fn ensure_file_with_lock_free_access(path: &Path) -> io::Result<PathBuf> {\n+    Ok(path.to_path_buf())\n+}"}, {"sha": "922bb84bbfcda92336fcc3f9b35536900547159b", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -21,28 +21,46 @@ mod dylib;\n \n use proc_macro::bridge::client::TokenStream;\n use ra_proc_macro::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask};\n-use std::path::Path;\n+use std::{\n+    collections::{hash_map::Entry, HashMap},\n+    fs,\n+    path::{Path, PathBuf},\n+    time::SystemTime,\n+};\n \n-pub(crate) fn expand_task(task: &ExpansionTask) -> Result<ExpansionResult, String> {\n-    let expander = create_expander(&task.lib);\n+#[derive(Default)]\n+pub(crate) struct ProcMacroSrv {\n+    expanders: HashMap<(PathBuf, SystemTime), dylib::Expander>,\n+}\n \n-    match expander.expand(&task.macro_name, &task.macro_body, task.attributes.as_ref()) {\n-        Ok(expansion) => Ok(ExpansionResult { expansion }),\n-        Err(msg) => {\n-            Err(format!(\"Cannot perform expansion for {}: error {:?}\", &task.macro_name, msg))\n+impl ProcMacroSrv {\n+    pub fn expand(&mut self, task: &ExpansionTask) -> Result<ExpansionResult, String> {\n+        let expander = self.expander(&task.lib)?;\n+        match expander.expand(&task.macro_name, &task.macro_body, task.attributes.as_ref()) {\n+            Ok(expansion) => Ok(ExpansionResult { expansion }),\n+            Err(msg) => {\n+                Err(format!(\"Cannot perform expansion for {}: error {:?}\", &task.macro_name, msg))\n+            }\n         }\n     }\n-}\n \n-pub(crate) fn list_macros(task: &ListMacrosTask) -> ListMacrosResult {\n-    let expander = create_expander(&task.lib);\n+    pub fn list_macros(&mut self, task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n+        let expander = self.expander(&task.lib)?;\n+        Ok(ListMacrosResult { macros: expander.list_macros() })\n+    }\n \n-    ListMacrosResult { macros: expander.list_macros() }\n-}\n+    fn expander(&mut self, path: &Path) -> Result<&dylib::Expander, String> {\n+        let time = fs::metadata(path).and_then(|it| it.modified()).map_err(|err| {\n+            format!(\"Failed to get file metadata for {}: {:?}\", path.display(), err)\n+        })?;\n \n-fn create_expander(lib: &Path) -> dylib::Expander {\n-    dylib::Expander::new(lib)\n-        .unwrap_or_else(|err| panic!(\"Cannot create expander for {}: {:?}\", lib.display(), err))\n+        Ok(match self.expanders.entry((path.to_path_buf(), time)) {\n+            Entry::Vacant(v) => v.insert(dylib::Expander::new(path).map_err(|err| {\n+                format!(\"Cannot create expander for {}: {:?}\", path.display(), err)\n+            })?),\n+            Entry::Occupied(e) => e.into_mut(),\n+        })\n+    }\n }\n \n pub mod cli;"}, {"sha": "6776f5231743381d2e8ef89698ce77a899ae552f", "filename": "crates/ra_proc_macro_srv/src/tests/fixtures/test_serialize_proc_macro.txt", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,5 +1,10 @@\n SUBTREE $\n   PUNCH   # [alone] 4294967295\n+  SUBTREE [] 4294967295\n+    IDENT   doc 4294967295\n+    SUBTREE () 4294967295\n+      IDENT   hidden 4294967295\n+  PUNCH   # [alone] 4294967295\n   SUBTREE [] 4294967295\n     IDENT   allow 4294967295\n     SUBTREE () 4294967295\n@@ -184,4 +189,4 @@ SUBTREE $\n         IDENT   end 4294967295\n         SUBTREE () 4294967295\n           IDENT   __serde_state 4294967295\n-  PUNCH   ; [alone] 4294967295\n\\ No newline at end of file\n+  PUNCH   ; [alone] 4294967295"}, {"sha": "9cf58511ce7fe6a6e26b339b1cde38f55433c0b3", "filename": "crates/ra_proc_macro_srv/src/tests/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -10,7 +10,7 @@ fn test_derive_serialize_proc_macro() {\n     assert_expand(\n         \"serde_derive\",\n         \"Serialize\",\n-        \"1.0.104\",\n+        \"1.0.106\",\n         r##\"struct Foo {}\"##,\n         include_str!(\"fixtures/test_serialize_proc_macro.txt\"),\n     );\n@@ -21,7 +21,7 @@ fn test_derive_serialize_proc_macro_failed() {\n     assert_expand(\n         \"serde_derive\",\n         \"Serialize\",\n-        \"1.0.104\",\n+        \"1.0.106\",\n         r##\"\n     struct {}\n \"##,\n@@ -37,7 +37,7 @@ SUBTREE $\n \n #[test]\n fn test_derive_proc_macro_list() {\n-    let res = list(\"serde_derive\", \"1.0.104\").join(\"\\n\");\n+    let res = list(\"serde_derive\", \"1.0.106\").join(\"\\n\");\n \n     assert_eq_text!(\n         &res,"}, {"sha": "646a427c5653546f4638b319c681509a11cc16eb", "filename": "crates/ra_proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,7 +1,7 @@\n //! utils used in proc-macro tests\n \n use crate::dylib;\n-use crate::list_macros;\n+use crate::ProcMacroSrv;\n pub use difference::Changeset as __Changeset;\n use ra_proc_macro::ListMacrosTask;\n use std::str::FromStr;\n@@ -59,7 +59,7 @@ pub fn assert_expand(\n pub fn list(crate_name: &str, version: &str) -> Vec<String> {\n     let path = fixtures::dylib_path(crate_name, version);\n     let task = ListMacrosTask { lib: path };\n-\n-    let res = list_macros(&task);\n+    let mut srv = ProcMacroSrv::default();\n+    let res = srv.list_macros(&task).unwrap();\n     res.macros.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()\n }"}, {"sha": "a3f5321fb3c1619ce66fee30155443d1017d96ca", "filename": "crates/ra_prof/src/hprof.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_prof%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_prof%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fhprof.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -30,8 +30,9 @@ pub fn init_from(spec: &str) {\n pub type Label = &'static str;\n \n /// This function starts a profiling scope in the current execution stack with a given description.\n-/// It returns a Profile structure and measure elapsed time between this method invocation and Profile structure drop.\n-/// It supports nested profiling scopes in case when this function invoked multiple times at the execution stack. In this case the profiling information will be nested at the output.\n+/// It returns a `Profile` struct that measures elapsed time between this method invocation and `Profile` struct drop.\n+/// It supports nested profiling scopes in case when this function is invoked multiple times at the execution stack.\n+/// In this case the profiling information will be nested at the output.\n /// Profiling information is being printed in the stderr.\n ///\n /// # Example\n@@ -58,36 +59,35 @@ pub type Label = &'static str;\n /// ```\n pub fn profile(label: Label) -> Profiler {\n     assert!(!label.is_empty());\n-    let enabled = PROFILING_ENABLED.load(Ordering::Relaxed)\n-        && PROFILE_STACK.with(|stack| stack.borrow_mut().push(label));\n-    let label = if enabled { Some(label) } else { None };\n-    Profiler { label, detail: None }\n+\n+    if PROFILING_ENABLED.load(Ordering::Relaxed)\n+        && PROFILE_STACK.with(|stack| stack.borrow_mut().push(label))\n+    {\n+        Profiler(Some(ProfilerImpl { label, detail: None }))\n+    } else {\n+        Profiler(None)\n+    }\n }\n \n-pub struct Profiler {\n-    label: Option<Label>,\n+pub struct Profiler(Option<ProfilerImpl>);\n+\n+struct ProfilerImpl {\n+    label: Label,\n     detail: Option<String>,\n }\n \n impl Profiler {\n     pub fn detail(mut self, detail: impl FnOnce() -> String) -> Profiler {\n-        if self.label.is_some() {\n-            self.detail = Some(detail())\n+        if let Some(profiler) = &mut self.0 {\n+            profiler.detail = Some(detail())\n         }\n         self\n     }\n }\n \n-impl Drop for Profiler {\n+impl Drop for ProfilerImpl {\n     fn drop(&mut self) {\n-        match self {\n-            Profiler { label: Some(label), detail } => {\n-                PROFILE_STACK.with(|stack| {\n-                    stack.borrow_mut().pop(label, detail.take());\n-                });\n-            }\n-            Profiler { label: None, .. } => (),\n-        }\n+        PROFILE_STACK.with(|it| it.borrow_mut().pop(self.label, self.detail.take()));\n     }\n }\n \n@@ -179,21 +179,18 @@ impl ProfileStack {\n     pub fn pop(&mut self, label: Label, detail: Option<String>) {\n         let start = self.starts.pop().unwrap();\n         let duration = start.elapsed();\n-        let level = self.starts.len();\n         self.messages.finish(Message { duration, label, detail });\n-        if level == 0 {\n+        if self.starts.is_empty() {\n             let longer_than = self.filter.longer_than;\n             // Convert to millis for comparison to avoid problems with rounding\n             // (otherwise we could print `0ms` despite user's `>0` filter when\n             // `duration` is just a few nanos).\n             if duration.as_millis() > longer_than.as_millis() {\n-                let stderr = stderr();\n                 if let Some(root) = self.messages.root() {\n-                    print(&self.messages, root, 0, longer_than, &mut stderr.lock());\n+                    print(&self.messages, root, 0, longer_than, &mut stderr().lock());\n                 }\n             }\n             self.messages.clear();\n-            assert!(self.starts.is_empty())\n         }\n     }\n }"}, {"sha": "5e651fe70d9e2a35c03275d3e2848cfc272a9752", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -18,7 +18,7 @@ ra_db = { path = \"../ra_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_proc_macro =  { path = \"../ra_proc_macro\" }\n \n-serde = { version = \"1.0.104\", features = [\"derive\"] }\n+serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n \n anyhow = \"1.0.26\""}, {"sha": "c07ff488e4f0e0147dbedc762cc3a7372f8d2095", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n itertools = \"0.9.0\"\n rowan = \"0.10.0\"\n-rustc_lexer = { version = \"652.0.0\", package = \"rustc-ap-rustc_lexer\" }\n+rustc_lexer = { version = \"656.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n once_cell = \"1.3.1\"\n@@ -27,7 +27,7 @@ ra_parser = { path = \"../ra_parser\" }\n # ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations\n smol_str = { version = \"0.1.15\", features = [\"serde\"] }\n-serde = { version = \"1.0.104\", features = [\"derive\"] }\n+serde = { version = \"1.0.106\", features = [\"derive\"] }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "1876afe958e0bc817569201e7f67bc031b5ae1b8", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n+    expr_extensions::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n         StructKind, TypeBoundKind, VisibilityKind,\n@@ -242,6 +242,21 @@ fn test_comments_preserve_trailing_whitespace() {\n     );\n }\n \n+#[test]\n+fn test_four_slash_line_comment() {\n+    let file = SourceFile::parse(\n+        r#\"\n+        //// too many slashes to be a doc comment\n+        /// doc comment\n+        mod foo {}\n+        \"#,\n+    )\n+    .ok()\n+    .unwrap();\n+    let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n+    assert_eq!(\"doc comment\", module.doc_comment_text().unwrap());\n+}\n+\n #[test]\n fn test_where_predicates() {\n     fn assert_bound(text: &str, bound: Option<TypeBound>) {"}, {"sha": "c507dc683c04e10d6d2302642df8211aa183fc14", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -28,7 +28,7 @@ impl ast::BinExpr {\n \n impl ast::FnDef {\n     #[must_use]\n-    pub fn with_body(&self, body: ast::Block) -> ast::FnDef {\n+    pub fn with_body(&self, body: ast::BlockExpr) -> ast::FnDef {\n         let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n         let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n             old_body.syntax().clone().into()"}, {"sha": "7771d6759553973228f61ff658d99d8ca3f9b1ab", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -16,7 +16,7 @@ impl ast::Expr {\n             | ast::Expr::WhileExpr(_)\n             | ast::Expr::BlockExpr(_)\n             | ast::Expr::MatchExpr(_)\n-            | ast::Expr::TryBlockExpr(_) => true,\n+            | ast::Expr::EffectExpr(_) => true,\n             _ => false,\n         }\n     }\n@@ -43,7 +43,7 @@ impl ast::IfExpr {\n         Some(res)\n     }\n \n-    fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n+    pub fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n         support::children(self.syntax())\n     }\n }\n@@ -359,6 +359,33 @@ impl ast::Literal {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum Effect {\n+    Async(SyntaxToken),\n+    Unsafe(SyntaxToken),\n+    Try(SyntaxToken),\n+    // Very much not an effect, but we stuff it into this node anyway\n+    Label(ast::Label),\n+}\n+\n+impl ast::EffectExpr {\n+    pub fn effect(&self) -> Effect {\n+        if let Some(token) = self.async_token() {\n+            return Effect::Async(token);\n+        }\n+        if let Some(token) = self.unsafe_token() {\n+            return Effect::Unsafe(token);\n+        }\n+        if let Some(token) = self.try_token() {\n+            return Effect::Try(token);\n+        }\n+        if let Some(label) = self.label() {\n+            return Effect::Label(label);\n+        }\n+        unreachable!(\"ast::EffectExpr without Effect\")\n+    }\n+}\n+\n impl ast::BlockExpr {\n     /// false if the block is an intrinsic part of the syntax and can't be\n     /// replaced with arbitrary expression.\n@@ -368,12 +395,12 @@ impl ast::BlockExpr {\n     /// const FOO: () = { stand_alone };\n     /// ```\n     pub fn is_standalone(&self) -> bool {\n-        let kind = match self.syntax().parent() {\n+        let parent = match self.syntax().parent() {\n+            Some(it) => it,\n             None => return true,\n-            Some(it) => it.kind(),\n         };\n-        match kind {\n-            FN_DEF | MATCH_ARM | IF_EXPR | WHILE_EXPR | LOOP_EXPR | TRY_BLOCK_EXPR => false,\n+        match parent.kind() {\n+            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | EFFECT_EXPR => false,\n             _ => true,\n         }\n     }"}, {"sha": "528c873e076e9dc4f9027e7872a78c69e7e4cbba", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -407,7 +407,7 @@ impl ast::Visibility {\n         } else if self.super_token().is_some() {\n             VisibilityKind::PubSuper\n         } else if self.self_token().is_some() {\n-            VisibilityKind::PubSuper\n+            VisibilityKind::PubSelf\n         } else {\n             VisibilityKind::Pub\n         }\n@@ -423,6 +423,10 @@ impl ast::MacroCall {\n             None\n         }\n     }\n+\n+    pub fn is_bang(&self) -> bool {\n+        self.is_macro_rules().is_none()\n+    }\n }\n \n impl ast::LifetimeParam {"}, {"sha": "5e844d5aeab5e13120032a98dfcd35d30de2b0e6", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 28, "deletions": 48, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -476,13 +476,16 @@ impl LoopExpr {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TryBlockExpr {\n+pub struct EffectExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TryBlockExpr {}\n-impl TryBlockExpr {\n+impl ast::AttrsOwner for EffectExpr {}\n+impl EffectExpr {\n+    pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n     pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n-    pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n+    pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -551,10 +554,12 @@ pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for BlockExpr {}\n+impl ast::ModuleItemOwner for BlockExpr {}\n impl BlockExpr {\n-    pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n-    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n-    pub fn block(&self) -> Option<Block> { support::child(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n+    pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -626,8 +631,8 @@ pub struct TryExpr {\n }\n impl ast::AttrsOwner for TryExpr {}\n impl TryExpr {\n-    pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn question_mark_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![?]) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1120,19 +1125,6 @@ impl Condition {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Block {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for Block {}\n-impl ast::ModuleItemOwner for Block {}\n-impl Block {\n-    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParamList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1249,6 +1241,9 @@ pub struct PathSegment {\n }\n impl PathSegment {\n     pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n+    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n     pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }\n@@ -1473,7 +1468,7 @@ pub enum Expr {\n     FieldExpr(FieldExpr),\n     AwaitExpr(AwaitExpr),\n     TryExpr(TryExpr),\n-    TryBlockExpr(TryBlockExpr),\n+    EffectExpr(EffectExpr),\n     CastExpr(CastExpr),\n     RefExpr(RefExpr),\n     PrefixExpr(PrefixExpr),\n@@ -1956,8 +1951,8 @@ impl AstNode for LoopExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TryBlockExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_BLOCK_EXPR }\n+impl AstNode for EffectExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EFFECT_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2649,17 +2644,6 @@ impl AstNode for Condition {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Block {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BLOCK }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for ParamList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3308,8 +3292,8 @@ impl From<AwaitExpr> for Expr {\n impl From<TryExpr> for Expr {\n     fn from(node: TryExpr) -> Expr { Expr::TryExpr(node) }\n }\n-impl From<TryBlockExpr> for Expr {\n-    fn from(node: TryBlockExpr) -> Expr { Expr::TryBlockExpr(node) }\n+impl From<EffectExpr> for Expr {\n+    fn from(node: EffectExpr) -> Expr { Expr::EffectExpr(node) }\n }\n impl From<CastExpr> for Expr {\n     fn from(node: CastExpr) -> Expr { Expr::CastExpr(node) }\n@@ -3341,9 +3325,10 @@ impl AstNode for Expr {\n             TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR\n             | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL\n             | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_LIT | CALL_EXPR | INDEX_EXPR\n-            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR\n-            | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL\n-            | BOX_EXPR => true,\n+            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | EFFECT_EXPR | CAST_EXPR\n+            | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL | BOX_EXPR => {\n+                true\n+            }\n             _ => false,\n         }\n     }\n@@ -3371,7 +3356,7 @@ impl AstNode for Expr {\n             FIELD_EXPR => Expr::FieldExpr(FieldExpr { syntax }),\n             AWAIT_EXPR => Expr::AwaitExpr(AwaitExpr { syntax }),\n             TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n-            TRY_BLOCK_EXPR => Expr::TryBlockExpr(TryBlockExpr { syntax }),\n+            EFFECT_EXPR => Expr::EffectExpr(EffectExpr { syntax }),\n             CAST_EXPR => Expr::CastExpr(CastExpr { syntax }),\n             REF_EXPR => Expr::RefExpr(RefExpr { syntax }),\n             PREFIX_EXPR => Expr::PrefixExpr(PrefixExpr { syntax }),\n@@ -3408,7 +3393,7 @@ impl AstNode for Expr {\n             Expr::FieldExpr(it) => &it.syntax,\n             Expr::AwaitExpr(it) => &it.syntax,\n             Expr::TryExpr(it) => &it.syntax,\n-            Expr::TryBlockExpr(it) => &it.syntax,\n+            Expr::EffectExpr(it) => &it.syntax,\n             Expr::CastExpr(it) => &it.syntax,\n             Expr::RefExpr(it) => &it.syntax,\n             Expr::PrefixExpr(it) => &it.syntax,\n@@ -3889,7 +3874,7 @@ impl std::fmt::Display for LoopExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TryBlockExpr {\n+impl std::fmt::Display for EffectExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -4204,11 +4189,6 @@ impl std::fmt::Display for Condition {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Block {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for ParamList {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "7b17fef4928ebcbd535dd6bb4078978b8f305fc1", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -22,8 +22,7 @@ pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n     path_from_text(&format!(\"{}::{}\", qual, segment))\n }\n-\n-pub fn path_from_text(text: &str) -> ast::Path {\n+fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n }\n \n@@ -83,14 +82,6 @@ pub fn block_expr(\n     ast_from_text(&format!(\"fn f() {}\", buf))\n }\n \n-pub fn block_from_expr(e: ast::Expr) -> ast::Block {\n-    return from_text(&format!(\"{{ {} }}\", e));\n-\n-    fn from_text(text: &str) -> ast::Block {\n-        ast_from_text(&format!(\"fn f() {}\", text))\n-    }\n-}\n-\n pub fn expr_unit() -> ast::Expr {\n     expr_from_text(\"()\")\n }"}, {"sha": "74906d8a62efe732ef6f4b765e0c132264327e7e", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -13,7 +13,12 @@ impl Comment {\n     }\n \n     pub fn prefix(&self) -> &'static str {\n-        prefix_by_kind(self.kind())\n+        for (prefix, k) in COMMENT_PREFIX_TO_KIND.iter() {\n+            if *k == self.kind() && self.text().starts_with(prefix) {\n+                return prefix;\n+            }\n+        }\n+        unreachable!()\n     }\n }\n \n@@ -48,6 +53,7 @@ pub enum CommentPlacement {\n const COMMENT_PREFIX_TO_KIND: &[(&str, CommentKind)] = {\n     use {CommentPlacement::*, CommentShape::*};\n     &[\n+        (\"////\", CommentKind { shape: Line, doc: None }),\n         (\"///\", CommentKind { shape: Line, doc: Some(Outer) }),\n         (\"//!\", CommentKind { shape: Line, doc: Some(Inner) }),\n         (\"/**\", CommentKind { shape: Block, doc: Some(Outer) }),\n@@ -69,15 +75,6 @@ fn kind_by_prefix(text: &str) -> CommentKind {\n     panic!(\"bad comment text: {:?}\", text)\n }\n \n-fn prefix_by_kind(kind: CommentKind) -> &'static str {\n-    for (prefix, k) in COMMENT_PREFIX_TO_KIND.iter() {\n-        if *k == kind {\n-            return prefix;\n-        }\n-    }\n-    unreachable!()\n-}\n-\n impl Whitespace {\n     pub fn spans_multiple_lines(&self) -> bool {\n         let text = self.text();"}, {"sha": "d0234cadaf4e5554fce34af29346c8bcb19d207d", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -237,8 +237,7 @@ fn api_walkthrough() {\n \n     // Let's get the `1 + 1` expression!\n     let body: ast::BlockExpr = func.body().unwrap();\n-    let block = body.block().unwrap();\n-    let expr: ast::Expr = block.expr().unwrap();\n+    let expr: ast::Expr = body.expr().unwrap();\n \n     // Enums are used to group related ast nodes together, and can be used for\n     // matching. However, because there are no public fields, it's possible to\n@@ -274,8 +273,8 @@ fn api_walkthrough() {\n     assert_eq!(text.to_string(), \"1 + 1\");\n \n     // There's a bunch of traversal methods on `SyntaxNode`:\n-    assert_eq!(expr_syntax.parent().as_ref(), Some(block.syntax()));\n-    assert_eq!(block.syntax().first_child_or_token().map(|it| it.kind()), Some(T!['{']));\n+    assert_eq!(expr_syntax.parent().as_ref(), Some(body.syntax()));\n+    assert_eq!(body.syntax().first_child_or_token().map(|it| it.kind()), Some(T!['{']));\n     assert_eq!(\n         expr_syntax.next_sibling_or_token().map(|it| it.kind()),\n         Some(SyntaxKind::WHITESPACE)"}, {"sha": "1a5a6dc065eb2458caab58028a4484a08eee8245", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -180,7 +180,7 @@ fn rustc_token_kind_to_syntax_kind(\n     return (syntax_kind, None);\n \n     fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<&'static str>) {\n-        use rustc_lexer::LiteralKind as LK;\n+        use rustc_lexer::{LexRawStrError, LiteralKind as LK};\n \n         #[rustfmt::skip]\n         let syntax_kind = match *kind {\n@@ -215,21 +215,28 @@ fn rustc_token_kind_to_syntax_kind(\n                 return (BYTE_STRING, Some(\"Missing trailing `\\\"` symbol to terminate the byte string literal\"))\n             }\n \n-            LK::RawStr { started: true, terminated: true, .. } => RAW_STRING,\n-            LK::RawStr { started: true, terminated: false, .. } => {\n-                return (RAW_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"))\n-            }\n-            LK::RawStr { started: false, .. } => {\n-                return (RAW_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\"))\n-            }\n+            LK::RawStr(str) => match str.validate() {\n+                Ok(_) => RAW_STRING,\n+                Err(LexRawStrError::InvalidStarter) => return (RAW_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\")),\n+                Err(LexRawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n+                    return (RAW_STRING, Some(\"Missing trailing `\\\"` to terminate the raw string literal\"))\n+                } else {\n+                    return (RAW_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"))\n+\n+                },\n+                Err(LexRawStrError::TooManyDelimiters { .. }) => return (RAW_STRING, Some(\"Too many `#` symbols: raw strings may be delimited by up to 65535 `#` symbols\")),\n+            },\n+            LK::RawByteStr(str) => match str.validate() {\n+                Ok(_) => RAW_BYTE_STRING,\n+                Err(LexRawStrError::InvalidStarter) => return (RAW_BYTE_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\")),\n+                Err(LexRawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n+                    return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` to terminate the raw byte string literal\"))\n+                } else {\n+                    return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"))\n \n-            LK::RawByteStr { started: true, terminated: true, .. } => RAW_BYTE_STRING,\n-            LK::RawByteStr { started: true, terminated: false, .. } => {\n-                return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"))\n-            }\n-            LK::RawByteStr { started: false, .. } => {\n-                return (RAW_BYTE_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\"))\n-            }\n+                },\n+                Err(LexRawStrError::TooManyDelimiters { .. }) => return (RAW_BYTE_STRING, Some(\"Too many `#` symbols: raw byte strings may be delimited by up to 65535 `#` symbols\")),\n+            },\n         };\n \n         (syntax_kind, None)"}, {"sha": "e075cd8017e2b5de4e1f1f93481ce0169c6f14ab", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -96,6 +96,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::RecordField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n                 ast::Visibility(it) => validate_visibility(it, &mut errors),\n                 ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n+                ast::PathSegment(it) => validate_path_keywords(it, &mut errors),\n                 _ => (),\n             }\n         }\n@@ -222,3 +223,83 @@ fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n         ));\n     }\n }\n+\n+fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxError>) {\n+    use ast::PathSegmentKind;\n+\n+    let path = segment.parent_path();\n+    let is_path_start = segment.coloncolon_token().is_none() && path.qualifier().is_none();\n+\n+    if let Some(token) = segment.self_token() {\n+        if !is_path_start {\n+            errors.push(SyntaxError::new(\n+                \"The `self` keyword is only allowed as the first segment of a path\",\n+                token.text_range(),\n+            ));\n+        }\n+    } else if let Some(token) = segment.crate_token() {\n+        if !is_path_start || use_prefix(path).is_some() {\n+            errors.push(SyntaxError::new(\n+                \"The `crate` keyword is only allowed as the first segment of a path\",\n+                token.text_range(),\n+            ));\n+        }\n+    } else if let Some(token) = segment.super_token() {\n+        if !all_supers(&path) {\n+            errors.push(SyntaxError::new(\n+                \"The `super` keyword may only be preceded by other `super`s\",\n+                token.text_range(),\n+            ));\n+            return;\n+        }\n+\n+        let mut curr_path = path;\n+        while let Some(prefix) = use_prefix(curr_path) {\n+            if !all_supers(&prefix) {\n+                errors.push(SyntaxError::new(\n+                    \"The `super` keyword may only be preceded by other `super`s\",\n+                    token.text_range(),\n+                ));\n+                return;\n+            }\n+            curr_path = prefix;\n+        }\n+    }\n+\n+    fn use_prefix(mut path: ast::Path) -> Option<ast::Path> {\n+        for node in path.syntax().ancestors().skip(1) {\n+            match_ast! {\n+                match node {\n+                    ast::UseTree(it) => if let Some(tree_path) = it.path() {\n+                        // Even a top-level path exists within a `UseTree` so we must explicitly\n+                        // allow our path but disallow anything else\n+                        if tree_path != path {\n+                            return Some(tree_path);\n+                        }\n+                    },\n+                    ast::UseTreeList(_it) => continue,\n+                    ast::Path(parent) => path = parent,\n+                    _ => return None,\n+                }\n+            };\n+        }\n+        return None;\n+    }\n+\n+    fn all_supers(path: &ast::Path) -> bool {\n+        let segment = match path.segment() {\n+            Some(it) => it,\n+            None => return false,\n+        };\n+\n+        if segment.kind() != Some(PathSegmentKind::SuperKw) {\n+            return false;\n+        }\n+\n+        if let Some(ref subpath) = path.qualifier() {\n+            return all_supers(subpath);\n+        }\n+\n+        return true;\n+    }\n+}"}, {"sha": "2c08f7e6ed4be68434ec1b0fa42a1e73affa60b8", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -6,19 +6,17 @@ use crate::{\n     SyntaxKind::*,\n };\n \n-pub(crate) fn validate_block_expr(expr: ast::BlockExpr, errors: &mut Vec<SyntaxError>) {\n-    if let Some(parent) = expr.syntax().parent() {\n+pub(crate) fn validate_block_expr(block: ast::BlockExpr, errors: &mut Vec<SyntaxError>) {\n+    if let Some(parent) = block.syntax().parent() {\n         match parent.kind() {\n-            FN_DEF | EXPR_STMT | BLOCK => return,\n+            FN_DEF | EXPR_STMT | BLOCK_EXPR => return,\n             _ => {}\n         }\n     }\n-    if let Some(block) = expr.block() {\n-        errors.extend(block.attrs().map(|attr| {\n-            SyntaxError::new(\n-                \"A block in this position cannot accept inner attributes\",\n-                attr.syntax().text_range(),\n-            )\n-        }))\n-    }\n+    errors.extend(block.attrs().map(|attr| {\n+        SyntaxError::new(\n+            \"A block in this position cannot accept inner attributes\",\n+            attr.syntax().text_range(),\n+        )\n+    }))\n }"}, {"sha": "375ed45e073f57c847e4719f20937e03f54c9dae", "filename": "crates/ra_syntax/test_data/parser/err/0005_attribute_recover.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -28,10 +28,9 @@ SOURCE_FILE@0..54\n       R_PAREN@26..27 \")\"\n     WHITESPACE@27..28 \" \"\n     BLOCK_EXPR@28..31\n-      BLOCK@28..31\n-        L_CURLY@28..29 \"{\"\n-        WHITESPACE@29..30 \"\\n\"\n-        R_CURLY@30..31 \"}\"\n+      L_CURLY@28..29 \"{\"\n+      WHITESPACE@29..30 \"\\n\"\n+      R_CURLY@30..31 \"}\"\n   WHITESPACE@31..34 \"\\n\\n\\n\"\n   ATTR@34..53\n     POUND@34..35 \"#\""}, {"sha": "b72c92c33cf3ba95a77e4e43fbe8521aa4342c1b", "filename": "crates/ra_syntax/test_data/parser/err/0007_stray_curly_in_file.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -21,9 +21,8 @@ SOURCE_FILE@0..31\n       L_PAREN@23..24 \"(\"\n       R_PAREN@24..25 \")\"\n     BLOCK_EXPR@25..27\n-      BLOCK@25..27\n-        L_CURLY@25..26 \"{\"\n-        R_CURLY@26..27 \"}\"\n+      L_CURLY@25..26 \"{\"\n+      R_CURLY@26..27 \"}\"\n   WHITESPACE@27..29 \"\\n\\n\"\n   ERROR@29..30\n     R_CURLY@29..30 \"}\""}, {"sha": "33953d8d770072b8da2e20f2c22a1d3c8e4499cf", "filename": "crates/ra_syntax/test_data/parser/err/0008_item_block_recovery.rast", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,10 +9,9 @@ SOURCE_FILE@0..95\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n   WHITESPACE@12..14 \"\\n\\n\"\n   MACRO_CALL@14..19\n     PATH@14..17\n@@ -34,30 +33,28 @@ SOURCE_FILE@0..95\n           TRUE_KW@29..33 \"true\"\n       WHITESPACE@33..34 \" \"\n       BLOCK_EXPR@34..51\n-        BLOCK@34..51\n-          L_CURLY@34..35 \"{\"\n-          WHITESPACE@35..44 \"\\n        \"\n-          LITERAL@44..45\n-            INT_NUMBER@44..45 \"1\"\n-          WHITESPACE@45..50 \"\\n    \"\n-          R_CURLY@50..51 \"}\"\n+        L_CURLY@34..35 \"{\"\n+        WHITESPACE@35..44 \"\\n        \"\n+        LITERAL@44..45\n+          INT_NUMBER@44..45 \"1\"\n+        WHITESPACE@45..50 \"\\n    \"\n+        R_CURLY@50..51 \"}\"\n       WHITESPACE@51..52 \" \"\n       ELSE_KW@52..56 \"else\"\n       WHITESPACE@56..57 \" \"\n       BLOCK_EXPR@57..78\n-        BLOCK@57..78\n-          L_CURLY@57..58 \"{\"\n-          WHITESPACE@58..67 \"\\n        \"\n-          BIN_EXPR@67..72\n-            LITERAL@67..68\n-              INT_NUMBER@67..68 \"2\"\n-            WHITESPACE@68..69 \" \"\n-            PLUS@69..70 \"+\"\n-            WHITESPACE@70..71 \" \"\n-            LITERAL@71..72\n-              INT_NUMBER@71..72 \"3\"\n-          WHITESPACE@72..77 \"\\n    \"\n-          R_CURLY@77..78 \"}\"\n+        L_CURLY@57..58 \"{\"\n+        WHITESPACE@58..67 \"\\n        \"\n+        BIN_EXPR@67..72\n+          LITERAL@67..68\n+            INT_NUMBER@67..68 \"2\"\n+          WHITESPACE@68..69 \" \"\n+          PLUS@69..70 \"+\"\n+          WHITESPACE@70..71 \" \"\n+          LITERAL@71..72\n+            INT_NUMBER@71..72 \"3\"\n+        WHITESPACE@72..77 \"\\n    \"\n+        R_CURLY@77..78 \"}\"\n     WHITESPACE@78..79 \"\\n\"\n     R_CURLY@79..80 \"}\"\n   WHITESPACE@80..82 \"\\n\\n\"\n@@ -71,10 +68,9 @@ SOURCE_FILE@0..95\n       R_PAREN@89..90 \")\"\n     WHITESPACE@90..91 \" \"\n     BLOCK_EXPR@91..94\n-      BLOCK@91..94\n-        L_CURLY@91..92 \"{\"\n-        WHITESPACE@92..93 \"\\n\"\n-        R_CURLY@93..94 \"}\"\n+      L_CURLY@91..92 \"{\"\n+      WHITESPACE@92..93 \"\\n\"\n+      R_CURLY@93..94 \"}\"\n   WHITESPACE@94..95 \"\\n\"\n error 17..17: expected BANG\n error 19..19: expected SEMICOLON"}, {"sha": "3bf57eacc729117c2c7a71219dce0dbedca5a7a0", "filename": "crates/ra_syntax/test_data/parser/err/0010_unsafe_lambda_block.rast", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,37 +9,36 @@ SOURCE_FILE@0..42\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..41\n-      BLOCK@10..41\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        EXPR_STMT@16..24\n-          LAMBDA_EXPR@16..24\n-            PARAM_LIST@16..18\n-              PIPE@16..17 \"|\"\n-              PIPE@17..18 \"|\"\n-            WHITESPACE@18..19 \" \"\n-            RET_TYPE@19..24\n-              THIN_ARROW@19..21 \"->\"\n-              WHITESPACE@21..22 \" \"\n-              TUPLE_TYPE@22..24\n-                L_PAREN@22..23 \"(\"\n-                R_PAREN@23..24 \")\"\n-        WHITESPACE@24..25 \" \"\n-        EXPR_STMT@25..39\n-          BLOCK_EXPR@25..38\n-            UNSAFE_KW@25..31 \"unsafe\"\n-            WHITESPACE@31..32 \" \"\n-            BLOCK@32..38\n-              L_CURLY@32..33 \"{\"\n-              WHITESPACE@33..34 \" \"\n-              TUPLE_EXPR@34..36\n-                L_PAREN@34..35 \"(\"\n-                R_PAREN@35..36 \")\"\n-              WHITESPACE@36..37 \" \"\n-              R_CURLY@37..38 \"}\"\n-          SEMICOLON@38..39 \";\"\n-        WHITESPACE@39..40 \"\\n\"\n-        R_CURLY@40..41 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      EXPR_STMT@16..24\n+        LAMBDA_EXPR@16..24\n+          PARAM_LIST@16..18\n+            PIPE@16..17 \"|\"\n+            PIPE@17..18 \"|\"\n+          WHITESPACE@18..19 \" \"\n+          RET_TYPE@19..24\n+            THIN_ARROW@19..21 \"->\"\n+            WHITESPACE@21..22 \" \"\n+            TUPLE_TYPE@22..24\n+              L_PAREN@22..23 \"(\"\n+              R_PAREN@23..24 \")\"\n+      WHITESPACE@24..25 \" \"\n+      EXPR_STMT@25..39\n+        EFFECT_EXPR@25..38\n+          UNSAFE_KW@25..31 \"unsafe\"\n+          WHITESPACE@31..32 \" \"\n+          BLOCK_EXPR@32..38\n+            L_CURLY@32..33 \"{\"\n+            WHITESPACE@33..34 \" \"\n+            TUPLE_EXPR@34..36\n+              L_PAREN@34..35 \"(\"\n+              R_PAREN@35..36 \")\"\n+            WHITESPACE@36..37 \" \"\n+            R_CURLY@37..38 \"}\"\n+        SEMICOLON@38..39 \";\"\n+      WHITESPACE@39..40 \"\\n\"\n+      R_CURLY@40..41 \"}\"\n   WHITESPACE@41..42 \"\\n\"\n-error 24..24: expected `{`\n+error 24..24: expected a block\n error 24..24: expected SEMICOLON"}, {"sha": "9323b78905a6830af34a1dd07e302885957db8c8", "filename": "crates/ra_syntax/test_data/parser/err/0014_where_no_bounds.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -25,8 +25,7 @@ SOURCE_FILE@0..23\n                 IDENT@18..19 \"T\"\n     WHITESPACE@19..20 \" \"\n     BLOCK_EXPR@20..22\n-      BLOCK@20..22\n-        L_CURLY@20..21 \"{\"\n-        R_CURLY@21..22 \"}\"\n+      L_CURLY@20..21 \"{\"\n+      R_CURLY@21..22 \"}\"\n   WHITESPACE@22..23 \"\\n\"\n error 19..19: expected colon"}, {"sha": "93434f34f4a38af1043fd0339e6080a6beb0acd5", "filename": "crates/ra_syntax/test_data/parser/err/0016_missing_semi.rast", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,36 +9,35 @@ SOURCE_FILE@0..56\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..55\n-      BLOCK@9..55\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..38\n-          CALL_EXPR@15..38\n-            PATH_EXPR@15..18\n-              PATH@15..18\n-                PATH_SEGMENT@15..18\n-                  NAME_REF@15..18\n-                    IDENT@15..18 \"foo\"\n-            ARG_LIST@18..38\n-              L_PAREN@18..19 \"(\"\n-              WHITESPACE@19..28 \"\\n        \"\n-              LITERAL@28..29\n-                INT_NUMBER@28..29 \"1\"\n-              COMMA@29..30 \",\"\n-              WHITESPACE@30..31 \" \"\n-              LITERAL@31..32\n-                INT_NUMBER@31..32 \"2\"\n-              WHITESPACE@32..37 \"\\n    \"\n-              R_PAREN@37..38 \")\"\n-        WHITESPACE@38..43 \"\\n    \"\n-        EXPR_STMT@43..53\n-          RETURN_EXPR@43..52\n-            RETURN_KW@43..49 \"return\"\n-            WHITESPACE@49..50 \" \"\n-            LITERAL@50..52\n-              INT_NUMBER@50..52 \"92\"\n-          SEMICOLON@52..53 \";\"\n-        WHITESPACE@53..54 \"\\n\"\n-        R_CURLY@54..55 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..38\n+        CALL_EXPR@15..38\n+          PATH_EXPR@15..18\n+            PATH@15..18\n+              PATH_SEGMENT@15..18\n+                NAME_REF@15..18\n+                  IDENT@15..18 \"foo\"\n+          ARG_LIST@18..38\n+            L_PAREN@18..19 \"(\"\n+            WHITESPACE@19..28 \"\\n        \"\n+            LITERAL@28..29\n+              INT_NUMBER@28..29 \"1\"\n+            COMMA@29..30 \",\"\n+            WHITESPACE@30..31 \" \"\n+            LITERAL@31..32\n+              INT_NUMBER@31..32 \"2\"\n+            WHITESPACE@32..37 \"\\n    \"\n+            R_PAREN@37..38 \")\"\n+      WHITESPACE@38..43 \"\\n    \"\n+      EXPR_STMT@43..53\n+        RETURN_EXPR@43..52\n+          RETURN_KW@43..49 \"return\"\n+          WHITESPACE@49..50 \" \"\n+          LITERAL@50..52\n+            INT_NUMBER@50..52 \"92\"\n+        SEMICOLON@52..53 \";\"\n+      WHITESPACE@53..54 \"\\n\"\n+      R_CURLY@54..55 \"}\"\n   WHITESPACE@55..56 \"\\n\"\n error 38..38: expected SEMICOLON"}, {"sha": "628315c7850bfebc1c98c286db2a027f3c2305dc", "filename": "crates/ra_syntax/test_data/parser/err/0017_incomplete_binexpr.rast", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -20,28 +20,27 @@ SOURCE_FILE@0..47\n       R_PAREN@15..16 \")\"\n     WHITESPACE@16..17 \" \"\n     BLOCK_EXPR@17..46\n-      BLOCK@17..46\n-        L_CURLY@17..18 \"{\"\n-        WHITESPACE@18..23 \"\\n    \"\n-        LET_STMT@23..36\n-          LET_KW@23..26 \"let\"\n-          WHITESPACE@26..27 \" \"\n-          BIND_PAT@27..30\n-            NAME@27..30\n-              IDENT@27..30 \"bar\"\n-          WHITESPACE@30..31 \" \"\n-          EQ@31..32 \"=\"\n-          WHITESPACE@32..33 \" \"\n-          LITERAL@33..35\n-            INT_NUMBER@33..35 \"92\"\n-          SEMICOLON@35..36 \";\"\n-        WHITESPACE@36..41 \"\\n    \"\n-        BIN_EXPR@41..44\n-          LITERAL@41..42\n-            INT_NUMBER@41..42 \"1\"\n-          WHITESPACE@42..43 \" \"\n-          PLUS@43..44 \"+\"\n-        WHITESPACE@44..45 \"\\n\"\n-        R_CURLY@45..46 \"}\"\n+      L_CURLY@17..18 \"{\"\n+      WHITESPACE@18..23 \"\\n    \"\n+      LET_STMT@23..36\n+        LET_KW@23..26 \"let\"\n+        WHITESPACE@26..27 \" \"\n+        BIND_PAT@27..30\n+          NAME@27..30\n+            IDENT@27..30 \"bar\"\n+        WHITESPACE@30..31 \" \"\n+        EQ@31..32 \"=\"\n+        WHITESPACE@32..33 \" \"\n+        LITERAL@33..35\n+          INT_NUMBER@33..35 \"92\"\n+        SEMICOLON@35..36 \";\"\n+      WHITESPACE@36..41 \"\\n    \"\n+      BIN_EXPR@41..44\n+        LITERAL@41..42\n+          INT_NUMBER@41..42 \"1\"\n+        WHITESPACE@42..43 \" \"\n+        PLUS@43..44 \"+\"\n+      WHITESPACE@44..45 \"\\n\"\n+      R_CURLY@45..46 \"}\"\n   WHITESPACE@46..47 \"\\n\"\n error 44..44: expected expression"}, {"sha": "31cc4e5514275cf8aa5456b83c19d49c6101cfd8", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 82, "deletions": 83, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -33,89 +33,88 @@ SOURCE_FILE@0..183\n                   IDENT@39..46 \"ScopeId\"\n         WHITESPACE@46..47 \" \"\n         BLOCK_EXPR@47..161\n-          BLOCK@47..161\n-            L_CURLY@47..48 \"{\"\n-            WHITESPACE@48..57 \"\\n        \"\n-            LET_STMT@57..85\n-              LET_KW@57..60 \"let\"\n-              WHITESPACE@60..61 \" \"\n-              BIND_PAT@61..64\n-                NAME@61..64\n-                  IDENT@61..64 \"res\"\n-              WHITESPACE@64..65 \" \"\n-              EQ@65..66 \"=\"\n-              WHITESPACE@66..67 \" \"\n-              METHOD_CALL_EXPR@67..84\n-                FIELD_EXPR@67..78\n-                  PATH_EXPR@67..71\n-                    PATH@67..71\n-                      PATH_SEGMENT@67..71\n-                        SELF_KW@67..71 \"self\"\n-                  DOT@71..72 \".\"\n-                  NAME_REF@72..78\n-                    IDENT@72..78 \"scopes\"\n-                DOT@78..79 \".\"\n-                NAME_REF@79..82\n-                  IDENT@79..82 \"len\"\n-                ARG_LIST@82..84\n-                  L_PAREN@82..83 \"(\"\n-                  R_PAREN@83..84 \")\"\n-              SEMICOLON@84..85 \";\"\n-            WHITESPACE@85..94 \"\\n        \"\n-            METHOD_CALL_EXPR@94..155\n-              FIELD_EXPR@94..105\n-                PATH_EXPR@94..98\n-                  PATH@94..98\n-                    PATH_SEGMENT@94..98\n-                      SELF_KW@94..98 \"self\"\n-                DOT@98..99 \".\"\n-                NAME_REF@99..105\n-                  IDENT@99..105 \"scopes\"\n-              DOT@105..106 \".\"\n-              NAME_REF@106..110\n-                IDENT@106..110 \"push\"\n-              ARG_LIST@110..155\n-                L_PAREN@110..111 \"(\"\n-                RECORD_LIT@111..154\n-                  PATH@111..120\n-                    PATH_SEGMENT@111..120\n-                      NAME_REF@111..120\n-                        IDENT@111..120 \"ScopeData\"\n-                  WHITESPACE@120..121 \" \"\n-                  RECORD_FIELD_LIST@121..154\n-                    L_CURLY@121..122 \"{\"\n-                    WHITESPACE@122..123 \" \"\n-                    RECORD_FIELD@123..135\n-                      NAME_REF@123..129\n-                        IDENT@123..129 \"parent\"\n-                      COLON@129..130 \":\"\n-                      WHITESPACE@130..131 \" \"\n-                      PATH_EXPR@131..135\n-                        PATH@131..135\n-                          PATH_SEGMENT@131..135\n-                            NAME_REF@131..135\n-                              IDENT@131..135 \"None\"\n-                    COMMA@135..136 \",\"\n-                    WHITESPACE@136..137 \" \"\n-                    RECORD_FIELD@137..152\n-                      NAME_REF@137..144\n-                        IDENT@137..144 \"entries\"\n-                      COLON@144..145 \":\"\n-                      WHITESPACE@145..146 \" \"\n-                      MACRO_CALL@146..152\n-                        PATH@146..149\n-                          PATH_SEGMENT@146..149\n-                            NAME_REF@146..149\n-                              IDENT@146..149 \"vec\"\n-                        BANG@149..150 \"!\"\n-                        TOKEN_TREE@150..152\n-                          L_BRACK@150..151 \"[\"\n-                          R_BRACK@151..152 \"]\"\n-                    WHITESPACE@152..153 \" \"\n-                    R_CURLY@153..154 \"}\"\n-                R_PAREN@154..155 \")\"\n-            WHITESPACE@155..160 \"\\n    \"\n-            R_CURLY@160..161 \"}\"\n+          L_CURLY@47..48 \"{\"\n+          WHITESPACE@48..57 \"\\n        \"\n+          LET_STMT@57..85\n+            LET_KW@57..60 \"let\"\n+            WHITESPACE@60..61 \" \"\n+            BIND_PAT@61..64\n+              NAME@61..64\n+                IDENT@61..64 \"res\"\n+            WHITESPACE@64..65 \" \"\n+            EQ@65..66 \"=\"\n+            WHITESPACE@66..67 \" \"\n+            METHOD_CALL_EXPR@67..84\n+              FIELD_EXPR@67..78\n+                PATH_EXPR@67..71\n+                  PATH@67..71\n+                    PATH_SEGMENT@67..71\n+                      SELF_KW@67..71 \"self\"\n+                DOT@71..72 \".\"\n+                NAME_REF@72..78\n+                  IDENT@72..78 \"scopes\"\n+              DOT@78..79 \".\"\n+              NAME_REF@79..82\n+                IDENT@79..82 \"len\"\n+              ARG_LIST@82..84\n+                L_PAREN@82..83 \"(\"\n+                R_PAREN@83..84 \")\"\n+            SEMICOLON@84..85 \";\"\n+          WHITESPACE@85..94 \"\\n        \"\n+          METHOD_CALL_EXPR@94..155\n+            FIELD_EXPR@94..105\n+              PATH_EXPR@94..98\n+                PATH@94..98\n+                  PATH_SEGMENT@94..98\n+                    SELF_KW@94..98 \"self\"\n+              DOT@98..99 \".\"\n+              NAME_REF@99..105\n+                IDENT@99..105 \"scopes\"\n+            DOT@105..106 \".\"\n+            NAME_REF@106..110\n+              IDENT@106..110 \"push\"\n+            ARG_LIST@110..155\n+              L_PAREN@110..111 \"(\"\n+              RECORD_LIT@111..154\n+                PATH@111..120\n+                  PATH_SEGMENT@111..120\n+                    NAME_REF@111..120\n+                      IDENT@111..120 \"ScopeData\"\n+                WHITESPACE@120..121 \" \"\n+                RECORD_FIELD_LIST@121..154\n+                  L_CURLY@121..122 \"{\"\n+                  WHITESPACE@122..123 \" \"\n+                  RECORD_FIELD@123..135\n+                    NAME_REF@123..129\n+                      IDENT@123..129 \"parent\"\n+                    COLON@129..130 \":\"\n+                    WHITESPACE@130..131 \" \"\n+                    PATH_EXPR@131..135\n+                      PATH@131..135\n+                        PATH_SEGMENT@131..135\n+                          NAME_REF@131..135\n+                            IDENT@131..135 \"None\"\n+                  COMMA@135..136 \",\"\n+                  WHITESPACE@136..137 \" \"\n+                  RECORD_FIELD@137..152\n+                    NAME_REF@137..144\n+                      IDENT@137..144 \"entries\"\n+                    COLON@144..145 \":\"\n+                    WHITESPACE@145..146 \" \"\n+                    MACRO_CALL@146..152\n+                      PATH@146..149\n+                        PATH_SEGMENT@146..149\n+                          NAME_REF@146..149\n+                            IDENT@146..149 \"vec\"\n+                      BANG@149..150 \"!\"\n+                      TOKEN_TREE@150..152\n+                        L_BRACK@150..151 \"[\"\n+                        R_BRACK@151..152 \"]\"\n+                  WHITESPACE@152..153 \" \"\n+                  R_CURLY@153..154 \"}\"\n+              R_PAREN@154..155 \")\"\n+          WHITESPACE@155..160 \"\\n    \"\n+          R_CURLY@160..161 \"}\"\n       WHITESPACE@161..167 \"\\n\\n    \"\n       FN_DEF@167..180\n         FN_KW@167..169 \"fn\""}, {"sha": "4ff27f5c85dda34295deae5b7594b57611cf7fe3", "filename": "crates/ra_syntax/test_data/parser/err/0019_let_recover.rast", "status": "modified", "additions": 81, "deletions": 85, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,91 +9,87 @@ SOURCE_FILE@0..139\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..138\n-      BLOCK@9..138\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..24\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          BIND_PAT@19..22\n-            NAME@19..22\n-              IDENT@19..22 \"foo\"\n-          WHITESPACE@22..23 \" \"\n-          EQ@23..24 \"=\"\n-        WHITESPACE@24..29 \"\\n    \"\n-        LET_STMT@29..41\n-          LET_KW@29..32 \"let\"\n-          WHITESPACE@32..33 \" \"\n-          BIND_PAT@33..36\n-            NAME@33..36\n-              IDENT@33..36 \"bar\"\n-          WHITESPACE@36..37 \" \"\n-          EQ@37..38 \"=\"\n-          WHITESPACE@38..39 \" \"\n-          LITERAL@39..40\n-            INT_NUMBER@39..40 \"1\"\n-          SEMICOLON@40..41 \";\"\n-        WHITESPACE@41..46 \"\\n    \"\n-        LET_STMT@46..49\n-          LET_KW@46..49 \"let\"\n-        WHITESPACE@49..54 \"\\n    \"\n-        LET_STMT@54..67\n-          LET_KW@54..57 \"let\"\n-          WHITESPACE@57..58 \" \"\n-          BIND_PAT@58..61\n-            NAME@58..61\n-              IDENT@58..61 \"baz\"\n-          WHITESPACE@61..62 \" \"\n-          EQ@62..63 \"=\"\n-          WHITESPACE@63..64 \" \"\n-          LITERAL@64..66\n-            INT_NUMBER@64..66 \"92\"\n-          SEMICOLON@66..67 \";\"\n-        WHITESPACE@67..72 \"\\n    \"\n-        LET_STMT@72..75\n-          LET_KW@72..75 \"let\"\n-        WHITESPACE@75..80 \"\\n    \"\n-        EXPR_STMT@80..90\n-          IF_EXPR@80..90\n-            IF_KW@80..82 \"if\"\n-            WHITESPACE@82..83 \" \"\n-            CONDITION@83..87\n-              LITERAL@83..87\n-                TRUE_KW@83..87 \"true\"\n-            WHITESPACE@87..88 \" \"\n-            BLOCK_EXPR@88..90\n-              BLOCK@88..90\n-                L_CURLY@88..89 \"{\"\n-                R_CURLY@89..90 \"}\"\n-        WHITESPACE@90..95 \"\\n    \"\n-        LET_STMT@95..98\n-          LET_KW@95..98 \"let\"\n-        WHITESPACE@98..103 \"\\n    \"\n-        EXPR_STMT@103..116\n-          WHILE_EXPR@103..116\n-            WHILE_KW@103..108 \"while\"\n-            WHITESPACE@108..109 \" \"\n-            CONDITION@109..113\n-              LITERAL@109..113\n-                TRUE_KW@109..113 \"true\"\n-            WHITESPACE@113..114 \" \"\n-            BLOCK_EXPR@114..116\n-              BLOCK@114..116\n-                L_CURLY@114..115 \"{\"\n-                R_CURLY@115..116 \"}\"\n-        WHITESPACE@116..121 \"\\n    \"\n-        LET_STMT@121..124\n-          LET_KW@121..124 \"let\"\n-        WHITESPACE@124..129 \"\\n    \"\n-        LOOP_EXPR@129..136\n-          LOOP_KW@129..133 \"loop\"\n-          WHITESPACE@133..134 \" \"\n-          BLOCK_EXPR@134..136\n-            BLOCK@134..136\n-              L_CURLY@134..135 \"{\"\n-              R_CURLY@135..136 \"}\"\n-        WHITESPACE@136..137 \"\\n\"\n-        R_CURLY@137..138 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..24\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        BIND_PAT@19..22\n+          NAME@19..22\n+            IDENT@19..22 \"foo\"\n+        WHITESPACE@22..23 \" \"\n+        EQ@23..24 \"=\"\n+      WHITESPACE@24..29 \"\\n    \"\n+      LET_STMT@29..41\n+        LET_KW@29..32 \"let\"\n+        WHITESPACE@32..33 \" \"\n+        BIND_PAT@33..36\n+          NAME@33..36\n+            IDENT@33..36 \"bar\"\n+        WHITESPACE@36..37 \" \"\n+        EQ@37..38 \"=\"\n+        WHITESPACE@38..39 \" \"\n+        LITERAL@39..40\n+          INT_NUMBER@39..40 \"1\"\n+        SEMICOLON@40..41 \";\"\n+      WHITESPACE@41..46 \"\\n    \"\n+      LET_STMT@46..49\n+        LET_KW@46..49 \"let\"\n+      WHITESPACE@49..54 \"\\n    \"\n+      LET_STMT@54..67\n+        LET_KW@54..57 \"let\"\n+        WHITESPACE@57..58 \" \"\n+        BIND_PAT@58..61\n+          NAME@58..61\n+            IDENT@58..61 \"baz\"\n+        WHITESPACE@61..62 \" \"\n+        EQ@62..63 \"=\"\n+        WHITESPACE@63..64 \" \"\n+        LITERAL@64..66\n+          INT_NUMBER@64..66 \"92\"\n+        SEMICOLON@66..67 \";\"\n+      WHITESPACE@67..72 \"\\n    \"\n+      LET_STMT@72..75\n+        LET_KW@72..75 \"let\"\n+      WHITESPACE@75..80 \"\\n    \"\n+      EXPR_STMT@80..90\n+        IF_EXPR@80..90\n+          IF_KW@80..82 \"if\"\n+          WHITESPACE@82..83 \" \"\n+          CONDITION@83..87\n+            LITERAL@83..87\n+              TRUE_KW@83..87 \"true\"\n+          WHITESPACE@87..88 \" \"\n+          BLOCK_EXPR@88..90\n+            L_CURLY@88..89 \"{\"\n+            R_CURLY@89..90 \"}\"\n+      WHITESPACE@90..95 \"\\n    \"\n+      LET_STMT@95..98\n+        LET_KW@95..98 \"let\"\n+      WHITESPACE@98..103 \"\\n    \"\n+      EXPR_STMT@103..116\n+        WHILE_EXPR@103..116\n+          WHILE_KW@103..108 \"while\"\n+          WHITESPACE@108..109 \" \"\n+          CONDITION@109..113\n+            LITERAL@109..113\n+              TRUE_KW@109..113 \"true\"\n+          WHITESPACE@113..114 \" \"\n+          BLOCK_EXPR@114..116\n+            L_CURLY@114..115 \"{\"\n+            R_CURLY@115..116 \"}\"\n+      WHITESPACE@116..121 \"\\n    \"\n+      LET_STMT@121..124\n+        LET_KW@121..124 \"let\"\n+      WHITESPACE@124..129 \"\\n    \"\n+      LOOP_EXPR@129..136\n+        LOOP_KW@129..133 \"loop\"\n+        WHITESPACE@133..134 \" \"\n+        BLOCK_EXPR@134..136\n+          L_CURLY@134..135 \"{\"\n+          R_CURLY@135..136 \"}\"\n+      WHITESPACE@136..137 \"\\n\"\n+      R_CURLY@137..138 \"}\"\n   WHITESPACE@138..139 \"\\n\"\n error 24..24: expected expression\n error 24..24: expected SEMICOLON"}, {"sha": "5f3a31473f0cceb8fed291d835ebe21e814836d8", "filename": "crates/ra_syntax/test_data/parser/err/0020_fn_recover.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -12,9 +12,8 @@ SOURCE_FILE@0..16\n       R_PAREN@11..12 \")\"\n     WHITESPACE@12..13 \" \"\n     BLOCK_EXPR@13..15\n-      BLOCK@13..15\n-        L_CURLY@13..14 \"{\"\n-        R_CURLY@14..15 \"}\"\n+      L_CURLY@13..14 \"{\"\n+      R_CURLY@14..15 \"}\"\n   WHITESPACE@15..16 \"\\n\"\n error 2..2: expected a name\n error 2..2: expected function arguments"}, {"sha": "1746bd3c1011ac6a81978db53239d4af4040c2ca", "filename": "crates/ra_syntax/test_data/parser/err/0021_incomplete_param.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -26,10 +26,9 @@ SOURCE_FILE@0..22\n       R_PAREN@16..17 \")\"\n     WHITESPACE@17..18 \" \"\n     BLOCK_EXPR@18..21\n-      BLOCK@18..21\n-        L_CURLY@18..19 \"{\"\n-        WHITESPACE@19..20 \"\\n\"\n-        R_CURLY@20..21 \"}\"\n+      L_CURLY@18..19 \"{\"\n+      WHITESPACE@19..20 \"\\n\"\n+      R_CURLY@20..21 \"}\"\n   WHITESPACE@21..22 \"\\n\"\n error 16..16: expected COLON\n error 16..16: expected type"}, {"sha": "28146f44e36b4a2f596b522a47d2fe78fe6b895d", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 113, "deletions": 116, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,37 +9,36 @@ SOURCE_FILE@0..112\n       R_PAREN@5..6 \")\"\n     WHITESPACE@6..7 \" \"\n     BLOCK_EXPR@7..33\n-      BLOCK@7..33\n-        L_CURLY@7..8 \"{\"\n-        WHITESPACE@8..9 \" \"\n-        EXPR_STMT@9..17\n-          ARRAY_EXPR@9..17\n-            L_BRACK@9..10 \"[\"\n-            LITERAL@10..11\n-              INT_NUMBER@10..11 \"1\"\n-            COMMA@11..12 \",\"\n-            WHITESPACE@12..13 \" \"\n-            LITERAL@13..14\n-              INT_NUMBER@13..14 \"2\"\n-            COMMA@14..15 \",\"\n-            WHITESPACE@15..16 \" \"\n-            ERROR@16..17\n-              AT@16..17 \"@\"\n-        EXPR_STMT@17..18\n-          ERROR@17..18\n-            COMMA@17..18 \",\"\n-        WHITESPACE@18..19 \" \"\n-        STRUCT_DEF@19..26\n-          STRUCT_KW@19..25 \"struct\"\n-          ERROR@25..26\n-            COMMA@25..26 \",\"\n-        WHITESPACE@26..27 \" \"\n-        LET_STMT@27..31\n-          LET_KW@27..30 \"let\"\n-          ERROR@30..31\n-            R_BRACK@30..31 \"]\"\n-        WHITESPACE@31..32 \" \"\n-        R_CURLY@32..33 \"}\"\n+      L_CURLY@7..8 \"{\"\n+      WHITESPACE@8..9 \" \"\n+      EXPR_STMT@9..17\n+        ARRAY_EXPR@9..17\n+          L_BRACK@9..10 \"[\"\n+          LITERAL@10..11\n+            INT_NUMBER@10..11 \"1\"\n+          COMMA@11..12 \",\"\n+          WHITESPACE@12..13 \" \"\n+          LITERAL@13..14\n+            INT_NUMBER@13..14 \"2\"\n+          COMMA@14..15 \",\"\n+          WHITESPACE@15..16 \" \"\n+          ERROR@16..17\n+            AT@16..17 \"@\"\n+      EXPR_STMT@17..18\n+        ERROR@17..18\n+          COMMA@17..18 \",\"\n+      WHITESPACE@18..19 \" \"\n+      STRUCT_DEF@19..26\n+        STRUCT_KW@19..25 \"struct\"\n+        ERROR@25..26\n+          COMMA@25..26 \",\"\n+      WHITESPACE@26..27 \" \"\n+      LET_STMT@27..31\n+        LET_KW@27..30 \"let\"\n+        ERROR@30..31\n+          R_BRACK@30..31 \"]\"\n+      WHITESPACE@31..32 \" \"\n+      R_CURLY@32..33 \"}\"\n   WHITESPACE@33..34 \"\\n\"\n   FN_DEF@34..68\n     FN_KW@34..36 \"fn\"\n@@ -51,44 +50,43 @@ SOURCE_FILE@0..112\n       R_PAREN@39..40 \")\"\n     WHITESPACE@40..41 \" \"\n     BLOCK_EXPR@41..68\n-      BLOCK@41..68\n-        L_CURLY@41..42 \"{\"\n-        WHITESPACE@42..43 \" \"\n-        EXPR_STMT@43..54\n-          CALL_EXPR@43..54\n-            PATH_EXPR@43..46\n-              PATH@43..46\n-                PATH_SEGMENT@43..46\n-                  NAME_REF@43..46\n-                    IDENT@43..46 \"foo\"\n-            ARG_LIST@46..54\n-              L_PAREN@46..47 \"(\"\n-              LITERAL@47..48\n-                INT_NUMBER@47..48 \"1\"\n-              COMMA@48..49 \",\"\n-              WHITESPACE@49..50 \" \"\n-              LITERAL@50..51\n-                INT_NUMBER@50..51 \"2\"\n-              COMMA@51..52 \",\"\n-              WHITESPACE@52..53 \" \"\n-              ERROR@53..54\n-                AT@53..54 \"@\"\n-        EXPR_STMT@54..55\n-          ERROR@54..55\n-            COMMA@54..55 \",\"\n-        WHITESPACE@55..56 \" \"\n-        IMPL_DEF@56..60\n-          IMPL_KW@56..60 \"impl\"\n-        EXPR_STMT@60..61\n-          ERROR@60..61\n-            COMMA@60..61 \",\"\n-        WHITESPACE@61..62 \" \"\n-        LET_STMT@62..65\n-          LET_KW@62..65 \"let\"\n-        ERROR@65..66\n-          R_PAREN@65..66 \")\"\n-        WHITESPACE@66..67 \" \"\n-        R_CURLY@67..68 \"}\"\n+      L_CURLY@41..42 \"{\"\n+      WHITESPACE@42..43 \" \"\n+      EXPR_STMT@43..54\n+        CALL_EXPR@43..54\n+          PATH_EXPR@43..46\n+            PATH@43..46\n+              PATH_SEGMENT@43..46\n+                NAME_REF@43..46\n+                  IDENT@43..46 \"foo\"\n+          ARG_LIST@46..54\n+            L_PAREN@46..47 \"(\"\n+            LITERAL@47..48\n+              INT_NUMBER@47..48 \"1\"\n+            COMMA@48..49 \",\"\n+            WHITESPACE@49..50 \" \"\n+            LITERAL@50..51\n+              INT_NUMBER@50..51 \"2\"\n+            COMMA@51..52 \",\"\n+            WHITESPACE@52..53 \" \"\n+            ERROR@53..54\n+              AT@53..54 \"@\"\n+      EXPR_STMT@54..55\n+        ERROR@54..55\n+          COMMA@54..55 \",\"\n+      WHITESPACE@55..56 \" \"\n+      IMPL_DEF@56..60\n+        IMPL_KW@56..60 \"impl\"\n+      EXPR_STMT@60..61\n+        ERROR@60..61\n+          COMMA@60..61 \",\"\n+      WHITESPACE@61..62 \" \"\n+      LET_STMT@62..65\n+        LET_KW@62..65 \"let\"\n+      ERROR@65..66\n+        R_PAREN@65..66 \")\"\n+      WHITESPACE@66..67 \" \"\n+      R_CURLY@67..68 \"}\"\n   WHITESPACE@68..69 \"\\n\"\n   FN_DEF@69..111\n     FN_KW@69..71 \"fn\"\n@@ -100,53 +98,52 @@ SOURCE_FILE@0..112\n       R_PAREN@74..75 \")\"\n     WHITESPACE@75..76 \" \"\n     BLOCK_EXPR@76..111\n-      BLOCK@76..111\n-        L_CURLY@76..77 \"{\"\n-        WHITESPACE@77..78 \" \"\n-        EXPR_STMT@78..93\n-          METHOD_CALL_EXPR@78..93\n-            PATH_EXPR@78..81\n-              PATH@78..81\n-                PATH_SEGMENT@78..81\n-                  NAME_REF@78..81\n-                    IDENT@78..81 \"foo\"\n-            DOT@81..82 \".\"\n-            NAME_REF@82..85\n-              IDENT@82..85 \"bar\"\n-            ARG_LIST@85..93\n-              L_PAREN@85..86 \"(\"\n-              LITERAL@86..87\n-                INT_NUMBER@86..87 \"1\"\n-              COMMA@87..88 \",\"\n-              WHITESPACE@88..89 \" \"\n-              LITERAL@89..90\n-                INT_NUMBER@89..90 \"2\"\n-              COMMA@90..91 \",\"\n-              WHITESPACE@91..92 \" \"\n-              ERROR@92..93\n-                AT@92..93 \"@\"\n-        EXPR_STMT@93..94\n-          ERROR@93..94\n-            COMMA@93..94 \",\"\n-        WHITESPACE@94..95 \" \"\n-        EXPR_STMT@95..96\n-          ERROR@95..96\n-            R_BRACK@95..96 \"]\"\n-        EXPR_STMT@96..97\n-          ERROR@96..97\n-            COMMA@96..97 \",\"\n-        WHITESPACE@97..98 \" \"\n-        TRAIT_DEF@98..104\n-          TRAIT_KW@98..103 \"trait\"\n-          ERROR@103..104\n-            COMMA@103..104 \",\"\n-        WHITESPACE@104..105 \" \"\n-        LET_STMT@105..108\n-          LET_KW@105..108 \"let\"\n-        ERROR@108..109\n-          R_PAREN@108..109 \")\"\n-        WHITESPACE@109..110 \" \"\n-        R_CURLY@110..111 \"}\"\n+      L_CURLY@76..77 \"{\"\n+      WHITESPACE@77..78 \" \"\n+      EXPR_STMT@78..93\n+        METHOD_CALL_EXPR@78..93\n+          PATH_EXPR@78..81\n+            PATH@78..81\n+              PATH_SEGMENT@78..81\n+                NAME_REF@78..81\n+                  IDENT@78..81 \"foo\"\n+          DOT@81..82 \".\"\n+          NAME_REF@82..85\n+            IDENT@82..85 \"bar\"\n+          ARG_LIST@85..93\n+            L_PAREN@85..86 \"(\"\n+            LITERAL@86..87\n+              INT_NUMBER@86..87 \"1\"\n+            COMMA@87..88 \",\"\n+            WHITESPACE@88..89 \" \"\n+            LITERAL@89..90\n+              INT_NUMBER@89..90 \"2\"\n+            COMMA@90..91 \",\"\n+            WHITESPACE@91..92 \" \"\n+            ERROR@92..93\n+              AT@92..93 \"@\"\n+      EXPR_STMT@93..94\n+        ERROR@93..94\n+          COMMA@93..94 \",\"\n+      WHITESPACE@94..95 \" \"\n+      EXPR_STMT@95..96\n+        ERROR@95..96\n+          R_BRACK@95..96 \"]\"\n+      EXPR_STMT@96..97\n+        ERROR@96..97\n+          COMMA@96..97 \",\"\n+      WHITESPACE@97..98 \" \"\n+      TRAIT_DEF@98..104\n+        TRAIT_KW@98..103 \"trait\"\n+        ERROR@103..104\n+          COMMA@103..104 \",\"\n+      WHITESPACE@104..105 \" \"\n+      LET_STMT@105..108\n+        LET_KW@105..108 \"let\"\n+      ERROR@108..109\n+        R_PAREN@108..109 \")\"\n+      WHITESPACE@109..110 \" \"\n+      R_CURLY@110..111 \"}\"\n   WHITESPACE@111..112 \"\\n\"\n error 16..16: expected expression\n error 17..17: expected R_BRACK"}, {"sha": "9ea9d715ea8e235940d1a6dbfae08b2e9a00a2cb", "filename": "crates/ra_syntax/test_data/parser/err/0023_mismatched_paren.rast", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,31 +9,30 @@ SOURCE_FILE@0..94\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..55\n-      BLOCK@10..55\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        MACRO_CALL@16..49\n-          PATH@16..19\n-            PATH_SEGMENT@16..19\n-              NAME_REF@16..19\n-                IDENT@16..19 \"foo\"\n-          BANG@19..20 \"!\"\n-          WHITESPACE@20..21 \" \"\n-          TOKEN_TREE@21..49\n-            L_PAREN@21..22 \"(\"\n-            WHITESPACE@22..31 \"\\n        \"\n-            IDENT@31..34 \"bar\"\n-            COMMA@34..35 \",\"\n-            WHITESPACE@35..36 \" \"\n-            STRING@36..41 \"\\\"baz\\\"\"\n-            COMMA@41..42 \",\"\n-            WHITESPACE@42..43 \" \"\n-            INT_NUMBER@43..44 \"1\"\n-            COMMA@44..45 \",\"\n-            WHITESPACE@45..46 \" \"\n-            FLOAT_NUMBER@46..49 \"2.0\"\n-        WHITESPACE@49..54 \"\\n    \"\n-        R_CURLY@54..55 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      MACRO_CALL@16..49\n+        PATH@16..19\n+          PATH_SEGMENT@16..19\n+            NAME_REF@16..19\n+              IDENT@16..19 \"foo\"\n+        BANG@19..20 \"!\"\n+        WHITESPACE@20..21 \" \"\n+        TOKEN_TREE@21..49\n+          L_PAREN@21..22 \"(\"\n+          WHITESPACE@22..31 \"\\n        \"\n+          IDENT@31..34 \"bar\"\n+          COMMA@34..35 \",\"\n+          WHITESPACE@35..36 \" \"\n+          STRING@36..41 \"\\\"baz\\\"\"\n+          COMMA@41..42 \",\"\n+          WHITESPACE@42..43 \" \"\n+          INT_NUMBER@43..44 \"1\"\n+          COMMA@44..45 \",\"\n+          WHITESPACE@45..46 \" \"\n+          FLOAT_NUMBER@46..49 \"2.0\"\n+      WHITESPACE@49..54 \"\\n    \"\n+      R_CURLY@54..55 \"}\"\n   WHITESPACE@55..56 \" \"\n   COMMENT@56..91 \"//~ ERROR incorrect c ...\"\n   WHITESPACE@91..92 \"\\n\""}, {"sha": "7c957fdde2365357289a550c0d5154fccf8f8d9f", "filename": "crates/ra_syntax/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 214, "deletions": 216, "changes": 430, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -62,9 +62,8 @@ SOURCE_FILE@0..240\n       R_PAREN@49..50 \")\"\n     WHITESPACE@50..51 \" \"\n     BLOCK_EXPR@51..53\n-      BLOCK@51..53\n-        L_CURLY@51..52 \"{\"\n-        R_CURLY@52..53 \"}\"\n+      L_CURLY@51..52 \"{\"\n+      R_CURLY@52..53 \"}\"\n   WHITESPACE@53..55 \"\\n\\n\"\n   FN_DEF@55..239\n     FN_KW@55..57 \"fn\"\n@@ -76,219 +75,218 @@ SOURCE_FILE@0..240\n       R_PAREN@63..64 \")\"\n     WHITESPACE@64..65 \" \"\n     BLOCK_EXPR@65..239\n-      BLOCK@65..239\n-        L_CURLY@65..66 \"{\"\n-        WHITESPACE@66..71 \"\\n    \"\n-        LET_STMT@71..121\n-          LET_KW@71..74 \"let\"\n-          WHITESPACE@74..75 \" \"\n-          PLACEHOLDER_PAT@75..76\n-            UNDERSCORE@75..76 \"_\"\n-          COLON@76..77 \":\"\n-          WHITESPACE@77..78 \" \"\n-          DYN_TRAIT_TYPE@78..121\n-            TYPE_BOUND_LIST@78..121\n-              TYPE_BOUND@78..88\n-                PATH_TYPE@78..88\n-                  PATH@78..88\n-                    PATH_SEGMENT@78..88\n-                      NAME_REF@78..81\n-                        IDENT@78..81 \"Box\"\n-                      TYPE_ARG_LIST@81..88\n-                        L_ANGLE@81..82 \"<\"\n-                        TYPE_ARG@82..88\n-                          PAREN_TYPE@82..88\n-                            L_PAREN@82..83 \"(\"\n-                            PATH_TYPE@83..87\n-                              PATH@83..87\n-                                PATH_SEGMENT@83..87\n-                                  NAME_REF@83..87\n-                                    IDENT@83..87 \"Copy\"\n-                            R_PAREN@87..88 \")\"\n-              WHITESPACE@88..89 \" \"\n-              PLUS@89..90 \"+\"\n-              WHITESPACE@90..91 \" \"\n-              TYPE_BOUND@91..99\n-                L_PAREN@91..92 \"(\"\n-                QUESTION@92..93 \"?\"\n-                PATH_TYPE@93..98\n-                  PATH@93..98\n-                    PATH_SEGMENT@93..98\n-                      NAME_REF@93..98\n-                        IDENT@93..98 \"Sized\"\n-                R_PAREN@98..99 \")\"\n-              WHITESPACE@99..100 \" \"\n-              PLUS@100..101 \"+\"\n-              WHITESPACE@101..102 \" \"\n-              TYPE_BOUND@102..121\n-                L_PAREN@102..103 \"(\"\n-                FOR_TYPE@103..120\n-                  FOR_KW@103..106 \"for\"\n-                  TYPE_PARAM_LIST@106..110\n-                    L_ANGLE@106..107 \"<\"\n-                    LIFETIME_PARAM@107..109\n-                      LIFETIME@107..109 \"\\'a\"\n-                    R_ANGLE@109..110 \">\"\n-                  WHITESPACE@110..111 \" \"\n-                  PATH_TYPE@111..120\n-                    PATH@111..120\n-                      PATH_SEGMENT@111..120\n-                        NAME_REF@111..116\n-                          IDENT@111..116 \"Trait\"\n-                        TYPE_ARG_LIST@116..120\n-                          L_ANGLE@116..117 \"<\"\n-                          LIFETIME_ARG@117..119\n-                            LIFETIME@117..119 \"\\'a\"\n-                          R_ANGLE@119..120 \">\"\n-                R_PAREN@120..121 \")\"\n-        EXPR_STMT@121..123\n-          ERROR@121..122\n-            R_ANGLE@121..122 \">\"\n-          SEMICOLON@122..123 \";\"\n-        WHITESPACE@123..128 \"\\n    \"\n-        LET_STMT@128..141\n-          LET_KW@128..131 \"let\"\n-          WHITESPACE@131..132 \" \"\n-          PLACEHOLDER_PAT@132..133\n-            UNDERSCORE@132..133 \"_\"\n-          COLON@133..134 \":\"\n-          WHITESPACE@134..135 \" \"\n-          PATH_TYPE@135..141\n-            PATH@135..141\n-              PATH_SEGMENT@135..141\n-                NAME_REF@135..138\n-                  IDENT@135..138 \"Box\"\n-                TYPE_ARG_LIST@138..141\n-                  L_ANGLE@138..139 \"<\"\n-                  TYPE_ARG@139..141\n-                    PAREN_TYPE@139..141\n-                      L_PAREN@139..140 \"(\"\n-                      ERROR@140..141\n-                        QUESTION@140..141 \"?\"\n-        EXPR_STMT@141..146\n-          PATH_EXPR@141..146\n-            PATH@141..146\n-              PATH_SEGMENT@141..146\n-                NAME_REF@141..146\n-                  IDENT@141..146 \"Sized\"\n-        EXPR_STMT@146..147\n-          ERROR@146..147\n-            R_PAREN@146..147 \")\"\n-        WHITESPACE@147..148 \" \"\n-        EXPR_STMT@148..149\n-          ERROR@148..149\n-            PLUS@148..149 \"+\"\n-        WHITESPACE@149..150 \" \"\n-        EXPR_STMT@150..180\n-          TUPLE_EXPR@150..180\n-            L_PAREN@150..151 \"(\"\n-            BIN_EXPR@151..180\n-              BIN_EXPR@151..178\n-                BIN_EXPR@151..169\n-                  BIN_EXPR@151..167\n-                    BIN_EXPR@151..164\n-                      FOR_EXPR@151..157\n-                        FOR_KW@151..154 \"for\"\n-                        ERROR@154..155\n-                          L_ANGLE@154..155 \"<\"\n-                        ERROR@155..157\n-                          LIFETIME@155..157 \"\\'a\"\n-                      R_ANGLE@157..158 \">\"\n-                      WHITESPACE@158..159 \" \"\n-                      PATH_EXPR@159..164\n-                        PATH@159..164\n-                          PATH_SEGMENT@159..164\n-                            NAME_REF@159..164\n-                              IDENT@159..164 \"Trait\"\n-                    L_ANGLE@164..165 \"<\"\n-                    ERROR@165..167\n-                      LIFETIME@165..167 \"\\'a\"\n-                  R_ANGLE@167..168 \">\"\n-                  ERROR@168..169\n-                    R_PAREN@168..169 \")\"\n-                WHITESPACE@169..170 \" \"\n-                PLUS@170..171 \"+\"\n-                WHITESPACE@171..172 \" \"\n-                PAREN_EXPR@172..178\n-                  L_PAREN@172..173 \"(\"\n-                  PATH_EXPR@173..177\n-                    PATH@173..177\n-                      PATH_SEGMENT@173..177\n-                        NAME_REF@173..177\n-                          IDENT@173..177 \"Copy\"\n-                  R_PAREN@177..178 \")\"\n-              R_ANGLE@178..179 \">\"\n-              ERROR@179..180\n-                SEMICOLON@179..180 \";\"\n-        WHITESPACE@180..185 \"\\n    \"\n-        LET_STMT@185..235\n-          LET_KW@185..188 \"let\"\n-          WHITESPACE@188..189 \" \"\n-          PLACEHOLDER_PAT@189..190\n-            UNDERSCORE@189..190 \"_\"\n-          COLON@190..191 \":\"\n-          WHITESPACE@191..192 \" \"\n-          DYN_TRAIT_TYPE@192..235\n-            TYPE_BOUND_LIST@192..235\n-              TYPE_BOUND@192..215\n-                PATH_TYPE@192..215\n-                  PATH@192..215\n-                    PATH_SEGMENT@192..215\n-                      NAME_REF@192..195\n-                        IDENT@192..195 \"Box\"\n-                      TYPE_ARG_LIST@195..215\n-                        L_ANGLE@195..196 \"<\"\n-                        TYPE_ARG@196..215\n-                          PAREN_TYPE@196..215\n-                            L_PAREN@196..197 \"(\"\n-                            FOR_TYPE@197..214\n-                              FOR_KW@197..200 \"for\"\n-                              TYPE_PARAM_LIST@200..204\n-                                L_ANGLE@200..201 \"<\"\n-                                LIFETIME_PARAM@201..203\n-                                  LIFETIME@201..203 \"\\'a\"\n-                                R_ANGLE@203..204 \">\"\n-                              WHITESPACE@204..205 \" \"\n-                              PATH_TYPE@205..214\n-                                PATH@205..214\n-                                  PATH_SEGMENT@205..214\n-                                    NAME_REF@205..210\n-                                      IDENT@205..210 \"Trait\"\n-                                    TYPE_ARG_LIST@210..214\n-                                      L_ANGLE@210..211 \"<\"\n-                                      LIFETIME_ARG@211..213\n-                                        LIFETIME@211..213 \"\\'a\"\n-                                      R_ANGLE@213..214 \">\"\n-                            R_PAREN@214..215 \")\"\n-              WHITESPACE@215..216 \" \"\n-              PLUS@216..217 \"+\"\n-              WHITESPACE@217..218 \" \"\n-              TYPE_BOUND@218..224\n-                L_PAREN@218..219 \"(\"\n-                PATH_TYPE@219..223\n-                  PATH@219..223\n-                    PATH_SEGMENT@219..223\n-                      NAME_REF@219..223\n-                        IDENT@219..223 \"Copy\"\n-                R_PAREN@223..224 \")\"\n-              WHITESPACE@224..225 \" \"\n-              PLUS@225..226 \"+\"\n-              WHITESPACE@226..227 \" \"\n-              TYPE_BOUND@227..235\n-                L_PAREN@227..228 \"(\"\n-                QUESTION@228..229 \"?\"\n-                PATH_TYPE@229..234\n-                  PATH@229..234\n-                    PATH_SEGMENT@229..234\n-                      NAME_REF@229..234\n-                        IDENT@229..234 \"Sized\"\n-                R_PAREN@234..235 \")\"\n-        EXPR_STMT@235..237\n-          ERROR@235..236\n-            R_ANGLE@235..236 \">\"\n-          SEMICOLON@236..237 \";\"\n-        WHITESPACE@237..238 \"\\n\"\n-        R_CURLY@238..239 \"}\"\n+      L_CURLY@65..66 \"{\"\n+      WHITESPACE@66..71 \"\\n    \"\n+      LET_STMT@71..121\n+        LET_KW@71..74 \"let\"\n+        WHITESPACE@74..75 \" \"\n+        PLACEHOLDER_PAT@75..76\n+          UNDERSCORE@75..76 \"_\"\n+        COLON@76..77 \":\"\n+        WHITESPACE@77..78 \" \"\n+        DYN_TRAIT_TYPE@78..121\n+          TYPE_BOUND_LIST@78..121\n+            TYPE_BOUND@78..88\n+              PATH_TYPE@78..88\n+                PATH@78..88\n+                  PATH_SEGMENT@78..88\n+                    NAME_REF@78..81\n+                      IDENT@78..81 \"Box\"\n+                    TYPE_ARG_LIST@81..88\n+                      L_ANGLE@81..82 \"<\"\n+                      TYPE_ARG@82..88\n+                        PAREN_TYPE@82..88\n+                          L_PAREN@82..83 \"(\"\n+                          PATH_TYPE@83..87\n+                            PATH@83..87\n+                              PATH_SEGMENT@83..87\n+                                NAME_REF@83..87\n+                                  IDENT@83..87 \"Copy\"\n+                          R_PAREN@87..88 \")\"\n+            WHITESPACE@88..89 \" \"\n+            PLUS@89..90 \"+\"\n+            WHITESPACE@90..91 \" \"\n+            TYPE_BOUND@91..99\n+              L_PAREN@91..92 \"(\"\n+              QUESTION@92..93 \"?\"\n+              PATH_TYPE@93..98\n+                PATH@93..98\n+                  PATH_SEGMENT@93..98\n+                    NAME_REF@93..98\n+                      IDENT@93..98 \"Sized\"\n+              R_PAREN@98..99 \")\"\n+            WHITESPACE@99..100 \" \"\n+            PLUS@100..101 \"+\"\n+            WHITESPACE@101..102 \" \"\n+            TYPE_BOUND@102..121\n+              L_PAREN@102..103 \"(\"\n+              FOR_TYPE@103..120\n+                FOR_KW@103..106 \"for\"\n+                TYPE_PARAM_LIST@106..110\n+                  L_ANGLE@106..107 \"<\"\n+                  LIFETIME_PARAM@107..109\n+                    LIFETIME@107..109 \"\\'a\"\n+                  R_ANGLE@109..110 \">\"\n+                WHITESPACE@110..111 \" \"\n+                PATH_TYPE@111..120\n+                  PATH@111..120\n+                    PATH_SEGMENT@111..120\n+                      NAME_REF@111..116\n+                        IDENT@111..116 \"Trait\"\n+                      TYPE_ARG_LIST@116..120\n+                        L_ANGLE@116..117 \"<\"\n+                        LIFETIME_ARG@117..119\n+                          LIFETIME@117..119 \"\\'a\"\n+                        R_ANGLE@119..120 \">\"\n+              R_PAREN@120..121 \")\"\n+      EXPR_STMT@121..123\n+        ERROR@121..122\n+          R_ANGLE@121..122 \">\"\n+        SEMICOLON@122..123 \";\"\n+      WHITESPACE@123..128 \"\\n    \"\n+      LET_STMT@128..141\n+        LET_KW@128..131 \"let\"\n+        WHITESPACE@131..132 \" \"\n+        PLACEHOLDER_PAT@132..133\n+          UNDERSCORE@132..133 \"_\"\n+        COLON@133..134 \":\"\n+        WHITESPACE@134..135 \" \"\n+        PATH_TYPE@135..141\n+          PATH@135..141\n+            PATH_SEGMENT@135..141\n+              NAME_REF@135..138\n+                IDENT@135..138 \"Box\"\n+              TYPE_ARG_LIST@138..141\n+                L_ANGLE@138..139 \"<\"\n+                TYPE_ARG@139..141\n+                  PAREN_TYPE@139..141\n+                    L_PAREN@139..140 \"(\"\n+                    ERROR@140..141\n+                      QUESTION@140..141 \"?\"\n+      EXPR_STMT@141..146\n+        PATH_EXPR@141..146\n+          PATH@141..146\n+            PATH_SEGMENT@141..146\n+              NAME_REF@141..146\n+                IDENT@141..146 \"Sized\"\n+      EXPR_STMT@146..147\n+        ERROR@146..147\n+          R_PAREN@146..147 \")\"\n+      WHITESPACE@147..148 \" \"\n+      EXPR_STMT@148..149\n+        ERROR@148..149\n+          PLUS@148..149 \"+\"\n+      WHITESPACE@149..150 \" \"\n+      EXPR_STMT@150..180\n+        TUPLE_EXPR@150..180\n+          L_PAREN@150..151 \"(\"\n+          BIN_EXPR@151..180\n+            BIN_EXPR@151..178\n+              BIN_EXPR@151..169\n+                BIN_EXPR@151..167\n+                  BIN_EXPR@151..164\n+                    FOR_EXPR@151..157\n+                      FOR_KW@151..154 \"for\"\n+                      ERROR@154..155\n+                        L_ANGLE@154..155 \"<\"\n+                      ERROR@155..157\n+                        LIFETIME@155..157 \"\\'a\"\n+                    R_ANGLE@157..158 \">\"\n+                    WHITESPACE@158..159 \" \"\n+                    PATH_EXPR@159..164\n+                      PATH@159..164\n+                        PATH_SEGMENT@159..164\n+                          NAME_REF@159..164\n+                            IDENT@159..164 \"Trait\"\n+                  L_ANGLE@164..165 \"<\"\n+                  ERROR@165..167\n+                    LIFETIME@165..167 \"\\'a\"\n+                R_ANGLE@167..168 \">\"\n+                ERROR@168..169\n+                  R_PAREN@168..169 \")\"\n+              WHITESPACE@169..170 \" \"\n+              PLUS@170..171 \"+\"\n+              WHITESPACE@171..172 \" \"\n+              PAREN_EXPR@172..178\n+                L_PAREN@172..173 \"(\"\n+                PATH_EXPR@173..177\n+                  PATH@173..177\n+                    PATH_SEGMENT@173..177\n+                      NAME_REF@173..177\n+                        IDENT@173..177 \"Copy\"\n+                R_PAREN@177..178 \")\"\n+            R_ANGLE@178..179 \">\"\n+            ERROR@179..180\n+              SEMICOLON@179..180 \";\"\n+      WHITESPACE@180..185 \"\\n    \"\n+      LET_STMT@185..235\n+        LET_KW@185..188 \"let\"\n+        WHITESPACE@188..189 \" \"\n+        PLACEHOLDER_PAT@189..190\n+          UNDERSCORE@189..190 \"_\"\n+        COLON@190..191 \":\"\n+        WHITESPACE@191..192 \" \"\n+        DYN_TRAIT_TYPE@192..235\n+          TYPE_BOUND_LIST@192..235\n+            TYPE_BOUND@192..215\n+              PATH_TYPE@192..215\n+                PATH@192..215\n+                  PATH_SEGMENT@192..215\n+                    NAME_REF@192..195\n+                      IDENT@192..195 \"Box\"\n+                    TYPE_ARG_LIST@195..215\n+                      L_ANGLE@195..196 \"<\"\n+                      TYPE_ARG@196..215\n+                        PAREN_TYPE@196..215\n+                          L_PAREN@196..197 \"(\"\n+                          FOR_TYPE@197..214\n+                            FOR_KW@197..200 \"for\"\n+                            TYPE_PARAM_LIST@200..204\n+                              L_ANGLE@200..201 \"<\"\n+                              LIFETIME_PARAM@201..203\n+                                LIFETIME@201..203 \"\\'a\"\n+                              R_ANGLE@203..204 \">\"\n+                            WHITESPACE@204..205 \" \"\n+                            PATH_TYPE@205..214\n+                              PATH@205..214\n+                                PATH_SEGMENT@205..214\n+                                  NAME_REF@205..210\n+                                    IDENT@205..210 \"Trait\"\n+                                  TYPE_ARG_LIST@210..214\n+                                    L_ANGLE@210..211 \"<\"\n+                                    LIFETIME_ARG@211..213\n+                                      LIFETIME@211..213 \"\\'a\"\n+                                    R_ANGLE@213..214 \">\"\n+                          R_PAREN@214..215 \")\"\n+            WHITESPACE@215..216 \" \"\n+            PLUS@216..217 \"+\"\n+            WHITESPACE@217..218 \" \"\n+            TYPE_BOUND@218..224\n+              L_PAREN@218..219 \"(\"\n+              PATH_TYPE@219..223\n+                PATH@219..223\n+                  PATH_SEGMENT@219..223\n+                    NAME_REF@219..223\n+                      IDENT@219..223 \"Copy\"\n+              R_PAREN@223..224 \")\"\n+            WHITESPACE@224..225 \" \"\n+            PLUS@225..226 \"+\"\n+            WHITESPACE@226..227 \" \"\n+            TYPE_BOUND@227..235\n+              L_PAREN@227..228 \"(\"\n+              QUESTION@228..229 \"?\"\n+              PATH_TYPE@229..234\n+                PATH@229..234\n+                  PATH_SEGMENT@229..234\n+                    NAME_REF@229..234\n+                      IDENT@229..234 \"Sized\"\n+              R_PAREN@234..235 \")\"\n+      EXPR_STMT@235..237\n+        ERROR@235..236\n+          R_ANGLE@235..236 \">\"\n+        SEMICOLON@236..237 \";\"\n+      WHITESPACE@237..238 \"\\n\"\n+      R_CURLY@238..239 \"}\"\n   WHITESPACE@239..240 \"\\n\"\n error 88..88: expected COMMA\n error 88..88: expected R_ANGLE"}, {"sha": "88b086daff4bfa228f69472e69c3f9c2601509e1", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.rast", "status": "modified", "additions": 179, "deletions": 181, "changes": 360, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,187 +9,185 @@ SOURCE_FILE@0..575\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..574\n-      BLOCK@10..574\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        ENUM_DEF@16..152\n-          ENUM_KW@16..20 \"enum\"\n-          WHITESPACE@20..21 \" \"\n-          NAME@21..25\n-            IDENT@21..25 \"Test\"\n-          WHITESPACE@25..26 \" \"\n-          ENUM_VARIANT_LIST@26..152\n-            L_CURLY@26..27 \"{\"\n-            WHITESPACE@27..36 \"\\n        \"\n-            ENUM_VARIANT@36..40\n-              NAME@36..40\n-                IDENT@36..40 \"Var1\"\n-            COMMA@40..41 \",\"\n-            WHITESPACE@41..50 \"\\n        \"\n-            ENUM_VARIANT@50..62\n-              NAME@50..54\n-                IDENT@50..54 \"Var2\"\n-              TUPLE_FIELD_DEF_LIST@54..62\n-                L_PAREN@54..55 \"(\"\n-                TUPLE_FIELD_DEF@55..61\n-                  PATH_TYPE@55..61\n-                    PATH@55..61\n-                      PATH_SEGMENT@55..61\n-                        NAME_REF@55..61\n-                          IDENT@55..61 \"String\"\n-                R_PAREN@61..62 \")\"\n-            COMMA@62..63 \",\"\n-            WHITESPACE@63..72 \"\\n        \"\n-            ENUM_VARIANT@72..145\n-              NAME@72..76\n-                IDENT@72..76 \"Var3\"\n-              WHITESPACE@76..77 \" \"\n-              RECORD_FIELD_DEF_LIST@77..145\n-                L_CURLY@77..78 \"{\"\n-                WHITESPACE@78..91 \"\\n            \"\n-                RECORD_FIELD_DEF@91..95\n-                  NAME@91..94\n-                    IDENT@91..94 \"abc\"\n-                  COLON@94..95 \":\"\n-                WHITESPACE@95..96 \" \"\n-                ERROR@96..98\n-                  L_CURLY@96..97 \"{\"\n-                  R_CURLY@97..98 \"}\"\n-                ERROR@98..99\n-                  COMMA@98..99 \",\"\n-                WHITESPACE@99..100 \" \"\n-                COMMENT@100..135 \"//~ ERROR: expected t ...\"\n-                WHITESPACE@135..144 \"\\n        \"\n-                R_CURLY@144..145 \"}\"\n-            COMMA@145..146 \",\"\n-            WHITESPACE@146..151 \"\\n    \"\n-            R_CURLY@151..152 \"}\"\n-        WHITESPACE@152..158 \"\\n\\n    \"\n-        COMMENT@158..171 \"// recover...\"\n-        WHITESPACE@171..176 \"\\n    \"\n-        LET_STMT@176..186\n-          LET_KW@176..179 \"let\"\n-          WHITESPACE@179..180 \" \"\n-          BIND_PAT@180..181\n-            NAME@180..181\n-              IDENT@180..181 \"a\"\n-          WHITESPACE@181..182 \" \"\n-          EQ@182..183 \"=\"\n-          WHITESPACE@183..184 \" \"\n-          LITERAL@184..185\n-            INT_NUMBER@184..185 \"1\"\n-          SEMICOLON@185..186 \";\"\n-        WHITESPACE@186..191 \"\\n    \"\n-        ENUM_DEF@191..223\n-          ENUM_KW@191..195 \"enum\"\n-          WHITESPACE@195..196 \" \"\n-          NAME@196..201\n-            IDENT@196..201 \"Test2\"\n-          WHITESPACE@201..202 \" \"\n-          ENUM_VARIANT_LIST@202..223\n-            L_CURLY@202..203 \"{\"\n-            WHITESPACE@203..212 \"\\n        \"\n-            ENUM_VARIANT@212..216\n-              NAME@212..216\n-                IDENT@212..216 \"Fine\"\n-            COMMA@216..217 \",\"\n-            WHITESPACE@217..222 \"\\n    \"\n-            R_CURLY@222..223 \"}\"\n-        WHITESPACE@223..229 \"\\n\\n    \"\n-        ENUM_DEF@229..300\n-          ENUM_KW@229..233 \"enum\"\n-          WHITESPACE@233..234 \" \"\n-          NAME@234..239\n-            IDENT@234..239 \"Test3\"\n-          WHITESPACE@239..240 \" \"\n-          ENUM_VARIANT_LIST@240..300\n-            L_CURLY@240..241 \"{\"\n-            WHITESPACE@241..250 \"\\n        \"\n-            ENUM_VARIANT@250..293\n-              NAME@250..259\n-                IDENT@250..259 \"StillFine\"\n-              WHITESPACE@259..260 \" \"\n-              RECORD_FIELD_DEF_LIST@260..293\n-                L_CURLY@260..261 \"{\"\n-                WHITESPACE@261..274 \"\\n            \"\n-                RECORD_FIELD_DEF@274..282\n-                  NAME@274..277\n-                    IDENT@274..277 \"def\"\n-                  COLON@277..278 \":\"\n-                  WHITESPACE@278..279 \" \"\n-                  PATH_TYPE@279..282\n-                    PATH@279..282\n-                      PATH_SEGMENT@279..282\n-                        NAME_REF@279..282\n-                          IDENT@279..282 \"i32\"\n-                COMMA@282..283 \",\"\n-                WHITESPACE@283..292 \"\\n        \"\n-                R_CURLY@292..293 \"}\"\n-            COMMA@293..294 \",\"\n-            WHITESPACE@294..299 \"\\n    \"\n-            R_CURLY@299..300 \"}\"\n-        WHITESPACE@300..306 \"\\n\\n    \"\n-        EXPR_STMT@306..459\n-          BLOCK_EXPR@306..459\n-            BLOCK@306..459\n-              L_CURLY@306..307 \"{\"\n-              WHITESPACE@307..316 \"\\n        \"\n-              ENUM_DEF@316..453\n-                COMMENT@316..329 \"// fail again\"\n-                WHITESPACE@329..338 \"\\n        \"\n-                ENUM_KW@338..342 \"enum\"\n-                WHITESPACE@342..343 \" \"\n-                NAME@343..348\n-                  IDENT@343..348 \"Test4\"\n-                WHITESPACE@348..349 \" \"\n-                ENUM_VARIANT_LIST@349..453\n-                  L_CURLY@349..350 \"{\"\n-                  WHITESPACE@350..363 \"\\n            \"\n-                  ENUM_VARIANT@363..372\n-                    NAME@363..367\n-                      IDENT@363..367 \"Nope\"\n-                    TUPLE_FIELD_DEF_LIST@367..372\n-                      L_PAREN@367..368 \"(\"\n-                      TUPLE_FIELD_DEF@368..371\n-                        PATH_TYPE@368..371\n-                          PATH@368..371\n-                            PATH_SEGMENT@368..371\n-                              NAME_REF@368..371\n-                                IDENT@368..371 \"i32\"\n-                      WHITESPACE@371..372 \" \"\n-                      ERROR@372..372\n-                  ERROR@372..374\n-                    L_CURLY@372..373 \"{\"\n-                    R_CURLY@373..374 \"}\"\n-                  ERROR@374..375\n-                    R_PAREN@374..375 \")\"\n-                  WHITESPACE@375..376 \" \"\n-                  COMMENT@376..396 \"//~ ERROR: found `{`\"\n-                  WHITESPACE@396..422 \"\\n                     ...\"\n-                  COMMENT@422..443 \"//~^ ERROR: found `{`\"\n-                  WHITESPACE@443..452 \"\\n        \"\n-                  R_CURLY@452..453 \"}\"\n-              WHITESPACE@453..458 \"\\n    \"\n-              R_CURLY@458..459 \"}\"\n-        WHITESPACE@459..464 \"\\n    \"\n-        COMMENT@464..486 \"// still recover later\"\n-        WHITESPACE@486..491 \"\\n    \"\n-        LET_STMT@491..510\n-          LET_KW@491..494 \"let\"\n-          WHITESPACE@494..495 \" \"\n-          BIND_PAT@495..505\n-            NAME@495..505\n-              IDENT@495..505 \"bad_syntax\"\n-          WHITESPACE@505..506 \" \"\n-          EQ@506..507 \"=\"\n-          WHITESPACE@507..508 \" \"\n-          ERROR@508..509\n-            UNDERSCORE@508..509 \"_\"\n-          SEMICOLON@509..510 \";\"\n-        WHITESPACE@510..511 \" \"\n-        COMMENT@511..572 \"//~ ERROR: expected e ...\"\n-        WHITESPACE@572..573 \"\\n\"\n-        R_CURLY@573..574 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      ENUM_DEF@16..152\n+        ENUM_KW@16..20 \"enum\"\n+        WHITESPACE@20..21 \" \"\n+        NAME@21..25\n+          IDENT@21..25 \"Test\"\n+        WHITESPACE@25..26 \" \"\n+        ENUM_VARIANT_LIST@26..152\n+          L_CURLY@26..27 \"{\"\n+          WHITESPACE@27..36 \"\\n        \"\n+          ENUM_VARIANT@36..40\n+            NAME@36..40\n+              IDENT@36..40 \"Var1\"\n+          COMMA@40..41 \",\"\n+          WHITESPACE@41..50 \"\\n        \"\n+          ENUM_VARIANT@50..62\n+            NAME@50..54\n+              IDENT@50..54 \"Var2\"\n+            TUPLE_FIELD_DEF_LIST@54..62\n+              L_PAREN@54..55 \"(\"\n+              TUPLE_FIELD_DEF@55..61\n+                PATH_TYPE@55..61\n+                  PATH@55..61\n+                    PATH_SEGMENT@55..61\n+                      NAME_REF@55..61\n+                        IDENT@55..61 \"String\"\n+              R_PAREN@61..62 \")\"\n+          COMMA@62..63 \",\"\n+          WHITESPACE@63..72 \"\\n        \"\n+          ENUM_VARIANT@72..145\n+            NAME@72..76\n+              IDENT@72..76 \"Var3\"\n+            WHITESPACE@76..77 \" \"\n+            RECORD_FIELD_DEF_LIST@77..145\n+              L_CURLY@77..78 \"{\"\n+              WHITESPACE@78..91 \"\\n            \"\n+              RECORD_FIELD_DEF@91..95\n+                NAME@91..94\n+                  IDENT@91..94 \"abc\"\n+                COLON@94..95 \":\"\n+              WHITESPACE@95..96 \" \"\n+              ERROR@96..98\n+                L_CURLY@96..97 \"{\"\n+                R_CURLY@97..98 \"}\"\n+              ERROR@98..99\n+                COMMA@98..99 \",\"\n+              WHITESPACE@99..100 \" \"\n+              COMMENT@100..135 \"//~ ERROR: expected t ...\"\n+              WHITESPACE@135..144 \"\\n        \"\n+              R_CURLY@144..145 \"}\"\n+          COMMA@145..146 \",\"\n+          WHITESPACE@146..151 \"\\n    \"\n+          R_CURLY@151..152 \"}\"\n+      WHITESPACE@152..158 \"\\n\\n    \"\n+      COMMENT@158..171 \"// recover...\"\n+      WHITESPACE@171..176 \"\\n    \"\n+      LET_STMT@176..186\n+        LET_KW@176..179 \"let\"\n+        WHITESPACE@179..180 \" \"\n+        BIND_PAT@180..181\n+          NAME@180..181\n+            IDENT@180..181 \"a\"\n+        WHITESPACE@181..182 \" \"\n+        EQ@182..183 \"=\"\n+        WHITESPACE@183..184 \" \"\n+        LITERAL@184..185\n+          INT_NUMBER@184..185 \"1\"\n+        SEMICOLON@185..186 \";\"\n+      WHITESPACE@186..191 \"\\n    \"\n+      ENUM_DEF@191..223\n+        ENUM_KW@191..195 \"enum\"\n+        WHITESPACE@195..196 \" \"\n+        NAME@196..201\n+          IDENT@196..201 \"Test2\"\n+        WHITESPACE@201..202 \" \"\n+        ENUM_VARIANT_LIST@202..223\n+          L_CURLY@202..203 \"{\"\n+          WHITESPACE@203..212 \"\\n        \"\n+          ENUM_VARIANT@212..216\n+            NAME@212..216\n+              IDENT@212..216 \"Fine\"\n+          COMMA@216..217 \",\"\n+          WHITESPACE@217..222 \"\\n    \"\n+          R_CURLY@222..223 \"}\"\n+      WHITESPACE@223..229 \"\\n\\n    \"\n+      ENUM_DEF@229..300\n+        ENUM_KW@229..233 \"enum\"\n+        WHITESPACE@233..234 \" \"\n+        NAME@234..239\n+          IDENT@234..239 \"Test3\"\n+        WHITESPACE@239..240 \" \"\n+        ENUM_VARIANT_LIST@240..300\n+          L_CURLY@240..241 \"{\"\n+          WHITESPACE@241..250 \"\\n        \"\n+          ENUM_VARIANT@250..293\n+            NAME@250..259\n+              IDENT@250..259 \"StillFine\"\n+            WHITESPACE@259..260 \" \"\n+            RECORD_FIELD_DEF_LIST@260..293\n+              L_CURLY@260..261 \"{\"\n+              WHITESPACE@261..274 \"\\n            \"\n+              RECORD_FIELD_DEF@274..282\n+                NAME@274..277\n+                  IDENT@274..277 \"def\"\n+                COLON@277..278 \":\"\n+                WHITESPACE@278..279 \" \"\n+                PATH_TYPE@279..282\n+                  PATH@279..282\n+                    PATH_SEGMENT@279..282\n+                      NAME_REF@279..282\n+                        IDENT@279..282 \"i32\"\n+              COMMA@282..283 \",\"\n+              WHITESPACE@283..292 \"\\n        \"\n+              R_CURLY@292..293 \"}\"\n+          COMMA@293..294 \",\"\n+          WHITESPACE@294..299 \"\\n    \"\n+          R_CURLY@299..300 \"}\"\n+      WHITESPACE@300..306 \"\\n\\n    \"\n+      EXPR_STMT@306..459\n+        BLOCK_EXPR@306..459\n+          L_CURLY@306..307 \"{\"\n+          WHITESPACE@307..316 \"\\n        \"\n+          ENUM_DEF@316..453\n+            COMMENT@316..329 \"// fail again\"\n+            WHITESPACE@329..338 \"\\n        \"\n+            ENUM_KW@338..342 \"enum\"\n+            WHITESPACE@342..343 \" \"\n+            NAME@343..348\n+              IDENT@343..348 \"Test4\"\n+            WHITESPACE@348..349 \" \"\n+            ENUM_VARIANT_LIST@349..453\n+              L_CURLY@349..350 \"{\"\n+              WHITESPACE@350..363 \"\\n            \"\n+              ENUM_VARIANT@363..372\n+                NAME@363..367\n+                  IDENT@363..367 \"Nope\"\n+                TUPLE_FIELD_DEF_LIST@367..372\n+                  L_PAREN@367..368 \"(\"\n+                  TUPLE_FIELD_DEF@368..371\n+                    PATH_TYPE@368..371\n+                      PATH@368..371\n+                        PATH_SEGMENT@368..371\n+                          NAME_REF@368..371\n+                            IDENT@368..371 \"i32\"\n+                  WHITESPACE@371..372 \" \"\n+                  ERROR@372..372\n+              ERROR@372..374\n+                L_CURLY@372..373 \"{\"\n+                R_CURLY@373..374 \"}\"\n+              ERROR@374..375\n+                R_PAREN@374..375 \")\"\n+              WHITESPACE@375..376 \" \"\n+              COMMENT@376..396 \"//~ ERROR: found `{`\"\n+              WHITESPACE@396..422 \"\\n                     ...\"\n+              COMMENT@422..443 \"//~^ ERROR: found `{`\"\n+              WHITESPACE@443..452 \"\\n        \"\n+              R_CURLY@452..453 \"}\"\n+          WHITESPACE@453..458 \"\\n    \"\n+          R_CURLY@458..459 \"}\"\n+      WHITESPACE@459..464 \"\\n    \"\n+      COMMENT@464..486 \"// still recover later\"\n+      WHITESPACE@486..491 \"\\n    \"\n+      LET_STMT@491..510\n+        LET_KW@491..494 \"let\"\n+        WHITESPACE@494..495 \" \"\n+        BIND_PAT@495..505\n+          NAME@495..505\n+            IDENT@495..505 \"bad_syntax\"\n+        WHITESPACE@505..506 \" \"\n+        EQ@506..507 \"=\"\n+        WHITESPACE@507..508 \" \"\n+        ERROR@508..509\n+          UNDERSCORE@508..509 \"_\"\n+        SEMICOLON@509..510 \";\"\n+      WHITESPACE@510..511 \" \"\n+      COMMENT@511..572 \"//~ ERROR: expected e ...\"\n+      WHITESPACE@572..573 \"\\n\"\n+      R_CURLY@573..574 \"}\"\n   WHITESPACE@574..575 \"\\n\"\n error 95..95: expected type\n error 95..95: expected COMMA"}, {"sha": "568a4cc028eb75ea1710da79637042a1ddf69c71", "filename": "crates/ra_syntax/test_data/parser/err/0027_incomplere_where_for.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -21,9 +21,8 @@ SOURCE_FILE@0..30\n             R_ANGLE@25..26 \">\"\n     WHITESPACE@26..27 \"\\n\"\n     BLOCK_EXPR@27..29\n-      BLOCK@27..29\n-        L_CURLY@27..28 \"{\"\n-        R_CURLY@28..29 \"}\"\n+      L_CURLY@27..28 \"{\"\n+      R_CURLY@28..29 \"}\"\n   WHITESPACE@29..30 \"\\n\"\n error 26..26: expected a path\n error 26..26: expected colon"}, {"sha": "0da8f59f043fdab008d7e13a16f15f0926e4e5e2", "filename": "crates/ra_syntax/test_data/parser/err/0029_field_completion.rast", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -20,17 +20,16 @@ SOURCE_FILE@0..24\n       R_PAREN@11..12 \")\"\n     WHITESPACE@12..13 \" \"\n     BLOCK_EXPR@13..23\n-      BLOCK@13..23\n-        L_CURLY@13..14 \"{\"\n-        WHITESPACE@14..19 \"\\n    \"\n-        FIELD_EXPR@19..21\n-          PATH_EXPR@19..20\n-            PATH@19..20\n-              PATH_SEGMENT@19..20\n-                NAME_REF@19..20\n-                  IDENT@19..20 \"a\"\n-          DOT@20..21 \".\"\n-        WHITESPACE@21..22 \"\\n\"\n-        R_CURLY@22..23 \"}\"\n+      L_CURLY@13..14 \"{\"\n+      WHITESPACE@14..19 \"\\n    \"\n+      FIELD_EXPR@19..21\n+        PATH_EXPR@19..20\n+          PATH@19..20\n+            PATH_SEGMENT@19..20\n+              NAME_REF@19..20\n+                IDENT@19..20 \"a\"\n+        DOT@20..21 \".\"\n+      WHITESPACE@21..22 \"\\n\"\n+      R_CURLY@22..23 \"}\"\n   WHITESPACE@23..24 \"\\n\"\n error 21..21: expected field name or number"}, {"sha": "515819e42e042ff5ac747fb7b4e84a22f640483b", "filename": "crates/ra_syntax/test_data/parser/err/0031_block_inner_attrs.rast", "status": "modified", "additions": 105, "deletions": 109, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,115 +9,111 @@ SOURCE_FILE@0..350\n       R_PAREN@9..10 \")\"\n     WHITESPACE@10..11 \" \"\n     BLOCK_EXPR@11..349\n-      BLOCK@11..349\n-        L_CURLY@11..12 \"{\"\n-        WHITESPACE@12..17 \"\\n    \"\n-        LET_STMT@17..129\n-          LET_KW@17..20 \"let\"\n-          WHITESPACE@20..21 \" \"\n-          BIND_PAT@21..26\n-            NAME@21..26\n-              IDENT@21..26 \"inner\"\n-          WHITESPACE@26..27 \" \"\n-          EQ@27..28 \"=\"\n-          WHITESPACE@28..29 \" \"\n-          BLOCK_EXPR@29..128\n-            BLOCK@29..128\n-              L_CURLY@29..30 \"{\"\n-              WHITESPACE@30..39 \"\\n        \"\n-              ATTR@39..83\n-                POUND@39..40 \"#\"\n-                BANG@40..41 \"!\"\n-                L_BRACK@41..42 \"[\"\n-                PATH@42..45\n-                  PATH_SEGMENT@42..45\n-                    NAME_REF@42..45\n-                      IDENT@42..45 \"doc\"\n-                TOKEN_TREE@45..82\n-                  L_PAREN@45..46 \"(\"\n-                  STRING@46..81 \"\\\"Inner attributes not ...\"\n-                  R_PAREN@81..82 \")\"\n-                R_BRACK@82..83 \"]\"\n-              WHITESPACE@83..92 \"\\n        \"\n-              COMMENT@92..122 \"//! Nor are ModuleDoc ...\"\n-              WHITESPACE@122..127 \"\\n    \"\n-              R_CURLY@127..128 \"}\"\n-          SEMICOLON@128..129 \";\"\n-        WHITESPACE@129..134 \"\\n    \"\n-        EXPR_STMT@134..257\n-          IF_EXPR@134..257\n-            IF_KW@134..136 \"if\"\n-            WHITESPACE@136..137 \" \"\n-            CONDITION@137..141\n-              LITERAL@137..141\n-                TRUE_KW@137..141 \"true\"\n-            WHITESPACE@141..142 \" \"\n-            BLOCK_EXPR@142..257\n-              BLOCK@142..257\n-                L_CURLY@142..143 \"{\"\n-                WHITESPACE@143..152 \"\\n        \"\n-                ATTR@152..171\n-                  POUND@152..153 \"#\"\n-                  BANG@153..154 \"!\"\n-                  L_BRACK@154..155 \"[\"\n-                  PATH@155..158\n-                    PATH_SEGMENT@155..158\n-                      NAME_REF@155..158\n-                        IDENT@155..158 \"doc\"\n-                  TOKEN_TREE@158..170\n-                    L_PAREN@158..159 \"(\"\n-                    STRING@159..169 \"\\\"Nor here\\\"\"\n-                    R_PAREN@169..170 \")\"\n-                  R_BRACK@170..171 \"]\"\n-                WHITESPACE@171..180 \"\\n        \"\n-                ATTR@180..212\n-                  POUND@180..181 \"#\"\n-                  BANG@181..182 \"!\"\n-                  L_BRACK@182..183 \"[\"\n-                  PATH@183..186\n-                    PATH_SEGMENT@183..186\n-                      NAME_REF@183..186\n-                        IDENT@183..186 \"doc\"\n-                  TOKEN_TREE@186..211\n-                    L_PAREN@186..187 \"(\"\n-                    STRING@187..210 \"\\\"We error on each attr\\\"\"\n-                    R_PAREN@210..211 \")\"\n-                  R_BRACK@211..212 \"]\"\n-                WHITESPACE@212..221 \"\\n        \"\n-                COMMENT@221..251 \"//! Nor are ModuleDoc ...\"\n-                WHITESPACE@251..256 \"\\n    \"\n-                R_CURLY@256..257 \"}\"\n-        WHITESPACE@257..262 \"\\n    \"\n-        WHILE_EXPR@262..347\n-          WHILE_KW@262..267 \"while\"\n-          WHITESPACE@267..268 \" \"\n-          CONDITION@268..272\n-            LITERAL@268..272\n-              TRUE_KW@268..272 \"true\"\n-          WHITESPACE@272..273 \" \"\n-          BLOCK_EXPR@273..347\n-            BLOCK@273..347\n-              L_CURLY@273..274 \"{\"\n-              WHITESPACE@274..283 \"\\n        \"\n-              ATTR@283..302\n-                POUND@283..284 \"#\"\n-                BANG@284..285 \"!\"\n-                L_BRACK@285..286 \"[\"\n-                PATH@286..289\n-                  PATH_SEGMENT@286..289\n-                    NAME_REF@286..289\n-                      IDENT@286..289 \"doc\"\n-                TOKEN_TREE@289..301\n-                  L_PAREN@289..290 \"(\"\n-                  STRING@290..300 \"\\\"Nor here\\\"\"\n-                  R_PAREN@300..301 \")\"\n-                R_BRACK@301..302 \"]\"\n-              WHITESPACE@302..311 \"\\n        \"\n-              COMMENT@311..341 \"//! Nor are ModuleDoc ...\"\n-              WHITESPACE@341..346 \"\\n    \"\n-              R_CURLY@346..347 \"}\"\n-        WHITESPACE@347..348 \"\\n\"\n-        R_CURLY@348..349 \"}\"\n+      L_CURLY@11..12 \"{\"\n+      WHITESPACE@12..17 \"\\n    \"\n+      LET_STMT@17..129\n+        LET_KW@17..20 \"let\"\n+        WHITESPACE@20..21 \" \"\n+        BIND_PAT@21..26\n+          NAME@21..26\n+            IDENT@21..26 \"inner\"\n+        WHITESPACE@26..27 \" \"\n+        EQ@27..28 \"=\"\n+        WHITESPACE@28..29 \" \"\n+        BLOCK_EXPR@29..128\n+          L_CURLY@29..30 \"{\"\n+          WHITESPACE@30..39 \"\\n        \"\n+          ATTR@39..83\n+            POUND@39..40 \"#\"\n+            BANG@40..41 \"!\"\n+            L_BRACK@41..42 \"[\"\n+            PATH@42..45\n+              PATH_SEGMENT@42..45\n+                NAME_REF@42..45\n+                  IDENT@42..45 \"doc\"\n+            TOKEN_TREE@45..82\n+              L_PAREN@45..46 \"(\"\n+              STRING@46..81 \"\\\"Inner attributes not ...\"\n+              R_PAREN@81..82 \")\"\n+            R_BRACK@82..83 \"]\"\n+          WHITESPACE@83..92 \"\\n        \"\n+          COMMENT@92..122 \"//! Nor are ModuleDoc ...\"\n+          WHITESPACE@122..127 \"\\n    \"\n+          R_CURLY@127..128 \"}\"\n+        SEMICOLON@128..129 \";\"\n+      WHITESPACE@129..134 \"\\n    \"\n+      EXPR_STMT@134..257\n+        IF_EXPR@134..257\n+          IF_KW@134..136 \"if\"\n+          WHITESPACE@136..137 \" \"\n+          CONDITION@137..141\n+            LITERAL@137..141\n+              TRUE_KW@137..141 \"true\"\n+          WHITESPACE@141..142 \" \"\n+          BLOCK_EXPR@142..257\n+            L_CURLY@142..143 \"{\"\n+            WHITESPACE@143..152 \"\\n        \"\n+            ATTR@152..171\n+              POUND@152..153 \"#\"\n+              BANG@153..154 \"!\"\n+              L_BRACK@154..155 \"[\"\n+              PATH@155..158\n+                PATH_SEGMENT@155..158\n+                  NAME_REF@155..158\n+                    IDENT@155..158 \"doc\"\n+              TOKEN_TREE@158..170\n+                L_PAREN@158..159 \"(\"\n+                STRING@159..169 \"\\\"Nor here\\\"\"\n+                R_PAREN@169..170 \")\"\n+              R_BRACK@170..171 \"]\"\n+            WHITESPACE@171..180 \"\\n        \"\n+            ATTR@180..212\n+              POUND@180..181 \"#\"\n+              BANG@181..182 \"!\"\n+              L_BRACK@182..183 \"[\"\n+              PATH@183..186\n+                PATH_SEGMENT@183..186\n+                  NAME_REF@183..186\n+                    IDENT@183..186 \"doc\"\n+              TOKEN_TREE@186..211\n+                L_PAREN@186..187 \"(\"\n+                STRING@187..210 \"\\\"We error on each attr\\\"\"\n+                R_PAREN@210..211 \")\"\n+              R_BRACK@211..212 \"]\"\n+            WHITESPACE@212..221 \"\\n        \"\n+            COMMENT@221..251 \"//! Nor are ModuleDoc ...\"\n+            WHITESPACE@251..256 \"\\n    \"\n+            R_CURLY@256..257 \"}\"\n+      WHITESPACE@257..262 \"\\n    \"\n+      WHILE_EXPR@262..347\n+        WHILE_KW@262..267 \"while\"\n+        WHITESPACE@267..268 \" \"\n+        CONDITION@268..272\n+          LITERAL@268..272\n+            TRUE_KW@268..272 \"true\"\n+        WHITESPACE@272..273 \" \"\n+        BLOCK_EXPR@273..347\n+          L_CURLY@273..274 \"{\"\n+          WHITESPACE@274..283 \"\\n        \"\n+          ATTR@283..302\n+            POUND@283..284 \"#\"\n+            BANG@284..285 \"!\"\n+            L_BRACK@285..286 \"[\"\n+            PATH@286..289\n+              PATH_SEGMENT@286..289\n+                NAME_REF@286..289\n+                  IDENT@286..289 \"doc\"\n+            TOKEN_TREE@289..301\n+              L_PAREN@289..290 \"(\"\n+              STRING@290..300 \"\\\"Nor here\\\"\"\n+              R_PAREN@300..301 \")\"\n+            R_BRACK@301..302 \"]\"\n+          WHITESPACE@302..311 \"\\n        \"\n+          COMMENT@311..341 \"//! Nor are ModuleDoc ...\"\n+          WHITESPACE@341..346 \"\\n    \"\n+          R_CURLY@346..347 \"}\"\n+      WHITESPACE@347..348 \"\\n\"\n+      R_CURLY@348..349 \"}\"\n   WHITESPACE@349..350 \"\\n\"\n error 39..83: A block in this position cannot accept inner attributes\n error 152..171: A block in this position cannot accept inner attributes"}, {"sha": "c6859eca8b027b1781468098d831ebb76656db15", "filename": "crates/ra_syntax/test_data/parser/err/0032_match_arms_inner_attrs.rast", "status": "modified", "additions": 180, "deletions": 181, "changes": 361, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,187 +9,186 @@ SOURCE_FILE@0..293\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..292\n-      BLOCK@9..292\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..101\n-          MATCH_EXPR@15..101\n-            MATCH_KW@15..20 \"match\"\n-            WHITESPACE@20..21 \" \"\n-            TUPLE_EXPR@21..23\n-              L_PAREN@21..22 \"(\"\n-              R_PAREN@22..23 \")\"\n-            WHITESPACE@23..24 \" \"\n-            MATCH_ARM_LIST@24..101\n-              L_CURLY@24..25 \"{\"\n-              WHITESPACE@25..34 \"\\n        \"\n-              MATCH_ARM@34..41\n-                PLACEHOLDER_PAT@34..35\n-                  UNDERSCORE@34..35 \"_\"\n-                WHITESPACE@35..36 \" \"\n-                FAT_ARROW@36..38 \"=>\"\n-                WHITESPACE@38..39 \" \"\n-                TUPLE_EXPR@39..41\n-                  L_PAREN@39..40 \"(\"\n-                  R_PAREN@40..41 \")\"\n-              COMMA@41..42 \",\"\n-              WHITESPACE@42..51 \"\\n        \"\n-              MATCH_ARM@51..78\n-                ATTR@51..52\n-                  POUND@51..52 \"#\"\n-                ERROR@52..53\n-                  BANG@52..53 \"!\"\n-                ARRAY_EXPR@53..78\n-                  L_BRACK@53..54 \"[\"\n-                  CALL_EXPR@54..77\n-                    PATH_EXPR@54..57\n-                      PATH@54..57\n-                        PATH_SEGMENT@54..57\n-                          NAME_REF@54..57\n-                            IDENT@54..57 \"doc\"\n-                    ARG_LIST@57..77\n-                      L_PAREN@57..58 \"(\"\n-                      LITERAL@58..76\n-                        STRING@58..76 \"\\\"Not allowed here\\\"\"\n-                      R_PAREN@76..77 \")\"\n-                  R_BRACK@77..78 \"]\"\n-              WHITESPACE@78..87 \"\\n        \"\n-              MATCH_ARM@87..94\n-                PLACEHOLDER_PAT@87..88\n-                  UNDERSCORE@87..88 \"_\"\n-                WHITESPACE@88..89 \" \"\n-                FAT_ARROW@89..91 \"=>\"\n-                WHITESPACE@91..92 \" \"\n-                TUPLE_EXPR@92..94\n-                  L_PAREN@92..93 \"(\"\n-                  R_PAREN@93..94 \")\"\n-              COMMA@94..95 \",\"\n-              WHITESPACE@95..100 \"\\n    \"\n-              R_CURLY@100..101 \"}\"\n-        WHITESPACE@101..107 \"\\n\\n    \"\n-        EXPR_STMT@107..185\n-          MATCH_EXPR@107..185\n-            MATCH_KW@107..112 \"match\"\n-            WHITESPACE@112..113 \" \"\n-            TUPLE_EXPR@113..115\n-              L_PAREN@113..114 \"(\"\n-              R_PAREN@114..115 \")\"\n-            WHITESPACE@115..116 \" \"\n-            MATCH_ARM_LIST@116..185\n-              L_CURLY@116..117 \"{\"\n-              WHITESPACE@117..126 \"\\n        \"\n-              MATCH_ARM@126..133\n-                PLACEHOLDER_PAT@126..127\n-                  UNDERSCORE@126..127 \"_\"\n-                WHITESPACE@127..128 \" \"\n-                FAT_ARROW@128..130 \"=>\"\n-                WHITESPACE@130..131 \" \"\n-                TUPLE_EXPR@131..133\n-                  L_PAREN@131..132 \"(\"\n-                  R_PAREN@132..133 \")\"\n-              COMMA@133..134 \",\"\n-              WHITESPACE@134..143 \"\\n        \"\n-              MATCH_ARM@143..150\n-                PLACEHOLDER_PAT@143..144\n-                  UNDERSCORE@143..144 \"_\"\n-                WHITESPACE@144..145 \" \"\n-                FAT_ARROW@145..147 \"=>\"\n-                WHITESPACE@147..148 \" \"\n-                TUPLE_EXPR@148..150\n-                  L_PAREN@148..149 \"(\"\n-                  R_PAREN@149..150 \")\"\n-              COMMA@150..151 \",\"\n-              WHITESPACE@151..160 \"\\n        \"\n-              MATCH_ARM@160..179\n-                ATTR@160..161\n-                  POUND@160..161 \"#\"\n-                ERROR@161..162\n-                  BANG@161..162 \"!\"\n-                ARRAY_EXPR@162..179\n-                  L_BRACK@162..163 \"[\"\n-                  CALL_EXPR@163..178\n-                    PATH_EXPR@163..166\n-                      PATH@163..166\n-                        PATH_SEGMENT@163..166\n-                          NAME_REF@163..166\n-                            IDENT@163..166 \"doc\"\n-                    ARG_LIST@166..178\n-                      L_PAREN@166..167 \"(\"\n-                      LITERAL@167..177\n-                        STRING@167..177 \"\\\"Nor here\\\"\"\n-                      R_PAREN@177..178 \")\"\n-                  R_BRACK@178..179 \"]\"\n-              WHITESPACE@179..184 \"\\n    \"\n-              R_CURLY@184..185 \"}\"\n-        WHITESPACE@185..191 \"\\n\\n    \"\n-        MATCH_EXPR@191..290\n-          MATCH_KW@191..196 \"match\"\n-          WHITESPACE@196..197 \" \"\n-          TUPLE_EXPR@197..199\n-            L_PAREN@197..198 \"(\"\n-            R_PAREN@198..199 \")\"\n-          WHITESPACE@199..200 \" \"\n-          MATCH_ARM_LIST@200..290\n-            L_CURLY@200..201 \"{\"\n-            WHITESPACE@201..210 \"\\n        \"\n-            MATCH_ARM@210..250\n-              ATTR@210..222\n-                POUND@210..211 \"#\"\n-                L_BRACK@211..212 \"[\"\n-                PATH@212..215\n-                  PATH_SEGMENT@212..215\n-                    NAME_REF@212..215\n-                      IDENT@212..215 \"cfg\"\n-                TOKEN_TREE@215..221\n-                  L_PAREN@215..216 \"(\"\n-                  IDENT@216..220 \"test\"\n-                  R_PAREN@220..221 \")\"\n-                R_BRACK@221..222 \"]\"\n-              WHITESPACE@222..231 \"\\n        \"\n-              ATTR@231..232\n-                POUND@231..232 \"#\"\n-              ERROR@232..233\n-                BANG@232..233 \"!\"\n-              ARRAY_EXPR@233..250\n-                L_BRACK@233..234 \"[\"\n-                CALL_EXPR@234..249\n-                  PATH_EXPR@234..237\n-                    PATH@234..237\n-                      PATH_SEGMENT@234..237\n-                        NAME_REF@234..237\n-                          IDENT@234..237 \"doc\"\n-                  ARG_LIST@237..249\n-                    L_PAREN@237..238 \"(\"\n-                    LITERAL@238..248\n-                      STRING@238..248 \"\\\"Nor here\\\"\"\n-                    R_PAREN@248..249 \")\"\n-                R_BRACK@249..250 \"]\"\n-            WHITESPACE@250..259 \"\\n        \"\n-            MATCH_ARM@259..266\n-              PLACEHOLDER_PAT@259..260\n-                UNDERSCORE@259..260 \"_\"\n-              WHITESPACE@260..261 \" \"\n-              FAT_ARROW@261..263 \"=>\"\n-              WHITESPACE@263..264 \" \"\n-              TUPLE_EXPR@264..266\n-                L_PAREN@264..265 \"(\"\n-                R_PAREN@265..266 \")\"\n-            COMMA@266..267 \",\"\n-            WHITESPACE@267..276 \"\\n        \"\n-            MATCH_ARM@276..283\n-              PLACEHOLDER_PAT@276..277\n-                UNDERSCORE@276..277 \"_\"\n-              WHITESPACE@277..278 \" \"\n-              FAT_ARROW@278..280 \"=>\"\n-              WHITESPACE@280..281 \" \"\n-              TUPLE_EXPR@281..283\n-                L_PAREN@281..282 \"(\"\n-                R_PAREN@282..283 \")\"\n-            COMMA@283..284 \",\"\n-            WHITESPACE@284..289 \"\\n    \"\n-            R_CURLY@289..290 \"}\"\n-        WHITESPACE@290..291 \"\\n\"\n-        R_CURLY@291..292 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..101\n+        MATCH_EXPR@15..101\n+          MATCH_KW@15..20 \"match\"\n+          WHITESPACE@20..21 \" \"\n+          TUPLE_EXPR@21..23\n+            L_PAREN@21..22 \"(\"\n+            R_PAREN@22..23 \")\"\n+          WHITESPACE@23..24 \" \"\n+          MATCH_ARM_LIST@24..101\n+            L_CURLY@24..25 \"{\"\n+            WHITESPACE@25..34 \"\\n        \"\n+            MATCH_ARM@34..41\n+              PLACEHOLDER_PAT@34..35\n+                UNDERSCORE@34..35 \"_\"\n+              WHITESPACE@35..36 \" \"\n+              FAT_ARROW@36..38 \"=>\"\n+              WHITESPACE@38..39 \" \"\n+              TUPLE_EXPR@39..41\n+                L_PAREN@39..40 \"(\"\n+                R_PAREN@40..41 \")\"\n+            COMMA@41..42 \",\"\n+            WHITESPACE@42..51 \"\\n        \"\n+            MATCH_ARM@51..78\n+              ATTR@51..52\n+                POUND@51..52 \"#\"\n+              ERROR@52..53\n+                BANG@52..53 \"!\"\n+              ARRAY_EXPR@53..78\n+                L_BRACK@53..54 \"[\"\n+                CALL_EXPR@54..77\n+                  PATH_EXPR@54..57\n+                    PATH@54..57\n+                      PATH_SEGMENT@54..57\n+                        NAME_REF@54..57\n+                          IDENT@54..57 \"doc\"\n+                  ARG_LIST@57..77\n+                    L_PAREN@57..58 \"(\"\n+                    LITERAL@58..76\n+                      STRING@58..76 \"\\\"Not allowed here\\\"\"\n+                    R_PAREN@76..77 \")\"\n+                R_BRACK@77..78 \"]\"\n+            WHITESPACE@78..87 \"\\n        \"\n+            MATCH_ARM@87..94\n+              PLACEHOLDER_PAT@87..88\n+                UNDERSCORE@87..88 \"_\"\n+              WHITESPACE@88..89 \" \"\n+              FAT_ARROW@89..91 \"=>\"\n+              WHITESPACE@91..92 \" \"\n+              TUPLE_EXPR@92..94\n+                L_PAREN@92..93 \"(\"\n+                R_PAREN@93..94 \")\"\n+            COMMA@94..95 \",\"\n+            WHITESPACE@95..100 \"\\n    \"\n+            R_CURLY@100..101 \"}\"\n+      WHITESPACE@101..107 \"\\n\\n    \"\n+      EXPR_STMT@107..185\n+        MATCH_EXPR@107..185\n+          MATCH_KW@107..112 \"match\"\n+          WHITESPACE@112..113 \" \"\n+          TUPLE_EXPR@113..115\n+            L_PAREN@113..114 \"(\"\n+            R_PAREN@114..115 \")\"\n+          WHITESPACE@115..116 \" \"\n+          MATCH_ARM_LIST@116..185\n+            L_CURLY@116..117 \"{\"\n+            WHITESPACE@117..126 \"\\n        \"\n+            MATCH_ARM@126..133\n+              PLACEHOLDER_PAT@126..127\n+                UNDERSCORE@126..127 \"_\"\n+              WHITESPACE@127..128 \" \"\n+              FAT_ARROW@128..130 \"=>\"\n+              WHITESPACE@130..131 \" \"\n+              TUPLE_EXPR@131..133\n+                L_PAREN@131..132 \"(\"\n+                R_PAREN@132..133 \")\"\n+            COMMA@133..134 \",\"\n+            WHITESPACE@134..143 \"\\n        \"\n+            MATCH_ARM@143..150\n+              PLACEHOLDER_PAT@143..144\n+                UNDERSCORE@143..144 \"_\"\n+              WHITESPACE@144..145 \" \"\n+              FAT_ARROW@145..147 \"=>\"\n+              WHITESPACE@147..148 \" \"\n+              TUPLE_EXPR@148..150\n+                L_PAREN@148..149 \"(\"\n+                R_PAREN@149..150 \")\"\n+            COMMA@150..151 \",\"\n+            WHITESPACE@151..160 \"\\n        \"\n+            MATCH_ARM@160..179\n+              ATTR@160..161\n+                POUND@160..161 \"#\"\n+              ERROR@161..162\n+                BANG@161..162 \"!\"\n+              ARRAY_EXPR@162..179\n+                L_BRACK@162..163 \"[\"\n+                CALL_EXPR@163..178\n+                  PATH_EXPR@163..166\n+                    PATH@163..166\n+                      PATH_SEGMENT@163..166\n+                        NAME_REF@163..166\n+                          IDENT@163..166 \"doc\"\n+                  ARG_LIST@166..178\n+                    L_PAREN@166..167 \"(\"\n+                    LITERAL@167..177\n+                      STRING@167..177 \"\\\"Nor here\\\"\"\n+                    R_PAREN@177..178 \")\"\n+                R_BRACK@178..179 \"]\"\n+            WHITESPACE@179..184 \"\\n    \"\n+            R_CURLY@184..185 \"}\"\n+      WHITESPACE@185..191 \"\\n\\n    \"\n+      MATCH_EXPR@191..290\n+        MATCH_KW@191..196 \"match\"\n+        WHITESPACE@196..197 \" \"\n+        TUPLE_EXPR@197..199\n+          L_PAREN@197..198 \"(\"\n+          R_PAREN@198..199 \")\"\n+        WHITESPACE@199..200 \" \"\n+        MATCH_ARM_LIST@200..290\n+          L_CURLY@200..201 \"{\"\n+          WHITESPACE@201..210 \"\\n        \"\n+          MATCH_ARM@210..250\n+            ATTR@210..222\n+              POUND@210..211 \"#\"\n+              L_BRACK@211..212 \"[\"\n+              PATH@212..215\n+                PATH_SEGMENT@212..215\n+                  NAME_REF@212..215\n+                    IDENT@212..215 \"cfg\"\n+              TOKEN_TREE@215..221\n+                L_PAREN@215..216 \"(\"\n+                IDENT@216..220 \"test\"\n+                R_PAREN@220..221 \")\"\n+              R_BRACK@221..222 \"]\"\n+            WHITESPACE@222..231 \"\\n        \"\n+            ATTR@231..232\n+              POUND@231..232 \"#\"\n+            ERROR@232..233\n+              BANG@232..233 \"!\"\n+            ARRAY_EXPR@233..250\n+              L_BRACK@233..234 \"[\"\n+              CALL_EXPR@234..249\n+                PATH_EXPR@234..237\n+                  PATH@234..237\n+                    PATH_SEGMENT@234..237\n+                      NAME_REF@234..237\n+                        IDENT@234..237 \"doc\"\n+                ARG_LIST@237..249\n+                  L_PAREN@237..238 \"(\"\n+                  LITERAL@238..248\n+                    STRING@238..248 \"\\\"Nor here\\\"\"\n+                  R_PAREN@248..249 \")\"\n+              R_BRACK@249..250 \"]\"\n+          WHITESPACE@250..259 \"\\n        \"\n+          MATCH_ARM@259..266\n+            PLACEHOLDER_PAT@259..260\n+              UNDERSCORE@259..260 \"_\"\n+            WHITESPACE@260..261 \" \"\n+            FAT_ARROW@261..263 \"=>\"\n+            WHITESPACE@263..264 \" \"\n+            TUPLE_EXPR@264..266\n+              L_PAREN@264..265 \"(\"\n+              R_PAREN@265..266 \")\"\n+          COMMA@266..267 \",\"\n+          WHITESPACE@267..276 \"\\n        \"\n+          MATCH_ARM@276..283\n+            PLACEHOLDER_PAT@276..277\n+              UNDERSCORE@276..277 \"_\"\n+            WHITESPACE@277..278 \" \"\n+            FAT_ARROW@278..280 \"=>\"\n+            WHITESPACE@280..281 \" \"\n+            TUPLE_EXPR@281..283\n+              L_PAREN@281..282 \"(\"\n+              R_PAREN@282..283 \")\"\n+          COMMA@283..284 \",\"\n+          WHITESPACE@284..289 \"\\n    \"\n+          R_CURLY@289..290 \"}\"\n+      WHITESPACE@290..291 \"\\n\"\n+      R_CURLY@291..292 \"}\"\n   WHITESPACE@292..293 \"\\n\"\n error 52..52: expected `[`\n error 52..52: expected pattern"}, {"sha": "53e445459bec673b95597abed812cd8bc036a195", "filename": "crates/ra_syntax/test_data/parser/err/0033_match_arms_outer_attrs.rast", "status": "modified", "additions": 51, "deletions": 52, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,58 +9,57 @@ SOURCE_FILE@0..89\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..88\n-      BLOCK@9..88\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        MATCH_EXPR@15..86\n-          MATCH_KW@15..20 \"match\"\n-          WHITESPACE@20..21 \" \"\n-          TUPLE_EXPR@21..23\n-            L_PAREN@21..22 \"(\"\n-            R_PAREN@22..23 \")\"\n-          WHITESPACE@23..24 \" \"\n-          MATCH_ARM_LIST@24..86\n-            L_CURLY@24..25 \"{\"\n-            WHITESPACE@25..34 \"\\n        \"\n-            MATCH_ARM@34..41\n-              PLACEHOLDER_PAT@34..35\n-                UNDERSCORE@34..35 \"_\"\n-              WHITESPACE@35..36 \" \"\n-              FAT_ARROW@36..38 \"=>\"\n-              WHITESPACE@38..39 \" \"\n-              TUPLE_EXPR@39..41\n-                L_PAREN@39..40 \"(\"\n-                R_PAREN@40..41 \")\"\n-            COMMA@41..42 \",\"\n-            WHITESPACE@42..51 \"\\n        \"\n-            MATCH_ARM@51..58\n-              PLACEHOLDER_PAT@51..52\n-                UNDERSCORE@51..52 \"_\"\n-              WHITESPACE@52..53 \" \"\n-              FAT_ARROW@53..55 \"=>\"\n-              WHITESPACE@55..56 \" \"\n-              TUPLE_EXPR@56..58\n-                L_PAREN@56..57 \"(\"\n-                R_PAREN@57..58 \")\"\n-            COMMA@58..59 \",\"\n-            WHITESPACE@59..68 \"\\n        \"\n-            MATCH_ARM@68..80\n-              ATTR@68..80\n-                POUND@68..69 \"#\"\n-                L_BRACK@69..70 \"[\"\n-                PATH@70..73\n-                  PATH_SEGMENT@70..73\n-                    NAME_REF@70..73\n-                      IDENT@70..73 \"cfg\"\n-                TOKEN_TREE@73..79\n-                  L_PAREN@73..74 \"(\"\n-                  IDENT@74..78 \"test\"\n-                  R_PAREN@78..79 \")\"\n-                R_BRACK@79..80 \"]\"\n-            WHITESPACE@80..85 \"\\n    \"\n-            R_CURLY@85..86 \"}\"\n-        WHITESPACE@86..87 \"\\n\"\n-        R_CURLY@87..88 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      MATCH_EXPR@15..86\n+        MATCH_KW@15..20 \"match\"\n+        WHITESPACE@20..21 \" \"\n+        TUPLE_EXPR@21..23\n+          L_PAREN@21..22 \"(\"\n+          R_PAREN@22..23 \")\"\n+        WHITESPACE@23..24 \" \"\n+        MATCH_ARM_LIST@24..86\n+          L_CURLY@24..25 \"{\"\n+          WHITESPACE@25..34 \"\\n        \"\n+          MATCH_ARM@34..41\n+            PLACEHOLDER_PAT@34..35\n+              UNDERSCORE@34..35 \"_\"\n+            WHITESPACE@35..36 \" \"\n+            FAT_ARROW@36..38 \"=>\"\n+            WHITESPACE@38..39 \" \"\n+            TUPLE_EXPR@39..41\n+              L_PAREN@39..40 \"(\"\n+              R_PAREN@40..41 \")\"\n+          COMMA@41..42 \",\"\n+          WHITESPACE@42..51 \"\\n        \"\n+          MATCH_ARM@51..58\n+            PLACEHOLDER_PAT@51..52\n+              UNDERSCORE@51..52 \"_\"\n+            WHITESPACE@52..53 \" \"\n+            FAT_ARROW@53..55 \"=>\"\n+            WHITESPACE@55..56 \" \"\n+            TUPLE_EXPR@56..58\n+              L_PAREN@56..57 \"(\"\n+              R_PAREN@57..58 \")\"\n+          COMMA@58..59 \",\"\n+          WHITESPACE@59..68 \"\\n        \"\n+          MATCH_ARM@68..80\n+            ATTR@68..80\n+              POUND@68..69 \"#\"\n+              L_BRACK@69..70 \"[\"\n+              PATH@70..73\n+                PATH_SEGMENT@70..73\n+                  NAME_REF@70..73\n+                    IDENT@70..73 \"cfg\"\n+              TOKEN_TREE@73..79\n+                L_PAREN@73..74 \"(\"\n+                IDENT@74..78 \"test\"\n+                R_PAREN@78..79 \")\"\n+              R_BRACK@79..80 \"]\"\n+          WHITESPACE@80..85 \"\\n    \"\n+          R_CURLY@85..86 \"}\"\n+      WHITESPACE@86..87 \"\\n\"\n+      R_CURLY@87..88 \"}\"\n   WHITESPACE@88..89 \"\\n\"\n error 80..80: expected pattern\n error 80..80: expected FAT_ARROW"}, {"sha": "1b2ac5011fad4e5a27365d89cff237e35a2d15dc", "filename": "crates/ra_syntax/test_data/parser/err/0034_bad_box_pattern.rast", "status": "modified", "additions": 77, "deletions": 78, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,84 +9,83 @@ SOURCE_FILE@0..91\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..89\n-      BLOCK@10..89\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..27\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          BIND_PAT@20..27\n-            REF_KW@20..23 \"ref\"\n-            WHITESPACE@23..24 \" \"\n-            ERROR@24..27\n-              BOX_KW@24..27 \"box\"\n-        WHITESPACE@27..28 \" \"\n-        EXPR_STMT@28..35\n-          BIN_EXPR@28..34\n-            PATH_EXPR@28..29\n-              PATH@28..29\n-                PATH_SEGMENT@28..29\n-                  NAME_REF@28..29\n-                    IDENT@28..29 \"i\"\n-            WHITESPACE@29..30 \" \"\n-            EQ@30..31 \"=\"\n-            WHITESPACE@31..32 \" \"\n-            TUPLE_EXPR@32..34\n-              L_PAREN@32..33 \"(\"\n-              R_PAREN@33..34 \")\"\n-          SEMICOLON@34..35 \";\"\n-        WHITESPACE@35..40 \"\\n    \"\n-        LET_STMT@40..51\n-          LET_KW@40..43 \"let\"\n-          WHITESPACE@43..44 \" \"\n-          BIND_PAT@44..51\n-            MUT_KW@44..47 \"mut\"\n-            WHITESPACE@47..48 \" \"\n-            ERROR@48..51\n-              BOX_KW@48..51 \"box\"\n-        WHITESPACE@51..52 \" \"\n-        EXPR_STMT@52..59\n-          BIN_EXPR@52..58\n-            PATH_EXPR@52..53\n-              PATH@52..53\n-                PATH_SEGMENT@52..53\n-                  NAME_REF@52..53\n-                    IDENT@52..53 \"i\"\n-            WHITESPACE@53..54 \" \"\n-            EQ@54..55 \"=\"\n-            WHITESPACE@55..56 \" \"\n-            TUPLE_EXPR@56..58\n-              L_PAREN@56..57 \"(\"\n-              R_PAREN@57..58 \")\"\n-          SEMICOLON@58..59 \";\"\n-        WHITESPACE@59..64 \"\\n    \"\n-        LET_STMT@64..79\n-          LET_KW@64..67 \"let\"\n-          WHITESPACE@67..68 \" \"\n-          BIND_PAT@68..79\n-            REF_KW@68..71 \"ref\"\n-            WHITESPACE@71..72 \" \"\n-            MUT_KW@72..75 \"mut\"\n-            WHITESPACE@75..76 \" \"\n-            ERROR@76..79\n-              BOX_KW@76..79 \"box\"\n-        WHITESPACE@79..80 \" \"\n-        EXPR_STMT@80..87\n-          BIN_EXPR@80..86\n-            PATH_EXPR@80..81\n-              PATH@80..81\n-                PATH_SEGMENT@80..81\n-                  NAME_REF@80..81\n-                    IDENT@80..81 \"i\"\n-            WHITESPACE@81..82 \" \"\n-            EQ@82..83 \"=\"\n-            WHITESPACE@83..84 \" \"\n-            TUPLE_EXPR@84..86\n-              L_PAREN@84..85 \"(\"\n-              R_PAREN@85..86 \")\"\n-          SEMICOLON@86..87 \";\"\n-        WHITESPACE@87..88 \"\\n\"\n-        R_CURLY@88..89 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..27\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        BIND_PAT@20..27\n+          REF_KW@20..23 \"ref\"\n+          WHITESPACE@23..24 \" \"\n+          ERROR@24..27\n+            BOX_KW@24..27 \"box\"\n+      WHITESPACE@27..28 \" \"\n+      EXPR_STMT@28..35\n+        BIN_EXPR@28..34\n+          PATH_EXPR@28..29\n+            PATH@28..29\n+              PATH_SEGMENT@28..29\n+                NAME_REF@28..29\n+                  IDENT@28..29 \"i\"\n+          WHITESPACE@29..30 \" \"\n+          EQ@30..31 \"=\"\n+          WHITESPACE@31..32 \" \"\n+          TUPLE_EXPR@32..34\n+            L_PAREN@32..33 \"(\"\n+            R_PAREN@33..34 \")\"\n+        SEMICOLON@34..35 \";\"\n+      WHITESPACE@35..40 \"\\n    \"\n+      LET_STMT@40..51\n+        LET_KW@40..43 \"let\"\n+        WHITESPACE@43..44 \" \"\n+        BIND_PAT@44..51\n+          MUT_KW@44..47 \"mut\"\n+          WHITESPACE@47..48 \" \"\n+          ERROR@48..51\n+            BOX_KW@48..51 \"box\"\n+      WHITESPACE@51..52 \" \"\n+      EXPR_STMT@52..59\n+        BIN_EXPR@52..58\n+          PATH_EXPR@52..53\n+            PATH@52..53\n+              PATH_SEGMENT@52..53\n+                NAME_REF@52..53\n+                  IDENT@52..53 \"i\"\n+          WHITESPACE@53..54 \" \"\n+          EQ@54..55 \"=\"\n+          WHITESPACE@55..56 \" \"\n+          TUPLE_EXPR@56..58\n+            L_PAREN@56..57 \"(\"\n+            R_PAREN@57..58 \")\"\n+        SEMICOLON@58..59 \";\"\n+      WHITESPACE@59..64 \"\\n    \"\n+      LET_STMT@64..79\n+        LET_KW@64..67 \"let\"\n+        WHITESPACE@67..68 \" \"\n+        BIND_PAT@68..79\n+          REF_KW@68..71 \"ref\"\n+          WHITESPACE@71..72 \" \"\n+          MUT_KW@72..75 \"mut\"\n+          WHITESPACE@75..76 \" \"\n+          ERROR@76..79\n+            BOX_KW@76..79 \"box\"\n+      WHITESPACE@79..80 \" \"\n+      EXPR_STMT@80..87\n+        BIN_EXPR@80..86\n+          PATH_EXPR@80..81\n+            PATH@80..81\n+              PATH_SEGMENT@80..81\n+                NAME_REF@80..81\n+                  IDENT@80..81 \"i\"\n+          WHITESPACE@81..82 \" \"\n+          EQ@82..83 \"=\"\n+          WHITESPACE@83..84 \" \"\n+          TUPLE_EXPR@84..86\n+            L_PAREN@84..85 \"(\"\n+            R_PAREN@85..86 \")\"\n+        SEMICOLON@86..87 \";\"\n+      WHITESPACE@87..88 \"\\n\"\n+      R_CURLY@88..89 \"}\"\n   WHITESPACE@89..91 \"\\n\\n\"\n error 24..24: expected a name\n error 27..27: expected SEMICOLON"}, {"sha": "9588cf3b3ac013af42d4142b8c4c3902599fb95d", "filename": "crates/ra_syntax/test_data/parser/err/0035_use_recover.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -44,9 +44,8 @@ SOURCE_FILE@0..48\n       R_PAREN@43..44 \")\"\n     WHITESPACE@44..45 \" \"\n     BLOCK_EXPR@45..47\n-      BLOCK@45..47\n-        L_CURLY@45..46 \"{\"\n-        R_CURLY@46..47 \"}\"\n+      L_CURLY@45..46 \"{\"\n+      R_CURLY@46..47 \"}\"\n   WHITESPACE@47..48 \"\\n\"\n error 17..17: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n error 17..17: expected SEMICOLON"}, {"sha": "e3cda7c432aaffcc200ae6b9d1b227bb555d4f1c", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -27,9 +27,8 @@ SOURCE_FILE@0..118\n           R_PAREN@27..28 \")\"\n         WHITESPACE@28..29 \" \"\n         BLOCK_EXPR@29..31\n-          BLOCK@29..31\n-            L_CURLY@29..30 \"{\"\n-            R_CURLY@30..31 \"}\"\n+          L_CURLY@29..30 \"{\"\n+          R_CURLY@30..31 \"}\"\n       WHITESPACE@31..36 \"\\n    \"\n       FN_DEF@36..51\n         VISIBILITY@36..39\n@@ -44,9 +43,8 @@ SOURCE_FILE@0..118\n           R_PAREN@47..48 \")\"\n         WHITESPACE@48..49 \" \"\n         BLOCK_EXPR@49..51\n-          BLOCK@49..51\n-            L_CURLY@49..50 \"{\"\n-            R_CURLY@50..51 \"}\"\n+          L_CURLY@49..50 \"{\"\n+          R_CURLY@50..51 \"}\"\n       WHITESPACE@51..56 \"\\n    \"\n       TYPE_ALIAS_DEF@56..81\n         VISIBILITY@56..66"}, {"sha": "21db9ee85e4b5a7e71bea9b5c7e99d5502af1a60", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.rast", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,22 +9,21 @@ SOURCE_FILE@0..33\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..32\n-      BLOCK@10..32\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        EXPR_STMT@16..21\n-          RANGE_EXPR@16..20\n-            LITERAL@16..17\n-              INT_NUMBER@16..17 \"0\"\n-            DOT2EQ@17..20 \"..=\"\n-          SEMICOLON@20..21 \";\"\n-        WHITESPACE@21..26 \"\\n    \"\n-        EXPR_STMT@26..30\n-          RANGE_EXPR@26..29\n-            DOT2EQ@26..29 \"..=\"\n-          SEMICOLON@29..30 \";\"\n-        WHITESPACE@30..31 \"\\n\"\n-        R_CURLY@31..32 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      EXPR_STMT@16..21\n+        RANGE_EXPR@16..20\n+          LITERAL@16..17\n+            INT_NUMBER@16..17 \"0\"\n+          DOT2EQ@17..20 \"..=\"\n+        SEMICOLON@20..21 \";\"\n+      WHITESPACE@21..26 \"\\n    \"\n+      EXPR_STMT@26..30\n+        RANGE_EXPR@26..29\n+          DOT2EQ@26..29 \"..=\"\n+        SEMICOLON@29..30 \";\"\n+      WHITESPACE@30..31 \"\\n\"\n+      R_CURLY@31..32 \"}\"\n   WHITESPACE@32..33 \"\\n\"\n error 16..20: An inclusive range must have an end expression\n error 26..29: An inclusive range must have an end expression"}, {"sha": "ec950381b4372fa489badb3c81f022befd24eb0f", "filename": "crates/ra_syntax/test_data/parser/err/0039_lambda_recovery.rast", "status": "modified", "additions": 60, "deletions": 61, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -18,66 +18,65 @@ SOURCE_FILE@0..83\n               IDENT@12..15 \"i32\"\n     WHITESPACE@15..16 \" \"\n     BLOCK_EXPR@16..82\n-      BLOCK@16..82\n-        L_CURLY@16..17 \"{\"\n-        WHITESPACE@17..22 \"\\n    \"\n-        EXPR_STMT@22..80\n-          METHOD_CALL_EXPR@22..79\n-            METHOD_CALL_EXPR@22..57\n-              METHOD_CALL_EXPR@22..38\n-                ARRAY_EXPR@22..31\n-                  L_BRACK@22..23 \"[\"\n-                  LITERAL@23..24\n-                    INT_NUMBER@23..24 \"1\"\n-                  COMMA@24..25 \",\"\n-                  WHITESPACE@25..26 \" \"\n-                  LITERAL@26..27\n-                    INT_NUMBER@26..27 \"2\"\n-                  COMMA@27..28 \",\"\n-                  WHITESPACE@28..29 \" \"\n-                  LITERAL@29..30\n-                    INT_NUMBER@29..30 \"3\"\n-                  R_BRACK@30..31 \"]\"\n-                DOT@31..32 \".\"\n-                NAME_REF@32..36\n-                  IDENT@32..36 \"iter\"\n-                ARG_LIST@36..38\n-                  L_PAREN@36..37 \"(\"\n-                  R_PAREN@37..38 \")\"\n-              WHITESPACE@38..47 \"\\n        \"\n-              DOT@47..48 \".\"\n-              NAME_REF@48..51\n-                IDENT@48..51 \"map\"\n-              ARG_LIST@51..57\n-                L_PAREN@51..52 \"(\"\n-                LAMBDA_EXPR@52..56\n-                  PARAM_LIST@52..56\n-                    PIPE@52..53 \"|\"\n-                    PARAM@53..55\n-                      BIND_PAT@53..55\n-                        NAME@53..55\n-                          IDENT@53..55 \"it\"\n-                    PIPE@55..56 \"|\"\n-                R_PAREN@56..57 \")\"\n-            WHITESPACE@57..66 \"\\n        \"\n-            DOT@66..67 \".\"\n-            NAME_REF@67..70\n-              IDENT@67..70 \"max\"\n-            TYPE_ARG_LIST@70..77\n-              COLON2@70..72 \"::\"\n-              L_ANGLE@72..73 \"<\"\n-              TYPE_ARG@73..76\n-                PATH_TYPE@73..76\n-                  PATH@73..76\n-                    PATH_SEGMENT@73..76\n-                      NAME_REF@73..76\n-                        IDENT@73..76 \"i32\"\n-              R_ANGLE@76..77 \">\"\n-            ARG_LIST@77..79\n-              L_PAREN@77..78 \"(\"\n-              R_PAREN@78..79 \")\"\n-          SEMICOLON@79..80 \";\"\n-        WHITESPACE@80..81 \"\\n\"\n-        R_CURLY@81..82 \"}\"\n+      L_CURLY@16..17 \"{\"\n+      WHITESPACE@17..22 \"\\n    \"\n+      EXPR_STMT@22..80\n+        METHOD_CALL_EXPR@22..79\n+          METHOD_CALL_EXPR@22..57\n+            METHOD_CALL_EXPR@22..38\n+              ARRAY_EXPR@22..31\n+                L_BRACK@22..23 \"[\"\n+                LITERAL@23..24\n+                  INT_NUMBER@23..24 \"1\"\n+                COMMA@24..25 \",\"\n+                WHITESPACE@25..26 \" \"\n+                LITERAL@26..27\n+                  INT_NUMBER@26..27 \"2\"\n+                COMMA@27..28 \",\"\n+                WHITESPACE@28..29 \" \"\n+                LITERAL@29..30\n+                  INT_NUMBER@29..30 \"3\"\n+                R_BRACK@30..31 \"]\"\n+              DOT@31..32 \".\"\n+              NAME_REF@32..36\n+                IDENT@32..36 \"iter\"\n+              ARG_LIST@36..38\n+                L_PAREN@36..37 \"(\"\n+                R_PAREN@37..38 \")\"\n+            WHITESPACE@38..47 \"\\n        \"\n+            DOT@47..48 \".\"\n+            NAME_REF@48..51\n+              IDENT@48..51 \"map\"\n+            ARG_LIST@51..57\n+              L_PAREN@51..52 \"(\"\n+              LAMBDA_EXPR@52..56\n+                PARAM_LIST@52..56\n+                  PIPE@52..53 \"|\"\n+                  PARAM@53..55\n+                    BIND_PAT@53..55\n+                      NAME@53..55\n+                        IDENT@53..55 \"it\"\n+                  PIPE@55..56 \"|\"\n+              R_PAREN@56..57 \")\"\n+          WHITESPACE@57..66 \"\\n        \"\n+          DOT@66..67 \".\"\n+          NAME_REF@67..70\n+            IDENT@67..70 \"max\"\n+          TYPE_ARG_LIST@70..77\n+            COLON2@70..72 \"::\"\n+            L_ANGLE@72..73 \"<\"\n+            TYPE_ARG@73..76\n+              PATH_TYPE@73..76\n+                PATH@73..76\n+                  PATH_SEGMENT@73..76\n+                    NAME_REF@73..76\n+                      IDENT@73..76 \"i32\"\n+            R_ANGLE@76..77 \">\"\n+          ARG_LIST@77..79\n+            L_PAREN@77..78 \"(\"\n+            R_PAREN@78..79 \")\"\n+        SEMICOLON@79..80 \";\"\n+      WHITESPACE@80..81 \"\\n\"\n+      R_CURLY@81..82 \"}\"\n   WHITESPACE@82..83 \"\\n\"\n error 56..56: expected expression"}, {"sha": "d2a5492733b7b239f9c6c9b78f2da3ce852e8c68", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rast", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,91 @@\n+SOURCE_FILE@0..98\n+  USE_ITEM@0..12\n+    USE_KW@0..3 \"use\"\n+    WHITESPACE@3..4 \" \"\n+    USE_TREE@4..11\n+      PATH@4..11\n+        PATH_SEGMENT@4..11\n+          COLON2@4..6 \"::\"\n+          CRATE_KW@6..11 \"crate\"\n+    SEMICOLON@11..12 \";\"\n+  WHITESPACE@12..13 \"\\n\"\n+  USE_ITEM@13..54\n+    USE_KW@13..16 \"use\"\n+    WHITESPACE@16..17 \" \"\n+    USE_TREE@17..53\n+      USE_TREE_LIST@17..53\n+        L_CURLY@17..18 \"{\"\n+        USE_TREE@18..23\n+          PATH@18..23\n+            PATH_SEGMENT@18..23\n+              CRATE_KW@18..23 \"crate\"\n+        COMMA@23..24 \",\"\n+        WHITESPACE@24..25 \" \"\n+        USE_TREE@25..52\n+          PATH@25..28\n+            PATH_SEGMENT@25..28\n+              NAME_REF@25..28\n+                IDENT@25..28 \"foo\"\n+          COLON2@28..30 \"::\"\n+          USE_TREE_LIST@30..52\n+            L_CURLY@30..31 \"{\"\n+            USE_TREE@31..51\n+              PATH@31..51\n+                PATH@31..46\n+                  PATH@31..41\n+                    PATH@31..36\n+                      PATH_SEGMENT@31..36\n+                        CRATE_KW@31..36 \"crate\"\n+                    COLON2@36..38 \"::\"\n+                    PATH_SEGMENT@38..41\n+                      NAME_REF@38..41\n+                        IDENT@38..41 \"foo\"\n+                  COLON2@41..43 \"::\"\n+                  PATH_SEGMENT@43..46\n+                    NAME_REF@43..46\n+                      IDENT@43..46 \"bar\"\n+                COLON2@46..48 \"::\"\n+                PATH_SEGMENT@48..51\n+                  NAME_REF@48..51\n+                    IDENT@48..51 \"baz\"\n+            R_CURLY@51..52 \"}\"\n+        R_CURLY@52..53 \"}\"\n+    SEMICOLON@53..54 \";\"\n+  WHITESPACE@54..55 \"\\n\"\n+  USE_ITEM@55..72\n+    USE_KW@55..58 \"use\"\n+    WHITESPACE@58..59 \" \"\n+    USE_TREE@59..71\n+      PATH@59..71\n+        PATH@59..64\n+          PATH_SEGMENT@59..64\n+            NAME_REF@59..64\n+              IDENT@59..64 \"hello\"\n+        COLON2@64..66 \"::\"\n+        PATH_SEGMENT@66..71\n+          CRATE_KW@66..71 \"crate\"\n+    SEMICOLON@71..72 \";\"\n+  WHITESPACE@72..73 \"\\n\"\n+  USE_ITEM@73..97\n+    USE_KW@73..76 \"use\"\n+    WHITESPACE@76..77 \" \"\n+    USE_TREE@77..96\n+      PATH@77..96\n+        PATH@77..89\n+          PATH@77..82\n+            PATH_SEGMENT@77..82\n+              NAME_REF@77..82\n+                IDENT@77..82 \"hello\"\n+          COLON2@82..84 \"::\"\n+          PATH_SEGMENT@84..89\n+            CRATE_KW@84..89 \"crate\"\n+        COLON2@89..91 \"::\"\n+        PATH_SEGMENT@91..96\n+          NAME_REF@91..96\n+            IDENT@91..96 \"there\"\n+    SEMICOLON@96..97 \";\"\n+  WHITESPACE@97..98 \"\\n\"\n+error 6..11: The `crate` keyword is only allowed as the first segment of a path\n+error 31..36: The `crate` keyword is only allowed as the first segment of a path\n+error 66..71: The `crate` keyword is only allowed as the first segment of a path\n+error 84..89: The `crate` keyword is only allowed as the first segment of a path"}, {"sha": "508def2c7ef503bbdadcdc19ef7b550da9260214", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,4 @@\n+use ::crate;\n+use {crate, foo::{crate::foo::bar::baz}};\n+use hello::crate;\n+use hello::crate::there;"}, {"sha": "d0360c4679b90282be6b00869ab14ed2f45aeb53", "filename": "crates/ra_syntax/test_data/parser/err/0041_illegal_super_keyword_location.rast", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,70 @@\n+SOURCE_FILE@0..67\n+  USE_ITEM@0..12\n+    USE_KW@0..3 \"use\"\n+    WHITESPACE@3..4 \" \"\n+    USE_TREE@4..11\n+      PATH@4..11\n+        PATH_SEGMENT@4..11\n+          COLON2@4..6 \"::\"\n+          SUPER_KW@6..11 \"super\"\n+    SEMICOLON@11..12 \";\"\n+  WHITESPACE@12..13 \"\\n\"\n+  USE_ITEM@13..26\n+    USE_KW@13..16 \"use\"\n+    WHITESPACE@16..17 \" \"\n+    USE_TREE@17..25\n+      PATH@17..25\n+        PATH@17..18\n+          PATH_SEGMENT@17..18\n+            NAME_REF@17..18\n+              IDENT@17..18 \"a\"\n+        COLON2@18..20 \"::\"\n+        PATH_SEGMENT@20..25\n+          SUPER_KW@20..25 \"super\"\n+    SEMICOLON@25..26 \";\"\n+  WHITESPACE@26..27 \"\\n\"\n+  USE_ITEM@27..47\n+    USE_KW@27..30 \"use\"\n+    WHITESPACE@30..31 \" \"\n+    USE_TREE@31..46\n+      PATH@31..46\n+        PATH@31..39\n+          PATH@31..36\n+            PATH_SEGMENT@31..36\n+              SUPER_KW@31..36 \"super\"\n+          COLON2@36..38 \"::\"\n+          PATH_SEGMENT@38..39\n+            NAME_REF@38..39\n+              IDENT@38..39 \"a\"\n+        COLON2@39..41 \"::\"\n+        PATH_SEGMENT@41..46\n+          SUPER_KW@41..46 \"super\"\n+    SEMICOLON@46..47 \";\"\n+  WHITESPACE@47..48 \"\\n\"\n+  USE_ITEM@48..66\n+    USE_KW@48..51 \"use\"\n+    WHITESPACE@51..52 \" \"\n+    USE_TREE@52..65\n+      PATH@52..53\n+        PATH_SEGMENT@52..53\n+          NAME_REF@52..53\n+            IDENT@52..53 \"a\"\n+      COLON2@53..55 \"::\"\n+      USE_TREE_LIST@55..65\n+        L_CURLY@55..56 \"{\"\n+        USE_TREE@56..64\n+          PATH@56..64\n+            PATH@56..61\n+              PATH_SEGMENT@56..61\n+                SUPER_KW@56..61 \"super\"\n+            COLON2@61..63 \"::\"\n+            PATH_SEGMENT@63..64\n+              NAME_REF@63..64\n+                IDENT@63..64 \"b\"\n+        R_CURLY@64..65 \"}\"\n+    SEMICOLON@65..66 \";\"\n+  WHITESPACE@66..67 \"\\n\"\n+error 6..11: The `super` keyword may only be preceded by other `super`s\n+error 20..25: The `super` keyword may only be preceded by other `super`s\n+error 41..46: The `super` keyword may only be preceded by other `super`s\n+error 56..61: The `super` keyword may only be preceded by other `super`s"}, {"sha": "bd4d58042638c50925be17bc78fbe502298903a7", "filename": "crates/ra_syntax/test_data/parser/err/0041_illegal_super_keyword_location.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,4 @@\n+use ::super;\n+use a::super;\n+use super::a::super;\n+use a::{super::b};"}, {"sha": "4f382b06c4cc65ee326fb115200530249c820371", "filename": "crates/ra_syntax/test_data/parser/err/0042_illegal_self_keyword_location.rast", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,27 @@\n+SOURCE_FILE@0..25\n+  USE_ITEM@0..11\n+    USE_KW@0..3 \"use\"\n+    WHITESPACE@3..4 \" \"\n+    USE_TREE@4..10\n+      PATH@4..10\n+        PATH_SEGMENT@4..10\n+          COLON2@4..6 \"::\"\n+          SELF_KW@6..10 \"self\"\n+    SEMICOLON@10..11 \";\"\n+  WHITESPACE@11..12 \"\\n\"\n+  USE_ITEM@12..24\n+    USE_KW@12..15 \"use\"\n+    WHITESPACE@15..16 \" \"\n+    USE_TREE@16..23\n+      PATH@16..23\n+        PATH@16..17\n+          PATH_SEGMENT@16..17\n+            NAME_REF@16..17\n+              IDENT@16..17 \"a\"\n+        COLON2@17..19 \"::\"\n+        PATH_SEGMENT@19..23\n+          SELF_KW@19..23 \"self\"\n+    SEMICOLON@23..24 \";\"\n+  WHITESPACE@24..25 \"\\n\"\n+error 6..10: The `self` keyword is only allowed as the first segment of a path\n+error 19..23: The `self` keyword is only allowed as the first segment of a path"}, {"sha": "b9e1d7d8be2c51acf40109edb284bd2603200807", "filename": "crates/ra_syntax/test_data/parser/err/0042_illegal_self_keyword_location.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,2 @@\n+use ::self;\n+use a::self;"}, {"sha": "e4645638426a3a8c9ec4bcb764a33a7465a93fb6", "filename": "crates/ra_syntax/test_data/parser/err/0163_weird_blocks.rast", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,71 @@\n+SOURCE_FILE@0..83\n+  FN_DEF@0..82\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..7\n+      IDENT@3..7 \"main\"\n+    PARAM_LIST@7..9\n+      L_PAREN@7..8 \"(\"\n+      R_PAREN@8..9 \")\"\n+    WHITESPACE@9..10 \" \"\n+    BLOCK_EXPR@10..82\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      EXPR_STMT@16..29\n+        BLOCK_EXPR@16..29\n+          L_CURLY@16..17 \"{\"\n+          WHITESPACE@17..18 \" \"\n+          ERROR@18..24\n+            UNSAFE_KW@18..24 \"unsafe\"\n+          WHITESPACE@24..25 \" \"\n+          LITERAL@25..27\n+            INT_NUMBER@25..27 \"92\"\n+          WHITESPACE@27..28 \" \"\n+          R_CURLY@28..29 \"}\"\n+      WHITESPACE@29..34 \"\\n    \"\n+      EXPR_STMT@34..46\n+        BLOCK_EXPR@34..46\n+          L_CURLY@34..35 \"{\"\n+          WHITESPACE@35..36 \" \"\n+          ERROR@36..41\n+            ASYNC_KW@36..41 \"async\"\n+          WHITESPACE@41..42 \" \"\n+          LITERAL@42..44\n+            INT_NUMBER@42..44 \"92\"\n+          WHITESPACE@44..45 \" \"\n+          R_CURLY@45..46 \"}\"\n+      WHITESPACE@46..51 \"\\n    \"\n+      EXPR_STMT@51..61\n+        BLOCK_EXPR@51..61\n+          L_CURLY@51..52 \"{\"\n+          WHITESPACE@52..53 \" \"\n+          EXPR_STMT@53..56\n+            EFFECT_EXPR@53..56\n+              TRY_KW@53..56 \"try\"\n+          WHITESPACE@56..57 \" \"\n+          LITERAL@57..59\n+            INT_NUMBER@57..59 \"92\"\n+          WHITESPACE@59..60 \" \"\n+          R_CURLY@60..61 \"}\"\n+      WHITESPACE@61..66 \"\\n    \"\n+      BLOCK_EXPR@66..80\n+        L_CURLY@66..67 \"{\"\n+        WHITESPACE@67..68 \" \"\n+        EXPR_STMT@68..75\n+          ERROR@68..75\n+            LABEL@68..75\n+              LIFETIME@68..74 \"\\'label\"\n+              COLON@74..75 \":\"\n+        WHITESPACE@75..76 \" \"\n+        LITERAL@76..78\n+          INT_NUMBER@76..78 \"92\"\n+        WHITESPACE@78..79 \" \"\n+        R_CURLY@79..80 \"}\"\n+      WHITESPACE@80..81 \"\\n\"\n+      R_CURLY@81..82 \"}\"\n+  WHITESPACE@82..83 \"\\n\"\n+error 24..24: expected existential, fn, trait or impl\n+error 41..41: expected existential, fn, trait or impl\n+error 56..56: expected a block\n+error 75..75: expected a loop\n+error 75..75: expected SEMICOLON"}, {"sha": "8fa324c1a14f7d3040014041387ca6f296863503", "filename": "crates/ra_syntax/test_data/parser/err/0163_weird_blocks.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    { unsafe 92 }\n+    { async 92 }\n+    { try 92 }\n+    { 'label: 92 }\n+}"}, {"sha": "75668c818df4f834e1f81db57915df5b46270824", "filename": "crates/ra_syntax/test_data/parser/inline/err/0002_misplaced_label_err.rast", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,19 +9,18 @@ SOURCE_FILE@0..30\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..29\n-      BLOCK@10..29\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        EXPR_STMT@16..22\n-          ERROR@16..22\n-            LABEL@16..22\n-              LIFETIME@16..21 \"\\'loop\"\n-              COLON@21..22 \":\"\n-        WHITESPACE@22..23 \" \"\n-        IMPL_DEF@23..27\n-          IMPL_KW@23..27 \"impl\"\n-        WHITESPACE@27..28 \"\\n\"\n-        R_CURLY@28..29 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      EXPR_STMT@16..22\n+        ERROR@16..22\n+          LABEL@16..22\n+            LIFETIME@16..21 \"\\'loop\"\n+            COLON@21..22 \":\"\n+      WHITESPACE@22..23 \" \"\n+      IMPL_DEF@23..27\n+        IMPL_KW@23..27 \"impl\"\n+      WHITESPACE@27..28 \"\\n\"\n+      R_CURLY@28..29 \"}\"\n   WHITESPACE@29..30 \"\\n\"\n error 22..22: expected a loop\n error 22..22: expected SEMICOLON"}, {"sha": "c789e8d825644a69d42636a4c01f3c6078ecab3f", "filename": "crates/ra_syntax/test_data/parser/inline/err/0006_unsafe_block_in_mod.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -8,9 +8,8 @@ SOURCE_FILE@0..33\n       L_PAREN@6..7 \"(\"\n       R_PAREN@7..8 \")\"\n     BLOCK_EXPR@8..10\n-      BLOCK@8..10\n-        L_CURLY@8..9 \"{\"\n-        R_CURLY@9..10 \"}\"\n+      L_CURLY@8..9 \"{\"\n+      R_CURLY@9..10 \"}\"\n   WHITESPACE@10..11 \" \"\n   ERROR@11..17\n     UNSAFE_KW@11..17 \"unsafe\"\n@@ -29,9 +28,8 @@ SOURCE_FILE@0..33\n       L_PAREN@28..29 \"(\"\n       R_PAREN@29..30 \")\"\n     BLOCK_EXPR@30..32\n-      BLOCK@30..32\n-        L_CURLY@30..31 \"{\"\n-        R_CURLY@31..32 \"}\"\n+      L_CURLY@30..31 \"{\"\n+      R_CURLY@31..32 \"}\"\n   WHITESPACE@32..33 \"\\n\"\n error 11..11: expected an item\n error 18..18: expected an item"}, {"sha": "cd24313d4dc61b14a00e8eacf8b3baf4254e3eab", "filename": "crates/ra_syntax/test_data/parser/inline/err/0007_async_without_semicolon.rast", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,24 +9,23 @@ SOURCE_FILE@0..30\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..29\n-      BLOCK@9..29\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \" \"\n-        LET_STMT@11..27\n-          LET_KW@11..14 \"let\"\n-          WHITESPACE@14..15 \" \"\n-          PLACEHOLDER_PAT@15..16\n-            UNDERSCORE@15..16 \"_\"\n-          WHITESPACE@16..17 \" \"\n-          EQ@17..18 \"=\"\n-          WHITESPACE@18..19 \" \"\n-          BLOCK_EXPR@19..27\n-            ASYNC_KW@19..24 \"async\"\n-            WHITESPACE@24..25 \" \"\n-            BLOCK@25..27\n-              L_CURLY@25..26 \"{\"\n-              R_CURLY@26..27 \"}\"\n-        WHITESPACE@27..28 \" \"\n-        R_CURLY@28..29 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      LET_STMT@11..27\n+        LET_KW@11..14 \"let\"\n+        WHITESPACE@14..15 \" \"\n+        PLACEHOLDER_PAT@15..16\n+          UNDERSCORE@15..16 \"_\"\n+        WHITESPACE@16..17 \" \"\n+        EQ@17..18 \"=\"\n+        WHITESPACE@18..19 \" \"\n+        EFFECT_EXPR@19..27\n+          ASYNC_KW@19..24 \"async\"\n+          WHITESPACE@24..25 \" \"\n+          BLOCK_EXPR@25..27\n+            L_CURLY@25..26 \"{\"\n+            R_CURLY@26..27 \"}\"\n+      WHITESPACE@27..28 \" \"\n+      R_CURLY@28..29 \"}\"\n   WHITESPACE@29..30 \"\\n\"\n error 27..27: expected SEMICOLON"}, {"sha": "c5fa7a404612e6ec41fcd618f8829f5a156ba48d", "filename": "crates/ra_syntax/test_data/parser/inline/err/0008_pub_expr.rast", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,18 +9,17 @@ SOURCE_FILE@0..21\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..20\n-      BLOCK@9..20\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \" \"\n-        ERROR@11..14\n-          VISIBILITY@11..14\n-            PUB_KW@11..14 \"pub\"\n-        WHITESPACE@14..15 \" \"\n-        EXPR_STMT@15..18\n-          LITERAL@15..17\n-            INT_NUMBER@15..17 \"92\"\n-          SEMICOLON@17..18 \";\"\n-        WHITESPACE@18..19 \" \"\n-        R_CURLY@19..20 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      ERROR@11..14\n+        VISIBILITY@11..14\n+          PUB_KW@11..14 \"pub\"\n+      WHITESPACE@14..15 \" \"\n+      EXPR_STMT@15..18\n+        LITERAL@15..17\n+          INT_NUMBER@15..17 \"92\"\n+        SEMICOLON@17..18 \";\"\n+      WHITESPACE@18..19 \" \"\n+      R_CURLY@19..20 \"}\"\n   WHITESPACE@20..21 \"\\n\"\n error 14..14: expected an item"}, {"sha": "0656fdf739241d4bf21a2d93745946237dc31200", "filename": "crates/ra_syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.rast", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,53 +9,51 @@ SOURCE_FILE@0..48\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..47\n-      BLOCK@9..47\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..14 \"\\n   \"\n-        EXPR_STMT@14..25\n-          ATTR@14..18\n-            POUND@14..15 \"#\"\n-            L_BRACK@15..16 \"[\"\n-            PATH@16..17\n-              PATH_SEGMENT@16..17\n-                NAME_REF@16..17\n-                  IDENT@16..17 \"A\"\n-            R_BRACK@17..18 \"]\"\n-          WHITESPACE@18..19 \" \"\n-          BIN_EXPR@19..24\n-            LITERAL@19..20\n-              INT_NUMBER@19..20 \"1\"\n-            WHITESPACE@20..21 \" \"\n-            PLUS@21..22 \"+\"\n-            WHITESPACE@22..23 \" \"\n-            LITERAL@23..24\n-              INT_NUMBER@23..24 \"2\"\n-          SEMICOLON@24..25 \";\"\n-        WHITESPACE@25..29 \"\\n   \"\n-        EXPR_STMT@29..45\n-          ATTR@29..33\n-            POUND@29..30 \"#\"\n-            L_BRACK@30..31 \"[\"\n-            PATH@31..32\n-              PATH_SEGMENT@31..32\n-                NAME_REF@31..32\n-                  IDENT@31..32 \"B\"\n-            R_BRACK@32..33 \"]\"\n-          WHITESPACE@33..34 \" \"\n-          IF_EXPR@34..44\n-            IF_KW@34..36 \"if\"\n-            WHITESPACE@36..37 \" \"\n-            CONDITION@37..41\n-              LITERAL@37..41\n-                TRUE_KW@37..41 \"true\"\n-            WHITESPACE@41..42 \" \"\n-            BLOCK_EXPR@42..44\n-              BLOCK@42..44\n-                L_CURLY@42..43 \"{\"\n-                R_CURLY@43..44 \"}\"\n-          SEMICOLON@44..45 \";\"\n-        WHITESPACE@45..46 \"\\n\"\n-        R_CURLY@46..47 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..14 \"\\n   \"\n+      EXPR_STMT@14..25\n+        ATTR@14..18\n+          POUND@14..15 \"#\"\n+          L_BRACK@15..16 \"[\"\n+          PATH@16..17\n+            PATH_SEGMENT@16..17\n+              NAME_REF@16..17\n+                IDENT@16..17 \"A\"\n+          R_BRACK@17..18 \"]\"\n+        WHITESPACE@18..19 \" \"\n+        BIN_EXPR@19..24\n+          LITERAL@19..20\n+            INT_NUMBER@19..20 \"1\"\n+          WHITESPACE@20..21 \" \"\n+          PLUS@21..22 \"+\"\n+          WHITESPACE@22..23 \" \"\n+          LITERAL@23..24\n+            INT_NUMBER@23..24 \"2\"\n+        SEMICOLON@24..25 \";\"\n+      WHITESPACE@25..29 \"\\n   \"\n+      EXPR_STMT@29..45\n+        ATTR@29..33\n+          POUND@29..30 \"#\"\n+          L_BRACK@30..31 \"[\"\n+          PATH@31..32\n+            PATH_SEGMENT@31..32\n+              NAME_REF@31..32\n+                IDENT@31..32 \"B\"\n+          R_BRACK@32..33 \"]\"\n+        WHITESPACE@33..34 \" \"\n+        IF_EXPR@34..44\n+          IF_KW@34..36 \"if\"\n+          WHITESPACE@36..37 \" \"\n+          CONDITION@37..41\n+            LITERAL@37..41\n+              TRUE_KW@37..41 \"true\"\n+          WHITESPACE@41..42 \" \"\n+          BLOCK_EXPR@42..44\n+            L_CURLY@42..43 \"{\"\n+            R_CURLY@43..44 \"}\"\n+        SEMICOLON@44..45 \";\"\n+      WHITESPACE@45..46 \"\\n\"\n+      R_CURLY@46..47 \"}\"\n   WHITESPACE@47..48 \"\\n\"\n error 24..24: attributes are not allowed on BIN_EXPR\n error 44..44: attributes are not allowed on IF_EXPR"}, {"sha": "e1abc56331440d095edc4a956706e845a6e07d68", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_bad_tuple_index_expr.rast", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,45 +9,44 @@ SOURCE_FILE@0..47\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..46\n-      BLOCK@9..46\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..20\n-          FIELD_EXPR@15..19\n-            PATH_EXPR@15..16\n-              PATH@15..16\n-                PATH_SEGMENT@15..16\n-                  NAME_REF@15..16\n-                    IDENT@15..16 \"x\"\n-            DOT@16..17 \".\"\n-            FLOAT_NUMBER@17..19 \"0.\"\n-          SEMICOLON@19..20 \";\"\n-        WHITESPACE@20..25 \"\\n    \"\n-        EXPR_STMT@25..32\n-          FIELD_EXPR@25..31\n-            PATH_EXPR@25..26\n-              PATH@25..26\n-                PATH_SEGMENT@25..26\n-                  NAME_REF@25..26\n-                    IDENT@25..26 \"x\"\n-            DOT@26..27 \".\"\n-            NAME_REF@27..31\n-              INT_NUMBER@27..31 \"1i32\"\n-          SEMICOLON@31..32 \";\"\n-        WHITESPACE@32..37 \"\\n    \"\n-        EXPR_STMT@37..44\n-          FIELD_EXPR@37..43\n-            PATH_EXPR@37..38\n-              PATH@37..38\n-                PATH_SEGMENT@37..38\n-                  NAME_REF@37..38\n-                    IDENT@37..38 \"x\"\n-            DOT@38..39 \".\"\n-            NAME_REF@39..43\n-              INT_NUMBER@39..43 \"0x01\"\n-          SEMICOLON@43..44 \";\"\n-        WHITESPACE@44..45 \"\\n\"\n-        R_CURLY@45..46 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..20\n+        FIELD_EXPR@15..19\n+          PATH_EXPR@15..16\n+            PATH@15..16\n+              PATH_SEGMENT@15..16\n+                NAME_REF@15..16\n+                  IDENT@15..16 \"x\"\n+          DOT@16..17 \".\"\n+          FLOAT_NUMBER@17..19 \"0.\"\n+        SEMICOLON@19..20 \";\"\n+      WHITESPACE@20..25 \"\\n    \"\n+      EXPR_STMT@25..32\n+        FIELD_EXPR@25..31\n+          PATH_EXPR@25..26\n+            PATH@25..26\n+              PATH_SEGMENT@25..26\n+                NAME_REF@25..26\n+                  IDENT@25..26 \"x\"\n+          DOT@26..27 \".\"\n+          NAME_REF@27..31\n+            INT_NUMBER@27..31 \"1i32\"\n+        SEMICOLON@31..32 \";\"\n+      WHITESPACE@32..37 \"\\n    \"\n+      EXPR_STMT@37..44\n+        FIELD_EXPR@37..43\n+          PATH_EXPR@37..38\n+            PATH@37..38\n+              PATH_SEGMENT@37..38\n+                NAME_REF@37..38\n+                  IDENT@37..38 \"x\"\n+          DOT@38..39 \".\"\n+          NAME_REF@39..43\n+            INT_NUMBER@39..43 \"0x01\"\n+        SEMICOLON@43..44 \";\"\n+      WHITESPACE@44..45 \"\\n\"\n+      R_CURLY@45..46 \"}\"\n   WHITESPACE@46..47 \"\\n\"\n error 27..31: Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix\n error 39..43: Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix"}, {"sha": "9be441110ff4ba950fb118b724c0a4baa099e6c6", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_wrong_order_fns.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -14,9 +14,8 @@ SOURCE_FILE@0..50\n       R_PAREN@20..21 \")\"\n     WHITESPACE@21..22 \" \"\n     BLOCK_EXPR@22..24\n-      BLOCK@22..24\n-        L_CURLY@22..23 \"{\"\n-        R_CURLY@23..24 \"}\"\n+      L_CURLY@22..23 \"{\"\n+      R_CURLY@23..24 \"}\"\n   WHITESPACE@24..25 \"\\n\"\n   ERROR@25..31\n     UNSAFE_KW@25..31 \"unsafe\"\n@@ -33,9 +32,8 @@ SOURCE_FILE@0..50\n       R_PAREN@45..46 \")\"\n     WHITESPACE@46..47 \" \"\n     BLOCK_EXPR@47..49\n-      BLOCK@47..49\n-        L_CURLY@47..48 \"{\"\n-        R_CURLY@48..49 \"}\"\n+      L_CURLY@47..48 \"{\"\n+      R_CURLY@48..49 \"}\"\n   WHITESPACE@49..50 \"\\n\"\n error 6..6: expected existential, fn, trait or impl\n error 31..31: expected existential, fn, trait or impl"}, {"sha": "b8cd0587da7c1ea3fdf5c5dd2c331073be2db502", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -45,9 +45,8 @@ SOURCE_FILE@0..62\n           R_PAREN@55..56 \")\"\n         WHITESPACE@56..57 \" \"\n         BLOCK_EXPR@57..59\n-          BLOCK@57..59\n-            L_CURLY@57..58 \"{\"\n-            R_CURLY@58..59 \"}\"\n+          L_CURLY@57..58 \"{\"\n+          R_CURLY@58..59 \"}\"\n       WHITESPACE@59..60 \"\\n\"\n       R_CURLY@60..61 \"}\"\n   WHITESPACE@61..62 \"\\n\""}, {"sha": "a9de44b57c0399a73759eda5cafe789f8611ed1a", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_record_literal_before_ellipsis_recovery.rast", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,41 +9,40 @@ SOURCE_FILE@0..45\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..44\n-      BLOCK@10..44\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        RECORD_LIT@16..42\n-          PATH@16..17\n-            PATH_SEGMENT@16..17\n-              NAME_REF@16..17\n-                IDENT@16..17 \"S\"\n-          WHITESPACE@17..18 \" \"\n-          RECORD_FIELD_LIST@18..42\n-            L_CURLY@18..19 \"{\"\n-            WHITESPACE@19..20 \" \"\n-            RECORD_FIELD@20..40\n-              NAME_REF@20..25\n-                IDENT@20..25 \"field\"\n-              WHITESPACE@25..26 \" \"\n-              RANGE_EXPR@26..40\n-                DOT2@26..28 \"..\"\n-                CALL_EXPR@28..40\n-                  PATH_EXPR@28..38\n-                    PATH@28..38\n-                      PATH@28..29\n-                        PATH_SEGMENT@28..29\n-                          NAME_REF@28..29\n-                            IDENT@28..29 \"S\"\n-                      COLON2@29..31 \"::\"\n-                      PATH_SEGMENT@31..38\n-                        NAME_REF@31..38\n-                          IDENT@31..38 \"default\"\n-                  ARG_LIST@38..40\n-                    L_PAREN@38..39 \"(\"\n-                    R_PAREN@39..40 \")\"\n-            WHITESPACE@40..41 \" \"\n-            R_CURLY@41..42 \"}\"\n-        WHITESPACE@42..43 \"\\n\"\n-        R_CURLY@43..44 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      RECORD_LIT@16..42\n+        PATH@16..17\n+          PATH_SEGMENT@16..17\n+            NAME_REF@16..17\n+              IDENT@16..17 \"S\"\n+        WHITESPACE@17..18 \" \"\n+        RECORD_FIELD_LIST@18..42\n+          L_CURLY@18..19 \"{\"\n+          WHITESPACE@19..20 \" \"\n+          RECORD_FIELD@20..40\n+            NAME_REF@20..25\n+              IDENT@20..25 \"field\"\n+            WHITESPACE@25..26 \" \"\n+            RANGE_EXPR@26..40\n+              DOT2@26..28 \"..\"\n+              CALL_EXPR@28..40\n+                PATH_EXPR@28..38\n+                  PATH@28..38\n+                    PATH@28..29\n+                      PATH_SEGMENT@28..29\n+                        NAME_REF@28..29\n+                          IDENT@28..29 \"S\"\n+                    COLON2@29..31 \"::\"\n+                    PATH_SEGMENT@31..38\n+                      NAME_REF@31..38\n+                        IDENT@31..38 \"default\"\n+                ARG_LIST@38..40\n+                  L_PAREN@38..39 \"(\"\n+                  R_PAREN@39..40 \")\"\n+          WHITESPACE@40..41 \" \"\n+          R_CURLY@41..42 \"}\"\n+      WHITESPACE@42..43 \"\\n\"\n+      R_CURLY@43..44 \"}\"\n   WHITESPACE@44..45 \"\\n\"\n error 25..25: expected COLON"}, {"sha": "a38b4f5736d55cfd108b00abdb896aafbe123c97", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0001_trait_item_list.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -51,9 +51,8 @@ SOURCE_FILE@0..83\n           R_PAREN@57..58 \")\"\n         WHITESPACE@58..59 \" \"\n         BLOCK_EXPR@59..61\n-          BLOCK@59..61\n-            L_CURLY@59..60 \"{\"\n-            R_CURLY@60..61 \"}\"\n+          L_CURLY@59..60 \"{\"\n+          R_CURLY@60..61 \"}\"\n       WHITESPACE@61..66 \"\\n    \"\n       FN_DEF@66..80\n         FN_KW@66..68 \"fn\""}, {"sha": "cf3a90400a802fb6c97af7dcf93adcceeea99a0a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0002_use_tree_list.rast", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@0..250\n+SOURCE_FILE@0..249\n   USE_ITEM@0..58\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n@@ -104,32 +104,33 @@ SOURCE_FILE@0..250\n   WHITESPACE@166..167 \" \"\n   COMMENT@167..179 \"// Rust 2015\"\n   WHITESPACE@179..180 \"\\n\"\n-  USE_ITEM@180..206\n+  USE_ITEM@180..205\n     USE_KW@180..183 \"use\"\n     WHITESPACE@183..184 \" \"\n-    USE_TREE@184..205\n+    USE_TREE@184..204\n       COLON2@184..186 \"::\"\n-      USE_TREE_LIST@186..205\n+      USE_TREE_LIST@186..204\n         L_CURLY@186..187 \"{\"\n-        USE_TREE@187..204\n-          USE_TREE_LIST@187..204\n+        USE_TREE@187..203\n+          USE_TREE_LIST@187..203\n             L_CURLY@187..188 \"{\"\n-            USE_TREE@188..203\n-              USE_TREE_LIST@188..203\n+            USE_TREE@188..202\n+              USE_TREE_LIST@188..202\n                 L_CURLY@188..189 \"{\"\n-                USE_TREE@189..202\n-                  PATH@189..202\n-                    PATH@189..194\n-                      PATH_SEGMENT@189..194\n-                        CRATE_KW@189..194 \"crate\"\n-                    COLON2@194..196 \"::\"\n-                    PATH_SEGMENT@196..202\n-                      NAME_REF@196..202\n-                        IDENT@196..202 \"export\"\n-                R_CURLY@202..203 \"}\"\n-            R_CURLY@203..204 \"}\"\n-        R_CURLY@204..205 \"}\"\n-    SEMICOLON@205..206 \";\"\n-  WHITESPACE@206..207 \" \"\n-  COMMENT@207..249 \"// Nonsensical but pe ...\"\n-  WHITESPACE@249..250 \"\\n\"\n+                USE_TREE@189..201\n+                  PATH@189..201\n+                    PATH@189..193\n+                      PATH_SEGMENT@189..193\n+                        NAME_REF@189..193\n+                          IDENT@189..193 \"root\"\n+                    COLON2@193..195 \"::\"\n+                    PATH_SEGMENT@195..201\n+                      NAME_REF@195..201\n+                        IDENT@195..201 \"export\"\n+                R_CURLY@201..202 \"}\"\n+            R_CURLY@202..203 \"}\"\n+        R_CURLY@203..204 \"}\"\n+    SEMICOLON@204..205 \";\"\n+  WHITESPACE@205..206 \" \"\n+  COMMENT@206..248 \"// Nonsensical but pe ...\"\n+  WHITESPACE@248..249 \"\\n\""}, {"sha": "381cba1e29e084aa06f8562fc108700e570ef03e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0002_use_tree_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,4 +1,4 @@\n use {crate::path::from::root, or::path::from::crate_name}; // Rust 2018 (with a crate named `or`)\n use {path::from::root}; // Rust 2015\n use ::{some::arbritrary::path}; // Rust 2015\n-use ::{{{crate::export}}}; // Nonsensical but perfectly legal nestnig\n+use ::{{{root::export}}}; // Nonsensical but perfectly legal nesting"}, {"sha": "9dc473e43c7fd4f67f63f4a05b7a9ba760e08fa0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0003_where_pred_for.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -55,8 +55,7 @@ SOURCE_FILE@0..49\n                     R_PAREN@43..44 \")\"\n     WHITESPACE@44..45 \"\\n\"\n     BLOCK_EXPR@45..48\n-      BLOCK@45..48\n-        L_CURLY@45..46 \"{\"\n-        WHITESPACE@46..47 \" \"\n-        R_CURLY@47..48 \"}\"\n+      L_CURLY@45..46 \"{\"\n+      WHITESPACE@46..47 \" \"\n+      R_CURLY@47..48 \"}\"\n   WHITESPACE@48..49 \"\\n\""}, {"sha": "6c8c1e24b08f6b2abc00fd80ca52b74034827ee7", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0005_function_type_params.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0005_function_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0005_function_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0005_function_type_params.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -32,7 +32,6 @@ SOURCE_FILE@0..28\n       L_PAREN@23..24 \"(\"\n       R_PAREN@24..25 \")\"\n     BLOCK_EXPR@25..27\n-      BLOCK@25..27\n-        L_CURLY@25..26 \"{\"\n-        R_CURLY@26..27 \"}\"\n+      L_CURLY@25..26 \"{\"\n+      R_CURLY@26..27 \"}\"\n   WHITESPACE@27..28 \"\\n\""}, {"sha": "9f4a9e69bce61c3a7b4c39644f4ca1f19e5940e4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0006_self_param.rast", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -23,9 +23,8 @@ SOURCE_FILE@0..128\n           R_PAREN@22..23 \")\"\n         WHITESPACE@23..24 \" \"\n         BLOCK_EXPR@24..26\n-          BLOCK@24..26\n-            L_CURLY@24..25 \"{\"\n-            R_CURLY@25..26 \"}\"\n+          L_CURLY@24..25 \"{\"\n+          R_CURLY@25..26 \"}\"\n       WHITESPACE@26..31 \"\\n    \"\n       FN_DEF@31..46\n         FN_KW@31..33 \"fn\"\n@@ -41,9 +40,8 @@ SOURCE_FILE@0..128\n           R_PAREN@42..43 \")\"\n         WHITESPACE@43..44 \" \"\n         BLOCK_EXPR@44..46\n-          BLOCK@44..46\n-            L_CURLY@44..45 \"{\"\n-            R_CURLY@45..46 \"}\"\n+          L_CURLY@44..45 \"{\"\n+          R_CURLY@45..46 \"}\"\n       WHITESPACE@46..51 \"\\n    \"\n       FN_DEF@51..69\n         FN_KW@51..53 \"fn\"\n@@ -61,9 +59,8 @@ SOURCE_FILE@0..128\n           R_PAREN@65..66 \")\"\n         WHITESPACE@66..67 \" \"\n         BLOCK_EXPR@67..69\n-          BLOCK@67..69\n-            L_CURLY@67..68 \"{\"\n-            R_CURLY@68..69 \"}\"\n+          L_CURLY@67..68 \"{\"\n+          R_CURLY@68..69 \"}\"\n       WHITESPACE@69..74 \"\\n    \"\n       FN_DEF@74..103\n         FN_KW@74..76 \"fn\"\n@@ -95,9 +92,8 @@ SOURCE_FILE@0..128\n           R_PAREN@99..100 \")\"\n         WHITESPACE@100..101 \" \"\n         BLOCK_EXPR@101..103\n-          BLOCK@101..103\n-            L_CURLY@101..102 \"{\"\n-            R_CURLY@102..103 \"}\"\n+          L_CURLY@101..102 \"{\"\n+          R_CURLY@102..103 \"}\"\n       WHITESPACE@103..108 \"\\n    \"\n       FN_DEF@108..125\n         FN_KW@108..110 \"fn\"\n@@ -113,9 +109,8 @@ SOURCE_FILE@0..128\n           R_PAREN@121..122 \")\"\n         WHITESPACE@122..123 \" \"\n         BLOCK_EXPR@123..125\n-          BLOCK@123..125\n-            L_CURLY@123..124 \"{\"\n-            R_CURLY@124..125 \"}\"\n+          L_CURLY@123..124 \"{\"\n+          R_CURLY@124..125 \"}\"\n       WHITESPACE@125..126 \"\\n\"\n       R_CURLY@126..127 \"}\"\n   WHITESPACE@127..128 \"\\n\""}, {"sha": "10eb31d68626cda5f495962d88ea70974120053f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0008_path_part.rast", "status": "modified", "additions": 84, "deletions": 85, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,89 +9,88 @@ SOURCE_FILE@0..103\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..102\n-      BLOCK@9..102\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..33\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PATH_PAT@19..27\n-            PATH@19..27\n-              PATH@19..22\n-                PATH_SEGMENT@19..22\n-                  NAME_REF@19..22\n-                    IDENT@19..22 \"foo\"\n-              COLON2@22..24 \"::\"\n-              PATH_SEGMENT@24..27\n-                NAME_REF@24..27\n-                  IDENT@24..27 \"Bar\"\n-          WHITESPACE@27..28 \" \"\n-          EQ@28..29 \"=\"\n-          WHITESPACE@29..30 \" \"\n-          TUPLE_EXPR@30..32\n-            L_PAREN@30..31 \"(\"\n-            R_PAREN@31..32 \")\"\n-          SEMICOLON@32..33 \";\"\n-        WHITESPACE@33..38 \"\\n    \"\n-        LET_STMT@38..53\n-          LET_KW@38..41 \"let\"\n-          WHITESPACE@41..42 \" \"\n-          PATH_PAT@42..47\n-            PATH@42..47\n-              PATH_SEGMENT@42..47\n-                COLON2@42..44 \"::\"\n-                NAME_REF@44..47\n-                  IDENT@44..47 \"Bar\"\n-          WHITESPACE@47..48 \" \"\n-          EQ@48..49 \"=\"\n-          WHITESPACE@49..50 \" \"\n-          TUPLE_EXPR@50..52\n-            L_PAREN@50..51 \"(\"\n-            R_PAREN@51..52 \")\"\n-          SEMICOLON@52..53 \";\"\n-        WHITESPACE@53..58 \"\\n    \"\n-        LET_STMT@58..78\n-          LET_KW@58..61 \"let\"\n-          WHITESPACE@61..62 \" \"\n-          RECORD_PAT@62..72\n-            PATH@62..65\n-              PATH_SEGMENT@62..65\n-                NAME_REF@62..65\n-                  IDENT@62..65 \"Bar\"\n-            WHITESPACE@65..66 \" \"\n-            RECORD_FIELD_PAT_LIST@66..72\n-              L_CURLY@66..67 \"{\"\n-              WHITESPACE@67..68 \" \"\n-              DOT2@68..70 \"..\"\n-              WHITESPACE@70..71 \" \"\n-              R_CURLY@71..72 \"}\"\n-          WHITESPACE@72..73 \" \"\n-          EQ@73..74 \"=\"\n-          WHITESPACE@74..75 \" \"\n-          TUPLE_EXPR@75..77\n-            L_PAREN@75..76 \"(\"\n-            R_PAREN@76..77 \")\"\n-          SEMICOLON@77..78 \";\"\n-        WHITESPACE@78..83 \"\\n    \"\n-        LET_STMT@83..100\n-          LET_KW@83..86 \"let\"\n-          WHITESPACE@86..87 \" \"\n-          TUPLE_STRUCT_PAT@87..94\n-            PATH@87..90\n-              PATH_SEGMENT@87..90\n-                NAME_REF@87..90\n-                  IDENT@87..90 \"Bar\"\n-            L_PAREN@90..91 \"(\"\n-            DOT_DOT_PAT@91..93\n-              DOT2@91..93 \"..\"\n-            R_PAREN@93..94 \")\"\n-          WHITESPACE@94..95 \" \"\n-          EQ@95..96 \"=\"\n-          WHITESPACE@96..97 \" \"\n-          TUPLE_EXPR@97..99\n-            L_PAREN@97..98 \"(\"\n-            R_PAREN@98..99 \")\"\n-          SEMICOLON@99..100 \";\"\n-        WHITESPACE@100..101 \"\\n\"\n-        R_CURLY@101..102 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..33\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PATH_PAT@19..27\n+          PATH@19..27\n+            PATH@19..22\n+              PATH_SEGMENT@19..22\n+                NAME_REF@19..22\n+                  IDENT@19..22 \"foo\"\n+            COLON2@22..24 \"::\"\n+            PATH_SEGMENT@24..27\n+              NAME_REF@24..27\n+                IDENT@24..27 \"Bar\"\n+        WHITESPACE@27..28 \" \"\n+        EQ@28..29 \"=\"\n+        WHITESPACE@29..30 \" \"\n+        TUPLE_EXPR@30..32\n+          L_PAREN@30..31 \"(\"\n+          R_PAREN@31..32 \")\"\n+        SEMICOLON@32..33 \";\"\n+      WHITESPACE@33..38 \"\\n    \"\n+      LET_STMT@38..53\n+        LET_KW@38..41 \"let\"\n+        WHITESPACE@41..42 \" \"\n+        PATH_PAT@42..47\n+          PATH@42..47\n+            PATH_SEGMENT@42..47\n+              COLON2@42..44 \"::\"\n+              NAME_REF@44..47\n+                IDENT@44..47 \"Bar\"\n+        WHITESPACE@47..48 \" \"\n+        EQ@48..49 \"=\"\n+        WHITESPACE@49..50 \" \"\n+        TUPLE_EXPR@50..52\n+          L_PAREN@50..51 \"(\"\n+          R_PAREN@51..52 \")\"\n+        SEMICOLON@52..53 \";\"\n+      WHITESPACE@53..58 \"\\n    \"\n+      LET_STMT@58..78\n+        LET_KW@58..61 \"let\"\n+        WHITESPACE@61..62 \" \"\n+        RECORD_PAT@62..72\n+          PATH@62..65\n+            PATH_SEGMENT@62..65\n+              NAME_REF@62..65\n+                IDENT@62..65 \"Bar\"\n+          WHITESPACE@65..66 \" \"\n+          RECORD_FIELD_PAT_LIST@66..72\n+            L_CURLY@66..67 \"{\"\n+            WHITESPACE@67..68 \" \"\n+            DOT2@68..70 \"..\"\n+            WHITESPACE@70..71 \" \"\n+            R_CURLY@71..72 \"}\"\n+        WHITESPACE@72..73 \" \"\n+        EQ@73..74 \"=\"\n+        WHITESPACE@74..75 \" \"\n+        TUPLE_EXPR@75..77\n+          L_PAREN@75..76 \"(\"\n+          R_PAREN@76..77 \")\"\n+        SEMICOLON@77..78 \";\"\n+      WHITESPACE@78..83 \"\\n    \"\n+      LET_STMT@83..100\n+        LET_KW@83..86 \"let\"\n+        WHITESPACE@86..87 \" \"\n+        TUPLE_STRUCT_PAT@87..94\n+          PATH@87..90\n+            PATH_SEGMENT@87..90\n+              NAME_REF@87..90\n+                IDENT@87..90 \"Bar\"\n+          L_PAREN@90..91 \"(\"\n+          DOT_DOT_PAT@91..93\n+            DOT2@91..93 \"..\"\n+          R_PAREN@93..94 \")\"\n+        WHITESPACE@94..95 \" \"\n+        EQ@95..96 \"=\"\n+        WHITESPACE@96..97 \" \"\n+        TUPLE_EXPR@97..99\n+          L_PAREN@97..98 \"(\"\n+          R_PAREN@98..99 \")\"\n+        SEMICOLON@99..100 \";\"\n+      WHITESPACE@100..101 \"\\n\"\n+      R_CURLY@101..102 \"}\"\n   WHITESPACE@102..103 \"\\n\""}, {"sha": "425e5196cb748c8a5b9a41349b243dd5fdba9322", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0009_loop_expr.rast", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,18 +9,16 @@ SOURCE_FILE@0..26\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..25\n-      BLOCK@9..25\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..23\n-          LOOP_EXPR@15..22\n-            LOOP_KW@15..19 \"loop\"\n-            WHITESPACE@19..20 \" \"\n-            BLOCK_EXPR@20..22\n-              BLOCK@20..22\n-                L_CURLY@20..21 \"{\"\n-                R_CURLY@21..22 \"}\"\n-          SEMICOLON@22..23 \";\"\n-        WHITESPACE@23..24 \"\\n\"\n-        R_CURLY@24..25 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..23\n+        LOOP_EXPR@15..22\n+          LOOP_KW@15..19 \"loop\"\n+          WHITESPACE@19..20 \" \"\n+          BLOCK_EXPR@20..22\n+            L_CURLY@20..21 \"{\"\n+            R_CURLY@21..22 \"}\"\n+        SEMICOLON@22..23 \";\"\n+      WHITESPACE@23..24 \"\\n\"\n+      R_CURLY@24..25 \"}\"\n   WHITESPACE@25..26 \"\\n\""}, {"sha": "d823c08fc18958a14bba6f43c8d44752b8161991", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0011_field_expr.rast", "status": "modified", "additions": 47, "deletions": 48, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,52 +9,51 @@ SOURCE_FILE@0..48\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..47\n-      BLOCK@9..47\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..21\n-          FIELD_EXPR@15..20\n-            PATH_EXPR@15..16\n-              PATH@15..16\n-                PATH_SEGMENT@15..16\n-                  NAME_REF@15..16\n-                    IDENT@15..16 \"x\"\n-            DOT@16..17 \".\"\n-            NAME_REF@17..20\n-              IDENT@17..20 \"foo\"\n-          SEMICOLON@20..21 \";\"\n-        WHITESPACE@21..26 \"\\n    \"\n-        EXPR_STMT@26..34\n-          FIELD_EXPR@26..33\n-            FIELD_EXPR@26..29\n-              PATH_EXPR@26..27\n-                PATH@26..27\n-                  PATH_SEGMENT@26..27\n-                    NAME_REF@26..27\n-                      IDENT@26..27 \"x\"\n-              DOT@27..28 \".\"\n-              NAME_REF@28..29\n-                INT_NUMBER@28..29 \"0\"\n-            DOT@29..30 \".\"\n-            NAME_REF@30..33\n-              IDENT@30..33 \"bar\"\n-          SEMICOLON@33..34 \";\"\n-        WHITESPACE@34..39 \"\\n    \"\n-        EXPR_STMT@39..45\n-          CALL_EXPR@39..44\n-            FIELD_EXPR@39..42\n-              PATH_EXPR@39..40\n-                PATH@39..40\n-                  PATH_SEGMENT@39..40\n-                    NAME_REF@39..40\n-                      IDENT@39..40 \"x\"\n-              DOT@40..41 \".\"\n-              NAME_REF@41..42\n-                INT_NUMBER@41..42 \"0\"\n-            ARG_LIST@42..44\n-              L_PAREN@42..43 \"(\"\n-              R_PAREN@43..44 \")\"\n-          SEMICOLON@44..45 \";\"\n-        WHITESPACE@45..46 \"\\n\"\n-        R_CURLY@46..47 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..21\n+        FIELD_EXPR@15..20\n+          PATH_EXPR@15..16\n+            PATH@15..16\n+              PATH_SEGMENT@15..16\n+                NAME_REF@15..16\n+                  IDENT@15..16 \"x\"\n+          DOT@16..17 \".\"\n+          NAME_REF@17..20\n+            IDENT@17..20 \"foo\"\n+        SEMICOLON@20..21 \";\"\n+      WHITESPACE@21..26 \"\\n    \"\n+      EXPR_STMT@26..34\n+        FIELD_EXPR@26..33\n+          FIELD_EXPR@26..29\n+            PATH_EXPR@26..27\n+              PATH@26..27\n+                PATH_SEGMENT@26..27\n+                  NAME_REF@26..27\n+                    IDENT@26..27 \"x\"\n+            DOT@27..28 \".\"\n+            NAME_REF@28..29\n+              INT_NUMBER@28..29 \"0\"\n+          DOT@29..30 \".\"\n+          NAME_REF@30..33\n+            IDENT@30..33 \"bar\"\n+        SEMICOLON@33..34 \";\"\n+      WHITESPACE@34..39 \"\\n    \"\n+      EXPR_STMT@39..45\n+        CALL_EXPR@39..44\n+          FIELD_EXPR@39..42\n+            PATH_EXPR@39..40\n+              PATH@39..40\n+                PATH_SEGMENT@39..40\n+                  NAME_REF@39..40\n+                    IDENT@39..40 \"x\"\n+            DOT@40..41 \".\"\n+            NAME_REF@41..42\n+              INT_NUMBER@41..42 \"0\"\n+          ARG_LIST@42..44\n+            L_PAREN@42..43 \"(\"\n+            R_PAREN@43..44 \")\"\n+        SEMICOLON@44..45 \";\"\n+      WHITESPACE@45..46 \"\\n\"\n+      R_CURLY@46..47 \"}\"\n   WHITESPACE@47..48 \"\\n\""}, {"sha": "422912e3cb2a7a33185b3d8dbbc990f43d51bfcf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0015_continue_expr.rast", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,29 +9,27 @@ SOURCE_FILE@0..69\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..68\n-      BLOCK@9..68\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LOOP_EXPR@15..66\n-          LOOP_KW@15..19 \"loop\"\n-          WHITESPACE@19..20 \" \"\n-          BLOCK_EXPR@20..66\n-            BLOCK@20..66\n-              L_CURLY@20..21 \"{\"\n-              WHITESPACE@21..30 \"\\n        \"\n-              EXPR_STMT@30..39\n-                CONTINUE_EXPR@30..38\n-                  CONTINUE_KW@30..38 \"continue\"\n-                SEMICOLON@38..39 \";\"\n-              WHITESPACE@39..48 \"\\n        \"\n-              EXPR_STMT@48..60\n-                CONTINUE_EXPR@48..59\n-                  CONTINUE_KW@48..56 \"continue\"\n-                  WHITESPACE@56..57 \" \"\n-                  LIFETIME@57..59 \"\\'l\"\n-                SEMICOLON@59..60 \";\"\n-              WHITESPACE@60..65 \"\\n    \"\n-              R_CURLY@65..66 \"}\"\n-        WHITESPACE@66..67 \"\\n\"\n-        R_CURLY@67..68 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LOOP_EXPR@15..66\n+        LOOP_KW@15..19 \"loop\"\n+        WHITESPACE@19..20 \" \"\n+        BLOCK_EXPR@20..66\n+          L_CURLY@20..21 \"{\"\n+          WHITESPACE@21..30 \"\\n        \"\n+          EXPR_STMT@30..39\n+            CONTINUE_EXPR@30..38\n+              CONTINUE_KW@30..38 \"continue\"\n+            SEMICOLON@38..39 \";\"\n+          WHITESPACE@39..48 \"\\n        \"\n+          EXPR_STMT@48..60\n+            CONTINUE_EXPR@48..59\n+              CONTINUE_KW@48..56 \"continue\"\n+              WHITESPACE@56..57 \" \"\n+              LIFETIME@57..59 \"\\'l\"\n+            SEMICOLON@59..60 \";\"\n+          WHITESPACE@60..65 \"\\n    \"\n+          R_CURLY@65..66 \"}\"\n+      WHITESPACE@66..67 \"\\n\"\n+      R_CURLY@67..68 \"}\"\n   WHITESPACE@68..69 \"\\n\""}, {"sha": "15da6fdd6e9513c58daef63d4dfc739c32ed5152", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0018_arb_self_types.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -32,9 +32,8 @@ SOURCE_FILE@0..69\n           R_PAREN@29..30 \")\"\n         WHITESPACE@30..31 \" \"\n         BLOCK_EXPR@31..33\n-          BLOCK@31..33\n-            L_CURLY@31..32 \"{\"\n-            R_CURLY@32..33 \"}\"\n+          L_CURLY@31..32 \"{\"\n+          R_CURLY@32..33 \"}\"\n       WHITESPACE@33..38 \"\\n    \"\n       FN_DEF@38..66\n         FN_KW@38..40 \"fn\"\n@@ -66,9 +65,8 @@ SOURCE_FILE@0..69\n           R_PAREN@62..63 \")\"\n         WHITESPACE@63..64 \" \"\n         BLOCK_EXPR@64..66\n-          BLOCK@64..66\n-            L_CURLY@64..65 \"{\"\n-            R_CURLY@65..66 \"}\"\n+          L_CURLY@64..65 \"{\"\n+          R_CURLY@65..66 \"}\"\n       WHITESPACE@66..67 \"\\n\"\n       R_CURLY@67..68 \"}\"\n   WHITESPACE@68..69 \"\\n\""}, {"sha": "10d6b2fdef0e00696f16ba2e90aeb9cdbcef3a79", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0019_unary_expr.rast", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,37 +9,36 @@ SOURCE_FILE@0..44\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..43\n-      BLOCK@9..43\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..20\n-          PREFIX_EXPR@15..19\n-            STAR@15..16 \"*\"\n-            PREFIX_EXPR@16..19\n-              STAR@16..17 \"*\"\n-              REF_EXPR@17..19\n-                AMP@17..18 \"&\"\n-                LITERAL@18..19\n-                  INT_NUMBER@18..19 \"1\"\n-          SEMICOLON@19..20 \";\"\n-        WHITESPACE@20..25 \"\\n    \"\n-        EXPR_STMT@25..32\n-          PREFIX_EXPR@25..31\n-            BANG@25..26 \"!\"\n-            PREFIX_EXPR@26..31\n-              BANG@26..27 \"!\"\n-              LITERAL@27..31\n-                TRUE_KW@27..31 \"true\"\n-          SEMICOLON@31..32 \";\"\n-        WHITESPACE@32..37 \"\\n    \"\n-        EXPR_STMT@37..41\n-          PREFIX_EXPR@37..40\n-            MINUS@37..38 \"-\"\n-            PREFIX_EXPR@38..40\n-              MINUS@38..39 \"-\"\n-              LITERAL@39..40\n-                INT_NUMBER@39..40 \"1\"\n-          SEMICOLON@40..41 \";\"\n-        WHITESPACE@41..42 \"\\n\"\n-        R_CURLY@42..43 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..20\n+        PREFIX_EXPR@15..19\n+          STAR@15..16 \"*\"\n+          PREFIX_EXPR@16..19\n+            STAR@16..17 \"*\"\n+            REF_EXPR@17..19\n+              AMP@17..18 \"&\"\n+              LITERAL@18..19\n+                INT_NUMBER@18..19 \"1\"\n+        SEMICOLON@19..20 \";\"\n+      WHITESPACE@20..25 \"\\n    \"\n+      EXPR_STMT@25..32\n+        PREFIX_EXPR@25..31\n+          BANG@25..26 \"!\"\n+          PREFIX_EXPR@26..31\n+            BANG@26..27 \"!\"\n+            LITERAL@27..31\n+              TRUE_KW@27..31 \"true\"\n+        SEMICOLON@31..32 \";\"\n+      WHITESPACE@32..37 \"\\n    \"\n+      EXPR_STMT@37..41\n+        PREFIX_EXPR@37..40\n+          MINUS@37..38 \"-\"\n+          PREFIX_EXPR@38..40\n+            MINUS@38..39 \"-\"\n+            LITERAL@39..40\n+              INT_NUMBER@39..40 \"1\"\n+        SEMICOLON@40..41 \";\"\n+      WHITESPACE@41..42 \"\\n\"\n+      R_CURLY@42..43 \"}\"\n   WHITESPACE@43..44 \"\\n\""}, {"sha": "c204aeb63ee926e8b5d25f785f6b3dbe7fbca291", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0021_impl_item_list.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -55,9 +55,8 @@ SOURCE_FILE@0..89\n           R_PAREN@61..62 \")\"\n         WHITESPACE@62..63 \" \"\n         BLOCK_EXPR@63..65\n-          BLOCK@63..65\n-            L_CURLY@63..64 \"{\"\n-            R_CURLY@64..65 \"}\"\n+          L_CURLY@63..64 \"{\"\n+          R_CURLY@64..65 \"}\"\n       WHITESPACE@65..70 \"\\n    \"\n       FN_DEF@70..86\n         FN_KW@70..72 \"fn\"\n@@ -72,9 +71,8 @@ SOURCE_FILE@0..89\n           R_PAREN@82..83 \")\"\n         WHITESPACE@83..84 \" \"\n         BLOCK_EXPR@84..86\n-          BLOCK@84..86\n-            L_CURLY@84..85 \"{\"\n-            R_CURLY@85..86 \"}\"\n+          L_CURLY@84..85 \"{\"\n+          R_CURLY@85..86 \"}\"\n       WHITESPACE@86..87 \"\\n\"\n       R_CURLY@87..88 \"}\"\n   WHITESPACE@88..89 \"\\n\""}, {"sha": "7eb27d5e14b980af86736b9ba55484dea10a7df1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0024_slice_pat.rast", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,34 +9,33 @@ SOURCE_FILE@0..39\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..38\n-      BLOCK@10..38\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..36\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          SLICE_PAT@20..30\n-            L_BRACK@20..21 \"[\"\n-            BIND_PAT@21..22\n-              NAME@21..22\n-                IDENT@21..22 \"a\"\n-            COMMA@22..23 \",\"\n-            WHITESPACE@23..24 \" \"\n-            BIND_PAT@24..25\n-              NAME@24..25\n-                IDENT@24..25 \"b\"\n-            COMMA@25..26 \",\"\n-            WHITESPACE@26..27 \" \"\n-            DOT_DOT_PAT@27..29\n-              DOT2@27..29 \"..\"\n-            R_BRACK@29..30 \"]\"\n-          WHITESPACE@30..31 \" \"\n-          EQ@31..32 \"=\"\n-          WHITESPACE@32..33 \" \"\n-          ARRAY_EXPR@33..35\n-            L_BRACK@33..34 \"[\"\n-            R_BRACK@34..35 \"]\"\n-          SEMICOLON@35..36 \";\"\n-        WHITESPACE@36..37 \"\\n\"\n-        R_CURLY@37..38 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..36\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        SLICE_PAT@20..30\n+          L_BRACK@20..21 \"[\"\n+          BIND_PAT@21..22\n+            NAME@21..22\n+              IDENT@21..22 \"a\"\n+          COMMA@22..23 \",\"\n+          WHITESPACE@23..24 \" \"\n+          BIND_PAT@24..25\n+            NAME@24..25\n+              IDENT@24..25 \"b\"\n+          COMMA@25..26 \",\"\n+          WHITESPACE@26..27 \" \"\n+          DOT_DOT_PAT@27..29\n+            DOT2@27..29 \"..\"\n+          R_BRACK@29..30 \"]\"\n+        WHITESPACE@30..31 \" \"\n+        EQ@31..32 \"=\"\n+        WHITESPACE@32..33 \" \"\n+        ARRAY_EXPR@33..35\n+          L_BRACK@33..34 \"[\"\n+          R_BRACK@34..35 \"]\"\n+        SEMICOLON@35..36 \";\"\n+      WHITESPACE@36..37 \"\\n\"\n+      R_CURLY@37..38 \"}\"\n   WHITESPACE@38..39 \"\\n\""}, {"sha": "b4598768eefc5547a459006720caa30833af67af", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0026_tuple_pat_fields.rast", "status": "modified", "additions": 92, "deletions": 93, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,97 +9,96 @@ SOURCE_FILE@0..97\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..96\n-      BLOCK@9..96\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..28\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          TUPLE_STRUCT_PAT@19..22\n-            PATH@19..20\n-              PATH_SEGMENT@19..20\n-                NAME_REF@19..20\n-                  IDENT@19..20 \"S\"\n-            L_PAREN@20..21 \"(\"\n-            R_PAREN@21..22 \")\"\n-          WHITESPACE@22..23 \" \"\n-          EQ@23..24 \"=\"\n-          WHITESPACE@24..25 \" \"\n-          TUPLE_EXPR@25..27\n-            L_PAREN@25..26 \"(\"\n-            R_PAREN@26..27 \")\"\n-          SEMICOLON@27..28 \";\"\n-        WHITESPACE@28..33 \"\\n    \"\n-        LET_STMT@33..47\n-          LET_KW@33..36 \"let\"\n-          WHITESPACE@36..37 \" \"\n-          TUPLE_STRUCT_PAT@37..41\n-            PATH@37..38\n-              PATH_SEGMENT@37..38\n-                NAME_REF@37..38\n-                  IDENT@37..38 \"S\"\n-            L_PAREN@38..39 \"(\"\n-            PLACEHOLDER_PAT@39..40\n-              UNDERSCORE@39..40 \"_\"\n-            R_PAREN@40..41 \")\"\n-          WHITESPACE@41..42 \" \"\n-          EQ@42..43 \"=\"\n-          WHITESPACE@43..44 \" \"\n-          TUPLE_EXPR@44..46\n-            L_PAREN@44..45 \"(\"\n-            R_PAREN@45..46 \")\"\n-          SEMICOLON@46..47 \";\"\n-        WHITESPACE@47..52 \"\\n    \"\n-        LET_STMT@52..67\n-          LET_KW@52..55 \"let\"\n-          WHITESPACE@55..56 \" \"\n-          TUPLE_STRUCT_PAT@56..61\n-            PATH@56..57\n-              PATH_SEGMENT@56..57\n-                NAME_REF@56..57\n-                  IDENT@56..57 \"S\"\n-            L_PAREN@57..58 \"(\"\n-            PLACEHOLDER_PAT@58..59\n-              UNDERSCORE@58..59 \"_\"\n-            COMMA@59..60 \",\"\n-            R_PAREN@60..61 \")\"\n-          WHITESPACE@61..62 \" \"\n-          EQ@62..63 \"=\"\n-          WHITESPACE@63..64 \" \"\n-          TUPLE_EXPR@64..66\n-            L_PAREN@64..65 \"(\"\n-            R_PAREN@65..66 \")\"\n-          SEMICOLON@66..67 \";\"\n-        WHITESPACE@67..72 \"\\n    \"\n-        LET_STMT@72..94\n-          LET_KW@72..75 \"let\"\n-          WHITESPACE@75..76 \" \"\n-          TUPLE_STRUCT_PAT@76..88\n-            PATH@76..77\n-              PATH_SEGMENT@76..77\n-                NAME_REF@76..77\n-                  IDENT@76..77 \"S\"\n-            L_PAREN@77..78 \"(\"\n-            PLACEHOLDER_PAT@78..79\n-              UNDERSCORE@78..79 \"_\"\n-            COMMA@79..80 \",\"\n-            WHITESPACE@80..81 \" \"\n-            DOT_DOT_PAT@81..83\n-              DOT2@81..83 \"..\"\n-            WHITESPACE@83..84 \" \"\n-            COMMA@84..85 \",\"\n-            WHITESPACE@85..86 \" \"\n-            BIND_PAT@86..87\n-              NAME@86..87\n-                IDENT@86..87 \"x\"\n-            R_PAREN@87..88 \")\"\n-          WHITESPACE@88..89 \" \"\n-          EQ@89..90 \"=\"\n-          WHITESPACE@90..91 \" \"\n-          TUPLE_EXPR@91..93\n-            L_PAREN@91..92 \"(\"\n-            R_PAREN@92..93 \")\"\n-          SEMICOLON@93..94 \";\"\n-        WHITESPACE@94..95 \"\\n\"\n-        R_CURLY@95..96 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..28\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        TUPLE_STRUCT_PAT@19..22\n+          PATH@19..20\n+            PATH_SEGMENT@19..20\n+              NAME_REF@19..20\n+                IDENT@19..20 \"S\"\n+          L_PAREN@20..21 \"(\"\n+          R_PAREN@21..22 \")\"\n+        WHITESPACE@22..23 \" \"\n+        EQ@23..24 \"=\"\n+        WHITESPACE@24..25 \" \"\n+        TUPLE_EXPR@25..27\n+          L_PAREN@25..26 \"(\"\n+          R_PAREN@26..27 \")\"\n+        SEMICOLON@27..28 \";\"\n+      WHITESPACE@28..33 \"\\n    \"\n+      LET_STMT@33..47\n+        LET_KW@33..36 \"let\"\n+        WHITESPACE@36..37 \" \"\n+        TUPLE_STRUCT_PAT@37..41\n+          PATH@37..38\n+            PATH_SEGMENT@37..38\n+              NAME_REF@37..38\n+                IDENT@37..38 \"S\"\n+          L_PAREN@38..39 \"(\"\n+          PLACEHOLDER_PAT@39..40\n+            UNDERSCORE@39..40 \"_\"\n+          R_PAREN@40..41 \")\"\n+        WHITESPACE@41..42 \" \"\n+        EQ@42..43 \"=\"\n+        WHITESPACE@43..44 \" \"\n+        TUPLE_EXPR@44..46\n+          L_PAREN@44..45 \"(\"\n+          R_PAREN@45..46 \")\"\n+        SEMICOLON@46..47 \";\"\n+      WHITESPACE@47..52 \"\\n    \"\n+      LET_STMT@52..67\n+        LET_KW@52..55 \"let\"\n+        WHITESPACE@55..56 \" \"\n+        TUPLE_STRUCT_PAT@56..61\n+          PATH@56..57\n+            PATH_SEGMENT@56..57\n+              NAME_REF@56..57\n+                IDENT@56..57 \"S\"\n+          L_PAREN@57..58 \"(\"\n+          PLACEHOLDER_PAT@58..59\n+            UNDERSCORE@58..59 \"_\"\n+          COMMA@59..60 \",\"\n+          R_PAREN@60..61 \")\"\n+        WHITESPACE@61..62 \" \"\n+        EQ@62..63 \"=\"\n+        WHITESPACE@63..64 \" \"\n+        TUPLE_EXPR@64..66\n+          L_PAREN@64..65 \"(\"\n+          R_PAREN@65..66 \")\"\n+        SEMICOLON@66..67 \";\"\n+      WHITESPACE@67..72 \"\\n    \"\n+      LET_STMT@72..94\n+        LET_KW@72..75 \"let\"\n+        WHITESPACE@75..76 \" \"\n+        TUPLE_STRUCT_PAT@76..88\n+          PATH@76..77\n+            PATH_SEGMENT@76..77\n+              NAME_REF@76..77\n+                IDENT@76..77 \"S\"\n+          L_PAREN@77..78 \"(\"\n+          PLACEHOLDER_PAT@78..79\n+            UNDERSCORE@78..79 \"_\"\n+          COMMA@79..80 \",\"\n+          WHITESPACE@80..81 \" \"\n+          DOT_DOT_PAT@81..83\n+            DOT2@81..83 \"..\"\n+          WHITESPACE@83..84 \" \"\n+          COMMA@84..85 \",\"\n+          WHITESPACE@85..86 \" \"\n+          BIND_PAT@86..87\n+            NAME@86..87\n+              IDENT@86..87 \"x\"\n+          R_PAREN@87..88 \")\"\n+        WHITESPACE@88..89 \" \"\n+        EQ@89..90 \"=\"\n+        WHITESPACE@90..91 \" \"\n+        TUPLE_EXPR@91..93\n+          L_PAREN@91..92 \"(\"\n+          R_PAREN@92..93 \")\"\n+        SEMICOLON@93..94 \";\"\n+      WHITESPACE@94..95 \"\\n\"\n+      R_CURLY@95..96 \"}\"\n   WHITESPACE@96..97 \"\\n\""}, {"sha": "b824c10a8c7c214b553c925b8751d41020984500", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0027_ref_pat.rast", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,42 +9,41 @@ SOURCE_FILE@0..52\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..51\n-      BLOCK@10..51\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..28\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          REF_PAT@20..22\n-            AMP@20..21 \"&\"\n-            BIND_PAT@21..22\n-              NAME@21..22\n-                IDENT@21..22 \"a\"\n-          WHITESPACE@22..23 \" \"\n-          EQ@23..24 \"=\"\n-          WHITESPACE@24..25 \" \"\n-          TUPLE_EXPR@25..27\n-            L_PAREN@25..26 \"(\"\n-            R_PAREN@26..27 \")\"\n-          SEMICOLON@27..28 \";\"\n-        WHITESPACE@28..33 \"\\n    \"\n-        LET_STMT@33..49\n-          LET_KW@33..36 \"let\"\n-          WHITESPACE@36..37 \" \"\n-          REF_PAT@37..43\n-            AMP@37..38 \"&\"\n-            MUT_KW@38..41 \"mut\"\n-            WHITESPACE@41..42 \" \"\n-            BIND_PAT@42..43\n-              NAME@42..43\n-                IDENT@42..43 \"b\"\n-          WHITESPACE@43..44 \" \"\n-          EQ@44..45 \"=\"\n-          WHITESPACE@45..46 \" \"\n-          TUPLE_EXPR@46..48\n-            L_PAREN@46..47 \"(\"\n-            R_PAREN@47..48 \")\"\n-          SEMICOLON@48..49 \";\"\n-        WHITESPACE@49..50 \"\\n\"\n-        R_CURLY@50..51 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..28\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        REF_PAT@20..22\n+          AMP@20..21 \"&\"\n+          BIND_PAT@21..22\n+            NAME@21..22\n+              IDENT@21..22 \"a\"\n+        WHITESPACE@22..23 \" \"\n+        EQ@23..24 \"=\"\n+        WHITESPACE@24..25 \" \"\n+        TUPLE_EXPR@25..27\n+          L_PAREN@25..26 \"(\"\n+          R_PAREN@26..27 \")\"\n+        SEMICOLON@27..28 \";\"\n+      WHITESPACE@28..33 \"\\n    \"\n+      LET_STMT@33..49\n+        LET_KW@33..36 \"let\"\n+        WHITESPACE@36..37 \" \"\n+        REF_PAT@37..43\n+          AMP@37..38 \"&\"\n+          MUT_KW@38..41 \"mut\"\n+          WHITESPACE@41..42 \" \"\n+          BIND_PAT@42..43\n+            NAME@42..43\n+              IDENT@42..43 \"b\"\n+        WHITESPACE@43..44 \" \"\n+        EQ@44..45 \"=\"\n+        WHITESPACE@45..46 \" \"\n+        TUPLE_EXPR@46..48\n+          L_PAREN@46..47 \"(\"\n+          R_PAREN@47..48 \")\"\n+        SEMICOLON@48..49 \";\"\n+      WHITESPACE@49..50 \"\\n\"\n+      R_CURLY@50..51 \"}\"\n   WHITESPACE@51..52 \"\\n\""}, {"sha": "fabb09937fc09e333c944b95cb1f94eb4025c9cc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0029_cast_expr.rast", "status": "modified", "additions": 77, "deletions": 78, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,82 +9,81 @@ SOURCE_FILE@0..89\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..88\n-      BLOCK@9..88\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..25\n-          CAST_EXPR@15..24\n-            LITERAL@15..17\n-              INT_NUMBER@15..17 \"82\"\n-            WHITESPACE@17..18 \" \"\n-            AS_KW@18..20 \"as\"\n-            WHITESPACE@20..21 \" \"\n-            PATH_TYPE@21..24\n-              PATH@21..24\n-                PATH_SEGMENT@21..24\n-                  NAME_REF@21..24\n-                    IDENT@21..24 \"i32\"\n-          SEMICOLON@24..25 \";\"\n-        WHITESPACE@25..30 \"\\n    \"\n-        EXPR_STMT@30..43\n-          BIN_EXPR@30..42\n-            CAST_EXPR@30..38\n-              LITERAL@30..32\n-                INT_NUMBER@30..32 \"81\"\n-              WHITESPACE@32..33 \" \"\n-              AS_KW@33..35 \"as\"\n-              WHITESPACE@35..36 \" \"\n-              PATH_TYPE@36..38\n-                PATH@36..38\n-                  PATH_SEGMENT@36..38\n-                    NAME_REF@36..38\n-                      IDENT@36..38 \"i8\"\n-            WHITESPACE@38..39 \" \"\n-            PLUS@39..40 \"+\"\n-            WHITESPACE@40..41 \" \"\n-            LITERAL@41..42\n-              INT_NUMBER@41..42 \"1\"\n-          SEMICOLON@42..43 \";\"\n-        WHITESPACE@43..48 \"\\n    \"\n-        EXPR_STMT@48..62\n-          BIN_EXPR@48..61\n-            CAST_EXPR@48..57\n-              LITERAL@48..50\n-                INT_NUMBER@48..50 \"79\"\n-              WHITESPACE@50..51 \" \"\n-              AS_KW@51..53 \"as\"\n-              WHITESPACE@53..54 \" \"\n-              PATH_TYPE@54..57\n-                PATH@54..57\n-                  PATH_SEGMENT@54..57\n-                    NAME_REF@54..57\n-                      IDENT@54..57 \"i16\"\n-            WHITESPACE@57..58 \" \"\n-            MINUS@58..59 \"-\"\n-            WHITESPACE@59..60 \" \"\n-            LITERAL@60..61\n-              INT_NUMBER@60..61 \"1\"\n-          SEMICOLON@61..62 \";\"\n-        WHITESPACE@62..67 \"\\n    \"\n-        EXPR_STMT@67..86\n-          BIN_EXPR@67..85\n-            CAST_EXPR@67..77\n-              LITERAL@67..71\n-                INT_NUMBER@67..71 \"0x36\"\n-              WHITESPACE@71..72 \" \"\n-              AS_KW@72..74 \"as\"\n-              WHITESPACE@74..75 \" \"\n-              PATH_TYPE@75..77\n-                PATH@75..77\n-                  PATH_SEGMENT@75..77\n-                    NAME_REF@75..77\n-                      IDENT@75..77 \"u8\"\n-            WHITESPACE@77..78 \" \"\n-            LTEQ@78..80 \"<=\"\n-            WHITESPACE@80..81 \" \"\n-            LITERAL@81..85\n-              INT_NUMBER@81..85 \"0x37\"\n-          SEMICOLON@85..86 \";\"\n-        WHITESPACE@86..87 \"\\n\"\n-        R_CURLY@87..88 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..25\n+        CAST_EXPR@15..24\n+          LITERAL@15..17\n+            INT_NUMBER@15..17 \"82\"\n+          WHITESPACE@17..18 \" \"\n+          AS_KW@18..20 \"as\"\n+          WHITESPACE@20..21 \" \"\n+          PATH_TYPE@21..24\n+            PATH@21..24\n+              PATH_SEGMENT@21..24\n+                NAME_REF@21..24\n+                  IDENT@21..24 \"i32\"\n+        SEMICOLON@24..25 \";\"\n+      WHITESPACE@25..30 \"\\n    \"\n+      EXPR_STMT@30..43\n+        BIN_EXPR@30..42\n+          CAST_EXPR@30..38\n+            LITERAL@30..32\n+              INT_NUMBER@30..32 \"81\"\n+            WHITESPACE@32..33 \" \"\n+            AS_KW@33..35 \"as\"\n+            WHITESPACE@35..36 \" \"\n+            PATH_TYPE@36..38\n+              PATH@36..38\n+                PATH_SEGMENT@36..38\n+                  NAME_REF@36..38\n+                    IDENT@36..38 \"i8\"\n+          WHITESPACE@38..39 \" \"\n+          PLUS@39..40 \"+\"\n+          WHITESPACE@40..41 \" \"\n+          LITERAL@41..42\n+            INT_NUMBER@41..42 \"1\"\n+        SEMICOLON@42..43 \";\"\n+      WHITESPACE@43..48 \"\\n    \"\n+      EXPR_STMT@48..62\n+        BIN_EXPR@48..61\n+          CAST_EXPR@48..57\n+            LITERAL@48..50\n+              INT_NUMBER@48..50 \"79\"\n+            WHITESPACE@50..51 \" \"\n+            AS_KW@51..53 \"as\"\n+            WHITESPACE@53..54 \" \"\n+            PATH_TYPE@54..57\n+              PATH@54..57\n+                PATH_SEGMENT@54..57\n+                  NAME_REF@54..57\n+                    IDENT@54..57 \"i16\"\n+          WHITESPACE@57..58 \" \"\n+          MINUS@58..59 \"-\"\n+          WHITESPACE@59..60 \" \"\n+          LITERAL@60..61\n+            INT_NUMBER@60..61 \"1\"\n+        SEMICOLON@61..62 \";\"\n+      WHITESPACE@62..67 \"\\n    \"\n+      EXPR_STMT@67..86\n+        BIN_EXPR@67..85\n+          CAST_EXPR@67..77\n+            LITERAL@67..71\n+              INT_NUMBER@67..71 \"0x36\"\n+            WHITESPACE@71..72 \" \"\n+            AS_KW@72..74 \"as\"\n+            WHITESPACE@74..75 \" \"\n+            PATH_TYPE@75..77\n+              PATH@75..77\n+                PATH_SEGMENT@75..77\n+                  NAME_REF@75..77\n+                    IDENT@75..77 \"u8\"\n+          WHITESPACE@77..78 \" \"\n+          LTEQ@78..80 \"<=\"\n+          WHITESPACE@80..81 \" \"\n+          LITERAL@81..85\n+            INT_NUMBER@81..85 \"0x37\"\n+        SEMICOLON@85..86 \";\"\n+      WHITESPACE@86..87 \"\\n\"\n+      R_CURLY@87..88 \"}\"\n   WHITESPACE@88..89 \"\\n\""}, {"sha": "3aed267322fc47c9f05af1e1abfc8e84093c49fc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0030_cond.rast", "status": "modified", "additions": 179, "deletions": 186, "changes": 365, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,39 +9,37 @@ SOURCE_FILE@0..197\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..37\n-      BLOCK@9..37\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \" \"\n-        IF_EXPR@11..35\n-          IF_KW@11..13 \"if\"\n-          WHITESPACE@13..14 \" \"\n-          CONDITION@14..32\n-            LET_KW@14..17 \"let\"\n-            WHITESPACE@17..18 \" \"\n-            TUPLE_STRUCT_PAT@18..25\n-              PATH@18..22\n-                PATH_SEGMENT@18..22\n-                  NAME_REF@18..22\n-                    IDENT@18..22 \"Some\"\n-              L_PAREN@22..23 \"(\"\n-              PLACEHOLDER_PAT@23..24\n-                UNDERSCORE@23..24 \"_\"\n-              R_PAREN@24..25 \")\"\n-            WHITESPACE@25..26 \" \"\n-            EQ@26..27 \"=\"\n-            WHITESPACE@27..28 \" \"\n-            PATH_EXPR@28..32\n-              PATH@28..32\n-                PATH_SEGMENT@28..32\n-                  NAME_REF@28..32\n-                    IDENT@28..32 \"None\"\n-          WHITESPACE@32..33 \" \"\n-          BLOCK_EXPR@33..35\n-            BLOCK@33..35\n-              L_CURLY@33..34 \"{\"\n-              R_CURLY@34..35 \"}\"\n-        WHITESPACE@35..36 \" \"\n-        R_CURLY@36..37 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      IF_EXPR@11..35\n+        IF_KW@11..13 \"if\"\n+        WHITESPACE@13..14 \" \"\n+        CONDITION@14..32\n+          LET_KW@14..17 \"let\"\n+          WHITESPACE@17..18 \" \"\n+          TUPLE_STRUCT_PAT@18..25\n+            PATH@18..22\n+              PATH_SEGMENT@18..22\n+                NAME_REF@18..22\n+                  IDENT@18..22 \"Some\"\n+            L_PAREN@22..23 \"(\"\n+            PLACEHOLDER_PAT@23..24\n+              UNDERSCORE@23..24 \"_\"\n+            R_PAREN@24..25 \")\"\n+          WHITESPACE@25..26 \" \"\n+          EQ@26..27 \"=\"\n+          WHITESPACE@27..28 \" \"\n+          PATH_EXPR@28..32\n+            PATH@28..32\n+              PATH_SEGMENT@28..32\n+                NAME_REF@28..32\n+                  IDENT@28..32 \"None\"\n+        WHITESPACE@32..33 \" \"\n+        BLOCK_EXPR@33..35\n+          L_CURLY@33..34 \"{\"\n+          R_CURLY@34..35 \"}\"\n+      WHITESPACE@35..36 \" \"\n+      R_CURLY@36..37 \"}\"\n   WHITESPACE@37..38 \"\\n\"\n   FN_DEF@38..196\n     FN_KW@38..40 \"fn\"\n@@ -53,157 +51,152 @@ SOURCE_FILE@0..197\n       R_PAREN@45..46 \")\"\n     WHITESPACE@46..47 \" \"\n     BLOCK_EXPR@47..196\n-      BLOCK@47..196\n-        L_CURLY@47..48 \"{\"\n-        WHITESPACE@48..53 \"\\n    \"\n-        EXPR_STMT@53..87\n-          IF_EXPR@53..87\n-            IF_KW@53..55 \"if\"\n-            WHITESPACE@55..56 \" \"\n-            CONDITION@56..84\n-              LET_KW@56..59 \"let\"\n-              WHITESPACE@59..60 \" \"\n-              OR_PAT@60..77\n-                TUPLE_STRUCT_PAT@60..67\n-                  PATH@60..64\n-                    PATH_SEGMENT@60..64\n-                      NAME_REF@60..64\n-                        IDENT@60..64 \"Some\"\n-                  L_PAREN@64..65 \"(\"\n-                  PLACEHOLDER_PAT@65..66\n-                    UNDERSCORE@65..66 \"_\"\n-                  R_PAREN@66..67 \")\"\n-                WHITESPACE@67..68 \" \"\n-                PIPE@68..69 \"|\"\n-                WHITESPACE@69..70 \" \"\n-                TUPLE_STRUCT_PAT@70..77\n-                  PATH@70..74\n-                    PATH_SEGMENT@70..74\n-                      NAME_REF@70..74\n-                        IDENT@70..74 \"Some\"\n-                  L_PAREN@74..75 \"(\"\n-                  PLACEHOLDER_PAT@75..76\n-                    UNDERSCORE@75..76 \"_\"\n-                  R_PAREN@76..77 \")\"\n-              WHITESPACE@77..78 \" \"\n-              EQ@78..79 \"=\"\n-              WHITESPACE@79..80 \" \"\n-              PATH_EXPR@80..84\n-                PATH@80..84\n-                  PATH_SEGMENT@80..84\n-                    NAME_REF@80..84\n-                      IDENT@80..84 \"None\"\n-            WHITESPACE@84..85 \" \"\n-            BLOCK_EXPR@85..87\n-              BLOCK@85..87\n-                L_CURLY@85..86 \"{\"\n-                R_CURLY@86..87 \"}\"\n-        WHITESPACE@87..92 \"\\n    \"\n-        EXPR_STMT@92..118\n-          IF_EXPR@92..118\n-            IF_KW@92..94 \"if\"\n-            WHITESPACE@94..95 \" \"\n-            CONDITION@95..115\n-              LET_KW@95..98 \"let\"\n-              WHITESPACE@98..99 \" \"\n-              PIPE@99..100 \"|\"\n-              WHITESPACE@100..101 \" \"\n-              TUPLE_STRUCT_PAT@101..108\n-                PATH@101..105\n-                  PATH_SEGMENT@101..105\n-                    NAME_REF@101..105\n-                      IDENT@101..105 \"Some\"\n-                L_PAREN@105..106 \"(\"\n-                PLACEHOLDER_PAT@106..107\n-                  UNDERSCORE@106..107 \"_\"\n-                R_PAREN@107..108 \")\"\n-              WHITESPACE@108..109 \" \"\n-              EQ@109..110 \"=\"\n-              WHITESPACE@110..111 \" \"\n-              PATH_EXPR@111..115\n-                PATH@111..115\n-                  PATH_SEGMENT@111..115\n-                    NAME_REF@111..115\n-                      IDENT@111..115 \"None\"\n-            WHITESPACE@115..116 \" \"\n-            BLOCK_EXPR@116..118\n-              BLOCK@116..118\n-                L_CURLY@116..117 \"{\"\n-                R_CURLY@117..118 \"}\"\n-        WHITESPACE@118..123 \"\\n    \"\n-        EXPR_STMT@123..160\n-          WHILE_EXPR@123..160\n-            WHILE_KW@123..128 \"while\"\n-            WHITESPACE@128..129 \" \"\n-            CONDITION@129..157\n-              LET_KW@129..132 \"let\"\n-              WHITESPACE@132..133 \" \"\n-              OR_PAT@133..150\n-                TUPLE_STRUCT_PAT@133..140\n-                  PATH@133..137\n-                    PATH_SEGMENT@133..137\n-                      NAME_REF@133..137\n-                        IDENT@133..137 \"Some\"\n-                  L_PAREN@137..138 \"(\"\n-                  PLACEHOLDER_PAT@138..139\n-                    UNDERSCORE@138..139 \"_\"\n-                  R_PAREN@139..140 \")\"\n-                WHITESPACE@140..141 \" \"\n-                PIPE@141..142 \"|\"\n-                WHITESPACE@142..143 \" \"\n-                TUPLE_STRUCT_PAT@143..150\n-                  PATH@143..147\n-                    PATH_SEGMENT@143..147\n-                      NAME_REF@143..147\n-                        IDENT@143..147 \"Some\"\n-                  L_PAREN@147..148 \"(\"\n-                  PLACEHOLDER_PAT@148..149\n-                    UNDERSCORE@148..149 \"_\"\n-                  R_PAREN@149..150 \")\"\n-              WHITESPACE@150..151 \" \"\n-              EQ@151..152 \"=\"\n-              WHITESPACE@152..153 \" \"\n-              PATH_EXPR@153..157\n-                PATH@153..157\n-                  PATH_SEGMENT@153..157\n-                    NAME_REF@153..157\n-                      IDENT@153..157 \"None\"\n-            WHITESPACE@157..158 \" \"\n-            BLOCK_EXPR@158..160\n-              BLOCK@158..160\n-                L_CURLY@158..159 \"{\"\n-                R_CURLY@159..160 \"}\"\n-        WHITESPACE@160..165 \"\\n    \"\n-        WHILE_EXPR@165..194\n-          WHILE_KW@165..170 \"while\"\n-          WHITESPACE@170..171 \" \"\n-          CONDITION@171..191\n-            LET_KW@171..174 \"let\"\n-            WHITESPACE@174..175 \" \"\n-            PIPE@175..176 \"|\"\n-            WHITESPACE@176..177 \" \"\n-            TUPLE_STRUCT_PAT@177..184\n-              PATH@177..181\n-                PATH_SEGMENT@177..181\n-                  NAME_REF@177..181\n-                    IDENT@177..181 \"Some\"\n-              L_PAREN@181..182 \"(\"\n-              PLACEHOLDER_PAT@182..183\n-                UNDERSCORE@182..183 \"_\"\n-              R_PAREN@183..184 \")\"\n-            WHITESPACE@184..185 \" \"\n-            EQ@185..186 \"=\"\n-            WHITESPACE@186..187 \" \"\n-            PATH_EXPR@187..191\n-              PATH@187..191\n-                PATH_SEGMENT@187..191\n-                  NAME_REF@187..191\n-                    IDENT@187..191 \"None\"\n-          WHITESPACE@191..192 \" \"\n-          BLOCK_EXPR@192..194\n-            BLOCK@192..194\n-              L_CURLY@192..193 \"{\"\n-              R_CURLY@193..194 \"}\"\n-        WHITESPACE@194..195 \"\\n\"\n-        R_CURLY@195..196 \"}\"\n+      L_CURLY@47..48 \"{\"\n+      WHITESPACE@48..53 \"\\n    \"\n+      EXPR_STMT@53..87\n+        IF_EXPR@53..87\n+          IF_KW@53..55 \"if\"\n+          WHITESPACE@55..56 \" \"\n+          CONDITION@56..84\n+            LET_KW@56..59 \"let\"\n+            WHITESPACE@59..60 \" \"\n+            OR_PAT@60..77\n+              TUPLE_STRUCT_PAT@60..67\n+                PATH@60..64\n+                  PATH_SEGMENT@60..64\n+                    NAME_REF@60..64\n+                      IDENT@60..64 \"Some\"\n+                L_PAREN@64..65 \"(\"\n+                PLACEHOLDER_PAT@65..66\n+                  UNDERSCORE@65..66 \"_\"\n+                R_PAREN@66..67 \")\"\n+              WHITESPACE@67..68 \" \"\n+              PIPE@68..69 \"|\"\n+              WHITESPACE@69..70 \" \"\n+              TUPLE_STRUCT_PAT@70..77\n+                PATH@70..74\n+                  PATH_SEGMENT@70..74\n+                    NAME_REF@70..74\n+                      IDENT@70..74 \"Some\"\n+                L_PAREN@74..75 \"(\"\n+                PLACEHOLDER_PAT@75..76\n+                  UNDERSCORE@75..76 \"_\"\n+                R_PAREN@76..77 \")\"\n+            WHITESPACE@77..78 \" \"\n+            EQ@78..79 \"=\"\n+            WHITESPACE@79..80 \" \"\n+            PATH_EXPR@80..84\n+              PATH@80..84\n+                PATH_SEGMENT@80..84\n+                  NAME_REF@80..84\n+                    IDENT@80..84 \"None\"\n+          WHITESPACE@84..85 \" \"\n+          BLOCK_EXPR@85..87\n+            L_CURLY@85..86 \"{\"\n+            R_CURLY@86..87 \"}\"\n+      WHITESPACE@87..92 \"\\n    \"\n+      EXPR_STMT@92..118\n+        IF_EXPR@92..118\n+          IF_KW@92..94 \"if\"\n+          WHITESPACE@94..95 \" \"\n+          CONDITION@95..115\n+            LET_KW@95..98 \"let\"\n+            WHITESPACE@98..99 \" \"\n+            PIPE@99..100 \"|\"\n+            WHITESPACE@100..101 \" \"\n+            TUPLE_STRUCT_PAT@101..108\n+              PATH@101..105\n+                PATH_SEGMENT@101..105\n+                  NAME_REF@101..105\n+                    IDENT@101..105 \"Some\"\n+              L_PAREN@105..106 \"(\"\n+              PLACEHOLDER_PAT@106..107\n+                UNDERSCORE@106..107 \"_\"\n+              R_PAREN@107..108 \")\"\n+            WHITESPACE@108..109 \" \"\n+            EQ@109..110 \"=\"\n+            WHITESPACE@110..111 \" \"\n+            PATH_EXPR@111..115\n+              PATH@111..115\n+                PATH_SEGMENT@111..115\n+                  NAME_REF@111..115\n+                    IDENT@111..115 \"None\"\n+          WHITESPACE@115..116 \" \"\n+          BLOCK_EXPR@116..118\n+            L_CURLY@116..117 \"{\"\n+            R_CURLY@117..118 \"}\"\n+      WHITESPACE@118..123 \"\\n    \"\n+      EXPR_STMT@123..160\n+        WHILE_EXPR@123..160\n+          WHILE_KW@123..128 \"while\"\n+          WHITESPACE@128..129 \" \"\n+          CONDITION@129..157\n+            LET_KW@129..132 \"let\"\n+            WHITESPACE@132..133 \" \"\n+            OR_PAT@133..150\n+              TUPLE_STRUCT_PAT@133..140\n+                PATH@133..137\n+                  PATH_SEGMENT@133..137\n+                    NAME_REF@133..137\n+                      IDENT@133..137 \"Some\"\n+                L_PAREN@137..138 \"(\"\n+                PLACEHOLDER_PAT@138..139\n+                  UNDERSCORE@138..139 \"_\"\n+                R_PAREN@139..140 \")\"\n+              WHITESPACE@140..141 \" \"\n+              PIPE@141..142 \"|\"\n+              WHITESPACE@142..143 \" \"\n+              TUPLE_STRUCT_PAT@143..150\n+                PATH@143..147\n+                  PATH_SEGMENT@143..147\n+                    NAME_REF@143..147\n+                      IDENT@143..147 \"Some\"\n+                L_PAREN@147..148 \"(\"\n+                PLACEHOLDER_PAT@148..149\n+                  UNDERSCORE@148..149 \"_\"\n+                R_PAREN@149..150 \")\"\n+            WHITESPACE@150..151 \" \"\n+            EQ@151..152 \"=\"\n+            WHITESPACE@152..153 \" \"\n+            PATH_EXPR@153..157\n+              PATH@153..157\n+                PATH_SEGMENT@153..157\n+                  NAME_REF@153..157\n+                    IDENT@153..157 \"None\"\n+          WHITESPACE@157..158 \" \"\n+          BLOCK_EXPR@158..160\n+            L_CURLY@158..159 \"{\"\n+            R_CURLY@159..160 \"}\"\n+      WHITESPACE@160..165 \"\\n    \"\n+      WHILE_EXPR@165..194\n+        WHILE_KW@165..170 \"while\"\n+        WHITESPACE@170..171 \" \"\n+        CONDITION@171..191\n+          LET_KW@171..174 \"let\"\n+          WHITESPACE@174..175 \" \"\n+          PIPE@175..176 \"|\"\n+          WHITESPACE@176..177 \" \"\n+          TUPLE_STRUCT_PAT@177..184\n+            PATH@177..181\n+              PATH_SEGMENT@177..181\n+                NAME_REF@177..181\n+                  IDENT@177..181 \"Some\"\n+            L_PAREN@181..182 \"(\"\n+            PLACEHOLDER_PAT@182..183\n+              UNDERSCORE@182..183 \"_\"\n+            R_PAREN@183..184 \")\"\n+          WHITESPACE@184..185 \" \"\n+          EQ@185..186 \"=\"\n+          WHITESPACE@186..187 \" \"\n+          PATH_EXPR@187..191\n+            PATH@187..191\n+              PATH_SEGMENT@187..191\n+                NAME_REF@187..191\n+                  IDENT@187..191 \"None\"\n+        WHITESPACE@191..192 \" \"\n+        BLOCK_EXPR@192..194\n+          L_CURLY@192..193 \"{\"\n+          R_CURLY@193..194 \"}\"\n+      WHITESPACE@194..195 \"\\n\"\n+      R_CURLY@195..196 \"}\"\n   WHITESPACE@196..197 \"\\n\""}, {"sha": "899b63aac38ec05a8f8c3494f34783d1128091f3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0031_while_expr.rast", "status": "modified", "additions": 72, "deletions": 77, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,81 +9,76 @@ SOURCE_FILE@0..93\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..92\n-      BLOCK@9..92\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..29\n-          WHILE_EXPR@15..28\n-            WHILE_KW@15..20 \"while\"\n-            WHITESPACE@20..21 \" \"\n-            CONDITION@21..25\n-              LITERAL@21..25\n-                TRUE_KW@21..25 \"true\"\n-            WHITESPACE@25..26 \" \"\n-            BLOCK_EXPR@26..28\n-              BLOCK@26..28\n-                L_CURLY@26..27 \"{\"\n-                R_CURLY@27..28 \"}\"\n-          SEMICOLON@28..29 \";\"\n-        WHITESPACE@29..34 \"\\n    \"\n-        EXPR_STMT@34..67\n-          WHILE_EXPR@34..66\n-            WHILE_KW@34..39 \"while\"\n-            WHITESPACE@39..40 \" \"\n-            CONDITION@40..63\n-              LET_KW@40..43 \"let\"\n-              WHITESPACE@43..44 \" \"\n-              TUPLE_STRUCT_PAT@44..51\n-                PATH@44..48\n-                  PATH_SEGMENT@44..48\n-                    NAME_REF@44..48\n-                      IDENT@44..48 \"Some\"\n-                L_PAREN@48..49 \"(\"\n-                BIND_PAT@49..50\n-                  NAME@49..50\n-                    IDENT@49..50 \"x\"\n-                R_PAREN@50..51 \")\"\n-              WHITESPACE@51..52 \" \"\n-              EQ@52..53 \"=\"\n-              WHITESPACE@53..54 \" \"\n-              METHOD_CALL_EXPR@54..63\n-                PATH_EXPR@54..56\n-                  PATH@54..56\n-                    PATH_SEGMENT@54..56\n-                      NAME_REF@54..56\n-                        IDENT@54..56 \"it\"\n-                DOT@56..57 \".\"\n-                NAME_REF@57..61\n-                  IDENT@57..61 \"next\"\n-                ARG_LIST@61..63\n-                  L_PAREN@61..62 \"(\"\n-                  R_PAREN@62..63 \")\"\n-            WHITESPACE@63..64 \" \"\n-            BLOCK_EXPR@64..66\n-              BLOCK@64..66\n-                L_CURLY@64..65 \"{\"\n-                R_CURLY@65..66 \"}\"\n-          SEMICOLON@66..67 \";\"\n-        WHITESPACE@67..72 \"\\n    \"\n-        EXPR_STMT@72..90\n-          WHILE_EXPR@72..89\n-            WHILE_KW@72..77 \"while\"\n-            WHITESPACE@77..78 \" \"\n-            CONDITION@78..86\n-              BLOCK_EXPR@78..86\n-                BLOCK@78..86\n-                  L_CURLY@78..79 \"{\"\n-                  WHITESPACE@79..80 \" \"\n-                  LITERAL@80..84\n-                    TRUE_KW@80..84 \"true\"\n-                  WHITESPACE@84..85 \" \"\n-                  R_CURLY@85..86 \"}\"\n-            WHITESPACE@86..87 \" \"\n-            BLOCK_EXPR@87..89\n-              BLOCK@87..89\n-                L_CURLY@87..88 \"{\"\n-                R_CURLY@88..89 \"}\"\n-          SEMICOLON@89..90 \";\"\n-        WHITESPACE@90..91 \"\\n\"\n-        R_CURLY@91..92 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..29\n+        WHILE_EXPR@15..28\n+          WHILE_KW@15..20 \"while\"\n+          WHITESPACE@20..21 \" \"\n+          CONDITION@21..25\n+            LITERAL@21..25\n+              TRUE_KW@21..25 \"true\"\n+          WHITESPACE@25..26 \" \"\n+          BLOCK_EXPR@26..28\n+            L_CURLY@26..27 \"{\"\n+            R_CURLY@27..28 \"}\"\n+        SEMICOLON@28..29 \";\"\n+      WHITESPACE@29..34 \"\\n    \"\n+      EXPR_STMT@34..67\n+        WHILE_EXPR@34..66\n+          WHILE_KW@34..39 \"while\"\n+          WHITESPACE@39..40 \" \"\n+          CONDITION@40..63\n+            LET_KW@40..43 \"let\"\n+            WHITESPACE@43..44 \" \"\n+            TUPLE_STRUCT_PAT@44..51\n+              PATH@44..48\n+                PATH_SEGMENT@44..48\n+                  NAME_REF@44..48\n+                    IDENT@44..48 \"Some\"\n+              L_PAREN@48..49 \"(\"\n+              BIND_PAT@49..50\n+                NAME@49..50\n+                  IDENT@49..50 \"x\"\n+              R_PAREN@50..51 \")\"\n+            WHITESPACE@51..52 \" \"\n+            EQ@52..53 \"=\"\n+            WHITESPACE@53..54 \" \"\n+            METHOD_CALL_EXPR@54..63\n+              PATH_EXPR@54..56\n+                PATH@54..56\n+                  PATH_SEGMENT@54..56\n+                    NAME_REF@54..56\n+                      IDENT@54..56 \"it\"\n+              DOT@56..57 \".\"\n+              NAME_REF@57..61\n+                IDENT@57..61 \"next\"\n+              ARG_LIST@61..63\n+                L_PAREN@61..62 \"(\"\n+                R_PAREN@62..63 \")\"\n+          WHITESPACE@63..64 \" \"\n+          BLOCK_EXPR@64..66\n+            L_CURLY@64..65 \"{\"\n+            R_CURLY@65..66 \"}\"\n+        SEMICOLON@66..67 \";\"\n+      WHITESPACE@67..72 \"\\n    \"\n+      EXPR_STMT@72..90\n+        WHILE_EXPR@72..89\n+          WHILE_KW@72..77 \"while\"\n+          WHITESPACE@77..78 \" \"\n+          CONDITION@78..86\n+            BLOCK_EXPR@78..86\n+              L_CURLY@78..79 \"{\"\n+              WHITESPACE@79..80 \" \"\n+              LITERAL@80..84\n+                TRUE_KW@80..84 \"true\"\n+              WHITESPACE@84..85 \" \"\n+              R_CURLY@85..86 \"}\"\n+          WHITESPACE@86..87 \" \"\n+          BLOCK_EXPR@87..89\n+            L_CURLY@87..88 \"{\"\n+            R_CURLY@88..89 \"}\"\n+        SEMICOLON@89..90 \";\"\n+      WHITESPACE@90..91 \"\\n\"\n+      R_CURLY@91..92 \"}\"\n   WHITESPACE@92..93 \"\\n\""}, {"sha": "e064aafaf25ae264cffdab21c445d96362383a21", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0034_break_expr.rast", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,47 +9,45 @@ SOURCE_FILE@0..102\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..101\n-      BLOCK@9..101\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LOOP_EXPR@15..99\n-          LOOP_KW@15..19 \"loop\"\n-          WHITESPACE@19..20 \" \"\n-          BLOCK_EXPR@20..99\n-            BLOCK@20..99\n-              L_CURLY@20..21 \"{\"\n-              WHITESPACE@21..30 \"\\n        \"\n-              EXPR_STMT@30..36\n-                BREAK_EXPR@30..35\n-                  BREAK_KW@30..35 \"break\"\n-                SEMICOLON@35..36 \";\"\n-              WHITESPACE@36..45 \"\\n        \"\n-              EXPR_STMT@45..54\n-                BREAK_EXPR@45..53\n-                  BREAK_KW@45..50 \"break\"\n-                  WHITESPACE@50..51 \" \"\n-                  LIFETIME@51..53 \"\\'l\"\n-                SEMICOLON@53..54 \";\"\n-              WHITESPACE@54..63 \"\\n        \"\n-              EXPR_STMT@63..72\n-                BREAK_EXPR@63..71\n-                  BREAK_KW@63..68 \"break\"\n-                  WHITESPACE@68..69 \" \"\n-                  LITERAL@69..71\n-                    INT_NUMBER@69..71 \"92\"\n-                SEMICOLON@71..72 \";\"\n-              WHITESPACE@72..81 \"\\n        \"\n-              EXPR_STMT@81..93\n-                BREAK_EXPR@81..92\n-                  BREAK_KW@81..86 \"break\"\n-                  WHITESPACE@86..87 \" \"\n-                  LIFETIME@87..89 \"\\'l\"\n-                  WHITESPACE@89..90 \" \"\n-                  LITERAL@90..92\n-                    INT_NUMBER@90..92 \"92\"\n-                SEMICOLON@92..93 \";\"\n-              WHITESPACE@93..98 \"\\n    \"\n-              R_CURLY@98..99 \"}\"\n-        WHITESPACE@99..100 \"\\n\"\n-        R_CURLY@100..101 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LOOP_EXPR@15..99\n+        LOOP_KW@15..19 \"loop\"\n+        WHITESPACE@19..20 \" \"\n+        BLOCK_EXPR@20..99\n+          L_CURLY@20..21 \"{\"\n+          WHITESPACE@21..30 \"\\n        \"\n+          EXPR_STMT@30..36\n+            BREAK_EXPR@30..35\n+              BREAK_KW@30..35 \"break\"\n+            SEMICOLON@35..36 \";\"\n+          WHITESPACE@36..45 \"\\n        \"\n+          EXPR_STMT@45..54\n+            BREAK_EXPR@45..53\n+              BREAK_KW@45..50 \"break\"\n+              WHITESPACE@50..51 \" \"\n+              LIFETIME@51..53 \"\\'l\"\n+            SEMICOLON@53..54 \";\"\n+          WHITESPACE@54..63 \"\\n        \"\n+          EXPR_STMT@63..72\n+            BREAK_EXPR@63..71\n+              BREAK_KW@63..68 \"break\"\n+              WHITESPACE@68..69 \" \"\n+              LITERAL@69..71\n+                INT_NUMBER@69..71 \"92\"\n+            SEMICOLON@71..72 \";\"\n+          WHITESPACE@72..81 \"\\n        \"\n+          EXPR_STMT@81..93\n+            BREAK_EXPR@81..92\n+              BREAK_KW@81..86 \"break\"\n+              WHITESPACE@86..87 \" \"\n+              LIFETIME@87..89 \"\\'l\"\n+              WHITESPACE@89..90 \" \"\n+              LITERAL@90..92\n+                INT_NUMBER@90..92 \"92\"\n+            SEMICOLON@92..93 \";\"\n+          WHITESPACE@93..98 \"\\n    \"\n+          R_CURLY@98..99 \"}\"\n+      WHITESPACE@99..100 \"\\n\"\n+      R_CURLY@100..101 \"}\"\n   WHITESPACE@101..102 \"\\n\""}, {"sha": "cf582559319769b3ba12599063cecf29e7902f96", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0036_unsafe_extern_fn.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -16,7 +16,6 @@ SOURCE_FILE@0..30\n       R_PAREN@25..26 \")\"\n     WHITESPACE@26..27 \" \"\n     BLOCK_EXPR@27..29\n-      BLOCK@27..29\n-        L_CURLY@27..28 \"{\"\n-        R_CURLY@28..29 \"}\"\n+      L_CURLY@27..28 \"{\"\n+      R_CURLY@28..29 \"}\"\n   WHITESPACE@29..30 \"\\n\""}, {"sha": "fbd90bc0f7af8259e523eb230ac9c1224519b580", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0037_qual_paths.rast", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -42,38 +42,37 @@ SOURCE_FILE@0..71\n       R_PAREN@34..35 \")\"\n     WHITESPACE@35..36 \" \"\n     BLOCK_EXPR@36..70\n-      BLOCK@36..70\n-        L_CURLY@36..37 \"{\"\n-        WHITESPACE@37..38 \" \"\n-        EXPR_STMT@38..68\n-          CALL_EXPR@38..67\n-            PATH_EXPR@38..65\n-              PATH@38..65\n-                PATH@38..56\n-                  PATH_SEGMENT@38..56\n-                    L_ANGLE@38..39 \"<\"\n-                    PATH_TYPE@39..44\n-                      PATH@39..44\n-                        PATH_SEGMENT@39..44\n-                          NAME_REF@39..44\n-                            IDENT@39..44 \"usize\"\n-                    WHITESPACE@44..45 \" \"\n-                    AS_KW@45..47 \"as\"\n-                    WHITESPACE@47..48 \" \"\n-                    PATH_TYPE@48..55\n-                      PATH@48..55\n-                        PATH_SEGMENT@48..55\n-                          NAME_REF@48..55\n-                            IDENT@48..55 \"Default\"\n-                    R_ANGLE@55..56 \">\"\n-                COLON2@56..58 \"::\"\n-                PATH_SEGMENT@58..65\n-                  NAME_REF@58..65\n-                    IDENT@58..65 \"default\"\n-            ARG_LIST@65..67\n-              L_PAREN@65..66 \"(\"\n-              R_PAREN@66..67 \")\"\n-          SEMICOLON@67..68 \";\"\n-        WHITESPACE@68..69 \" \"\n-        R_CURLY@69..70 \"}\"\n+      L_CURLY@36..37 \"{\"\n+      WHITESPACE@37..38 \" \"\n+      EXPR_STMT@38..68\n+        CALL_EXPR@38..67\n+          PATH_EXPR@38..65\n+            PATH@38..65\n+              PATH@38..56\n+                PATH_SEGMENT@38..56\n+                  L_ANGLE@38..39 \"<\"\n+                  PATH_TYPE@39..44\n+                    PATH@39..44\n+                      PATH_SEGMENT@39..44\n+                        NAME_REF@39..44\n+                          IDENT@39..44 \"usize\"\n+                  WHITESPACE@44..45 \" \"\n+                  AS_KW@45..47 \"as\"\n+                  WHITESPACE@47..48 \" \"\n+                  PATH_TYPE@48..55\n+                    PATH@48..55\n+                      PATH_SEGMENT@48..55\n+                        NAME_REF@48..55\n+                          IDENT@48..55 \"Default\"\n+                  R_ANGLE@55..56 \">\"\n+              COLON2@56..58 \"::\"\n+              PATH_SEGMENT@58..65\n+                NAME_REF@58..65\n+                  IDENT@58..65 \"default\"\n+          ARG_LIST@65..67\n+            L_PAREN@65..66 \"(\"\n+            R_PAREN@66..67 \")\"\n+        SEMICOLON@67..68 \";\"\n+      WHITESPACE@68..69 \" \"\n+      R_CURLY@69..70 \"}\"\n   WHITESPACE@70..71 \"\\n\""}, {"sha": "a767f145db28de7bdb7e95572cf7b3ab3415c0a2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0038_full_range_expr.rast", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,21 +9,20 @@ SOURCE_FILE@0..21\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..20\n-      BLOCK@9..20\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \" \"\n-        EXPR_STMT@11..18\n-          INDEX_EXPR@11..17\n-            PATH_EXPR@11..13\n-              PATH@11..13\n-                PATH_SEGMENT@11..13\n-                  NAME_REF@11..13\n-                    IDENT@11..13 \"xs\"\n-            L_BRACK@13..14 \"[\"\n-            RANGE_EXPR@14..16\n-              DOT2@14..16 \"..\"\n-            R_BRACK@16..17 \"]\"\n-          SEMICOLON@17..18 \";\"\n-        WHITESPACE@18..19 \" \"\n-        R_CURLY@19..20 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      EXPR_STMT@11..18\n+        INDEX_EXPR@11..17\n+          PATH_EXPR@11..13\n+            PATH@11..13\n+              PATH_SEGMENT@11..13\n+                NAME_REF@11..13\n+                  IDENT@11..13 \"xs\"\n+          L_BRACK@13..14 \"[\"\n+          RANGE_EXPR@14..16\n+            DOT2@14..16 \"..\"\n+          R_BRACK@16..17 \"]\"\n+        SEMICOLON@17..18 \";\"\n+      WHITESPACE@18..19 \" \"\n+      R_CURLY@19..20 \"}\"\n   WHITESPACE@20..21 \"\\n\""}, {"sha": "e92ea2bf2379bbeb91917cf3603ec2383fdb0c0b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0039_type_arg.rast", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -32,13 +32,12 @@ SOURCE_FILE@0..46\n             WHITESPACE@27..28 \" \"\n             CONST_ARG@28..33\n               BLOCK_EXPR@28..33\n-                BLOCK@28..33\n-                  L_CURLY@28..29 \"{\"\n-                  WHITESPACE@29..30 \" \"\n-                  LITERAL@30..31\n-                    INT_NUMBER@30..31 \"2\"\n-                  WHITESPACE@31..32 \" \"\n-                  R_CURLY@32..33 \"}\"\n+                L_CURLY@28..29 \"{\"\n+                WHITESPACE@29..30 \" \"\n+                LITERAL@30..31\n+                  INT_NUMBER@30..31 \"2\"\n+                WHITESPACE@31..32 \" \"\n+                R_CURLY@32..33 \"}\"\n             COMMA@33..34 \",\"\n             WHITESPACE@34..35 \" \"\n             ASSOC_TYPE_ARG@35..43"}, {"sha": "aa582516a38181c9520bdd013720ce20b703506b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0040_crate_keyword_vis.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -12,10 +12,9 @@ SOURCE_FILE@0..71\n       R_PAREN@14..15 \")\"\n     WHITESPACE@15..16 \" \"\n     BLOCK_EXPR@16..19\n-      BLOCK@16..19\n-        L_CURLY@16..17 \"{\"\n-        WHITESPACE@17..18 \" \"\n-        R_CURLY@18..19 \"}\"\n+      L_CURLY@16..17 \"{\"\n+      WHITESPACE@17..18 \" \"\n+      R_CURLY@18..19 \"}\"\n   WHITESPACE@19..20 \"\\n\"\n   STRUCT_DEF@20..49\n     STRUCT_KW@20..26 \"struct\""}, {"sha": "0c1c6e8771cbccef24fe35cb39fd61b3e7f68f06", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0042_call_expr.rast", "status": "modified", "additions": 135, "deletions": 136, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,140 +9,139 @@ SOURCE_FILE@0..118\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..117\n-      BLOCK@9..117\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..27\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PLACEHOLDER_PAT@19..20\n-            UNDERSCORE@19..20 \"_\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          CALL_EXPR@23..26\n-            PATH_EXPR@23..24\n-              PATH@23..24\n-                PATH_SEGMENT@23..24\n-                  NAME_REF@23..24\n-                    IDENT@23..24 \"f\"\n-            ARG_LIST@24..26\n-              L_PAREN@24..25 \"(\"\n-              R_PAREN@25..26 \")\"\n-          SEMICOLON@26..27 \";\"\n-        WHITESPACE@27..32 \"\\n    \"\n-        LET_STMT@32..54\n-          LET_KW@32..35 \"let\"\n-          WHITESPACE@35..36 \" \"\n-          PLACEHOLDER_PAT@36..37\n-            UNDERSCORE@36..37 \"_\"\n-          WHITESPACE@37..38 \" \"\n-          EQ@38..39 \"=\"\n-          WHITESPACE@39..40 \" \"\n-          CALL_EXPR@40..53\n-            CALL_EXPR@40..46\n-              CALL_EXPR@40..43\n-                PATH_EXPR@40..41\n-                  PATH@40..41\n-                    PATH_SEGMENT@40..41\n-                      NAME_REF@40..41\n-                        IDENT@40..41 \"f\"\n-                ARG_LIST@41..43\n-                  L_PAREN@41..42 \"(\"\n-                  R_PAREN@42..43 \")\"\n-              ARG_LIST@43..46\n-                L_PAREN@43..44 \"(\"\n-                LITERAL@44..45\n-                  INT_NUMBER@44..45 \"1\"\n-                R_PAREN@45..46 \")\"\n-            ARG_LIST@46..53\n-              L_PAREN@46..47 \"(\"\n-              LITERAL@47..48\n-                INT_NUMBER@47..48 \"1\"\n-              COMMA@48..49 \",\"\n-              WHITESPACE@49..50 \" \"\n-              LITERAL@50..51\n-                INT_NUMBER@50..51 \"2\"\n-              COMMA@51..52 \",\"\n-              R_PAREN@52..53 \")\"\n-          SEMICOLON@53..54 \";\"\n-        WHITESPACE@54..59 \"\\n    \"\n-        LET_STMT@59..84\n-          LET_KW@59..62 \"let\"\n-          WHITESPACE@62..63 \" \"\n-          PLACEHOLDER_PAT@63..64\n-            UNDERSCORE@63..64 \"_\"\n-          WHITESPACE@64..65 \" \"\n-          EQ@65..66 \"=\"\n-          WHITESPACE@66..67 \" \"\n-          CALL_EXPR@67..83\n-            PATH_EXPR@67..68\n-              PATH@67..68\n-                PATH_SEGMENT@67..68\n-                  NAME_REF@67..68\n-                    IDENT@67..68 \"f\"\n-            ARG_LIST@68..83\n-              L_PAREN@68..69 \"(\"\n-              CALL_EXPR@69..82\n-                PATH_EXPR@69..80\n-                  PATH@69..80\n-                    PATH@69..74\n-                      PATH_SEGMENT@69..74\n-                        L_ANGLE@69..70 \"<\"\n-                        PATH_TYPE@70..73\n-                          PATH@70..73\n-                            PATH_SEGMENT@70..73\n-                              NAME_REF@70..73\n-                                IDENT@70..73 \"Foo\"\n-                        R_ANGLE@73..74 \">\"\n-                    COLON2@74..76 \"::\"\n-                    PATH_SEGMENT@76..80\n-                      NAME_REF@76..80\n-                        IDENT@76..80 \"func\"\n-                ARG_LIST@80..82\n-                  L_PAREN@80..81 \"(\"\n-                  R_PAREN@81..82 \")\"\n-              R_PAREN@82..83 \")\"\n-          SEMICOLON@83..84 \";\"\n-        WHITESPACE@84..89 \"\\n    \"\n-        EXPR_STMT@89..115\n-          CALL_EXPR@89..114\n-            PATH_EXPR@89..90\n-              PATH@89..90\n-                PATH_SEGMENT@89..90\n-                  NAME_REF@89..90\n-                    IDENT@89..90 \"f\"\n-            ARG_LIST@90..114\n-              L_PAREN@90..91 \"(\"\n-              CALL_EXPR@91..113\n-                PATH_EXPR@91..111\n-                  PATH@91..111\n-                    PATH@91..105\n-                      PATH_SEGMENT@91..105\n-                        L_ANGLE@91..92 \"<\"\n-                        PATH_TYPE@92..95\n-                          PATH@92..95\n-                            PATH_SEGMENT@92..95\n-                              NAME_REF@92..95\n-                                IDENT@92..95 \"Foo\"\n-                        WHITESPACE@95..96 \" \"\n-                        AS_KW@96..98 \"as\"\n-                        WHITESPACE@98..99 \" \"\n-                        PATH_TYPE@99..104\n-                          PATH@99..104\n-                            PATH_SEGMENT@99..104\n-                              NAME_REF@99..104\n-                                IDENT@99..104 \"Trait\"\n-                        R_ANGLE@104..105 \">\"\n-                    COLON2@105..107 \"::\"\n-                    PATH_SEGMENT@107..111\n-                      NAME_REF@107..111\n-                        IDENT@107..111 \"func\"\n-                ARG_LIST@111..113\n-                  L_PAREN@111..112 \"(\"\n-                  R_PAREN@112..113 \")\"\n-              R_PAREN@113..114 \")\"\n-          SEMICOLON@114..115 \";\"\n-        WHITESPACE@115..116 \"\\n\"\n-        R_CURLY@116..117 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..27\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PLACEHOLDER_PAT@19..20\n+          UNDERSCORE@19..20 \"_\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        CALL_EXPR@23..26\n+          PATH_EXPR@23..24\n+            PATH@23..24\n+              PATH_SEGMENT@23..24\n+                NAME_REF@23..24\n+                  IDENT@23..24 \"f\"\n+          ARG_LIST@24..26\n+            L_PAREN@24..25 \"(\"\n+            R_PAREN@25..26 \")\"\n+        SEMICOLON@26..27 \";\"\n+      WHITESPACE@27..32 \"\\n    \"\n+      LET_STMT@32..54\n+        LET_KW@32..35 \"let\"\n+        WHITESPACE@35..36 \" \"\n+        PLACEHOLDER_PAT@36..37\n+          UNDERSCORE@36..37 \"_\"\n+        WHITESPACE@37..38 \" \"\n+        EQ@38..39 \"=\"\n+        WHITESPACE@39..40 \" \"\n+        CALL_EXPR@40..53\n+          CALL_EXPR@40..46\n+            CALL_EXPR@40..43\n+              PATH_EXPR@40..41\n+                PATH@40..41\n+                  PATH_SEGMENT@40..41\n+                    NAME_REF@40..41\n+                      IDENT@40..41 \"f\"\n+              ARG_LIST@41..43\n+                L_PAREN@41..42 \"(\"\n+                R_PAREN@42..43 \")\"\n+            ARG_LIST@43..46\n+              L_PAREN@43..44 \"(\"\n+              LITERAL@44..45\n+                INT_NUMBER@44..45 \"1\"\n+              R_PAREN@45..46 \")\"\n+          ARG_LIST@46..53\n+            L_PAREN@46..47 \"(\"\n+            LITERAL@47..48\n+              INT_NUMBER@47..48 \"1\"\n+            COMMA@48..49 \",\"\n+            WHITESPACE@49..50 \" \"\n+            LITERAL@50..51\n+              INT_NUMBER@50..51 \"2\"\n+            COMMA@51..52 \",\"\n+            R_PAREN@52..53 \")\"\n+        SEMICOLON@53..54 \";\"\n+      WHITESPACE@54..59 \"\\n    \"\n+      LET_STMT@59..84\n+        LET_KW@59..62 \"let\"\n+        WHITESPACE@62..63 \" \"\n+        PLACEHOLDER_PAT@63..64\n+          UNDERSCORE@63..64 \"_\"\n+        WHITESPACE@64..65 \" \"\n+        EQ@65..66 \"=\"\n+        WHITESPACE@66..67 \" \"\n+        CALL_EXPR@67..83\n+          PATH_EXPR@67..68\n+            PATH@67..68\n+              PATH_SEGMENT@67..68\n+                NAME_REF@67..68\n+                  IDENT@67..68 \"f\"\n+          ARG_LIST@68..83\n+            L_PAREN@68..69 \"(\"\n+            CALL_EXPR@69..82\n+              PATH_EXPR@69..80\n+                PATH@69..80\n+                  PATH@69..74\n+                    PATH_SEGMENT@69..74\n+                      L_ANGLE@69..70 \"<\"\n+                      PATH_TYPE@70..73\n+                        PATH@70..73\n+                          PATH_SEGMENT@70..73\n+                            NAME_REF@70..73\n+                              IDENT@70..73 \"Foo\"\n+                      R_ANGLE@73..74 \">\"\n+                  COLON2@74..76 \"::\"\n+                  PATH_SEGMENT@76..80\n+                    NAME_REF@76..80\n+                      IDENT@76..80 \"func\"\n+              ARG_LIST@80..82\n+                L_PAREN@80..81 \"(\"\n+                R_PAREN@81..82 \")\"\n+            R_PAREN@82..83 \")\"\n+        SEMICOLON@83..84 \";\"\n+      WHITESPACE@84..89 \"\\n    \"\n+      EXPR_STMT@89..115\n+        CALL_EXPR@89..114\n+          PATH_EXPR@89..90\n+            PATH@89..90\n+              PATH_SEGMENT@89..90\n+                NAME_REF@89..90\n+                  IDENT@89..90 \"f\"\n+          ARG_LIST@90..114\n+            L_PAREN@90..91 \"(\"\n+            CALL_EXPR@91..113\n+              PATH_EXPR@91..111\n+                PATH@91..111\n+                  PATH@91..105\n+                    PATH_SEGMENT@91..105\n+                      L_ANGLE@91..92 \"<\"\n+                      PATH_TYPE@92..95\n+                        PATH@92..95\n+                          PATH_SEGMENT@92..95\n+                            NAME_REF@92..95\n+                              IDENT@92..95 \"Foo\"\n+                      WHITESPACE@95..96 \" \"\n+                      AS_KW@96..98 \"as\"\n+                      WHITESPACE@98..99 \" \"\n+                      PATH_TYPE@99..104\n+                        PATH@99..104\n+                          PATH_SEGMENT@99..104\n+                            NAME_REF@99..104\n+                              IDENT@99..104 \"Trait\"\n+                      R_ANGLE@104..105 \">\"\n+                  COLON2@105..107 \"::\"\n+                  PATH_SEGMENT@107..111\n+                    NAME_REF@107..111\n+                      IDENT@107..111 \"func\"\n+              ARG_LIST@111..113\n+                L_PAREN@111..112 \"(\"\n+                R_PAREN@112..113 \")\"\n+            R_PAREN@113..114 \")\"\n+        SEMICOLON@114..115 \";\"\n+      WHITESPACE@115..116 \"\\n\"\n+      R_CURLY@116..117 \"}\"\n   WHITESPACE@117..118 \"\\n\""}, {"sha": "c23b3b67cf625e8c73aac55871cbe813dce683c0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0044_block_items.rast", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0044_block_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0044_block_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0044_block_items.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,22 +9,20 @@ SOURCE_FILE@0..21\n       R_PAREN@5..6 \")\"\n     WHITESPACE@6..7 \" \"\n     BLOCK_EXPR@7..20\n-      BLOCK@7..20\n-        L_CURLY@7..8 \"{\"\n-        WHITESPACE@8..9 \" \"\n-        FN_DEF@9..18\n-          FN_KW@9..11 \"fn\"\n-          WHITESPACE@11..12 \" \"\n-          NAME@12..13\n-            IDENT@12..13 \"b\"\n-          PARAM_LIST@13..15\n-            L_PAREN@13..14 \"(\"\n-            R_PAREN@14..15 \")\"\n-          WHITESPACE@15..16 \" \"\n-          BLOCK_EXPR@16..18\n-            BLOCK@16..18\n-              L_CURLY@16..17 \"{\"\n-              R_CURLY@17..18 \"}\"\n-        WHITESPACE@18..19 \" \"\n-        R_CURLY@19..20 \"}\"\n+      L_CURLY@7..8 \"{\"\n+      WHITESPACE@8..9 \" \"\n+      FN_DEF@9..18\n+        FN_KW@9..11 \"fn\"\n+        WHITESPACE@11..12 \" \"\n+        NAME@12..13\n+          IDENT@12..13 \"b\"\n+        PARAM_LIST@13..15\n+          L_PAREN@13..14 \"(\"\n+          R_PAREN@14..15 \")\"\n+        WHITESPACE@15..16 \" \"\n+        BLOCK_EXPR@16..18\n+          L_CURLY@16..17 \"{\"\n+          R_CURLY@17..18 \"}\"\n+      WHITESPACE@18..19 \" \"\n+      R_CURLY@19..20 \"}\"\n   WHITESPACE@20..21 \"\\n\""}, {"sha": "9ca2165baf754bbe762e6b8c7503098150899ceb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0045_param_list_opt_patterns.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -41,7 +41,6 @@ SOURCE_FILE@0..35\n       L_PAREN@30..31 \"(\"\n       R_PAREN@31..32 \")\"\n     BLOCK_EXPR@32..34\n-      BLOCK@32..34\n-        L_CURLY@32..33 \"{\"\n-        R_CURLY@33..34 \"}\"\n+      L_CURLY@32..33 \"{\"\n+      R_CURLY@33..34 \"}\"\n   WHITESPACE@34..35 \"\\n\""}, {"sha": "b209f67f8ceaafd8a89eb748a668d46ec83c0986", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0048_path_type_with_bounds.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -35,9 +35,8 @@ SOURCE_FILE@0..58\n               R_ANGLE@22..23 \">\"\n     WHITESPACE@23..24 \" \"\n     BLOCK_EXPR@24..26\n-      BLOCK@24..26\n-        L_CURLY@24..25 \"{\"\n-        R_CURLY@25..26 \"}\"\n+      L_CURLY@24..25 \"{\"\n+      R_CURLY@25..26 \"}\"\n   WHITESPACE@26..27 \"\\n\"\n   FN_DEF@27..57\n     FN_KW@27..29 \"fn\"\n@@ -77,7 +76,6 @@ SOURCE_FILE@0..58\n               R_ANGLE@53..54 \">\"\n     WHITESPACE@54..55 \" \"\n     BLOCK_EXPR@55..57\n-      BLOCK@55..57\n-        L_CURLY@55..56 \"{\"\n-        R_CURLY@56..57 \"}\"\n+      L_CURLY@55..56 \"{\"\n+      R_CURLY@56..57 \"}\"\n   WHITESPACE@57..58 \"\\n\""}, {"sha": "70232a3b272f87cd70ccacbc00a0a8e9867ca2b8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0053_path_expr.rast", "status": "modified", "additions": 83, "deletions": 84, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,88 +9,87 @@ SOURCE_FILE@0..91\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..90\n-      BLOCK@9..90\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..25\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PLACEHOLDER_PAT@19..20\n-            UNDERSCORE@19..20 \"_\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          PATH_EXPR@23..24\n-            PATH@23..24\n-              PATH_SEGMENT@23..24\n-                NAME_REF@23..24\n-                  IDENT@23..24 \"a\"\n-          SEMICOLON@24..25 \";\"\n-        WHITESPACE@25..30 \"\\n    \"\n-        LET_STMT@30..43\n-          LET_KW@30..33 \"let\"\n-          WHITESPACE@33..34 \" \"\n-          PLACEHOLDER_PAT@34..35\n-            UNDERSCORE@34..35 \"_\"\n-          WHITESPACE@35..36 \" \"\n-          EQ@36..37 \"=\"\n-          WHITESPACE@37..38 \" \"\n-          PATH_EXPR@38..42\n-            PATH@38..42\n-              PATH@38..39\n-                PATH_SEGMENT@38..39\n-                  NAME_REF@38..39\n-                    IDENT@38..39 \"a\"\n-              COLON2@39..41 \"::\"\n-              PATH_SEGMENT@41..42\n-                NAME_REF@41..42\n-                  IDENT@41..42 \"b\"\n-          SEMICOLON@42..43 \";\"\n-        WHITESPACE@43..48 \"\\n    \"\n-        LET_STMT@48..65\n-          LET_KW@48..51 \"let\"\n-          WHITESPACE@51..52 \" \"\n-          PLACEHOLDER_PAT@52..53\n-            UNDERSCORE@52..53 \"_\"\n-          WHITESPACE@53..54 \" \"\n-          EQ@54..55 \"=\"\n-          WHITESPACE@55..56 \" \"\n-          PATH_EXPR@56..64\n-            PATH@56..64\n-              PATH_SEGMENT@56..64\n-                COLON2@56..58 \"::\"\n-                NAME_REF@58..59\n-                  IDENT@58..59 \"a\"\n-                TYPE_ARG_LIST@59..64\n-                  COLON2@59..61 \"::\"\n-                  L_ANGLE@61..62 \"<\"\n-                  TYPE_ARG@62..63\n-                    PATH_TYPE@62..63\n-                      PATH@62..63\n-                        PATH_SEGMENT@62..63\n-                          NAME_REF@62..63\n-                            IDENT@62..63 \"b\"\n-                  R_ANGLE@63..64 \">\"\n-          SEMICOLON@64..65 \";\"\n-        WHITESPACE@65..70 \"\\n    \"\n-        LET_STMT@70..88\n-          LET_KW@70..73 \"let\"\n-          WHITESPACE@73..74 \" \"\n-          PLACEHOLDER_PAT@74..75\n-            UNDERSCORE@74..75 \"_\"\n-          WHITESPACE@75..76 \" \"\n-          EQ@76..77 \"=\"\n-          WHITESPACE@77..78 \" \"\n-          MACRO_CALL@78..87\n-            PATH@78..84\n-              PATH_SEGMENT@78..84\n-                NAME_REF@78..84\n-                  IDENT@78..84 \"format\"\n-            BANG@84..85 \"!\"\n-            TOKEN_TREE@85..87\n-              L_PAREN@85..86 \"(\"\n-              R_PAREN@86..87 \")\"\n-          SEMICOLON@87..88 \";\"\n-        WHITESPACE@88..89 \"\\n\"\n-        R_CURLY@89..90 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..25\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PLACEHOLDER_PAT@19..20\n+          UNDERSCORE@19..20 \"_\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        PATH_EXPR@23..24\n+          PATH@23..24\n+            PATH_SEGMENT@23..24\n+              NAME_REF@23..24\n+                IDENT@23..24 \"a\"\n+        SEMICOLON@24..25 \";\"\n+      WHITESPACE@25..30 \"\\n    \"\n+      LET_STMT@30..43\n+        LET_KW@30..33 \"let\"\n+        WHITESPACE@33..34 \" \"\n+        PLACEHOLDER_PAT@34..35\n+          UNDERSCORE@34..35 \"_\"\n+        WHITESPACE@35..36 \" \"\n+        EQ@36..37 \"=\"\n+        WHITESPACE@37..38 \" \"\n+        PATH_EXPR@38..42\n+          PATH@38..42\n+            PATH@38..39\n+              PATH_SEGMENT@38..39\n+                NAME_REF@38..39\n+                  IDENT@38..39 \"a\"\n+            COLON2@39..41 \"::\"\n+            PATH_SEGMENT@41..42\n+              NAME_REF@41..42\n+                IDENT@41..42 \"b\"\n+        SEMICOLON@42..43 \";\"\n+      WHITESPACE@43..48 \"\\n    \"\n+      LET_STMT@48..65\n+        LET_KW@48..51 \"let\"\n+        WHITESPACE@51..52 \" \"\n+        PLACEHOLDER_PAT@52..53\n+          UNDERSCORE@52..53 \"_\"\n+        WHITESPACE@53..54 \" \"\n+        EQ@54..55 \"=\"\n+        WHITESPACE@55..56 \" \"\n+        PATH_EXPR@56..64\n+          PATH@56..64\n+            PATH_SEGMENT@56..64\n+              COLON2@56..58 \"::\"\n+              NAME_REF@58..59\n+                IDENT@58..59 \"a\"\n+              TYPE_ARG_LIST@59..64\n+                COLON2@59..61 \"::\"\n+                L_ANGLE@61..62 \"<\"\n+                TYPE_ARG@62..63\n+                  PATH_TYPE@62..63\n+                    PATH@62..63\n+                      PATH_SEGMENT@62..63\n+                        NAME_REF@62..63\n+                          IDENT@62..63 \"b\"\n+                R_ANGLE@63..64 \">\"\n+        SEMICOLON@64..65 \";\"\n+      WHITESPACE@65..70 \"\\n    \"\n+      LET_STMT@70..88\n+        LET_KW@70..73 \"let\"\n+        WHITESPACE@73..74 \" \"\n+        PLACEHOLDER_PAT@74..75\n+          UNDERSCORE@74..75 \"_\"\n+        WHITESPACE@75..76 \" \"\n+        EQ@76..77 \"=\"\n+        WHITESPACE@77..78 \" \"\n+        MACRO_CALL@78..87\n+          PATH@78..84\n+            PATH_SEGMENT@78..84\n+              NAME_REF@78..84\n+                IDENT@78..84 \"format\"\n+          BANG@84..85 \"!\"\n+          TOKEN_TREE@85..87\n+            L_PAREN@85..86 \"(\"\n+            R_PAREN@86..87 \")\"\n+        SEMICOLON@87..88 \";\"\n+      WHITESPACE@88..89 \"\\n\"\n+      R_CURLY@89..90 \"}\"\n   WHITESPACE@90..91 \"\\n\""}, {"sha": "03c52525eb7d1d01ca222691fa46d4d5e07d6127", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0055_literal_pattern.rast", "status": "modified", "additions": 64, "deletions": 65, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0055_literal_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0055_literal_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0055_literal_pattern.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,69 +9,68 @@ SOURCE_FILE@0..113\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..112\n-      BLOCK@10..112\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        MATCH_EXPR@16..110\n-          MATCH_KW@16..21 \"match\"\n-          WHITESPACE@21..22 \" \"\n-          TUPLE_EXPR@22..24\n-            L_PAREN@22..23 \"(\"\n-            R_PAREN@23..24 \")\"\n-          WHITESPACE@24..25 \" \"\n-          MATCH_ARM_LIST@25..110\n-            L_CURLY@25..26 \"{\"\n-            WHITESPACE@26..35 \"\\n        \"\n-            MATCH_ARM@35..43\n-              LITERAL_PAT@35..37\n-                MINUS@35..36 \"-\"\n-                LITERAL@36..37\n-                  INT_NUMBER@36..37 \"1\"\n-              WHITESPACE@37..38 \" \"\n-              FAT_ARROW@38..40 \"=>\"\n-              WHITESPACE@40..41 \" \"\n-              TUPLE_EXPR@41..43\n-                L_PAREN@41..42 \"(\"\n-                R_PAREN@42..43 \")\"\n-            COMMA@43..44 \",\"\n-            WHITESPACE@44..53 \"\\n        \"\n-            MATCH_ARM@53..61\n-              LITERAL_PAT@53..55\n-                LITERAL@53..55\n-                  INT_NUMBER@53..55 \"92\"\n-              WHITESPACE@55..56 \" \"\n-              FAT_ARROW@56..58 \"=>\"\n-              WHITESPACE@58..59 \" \"\n-              TUPLE_EXPR@59..61\n-                L_PAREN@59..60 \"(\"\n-                R_PAREN@60..61 \")\"\n-            COMMA@61..62 \",\"\n-            WHITESPACE@62..71 \"\\n        \"\n-            MATCH_ARM@71..80\n-              LITERAL_PAT@71..74\n-                LITERAL@71..74\n-                  CHAR@71..74 \"\\'c\\'\"\n-              WHITESPACE@74..75 \" \"\n-              FAT_ARROW@75..77 \"=>\"\n-              WHITESPACE@77..78 \" \"\n-              TUPLE_EXPR@78..80\n-                L_PAREN@78..79 \"(\"\n-                R_PAREN@79..80 \")\"\n-            COMMA@80..81 \",\"\n-            WHITESPACE@81..90 \"\\n        \"\n-            MATCH_ARM@90..103\n-              LITERAL_PAT@90..97\n-                LITERAL@90..97\n-                  STRING@90..97 \"\\\"hello\\\"\"\n-              WHITESPACE@97..98 \" \"\n-              FAT_ARROW@98..100 \"=>\"\n-              WHITESPACE@100..101 \" \"\n-              TUPLE_EXPR@101..103\n-                L_PAREN@101..102 \"(\"\n-                R_PAREN@102..103 \")\"\n-            COMMA@103..104 \",\"\n-            WHITESPACE@104..109 \"\\n    \"\n-            R_CURLY@109..110 \"}\"\n-        WHITESPACE@110..111 \"\\n\"\n-        R_CURLY@111..112 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      MATCH_EXPR@16..110\n+        MATCH_KW@16..21 \"match\"\n+        WHITESPACE@21..22 \" \"\n+        TUPLE_EXPR@22..24\n+          L_PAREN@22..23 \"(\"\n+          R_PAREN@23..24 \")\"\n+        WHITESPACE@24..25 \" \"\n+        MATCH_ARM_LIST@25..110\n+          L_CURLY@25..26 \"{\"\n+          WHITESPACE@26..35 \"\\n        \"\n+          MATCH_ARM@35..43\n+            LITERAL_PAT@35..37\n+              MINUS@35..36 \"-\"\n+              LITERAL@36..37\n+                INT_NUMBER@36..37 \"1\"\n+            WHITESPACE@37..38 \" \"\n+            FAT_ARROW@38..40 \"=>\"\n+            WHITESPACE@40..41 \" \"\n+            TUPLE_EXPR@41..43\n+              L_PAREN@41..42 \"(\"\n+              R_PAREN@42..43 \")\"\n+          COMMA@43..44 \",\"\n+          WHITESPACE@44..53 \"\\n        \"\n+          MATCH_ARM@53..61\n+            LITERAL_PAT@53..55\n+              LITERAL@53..55\n+                INT_NUMBER@53..55 \"92\"\n+            WHITESPACE@55..56 \" \"\n+            FAT_ARROW@56..58 \"=>\"\n+            WHITESPACE@58..59 \" \"\n+            TUPLE_EXPR@59..61\n+              L_PAREN@59..60 \"(\"\n+              R_PAREN@60..61 \")\"\n+          COMMA@61..62 \",\"\n+          WHITESPACE@62..71 \"\\n        \"\n+          MATCH_ARM@71..80\n+            LITERAL_PAT@71..74\n+              LITERAL@71..74\n+                CHAR@71..74 \"\\'c\\'\"\n+            WHITESPACE@74..75 \" \"\n+            FAT_ARROW@75..77 \"=>\"\n+            WHITESPACE@77..78 \" \"\n+            TUPLE_EXPR@78..80\n+              L_PAREN@78..79 \"(\"\n+              R_PAREN@79..80 \")\"\n+          COMMA@80..81 \",\"\n+          WHITESPACE@81..90 \"\\n        \"\n+          MATCH_ARM@90..103\n+            LITERAL_PAT@90..97\n+              LITERAL@90..97\n+                STRING@90..97 \"\\\"hello\\\"\"\n+            WHITESPACE@97..98 \" \"\n+            FAT_ARROW@98..100 \"=>\"\n+            WHITESPACE@100..101 \" \"\n+            TUPLE_EXPR@101..103\n+              L_PAREN@101..102 \"(\"\n+              R_PAREN@102..103 \")\"\n+          COMMA@103..104 \",\"\n+          WHITESPACE@104..109 \"\\n    \"\n+          R_CURLY@109..110 \"}\"\n+      WHITESPACE@110..111 \"\\n\"\n+      R_CURLY@111..112 \"}\"\n   WHITESPACE@112..113 \"\\n\""}, {"sha": "24f89b83ff08a6a7a87809f8d03dfdd47f63226c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0056_where_clause.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -105,7 +105,6 @@ SOURCE_FILE@0..116\n             LIFETIME@110..112 \"\\'a\"\n     WHITESPACE@112..113 \"\\n\"\n     BLOCK_EXPR@113..115\n-      BLOCK@113..115\n-        L_CURLY@113..114 \"{\"\n-        R_CURLY@114..115 \"}\"\n+      L_CURLY@113..114 \"{\"\n+      R_CURLY@114..115 \"}\"\n   WHITESPACE@115..116 \"\\n\""}, {"sha": "bb43d1eaf3893a264fff959fae04aa280f4ca0e2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0057_const_fn.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -11,7 +11,6 @@ SOURCE_FILE@0..18\n       R_PAREN@13..14 \")\"\n     WHITESPACE@14..15 \" \"\n     BLOCK_EXPR@15..17\n-      BLOCK@15..17\n-        L_CURLY@15..16 \"{\"\n-        R_CURLY@16..17 \"}\"\n+      L_CURLY@15..16 \"{\"\n+      R_CURLY@16..17 \"}\"\n   WHITESPACE@17..18 \"\\n\""}, {"sha": "8bd94a86846bbb27b8c213fc2c51e295d1da5904", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0058_range_pat.rast", "status": "modified", "additions": 70, "deletions": 71, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,75 +9,74 @@ SOURCE_FILE@0..112\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..111\n-      BLOCK@10..111\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        MATCH_EXPR@16..109\n-          MATCH_KW@16..21 \"match\"\n-          WHITESPACE@21..22 \" \"\n-          LITERAL@22..24\n-            INT_NUMBER@22..24 \"92\"\n-          WHITESPACE@24..25 \" \"\n-          MATCH_ARM_LIST@25..109\n-            L_CURLY@25..26 \"{\"\n-            WHITESPACE@26..35 \"\\n        \"\n-            MATCH_ARM@35..50\n-              RANGE_PAT@35..44\n-                LITERAL_PAT@35..36\n-                  LITERAL@35..36\n-                    INT_NUMBER@35..36 \"0\"\n-                WHITESPACE@36..37 \" \"\n-                DOT3@37..40 \"...\"\n-                WHITESPACE@40..41 \" \"\n-                LITERAL_PAT@41..44\n-                  LITERAL@41..44\n-                    INT_NUMBER@41..44 \"100\"\n-              WHITESPACE@44..45 \" \"\n-              FAT_ARROW@45..47 \"=>\"\n-              WHITESPACE@47..48 \" \"\n-              TUPLE_EXPR@48..50\n-                L_PAREN@48..49 \"(\"\n-                R_PAREN@49..50 \")\"\n-            COMMA@50..51 \",\"\n-            WHITESPACE@51..60 \"\\n        \"\n-            MATCH_ARM@60..77\n-              RANGE_PAT@60..71\n-                LITERAL_PAT@60..63\n-                  LITERAL@60..63\n-                    INT_NUMBER@60..63 \"101\"\n-                WHITESPACE@63..64 \" \"\n-                DOT2EQ@64..67 \"..=\"\n-                WHITESPACE@67..68 \" \"\n-                LITERAL_PAT@68..71\n-                  LITERAL@68..71\n-                    INT_NUMBER@68..71 \"200\"\n-              WHITESPACE@71..72 \" \"\n-              FAT_ARROW@72..74 \"=>\"\n-              WHITESPACE@74..75 \" \"\n-              TUPLE_EXPR@75..77\n-                L_PAREN@75..76 \"(\"\n-                R_PAREN@76..77 \")\"\n-            COMMA@77..78 \",\"\n-            WHITESPACE@78..87 \"\\n        \"\n-            MATCH_ARM@87..102\n-              RANGE_PAT@87..97\n-                LITERAL_PAT@87..90\n-                  LITERAL@87..90\n-                    INT_NUMBER@87..90 \"200\"\n-                WHITESPACE@90..91 \" \"\n-                DOT2@91..93 \"..\"\n-                WHITESPACE@93..94 \" \"\n-                LITERAL_PAT@94..97\n-                  LITERAL@94..97\n-                    INT_NUMBER@94..97 \"301\"\n-              FAT_ARROW@97..99 \"=>\"\n-              WHITESPACE@99..100 \" \"\n-              TUPLE_EXPR@100..102\n-                L_PAREN@100..101 \"(\"\n-                R_PAREN@101..102 \")\"\n-            COMMA@102..103 \",\"\n-            WHITESPACE@103..108 \"\\n    \"\n-            R_CURLY@108..109 \"}\"\n-        WHITESPACE@109..110 \"\\n\"\n-        R_CURLY@110..111 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      MATCH_EXPR@16..109\n+        MATCH_KW@16..21 \"match\"\n+        WHITESPACE@21..22 \" \"\n+        LITERAL@22..24\n+          INT_NUMBER@22..24 \"92\"\n+        WHITESPACE@24..25 \" \"\n+        MATCH_ARM_LIST@25..109\n+          L_CURLY@25..26 \"{\"\n+          WHITESPACE@26..35 \"\\n        \"\n+          MATCH_ARM@35..50\n+            RANGE_PAT@35..44\n+              LITERAL_PAT@35..36\n+                LITERAL@35..36\n+                  INT_NUMBER@35..36 \"0\"\n+              WHITESPACE@36..37 \" \"\n+              DOT3@37..40 \"...\"\n+              WHITESPACE@40..41 \" \"\n+              LITERAL_PAT@41..44\n+                LITERAL@41..44\n+                  INT_NUMBER@41..44 \"100\"\n+            WHITESPACE@44..45 \" \"\n+            FAT_ARROW@45..47 \"=>\"\n+            WHITESPACE@47..48 \" \"\n+            TUPLE_EXPR@48..50\n+              L_PAREN@48..49 \"(\"\n+              R_PAREN@49..50 \")\"\n+          COMMA@50..51 \",\"\n+          WHITESPACE@51..60 \"\\n        \"\n+          MATCH_ARM@60..77\n+            RANGE_PAT@60..71\n+              LITERAL_PAT@60..63\n+                LITERAL@60..63\n+                  INT_NUMBER@60..63 \"101\"\n+              WHITESPACE@63..64 \" \"\n+              DOT2EQ@64..67 \"..=\"\n+              WHITESPACE@67..68 \" \"\n+              LITERAL_PAT@68..71\n+                LITERAL@68..71\n+                  INT_NUMBER@68..71 \"200\"\n+            WHITESPACE@71..72 \" \"\n+            FAT_ARROW@72..74 \"=>\"\n+            WHITESPACE@74..75 \" \"\n+            TUPLE_EXPR@75..77\n+              L_PAREN@75..76 \"(\"\n+              R_PAREN@76..77 \")\"\n+          COMMA@77..78 \",\"\n+          WHITESPACE@78..87 \"\\n        \"\n+          MATCH_ARM@87..102\n+            RANGE_PAT@87..97\n+              LITERAL_PAT@87..90\n+                LITERAL@87..90\n+                  INT_NUMBER@87..90 \"200\"\n+              WHITESPACE@90..91 \" \"\n+              DOT2@91..93 \"..\"\n+              WHITESPACE@93..94 \" \"\n+              LITERAL_PAT@94..97\n+                LITERAL@94..97\n+                  INT_NUMBER@94..97 \"301\"\n+            FAT_ARROW@97..99 \"=>\"\n+            WHITESPACE@99..100 \" \"\n+            TUPLE_EXPR@100..102\n+              L_PAREN@100..101 \"(\"\n+              R_PAREN@101..102 \")\"\n+          COMMA@102..103 \",\"\n+          WHITESPACE@103..108 \"\\n    \"\n+          R_CURLY@108..109 \"}\"\n+      WHITESPACE@109..110 \"\\n\"\n+      R_CURLY@110..111 \"}\"\n   WHITESPACE@111..112 \"\\n\""}, {"sha": "9210f155cba8ea43ddb8aefcf83d92f786399336", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0059_match_arms_commas.rast", "status": "modified", "additions": 46, "deletions": 48, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0059_match_arms_commas.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0059_match_arms_commas.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0059_match_arms_commas.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,52 +9,50 @@ SOURCE_FILE@0..83\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..82\n-      BLOCK@9..82\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        MATCH_EXPR@15..80\n-          MATCH_KW@15..20 \"match\"\n-          WHITESPACE@20..21 \" \"\n-          TUPLE_EXPR@21..23\n-            L_PAREN@21..22 \"(\"\n-            R_PAREN@22..23 \")\"\n-          WHITESPACE@23..24 \" \"\n-          MATCH_ARM_LIST@24..80\n-            L_CURLY@24..25 \"{\"\n-            WHITESPACE@25..34 \"\\n        \"\n-            MATCH_ARM@34..41\n-              PLACEHOLDER_PAT@34..35\n-                UNDERSCORE@34..35 \"_\"\n-              WHITESPACE@35..36 \" \"\n-              FAT_ARROW@36..38 \"=>\"\n-              WHITESPACE@38..39 \" \"\n-              TUPLE_EXPR@39..41\n-                L_PAREN@39..40 \"(\"\n-                R_PAREN@40..41 \")\"\n-            COMMA@41..42 \",\"\n-            WHITESPACE@42..51 \"\\n        \"\n-            MATCH_ARM@51..58\n-              PLACEHOLDER_PAT@51..52\n-                UNDERSCORE@51..52 \"_\"\n-              WHITESPACE@52..53 \" \"\n-              FAT_ARROW@53..55 \"=>\"\n-              WHITESPACE@55..56 \" \"\n-              BLOCK_EXPR@56..58\n-                BLOCK@56..58\n-                  L_CURLY@56..57 \"{\"\n-                  R_CURLY@57..58 \"}\"\n-            WHITESPACE@58..67 \"\\n        \"\n-            MATCH_ARM@67..74\n-              PLACEHOLDER_PAT@67..68\n-                UNDERSCORE@67..68 \"_\"\n-              WHITESPACE@68..69 \" \"\n-              FAT_ARROW@69..71 \"=>\"\n-              WHITESPACE@71..72 \" \"\n-              TUPLE_EXPR@72..74\n-                L_PAREN@72..73 \"(\"\n-                R_PAREN@73..74 \")\"\n-            WHITESPACE@74..79 \"\\n    \"\n-            R_CURLY@79..80 \"}\"\n-        WHITESPACE@80..81 \"\\n\"\n-        R_CURLY@81..82 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      MATCH_EXPR@15..80\n+        MATCH_KW@15..20 \"match\"\n+        WHITESPACE@20..21 \" \"\n+        TUPLE_EXPR@21..23\n+          L_PAREN@21..22 \"(\"\n+          R_PAREN@22..23 \")\"\n+        WHITESPACE@23..24 \" \"\n+        MATCH_ARM_LIST@24..80\n+          L_CURLY@24..25 \"{\"\n+          WHITESPACE@25..34 \"\\n        \"\n+          MATCH_ARM@34..41\n+            PLACEHOLDER_PAT@34..35\n+              UNDERSCORE@34..35 \"_\"\n+            WHITESPACE@35..36 \" \"\n+            FAT_ARROW@36..38 \"=>\"\n+            WHITESPACE@38..39 \" \"\n+            TUPLE_EXPR@39..41\n+              L_PAREN@39..40 \"(\"\n+              R_PAREN@40..41 \")\"\n+          COMMA@41..42 \",\"\n+          WHITESPACE@42..51 \"\\n        \"\n+          MATCH_ARM@51..58\n+            PLACEHOLDER_PAT@51..52\n+              UNDERSCORE@51..52 \"_\"\n+            WHITESPACE@52..53 \" \"\n+            FAT_ARROW@53..55 \"=>\"\n+            WHITESPACE@55..56 \" \"\n+            BLOCK_EXPR@56..58\n+              L_CURLY@56..57 \"{\"\n+              R_CURLY@57..58 \"}\"\n+          WHITESPACE@58..67 \"\\n        \"\n+          MATCH_ARM@67..74\n+            PLACEHOLDER_PAT@67..68\n+              UNDERSCORE@67..68 \"_\"\n+            WHITESPACE@68..69 \" \"\n+            FAT_ARROW@69..71 \"=>\"\n+            WHITESPACE@71..72 \" \"\n+            TUPLE_EXPR@72..74\n+              L_PAREN@72..73 \"(\"\n+              R_PAREN@73..74 \")\"\n+          WHITESPACE@74..79 \"\\n    \"\n+          R_CURLY@79..80 \"}\"\n+      WHITESPACE@80..81 \"\\n\"\n+      R_CURLY@81..82 \"}\"\n   WHITESPACE@82..83 \"\\n\""}, {"sha": "850465d824d99d06319c441c351449fda9f73ff3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_record_lit.rast", "status": "modified", "additions": 112, "deletions": 113, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,117 +9,116 @@ SOURCE_FILE@0..112\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..111\n-      BLOCK@9..111\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..20\n-          RECORD_LIT@15..19\n-            PATH@15..16\n-              PATH_SEGMENT@15..16\n-                NAME_REF@15..16\n-                  IDENT@15..16 \"S\"\n-            WHITESPACE@16..17 \" \"\n-            RECORD_FIELD_LIST@17..19\n-              L_CURLY@17..18 \"{\"\n-              R_CURLY@18..19 \"}\"\n-          SEMICOLON@19..20 \";\"\n-        WHITESPACE@20..25 \"\\n    \"\n-        EXPR_STMT@25..41\n-          RECORD_LIT@25..40\n-            PATH@25..26\n-              PATH_SEGMENT@25..26\n-                NAME_REF@25..26\n-                  IDENT@25..26 \"S\"\n-            WHITESPACE@26..27 \" \"\n-            RECORD_FIELD_LIST@27..40\n-              L_CURLY@27..28 \"{\"\n-              WHITESPACE@28..29 \" \"\n-              RECORD_FIELD@29..30\n-                PATH_EXPR@29..30\n-                  PATH@29..30\n-                    PATH_SEGMENT@29..30\n-                      NAME_REF@29..30\n-                        IDENT@29..30 \"x\"\n-              COMMA@30..31 \",\"\n-              WHITESPACE@31..32 \" \"\n-              RECORD_FIELD@32..37\n-                NAME_REF@32..33\n-                  IDENT@32..33 \"y\"\n-                COLON@33..34 \":\"\n-                WHITESPACE@34..35 \" \"\n-                LITERAL@35..37\n-                  INT_NUMBER@35..37 \"32\"\n-              COMMA@37..38 \",\"\n-              WHITESPACE@38..39 \" \"\n-              R_CURLY@39..40 \"}\"\n-          SEMICOLON@40..41 \";\"\n-        WHITESPACE@41..46 \"\\n    \"\n-        EXPR_STMT@46..83\n-          RECORD_LIT@46..82\n-            PATH@46..47\n-              PATH_SEGMENT@46..47\n-                NAME_REF@46..47\n-                  IDENT@46..47 \"S\"\n-            WHITESPACE@47..48 \" \"\n-            RECORD_FIELD_LIST@48..82\n-              L_CURLY@48..49 \"{\"\n-              WHITESPACE@49..50 \" \"\n-              RECORD_FIELD@50..51\n-                PATH_EXPR@50..51\n-                  PATH@50..51\n-                    PATH_SEGMENT@50..51\n-                      NAME_REF@50..51\n-                        IDENT@50..51 \"x\"\n-              COMMA@51..52 \",\"\n-              WHITESPACE@52..53 \" \"\n-              RECORD_FIELD@53..58\n-                NAME_REF@53..54\n-                  IDENT@53..54 \"y\"\n-                COLON@54..55 \":\"\n-                WHITESPACE@55..56 \" \"\n-                LITERAL@56..58\n-                  INT_NUMBER@56..58 \"32\"\n-              COMMA@58..59 \",\"\n-              WHITESPACE@59..60 \" \"\n-              DOT2@60..62 \"..\"\n-              CALL_EXPR@62..80\n-                PATH_EXPR@62..78\n-                  PATH@62..78\n-                    PATH@62..69\n-                      PATH_SEGMENT@62..69\n-                        NAME_REF@62..69\n-                          IDENT@62..69 \"Default\"\n-                    COLON2@69..71 \"::\"\n-                    PATH_SEGMENT@71..78\n-                      NAME_REF@71..78\n-                        IDENT@71..78 \"default\"\n-                ARG_LIST@78..80\n-                  L_PAREN@78..79 \"(\"\n-                  R_PAREN@79..80 \")\"\n-              WHITESPACE@80..81 \" \"\n-              R_CURLY@81..82 \"}\"\n-          SEMICOLON@82..83 \";\"\n-        WHITESPACE@83..88 \"\\n    \"\n-        EXPR_STMT@88..109\n-          RECORD_LIT@88..108\n-            PATH@88..99\n-              PATH_SEGMENT@88..99\n-                NAME_REF@88..99\n-                  IDENT@88..99 \"TupleStruct\"\n-            WHITESPACE@99..100 \" \"\n-            RECORD_FIELD_LIST@100..108\n-              L_CURLY@100..101 \"{\"\n-              WHITESPACE@101..102 \" \"\n-              RECORD_FIELD@102..106\n-                NAME_REF@102..103\n-                  INT_NUMBER@102..103 \"0\"\n-                COLON@103..104 \":\"\n-                WHITESPACE@104..105 \" \"\n-                LITERAL@105..106\n-                  INT_NUMBER@105..106 \"1\"\n-              WHITESPACE@106..107 \" \"\n-              R_CURLY@107..108 \"}\"\n-          SEMICOLON@108..109 \";\"\n-        WHITESPACE@109..110 \"\\n\"\n-        R_CURLY@110..111 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..20\n+        RECORD_LIT@15..19\n+          PATH@15..16\n+            PATH_SEGMENT@15..16\n+              NAME_REF@15..16\n+                IDENT@15..16 \"S\"\n+          WHITESPACE@16..17 \" \"\n+          RECORD_FIELD_LIST@17..19\n+            L_CURLY@17..18 \"{\"\n+            R_CURLY@18..19 \"}\"\n+        SEMICOLON@19..20 \";\"\n+      WHITESPACE@20..25 \"\\n    \"\n+      EXPR_STMT@25..41\n+        RECORD_LIT@25..40\n+          PATH@25..26\n+            PATH_SEGMENT@25..26\n+              NAME_REF@25..26\n+                IDENT@25..26 \"S\"\n+          WHITESPACE@26..27 \" \"\n+          RECORD_FIELD_LIST@27..40\n+            L_CURLY@27..28 \"{\"\n+            WHITESPACE@28..29 \" \"\n+            RECORD_FIELD@29..30\n+              PATH_EXPR@29..30\n+                PATH@29..30\n+                  PATH_SEGMENT@29..30\n+                    NAME_REF@29..30\n+                      IDENT@29..30 \"x\"\n+            COMMA@30..31 \",\"\n+            WHITESPACE@31..32 \" \"\n+            RECORD_FIELD@32..37\n+              NAME_REF@32..33\n+                IDENT@32..33 \"y\"\n+              COLON@33..34 \":\"\n+              WHITESPACE@34..35 \" \"\n+              LITERAL@35..37\n+                INT_NUMBER@35..37 \"32\"\n+            COMMA@37..38 \",\"\n+            WHITESPACE@38..39 \" \"\n+            R_CURLY@39..40 \"}\"\n+        SEMICOLON@40..41 \";\"\n+      WHITESPACE@41..46 \"\\n    \"\n+      EXPR_STMT@46..83\n+        RECORD_LIT@46..82\n+          PATH@46..47\n+            PATH_SEGMENT@46..47\n+              NAME_REF@46..47\n+                IDENT@46..47 \"S\"\n+          WHITESPACE@47..48 \" \"\n+          RECORD_FIELD_LIST@48..82\n+            L_CURLY@48..49 \"{\"\n+            WHITESPACE@49..50 \" \"\n+            RECORD_FIELD@50..51\n+              PATH_EXPR@50..51\n+                PATH@50..51\n+                  PATH_SEGMENT@50..51\n+                    NAME_REF@50..51\n+                      IDENT@50..51 \"x\"\n+            COMMA@51..52 \",\"\n+            WHITESPACE@52..53 \" \"\n+            RECORD_FIELD@53..58\n+              NAME_REF@53..54\n+                IDENT@53..54 \"y\"\n+              COLON@54..55 \":\"\n+              WHITESPACE@55..56 \" \"\n+              LITERAL@56..58\n+                INT_NUMBER@56..58 \"32\"\n+            COMMA@58..59 \",\"\n+            WHITESPACE@59..60 \" \"\n+            DOT2@60..62 \"..\"\n+            CALL_EXPR@62..80\n+              PATH_EXPR@62..78\n+                PATH@62..78\n+                  PATH@62..69\n+                    PATH_SEGMENT@62..69\n+                      NAME_REF@62..69\n+                        IDENT@62..69 \"Default\"\n+                  COLON2@69..71 \"::\"\n+                  PATH_SEGMENT@71..78\n+                    NAME_REF@71..78\n+                      IDENT@71..78 \"default\"\n+              ARG_LIST@78..80\n+                L_PAREN@78..79 \"(\"\n+                R_PAREN@79..80 \")\"\n+            WHITESPACE@80..81 \" \"\n+            R_CURLY@81..82 \"}\"\n+        SEMICOLON@82..83 \";\"\n+      WHITESPACE@83..88 \"\\n    \"\n+      EXPR_STMT@88..109\n+        RECORD_LIT@88..108\n+          PATH@88..99\n+            PATH_SEGMENT@88..99\n+              NAME_REF@88..99\n+                IDENT@88..99 \"TupleStruct\"\n+          WHITESPACE@99..100 \" \"\n+          RECORD_FIELD_LIST@100..108\n+            L_CURLY@100..101 \"{\"\n+            WHITESPACE@101..102 \" \"\n+            RECORD_FIELD@102..106\n+              NAME_REF@102..103\n+                INT_NUMBER@102..103 \"0\"\n+              COLON@103..104 \":\"\n+              WHITESPACE@104..105 \" \"\n+              LITERAL@105..106\n+                INT_NUMBER@105..106 \"1\"\n+            WHITESPACE@106..107 \" \"\n+            R_CURLY@107..108 \"}\"\n+        SEMICOLON@108..109 \";\"\n+      WHITESPACE@109..110 \"\\n\"\n+      R_CURLY@110..111 \"}\"\n   WHITESPACE@111..112 \"\\n\""}, {"sha": "02656df31fd41da20c265307b0e11652e2148bc0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0062_mod_contents.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,9 +9,8 @@ SOURCE_FILE@0..70\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..11\n-      BLOCK@9..11\n-        L_CURLY@9..10 \"{\"\n-        R_CURLY@10..11 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      R_CURLY@10..11 \"}\"\n   WHITESPACE@11..12 \"\\n\"\n   MACRO_CALL@12..31\n     PATH@12..23"}, {"sha": "445d8d309f7819547410245c453e8e5387b7c9f0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0064_if_expr.rast", "status": "modified", "additions": 109, "deletions": 120, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,124 +9,113 @@ SOURCE_FILE@0..137\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..136\n-      BLOCK@9..136\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..26\n-          IF_EXPR@15..25\n-            IF_KW@15..17 \"if\"\n-            WHITESPACE@17..18 \" \"\n-            CONDITION@18..22\n-              LITERAL@18..22\n-                TRUE_KW@18..22 \"true\"\n-            WHITESPACE@22..23 \" \"\n-            BLOCK_EXPR@23..25\n-              BLOCK@23..25\n-                L_CURLY@23..24 \"{\"\n-                R_CURLY@24..25 \"}\"\n-          SEMICOLON@25..26 \";\"\n-        WHITESPACE@26..31 \"\\n    \"\n-        EXPR_STMT@31..50\n-          IF_EXPR@31..49\n-            IF_KW@31..33 \"if\"\n-            WHITESPACE@33..34 \" \"\n-            CONDITION@34..38\n-              LITERAL@34..38\n-                TRUE_KW@34..38 \"true\"\n-            WHITESPACE@38..39 \" \"\n-            BLOCK_EXPR@39..41\n-              BLOCK@39..41\n-                L_CURLY@39..40 \"{\"\n-                R_CURLY@40..41 \"}\"\n-            WHITESPACE@41..42 \" \"\n-            ELSE_KW@42..46 \"else\"\n-            WHITESPACE@46..47 \" \"\n-            BLOCK_EXPR@47..49\n-              BLOCK@47..49\n-                L_CURLY@47..48 \"{\"\n-                R_CURLY@48..49 \"}\"\n-          SEMICOLON@49..50 \";\"\n-        WHITESPACE@50..55 \"\\n    \"\n-        EXPR_STMT@55..91\n-          IF_EXPR@55..90\n-            IF_KW@55..57 \"if\"\n-            WHITESPACE@57..58 \" \"\n-            CONDITION@58..62\n-              LITERAL@58..62\n-                TRUE_KW@58..62 \"true\"\n-            WHITESPACE@62..63 \" \"\n-            BLOCK_EXPR@63..65\n-              BLOCK@63..65\n-                L_CURLY@63..64 \"{\"\n-                R_CURLY@64..65 \"}\"\n-            WHITESPACE@65..66 \" \"\n-            ELSE_KW@66..70 \"else\"\n-            WHITESPACE@70..71 \" \"\n-            IF_EXPR@71..90\n-              IF_KW@71..73 \"if\"\n-              WHITESPACE@73..74 \" \"\n-              CONDITION@74..79\n-                LITERAL@74..79\n-                  FALSE_KW@74..79 \"false\"\n-              WHITESPACE@79..80 \" \"\n-              BLOCK_EXPR@80..82\n-                BLOCK@80..82\n-                  L_CURLY@80..81 \"{\"\n-                  R_CURLY@81..82 \"}\"\n-              WHITESPACE@82..83 \" \"\n-              ELSE_KW@83..87 \"else\"\n-              WHITESPACE@87..88 \" \"\n-              BLOCK_EXPR@88..90\n-                BLOCK@88..90\n-                  L_CURLY@88..89 \"{\"\n-                  R_CURLY@89..90 \"}\"\n-          SEMICOLON@90..91 \";\"\n-        WHITESPACE@91..96 \"\\n    \"\n-        EXPR_STMT@96..104\n-          IF_EXPR@96..103\n-            IF_KW@96..98 \"if\"\n-            WHITESPACE@98..99 \" \"\n-            CONDITION@99..100\n-              PATH_EXPR@99..100\n-                PATH@99..100\n-                  PATH_SEGMENT@99..100\n-                    NAME_REF@99..100\n-                      IDENT@99..100 \"S\"\n-            WHITESPACE@100..101 \" \"\n-            BLOCK_EXPR@101..103\n-              BLOCK@101..103\n-                L_CURLY@101..102 \"{\"\n-                R_CURLY@102..103 \"}\"\n-          SEMICOLON@103..104 \";\"\n-        WHITESPACE@104..109 \"\\n    \"\n-        EXPR_STMT@109..134\n-          IF_EXPR@109..133\n-            IF_KW@109..111 \"if\"\n-            WHITESPACE@111..112 \" \"\n-            CONDITION@112..120\n-              BLOCK_EXPR@112..120\n-                BLOCK@112..120\n-                  L_CURLY@112..113 \"{\"\n-                  WHITESPACE@113..114 \" \"\n-                  LITERAL@114..118\n-                    TRUE_KW@114..118 \"true\"\n-                  WHITESPACE@118..119 \" \"\n-                  R_CURLY@119..120 \"}\"\n-            WHITESPACE@120..121 \" \"\n-            BLOCK_EXPR@121..124\n-              BLOCK@121..124\n-                L_CURLY@121..122 \"{\"\n-                WHITESPACE@122..123 \" \"\n-                R_CURLY@123..124 \"}\"\n-            WHITESPACE@124..125 \" \"\n-            ELSE_KW@125..129 \"else\"\n-            WHITESPACE@129..130 \" \"\n-            BLOCK_EXPR@130..133\n-              BLOCK@130..133\n-                L_CURLY@130..131 \"{\"\n-                WHITESPACE@131..132 \" \"\n-                R_CURLY@132..133 \"}\"\n-          SEMICOLON@133..134 \";\"\n-        WHITESPACE@134..135 \"\\n\"\n-        R_CURLY@135..136 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..26\n+        IF_EXPR@15..25\n+          IF_KW@15..17 \"if\"\n+          WHITESPACE@17..18 \" \"\n+          CONDITION@18..22\n+            LITERAL@18..22\n+              TRUE_KW@18..22 \"true\"\n+          WHITESPACE@22..23 \" \"\n+          BLOCK_EXPR@23..25\n+            L_CURLY@23..24 \"{\"\n+            R_CURLY@24..25 \"}\"\n+        SEMICOLON@25..26 \";\"\n+      WHITESPACE@26..31 \"\\n    \"\n+      EXPR_STMT@31..50\n+        IF_EXPR@31..49\n+          IF_KW@31..33 \"if\"\n+          WHITESPACE@33..34 \" \"\n+          CONDITION@34..38\n+            LITERAL@34..38\n+              TRUE_KW@34..38 \"true\"\n+          WHITESPACE@38..39 \" \"\n+          BLOCK_EXPR@39..41\n+            L_CURLY@39..40 \"{\"\n+            R_CURLY@40..41 \"}\"\n+          WHITESPACE@41..42 \" \"\n+          ELSE_KW@42..46 \"else\"\n+          WHITESPACE@46..47 \" \"\n+          BLOCK_EXPR@47..49\n+            L_CURLY@47..48 \"{\"\n+            R_CURLY@48..49 \"}\"\n+        SEMICOLON@49..50 \";\"\n+      WHITESPACE@50..55 \"\\n    \"\n+      EXPR_STMT@55..91\n+        IF_EXPR@55..90\n+          IF_KW@55..57 \"if\"\n+          WHITESPACE@57..58 \" \"\n+          CONDITION@58..62\n+            LITERAL@58..62\n+              TRUE_KW@58..62 \"true\"\n+          WHITESPACE@62..63 \" \"\n+          BLOCK_EXPR@63..65\n+            L_CURLY@63..64 \"{\"\n+            R_CURLY@64..65 \"}\"\n+          WHITESPACE@65..66 \" \"\n+          ELSE_KW@66..70 \"else\"\n+          WHITESPACE@70..71 \" \"\n+          IF_EXPR@71..90\n+            IF_KW@71..73 \"if\"\n+            WHITESPACE@73..74 \" \"\n+            CONDITION@74..79\n+              LITERAL@74..79\n+                FALSE_KW@74..79 \"false\"\n+            WHITESPACE@79..80 \" \"\n+            BLOCK_EXPR@80..82\n+              L_CURLY@80..81 \"{\"\n+              R_CURLY@81..82 \"}\"\n+            WHITESPACE@82..83 \" \"\n+            ELSE_KW@83..87 \"else\"\n+            WHITESPACE@87..88 \" \"\n+            BLOCK_EXPR@88..90\n+              L_CURLY@88..89 \"{\"\n+              R_CURLY@89..90 \"}\"\n+        SEMICOLON@90..91 \";\"\n+      WHITESPACE@91..96 \"\\n    \"\n+      EXPR_STMT@96..104\n+        IF_EXPR@96..103\n+          IF_KW@96..98 \"if\"\n+          WHITESPACE@98..99 \" \"\n+          CONDITION@99..100\n+            PATH_EXPR@99..100\n+              PATH@99..100\n+                PATH_SEGMENT@99..100\n+                  NAME_REF@99..100\n+                    IDENT@99..100 \"S\"\n+          WHITESPACE@100..101 \" \"\n+          BLOCK_EXPR@101..103\n+            L_CURLY@101..102 \"{\"\n+            R_CURLY@102..103 \"}\"\n+        SEMICOLON@103..104 \";\"\n+      WHITESPACE@104..109 \"\\n    \"\n+      EXPR_STMT@109..134\n+        IF_EXPR@109..133\n+          IF_KW@109..111 \"if\"\n+          WHITESPACE@111..112 \" \"\n+          CONDITION@112..120\n+            BLOCK_EXPR@112..120\n+              L_CURLY@112..113 \"{\"\n+              WHITESPACE@113..114 \" \"\n+              LITERAL@114..118\n+                TRUE_KW@114..118 \"true\"\n+              WHITESPACE@118..119 \" \"\n+              R_CURLY@119..120 \"}\"\n+          WHITESPACE@120..121 \" \"\n+          BLOCK_EXPR@121..124\n+            L_CURLY@121..122 \"{\"\n+            WHITESPACE@122..123 \" \"\n+            R_CURLY@123..124 \"}\"\n+          WHITESPACE@124..125 \" \"\n+          ELSE_KW@125..129 \"else\"\n+          WHITESPACE@129..130 \" \"\n+          BLOCK_EXPR@130..133\n+            L_CURLY@130..131 \"{\"\n+            WHITESPACE@131..132 \" \"\n+            R_CURLY@132..133 \"}\"\n+        SEMICOLON@133..134 \";\"\n+      WHITESPACE@134..135 \"\\n\"\n+      R_CURLY@135..136 \"}\"\n   WHITESPACE@136..137 \"\\n\""}, {"sha": "177bb5514a1ccb24fd57f3f1e30e697f3b9d7c61", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.rast", "status": "modified", "additions": 139, "deletions": 140, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,144 +9,143 @@ SOURCE_FILE@0..167\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..166\n-      BLOCK@9..166\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..164\n-          MATCH_EXPR@15..163\n-            MATCH_KW@15..20 \"match\"\n-            WHITESPACE@20..21 \" \"\n-            TUPLE_EXPR@21..23\n-              L_PAREN@21..22 \"(\"\n-              R_PAREN@22..23 \")\"\n-            WHITESPACE@23..24 \" \"\n-            MATCH_ARM_LIST@24..163\n-              L_CURLY@24..25 \"{\"\n-              WHITESPACE@25..34 \"\\n        \"\n-              MATCH_ARM@34..41\n-                PLACEHOLDER_PAT@34..35\n-                  UNDERSCORE@34..35 \"_\"\n-                WHITESPACE@35..36 \" \"\n-                FAT_ARROW@36..38 \"=>\"\n-                WHITESPACE@38..39 \" \"\n-                TUPLE_EXPR@39..41\n-                  L_PAREN@39..40 \"(\"\n-                  R_PAREN@40..41 \")\"\n-              COMMA@41..42 \",\"\n-              WHITESPACE@42..51 \"\\n        \"\n-              MATCH_ARM@51..83\n-                PLACEHOLDER_PAT@51..52\n-                  UNDERSCORE@51..52 \"_\"\n-                WHITESPACE@52..53 \" \"\n-                MATCH_GUARD@53..77\n-                  IF_KW@53..55 \"if\"\n-                  WHITESPACE@55..56 \" \"\n-                  BIN_EXPR@56..77\n-                    PATH_EXPR@56..60\n-                      PATH@56..60\n-                        PATH_SEGMENT@56..60\n-                          NAME_REF@56..60\n-                            IDENT@56..60 \"Test\"\n-                    WHITESPACE@60..61 \" \"\n-                    R_ANGLE@61..62 \">\"\n-                    WHITESPACE@62..63 \" \"\n-                    RECORD_LIT@63..77\n-                      PATH@63..67\n-                        PATH_SEGMENT@63..67\n-                          NAME_REF@63..67\n-                            IDENT@63..67 \"Test\"\n-                      RECORD_FIELD_LIST@67..77\n-                        L_CURLY@67..68 \"{\"\n-                        RECORD_FIELD@68..76\n-                          NAME_REF@68..73\n-                            IDENT@68..73 \"field\"\n-                          COLON@73..74 \":\"\n-                          WHITESPACE@74..75 \" \"\n-                          LITERAL@75..76\n-                            INT_NUMBER@75..76 \"0\"\n-                        R_CURLY@76..77 \"}\"\n-                WHITESPACE@77..78 \" \"\n-                FAT_ARROW@78..80 \"=>\"\n-                WHITESPACE@80..81 \" \"\n-                TUPLE_EXPR@81..83\n-                  L_PAREN@81..82 \"(\"\n-                  R_PAREN@82..83 \")\"\n-              COMMA@83..84 \",\"\n-              WHITESPACE@84..93 \"\\n        \"\n-              MATCH_ARM@93..109\n-                OR_PAT@93..98\n-                  BIND_PAT@93..94\n-                    NAME@93..94\n-                      IDENT@93..94 \"X\"\n-                  WHITESPACE@94..95 \" \"\n-                  PIPE@95..96 \"|\"\n-                  WHITESPACE@96..97 \" \"\n-                  BIND_PAT@97..98\n-                    NAME@97..98\n-                      IDENT@97..98 \"Y\"\n-                WHITESPACE@98..99 \" \"\n-                MATCH_GUARD@99..103\n-                  IF_KW@99..101 \"if\"\n-                  WHITESPACE@101..102 \" \"\n-                  PATH_EXPR@102..103\n-                    PATH@102..103\n-                      PATH_SEGMENT@102..103\n-                        NAME_REF@102..103\n-                          IDENT@102..103 \"Z\"\n-                WHITESPACE@103..104 \" \"\n-                FAT_ARROW@104..106 \"=>\"\n-                WHITESPACE@106..107 \" \"\n-                TUPLE_EXPR@107..109\n-                  L_PAREN@107..108 \"(\"\n-                  R_PAREN@108..109 \")\"\n-              COMMA@109..110 \",\"\n-              WHITESPACE@110..119 \"\\n        \"\n-              MATCH_ARM@119..137\n-                PIPE@119..120 \"|\"\n-                WHITESPACE@120..121 \" \"\n-                OR_PAT@121..126\n-                  BIND_PAT@121..122\n-                    NAME@121..122\n-                      IDENT@121..122 \"X\"\n-                  WHITESPACE@122..123 \" \"\n-                  PIPE@123..124 \"|\"\n-                  WHITESPACE@124..125 \" \"\n-                  BIND_PAT@125..126\n-                    NAME@125..126\n-                      IDENT@125..126 \"Y\"\n-                WHITESPACE@126..127 \" \"\n-                MATCH_GUARD@127..131\n-                  IF_KW@127..129 \"if\"\n-                  WHITESPACE@129..130 \" \"\n-                  PATH_EXPR@130..131\n-                    PATH@130..131\n-                      PATH_SEGMENT@130..131\n-                        NAME_REF@130..131\n-                          IDENT@130..131 \"Z\"\n-                WHITESPACE@131..132 \" \"\n-                FAT_ARROW@132..134 \"=>\"\n-                WHITESPACE@134..135 \" \"\n-                TUPLE_EXPR@135..137\n-                  L_PAREN@135..136 \"(\"\n-                  R_PAREN@136..137 \")\"\n-              COMMA@137..138 \",\"\n-              WHITESPACE@138..147 \"\\n        \"\n-              MATCH_ARM@147..156\n-                PIPE@147..148 \"|\"\n-                WHITESPACE@148..149 \" \"\n-                BIND_PAT@149..150\n-                  NAME@149..150\n-                    IDENT@149..150 \"X\"\n-                WHITESPACE@150..151 \" \"\n-                FAT_ARROW@151..153 \"=>\"\n-                WHITESPACE@153..154 \" \"\n-                TUPLE_EXPR@154..156\n-                  L_PAREN@154..155 \"(\"\n-                  R_PAREN@155..156 \")\"\n-              COMMA@156..157 \",\"\n-              WHITESPACE@157..162 \"\\n    \"\n-              R_CURLY@162..163 \"}\"\n-          SEMICOLON@163..164 \";\"\n-        WHITESPACE@164..165 \"\\n\"\n-        R_CURLY@165..166 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..164\n+        MATCH_EXPR@15..163\n+          MATCH_KW@15..20 \"match\"\n+          WHITESPACE@20..21 \" \"\n+          TUPLE_EXPR@21..23\n+            L_PAREN@21..22 \"(\"\n+            R_PAREN@22..23 \")\"\n+          WHITESPACE@23..24 \" \"\n+          MATCH_ARM_LIST@24..163\n+            L_CURLY@24..25 \"{\"\n+            WHITESPACE@25..34 \"\\n        \"\n+            MATCH_ARM@34..41\n+              PLACEHOLDER_PAT@34..35\n+                UNDERSCORE@34..35 \"_\"\n+              WHITESPACE@35..36 \" \"\n+              FAT_ARROW@36..38 \"=>\"\n+              WHITESPACE@38..39 \" \"\n+              TUPLE_EXPR@39..41\n+                L_PAREN@39..40 \"(\"\n+                R_PAREN@40..41 \")\"\n+            COMMA@41..42 \",\"\n+            WHITESPACE@42..51 \"\\n        \"\n+            MATCH_ARM@51..83\n+              PLACEHOLDER_PAT@51..52\n+                UNDERSCORE@51..52 \"_\"\n+              WHITESPACE@52..53 \" \"\n+              MATCH_GUARD@53..77\n+                IF_KW@53..55 \"if\"\n+                WHITESPACE@55..56 \" \"\n+                BIN_EXPR@56..77\n+                  PATH_EXPR@56..60\n+                    PATH@56..60\n+                      PATH_SEGMENT@56..60\n+                        NAME_REF@56..60\n+                          IDENT@56..60 \"Test\"\n+                  WHITESPACE@60..61 \" \"\n+                  R_ANGLE@61..62 \">\"\n+                  WHITESPACE@62..63 \" \"\n+                  RECORD_LIT@63..77\n+                    PATH@63..67\n+                      PATH_SEGMENT@63..67\n+                        NAME_REF@63..67\n+                          IDENT@63..67 \"Test\"\n+                    RECORD_FIELD_LIST@67..77\n+                      L_CURLY@67..68 \"{\"\n+                      RECORD_FIELD@68..76\n+                        NAME_REF@68..73\n+                          IDENT@68..73 \"field\"\n+                        COLON@73..74 \":\"\n+                        WHITESPACE@74..75 \" \"\n+                        LITERAL@75..76\n+                          INT_NUMBER@75..76 \"0\"\n+                      R_CURLY@76..77 \"}\"\n+              WHITESPACE@77..78 \" \"\n+              FAT_ARROW@78..80 \"=>\"\n+              WHITESPACE@80..81 \" \"\n+              TUPLE_EXPR@81..83\n+                L_PAREN@81..82 \"(\"\n+                R_PAREN@82..83 \")\"\n+            COMMA@83..84 \",\"\n+            WHITESPACE@84..93 \"\\n        \"\n+            MATCH_ARM@93..109\n+              OR_PAT@93..98\n+                BIND_PAT@93..94\n+                  NAME@93..94\n+                    IDENT@93..94 \"X\"\n+                WHITESPACE@94..95 \" \"\n+                PIPE@95..96 \"|\"\n+                WHITESPACE@96..97 \" \"\n+                BIND_PAT@97..98\n+                  NAME@97..98\n+                    IDENT@97..98 \"Y\"\n+              WHITESPACE@98..99 \" \"\n+              MATCH_GUARD@99..103\n+                IF_KW@99..101 \"if\"\n+                WHITESPACE@101..102 \" \"\n+                PATH_EXPR@102..103\n+                  PATH@102..103\n+                    PATH_SEGMENT@102..103\n+                      NAME_REF@102..103\n+                        IDENT@102..103 \"Z\"\n+              WHITESPACE@103..104 \" \"\n+              FAT_ARROW@104..106 \"=>\"\n+              WHITESPACE@106..107 \" \"\n+              TUPLE_EXPR@107..109\n+                L_PAREN@107..108 \"(\"\n+                R_PAREN@108..109 \")\"\n+            COMMA@109..110 \",\"\n+            WHITESPACE@110..119 \"\\n        \"\n+            MATCH_ARM@119..137\n+              PIPE@119..120 \"|\"\n+              WHITESPACE@120..121 \" \"\n+              OR_PAT@121..126\n+                BIND_PAT@121..122\n+                  NAME@121..122\n+                    IDENT@121..122 \"X\"\n+                WHITESPACE@122..123 \" \"\n+                PIPE@123..124 \"|\"\n+                WHITESPACE@124..125 \" \"\n+                BIND_PAT@125..126\n+                  NAME@125..126\n+                    IDENT@125..126 \"Y\"\n+              WHITESPACE@126..127 \" \"\n+              MATCH_GUARD@127..131\n+                IF_KW@127..129 \"if\"\n+                WHITESPACE@129..130 \" \"\n+                PATH_EXPR@130..131\n+                  PATH@130..131\n+                    PATH_SEGMENT@130..131\n+                      NAME_REF@130..131\n+                        IDENT@130..131 \"Z\"\n+              WHITESPACE@131..132 \" \"\n+              FAT_ARROW@132..134 \"=>\"\n+              WHITESPACE@134..135 \" \"\n+              TUPLE_EXPR@135..137\n+                L_PAREN@135..136 \"(\"\n+                R_PAREN@136..137 \")\"\n+            COMMA@137..138 \",\"\n+            WHITESPACE@138..147 \"\\n        \"\n+            MATCH_ARM@147..156\n+              PIPE@147..148 \"|\"\n+              WHITESPACE@148..149 \" \"\n+              BIND_PAT@149..150\n+                NAME@149..150\n+                  IDENT@149..150 \"X\"\n+              WHITESPACE@150..151 \" \"\n+              FAT_ARROW@151..153 \"=>\"\n+              WHITESPACE@153..154 \" \"\n+              TUPLE_EXPR@154..156\n+                L_PAREN@154..155 \"(\"\n+                R_PAREN@155..156 \")\"\n+            COMMA@156..157 \",\"\n+            WHITESPACE@157..162 \"\\n    \"\n+            R_CURLY@162..163 \"}\"\n+        SEMICOLON@163..164 \";\"\n+      WHITESPACE@164..165 \"\\n\"\n+      R_CURLY@165..166 \"}\"\n   WHITESPACE@166..167 \"\\n\""}, {"sha": "f8ff7079b55b1e79d91e25eb30f1e7858d18e55f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0070_stmt_bin_expr_ambiguity.rast", "status": "modified", "additions": 38, "deletions": 41, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,45 +9,42 @@ SOURCE_FILE@0..46\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..45\n-      BLOCK@9..45\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..31\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PLACEHOLDER_PAT@19..20\n-            UNDERSCORE@19..20 \"_\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          BIN_EXPR@23..30\n-            BLOCK_EXPR@23..26\n-              BLOCK@23..26\n-                L_CURLY@23..24 \"{\"\n-                LITERAL@24..25\n-                  INT_NUMBER@24..25 \"1\"\n-                R_CURLY@25..26 \"}\"\n-            WHITESPACE@26..27 \" \"\n-            AMP@27..28 \"&\"\n-            WHITESPACE@28..29 \" \"\n-            LITERAL@29..30\n-              INT_NUMBER@29..30 \"2\"\n-          SEMICOLON@30..31 \";\"\n-        WHITESPACE@31..36 \"\\n    \"\n-        EXPR_STMT@36..39\n-          BLOCK_EXPR@36..39\n-            BLOCK@36..39\n-              L_CURLY@36..37 \"{\"\n-              LITERAL@37..38\n-                INT_NUMBER@37..38 \"1\"\n-              R_CURLY@38..39 \"}\"\n-        WHITESPACE@39..40 \" \"\n-        EXPR_STMT@40..43\n-          REF_EXPR@40..42\n-            AMP@40..41 \"&\"\n-            LITERAL@41..42\n-              INT_NUMBER@41..42 \"2\"\n-          SEMICOLON@42..43 \";\"\n-        WHITESPACE@43..44 \"\\n\"\n-        R_CURLY@44..45 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..31\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PLACEHOLDER_PAT@19..20\n+          UNDERSCORE@19..20 \"_\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        BIN_EXPR@23..30\n+          BLOCK_EXPR@23..26\n+            L_CURLY@23..24 \"{\"\n+            LITERAL@24..25\n+              INT_NUMBER@24..25 \"1\"\n+            R_CURLY@25..26 \"}\"\n+          WHITESPACE@26..27 \" \"\n+          AMP@27..28 \"&\"\n+          WHITESPACE@28..29 \" \"\n+          LITERAL@29..30\n+            INT_NUMBER@29..30 \"2\"\n+        SEMICOLON@30..31 \";\"\n+      WHITESPACE@31..36 \"\\n    \"\n+      EXPR_STMT@36..39\n+        BLOCK_EXPR@36..39\n+          L_CURLY@36..37 \"{\"\n+          LITERAL@37..38\n+            INT_NUMBER@37..38 \"1\"\n+          R_CURLY@38..39 \"}\"\n+      WHITESPACE@39..40 \" \"\n+      EXPR_STMT@40..43\n+        REF_EXPR@40..42\n+          AMP@40..41 \"&\"\n+          LITERAL@41..42\n+            INT_NUMBER@41..42 \"2\"\n+        SEMICOLON@42..43 \";\"\n+      WHITESPACE@43..44 \"\\n\"\n+      R_CURLY@44..45 \"}\"\n   WHITESPACE@45..46 \"\\n\""}, {"sha": "07b3d14351384b5016c709f88bf8f2bdddaccccf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0071_match_expr.rast", "status": "modified", "additions": 81, "deletions": 84, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,88 +9,85 @@ SOURCE_FILE@0..97\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..96\n-      BLOCK@9..96\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..28\n-          MATCH_EXPR@15..27\n-            MATCH_KW@15..20 \"match\"\n-            WHITESPACE@20..21 \" \"\n-            TUPLE_EXPR@21..23\n-              L_PAREN@21..22 \"(\"\n-              R_PAREN@22..23 \")\"\n-            WHITESPACE@23..24 \" \"\n-            MATCH_ARM_LIST@24..27\n-              L_CURLY@24..25 \"{\"\n-              WHITESPACE@25..26 \" \"\n-              R_CURLY@26..27 \"}\"\n-          SEMICOLON@27..28 \";\"\n-        WHITESPACE@28..33 \"\\n    \"\n-        EXPR_STMT@33..44\n-          MATCH_EXPR@33..43\n-            MATCH_KW@33..38 \"match\"\n-            WHITESPACE@38..39 \" \"\n-            PATH_EXPR@39..40\n-              PATH@39..40\n-                PATH_SEGMENT@39..40\n-                  NAME_REF@39..40\n-                    IDENT@39..40 \"S\"\n-            WHITESPACE@40..41 \" \"\n-            MATCH_ARM_LIST@41..43\n-              L_CURLY@41..42 \"{\"\n-              R_CURLY@42..43 \"}\"\n-          SEMICOLON@43..44 \";\"\n-        WHITESPACE@44..49 \"\\n    \"\n-        EXPR_STMT@49..71\n-          MATCH_EXPR@49..70\n-            MATCH_KW@49..54 \"match\"\n-            WHITESPACE@54..55 \" \"\n-            BLOCK_EXPR@55..58\n-              BLOCK@55..58\n-                L_CURLY@55..56 \"{\"\n-                WHITESPACE@56..57 \" \"\n-                R_CURLY@57..58 \"}\"\n-            WHITESPACE@58..59 \" \"\n-            MATCH_ARM_LIST@59..70\n-              L_CURLY@59..60 \"{\"\n-              WHITESPACE@60..61 \" \"\n-              MATCH_ARM@61..68\n-                PLACEHOLDER_PAT@61..62\n-                  UNDERSCORE@61..62 \"_\"\n-                WHITESPACE@62..63 \" \"\n-                FAT_ARROW@63..65 \"=>\"\n-                WHITESPACE@65..66 \" \"\n-                TUPLE_EXPR@66..68\n-                  L_PAREN@66..67 \"(\"\n-                  R_PAREN@67..68 \")\"\n-              WHITESPACE@68..69 \" \"\n-              R_CURLY@69..70 \"}\"\n-          SEMICOLON@70..71 \";\"\n-        WHITESPACE@71..76 \"\\n    \"\n-        EXPR_STMT@76..94\n-          MATCH_EXPR@76..93\n-            MATCH_KW@76..81 \"match\"\n-            WHITESPACE@81..82 \" \"\n-            BLOCK_EXPR@82..90\n-              BLOCK@82..90\n-                L_CURLY@82..83 \"{\"\n-                WHITESPACE@83..84 \" \"\n-                RECORD_LIT@84..88\n-                  PATH@84..85\n-                    PATH_SEGMENT@84..85\n-                      NAME_REF@84..85\n-                        IDENT@84..85 \"S\"\n-                  WHITESPACE@85..86 \" \"\n-                  RECORD_FIELD_LIST@86..88\n-                    L_CURLY@86..87 \"{\"\n-                    R_CURLY@87..88 \"}\"\n-                WHITESPACE@88..89 \" \"\n-                R_CURLY@89..90 \"}\"\n-            WHITESPACE@90..91 \" \"\n-            MATCH_ARM_LIST@91..93\n-              L_CURLY@91..92 \"{\"\n-              R_CURLY@92..93 \"}\"\n-          SEMICOLON@93..94 \";\"\n-        WHITESPACE@94..95 \"\\n\"\n-        R_CURLY@95..96 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..28\n+        MATCH_EXPR@15..27\n+          MATCH_KW@15..20 \"match\"\n+          WHITESPACE@20..21 \" \"\n+          TUPLE_EXPR@21..23\n+            L_PAREN@21..22 \"(\"\n+            R_PAREN@22..23 \")\"\n+          WHITESPACE@23..24 \" \"\n+          MATCH_ARM_LIST@24..27\n+            L_CURLY@24..25 \"{\"\n+            WHITESPACE@25..26 \" \"\n+            R_CURLY@26..27 \"}\"\n+        SEMICOLON@27..28 \";\"\n+      WHITESPACE@28..33 \"\\n    \"\n+      EXPR_STMT@33..44\n+        MATCH_EXPR@33..43\n+          MATCH_KW@33..38 \"match\"\n+          WHITESPACE@38..39 \" \"\n+          PATH_EXPR@39..40\n+            PATH@39..40\n+              PATH_SEGMENT@39..40\n+                NAME_REF@39..40\n+                  IDENT@39..40 \"S\"\n+          WHITESPACE@40..41 \" \"\n+          MATCH_ARM_LIST@41..43\n+            L_CURLY@41..42 \"{\"\n+            R_CURLY@42..43 \"}\"\n+        SEMICOLON@43..44 \";\"\n+      WHITESPACE@44..49 \"\\n    \"\n+      EXPR_STMT@49..71\n+        MATCH_EXPR@49..70\n+          MATCH_KW@49..54 \"match\"\n+          WHITESPACE@54..55 \" \"\n+          BLOCK_EXPR@55..58\n+            L_CURLY@55..56 \"{\"\n+            WHITESPACE@56..57 \" \"\n+            R_CURLY@57..58 \"}\"\n+          WHITESPACE@58..59 \" \"\n+          MATCH_ARM_LIST@59..70\n+            L_CURLY@59..60 \"{\"\n+            WHITESPACE@60..61 \" \"\n+            MATCH_ARM@61..68\n+              PLACEHOLDER_PAT@61..62\n+                UNDERSCORE@61..62 \"_\"\n+              WHITESPACE@62..63 \" \"\n+              FAT_ARROW@63..65 \"=>\"\n+              WHITESPACE@65..66 \" \"\n+              TUPLE_EXPR@66..68\n+                L_PAREN@66..67 \"(\"\n+                R_PAREN@67..68 \")\"\n+            WHITESPACE@68..69 \" \"\n+            R_CURLY@69..70 \"}\"\n+        SEMICOLON@70..71 \";\"\n+      WHITESPACE@71..76 \"\\n    \"\n+      EXPR_STMT@76..94\n+        MATCH_EXPR@76..93\n+          MATCH_KW@76..81 \"match\"\n+          WHITESPACE@81..82 \" \"\n+          BLOCK_EXPR@82..90\n+            L_CURLY@82..83 \"{\"\n+            WHITESPACE@83..84 \" \"\n+            RECORD_LIT@84..88\n+              PATH@84..85\n+                PATH_SEGMENT@84..85\n+                  NAME_REF@84..85\n+                    IDENT@84..85 \"S\"\n+              WHITESPACE@85..86 \" \"\n+              RECORD_FIELD_LIST@86..88\n+                L_CURLY@86..87 \"{\"\n+                R_CURLY@87..88 \"}\"\n+            WHITESPACE@88..89 \" \"\n+            R_CURLY@89..90 \"}\"\n+          WHITESPACE@90..91 \" \"\n+          MATCH_ARM_LIST@91..93\n+            L_CURLY@91..92 \"{\"\n+            R_CURLY@92..93 \"}\"\n+        SEMICOLON@93..94 \";\"\n+      WHITESPACE@94..95 \"\\n\"\n+      R_CURLY@95..96 \"}\"\n   WHITESPACE@96..97 \"\\n\""}, {"sha": "665f716a8693f1fd356ebb75dff250241052ff9b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0072_return_expr.rast", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,21 +9,20 @@ SOURCE_FILE@0..40\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..39\n-      BLOCK@9..39\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..22\n-          RETURN_EXPR@15..21\n-            RETURN_KW@15..21 \"return\"\n-          SEMICOLON@21..22 \";\"\n-        WHITESPACE@22..27 \"\\n    \"\n-        EXPR_STMT@27..37\n-          RETURN_EXPR@27..36\n-            RETURN_KW@27..33 \"return\"\n-            WHITESPACE@33..34 \" \"\n-            LITERAL@34..36\n-              INT_NUMBER@34..36 \"92\"\n-          SEMICOLON@36..37 \";\"\n-        WHITESPACE@37..38 \"\\n\"\n-        R_CURLY@38..39 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..22\n+        RETURN_EXPR@15..21\n+          RETURN_KW@15..21 \"return\"\n+        SEMICOLON@21..22 \";\"\n+      WHITESPACE@22..27 \"\\n    \"\n+      EXPR_STMT@27..37\n+        RETURN_EXPR@27..36\n+          RETURN_KW@27..33 \"return\"\n+          WHITESPACE@33..34 \" \"\n+          LITERAL@34..36\n+            INT_NUMBER@34..36 \"92\"\n+        SEMICOLON@36..37 \";\"\n+      WHITESPACE@37..38 \"\\n\"\n+      R_CURLY@38..39 \"}\"\n   WHITESPACE@39..40 \"\\n\""}, {"sha": "3fd3a4391d320657550a05a2eaeb8bad03a9d099", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0074_stmt_postfix_expr_ambiguity.rast", "status": "modified", "additions": 47, "deletions": 51, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0074_stmt_postfix_expr_ambiguity.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0074_stmt_postfix_expr_ambiguity.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0074_stmt_postfix_expr_ambiguity.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,55 +9,51 @@ SOURCE_FILE@0..84\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..83\n-      BLOCK@9..83\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        MATCH_EXPR@15..81\n-          MATCH_KW@15..20 \"match\"\n-          WHITESPACE@20..21 \" \"\n-          TUPLE_EXPR@21..23\n-            L_PAREN@21..22 \"(\"\n-            R_PAREN@22..23 \")\"\n-          WHITESPACE@23..24 \" \"\n-          MATCH_ARM_LIST@24..81\n-            L_CURLY@24..25 \"{\"\n-            WHITESPACE@25..34 \"\\n        \"\n-            MATCH_ARM@34..41\n-              PLACEHOLDER_PAT@34..35\n-                UNDERSCORE@34..35 \"_\"\n-              WHITESPACE@35..36 \" \"\n-              FAT_ARROW@36..38 \"=>\"\n-              WHITESPACE@38..39 \" \"\n-              BLOCK_EXPR@39..41\n-                BLOCK@39..41\n-                  L_CURLY@39..40 \"{\"\n-                  R_CURLY@40..41 \"}\"\n-            WHITESPACE@41..50 \"\\n        \"\n-            MATCH_ARM@50..58\n-              TUPLE_PAT@50..52\n-                L_PAREN@50..51 \"(\"\n-                R_PAREN@51..52 \")\"\n-              WHITESPACE@52..53 \" \"\n-              FAT_ARROW@53..55 \"=>\"\n-              WHITESPACE@55..56 \" \"\n-              BLOCK_EXPR@56..58\n-                BLOCK@56..58\n-                  L_CURLY@56..57 \"{\"\n-                  R_CURLY@57..58 \"}\"\n-            WHITESPACE@58..67 \"\\n        \"\n-            MATCH_ARM@67..75\n-              SLICE_PAT@67..69\n-                L_BRACK@67..68 \"[\"\n-                R_BRACK@68..69 \"]\"\n-              WHITESPACE@69..70 \" \"\n-              FAT_ARROW@70..72 \"=>\"\n-              WHITESPACE@72..73 \" \"\n-              BLOCK_EXPR@73..75\n-                BLOCK@73..75\n-                  L_CURLY@73..74 \"{\"\n-                  R_CURLY@74..75 \"}\"\n-            WHITESPACE@75..80 \"\\n    \"\n-            R_CURLY@80..81 \"}\"\n-        WHITESPACE@81..82 \"\\n\"\n-        R_CURLY@82..83 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      MATCH_EXPR@15..81\n+        MATCH_KW@15..20 \"match\"\n+        WHITESPACE@20..21 \" \"\n+        TUPLE_EXPR@21..23\n+          L_PAREN@21..22 \"(\"\n+          R_PAREN@22..23 \")\"\n+        WHITESPACE@23..24 \" \"\n+        MATCH_ARM_LIST@24..81\n+          L_CURLY@24..25 \"{\"\n+          WHITESPACE@25..34 \"\\n        \"\n+          MATCH_ARM@34..41\n+            PLACEHOLDER_PAT@34..35\n+              UNDERSCORE@34..35 \"_\"\n+            WHITESPACE@35..36 \" \"\n+            FAT_ARROW@36..38 \"=>\"\n+            WHITESPACE@38..39 \" \"\n+            BLOCK_EXPR@39..41\n+              L_CURLY@39..40 \"{\"\n+              R_CURLY@40..41 \"}\"\n+          WHITESPACE@41..50 \"\\n        \"\n+          MATCH_ARM@50..58\n+            TUPLE_PAT@50..52\n+              L_PAREN@50..51 \"(\"\n+              R_PAREN@51..52 \")\"\n+            WHITESPACE@52..53 \" \"\n+            FAT_ARROW@53..55 \"=>\"\n+            WHITESPACE@55..56 \" \"\n+            BLOCK_EXPR@56..58\n+              L_CURLY@56..57 \"{\"\n+              R_CURLY@57..58 \"}\"\n+          WHITESPACE@58..67 \"\\n        \"\n+          MATCH_ARM@67..75\n+            SLICE_PAT@67..69\n+              L_BRACK@67..68 \"[\"\n+              R_BRACK@68..69 \"]\"\n+            WHITESPACE@69..70 \" \"\n+            FAT_ARROW@70..72 \"=>\"\n+            WHITESPACE@72..73 \" \"\n+            BLOCK_EXPR@73..75\n+              L_CURLY@73..74 \"{\"\n+              R_CURLY@74..75 \"}\"\n+          WHITESPACE@75..80 \"\\n    \"\n+          R_CURLY@80..81 \"}\"\n+      WHITESPACE@81..82 \"\\n\"\n+      R_CURLY@82..83 \"}\"\n   WHITESPACE@83..84 \"\\n\""}, {"sha": "97c6e6a9dd7884069279807edf60edd6d60cb35c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0075_block.rast", "status": "modified", "additions": 41, "deletions": 45, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,9 +9,8 @@ SOURCE_FILE@0..65\n       R_PAREN@5..6 \")\"\n     WHITESPACE@6..7 \" \"\n     BLOCK_EXPR@7..9\n-      BLOCK@7..9\n-        L_CURLY@7..8 \"{\"\n-        R_CURLY@8..9 \"}\"\n+      L_CURLY@7..8 \"{\"\n+      R_CURLY@8..9 \"}\"\n   WHITESPACE@9..10 \"\\n\"\n   FN_DEF@10..31\n     FN_KW@10..12 \"fn\"\n@@ -23,22 +22,21 @@ SOURCE_FILE@0..65\n       R_PAREN@15..16 \")\"\n     WHITESPACE@16..17 \" \"\n     BLOCK_EXPR@17..31\n-      BLOCK@17..31\n-        L_CURLY@17..18 \"{\"\n-        WHITESPACE@18..19 \" \"\n-        LET_STMT@19..29\n-          LET_KW@19..22 \"let\"\n-          WHITESPACE@22..23 \" \"\n-          PLACEHOLDER_PAT@23..24\n-            UNDERSCORE@23..24 \"_\"\n-          WHITESPACE@24..25 \" \"\n-          EQ@25..26 \"=\"\n-          WHITESPACE@26..27 \" \"\n-          LITERAL@27..28\n-            INT_NUMBER@27..28 \"1\"\n-          SEMICOLON@28..29 \";\"\n-        WHITESPACE@29..30 \" \"\n-        R_CURLY@30..31 \"}\"\n+      L_CURLY@17..18 \"{\"\n+      WHITESPACE@18..19 \" \"\n+      LET_STMT@19..29\n+        LET_KW@19..22 \"let\"\n+        WHITESPACE@22..23 \" \"\n+        PLACEHOLDER_PAT@23..24\n+          UNDERSCORE@23..24 \"_\"\n+        WHITESPACE@24..25 \" \"\n+        EQ@25..26 \"=\"\n+        WHITESPACE@26..27 \" \"\n+        LITERAL@27..28\n+          INT_NUMBER@27..28 \"1\"\n+        SEMICOLON@28..29 \";\"\n+      WHITESPACE@29..30 \" \"\n+      R_CURLY@30..31 \"}\"\n   WHITESPACE@31..32 \"\\n\"\n   FN_DEF@32..48\n     FN_KW@32..34 \"fn\"\n@@ -50,20 +48,19 @@ SOURCE_FILE@0..65\n       R_PAREN@37..38 \")\"\n     WHITESPACE@38..39 \" \"\n     BLOCK_EXPR@39..48\n-      BLOCK@39..48\n-        L_CURLY@39..40 \"{\"\n-        WHITESPACE@40..41 \" \"\n-        EXPR_STMT@41..43\n-          LITERAL@41..42\n-            INT_NUMBER@41..42 \"1\"\n-          SEMICOLON@42..43 \";\"\n-        WHITESPACE@43..44 \" \"\n-        EXPR_STMT@44..46\n-          LITERAL@44..45\n-            INT_NUMBER@44..45 \"2\"\n-          SEMICOLON@45..46 \";\"\n-        WHITESPACE@46..47 \" \"\n-        R_CURLY@47..48 \"}\"\n+      L_CURLY@39..40 \"{\"\n+      WHITESPACE@40..41 \" \"\n+      EXPR_STMT@41..43\n+        LITERAL@41..42\n+          INT_NUMBER@41..42 \"1\"\n+        SEMICOLON@42..43 \";\"\n+      WHITESPACE@43..44 \" \"\n+      EXPR_STMT@44..46\n+        LITERAL@44..45\n+          INT_NUMBER@44..45 \"2\"\n+        SEMICOLON@45..46 \";\"\n+      WHITESPACE@46..47 \" \"\n+      R_CURLY@47..48 \"}\"\n   WHITESPACE@48..49 \"\\n\"\n   FN_DEF@49..64\n     FN_KW@49..51 \"fn\"\n@@ -75,16 +72,15 @@ SOURCE_FILE@0..65\n       R_PAREN@54..55 \")\"\n     WHITESPACE@55..56 \" \"\n     BLOCK_EXPR@56..64\n-      BLOCK@56..64\n-        L_CURLY@56..57 \"{\"\n-        WHITESPACE@57..58 \" \"\n-        EXPR_STMT@58..60\n-          LITERAL@58..59\n-            INT_NUMBER@58..59 \"1\"\n-          SEMICOLON@59..60 \";\"\n-        WHITESPACE@60..61 \" \"\n-        LITERAL@61..62\n-          INT_NUMBER@61..62 \"2\"\n-        WHITESPACE@62..63 \" \"\n-        R_CURLY@63..64 \"}\"\n+      L_CURLY@56..57 \"{\"\n+      WHITESPACE@57..58 \" \"\n+      EXPR_STMT@58..60\n+        LITERAL@58..59\n+          INT_NUMBER@58..59 \"1\"\n+        SEMICOLON@59..60 \";\"\n+      WHITESPACE@60..61 \" \"\n+      LITERAL@61..62\n+        INT_NUMBER@61..62 \"2\"\n+      WHITESPACE@62..63 \" \"\n+      R_CURLY@63..64 \"}\"\n   WHITESPACE@64..65 \"\\n\""}, {"sha": "e2c1a507de5dd1e5af6fe94f8f39f767872667ce", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0076_function_where_clause.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0076_function_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0076_function_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0076_function_where_clause.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -34,7 +34,6 @@ SOURCE_FILE@0..29\n                     IDENT@21..25 \"Copy\"\n     WHITESPACE@25..26 \" \"\n     BLOCK_EXPR@26..28\n-      BLOCK@26..28\n-        L_CURLY@26..27 \"{\"\n-        R_CURLY@27..28 \"}\"\n+      L_CURLY@26..27 \"{\"\n+      R_CURLY@27..28 \"}\"\n   WHITESPACE@28..29 \"\\n\""}, {"sha": "4f3a8ed24e6469fc1d34fc88ed6ea21eb22e1cc7", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0077_try_expr.rast", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,18 +9,17 @@ SOURCE_FILE@0..21\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..20\n-      BLOCK@9..20\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..18\n-          TRY_EXPR@15..17\n-            PATH_EXPR@15..16\n-              PATH@15..16\n-                PATH_SEGMENT@15..16\n-                  NAME_REF@15..16\n-                    IDENT@15..16 \"x\"\n-            QUESTION@16..17 \"?\"\n-          SEMICOLON@17..18 \";\"\n-        WHITESPACE@18..19 \"\\n\"\n-        R_CURLY@19..20 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..18\n+        TRY_EXPR@15..17\n+          PATH_EXPR@15..16\n+            PATH@15..16\n+              PATH_SEGMENT@15..16\n+                NAME_REF@15..16\n+                  IDENT@15..16 \"x\"\n+          QUESTION@16..17 \"?\"\n+        SEMICOLON@17..18 \";\"\n+      WHITESPACE@18..19 \"\\n\"\n+      R_CURLY@19..20 \"}\"\n   WHITESPACE@20..21 \"\\n\""}, {"sha": "462d1a8bb070ced49e62245872d8c7b45d6e26c8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0080_postfix_range.rast", "status": "modified", "additions": 83, "deletions": 84, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,88 +9,87 @@ SOURCE_FILE@0..89\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..88\n-      BLOCK@9..88\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..27\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          BIND_PAT@19..20\n-            NAME@19..20\n-              IDENT@19..20 \"x\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          RANGE_EXPR@23..26\n-            LITERAL@23..24\n-              INT_NUMBER@23..24 \"1\"\n-            DOT2@24..26 \"..\"\n-          SEMICOLON@26..27 \";\"\n-        WHITESPACE@27..32 \"\\n    \"\n-        EXPR_STMT@32..54\n-          MATCH_EXPR@32..53\n-            MATCH_KW@32..37 \"match\"\n-            WHITESPACE@37..38 \" \"\n-            RANGE_EXPR@38..41\n-              LITERAL@38..39\n-                INT_NUMBER@38..39 \"1\"\n-              DOT2@39..41 \"..\"\n-            WHITESPACE@41..42 \" \"\n-            MATCH_ARM_LIST@42..53\n-              L_CURLY@42..43 \"{\"\n-              WHITESPACE@43..44 \" \"\n-              MATCH_ARM@44..51\n-                PLACEHOLDER_PAT@44..45\n-                  UNDERSCORE@44..45 \"_\"\n-                WHITESPACE@45..46 \" \"\n-                FAT_ARROW@46..48 \"=>\"\n-                WHITESPACE@48..49 \" \"\n-                TUPLE_EXPR@49..51\n-                  L_PAREN@49..50 \"(\"\n-                  R_PAREN@50..51 \")\"\n-              WHITESPACE@51..52 \" \"\n-              R_CURLY@52..53 \"}\"\n-          SEMICOLON@53..54 \";\"\n-        WHITESPACE@54..59 \"\\n    \"\n-        EXPR_STMT@59..86\n-          MATCH_EXPR@59..85\n-            MATCH_KW@59..64 \"match\"\n-            WHITESPACE@64..65 \" \"\n-            RANGE_EXPR@65..73\n-              METHOD_CALL_EXPR@65..70\n-                PATH_EXPR@65..66\n-                  PATH@65..66\n-                    PATH_SEGMENT@65..66\n-                      NAME_REF@65..66\n-                        IDENT@65..66 \"a\"\n-                DOT@66..67 \".\"\n-                NAME_REF@67..68\n-                  IDENT@67..68 \"b\"\n-                ARG_LIST@68..70\n-                  L_PAREN@68..69 \"(\"\n-                  R_PAREN@69..70 \")\"\n-              DOT2@70..72 \"..\"\n-              PATH_EXPR@72..73\n-                PATH@72..73\n-                  PATH_SEGMENT@72..73\n-                    NAME_REF@72..73\n-                      IDENT@72..73 \"S\"\n-            WHITESPACE@73..74 \" \"\n-            MATCH_ARM_LIST@74..85\n-              L_CURLY@74..75 \"{\"\n-              WHITESPACE@75..76 \" \"\n-              MATCH_ARM@76..83\n-                PLACEHOLDER_PAT@76..77\n-                  UNDERSCORE@76..77 \"_\"\n-                WHITESPACE@77..78 \" \"\n-                FAT_ARROW@78..80 \"=>\"\n-                WHITESPACE@80..81 \" \"\n-                TUPLE_EXPR@81..83\n-                  L_PAREN@81..82 \"(\"\n-                  R_PAREN@82..83 \")\"\n-              WHITESPACE@83..84 \" \"\n-              R_CURLY@84..85 \"}\"\n-          SEMICOLON@85..86 \";\"\n-        WHITESPACE@86..87 \"\\n\"\n-        R_CURLY@87..88 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..27\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        BIND_PAT@19..20\n+          NAME@19..20\n+            IDENT@19..20 \"x\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        RANGE_EXPR@23..26\n+          LITERAL@23..24\n+            INT_NUMBER@23..24 \"1\"\n+          DOT2@24..26 \"..\"\n+        SEMICOLON@26..27 \";\"\n+      WHITESPACE@27..32 \"\\n    \"\n+      EXPR_STMT@32..54\n+        MATCH_EXPR@32..53\n+          MATCH_KW@32..37 \"match\"\n+          WHITESPACE@37..38 \" \"\n+          RANGE_EXPR@38..41\n+            LITERAL@38..39\n+              INT_NUMBER@38..39 \"1\"\n+            DOT2@39..41 \"..\"\n+          WHITESPACE@41..42 \" \"\n+          MATCH_ARM_LIST@42..53\n+            L_CURLY@42..43 \"{\"\n+            WHITESPACE@43..44 \" \"\n+            MATCH_ARM@44..51\n+              PLACEHOLDER_PAT@44..45\n+                UNDERSCORE@44..45 \"_\"\n+              WHITESPACE@45..46 \" \"\n+              FAT_ARROW@46..48 \"=>\"\n+              WHITESPACE@48..49 \" \"\n+              TUPLE_EXPR@49..51\n+                L_PAREN@49..50 \"(\"\n+                R_PAREN@50..51 \")\"\n+            WHITESPACE@51..52 \" \"\n+            R_CURLY@52..53 \"}\"\n+        SEMICOLON@53..54 \";\"\n+      WHITESPACE@54..59 \"\\n    \"\n+      EXPR_STMT@59..86\n+        MATCH_EXPR@59..85\n+          MATCH_KW@59..64 \"match\"\n+          WHITESPACE@64..65 \" \"\n+          RANGE_EXPR@65..73\n+            METHOD_CALL_EXPR@65..70\n+              PATH_EXPR@65..66\n+                PATH@65..66\n+                  PATH_SEGMENT@65..66\n+                    NAME_REF@65..66\n+                      IDENT@65..66 \"a\"\n+              DOT@66..67 \".\"\n+              NAME_REF@67..68\n+                IDENT@67..68 \"b\"\n+              ARG_LIST@68..70\n+                L_PAREN@68..69 \"(\"\n+                R_PAREN@69..70 \")\"\n+            DOT2@70..72 \"..\"\n+            PATH_EXPR@72..73\n+              PATH@72..73\n+                PATH_SEGMENT@72..73\n+                  NAME_REF@72..73\n+                    IDENT@72..73 \"S\"\n+          WHITESPACE@73..74 \" \"\n+          MATCH_ARM_LIST@74..85\n+            L_CURLY@74..75 \"{\"\n+            WHITESPACE@75..76 \" \"\n+            MATCH_ARM@76..83\n+              PLACEHOLDER_PAT@76..77\n+                UNDERSCORE@76..77 \"_\"\n+              WHITESPACE@77..78 \" \"\n+              FAT_ARROW@78..80 \"=>\"\n+              WHITESPACE@80..81 \" \"\n+              TUPLE_EXPR@81..83\n+                L_PAREN@81..82 \"(\"\n+                R_PAREN@82..83 \")\"\n+            WHITESPACE@83..84 \" \"\n+            R_CURLY@84..85 \"}\"\n+        SEMICOLON@85..86 \";\"\n+      WHITESPACE@86..87 \"\\n\"\n+      R_CURLY@87..88 \"}\"\n   WHITESPACE@88..89 \"\\n\""}, {"sha": "dfb8d57ad84486df6aa9d757ccebf47ed497fc30", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0081_for_type.rast", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -89,9 +89,8 @@ SOURCE_FILE@0..200\n                     IDENT@68..76 \"Iterator\"\n     WHITESPACE@76..77 \" \"\n     BLOCK_EXPR@77..79\n-      BLOCK@77..79\n-        L_CURLY@77..78 \"{\"\n-        R_CURLY@78..79 \"}\"\n+      L_CURLY@77..78 \"{\"\n+      R_CURLY@78..79 \"}\"\n   WHITESPACE@79..80 \"\\n\"\n   FN_DEF@80..134\n     FN_KW@80..82 \"fn\"\n@@ -155,9 +154,8 @@ SOURCE_FILE@0..200\n                     IDENT@123..131 \"Iterator\"\n     WHITESPACE@131..132 \" \"\n     BLOCK_EXPR@132..134\n-      BLOCK@132..134\n-        L_CURLY@132..133 \"{\"\n-        R_CURLY@133..134 \"}\"\n+      L_CURLY@132..133 \"{\"\n+      R_CURLY@133..134 \"}\"\n   WHITESPACE@134..135 \"\\n\"\n   FN_DEF@135..199\n     FN_KW@135..137 \"fn\"\n@@ -237,7 +235,6 @@ SOURCE_FILE@0..200\n                     IDENT@188..196 \"Iterator\"\n     WHITESPACE@196..197 \" \"\n     BLOCK_EXPR@197..199\n-      BLOCK@197..199\n-        L_CURLY@197..198 \"{\"\n-        R_CURLY@198..199 \"}\"\n+      L_CURLY@197..198 \"{\"\n+      R_CURLY@198..199 \"}\"\n   WHITESPACE@199..200 \"\\n\""}, {"sha": "7fe96e17db0c126877fbce393f59b96eeb0e02af", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0082_ref_expr.rast", "status": "modified", "additions": 42, "deletions": 43, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,47 +9,46 @@ SOURCE_FILE@0..52\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..51\n-      BLOCK@9..51\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..26\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PLACEHOLDER_PAT@19..20\n-            UNDERSCORE@19..20 \"_\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          REF_EXPR@23..25\n-            AMP@23..24 \"&\"\n-            LITERAL@24..25\n-              INT_NUMBER@24..25 \"1\"\n-          SEMICOLON@25..26 \";\"\n-        WHITESPACE@26..31 \"\\n    \"\n-        LET_STMT@31..49\n-          LET_KW@31..34 \"let\"\n-          WHITESPACE@34..35 \" \"\n-          PLACEHOLDER_PAT@35..36\n-            UNDERSCORE@35..36 \"_\"\n-          WHITESPACE@36..37 \" \"\n-          EQ@37..38 \"=\"\n-          WHITESPACE@38..39 \" \"\n-          REF_EXPR@39..48\n-            AMP@39..40 \"&\"\n-            MUT_KW@40..43 \"mut\"\n-            WHITESPACE@43..44 \" \"\n-            REF_EXPR@44..48\n-              AMP@44..45 \"&\"\n-              CALL_EXPR@45..48\n-                PATH_EXPR@45..46\n-                  PATH@45..46\n-                    PATH_SEGMENT@45..46\n-                      NAME_REF@45..46\n-                        IDENT@45..46 \"f\"\n-                ARG_LIST@46..48\n-                  L_PAREN@46..47 \"(\"\n-                  R_PAREN@47..48 \")\"\n-          SEMICOLON@48..49 \";\"\n-        WHITESPACE@49..50 \"\\n\"\n-        R_CURLY@50..51 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..26\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PLACEHOLDER_PAT@19..20\n+          UNDERSCORE@19..20 \"_\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        REF_EXPR@23..25\n+          AMP@23..24 \"&\"\n+          LITERAL@24..25\n+            INT_NUMBER@24..25 \"1\"\n+        SEMICOLON@25..26 \";\"\n+      WHITESPACE@26..31 \"\\n    \"\n+      LET_STMT@31..49\n+        LET_KW@31..34 \"let\"\n+        WHITESPACE@34..35 \" \"\n+        PLACEHOLDER_PAT@35..36\n+          UNDERSCORE@35..36 \"_\"\n+        WHITESPACE@36..37 \" \"\n+        EQ@37..38 \"=\"\n+        WHITESPACE@38..39 \" \"\n+        REF_EXPR@39..48\n+          AMP@39..40 \"&\"\n+          MUT_KW@40..43 \"mut\"\n+          WHITESPACE@43..44 \" \"\n+          REF_EXPR@44..48\n+            AMP@44..45 \"&\"\n+            CALL_EXPR@45..48\n+              PATH_EXPR@45..46\n+                PATH@45..46\n+                  PATH_SEGMENT@45..46\n+                    NAME_REF@45..46\n+                      IDENT@45..46 \"f\"\n+              ARG_LIST@46..48\n+                L_PAREN@46..47 \"(\"\n+                R_PAREN@47..48 \")\"\n+        SEMICOLON@48..49 \";\"\n+      WHITESPACE@49..50 \"\\n\"\n+      R_CURLY@50..51 \"}\"\n   WHITESPACE@51..52 \"\\n\""}, {"sha": "9fcb7899e244d4839242fd1ce1af9d439e81da98", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 123, "deletions": 124, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,128 +9,127 @@ SOURCE_FILE@0..189\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..188\n-      BLOCK@9..188\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..28\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PLACEHOLDER_PAT@19..20\n-            UNDERSCORE@19..20 \"_\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          LITERAL@23..27\n-            TRUE_KW@23..27 \"true\"\n-          SEMICOLON@27..28 \";\"\n-        WHITESPACE@28..33 \"\\n    \"\n-        LET_STMT@33..47\n-          LET_KW@33..36 \"let\"\n-          WHITESPACE@36..37 \" \"\n-          PLACEHOLDER_PAT@37..38\n-            UNDERSCORE@37..38 \"_\"\n-          WHITESPACE@38..39 \" \"\n-          EQ@39..40 \"=\"\n-          WHITESPACE@40..41 \" \"\n-          LITERAL@41..46\n-            FALSE_KW@41..46 \"false\"\n-          SEMICOLON@46..47 \";\"\n-        WHITESPACE@47..52 \"\\n    \"\n-        LET_STMT@52..62\n-          LET_KW@52..55 \"let\"\n-          WHITESPACE@55..56 \" \"\n-          PLACEHOLDER_PAT@56..57\n-            UNDERSCORE@56..57 \"_\"\n-          WHITESPACE@57..58 \" \"\n-          EQ@58..59 \"=\"\n-          WHITESPACE@59..60 \" \"\n-          LITERAL@60..61\n-            INT_NUMBER@60..61 \"1\"\n-          SEMICOLON@61..62 \";\"\n-        WHITESPACE@62..67 \"\\n    \"\n-        LET_STMT@67..79\n-          LET_KW@67..70 \"let\"\n-          WHITESPACE@70..71 \" \"\n-          PLACEHOLDER_PAT@71..72\n-            UNDERSCORE@71..72 \"_\"\n-          WHITESPACE@72..73 \" \"\n-          EQ@73..74 \"=\"\n-          WHITESPACE@74..75 \" \"\n-          LITERAL@75..78\n-            FLOAT_NUMBER@75..78 \"2.0\"\n-          SEMICOLON@78..79 \";\"\n-        WHITESPACE@79..84 \"\\n    \"\n-        LET_STMT@84..97\n-          LET_KW@84..87 \"let\"\n-          WHITESPACE@87..88 \" \"\n-          PLACEHOLDER_PAT@88..89\n-            UNDERSCORE@88..89 \"_\"\n-          WHITESPACE@89..90 \" \"\n-          EQ@90..91 \"=\"\n-          WHITESPACE@91..92 \" \"\n-          LITERAL@92..96\n-            BYTE@92..96 \"b\\'a\\'\"\n-          SEMICOLON@96..97 \";\"\n-        WHITESPACE@97..102 \"\\n    \"\n-        LET_STMT@102..114\n-          LET_KW@102..105 \"let\"\n-          WHITESPACE@105..106 \" \"\n-          PLACEHOLDER_PAT@106..107\n-            UNDERSCORE@106..107 \"_\"\n-          WHITESPACE@107..108 \" \"\n-          EQ@108..109 \"=\"\n-          WHITESPACE@109..110 \" \"\n-          LITERAL@110..113\n-            CHAR@110..113 \"\\'b\\'\"\n-          SEMICOLON@113..114 \";\"\n-        WHITESPACE@114..119 \"\\n    \"\n-        LET_STMT@119..131\n-          LET_KW@119..122 \"let\"\n-          WHITESPACE@122..123 \" \"\n-          PLACEHOLDER_PAT@123..124\n-            UNDERSCORE@123..124 \"_\"\n-          WHITESPACE@124..125 \" \"\n-          EQ@125..126 \"=\"\n-          WHITESPACE@126..127 \" \"\n-          LITERAL@127..130\n-            STRING@127..130 \"\\\"c\\\"\"\n-          SEMICOLON@130..131 \";\"\n-        WHITESPACE@131..136 \"\\n    \"\n-        LET_STMT@136..149\n-          LET_KW@136..139 \"let\"\n-          WHITESPACE@139..140 \" \"\n-          PLACEHOLDER_PAT@140..141\n-            UNDERSCORE@140..141 \"_\"\n-          WHITESPACE@141..142 \" \"\n-          EQ@142..143 \"=\"\n-          WHITESPACE@143..144 \" \"\n-          LITERAL@144..148\n-            RAW_STRING@144..148 \"r\\\"d\\\"\"\n-          SEMICOLON@148..149 \";\"\n-        WHITESPACE@149..154 \"\\n    \"\n-        LET_STMT@154..167\n-          LET_KW@154..157 \"let\"\n-          WHITESPACE@157..158 \" \"\n-          PLACEHOLDER_PAT@158..159\n-            UNDERSCORE@158..159 \"_\"\n-          WHITESPACE@159..160 \" \"\n-          EQ@160..161 \"=\"\n-          WHITESPACE@161..162 \" \"\n-          LITERAL@162..166\n-            BYTE_STRING@162..166 \"b\\\"e\\\"\"\n-          SEMICOLON@166..167 \";\"\n-        WHITESPACE@167..172 \"\\n    \"\n-        LET_STMT@172..186\n-          LET_KW@172..175 \"let\"\n-          WHITESPACE@175..176 \" \"\n-          PLACEHOLDER_PAT@176..177\n-            UNDERSCORE@176..177 \"_\"\n-          WHITESPACE@177..178 \" \"\n-          EQ@178..179 \"=\"\n-          WHITESPACE@179..180 \" \"\n-          LITERAL@180..185\n-            RAW_BYTE_STRING@180..185 \"br\\\"f\\\"\"\n-          SEMICOLON@185..186 \";\"\n-        WHITESPACE@186..187 \"\\n\"\n-        R_CURLY@187..188 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..28\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PLACEHOLDER_PAT@19..20\n+          UNDERSCORE@19..20 \"_\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        LITERAL@23..27\n+          TRUE_KW@23..27 \"true\"\n+        SEMICOLON@27..28 \";\"\n+      WHITESPACE@28..33 \"\\n    \"\n+      LET_STMT@33..47\n+        LET_KW@33..36 \"let\"\n+        WHITESPACE@36..37 \" \"\n+        PLACEHOLDER_PAT@37..38\n+          UNDERSCORE@37..38 \"_\"\n+        WHITESPACE@38..39 \" \"\n+        EQ@39..40 \"=\"\n+        WHITESPACE@40..41 \" \"\n+        LITERAL@41..46\n+          FALSE_KW@41..46 \"false\"\n+        SEMICOLON@46..47 \";\"\n+      WHITESPACE@47..52 \"\\n    \"\n+      LET_STMT@52..62\n+        LET_KW@52..55 \"let\"\n+        WHITESPACE@55..56 \" \"\n+        PLACEHOLDER_PAT@56..57\n+          UNDERSCORE@56..57 \"_\"\n+        WHITESPACE@57..58 \" \"\n+        EQ@58..59 \"=\"\n+        WHITESPACE@59..60 \" \"\n+        LITERAL@60..61\n+          INT_NUMBER@60..61 \"1\"\n+        SEMICOLON@61..62 \";\"\n+      WHITESPACE@62..67 \"\\n    \"\n+      LET_STMT@67..79\n+        LET_KW@67..70 \"let\"\n+        WHITESPACE@70..71 \" \"\n+        PLACEHOLDER_PAT@71..72\n+          UNDERSCORE@71..72 \"_\"\n+        WHITESPACE@72..73 \" \"\n+        EQ@73..74 \"=\"\n+        WHITESPACE@74..75 \" \"\n+        LITERAL@75..78\n+          FLOAT_NUMBER@75..78 \"2.0\"\n+        SEMICOLON@78..79 \";\"\n+      WHITESPACE@79..84 \"\\n    \"\n+      LET_STMT@84..97\n+        LET_KW@84..87 \"let\"\n+        WHITESPACE@87..88 \" \"\n+        PLACEHOLDER_PAT@88..89\n+          UNDERSCORE@88..89 \"_\"\n+        WHITESPACE@89..90 \" \"\n+        EQ@90..91 \"=\"\n+        WHITESPACE@91..92 \" \"\n+        LITERAL@92..96\n+          BYTE@92..96 \"b\\'a\\'\"\n+        SEMICOLON@96..97 \";\"\n+      WHITESPACE@97..102 \"\\n    \"\n+      LET_STMT@102..114\n+        LET_KW@102..105 \"let\"\n+        WHITESPACE@105..106 \" \"\n+        PLACEHOLDER_PAT@106..107\n+          UNDERSCORE@106..107 \"_\"\n+        WHITESPACE@107..108 \" \"\n+        EQ@108..109 \"=\"\n+        WHITESPACE@109..110 \" \"\n+        LITERAL@110..113\n+          CHAR@110..113 \"\\'b\\'\"\n+        SEMICOLON@113..114 \";\"\n+      WHITESPACE@114..119 \"\\n    \"\n+      LET_STMT@119..131\n+        LET_KW@119..122 \"let\"\n+        WHITESPACE@122..123 \" \"\n+        PLACEHOLDER_PAT@123..124\n+          UNDERSCORE@123..124 \"_\"\n+        WHITESPACE@124..125 \" \"\n+        EQ@125..126 \"=\"\n+        WHITESPACE@126..127 \" \"\n+        LITERAL@127..130\n+          STRING@127..130 \"\\\"c\\\"\"\n+        SEMICOLON@130..131 \";\"\n+      WHITESPACE@131..136 \"\\n    \"\n+      LET_STMT@136..149\n+        LET_KW@136..139 \"let\"\n+        WHITESPACE@139..140 \" \"\n+        PLACEHOLDER_PAT@140..141\n+          UNDERSCORE@140..141 \"_\"\n+        WHITESPACE@141..142 \" \"\n+        EQ@142..143 \"=\"\n+        WHITESPACE@143..144 \" \"\n+        LITERAL@144..148\n+          RAW_STRING@144..148 \"r\\\"d\\\"\"\n+        SEMICOLON@148..149 \";\"\n+      WHITESPACE@149..154 \"\\n    \"\n+      LET_STMT@154..167\n+        LET_KW@154..157 \"let\"\n+        WHITESPACE@157..158 \" \"\n+        PLACEHOLDER_PAT@158..159\n+          UNDERSCORE@158..159 \"_\"\n+        WHITESPACE@159..160 \" \"\n+        EQ@160..161 \"=\"\n+        WHITESPACE@161..162 \" \"\n+        LITERAL@162..166\n+          BYTE_STRING@162..166 \"b\\\"e\\\"\"\n+        SEMICOLON@166..167 \";\"\n+      WHITESPACE@167..172 \"\\n    \"\n+      LET_STMT@172..186\n+        LET_KW@172..175 \"let\"\n+        WHITESPACE@175..176 \" \"\n+        PLACEHOLDER_PAT@176..177\n+          UNDERSCORE@176..177 \"_\"\n+        WHITESPACE@177..178 \" \"\n+        EQ@178..179 \"=\"\n+        WHITESPACE@179..180 \" \"\n+        LITERAL@180..185\n+          RAW_BYTE_STRING@180..185 \"br\\\"f\\\"\"\n+        SEMICOLON@185..186 \";\"\n+      WHITESPACE@186..187 \"\\n\"\n+      R_CURLY@187..188 \"}\"\n   WHITESPACE@188..189 \"\\n\""}, {"sha": "a42abc189deb817fbf11addd1acf2482cf28208f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0086_function_ret_type.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0086_function_ret_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0086_function_ret_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0086_function_ret_type.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,9 +9,8 @@ SOURCE_FILE@0..30\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..11\n-      BLOCK@9..11\n-        L_CURLY@9..10 \"{\"\n-        R_CURLY@10..11 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      R_CURLY@10..11 \"}\"\n   WHITESPACE@11..12 \"\\n\"\n   FN_DEF@12..29\n     FN_KW@12..14 \"fn\"\n@@ -30,7 +29,6 @@ SOURCE_FILE@0..30\n         R_PAREN@25..26 \")\"\n     WHITESPACE@26..27 \" \"\n     BLOCK_EXPR@27..29\n-      BLOCK@27..29\n-        L_CURLY@27..28 \"{\"\n-        R_CURLY@28..29 \"}\"\n+      L_CURLY@27..28 \"{\"\n+      R_CURLY@28..29 \"}\"\n   WHITESPACE@29..30 \"\\n\""}, {"sha": "7e71d73738e195fa1becb6d5a56faae93bed3402", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0088_break_ambiguity.rast", "status": "modified", "additions": 54, "deletions": 58, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0088_break_ambiguity.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0088_break_ambiguity.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0088_break_ambiguity.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -8,62 +8,58 @@ SOURCE_FILE@0..88\n       L_PAREN@6..7 \"(\"\n       R_PAREN@7..8 \")\"\n     BLOCK_EXPR@8..87\n-      BLOCK@8..87\n-        L_CURLY@8..9 \"{\"\n-        WHITESPACE@9..14 \"\\n    \"\n-        EXPR_STMT@14..25\n-          IF_EXPR@14..25\n-            IF_KW@14..16 \"if\"\n-            WHITESPACE@16..17 \" \"\n-            CONDITION@17..22\n-              BREAK_EXPR@17..22\n-                BREAK_KW@17..22 \"break\"\n-            WHITESPACE@22..23 \" \"\n-            BLOCK_EXPR@23..25\n-              BLOCK@23..25\n-                L_CURLY@23..24 \"{\"\n-                R_CURLY@24..25 \"}\"\n-        WHITESPACE@25..30 \"\\n    \"\n-        EXPR_STMT@30..44\n-          WHILE_EXPR@30..44\n-            WHILE_KW@30..35 \"while\"\n-            WHITESPACE@35..36 \" \"\n-            CONDITION@36..41\n-              BREAK_EXPR@36..41\n-                BREAK_KW@36..41 \"break\"\n-            WHITESPACE@41..42 \" \"\n-            BLOCK_EXPR@42..44\n-              BLOCK@42..44\n-                L_CURLY@42..43 \"{\"\n-                R_CURLY@43..44 \"}\"\n-        WHITESPACE@44..49 \"\\n    \"\n-        EXPR_STMT@49..66\n-          FOR_EXPR@49..66\n-            FOR_KW@49..52 \"for\"\n-            WHITESPACE@52..53 \" \"\n-            BIND_PAT@53..54\n-              NAME@53..54\n-                IDENT@53..54 \"i\"\n-            WHITESPACE@54..55 \" \"\n-            IN_KW@55..57 \"in\"\n-            WHITESPACE@57..58 \" \"\n-            BREAK_EXPR@58..63\n-              BREAK_KW@58..63 \"break\"\n-            WHITESPACE@63..64 \" \"\n-            BLOCK_EXPR@64..66\n-              BLOCK@64..66\n-                L_CURLY@64..65 \"{\"\n-                R_CURLY@65..66 \"}\"\n-        WHITESPACE@66..71 \"\\n    \"\n-        MATCH_EXPR@71..85\n-          MATCH_KW@71..76 \"match\"\n-          WHITESPACE@76..77 \" \"\n-          BREAK_EXPR@77..82\n-            BREAK_KW@77..82 \"break\"\n-          WHITESPACE@82..83 \" \"\n-          MATCH_ARM_LIST@83..85\n-            L_CURLY@83..84 \"{\"\n-            R_CURLY@84..85 \"}\"\n-        WHITESPACE@85..86 \"\\n\"\n-        R_CURLY@86..87 \"}\"\n+      L_CURLY@8..9 \"{\"\n+      WHITESPACE@9..14 \"\\n    \"\n+      EXPR_STMT@14..25\n+        IF_EXPR@14..25\n+          IF_KW@14..16 \"if\"\n+          WHITESPACE@16..17 \" \"\n+          CONDITION@17..22\n+            BREAK_EXPR@17..22\n+              BREAK_KW@17..22 \"break\"\n+          WHITESPACE@22..23 \" \"\n+          BLOCK_EXPR@23..25\n+            L_CURLY@23..24 \"{\"\n+            R_CURLY@24..25 \"}\"\n+      WHITESPACE@25..30 \"\\n    \"\n+      EXPR_STMT@30..44\n+        WHILE_EXPR@30..44\n+          WHILE_KW@30..35 \"while\"\n+          WHITESPACE@35..36 \" \"\n+          CONDITION@36..41\n+            BREAK_EXPR@36..41\n+              BREAK_KW@36..41 \"break\"\n+          WHITESPACE@41..42 \" \"\n+          BLOCK_EXPR@42..44\n+            L_CURLY@42..43 \"{\"\n+            R_CURLY@43..44 \"}\"\n+      WHITESPACE@44..49 \"\\n    \"\n+      EXPR_STMT@49..66\n+        FOR_EXPR@49..66\n+          FOR_KW@49..52 \"for\"\n+          WHITESPACE@52..53 \" \"\n+          BIND_PAT@53..54\n+            NAME@53..54\n+              IDENT@53..54 \"i\"\n+          WHITESPACE@54..55 \" \"\n+          IN_KW@55..57 \"in\"\n+          WHITESPACE@57..58 \" \"\n+          BREAK_EXPR@58..63\n+            BREAK_KW@58..63 \"break\"\n+          WHITESPACE@63..64 \" \"\n+          BLOCK_EXPR@64..66\n+            L_CURLY@64..65 \"{\"\n+            R_CURLY@65..66 \"}\"\n+      WHITESPACE@66..71 \"\\n    \"\n+      MATCH_EXPR@71..85\n+        MATCH_KW@71..76 \"match\"\n+        WHITESPACE@76..77 \" \"\n+        BREAK_EXPR@77..82\n+          BREAK_KW@77..82 \"break\"\n+        WHITESPACE@82..83 \" \"\n+        MATCH_ARM_LIST@83..85\n+          L_CURLY@83..84 \"{\"\n+          R_CURLY@84..85 \"}\"\n+      WHITESPACE@85..86 \"\\n\"\n+      R_CURLY@86..87 \"}\"\n   WHITESPACE@87..88 \"\\n\""}, {"sha": "48aaf1004d250c7f88f81f38e637e5f25975b2b3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0089_extern_fn.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -12,7 +12,6 @@ SOURCE_FILE@0..19\n       R_PAREN@14..15 \")\"\n     WHITESPACE@15..16 \" \"\n     BLOCK_EXPR@16..18\n-      BLOCK@16..18\n-        L_CURLY@16..17 \"{\"\n-        R_CURLY@17..18 \"}\"\n+      L_CURLY@16..17 \"{\"\n+      R_CURLY@17..18 \"}\"\n   WHITESPACE@18..19 \"\\n\""}, {"sha": "aed81f9b0f03896152c2ccbe1e0aa65a699a50c2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0093_index_expr.rast", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0093_index_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0093_index_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0093_index_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,26 +9,25 @@ SOURCE_FILE@0..26\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..25\n-      BLOCK@9..25\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..23\n-          INDEX_EXPR@15..22\n-            INDEX_EXPR@15..19\n-              PATH_EXPR@15..16\n-                PATH@15..16\n-                  PATH_SEGMENT@15..16\n-                    NAME_REF@15..16\n-                      IDENT@15..16 \"x\"\n-              L_BRACK@16..17 \"[\"\n-              LITERAL@17..18\n-                INT_NUMBER@17..18 \"1\"\n-              R_BRACK@18..19 \"]\"\n-            L_BRACK@19..20 \"[\"\n-            LITERAL@20..21\n-              INT_NUMBER@20..21 \"2\"\n-            R_BRACK@21..22 \"]\"\n-          SEMICOLON@22..23 \";\"\n-        WHITESPACE@23..24 \"\\n\"\n-        R_CURLY@24..25 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..23\n+        INDEX_EXPR@15..22\n+          INDEX_EXPR@15..19\n+            PATH_EXPR@15..16\n+              PATH@15..16\n+                PATH_SEGMENT@15..16\n+                  NAME_REF@15..16\n+                    IDENT@15..16 \"x\"\n+            L_BRACK@16..17 \"[\"\n+            LITERAL@17..18\n+              INT_NUMBER@17..18 \"1\"\n+            R_BRACK@18..19 \"]\"\n+          L_BRACK@19..20 \"[\"\n+          LITERAL@20..21\n+            INT_NUMBER@20..21 \"2\"\n+          R_BRACK@21..22 \"]\"\n+        SEMICOLON@22..23 \";\"\n+      WHITESPACE@23..24 \"\\n\"\n+      R_CURLY@24..25 \"}\"\n   WHITESPACE@25..26 \"\\n\""}, {"sha": "67d9595d3d45a42d137630c9ff4f7fd6996e290b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0095_placeholder_pat.rast", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0095_placeholder_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0095_placeholder_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0095_placeholder_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,21 +9,20 @@ SOURCE_FILE@0..26\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..25\n-      BLOCK@10..25\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..12 \" \"\n-        LET_STMT@12..23\n-          LET_KW@12..15 \"let\"\n-          WHITESPACE@15..16 \" \"\n-          PLACEHOLDER_PAT@16..17\n-            UNDERSCORE@16..17 \"_\"\n-          WHITESPACE@17..18 \" \"\n-          EQ@18..19 \"=\"\n-          WHITESPACE@19..20 \" \"\n-          TUPLE_EXPR@20..22\n-            L_PAREN@20..21 \"(\"\n-            R_PAREN@21..22 \")\"\n-          SEMICOLON@22..23 \";\"\n-        WHITESPACE@23..24 \" \"\n-        R_CURLY@24..25 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..12 \" \"\n+      LET_STMT@12..23\n+        LET_KW@12..15 \"let\"\n+        WHITESPACE@15..16 \" \"\n+        PLACEHOLDER_PAT@16..17\n+          UNDERSCORE@16..17 \"_\"\n+        WHITESPACE@17..18 \" \"\n+        EQ@18..19 \"=\"\n+        WHITESPACE@19..20 \" \"\n+        TUPLE_EXPR@20..22\n+          L_PAREN@20..21 \"(\"\n+          R_PAREN@21..22 \")\"\n+        SEMICOLON@22..23 \";\"\n+      WHITESPACE@23..24 \" \"\n+      R_CURLY@24..25 \"}\"\n   WHITESPACE@25..26 \"\\n\""}, {"sha": "031e7465218aad486bdb61793966864f683d74da", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0096_no_semi_after_block.rast", "status": "modified", "additions": 111, "deletions": 118, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,122 +9,115 @@ SOURCE_FILE@0..167\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..166\n-      BLOCK@9..166\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..25\n-          IF_EXPR@15..25\n-            IF_KW@15..17 \"if\"\n-            WHITESPACE@17..18 \" \"\n-            CONDITION@18..22\n-              LITERAL@18..22\n-                TRUE_KW@18..22 \"true\"\n-            WHITESPACE@22..23 \" \"\n-            BLOCK_EXPR@23..25\n-              BLOCK@23..25\n-                L_CURLY@23..24 \"{\"\n-                R_CURLY@24..25 \"}\"\n-        WHITESPACE@25..30 \"\\n    \"\n-        EXPR_STMT@30..37\n-          LOOP_EXPR@30..37\n-            LOOP_KW@30..34 \"loop\"\n-            WHITESPACE@34..35 \" \"\n-            BLOCK_EXPR@35..37\n-              BLOCK@35..37\n-                L_CURLY@35..36 \"{\"\n-                R_CURLY@36..37 \"}\"\n-        WHITESPACE@37..42 \"\\n    \"\n-        EXPR_STMT@42..53\n-          MATCH_EXPR@42..53\n-            MATCH_KW@42..47 \"match\"\n-            WHITESPACE@47..48 \" \"\n-            TUPLE_EXPR@48..50\n-              L_PAREN@48..49 \"(\"\n-              R_PAREN@49..50 \")\"\n-            WHITESPACE@50..51 \" \"\n-            MATCH_ARM_LIST@51..53\n-              L_CURLY@51..52 \"{\"\n-              R_CURLY@52..53 \"}\"\n-        WHITESPACE@53..58 \"\\n    \"\n-        EXPR_STMT@58..71\n-          WHILE_EXPR@58..71\n-            WHILE_KW@58..63 \"while\"\n-            WHITESPACE@63..64 \" \"\n-            CONDITION@64..68\n-              LITERAL@64..68\n-                TRUE_KW@64..68 \"true\"\n-            WHITESPACE@68..69 \" \"\n-            BLOCK_EXPR@69..71\n-              BLOCK@69..71\n-                L_CURLY@69..70 \"{\"\n-                R_CURLY@70..71 \"}\"\n-        WHITESPACE@71..76 \"\\n    \"\n-        EXPR_STMT@76..90\n-          FOR_EXPR@76..90\n-            FOR_KW@76..79 \"for\"\n-            WHITESPACE@79..80 \" \"\n-            PLACEHOLDER_PAT@80..81\n-              UNDERSCORE@80..81 \"_\"\n-            WHITESPACE@81..82 \" \"\n-            IN_KW@82..84 \"in\"\n-            WHITESPACE@84..85 \" \"\n-            TUPLE_EXPR@85..87\n-              L_PAREN@85..86 \"(\"\n-              R_PAREN@86..87 \")\"\n-            WHITESPACE@87..88 \" \"\n-            BLOCK_EXPR@88..90\n-              BLOCK@88..90\n-                L_CURLY@88..89 \"{\"\n-                R_CURLY@89..90 \"}\"\n-        WHITESPACE@90..95 \"\\n    \"\n-        EXPR_STMT@95..97\n-          BLOCK_EXPR@95..97\n-            BLOCK@95..97\n-              L_CURLY@95..96 \"{\"\n-              R_CURLY@96..97 \"}\"\n-        WHITESPACE@97..102 \"\\n    \"\n-        EXPR_STMT@102..104\n-          BLOCK_EXPR@102..104\n-            BLOCK@102..104\n-              L_CURLY@102..103 \"{\"\n-              R_CURLY@103..104 \"}\"\n-        WHITESPACE@104..109 \"\\n    \"\n-        EXPR_STMT@109..152\n-          MACRO_CALL@109..152\n-            PATH@109..120\n-              PATH_SEGMENT@109..120\n-                NAME_REF@109..120\n-                  IDENT@109..120 \"macro_rules\"\n-            BANG@120..121 \"!\"\n-            WHITESPACE@121..122 \" \"\n-            NAME@122..126\n-              IDENT@122..126 \"test\"\n-            WHITESPACE@126..127 \" \"\n-            TOKEN_TREE@127..152\n-              L_CURLY@127..128 \"{\"\n-              WHITESPACE@128..138 \"\\n         \"\n-              TOKEN_TREE@138..140\n-                L_PAREN@138..139 \"(\"\n-                R_PAREN@139..140 \")\"\n-              WHITESPACE@140..141 \" \"\n-              EQ@141..142 \"=\"\n-              R_ANGLE@142..143 \">\"\n-              WHITESPACE@143..144 \" \"\n-              TOKEN_TREE@144..146\n-                L_CURLY@144..145 \"{\"\n-                R_CURLY@145..146 \"}\"\n-              WHITESPACE@146..151 \"\\n    \"\n-              R_CURLY@151..152 \"}\"\n-        WHITESPACE@152..157 \"\\n    \"\n-        MACRO_CALL@157..164\n-          PATH@157..161\n-            PATH_SEGMENT@157..161\n-              NAME_REF@157..161\n-                IDENT@157..161 \"test\"\n-          BANG@161..162 \"!\"\n-          TOKEN_TREE@162..164\n-            L_CURLY@162..163 \"{\"\n-            R_CURLY@163..164 \"}\"\n-        WHITESPACE@164..165 \"\\n\"\n-        R_CURLY@165..166 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..25\n+        IF_EXPR@15..25\n+          IF_KW@15..17 \"if\"\n+          WHITESPACE@17..18 \" \"\n+          CONDITION@18..22\n+            LITERAL@18..22\n+              TRUE_KW@18..22 \"true\"\n+          WHITESPACE@22..23 \" \"\n+          BLOCK_EXPR@23..25\n+            L_CURLY@23..24 \"{\"\n+            R_CURLY@24..25 \"}\"\n+      WHITESPACE@25..30 \"\\n    \"\n+      EXPR_STMT@30..37\n+        LOOP_EXPR@30..37\n+          LOOP_KW@30..34 \"loop\"\n+          WHITESPACE@34..35 \" \"\n+          BLOCK_EXPR@35..37\n+            L_CURLY@35..36 \"{\"\n+            R_CURLY@36..37 \"}\"\n+      WHITESPACE@37..42 \"\\n    \"\n+      EXPR_STMT@42..53\n+        MATCH_EXPR@42..53\n+          MATCH_KW@42..47 \"match\"\n+          WHITESPACE@47..48 \" \"\n+          TUPLE_EXPR@48..50\n+            L_PAREN@48..49 \"(\"\n+            R_PAREN@49..50 \")\"\n+          WHITESPACE@50..51 \" \"\n+          MATCH_ARM_LIST@51..53\n+            L_CURLY@51..52 \"{\"\n+            R_CURLY@52..53 \"}\"\n+      WHITESPACE@53..58 \"\\n    \"\n+      EXPR_STMT@58..71\n+        WHILE_EXPR@58..71\n+          WHILE_KW@58..63 \"while\"\n+          WHITESPACE@63..64 \" \"\n+          CONDITION@64..68\n+            LITERAL@64..68\n+              TRUE_KW@64..68 \"true\"\n+          WHITESPACE@68..69 \" \"\n+          BLOCK_EXPR@69..71\n+            L_CURLY@69..70 \"{\"\n+            R_CURLY@70..71 \"}\"\n+      WHITESPACE@71..76 \"\\n    \"\n+      EXPR_STMT@76..90\n+        FOR_EXPR@76..90\n+          FOR_KW@76..79 \"for\"\n+          WHITESPACE@79..80 \" \"\n+          PLACEHOLDER_PAT@80..81\n+            UNDERSCORE@80..81 \"_\"\n+          WHITESPACE@81..82 \" \"\n+          IN_KW@82..84 \"in\"\n+          WHITESPACE@84..85 \" \"\n+          TUPLE_EXPR@85..87\n+            L_PAREN@85..86 \"(\"\n+            R_PAREN@86..87 \")\"\n+          WHITESPACE@87..88 \" \"\n+          BLOCK_EXPR@88..90\n+            L_CURLY@88..89 \"{\"\n+            R_CURLY@89..90 \"}\"\n+      WHITESPACE@90..95 \"\\n    \"\n+      EXPR_STMT@95..97\n+        BLOCK_EXPR@95..97\n+          L_CURLY@95..96 \"{\"\n+          R_CURLY@96..97 \"}\"\n+      WHITESPACE@97..102 \"\\n    \"\n+      EXPR_STMT@102..104\n+        BLOCK_EXPR@102..104\n+          L_CURLY@102..103 \"{\"\n+          R_CURLY@103..104 \"}\"\n+      WHITESPACE@104..109 \"\\n    \"\n+      EXPR_STMT@109..152\n+        MACRO_CALL@109..152\n+          PATH@109..120\n+            PATH_SEGMENT@109..120\n+              NAME_REF@109..120\n+                IDENT@109..120 \"macro_rules\"\n+          BANG@120..121 \"!\"\n+          WHITESPACE@121..122 \" \"\n+          NAME@122..126\n+            IDENT@122..126 \"test\"\n+          WHITESPACE@126..127 \" \"\n+          TOKEN_TREE@127..152\n+            L_CURLY@127..128 \"{\"\n+            WHITESPACE@128..138 \"\\n         \"\n+            TOKEN_TREE@138..140\n+              L_PAREN@138..139 \"(\"\n+              R_PAREN@139..140 \")\"\n+            WHITESPACE@140..141 \" \"\n+            EQ@141..142 \"=\"\n+            R_ANGLE@142..143 \">\"\n+            WHITESPACE@143..144 \" \"\n+            TOKEN_TREE@144..146\n+              L_CURLY@144..145 \"{\"\n+              R_CURLY@145..146 \"}\"\n+            WHITESPACE@146..151 \"\\n    \"\n+            R_CURLY@151..152 \"}\"\n+      WHITESPACE@152..157 \"\\n    \"\n+      MACRO_CALL@157..164\n+        PATH@157..161\n+          PATH_SEGMENT@157..161\n+            NAME_REF@157..161\n+              IDENT@157..161 \"test\"\n+        BANG@161..162 \"!\"\n+        TOKEN_TREE@162..164\n+          L_CURLY@162..163 \"{\"\n+          R_CURLY@163..164 \"}\"\n+      WHITESPACE@164..165 \"\\n\"\n+      R_CURLY@165..166 \"}\"\n   WHITESPACE@166..167 \"\\n\""}, {"sha": "816e493107d79c3b2c098c207b0bc87ef74db675", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0098_const_unsafe_fn.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -13,7 +13,6 @@ SOURCE_FILE@0..25\n       R_PAREN@20..21 \")\"\n     WHITESPACE@21..22 \" \"\n     BLOCK_EXPR@22..24\n-      BLOCK@22..24\n-        L_CURLY@22..23 \"{\"\n-        R_CURLY@23..24 \"}\"\n+      L_CURLY@22..23 \"{\"\n+      R_CURLY@23..24 \"}\"\n   WHITESPACE@24..25 \"\\n\""}, {"sha": "d48ef865cb84ffba4c797fc7d42a242563032e55", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0099_param_list.rast", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0099_param_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0099_param_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0099_param_list.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,9 +9,8 @@ SOURCE_FILE@0..67\n       R_PAREN@5..6 \")\"\n     WHITESPACE@6..7 \" \"\n     BLOCK_EXPR@7..9\n-      BLOCK@7..9\n-        L_CURLY@7..8 \"{\"\n-        R_CURLY@8..9 \"}\"\n+      L_CURLY@7..8 \"{\"\n+      R_CURLY@8..9 \"}\"\n   WHITESPACE@9..10 \"\\n\"\n   FN_DEF@10..25\n     FN_KW@10..12 \"fn\"\n@@ -34,9 +33,8 @@ SOURCE_FILE@0..67\n       R_PAREN@21..22 \")\"\n     WHITESPACE@22..23 \" \"\n     BLOCK_EXPR@23..25\n-      BLOCK@23..25\n-        L_CURLY@23..24 \"{\"\n-        R_CURLY@24..25 \"}\"\n+      L_CURLY@23..24 \"{\"\n+      R_CURLY@24..25 \"}\"\n   WHITESPACE@25..26 \"\\n\"\n   FN_DEF@26..43\n     FN_KW@26..28 \"fn\"\n@@ -61,9 +59,8 @@ SOURCE_FILE@0..67\n       R_PAREN@39..40 \")\"\n     WHITESPACE@40..41 \" \"\n     BLOCK_EXPR@41..43\n-      BLOCK@41..43\n-        L_CURLY@41..42 \"{\"\n-        R_CURLY@42..43 \"}\"\n+      L_CURLY@41..42 \"{\"\n+      R_CURLY@42..43 \"}\"\n   WHITESPACE@43..44 \"\\n\"\n   FN_DEF@44..66\n     FN_KW@44..46 \"fn\"\n@@ -97,7 +94,6 @@ SOURCE_FILE@0..67\n       R_PAREN@62..63 \")\"\n     WHITESPACE@63..64 \" \"\n     BLOCK_EXPR@64..66\n-      BLOCK@64..66\n-        L_CURLY@64..65 \"{\"\n-        R_CURLY@65..66 \"}\"\n+      L_CURLY@64..65 \"{\"\n+      R_CURLY@65..66 \"}\"\n   WHITESPACE@66..67 \"\\n\""}, {"sha": "e4455cd3e4b3cef6845aa6ffe8e75d2fcd4fab57", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0100_for_expr.rast", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0100_for_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0100_for_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0100_for_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,28 +9,26 @@ SOURCE_FILE@0..33\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..32\n-      BLOCK@9..32\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..30\n-          FOR_EXPR@15..29\n-            FOR_KW@15..18 \"for\"\n-            WHITESPACE@18..19 \" \"\n-            BIND_PAT@19..20\n-              NAME@19..20\n-                IDENT@19..20 \"x\"\n-            WHITESPACE@20..21 \" \"\n-            IN_KW@21..23 \"in\"\n-            WHITESPACE@23..24 \" \"\n-            ARRAY_EXPR@24..26\n-              L_BRACK@24..25 \"[\"\n-              R_BRACK@25..26 \"]\"\n-            WHITESPACE@26..27 \" \"\n-            BLOCK_EXPR@27..29\n-              BLOCK@27..29\n-                L_CURLY@27..28 \"{\"\n-                R_CURLY@28..29 \"}\"\n-          SEMICOLON@29..30 \";\"\n-        WHITESPACE@30..31 \"\\n\"\n-        R_CURLY@31..32 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..30\n+        FOR_EXPR@15..29\n+          FOR_KW@15..18 \"for\"\n+          WHITESPACE@18..19 \" \"\n+          BIND_PAT@19..20\n+            NAME@19..20\n+              IDENT@19..20 \"x\"\n+          WHITESPACE@20..21 \" \"\n+          IN_KW@21..23 \"in\"\n+          WHITESPACE@23..24 \" \"\n+          ARRAY_EXPR@24..26\n+            L_BRACK@24..25 \"[\"\n+            R_BRACK@25..26 \"]\"\n+          WHITESPACE@26..27 \" \"\n+          BLOCK_EXPR@27..29\n+            L_CURLY@27..28 \"{\"\n+            R_CURLY@28..29 \"}\"\n+        SEMICOLON@29..30 \";\"\n+      WHITESPACE@30..31 \"\\n\"\n+      R_CURLY@31..32 \"}\"\n   WHITESPACE@32..33 \"\\n\""}, {"sha": "8a874306009731de59c1c4d83f037312bcaedd24", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0101_unsafe_fn.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -11,7 +11,6 @@ SOURCE_FILE@0..19\n       R_PAREN@14..15 \")\"\n     WHITESPACE@15..16 \" \"\n     BLOCK_EXPR@16..18\n-      BLOCK@16..18\n-        L_CURLY@16..17 \"{\"\n-        R_CURLY@17..18 \"}\"\n+      L_CURLY@16..17 \"{\"\n+      R_CURLY@17..18 \"}\"\n   WHITESPACE@18..19 \"\\n\""}, {"sha": "9f966ff8a0d3cdbdffd83bdd53921e7828b35d6a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_record_field_pat_list.rast", "status": "modified", "additions": 120, "deletions": 121, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,125 +9,124 @@ SOURCE_FILE@0..119\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..118\n-      BLOCK@9..118\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..29\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          RECORD_PAT@19..23\n-            PATH@19..20\n-              PATH_SEGMENT@19..20\n-                NAME_REF@19..20\n-                  IDENT@19..20 \"S\"\n-            WHITESPACE@20..21 \" \"\n-            RECORD_FIELD_PAT_LIST@21..23\n-              L_CURLY@21..22 \"{\"\n-              R_CURLY@22..23 \"}\"\n-          WHITESPACE@23..24 \" \"\n-          EQ@24..25 \"=\"\n-          WHITESPACE@25..26 \" \"\n-          TUPLE_EXPR@26..28\n-            L_PAREN@26..27 \"(\"\n-            R_PAREN@27..28 \")\"\n-          SEMICOLON@28..29 \";\"\n-        WHITESPACE@29..34 \"\\n    \"\n-        LET_STMT@34..62\n-          LET_KW@34..37 \"let\"\n-          WHITESPACE@37..38 \" \"\n-          RECORD_PAT@38..56\n-            PATH@38..39\n-              PATH_SEGMENT@38..39\n-                NAME_REF@38..39\n-                  IDENT@38..39 \"S\"\n-            WHITESPACE@39..40 \" \"\n-            RECORD_FIELD_PAT_LIST@40..56\n-              L_CURLY@40..41 \"{\"\n-              WHITESPACE@41..42 \" \"\n-              RECORD_FIELD_PAT@42..43\n-                BIND_PAT@42..43\n-                  NAME@42..43\n-                    IDENT@42..43 \"f\"\n-              COMMA@43..44 \",\"\n-              WHITESPACE@44..45 \" \"\n-              RECORD_FIELD_PAT@45..54\n-                BIND_PAT@45..54\n-                  REF_KW@45..48 \"ref\"\n-                  WHITESPACE@48..49 \" \"\n-                  MUT_KW@49..52 \"mut\"\n-                  WHITESPACE@52..53 \" \"\n-                  NAME@53..54\n-                    IDENT@53..54 \"g\"\n-              WHITESPACE@54..55 \" \"\n-              R_CURLY@55..56 \"}\"\n-          WHITESPACE@56..57 \" \"\n-          EQ@57..58 \"=\"\n-          WHITESPACE@58..59 \" \"\n-          TUPLE_EXPR@59..61\n-            L_PAREN@59..60 \"(\"\n-            R_PAREN@60..61 \")\"\n-          SEMICOLON@61..62 \";\"\n-        WHITESPACE@62..67 \"\\n    \"\n-        LET_STMT@67..90\n-          LET_KW@67..70 \"let\"\n-          WHITESPACE@70..71 \" \"\n-          RECORD_PAT@71..84\n-            PATH@71..72\n-              PATH_SEGMENT@71..72\n-                NAME_REF@71..72\n-                  IDENT@71..72 \"S\"\n-            WHITESPACE@72..73 \" \"\n-            RECORD_FIELD_PAT_LIST@73..84\n-              L_CURLY@73..74 \"{\"\n-              WHITESPACE@74..75 \" \"\n-              RECORD_FIELD_PAT@75..79\n-                NAME_REF@75..76\n-                  IDENT@75..76 \"h\"\n-                COLON@76..77 \":\"\n-                WHITESPACE@77..78 \" \"\n-                PLACEHOLDER_PAT@78..79\n-                  UNDERSCORE@78..79 \"_\"\n-              COMMA@79..80 \",\"\n-              WHITESPACE@80..81 \" \"\n-              DOT2@81..83 \"..\"\n-              R_CURLY@83..84 \"}\"\n-          WHITESPACE@84..85 \" \"\n-          EQ@85..86 \"=\"\n-          WHITESPACE@86..87 \" \"\n-          TUPLE_EXPR@87..89\n-            L_PAREN@87..88 \"(\"\n-            R_PAREN@88..89 \")\"\n-          SEMICOLON@89..90 \";\"\n-        WHITESPACE@90..95 \"\\n    \"\n-        LET_STMT@95..116\n-          LET_KW@95..98 \"let\"\n-          WHITESPACE@98..99 \" \"\n-          RECORD_PAT@99..110\n-            PATH@99..100\n-              PATH_SEGMENT@99..100\n-                NAME_REF@99..100\n-                  IDENT@99..100 \"S\"\n-            WHITESPACE@100..101 \" \"\n-            RECORD_FIELD_PAT_LIST@101..110\n-              L_CURLY@101..102 \"{\"\n-              WHITESPACE@102..103 \" \"\n-              RECORD_FIELD_PAT@103..107\n-                NAME_REF@103..104\n-                  IDENT@103..104 \"h\"\n-                COLON@104..105 \":\"\n-                WHITESPACE@105..106 \" \"\n-                PLACEHOLDER_PAT@106..107\n-                  UNDERSCORE@106..107 \"_\"\n-              COMMA@107..108 \",\"\n-              WHITESPACE@108..109 \" \"\n-              R_CURLY@109..110 \"}\"\n-          WHITESPACE@110..111 \" \"\n-          EQ@111..112 \"=\"\n-          WHITESPACE@112..113 \" \"\n-          TUPLE_EXPR@113..115\n-            L_PAREN@113..114 \"(\"\n-            R_PAREN@114..115 \")\"\n-          SEMICOLON@115..116 \";\"\n-        WHITESPACE@116..117 \"\\n\"\n-        R_CURLY@117..118 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..29\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        RECORD_PAT@19..23\n+          PATH@19..20\n+            PATH_SEGMENT@19..20\n+              NAME_REF@19..20\n+                IDENT@19..20 \"S\"\n+          WHITESPACE@20..21 \" \"\n+          RECORD_FIELD_PAT_LIST@21..23\n+            L_CURLY@21..22 \"{\"\n+            R_CURLY@22..23 \"}\"\n+        WHITESPACE@23..24 \" \"\n+        EQ@24..25 \"=\"\n+        WHITESPACE@25..26 \" \"\n+        TUPLE_EXPR@26..28\n+          L_PAREN@26..27 \"(\"\n+          R_PAREN@27..28 \")\"\n+        SEMICOLON@28..29 \";\"\n+      WHITESPACE@29..34 \"\\n    \"\n+      LET_STMT@34..62\n+        LET_KW@34..37 \"let\"\n+        WHITESPACE@37..38 \" \"\n+        RECORD_PAT@38..56\n+          PATH@38..39\n+            PATH_SEGMENT@38..39\n+              NAME_REF@38..39\n+                IDENT@38..39 \"S\"\n+          WHITESPACE@39..40 \" \"\n+          RECORD_FIELD_PAT_LIST@40..56\n+            L_CURLY@40..41 \"{\"\n+            WHITESPACE@41..42 \" \"\n+            RECORD_FIELD_PAT@42..43\n+              BIND_PAT@42..43\n+                NAME@42..43\n+                  IDENT@42..43 \"f\"\n+            COMMA@43..44 \",\"\n+            WHITESPACE@44..45 \" \"\n+            RECORD_FIELD_PAT@45..54\n+              BIND_PAT@45..54\n+                REF_KW@45..48 \"ref\"\n+                WHITESPACE@48..49 \" \"\n+                MUT_KW@49..52 \"mut\"\n+                WHITESPACE@52..53 \" \"\n+                NAME@53..54\n+                  IDENT@53..54 \"g\"\n+            WHITESPACE@54..55 \" \"\n+            R_CURLY@55..56 \"}\"\n+        WHITESPACE@56..57 \" \"\n+        EQ@57..58 \"=\"\n+        WHITESPACE@58..59 \" \"\n+        TUPLE_EXPR@59..61\n+          L_PAREN@59..60 \"(\"\n+          R_PAREN@60..61 \")\"\n+        SEMICOLON@61..62 \";\"\n+      WHITESPACE@62..67 \"\\n    \"\n+      LET_STMT@67..90\n+        LET_KW@67..70 \"let\"\n+        WHITESPACE@70..71 \" \"\n+        RECORD_PAT@71..84\n+          PATH@71..72\n+            PATH_SEGMENT@71..72\n+              NAME_REF@71..72\n+                IDENT@71..72 \"S\"\n+          WHITESPACE@72..73 \" \"\n+          RECORD_FIELD_PAT_LIST@73..84\n+            L_CURLY@73..74 \"{\"\n+            WHITESPACE@74..75 \" \"\n+            RECORD_FIELD_PAT@75..79\n+              NAME_REF@75..76\n+                IDENT@75..76 \"h\"\n+              COLON@76..77 \":\"\n+              WHITESPACE@77..78 \" \"\n+              PLACEHOLDER_PAT@78..79\n+                UNDERSCORE@78..79 \"_\"\n+            COMMA@79..80 \",\"\n+            WHITESPACE@80..81 \" \"\n+            DOT2@81..83 \"..\"\n+            R_CURLY@83..84 \"}\"\n+        WHITESPACE@84..85 \" \"\n+        EQ@85..86 \"=\"\n+        WHITESPACE@86..87 \" \"\n+        TUPLE_EXPR@87..89\n+          L_PAREN@87..88 \"(\"\n+          R_PAREN@88..89 \")\"\n+        SEMICOLON@89..90 \";\"\n+      WHITESPACE@90..95 \"\\n    \"\n+      LET_STMT@95..116\n+        LET_KW@95..98 \"let\"\n+        WHITESPACE@98..99 \" \"\n+        RECORD_PAT@99..110\n+          PATH@99..100\n+            PATH_SEGMENT@99..100\n+              NAME_REF@99..100\n+                IDENT@99..100 \"S\"\n+          WHITESPACE@100..101 \" \"\n+          RECORD_FIELD_PAT_LIST@101..110\n+            L_CURLY@101..102 \"{\"\n+            WHITESPACE@102..103 \" \"\n+            RECORD_FIELD_PAT@103..107\n+              NAME_REF@103..104\n+                IDENT@103..104 \"h\"\n+              COLON@104..105 \":\"\n+              WHITESPACE@105..106 \" \"\n+              PLACEHOLDER_PAT@106..107\n+                UNDERSCORE@106..107 \"_\"\n+            COMMA@107..108 \",\"\n+            WHITESPACE@108..109 \" \"\n+            R_CURLY@109..110 \"}\"\n+        WHITESPACE@110..111 \" \"\n+        EQ@111..112 \"=\"\n+        WHITESPACE@112..113 \" \"\n+        TUPLE_EXPR@113..115\n+          L_PAREN@113..114 \"(\"\n+          R_PAREN@114..115 \")\"\n+        SEMICOLON@115..116 \";\"\n+      WHITESPACE@116..117 \"\\n\"\n+      R_CURLY@117..118 \"}\"\n   WHITESPACE@118..119 \"\\n\""}, {"sha": "9b3bef04e57a0bff013ca089f7e64727c381feae", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0103_array_expr.rast", "status": "modified", "additions": 42, "deletions": 43, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0103_array_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0103_array_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0103_array_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,47 +9,46 @@ SOURCE_FILE@0..55\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..54\n-      BLOCK@9..54\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..18\n-          ARRAY_EXPR@15..17\n-            L_BRACK@15..16 \"[\"\n-            R_BRACK@16..17 \"]\"\n-          SEMICOLON@17..18 \";\"\n-        WHITESPACE@18..23 \"\\n    \"\n-        EXPR_STMT@23..27\n-          ARRAY_EXPR@23..26\n-            L_BRACK@23..24 \"[\"\n-            LITERAL@24..25\n-              INT_NUMBER@24..25 \"1\"\n-            R_BRACK@25..26 \"]\"\n-          SEMICOLON@26..27 \";\"\n-        WHITESPACE@27..32 \"\\n    \"\n-        EXPR_STMT@32..40\n-          ARRAY_EXPR@32..39\n-            L_BRACK@32..33 \"[\"\n-            LITERAL@33..34\n-              INT_NUMBER@33..34 \"1\"\n-            COMMA@34..35 \",\"\n-            WHITESPACE@35..36 \" \"\n-            LITERAL@36..37\n-              INT_NUMBER@36..37 \"2\"\n-            COMMA@37..38 \",\"\n-            R_BRACK@38..39 \"]\"\n-          SEMICOLON@39..40 \";\"\n-        WHITESPACE@40..45 \"\\n    \"\n-        EXPR_STMT@45..52\n-          ARRAY_EXPR@45..51\n-            L_BRACK@45..46 \"[\"\n-            LITERAL@46..47\n-              INT_NUMBER@46..47 \"1\"\n-            SEMICOLON@47..48 \";\"\n-            WHITESPACE@48..49 \" \"\n-            LITERAL@49..50\n-              INT_NUMBER@49..50 \"2\"\n-            R_BRACK@50..51 \"]\"\n-          SEMICOLON@51..52 \";\"\n-        WHITESPACE@52..53 \"\\n\"\n-        R_CURLY@53..54 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..18\n+        ARRAY_EXPR@15..17\n+          L_BRACK@15..16 \"[\"\n+          R_BRACK@16..17 \"]\"\n+        SEMICOLON@17..18 \";\"\n+      WHITESPACE@18..23 \"\\n    \"\n+      EXPR_STMT@23..27\n+        ARRAY_EXPR@23..26\n+          L_BRACK@23..24 \"[\"\n+          LITERAL@24..25\n+            INT_NUMBER@24..25 \"1\"\n+          R_BRACK@25..26 \"]\"\n+        SEMICOLON@26..27 \";\"\n+      WHITESPACE@27..32 \"\\n    \"\n+      EXPR_STMT@32..40\n+        ARRAY_EXPR@32..39\n+          L_BRACK@32..33 \"[\"\n+          LITERAL@33..34\n+            INT_NUMBER@33..34 \"1\"\n+          COMMA@34..35 \",\"\n+          WHITESPACE@35..36 \" \"\n+          LITERAL@36..37\n+            INT_NUMBER@36..37 \"2\"\n+          COMMA@37..38 \",\"\n+          R_BRACK@38..39 \"]\"\n+        SEMICOLON@39..40 \";\"\n+      WHITESPACE@40..45 \"\\n    \"\n+      EXPR_STMT@45..52\n+        ARRAY_EXPR@45..51\n+          L_BRACK@45..46 \"[\"\n+          LITERAL@46..47\n+            INT_NUMBER@46..47 \"1\"\n+          SEMICOLON@47..48 \";\"\n+          WHITESPACE@48..49 \" \"\n+          LITERAL@49..50\n+            INT_NUMBER@49..50 \"2\"\n+          R_BRACK@50..51 \"]\"\n+        SEMICOLON@51..52 \";\"\n+      WHITESPACE@52..53 \"\\n\"\n+      R_CURLY@53..54 \"}\"\n   WHITESPACE@54..55 \"\\n\""}, {"sha": "8b2323cf27038b12521695e3a26015f8ed8f7586", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0105_block_expr.rast", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/19e28888aa41b2845b47adb7314aed99d3c48679/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/19e28888aa41b2845b47adb7314aed99d3c48679/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast?ref=19e28888aa41b2845b47adb7314aed99d3c48679", "patch": "@@ -1,43 +0,0 @@\n-SOURCE_FILE@0..52\n-  FN_DEF@0..51\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..51\n-      BLOCK@9..51\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..18\n-          BLOCK_EXPR@15..17\n-            BLOCK@15..17\n-              L_CURLY@15..16 \"{\"\n-              R_CURLY@16..17 \"}\"\n-          SEMICOLON@17..18 \";\"\n-        WHITESPACE@18..23 \"\\n    \"\n-        EXPR_STMT@23..33\n-          BLOCK_EXPR@23..32\n-            UNSAFE_KW@23..29 \"unsafe\"\n-            WHITESPACE@29..30 \" \"\n-            BLOCK@30..32\n-              L_CURLY@30..31 \"{\"\n-              R_CURLY@31..32 \"}\"\n-          SEMICOLON@32..33 \";\"\n-        WHITESPACE@33..38 \"\\n    \"\n-        EXPR_STMT@38..49\n-          BLOCK_EXPR@38..48\n-            LABEL@38..45\n-              LIFETIME@38..44 \"\\'label\"\n-              COLON@44..45 \":\"\n-            WHITESPACE@45..46 \" \"\n-            BLOCK@46..48\n-              L_CURLY@46..47 \"{\"\n-              R_CURLY@47..48 \"}\"\n-          SEMICOLON@48..49 \";\"\n-        WHITESPACE@49..50 \"\\n\"\n-        R_CURLY@50..51 \"}\"\n-  WHITESPACE@51..52 \"\\n\""}, {"sha": "2fed74c5e05f49678aca03152ee5488f5a153cc6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0105_block_expr.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19e28888aa41b2845b47adb7314aed99d3c48679/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e28888aa41b2845b47adb7314aed99d3c48679/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rs?ref=19e28888aa41b2845b47adb7314aed99d3c48679", "patch": "@@ -1,5 +0,0 @@\n-fn foo() {\n-    {};\n-    unsafe {};\n-    'label: {};\n-}"}, {"sha": "e6471715267c3bde7cd4e60d5ba0797484bfab35", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0106_lambda_expr.rast", "status": "modified", "additions": 123, "deletions": 128, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,132 +9,127 @@ SOURCE_FILE@0..134\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..133\n-      BLOCK@9..133\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..21\n-          LAMBDA_EXPR@15..20\n-            PARAM_LIST@15..17\n-              PIPE@15..16 \"|\"\n-              PIPE@16..17 \"|\"\n-            WHITESPACE@17..18 \" \"\n-            TUPLE_EXPR@18..20\n-              L_PAREN@18..19 \"(\"\n-              R_PAREN@19..20 \")\"\n-          SEMICOLON@20..21 \";\"\n-        WHITESPACE@21..26 \"\\n    \"\n-        EXPR_STMT@26..43\n-          LAMBDA_EXPR@26..42\n-            PARAM_LIST@26..28\n-              PIPE@26..27 \"|\"\n-              PIPE@27..28 \"|\"\n-            WHITESPACE@28..29 \" \"\n-            RET_TYPE@29..35\n-              THIN_ARROW@29..31 \"->\"\n-              WHITESPACE@31..32 \" \"\n-              PATH_TYPE@32..35\n-                PATH@32..35\n-                  PATH_SEGMENT@32..35\n-                    NAME_REF@32..35\n-                      IDENT@32..35 \"i32\"\n-            WHITESPACE@35..36 \" \"\n-            BLOCK_EXPR@36..42\n-              BLOCK@36..42\n-                L_CURLY@36..37 \"{\"\n-                WHITESPACE@37..38 \" \"\n-                LITERAL@38..40\n-                  INT_NUMBER@38..40 \"92\"\n-                WHITESPACE@40..41 \" \"\n-                R_CURLY@41..42 \"}\"\n-          SEMICOLON@42..43 \";\"\n-        WHITESPACE@43..48 \"\\n    \"\n-        EXPR_STMT@48..54\n-          LAMBDA_EXPR@48..53\n-            PARAM_LIST@48..51\n-              PIPE@48..49 \"|\"\n-              PARAM@49..50\n-                BIND_PAT@49..50\n-                  NAME@49..50\n-                    IDENT@49..50 \"x\"\n-              PIPE@50..51 \"|\"\n-            WHITESPACE@51..52 \" \"\n-            PATH_EXPR@52..53\n-              PATH@52..53\n-                PATH_SEGMENT@52..53\n-                  NAME_REF@52..53\n-                    IDENT@52..53 \"x\"\n-          SEMICOLON@53..54 \";\"\n-        WHITESPACE@54..59 \"\\n    \"\n-        EXPR_STMT@59..76\n-          LAMBDA_EXPR@59..75\n-            MOVE_KW@59..63 \"move\"\n-            WHITESPACE@63..64 \" \"\n-            PARAM_LIST@64..73\n-              PIPE@64..65 \"|\"\n-              PARAM@65..71\n-                BIND_PAT@65..66\n-                  NAME@65..66\n-                    IDENT@65..66 \"x\"\n-                COLON@66..67 \":\"\n-                WHITESPACE@67..68 \" \"\n-                PATH_TYPE@68..71\n-                  PATH@68..71\n-                    PATH_SEGMENT@68..71\n-                      NAME_REF@68..71\n-                        IDENT@68..71 \"i32\"\n-              COMMA@71..72 \",\"\n-              PIPE@72..73 \"|\"\n-            WHITESPACE@73..74 \" \"\n-            PATH_EXPR@74..75\n-              PATH@74..75\n-                PATH_SEGMENT@74..75\n-                  NAME_REF@74..75\n-                    IDENT@74..75 \"x\"\n-          SEMICOLON@75..76 \";\"\n-        WHITESPACE@76..81 \"\\n    \"\n-        EXPR_STMT@81..93\n-          LAMBDA_EXPR@81..92\n-            ASYNC_KW@81..86 \"async\"\n-            WHITESPACE@86..87 \" \"\n-            PARAM_LIST@87..89\n-              PIPE@87..88 \"|\"\n-              PIPE@88..89 \"|\"\n-            WHITESPACE@89..90 \" \"\n-            BLOCK_EXPR@90..92\n-              BLOCK@90..92\n-                L_CURLY@90..91 \"{\"\n-                R_CURLY@91..92 \"}\"\n-          SEMICOLON@92..93 \";\"\n-        WHITESPACE@93..98 \"\\n    \"\n-        EXPR_STMT@98..109\n-          LAMBDA_EXPR@98..108\n-            MOVE_KW@98..102 \"move\"\n-            WHITESPACE@102..103 \" \"\n-            PARAM_LIST@103..105\n-              PIPE@103..104 \"|\"\n-              PIPE@104..105 \"|\"\n-            WHITESPACE@105..106 \" \"\n-            BLOCK_EXPR@106..108\n-              BLOCK@106..108\n-                L_CURLY@106..107 \"{\"\n-                R_CURLY@107..108 \"}\"\n-          SEMICOLON@108..109 \";\"\n-        WHITESPACE@109..114 \"\\n    \"\n-        EXPR_STMT@114..131\n-          LAMBDA_EXPR@114..130\n-            ASYNC_KW@114..119 \"async\"\n-            WHITESPACE@119..120 \" \"\n-            MOVE_KW@120..124 \"move\"\n-            WHITESPACE@124..125 \" \"\n-            PARAM_LIST@125..127\n-              PIPE@125..126 \"|\"\n-              PIPE@126..127 \"|\"\n-            WHITESPACE@127..128 \" \"\n-            BLOCK_EXPR@128..130\n-              BLOCK@128..130\n-                L_CURLY@128..129 \"{\"\n-                R_CURLY@129..130 \"}\"\n-          SEMICOLON@130..131 \";\"\n-        WHITESPACE@131..132 \"\\n\"\n-        R_CURLY@132..133 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..21\n+        LAMBDA_EXPR@15..20\n+          PARAM_LIST@15..17\n+            PIPE@15..16 \"|\"\n+            PIPE@16..17 \"|\"\n+          WHITESPACE@17..18 \" \"\n+          TUPLE_EXPR@18..20\n+            L_PAREN@18..19 \"(\"\n+            R_PAREN@19..20 \")\"\n+        SEMICOLON@20..21 \";\"\n+      WHITESPACE@21..26 \"\\n    \"\n+      EXPR_STMT@26..43\n+        LAMBDA_EXPR@26..42\n+          PARAM_LIST@26..28\n+            PIPE@26..27 \"|\"\n+            PIPE@27..28 \"|\"\n+          WHITESPACE@28..29 \" \"\n+          RET_TYPE@29..35\n+            THIN_ARROW@29..31 \"->\"\n+            WHITESPACE@31..32 \" \"\n+            PATH_TYPE@32..35\n+              PATH@32..35\n+                PATH_SEGMENT@32..35\n+                  NAME_REF@32..35\n+                    IDENT@32..35 \"i32\"\n+          WHITESPACE@35..36 \" \"\n+          BLOCK_EXPR@36..42\n+            L_CURLY@36..37 \"{\"\n+            WHITESPACE@37..38 \" \"\n+            LITERAL@38..40\n+              INT_NUMBER@38..40 \"92\"\n+            WHITESPACE@40..41 \" \"\n+            R_CURLY@41..42 \"}\"\n+        SEMICOLON@42..43 \";\"\n+      WHITESPACE@43..48 \"\\n    \"\n+      EXPR_STMT@48..54\n+        LAMBDA_EXPR@48..53\n+          PARAM_LIST@48..51\n+            PIPE@48..49 \"|\"\n+            PARAM@49..50\n+              BIND_PAT@49..50\n+                NAME@49..50\n+                  IDENT@49..50 \"x\"\n+            PIPE@50..51 \"|\"\n+          WHITESPACE@51..52 \" \"\n+          PATH_EXPR@52..53\n+            PATH@52..53\n+              PATH_SEGMENT@52..53\n+                NAME_REF@52..53\n+                  IDENT@52..53 \"x\"\n+        SEMICOLON@53..54 \";\"\n+      WHITESPACE@54..59 \"\\n    \"\n+      EXPR_STMT@59..76\n+        LAMBDA_EXPR@59..75\n+          MOVE_KW@59..63 \"move\"\n+          WHITESPACE@63..64 \" \"\n+          PARAM_LIST@64..73\n+            PIPE@64..65 \"|\"\n+            PARAM@65..71\n+              BIND_PAT@65..66\n+                NAME@65..66\n+                  IDENT@65..66 \"x\"\n+              COLON@66..67 \":\"\n+              WHITESPACE@67..68 \" \"\n+              PATH_TYPE@68..71\n+                PATH@68..71\n+                  PATH_SEGMENT@68..71\n+                    NAME_REF@68..71\n+                      IDENT@68..71 \"i32\"\n+            COMMA@71..72 \",\"\n+            PIPE@72..73 \"|\"\n+          WHITESPACE@73..74 \" \"\n+          PATH_EXPR@74..75\n+            PATH@74..75\n+              PATH_SEGMENT@74..75\n+                NAME_REF@74..75\n+                  IDENT@74..75 \"x\"\n+        SEMICOLON@75..76 \";\"\n+      WHITESPACE@76..81 \"\\n    \"\n+      EXPR_STMT@81..93\n+        LAMBDA_EXPR@81..92\n+          ASYNC_KW@81..86 \"async\"\n+          WHITESPACE@86..87 \" \"\n+          PARAM_LIST@87..89\n+            PIPE@87..88 \"|\"\n+            PIPE@88..89 \"|\"\n+          WHITESPACE@89..90 \" \"\n+          BLOCK_EXPR@90..92\n+            L_CURLY@90..91 \"{\"\n+            R_CURLY@91..92 \"}\"\n+        SEMICOLON@92..93 \";\"\n+      WHITESPACE@93..98 \"\\n    \"\n+      EXPR_STMT@98..109\n+        LAMBDA_EXPR@98..108\n+          MOVE_KW@98..102 \"move\"\n+          WHITESPACE@102..103 \" \"\n+          PARAM_LIST@103..105\n+            PIPE@103..104 \"|\"\n+            PIPE@104..105 \"|\"\n+          WHITESPACE@105..106 \" \"\n+          BLOCK_EXPR@106..108\n+            L_CURLY@106..107 \"{\"\n+            R_CURLY@107..108 \"}\"\n+        SEMICOLON@108..109 \";\"\n+      WHITESPACE@109..114 \"\\n    \"\n+      EXPR_STMT@114..131\n+        LAMBDA_EXPR@114..130\n+          ASYNC_KW@114..119 \"async\"\n+          WHITESPACE@119..120 \" \"\n+          MOVE_KW@120..124 \"move\"\n+          WHITESPACE@124..125 \" \"\n+          PARAM_LIST@125..127\n+            PIPE@125..126 \"|\"\n+            PIPE@126..127 \"|\"\n+          WHITESPACE@127..128 \" \"\n+          BLOCK_EXPR@128..130\n+            L_CURLY@128..129 \"{\"\n+            R_CURLY@129..130 \"}\"\n+        SEMICOLON@130..131 \";\"\n+      WHITESPACE@131..132 \"\\n\"\n+      R_CURLY@132..133 \"}\"\n   WHITESPACE@133..134 \"\\n\""}, {"sha": "98963dc62ea97376b8d13c1886ecf28760d06355", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0107_method_call_expr.rast", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,55 +9,54 @@ SOURCE_FILE@0..49\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..48\n-      BLOCK@9..48\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..23\n-          METHOD_CALL_EXPR@15..22\n-            PATH_EXPR@15..16\n-              PATH@15..16\n-                PATH_SEGMENT@15..16\n-                  NAME_REF@15..16\n-                    IDENT@15..16 \"x\"\n-            DOT@16..17 \".\"\n-            NAME_REF@17..20\n-              IDENT@17..20 \"foo\"\n-            ARG_LIST@20..22\n-              L_PAREN@20..21 \"(\"\n-              R_PAREN@21..22 \")\"\n-          SEMICOLON@22..23 \";\"\n-        WHITESPACE@23..28 \"\\n    \"\n-        EXPR_STMT@28..46\n-          METHOD_CALL_EXPR@28..45\n-            PATH_EXPR@28..29\n-              PATH@28..29\n-                PATH_SEGMENT@28..29\n-                  NAME_REF@28..29\n-                    IDENT@28..29 \"y\"\n-            DOT@29..30 \".\"\n-            NAME_REF@30..33\n-              IDENT@30..33 \"bar\"\n-            TYPE_ARG_LIST@33..38\n-              COLON2@33..35 \"::\"\n-              L_ANGLE@35..36 \"<\"\n-              TYPE_ARG@36..37\n-                PATH_TYPE@36..37\n-                  PATH@36..37\n-                    PATH_SEGMENT@36..37\n-                      NAME_REF@36..37\n-                        IDENT@36..37 \"T\"\n-              R_ANGLE@37..38 \">\"\n-            ARG_LIST@38..45\n-              L_PAREN@38..39 \"(\"\n-              LITERAL@39..40\n-                INT_NUMBER@39..40 \"1\"\n-              COMMA@40..41 \",\"\n-              WHITESPACE@41..42 \" \"\n-              LITERAL@42..43\n-                INT_NUMBER@42..43 \"2\"\n-              COMMA@43..44 \",\"\n-              R_PAREN@44..45 \")\"\n-          SEMICOLON@45..46 \";\"\n-        WHITESPACE@46..47 \"\\n\"\n-        R_CURLY@47..48 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..23\n+        METHOD_CALL_EXPR@15..22\n+          PATH_EXPR@15..16\n+            PATH@15..16\n+              PATH_SEGMENT@15..16\n+                NAME_REF@15..16\n+                  IDENT@15..16 \"x\"\n+          DOT@16..17 \".\"\n+          NAME_REF@17..20\n+            IDENT@17..20 \"foo\"\n+          ARG_LIST@20..22\n+            L_PAREN@20..21 \"(\"\n+            R_PAREN@21..22 \")\"\n+        SEMICOLON@22..23 \";\"\n+      WHITESPACE@23..28 \"\\n    \"\n+      EXPR_STMT@28..46\n+        METHOD_CALL_EXPR@28..45\n+          PATH_EXPR@28..29\n+            PATH@28..29\n+              PATH_SEGMENT@28..29\n+                NAME_REF@28..29\n+                  IDENT@28..29 \"y\"\n+          DOT@29..30 \".\"\n+          NAME_REF@30..33\n+            IDENT@30..33 \"bar\"\n+          TYPE_ARG_LIST@33..38\n+            COLON2@33..35 \"::\"\n+            L_ANGLE@35..36 \"<\"\n+            TYPE_ARG@36..37\n+              PATH_TYPE@36..37\n+                PATH@36..37\n+                  PATH_SEGMENT@36..37\n+                    NAME_REF@36..37\n+                      IDENT@36..37 \"T\"\n+            R_ANGLE@37..38 \">\"\n+          ARG_LIST@38..45\n+            L_PAREN@38..39 \"(\"\n+            LITERAL@39..40\n+              INT_NUMBER@39..40 \"1\"\n+            COMMA@40..41 \",\"\n+            WHITESPACE@41..42 \" \"\n+            LITERAL@42..43\n+              INT_NUMBER@42..43 \"2\"\n+            COMMA@43..44 \",\"\n+            R_PAREN@44..45 \")\"\n+        SEMICOLON@45..46 \";\"\n+      WHITESPACE@46..47 \"\\n\"\n+      R_CURLY@47..48 \"}\"\n   WHITESPACE@48..49 \"\\n\""}, {"sha": "ea603e2c9388384119fbc9186160b1198f5d8271", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0108_tuple_expr.rast", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0108_tuple_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0108_tuple_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0108_tuple_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,31 +9,30 @@ SOURCE_FILE@0..40\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..39\n-      BLOCK@9..39\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..18\n-          TUPLE_EXPR@15..17\n-            L_PAREN@15..16 \"(\"\n-            R_PAREN@16..17 \")\"\n-          SEMICOLON@17..18 \";\"\n-        WHITESPACE@18..23 \"\\n    \"\n-        EXPR_STMT@23..27\n-          PAREN_EXPR@23..26\n-            L_PAREN@23..24 \"(\"\n-            LITERAL@24..25\n-              INT_NUMBER@24..25 \"1\"\n-            R_PAREN@25..26 \")\"\n-          SEMICOLON@26..27 \";\"\n-        WHITESPACE@27..32 \"\\n    \"\n-        EXPR_STMT@32..37\n-          TUPLE_EXPR@32..36\n-            L_PAREN@32..33 \"(\"\n-            LITERAL@33..34\n-              INT_NUMBER@33..34 \"1\"\n-            COMMA@34..35 \",\"\n-            R_PAREN@35..36 \")\"\n-          SEMICOLON@36..37 \";\"\n-        WHITESPACE@37..38 \"\\n\"\n-        R_CURLY@38..39 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..18\n+        TUPLE_EXPR@15..17\n+          L_PAREN@15..16 \"(\"\n+          R_PAREN@16..17 \")\"\n+        SEMICOLON@17..18 \";\"\n+      WHITESPACE@18..23 \"\\n    \"\n+      EXPR_STMT@23..27\n+        PAREN_EXPR@23..26\n+          L_PAREN@23..24 \"(\"\n+          LITERAL@24..25\n+            INT_NUMBER@24..25 \"1\"\n+          R_PAREN@25..26 \")\"\n+        SEMICOLON@26..27 \";\"\n+      WHITESPACE@27..32 \"\\n    \"\n+      EXPR_STMT@32..37\n+        TUPLE_EXPR@32..36\n+          L_PAREN@32..33 \"(\"\n+          LITERAL@33..34\n+            INT_NUMBER@33..34 \"1\"\n+          COMMA@34..35 \",\"\n+          R_PAREN@35..36 \")\"\n+        SEMICOLON@36..37 \";\"\n+      WHITESPACE@37..38 \"\\n\"\n+      R_CURLY@38..39 \"}\"\n   WHITESPACE@39..40 \"\\n\""}, {"sha": "30ff96a7c9cbf1c80de989b4532f5c41ff03714f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0109_label.rast", "status": "modified", "additions": 52, "deletions": 56, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,60 +9,56 @@ SOURCE_FILE@0..74\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..73\n-      BLOCK@9..73\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..26\n-          LOOP_EXPR@15..26\n-            LABEL@15..18\n-              LIFETIME@15..17 \"\\'a\"\n-              COLON@17..18 \":\"\n-            WHITESPACE@18..19 \" \"\n-            LOOP_KW@19..23 \"loop\"\n-            WHITESPACE@23..24 \" \"\n-            BLOCK_EXPR@24..26\n-              BLOCK@24..26\n-                L_CURLY@24..25 \"{\"\n-                R_CURLY@25..26 \"}\"\n-        WHITESPACE@26..31 \"\\n    \"\n-        EXPR_STMT@31..48\n-          WHILE_EXPR@31..48\n-            LABEL@31..34\n-              LIFETIME@31..33 \"\\'b\"\n-              COLON@33..34 \":\"\n-            WHITESPACE@34..35 \" \"\n-            WHILE_KW@35..40 \"while\"\n-            WHITESPACE@40..41 \" \"\n-            CONDITION@41..45\n-              LITERAL@41..45\n-                TRUE_KW@41..45 \"true\"\n-            WHITESPACE@45..46 \" \"\n-            BLOCK_EXPR@46..48\n-              BLOCK@46..48\n-                L_CURLY@46..47 \"{\"\n-                R_CURLY@47..48 \"}\"\n-        WHITESPACE@48..53 \"\\n    \"\n-        FOR_EXPR@53..71\n-          LABEL@53..56\n-            LIFETIME@53..55 \"\\'c\"\n-            COLON@55..56 \":\"\n-          WHITESPACE@56..57 \" \"\n-          FOR_KW@57..60 \"for\"\n-          WHITESPACE@60..61 \" \"\n-          BIND_PAT@61..62\n-            NAME@61..62\n-              IDENT@61..62 \"x\"\n-          WHITESPACE@62..63 \" \"\n-          IN_KW@63..65 \"in\"\n-          WHITESPACE@65..66 \" \"\n-          TUPLE_EXPR@66..68\n-            L_PAREN@66..67 \"(\"\n-            R_PAREN@67..68 \")\"\n-          WHITESPACE@68..69 \" \"\n-          BLOCK_EXPR@69..71\n-            BLOCK@69..71\n-              L_CURLY@69..70 \"{\"\n-              R_CURLY@70..71 \"}\"\n-        WHITESPACE@71..72 \"\\n\"\n-        R_CURLY@72..73 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..26\n+        LOOP_EXPR@15..26\n+          LABEL@15..18\n+            LIFETIME@15..17 \"\\'a\"\n+            COLON@17..18 \":\"\n+          WHITESPACE@18..19 \" \"\n+          LOOP_KW@19..23 \"loop\"\n+          WHITESPACE@23..24 \" \"\n+          BLOCK_EXPR@24..26\n+            L_CURLY@24..25 \"{\"\n+            R_CURLY@25..26 \"}\"\n+      WHITESPACE@26..31 \"\\n    \"\n+      EXPR_STMT@31..48\n+        WHILE_EXPR@31..48\n+          LABEL@31..34\n+            LIFETIME@31..33 \"\\'b\"\n+            COLON@33..34 \":\"\n+          WHITESPACE@34..35 \" \"\n+          WHILE_KW@35..40 \"while\"\n+          WHITESPACE@40..41 \" \"\n+          CONDITION@41..45\n+            LITERAL@41..45\n+              TRUE_KW@41..45 \"true\"\n+          WHITESPACE@45..46 \" \"\n+          BLOCK_EXPR@46..48\n+            L_CURLY@46..47 \"{\"\n+            R_CURLY@47..48 \"}\"\n+      WHITESPACE@48..53 \"\\n    \"\n+      FOR_EXPR@53..71\n+        LABEL@53..56\n+          LIFETIME@53..55 \"\\'c\"\n+          COLON@55..56 \":\"\n+        WHITESPACE@56..57 \" \"\n+        FOR_KW@57..60 \"for\"\n+        WHITESPACE@60..61 \" \"\n+        BIND_PAT@61..62\n+          NAME@61..62\n+            IDENT@61..62 \"x\"\n+        WHITESPACE@62..63 \" \"\n+        IN_KW@63..65 \"in\"\n+        WHITESPACE@65..66 \" \"\n+        TUPLE_EXPR@66..68\n+          L_PAREN@66..67 \"(\"\n+          R_PAREN@67..68 \")\"\n+        WHITESPACE@68..69 \" \"\n+        BLOCK_EXPR@69..71\n+          L_CURLY@69..70 \"{\"\n+          R_CURLY@70..71 \"}\"\n+      WHITESPACE@71..72 \"\\n\"\n+      R_CURLY@72..73 \"}\"\n   WHITESPACE@73..74 \"\\n\""}, {"sha": "b58f40ac1505dcaedbd60d88a59d608c70130410", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0111_tuple_pat.rast", "status": "modified", "additions": 77, "deletions": 78, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,82 +9,81 @@ SOURCE_FILE@0..94\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..93\n-      BLOCK@10..93\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..36\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          TUPLE_PAT@20..30\n-            L_PAREN@20..21 \"(\"\n-            BIND_PAT@21..22\n-              NAME@21..22\n-                IDENT@21..22 \"a\"\n-            COMMA@22..23 \",\"\n-            WHITESPACE@23..24 \" \"\n-            BIND_PAT@24..25\n-              NAME@24..25\n-                IDENT@24..25 \"b\"\n-            COMMA@25..26 \",\"\n-            WHITESPACE@26..27 \" \"\n-            DOT_DOT_PAT@27..29\n-              DOT2@27..29 \"..\"\n-            R_PAREN@29..30 \")\"\n-          WHITESPACE@30..31 \" \"\n-          EQ@31..32 \"=\"\n-          WHITESPACE@32..33 \" \"\n-          TUPLE_EXPR@33..35\n-            L_PAREN@33..34 \"(\"\n-            R_PAREN@34..35 \")\"\n-          SEMICOLON@35..36 \";\"\n-        WHITESPACE@36..41 \"\\n    \"\n-        LET_STMT@41..55\n-          LET_KW@41..44 \"let\"\n-          WHITESPACE@44..45 \" \"\n-          TUPLE_PAT@45..49\n-            L_PAREN@45..46 \"(\"\n-            BIND_PAT@46..47\n-              NAME@46..47\n-                IDENT@46..47 \"a\"\n-            COMMA@47..48 \",\"\n-            R_PAREN@48..49 \")\"\n-          WHITESPACE@49..50 \" \"\n-          EQ@50..51 \"=\"\n-          WHITESPACE@51..52 \" \"\n-          TUPLE_EXPR@52..54\n-            L_PAREN@52..53 \"(\"\n-            R_PAREN@53..54 \")\"\n-          SEMICOLON@54..55 \";\"\n-        WHITESPACE@55..60 \"\\n    \"\n-        LET_STMT@60..74\n-          LET_KW@60..63 \"let\"\n-          WHITESPACE@63..64 \" \"\n-          TUPLE_PAT@64..68\n-            L_PAREN@64..65 \"(\"\n-            DOT_DOT_PAT@65..67\n-              DOT2@65..67 \"..\"\n-            R_PAREN@67..68 \")\"\n-          WHITESPACE@68..69 \" \"\n-          EQ@69..70 \"=\"\n-          WHITESPACE@70..71 \" \"\n-          TUPLE_EXPR@71..73\n-            L_PAREN@71..72 \"(\"\n-            R_PAREN@72..73 \")\"\n-          SEMICOLON@73..74 \";\"\n-        WHITESPACE@74..79 \"\\n    \"\n-        LET_STMT@79..91\n-          LET_KW@79..82 \"let\"\n-          WHITESPACE@82..83 \" \"\n-          TUPLE_PAT@83..85\n-            L_PAREN@83..84 \"(\"\n-            R_PAREN@84..85 \")\"\n-          WHITESPACE@85..86 \" \"\n-          EQ@86..87 \"=\"\n-          WHITESPACE@87..88 \" \"\n-          TUPLE_EXPR@88..90\n-            L_PAREN@88..89 \"(\"\n-            R_PAREN@89..90 \")\"\n-          SEMICOLON@90..91 \";\"\n-        WHITESPACE@91..92 \"\\n\"\n-        R_CURLY@92..93 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..36\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        TUPLE_PAT@20..30\n+          L_PAREN@20..21 \"(\"\n+          BIND_PAT@21..22\n+            NAME@21..22\n+              IDENT@21..22 \"a\"\n+          COMMA@22..23 \",\"\n+          WHITESPACE@23..24 \" \"\n+          BIND_PAT@24..25\n+            NAME@24..25\n+              IDENT@24..25 \"b\"\n+          COMMA@25..26 \",\"\n+          WHITESPACE@26..27 \" \"\n+          DOT_DOT_PAT@27..29\n+            DOT2@27..29 \"..\"\n+          R_PAREN@29..30 \")\"\n+        WHITESPACE@30..31 \" \"\n+        EQ@31..32 \"=\"\n+        WHITESPACE@32..33 \" \"\n+        TUPLE_EXPR@33..35\n+          L_PAREN@33..34 \"(\"\n+          R_PAREN@34..35 \")\"\n+        SEMICOLON@35..36 \";\"\n+      WHITESPACE@36..41 \"\\n    \"\n+      LET_STMT@41..55\n+        LET_KW@41..44 \"let\"\n+        WHITESPACE@44..45 \" \"\n+        TUPLE_PAT@45..49\n+          L_PAREN@45..46 \"(\"\n+          BIND_PAT@46..47\n+            NAME@46..47\n+              IDENT@46..47 \"a\"\n+          COMMA@47..48 \",\"\n+          R_PAREN@48..49 \")\"\n+        WHITESPACE@49..50 \" \"\n+        EQ@50..51 \"=\"\n+        WHITESPACE@51..52 \" \"\n+        TUPLE_EXPR@52..54\n+          L_PAREN@52..53 \"(\"\n+          R_PAREN@53..54 \")\"\n+        SEMICOLON@54..55 \";\"\n+      WHITESPACE@55..60 \"\\n    \"\n+      LET_STMT@60..74\n+        LET_KW@60..63 \"let\"\n+        WHITESPACE@63..64 \" \"\n+        TUPLE_PAT@64..68\n+          L_PAREN@64..65 \"(\"\n+          DOT_DOT_PAT@65..67\n+            DOT2@65..67 \"..\"\n+          R_PAREN@67..68 \")\"\n+        WHITESPACE@68..69 \" \"\n+        EQ@69..70 \"=\"\n+        WHITESPACE@70..71 \" \"\n+        TUPLE_EXPR@71..73\n+          L_PAREN@71..72 \"(\"\n+          R_PAREN@72..73 \")\"\n+        SEMICOLON@73..74 \";\"\n+      WHITESPACE@74..79 \"\\n    \"\n+      LET_STMT@79..91\n+        LET_KW@79..82 \"let\"\n+        WHITESPACE@82..83 \" \"\n+        TUPLE_PAT@83..85\n+          L_PAREN@83..84 \"(\"\n+          R_PAREN@84..85 \")\"\n+        WHITESPACE@85..86 \" \"\n+        EQ@86..87 \"=\"\n+        WHITESPACE@87..88 \" \"\n+        TUPLE_EXPR@88..90\n+          L_PAREN@88..89 \"(\"\n+          R_PAREN@89..90 \")\"\n+        SEMICOLON@90..91 \";\"\n+      WHITESPACE@91..92 \"\\n\"\n+      R_CURLY@92..93 \"}\"\n   WHITESPACE@93..94 \"\\n\""}, {"sha": "b67714c176957fe6795d3210bc733c604c4f745f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0112_bind_pat.rast", "status": "modified", "additions": 115, "deletions": 116, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,120 +9,119 @@ SOURCE_FILE@0..146\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..145\n-      BLOCK@10..145\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..27\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          BIND_PAT@20..21\n-            NAME@20..21\n-              IDENT@20..21 \"a\"\n-          WHITESPACE@21..22 \" \"\n-          EQ@22..23 \"=\"\n-          WHITESPACE@23..24 \" \"\n-          TUPLE_EXPR@24..26\n-            L_PAREN@24..25 \"(\"\n-            R_PAREN@25..26 \")\"\n-          SEMICOLON@26..27 \";\"\n-        WHITESPACE@27..32 \"\\n    \"\n-        LET_STMT@32..47\n-          LET_KW@32..35 \"let\"\n-          WHITESPACE@35..36 \" \"\n-          BIND_PAT@36..41\n-            MUT_KW@36..39 \"mut\"\n-            WHITESPACE@39..40 \" \"\n-            NAME@40..41\n-              IDENT@40..41 \"b\"\n-          WHITESPACE@41..42 \" \"\n-          EQ@42..43 \"=\"\n-          WHITESPACE@43..44 \" \"\n-          TUPLE_EXPR@44..46\n-            L_PAREN@44..45 \"(\"\n-            R_PAREN@45..46 \")\"\n-          SEMICOLON@46..47 \";\"\n-        WHITESPACE@47..52 \"\\n    \"\n-        LET_STMT@52..67\n-          LET_KW@52..55 \"let\"\n-          WHITESPACE@55..56 \" \"\n-          BIND_PAT@56..61\n-            REF_KW@56..59 \"ref\"\n-            WHITESPACE@59..60 \" \"\n-            NAME@60..61\n-              IDENT@60..61 \"c\"\n-          WHITESPACE@61..62 \" \"\n-          EQ@62..63 \"=\"\n-          WHITESPACE@63..64 \" \"\n-          TUPLE_EXPR@64..66\n-            L_PAREN@64..65 \"(\"\n-            R_PAREN@65..66 \")\"\n-          SEMICOLON@66..67 \";\"\n-        WHITESPACE@67..72 \"\\n    \"\n-        LET_STMT@72..91\n-          LET_KW@72..75 \"let\"\n-          WHITESPACE@75..76 \" \"\n-          BIND_PAT@76..85\n-            REF_KW@76..79 \"ref\"\n-            WHITESPACE@79..80 \" \"\n-            MUT_KW@80..83 \"mut\"\n-            WHITESPACE@83..84 \" \"\n-            NAME@84..85\n-              IDENT@84..85 \"d\"\n-          WHITESPACE@85..86 \" \"\n-          EQ@86..87 \"=\"\n-          WHITESPACE@87..88 \" \"\n-          TUPLE_EXPR@88..90\n-            L_PAREN@88..89 \"(\"\n-            R_PAREN@89..90 \")\"\n-          SEMICOLON@90..91 \";\"\n-        WHITESPACE@91..96 \"\\n    \"\n-        LET_STMT@96..111\n-          LET_KW@96..99 \"let\"\n-          WHITESPACE@99..100 \" \"\n-          BIND_PAT@100..105\n-            NAME@100..101\n-              IDENT@100..101 \"e\"\n-            WHITESPACE@101..102 \" \"\n-            AT@102..103 \"@\"\n-            WHITESPACE@103..104 \" \"\n-            PLACEHOLDER_PAT@104..105\n-              UNDERSCORE@104..105 \"_\"\n-          WHITESPACE@105..106 \" \"\n-          EQ@106..107 \"=\"\n-          WHITESPACE@107..108 \" \"\n-          TUPLE_EXPR@108..110\n-            L_PAREN@108..109 \"(\"\n-            R_PAREN@109..110 \")\"\n-          SEMICOLON@110..111 \";\"\n-        WHITESPACE@111..116 \"\\n    \"\n-        LET_STMT@116..143\n-          LET_KW@116..119 \"let\"\n-          WHITESPACE@119..120 \" \"\n-          BIND_PAT@120..137\n-            REF_KW@120..123 \"ref\"\n-            WHITESPACE@123..124 \" \"\n-            MUT_KW@124..127 \"mut\"\n-            WHITESPACE@127..128 \" \"\n-            NAME@128..129\n-              IDENT@128..129 \"f\"\n-            WHITESPACE@129..130 \" \"\n-            AT@130..131 \"@\"\n-            WHITESPACE@131..132 \" \"\n-            BIND_PAT@132..137\n-              NAME@132..133\n-                IDENT@132..133 \"g\"\n-              WHITESPACE@133..134 \" \"\n-              AT@134..135 \"@\"\n-              WHITESPACE@135..136 \" \"\n-              PLACEHOLDER_PAT@136..137\n-                UNDERSCORE@136..137 \"_\"\n-          WHITESPACE@137..138 \" \"\n-          EQ@138..139 \"=\"\n-          WHITESPACE@139..140 \" \"\n-          TUPLE_EXPR@140..142\n-            L_PAREN@140..141 \"(\"\n-            R_PAREN@141..142 \")\"\n-          SEMICOLON@142..143 \";\"\n-        WHITESPACE@143..144 \"\\n\"\n-        R_CURLY@144..145 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..27\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        BIND_PAT@20..21\n+          NAME@20..21\n+            IDENT@20..21 \"a\"\n+        WHITESPACE@21..22 \" \"\n+        EQ@22..23 \"=\"\n+        WHITESPACE@23..24 \" \"\n+        TUPLE_EXPR@24..26\n+          L_PAREN@24..25 \"(\"\n+          R_PAREN@25..26 \")\"\n+        SEMICOLON@26..27 \";\"\n+      WHITESPACE@27..32 \"\\n    \"\n+      LET_STMT@32..47\n+        LET_KW@32..35 \"let\"\n+        WHITESPACE@35..36 \" \"\n+        BIND_PAT@36..41\n+          MUT_KW@36..39 \"mut\"\n+          WHITESPACE@39..40 \" \"\n+          NAME@40..41\n+            IDENT@40..41 \"b\"\n+        WHITESPACE@41..42 \" \"\n+        EQ@42..43 \"=\"\n+        WHITESPACE@43..44 \" \"\n+        TUPLE_EXPR@44..46\n+          L_PAREN@44..45 \"(\"\n+          R_PAREN@45..46 \")\"\n+        SEMICOLON@46..47 \";\"\n+      WHITESPACE@47..52 \"\\n    \"\n+      LET_STMT@52..67\n+        LET_KW@52..55 \"let\"\n+        WHITESPACE@55..56 \" \"\n+        BIND_PAT@56..61\n+          REF_KW@56..59 \"ref\"\n+          WHITESPACE@59..60 \" \"\n+          NAME@60..61\n+            IDENT@60..61 \"c\"\n+        WHITESPACE@61..62 \" \"\n+        EQ@62..63 \"=\"\n+        WHITESPACE@63..64 \" \"\n+        TUPLE_EXPR@64..66\n+          L_PAREN@64..65 \"(\"\n+          R_PAREN@65..66 \")\"\n+        SEMICOLON@66..67 \";\"\n+      WHITESPACE@67..72 \"\\n    \"\n+      LET_STMT@72..91\n+        LET_KW@72..75 \"let\"\n+        WHITESPACE@75..76 \" \"\n+        BIND_PAT@76..85\n+          REF_KW@76..79 \"ref\"\n+          WHITESPACE@79..80 \" \"\n+          MUT_KW@80..83 \"mut\"\n+          WHITESPACE@83..84 \" \"\n+          NAME@84..85\n+            IDENT@84..85 \"d\"\n+        WHITESPACE@85..86 \" \"\n+        EQ@86..87 \"=\"\n+        WHITESPACE@87..88 \" \"\n+        TUPLE_EXPR@88..90\n+          L_PAREN@88..89 \"(\"\n+          R_PAREN@89..90 \")\"\n+        SEMICOLON@90..91 \";\"\n+      WHITESPACE@91..96 \"\\n    \"\n+      LET_STMT@96..111\n+        LET_KW@96..99 \"let\"\n+        WHITESPACE@99..100 \" \"\n+        BIND_PAT@100..105\n+          NAME@100..101\n+            IDENT@100..101 \"e\"\n+          WHITESPACE@101..102 \" \"\n+          AT@102..103 \"@\"\n+          WHITESPACE@103..104 \" \"\n+          PLACEHOLDER_PAT@104..105\n+            UNDERSCORE@104..105 \"_\"\n+        WHITESPACE@105..106 \" \"\n+        EQ@106..107 \"=\"\n+        WHITESPACE@107..108 \" \"\n+        TUPLE_EXPR@108..110\n+          L_PAREN@108..109 \"(\"\n+          R_PAREN@109..110 \")\"\n+        SEMICOLON@110..111 \";\"\n+      WHITESPACE@111..116 \"\\n    \"\n+      LET_STMT@116..143\n+        LET_KW@116..119 \"let\"\n+        WHITESPACE@119..120 \" \"\n+        BIND_PAT@120..137\n+          REF_KW@120..123 \"ref\"\n+          WHITESPACE@123..124 \" \"\n+          MUT_KW@124..127 \"mut\"\n+          WHITESPACE@127..128 \" \"\n+          NAME@128..129\n+            IDENT@128..129 \"f\"\n+          WHITESPACE@129..130 \" \"\n+          AT@130..131 \"@\"\n+          WHITESPACE@131..132 \" \"\n+          BIND_PAT@132..137\n+            NAME@132..133\n+              IDENT@132..133 \"g\"\n+            WHITESPACE@133..134 \" \"\n+            AT@134..135 \"@\"\n+            WHITESPACE@135..136 \" \"\n+            PLACEHOLDER_PAT@136..137\n+              UNDERSCORE@136..137 \"_\"\n+        WHITESPACE@137..138 \" \"\n+        EQ@138..139 \"=\"\n+        WHITESPACE@139..140 \" \"\n+        TUPLE_EXPR@140..142\n+          L_PAREN@140..141 \"(\"\n+          R_PAREN@141..142 \")\"\n+        SEMICOLON@142..143 \";\"\n+      WHITESPACE@143..144 \"\\n\"\n+      R_CURLY@144..145 \"}\"\n   WHITESPACE@145..146 \"\\n\""}, {"sha": "5de480da90a45bf63a943620001c80eb8b09a470", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0113_nocontentexpr.rast", "status": "modified", "additions": 44, "deletions": 46, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0113_nocontentexpr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0113_nocontentexpr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0113_nocontentexpr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -8,50 +8,48 @@ SOURCE_FILE@0..50\n       L_PAREN@6..7 \"(\"\n       R_PAREN@7..8 \")\"\n     BLOCK_EXPR@8..49\n-      BLOCK@8..49\n-        L_CURLY@8..9 \"{\"\n-        WHITESPACE@9..14 \"\\n    \"\n-        SEMICOLON@14..15 \";\"\n-        SEMICOLON@15..16 \";\"\n-        SEMICOLON@16..17 \";\"\n-        EXPR_STMT@17..29\n-          CALL_EXPR@17..28\n-            PATH_EXPR@17..26\n-              PATH@17..26\n-                PATH_SEGMENT@17..26\n-                  NAME_REF@17..26\n-                    IDENT@17..26 \"some_expr\"\n-            ARG_LIST@26..28\n-              L_PAREN@26..27 \"(\"\n-              R_PAREN@27..28 \")\"\n-          SEMICOLON@28..29 \";\"\n-        SEMICOLON@29..30 \";\"\n-        SEMICOLON@30..31 \";\"\n-        SEMICOLON@31..32 \";\"\n-        EXPR_STMT@32..38\n-          BLOCK_EXPR@32..37\n-            BLOCK@32..37\n-              L_CURLY@32..33 \"{\"\n-              SEMICOLON@33..34 \";\"\n-              SEMICOLON@34..35 \";\"\n-              SEMICOLON@35..36 \";\"\n-              R_CURLY@36..37 \"}\"\n-          SEMICOLON@37..38 \";\"\n-        SEMICOLON@38..39 \";\"\n-        SEMICOLON@39..40 \";\"\n-        SEMICOLON@40..41 \";\"\n-        CALL_EXPR@41..47\n-          PATH_EXPR@41..43\n-            PATH@41..43\n-              PATH_SEGMENT@41..43\n-                NAME_REF@41..43\n-                  IDENT@41..43 \"Ok\"\n-          ARG_LIST@43..47\n-            L_PAREN@43..44 \"(\"\n-            TUPLE_EXPR@44..46\n-              L_PAREN@44..45 \"(\"\n-              R_PAREN@45..46 \")\"\n-            R_PAREN@46..47 \")\"\n-        WHITESPACE@47..48 \"\\n\"\n-        R_CURLY@48..49 \"}\"\n+      L_CURLY@8..9 \"{\"\n+      WHITESPACE@9..14 \"\\n    \"\n+      SEMICOLON@14..15 \";\"\n+      SEMICOLON@15..16 \";\"\n+      SEMICOLON@16..17 \";\"\n+      EXPR_STMT@17..29\n+        CALL_EXPR@17..28\n+          PATH_EXPR@17..26\n+            PATH@17..26\n+              PATH_SEGMENT@17..26\n+                NAME_REF@17..26\n+                  IDENT@17..26 \"some_expr\"\n+          ARG_LIST@26..28\n+            L_PAREN@26..27 \"(\"\n+            R_PAREN@27..28 \")\"\n+        SEMICOLON@28..29 \";\"\n+      SEMICOLON@29..30 \";\"\n+      SEMICOLON@30..31 \";\"\n+      SEMICOLON@31..32 \";\"\n+      EXPR_STMT@32..38\n+        BLOCK_EXPR@32..37\n+          L_CURLY@32..33 \"{\"\n+          SEMICOLON@33..34 \";\"\n+          SEMICOLON@34..35 \";\"\n+          SEMICOLON@35..36 \";\"\n+          R_CURLY@36..37 \"}\"\n+        SEMICOLON@37..38 \";\"\n+      SEMICOLON@38..39 \";\"\n+      SEMICOLON@39..40 \";\"\n+      SEMICOLON@40..41 \";\"\n+      CALL_EXPR@41..47\n+        PATH_EXPR@41..43\n+          PATH@41..43\n+            PATH_SEGMENT@41..43\n+              NAME_REF@41..43\n+                IDENT@41..43 \"Ok\"\n+        ARG_LIST@43..47\n+          L_PAREN@43..44 \"(\"\n+          TUPLE_EXPR@44..46\n+            L_PAREN@44..45 \"(\"\n+            R_PAREN@45..46 \")\"\n+          R_PAREN@46..47 \")\"\n+      WHITESPACE@47..48 \"\\n\"\n+      R_CURLY@48..49 \"}\"\n   WHITESPACE@49..50 \"\\n\""}, {"sha": "e152c6b6cdeae4fc1638732ac767ae234875731b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0118_match_guard.rast", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,40 +9,39 @@ SOURCE_FILE@0..58\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..57\n-      BLOCK@9..57\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        MATCH_EXPR@15..55\n-          MATCH_KW@15..20 \"match\"\n-          WHITESPACE@20..21 \" \"\n-          TUPLE_EXPR@21..23\n-            L_PAREN@21..22 \"(\"\n-            R_PAREN@22..23 \")\"\n-          WHITESPACE@23..24 \" \"\n-          MATCH_ARM_LIST@24..55\n-            L_CURLY@24..25 \"{\"\n-            WHITESPACE@25..34 \"\\n        \"\n-            MATCH_ARM@34..48\n-              PLACEHOLDER_PAT@34..35\n-                UNDERSCORE@34..35 \"_\"\n-              WHITESPACE@35..36 \" \"\n-              MATCH_GUARD@36..42\n-                IF_KW@36..38 \"if\"\n-                WHITESPACE@38..39 \" \"\n-                PATH_EXPR@39..42\n-                  PATH@39..42\n-                    PATH_SEGMENT@39..42\n-                      NAME_REF@39..42\n-                        IDENT@39..42 \"foo\"\n-              WHITESPACE@42..43 \" \"\n-              FAT_ARROW@43..45 \"=>\"\n-              WHITESPACE@45..46 \" \"\n-              TUPLE_EXPR@46..48\n-                L_PAREN@46..47 \"(\"\n-                R_PAREN@47..48 \")\"\n-            COMMA@48..49 \",\"\n-            WHITESPACE@49..54 \"\\n    \"\n-            R_CURLY@54..55 \"}\"\n-        WHITESPACE@55..56 \"\\n\"\n-        R_CURLY@56..57 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      MATCH_EXPR@15..55\n+        MATCH_KW@15..20 \"match\"\n+        WHITESPACE@20..21 \" \"\n+        TUPLE_EXPR@21..23\n+          L_PAREN@21..22 \"(\"\n+          R_PAREN@22..23 \")\"\n+        WHITESPACE@23..24 \" \"\n+        MATCH_ARM_LIST@24..55\n+          L_CURLY@24..25 \"{\"\n+          WHITESPACE@25..34 \"\\n        \"\n+          MATCH_ARM@34..48\n+            PLACEHOLDER_PAT@34..35\n+              UNDERSCORE@34..35 \"_\"\n+            WHITESPACE@35..36 \" \"\n+            MATCH_GUARD@36..42\n+              IF_KW@36..38 \"if\"\n+              WHITESPACE@38..39 \" \"\n+              PATH_EXPR@39..42\n+                PATH@39..42\n+                  PATH_SEGMENT@39..42\n+                    NAME_REF@39..42\n+                      IDENT@39..42 \"foo\"\n+            WHITESPACE@42..43 \" \"\n+            FAT_ARROW@43..45 \"=>\"\n+            WHITESPACE@45..46 \" \"\n+            TUPLE_EXPR@46..48\n+              L_PAREN@46..47 \"(\"\n+              R_PAREN@47..48 \")\"\n+          COMMA@48..49 \",\"\n+          WHITESPACE@49..54 \"\\n    \"\n+          R_CURLY@54..55 \"}\"\n+      WHITESPACE@55..56 \"\\n\"\n+      R_CURLY@56..57 \"}\"\n   WHITESPACE@57..58 \"\\n\""}, {"sha": "b283ab8041097f422bc1442ce2777bf6f4c01245", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0120_match_arms_inner_attribute.rast", "status": "modified", "additions": 68, "deletions": 69, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0120_match_arms_inner_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0120_match_arms_inner_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0120_match_arms_inner_attribute.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,73 +9,72 @@ SOURCE_FILE@0..139\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..138\n-      BLOCK@9..138\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        MATCH_EXPR@15..136\n-          MATCH_KW@15..20 \"match\"\n-          WHITESPACE@20..21 \" \"\n-          TUPLE_EXPR@21..23\n-            L_PAREN@21..22 \"(\"\n-            R_PAREN@22..23 \")\"\n-          WHITESPACE@23..24 \" \"\n-          MATCH_ARM_LIST@24..136\n-            L_CURLY@24..25 \"{\"\n-            WHITESPACE@25..34 \"\\n        \"\n-            ATTR@34..60\n-              POUND@34..35 \"#\"\n-              BANG@35..36 \"!\"\n-              L_BRACK@36..37 \"[\"\n-              PATH@37..40\n-                PATH_SEGMENT@37..40\n-                  NAME_REF@37..40\n-                    IDENT@37..40 \"doc\"\n-              TOKEN_TREE@40..59\n-                L_PAREN@40..41 \"(\"\n-                STRING@41..58 \"\\\"Inner attribute\\\"\"\n-                R_PAREN@58..59 \")\"\n-              R_BRACK@59..60 \"]\"\n-            WHITESPACE@60..69 \"\\n        \"\n-            ATTR@69..86\n-              POUND@69..70 \"#\"\n-              BANG@70..71 \"!\"\n-              L_BRACK@71..72 \"[\"\n-              PATH@72..75\n-                PATH_SEGMENT@72..75\n-                  NAME_REF@72..75\n-                    IDENT@72..75 \"doc\"\n-              TOKEN_TREE@75..85\n-                L_PAREN@75..76 \"(\"\n-                STRING@76..84 \"\\\"Can be\\\"\"\n-                R_PAREN@84..85 \")\"\n-              R_BRACK@85..86 \"]\"\n-            WHITESPACE@86..95 \"\\n        \"\n-            ATTR@95..113\n-              POUND@95..96 \"#\"\n-              BANG@96..97 \"!\"\n-              L_BRACK@97..98 \"[\"\n-              PATH@98..101\n-                PATH_SEGMENT@98..101\n-                  NAME_REF@98..101\n-                    IDENT@98..101 \"doc\"\n-              TOKEN_TREE@101..112\n-                L_PAREN@101..102 \"(\"\n-                STRING@102..111 \"\\\"Stacked\\\"\"\n-                R_PAREN@111..112 \")\"\n-              R_BRACK@112..113 \"]\"\n-            WHITESPACE@113..122 \"\\n        \"\n-            MATCH_ARM@122..129\n-              PLACEHOLDER_PAT@122..123\n-                UNDERSCORE@122..123 \"_\"\n-              WHITESPACE@123..124 \" \"\n-              FAT_ARROW@124..126 \"=>\"\n-              WHITESPACE@126..127 \" \"\n-              TUPLE_EXPR@127..129\n-                L_PAREN@127..128 \"(\"\n-                R_PAREN@128..129 \")\"\n-            COMMA@129..130 \",\"\n-            WHITESPACE@130..135 \"\\n    \"\n-            R_CURLY@135..136 \"}\"\n-        WHITESPACE@136..137 \"\\n\"\n-        R_CURLY@137..138 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      MATCH_EXPR@15..136\n+        MATCH_KW@15..20 \"match\"\n+        WHITESPACE@20..21 \" \"\n+        TUPLE_EXPR@21..23\n+          L_PAREN@21..22 \"(\"\n+          R_PAREN@22..23 \")\"\n+        WHITESPACE@23..24 \" \"\n+        MATCH_ARM_LIST@24..136\n+          L_CURLY@24..25 \"{\"\n+          WHITESPACE@25..34 \"\\n        \"\n+          ATTR@34..60\n+            POUND@34..35 \"#\"\n+            BANG@35..36 \"!\"\n+            L_BRACK@36..37 \"[\"\n+            PATH@37..40\n+              PATH_SEGMENT@37..40\n+                NAME_REF@37..40\n+                  IDENT@37..40 \"doc\"\n+            TOKEN_TREE@40..59\n+              L_PAREN@40..41 \"(\"\n+              STRING@41..58 \"\\\"Inner attribute\\\"\"\n+              R_PAREN@58..59 \")\"\n+            R_BRACK@59..60 \"]\"\n+          WHITESPACE@60..69 \"\\n        \"\n+          ATTR@69..86\n+            POUND@69..70 \"#\"\n+            BANG@70..71 \"!\"\n+            L_BRACK@71..72 \"[\"\n+            PATH@72..75\n+              PATH_SEGMENT@72..75\n+                NAME_REF@72..75\n+                  IDENT@72..75 \"doc\"\n+            TOKEN_TREE@75..85\n+              L_PAREN@75..76 \"(\"\n+              STRING@76..84 \"\\\"Can be\\\"\"\n+              R_PAREN@84..85 \")\"\n+            R_BRACK@85..86 \"]\"\n+          WHITESPACE@86..95 \"\\n        \"\n+          ATTR@95..113\n+            POUND@95..96 \"#\"\n+            BANG@96..97 \"!\"\n+            L_BRACK@97..98 \"[\"\n+            PATH@98..101\n+              PATH_SEGMENT@98..101\n+                NAME_REF@98..101\n+                  IDENT@98..101 \"doc\"\n+            TOKEN_TREE@101..112\n+              L_PAREN@101..102 \"(\"\n+              STRING@102..111 \"\\\"Stacked\\\"\"\n+              R_PAREN@111..112 \")\"\n+            R_BRACK@112..113 \"]\"\n+          WHITESPACE@113..122 \"\\n        \"\n+          MATCH_ARM@122..129\n+            PLACEHOLDER_PAT@122..123\n+              UNDERSCORE@122..123 \"_\"\n+            WHITESPACE@123..124 \" \"\n+            FAT_ARROW@124..126 \"=>\"\n+            WHITESPACE@126..127 \" \"\n+            TUPLE_EXPR@127..129\n+              L_PAREN@127..128 \"(\"\n+              R_PAREN@128..129 \")\"\n+          COMMA@129..130 \",\"\n+          WHITESPACE@130..135 \"\\n    \"\n+          R_CURLY@135..136 \"}\"\n+      WHITESPACE@136..137 \"\\n\"\n+      R_CURLY@137..138 \"}\"\n   WHITESPACE@138..139 \"\\n\""}, {"sha": "9d547091421ef01775a1b4c9fb09dd0243d6891b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0121_match_arms_outer_attributes.rast", "status": "modified", "additions": 133, "deletions": 134, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0121_match_arms_outer_attributes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0121_match_arms_outer_attributes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0121_match_arms_outer_attributes.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,138 +9,137 @@ SOURCE_FILE@0..259\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..258\n-      BLOCK@9..258\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        MATCH_EXPR@15..256\n-          MATCH_KW@15..20 \"match\"\n-          WHITESPACE@20..21 \" \"\n-          TUPLE_EXPR@21..23\n-            L_PAREN@21..22 \"(\"\n-            R_PAREN@22..23 \")\"\n-          WHITESPACE@23..24 \" \"\n-          MATCH_ARM_LIST@24..256\n-            L_CURLY@24..25 \"{\"\n-            WHITESPACE@25..34 \"\\n        \"\n-            MATCH_ARM@34..74\n-              ATTR@34..58\n-                POUND@34..35 \"#\"\n-                L_BRACK@35..36 \"[\"\n-                PATH@36..39\n-                  PATH_SEGMENT@36..39\n-                    NAME_REF@36..39\n-                      IDENT@36..39 \"cfg\"\n-                TOKEN_TREE@39..57\n-                  L_PAREN@39..40 \"(\"\n-                  IDENT@40..47 \"feature\"\n-                  WHITESPACE@47..48 \" \"\n-                  EQ@48..49 \"=\"\n-                  WHITESPACE@49..50 \" \"\n-                  STRING@50..56 \"\\\"some\\\"\"\n-                  R_PAREN@56..57 \")\"\n-                R_BRACK@57..58 \"]\"\n-              WHITESPACE@58..67 \"\\n        \"\n-              PLACEHOLDER_PAT@67..68\n-                UNDERSCORE@67..68 \"_\"\n-              WHITESPACE@68..69 \" \"\n-              FAT_ARROW@69..71 \"=>\"\n-              WHITESPACE@71..72 \" \"\n-              TUPLE_EXPR@72..74\n-                L_PAREN@72..73 \"(\"\n-                R_PAREN@73..74 \")\"\n-            COMMA@74..75 \",\"\n-            WHITESPACE@75..84 \"\\n        \"\n-            MATCH_ARM@84..125\n-              ATTR@84..109\n-                POUND@84..85 \"#\"\n-                L_BRACK@85..86 \"[\"\n-                PATH@86..89\n-                  PATH_SEGMENT@86..89\n-                    NAME_REF@86..89\n-                      IDENT@86..89 \"cfg\"\n-                TOKEN_TREE@89..108\n-                  L_PAREN@89..90 \"(\"\n-                  IDENT@90..97 \"feature\"\n-                  WHITESPACE@97..98 \" \"\n-                  EQ@98..99 \"=\"\n-                  WHITESPACE@99..100 \" \"\n-                  STRING@100..107 \"\\\"other\\\"\"\n-                  R_PAREN@107..108 \")\"\n-                R_BRACK@108..109 \"]\"\n-              WHITESPACE@109..118 \"\\n        \"\n-              PLACEHOLDER_PAT@118..119\n-                UNDERSCORE@118..119 \"_\"\n-              WHITESPACE@119..120 \" \"\n-              FAT_ARROW@120..122 \"=>\"\n-              WHITESPACE@122..123 \" \"\n-              TUPLE_EXPR@123..125\n-                L_PAREN@123..124 \"(\"\n-                R_PAREN@124..125 \")\"\n-            COMMA@125..126 \",\"\n-            WHITESPACE@126..135 \"\\n        \"\n-            MATCH_ARM@135..249\n-              ATTR@135..159\n-                POUND@135..136 \"#\"\n-                L_BRACK@136..137 \"[\"\n-                PATH@137..140\n-                  PATH_SEGMENT@137..140\n-                    NAME_REF@137..140\n-                      IDENT@137..140 \"cfg\"\n-                TOKEN_TREE@140..158\n-                  L_PAREN@140..141 \"(\"\n-                  IDENT@141..148 \"feature\"\n-                  WHITESPACE@148..149 \" \"\n-                  EQ@149..150 \"=\"\n-                  WHITESPACE@150..151 \" \"\n-                  STRING@151..157 \"\\\"many\\\"\"\n-                  R_PAREN@157..158 \")\"\n-                R_BRACK@158..159 \"]\"\n-              WHITESPACE@159..168 \"\\n        \"\n-              ATTR@168..198\n-                POUND@168..169 \"#\"\n-                L_BRACK@169..170 \"[\"\n-                PATH@170..173\n-                  PATH_SEGMENT@170..173\n-                    NAME_REF@170..173\n-                      IDENT@170..173 \"cfg\"\n-                TOKEN_TREE@173..197\n-                  L_PAREN@173..174 \"(\"\n-                  IDENT@174..181 \"feature\"\n-                  WHITESPACE@181..182 \" \"\n-                  EQ@182..183 \"=\"\n-                  WHITESPACE@183..184 \" \"\n-                  STRING@184..196 \"\\\"attributes\\\"\"\n-                  R_PAREN@196..197 \")\"\n-                R_BRACK@197..198 \"]\"\n-              WHITESPACE@198..207 \"\\n        \"\n-              ATTR@207..233\n-                POUND@207..208 \"#\"\n-                L_BRACK@208..209 \"[\"\n-                PATH@209..212\n-                  PATH_SEGMENT@209..212\n-                    NAME_REF@209..212\n-                      IDENT@209..212 \"cfg\"\n-                TOKEN_TREE@212..232\n-                  L_PAREN@212..213 \"(\"\n-                  IDENT@213..220 \"feature\"\n-                  WHITESPACE@220..221 \" \"\n-                  EQ@221..222 \"=\"\n-                  WHITESPACE@222..223 \" \"\n-                  STRING@223..231 \"\\\"before\\\"\"\n-                  R_PAREN@231..232 \")\"\n-                R_BRACK@232..233 \"]\"\n-              WHITESPACE@233..242 \"\\n        \"\n-              PLACEHOLDER_PAT@242..243\n-                UNDERSCORE@242..243 \"_\"\n-              WHITESPACE@243..244 \" \"\n-              FAT_ARROW@244..246 \"=>\"\n-              WHITESPACE@246..247 \" \"\n-              TUPLE_EXPR@247..249\n-                L_PAREN@247..248 \"(\"\n-                R_PAREN@248..249 \")\"\n-            COMMA@249..250 \",\"\n-            WHITESPACE@250..255 \"\\n    \"\n-            R_CURLY@255..256 \"}\"\n-        WHITESPACE@256..257 \"\\n\"\n-        R_CURLY@257..258 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      MATCH_EXPR@15..256\n+        MATCH_KW@15..20 \"match\"\n+        WHITESPACE@20..21 \" \"\n+        TUPLE_EXPR@21..23\n+          L_PAREN@21..22 \"(\"\n+          R_PAREN@22..23 \")\"\n+        WHITESPACE@23..24 \" \"\n+        MATCH_ARM_LIST@24..256\n+          L_CURLY@24..25 \"{\"\n+          WHITESPACE@25..34 \"\\n        \"\n+          MATCH_ARM@34..74\n+            ATTR@34..58\n+              POUND@34..35 \"#\"\n+              L_BRACK@35..36 \"[\"\n+              PATH@36..39\n+                PATH_SEGMENT@36..39\n+                  NAME_REF@36..39\n+                    IDENT@36..39 \"cfg\"\n+              TOKEN_TREE@39..57\n+                L_PAREN@39..40 \"(\"\n+                IDENT@40..47 \"feature\"\n+                WHITESPACE@47..48 \" \"\n+                EQ@48..49 \"=\"\n+                WHITESPACE@49..50 \" \"\n+                STRING@50..56 \"\\\"some\\\"\"\n+                R_PAREN@56..57 \")\"\n+              R_BRACK@57..58 \"]\"\n+            WHITESPACE@58..67 \"\\n        \"\n+            PLACEHOLDER_PAT@67..68\n+              UNDERSCORE@67..68 \"_\"\n+            WHITESPACE@68..69 \" \"\n+            FAT_ARROW@69..71 \"=>\"\n+            WHITESPACE@71..72 \" \"\n+            TUPLE_EXPR@72..74\n+              L_PAREN@72..73 \"(\"\n+              R_PAREN@73..74 \")\"\n+          COMMA@74..75 \",\"\n+          WHITESPACE@75..84 \"\\n        \"\n+          MATCH_ARM@84..125\n+            ATTR@84..109\n+              POUND@84..85 \"#\"\n+              L_BRACK@85..86 \"[\"\n+              PATH@86..89\n+                PATH_SEGMENT@86..89\n+                  NAME_REF@86..89\n+                    IDENT@86..89 \"cfg\"\n+              TOKEN_TREE@89..108\n+                L_PAREN@89..90 \"(\"\n+                IDENT@90..97 \"feature\"\n+                WHITESPACE@97..98 \" \"\n+                EQ@98..99 \"=\"\n+                WHITESPACE@99..100 \" \"\n+                STRING@100..107 \"\\\"other\\\"\"\n+                R_PAREN@107..108 \")\"\n+              R_BRACK@108..109 \"]\"\n+            WHITESPACE@109..118 \"\\n        \"\n+            PLACEHOLDER_PAT@118..119\n+              UNDERSCORE@118..119 \"_\"\n+            WHITESPACE@119..120 \" \"\n+            FAT_ARROW@120..122 \"=>\"\n+            WHITESPACE@122..123 \" \"\n+            TUPLE_EXPR@123..125\n+              L_PAREN@123..124 \"(\"\n+              R_PAREN@124..125 \")\"\n+          COMMA@125..126 \",\"\n+          WHITESPACE@126..135 \"\\n        \"\n+          MATCH_ARM@135..249\n+            ATTR@135..159\n+              POUND@135..136 \"#\"\n+              L_BRACK@136..137 \"[\"\n+              PATH@137..140\n+                PATH_SEGMENT@137..140\n+                  NAME_REF@137..140\n+                    IDENT@137..140 \"cfg\"\n+              TOKEN_TREE@140..158\n+                L_PAREN@140..141 \"(\"\n+                IDENT@141..148 \"feature\"\n+                WHITESPACE@148..149 \" \"\n+                EQ@149..150 \"=\"\n+                WHITESPACE@150..151 \" \"\n+                STRING@151..157 \"\\\"many\\\"\"\n+                R_PAREN@157..158 \")\"\n+              R_BRACK@158..159 \"]\"\n+            WHITESPACE@159..168 \"\\n        \"\n+            ATTR@168..198\n+              POUND@168..169 \"#\"\n+              L_BRACK@169..170 \"[\"\n+              PATH@170..173\n+                PATH_SEGMENT@170..173\n+                  NAME_REF@170..173\n+                    IDENT@170..173 \"cfg\"\n+              TOKEN_TREE@173..197\n+                L_PAREN@173..174 \"(\"\n+                IDENT@174..181 \"feature\"\n+                WHITESPACE@181..182 \" \"\n+                EQ@182..183 \"=\"\n+                WHITESPACE@183..184 \" \"\n+                STRING@184..196 \"\\\"attributes\\\"\"\n+                R_PAREN@196..197 \")\"\n+              R_BRACK@197..198 \"]\"\n+            WHITESPACE@198..207 \"\\n        \"\n+            ATTR@207..233\n+              POUND@207..208 \"#\"\n+              L_BRACK@208..209 \"[\"\n+              PATH@209..212\n+                PATH_SEGMENT@209..212\n+                  NAME_REF@209..212\n+                    IDENT@209..212 \"cfg\"\n+              TOKEN_TREE@212..232\n+                L_PAREN@212..213 \"(\"\n+                IDENT@213..220 \"feature\"\n+                WHITESPACE@220..221 \" \"\n+                EQ@221..222 \"=\"\n+                WHITESPACE@222..223 \" \"\n+                STRING@223..231 \"\\\"before\\\"\"\n+                R_PAREN@231..232 \")\"\n+              R_BRACK@232..233 \"]\"\n+            WHITESPACE@233..242 \"\\n        \"\n+            PLACEHOLDER_PAT@242..243\n+              UNDERSCORE@242..243 \"_\"\n+            WHITESPACE@243..244 \" \"\n+            FAT_ARROW@244..246 \"=>\"\n+            WHITESPACE@246..247 \" \"\n+            TUPLE_EXPR@247..249\n+              L_PAREN@247..248 \"(\"\n+              R_PAREN@248..249 \")\"\n+          COMMA@249..250 \",\"\n+          WHITESPACE@250..255 \"\\n    \"\n+          R_CURLY@255..256 \"}\"\n+      WHITESPACE@256..257 \"\\n\"\n+      R_CURLY@257..258 \"}\"\n   WHITESPACE@258..259 \"\\n\""}, {"sha": "ada2fc54eb5838d8cb658cedfdb459a06f3cf178", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0122_generic_lifetime_type_attribute.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -59,8 +59,7 @@ SOURCE_FILE@0..64\n       R_PAREN@58..59 \")\"\n     WHITESPACE@59..60 \" \"\n     BLOCK_EXPR@60..63\n-      BLOCK@60..63\n-        L_CURLY@60..61 \"{\"\n-        WHITESPACE@61..62 \"\\n\"\n-        R_CURLY@62..63 \"}\"\n+      L_CURLY@60..61 \"{\"\n+      WHITESPACE@61..62 \"\\n\"\n+      R_CURLY@62..63 \"}\"\n   WHITESPACE@63..64 \"\\n\""}, {"sha": "6178dfe5980c2a7632f1d40d53b50620fdc9325b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0124_async_fn.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -11,7 +11,6 @@ SOURCE_FILE@0..18\n       R_PAREN@13..14 \")\"\n     WHITESPACE@14..15 \" \"\n     BLOCK_EXPR@15..17\n-      BLOCK@15..17\n-        L_CURLY@15..16 \"{\"\n-        R_CURLY@16..17 \"}\"\n+      L_CURLY@15..16 \"{\"\n+      R_CURLY@16..17 \"}\"\n   WHITESPACE@17..18 \"\\n\""}, {"sha": "ced59b7c1f80465bee30ea82a45683fdffdf8f11", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_crate_keyword_path.rast", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,24 +9,23 @@ SOURCE_FILE@0..27\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..26\n-      BLOCK@9..26\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \" \"\n-        EXPR_STMT@11..24\n-          CALL_EXPR@11..23\n-            PATH_EXPR@11..21\n-              PATH@11..21\n-                PATH@11..16\n-                  PATH_SEGMENT@11..16\n-                    CRATE_KW@11..16 \"crate\"\n-                COLON2@16..18 \"::\"\n-                PATH_SEGMENT@18..21\n-                  NAME_REF@18..21\n-                    IDENT@18..21 \"foo\"\n-            ARG_LIST@21..23\n-              L_PAREN@21..22 \"(\"\n-              R_PAREN@22..23 \")\"\n-          SEMICOLON@23..24 \";\"\n-        WHITESPACE@24..25 \" \"\n-        R_CURLY@25..26 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      EXPR_STMT@11..24\n+        CALL_EXPR@11..23\n+          PATH_EXPR@11..21\n+            PATH@11..21\n+              PATH@11..16\n+                PATH_SEGMENT@11..16\n+                  CRATE_KW@11..16 \"crate\"\n+              COLON2@16..18 \"::\"\n+              PATH_SEGMENT@18..21\n+                NAME_REF@18..21\n+                  IDENT@18..21 \"foo\"\n+          ARG_LIST@21..23\n+            L_PAREN@21..22 \"(\"\n+            R_PAREN@22..23 \")\"\n+        SEMICOLON@23..24 \";\"\n+      WHITESPACE@24..25 \" \"\n+      R_CURLY@25..26 \"}\"\n   WHITESPACE@26..27 \"\\n\""}, {"sha": "97611f7f39f970801e56c314a8abf35926cb6125", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_record_literal_field_with_attr.rast", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,40 +9,39 @@ SOURCE_FILE@0..46\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..45\n-      BLOCK@10..45\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        RECORD_LIT@16..43\n-          PATH@16..17\n-            PATH_SEGMENT@16..17\n-              NAME_REF@16..17\n-                IDENT@16..17 \"S\"\n-          WHITESPACE@17..18 \" \"\n-          RECORD_FIELD_LIST@18..43\n-            L_CURLY@18..19 \"{\"\n-            WHITESPACE@19..20 \" \"\n-            RECORD_FIELD@20..41\n-              ATTR@20..32\n-                POUND@20..21 \"#\"\n-                L_BRACK@21..22 \"[\"\n-                PATH@22..25\n-                  PATH_SEGMENT@22..25\n-                    NAME_REF@22..25\n-                      IDENT@22..25 \"cfg\"\n-                TOKEN_TREE@25..31\n-                  L_PAREN@25..26 \"(\"\n-                  IDENT@26..30 \"test\"\n-                  R_PAREN@30..31 \")\"\n-                R_BRACK@31..32 \"]\"\n-              WHITESPACE@32..33 \" \"\n-              NAME_REF@33..38\n-                IDENT@33..38 \"field\"\n-              COLON@38..39 \":\"\n-              WHITESPACE@39..40 \" \"\n-              LITERAL@40..41\n-                INT_NUMBER@40..41 \"1\"\n-            WHITESPACE@41..42 \" \"\n-            R_CURLY@42..43 \"}\"\n-        WHITESPACE@43..44 \"\\n\"\n-        R_CURLY@44..45 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      RECORD_LIT@16..43\n+        PATH@16..17\n+          PATH_SEGMENT@16..17\n+            NAME_REF@16..17\n+              IDENT@16..17 \"S\"\n+        WHITESPACE@17..18 \" \"\n+        RECORD_FIELD_LIST@18..43\n+          L_CURLY@18..19 \"{\"\n+          WHITESPACE@19..20 \" \"\n+          RECORD_FIELD@20..41\n+            ATTR@20..32\n+              POUND@20..21 \"#\"\n+              L_BRACK@21..22 \"[\"\n+              PATH@22..25\n+                PATH_SEGMENT@22..25\n+                  NAME_REF@22..25\n+                    IDENT@22..25 \"cfg\"\n+              TOKEN_TREE@25..31\n+                L_PAREN@25..26 \"(\"\n+                IDENT@26..30 \"test\"\n+                R_PAREN@30..31 \")\"\n+              R_BRACK@31..32 \"]\"\n+            WHITESPACE@32..33 \" \"\n+            NAME_REF@33..38\n+              IDENT@33..38 \"field\"\n+            COLON@38..39 \":\"\n+            WHITESPACE@39..40 \" \"\n+            LITERAL@40..41\n+              INT_NUMBER@40..41 \"1\"\n+          WHITESPACE@41..42 \" \"\n+          R_CURLY@42..43 \"}\"\n+      WHITESPACE@43..44 \"\\n\"\n+      R_CURLY@44..45 \"}\"\n   WHITESPACE@45..46 \"\\n\""}, {"sha": "09221fc540a400ccf2acb46904dd24282d06a2d2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0126_attr_on_expr_stmt.rast", "status": "modified", "additions": 85, "deletions": 87, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,91 +9,89 @@ SOURCE_FILE@0..82\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..81\n-      BLOCK@9..81\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..26\n-          ATTR@15..19\n-            POUND@15..16 \"#\"\n-            L_BRACK@16..17 \"[\"\n-            PATH@17..18\n-              PATH_SEGMENT@17..18\n-                NAME_REF@17..18\n-                  IDENT@17..18 \"A\"\n-            R_BRACK@18..19 \"]\"\n-          WHITESPACE@19..20 \" \"\n-          CALL_EXPR@20..25\n-            PATH_EXPR@20..23\n-              PATH@20..23\n-                PATH_SEGMENT@20..23\n-                  NAME_REF@20..23\n-                    IDENT@20..23 \"foo\"\n-            ARG_LIST@23..25\n-              L_PAREN@23..24 \"(\"\n-              R_PAREN@24..25 \")\"\n-          SEMICOLON@25..26 \";\"\n-        WHITESPACE@26..31 \"\\n    \"\n-        EXPR_STMT@31..42\n-          ATTR@31..35\n-            POUND@31..32 \"#\"\n-            L_BRACK@32..33 \"[\"\n-            PATH@33..34\n-              PATH_SEGMENT@33..34\n-                NAME_REF@33..34\n-                  IDENT@33..34 \"B\"\n-            R_BRACK@34..35 \"]\"\n-          WHITESPACE@35..36 \" \"\n-          MACRO_CALL@36..42\n-            PATH@36..39\n-              PATH_SEGMENT@36..39\n-                NAME_REF@36..39\n-                  IDENT@36..39 \"bar\"\n-            BANG@39..40 \"!\"\n-            TOKEN_TREE@40..42\n-              L_CURLY@40..41 \"{\"\n-              R_CURLY@41..42 \"}\"\n-        WHITESPACE@42..47 \"\\n    \"\n-        EXPR_STMT@47..59\n-          ATTR@47..51\n-            POUND@47..48 \"#\"\n-            L_BRACK@48..49 \"[\"\n-            PATH@49..50\n-              PATH_SEGMENT@49..50\n-                NAME_REF@49..50\n-                  IDENT@49..50 \"C\"\n-            R_BRACK@50..51 \"]\"\n-          WHITESPACE@51..52 \" \"\n-          ATTR@52..56\n-            POUND@52..53 \"#\"\n-            L_BRACK@53..54 \"[\"\n-            PATH@54..55\n-              PATH_SEGMENT@54..55\n-                NAME_REF@54..55\n-                  IDENT@54..55 \"D\"\n-            R_BRACK@55..56 \"]\"\n-          WHITESPACE@56..57 \" \"\n-          BLOCK_EXPR@57..59\n-            BLOCK@57..59\n-              L_CURLY@57..58 \"{\"\n-              R_CURLY@58..59 \"}\"\n-        WHITESPACE@59..64 \"\\n    \"\n-        EXPR_STMT@64..79\n-          ATTR@64..68\n-            POUND@64..65 \"#\"\n-            L_BRACK@65..66 \"[\"\n-            PATH@66..67\n-              PATH_SEGMENT@66..67\n-                NAME_REF@66..67\n-                  IDENT@66..67 \"D\"\n-            R_BRACK@67..68 \"]\"\n-          WHITESPACE@68..69 \" \"\n-          RETURN_EXPR@69..78\n-            RETURN_KW@69..75 \"return\"\n-            WHITESPACE@75..76 \" \"\n-            TUPLE_EXPR@76..78\n-              L_PAREN@76..77 \"(\"\n-              R_PAREN@77..78 \")\"\n-          SEMICOLON@78..79 \";\"\n-        WHITESPACE@79..80 \"\\n\"\n-        R_CURLY@80..81 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..26\n+        ATTR@15..19\n+          POUND@15..16 \"#\"\n+          L_BRACK@16..17 \"[\"\n+          PATH@17..18\n+            PATH_SEGMENT@17..18\n+              NAME_REF@17..18\n+                IDENT@17..18 \"A\"\n+          R_BRACK@18..19 \"]\"\n+        WHITESPACE@19..20 \" \"\n+        CALL_EXPR@20..25\n+          PATH_EXPR@20..23\n+            PATH@20..23\n+              PATH_SEGMENT@20..23\n+                NAME_REF@20..23\n+                  IDENT@20..23 \"foo\"\n+          ARG_LIST@23..25\n+            L_PAREN@23..24 \"(\"\n+            R_PAREN@24..25 \")\"\n+        SEMICOLON@25..26 \";\"\n+      WHITESPACE@26..31 \"\\n    \"\n+      EXPR_STMT@31..42\n+        ATTR@31..35\n+          POUND@31..32 \"#\"\n+          L_BRACK@32..33 \"[\"\n+          PATH@33..34\n+            PATH_SEGMENT@33..34\n+              NAME_REF@33..34\n+                IDENT@33..34 \"B\"\n+          R_BRACK@34..35 \"]\"\n+        WHITESPACE@35..36 \" \"\n+        MACRO_CALL@36..42\n+          PATH@36..39\n+            PATH_SEGMENT@36..39\n+              NAME_REF@36..39\n+                IDENT@36..39 \"bar\"\n+          BANG@39..40 \"!\"\n+          TOKEN_TREE@40..42\n+            L_CURLY@40..41 \"{\"\n+            R_CURLY@41..42 \"}\"\n+      WHITESPACE@42..47 \"\\n    \"\n+      EXPR_STMT@47..59\n+        ATTR@47..51\n+          POUND@47..48 \"#\"\n+          L_BRACK@48..49 \"[\"\n+          PATH@49..50\n+            PATH_SEGMENT@49..50\n+              NAME_REF@49..50\n+                IDENT@49..50 \"C\"\n+          R_BRACK@50..51 \"]\"\n+        WHITESPACE@51..52 \" \"\n+        ATTR@52..56\n+          POUND@52..53 \"#\"\n+          L_BRACK@53..54 \"[\"\n+          PATH@54..55\n+            PATH_SEGMENT@54..55\n+              NAME_REF@54..55\n+                IDENT@54..55 \"D\"\n+          R_BRACK@55..56 \"]\"\n+        WHITESPACE@56..57 \" \"\n+        BLOCK_EXPR@57..59\n+          L_CURLY@57..58 \"{\"\n+          R_CURLY@58..59 \"}\"\n+      WHITESPACE@59..64 \"\\n    \"\n+      EXPR_STMT@64..79\n+        ATTR@64..68\n+          POUND@64..65 \"#\"\n+          L_BRACK@65..66 \"[\"\n+          PATH@66..67\n+            PATH_SEGMENT@66..67\n+              NAME_REF@66..67\n+                IDENT@66..67 \"D\"\n+          R_BRACK@67..68 \"]\"\n+        WHITESPACE@68..69 \" \"\n+        RETURN_EXPR@69..78\n+          RETURN_KW@69..75 \"return\"\n+          WHITESPACE@75..76 \" \"\n+          TUPLE_EXPR@76..78\n+            L_PAREN@76..77 \"(\"\n+            R_PAREN@77..78 \")\"\n+        SEMICOLON@78..79 \";\"\n+      WHITESPACE@79..80 \"\\n\"\n+      R_CURLY@80..81 \"}\"\n   WHITESPACE@81..82 \"\\n\""}, {"sha": "93cc41533f52788775e38a923f4e97775aaf2993", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0127_attr_on_last_expr_in_block.rast", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,51 +9,49 @@ SOURCE_FILE@0..47\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..46\n-      BLOCK@9..46\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..31\n-          BLOCK_EXPR@15..31\n-            BLOCK@15..31\n-              L_CURLY@15..16 \"{\"\n-              WHITESPACE@16..17 \" \"\n-              TRY_EXPR@17..29\n-                ATTR@17..21\n-                  POUND@17..18 \"#\"\n-                  L_BRACK@18..19 \"[\"\n-                  PATH@19..20\n-                    PATH_SEGMENT@19..20\n-                      NAME_REF@19..20\n-                        IDENT@19..20 \"A\"\n-                  R_BRACK@20..21 \"]\"\n-                WHITESPACE@21..22 \" \"\n-                MACRO_CALL@22..28\n-                  PATH@22..25\n-                    PATH_SEGMENT@22..25\n-                      NAME_REF@22..25\n-                        IDENT@22..25 \"bar\"\n-                  BANG@25..26 \"!\"\n-                  TOKEN_TREE@26..28\n-                    L_PAREN@26..27 \"(\"\n-                    R_PAREN@27..28 \")\"\n-                QUESTION@28..29 \"?\"\n-              WHITESPACE@29..30 \" \"\n-              R_CURLY@30..31 \"}\"\n-        WHITESPACE@31..36 \"\\n    \"\n-        REF_EXPR@36..44\n-          ATTR@36..40\n-            POUND@36..37 \"#\"\n-            L_BRACK@37..38 \"[\"\n-            PATH@38..39\n-              PATH_SEGMENT@38..39\n-                NAME_REF@38..39\n-                  IDENT@38..39 \"B\"\n-            R_BRACK@39..40 \"]\"\n-          WHITESPACE@40..41 \" \"\n-          AMP@41..42 \"&\"\n-          TUPLE_EXPR@42..44\n-            L_PAREN@42..43 \"(\"\n-            R_PAREN@43..44 \")\"\n-        WHITESPACE@44..45 \"\\n\"\n-        R_CURLY@45..46 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..31\n+        BLOCK_EXPR@15..31\n+          L_CURLY@15..16 \"{\"\n+          WHITESPACE@16..17 \" \"\n+          TRY_EXPR@17..29\n+            ATTR@17..21\n+              POUND@17..18 \"#\"\n+              L_BRACK@18..19 \"[\"\n+              PATH@19..20\n+                PATH_SEGMENT@19..20\n+                  NAME_REF@19..20\n+                    IDENT@19..20 \"A\"\n+              R_BRACK@20..21 \"]\"\n+            WHITESPACE@21..22 \" \"\n+            MACRO_CALL@22..28\n+              PATH@22..25\n+                PATH_SEGMENT@22..25\n+                  NAME_REF@22..25\n+                    IDENT@22..25 \"bar\"\n+              BANG@25..26 \"!\"\n+              TOKEN_TREE@26..28\n+                L_PAREN@26..27 \"(\"\n+                R_PAREN@27..28 \")\"\n+            QUESTION@28..29 \"?\"\n+          WHITESPACE@29..30 \" \"\n+          R_CURLY@30..31 \"}\"\n+      WHITESPACE@31..36 \"\\n    \"\n+      REF_EXPR@36..44\n+        ATTR@36..40\n+          POUND@36..37 \"#\"\n+          L_BRACK@37..38 \"[\"\n+          PATH@38..39\n+            PATH_SEGMENT@38..39\n+              NAME_REF@38..39\n+                IDENT@38..39 \"B\"\n+          R_BRACK@39..40 \"]\"\n+        WHITESPACE@40..41 \" \"\n+        AMP@41..42 \"&\"\n+        TUPLE_EXPR@42..44\n+          L_PAREN@42..43 \"(\"\n+          R_PAREN@43..44 \")\"\n+      WHITESPACE@44..45 \"\\n\"\n+      R_CURLY@45..46 \"}\"\n   WHITESPACE@46..47 \"\\n\""}, {"sha": "0901f23481989c96e3981bf1de7132c0a2c5b5c1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0128_combined_fns.rast", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -13,9 +13,8 @@ SOURCE_FILE@0..50\n       R_PAREN@20..21 \")\"\n     WHITESPACE@21..22 \" \"\n     BLOCK_EXPR@22..24\n-      BLOCK@22..24\n-        L_CURLY@22..23 \"{\"\n-        R_CURLY@23..24 \"}\"\n+      L_CURLY@22..23 \"{\"\n+      R_CURLY@23..24 \"}\"\n   WHITESPACE@24..25 \"\\n\"\n   FN_DEF@25..49\n     CONST_KW@25..30 \"const\"\n@@ -31,7 +30,6 @@ SOURCE_FILE@0..50\n       R_PAREN@45..46 \")\"\n     WHITESPACE@46..47 \" \"\n     BLOCK_EXPR@47..49\n-      BLOCK@47..49\n-        L_CURLY@47..48 \"{\"\n-        R_CURLY@48..49 \"}\"\n+      L_CURLY@47..48 \"{\"\n+      R_CURLY@48..49 \"}\"\n   WHITESPACE@49..50 \"\\n\""}, {"sha": "28291afc2b345e56c28fcfa6d7b8c6a3845873d9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0129_marco_pat.rast", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,29 +9,28 @@ SOURCE_FILE@0..33\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..32\n-      BLOCK@10..32\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..30\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          MACRO_PAT@20..25\n-            MACRO_CALL@20..25\n-              PATH@20..21\n-                PATH_SEGMENT@20..21\n-                  NAME_REF@20..21\n-                    IDENT@20..21 \"m\"\n-              BANG@21..22 \"!\"\n-              TOKEN_TREE@22..25\n-                L_PAREN@22..23 \"(\"\n-                IDENT@23..24 \"x\"\n-                R_PAREN@24..25 \")\"\n-          WHITESPACE@25..26 \" \"\n-          EQ@26..27 \"=\"\n-          WHITESPACE@27..28 \" \"\n-          LITERAL@28..29\n-            INT_NUMBER@28..29 \"0\"\n-          SEMICOLON@29..30 \";\"\n-        WHITESPACE@30..31 \"\\n\"\n-        R_CURLY@31..32 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..30\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        MACRO_PAT@20..25\n+          MACRO_CALL@20..25\n+            PATH@20..21\n+              PATH_SEGMENT@20..21\n+                NAME_REF@20..21\n+                  IDENT@20..21 \"m\"\n+            BANG@21..22 \"!\"\n+            TOKEN_TREE@22..25\n+              L_PAREN@22..23 \"(\"\n+              IDENT@23..24 \"x\"\n+              R_PAREN@24..25 \")\"\n+        WHITESPACE@25..26 \" \"\n+        EQ@26..27 \"=\"\n+        WHITESPACE@27..28 \" \"\n+        LITERAL@28..29\n+          INT_NUMBER@28..29 \"0\"\n+        SEMICOLON@29..30 \";\"\n+      WHITESPACE@30..31 \"\\n\"\n+      R_CURLY@31..32 \"}\"\n   WHITESPACE@32..33 \"\\n\""}, {"sha": "bb94a05c6941c87965eb6fbed3f07b208ffc7351", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0130_let_stmt.rast", "status": "modified", "additions": 114, "deletions": 117, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,121 +9,118 @@ SOURCE_FILE@0..135\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..134\n-      BLOCK@9..134\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..21\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          BIND_PAT@19..20\n-            NAME@19..20\n-              IDENT@19..20 \"a\"\n-          SEMICOLON@20..21 \";\"\n-        WHITESPACE@21..26 \"\\n    \"\n-        LET_STMT@26..37\n-          LET_KW@26..29 \"let\"\n-          WHITESPACE@29..30 \" \"\n-          BIND_PAT@30..31\n-            NAME@30..31\n-              IDENT@30..31 \"b\"\n-          COLON@31..32 \":\"\n-          WHITESPACE@32..33 \" \"\n-          PATH_TYPE@33..36\n-            PATH@33..36\n-              PATH_SEGMENT@33..36\n-                NAME_REF@33..36\n-                  IDENT@33..36 \"i32\"\n-          SEMICOLON@36..37 \";\"\n-        WHITESPACE@37..42 \"\\n    \"\n-        LET_STMT@42..53\n-          LET_KW@42..45 \"let\"\n-          WHITESPACE@45..46 \" \"\n-          BIND_PAT@46..47\n-            NAME@46..47\n-              IDENT@46..47 \"c\"\n-          WHITESPACE@47..48 \" \"\n-          EQ@48..49 \"=\"\n-          WHITESPACE@49..50 \" \"\n-          LITERAL@50..52\n-            INT_NUMBER@50..52 \"92\"\n-          SEMICOLON@52..53 \";\"\n-        WHITESPACE@53..58 \"\\n    \"\n-        LET_STMT@58..74\n-          LET_KW@58..61 \"let\"\n-          WHITESPACE@61..62 \" \"\n-          BIND_PAT@62..63\n-            NAME@62..63\n-              IDENT@62..63 \"d\"\n-          COLON@63..64 \":\"\n-          WHITESPACE@64..65 \" \"\n-          PATH_TYPE@65..68\n-            PATH@65..68\n-              PATH_SEGMENT@65..68\n-                NAME_REF@65..68\n-                  IDENT@65..68 \"i32\"\n-          WHITESPACE@68..69 \" \"\n-          EQ@69..70 \"=\"\n-          WHITESPACE@70..71 \" \"\n-          LITERAL@71..73\n-            INT_NUMBER@71..73 \"92\"\n-          SEMICOLON@73..74 \";\"\n-        WHITESPACE@74..79 \"\\n    \"\n-        LET_STMT@79..88\n-          LET_KW@79..82 \"let\"\n-          WHITESPACE@82..83 \" \"\n-          BIND_PAT@83..84\n-            NAME@83..84\n-              IDENT@83..84 \"e\"\n-          COLON@84..85 \":\"\n-          WHITESPACE@85..86 \" \"\n-          NEVER_TYPE@86..87\n-            BANG@86..87 \"!\"\n-          SEMICOLON@87..88 \";\"\n-        WHITESPACE@88..93 \"\\n    \"\n-        LET_STMT@93..107\n-          LET_KW@93..96 \"let\"\n-          WHITESPACE@96..97 \" \"\n-          PLACEHOLDER_PAT@97..98\n-            UNDERSCORE@97..98 \"_\"\n-          COLON@98..99 \":\"\n-          WHITESPACE@99..100 \" \"\n-          NEVER_TYPE@100..101\n-            BANG@100..101 \"!\"\n-          WHITESPACE@101..102 \" \"\n-          EQ@102..103 \"=\"\n-          WHITESPACE@103..104 \" \"\n-          BLOCK_EXPR@104..106\n-            BLOCK@104..106\n-              L_CURLY@104..105 \"{\"\n-              R_CURLY@105..106 \"}\"\n-          SEMICOLON@106..107 \";\"\n-        WHITESPACE@107..112 \"\\n    \"\n-        LET_STMT@112..132\n-          LET_KW@112..115 \"let\"\n-          WHITESPACE@115..116 \" \"\n-          BIND_PAT@116..117\n-            NAME@116..117\n-              IDENT@116..117 \"f\"\n-          WHITESPACE@117..118 \" \"\n-          EQ@118..119 \"=\"\n-          WHITESPACE@119..120 \" \"\n-          LAMBDA_EXPR@120..131\n-            ATTR@120..127\n-              POUND@120..121 \"#\"\n-              L_BRACK@121..122 \"[\"\n-              PATH@122..126\n-                PATH_SEGMENT@122..126\n-                  NAME_REF@122..126\n-                    IDENT@122..126 \"attr\"\n-              R_BRACK@126..127 \"]\"\n-            PARAM_LIST@127..129\n-              PIPE@127..128 \"|\"\n-              PIPE@128..129 \"|\"\n-            BLOCK_EXPR@129..131\n-              BLOCK@129..131\n-                L_CURLY@129..130 \"{\"\n-                R_CURLY@130..131 \"}\"\n-          SEMICOLON@131..132 \";\"\n-        WHITESPACE@132..133 \"\\n\"\n-        R_CURLY@133..134 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..21\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        BIND_PAT@19..20\n+          NAME@19..20\n+            IDENT@19..20 \"a\"\n+        SEMICOLON@20..21 \";\"\n+      WHITESPACE@21..26 \"\\n    \"\n+      LET_STMT@26..37\n+        LET_KW@26..29 \"let\"\n+        WHITESPACE@29..30 \" \"\n+        BIND_PAT@30..31\n+          NAME@30..31\n+            IDENT@30..31 \"b\"\n+        COLON@31..32 \":\"\n+        WHITESPACE@32..33 \" \"\n+        PATH_TYPE@33..36\n+          PATH@33..36\n+            PATH_SEGMENT@33..36\n+              NAME_REF@33..36\n+                IDENT@33..36 \"i32\"\n+        SEMICOLON@36..37 \";\"\n+      WHITESPACE@37..42 \"\\n    \"\n+      LET_STMT@42..53\n+        LET_KW@42..45 \"let\"\n+        WHITESPACE@45..46 \" \"\n+        BIND_PAT@46..47\n+          NAME@46..47\n+            IDENT@46..47 \"c\"\n+        WHITESPACE@47..48 \" \"\n+        EQ@48..49 \"=\"\n+        WHITESPACE@49..50 \" \"\n+        LITERAL@50..52\n+          INT_NUMBER@50..52 \"92\"\n+        SEMICOLON@52..53 \";\"\n+      WHITESPACE@53..58 \"\\n    \"\n+      LET_STMT@58..74\n+        LET_KW@58..61 \"let\"\n+        WHITESPACE@61..62 \" \"\n+        BIND_PAT@62..63\n+          NAME@62..63\n+            IDENT@62..63 \"d\"\n+        COLON@63..64 \":\"\n+        WHITESPACE@64..65 \" \"\n+        PATH_TYPE@65..68\n+          PATH@65..68\n+            PATH_SEGMENT@65..68\n+              NAME_REF@65..68\n+                IDENT@65..68 \"i32\"\n+        WHITESPACE@68..69 \" \"\n+        EQ@69..70 \"=\"\n+        WHITESPACE@70..71 \" \"\n+        LITERAL@71..73\n+          INT_NUMBER@71..73 \"92\"\n+        SEMICOLON@73..74 \";\"\n+      WHITESPACE@74..79 \"\\n    \"\n+      LET_STMT@79..88\n+        LET_KW@79..82 \"let\"\n+        WHITESPACE@82..83 \" \"\n+        BIND_PAT@83..84\n+          NAME@83..84\n+            IDENT@83..84 \"e\"\n+        COLON@84..85 \":\"\n+        WHITESPACE@85..86 \" \"\n+        NEVER_TYPE@86..87\n+          BANG@86..87 \"!\"\n+        SEMICOLON@87..88 \";\"\n+      WHITESPACE@88..93 \"\\n    \"\n+      LET_STMT@93..107\n+        LET_KW@93..96 \"let\"\n+        WHITESPACE@96..97 \" \"\n+        PLACEHOLDER_PAT@97..98\n+          UNDERSCORE@97..98 \"_\"\n+        COLON@98..99 \":\"\n+        WHITESPACE@99..100 \" \"\n+        NEVER_TYPE@100..101\n+          BANG@100..101 \"!\"\n+        WHITESPACE@101..102 \" \"\n+        EQ@102..103 \"=\"\n+        WHITESPACE@103..104 \" \"\n+        BLOCK_EXPR@104..106\n+          L_CURLY@104..105 \"{\"\n+          R_CURLY@105..106 \"}\"\n+        SEMICOLON@106..107 \";\"\n+      WHITESPACE@107..112 \"\\n    \"\n+      LET_STMT@112..132\n+        LET_KW@112..115 \"let\"\n+        WHITESPACE@115..116 \" \"\n+        BIND_PAT@116..117\n+          NAME@116..117\n+            IDENT@116..117 \"f\"\n+        WHITESPACE@117..118 \" \"\n+        EQ@118..119 \"=\"\n+        WHITESPACE@119..120 \" \"\n+        LAMBDA_EXPR@120..131\n+          ATTR@120..127\n+            POUND@120..121 \"#\"\n+            L_BRACK@121..122 \"[\"\n+            PATH@122..126\n+              PATH_SEGMENT@122..126\n+                NAME_REF@122..126\n+                  IDENT@122..126 \"attr\"\n+            R_BRACK@126..127 \"]\"\n+          PARAM_LIST@127..129\n+            PIPE@127..128 \"|\"\n+            PIPE@128..129 \"|\"\n+          BLOCK_EXPR@129..131\n+            L_CURLY@129..130 \"{\"\n+            R_CURLY@130..131 \"}\"\n+        SEMICOLON@131..132 \";\"\n+      WHITESPACE@132..133 \"\\n\"\n+      R_CURLY@133..134 \"}\"\n   WHITESPACE@134..135 \"\\n\""}, {"sha": "8f2f144c7e33cd59f0b448cdc9cbe38ea9b2b73d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0130_try_block_expr.rast", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,25 +9,23 @@ SOURCE_FILE@0..33\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..32\n-      BLOCK@9..32\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..30\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PLACEHOLDER_PAT@19..20\n-            UNDERSCORE@19..20 \"_\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          TRY_EXPR@23..29\n-            TRY_KW@23..26 \"try\"\n-            WHITESPACE@26..27 \" \"\n-            BLOCK_EXPR@27..29\n-              BLOCK@27..29\n-                L_CURLY@27..28 \"{\"\n-                R_CURLY@28..29 \"}\"\n-          SEMICOLON@29..30 \";\"\n-        WHITESPACE@30..31 \"\\n\"\n-        R_CURLY@31..32 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..30\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PLACEHOLDER_PAT@19..20\n+          UNDERSCORE@19..20 \"_\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        EFFECT_EXPR@23..29\n+          TRY_KW@23..26 \"try\"\n+          WHITESPACE@26..27 \" \"\n+          BLOCK_EXPR@27..29\n+            L_CURLY@27..28 \"{\"\n+            R_CURLY@28..29 \"}\"\n+        SEMICOLON@29..30 \";\"\n+      WHITESPACE@30..31 \"\\n\"\n+      R_CURLY@31..32 \"}\"\n   WHITESPACE@32..33 \"\\n\""}, {"sha": "87ac427480a52ddcde45fb621190ac4be8572375", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_box_expr.rast", "status": "modified", "additions": 77, "deletions": 78, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_box_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_box_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_box_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,82 +9,81 @@ SOURCE_FILE@0..106\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..105\n-      BLOCK@9..105\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..32\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          BIND_PAT@19..20\n-            NAME@19..20\n-              IDENT@19..20 \"x\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          BOX_EXPR@23..31\n-            BOX_KW@23..26 \"box\"\n-            WHITESPACE@26..27 \" \"\n-            LITERAL@27..31\n-              INT_NUMBER@27..31 \"1i32\"\n-          SEMICOLON@31..32 \";\"\n-        WHITESPACE@32..37 \"\\n    \"\n-        LET_STMT@37..66\n-          LET_KW@37..40 \"let\"\n-          WHITESPACE@40..41 \" \"\n-          BIND_PAT@41..42\n-            NAME@41..42\n-              IDENT@41..42 \"y\"\n-          WHITESPACE@42..43 \" \"\n-          EQ@43..44 \"=\"\n-          WHITESPACE@44..45 \" \"\n-          TUPLE_EXPR@45..65\n-            L_PAREN@45..46 \"(\"\n-            BOX_EXPR@46..54\n-              BOX_KW@46..49 \"box\"\n-              WHITESPACE@49..50 \" \"\n-              LITERAL@50..54\n-                INT_NUMBER@50..54 \"1i32\"\n-            COMMA@54..55 \",\"\n-            WHITESPACE@55..56 \" \"\n-            BOX_EXPR@56..64\n-              BOX_KW@56..59 \"box\"\n-              WHITESPACE@59..60 \" \"\n-              LITERAL@60..64\n-                INT_NUMBER@60..64 \"2i32\"\n-            R_PAREN@64..65 \")\"\n-          SEMICOLON@65..66 \";\"\n-        WHITESPACE@66..71 \"\\n    \"\n-        LET_STMT@71..103\n-          LET_KW@71..74 \"let\"\n-          WHITESPACE@74..75 \" \"\n-          BIND_PAT@75..76\n-            NAME@75..76\n-              IDENT@75..76 \"z\"\n-          WHITESPACE@76..77 \" \"\n-          EQ@77..78 \"=\"\n-          WHITESPACE@78..79 \" \"\n-          CALL_EXPR@79..102\n-            PATH_EXPR@79..82\n-              PATH@79..82\n-                PATH_SEGMENT@79..82\n-                  NAME_REF@79..82\n-                    IDENT@79..82 \"Foo\"\n-            ARG_LIST@82..102\n-              L_PAREN@82..83 \"(\"\n-              BOX_EXPR@83..91\n-                BOX_KW@83..86 \"box\"\n-                WHITESPACE@86..87 \" \"\n-                LITERAL@87..91\n-                  INT_NUMBER@87..91 \"1i32\"\n-              COMMA@91..92 \",\"\n-              WHITESPACE@92..93 \" \"\n-              BOX_EXPR@93..101\n-                BOX_KW@93..96 \"box\"\n-                WHITESPACE@96..97 \" \"\n-                LITERAL@97..101\n-                  INT_NUMBER@97..101 \"2i32\"\n-              R_PAREN@101..102 \")\"\n-          SEMICOLON@102..103 \";\"\n-        WHITESPACE@103..104 \"\\n\"\n-        R_CURLY@104..105 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..32\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        BIND_PAT@19..20\n+          NAME@19..20\n+            IDENT@19..20 \"x\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        BOX_EXPR@23..31\n+          BOX_KW@23..26 \"box\"\n+          WHITESPACE@26..27 \" \"\n+          LITERAL@27..31\n+            INT_NUMBER@27..31 \"1i32\"\n+        SEMICOLON@31..32 \";\"\n+      WHITESPACE@32..37 \"\\n    \"\n+      LET_STMT@37..66\n+        LET_KW@37..40 \"let\"\n+        WHITESPACE@40..41 \" \"\n+        BIND_PAT@41..42\n+          NAME@41..42\n+            IDENT@41..42 \"y\"\n+        WHITESPACE@42..43 \" \"\n+        EQ@43..44 \"=\"\n+        WHITESPACE@44..45 \" \"\n+        TUPLE_EXPR@45..65\n+          L_PAREN@45..46 \"(\"\n+          BOX_EXPR@46..54\n+            BOX_KW@46..49 \"box\"\n+            WHITESPACE@49..50 \" \"\n+            LITERAL@50..54\n+              INT_NUMBER@50..54 \"1i32\"\n+          COMMA@54..55 \",\"\n+          WHITESPACE@55..56 \" \"\n+          BOX_EXPR@56..64\n+            BOX_KW@56..59 \"box\"\n+            WHITESPACE@59..60 \" \"\n+            LITERAL@60..64\n+              INT_NUMBER@60..64 \"2i32\"\n+          R_PAREN@64..65 \")\"\n+        SEMICOLON@65..66 \";\"\n+      WHITESPACE@66..71 \"\\n    \"\n+      LET_STMT@71..103\n+        LET_KW@71..74 \"let\"\n+        WHITESPACE@74..75 \" \"\n+        BIND_PAT@75..76\n+          NAME@75..76\n+            IDENT@75..76 \"z\"\n+        WHITESPACE@76..77 \" \"\n+        EQ@77..78 \"=\"\n+        WHITESPACE@78..79 \" \"\n+        CALL_EXPR@79..102\n+          PATH_EXPR@79..82\n+            PATH@79..82\n+              PATH_SEGMENT@79..82\n+                NAME_REF@79..82\n+                  IDENT@79..82 \"Foo\"\n+          ARG_LIST@82..102\n+            L_PAREN@82..83 \"(\"\n+            BOX_EXPR@83..91\n+              BOX_KW@83..86 \"box\"\n+              WHITESPACE@86..87 \" \"\n+              LITERAL@87..91\n+                INT_NUMBER@87..91 \"1i32\"\n+            COMMA@91..92 \",\"\n+            WHITESPACE@92..93 \" \"\n+            BOX_EXPR@93..101\n+              BOX_KW@93..96 \"box\"\n+              WHITESPACE@96..97 \" \"\n+              LITERAL@97..101\n+                INT_NUMBER@97..101 \"2i32\"\n+            R_PAREN@101..102 \")\"\n+        SEMICOLON@102..103 \";\"\n+      WHITESPACE@103..104 \"\\n\"\n+      R_CURLY@104..105 \"}\"\n   WHITESPACE@105..106 \"\\n\""}, {"sha": "00ce5ecf0df62c15c3891b3ea77a9a0014efb6de", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_default_fn_type.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -48,9 +48,8 @@ SOURCE_FILE@0..69\n           R_PAREN@62..63 \")\"\n         WHITESPACE@63..64 \" \"\n         BLOCK_EXPR@64..66\n-          BLOCK@64..66\n-            L_CURLY@64..65 \"{\"\n-            R_CURLY@65..66 \"}\"\n+          L_CURLY@64..65 \"{\"\n+          R_CURLY@65..66 \"}\"\n       WHITESPACE@66..67 \"\\n\"\n       R_CURLY@67..68 \"}\"\n   WHITESPACE@68..69 \"\\n\""}, {"sha": "b330a09323770d627525893d657c3553ddd2e313", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0134_nocontentexpr_after_item.rast", "status": "modified", "additions": 50, "deletions": 52, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,56 +9,54 @@ SOURCE_FILE@0..111\n       R_PAREN@19..20 \")\"\n     WHITESPACE@20..21 \" \"\n     BLOCK_EXPR@21..110\n-      BLOCK@21..110\n-        L_CURLY@21..22 \"{\"\n-        WHITESPACE@22..27 \"\\n    \"\n-        ENUM_DEF@27..75\n-          ENUM_KW@27..31 \"enum\"\n-          WHITESPACE@31..32 \" \"\n-          NAME@32..41\n-            IDENT@32..41 \"LocalEnum\"\n-          WHITESPACE@41..42 \" \"\n-          ENUM_VARIANT_LIST@42..75\n-            L_CURLY@42..43 \"{\"\n-            WHITESPACE@43..52 \"\\n        \"\n-            ENUM_VARIANT@52..55\n-              NAME@52..55\n-                IDENT@52..55 \"One\"\n-            COMMA@55..56 \",\"\n-            WHITESPACE@56..65 \"\\n        \"\n-            ENUM_VARIANT@65..68\n-              NAME@65..68\n-                IDENT@65..68 \"Two\"\n-            COMMA@68..69 \",\"\n-            WHITESPACE@69..74 \"\\n    \"\n-            R_CURLY@74..75 \"}\"\n-        SEMICOLON@75..76 \";\"\n-        WHITESPACE@76..81 \"\\n    \"\n-        FN_DEF@81..90\n-          FN_KW@81..83 \"fn\"\n-          WHITESPACE@83..84 \" \"\n-          NAME@84..85\n-            IDENT@84..85 \"f\"\n-          PARAM_LIST@85..87\n-            L_PAREN@85..86 \"(\"\n-            R_PAREN@86..87 \")\"\n-          WHITESPACE@87..88 \" \"\n-          BLOCK_EXPR@88..90\n-            BLOCK@88..90\n-              L_CURLY@88..89 \"{\"\n-              R_CURLY@89..90 \"}\"\n-        SEMICOLON@90..91 \";\"\n-        WHITESPACE@91..96 \"\\n    \"\n-        STRUCT_DEF@96..107\n-          STRUCT_KW@96..102 \"struct\"\n-          WHITESPACE@102..103 \" \"\n-          NAME@103..104\n-            IDENT@103..104 \"S\"\n-          WHITESPACE@104..105 \" \"\n-          RECORD_FIELD_DEF_LIST@105..107\n-            L_CURLY@105..106 \"{\"\n-            R_CURLY@106..107 \"}\"\n-        SEMICOLON@107..108 \";\"\n-        WHITESPACE@108..109 \"\\n\"\n-        R_CURLY@109..110 \"}\"\n+      L_CURLY@21..22 \"{\"\n+      WHITESPACE@22..27 \"\\n    \"\n+      ENUM_DEF@27..75\n+        ENUM_KW@27..31 \"enum\"\n+        WHITESPACE@31..32 \" \"\n+        NAME@32..41\n+          IDENT@32..41 \"LocalEnum\"\n+        WHITESPACE@41..42 \" \"\n+        ENUM_VARIANT_LIST@42..75\n+          L_CURLY@42..43 \"{\"\n+          WHITESPACE@43..52 \"\\n        \"\n+          ENUM_VARIANT@52..55\n+            NAME@52..55\n+              IDENT@52..55 \"One\"\n+          COMMA@55..56 \",\"\n+          WHITESPACE@56..65 \"\\n        \"\n+          ENUM_VARIANT@65..68\n+            NAME@65..68\n+              IDENT@65..68 \"Two\"\n+          COMMA@68..69 \",\"\n+          WHITESPACE@69..74 \"\\n    \"\n+          R_CURLY@74..75 \"}\"\n+      SEMICOLON@75..76 \";\"\n+      WHITESPACE@76..81 \"\\n    \"\n+      FN_DEF@81..90\n+        FN_KW@81..83 \"fn\"\n+        WHITESPACE@83..84 \" \"\n+        NAME@84..85\n+          IDENT@84..85 \"f\"\n+        PARAM_LIST@85..87\n+          L_PAREN@85..86 \"(\"\n+          R_PAREN@86..87 \")\"\n+        WHITESPACE@87..88 \" \"\n+        BLOCK_EXPR@88..90\n+          L_CURLY@88..89 \"{\"\n+          R_CURLY@89..90 \"}\"\n+      SEMICOLON@90..91 \";\"\n+      WHITESPACE@91..96 \"\\n    \"\n+      STRUCT_DEF@96..107\n+        STRUCT_KW@96..102 \"struct\"\n+        WHITESPACE@102..103 \" \"\n+        NAME@103..104\n+          IDENT@103..104 \"S\"\n+        WHITESPACE@104..105 \" \"\n+        RECORD_FIELD_DEF_LIST@105..107\n+          L_CURLY@105..106 \"{\"\n+          R_CURLY@106..107 \"}\"\n+      SEMICOLON@107..108 \";\"\n+      WHITESPACE@108..109 \"\\n\"\n+      R_CURLY@109..110 \"}\"\n   WHITESPACE@110..111 \"\\n\""}, {"sha": "8e8d9e992094aac979160efbf1caab2e5fc5560c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0137_await_expr.rast", "status": "modified", "additions": 57, "deletions": 58, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,62 +9,61 @@ SOURCE_FILE@0..67\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..66\n-      BLOCK@9..66\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..23\n-          AWAIT_EXPR@15..22\n-            PATH_EXPR@15..16\n-              PATH@15..16\n-                PATH_SEGMENT@15..16\n-                  NAME_REF@15..16\n-                    IDENT@15..16 \"x\"\n-            DOT@16..17 \".\"\n-            AWAIT_KW@17..22 \"await\"\n-          SEMICOLON@22..23 \";\"\n-        WHITESPACE@23..28 \"\\n    \"\n-        EXPR_STMT@28..38\n-          AWAIT_EXPR@28..37\n-            FIELD_EXPR@28..31\n-              PATH_EXPR@28..29\n-                PATH@28..29\n-                  PATH_SEGMENT@28..29\n-                    NAME_REF@28..29\n-                      IDENT@28..29 \"x\"\n-              DOT@29..30 \".\"\n-              NAME_REF@30..31\n-                INT_NUMBER@30..31 \"0\"\n-            DOT@31..32 \".\"\n-            AWAIT_KW@32..37 \"await\"\n-          SEMICOLON@37..38 \";\"\n-        WHITESPACE@38..43 \"\\n    \"\n-        EXPR_STMT@43..64\n-          METHOD_CALL_EXPR@43..63\n-            TRY_EXPR@43..55\n-              AWAIT_EXPR@43..54\n-                CALL_EXPR@43..48\n-                  FIELD_EXPR@43..46\n-                    PATH_EXPR@43..44\n-                      PATH@43..44\n-                        PATH_SEGMENT@43..44\n-                          NAME_REF@43..44\n-                            IDENT@43..44 \"x\"\n-                    DOT@44..45 \".\"\n-                    NAME_REF@45..46\n-                      INT_NUMBER@45..46 \"0\"\n-                  ARG_LIST@46..48\n-                    L_PAREN@46..47 \"(\"\n-                    R_PAREN@47..48 \")\"\n-                DOT@48..49 \".\"\n-                AWAIT_KW@49..54 \"await\"\n-              QUESTION@54..55 \"?\"\n-            DOT@55..56 \".\"\n-            NAME_REF@56..61\n-              IDENT@56..61 \"hello\"\n-            ARG_LIST@61..63\n-              L_PAREN@61..62 \"(\"\n-              R_PAREN@62..63 \")\"\n-          SEMICOLON@63..64 \";\"\n-        WHITESPACE@64..65 \"\\n\"\n-        R_CURLY@65..66 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..23\n+        AWAIT_EXPR@15..22\n+          PATH_EXPR@15..16\n+            PATH@15..16\n+              PATH_SEGMENT@15..16\n+                NAME_REF@15..16\n+                  IDENT@15..16 \"x\"\n+          DOT@16..17 \".\"\n+          AWAIT_KW@17..22 \"await\"\n+        SEMICOLON@22..23 \";\"\n+      WHITESPACE@23..28 \"\\n    \"\n+      EXPR_STMT@28..38\n+        AWAIT_EXPR@28..37\n+          FIELD_EXPR@28..31\n+            PATH_EXPR@28..29\n+              PATH@28..29\n+                PATH_SEGMENT@28..29\n+                  NAME_REF@28..29\n+                    IDENT@28..29 \"x\"\n+            DOT@29..30 \".\"\n+            NAME_REF@30..31\n+              INT_NUMBER@30..31 \"0\"\n+          DOT@31..32 \".\"\n+          AWAIT_KW@32..37 \"await\"\n+        SEMICOLON@37..38 \";\"\n+      WHITESPACE@38..43 \"\\n    \"\n+      EXPR_STMT@43..64\n+        METHOD_CALL_EXPR@43..63\n+          TRY_EXPR@43..55\n+            AWAIT_EXPR@43..54\n+              CALL_EXPR@43..48\n+                FIELD_EXPR@43..46\n+                  PATH_EXPR@43..44\n+                    PATH@43..44\n+                      PATH_SEGMENT@43..44\n+                        NAME_REF@43..44\n+                          IDENT@43..44 \"x\"\n+                  DOT@44..45 \".\"\n+                  NAME_REF@45..46\n+                    INT_NUMBER@45..46 \"0\"\n+                ARG_LIST@46..48\n+                  L_PAREN@46..47 \"(\"\n+                  R_PAREN@47..48 \")\"\n+              DOT@48..49 \".\"\n+              AWAIT_KW@49..54 \"await\"\n+            QUESTION@54..55 \"?\"\n+          DOT@55..56 \".\"\n+          NAME_REF@56..61\n+            IDENT@56..61 \"hello\"\n+          ARG_LIST@61..63\n+            L_PAREN@61..62 \"(\"\n+            R_PAREN@62..63 \")\"\n+        SEMICOLON@63..64 \";\"\n+      WHITESPACE@64..65 \"\\n\"\n+      R_CURLY@65..66 \"}\"\n   WHITESPACE@66..67 \"\\n\""}, {"sha": "c457851c946118dfdacf0b1ec78ad6f7a4a4894d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0138_associated_type_bounds.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -50,7 +50,6 @@ SOURCE_FILE@0..59\n       R_PAREN@54..55 \")\"\n     WHITESPACE@55..56 \" \"\n     BLOCK_EXPR@56..58\n-      BLOCK@56..58\n-        L_CURLY@56..57 \"{\"\n-        R_CURLY@57..58 \"}\"\n+      L_CURLY@56..57 \"{\"\n+      R_CURLY@57..58 \"}\"\n   WHITESPACE@58..59 \"\\n\""}, {"sha": "ea325831e284c8863bf755e4a34a0526f8abcbfa", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0138_expression_after_block.rast", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,58 +9,56 @@ SOURCE_FILE@0..52\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..51\n-      BLOCK@9..51\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..14 \"\\n   \"\n-        LET_STMT@14..34\n-          LET_KW@14..17 \"let\"\n-          WHITESPACE@17..18 \" \"\n-          BIND_PAT@18..23\n-            MUT_KW@18..21 \"mut\"\n-            WHITESPACE@21..22 \" \"\n-            NAME@22..23\n-              IDENT@22..23 \"p\"\n-          WHITESPACE@23..24 \" \"\n-          EQ@24..25 \"=\"\n-          WHITESPACE@25..26 \" \"\n-          RECORD_LIT@26..33\n-            PATH@26..27\n-              PATH_SEGMENT@26..27\n-                NAME_REF@26..27\n-                  IDENT@26..27 \"F\"\n-            RECORD_FIELD_LIST@27..33\n-              L_CURLY@27..28 \"{\"\n-              RECORD_FIELD@28..32\n-                NAME_REF@28..29\n-                  IDENT@28..29 \"x\"\n-                COLON@29..30 \":\"\n-                WHITESPACE@30..31 \" \"\n-                LITERAL@31..32\n-                  INT_NUMBER@31..32 \"5\"\n-              R_CURLY@32..33 \"}\"\n-          SEMICOLON@33..34 \";\"\n-        WHITESPACE@34..38 \"\\n   \"\n-        EXPR_STMT@38..49\n-          BIN_EXPR@38..48\n-            FIELD_EXPR@38..43\n-              BLOCK_EXPR@38..41\n-                BLOCK@38..41\n-                  L_CURLY@38..39 \"{\"\n-                  PATH_EXPR@39..40\n-                    PATH@39..40\n-                      PATH_SEGMENT@39..40\n-                        NAME_REF@39..40\n-                          IDENT@39..40 \"p\"\n-                  R_CURLY@40..41 \"}\"\n-              DOT@41..42 \".\"\n-              NAME_REF@42..43\n-                IDENT@42..43 \"x\"\n-            WHITESPACE@43..44 \" \"\n-            EQ@44..45 \"=\"\n-            WHITESPACE@45..46 \" \"\n-            LITERAL@46..48\n-              INT_NUMBER@46..48 \"10\"\n-          SEMICOLON@48..49 \";\"\n-        WHITESPACE@49..50 \"\\n\"\n-        R_CURLY@50..51 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..14 \"\\n   \"\n+      LET_STMT@14..34\n+        LET_KW@14..17 \"let\"\n+        WHITESPACE@17..18 \" \"\n+        BIND_PAT@18..23\n+          MUT_KW@18..21 \"mut\"\n+          WHITESPACE@21..22 \" \"\n+          NAME@22..23\n+            IDENT@22..23 \"p\"\n+        WHITESPACE@23..24 \" \"\n+        EQ@24..25 \"=\"\n+        WHITESPACE@25..26 \" \"\n+        RECORD_LIT@26..33\n+          PATH@26..27\n+            PATH_SEGMENT@26..27\n+              NAME_REF@26..27\n+                IDENT@26..27 \"F\"\n+          RECORD_FIELD_LIST@27..33\n+            L_CURLY@27..28 \"{\"\n+            RECORD_FIELD@28..32\n+              NAME_REF@28..29\n+                IDENT@28..29 \"x\"\n+              COLON@29..30 \":\"\n+              WHITESPACE@30..31 \" \"\n+              LITERAL@31..32\n+                INT_NUMBER@31..32 \"5\"\n+            R_CURLY@32..33 \"}\"\n+        SEMICOLON@33..34 \";\"\n+      WHITESPACE@34..38 \"\\n   \"\n+      EXPR_STMT@38..49\n+        BIN_EXPR@38..48\n+          FIELD_EXPR@38..43\n+            BLOCK_EXPR@38..41\n+              L_CURLY@38..39 \"{\"\n+              PATH_EXPR@39..40\n+                PATH@39..40\n+                  PATH_SEGMENT@39..40\n+                    NAME_REF@39..40\n+                      IDENT@39..40 \"p\"\n+              R_CURLY@40..41 \"}\"\n+            DOT@41..42 \".\"\n+            NAME_REF@42..43\n+              IDENT@42..43 \"x\"\n+          WHITESPACE@43..44 \" \"\n+          EQ@44..45 \"=\"\n+          WHITESPACE@45..46 \" \"\n+          LITERAL@46..48\n+            INT_NUMBER@46..48 \"10\"\n+        SEMICOLON@48..49 \";\"\n+      WHITESPACE@49..50 \"\\n\"\n+      R_CURLY@50..51 \"}\"\n   WHITESPACE@51..52 \"\\n\""}, {"sha": "9135de9df112ba23b6038f170cae173b68fca7a8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0138_self_param_outer_attr.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_self_param_outer_attr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_self_param_outer_attr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_self_param_outer_attr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -20,7 +20,6 @@ SOURCE_FILE@0..26\n       R_PAREN@21..22 \")\"\n     WHITESPACE@22..23 \" \"\n     BLOCK_EXPR@23..25\n-      BLOCK@23..25\n-        L_CURLY@23..24 \"{\"\n-        R_CURLY@24..25 \"}\"\n+      L_CURLY@23..24 \"{\"\n+      R_CURLY@24..25 \"}\"\n   WHITESPACE@25..26 \"\\n\""}, {"sha": "14610a0a293ac1bc39ae06dc8a88a84a0cc3be58", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0139_param_outer_arg.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0139_param_outer_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0139_param_outer_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0139_param_outer_arg.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -29,7 +29,6 @@ SOURCE_FILE@0..28\n       R_PAREN@23..24 \")\"\n     WHITESPACE@24..25 \" \"\n     BLOCK_EXPR@25..27\n-      BLOCK@25..27\n-        L_CURLY@25..26 \"{\"\n-        R_CURLY@26..27 \"}\"\n+      L_CURLY@25..26 \"{\"\n+      R_CURLY@26..27 \"}\"\n   WHITESPACE@27..28 \"\\n\""}, {"sha": "e6be8b7e47f80aff4e2c617e58a917fcf8652c02", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0142_for_range_from.rast", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0142_for_range_from.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0142_for_range_from.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0142_for_range_from.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,34 +9,32 @@ SOURCE_FILE@0..51\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..50\n-      BLOCK@9..50\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..14 \"\\n   \"\n-        FOR_EXPR@14..48\n-          FOR_KW@14..17 \"for\"\n-          WHITESPACE@17..18 \" \"\n-          BIND_PAT@18..19\n-            NAME@18..19\n-              IDENT@18..19 \"x\"\n-          WHITESPACE@19..20 \" \"\n-          IN_KW@20..22 \"in\"\n-          WHITESPACE@22..23 \" \"\n-          RANGE_EXPR@23..27\n-            LITERAL@23..24\n-              INT_NUMBER@23..24 \"0\"\n-            WHITESPACE@24..25 \" \"\n-            DOT2@25..27 \"..\"\n-          WHITESPACE@27..28 \" \"\n-          BLOCK_EXPR@28..48\n-            BLOCK@28..48\n-              L_CURLY@28..29 \"{\"\n-              WHITESPACE@29..37 \"\\n       \"\n-              EXPR_STMT@37..43\n-                BREAK_EXPR@37..42\n-                  BREAK_KW@37..42 \"break\"\n-                SEMICOLON@42..43 \";\"\n-              WHITESPACE@43..47 \"\\n   \"\n-              R_CURLY@47..48 \"}\"\n-        WHITESPACE@48..49 \"\\n\"\n-        R_CURLY@49..50 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..14 \"\\n   \"\n+      FOR_EXPR@14..48\n+        FOR_KW@14..17 \"for\"\n+        WHITESPACE@17..18 \" \"\n+        BIND_PAT@18..19\n+          NAME@18..19\n+            IDENT@18..19 \"x\"\n+        WHITESPACE@19..20 \" \"\n+        IN_KW@20..22 \"in\"\n+        WHITESPACE@22..23 \" \"\n+        RANGE_EXPR@23..27\n+          LITERAL@23..24\n+            INT_NUMBER@23..24 \"0\"\n+          WHITESPACE@24..25 \" \"\n+          DOT2@25..27 \"..\"\n+        WHITESPACE@27..28 \" \"\n+        BLOCK_EXPR@28..48\n+          L_CURLY@28..29 \"{\"\n+          WHITESPACE@29..37 \"\\n       \"\n+          EXPR_STMT@37..43\n+            BREAK_EXPR@37..42\n+              BREAK_KW@37..42 \"break\"\n+            SEMICOLON@42..43 \";\"\n+          WHITESPACE@43..47 \"\\n   \"\n+          R_CURLY@47..48 \"}\"\n+      WHITESPACE@48..49 \"\\n\"\n+      R_CURLY@49..50 \"}\"\n   WHITESPACE@50..51 \"\\n\""}, {"sha": "57fba5fd5fdd50fb2675a006dcdabd28503f5cfc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0143_box_pat.rast", "status": "modified", "additions": 98, "deletions": 99, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,103 +9,102 @@ SOURCE_FILE@0..118\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..117\n-      BLOCK@10..117\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..31\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          BOX_PAT@20..25\n-            BOX_KW@20..23 \"box\"\n-            WHITESPACE@23..24 \" \"\n-            BIND_PAT@24..25\n-              NAME@24..25\n-                IDENT@24..25 \"i\"\n-          WHITESPACE@25..26 \" \"\n-          EQ@26..27 \"=\"\n-          WHITESPACE@27..28 \" \"\n-          TUPLE_EXPR@28..30\n-            L_PAREN@28..29 \"(\"\n-            R_PAREN@29..30 \")\"\n-          SEMICOLON@30..31 \";\"\n-        WHITESPACE@31..36 \"\\n    \"\n-        LET_STMT@36..87\n-          LET_KW@36..39 \"let\"\n-          WHITESPACE@39..40 \" \"\n-          BOX_PAT@40..81\n-            BOX_KW@40..43 \"box\"\n-            WHITESPACE@43..44 \" \"\n-            RECORD_PAT@44..81\n-              PATH@44..49\n-                PATH_SEGMENT@44..49\n-                  NAME_REF@44..49\n-                    IDENT@44..49 \"Outer\"\n-              WHITESPACE@49..50 \" \"\n-              RECORD_FIELD_PAT_LIST@50..81\n-                L_CURLY@50..51 \"{\"\n-                WHITESPACE@51..52 \" \"\n-                RECORD_FIELD_PAT@52..57\n-                  BOX_PAT@52..57\n-                    BOX_KW@52..55 \"box\"\n-                    WHITESPACE@55..56 \" \"\n-                    BIND_PAT@56..57\n-                      NAME@56..57\n-                        IDENT@56..57 \"i\"\n-                COMMA@57..58 \",\"\n-                WHITESPACE@58..59 \" \"\n-                RECORD_FIELD_PAT@59..79\n-                  NAME_REF@59..60\n-                    IDENT@59..60 \"j\"\n-                  COLON@60..61 \":\"\n-                  WHITESPACE@61..62 \" \"\n-                  BOX_PAT@62..79\n-                    BOX_KW@62..65 \"box\"\n-                    WHITESPACE@65..66 \" \"\n-                    TUPLE_STRUCT_PAT@66..79\n-                      PATH@66..71\n-                        PATH_SEGMENT@66..71\n-                          NAME_REF@66..71\n-                            IDENT@66..71 \"Inner\"\n-                      L_PAREN@71..72 \"(\"\n-                      BOX_PAT@72..78\n-                        BOX_KW@72..75 \"box\"\n-                        WHITESPACE@75..76 \" \"\n-                        REF_PAT@76..78\n-                          AMP@76..77 \"&\"\n-                          BIND_PAT@77..78\n-                            NAME@77..78\n-                              IDENT@77..78 \"x\"\n-                      R_PAREN@78..79 \")\"\n-                WHITESPACE@79..80 \" \"\n-                R_CURLY@80..81 \"}\"\n-          WHITESPACE@81..82 \" \"\n-          EQ@82..83 \"=\"\n-          WHITESPACE@83..84 \" \"\n-          TUPLE_EXPR@84..86\n-            L_PAREN@84..85 \"(\"\n-            R_PAREN@85..86 \")\"\n-          SEMICOLON@86..87 \";\"\n-        WHITESPACE@87..92 \"\\n    \"\n-        LET_STMT@92..115\n-          LET_KW@92..95 \"let\"\n-          WHITESPACE@95..96 \" \"\n-          BOX_PAT@96..109\n-            BOX_KW@96..99 \"box\"\n-            WHITESPACE@99..100 \" \"\n-            BIND_PAT@100..109\n-              REF_KW@100..103 \"ref\"\n-              WHITESPACE@103..104 \" \"\n-              MUT_KW@104..107 \"mut\"\n-              WHITESPACE@107..108 \" \"\n-              NAME@108..109\n-                IDENT@108..109 \"i\"\n-          WHITESPACE@109..110 \" \"\n-          EQ@110..111 \"=\"\n-          WHITESPACE@111..112 \" \"\n-          TUPLE_EXPR@112..114\n-            L_PAREN@112..113 \"(\"\n-            R_PAREN@113..114 \")\"\n-          SEMICOLON@114..115 \";\"\n-        WHITESPACE@115..116 \"\\n\"\n-        R_CURLY@116..117 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..31\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        BOX_PAT@20..25\n+          BOX_KW@20..23 \"box\"\n+          WHITESPACE@23..24 \" \"\n+          BIND_PAT@24..25\n+            NAME@24..25\n+              IDENT@24..25 \"i\"\n+        WHITESPACE@25..26 \" \"\n+        EQ@26..27 \"=\"\n+        WHITESPACE@27..28 \" \"\n+        TUPLE_EXPR@28..30\n+          L_PAREN@28..29 \"(\"\n+          R_PAREN@29..30 \")\"\n+        SEMICOLON@30..31 \";\"\n+      WHITESPACE@31..36 \"\\n    \"\n+      LET_STMT@36..87\n+        LET_KW@36..39 \"let\"\n+        WHITESPACE@39..40 \" \"\n+        BOX_PAT@40..81\n+          BOX_KW@40..43 \"box\"\n+          WHITESPACE@43..44 \" \"\n+          RECORD_PAT@44..81\n+            PATH@44..49\n+              PATH_SEGMENT@44..49\n+                NAME_REF@44..49\n+                  IDENT@44..49 \"Outer\"\n+            WHITESPACE@49..50 \" \"\n+            RECORD_FIELD_PAT_LIST@50..81\n+              L_CURLY@50..51 \"{\"\n+              WHITESPACE@51..52 \" \"\n+              RECORD_FIELD_PAT@52..57\n+                BOX_PAT@52..57\n+                  BOX_KW@52..55 \"box\"\n+                  WHITESPACE@55..56 \" \"\n+                  BIND_PAT@56..57\n+                    NAME@56..57\n+                      IDENT@56..57 \"i\"\n+              COMMA@57..58 \",\"\n+              WHITESPACE@58..59 \" \"\n+              RECORD_FIELD_PAT@59..79\n+                NAME_REF@59..60\n+                  IDENT@59..60 \"j\"\n+                COLON@60..61 \":\"\n+                WHITESPACE@61..62 \" \"\n+                BOX_PAT@62..79\n+                  BOX_KW@62..65 \"box\"\n+                  WHITESPACE@65..66 \" \"\n+                  TUPLE_STRUCT_PAT@66..79\n+                    PATH@66..71\n+                      PATH_SEGMENT@66..71\n+                        NAME_REF@66..71\n+                          IDENT@66..71 \"Inner\"\n+                    L_PAREN@71..72 \"(\"\n+                    BOX_PAT@72..78\n+                      BOX_KW@72..75 \"box\"\n+                      WHITESPACE@75..76 \" \"\n+                      REF_PAT@76..78\n+                        AMP@76..77 \"&\"\n+                        BIND_PAT@77..78\n+                          NAME@77..78\n+                            IDENT@77..78 \"x\"\n+                    R_PAREN@78..79 \")\"\n+              WHITESPACE@79..80 \" \"\n+              R_CURLY@80..81 \"}\"\n+        WHITESPACE@81..82 \" \"\n+        EQ@82..83 \"=\"\n+        WHITESPACE@83..84 \" \"\n+        TUPLE_EXPR@84..86\n+          L_PAREN@84..85 \"(\"\n+          R_PAREN@85..86 \")\"\n+        SEMICOLON@86..87 \";\"\n+      WHITESPACE@87..92 \"\\n    \"\n+      LET_STMT@92..115\n+        LET_KW@92..95 \"let\"\n+        WHITESPACE@95..96 \" \"\n+        BOX_PAT@96..109\n+          BOX_KW@96..99 \"box\"\n+          WHITESPACE@99..100 \" \"\n+          BIND_PAT@100..109\n+            REF_KW@100..103 \"ref\"\n+            WHITESPACE@103..104 \" \"\n+            MUT_KW@104..107 \"mut\"\n+            WHITESPACE@107..108 \" \"\n+            NAME@108..109\n+              IDENT@108..109 \"i\"\n+        WHITESPACE@109..110 \" \"\n+        EQ@110..111 \"=\"\n+        WHITESPACE@111..112 \" \"\n+        TUPLE_EXPR@112..114\n+          L_PAREN@112..113 \"(\"\n+          R_PAREN@113..114 \")\"\n+        SEMICOLON@114..115 \";\"\n+      WHITESPACE@115..116 \"\\n\"\n+      R_CURLY@116..117 \"}\"\n   WHITESPACE@117..118 \"\\n\""}, {"sha": "8d8b9597b0c2dd99dd0ea13e25f499edb28472e2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0144_dot_dot_pat.rast", "status": "modified", "additions": 443, "deletions": 444, "changes": 887, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0144_dot_dot_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0144_dot_dot_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0144_dot_dot_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,448 +9,447 @@ SOURCE_FILE@0..555\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..554\n-      BLOCK@10..554\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        LET_STMT@16..28\n-          LET_KW@16..19 \"let\"\n-          WHITESPACE@19..20 \" \"\n-          DOT_DOT_PAT@20..22\n-            DOT2@20..22 \"..\"\n-          WHITESPACE@22..23 \" \"\n-          EQ@23..24 \"=\"\n-          WHITESPACE@24..25 \" \"\n-          TUPLE_EXPR@25..27\n-            L_PAREN@25..26 \"(\"\n-            R_PAREN@26..27 \")\"\n-          SEMICOLON@27..28 \";\"\n-        WHITESPACE@28..33 \"\\n    \"\n-        COMMENT@33..35 \"//\"\n-        WHITESPACE@35..40 \"\\n    \"\n-        COMMENT@40..49 \"// Tuples\"\n-        WHITESPACE@49..54 \"\\n    \"\n-        COMMENT@54..56 \"//\"\n-        WHITESPACE@56..61 \"\\n    \"\n-        LET_STMT@61..78\n-          LET_KW@61..64 \"let\"\n-          WHITESPACE@64..65 \" \"\n-          TUPLE_PAT@65..72\n-            L_PAREN@65..66 \"(\"\n-            BIND_PAT@66..67\n-              NAME@66..67\n-                IDENT@66..67 \"a\"\n-            COMMA@67..68 \",\"\n-            WHITESPACE@68..69 \" \"\n-            DOT_DOT_PAT@69..71\n-              DOT2@69..71 \"..\"\n-            R_PAREN@71..72 \")\"\n-          WHITESPACE@72..73 \" \"\n-          EQ@73..74 \"=\"\n-          WHITESPACE@74..75 \" \"\n-          TUPLE_EXPR@75..77\n-            L_PAREN@75..76 \"(\"\n-            R_PAREN@76..77 \")\"\n-          SEMICOLON@77..78 \";\"\n-        WHITESPACE@78..83 \"\\n    \"\n-        LET_STMT@83..101\n-          LET_KW@83..86 \"let\"\n-          WHITESPACE@86..87 \" \"\n-          TUPLE_PAT@87..95\n-            L_PAREN@87..88 \"(\"\n-            BIND_PAT@88..89\n-              NAME@88..89\n-                IDENT@88..89 \"a\"\n-            COMMA@89..90 \",\"\n-            WHITESPACE@90..91 \" \"\n-            DOT_DOT_PAT@91..93\n-              DOT2@91..93 \"..\"\n-            COMMA@93..94 \",\"\n-            R_PAREN@94..95 \")\"\n-          WHITESPACE@95..96 \" \"\n-          EQ@96..97 \"=\"\n-          WHITESPACE@97..98 \" \"\n-          TUPLE_EXPR@98..100\n-            L_PAREN@98..99 \"(\"\n-            R_PAREN@99..100 \")\"\n-          SEMICOLON@100..101 \";\"\n-        WHITESPACE@101..106 \"\\n    \"\n-        LET_STMT@106..128\n-          LET_KW@106..109 \"let\"\n-          WHITESPACE@109..110 \" \"\n-          TUPLE_STRUCT_PAT@110..122\n-            PATH@110..115\n-              PATH_SEGMENT@110..115\n-                NAME_REF@110..115\n-                  IDENT@110..115 \"Tuple\"\n-            L_PAREN@115..116 \"(\"\n-            BIND_PAT@116..117\n-              NAME@116..117\n-                IDENT@116..117 \"a\"\n-            COMMA@117..118 \",\"\n-            WHITESPACE@118..119 \" \"\n-            DOT_DOT_PAT@119..121\n-              DOT2@119..121 \"..\"\n-            R_PAREN@121..122 \")\"\n-          WHITESPACE@122..123 \" \"\n-          EQ@123..124 \"=\"\n-          WHITESPACE@124..125 \" \"\n-          TUPLE_EXPR@125..127\n-            L_PAREN@125..126 \"(\"\n-            R_PAREN@126..127 \")\"\n-          SEMICOLON@127..128 \";\"\n-        WHITESPACE@128..133 \"\\n    \"\n-        LET_STMT@133..156\n-          LET_KW@133..136 \"let\"\n-          WHITESPACE@136..137 \" \"\n-          TUPLE_STRUCT_PAT@137..150\n-            PATH@137..142\n-              PATH_SEGMENT@137..142\n-                NAME_REF@137..142\n-                  IDENT@137..142 \"Tuple\"\n-            L_PAREN@142..143 \"(\"\n-            BIND_PAT@143..144\n-              NAME@143..144\n-                IDENT@143..144 \"a\"\n-            COMMA@144..145 \",\"\n-            WHITESPACE@145..146 \" \"\n-            DOT_DOT_PAT@146..148\n-              DOT2@146..148 \"..\"\n-            COMMA@148..149 \",\"\n-            R_PAREN@149..150 \")\"\n-          WHITESPACE@150..151 \" \"\n-          EQ@151..152 \"=\"\n-          WHITESPACE@152..153 \" \"\n-          TUPLE_EXPR@153..155\n-            L_PAREN@153..154 \"(\"\n-            R_PAREN@154..155 \")\"\n-          SEMICOLON@155..156 \";\"\n-        WHITESPACE@156..161 \"\\n    \"\n-        LET_STMT@161..179\n-          LET_KW@161..164 \"let\"\n-          WHITESPACE@164..165 \" \"\n-          TUPLE_PAT@165..173\n-            L_PAREN@165..166 \"(\"\n-            DOT_DOT_PAT@166..168\n-              DOT2@166..168 \"..\"\n-            COMMA@168..169 \",\"\n-            WHITESPACE@169..170 \" \"\n-            DOT_DOT_PAT@170..172\n-              DOT2@170..172 \"..\"\n-            R_PAREN@172..173 \")\"\n-          WHITESPACE@173..174 \" \"\n-          EQ@174..175 \"=\"\n-          WHITESPACE@175..176 \" \"\n-          TUPLE_EXPR@176..178\n-            L_PAREN@176..177 \"(\"\n-            R_PAREN@177..178 \")\"\n-          SEMICOLON@178..179 \";\"\n-        WHITESPACE@179..184 \"\\n    \"\n-        LET_STMT@184..207\n-          LET_KW@184..187 \"let\"\n-          WHITESPACE@187..188 \" \"\n-          TUPLE_STRUCT_PAT@188..201\n-            PATH@188..193\n-              PATH_SEGMENT@188..193\n-                NAME_REF@188..193\n-                  IDENT@188..193 \"Tuple\"\n-            L_PAREN@193..194 \"(\"\n-            DOT_DOT_PAT@194..196\n-              DOT2@194..196 \"..\"\n-            COMMA@196..197 \",\"\n-            WHITESPACE@197..198 \" \"\n-            DOT_DOT_PAT@198..200\n-              DOT2@198..200 \"..\"\n-            R_PAREN@200..201 \")\"\n-          WHITESPACE@201..202 \" \"\n-          EQ@202..203 \"=\"\n-          WHITESPACE@203..204 \" \"\n-          TUPLE_EXPR@204..206\n-            L_PAREN@204..205 \"(\"\n-            R_PAREN@205..206 \")\"\n-          SEMICOLON@206..207 \";\"\n-        WHITESPACE@207..212 \"\\n    \"\n-        LET_STMT@212..233\n-          LET_KW@212..215 \"let\"\n-          WHITESPACE@215..216 \" \"\n-          TUPLE_PAT@216..227\n-            L_PAREN@216..217 \"(\"\n-            DOT_DOT_PAT@217..219\n-              DOT2@217..219 \"..\"\n-            COMMA@219..220 \",\"\n-            WHITESPACE@220..221 \" \"\n-            BIND_PAT@221..222\n-              NAME@221..222\n-                IDENT@221..222 \"a\"\n-            COMMA@222..223 \",\"\n-            WHITESPACE@223..224 \" \"\n-            DOT_DOT_PAT@224..226\n-              DOT2@224..226 \"..\"\n-            R_PAREN@226..227 \")\"\n-          WHITESPACE@227..228 \" \"\n-          EQ@228..229 \"=\"\n-          WHITESPACE@229..230 \" \"\n-          TUPLE_EXPR@230..232\n-            L_PAREN@230..231 \"(\"\n-            R_PAREN@231..232 \")\"\n-          SEMICOLON@232..233 \";\"\n-        WHITESPACE@233..238 \"\\n    \"\n-        LET_STMT@238..264\n-          LET_KW@238..241 \"let\"\n-          WHITESPACE@241..242 \" \"\n-          TUPLE_STRUCT_PAT@242..258\n-            PATH@242..247\n-              PATH_SEGMENT@242..247\n-                NAME_REF@242..247\n-                  IDENT@242..247 \"Tuple\"\n-            L_PAREN@247..248 \"(\"\n-            DOT_DOT_PAT@248..250\n-              DOT2@248..250 \"..\"\n-            COMMA@250..251 \",\"\n-            WHITESPACE@251..252 \" \"\n-            BIND_PAT@252..253\n-              NAME@252..253\n-                IDENT@252..253 \"a\"\n-            COMMA@253..254 \",\"\n-            WHITESPACE@254..255 \" \"\n-            DOT_DOT_PAT@255..257\n-              DOT2@255..257 \"..\"\n-            R_PAREN@257..258 \")\"\n-          WHITESPACE@258..259 \" \"\n-          EQ@259..260 \"=\"\n-          WHITESPACE@260..261 \" \"\n-          TUPLE_EXPR@261..263\n-            L_PAREN@261..262 \"(\"\n-            R_PAREN@262..263 \")\"\n-          SEMICOLON@263..264 \";\"\n-        WHITESPACE@264..269 \"\\n    \"\n-        COMMENT@269..271 \"//\"\n-        WHITESPACE@271..276 \"\\n    \"\n-        COMMENT@276..285 \"// Slices\"\n-        WHITESPACE@285..290 \"\\n    \"\n-        COMMENT@290..292 \"//\"\n-        WHITESPACE@292..297 \"\\n    \"\n-        LET_STMT@297..311\n-          LET_KW@297..300 \"let\"\n-          WHITESPACE@300..301 \" \"\n-          SLICE_PAT@301..305\n-            L_BRACK@301..302 \"[\"\n-            DOT_DOT_PAT@302..304\n-              DOT2@302..304 \"..\"\n-            R_BRACK@304..305 \"]\"\n-          WHITESPACE@305..306 \" \"\n-          EQ@306..307 \"=\"\n-          WHITESPACE@307..308 \" \"\n-          TUPLE_EXPR@308..310\n-            L_PAREN@308..309 \"(\"\n-            R_PAREN@309..310 \")\"\n-          SEMICOLON@310..311 \";\"\n-        WHITESPACE@311..316 \"\\n    \"\n-        LET_STMT@316..336\n-          LET_KW@316..319 \"let\"\n-          WHITESPACE@319..320 \" \"\n-          SLICE_PAT@320..330\n-            L_BRACK@320..321 \"[\"\n-            BIND_PAT@321..325\n-              NAME@321..325\n-                IDENT@321..325 \"head\"\n-            COMMA@325..326 \",\"\n-            WHITESPACE@326..327 \" \"\n-            DOT_DOT_PAT@327..329\n-              DOT2@327..329 \"..\"\n-            R_BRACK@329..330 \"]\"\n-          WHITESPACE@330..331 \" \"\n-          EQ@331..332 \"=\"\n-          WHITESPACE@332..333 \" \"\n-          TUPLE_EXPR@333..335\n-            L_PAREN@333..334 \"(\"\n-            R_PAREN@334..335 \")\"\n-          SEMICOLON@335..336 \";\"\n-        WHITESPACE@336..341 \"\\n    \"\n-        LET_STMT@341..368\n-          LET_KW@341..344 \"let\"\n-          WHITESPACE@344..345 \" \"\n-          SLICE_PAT@345..362\n-            L_BRACK@345..346 \"[\"\n-            BIND_PAT@346..350\n-              NAME@346..350\n-                IDENT@346..350 \"head\"\n-            COMMA@350..351 \",\"\n-            WHITESPACE@351..352 \" \"\n-            BIND_PAT@352..361\n-              NAME@352..356\n-                IDENT@352..356 \"tail\"\n-              WHITESPACE@356..357 \" \"\n-              AT@357..358 \"@\"\n-              WHITESPACE@358..359 \" \"\n-              DOT_DOT_PAT@359..361\n-                DOT2@359..361 \"..\"\n-            R_BRACK@361..362 \"]\"\n-          WHITESPACE@362..363 \" \"\n-          EQ@363..364 \"=\"\n-          WHITESPACE@364..365 \" \"\n-          TUPLE_EXPR@365..367\n-            L_PAREN@365..366 \"(\"\n-            R_PAREN@366..367 \")\"\n-          SEMICOLON@367..368 \";\"\n-        WHITESPACE@368..373 \"\\n    \"\n-        LET_STMT@373..399\n-          LET_KW@373..376 \"let\"\n-          WHITESPACE@376..377 \" \"\n-          SLICE_PAT@377..393\n-            L_BRACK@377..378 \"[\"\n-            BIND_PAT@378..382\n-              NAME@378..382\n-                IDENT@378..382 \"head\"\n-            COMMA@382..383 \",\"\n-            WHITESPACE@383..384 \" \"\n-            DOT_DOT_PAT@384..386\n-              DOT2@384..386 \"..\"\n-            COMMA@386..387 \",\"\n-            WHITESPACE@387..388 \" \"\n-            BIND_PAT@388..392\n-              NAME@388..392\n-                IDENT@388..392 \"cons\"\n-            R_BRACK@392..393 \"]\"\n-          WHITESPACE@393..394 \" \"\n-          EQ@394..395 \"=\"\n-          WHITESPACE@395..396 \" \"\n-          TUPLE_EXPR@396..398\n-            L_PAREN@396..397 \"(\"\n-            R_PAREN@397..398 \")\"\n-          SEMICOLON@398..399 \";\"\n-        WHITESPACE@399..404 \"\\n    \"\n-        LET_STMT@404..436\n-          LET_KW@404..407 \"let\"\n-          WHITESPACE@407..408 \" \"\n-          SLICE_PAT@408..430\n-            L_BRACK@408..409 \"[\"\n-            BIND_PAT@409..413\n-              NAME@409..413\n-                IDENT@409..413 \"head\"\n-            COMMA@413..414 \",\"\n-            WHITESPACE@414..415 \" \"\n-            BIND_PAT@415..423\n-              NAME@415..418\n-                IDENT@415..418 \"mid\"\n-              WHITESPACE@418..419 \" \"\n-              AT@419..420 \"@\"\n-              WHITESPACE@420..421 \" \"\n-              DOT_DOT_PAT@421..423\n-                DOT2@421..423 \"..\"\n-            COMMA@423..424 \",\"\n-            WHITESPACE@424..425 \" \"\n-            BIND_PAT@425..429\n-              NAME@425..429\n-                IDENT@425..429 \"cons\"\n-            R_BRACK@429..430 \"]\"\n-          WHITESPACE@430..431 \" \"\n-          EQ@431..432 \"=\"\n-          WHITESPACE@432..433 \" \"\n-          TUPLE_EXPR@433..435\n-            L_PAREN@433..434 \"(\"\n-            R_PAREN@434..435 \")\"\n-          SEMICOLON@435..436 \";\"\n-        WHITESPACE@436..441 \"\\n    \"\n-        LET_STMT@441..471\n-          LET_KW@441..444 \"let\"\n-          WHITESPACE@444..445 \" \"\n-          SLICE_PAT@445..465\n-            L_BRACK@445..446 \"[\"\n-            BIND_PAT@446..450\n-              NAME@446..450\n-                IDENT@446..450 \"head\"\n-            COMMA@450..451 \",\"\n-            WHITESPACE@451..452 \" \"\n-            DOT_DOT_PAT@452..454\n-              DOT2@452..454 \"..\"\n-            COMMA@454..455 \",\"\n-            WHITESPACE@455..456 \" \"\n-            DOT_DOT_PAT@456..458\n-              DOT2@456..458 \"..\"\n-            COMMA@458..459 \",\"\n-            WHITESPACE@459..460 \" \"\n-            BIND_PAT@460..464\n-              NAME@460..464\n-                IDENT@460..464 \"cons\"\n-            R_BRACK@464..465 \"]\"\n-          WHITESPACE@465..466 \" \"\n-          EQ@466..467 \"=\"\n-          WHITESPACE@467..468 \" \"\n-          TUPLE_EXPR@468..470\n-            L_PAREN@468..469 \"(\"\n-            R_PAREN@469..470 \")\"\n-          SEMICOLON@470..471 \";\"\n-        WHITESPACE@471..476 \"\\n    \"\n-        LET_STMT@476..512\n-          LET_KW@476..479 \"let\"\n-          WHITESPACE@479..480 \" \"\n-          SLICE_PAT@480..506\n-            L_BRACK@480..481 \"[\"\n-            BIND_PAT@481..485\n-              NAME@481..485\n-                IDENT@481..485 \"head\"\n-            COMMA@485..486 \",\"\n-            WHITESPACE@486..487 \" \"\n-            DOT_DOT_PAT@487..489\n-              DOT2@487..489 \"..\"\n-            COMMA@489..490 \",\"\n-            WHITESPACE@490..491 \" \"\n-            BIND_PAT@491..494\n-              NAME@491..494\n-                IDENT@491..494 \"mid\"\n-            COMMA@494..495 \",\"\n-            WHITESPACE@495..496 \" \"\n-            BIND_PAT@496..505\n-              NAME@496..500\n-                IDENT@496..500 \"tail\"\n-              WHITESPACE@500..501 \" \"\n-              AT@501..502 \"@\"\n-              WHITESPACE@502..503 \" \"\n-              DOT_DOT_PAT@503..505\n-                DOT2@503..505 \"..\"\n-            R_BRACK@505..506 \"]\"\n-          WHITESPACE@506..507 \" \"\n-          EQ@507..508 \"=\"\n-          WHITESPACE@508..509 \" \"\n-          TUPLE_EXPR@509..511\n-            L_PAREN@509..510 \"(\"\n-            R_PAREN@510..511 \")\"\n-          SEMICOLON@511..512 \";\"\n-        WHITESPACE@512..517 \"\\n    \"\n-        LET_STMT@517..552\n-          LET_KW@517..520 \"let\"\n-          WHITESPACE@520..521 \" \"\n-          SLICE_PAT@521..546\n-            L_BRACK@521..522 \"[\"\n-            BIND_PAT@522..526\n-              NAME@522..526\n-                IDENT@522..526 \"head\"\n-            COMMA@526..527 \",\"\n-            WHITESPACE@527..528 \" \"\n-            DOT_DOT_PAT@528..530\n-              DOT2@528..530 \"..\"\n-            COMMA@530..531 \",\"\n-            WHITESPACE@531..532 \" \"\n-            BIND_PAT@532..535\n-              NAME@532..535\n-                IDENT@532..535 \"mid\"\n-            COMMA@535..536 \",\"\n-            WHITESPACE@536..537 \" \"\n-            DOT_DOT_PAT@537..539\n-              DOT2@537..539 \"..\"\n-            COMMA@539..540 \",\"\n-            WHITESPACE@540..541 \" \"\n-            BIND_PAT@541..545\n-              NAME@541..545\n-                IDENT@541..545 \"cons\"\n-            R_BRACK@545..546 \"]\"\n-          WHITESPACE@546..547 \" \"\n-          EQ@547..548 \"=\"\n-          WHITESPACE@548..549 \" \"\n-          TUPLE_EXPR@549..551\n-            L_PAREN@549..550 \"(\"\n-            R_PAREN@550..551 \")\"\n-          SEMICOLON@551..552 \";\"\n-        WHITESPACE@552..553 \"\\n\"\n-        R_CURLY@553..554 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..28\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        DOT_DOT_PAT@20..22\n+          DOT2@20..22 \"..\"\n+        WHITESPACE@22..23 \" \"\n+        EQ@23..24 \"=\"\n+        WHITESPACE@24..25 \" \"\n+        TUPLE_EXPR@25..27\n+          L_PAREN@25..26 \"(\"\n+          R_PAREN@26..27 \")\"\n+        SEMICOLON@27..28 \";\"\n+      WHITESPACE@28..33 \"\\n    \"\n+      COMMENT@33..35 \"//\"\n+      WHITESPACE@35..40 \"\\n    \"\n+      COMMENT@40..49 \"// Tuples\"\n+      WHITESPACE@49..54 \"\\n    \"\n+      COMMENT@54..56 \"//\"\n+      WHITESPACE@56..61 \"\\n    \"\n+      LET_STMT@61..78\n+        LET_KW@61..64 \"let\"\n+        WHITESPACE@64..65 \" \"\n+        TUPLE_PAT@65..72\n+          L_PAREN@65..66 \"(\"\n+          BIND_PAT@66..67\n+            NAME@66..67\n+              IDENT@66..67 \"a\"\n+          COMMA@67..68 \",\"\n+          WHITESPACE@68..69 \" \"\n+          DOT_DOT_PAT@69..71\n+            DOT2@69..71 \"..\"\n+          R_PAREN@71..72 \")\"\n+        WHITESPACE@72..73 \" \"\n+        EQ@73..74 \"=\"\n+        WHITESPACE@74..75 \" \"\n+        TUPLE_EXPR@75..77\n+          L_PAREN@75..76 \"(\"\n+          R_PAREN@76..77 \")\"\n+        SEMICOLON@77..78 \";\"\n+      WHITESPACE@78..83 \"\\n    \"\n+      LET_STMT@83..101\n+        LET_KW@83..86 \"let\"\n+        WHITESPACE@86..87 \" \"\n+        TUPLE_PAT@87..95\n+          L_PAREN@87..88 \"(\"\n+          BIND_PAT@88..89\n+            NAME@88..89\n+              IDENT@88..89 \"a\"\n+          COMMA@89..90 \",\"\n+          WHITESPACE@90..91 \" \"\n+          DOT_DOT_PAT@91..93\n+            DOT2@91..93 \"..\"\n+          COMMA@93..94 \",\"\n+          R_PAREN@94..95 \")\"\n+        WHITESPACE@95..96 \" \"\n+        EQ@96..97 \"=\"\n+        WHITESPACE@97..98 \" \"\n+        TUPLE_EXPR@98..100\n+          L_PAREN@98..99 \"(\"\n+          R_PAREN@99..100 \")\"\n+        SEMICOLON@100..101 \";\"\n+      WHITESPACE@101..106 \"\\n    \"\n+      LET_STMT@106..128\n+        LET_KW@106..109 \"let\"\n+        WHITESPACE@109..110 \" \"\n+        TUPLE_STRUCT_PAT@110..122\n+          PATH@110..115\n+            PATH_SEGMENT@110..115\n+              NAME_REF@110..115\n+                IDENT@110..115 \"Tuple\"\n+          L_PAREN@115..116 \"(\"\n+          BIND_PAT@116..117\n+            NAME@116..117\n+              IDENT@116..117 \"a\"\n+          COMMA@117..118 \",\"\n+          WHITESPACE@118..119 \" \"\n+          DOT_DOT_PAT@119..121\n+            DOT2@119..121 \"..\"\n+          R_PAREN@121..122 \")\"\n+        WHITESPACE@122..123 \" \"\n+        EQ@123..124 \"=\"\n+        WHITESPACE@124..125 \" \"\n+        TUPLE_EXPR@125..127\n+          L_PAREN@125..126 \"(\"\n+          R_PAREN@126..127 \")\"\n+        SEMICOLON@127..128 \";\"\n+      WHITESPACE@128..133 \"\\n    \"\n+      LET_STMT@133..156\n+        LET_KW@133..136 \"let\"\n+        WHITESPACE@136..137 \" \"\n+        TUPLE_STRUCT_PAT@137..150\n+          PATH@137..142\n+            PATH_SEGMENT@137..142\n+              NAME_REF@137..142\n+                IDENT@137..142 \"Tuple\"\n+          L_PAREN@142..143 \"(\"\n+          BIND_PAT@143..144\n+            NAME@143..144\n+              IDENT@143..144 \"a\"\n+          COMMA@144..145 \",\"\n+          WHITESPACE@145..146 \" \"\n+          DOT_DOT_PAT@146..148\n+            DOT2@146..148 \"..\"\n+          COMMA@148..149 \",\"\n+          R_PAREN@149..150 \")\"\n+        WHITESPACE@150..151 \" \"\n+        EQ@151..152 \"=\"\n+        WHITESPACE@152..153 \" \"\n+        TUPLE_EXPR@153..155\n+          L_PAREN@153..154 \"(\"\n+          R_PAREN@154..155 \")\"\n+        SEMICOLON@155..156 \";\"\n+      WHITESPACE@156..161 \"\\n    \"\n+      LET_STMT@161..179\n+        LET_KW@161..164 \"let\"\n+        WHITESPACE@164..165 \" \"\n+        TUPLE_PAT@165..173\n+          L_PAREN@165..166 \"(\"\n+          DOT_DOT_PAT@166..168\n+            DOT2@166..168 \"..\"\n+          COMMA@168..169 \",\"\n+          WHITESPACE@169..170 \" \"\n+          DOT_DOT_PAT@170..172\n+            DOT2@170..172 \"..\"\n+          R_PAREN@172..173 \")\"\n+        WHITESPACE@173..174 \" \"\n+        EQ@174..175 \"=\"\n+        WHITESPACE@175..176 \" \"\n+        TUPLE_EXPR@176..178\n+          L_PAREN@176..177 \"(\"\n+          R_PAREN@177..178 \")\"\n+        SEMICOLON@178..179 \";\"\n+      WHITESPACE@179..184 \"\\n    \"\n+      LET_STMT@184..207\n+        LET_KW@184..187 \"let\"\n+        WHITESPACE@187..188 \" \"\n+        TUPLE_STRUCT_PAT@188..201\n+          PATH@188..193\n+            PATH_SEGMENT@188..193\n+              NAME_REF@188..193\n+                IDENT@188..193 \"Tuple\"\n+          L_PAREN@193..194 \"(\"\n+          DOT_DOT_PAT@194..196\n+            DOT2@194..196 \"..\"\n+          COMMA@196..197 \",\"\n+          WHITESPACE@197..198 \" \"\n+          DOT_DOT_PAT@198..200\n+            DOT2@198..200 \"..\"\n+          R_PAREN@200..201 \")\"\n+        WHITESPACE@201..202 \" \"\n+        EQ@202..203 \"=\"\n+        WHITESPACE@203..204 \" \"\n+        TUPLE_EXPR@204..206\n+          L_PAREN@204..205 \"(\"\n+          R_PAREN@205..206 \")\"\n+        SEMICOLON@206..207 \";\"\n+      WHITESPACE@207..212 \"\\n    \"\n+      LET_STMT@212..233\n+        LET_KW@212..215 \"let\"\n+        WHITESPACE@215..216 \" \"\n+        TUPLE_PAT@216..227\n+          L_PAREN@216..217 \"(\"\n+          DOT_DOT_PAT@217..219\n+            DOT2@217..219 \"..\"\n+          COMMA@219..220 \",\"\n+          WHITESPACE@220..221 \" \"\n+          BIND_PAT@221..222\n+            NAME@221..222\n+              IDENT@221..222 \"a\"\n+          COMMA@222..223 \",\"\n+          WHITESPACE@223..224 \" \"\n+          DOT_DOT_PAT@224..226\n+            DOT2@224..226 \"..\"\n+          R_PAREN@226..227 \")\"\n+        WHITESPACE@227..228 \" \"\n+        EQ@228..229 \"=\"\n+        WHITESPACE@229..230 \" \"\n+        TUPLE_EXPR@230..232\n+          L_PAREN@230..231 \"(\"\n+          R_PAREN@231..232 \")\"\n+        SEMICOLON@232..233 \";\"\n+      WHITESPACE@233..238 \"\\n    \"\n+      LET_STMT@238..264\n+        LET_KW@238..241 \"let\"\n+        WHITESPACE@241..242 \" \"\n+        TUPLE_STRUCT_PAT@242..258\n+          PATH@242..247\n+            PATH_SEGMENT@242..247\n+              NAME_REF@242..247\n+                IDENT@242..247 \"Tuple\"\n+          L_PAREN@247..248 \"(\"\n+          DOT_DOT_PAT@248..250\n+            DOT2@248..250 \"..\"\n+          COMMA@250..251 \",\"\n+          WHITESPACE@251..252 \" \"\n+          BIND_PAT@252..253\n+            NAME@252..253\n+              IDENT@252..253 \"a\"\n+          COMMA@253..254 \",\"\n+          WHITESPACE@254..255 \" \"\n+          DOT_DOT_PAT@255..257\n+            DOT2@255..257 \"..\"\n+          R_PAREN@257..258 \")\"\n+        WHITESPACE@258..259 \" \"\n+        EQ@259..260 \"=\"\n+        WHITESPACE@260..261 \" \"\n+        TUPLE_EXPR@261..263\n+          L_PAREN@261..262 \"(\"\n+          R_PAREN@262..263 \")\"\n+        SEMICOLON@263..264 \";\"\n+      WHITESPACE@264..269 \"\\n    \"\n+      COMMENT@269..271 \"//\"\n+      WHITESPACE@271..276 \"\\n    \"\n+      COMMENT@276..285 \"// Slices\"\n+      WHITESPACE@285..290 \"\\n    \"\n+      COMMENT@290..292 \"//\"\n+      WHITESPACE@292..297 \"\\n    \"\n+      LET_STMT@297..311\n+        LET_KW@297..300 \"let\"\n+        WHITESPACE@300..301 \" \"\n+        SLICE_PAT@301..305\n+          L_BRACK@301..302 \"[\"\n+          DOT_DOT_PAT@302..304\n+            DOT2@302..304 \"..\"\n+          R_BRACK@304..305 \"]\"\n+        WHITESPACE@305..306 \" \"\n+        EQ@306..307 \"=\"\n+        WHITESPACE@307..308 \" \"\n+        TUPLE_EXPR@308..310\n+          L_PAREN@308..309 \"(\"\n+          R_PAREN@309..310 \")\"\n+        SEMICOLON@310..311 \";\"\n+      WHITESPACE@311..316 \"\\n    \"\n+      LET_STMT@316..336\n+        LET_KW@316..319 \"let\"\n+        WHITESPACE@319..320 \" \"\n+        SLICE_PAT@320..330\n+          L_BRACK@320..321 \"[\"\n+          BIND_PAT@321..325\n+            NAME@321..325\n+              IDENT@321..325 \"head\"\n+          COMMA@325..326 \",\"\n+          WHITESPACE@326..327 \" \"\n+          DOT_DOT_PAT@327..329\n+            DOT2@327..329 \"..\"\n+          R_BRACK@329..330 \"]\"\n+        WHITESPACE@330..331 \" \"\n+        EQ@331..332 \"=\"\n+        WHITESPACE@332..333 \" \"\n+        TUPLE_EXPR@333..335\n+          L_PAREN@333..334 \"(\"\n+          R_PAREN@334..335 \")\"\n+        SEMICOLON@335..336 \";\"\n+      WHITESPACE@336..341 \"\\n    \"\n+      LET_STMT@341..368\n+        LET_KW@341..344 \"let\"\n+        WHITESPACE@344..345 \" \"\n+        SLICE_PAT@345..362\n+          L_BRACK@345..346 \"[\"\n+          BIND_PAT@346..350\n+            NAME@346..350\n+              IDENT@346..350 \"head\"\n+          COMMA@350..351 \",\"\n+          WHITESPACE@351..352 \" \"\n+          BIND_PAT@352..361\n+            NAME@352..356\n+              IDENT@352..356 \"tail\"\n+            WHITESPACE@356..357 \" \"\n+            AT@357..358 \"@\"\n+            WHITESPACE@358..359 \" \"\n+            DOT_DOT_PAT@359..361\n+              DOT2@359..361 \"..\"\n+          R_BRACK@361..362 \"]\"\n+        WHITESPACE@362..363 \" \"\n+        EQ@363..364 \"=\"\n+        WHITESPACE@364..365 \" \"\n+        TUPLE_EXPR@365..367\n+          L_PAREN@365..366 \"(\"\n+          R_PAREN@366..367 \")\"\n+        SEMICOLON@367..368 \";\"\n+      WHITESPACE@368..373 \"\\n    \"\n+      LET_STMT@373..399\n+        LET_KW@373..376 \"let\"\n+        WHITESPACE@376..377 \" \"\n+        SLICE_PAT@377..393\n+          L_BRACK@377..378 \"[\"\n+          BIND_PAT@378..382\n+            NAME@378..382\n+              IDENT@378..382 \"head\"\n+          COMMA@382..383 \",\"\n+          WHITESPACE@383..384 \" \"\n+          DOT_DOT_PAT@384..386\n+            DOT2@384..386 \"..\"\n+          COMMA@386..387 \",\"\n+          WHITESPACE@387..388 \" \"\n+          BIND_PAT@388..392\n+            NAME@388..392\n+              IDENT@388..392 \"cons\"\n+          R_BRACK@392..393 \"]\"\n+        WHITESPACE@393..394 \" \"\n+        EQ@394..395 \"=\"\n+        WHITESPACE@395..396 \" \"\n+        TUPLE_EXPR@396..398\n+          L_PAREN@396..397 \"(\"\n+          R_PAREN@397..398 \")\"\n+        SEMICOLON@398..399 \";\"\n+      WHITESPACE@399..404 \"\\n    \"\n+      LET_STMT@404..436\n+        LET_KW@404..407 \"let\"\n+        WHITESPACE@407..408 \" \"\n+        SLICE_PAT@408..430\n+          L_BRACK@408..409 \"[\"\n+          BIND_PAT@409..413\n+            NAME@409..413\n+              IDENT@409..413 \"head\"\n+          COMMA@413..414 \",\"\n+          WHITESPACE@414..415 \" \"\n+          BIND_PAT@415..423\n+            NAME@415..418\n+              IDENT@415..418 \"mid\"\n+            WHITESPACE@418..419 \" \"\n+            AT@419..420 \"@\"\n+            WHITESPACE@420..421 \" \"\n+            DOT_DOT_PAT@421..423\n+              DOT2@421..423 \"..\"\n+          COMMA@423..424 \",\"\n+          WHITESPACE@424..425 \" \"\n+          BIND_PAT@425..429\n+            NAME@425..429\n+              IDENT@425..429 \"cons\"\n+          R_BRACK@429..430 \"]\"\n+        WHITESPACE@430..431 \" \"\n+        EQ@431..432 \"=\"\n+        WHITESPACE@432..433 \" \"\n+        TUPLE_EXPR@433..435\n+          L_PAREN@433..434 \"(\"\n+          R_PAREN@434..435 \")\"\n+        SEMICOLON@435..436 \";\"\n+      WHITESPACE@436..441 \"\\n    \"\n+      LET_STMT@441..471\n+        LET_KW@441..444 \"let\"\n+        WHITESPACE@444..445 \" \"\n+        SLICE_PAT@445..465\n+          L_BRACK@445..446 \"[\"\n+          BIND_PAT@446..450\n+            NAME@446..450\n+              IDENT@446..450 \"head\"\n+          COMMA@450..451 \",\"\n+          WHITESPACE@451..452 \" \"\n+          DOT_DOT_PAT@452..454\n+            DOT2@452..454 \"..\"\n+          COMMA@454..455 \",\"\n+          WHITESPACE@455..456 \" \"\n+          DOT_DOT_PAT@456..458\n+            DOT2@456..458 \"..\"\n+          COMMA@458..459 \",\"\n+          WHITESPACE@459..460 \" \"\n+          BIND_PAT@460..464\n+            NAME@460..464\n+              IDENT@460..464 \"cons\"\n+          R_BRACK@464..465 \"]\"\n+        WHITESPACE@465..466 \" \"\n+        EQ@466..467 \"=\"\n+        WHITESPACE@467..468 \" \"\n+        TUPLE_EXPR@468..470\n+          L_PAREN@468..469 \"(\"\n+          R_PAREN@469..470 \")\"\n+        SEMICOLON@470..471 \";\"\n+      WHITESPACE@471..476 \"\\n    \"\n+      LET_STMT@476..512\n+        LET_KW@476..479 \"let\"\n+        WHITESPACE@479..480 \" \"\n+        SLICE_PAT@480..506\n+          L_BRACK@480..481 \"[\"\n+          BIND_PAT@481..485\n+            NAME@481..485\n+              IDENT@481..485 \"head\"\n+          COMMA@485..486 \",\"\n+          WHITESPACE@486..487 \" \"\n+          DOT_DOT_PAT@487..489\n+            DOT2@487..489 \"..\"\n+          COMMA@489..490 \",\"\n+          WHITESPACE@490..491 \" \"\n+          BIND_PAT@491..494\n+            NAME@491..494\n+              IDENT@491..494 \"mid\"\n+          COMMA@494..495 \",\"\n+          WHITESPACE@495..496 \" \"\n+          BIND_PAT@496..505\n+            NAME@496..500\n+              IDENT@496..500 \"tail\"\n+            WHITESPACE@500..501 \" \"\n+            AT@501..502 \"@\"\n+            WHITESPACE@502..503 \" \"\n+            DOT_DOT_PAT@503..505\n+              DOT2@503..505 \"..\"\n+          R_BRACK@505..506 \"]\"\n+        WHITESPACE@506..507 \" \"\n+        EQ@507..508 \"=\"\n+        WHITESPACE@508..509 \" \"\n+        TUPLE_EXPR@509..511\n+          L_PAREN@509..510 \"(\"\n+          R_PAREN@510..511 \")\"\n+        SEMICOLON@511..512 \";\"\n+      WHITESPACE@512..517 \"\\n    \"\n+      LET_STMT@517..552\n+        LET_KW@517..520 \"let\"\n+        WHITESPACE@520..521 \" \"\n+        SLICE_PAT@521..546\n+          L_BRACK@521..522 \"[\"\n+          BIND_PAT@522..526\n+            NAME@522..526\n+              IDENT@522..526 \"head\"\n+          COMMA@526..527 \",\"\n+          WHITESPACE@527..528 \" \"\n+          DOT_DOT_PAT@528..530\n+            DOT2@528..530 \"..\"\n+          COMMA@530..531 \",\"\n+          WHITESPACE@531..532 \" \"\n+          BIND_PAT@532..535\n+            NAME@532..535\n+              IDENT@532..535 \"mid\"\n+          COMMA@535..536 \",\"\n+          WHITESPACE@536..537 \" \"\n+          DOT_DOT_PAT@537..539\n+            DOT2@537..539 \"..\"\n+          COMMA@539..540 \",\"\n+          WHITESPACE@540..541 \" \"\n+          BIND_PAT@541..545\n+            NAME@541..545\n+              IDENT@541..545 \"cons\"\n+          R_BRACK@545..546 \"]\"\n+        WHITESPACE@546..547 \" \"\n+        EQ@547..548 \"=\"\n+        WHITESPACE@548..549 \" \"\n+        TUPLE_EXPR@549..551\n+          L_PAREN@549..550 \"(\"\n+          R_PAREN@550..551 \")\"\n+        SEMICOLON@551..552 \";\"\n+      WHITESPACE@552..553 \"\\n\"\n+      R_CURLY@553..554 \"}\"\n   WHITESPACE@554..555 \"\\n\""}, {"sha": "7c092d518f11f740284e8cd8b750e1db6b743c71", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0145_record_field_pat.rast", "status": "modified", "additions": 63, "deletions": 64, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,68 +9,67 @@ SOURCE_FILE@0..63\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..62\n-      BLOCK@9..62\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..35\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          RECORD_PAT@19..29\n-            PATH@19..20\n-              PATH_SEGMENT@19..20\n-                NAME_REF@19..20\n-                  IDENT@19..20 \"S\"\n-            WHITESPACE@20..21 \" \"\n-            RECORD_FIELD_PAT_LIST@21..29\n-              L_CURLY@21..22 \"{\"\n-              WHITESPACE@22..23 \" \"\n-              RECORD_FIELD_PAT@23..27\n-                NAME_REF@23..24\n-                  INT_NUMBER@23..24 \"0\"\n-                COLON@24..25 \":\"\n-                WHITESPACE@25..26 \" \"\n-                LITERAL_PAT@26..27\n-                  LITERAL@26..27\n-                    INT_NUMBER@26..27 \"1\"\n-              WHITESPACE@27..28 \" \"\n-              R_CURLY@28..29 \"}\"\n-          WHITESPACE@29..30 \" \"\n-          EQ@30..31 \"=\"\n-          WHITESPACE@31..32 \" \"\n-          TUPLE_EXPR@32..34\n-            L_PAREN@32..33 \"(\"\n-            R_PAREN@33..34 \")\"\n-          SEMICOLON@34..35 \";\"\n-        WHITESPACE@35..40 \"\\n    \"\n-        LET_STMT@40..60\n-          LET_KW@40..43 \"let\"\n-          WHITESPACE@43..44 \" \"\n-          RECORD_PAT@44..54\n-            PATH@44..45\n-              PATH_SEGMENT@44..45\n-                NAME_REF@44..45\n-                  IDENT@44..45 \"S\"\n-            WHITESPACE@45..46 \" \"\n-            RECORD_FIELD_PAT_LIST@46..54\n-              L_CURLY@46..47 \"{\"\n-              WHITESPACE@47..48 \" \"\n-              RECORD_FIELD_PAT@48..52\n-                NAME_REF@48..49\n-                  IDENT@48..49 \"x\"\n-                COLON@49..50 \":\"\n-                WHITESPACE@50..51 \" \"\n-                LITERAL_PAT@51..52\n-                  LITERAL@51..52\n-                    INT_NUMBER@51..52 \"1\"\n-              WHITESPACE@52..53 \" \"\n-              R_CURLY@53..54 \"}\"\n-          WHITESPACE@54..55 \" \"\n-          EQ@55..56 \"=\"\n-          WHITESPACE@56..57 \" \"\n-          TUPLE_EXPR@57..59\n-            L_PAREN@57..58 \"(\"\n-            R_PAREN@58..59 \")\"\n-          SEMICOLON@59..60 \";\"\n-        WHITESPACE@60..61 \"\\n\"\n-        R_CURLY@61..62 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..35\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        RECORD_PAT@19..29\n+          PATH@19..20\n+            PATH_SEGMENT@19..20\n+              NAME_REF@19..20\n+                IDENT@19..20 \"S\"\n+          WHITESPACE@20..21 \" \"\n+          RECORD_FIELD_PAT_LIST@21..29\n+            L_CURLY@21..22 \"{\"\n+            WHITESPACE@22..23 \" \"\n+            RECORD_FIELD_PAT@23..27\n+              NAME_REF@23..24\n+                INT_NUMBER@23..24 \"0\"\n+              COLON@24..25 \":\"\n+              WHITESPACE@25..26 \" \"\n+              LITERAL_PAT@26..27\n+                LITERAL@26..27\n+                  INT_NUMBER@26..27 \"1\"\n+            WHITESPACE@27..28 \" \"\n+            R_CURLY@28..29 \"}\"\n+        WHITESPACE@29..30 \" \"\n+        EQ@30..31 \"=\"\n+        WHITESPACE@31..32 \" \"\n+        TUPLE_EXPR@32..34\n+          L_PAREN@32..33 \"(\"\n+          R_PAREN@33..34 \")\"\n+        SEMICOLON@34..35 \";\"\n+      WHITESPACE@35..40 \"\\n    \"\n+      LET_STMT@40..60\n+        LET_KW@40..43 \"let\"\n+        WHITESPACE@43..44 \" \"\n+        RECORD_PAT@44..54\n+          PATH@44..45\n+            PATH_SEGMENT@44..45\n+              NAME_REF@44..45\n+                IDENT@44..45 \"S\"\n+          WHITESPACE@45..46 \" \"\n+          RECORD_FIELD_PAT_LIST@46..54\n+            L_CURLY@46..47 \"{\"\n+            WHITESPACE@47..48 \" \"\n+            RECORD_FIELD_PAT@48..52\n+              NAME_REF@48..49\n+                IDENT@48..49 \"x\"\n+              COLON@49..50 \":\"\n+              WHITESPACE@50..51 \" \"\n+              LITERAL_PAT@51..52\n+                LITERAL@51..52\n+                  INT_NUMBER@51..52 \"1\"\n+            WHITESPACE@52..53 \" \"\n+            R_CURLY@53..54 \"}\"\n+        WHITESPACE@54..55 \" \"\n+        EQ@55..56 \"=\"\n+        WHITESPACE@56..57 \" \"\n+        TUPLE_EXPR@57..59\n+          L_PAREN@57..58 \"(\"\n+          R_PAREN@58..59 \")\"\n+        SEMICOLON@59..60 \";\"\n+      WHITESPACE@60..61 \"\\n\"\n+      R_CURLY@61..62 \"}\"\n   WHITESPACE@62..63 \"\\n\""}, {"sha": "8382a4f96a4e9b99387901809323df2604c832cb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0146_as_precedence.rast", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0146_as_precedence.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0146_as_precedence.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0146_as_precedence.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,35 +9,34 @@ SOURCE_FILE@0..43\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..42\n-      BLOCK@9..42\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        LET_STMT@15..40\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          PLACEHOLDER_PAT@19..20\n-            UNDERSCORE@19..20 \"_\"\n-          WHITESPACE@20..21 \" \"\n-          EQ@21..22 \"=\"\n-          WHITESPACE@22..23 \" \"\n-          CAST_EXPR@23..39\n-            REF_EXPR@23..25\n-              AMP@23..24 \"&\"\n-              LITERAL@24..25\n-                INT_NUMBER@24..25 \"1\"\n-            WHITESPACE@25..26 \" \"\n-            AS_KW@26..28 \"as\"\n-            WHITESPACE@28..29 \" \"\n-            POINTER_TYPE@29..39\n-              STAR@29..30 \"*\"\n-              CONST_KW@30..35 \"const\"\n-              WHITESPACE@35..36 \" \"\n-              PATH_TYPE@36..39\n-                PATH@36..39\n-                  PATH_SEGMENT@36..39\n-                    NAME_REF@36..39\n-                      IDENT@36..39 \"i32\"\n-          SEMICOLON@39..40 \";\"\n-        WHITESPACE@40..41 \"\\n\"\n-        R_CURLY@41..42 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      LET_STMT@15..40\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        PLACEHOLDER_PAT@19..20\n+          UNDERSCORE@19..20 \"_\"\n+        WHITESPACE@20..21 \" \"\n+        EQ@21..22 \"=\"\n+        WHITESPACE@22..23 \" \"\n+        CAST_EXPR@23..39\n+          REF_EXPR@23..25\n+            AMP@23..24 \"&\"\n+            LITERAL@24..25\n+              INT_NUMBER@24..25 \"1\"\n+          WHITESPACE@25..26 \" \"\n+          AS_KW@26..28 \"as\"\n+          WHITESPACE@28..29 \" \"\n+          POINTER_TYPE@29..39\n+            STAR@29..30 \"*\"\n+            CONST_KW@30..35 \"const\"\n+            WHITESPACE@35..36 \" \"\n+            PATH_TYPE@36..39\n+              PATH@36..39\n+                PATH_SEGMENT@36..39\n+                  NAME_REF@36..39\n+                    IDENT@36..39 \"i32\"\n+        SEMICOLON@39..40 \";\"\n+      WHITESPACE@40..41 \"\\n\"\n+      R_CURLY@41..42 \"}\"\n   WHITESPACE@42..43 \"\\n\""}, {"sha": "f43dfbe63068c8d6ed2886abda24fd41ffd9798c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0152_arg_with_attr.rast", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_arg_with_attr.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,29 +9,28 @@ SOURCE_FILE@0..34\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..33\n-      BLOCK@10..33\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        CALL_EXPR@16..31\n-          PATH_EXPR@16..19\n-            PATH@16..19\n-              PATH_SEGMENT@16..19\n-                NAME_REF@16..19\n-                  IDENT@16..19 \"foo\"\n-          ARG_LIST@19..31\n-            L_PAREN@19..20 \"(\"\n-            LITERAL@20..30\n-              ATTR@20..27\n-                POUND@20..21 \"#\"\n-                L_BRACK@21..22 \"[\"\n-                PATH@22..26\n-                  PATH_SEGMENT@22..26\n-                    NAME_REF@22..26\n-                      IDENT@22..26 \"attr\"\n-                R_BRACK@26..27 \"]\"\n-              WHITESPACE@27..28 \" \"\n-              INT_NUMBER@28..30 \"92\"\n-            R_PAREN@30..31 \")\"\n-        WHITESPACE@31..32 \"\\n\"\n-        R_CURLY@32..33 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      CALL_EXPR@16..31\n+        PATH_EXPR@16..19\n+          PATH@16..19\n+            PATH_SEGMENT@16..19\n+              NAME_REF@16..19\n+                IDENT@16..19 \"foo\"\n+        ARG_LIST@19..31\n+          L_PAREN@19..20 \"(\"\n+          LITERAL@20..30\n+            ATTR@20..27\n+              POUND@20..21 \"#\"\n+              L_BRACK@21..22 \"[\"\n+              PATH@22..26\n+                PATH_SEGMENT@22..26\n+                  NAME_REF@22..26\n+                    IDENT@22..26 \"attr\"\n+              R_BRACK@26..27 \"]\"\n+            WHITESPACE@27..28 \" \"\n+            INT_NUMBER@28..30 \"92\"\n+          R_PAREN@30..31 \")\"\n+      WHITESPACE@31..32 \"\\n\"\n+      R_CURLY@32..33 \"}\"\n   WHITESPACE@33..34 \"\\n\""}, {"sha": "ecac059502649042d1fd084844d738f5ef23f2eb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0155_closure_params.rast", "status": "modified", "additions": 57, "deletions": 58, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,62 +9,61 @@ SOURCE_FILE@0..63\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..62\n-      BLOCK@10..62\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..15 \"\\n   \"\n-        LET_STMT@15..60\n-          LET_KW@15..18 \"let\"\n-          WHITESPACE@18..19 \" \"\n-          BIND_PAT@19..22\n-            NAME@19..22\n-              IDENT@19..22 \"foo\"\n-          WHITESPACE@22..23 \" \"\n-          EQ@23..24 \"=\"\n-          WHITESPACE@24..25 \" \"\n-          LAMBDA_EXPR@25..59\n-            PARAM_LIST@25..56\n-              PIPE@25..26 \"|\"\n-              PARAM@26..29\n-                BIND_PAT@26..29\n-                  NAME@26..29\n-                    IDENT@26..29 \"bar\"\n-              COMMA@29..30 \",\"\n-              WHITESPACE@30..31 \" \"\n-              PARAM@31..39\n-                BIND_PAT@31..34\n-                  NAME@31..34\n-                    IDENT@31..34 \"baz\"\n-                COLON@34..35 \":\"\n-                WHITESPACE@35..36 \" \"\n-                PATH_TYPE@36..39\n-                  PATH@36..39\n-                    PATH_SEGMENT@36..39\n-                      NAME_REF@36..39\n-                        IDENT@36..39 \"Baz\"\n-              COMMA@39..40 \",\"\n-              WHITESPACE@40..41 \" \"\n-              PARAM@41..55\n-                BIND_PAT@41..44\n-                  NAME@41..44\n-                    IDENT@41..44 \"qux\"\n-                COLON@44..45 \":\"\n-                WHITESPACE@45..46 \" \"\n-                PATH_TYPE@46..55\n-                  PATH@46..55\n-                    PATH@46..49\n-                      PATH_SEGMENT@46..49\n-                        NAME_REF@46..49\n-                          IDENT@46..49 \"Qux\"\n-                    COLON2@49..51 \"::\"\n-                    PATH_SEGMENT@51..55\n-                      NAME_REF@51..55\n-                        IDENT@51..55 \"Quux\"\n-              PIPE@55..56 \"|\"\n-            WHITESPACE@56..57 \" \"\n-            TUPLE_EXPR@57..59\n-              L_PAREN@57..58 \"(\"\n-              R_PAREN@58..59 \")\"\n-          SEMICOLON@59..60 \";\"\n-        WHITESPACE@60..61 \"\\n\"\n-        R_CURLY@61..62 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..15 \"\\n   \"\n+      LET_STMT@15..60\n+        LET_KW@15..18 \"let\"\n+        WHITESPACE@18..19 \" \"\n+        BIND_PAT@19..22\n+          NAME@19..22\n+            IDENT@19..22 \"foo\"\n+        WHITESPACE@22..23 \" \"\n+        EQ@23..24 \"=\"\n+        WHITESPACE@24..25 \" \"\n+        LAMBDA_EXPR@25..59\n+          PARAM_LIST@25..56\n+            PIPE@25..26 \"|\"\n+            PARAM@26..29\n+              BIND_PAT@26..29\n+                NAME@26..29\n+                  IDENT@26..29 \"bar\"\n+            COMMA@29..30 \",\"\n+            WHITESPACE@30..31 \" \"\n+            PARAM@31..39\n+              BIND_PAT@31..34\n+                NAME@31..34\n+                  IDENT@31..34 \"baz\"\n+              COLON@34..35 \":\"\n+              WHITESPACE@35..36 \" \"\n+              PATH_TYPE@36..39\n+                PATH@36..39\n+                  PATH_SEGMENT@36..39\n+                    NAME_REF@36..39\n+                      IDENT@36..39 \"Baz\"\n+            COMMA@39..40 \",\"\n+            WHITESPACE@40..41 \" \"\n+            PARAM@41..55\n+              BIND_PAT@41..44\n+                NAME@41..44\n+                  IDENT@41..44 \"qux\"\n+              COLON@44..45 \":\"\n+              WHITESPACE@45..46 \" \"\n+              PATH_TYPE@46..55\n+                PATH@46..55\n+                  PATH@46..49\n+                    PATH_SEGMENT@46..49\n+                      NAME_REF@46..49\n+                        IDENT@46..49 \"Qux\"\n+                  COLON2@49..51 \"::\"\n+                  PATH_SEGMENT@51..55\n+                    NAME_REF@51..55\n+                      IDENT@51..55 \"Quux\"\n+            PIPE@55..56 \"|\"\n+          WHITESPACE@56..57 \" \"\n+          TUPLE_EXPR@57..59\n+            L_PAREN@57..58 \"(\"\n+            R_PAREN@58..59 \")\"\n+        SEMICOLON@59..60 \";\"\n+      WHITESPACE@60..61 \"\\n\"\n+      R_CURLY@61..62 \"}\"\n   WHITESPACE@62..63 \"\\n\""}, {"sha": "0928334176371560a832581ffe761190035f0579", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0156_fn_def_param.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_fn_def_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_fn_def_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_fn_def_param.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -38,7 +38,6 @@ SOURCE_FILE@0..30\n       R_PAREN@25..26 \")\"\n     WHITESPACE@26..27 \" \"\n     BLOCK_EXPR@27..29\n-      BLOCK@27..29\n-        L_CURLY@27..28 \"{\"\n-        R_CURLY@28..29 \"}\"\n+      L_CURLY@27..28 \"{\"\n+      R_CURLY@28..29 \"}\"\n   WHITESPACE@29..30 \"\\n\""}, {"sha": "88d512f1ae9f533ea7e1fcb4e063ce5ce499ba26", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0156_or_pattern.rast", "status": "modified", "additions": 99, "deletions": 100, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,104 +9,103 @@ SOURCE_FILE@0..130\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..129\n-      BLOCK@10..129\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        MATCH_EXPR@16..127\n-          MATCH_KW@16..21 \"match\"\n-          WHITESPACE@21..22 \" \"\n-          TUPLE_EXPR@22..24\n-            L_PAREN@22..23 \"(\"\n-            R_PAREN@23..24 \")\"\n-          WHITESPACE@24..25 \" \"\n-          MATCH_ARM_LIST@25..127\n-            L_CURLY@25..26 \"{\"\n-            WHITESPACE@26..35 \"\\n        \"\n-            MATCH_ARM@35..48\n-              PAREN_PAT@35..42\n-                L_PAREN@35..36 \"(\"\n-                OR_PAT@36..41\n-                  PLACEHOLDER_PAT@36..37\n-                    UNDERSCORE@36..37 \"_\"\n-                  WHITESPACE@37..38 \" \"\n-                  PIPE@38..39 \"|\"\n-                  WHITESPACE@39..40 \" \"\n-                  PLACEHOLDER_PAT@40..41\n-                    UNDERSCORE@40..41 \"_\"\n-                R_PAREN@41..42 \")\"\n-              WHITESPACE@42..43 \" \"\n-              FAT_ARROW@43..45 \"=>\"\n-              WHITESPACE@45..46 \" \"\n-              TUPLE_EXPR@46..48\n-                L_PAREN@46..47 \"(\"\n-                R_PAREN@47..48 \")\"\n-            COMMA@48..49 \",\"\n-            WHITESPACE@49..58 \"\\n        \"\n-            MATCH_ARM@58..72\n-              REF_PAT@58..66\n-                AMP@58..59 \"&\"\n-                PAREN_PAT@59..66\n-                  L_PAREN@59..60 \"(\"\n-                  OR_PAT@60..65\n-                    PLACEHOLDER_PAT@60..61\n-                      UNDERSCORE@60..61 \"_\"\n-                    WHITESPACE@61..62 \" \"\n-                    PIPE@62..63 \"|\"\n-                    WHITESPACE@63..64 \" \"\n-                    PLACEHOLDER_PAT@64..65\n-                      UNDERSCORE@64..65 \"_\"\n-                  R_PAREN@65..66 \")\"\n-              WHITESPACE@66..67 \" \"\n-              FAT_ARROW@67..69 \"=>\"\n-              WHITESPACE@69..70 \" \"\n-              TUPLE_EXPR@70..72\n-                L_PAREN@70..71 \"(\"\n-                R_PAREN@71..72 \")\"\n-            COMMA@72..73 \",\"\n-            WHITESPACE@73..82 \"\\n        \"\n-            MATCH_ARM@82..96\n-              TUPLE_PAT@82..90\n-                L_PAREN@82..83 \"(\"\n-                OR_PAT@83..88\n-                  PLACEHOLDER_PAT@83..84\n-                    UNDERSCORE@83..84 \"_\"\n-                  WHITESPACE@84..85 \" \"\n-                  PIPE@85..86 \"|\"\n-                  WHITESPACE@86..87 \" \"\n-                  PLACEHOLDER_PAT@87..88\n-                    UNDERSCORE@87..88 \"_\"\n-                COMMA@88..89 \",\"\n-                R_PAREN@89..90 \")\"\n-              WHITESPACE@90..91 \" \"\n-              FAT_ARROW@91..93 \"=>\"\n-              WHITESPACE@93..94 \" \"\n-              TUPLE_EXPR@94..96\n-                L_PAREN@94..95 \"(\"\n-                R_PAREN@95..96 \")\"\n-            COMMA@96..97 \",\"\n-            WHITESPACE@97..106 \"\\n        \"\n-            MATCH_ARM@106..120\n-              SLICE_PAT@106..114\n-                L_BRACK@106..107 \"[\"\n-                OR_PAT@107..112\n-                  PLACEHOLDER_PAT@107..108\n-                    UNDERSCORE@107..108 \"_\"\n-                  WHITESPACE@108..109 \" \"\n-                  PIPE@109..110 \"|\"\n-                  WHITESPACE@110..111 \" \"\n-                  PLACEHOLDER_PAT@111..112\n-                    UNDERSCORE@111..112 \"_\"\n-                COMMA@112..113 \",\"\n-                R_BRACK@113..114 \"]\"\n-              WHITESPACE@114..115 \" \"\n-              FAT_ARROW@115..117 \"=>\"\n-              WHITESPACE@117..118 \" \"\n-              TUPLE_EXPR@118..120\n-                L_PAREN@118..119 \"(\"\n-                R_PAREN@119..120 \")\"\n-            COMMA@120..121 \",\"\n-            WHITESPACE@121..126 \"\\n    \"\n-            R_CURLY@126..127 \"}\"\n-        WHITESPACE@127..128 \"\\n\"\n-        R_CURLY@128..129 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      MATCH_EXPR@16..127\n+        MATCH_KW@16..21 \"match\"\n+        WHITESPACE@21..22 \" \"\n+        TUPLE_EXPR@22..24\n+          L_PAREN@22..23 \"(\"\n+          R_PAREN@23..24 \")\"\n+        WHITESPACE@24..25 \" \"\n+        MATCH_ARM_LIST@25..127\n+          L_CURLY@25..26 \"{\"\n+          WHITESPACE@26..35 \"\\n        \"\n+          MATCH_ARM@35..48\n+            PAREN_PAT@35..42\n+              L_PAREN@35..36 \"(\"\n+              OR_PAT@36..41\n+                PLACEHOLDER_PAT@36..37\n+                  UNDERSCORE@36..37 \"_\"\n+                WHITESPACE@37..38 \" \"\n+                PIPE@38..39 \"|\"\n+                WHITESPACE@39..40 \" \"\n+                PLACEHOLDER_PAT@40..41\n+                  UNDERSCORE@40..41 \"_\"\n+              R_PAREN@41..42 \")\"\n+            WHITESPACE@42..43 \" \"\n+            FAT_ARROW@43..45 \"=>\"\n+            WHITESPACE@45..46 \" \"\n+            TUPLE_EXPR@46..48\n+              L_PAREN@46..47 \"(\"\n+              R_PAREN@47..48 \")\"\n+          COMMA@48..49 \",\"\n+          WHITESPACE@49..58 \"\\n        \"\n+          MATCH_ARM@58..72\n+            REF_PAT@58..66\n+              AMP@58..59 \"&\"\n+              PAREN_PAT@59..66\n+                L_PAREN@59..60 \"(\"\n+                OR_PAT@60..65\n+                  PLACEHOLDER_PAT@60..61\n+                    UNDERSCORE@60..61 \"_\"\n+                  WHITESPACE@61..62 \" \"\n+                  PIPE@62..63 \"|\"\n+                  WHITESPACE@63..64 \" \"\n+                  PLACEHOLDER_PAT@64..65\n+                    UNDERSCORE@64..65 \"_\"\n+                R_PAREN@65..66 \")\"\n+            WHITESPACE@66..67 \" \"\n+            FAT_ARROW@67..69 \"=>\"\n+            WHITESPACE@69..70 \" \"\n+            TUPLE_EXPR@70..72\n+              L_PAREN@70..71 \"(\"\n+              R_PAREN@71..72 \")\"\n+          COMMA@72..73 \",\"\n+          WHITESPACE@73..82 \"\\n        \"\n+          MATCH_ARM@82..96\n+            TUPLE_PAT@82..90\n+              L_PAREN@82..83 \"(\"\n+              OR_PAT@83..88\n+                PLACEHOLDER_PAT@83..84\n+                  UNDERSCORE@83..84 \"_\"\n+                WHITESPACE@84..85 \" \"\n+                PIPE@85..86 \"|\"\n+                WHITESPACE@86..87 \" \"\n+                PLACEHOLDER_PAT@87..88\n+                  UNDERSCORE@87..88 \"_\"\n+              COMMA@88..89 \",\"\n+              R_PAREN@89..90 \")\"\n+            WHITESPACE@90..91 \" \"\n+            FAT_ARROW@91..93 \"=>\"\n+            WHITESPACE@93..94 \" \"\n+            TUPLE_EXPR@94..96\n+              L_PAREN@94..95 \"(\"\n+              R_PAREN@95..96 \")\"\n+          COMMA@96..97 \",\"\n+          WHITESPACE@97..106 \"\\n        \"\n+          MATCH_ARM@106..120\n+            SLICE_PAT@106..114\n+              L_BRACK@106..107 \"[\"\n+              OR_PAT@107..112\n+                PLACEHOLDER_PAT@107..108\n+                  UNDERSCORE@107..108 \"_\"\n+                WHITESPACE@108..109 \" \"\n+                PIPE@109..110 \"|\"\n+                WHITESPACE@110..111 \" \"\n+                PLACEHOLDER_PAT@111..112\n+                  UNDERSCORE@111..112 \"_\"\n+              COMMA@112..113 \",\"\n+              R_BRACK@113..114 \"]\"\n+            WHITESPACE@114..115 \" \"\n+            FAT_ARROW@115..117 \"=>\"\n+            WHITESPACE@117..118 \" \"\n+            TUPLE_EXPR@118..120\n+              L_PAREN@118..119 \"(\"\n+              R_PAREN@119..120 \")\"\n+          COMMA@120..121 \",\"\n+          WHITESPACE@121..126 \"\\n    \"\n+          R_CURLY@126..127 \"}\"\n+      WHITESPACE@127..128 \"\\n\"\n+      R_CURLY@128..129 \"}\"\n   WHITESPACE@129..130 \"\\n\""}, {"sha": "bd9e8d40fe5ba86db24d3b0333e62d046b53bf0d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0158_binop_resets_statementness.rast", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_binop_resets_statementness.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_binop_resets_statementness.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_binop_resets_statementness.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,30 +9,28 @@ SOURCE_FILE@0..28\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..27\n-      BLOCK@9..27\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..15 \"\\n    \"\n-        EXPR_STMT@15..25\n-          BIN_EXPR@15..24\n-            PATH_EXPR@15..16\n-              PATH@15..16\n-                PATH_SEGMENT@15..16\n-                  NAME_REF@15..16\n-                    IDENT@15..16 \"v\"\n-            WHITESPACE@16..17 \" \"\n-            EQ@17..18 \"=\"\n-            WHITESPACE@18..19 \" \"\n-            BIN_EXPR@19..24\n-              BLOCK_EXPR@19..22\n-                BLOCK@19..22\n-                  L_CURLY@19..20 \"{\"\n-                  LITERAL@20..21\n-                    INT_NUMBER@20..21 \"1\"\n-                  R_CURLY@21..22 \"}\"\n-              AMP@22..23 \"&\"\n-              LITERAL@23..24\n-                INT_NUMBER@23..24 \"2\"\n-          SEMICOLON@24..25 \";\"\n-        WHITESPACE@25..26 \"\\n\"\n-        R_CURLY@26..27 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..25\n+        BIN_EXPR@15..24\n+          PATH_EXPR@15..16\n+            PATH@15..16\n+              PATH_SEGMENT@15..16\n+                NAME_REF@15..16\n+                  IDENT@15..16 \"v\"\n+          WHITESPACE@16..17 \" \"\n+          EQ@17..18 \"=\"\n+          WHITESPACE@18..19 \" \"\n+          BIN_EXPR@19..24\n+            BLOCK_EXPR@19..22\n+              L_CURLY@19..20 \"{\"\n+              LITERAL@20..21\n+                INT_NUMBER@20..21 \"1\"\n+              R_CURLY@21..22 \"}\"\n+            AMP@22..23 \"&\"\n+            LITERAL@23..24\n+              INT_NUMBER@23..24 \"2\"\n+        SEMICOLON@24..25 \";\"\n+      WHITESPACE@25..26 \"\\n\"\n+      R_CURLY@26..27 \"}\"\n   WHITESPACE@27..28 \"\\n\""}, {"sha": "08333a3254c83ff915df06704dd3e28c6d9be5bf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0158_lambda_ret_block.rast", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,37 +9,35 @@ SOURCE_FILE@0..34\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..33\n-      BLOCK@10..33\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..12 \" \"\n-        EXPR_STMT@12..31\n-          CALL_EXPR@12..30\n-            LAMBDA_EXPR@12..28\n-              PARAM_LIST@12..14\n-                PIPE@12..13 \"|\"\n-                PIPE@13..14 \"|\"\n-              WHITESPACE@14..15 \" \"\n-              RET_TYPE@15..21\n-                THIN_ARROW@15..17 \"->\"\n-                WHITESPACE@17..18 \" \"\n-                PATH_TYPE@18..21\n-                  PATH@18..21\n-                    PATH_SEGMENT@18..21\n-                      NAME_REF@18..21\n-                        IDENT@18..21 \"i32\"\n-              WHITESPACE@21..22 \" \"\n-              BLOCK_EXPR@22..28\n-                BLOCK@22..28\n-                  L_CURLY@22..23 \"{\"\n-                  WHITESPACE@23..24 \" \"\n-                  LITERAL@24..26\n-                    INT_NUMBER@24..26 \"92\"\n-                  WHITESPACE@26..27 \" \"\n-                  R_CURLY@27..28 \"}\"\n-            ARG_LIST@28..30\n-              L_PAREN@28..29 \"(\"\n-              R_PAREN@29..30 \")\"\n-          SEMICOLON@30..31 \";\"\n-        WHITESPACE@31..32 \" \"\n-        R_CURLY@32..33 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..12 \" \"\n+      EXPR_STMT@12..31\n+        CALL_EXPR@12..30\n+          LAMBDA_EXPR@12..28\n+            PARAM_LIST@12..14\n+              PIPE@12..13 \"|\"\n+              PIPE@13..14 \"|\"\n+            WHITESPACE@14..15 \" \"\n+            RET_TYPE@15..21\n+              THIN_ARROW@15..17 \"->\"\n+              WHITESPACE@17..18 \" \"\n+              PATH_TYPE@18..21\n+                PATH@18..21\n+                  PATH_SEGMENT@18..21\n+                    NAME_REF@18..21\n+                      IDENT@18..21 \"i32\"\n+            WHITESPACE@21..22 \" \"\n+            BLOCK_EXPR@22..28\n+              L_CURLY@22..23 \"{\"\n+              WHITESPACE@23..24 \" \"\n+              LITERAL@24..26\n+                INT_NUMBER@24..26 \"92\"\n+              WHITESPACE@26..27 \" \"\n+              R_CURLY@27..28 \"}\"\n+          ARG_LIST@28..30\n+            L_PAREN@28..29 \"(\"\n+            R_PAREN@29..30 \")\"\n+        SEMICOLON@30..31 \";\"\n+      WHITESPACE@31..32 \" \"\n+      R_CURLY@32..33 \"}\"\n   WHITESPACE@33..34 \"\\n\""}, {"sha": "5f09e4f4af337bc7436bf0c417592a54ac9243fc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0159_try_macro_fallback.rast", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,34 @@\n+SOURCE_FILE@0..27\n+  FN_DEF@0..26\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..6\n+      IDENT@3..6 \"foo\"\n+    PARAM_LIST@6..8\n+      L_PAREN@6..7 \"(\"\n+      R_PAREN@7..8 \")\"\n+    WHITESPACE@8..9 \" \"\n+    BLOCK_EXPR@9..26\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      EXPR_STMT@11..24\n+        MACRO_CALL@11..23\n+          PATH@11..14\n+            PATH_SEGMENT@11..14\n+              NAME_REF@11..14\n+                IDENT@11..14 \"try\"\n+          BANG@14..15 \"!\"\n+          TOKEN_TREE@15..23\n+            L_PAREN@15..16 \"(\"\n+            IDENT@16..18 \"Ok\"\n+            TOKEN_TREE@18..22\n+              L_PAREN@18..19 \"(\"\n+              TOKEN_TREE@19..21\n+                L_PAREN@19..20 \"(\"\n+                R_PAREN@20..21 \")\"\n+              R_PAREN@21..22 \")\"\n+            R_PAREN@22..23 \")\"\n+        SEMICOLON@23..24 \";\"\n+      WHITESPACE@24..25 \" \"\n+      R_CURLY@25..26 \"}\"\n+  WHITESPACE@26..27 \"\\n\""}, {"sha": "61a6b46a0b342f77ef5b8a5ae2526ada5c34589f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0159_try_macro_fallback.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1 @@\n+fn foo() { try!(Ok(())); }"}, {"sha": "05b89d1c36902200122eee7907802cd7129f4bde", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0160_try_macro_rules.rast", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,27 @@\n+SOURCE_FILE@0..30\n+  MACRO_CALL@0..29\n+    PATH@0..11\n+      PATH_SEGMENT@0..11\n+        NAME_REF@0..11\n+          IDENT@0..11 \"macro_rules\"\n+    BANG@11..12 \"!\"\n+    WHITESPACE@12..13 \" \"\n+    NAME@13..16\n+      IDENT@13..16 \"try\"\n+    WHITESPACE@16..17 \" \"\n+    TOKEN_TREE@17..29\n+      L_CURLY@17..18 \"{\"\n+      WHITESPACE@18..19 \" \"\n+      TOKEN_TREE@19..21\n+        L_PAREN@19..20 \"(\"\n+        R_PAREN@20..21 \")\"\n+      WHITESPACE@21..22 \" \"\n+      EQ@22..23 \"=\"\n+      R_ANGLE@23..24 \">\"\n+      WHITESPACE@24..25 \" \"\n+      TOKEN_TREE@25..27\n+        L_CURLY@25..26 \"{\"\n+        R_CURLY@26..27 \"}\"\n+      WHITESPACE@27..28 \" \"\n+      R_CURLY@28..29 \"}\"\n+  WHITESPACE@29..30 \"\\n\""}, {"sha": "2e2ab6e60b641d8abfaaf08e79bc6b114491778a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0160_try_macro_rules.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1 @@\n+macro_rules! try { () => {} }"}, {"sha": "9efebd8b8abb5be674e6356d894a6c28cba98309", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0161_labeled_block.rast", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,26 @@\n+SOURCE_FILE@0..23\n+  FN_DEF@0..22\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    PARAM_LIST@4..6\n+      L_PAREN@4..5 \"(\"\n+      R_PAREN@5..6 \")\"\n+    WHITESPACE@6..7 \" \"\n+    BLOCK_EXPR@7..22\n+      L_CURLY@7..8 \"{\"\n+      WHITESPACE@8..9 \" \"\n+      EXPR_STMT@9..20\n+        EFFECT_EXPR@9..19\n+          LABEL@9..16\n+            LIFETIME@9..15 \"\\'label\"\n+            COLON@15..16 \":\"\n+          WHITESPACE@16..17 \" \"\n+          BLOCK_EXPR@17..19\n+            L_CURLY@17..18 \"{\"\n+            R_CURLY@18..19 \"}\"\n+        SEMICOLON@19..20 \";\"\n+      WHITESPACE@20..21 \" \"\n+      R_CURLY@21..22 \"}\"\n+  WHITESPACE@22..23 \"\\n\""}, {"sha": "18b4ff4b1badae1507f6dcf910c5b0d689fee246", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0161_labeled_block.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1 @@\n+fn f() { 'label: {}; }"}, {"sha": "4991f2c36b871f6c87e5341a375d8ffc1de0ec4d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0162_unsafe_block.rast", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1,23 @@\n+SOURCE_FILE@0..22\n+  FN_DEF@0..21\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    PARAM_LIST@4..6\n+      L_PAREN@4..5 \"(\"\n+      R_PAREN@5..6 \")\"\n+    WHITESPACE@6..7 \" \"\n+    BLOCK_EXPR@7..21\n+      L_CURLY@7..8 \"{\"\n+      WHITESPACE@8..9 \" \"\n+      EFFECT_EXPR@9..19\n+        UNSAFE_KW@9..15 \"unsafe\"\n+        WHITESPACE@15..16 \" \"\n+        BLOCK_EXPR@16..19\n+          L_CURLY@16..17 \"{\"\n+          WHITESPACE@17..18 \" \"\n+          R_CURLY@18..19 \"}\"\n+      WHITESPACE@19..20 \" \"\n+      R_CURLY@20..21 \"}\"\n+  WHITESPACE@21..22 \"\\n\""}, {"sha": "dfb9b2a1c18721c7ab11d87727db82431992e8b2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0162_unsafe_block.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -0,0 +1 @@\n+fn f() { unsafe { } }"}, {"sha": "0ec237f8e4ffc9835c2a360dfdcb8133eb859092", "filename": "crates/ra_syntax/test_data/parser/ok/0005_fn_item.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0005_fn_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0005_fn_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0005_fn_item.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,8 +9,7 @@ SOURCE_FILE@0..13\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\""}, {"sha": "37b452ec43f843812046a9c02e7eed40c7bcbcc1", "filename": "crates/ra_syntax/test_data/parser/ok/0008_mod_item.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -36,10 +36,9 @@ SOURCE_FILE@0..118\n           R_PAREN@38..39 \")\"\n         WHITESPACE@39..40 \" \"\n         BLOCK_EXPR@40..47\n-          BLOCK@40..47\n-            L_CURLY@40..41 \"{\"\n-            WHITESPACE@41..46 \"\\n    \"\n-            R_CURLY@46..47 \"}\"\n+          L_CURLY@40..41 \"{\"\n+          WHITESPACE@41..46 \"\\n    \"\n+          R_CURLY@46..47 \"}\"\n       WHITESPACE@47..52 \"\\n    \"\n       STRUCT_DEF@52..63\n         STRUCT_KW@52..58 \"struct\""}, {"sha": "0b9bc58e8d2e71c391ccc34e3f79b0623f0f84b8", "filename": "crates/ra_syntax/test_data/parser/ok/0011_outer_attribute.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -31,9 +31,8 @@ SOURCE_FILE@0..60\n       R_PAREN@30..31 \")\"\n     WHITESPACE@31..32 \" \"\n     BLOCK_EXPR@32..34\n-      BLOCK@32..34\n-        L_CURLY@32..33 \"{\"\n-        R_CURLY@33..34 \"}\"\n+      L_CURLY@32..33 \"{\"\n+      R_CURLY@33..34 \"}\"\n   WHITESPACE@34..36 \"\\n\\n\"\n   MODULE@36..59\n     ATTR@36..52"}, {"sha": "980b340496c322561a27c1125633901e81b90e40", "filename": "crates/ra_syntax/test_data/parser/ok/0012_visibility.rast", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,9 +9,8 @@ SOURCE_FILE@0..98\n       R_PAREN@5..6 \")\"\n     WHITESPACE@6..7 \" \"\n     BLOCK_EXPR@7..9\n-      BLOCK@7..9\n-        L_CURLY@7..8 \"{\"\n-        R_CURLY@8..9 \"}\"\n+      L_CURLY@7..8 \"{\"\n+      R_CURLY@8..9 \"}\"\n   WHITESPACE@9..10 \"\\n\"\n   FN_DEF@10..23\n     VISIBILITY@10..13\n@@ -26,9 +25,8 @@ SOURCE_FILE@0..98\n       R_PAREN@19..20 \")\"\n     WHITESPACE@20..21 \" \"\n     BLOCK_EXPR@21..23\n-      BLOCK@21..23\n-        L_CURLY@21..22 \"{\"\n-        R_CURLY@22..23 \"}\"\n+      L_CURLY@21..22 \"{\"\n+      R_CURLY@22..23 \"}\"\n   WHITESPACE@23..24 \"\\n\"\n   FN_DEF@24..44\n     VISIBILITY@24..34\n@@ -46,9 +44,8 @@ SOURCE_FILE@0..98\n       R_PAREN@40..41 \")\"\n     WHITESPACE@41..42 \" \"\n     BLOCK_EXPR@42..44\n-      BLOCK@42..44\n-        L_CURLY@42..43 \"{\"\n-        R_CURLY@43..44 \"}\"\n+      L_CURLY@42..43 \"{\"\n+      R_CURLY@43..44 \"}\"\n   WHITESPACE@44..45 \"\\n\"\n   FN_DEF@45..65\n     VISIBILITY@45..55\n@@ -66,9 +63,8 @@ SOURCE_FILE@0..98\n       R_PAREN@61..62 \")\"\n     WHITESPACE@62..63 \" \"\n     BLOCK_EXPR@63..65\n-      BLOCK@63..65\n-        L_CURLY@63..64 \"{\"\n-        R_CURLY@64..65 \"}\"\n+      L_CURLY@63..64 \"{\"\n+      R_CURLY@64..65 \"}\"\n   WHITESPACE@65..66 \"\\n\"\n   FN_DEF@66..97\n     VISIBILITY@66..87\n@@ -101,7 +97,6 @@ SOURCE_FILE@0..98\n       R_PAREN@93..94 \")\"\n     WHITESPACE@94..95 \" \"\n     BLOCK_EXPR@95..97\n-      BLOCK@95..97\n-        L_CURLY@95..96 \"{\"\n-        R_CURLY@96..97 \"}\"\n+      L_CURLY@95..96 \"{\"\n+      R_CURLY@96..97 \"}\"\n   WHITESPACE@97..98 \"\\n\""}, {"sha": "05d9c05ad59892bd166d6d210749323ac6eb6dae", "filename": "crates/ra_syntax/test_data/parser/ok/0013_use_path_self_super.rast", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@0..65\n+SOURCE_FILE@0..38\n   USE_ITEM@0..14\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n@@ -31,27 +31,3 @@ SOURCE_FILE@0..65\n             IDENT@33..36 \"bar\"\n     SEMICOLON@36..37 \";\"\n   WHITESPACE@37..38 \"\\n\"\n-  USE_ITEM@38..64\n-    USE_KW@38..41 \"use\"\n-    WHITESPACE@41..42 \" \"\n-    USE_TREE@42..63\n-      PATH@42..63\n-        PATH@42..58\n-          PATH@42..51\n-            PATH@42..48\n-              PATH_SEGMENT@42..48\n-                COLON2@42..44 \"::\"\n-                SELF_KW@44..48 \"self\"\n-            COLON2@48..50 \"::\"\n-            PATH_SEGMENT@50..51\n-              NAME_REF@50..51\n-                IDENT@50..51 \"a\"\n-          COLON2@51..53 \"::\"\n-          PATH_SEGMENT@53..58\n-            SUPER_KW@53..58 \"super\"\n-        COLON2@58..60 \"::\"\n-        PATH_SEGMENT@60..63\n-          NAME_REF@60..63\n-            IDENT@60..63 \"bar\"\n-    SEMICOLON@63..64 \";\"\n-  WHITESPACE@64..65 \"\\n\""}, {"sha": "9d9eb99175b368177bb680ebaa6dcb78992e0e51", "filename": "crates/ra_syntax/test_data/parser/ok/0013_use_path_self_super.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -1,3 +1,2 @@\n use self::foo;\n use super::super::bar;\n-use ::self::a::super::bar;"}, {"sha": "964cbf5dd375a36587037d201efb3d3d3e1d43dc", "filename": "crates/ra_syntax/test_data/parser/ok/0017_attr_trailing_comma.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0017_attr_trailing_comma.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0017_attr_trailing_comma.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0017_attr_trailing_comma.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -23,7 +23,6 @@ SOURCE_FILE@0..23\n       R_PAREN@18..19 \")\"\n     WHITESPACE@19..20 \" \"\n     BLOCK_EXPR@20..22\n-      BLOCK@20..22\n-        L_CURLY@20..21 \"{\"\n-        R_CURLY@21..22 \"}\"\n+      L_CURLY@20..21 \"{\"\n+      R_CURLY@21..22 \"}\"\n   WHITESPACE@22..23 \"\\n\""}, {"sha": "873791f5043ce8e2563f58eb786238d421cb1d6b", "filename": "crates/ra_syntax/test_data/parser/ok/0021_extern_fn.rast", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -12,10 +12,9 @@ SOURCE_FILE@0..71\n       R_PAREN@14..15 \")\"\n     WHITESPACE@15..16 \" \"\n     BLOCK_EXPR@16..19\n-      BLOCK@16..19\n-        L_CURLY@16..17 \"{\"\n-        WHITESPACE@17..18 \"\\n\"\n-        R_CURLY@18..19 \"}\"\n+      L_CURLY@16..17 \"{\"\n+      WHITESPACE@17..18 \"\\n\"\n+      R_CURLY@18..19 \"}\"\n   WHITESPACE@19..21 \"\\n\\n\"\n   FN_DEF@21..44\n     ABI@21..31\n@@ -32,10 +31,9 @@ SOURCE_FILE@0..71\n       R_PAREN@39..40 \")\"\n     WHITESPACE@40..41 \" \"\n     BLOCK_EXPR@41..44\n-      BLOCK@41..44\n-        L_CURLY@41..42 \"{\"\n-        WHITESPACE@42..43 \"\\n\"\n-        R_CURLY@43..44 \"}\"\n+      L_CURLY@41..42 \"{\"\n+      WHITESPACE@42..43 \"\\n\"\n+      R_CURLY@43..44 \"}\"\n   WHITESPACE@44..46 \"\\n\\n\"\n   FN_DEF@46..70\n     ABI@46..57\n@@ -52,8 +50,7 @@ SOURCE_FILE@0..71\n       R_PAREN@65..66 \")\"\n     WHITESPACE@66..67 \" \"\n     BLOCK_EXPR@67..70\n-      BLOCK@67..70\n-        L_CURLY@67..68 \"{\"\n-        WHITESPACE@68..69 \"\\n\"\n-        R_CURLY@69..70 \"}\"\n+      L_CURLY@67..68 \"{\"\n+      WHITESPACE@68..69 \"\\n\"\n+      R_CURLY@69..70 \"}\"\n   WHITESPACE@70..71 \"\\n\""}, {"sha": "5701f566ef304675f112607c125c9bbcf13247de", "filename": "crates/ra_syntax/test_data/parser/ok/0025_extern_fn_in_block.rast", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0025_extern_fn_in_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0025_extern_fn_in_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0025_extern_fn_in_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd", "patch": "@@ -9,25 +9,23 @@ SOURCE_FILE@0..35\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..34\n-      BLOCK@10..34\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        FN_DEF@16..32\n-          ABI@16..22\n-            EXTERN_KW@16..22 \"extern\"\n-          WHITESPACE@22..23 \" \"\n-          FN_KW@23..25 \"fn\"\n-          WHITESPACE@25..26 \" \"\n-          NAME@26..27\n-            IDENT@26..27 \"f\"\n-          PARAM_LIST@27..29\n-            L_PAREN@27..28 \"(\"\n-            R_PAREN@28..29 \")\"\n-          WHITESPACE@29..30 \" \"\n-          BLOCK_EXPR@30..32\n-            BLOCK@30..32\n-              L_CURLY@30..31 \"{\"\n-              R_CURLY@31..32 \"}\"\n-        WHITESPACE@32..33 \"\\n\"\n-        R_CURLY@33..34 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      FN_DEF@16..32\n+        ABI@16..22\n+          EXTERN_KW@16..22 \"extern\"\n+        WHITESPACE@22..23 \" \"\n+        FN_KW@23..25 \"fn\"\n+        WHITESPACE@25..26 \" \"\n+        NAME@26..27\n+          IDENT@26..27 \"f\"\n+        PARAM_LIST@27..29\n+          L_PAREN@27..28 \"(\"\n+          R_PAREN@28..29 \")\"\n+        WHITESPACE@29..30 \" \"\n+        BLOCK_EXPR@30..32\n+          L_CURLY@30..31 \"{\"\n+          R_CURLY@31..32 \"}\"\n+      WHITESPACE@32..33 \"\\n\"\n+      R_CURLY@33..34 \"}\"\n   WHITESPACE@34..35 \"\\n\""}, {"sha": "b029d8692132416cc0b4d1ba7f5b728eb92d0214", "filename": "crates/ra_syntax/test_data/parser/ok/0026_const_fn_in_block.rast", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0026_const_fn_in_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0026_const_fn_in_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0026_const_fn_in_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "299bbd1366f772a5a6a15d545ac88beac83abab1", "filename": "crates/ra_syntax/test_data/parser/ok/0027_unsafe_fn_in_block.rast", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0027_unsafe_fn_in_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0027_unsafe_fn_in_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0027_unsafe_fn_in_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "de3c4b786956736212a75c38ccb94fc4fca65ac6", "filename": "crates/ra_syntax/test_data/parser/ok/0028_operator_binding_power.rast", "status": "modified", "additions": 173, "deletions": 174, "changes": 347, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "dc47d68a6140b1a0faabc791391e23e5539fb226", "filename": "crates/ra_syntax/test_data/parser/ok/0029_range_forms.rast", "status": "modified", "additions": 139, "deletions": 140, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0029_range_forms.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0029_range_forms.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0029_range_forms.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "86c3b46c461bc84a5644b8a45fe7d242b2a8134f", "filename": "crates/ra_syntax/test_data/parser/ok/0030_string_suffixes.rast", "status": "modified", "additions": 51, "deletions": 52, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_string_suffixes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_string_suffixes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_string_suffixes.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "8d76c4e0b83f005c79f2cae94fb9649b6a71aa85", "filename": "crates/ra_syntax/test_data/parser/ok/0032_where_for.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "13b730ded8be5c84e056fd6ea1ab9107f26888eb", "filename": "crates/ra_syntax/test_data/parser/ok/0033_label_break.rast", "status": "modified", "additions": 201, "deletions": 206, "changes": 407, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "21874ae3a299d0c65b7096d541ba7aa7eaad1466", "filename": "crates/ra_syntax/test_data/parser/ok/0034_crate_path_in_call.rast", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "eb59d6e17694b030895f4aa561509e51ce059ef9", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 1937, "deletions": 1975, "changes": 3912, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "a64a82e944266423b95f613533239f27427590d6", "filename": "crates/ra_syntax/test_data/parser/ok/0036_fully_qualified.rast", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "7fd4140900b086eff147d4a20ed8a21f59ceaa8c", "filename": "crates/ra_syntax/test_data/parser/ok/0038_where_pred_type.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0038_where_pred_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0038_where_pred_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0038_where_pred_type.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "17be2c2386a8b644425e699b80e0c55dcf5decdb", "filename": "crates/ra_syntax/test_data/parser/ok/0039_raw_fn_item.rast", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0039_raw_fn_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0039_raw_fn_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0039_raw_fn_item.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "acf32a8523fc326b19e75461b6b36394636b94d4", "filename": "crates/ra_syntax/test_data/parser/ok/0041_raw_keywords.rast", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0041_raw_keywords.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0041_raw_keywords.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0041_raw_keywords.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "468982b74e5d2d049412e35e73b4e9a28532124e", "filename": "crates/ra_syntax/test_data/parser/ok/0042_ufcs_call_list.rast", "status": "modified", "additions": 47, "deletions": 50, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "900eeb445a0c51bd217e3e215713fefdfcedd82b", "filename": "crates/ra_syntax/test_data/parser/ok/0043_complex_assignment.rast", "status": "modified", "additions": 66, "deletions": 67, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "6d941487b1f1a8a950b202817638629f8ab04b12", "filename": "crates/ra_syntax/test_data/parser/ok/0044_let_attrs.rast", "status": "modified", "additions": 61, "deletions": 62, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "e8b095251f2230026d455d1273e893519dbc471d", "filename": "crates/ra_syntax/test_data/parser/ok/0045_block_inner_attrs.rast", "status": "modified", "additions": 96, "deletions": 100, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "38e44e48a1a6d0cc65fccd85f6fd6e9d7e1f96ee", "filename": "crates/ra_syntax/test_data/parser/ok/0047_minus_in_inner_pattern.rast", "status": "modified", "additions": 246, "deletions": 249, "changes": 495, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "28233c5d0f1369575fbec9769ba8692c28f14c44", "filename": "crates/ra_syntax/test_data/parser/ok/0048_compound_assignment.rast", "status": "modified", "additions": 186, "deletions": 187, "changes": 373, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "0569488f86512ad8680c496c151dde3e5b56ed9f", "filename": "crates/ra_syntax/test_data/parser/ok/0049_async_block.rast", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0049_async_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0049_async_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0049_async_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "7847da085e9892811d55807a4e1ca461cff331aa", "filename": "crates/ra_syntax/test_data/parser/ok/0050_async_block_as_argument.rast", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "816740a7cdc22d736d8a7ac753849cebdc679a75", "filename": "crates/ra_syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "65cfa7bc56313db06a3cab266bb335e09e076b6a", "filename": "crates/ra_syntax/test_data/parser/ok/0052_for_range_block.rast", "status": "modified", "additions": 66, "deletions": 69, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "d6aec7ab9a57dfb32def9a4c686162fcf3ff2319", "filename": "crates/ra_syntax/test_data/parser/ok/0054_qual_path_in_type_arg.rast", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "9e0cec35fbf8354095267e6bc7489cad872d7ee6", "filename": "crates/ra_syntax/test_data/parser/ok/0055_dot_dot_dot.rast", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "7fa3033acb338720f7364c14a9a472635d7ec95a", "filename": "crates/ra_syntax/test_data/parser/ok/0056_neq_in_type.rast", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "d93968016822043f2692c9deeb476669b05abd5d", "filename": "crates/ra_syntax/test_data/parser/ok/0057_loop_in_call.rast", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0057_loop_in_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0057_loop_in_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0057_loop_in_call.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "b5c72ee369ea29b459fd62690923689a6936a0ea", "filename": "crates/ra_syntax/test_data/parser/ok/0058_unary_expr_precedence.rast", "status": "modified", "additions": 84, "deletions": 85, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0058_unary_expr_precedence.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0058_unary_expr_precedence.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0058_unary_expr_precedence.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "ddcb139c114ce8ecdad5e83f3b48c2615269b9a2", "filename": "crates/ra_syntax/test_data/parser/ok/0059_loops_in_parens.rast", "status": "modified", "additions": 85, "deletions": 89, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "098152fc3147d4bbde4e576e12d207544c3ebddf", "filename": "crates/ra_syntax/test_data/parser/ok/0060_as_range.rast", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "c6e9829769ad8ba30d1e3bc9ee8c0b15dd3aef8b", "filename": "crates/ra_syntax/test_data/parser/ok/0061_match_full_range.rast", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "bf791ee2be7bf43861dd89a3c68fbc70fced27d2", "filename": "crates/ra_syntax/test_data/parser/ok/0062_macro_2.0.rast", "status": "modified", "additions": 102, "deletions": 103, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0062_macro_2.0.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0062_macro_2.0.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0062_macro_2.0.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "886b211d011d7e1f9f5c61ec2db2518cb626a6ed", "filename": "crates/ra_syntax/test_data/parser/ok/0063_trait_fn_patterns.rast", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "a0423806c4803bef89c0db6149487f1c9f58e241", "filename": "crates/ra_syntax/test_data/parser/ok/0064_impl_fn_params.rast", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "d1fffdd63700289aef5387d44b34f074946f6adb", "filename": "crates/ra_syntax/test_data/parser/ok/0065_comment_newline.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0065_comment_newline.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0065_comment_newline.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0065_comment_newline.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "eb2f8eb3cfe775d71e0c98c3be012a7f75b5bba5", "filename": "crates/ra_syntax/test_data/parser/ok/0065_plus_after_fn_trait_bound.rast", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0065_plus_after_fn_trait_bound.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0065_plus_after_fn_trait_bound.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0065_plus_after_fn_trait_bound.rast?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "8c94f430a29dec80de359187ba16ab4985a07485", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "44222d8bd8af5c4610b2e605d475610df897cebc", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "15b7c691219bbbdf2c6aff483f6332b73d0462df", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "7be5ebcdb5a0d13599cc5a8d628c48186cc46936", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "3bc2e0a4624e85db00e446e443067a11e9597e34", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 122, "deletions": 11, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "c7a96ba932229f889b661b4460585f7705f0bc27", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "0dae6bad4ff2333d0d82aea3a62df8bd70dcaa4e", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "2dc5cb1196fc41e6f374185d731ac043c300ed3a", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 61, "deletions": 56, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "a218da76d6c579eed35503dd29a138d51ce83cc5", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "8d47ee4f64c48b90e645c94c01ec8475db466464", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "cee916c09630d338f3e0c271888ea49ba48c1502", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}, {"sha": "c3252f1f68c89e5940d0dc740b2feb006fec9264", "filename": "docs/dev/guide.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4613497a7714c6cd87166e6525d764d75f8acefd/docs%2Fdev%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/4613497a7714c6cd87166e6525d764d75f8acefd/docs%2Fdev%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fguide.md?ref=4613497a7714c6cd87166e6525d764d75f8acefd"}]}