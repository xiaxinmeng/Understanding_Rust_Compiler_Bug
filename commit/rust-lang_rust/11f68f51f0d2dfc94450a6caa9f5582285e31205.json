{"sha": "11f68f51f0d2dfc94450a6caa9f5582285e31205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjY4ZjUxZjBkMmRmYzk0NDUwYTZjYWE5ZjU1ODIyODVlMzEyMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-22T01:31:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-22T01:31:01Z"}, "message": "auto merge of #9353 : brson/rust/sched, r=alexcrichton,cmr\n\nThis guarantees that if there is work to do it will be found", "tree": {"sha": "3a7419ad6b845f7dbad83c3b28b9d6d36e806e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a7419ad6b845f7dbad83c3b28b9d6d36e806e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f68f51f0d2dfc94450a6caa9f5582285e31205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f68f51f0d2dfc94450a6caa9f5582285e31205", "html_url": "https://github.com/rust-lang/rust/commit/11f68f51f0d2dfc94450a6caa9f5582285e31205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f68f51f0d2dfc94450a6caa9f5582285e31205/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "635a38189694e71dc9dd267f208c0a8bc8b0c7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/635a38189694e71dc9dd267f208c0a8bc8b0c7f1", "html_url": "https://github.com/rust-lang/rust/commit/635a38189694e71dc9dd267f208c0a8bc8b0c7f1"}, {"sha": "c767643f2b7f3b47b98acf424ceaf6826c0475bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c767643f2b7f3b47b98acf424ceaf6826c0475bc", "html_url": "https://github.com/rust-lang/rust/commit/c767643f2b7f3b47b98acf424ceaf6826c0475bc"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "22888d79984c2da3293af985f6751c48a8240ae3", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/11f68f51f0d2dfc94450a6caa9f5582285e31205/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f68f51f0d2dfc94450a6caa9f5582285e31205/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=11f68f51f0d2dfc94450a6caa9f5582285e31205", "patch": "@@ -379,21 +379,20 @@ impl Scheduler {\n                 return Some(task)\n             }\n             None => {\n-                // Our naive stealing, try kinda hard.\n                 rtdebug!(\"scheduler trying to steal\");\n-                let len = self.work_queues.len();\n-                return self.try_steals(len/2);\n+                return self.try_steals();\n             }\n         }\n     }\n \n-    // With no backoff try stealing n times from the queues the\n-    // scheduler knows about. This naive implementation can steal from\n-    // our own queue or from other special schedulers.\n-    fn try_steals(&mut self, n: uint) -> Option<~Task> {\n-        for _ in range(0, n) {\n-            let index = self.rng.gen_uint_range(0, self.work_queues.len());\n-            let work_queues = &mut self.work_queues;\n+    // Try stealing from all queues the scheduler knows about. This\n+    // naive implementation can steal from our own queue or from other\n+    // special schedulers.\n+    fn try_steals(&mut self) -> Option<~Task> {\n+        let work_queues = &mut self.work_queues;\n+        let len = work_queues.len();\n+        let start_index = self.rng.gen_uint_range(0, len);\n+        for index in range(0, len).map(|i| (i + start_index) % len) {\n             match work_queues[index].steal() {\n                 Some(task) => {\n                     rtdebug!(\"found task by stealing\");\n@@ -1213,4 +1212,22 @@ mod test {\n         }\n     }\n \n+    #[test]\n+    fn dont_starve_1() {\n+        use rt::comm::oneshot;\n+\n+        do stress_factor().times {\n+            do run_in_mt_newsched_task {\n+                let (port, chan) = oneshot();\n+\n+                // This task should not be able to starve the sender;\n+                // The sender should get stolen to another thread.\n+                do spawntask {\n+                    while !port.peek() { }\n+                }\n+\n+                chan.send(());\n+            }\n+        }\n+    }\n }"}]}