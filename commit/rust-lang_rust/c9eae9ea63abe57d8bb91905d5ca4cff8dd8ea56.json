{"sha": "c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZWFlOWVhNjNhYmU1N2Q4YmI5MTkwNWQ1Y2E0Y2ZmOGRkOGVhNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T07:51:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T07:51:58Z"}, "message": "Rollup merge of #66017 - LukasKalbertodt:array-into-iter-lint, r=matthewjasper\n\nAdd future incompatibility lint for `array.into_iter()`\n\nThis is for #65819. This lint warns when calling `into_iter` on an array directly. That's because today the method call resolves to `<&[T] as IntoIterator>::into_iter` but that would change when adding `IntoIterator` impls for arrays. This problem is discussed in detail in #65819.\n\nWe still haven't decided how to proceed exactly, but it seems like adding a lint is a good idea regardless?\n\nAlso: this is the first time I implement a lint, so there are probably a lot of things I can improve. I used a different strategy than @scottmcm describes [here](https://github.com/rust-lang/rust/pull/65819#issuecomment-548667847) since I already started implementing this before they commented.\n\n### TODO\n\n- [x] Decide if we want this lint -> apparently [we want](https://github.com/rust-lang/rust/pull/65819#issuecomment-548964818)\n- [x] Open a lint-tracking-issue and add the correct issue number in the code -> https://github.com/rust-lang/rust/issues/66145", "tree": {"sha": "47453a165c08c24ca9b3224506ff74a2f8b053e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47453a165c08c24ca9b3224506ff74a2f8b053e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw80eCRBK7hj4Ov3rIwAAdHIIAFcM6VAnAHCwARdXie3WDN2n\nphwnPm2SEw9NOcxwQZ4Gvhdwe+8S6az9qdYSrMB/PSwBLKhJoKin4BZVg3eZLr9V\nYNCbeEqMIgfY2rsI0mClr0FnNqd9kKRS4PqVb5eb5JwY7McEcnwLFj4P7RBqnMZm\neIJV55Wnw9GaJrtnjmK9guX0AR4Z7naxkkDrsIdRdy8ZMZo3YtPhRO/ehrPFBgmA\nHlWOepV5ARH3whCQb+51OnSTZR3YF8iGZMbYk6D2AYyz5+JPsicNtsht1xnJW+Bp\niu2SueEvsOVS4LZV55aWJKC8GGautcn/SAQRcl3J80r0LAxTzPG6mVeatCvNf6c=\n=xK5k\n-----END PGP SIGNATURE-----\n", "payload": "tree 47453a165c08c24ca9b3224506ff74a2f8b053e5\nparent e19cb40fda70ea3f75bc1927c114ea53d231b288\nparent 761ba89ffd73498c3014d3b43b5bc0b4f592a284\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573113118 +0100\ncommitter GitHub <noreply@github.com> 1573113118 +0100\n\nRollup merge of #66017 - LukasKalbertodt:array-into-iter-lint, r=matthewjasper\n\nAdd future incompatibility lint for `array.into_iter()`\n\nThis is for #65819. This lint warns when calling `into_iter` on an array directly. That's because today the method call resolves to `<&[T] as IntoIterator>::into_iter` but that would change when adding `IntoIterator` impls for arrays. This problem is discussed in detail in #65819.\n\nWe still haven't decided how to proceed exactly, but it seems like adding a lint is a good idea regardless?\n\nAlso: this is the first time I implement a lint, so there are probably a lot of things I can improve. I used a different strategy than @scottmcm describes [here](https://github.com/rust-lang/rust/pull/65819#issuecomment-548667847) since I already started implementing this before they commented.\n\n### TODO\n\n- [x] Decide if we want this lint -> apparently [we want](https://github.com/rust-lang/rust/pull/65819#issuecomment-548964818)\n- [x] Open a lint-tracking-issue and add the correct issue number in the code -> https://github.com/rust-lang/rust/issues/66145\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "html_url": "https://github.com/rust-lang/rust/commit/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19cb40fda70ea3f75bc1927c114ea53d231b288", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19cb40fda70ea3f75bc1927c114ea53d231b288", "html_url": "https://github.com/rust-lang/rust/commit/e19cb40fda70ea3f75bc1927c114ea53d231b288"}, {"sha": "761ba89ffd73498c3014d3b43b5bc0b4f592a284", "url": "https://api.github.com/repos/rust-lang/rust/commits/761ba89ffd73498c3014d3b43b5bc0b4f592a284", "html_url": "https://github.com/rust-lang/rust/commit/761ba89ffd73498c3014d3b43b5bc0b4f592a284"}], "stats": {"total": 203, "additions": 201, "deletions": 2}, "files": [{"sha": "bbdb169cac0fc89b0052d44266172851f9abd462", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "patch": "@@ -205,6 +205,7 @@ pub trait FromIterator<A>: Sized {\n ///         .collect()\n /// }\n /// ```\n+#[rustc_diagnostic_item = \"IntoIterator\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IntoIterator {\n     /// The type of the elements being iterated over."}, {"sha": "e73414174fb3524002bedbaee0d342660c26ff46", "filename": "src/librustc_lint/array_into_iter.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "patch": "@@ -0,0 +1,91 @@\n+use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::{\n+    lint::FutureIncompatibleInfo,\n+    hir,\n+    ty::{\n+        self,\n+        adjustment::{Adjust, Adjustment},\n+    },\n+};\n+use syntax::{\n+    errors::Applicability,\n+    symbol::sym,\n+};\n+\n+\n+declare_lint! {\n+    pub ARRAY_INTO_ITER,\n+    Warn,\n+    \"detects calling `into_iter` on arrays\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #66145 <https://github.com/rust-lang/rust/issues/66145>\",\n+        edition: None,\n+    };\n+}\n+\n+declare_lint_pass!(\n+    /// Checks for instances of calling `into_iter` on arrays.\n+    ArrayIntoIter => [ARRAY_INTO_ITER]\n+);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIntoIter {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        // We only care about method call expressions.\n+        if let hir::ExprKind::MethodCall(call, span, args) = &expr.kind {\n+            if call.ident.name != sym::into_iter {\n+                return;\n+            }\n+\n+            // Check if the method call actually calls the libcore\n+            // `IntoIterator::into_iter`.\n+            let def_id = cx.tables.type_dependent_def_id(expr.hir_id).unwrap();\n+            match cx.tcx.trait_of_item(def_id) {\n+                Some(trait_id) if cx.tcx.is_diagnostic_item(sym::IntoIterator, trait_id) => {},\n+                _ => return,\n+            };\n+\n+            // As this is a method call expression, we have at least one\n+            // argument.\n+            let receiver_arg = &args[0];\n+\n+            // Test if the original `self` type is an array type.\n+            match cx.tables.expr_ty(receiver_arg).kind {\n+                ty::Array(..) => {}\n+                _ => return,\n+            }\n+\n+            // Make sure that the first adjustment is an autoref coercion.\n+            match cx.tables.expr_adjustments(receiver_arg).get(0) {\n+                Some(Adjustment { kind: Adjust::Borrow(_), .. }) => {}\n+                _ => return,\n+            }\n+\n+            // Emit lint diagnostic.\n+            let target = match cx.tables.expr_ty_adjusted(receiver_arg).kind {\n+                ty::Ref(_, ty::TyS { kind: ty::Array(..), ..}, _) => \"[T; N]\",\n+                ty::Ref(_, ty::TyS { kind: ty::Slice(..), ..}, _) => \"[T]\",\n+\n+                // We know the original first argument type is an array type,\n+                // we know that the first adjustment was an autoref coercion\n+                // and we know that `IntoIterator` is the trait involved. The\n+                // array cannot be coerced to something other than a reference\n+                // to an array or to a slice.\n+                _ => bug!(\"array type coerced to something other than array or slice\"),\n+            };\n+            let msg = format!(\n+                \"this method call currently resolves to `<&{} as IntoIterator>::into_iter` (due \\\n+                    to autoref coercions), but that might change in the future when \\\n+                    `IntoIterator` impls for arrays are added.\",\n+                target,\n+            );\n+            cx.struct_span_lint(ARRAY_INTO_ITER, *span, &msg)\n+                .span_suggestion(\n+                    call.ident.span,\n+                    \"use `.iter()` instead of `.into_iter()` to avoid ambiguity\",\n+                    \"iter\".into(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+}"}, {"sha": "d1dc1d0fb686d2df53b6b571301554a3221b7e4d", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "patch": "@@ -22,6 +22,7 @@\n #[macro_use]\n extern crate rustc;\n \n+mod array_into_iter;\n mod error_codes;\n mod nonstandard_style;\n mod redundant_semicolon;\n@@ -57,6 +58,7 @@ use types::*;\n use unused::*;\n use non_ascii_idents::*;\n use rustc::lint::internal::*;\n+use array_into_iter::ArrayIntoIter;\n \n /// Useful for other parts of the compiler.\n pub use builtin::SoftLints;\n@@ -131,6 +133,8 @@ macro_rules! late_lint_passes {\n             // FIXME: Turn the computation of types which implement Debug into a query\n             // and change this to a module lint pass\n             MissingDebugImplementations: MissingDebugImplementations::default(),\n+\n+            ArrayIntoIter: ArrayIntoIter,\n         ]);\n     )\n }"}, {"sha": "e0e211444cff5a2bfe02f340713dbe5a2afeae08", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "patch": "@@ -269,7 +269,7 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n fn test_error_on_exceed() {\n     let types = [TestType::UnitTest, TestType::IntegrationTest, TestType::DocTest];\n \n-    for test_type in types.into_iter() {\n+    for test_type in types.iter() {\n         let result = time_test_failure_template(*test_type);\n \n         assert_eq!(result, TestResult::TrTimedFail);\n@@ -320,7 +320,7 @@ fn test_time_options_threshold() {\n         (TestType::DocTest, doc.critical.as_millis(), true, true),\n     ];\n \n-    for (test_type, time, expected_warn, expected_critical) in test_vector.into_iter() {\n+    for (test_type, time, expected_warn, expected_critical) in test_vector.iter() {\n         let test_desc = typed_test_desc(*test_type);\n         let exec_time = test_exec_time(*time as u64);\n "}, {"sha": "f88a52d31591872be8f921a53ca6f6f06d0c628e", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+// run-rustfix\n+\n+fn main() {\n+    let small = [1, 2];\n+    let big = [0u8; 33];\n+\n+    // Expressions that should trigger the lint\n+    small.iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    [1, 2].iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    big.iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    [0u8; 33].iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+\n+\n+    // Expressions that should not\n+    (&[1, 2]).into_iter();\n+    (&small).into_iter();\n+    (&[0u8; 33]).into_iter();\n+    (&big).into_iter();\n+\n+    for _ in &[1, 2] {}\n+    (&small as &[_]).into_iter();\n+    small[..].into_iter();\n+    std::iter::IntoIterator::into_iter(&[1, 2]);\n+}"}, {"sha": "e1a4b535f383258b2d892b47e3b1ceafd8d4b6d6", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+// run-rustfix\n+\n+fn main() {\n+    let small = [1, 2];\n+    let big = [0u8; 33];\n+\n+    // Expressions that should trigger the lint\n+    small.into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    [1, 2].into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    big.into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    [0u8; 33].into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+\n+\n+    // Expressions that should not\n+    (&[1, 2]).into_iter();\n+    (&small).into_iter();\n+    (&[0u8; 33]).into_iter();\n+    (&big).into_iter();\n+\n+    for _ in &[1, 2] {}\n+    (&small as &[_]).into_iter();\n+    small[..].into_iter();\n+    std::iter::IntoIterator::into_iter(&[1, 2]);\n+}"}, {"sha": "b5964bd44bff7b88e07298c05155d261c2fb7b7d", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=c9eae9ea63abe57d8bb91905d5ca4cff8dd8ea56", "patch": "@@ -0,0 +1,37 @@\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:9:11\n+   |\n+LL |     small.into_iter();\n+   |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = note: `#[warn(array_into_iter)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:12:12\n+   |\n+LL |     [1, 2].into_iter();\n+   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:15:9\n+   |\n+LL |     big.into_iter();\n+   |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:18:15\n+   |\n+LL |     [0u8; 33].into_iter();\n+   |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+"}]}