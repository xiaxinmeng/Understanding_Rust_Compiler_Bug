{"sha": "32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYTQzZGE2OGFlMjZiYzNlMjJkYmFjYTEyZWJiMDJkZGM3NDJjYzc=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-24T17:15:11Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-04-18T00:43:16Z"}, "message": "Add functions to safely transmute float to int", "tree": {"sha": "2b7579bac845bfc717c74ca949853d67e0275f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b7579bac845bfc717c74ca949853d67e0275f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "html_url": "https://github.com/rust-lang/rust/commit/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5516bcc4588ea6192298b4e3682eb1d09581912a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5516bcc4588ea6192298b4e3682eb1d09581912a", "html_url": "https://github.com/rust-lang/rust/commit/5516bcc4588ea6192298b4e3682eb1d09581912a"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "8e7b7ee0923a87d12f414f3a4b6f4bec2d7ce247", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "patch": "@@ -1226,6 +1226,45 @@ impl f32 {\n     pub fn atanh(self) -> f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n+\n+    /// Raw transmutation to `u32`.\n+    ///\n+    /// Converts the `f32` into its raw memory representation,\n+    /// similar to the `transmute` function.\n+    ///\n+    /// Note that this function is distinct from casting.\n+    ///\n+    /// ```\n+    /// #![feature(float_bits_conv)]\n+    /// assert!((1f32).to_bits() != 1f32 as u32); // to_bits() is not casting!\n+    /// assert_eq!((12.5f32).to_bits(), 0x41480000);\n+    ///\n+    /// ```\n+    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"0\")]\n+    #[inline]\n+    pub fn to_bits(self) -> u32 {\n+        unsafe { ::mem::transmute(self) }\n+    }\n+\n+    /// Raw transmutation from `u32`.\n+    ///\n+    /// Converts the given `u32` containing the float's raw memory\n+    /// representation into the `f32` type, similar to the\n+    /// `transmute` function.\n+    ///\n+    /// Note that this function is distinct from casting.\n+    ///\n+    /// ```\n+    /// #![feature(float_bits_conv)]\n+    /// use std::f32;\n+    /// let difference = (f32::from_bits(0x41480000) - 12.5).abs();\n+    /// assert!(difference <= 1e-5);\n+    /// ```\n+    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"0\")]\n+    #[inline]\n+    pub fn from_bits(v: u32) -> Self {\n+        unsafe { ::mem::transmute(v) }\n+    }\n }\n \n #[cfg(test)]\n@@ -1870,4 +1909,16 @@ mod tests {\n         assert_approx_eq!(ln_2, 2f32.ln());\n         assert_approx_eq!(ln_10, 10f32.ln());\n     }\n+\n+    #[test]\n+    fn test_float_bits_conv() {\n+        assert_eq!((1f32).to_bits(), 0x3f800000);\n+        assert_eq!((12.5f32).to_bits(), 0x41480000);\n+        assert_eq!((1337f32).to_bits(), 0x44a72000);\n+        assert_eq!((-14.25f32).to_bits(), 0xc1640000);\n+        assert_approx_eq!(f32::from_bits(0x3f800000), 1.0);\n+        assert_approx_eq!(f32::from_bits(0x41480000), 12.5);\n+        assert_approx_eq!(f32::from_bits(0x44a72000), 1337.0);\n+        assert_approx_eq!(f32::from_bits(0xc1640000), -14.25);\n+    }\n }"}, {"sha": "f9a5a2705ae41e24c4c5e272762c90b2f2099e27", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "patch": "@@ -1118,6 +1118,45 @@ impl f64 {\n             }\n         }\n     }\n+\n+    /// Raw transmutation to `u64`.\n+    ///\n+    /// Converts the `f64` into its raw memory representation,\n+    /// similar to the `transmute` function.\n+    ///\n+    /// Note that this function is distinct from casting.\n+    ///\n+    /// ```\n+    /// #![feature(float_bits_conv)]\n+    /// assert!((1f64).to_bits() != 1f64 as u64); // to_bits() is not casting!\n+    /// assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n+    ///\n+    /// ```\n+    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"0\")]\n+    #[inline]\n+    pub fn to_bits(self) -> u64 {\n+        unsafe { ::mem::transmute(self) }\n+    }\n+\n+    /// Raw transmutation from `u64`.\n+    ///\n+    /// Converts the given `u64` containing the float's raw memory\n+    /// representation into the `f64` type, similar to the\n+    /// `transmute` function.\n+    ///\n+    /// Note that this function is distinct from casting.\n+    ///\n+    /// ```\n+    /// #![feature(float_bits_conv)]\n+    /// use std::f64;\n+    /// let difference = (f64::from_bits(0x4029000000000000) - 12.5).abs();\n+    /// assert!(difference <= 1e-5);\n+    /// ```\n+    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"0\")]\n+    #[inline]\n+    pub fn from_bits(v: u64) -> Self {\n+        unsafe { ::mem::transmute(v) }\n+    }\n }\n \n #[cfg(test)]\n@@ -1755,4 +1794,16 @@ mod tests {\n         assert_approx_eq!(ln_2, 2f64.ln());\n         assert_approx_eq!(ln_10, 10f64.ln());\n     }\n+\n+    #[test]\n+    fn test_float_bits_conv() {\n+        assert_eq!((1f64).to_bits(), 0x3ff0000000000000);\n+        assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n+        assert_eq!((1337f64).to_bits(), 0x4094e40000000000);\n+        assert_eq!((-14.25f64).to_bits(), 0xc02c800000000000);\n+        assert_approx_eq!(f64::from_bits(0x3ff0000000000000), 1.0);\n+        assert_approx_eq!(f64::from_bits(0x4029000000000000), 12.5);\n+        assert_approx_eq!(f64::from_bits(0x4094e40000000000), 1337.0);\n+        assert_approx_eq!(f64::from_bits(0xc02c800000000000), -14.25);\n+    }\n }"}, {"sha": "8de6e1a24f1f2d7f705bafb092255fea2389a7fe", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "patch": "@@ -321,6 +321,7 @@\n #![feature(zero_one)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(stage0, feature(pub_restricted))]\n+#![cfg_attr(test, feature(float_bits_conv))]\n \n // Explicitly import the prelude. The compiler uses this same unstable attribute\n // to import the prelude implicitly when building crates that depend on std."}]}