{"sha": "8e2bdaacac450695d62a34365803845378bc9121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMmJkYWFjYWM0NTA2OTVkNjJhMzQzNjU4MDM4NDUzNzhiYzkxMjE=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-28T22:29:26Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:16Z"}, "message": "Add `wf_clause_for_fn_def`", "tree": {"sha": "a9be4d636c34045e16fcf24a86692f9862657f62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9be4d636c34045e16fcf24a86692f9862657f62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e2bdaacac450695d62a34365803845378bc9121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2bdaacac450695d62a34365803845378bc9121", "html_url": "https://github.com/rust-lang/rust/commit/8e2bdaacac450695d62a34365803845378bc9121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e2bdaacac450695d62a34365803845378bc9121/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e0ea8148bf8b6a244d9df0916cc78ac257b277", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e0ea8148bf8b6a244d9df0916cc78ac257b277", "html_url": "https://github.com/rust-lang/rust/commit/26e0ea8148bf8b6a244d9df0916cc78ac257b277"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "98a2f4bf0a15b119da1f1c20aea08170febd31a3", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e2bdaacac450695d62a34365803845378bc9121/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e2bdaacac450695d62a34365803845378bc9121/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=8e2bdaacac450695d62a34365803845378bc9121", "patch": "@@ -343,6 +343,24 @@ fn wf_clause_for_ref<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n+fn wf_clause_for_fn_def<'tcx>(\n+    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    def_id: DefId\n+) -> Clauses<'tcx> {\n+    let fn_def = generic_types::fn_def(tcx, def_id);\n+\n+    let wf_clause = ProgramClause {\n+        goal: DomainGoal::WellFormed(WellFormed::Ty(fn_def)),\n+        hypotheses: ty::List::empty(),\n+        category: ProgramClauseCategory::WellFormed,\n+    };\n+    let wf_clause = Clause::ForAll(ty::Binder::bind(wf_clause));\n+\n+    // `forall <T1, ..., Tn+1> { WellFormed(fn some_fn(T1, ..., Tn) -> Tn+1). }`\n+    // where `def_id` maps to the `some_fn` function definition\n+    tcx.mk_clauses(iter::once(wf_clause))\n+}\n+\n impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n     pub(super) fn program_clauses_impl(\n         &self,\n@@ -506,6 +524,8 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     // WF if `sub_ty` outlives `region`.\n                     ty::Ref(_, _, mutbl) => wf_clause_for_ref(self.infcx.tcx, mutbl),\n \n+                    ty::FnDef(def_id, ..) => wf_clause_for_fn_def(self.infcx.tcx, def_id),\n+\n                     ty::Dynamic(..) => {\n                         // FIXME: no rules yet for trait objects\n                         ty::List::empty()\n@@ -515,8 +535,8 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                         self.infcx.tcx.program_clauses_for(def.did)\n                     }\n \n+                    // FIXME: these are probably wrong\n                     ty::Foreign(def_id) |\n-                    ty::FnDef(def_id, ..) |\n                     ty::Closure(def_id, ..) |\n                     ty::Generator(def_id, ..) |\n                     ty::Opaque(def_id, ..) => {"}]}