{"sha": "2d4c96d1b1bfcad05607172c6626b73c9c266084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGM5NmQxYjFiZmNhZDA1NjA3MTcyYzY2MjZiNzNjOWMyNjYwODQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-24T15:44:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-29T17:19:42Z"}, "message": "Move IntrinsicCallMethods::call_overflow_intrinsics to BuilderMethods::checked_binop", "tree": {"sha": "40fce73c5777ce7f093345ae8b50ede23ce498bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fce73c5777ce7f093345ae8b50ede23ce498bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4c96d1b1bfcad05607172c6626b73c9c266084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4c96d1b1bfcad05607172c6626b73c9c266084", "html_url": "https://github.com/rust-lang/rust/commit/2d4c96d1b1bfcad05607172c6626b73c9c266084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4c96d1b1bfcad05607172c6626b73c9c266084/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9045573f75390bb283fd3cf84b8446074a8250", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9045573f75390bb283fd3cf84b8446074a8250", "html_url": "https://github.com/rust-lang/rust/commit/9a9045573f75390bb283fd3cf84b8446074a8250"}], "stats": {"total": 185, "additions": 93, "deletions": 92}, "files": [{"sha": "06e52fbe76ce4340efca7d83d10d5734aab7872a", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=2d4c96d1b1bfcad05607172c6626b73c9c266084", "patch": "@@ -456,6 +456,80 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n+    fn checked_binop(\n+        &mut self,\n+        oop: OverflowOp,\n+        ty: Ty,\n+        lhs: Self::Value,\n+        rhs: Self::Value,\n+    ) -> (Self::Value, Self::Value) {\n+        use syntax::ast::IntTy::*;\n+        use syntax::ast::UintTy::*;\n+        use rustc::ty::{Int, Uint};\n+\n+        let new_sty = match ty.sty {\n+            Int(Isize) => Int(self.cx().tcx.sess.target.isize_ty),\n+            Uint(Usize) => Uint(self.cx().tcx.sess.target.usize_ty),\n+            ref t @ Uint(_) | ref t @ Int(_) => t.clone(),\n+            _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n+        };\n+\n+        let name = match oop {\n+            OverflowOp::Add => match new_sty {\n+                Int(I8) => \"llvm.sadd.with.overflow.i8\",\n+                Int(I16) => \"llvm.sadd.with.overflow.i16\",\n+                Int(I32) => \"llvm.sadd.with.overflow.i32\",\n+                Int(I64) => \"llvm.sadd.with.overflow.i64\",\n+                Int(I128) => \"llvm.sadd.with.overflow.i128\",\n+\n+                Uint(U8) => \"llvm.uadd.with.overflow.i8\",\n+                Uint(U16) => \"llvm.uadd.with.overflow.i16\",\n+                Uint(U32) => \"llvm.uadd.with.overflow.i32\",\n+                Uint(U64) => \"llvm.uadd.with.overflow.i64\",\n+                Uint(U128) => \"llvm.uadd.with.overflow.i128\",\n+\n+                _ => unreachable!(),\n+            },\n+            OverflowOp::Sub => match new_sty {\n+                Int(I8) => \"llvm.ssub.with.overflow.i8\",\n+                Int(I16) => \"llvm.ssub.with.overflow.i16\",\n+                Int(I32) => \"llvm.ssub.with.overflow.i32\",\n+                Int(I64) => \"llvm.ssub.with.overflow.i64\",\n+                Int(I128) => \"llvm.ssub.with.overflow.i128\",\n+\n+                Uint(U8) => \"llvm.usub.with.overflow.i8\",\n+                Uint(U16) => \"llvm.usub.with.overflow.i16\",\n+                Uint(U32) => \"llvm.usub.with.overflow.i32\",\n+                Uint(U64) => \"llvm.usub.with.overflow.i64\",\n+                Uint(U128) => \"llvm.usub.with.overflow.i128\",\n+\n+                _ => unreachable!(),\n+            },\n+            OverflowOp::Mul => match new_sty {\n+                Int(I8) => \"llvm.smul.with.overflow.i8\",\n+                Int(I16) => \"llvm.smul.with.overflow.i16\",\n+                Int(I32) => \"llvm.smul.with.overflow.i32\",\n+                Int(I64) => \"llvm.smul.with.overflow.i64\",\n+                Int(I128) => \"llvm.smul.with.overflow.i128\",\n+\n+                Uint(U8) => \"llvm.umul.with.overflow.i8\",\n+                Uint(U16) => \"llvm.umul.with.overflow.i16\",\n+                Uint(U32) => \"llvm.umul.with.overflow.i32\",\n+                Uint(U64) => \"llvm.umul.with.overflow.i64\",\n+                Uint(U128) => \"llvm.umul.with.overflow.i128\",\n+\n+                _ => unreachable!(),\n+            },\n+        };\n+\n+        let intrinsic = self.cx().get_intrinsic(&name);\n+        let res = self.call(intrinsic, &[lhs, rhs], None);\n+        (\n+            self.extract_value(res, 0),\n+            self.extract_value(res, 1),\n+        )\n+    }\n+\n     fn alloca(&mut self, ty: &'ll Type, name: &str, align: Align) -> &'ll Value {\n         let mut bx = Builder::with_cx(self.cx);\n         bx.position_at_start(unsafe {"}, {"sha": "54a2684b63ff782f36d417689a8bdf6d03a885c8", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=2d4c96d1b1bfcad05607172c6626b73c9c266084", "patch": "@@ -778,80 +778,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let expect = self.cx().get_intrinsic(&\"llvm.expect.i1\");\n         self.call(expect, &[cond, self.cx().const_bool(expected)], None)\n     }\n-\n-    fn call_overflow_intrinsic(\n-        &mut self,\n-        oop: OverflowOp,\n-        ty: Ty,\n-        lhs: Self::Value,\n-        rhs: Self::Value,\n-    ) -> (Self::Value, Self::Value) {\n-        use syntax::ast::IntTy::*;\n-        use syntax::ast::UintTy::*;\n-        use rustc::ty::{Int, Uint};\n-\n-        let new_sty = match ty.sty {\n-            Int(Isize) => Int(self.tcx().sess.target.isize_ty),\n-            Uint(Usize) => Uint(self.tcx().sess.target.usize_ty),\n-            ref t @ Uint(_) | ref t @ Int(_) => t.clone(),\n-            _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n-        };\n-\n-        let name = match oop {\n-            OverflowOp::Add => match new_sty {\n-                Int(I8) => \"llvm.sadd.with.overflow.i8\",\n-                Int(I16) => \"llvm.sadd.with.overflow.i16\",\n-                Int(I32) => \"llvm.sadd.with.overflow.i32\",\n-                Int(I64) => \"llvm.sadd.with.overflow.i64\",\n-                Int(I128) => \"llvm.sadd.with.overflow.i128\",\n-\n-                Uint(U8) => \"llvm.uadd.with.overflow.i8\",\n-                Uint(U16) => \"llvm.uadd.with.overflow.i16\",\n-                Uint(U32) => \"llvm.uadd.with.overflow.i32\",\n-                Uint(U64) => \"llvm.uadd.with.overflow.i64\",\n-                Uint(U128) => \"llvm.uadd.with.overflow.i128\",\n-\n-                _ => unreachable!(),\n-            },\n-            OverflowOp::Sub => match new_sty {\n-                Int(I8) => \"llvm.ssub.with.overflow.i8\",\n-                Int(I16) => \"llvm.ssub.with.overflow.i16\",\n-                Int(I32) => \"llvm.ssub.with.overflow.i32\",\n-                Int(I64) => \"llvm.ssub.with.overflow.i64\",\n-                Int(I128) => \"llvm.ssub.with.overflow.i128\",\n-\n-                Uint(U8) => \"llvm.usub.with.overflow.i8\",\n-                Uint(U16) => \"llvm.usub.with.overflow.i16\",\n-                Uint(U32) => \"llvm.usub.with.overflow.i32\",\n-                Uint(U64) => \"llvm.usub.with.overflow.i64\",\n-                Uint(U128) => \"llvm.usub.with.overflow.i128\",\n-\n-                _ => unreachable!(),\n-            },\n-            OverflowOp::Mul => match new_sty {\n-                Int(I8) => \"llvm.smul.with.overflow.i8\",\n-                Int(I16) => \"llvm.smul.with.overflow.i16\",\n-                Int(I32) => \"llvm.smul.with.overflow.i32\",\n-                Int(I64) => \"llvm.smul.with.overflow.i64\",\n-                Int(I128) => \"llvm.smul.with.overflow.i128\",\n-\n-                Uint(U8) => \"llvm.umul.with.overflow.i8\",\n-                Uint(U16) => \"llvm.umul.with.overflow.i16\",\n-                Uint(U32) => \"llvm.umul.with.overflow.i32\",\n-                Uint(U64) => \"llvm.umul.with.overflow.i64\",\n-                Uint(U128) => \"llvm.umul.with.overflow.i128\",\n-\n-                _ => unreachable!(),\n-            },\n-        };\n-\n-        let intrinsic = self.cx().get_intrinsic(&name);\n-        let res = self.call(intrinsic, &[lhs, rhs], None);\n-        (\n-            self.extract_value(res, 0),\n-            self.extract_value(res, 1),\n-        )\n-    }\n }\n \n fn copy_intrinsic("}, {"sha": "dc7b1ec37b23a51db4fcec957ecccc14f97fb69c", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=2d4c96d1b1bfcad05607172c6626b73c9c266084", "patch": "@@ -693,7 +693,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::BinOp::Mul => OverflowOp::Mul,\n                     _ => unreachable!()\n                 };\n-                bx.call_overflow_intrinsic(oop, input_ty, lhs, rhs)\n+                bx.checked_binop(oop, input_ty, lhs, rhs)\n             }\n             mir::BinOp::Shl | mir::BinOp::Shr => {\n                 let lhs_llty = bx.cx().val_ty(lhs);"}, {"sha": "063e7ba8ba2df092561e8d95b2df55b1ea582ed7", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=2d4c96d1b1bfcad05607172c6626b73c9c266084", "patch": "@@ -17,6 +17,7 @@ use super::HasCodegen;\n use common::{AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope};\n use mir::operand::OperandRef;\n use mir::place::PlaceRef;\n+use rustc::ty::Ty;\n use rustc::ty::layout::{Align, Size};\n use std::ffi::CStr;\n use MemFlags;\n@@ -25,6 +26,13 @@ use std::borrow::Cow;\n use std::ops::Range;\n use syntax::ast::AsmDialect;\n \n+#[derive(Copy, Clone)]\n+pub enum OverflowOp {\n+    Add,\n+    Sub,\n+    Mul,\n+}\n+\n pub trait BuilderMethods<'a, 'tcx: 'a>:\n     HasCodegen<'tcx>\n     + DebugInfoBuilderMethods<'tcx>\n@@ -97,6 +105,14 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn fneg(&mut self, v: Self::Value) -> Self::Value;\n     fn not(&mut self, v: Self::Value) -> Self::Value;\n \n+    fn checked_binop(\n+        &mut self,\n+        oop: OverflowOp,\n+        ty: Ty,\n+        lhs: Self::Value,\n+        rhs: Self::Value,\n+    ) -> (Self::Value, Self::Value);\n+\n     fn alloca(&mut self, ty: Self::Type, name: &str, align: Align) -> Self::Value;\n     fn dynamic_alloca(&mut self, ty: Self::Type, name: &str, align: Align) -> Self::Value;\n     fn array_alloca("}, {"sha": "abc118e7708526c10c499f71d9dd6bea9a789ee1", "filename": "src/librustc_codegen_ssa/traits/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs?ref=2d4c96d1b1bfcad05607172c6626b73c9c266084", "patch": "@@ -14,13 +14,6 @@ use rustc::ty::Ty;\n use rustc_target::abi::call::FnType;\n use syntax_pos::Span;\n \n-#[derive(Copy, Clone)]\n-pub enum OverflowOp {\n-    Add,\n-    Sub,\n-    Mul,\n-}\n-\n pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n     /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n@@ -37,12 +30,4 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     fn abort(&mut self);\n     fn assume(&mut self, val: Self::Value);\n     fn expect(&mut self, cond: Self::Value, expected: bool) -> Self::Value;\n-\n-    fn call_overflow_intrinsic(\n-        &mut self,\n-        oop: OverflowOp,\n-        ty: Ty,\n-        lhs: Self::Value,\n-        rhs: Self::Value,\n-    ) -> (Self::Value, Self::Value);\n }"}, {"sha": "83ce28b6f8aa382429139ff86e9ea7ed5a4bd3d9", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4c96d1b1bfcad05607172c6626b73c9c266084/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=2d4c96d1b1bfcad05607172c6626b73c9c266084", "patch": "@@ -40,11 +40,11 @@ mod write;\n pub use self::abi::{AbiBuilderMethods, AbiMethods};\n pub use self::asm::{AsmBuilderMethods, AsmMethods};\n pub use self::backend::{Backend, BackendTypes, ExtraBackendMethods};\n-pub use self::builder::BuilderMethods;\n+pub use self::builder::{BuilderMethods, OverflowOp};\n pub use self::consts::ConstMethods;\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};\n pub use self::declare::{DeclareMethods, PreDefineMethods};\n-pub use self::intrinsic::{IntrinsicCallMethods, OverflowOp};\n+pub use self::intrinsic::IntrinsicCallMethods;\n pub use self::misc::MiscMethods;\n pub use self::statics::StaticMethods;\n pub use self::type_::{"}]}