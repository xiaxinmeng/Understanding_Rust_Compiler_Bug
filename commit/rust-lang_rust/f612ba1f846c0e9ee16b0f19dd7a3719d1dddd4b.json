{"sha": "f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MTJiYTFmODQ2YzBlOWVlMTZiMGYxOWRkN2EzNzE5ZDFkZGRkNGI=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-07T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-10T13:43:05Z"}, "message": "Use existing declaration of rust_eh_personality\n\nIf crate declares `rust_eh_personality`, re-use existing declaration\nas otherwise attempts to set function attributes that follow the\ndeclaration will fail (unless it happens to have exactly the same\ntype signature as the one predefined in the compiler).", "tree": {"sha": "5302dbc7ecad1df1ec35f10875564d93fda032f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5302dbc7ecad1df1ec35f10875564d93fda032f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "html_url": "https://github.com/rust-lang/rust/commit/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae33a9714e73dda15030894821b6819f781ed7ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae33a9714e73dda15030894821b6819f781ed7ba", "html_url": "https://github.com/rust-lang/rust/commit/ae33a9714e73dda15030894821b6819f781ed7ba"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "cccf2f8498cb84b39bcc27f9d3a3a5f171bf3e37", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "patch": "@@ -385,11 +385,16 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 } else {\n                     \"rust_eh_personality\"\n                 };\n-                let fty = self.type_variadic_func(&[], self.type_i32());\n-                self.declare_cfn(name, llvm::UnnamedAddr::Global, fty)\n+                if let Some(llfn) = self.get_declared_value(name) {\n+                    llfn\n+                } else {\n+                    let fty = self.type_variadic_func(&[], self.type_i32());\n+                    let llfn = self.declare_cfn(name, llvm::UnnamedAddr::Global, fty);\n+                    attributes::apply_target_cpu_attr(self, llfn);\n+                    llfn\n+                }\n             }\n         };\n-        attributes::apply_target_cpu_attr(self, llfn);\n         self.eh_personality.set(Some(llfn));\n         llfn\n     }"}, {"sha": "026364a2058fa0cc9d2351bde32366a91a06c8e0", "filename": "src/test/ui/panic-runtime/incompatible-type.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b/src%2Ftest%2Fui%2Fpanic-runtime%2Fincompatible-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b/src%2Ftest%2Fui%2Fpanic-runtime%2Fincompatible-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fincompatible-type.rs?ref=f612ba1f846c0e9ee16b0f19dd7a3719d1dddd4b", "patch": "@@ -0,0 +1,24 @@\n+// Check that rust_eh_personality can have a different type signature than the\n+// one hardcoded in the compiler.  Regression test for #70117. Used to fail with:\n+//\n+// Assertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\n+//\n+// build-pass\n+// compile-flags: --crate-type=lib -Ccodegen-units=1\n+#![no_std]\n+#![panic_runtime]\n+#![feature(panic_runtime)]\n+#![feature(rustc_attrs)]\n+\n+pub struct DropMe;\n+\n+impl Drop for DropMe {\n+    fn drop(&mut self) {}\n+}\n+\n+pub fn test(_: DropMe) {\n+    unreachable!();\n+}\n+\n+#[rustc_std_internal_symbol]\n+pub unsafe extern \"C\" fn rust_eh_personality() {}"}]}