{"sha": "1b154a31cd09c2e251590b82de26927bdc34009a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTU0YTMxY2QwOWMyZTI1MTU5MGI4MmRlMjY5MjdiZGMzNDAwOWE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T19:20:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-11-01T22:00:27Z"}, "message": "Rename `LocalInternedString` as `SymbolStr`.\n\nIt makes the relationship with `Symbol` clearer. The `Str` suffix\nmatches the existing `Symbol::as_str()` method nicely, and is also\nconsistent with it being a wrapper of `&str`.", "tree": {"sha": "71d7c319ab51cbce8e1e04595cb900b36f66723b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71d7c319ab51cbce8e1e04595cb900b36f66723b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b154a31cd09c2e251590b82de26927bdc34009a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b154a31cd09c2e251590b82de26927bdc34009a", "html_url": "https://github.com/rust-lang/rust/commit/1b154a31cd09c2e251590b82de26927bdc34009a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b154a31cd09c2e251590b82de26927bdc34009a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "html_url": "https://github.com/rust-lang/rust/commit/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "304735fb1c7ed9b9bc5c7e1e765c3cef21989161", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b154a31cd09c2e251590b82de26927bdc34009a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b154a31cd09c2e251590b82de26927bdc34009a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=1b154a31cd09c2e251590b82de26927bdc34009a", "patch": "@@ -9,7 +9,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::SymbolStr;\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n@@ -18,21 +18,21 @@ use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n \n-impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n+impl<'a> HashStable<StableHashingContext<'a>> for SymbolStr {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let str = self as &str;\n         str.hash_stable(hcx, hasher)\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n-    type KeyType = LocalInternedString;\n+impl<'a> ToStableHashKey<StableHashingContext<'a>> for SymbolStr {\n+    type KeyType = SymbolStr;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> LocalInternedString {\n+                          -> SymbolStr {\n         self.clone()\n     }\n }\n@@ -45,12 +45,12 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n-    type KeyType = LocalInternedString;\n+    type KeyType = SymbolStr;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> LocalInternedString {\n+                          -> SymbolStr {\n         self.as_str()\n     }\n }"}, {"sha": "8e1eb7366d9c065e4afab9c9990372b17602d3f3", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1b154a31cd09c2e251590b82de26927bdc34009a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b154a31cd09c2e251590b82de26927bdc34009a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=1b154a31cd09c2e251590b82de26927bdc34009a", "patch": "@@ -806,9 +806,9 @@ impl Ident {\n         Ident::new(self.name, self.span.modern_and_legacy())\n     }\n \n-    /// Convert the name to a `LocalInternedString`. This is a slowish\n-    /// operation because it requires locking the symbol interner.\n-    pub fn as_str(self) -> LocalInternedString {\n+    /// Convert the name to a `SymbolStr`. This is a slowish operation because\n+    /// it requires locking the symbol interner.\n+    pub fn as_str(self) -> SymbolStr {\n         self.name.as_str()\n     }\n }\n@@ -896,11 +896,11 @@ impl Symbol {\n         })\n     }\n \n-    /// Convert to a `LocalInternedString`. This is a slowish operation because\n-    /// it requires locking the symbol interner.\n-    pub fn as_str(self) -> LocalInternedString {\n+    /// Convert to a `SymbolStr`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n+    pub fn as_str(self) -> SymbolStr {\n         with_interner(|interner| unsafe {\n-            LocalInternedString {\n+            SymbolStr {\n                 string: std::mem::transmute::<&str, &str>(interner.get(self))\n             }\n         })\n@@ -973,6 +973,7 @@ impl Interner {\n         self.names.insert(string, name);\n         name\n     }\n+\n     // Get the symbol as a string. `Symbol::as_str()` should be used in\n     // preference to this function.\n     pub fn get(&self, symbol: Symbol) -> &str {\n@@ -1092,15 +1093,14 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n /// safely treat `string` which points to interner data, as an immortal string,\n /// as long as this type never crosses between threads.\n //\n-// FIXME: ensure that the interner outlives any thread which uses\n-// `LocalInternedString`, by creating a new thread right after constructing the\n-// interner.\n+// FIXME: ensure that the interner outlives any thread which uses `SymbolStr`,\n+// by creating a new thread right after constructing the interner.\n #[derive(Clone, Eq, PartialOrd, Ord)]\n-pub struct LocalInternedString {\n+pub struct SymbolStr {\n     string: &'static str,\n }\n \n-impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n+impl<U: ?Sized> std::convert::AsRef<U> for SymbolStr\n where\n     str: std::convert::AsRef<U>\n {\n@@ -1110,28 +1110,28 @@ where\n     }\n }\n \n-impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for LocalInternedString {\n+impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for SymbolStr {\n     fn eq(&self, other: &T) -> bool {\n         self.string == other.deref()\n     }\n }\n \n-impl !Send for LocalInternedString {}\n-impl !Sync for LocalInternedString {}\n+impl !Send for SymbolStr {}\n+impl !Sync for SymbolStr {}\n \n-impl std::ops::Deref for LocalInternedString {\n+impl std::ops::Deref for SymbolStr {\n     type Target = str;\n     #[inline]\n     fn deref(&self) -> &str { self.string }\n }\n \n-impl fmt::Debug for LocalInternedString {\n+impl fmt::Debug for SymbolStr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.string, f)\n     }\n }\n \n-impl fmt::Display for LocalInternedString {\n+impl fmt::Display for SymbolStr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.string, f)\n     }"}]}