{"sha": "eb18746bc6c6c5c710ad674873438cbad5894f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMTg3NDZiYzZjNmM1YzcxMGFkNjc0ODczNDM4Y2JhZDU4OTRmMDY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T16:55:23Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T17:07:20Z"}, "message": "Add assert_matches!(expr, pat).", "tree": {"sha": "37a1981317a8ab151451246c8410b1a360476b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a1981317a8ab151451246c8410b1a360476b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb18746bc6c6c5c710ad674873438cbad5894f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb18746bc6c6c5c710ad674873438cbad5894f06", "html_url": "https://github.com/rust-lang/rust/commit/eb18746bc6c6c5c710ad674873438cbad5894f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb18746bc6c6c5c710ad674873438cbad5894f06/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f32f62aa5ceba1b795f3702e502d8473238be6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f32f62aa5ceba1b795f3702e502d8473238be6b", "html_url": "https://github.com/rust-lang/rust/commit/7f32f62aa5ceba1b795f3702e502d8473238be6b"}], "stats": {"total": 126, "additions": 101, "deletions": 25}, "files": [{"sha": "3e31a9e8910e00f14f61d91a63e13d0f72ed5bcc", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/eb18746bc6c6c5c710ad674873438cbad5894f06/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb18746bc6c6c5c710ad674873438cbad5894f06/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=eb18746bc6c6c5c710ad674873438cbad5894f06", "patch": "@@ -110,6 +110,58 @@ macro_rules! assert_ne {\n     });\n }\n \n+/// Asserts that an expression matches a pattern.\n+///\n+/// On panic, this macro will print the value of the expression with its\n+/// debug representation.\n+///\n+/// Like [`assert!`], this macro has a second form, where a custom\n+/// panic message can be provided.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let a = 1u32.checked_add(2);\n+/// let b = 1u32.checked_sub(2);\n+/// assert_matches!(a, Some(_));\n+/// assert_matches!(b, None);\n+/// ```\n+#[macro_export]\n+#[unstable(feature = \"assert_matches\", issue = \"none\")]\n+#[allow_internal_unstable(core_panic)]\n+macro_rules! assert_matches {\n+    ($left:expr, $right:pat $(,)?) => ({\n+        match &$left {\n+            left_val => {\n+                if let $right = left_val {\n+                    // OK\n+                } else {\n+                    $crate::panicking::assert_matches_failed(\n+                        &*left_val,\n+                        $crate::stringify!($right),\n+                        $crate::option::Option::None\n+                    );\n+                }\n+            }\n+        }\n+    });\n+    ($left:expr, $right:expr, $($arg:tt)+) => ({\n+        match &$left {\n+            left_val => {\n+                if let $right = left_val {\n+                    // OK\n+                } else {\n+                    $crate::panicking::assert_matches_failed(\n+                        &*left_val,\n+                        $crate::stringify!($right),\n+                        $crate::option::Option::Some($crate::format_args!($($arg)+))\n+                    );\n+                }\n+            }\n+        }\n+    });\n+}\n+\n /// Asserts that a boolean expression is `true` at runtime.\n ///\n /// This will invoke the [`panic!`] macro if the provided expression cannot be"}, {"sha": "12acf5b4329dbba8d615d355013dc0ca2035a8ca", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/eb18746bc6c6c5c710ad674873438cbad5894f06/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb18746bc6c6c5c710ad674873438cbad5894f06/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=eb18746bc6c6c5c710ad674873438cbad5894f06", "patch": "@@ -97,6 +97,7 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n pub enum AssertKind {\n     Eq,\n     Ne,\n+    Match,\n }\n \n /// Internal function for `assert_eq!` and `assert_ne!` macros\n@@ -113,32 +114,54 @@ where\n     T: fmt::Debug + ?Sized,\n     U: fmt::Debug + ?Sized,\n {\n-    #[track_caller]\n-    fn inner(\n-        kind: AssertKind,\n-        left: &dyn fmt::Debug,\n-        right: &dyn fmt::Debug,\n-        args: Option<fmt::Arguments<'_>>,\n-    ) -> ! {\n-        let op = match kind {\n-            AssertKind::Eq => \"==\",\n-            AssertKind::Ne => \"!=\",\n-        };\n-\n-        match args {\n-            Some(args) => panic!(\n-                r#\"assertion failed: `(left {} right)`\n+    assert_failed_inner(kind, &left, &right, args)\n+}\n+\n+/// Internal function for `assert_match!`\n+#[cold]\n+#[track_caller]\n+#[doc(hidden)]\n+pub fn assert_matches_failed<T: fmt::Debug + ?Sized>(\n+    left: &T,\n+    right: &str,\n+    args: Option<fmt::Arguments<'_>>,\n+) -> ! {\n+    // Use the Display implementation to display the pattern.\n+    struct Pattern<'a>(&'a str);\n+    impl fmt::Debug for Pattern<'_> {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            fmt::Display::fmt(self.0, f)\n+        }\n+    }\n+    assert_failed_inner(AssertKind::Match, &left, &Pattern(right), args);\n+}\n+\n+/// Non-generic version of the above functions, to avoid code bloat.\n+#[track_caller]\n+fn assert_failed_inner(\n+    kind: AssertKind,\n+    left: &dyn fmt::Debug,\n+    right: &dyn fmt::Debug,\n+    args: Option<fmt::Arguments<'_>>,\n+) -> ! {\n+    let op = match kind {\n+        AssertKind::Eq => \"==\",\n+        AssertKind::Ne => \"!=\",\n+        AssertKind::Match => \"matches\",\n+    };\n+\n+    match args {\n+        Some(args) => panic!(\n+            r#\"assertion failed: `(left {} right)`\n   left: `{:?}`,\n  right: `{:?}: {}`\"#,\n-                op, left, right, args\n-            ),\n-            None => panic!(\n-                r#\"assertion failed: `(left {} right)`\n+            op, left, right, args\n+        ),\n+        None => panic!(\n+            r#\"assertion failed: `(left {} right)`\n   left: `{:?}`,\n  right: `{:?}`\"#,\n-                op, left, right,\n-            ),\n-        }\n+            op, left, right,\n+        ),\n     }\n-    inner(kind, &left, &right, args)\n }"}, {"sha": "ddceb492765da58afd0ce759d05ba7e6399a38d1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb18746bc6c6c5c710ad674873438cbad5894f06/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb18746bc6c6c5c710ad674873438cbad5894f06/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=eb18746bc6c6c5c710ad674873438cbad5894f06", "patch": "@@ -228,6 +228,7 @@\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n+#![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(atomic_mut_ptr)]\n #![feature(box_syntax)]\n@@ -550,8 +551,8 @@ pub use std_detect::detect;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::{\n-    assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches, r#try, todo,\n-    unimplemented, unreachable, write, writeln,\n+    assert_eq, assert_matches, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches,\n+    r#try, todo, unimplemented, unreachable, write, writeln,\n };\n \n // Re-export built-in macros defined through libcore."}]}