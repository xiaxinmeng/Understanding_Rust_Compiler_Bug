{"sha": "84e8143c4f423011cd337d2a7bfdc54a753eea81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTgxNDNjNGY0MjMwMTFjZDMzN2QyYTdiZmRjNTRhNzUzZWVhODE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-26T20:18:52Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-28T04:41:16Z"}, "message": "get rid of needless wrapper function", "tree": {"sha": "5e4340f8863b3884bbd0474dd4568b42768b88e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4340f8863b3884bbd0474dd4568b42768b88e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e8143c4f423011cd337d2a7bfdc54a753eea81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e8143c4f423011cd337d2a7bfdc54a753eea81", "html_url": "https://github.com/rust-lang/rust/commit/84e8143c4f423011cd337d2a7bfdc54a753eea81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e8143c4f423011cd337d2a7bfdc54a753eea81/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c956f76c3c8bf42aa768c80e16ed16a3d7d370ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c956f76c3c8bf42aa768c80e16ed16a3d7d370ea", "html_url": "https://github.com/rust-lang/rust/commit/c956f76c3c8bf42aa768c80e16ed16a3d7d370ea"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "073de40382adb6e1cbbd44a9e2e4e76ddb68f239", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84e8143c4f423011cd337d2a7bfdc54a753eea81/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e8143c4f423011cd337d2a7bfdc54a753eea81/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=84e8143c4f423011cd337d2a7bfdc54a753eea81", "patch": "@@ -251,7 +251,7 @@ fn expand_loop_block(loop_block: P<Block>,\n             // the same context will pick that up in the deferred renaming pass\n             // and be renamed incorrectly.\n             let mut rename_list = vec!(rename);\n-            let mut rename_fld = renames_to_fold(&mut rename_list);\n+            let mut rename_fld = IdentRenamer{renames: &mut rename_list};\n             let renamed_ident = rename_fld.fold_ident(label);\n \n             // The rename *must* be added to the enclosed syntax context for\n@@ -624,7 +624,7 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n                     }\n                     let rewritten_pat = {\n                         let mut rename_fld =\n-                            renames_to_fold(&mut new_pending_renames);\n+                            IdentRenamer{renames: &mut new_pending_renames};\n                         // rewrite the pattern using the new names (the old\n                         // ones have already been applied):\n                         rename_fld.fold_pat(expanded_pat)\n@@ -676,8 +676,7 @@ fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n         new_pending_renames.push((*ident,new_name));\n     }\n     let rewritten_pat = {\n-        let mut rename_fld =\n-            renames_to_fold(&mut new_pending_renames);\n+        let mut rename_fld = IdentRenamer{renames:&mut new_pending_renames};\n         // rewrite the pattern using the new names (the old\n         // ones have already been applied):\n         rename_fld.fold_pat(expanded_pat)\n@@ -757,17 +756,19 @@ fn expand_block_elts(b: &Block, fld: &mut MacroExpander) -> P<Block> {\n     let new_view_items = b.view_items.iter().map(|x| fld.fold_view_item(x)).collect();\n     let new_stmts =\n         b.stmts.iter().flat_map(|x| {\n+            // perform all pending renames\n             let renamed_stmt = {\n                 let pending_renames = &mut fld.extsbox.info().pending_renames;\n-                let mut rename_fld = renames_to_fold(pending_renames);\n+                let mut rename_fld = IdentRenamer{renames:pending_renames};\n                 rename_fld.fold_stmt(&**x).expect_one(\"rename_fold didn't return one value\")\n             };\n+            // expand macros in the statement\n             fld.fold_stmt(&*renamed_stmt).move_iter()\n         }).collect();\n     let new_expr = b.expr.map(|x| {\n         let expr = {\n             let pending_renames = &mut fld.extsbox.info().pending_renames;\n-            let mut rename_fld = renames_to_fold(pending_renames);\n+            let mut rename_fld = IdentRenamer{renames:pending_renames};\n             rename_fld.fold_expr(x)\n         };\n         fld.fold_expr(expr)\n@@ -859,6 +860,7 @@ fn expand_pat(p: Gc<ast::Pat>, fld: &mut MacroExpander) -> Gc<ast::Pat> {\n     }\n }\n \n+// a tree-folder that applies every rename in its (mutable) list\n pub struct IdentRenamer<'a> {\n     renames: &'a mut RenameList,\n }\n@@ -875,14 +877,6 @@ impl<'a> Folder for IdentRenamer<'a> {\n     }\n }\n \n-// given a mutable list of renames, return a tree-folder that applies those\n-// renames.\n-fn renames_to_fold<'a>(renames: &'a mut RenameList) -> IdentRenamer<'a> {\n-    IdentRenamer {\n-        renames: renames,\n-    }\n-}\n-\n fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n     /* this discards information in the case of macro-defining macros */\n     Span {"}]}