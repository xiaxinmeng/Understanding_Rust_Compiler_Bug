{"sha": "c389d0b0dd2273c9f7d16917a1738509f5522491", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzODlkMGIwZGQyMjczYzlmN2QxNjkxN2ExNzM4NTA5ZjU1MjI0OTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-12T05:15:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-21T01:03:24Z"}, "message": "rustc: remove unused 'mut' variables", "tree": {"sha": "9840f056c842a46cef0a267167c4631952a869ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9840f056c842a46cef0a267167c4631952a869ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c389d0b0dd2273c9f7d16917a1738509f5522491", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c389d0b0dd2273c9f7d16917a1738509f5522491", "html_url": "https://github.com/rust-lang/rust/commit/c389d0b0dd2273c9f7d16917a1738509f5522491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c389d0b0dd2273c9f7d16917a1738509f5522491/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd97cac251224e936508541e99fb63ac02fe6eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd97cac251224e936508541e99fb63ac02fe6eca", "html_url": "https://github.com/rust-lang/rust/commit/fd97cac251224e936508541e99fb63ac02fe6eca"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "a176b0163a499253d2e7c52f2e013e7bbc0540ea", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -273,7 +273,7 @@ pub mod write {\n                 let LLVMOptDefault    = 2 as c_int; // -O2, -Os\n                 let LLVMOptAggressive = 3 as c_int; // -O3\n \n-                let mut CodeGenOptLevel = match opts.optimize {\n+                let CodeGenOptLevel = match opts.optimize {\n                   session::No => LLVMOptNone,\n                   session::Less => LLVMOptLess,\n                   session::Default => LLVMOptDefault,\n@@ -294,7 +294,7 @@ pub mod write {\n                     return;\n                 }\n \n-                let mut FileType;\n+                let FileType;\n                 if output_type == output_type_object ||\n                        output_type == output_type_exe {\n                    FileType = lib::llvm::ObjectFile;\n@@ -820,7 +820,7 @@ pub fn link_binary(sess: Session,\n     cc_args.push(output.to_str());\n     cc_args.push(obj_filename.to_str());\n \n-    let mut lib_cmd;\n+    let lib_cmd;\n     let os = sess.targ_cfg.os;\n     if os == session::os_macos {\n         lib_cmd = ~\"-dynamiclib\";"}, {"sha": "c4f37c2170dbbf930151fbbbe11bb08ef265bac3", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -349,7 +349,7 @@ pub fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n                 outputs: Option<@OutputFilenames>)\n     -> (@ast::crate, Option<ty::ctxt>) {\n     let time_passes = sess.time_passes();\n-    let mut crate = time(time_passes, ~\"parsing\",\n+    let crate = time(time_passes, ~\"parsing\",\n                          || parse_input(sess, copy cfg, input) );\n     if upto == cu_parse { return (crate, None); }\n "}, {"sha": "8515e0c6e9b7c42fec5795ee7c2ea1e442b3164e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -1341,7 +1341,7 @@ pub static metadata_encoding_version : &'static [u8] =\n \n pub fn encode_metadata(parms: EncodeParams, crate: &crate) -> ~[u8] {\n     let wr = @io::BytesWriter();\n-    let mut stats = Stats {\n+    let stats = Stats {\n         inline_bytes: 0,\n         attr_bytes: 0,\n         dep_bytes: 0,"}, {"sha": "b8e0bba6b23487f1c27976c2b2fd07c6c6218bd7", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -305,7 +305,7 @@ pub impl GatherLoanCtxt {\n                 let mcx = &mem_categorization_ctxt {\n                     tcx: self.tcx(),\n                     method_map: self.bccx.method_map};\n-                let mut cmt = mcx.cat_expr_autoderefd(expr, autoderefs);\n+                let cmt = mcx.cat_expr_autoderefd(expr, autoderefs);\n                 debug!(\"after autoderef, cmt=%s\", self.bccx.cmt_to_repr(cmt));\n \n                 match autoref.kind {"}, {"sha": "aedd6bb5467c5004b82087013e6d91a7ed578402", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -51,7 +51,7 @@ use middle::mem_categorization::{cat_arg, cat_binding, cat_discr, cat_comp};\n use middle::mem_categorization::{cat_deref, cat_discr, cat_local, cat_self};\n use middle::mem_categorization::{cat_special, cat_stack_upvar, cmt};\n use middle::mem_categorization::{comp_field, comp_index, comp_variant};\n-use middle::mem_categorization::{gc_ptr, region_ptr, lp_local, lp_arg};\n+use middle::mem_categorization::{gc_ptr, region_ptr};\n use middle::ty;\n use util::common::indenter;\n "}, {"sha": "8fc94cf51e2a0db2f63eb38af18f722f29b6b22a", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -481,7 +481,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                   left_ty: ty::t)\n                -> Option<~[@pat]> {\n     // Sad, but I can't get rid of this easily\n-    let mut r0 = copy *raw_pat(r[0]);\n+    let r0 = copy *raw_pat(r[0]);\n     match r0 {\n         pat{id: pat_id, node: n, span: pat_span} =>\n             match n {"}, {"sha": "f4d6d5c599a1abc45f10d411f9faa723ee135ebf", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -960,7 +960,7 @@ pub impl Resolver {\n         // child name directly. Otherwise, we create or reuse an anonymous\n         // module and add the child to that.\n \n-        let mut module_;\n+        let module_;\n         match reduced_graph_parent {\n             ModuleReducedGraphParent(parent_module) => {\n                 module_ = parent_module;\n@@ -1527,7 +1527,7 @@ pub impl Resolver {\n                                      block: &blk,\n                                      parent: ReducedGraphParent,\n                                      visitor: vt<ReducedGraphParent>) {\n-        let mut new_parent;\n+        let new_parent;\n         if self.block_needs_anonymous_module(block) {\n             let block_id = block.node.id;\n \n@@ -2427,7 +2427,7 @@ pub impl Resolver {\n \n         let merge_import_resolution = |ident,\n                                        name_bindings: @mut NameBindings| {\n-            let mut dest_import_resolution;\n+            let dest_import_resolution;\n             match module_.import_resolutions.find(ident) {\n                 None => {\n                     // Create a new import resolution from this child.\n@@ -2583,8 +2583,8 @@ pub impl Resolver {\n         let module_prefix_result = self.resolve_module_prefix(module_,\n                                                               module_path);\n \n-        let mut search_module;\n-        let mut start_index;\n+        let search_module;\n+        let start_index;\n         match module_prefix_result {\n             Failed => {\n                 self.session.span_err(span, ~\"unresolved name\");\n@@ -3221,7 +3221,7 @@ pub impl Resolver {\n                 allow_capturing_self: AllowCapturingSelfFlag)\n              -> Option<def_like> {\n         let mut def;\n-        let mut is_ty_param;\n+        let is_ty_param;\n \n         match def_like {\n             dl_def(d @ def_local(*)) | dl_def(d @ def_upvar(*)) |\n@@ -4530,7 +4530,7 @@ pub impl Resolver {\n                                  -> Option<def> {\n         let module_path_idents = self.intern_module_part_of_path(path);\n \n-        let mut containing_module;\n+        let containing_module;\n         match self.resolve_module_path_for_import(self.current_module,\n                                                   module_path_idents,\n                                                   UseLexicalScope,\n@@ -4578,7 +4578,7 @@ pub impl Resolver {\n \n         let root_module = self.graph_root.get_module();\n \n-        let mut containing_module;\n+        let containing_module;\n         match self.resolve_module_path_from_root(root_module,\n                                                  module_path_idents,\n                                                  0,\n@@ -4622,7 +4622,7 @@ pub impl Resolver {\n                                         span: span)\n                                      -> Option<def> {\n         // Check the local set of ribs.\n-        let mut search_result;\n+        let search_result;\n         match namespace {\n             ValueNS => {\n                 search_result = self.search_ribs(&mut self.value_ribs, ident,"}, {"sha": "dc59fcecb5a1e06bc31013152e8253f9870fd0b8", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -248,7 +248,7 @@ pub enum opt_result {\n pub fn trans_opt(bcx: block, o: &Opt) -> opt_result {\n     let _icx = bcx.insn_ctxt(\"match::trans_opt\");\n     let ccx = bcx.ccx();\n-    let mut bcx = bcx;\n+    let bcx = bcx;\n     match *o {\n         lit(ExprLit(lit_expr)) => {\n             let datumblock = expr::trans_to_datum(bcx, lit_expr);"}, {"sha": "7a174be1e57242361d939aba4e512778639bc820", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -292,7 +292,7 @@ pub fn trans_fn_ref_with_vtables(\n     }\n \n     // Find the actual function pointer.\n-    let mut val = {\n+    let val = {\n         if def_id.crate == ast::local_crate {\n             // Internal reference.\n             get_item_val(ccx, def_id.node)\n@@ -415,7 +415,7 @@ pub fn trans_lang_call_with_type_params(bcx: block,\n                                                     type_params,\n                                                     None,\n                                                     fty);\n-                    let mut llfnty = type_of::type_of(callee.bcx.ccx(),\n+                    let llfnty = type_of::type_of(callee.bcx.ccx(),\n                                                       substituted);\n                     new_llval = PointerCast(callee.bcx, fn_data.llfn, llfnty);\n                 }\n@@ -712,7 +712,7 @@ pub fn trans_arg_expr(bcx: block,\n         }\n     };\n     let mut arg_datum = arg_datumblock.datum;\n-    let mut bcx = arg_datumblock.bcx;\n+    let bcx = arg_datumblock.bcx;\n \n     debug!(\"   arg datum: %s\", arg_datum.to_str(bcx.ccx()));\n "}, {"sha": "4fc4cae464dab65acc9c5bc89d6672732faca178", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -261,7 +261,7 @@ pub fn build_closure(bcx0: block,\n                      include_ret_handle: Option<ValueRef>) -> ClosureResult {\n     let _icx = bcx0.insn_ctxt(\"closure::build_closure\");\n     // If we need to, package up the iterator body to call\n-    let mut bcx = bcx0;;\n+    let bcx = bcx0;;\n     let ccx = bcx.ccx(), tcx = ccx.tcx;\n \n     // Package up the captured upvars"}, {"sha": "48c76ab37c6e38a16696ca8e10485d1a0ebe0b79", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -192,7 +192,7 @@ pub fn trans_to_datum(bcx: block, expr: @ast::expr) -> DatumBlock {\n         }\n         Some(&@AutoAddEnv(*)) => {\n             let mut bcx = bcx;\n-            let mut datum = unpack_datum!(bcx, {\n+            let datum = unpack_datum!(bcx, {\n                 trans_to_datum_unadjusted(bcx, expr)\n             });\n             add_env(bcx, expr, datum)\n@@ -1187,7 +1187,7 @@ fn trans_rec_or_struct(bcx: block,\n                        dest: Dest) -> block\n {\n     let _icx = bcx.insn_ctxt(\"trans_rec\");\n-    let mut bcx = bcx;\n+    let bcx = bcx;\n \n     let ty = node_id_type(bcx, id);\n     let tcx = bcx.tcx();\n@@ -1505,7 +1505,7 @@ fn trans_lazy_binop(bcx: block,\n                     b: @ast::expr) -> DatumBlock {\n     let _icx = bcx.insn_ctxt(\"trans_lazy_binop\");\n     let binop_ty = expr_ty(bcx, binop_expr);\n-    let mut bcx = bcx;\n+    let bcx = bcx;\n \n     let Result {bcx: past_lhs, val: lhs} = {\n         do base::with_scope_result(bcx, a.info(), ~\"lhs\") |bcx| {"}, {"sha": "cb15a2e8c644a852400e9ff1ac0de0be5da2fc22", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -567,7 +567,8 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         set_fixed_stack_segment(fcx.llfn);\n     }\n \n-    let mut bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n+    let mut bcx = top_scope_block(fcx, None);\n+    let lltop = bcx.llbb;\n     match *ccx.sess.str_of(item.ident) {\n         ~\"atomic_cxchg\" => {\n             let old = AtomicCmpXchg(bcx,"}, {"sha": "b240dcb80845e18f356ed2e4795e2f62f089766a", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -102,7 +102,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n     }\n \n     let tpt = ty::lookup_item_type(ccx.tcx, fn_id);\n-    let mut llitem_ty = tpt.ty;\n+    let llitem_ty = tpt.ty;\n \n     let map_node = session::expect(ccx.sess, ccx.tcx.items.find(&fn_id.node),\n      || fmt!(\"While monomorphizing %?, couldn't find it in the item map \\"}, {"sha": "e778986b2d1c3c5337d11a3d80653d232bed18c9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -180,7 +180,7 @@ pub struct Candidate {\n \n pub impl<'self> LookupContext<'self> {\n     fn do_lookup(&self, self_ty: ty::t) -> Option<method_map_entry> {\n-        let mut self_ty = structurally_resolved_type(self.fcx,\n+        let self_ty = structurally_resolved_type(self.fcx,\n                                                      self.self_expr.span,\n                                                      self_ty);\n "}, {"sha": "ca9b3602d5d370782e6b018b0c1ad6b48dea72ee", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -1625,7 +1625,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         // block syntax lambdas; that is, lambdas without explicit\n         // sigils.\n         let expected_sty = unpack_expected(fcx, expected, |x| Some(copy *x));\n-        let mut error_happened = false;\n+        let error_happened = false;\n         let (expected_sig,\n              expected_purity,\n              expected_sigil,\n@@ -1706,7 +1706,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                    field: ast::ident,\n                    tys: &[@ast::Ty]) {\n         let tcx = fcx.ccx.tcx;\n-        let mut bot = check_expr(fcx, base);\n+        let bot = check_expr(fcx, base);\n         let expr_t = structurally_resolved_type(fcx, expr.span,\n                                                 fcx.expr_ty(base));\n         let (base_t, derefs) = do_autoderef(fcx, expr.span, expr_t);\n@@ -2867,7 +2867,7 @@ pub fn check_decl_local(fcx: @mut FnCtxt, local: @ast::local)  {\n }\n \n pub fn check_stmt(fcx: @mut FnCtxt, stmt: @ast::stmt)  {\n-    let mut node_id;\n+    let node_id;\n     let mut saw_bot = false;\n     let mut saw_err = false;\n     match stmt.node {\n@@ -3124,7 +3124,8 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n     ccx.tcx.enum_var_cache.insert(local_def(id), @variants);\n \n     // Check that it is possible to represent this enum:\n-    let mut outer = true, did = local_def(id);\n+    let mut outer = true;\n+    let did = local_def(id);\n     if ty::type_structurally_contains(ccx.tcx, rty, |sty| {\n         match *sty {\n           ty::ty_enum(id, _) if id == did => {"}, {"sha": "ad173c6956060fdbc5cb05577fcbe7101f093d62", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -11,7 +11,7 @@\n use core::prelude::*;\n \n use middle::resolve::Impl;\n-use middle::ty::{param_ty};\n+use middle::ty::param_ty;\n use middle::ty;\n use middle::typeck::check::{FnCtxt, impl_self_ty};\n use middle::typeck::check::{structurally_resolved_type};"}, {"sha": "869825e607e56413260075f8db5ec79f8e1fed48", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c389d0b0dd2273c9f7d16917a1738509f5522491/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=c389d0b0dd2273c9f7d16917a1738509f5522491", "patch": "@@ -158,7 +158,7 @@ impl MethodRscope {\n                variance: Option<ty::region_variance>,\n                rcvr_generics: &ast::Generics)\n             -> MethodRscope {\n-        let mut region_param_names =\n+        let region_param_names =\n             RegionParamNames::from_generics(rcvr_generics);\n         MethodRscope {\n             self_ty: self_ty,"}]}