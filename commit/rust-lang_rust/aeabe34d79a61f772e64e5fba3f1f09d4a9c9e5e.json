{"sha": "aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e", "node_id": "C_kwDOAAsO6NoAKGFlYWJlMzRkNzlhNjFmNzcyZTY0ZTVmYmEzZjFmMDlkNGE5YzllNWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T18:55:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T18:55:42Z"}, "message": "Rollup merge of #106964 - workingjubilee:crouching-ioerror-hidden-documentation, r=ChrisDenton\n\nClarify `Error::last_os_error` can be weird\n\nFundamentally, querying the OS for error codes is a process that is deeply subject to the whims of chance and fortune. We can account for OS, but not for every combination of platform APIs. A compiled binary may not recognize new errors introduced years later. We should clarify a few especially odd situations, and what they mean: We can effectively promise nothing... if you ask for Rust to decode errors where none have occurred.\n\nThis allows removing mention of ErrorKind::Uncategorized.\nThat error variant is hidden deliberately, so we should not explicitly mention it.\n\nThis fixes #106937.\n\nSince you had an opinion also: Does this solution seem acceptable?\nr? ``@ChrisDenton``", "tree": {"sha": "59c68d4dbe172c49a771a11e3b9002584dceef5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c68d4dbe172c49a771a11e3b9002584dceef5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHKCuCRBK7hj4Ov3rIwAAcDEIADccG1V92SNpEaRMs71Umn75\nsfehrxfBAC3CfxMFolvj2vICgVrMZwu2U3lISG5QSfzAwLQTspbJaN0vREHRwWwF\nnqEV7qH9HhL9Fj2oCfgpxdBxK2fDolyaJWBwWJLZHG1r+HjdkiM+W4UKJoatOpOD\nJ883OCU2UFdLGRQuZjytGSpLVmavZUBFzZB4EjDgeXLJieNdnsIJMsYujUOpAkiS\n2dCCrue/ZnkUXUzZ05q+nPUtwhl34vEdfinSHQsjnEVpvcaC/WEvFG8ndGY6GxtQ\n/4G05TaWO+4lduQMTFiSx8dnGI0GYIsB1+023v9XNHh/TruWrevOUeKFoQovbcM=\n=x4cX\n-----END PGP SIGNATURE-----\n", "payload": "tree 59c68d4dbe172c49a771a11e3b9002584dceef5d\nparent df7fd9995f10627f25ccb325f693a11b3395a73c\nparent 0f32fd8484d3282648dc18985b7d29abad2d6b70\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679597742 +0100\ncommitter GitHub <noreply@github.com> 1679597742 +0100\n\nRollup merge of #106964 - workingjubilee:crouching-ioerror-hidden-documentation, r=ChrisDenton\n\nClarify `Error::last_os_error` can be weird\n\nFundamentally, querying the OS for error codes is a process that is deeply subject to the whims of chance and fortune. We can account for OS, but not for every combination of platform APIs. A compiled binary may not recognize new errors introduced years later. We should clarify a few especially odd situations, and what they mean: We can effectively promise nothing... if you ask for Rust to decode errors where none have occurred.\n\nThis allows removing mention of ErrorKind::Uncategorized.\nThat error variant is hidden deliberately, so we should not explicitly mention it.\n\nThis fixes #106937.\n\nSince you had an opinion also: Does this solution seem acceptable?\nr? ``@ChrisDenton``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e", "html_url": "https://github.com/rust-lang/rust/commit/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7fd9995f10627f25ccb325f693a11b3395a73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7fd9995f10627f25ccb325f693a11b3395a73c", "html_url": "https://github.com/rust-lang/rust/commit/df7fd9995f10627f25ccb325f693a11b3395a73c"}, {"sha": "0f32fd8484d3282648dc18985b7d29abad2d6b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f32fd8484d3282648dc18985b7d29abad2d6b70", "html_url": "https://github.com/rust-lang/rust/commit/0f32fd8484d3282648dc18985b7d29abad2d6b70"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "1cedd6eedfaf90397a0d8476dd60cdac036dfedf", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e", "patch": "@@ -370,7 +370,7 @@ pub enum ErrorKind {\n \n     // \"Unusual\" error kinds which do not correspond simply to (sets\n     // of) OS error codes, should be added just above this comment.\n-    // `Other` and `Uncategorised` should remain at the end:\n+    // `Other` and `Uncategorized` should remain at the end:\n     //\n     /// A custom error that does not fall under any other I/O error kind.\n     ///\n@@ -882,6 +882,13 @@ impl Error {\n \n     /// Returns the corresponding [`ErrorKind`] for this error.\n     ///\n+    /// This may be a value set by Rust code constructing custom `io::Error`s,\n+    /// or if this `io::Error` was sourced from the operating system,\n+    /// it will be a value inferred from the system's error encoding.\n+    /// See [`last_os_error`] for more details.\n+    ///\n+    /// [`last_os_error`]: Error::last_os_error\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -892,7 +899,8 @@ impl Error {\n     /// }\n     ///\n     /// fn main() {\n-    ///     // Will print \"Uncategorized\".\n+    ///     // As no error has (visibly) occurred, this may print anything!\n+    ///     // It likely prints a placeholder for unidentified (non-)errors.\n     ///     print_error(Error::last_os_error());\n     ///     // Will print \"AddrInUse\".\n     ///     print_error(Error::new(ErrorKind::AddrInUse, \"oh no!\"));"}]}