{"sha": "6d51559f62f8814661a81ab4177fbcde18933390", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNTE1NTlmNjJmODgxNDY2MWE4MWFiNDE3N2ZiY2RlMTg5MzMzOTA=", "commit": {"author": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-01T09:58:40Z"}, "committer": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-03T19:46:09Z"}, "message": "Added lint to avoid negated comparisions on partially ordered types.", "tree": {"sha": "51c6d9b5efab8a7da2155a66118626b88b9cae8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c6d9b5efab8a7da2155a66118626b88b9cae8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d51559f62f8814661a81ab4177fbcde18933390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d51559f62f8814661a81ab4177fbcde18933390", "html_url": "https://github.com/rust-lang/rust/commit/6d51559f62f8814661a81ab4177fbcde18933390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d51559f62f8814661a81ab4177fbcde18933390/comments", "author": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6d53ad2c082f6e76f51e1b352d6b7ae3d50bda8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d53ad2c082f6e76f51e1b352d6b7ae3d50bda8", "html_url": "https://github.com/rust-lang/rust/commit/c6d53ad2c082f6e76f51e1b352d6b7ae3d50bda8"}], "stats": {"total": 186, "additions": 185, "deletions": 1}, "files": [{"sha": "612cde8a6aacf772a1a31cb5f769ae8590ce8c15", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d51559f62f8814661a81ab4177fbcde18933390/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d51559f62f8814661a81ab4177fbcde18933390/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6d51559f62f8814661a81ab4177fbcde18933390", "patch": "@@ -169,6 +169,7 @@ pub mod needless_borrowed_ref;\n pub mod needless_continue;\n pub mod needless_pass_by_value;\n pub mod needless_update;\n+pub mod neg_cmp_op_on_partial_ord;\n pub mod neg_multiply;\n pub mod new_without_default;\n pub mod no_effect;\n@@ -419,7 +420,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box map_unit_fn::Pass);\n     reg.register_late_lint_pass(box infallible_destructuring_match::Pass);\n     reg.register_late_lint_pass(box inherent_impl::Pass::default());\n-\n+    reg.register_late_lint_pass(box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -501,6 +502,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         booleans::LOGIC_BUG,\n         booleans::NONMINIMAL_BOOL,\n         bytecount::NAIVE_BYTECOUNT,\n+        neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n         copies::IF_SAME_THEN_ELSE,"}, {"sha": "139808f4393c90e8b811d8b1b704c690fd155bee", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/6d51559f62f8814661a81ab4177fbcde18933390/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d51559f62f8814661a81ab4177fbcde18933390/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=6d51559f62f8814661a81ab4177fbcde18933390", "patch": "@@ -0,0 +1,95 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+\n+use crate::utils;\n+\n+const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n+const PARTIAL_ORD: [&str; 3] = [\"core\", \"cmp\", \"PartialOrd\"];\n+\n+/// **What it does:**\n+/// Checks for the usage of negated comparision operators on types which only implement\n+/// `PartialOrd` (e.g. `f64`).\n+///\n+/// **Why is this bad?**\n+/// These operators make it easy to forget that the underlying types actually allow not only three\n+/// potential Orderings (Less, Equal, Greater) but also a forth one (Uncomparable). Escpeccially if\n+/// the operator based comparision result is negated it is easy to miss that fact.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// use core::cmp::Ordering;\n+/// \n+/// // Bad\n+/// let a = 1.0;\n+/// let b = std::f64::NAN;\n+/// \n+/// let _not_less_or_equal = !(a <= b);\n+///\n+/// // Good\n+/// let a = 1.0;\n+/// let b = std::f64::NAN;\n+/// \n+/// let _not_less_or_equal = match a.partial_cmp(&b) {\n+///     None | Some(Ordering::Greater) => true,\n+///     _ => false, \n+/// };\n+/// ```\n+declare_lint! {\n+    pub NEG_CMP_OP_ON_PARTIAL_ORD, Warn,\n+    \"The use of negated comparision operators on partially orded types may produce confusing code.\"\n+}\n+\n+pub struct NoNegCompOpForPartialOrd;\n+\n+impl LintPass for NoNegCompOpForPartialOrd {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEG_CMP_OP_ON_PARTIAL_ORD)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n+\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+\n+            if let Expr_::ExprUnary(UnOp::UnNot, ref inner) = expr.node;\n+            if let Expr_::ExprBinary(ref op, ref left, _) = inner.node;\n+            if let BinOp_::BiLe | BinOp_::BiGe | BinOp_::BiLt | BinOp_::BiGt = op.node;\n+\n+            then {\n+\n+                let ty = cx.tables.expr_ty(left);\n+\n+                let implements_ord = {\n+                    if let Some(id) = utils::get_trait_def_id(cx, &ORD) {\n+                        utils::implements_trait(cx, ty, id, &[])\n+                    } else {\n+                        return;\n+                    }\n+                };\n+\n+                let implements_partial_ord = {\n+                    if let Some(id) = utils::get_trait_def_id(cx, &PARTIAL_ORD) {\n+                        utils::implements_trait(cx, ty, id, &[])\n+                    } else {\n+                        return;\n+                    }\n+                };\n+\n+                if implements_partial_ord && !implements_ord {\n+                    cx.span_lint(\n+                        NEG_CMP_OP_ON_PARTIAL_ORD,\n+                        expr.span,\n+                        \"The use of negated comparision operators on partially orded\\\n+                        types produces code that is hard to read and refactor. Please\\\n+                        consider to use the partial_cmp() instead, to make it clear\\\n+                        that the two values could be incomparable.\"\n+                    )\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "daf059040a03a1ac1cc5b80c456200da6af2bae5", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6d51559f62f8814661a81ab4177fbcde18933390/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d51559f62f8814661a81ab4177fbcde18933390/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=6d51559f62f8814661a81ab4177fbcde18933390", "patch": "@@ -0,0 +1,59 @@\n+/// This test case utilizes `f64` an easy example for `PartialOrd` only types\n+/// but the lint itself actually validates any expression where the left\n+/// operand implements `PartialOrd` but not `Ord`.\n+\n+use std::cmp::Ordering;\n+\n+#[allow(nonminimal_bool)]\n+#[warn(neg_cmp_op_on_partial_ord)]\n+fn main() {\n+\n+    let a_value = 1.0;\n+    let another_value = 7.0;\n+\n+    // --- Bad ---\n+\n+\n+    // Not Less but potentially Greater, Equal or Uncomparable.\n+    let _not_less = !(a_value < another_value);\n+    \n+    // Not Less or Equal but potentially Greater or Uncomparable.\n+    let _not_less_or_equal = !(a_value <= another_value);\n+\n+    // Not Greater but potentially Less, Equal or Uncomparable.\n+    let _not_greater = !(a_value > another_value);\n+\n+    // Not Greater or Equal but potentially Less or Uncomparable.\n+    let _not_greater_or_equal = !(a_value >= another_value);\n+\n+\n+    // --- Good ---\n+\n+\n+    let _not_less = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Greater) | Some(Ordering::Equal)  => true,\n+\t_ => false,\n+    };\n+    let _not_less_or_equal = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Greater) => true,\n+        _ => false,\n+    };\n+    let _not_greater = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Less) | Some(Ordering::Equal) => true,\n+\t_ => false,\n+    };\n+    let _not_greater_or_equal = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Less) => true,\n+\t_ => false,\n+    };\n+\n+\n+    // --- Should not trigger ---\n+\n+\n+    let _ = a_value < another_value;\n+    let _ = a_value <= another_value;\n+    let _ = a_value > another_value;\n+    let _ = a_value >= another_value;\n+}\n+"}, {"sha": "0402cfd86e8abd6aa97676778cfef1c071d46b86", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6d51559f62f8814661a81ab4177fbcde18933390/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d51559f62f8814661a81ab4177fbcde18933390/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=6d51559f62f8814661a81ab4177fbcde18933390", "patch": "@@ -0,0 +1,28 @@\n+error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:18:21\n+   |\n+18 |     let _not_less = !(a_value < another_value);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D neg-cmp-op-on-partial-ord` implied by `-D warnings`\n+\n+error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:21:30\n+   |\n+21 |     let _not_less_or_equal = !(a_value <= another_value);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:24:24\n+   |\n+24 |     let _not_greater = !(a_value > another_value);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:27:33\n+   |\n+27 |     let _not_greater_or_equal = !(a_value >= another_value);\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}