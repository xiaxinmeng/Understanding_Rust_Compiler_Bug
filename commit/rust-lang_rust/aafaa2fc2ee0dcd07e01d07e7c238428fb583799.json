{"sha": "aafaa2fc2ee0dcd07e01d07e7c238428fb583799", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZmFhMmZjMmVlMGRjZDA3ZTAxZDA3ZTdjMjM4NDI4ZmI1ODM3OTk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-07T18:59:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-07T19:05:44Z"}, "message": "Add git-fmt tool", "tree": {"sha": "017a701c8eef5d89bcccc270b2a58274b1420e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/017a701c8eef5d89bcccc270b2a58274b1420e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aafaa2fc2ee0dcd07e01d07e7c238428fb583799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aafaa2fc2ee0dcd07e01d07e7c238428fb583799", "html_url": "https://github.com/rust-lang/rust/commit/aafaa2fc2ee0dcd07e01d07e7c238428fb583799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aafaa2fc2ee0dcd07e01d07e7c238428fb583799/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036917b691556b48397475b800c46507e039706d", "url": "https://api.github.com/repos/rust-lang/rust/commits/036917b691556b48397475b800c46507e039706d", "html_url": "https://github.com/rust-lang/rust/commit/036917b691556b48397475b800c46507e039706d"}], "stats": {"total": 196, "additions": 196, "deletions": 0}, "files": [{"sha": "975aff5e6cf0932e42310b49e339dd5f6a566f31", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aafaa2fc2ee0dcd07e01d07e7c238428fb583799/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aafaa2fc2ee0dcd07e01d07e7c238428fb583799/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=aafaa2fc2ee0dcd07e01d07e7c238428fb583799", "patch": "@@ -22,6 +22,9 @@ name = \"cargo-fmt\"\n [[bin]]\n name = \"rustfmt-format-diff\"\n \n+[[bin]]\n+name = \"git-fmt\"\n+\n [features]\n default = [\"cargo-fmt\", \"rustfmt-format-diff\"]\n cargo-fmt = []"}, {"sha": "aa54c3b5718a85d8a516345992b90df83632dbbd", "filename": "src/bin/git-fmt.rs", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/aafaa2fc2ee0dcd07e01d07e7c238428fb583799/src%2Fbin%2Fgit-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafaa2fc2ee0dcd07e01d07e7c238428fb583799/src%2Fbin%2Fgit-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgit-fmt.rs?ref=aafaa2fc2ee0dcd07e01d07e7c238428fb583799", "patch": "@@ -0,0 +1,193 @@\n+extern crate env_logger;\n+extern crate getopts;\n+#[macro_use]\n+extern crate log;\n+extern crate rustfmt_nightly as rustfmt;\n+\n+use std::env;\n+use std::path::{Path, PathBuf};\n+use std::process::Command;\n+use std::str::FromStr;\n+\n+use getopts::{Matches, Options};\n+\n+use rustfmt::{run, Input};\n+use rustfmt::config;\n+\n+\n+fn prune_files<'a>(files: Vec<&'a str>) -> Vec<&'a str> {\n+    let prefixes: Vec<_> = files\n+        .iter()\n+        .filter(|f| f.ends_with(\"mod.rs\") || f.ends_with(\"lib.rs\"))\n+        .map(|f| &f[..f.len() - 6])\n+        .collect();\n+\n+    let mut pruned_prefixes = vec![];\n+    for p1 in prefixes.into_iter() {\n+        let mut include = true;\n+        if !p1.starts_with(\"src/bin/\") {\n+            for p2 in pruned_prefixes.iter() {\n+                if p1.starts_with(p2) {\n+                    include = false;\n+                    break;\n+                }\n+            }\n+        }\n+        if include {\n+            pruned_prefixes.push(p1);\n+        }\n+    }\n+    debug!(\"prefixes: {:?}\", pruned_prefixes);\n+\n+    files\n+        .into_iter()\n+        .filter(|f| {\n+            let mut include = true;\n+            if f.ends_with(\"mod.rs\") || f.ends_with(\"lib.rs\") || f.starts_with(\"src/bin/\") {\n+                return true;\n+            }\n+            for pp in pruned_prefixes.iter() {\n+                if f.starts_with(pp) {\n+                    include = false;\n+                    break;\n+                }\n+            }\n+            include\n+        })\n+        .collect()\n+}\n+\n+fn git_diff(commits: String) -> String {\n+    let mut cmd = Command::new(\"git\");\n+    cmd.arg(\"diff\");\n+    if commits != \"0\" {\n+        cmd.arg(format!(\"HEAD~{}\", commits));\n+    }\n+    let output = cmd.output().expect(\"Couldn't execute `git diff`\");\n+    String::from_utf8_lossy(&output.stdout).into_owned()\n+}\n+\n+fn get_files(input: &str) -> Vec<&str> {\n+    input\n+        .lines()\n+        .filter(|line| line.starts_with(\"+++ b/\") && line.ends_with(\".rs\"))\n+        .map(|line| &line[6..])\n+        .collect()\n+}\n+\n+fn fmt_files(files: &[&str]) -> i32 {\n+    let (config, _) = config::Config::from_resolved_toml_path(Path::new(\".\"))\n+        .unwrap_or_else(|_| (config::Config::default(), None));\n+\n+    let mut exit_code = 0;\n+    for file in files {\n+        let summary = run(Input::File(PathBuf::from(file)), &config);\n+        if !summary.has_no_errors() {\n+            exit_code = 1;\n+        }\n+    }\n+    exit_code\n+}\n+\n+fn uncommitted_files() -> Vec<String> {\n+    let mut cmd = Command::new(\"git\");\n+    cmd.arg(\"ls-files\");\n+    cmd.arg(\"--others\");\n+    cmd.arg(\"--modified\");\n+    cmd.arg(\"--exclude-standard\");\n+    let output = cmd.output().expect(\"Couldn't execute Git\");\n+    let stdout = String::from_utf8_lossy(&output.stdout);\n+    stdout.lines().map(|s| s.to_owned()).collect()\n+}\n+\n+fn check_uncommitted() {\n+    let uncommitted = uncommitted_files();\n+    debug!(\"uncommitted files: {:?}\", uncommitted);\n+    if !uncommitted.is_empty() {\n+        println!(\"Found untracked changes:\");\n+        for f in uncommitted.iter() {\n+            println!(\"  {}\", f);\n+        }\n+        println!(\"Commit your work, or run with `-u`.\");\n+        println!(\"Exiting.\");\n+        std::process::exit(1);\n+    }\n+}\n+\n+fn make_opts() -> Options {\n+    let mut opts = Options::new();\n+    opts.optflag(\"h\", \"help\", \"show this message\");\n+    opts.optflag(\"c\", \"check\", \"check only, don't format (unimplemented)\");\n+    opts.optflag(\"u\", \"uncommitted\", \"format uncommitted files\");\n+    opts\n+}\n+\n+struct Config {\n+    commits: String,\n+    uncommitted: bool,\n+    check: bool,\n+}\n+\n+impl Config {\n+    fn from_args(matches: &Matches, opts: &Options) -> Config {\n+        // `--help` display help message and quit\n+        if matches.opt_present(\"h\") {\n+            let message = format!(\n+                \"\\nusage: {} <commits> [options]\\n\\n\\\n+                 commits: number of commits to format, default: 1\",\n+                env::args_os().next().unwrap().to_string_lossy()\n+            );\n+            println!(\"{}\", opts.usage(&message));\n+            std::process::exit(0);\n+        }\n+\n+        let mut config = Config {\n+            commits: \"1\".to_owned(),\n+            uncommitted: false,\n+            check: false,\n+        };\n+\n+        if matches.opt_present(\"c\") {\n+            config.check = true;\n+            unimplemented!();\n+        }\n+\n+        if matches.opt_present(\"u\") {\n+            config.uncommitted = true;\n+        }\n+\n+        if matches.free.len() > 1 {\n+            panic!(\"unknown arguments, use `-h` for usage\");\n+        }\n+        if matches.free.len() == 1 {\n+            let commits = matches.free[0].trim();\n+            if let Err(_) = u32::from_str(&commits) {\n+                panic!(\"Couldn't parse number of commits\");\n+            }\n+            config.commits = commits.to_owned();\n+        }\n+\n+        config\n+    }\n+}\n+\n+fn main() {\n+    let _ = env_logger::init();\n+\n+    let opts = make_opts();\n+    let matches = opts.parse(env::args().skip(1))\n+        .expect(\"Couldn't parse command line\");\n+    let config = Config::from_args(&matches, &opts);\n+\n+    if !config.uncommitted {\n+        check_uncommitted();\n+    }\n+\n+    let stdout = git_diff(config.commits);\n+    let files = get_files(&stdout);\n+    debug!(\"files: {:?}\", files);\n+    let files = prune_files(files);\n+    debug!(\"pruned files: {:?}\", files);\n+    let exit_code = fmt_files(&files);\n+    std::process::exit(exit_code);\n+}"}]}