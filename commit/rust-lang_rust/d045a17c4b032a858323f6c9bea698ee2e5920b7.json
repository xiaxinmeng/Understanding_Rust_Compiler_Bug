{"sha": "d045a17c4b032a858323f6c9bea698ee2e5920b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDVhMTdjNGIwMzJhODU4MzIzZjZjOWJlYTY5OGVlMmU1OTIwYjc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T21:42:31Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T22:45:18Z"}, "message": "Use `MaybeMutBorrowedLocals` for const-checking", "tree": {"sha": "a0cd84d7020022d343636cc5a2102966618b65e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0cd84d7020022d343636cc5a2102966618b65e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d045a17c4b032a858323f6c9bea698ee2e5920b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d045a17c4b032a858323f6c9bea698ee2e5920b7", "html_url": "https://github.com/rust-lang/rust/commit/d045a17c4b032a858323f6c9bea698ee2e5920b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d045a17c4b032a858323f6c9bea698ee2e5920b7/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d737fb032b762e69e8d809c0e042d45e08b457d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d737fb032b762e69e8d809c0e042d45e08b457d", "html_url": "https://github.com/rust-lang/rust/commit/1d737fb032b762e69e8d809c0e042d45e08b457d"}], "stats": {"total": 33, "additions": 14, "deletions": 19}, "files": [{"sha": "3e14cc6d32a671f579469fd7d6f7ce7a8e56b4c6", "filename": "src/librustc_mir/transform/check_consts/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d045a17c4b032a858323f6c9bea698ee2e5920b7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d045a17c4b032a858323f6c9bea698ee2e5920b7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=d045a17c4b032a858323f6c9bea698ee2e5920b7", "patch": "@@ -15,7 +15,7 @@ use crate::dataflow::{self as old_dataflow, generic as dataflow};\n /// `FlowSensitiveAnalysis`.\n ///\n /// This transfer does nothing when encountering an indirect assignment. Consumers should rely on\n-/// the `IndirectlyMutableLocals` dataflow pass to see if a `Local` may have become qualified via\n+/// the `MaybeMutBorrowedLocals` dataflow pass to see if a `Local` may have become qualified via\n /// an indirect assignment or function call.\n struct TransferFunction<'a, 'mir, 'tcx, Q> {\n     item: &'a Item<'mir, 'tcx>,"}, {"sha": "9fef62325f28187ce474439e7c3fadde9dd3bcd5", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d045a17c4b032a858323f6c9bea698ee2e5920b7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d045a17c4b032a858323f6c9bea698ee2e5920b7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=d045a17c4b032a858323f6c9bea698ee2e5920b7", "patch": "@@ -15,17 +15,19 @@ use rustc_span::Span;\n use std::borrow::Cow;\n use std::ops::Deref;\n \n-use self::old_dataflow::IndirectlyMutableLocals;\n use super::ops::{self, NonConstOp};\n use super::qualifs::{self, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstKind, Item, Qualif};\n use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n-use crate::dataflow::{self as old_dataflow, generic as dataflow};\n-use dataflow::Analysis;\n+use crate::dataflow::generic::{self as dataflow, Analysis};\n+use crate::dataflow::MaybeMutBorrowedLocals;\n \n+// We are using `MaybeMutBorrowedLocals` as a proxy for whether an item may have been mutated\n+// through a pointer prior to the given point. This is okay even though `MaybeMutBorrowedLocals`\n+// kills locals upon `StorageDead` because a local will never be used after a `StorageDead`.\n pub type IndirectlyMutableResults<'mir, 'tcx> =\n-    old_dataflow::DataflowResultsCursor<'mir, 'tcx, IndirectlyMutableLocals<'mir, 'tcx>>;\n+    dataflow::ResultsCursor<'mir, 'tcx, MaybeMutBorrowedLocals<'mir, 'tcx>>;\n \n struct QualifCursor<'a, 'mir, 'tcx, Q: Qualif> {\n     cursor: dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'a, 'mir, 'tcx, Q>>,\n@@ -58,7 +60,7 @@ pub struct Qualifs<'a, 'mir, 'tcx> {\n \n impl Qualifs<'a, 'mir, 'tcx> {\n     fn indirectly_mutable(&mut self, local: Local, location: Location) -> bool {\n-        self.indirectly_mutable.seek(location);\n+        self.indirectly_mutable.seek_before(location);\n         self.indirectly_mutable.get().contains(local)\n     }\n \n@@ -134,22 +136,15 @@ impl Deref for Validator<'_, 'mir, 'tcx> {\n \n impl Validator<'a, 'mir, 'tcx> {\n     pub fn new(item: &'a Item<'mir, 'tcx>) -> Self {\n+        let Item { tcx, body, def_id, param_env, .. } = *item;\n+\n         let needs_drop = QualifCursor::new(NeedsDrop, item);\n         let has_mut_interior = QualifCursor::new(HasMutInterior, item);\n \n-        let dead_unwinds = BitSet::new_empty(item.body.basic_blocks().len());\n-        let indirectly_mutable = old_dataflow::do_dataflow(\n-            item.tcx,\n-            &*item.body,\n-            item.def_id,\n-            &item.tcx.get_attrs(item.def_id),\n-            &dead_unwinds,\n-            old_dataflow::IndirectlyMutableLocals::new(item.tcx, *item.body, item.param_env),\n-            |_, local| old_dataflow::DebugFormatted::new(&local),\n-        );\n-\n-        let indirectly_mutable =\n-            old_dataflow::DataflowResultsCursor::new(indirectly_mutable, *item.body);\n+        let indirectly_mutable = MaybeMutBorrowedLocals::new_mut_only(tcx, *body, param_env)\n+            .into_engine(tcx, *body, def_id)\n+            .iterate_to_fixpoint()\n+            .into_results_cursor(*body);\n \n         let qualifs = Qualifs { needs_drop, has_mut_interior, indirectly_mutable };\n "}]}