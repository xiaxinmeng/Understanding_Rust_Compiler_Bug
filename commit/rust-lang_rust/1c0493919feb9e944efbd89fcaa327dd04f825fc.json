{"sha": "1c0493919feb9e944efbd89fcaa327dd04f825fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDQ5MzkxOWZlYjllOTQ0ZWZiZDg5ZmNhYTMyN2RkMDRmODI1ZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-29T14:11:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-29T14:11:37Z"}, "message": "auto merge of #16052 : nham/rust/fs_docs, r=brson\n\nSome of the fixes include:\r\n\r\n - fixing mismatch between the documentation and the function parameters. (i.e. documentation references `path` parameter, but it's actually called `from`, or vice versa)\r\n - A few Error sections were missing an \"if\" on the middle clause. For example, they used to be: \"This function will return an error if [Thing], [Another Thing], or if [Yet Another Thing].\" I added an \"if\" so it becomes \"This function will return an error if [Thing], if [Another Thing], or if [Yet Another Thing]\"\r\n - The error sections previously started off with 3 different phrases: \r\n\r\n     - \"This function will return an error if ...\"\r\n     - \"Will return an error if ...\"\r\n     - \"This call will return an error if ...\"\r\n\r\n  I've standardized on the first phrase.", "tree": {"sha": "5145647e32fc5b321699347f5431d6d0f493aa9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5145647e32fc5b321699347f5431d6d0f493aa9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c0493919feb9e944efbd89fcaa327dd04f825fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0493919feb9e944efbd89fcaa327dd04f825fc", "html_url": "https://github.com/rust-lang/rust/commit/1c0493919feb9e944efbd89fcaa327dd04f825fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c0493919feb9e944efbd89fcaa327dd04f825fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e2c7dec34bd87fab6bb15bb7d3d97269d4afd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e2c7dec34bd87fab6bb15bb7d3d97269d4afd3", "html_url": "https://github.com/rust-lang/rust/commit/72e2c7dec34bd87fab6bb15bb7d3d97269d4afd3"}, {"sha": "96cf01138b85ce843353ada719e75c858ea18402", "url": "https://api.github.com/repos/rust-lang/rust/commits/96cf01138b85ce843353ada719e75c858ea18402", "html_url": "https://github.com/rust-lang/rust/commit/96cf01138b85ce843353ada719e75c858ea18402"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "790fe6cb8b93af4f489f7bdc3277b0053793dd81", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1c0493919feb9e944efbd89fcaa327dd04f825fc/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0493919feb9e944efbd89fcaa327dd04f825fc/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=1c0493919feb9e944efbd89fcaa327dd04f825fc", "patch": "@@ -273,7 +273,7 @@ impl File {\n ///\n /// # Error\n ///\n-/// This function will return an error if the path points to a directory, the\n+/// This function will return an error if `path` points to a directory, if the\n /// user lacks permissions to remove the file, or if some other filesystem-level\n /// error occurs.\n pub fn unlink(path: &Path) -> IoResult<()> {\n@@ -332,8 +332,8 @@ pub fn unlink(path: &Path) -> IoResult<()> {\n ///\n /// # Error\n ///\n-/// This call will return an error if the user lacks the requisite permissions\n-/// to perform a `stat` call on the given path or if there is no entry in the\n+/// This function will return an error if the user lacks the requisite permissions\n+/// to perform a `stat` call on the given `path` or if there is no entry in the\n /// filesystem at the provided path.\n pub fn stat(path: &Path) -> IoResult<FileStat> {\n     let err = match LocalIo::maybe_raise(|io| io.fs_stat(&path.to_c_str())) {\n@@ -415,9 +415,9 @@ fn from_rtio(s: rtio::FileStat) -> FileStat {\n ///\n /// # Error\n ///\n-/// Will return an error if the provided `path` doesn't exist, the process lacks\n-/// permissions to view the contents, or if some other intermittent I/O error\n-/// occurs.\n+/// This function will return an error if the provided `from` doesn't exist, if\n+/// the process lacks permissions to view the contents, or if some other\n+/// intermittent I/O error occurs.\n pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n     let err = LocalIo::maybe_raise(|io| {\n         io.fs_rename(&from.to_c_str(), &to.to_c_str())\n@@ -444,8 +444,8 @@ pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n ///\n /// # Error\n ///\n-/// Will return an error in the following situations, but is not limited to\n-/// just these cases:\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n ///\n /// * The `from` path is not a file\n /// * The `from` file does not exist\n@@ -503,9 +503,9 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n ///\n /// # Error\n ///\n-/// If this function encounters an I/O error, it will return an `Err` value.\n-/// Some possible error situations are not having the permission to\n-/// change the attributes of a file or the file not existing.\n+/// This function will return an error if the provided `path` doesn't exist, if\n+/// the process lacks permissions to change the attributes of the file, or if\n+/// some other I/O error is encountered.\n pub fn chmod(path: &Path, mode: io::FilePermission) -> IoResult<()> {\n     let err = LocalIo::maybe_raise(|io| {\n         io.fs_chmod(&path.to_c_str(), mode.bits() as uint)\n@@ -577,8 +577,8 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n ///\n /// # Error\n ///\n-/// This call will return an error if the user lacks permissions to make a new\n-/// directory at the provided path, or if the directory already exists.\n+/// This function will return an error if the user lacks permissions to make a\n+/// new directory at the provided `path`, or if the directory already exists.\n pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n     let err = LocalIo::maybe_raise(|io| {\n         io.fs_mkdir(&path.to_c_str(), mode.bits() as uint)\n@@ -602,8 +602,8 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n ///\n /// # Error\n ///\n-/// This call will return an error if the user lacks permissions to remove the\n-/// directory at the provided path, or if the directory isn't empty.\n+/// This function will return an error if the user lacks permissions to remove\n+/// the directory at the provided `path`, or if the directory isn't empty.\n pub fn rmdir(path: &Path) -> IoResult<()> {\n     let err = LocalIo::maybe_raise(|io| {\n         io.fs_rmdir(&path.to_c_str())\n@@ -640,9 +640,9 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n ///\n /// # Error\n ///\n-/// Will return an error if the provided `from` doesn't exist, the process lacks\n-/// permissions to view the contents or if the `path` points at a non-directory\n-/// file\n+/// This function will return an error if the provided `path` doesn't exist, if\n+/// the process lacks permissions to view the contents or if the `path` points\n+/// at a non-directory file\n pub fn readdir(path: &Path) -> IoResult<Vec<Path>> {\n     let err = LocalIo::maybe_raise(|io| {\n         Ok(try!(io.fs_readdir(&path.to_c_str(), 0)).move_iter().map(|a| {\n@@ -697,8 +697,7 @@ impl Iterator<Path> for Directories {\n ///\n /// # Error\n ///\n-/// This function will return an `Err` value if an error happens, see\n-/// `fs::mkdir` for more information about error conditions and performance.\n+/// See `fs::mkdir`.\n pub fn mkdir_recursive(path: &Path, mode: FilePermission) -> IoResult<()> {\n     // tjc: if directory exists but with different permissions,\n     // should we return false?\n@@ -735,8 +734,7 @@ pub fn mkdir_recursive(path: &Path, mode: FilePermission) -> IoResult<()> {\n ///\n /// # Error\n ///\n-/// This function will return an `Err` value if an error happens. See\n-/// `file::unlink` and `fs::readdir` for possible error conditions.\n+/// See `file::unlink` and `fs::readdir`\n pub fn rmdir_recursive(path: &Path) -> IoResult<()> {\n     let mut rm_stack = Vec::new();\n     rm_stack.push(path.clone());"}]}