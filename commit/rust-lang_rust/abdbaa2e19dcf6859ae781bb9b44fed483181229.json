{"sha": "abdbaa2e19dcf6859ae781bb9b44fed483181229", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZGJhYTJlMTlkY2Y2ODU5YWU3ODFiYjliNDRmZWQ0ODMxODEyMjk=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-06-18T11:01:23Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-06-21T17:59:57Z"}, "message": "Correctly set return type attributes on foreign function declarations\n\nThe ArgType type gives us a generic way to specify an attribute for a\ntype to ensure ABI conformance for foreign functions. But the code that\nactually sets the argument attributes in the function declaration\nonly sets the attribute for the return type when the type is indirect.\n\nSince LLVMAddAttribute() doesn't allow to set attributes on the return\ntype, we have to use LLVMAddFunctionAttribute() instead.\n\nThis didn't cause problems yet, because currently only some indirect\ntypes require attributes to be set.", "tree": {"sha": "876ec021b8cd312ce274e5032e8f6c1380c487f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/876ec021b8cd312ce274e5032e8f6c1380c487f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abdbaa2e19dcf6859ae781bb9b44fed483181229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abdbaa2e19dcf6859ae781bb9b44fed483181229", "html_url": "https://github.com/rust-lang/rust/commit/abdbaa2e19dcf6859ae781bb9b44fed483181229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abdbaa2e19dcf6859ae781bb9b44fed483181229/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f556c8cbd8af182a9dd871a4a36692a0dba7cc2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f556c8cbd8af182a9dd871a4a36692a0dba7cc2e", "html_url": "https://github.com/rust-lang/rust/commit/f556c8cbd8af182a9dd871a4a36692a0dba7cc2e"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "a649ba98671c17d341365abb32ba5d9cfabb817f", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/abdbaa2e19dcf6859ae781bb9b44fed483181229/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdbaa2e19dcf6859ae781bb9b44fed483181229/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=abdbaa2e19dcf6859ae781bb9b44fed483181229", "patch": "@@ -934,22 +934,17 @@ pub fn lltype_for_foreign_fn(ccx: &CrateContext, ty: ty::t) -> Type {\n \n fn add_argument_attributes(tys: &ForeignTypes,\n                            llfn: ValueRef) {\n-    let mut i = 0;\n-\n-    if tys.fn_ty.ret_ty.is_indirect() {\n-        match tys.fn_ty.ret_ty.attr {\n-            Some(attr) => {\n-                let llarg = get_param(llfn, i);\n-                unsafe {\n-                    llvm::LLVMAddAttribute(llarg, attr as c_uint);\n-                }\n-            }\n-            None => {}\n-        }\n+    let mut i = if tys.fn_ty.ret_ty.is_indirect() { 1 } else { 0 };\n \n-        i += 1;\n+    match tys.fn_ty.ret_ty.attr {\n+        Some(attr) => unsafe {\n+            llvm::LLVMAddFunctionAttribute(llfn, i as c_uint, attr as u64);\n+        },\n+        None => {}\n     }\n \n+    i += 1;\n+\n     for &arg_ty in tys.fn_ty.arg_tys.iter() {\n         if arg_ty.is_ignore() {\n             continue;\n@@ -958,12 +953,9 @@ fn add_argument_attributes(tys: &ForeignTypes,\n         if arg_ty.pad.is_some() { i += 1; }\n \n         match arg_ty.attr {\n-            Some(attr) => {\n-                let llarg = get_param(llfn, i);\n-                unsafe {\n-                    llvm::LLVMAddAttribute(llarg, attr as c_uint);\n-                }\n-            }\n+            Some(attr) => unsafe {\n+                llvm::LLVMAddFunctionAttribute(llfn, i as c_uint, attr as u64);\n+            },\n             None => ()\n         }\n "}]}