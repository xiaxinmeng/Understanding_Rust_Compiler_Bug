{"sha": "e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzODIxMGIxOTVhNGFhZjkxZjNkYWEzN2RmY2ZkNzA1OWJkMjJkZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-08T19:05:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-08T19:05:54Z"}, "message": "Auto merge of #28913 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #28621, #28872, #28893, #28904, #28905, #28908, #28910\n- Failed merges: #28906", "tree": {"sha": "f51b82cc8dd65e299acfee19df764623f060271b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51b82cc8dd65e299acfee19df764623f060271b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "html_url": "https://github.com/rust-lang/rust/commit/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c4b51dd6771a0dd61639092ae5b349082b6eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c4b51dd6771a0dd61639092ae5b349082b6eb0", "html_url": "https://github.com/rust-lang/rust/commit/64c4b51dd6771a0dd61639092ae5b349082b6eb0"}, {"sha": "1625c133de832c8350d5e6c9d39510959ffbe5e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1625c133de832c8350d5e6c9d39510959ffbe5e6", "html_url": "https://github.com/rust-lang/rust/commit/1625c133de832c8350d5e6c9d39510959ffbe5e6"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "0fd3070d3bd80cfb7710236c12f15b6839046843", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "patch": "@@ -258,7 +258,7 @@ symbol : \"::\" | \"->\"\n        | ',' | ';' ;\n ```\n \n-Symbols are a general class of printable [token](#tokens) that play structural\n+Symbols are a general class of printable [tokens](#tokens) that play structural\n roles in a variety of grammar productions. They are catalogued here for\n completeness as the set of remaining miscellaneous printable tokens that do not\n otherwise appear as [unary operators](#unary-operator-expressions), [binary"}, {"sha": "c85b7973ee752d2de2ad04c256aaf925e94951c1", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "patch": "@@ -418,7 +418,7 @@ The two values of the boolean type are written `true` and `false`.\n \n ### Symbols\n \n-Symbols are a general class of printable [token](#tokens) that play structural\n+Symbols are a general class of printable [tokens](#tokens) that play structural\n roles in a variety of grammar productions. They are catalogued here for\n completeness as the set of remaining miscellaneous printable tokens that do not\n otherwise appear as [unary operators](#unary-operator-expressions), [binary"}, {"sha": "8f4a7a439553b8d4cf7f52ea7c4c42f50905fee0", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "patch": "@@ -23,6 +23,31 @@ match x {\n \n This prints `one`.\n \n+There\u2019s one pitfall with patterns: like anything that introduces a new binding,\n+they introduce shadowing. For example:\n+\n+```rust\n+let x = 'x';\n+let c = 'c';\n+\n+match c {\n+    x => println!(\"x: {} c: {}\", x, c),\n+}\n+\n+println!(\"x: {}\", x)\n+```\n+\n+This prints:\n+\n+```text\n+x: c c: c\n+x: x\n+```\n+\n+In other words, `x =>` matches the pattern and introduces a new binding named\n+`x` that\u2019s in scope for the match arm. Because we already have a binding named\n+`x`, this new `x` shadows it.\n+\n # Multiple patterns\n \n You can match multiple patterns with `|`:"}, {"sha": "27debf86e396ba2ba986b679efab8853eca4cf5d", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "patch": "@@ -492,3 +492,32 @@ If we forget to implement `Foo`, Rust will tell us:\n ```text\n error: the trait `main::Foo` is not implemented for the type `main::Baz` [E0277]\n ```\n+\n+# Deriving\n+\n+Implementing traits like `Debug` and `Default` over and over again can become\n+quite tedious. For that reason, Rust provides an [attribute][attributes] that\n+allows you to let Rust automatically implement traits for you:\n+\n+```rust\n+#[derive(Debug)]\n+struct Foo;\n+\n+fn main() {\n+    println!(\"{:?}\", Foo);\n+}\n+```\n+\n+[attributes]: attributes.html\n+\n+However, deriving is limited to a certain set of traits:\n+\n+- [`Clone`](../core/clone/trait.Clone.html)\n+- [`Copy`](../core/marker/trait.Copy.html)\n+- [`Debug`](../core/fmt/trait.Debug.html)\n+- [`Default`](../core/default/trait.Default.html)\n+- [`Eq`](../core/cmp/trait.Eq.html)\n+- [`Hash`](../core/hash/trait.Hash.html)\n+- [`Ord`](../core/cmp/trait.Ord.html)\n+- [`PartialEq`](../core/cmp/trait.PartialEq.html)\n+- [`PartialOrd`](../core/cmp/trait.PartialOrd.html)"}, {"sha": "3554325d0dbfc94c7701f37f4efd8b79db9d018a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "patch": "@@ -935,7 +935,7 @@ pub trait Iterator {\n \n     /// Creates an iterator that clones the elements it yields.\n     ///\n-    /// This is useful for converting an Iterator<&T> to an Iterator<T>,\n+    /// This is useful for converting an `Iterator<&T>` to an`Iterator<T>`,\n     /// so it's a more convenient form of `map(|&x| x)`.\n     ///\n     /// # Examples"}, {"sha": "e4f033efb58e3e83251d6c177d7f89dbb57bc8ec", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "patch": "@@ -285,7 +285,12 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                       -> Compilation {\n         match matches.opt_str(\"explain\") {\n             Some(ref code) => {\n-                match descriptions.find_description(&code[..]) {\n+                let normalised = if !code.starts_with(\"E\") {\n+                    format!(\"E{0:0>4}\", code)\n+                } else {\n+                    code.to_string()\n+                };\n+                match descriptions.find_description(&normalised) {\n                     Some(ref description) => {\n                         // Slice off the leading newline and print.\n                         print!(\"{}\", &description[1..]);"}, {"sha": "4746819f6a901535920f63785bba62081df5f2b1", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "patch": "@@ -1308,8 +1308,8 @@ extern \"rust-intrinsic\" {\n \"##,\n \n E0101: r##\"\n-You hit this error because the compiler the compiler lacks information\n-to determine a type for this expression. Erroneous code example:\n+You hit this error because the compiler lacks the information to\n+determine a type for this expression. Erroneous code example:\n \n ```\n fn main() {"}]}