{"sha": "16bf4f5e1b50773c6b4ec7b7524876440db69d1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YmY0ZjVlMWI1MDc3M2M2YjRlYzdiNzUyNDg3NjQ0MGRiNjlkMWI=", "commit": {"author": {"name": "Thomas Etter", "email": "thomas.etter@auterion.com", "date": "2019-11-19T20:35:07Z"}, "committer": {"name": "Thomas Etter", "email": "thomas.etter@auterion.com", "date": "2019-11-19T20:44:45Z"}, "message": "Simplify if else as suggested in PR feedback", "tree": {"sha": "22229535794a16673ad37c38bc337a609609e92d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22229535794a16673ad37c38bc337a609609e92d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16bf4f5e1b50773c6b4ec7b7524876440db69d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16bf4f5e1b50773c6b4ec7b7524876440db69d1b", "html_url": "https://github.com/rust-lang/rust/commit/16bf4f5e1b50773c6b4ec7b7524876440db69d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16bf4f5e1b50773c6b4ec7b7524876440db69d1b/comments", "author": null, "committer": null, "parents": [{"sha": "48a86e0b2cdfaba5a2a684911178d717067e4d28", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a86e0b2cdfaba5a2a684911178d717067e4d28", "html_url": "https://github.com/rust-lang/rust/commit/48a86e0b2cdfaba5a2a684911178d717067e4d28"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "bfabe1722dbedc53d2c693a8a06da24a06d3faa3", "filename": "src/libtest/test_result.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/16bf4f5e1b50773c6b4ec7b7524876440db69d1b/src%2Flibtest%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16bf4f5e1b50773c6b4ec7b7524876440db69d1b/src%2Flibtest%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftest_result.rs?ref=16bf4f5e1b50773c6b4ec7b7524876440db69d1b", "patch": "@@ -42,29 +42,25 @@ pub fn calc_result<'a>(\n                 .map(|e| &**e)\n                 .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e));\n \n-            if maybe_panic_str\n-                .map(|e| e.contains(msg))\n-                .unwrap_or(false)\n-            {\n+            if maybe_panic_str.map(|e| e.contains(msg)).unwrap_or(false) {\n                 TestResult::TrOk\n-            } else {\n-                if desc.allow_fail {\n-                    TestResult::TrAllowedFail\n-                } else {\n-                    if let Some(panic_str) = maybe_panic_str{\n-                        TestResult::TrFailedMsg(\n-                            format!(r#\"panic did not contain expected string\n+            } else if desc.allow_fail {\n+                TestResult::TrAllowedFail\n+            } else if let Some(panic_str) = maybe_panic_str {\n+                TestResult::TrFailedMsg(format!(\n+                    r#\"panic did not contain expected string\n       panic message: `{:?}`,\n- expected substring: `{:?}`\"#, panic_str, &*msg)\n-                        )\n-                    } else {\n-                        TestResult::TrFailedMsg(\n-                            format!(r#\"expected panic with string value,\n+ expected substring: `{:?}`\"#,\n+                    panic_str, msg\n+                ))\n+            } else {\n+                TestResult::TrFailedMsg(format!(\n+                    r#\"expected panic with string value,\n  found non-string value: `{:?}`\n-     expected substring: `{:?}`\"#, (**err).type_id(), &*msg)\n-                        )\n-                    }\n-                }\n+     expected substring: `{:?}`\"#,\n+                    (**err).type_id(),\n+                    msg\n+                ))\n             }\n         }\n         (&ShouldPanic::Yes, Ok(())) => {"}]}