{"sha": "339618a7f9096507667139364450c9be40768d17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTYxOGE3ZjkwOTY1MDc2NjcxMzkzNjQ0NTBjOWJlNDA3NjhkMTc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-24T20:54:24Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-25T00:24:31Z"}, "message": "convert io wrapper records into structs", "tree": {"sha": "db32cc861fc69cb03269de07c57d991094f0e55a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db32cc861fc69cb03269de07c57d991094f0e55a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339618a7f9096507667139364450c9be40768d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339618a7f9096507667139364450c9be40768d17", "html_url": "https://github.com/rust-lang/rust/commit/339618a7f9096507667139364450c9be40768d17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339618a7f9096507667139364450c9be40768d17/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b17e7a7779fdd1b2086c154fae9a4b0d25e3afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b17e7a7779fdd1b2086c154fae9a4b0d25e3afd", "html_url": "https://github.com/rust-lang/rust/commit/9b17e7a7779fdd1b2086c154fae9a4b0d25e3afd"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "fedcb9511960e34152f1e047118824e77710be73", "filename": "src/libcore/io.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/339618a7f9096507667139364450c9be40768d17/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339618a7f9096507667139364450c9be40768d17/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=339618a7f9096507667139364450c9be40768d17", "patch": "@@ -455,10 +455,15 @@ impl *libc::FILE: Reader {\n     }\n }\n \n+struct Wrapper<T, C> {\n+    base: T,\n+    cleanup: C,\n+}\n+\n // A forwarding impl of reader that also holds on to a resource for the\n // duration of its lifetime.\n // FIXME there really should be a better way to do this // #2004\n-impl<T: Reader, C> {base: T, cleanup: C}: Reader {\n+impl<R: Reader, C> Wrapper<R, C>: Reader {\n     fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n         self.base.read(bytes, len)\n     }\n@@ -487,7 +492,7 @@ pub fn FILERes(f: *libc::FILE) -> FILERes {\n \n pub fn FILE_reader(f: *libc::FILE, cleanup: bool) -> Reader {\n     if cleanup {\n-        {base: f, cleanup: FILERes(f)} as Reader\n+        Wrapper { base: f, cleanup: FILERes(f) } as Reader\n     } else {\n         f as Reader\n     }\n@@ -587,7 +592,7 @@ pub trait Writer {\n     fn get_type(&self) -> WriterType;\n }\n \n-impl<T: Writer, C> {base: T, cleanup: C}: Writer {\n+impl<W: Writer, C> Wrapper<W, C>: Writer {\n     fn write(&self, bs: &[const u8]) { self.base.write(bs); }\n     fn seek(&self, off: int, style: SeekStyle) { self.base.seek(off, style); }\n     fn tell(&self) -> uint { self.base.tell() }\n@@ -639,7 +644,7 @@ impl *libc::FILE: Writer {\n \n pub fn FILE_writer(f: *libc::FILE, cleanup: bool) -> Writer {\n     if cleanup {\n-        {base: f, cleanup: FILERes(f)} as Writer\n+        Wrapper { base: f, cleanup: FILERes(f) } as Writer\n     } else {\n         f as Writer\n     }\n@@ -696,7 +701,7 @@ pub fn FdRes(fd: fd_t) -> FdRes {\n \n pub fn fd_writer(fd: fd_t, cleanup: bool) -> Writer {\n     if cleanup {\n-        {base: fd, cleanup: FdRes(fd)} as Writer\n+        Wrapper { base: fd, cleanup: FdRes(fd) } as Writer\n     } else {\n         fd as Writer\n     }"}]}