{"sha": "14d90deab9cbbc1bfb45af52f9dc9fbce945da91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDkwZGVhYjljYmJjMWJmYjQ1YWY1MmY5ZGM5ZmJjZTk0NWRhOTE=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-23T10:17:15Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Don't duplicate macro for optional arg.", "tree": {"sha": "6b831afce64007ae4fd8cf264135198554132da4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b831afce64007ae4fd8cf264135198554132da4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d90deab9cbbc1bfb45af52f9dc9fbce945da91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d90deab9cbbc1bfb45af52f9dc9fbce945da91", "html_url": "https://github.com/rust-lang/rust/commit/14d90deab9cbbc1bfb45af52f9dc9fbce945da91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d90deab9cbbc1bfb45af52f9dc9fbce945da91/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0bacc694d7d8175804bb6f690cb846bfa4a9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0bacc694d7d8175804bb6f690cb846bfa4a9ee", "html_url": "https://github.com/rust-lang/rust/commit/bd0bacc694d7d8175804bb6f690cb846bfa4a9ee"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "0b6422316ead7ed1d03b5074b6fc60d22dc90561", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14d90deab9cbbc1bfb45af52f9dc9fbce945da91/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d90deab9cbbc1bfb45af52f9dc9fbce945da91/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=14d90deab9cbbc1bfb45af52f9dc9fbce945da91", "patch": "@@ -24,43 +24,25 @@ use super::{\n };\n \n macro_rules! throw_validation_failure {\n-    ($what:expr, $where:expr, $details:expr) => {{\n-        let mut msg = format!(\"encountered {}\", $what);\n-        let where_ = &$where;\n-        if !where_.is_empty() {\n-            msg.push_str(\" at \");\n-            write_path(&mut msg, where_);\n-        }\n-        write!(&mut msg, \", but expected {}\", $details).unwrap();\n-        throw_ub!(ValidationFailure(msg))\n-    }};\n-    ($what:expr, $where:expr) => {{\n+    ($what:expr, $where:expr $(, $details:expr )?) => {{\n         let mut msg = format!(\"encountered {}\", $what);\n         let where_ = &$where;\n         if !where_.is_empty() {\n             msg.push_str(\" at \");\n             write_path(&mut msg, where_);\n         }\n+        $( write!(&mut msg, \", but expected {}\", $details).unwrap(); )?\n         throw_ub!(ValidationFailure(msg))\n     }};\n }\n \n macro_rules! try_validation {\n-    ($e:expr, $what:expr, $where:expr, $details:expr) => {{\n-        match $e {\n-            Ok(x) => x,\n-            // We re-throw the error, so we are okay with allocation:\n-            // this can only slow down builds that fail anyway.\n-            Err(_) => throw_validation_failure!($what, $where, $details),\n-        }\n-    }};\n-\n-    ($e:expr, $what:expr, $where:expr) => {{\n+    ($e:expr, $what:expr, $where:expr $(, $details:expr )?) => {{\n         match $e {\n             Ok(x) => x,\n-            // We re-throw the error, so we are okay with allocation:\n-            // this can only slow down builds that fail anyway.\n-            Err(_) => throw_validation_failure!($what, $where),\n+            // We catch the error and turn it into a validation failure. We are okay with\n+            // allocation here as this can only slow down builds that fail anyway.\n+            Err(_) => throw_validation_failure!($what, $where $(, $details)?),\n         }\n     }};\n }"}]}