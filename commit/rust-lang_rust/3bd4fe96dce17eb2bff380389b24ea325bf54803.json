{"sha": "3bd4fe96dce17eb2bff380389b24ea325bf54803", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDRmZTk2ZGNlMTdlYjJiZmYzODAzODliMjRlYTMyNWJmNTQ4MDM=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-10-08T02:44:52Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-10-08T02:50:48Z"}, "message": "Remove methodowner & fix formatting", "tree": {"sha": "1f9b7b0ac741f5ab9ac83d337c827d51bae58b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f9b7b0ac741f5ab9ac83d337c827d51bae58b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd4fe96dce17eb2bff380389b24ea325bf54803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd4fe96dce17eb2bff380389b24ea325bf54803", "html_url": "https://github.com/rust-lang/rust/commit/3bd4fe96dce17eb2bff380389b24ea325bf54803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd4fe96dce17eb2bff380389b24ea325bf54803/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af1dd733760c51abadda8f2bd20139e11ebba04", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af1dd733760c51abadda8f2bd20139e11ebba04", "html_url": "https://github.com/rust-lang/rust/commit/8af1dd733760c51abadda8f2bd20139e11ebba04"}], "stats": {"total": 80, "additions": 27, "deletions": 53}, "files": [{"sha": "650b4fa40cec48995c67f53551a5bcacfe965412", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=3bd4fe96dce17eb2bff380389b24ea325bf54803", "patch": "@@ -35,7 +35,7 @@ use hir_ty::{\n     traits::SolutionVariables,\n     ApplicationTy, BoundVar, CallableDefId, Canonical, DebruijnIndex, FnSig, GenericPredicate,\n     InEnvironment, Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, Ty,\n-    TyDefId, TyKind, TypeCtor, TyLoweringContext,\n+    TyDefId, TyKind, TypeCtor,\n };\n use rustc_hash::FxHashSet;\n use stdx::impl_from;\n@@ -186,15 +186,6 @@ impl_from!(\n     for ModuleDef\n );\n \n-impl From<MethodOwner> for ModuleDef {\n-    fn from(mowner: MethodOwner) -> Self {\n-        match mowner {\n-            MethodOwner::Trait(t) => t.into(),\n-            MethodOwner::Adt(t) => t.into(),\n-        }\n-    }\n-}\n-\n impl From<VariantDef> for ModuleDef {\n     fn from(var: VariantDef) -> Self {\n         match var {\n@@ -778,36 +769,8 @@ impl Function {\n     pub fn has_body(self, db: &dyn HirDatabase) -> bool {\n         db.function_data(self.id).has_body\n     }\n-\n-    /// If this function is a method, the trait or type where it is declared.\n-    pub fn method_owner(self, db: &dyn HirDatabase) -> Option<MethodOwner> {\n-        match self.as_assoc_item(db).map(|assoc| assoc.container(db)) {\n-            Some(AssocItemContainer::Trait(t)) => Some(t.into()),\n-            Some(AssocItemContainer::ImplDef(imp)) => {\n-                let resolver = ModuleId::from(imp.module(db)).resolver(db.upcast());\n-                let ctx = TyLoweringContext::new(db, &resolver);\n-                let adt = Ty::from_hir(\n-                    &ctx,\n-                    &imp.target_trait(db).unwrap_or_else(|| imp.target_type(db)),\n-                )\n-                .as_adt()\n-                .map(|t| t.0)\n-                .unwrap();\n-                Some(Adt::from(adt).into())\n-            }\n-            None => None,\n-        }\n-    }\n }\n \n-#[derive(Debug)]\n-pub enum MethodOwner {\n-    Trait(Trait),\n-    Adt(Adt),\n-}\n-\n-impl_from!(Trait, Adt for MethodOwner);\n-\n // Note: logically, this belongs to `hir_ty`, but we are not using it there yet.\n pub enum Access {\n     Shared,"}, {"sha": "4094a76cbdba1076898cd4c76f5b1f04ebcfa613", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3bd4fe96dce17eb2bff380389b24ea325bf54803", "patch": "@@ -35,8 +35,8 @@ pub use crate::{\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n         Crate, CrateDependency, DefWithBody, Enum, EnumVariant, Field, FieldSource, Function,\n-        GenericDef, HasVisibility, ImplDef, Local, MacroDef, MethodOwner, Module, ModuleDef,\n-        ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n+        GenericDef, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static,\n+        Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},"}, {"sha": "06af36b73e1cd33a451801baf7f384e252b90eac", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=3bd4fe96dce17eb2bff380389b24ea325bf54803", "patch": "@@ -3,13 +3,14 @@\n use std::iter::once;\n \n use itertools::Itertools;\n-use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n use pulldown_cmark::{CowStr, Event, LinkType, Options, Parser, Tag};\n+use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n use url::Url;\n \n use hir::{\n     db::{DefDatabase, HirDatabase},\n-    Adt, AsName, AssocItem, Crate, Field, HasAttrs, ItemInNs, ModuleDef, AssocItemContainer, AsAssocItem\n+    Adt, AsAssocItem, AsName, AssocItem, AssocItemContainer, Crate, Field, HasAttrs, ItemInNs,\n+    ModuleDef,\n };\n use ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n@@ -97,18 +98,23 @@ pub fn remove_links(markdown: &str) -> String {\n // BUG: For Option::Some\n // Returns https://doc.rust-lang.org/nightly/core/prelude/v1/enum.Option.html#variant.Some\n // Instead of https://doc.rust-lang.org/nightly/core/option/enum.Option.html\n-// This could be worked around by turning the `EnumVariant` into `Enum` before attempting resolution,\n-// but it's really just working around the problem. Ideally we need to implement a slightly different\n-// version of import map which follows the same process as rustdoc. Otherwise there'll always be some\n-// edge cases where we select the wrong import path.\n+//\n+// This should cease to be a problem if RFC2988 (Stable Rustdoc URLs) is implemented\n+// https://github.com/rust-lang/rfcs/pull/2988\n fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n     // Get the outermost definition for the moduledef. This is used to resolve the public path to the type,\n     // then we can join the method, field, etc onto it if required.\n     let target_def: ModuleDef = match definition {\n         Definition::ModuleDef(moddef) => match moddef {\n-            ModuleDef::Function(f) => {\n-                f.method_owner(db).map(|mowner| mowner.into()).unwrap_or_else(|| f.clone().into())\n-            }\n+            ModuleDef::Function(f) => f\n+                .as_assoc_item(db)\n+                .and_then(|assoc| match assoc.container(db) {\n+                    AssocItemContainer::Trait(t) => Some(t.into()),\n+                    AssocItemContainer::ImplDef(impld) => {\n+                        impld.target_ty(db).as_adt().map(|adt| adt.into())\n+                    }\n+                })\n+                .unwrap_or_else(|| f.clone().into()),\n             moddef => moddef,\n         },\n         Definition::Field(f) => f.parent_def(db).into(),\n@@ -211,7 +217,10 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n }\n \n /// Retrieve a link to documentation for the given symbol.\n-pub(crate) fn external_docs(db: &RootDatabase, position: &FilePosition) -> Option<DocumentationLink> {\n+pub(crate) fn external_docs(\n+    db: &RootDatabase,\n+    position: &FilePosition,\n+) -> Option<DocumentationLink> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n     let token = pick_best(file.token_at_offset(position.offset))?;\n@@ -392,8 +401,10 @@ fn get_symbol_fragment(db: &dyn HirDatabase, field_or_assoc: &FieldOrAssocItem)\n         FieldOrAssocItem::Field(field) => format!(\"#structfield.{}\", field.name(db)),\n         FieldOrAssocItem::AssocItem(assoc) => match assoc {\n             AssocItem::Function(function) => {\n-                let is_trait_method =\n-                    matches!(function.as_assoc_item(db).map(|assoc| assoc.container(db)), Some(AssocItemContainer::Trait(..)));\n+                let is_trait_method = matches!(\n+                    function.as_assoc_item(db).map(|assoc| assoc.container(db)),\n+                    Some(AssocItemContainer::Trait(..))\n+                );\n                 // This distinction may get more complicated when specialisation is available.\n                 // Rustdoc makes this decision based on whether a method 'has defaultness'.\n                 // Currently this is only the case for provided trait methods."}, {"sha": "6290b35bd8949b56639d45393edc1f402b5d65bf", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4fe96dce17eb2bff380389b24ea325bf54803/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=3bd4fe96dce17eb2bff380389b24ea325bf54803", "patch": "@@ -14,8 +14,8 @@ use test_utils::mark;\n \n use crate::{\n     display::{macro_label, ShortLabel, ToNav, TryToNav},\n-    markdown_remove::remove_markdown,\n     doc_links::{remove_links, rewrite_links},\n+    markdown_remove::remove_markdown,\n     markup::Markup,\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,"}]}