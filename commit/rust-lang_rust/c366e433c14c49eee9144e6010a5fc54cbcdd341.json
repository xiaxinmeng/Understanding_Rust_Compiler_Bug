{"sha": "c366e433c14c49eee9144e6010a5fc54cbcdd341", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjZlNDMzYzE0YzQ5ZWVlOTE0NGU2MDEwYTVmYzU0Y2JjZGQzNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-13T21:29:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-13T21:29:00Z"}, "message": "auto merge of #20957 : Ms2ger/rust/closures, r=alexcrichton\n\nReturning the vectors directly makes the code a lot cleaner.", "tree": {"sha": "58d851401afbf237f96d6a913220b25eb2255d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58d851401afbf237f96d6a913220b25eb2255d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c366e433c14c49eee9144e6010a5fc54cbcdd341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c366e433c14c49eee9144e6010a5fc54cbcdd341", "html_url": "https://github.com/rust-lang/rust/commit/c366e433c14c49eee9144e6010a5fc54cbcdd341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c366e433c14c49eee9144e6010a5fc54cbcdd341/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd1e6235dd241939475f79c8f58a455f5996690", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd1e6235dd241939475f79c8f58a455f5996690", "html_url": "https://github.com/rust-lang/rust/commit/4fd1e6235dd241939475f79c8f58a455f5996690"}, {"sha": "756466bfd0fd457623378ab461164dbaaa9ce971", "url": "https://api.github.com/repos/rust-lang/rust/commits/756466bfd0fd457623378ab461164dbaaa9ce971", "html_url": "https://github.com/rust-lang/rust/commit/756466bfd0fd457623378ab461164dbaaa9ce971"}], "stats": {"total": 97, "additions": 30, "deletions": 67}, "files": [{"sha": "d95000ece5ae6f3397645c8b87fddfb72e30812f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c366e433c14c49eee9144e6010a5fc54cbcdd341", "patch": "@@ -774,9 +774,8 @@ impl LintPass for UnusedResults {\n                         warned |= check_must_use(cx, &it.attrs[], s.span);\n                     }\n                 } else {\n-                    csearch::get_item_attrs(&cx.sess().cstore, did, |attrs| {\n-                        warned |= check_must_use(cx, &attrs[], s.span);\n-                    });\n+                    let attrs = csearch::get_item_attrs(&cx.sess().cstore, did);\n+                    warned |= check_must_use(cx, &attrs[], s.span);\n                 }\n             }\n             _ => {}"}, {"sha": "0bbd11bea0a48e0daaee8a8e5b8da9b0fdef911b", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=c366e433c14c49eee9144e6010a5fc54cbcdd341", "patch": "@@ -203,13 +203,11 @@ pub fn get_methods_if_impl(cstore: &cstore::CStore,\n     decoder::get_methods_if_impl(cstore.intr.clone(), &*cdata, def.node)\n }\n \n-pub fn get_item_attrs<F>(cstore: &cstore::CStore,\n-                         def_id: ast::DefId,\n-                         f: F) where\n-    F: FnOnce(Vec<ast::Attribute>),\n-{\n+pub fn get_item_attrs(cstore: &cstore::CStore,\n+                      def_id: ast::DefId)\n+                      -> Vec<ast::Attribute> {\n     let cdata = cstore.get_crate_data(def_id.krate);\n-    decoder::get_item_attrs(&*cdata, def_id.node, f)\n+    decoder::get_item_attrs(&*cdata, def_id.node)\n }\n \n pub fn get_struct_fields(cstore: &cstore::CStore,"}, {"sha": "dfbff7156886d42ce45f9e15eac2a02c8de51bd1", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c366e433c14c49eee9144e6010a5fc54cbcdd341", "patch": "@@ -1025,18 +1025,16 @@ pub fn get_tuple_struct_definition_if_ctor(cdata: Cmd,\n     ret\n }\n \n-pub fn get_item_attrs<F>(cdata: Cmd,\n-                         orig_node_id: ast::NodeId,\n-                         f: F) where\n-    F: FnOnce(Vec<ast::Attribute>),\n-{\n+pub fn get_item_attrs(cdata: Cmd,\n+                      orig_node_id: ast::NodeId)\n+                      -> Vec<ast::Attribute> {\n     // The attributes for a tuple struct are attached to the definition, not the ctor;\n     // we assume that someone passing in a tuple struct ctor is actually wanting to\n     // look at the definition\n     let node_id = get_tuple_struct_definition_if_ctor(cdata, orig_node_id);\n     let node_id = node_id.map(|x| x.node).unwrap_or(orig_node_id);\n     let item = lookup_item(node_id, cdata.data());\n-    f(get_attributes(item));\n+    get_attributes(item)\n }\n \n pub fn get_struct_field_attrs(cdata: Cmd) -> HashMap<ast::NodeId, Vec<ast::Attribute>> {"}, {"sha": "e9ef214543d6e738a51fde00796c785f1991ec0a", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=c366e433c14c49eee9144e6010a5fc54cbcdd341", "patch": "@@ -70,7 +70,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                      span: Span) -> Option<String> {\n     let def_id = trait_ref.def_id;\n     let mut report = None;\n-    ty::each_attr(infcx.tcx, def_id, |item| {\n+    for item in ty::get_attrs(infcx.tcx, def_id).iter() {\n         if item.check_name(\"rustc_on_unimplemented\") {\n             let err_sp = if item.meta().span == DUMMY_SP {\n                 span\n@@ -136,11 +136,9 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                                  eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\",\n                                                  trait_str).as_slice());\n             }\n-            false\n-        } else {\n-            true\n+            break;\n         }\n-    });\n+    }\n     report\n }\n "}, {"sha": "236aa3818c77acc2f1b1c04e98b77118fa0d2bd5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c366e433c14c49eee9144e6010a5fc54cbcdd341", "patch": "@@ -68,14 +68,15 @@ use util::nodemap::{NodeMap, NodeSet, DefIdMap, DefIdSet};\n use util::nodemap::{FnvHashMap};\n \n use arena::TypedArena;\n-use std::borrow::BorrowFrom;\n+use std::borrow::{BorrowFrom, Cow};\n use std::cell::{Cell, RefCell};\n use std::cmp::{self, Ordering};\n use std::fmt::{self, Show};\n use std::hash::{Hash, Writer, SipHasher, Hasher};\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n+use std::vec::CowVec;\n use collections::enum_set::{EnumSet, CLike};\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n@@ -5555,40 +5556,20 @@ pub fn predicates<'tcx>(\n     vec\n }\n \n-/// Iterate over attributes of a definition.\n-// (This should really be an iterator, but that would require csearch and\n-// decoder to use iterators instead of higher-order functions.)\n-pub fn each_attr<F>(tcx: &ctxt, did: DefId, mut f: F) -> bool where\n-    F: FnMut(&ast::Attribute) -> bool,\n-{\n+/// Get the attributes of a definition.\n+pub fn get_attrs<'tcx>(tcx: &'tcx ctxt, did: DefId)\n+                       -> CowVec<'tcx, ast::Attribute> {\n     if is_local(did) {\n         let item = tcx.map.expect_item(did.node);\n-        item.attrs.iter().all(|attr| f(attr))\n+        Cow::Borrowed(&item.attrs[])\n     } else {\n-        info!(\"getting foreign attrs\");\n-        let mut cont = true;\n-        csearch::get_item_attrs(&tcx.sess.cstore, did, |attrs| {\n-            if cont {\n-                cont = attrs.iter().all(|attr| f(attr));\n-            }\n-        });\n-        info!(\"done\");\n-        cont\n+        Cow::Owned(csearch::get_item_attrs(&tcx.sess.cstore, did))\n     }\n }\n \n /// Determine whether an item is annotated with an attribute\n pub fn has_attr(tcx: &ctxt, did: DefId, attr: &str) -> bool {\n-    let mut found = false;\n-    each_attr(tcx, did, |item| {\n-        if item.check_name(attr) {\n-            found = true;\n-            false\n-        } else {\n-            true\n-        }\n-    });\n-    found\n+    get_attrs(tcx, did).iter().any(|item| item.check_name(attr))\n }\n \n /// Determine whether an item is annotated with `#[repr(packed)]`\n@@ -5605,13 +5586,9 @@ pub fn lookup_simd(tcx: &ctxt, did: DefId) -> bool {\n pub fn lookup_repr_hints(tcx: &ctxt, did: DefId) -> Rc<Vec<attr::ReprAttr>> {\n     memoized(&tcx.repr_hint_cache, did, |did: DefId| {\n         Rc::new(if did.krate == LOCAL_CRATE {\n-            let mut acc = Vec::new();\n-            ty::each_attr(tcx, did, |meta| {\n-                acc.extend(attr::find_repr_attrs(tcx.sess.diagnostic(),\n-                                                 meta).into_iter());\n-                true\n-            });\n-            acc\n+            get_attrs(tcx, did).iter().flat_map(|meta| {\n+                attr::find_repr_attrs(tcx.sess.diagnostic(), meta).into_iter()\n+            }).collect()\n         } else {\n             csearch::get_repr_attrs(&tcx.sess.cstore, did)\n         })"}, {"sha": "28558c5a204f1cd174e51497688bdd4d428a425d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=c366e433c14c49eee9144e6010a5fc54cbcdd341", "patch": "@@ -248,9 +248,8 @@ fn get_extern_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<'tcx>,\n \n     let f = decl_rust_fn(ccx, fn_ty, name);\n \n-    csearch::get_item_attrs(&ccx.sess().cstore, did, |attrs| {\n-        set_llvm_fn_attrs(ccx, &attrs[], f)\n-    });\n+    let attrs = csearch::get_item_attrs(&ccx.sess().cstore, did);\n+    set_llvm_fn_attrs(ccx, &attrs[], f);\n \n     ccx.externs().borrow_mut().insert(name.to_string(), f);\n     f\n@@ -353,12 +352,11 @@ pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, did: ast::DefId,\n         // don't do this then linker errors can be generated where the linker\n         // complains that one object files has a thread local version of the\n         // symbol and another one doesn't.\n-        ty::each_attr(ccx.tcx(), did, |attr| {\n+        for attr in ty::get_attrs(ccx.tcx(), did).iter() {\n             if attr.check_name(\"thread_local\") {\n                 llvm::set_thread_local(c, true);\n             }\n-            true\n-        });\n+        }\n         ccx.externs().borrow_mut().insert(name.to_string(), c);\n         return c;\n     }"}, {"sha": "ccaefadc1fcd963e281e00a6e788792df3f8df60", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c366e433c14c49eee9144e6010a5fc54cbcdd341/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c366e433c14c49eee9144e6010a5fc54cbcdd341", "patch": "@@ -126,13 +126,8 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n \n pub fn load_attrs(cx: &DocContext, tcx: &ty::ctxt,\n                   did: ast::DefId) -> Vec<clean::Attribute> {\n-    let mut attrs = Vec::new();\n-    csearch::get_item_attrs(&tcx.sess.cstore, did, |v| {\n-        attrs.extend(v.into_iter().map(|a| {\n-            a.clean(cx)\n-        }));\n-    });\n-    attrs\n+    let attrs = csearch::get_item_attrs(&tcx.sess.cstore, did);\n+    attrs.into_iter().map(|a| a.clean(cx)).collect()\n }\n \n /// Record an external fully qualified name in the external_paths cache."}]}