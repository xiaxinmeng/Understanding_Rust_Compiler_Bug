{"sha": "8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZmQ4NDUzOWU4NDdiOWFjOWQ3YzgxMWEzNzBhOWMzODQwZDZjM2I=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-05-11T11:01:37Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-05-11T15:13:32Z"}, "message": "Fix clippy warnings\n\nFixes clippy::{cone_on_copy, filter_next, redundant_closure, single_char_pattern, len_zero,redundant_field_names, useless_format, identity_conversion, map_clone, into_iter_on_ref, needless_return, option_as_ref_deref, unused_unit, unnecessary_mut_passed}", "tree": {"sha": "6e80f9afc1448cf2254c5b955790e005a0e45722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e80f9afc1448cf2254c5b955790e005a0e45722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "html_url": "https://github.com/rust-lang/rust/commit/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "html_url": "https://github.com/rust-lang/rust/commit/3fe4dd2dda2826643c4ce4ee7307707a90e08d25"}], "stats": {"total": 147, "additions": 68, "deletions": 79}, "files": [{"sha": "af09779d072c313d608ea781676bb6e97699dae4", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -634,7 +634,7 @@ pub fn eval_condition(\n                 [NestedMetaItem::Literal(Lit { span, .. })\n                 | NestedMetaItem::MetaItem(MetaItem { span, .. })] => {\n                     sess.span_diagnostic\n-                        .struct_span_err(*span, &*format!(\"expected a version literal\"))\n+                        .struct_span_err(*span, \"expected a version literal\")\n                         .emit();\n                     return false;\n                 }"}, {"sha": "e94a0c6eb5943d8012fc5c0e1a5ae3bc19d695a7", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -52,7 +52,7 @@ impl<T: PartialEq> TinyList<T> {\n             if &e.data == data {\n                 return true;\n             }\n-            elem = e.next.as_ref().map(|e| &**e);\n+            elem = e.next.as_deref();\n         }\n         false\n     }\n@@ -62,7 +62,7 @@ impl<T: PartialEq> TinyList<T> {\n         let (mut elem, mut count) = (self.head.as_ref(), 0);\n         while let Some(ref e) = elem {\n             count += 1;\n-            elem = e.next.as_ref().map(|e| &**e);\n+            elem = e.next.as_deref();\n         }\n         count\n     }"}, {"sha": "b34685006e22301c111938ccadaed42a0ee56f57", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -112,8 +112,7 @@ pub fn elaborate_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n ) -> Elaborator<'tcx> {\n-    let obligations =\n-        predicates.into_iter().map(|predicate| predicate_obligation(predicate, None)).collect();\n+    let obligations = predicates.map(|predicate| predicate_obligation(predicate, None)).collect();\n     elaborate_obligations(tcx, obligations)\n }\n \n@@ -149,7 +148,7 @@ impl Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.into_iter().map(|(pred, span)| {\n+                let obligations = predicates.predicates.iter().map(|(pred, span)| {\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &data.to_poly_trait_ref()),\n                         Some(*span),"}, {"sha": "94cd4bcd4c626008aa969a4c3f8ebbbe90a5a18d", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> Queries<'tcx> {\n             let result = passes::register_plugins(\n                 self.session(),\n                 &*self.codegen_backend().metadata_loader(),\n-                self.compiler.register_lints.as_ref().map(|p| &**p).unwrap_or_else(|| empty),\n+                self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n                 krate,\n                 &crate_name,\n             );"}, {"sha": "682b335c5d071775f7e583930ebea1475e546483", "filename": "src/librustc_middle/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -72,9 +72,9 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         })\n     }\n \n-    fn read_deps<OP>(op: OP) -> ()\n+    fn read_deps<OP>(op: OP)\n     where\n-        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps>>) -> (),\n+        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps>>),\n     {\n         ty::tls::with_context_opt(|icx| {\n             let icx = if let Some(icx) = icx { icx } else { return };"}, {"sha": "1e3676496ce3934313afbb8b29dfd61797af3838", "filename": "src/librustc_middle/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmod.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -78,7 +78,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n         &tcx.untracked_crate.modules[&module]\n     };\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n-    providers.hir_owner_nodes =\n-        |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes);\n+    providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n     map::provide(providers);\n }"}, {"sha": "571e50f5ae26b3a5d42ea38a5d43e4819d1bd735", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> AssociatedItems<'tcx> {\n         &self,\n         name: Symbol,\n     ) -> impl '_ + Iterator<Item = &ty::AssocItem> {\n-        self.items.get_by_key(&name).map(|v| *v)\n+        self.items.get_by_key(&name).copied()\n     }\n \n     /// Returns an iterator over all associated items with the given name."}, {"sha": "8f125098ee68483638ad83c7f2683a7cfc0c3952", "filename": "src/librustc_middle/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -171,10 +171,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n         let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n \n-        blanket_impls\n-            .into_iter()\n-            .chain(non_blanket_impls.into_iter().map(|(_, v)| v).flatten())\n-            .cloned()\n+        blanket_impls.iter().chain(non_blanket_impls.iter().map(|(_, v)| v).flatten()).cloned()\n     }\n }\n "}, {"sha": "65ff311d18215da6a79e5815dbb2273271877b6c", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             );\n         }\n \n-        adt_defined_here(&mut cx, &mut err, pattern_ty, &witnesses);\n+        adt_defined_here(&cx, &mut err, pattern_ty, &witnesses);\n         err.note(&format!(\"the matched value is of type `{}`\", pattern_ty));\n         err.emit();\n     }"}, {"sha": "854f8eeaf344152d03546a0baa6ec1a9719627c3", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         )\n                     }\n                     traits::NonStructuralMatchTy::Dynamic => {\n-                        format!(\"trait objects cannot be used in patterns\")\n+                        \"trait objects cannot be used in patterns\".to_string()\n                     }\n                     traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of constant whose type is a parameter inside a pattern\")"}, {"sha": "6e7d116ce1d7e0f408e98f87d55e7c4d307af458", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -931,7 +931,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         if blk.targeted_by_break {\n             self.break_ln.insert(blk.hir_id, succ);\n         }\n-        let succ = self.propagate_through_opt_expr(blk.expr.as_ref().map(|e| &**e), succ);\n+        let succ = self.propagate_through_opt_expr(blk.expr.as_deref(), succ);\n         blk.stmts.iter().rev().fold(succ, |succ, stmt| self.propagate_through_stmt(stmt, succ))\n     }\n \n@@ -952,7 +952,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 // initialization, which is mildly more complex than checking\n                 // once at the func header but otherwise equivalent.\n \n-                let succ = self.propagate_through_opt_expr(local.init.as_ref().map(|e| &**e), succ);\n+                let succ = self.propagate_through_opt_expr(local.init.as_deref(), succ);\n                 self.define_bindings_in_pat(&local.pat, succ)\n             }\n             hir::StmtKind::Item(..) => succ,"}, {"sha": "a6fa677cbc0af1b15da8edadb250750865638a74", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -797,7 +797,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n         resolve_expr(self, ex);\n     }\n     fn visit_local(&mut self, l: &'tcx Local<'tcx>) {\n-        resolve_local(self, Some(&l.pat), l.init.as_ref().map(|e| &**e));\n+        resolve_local(self, Some(&l.pat), l.init.as_deref());\n     }\n }\n "}, {"sha": "d8875f8ac64a202353a04eeba308eea315a97df7", "filename": "src/librustc_query_system/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -80,7 +80,7 @@ impl<K: DepKind> DepNode<K> {\n             }\n         }\n \n-        return dep_node;\n+        dep_node\n     }\n }\n "}, {"sha": "e8d02692f37ba48f960147cfef274bb69e85495f", "filename": "src/librustc_query_system/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -77,9 +77,9 @@ pub trait DepKind: Copy + fmt::Debug + Eq + Ord + Hash {\n         OP: FnOnce() -> R;\n \n     /// Access dependencies from current implicit context.\n-    fn read_deps<OP>(op: OP) -> ()\n+    fn read_deps<OP>(op: OP)\n     where\n-        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps<Self>>>) -> ();\n+        OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps<Self>>>);\n \n     fn can_reconstruct_query_key(&self) -> bool;\n }"}, {"sha": "be0512dcac95b217d3f705f6ac09eddaed7c66f5", "filename": "src/librustc_trait_selection/traits/chalk_fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -39,7 +39,7 @@ fn environment<'tcx>(\n     let ty::InstantiatedPredicates { predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n-    let clauses = predicates.into_iter().map(|pred| ChalkEnvironmentClause::Predicate(pred));\n+    let clauses = predicates.into_iter().map(ChalkEnvironmentClause::Predicate);\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n     let node = tcx.hir().get(hir_id);\n@@ -224,7 +224,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                                 ),\n \n                                 Err(_err) => errors.push(FulfillmentError {\n-                                    obligation: obligation,\n+                                    obligation,\n                                     code: FulfillmentErrorCode::CodeSelectionError(\n                                         SelectionError::Unimplemented,\n                                     ),\n@@ -238,7 +238,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                     }\n \n                     Err(NoSolution) => errors.push(FulfillmentError {\n-                        obligation: obligation,\n+                        obligation,\n                         code: FulfillmentErrorCode::CodeSelectionError(\n                             SelectionError::Unimplemented,\n                         ),\n@@ -257,6 +257,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     }\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n-        self.obligations.iter().map(|obligation| obligation.clone()).collect()\n+        self.obligations.iter().cloned().collect()\n     }\n }"}, {"sha": "4228c2342cc6ce22a8cd3b71fe368780b32a9c0b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -1854,7 +1854,7 @@ impl NextTypeParamName for &[hir::GenericParam<'_>] {\n     fn next_type_param_name(&self, name: Option<&str>) -> String {\n         // This is the whitelist of possible parameter names that we might suggest.\n         let name = name.and_then(|n| n.chars().next()).map(|c| c.to_string().to_uppercase());\n-        let name = name.as_ref().map(|s| s.as_str());\n+        let name = name.as_deref();\n         let possible_names = [name.unwrap_or(\"T\"), \"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\"];\n         let used_names = self\n             .iter()"}, {"sha": "a2aee9b6ef74d777d9a6c8dc6e6dfe73e6a27511", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 34, "deletions": 38, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         // clauses or bounds?\n         let predicates = self.tcx.predicates_defined_on(def_id).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n@@ -88,7 +88,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let binders = binders_for(&self.interner, bound_vars);\n         let predicates = self.tcx.predicates_defined_on(def_id).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n@@ -134,7 +134,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n                 let predicates = self.tcx.predicates_of(adt_def_id).predicates;\n                 let where_clauses: Vec<_> = predicates\n-                    .into_iter()\n+                    .iter()\n                     .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n                     .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner))\n                     .collect();\n@@ -166,46 +166,42 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                         fundamental: adt_def.is_fundamental(),\n                     },\n                 });\n-                return struct_datum;\n+                struct_datum\n             }\n-            RustDefId::Ref(_) => {\n-                return Arc::new(chalk_rust_ir::StructDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        chalk_ir::ParameterKinds::from(\n-                            &self.interner,\n-                            vec![\n-                                chalk_ir::ParameterKind::Lifetime(()),\n-                                chalk_ir::ParameterKind::Ty(()),\n-                            ],\n-                        ),\n-                        chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+            RustDefId::Ref(_) => Arc::new(chalk_rust_ir::StructDatum {\n+                id: struct_id,\n+                binders: chalk_ir::Binders::new(\n+                    chalk_ir::ParameterKinds::from(\n+                        &self.interner,\n+                        vec![\n+                            chalk_ir::ParameterKind::Lifetime(()),\n+                            chalk_ir::ParameterKind::Ty(()),\n+                        ],\n                     ),\n-                    flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-                });\n-            }\n-            RustDefId::Array | RustDefId::Slice => {\n-                return Arc::new(chalk_rust_ir::StructDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        chalk_ir::ParameterKinds::from(\n-                            &self.interner,\n-                            Some(chalk_ir::ParameterKind::Ty(())),\n-                        ),\n-                        chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+                    chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+                ),\n+                flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n+            }),\n+            RustDefId::Array | RustDefId::Slice => Arc::new(chalk_rust_ir::StructDatum {\n+                id: struct_id,\n+                binders: chalk_ir::Binders::new(\n+                    chalk_ir::ParameterKinds::from(\n+                        &self.interner,\n+                        Some(chalk_ir::ParameterKind::Ty(())),\n                     ),\n-                    flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-                });\n-            }\n+                    chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n+                ),\n+                flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n+            }),\n             RustDefId::Str | RustDefId::Never | RustDefId::FnDef(_) => {\n-                return Arc::new(chalk_rust_ir::StructDatum {\n+                Arc::new(chalk_rust_ir::StructDatum {\n                     id: struct_id,\n                     binders: chalk_ir::Binders::new(\n                         chalk_ir::ParameterKinds::new(&self.interner),\n                         chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n                     ),\n                     flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-                });\n+                })\n             }\n \n             _ => bug!(\"Used not struct variant when expecting struct variant.\"),\n@@ -228,7 +224,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let predicates = self.tcx.predicates_of(def_id).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n@@ -260,7 +256,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         // not there yet.\n \n         let all_impls = self.tcx.all_impls(def_id);\n-        let matched_impls = all_impls.into_iter().filter(|impl_def_id| {\n+        let matched_impls = all_impls.filter(|impl_def_id| {\n             use chalk_ir::could_match::CouldMatch;\n             let trait_ref = self.tcx.impl_trait_ref(*impl_def_id).unwrap();\n             let bound_vars = bound_vars_for_item(self.tcx, *impl_def_id);\n@@ -304,7 +300,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 _ => {}\n             }\n         }\n-        return false;\n+        false\n     }\n \n     fn associated_ty_value(\n@@ -379,7 +375,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                     ty::AdtKind::Struct | ty::AdtKind::Union => None,\n                                     ty::AdtKind::Enum => {\n                                         let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                        if constraint.0.len() > 0 {\n+                                        if !constraint.0.is_empty() {\n                                             unimplemented!()\n                                         } else {\n                                             Some(true)\n@@ -412,7 +408,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                     ty::AdtKind::Struct | ty::AdtKind::Union => None,\n                                     ty::AdtKind::Enum => {\n                                         let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                        if constraint.0.len() > 0 {\n+                                        if !constraint.0.is_empty() {\n                                             unimplemented!()\n                                         } else {\n                                             Some(true)"}, {"sha": "14295810d5526b2cdc63cf5a3c4437fc47a2b200", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n         let uint = |i| apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Uint(i)), empty());\n         let float = |f| apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Float(f)), empty());\n \n-        return match self.kind {\n+        match self.kind {\n             Bool => apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Bool), empty()),\n             Char => apply(chalk_ir::TypeName::Scalar(chalk_ir::Scalar::Char), empty()),\n             Int(ty) => match ty {\n@@ -370,7 +370,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             .intern(interner),\n             Infer(_infer) => unimplemented!(),\n             Error => unimplemented!(),\n-        };\n+        }\n     }\n }\n "}, {"sha": "5dbcc5c9ec8b9dcfb5757304bc2e2a444ca94cc0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -447,7 +447,7 @@ impl Options {\n             None => return Err(3),\n         };\n \n-        match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n+        match matches.opt_str(\"r\").as_deref() {\n             Some(\"rust\") | None => {}\n             Some(s) => {\n                 diag.struct_err(&format!(\"unknown input format: {}\", s)).emit();"}, {"sha": "bf59b3f25734da9b520ebaba1fe2f5ac193d1ed3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> DocContext<'tcx> {\n         );\n \n         MAX_DEF_ID.with(|m| {\n-            m.borrow_mut().entry(def_id.krate.clone()).or_insert(start_def_id);\n+            m.borrow_mut().entry(def_id.krate).or_insert(start_def_id);\n         });\n \n         self.all_fake_def_ids.borrow_mut().insert(def_id);"}, {"sha": "8ec158ff9382c3f2ba03dd9f8c206aa667767de9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -796,7 +796,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n         if path.exists() {\n             for line in BufReader::new(File::open(path)?).lines() {\n                 let line = line?;\n-                if !line.starts_with(\"\\\"\") {\n+                if !line.starts_with('\"') {\n                     continue;\n                 }\n                 if line.starts_with(&format!(\"\\\"{}\\\"\", krate)) {\n@@ -810,8 +810,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 }\n                 krates.push(\n                     line.split('\"')\n-                        .filter(|s| !s.is_empty())\n-                        .next()\n+                        .find(|s| !s.is_empty())\n                         .map(|s| s.to_owned())\n                         .unwrap_or_else(String::new),\n                 );"}, {"sha": "a00c9a0bcea65d7118eb1366811f2e558e7a1b67", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -255,8 +255,7 @@ fn run_test(\n \n     let rustc_binary = options\n         .test_builder\n-        .as_ref()\n-        .map(|v| &**v)\n+        .as_deref()\n         .unwrap_or_else(|| rustc_interface::util::rustc_path().expect(\"found rustc\"));\n     let mut compiler = Command::new(&rustc_binary);\n     compiler.arg(\"--crate-type\").arg(\"bin\");"}, {"sha": "738f07250b5bf65f60d1d2f2b85b8a8f6f11af82", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -1272,7 +1272,7 @@ impl Thread {\n     }\n \n     fn cname(&self) -> Option<&CStr> {\n-        self.inner.name.as_ref().map(|s| &**s)\n+        self.inner.name.as_deref()\n     }\n }\n "}, {"sha": "0cec8050c279d9cc4afb7626e11166a569e94771", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd84539e847b9ac9d7c811a370a9c3840d6c3b/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=8bfd84539e847b9ac9d7c811a370a9c3840d6c3b", "patch": "@@ -331,7 +331,7 @@ fn get_format(\n     quiet: bool,\n     allow_unstable: bool,\n ) -> OptPartRes<OutputFormat> {\n-    let format = match matches.opt_str(\"format\").as_ref().map(|s| &**s) {\n+    let format = match matches.opt_str(\"format\").as_deref() {\n         None if quiet => OutputFormat::Terse,\n         Some(\"pretty\") | None => OutputFormat::Pretty,\n         Some(\"terse\") => OutputFormat::Terse,\n@@ -355,7 +355,7 @@ fn get_format(\n }\n \n fn get_color_config(matches: &getopts::Matches) -> OptPartRes<ColorConfig> {\n-    let color = match matches.opt_str(\"color\").as_ref().map(|s| &**s) {\n+    let color = match matches.opt_str(\"color\").as_deref() {\n         Some(\"auto\") | None => ColorConfig::AutoColor,\n         Some(\"always\") => ColorConfig::AlwaysColor,\n         Some(\"never\") => ColorConfig::NeverColor,"}]}