{"sha": "60841f42769b154864252b04d622494a9ddfc696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwODQxZjQyNzY5YjE1NDg2NDI1MmIwNGQ2MjI0OTRhOWRkZmM2OTY=", "commit": {"author": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-20T03:18:54Z"}, "committer": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-21T22:10:53Z"}, "message": "Diagnostic paths attempt to use VSCode's path join behavior before defaulting to Rust's path join behavior.", "tree": {"sha": "442b8093bc737d609866c7ab8561c3982f15dc13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442b8093bc737d609866c7ab8561c3982f15dc13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60841f42769b154864252b04d622494a9ddfc696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60841f42769b154864252b04d622494a9ddfc696", "html_url": "https://github.com/rust-lang/rust/commit/60841f42769b154864252b04d622494a9ddfc696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60841f42769b154864252b04d622494a9ddfc696/comments", "author": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32491c09787fa3b386d067f0ce95d744c1480e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/32491c09787fa3b386d067f0ce95d744c1480e0b", "html_url": "https://github.com/rust-lang/rust/commit/32491c09787fa3b386d067f0ce95d744c1480e0b"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "8b01a7e5d6b50a1b7f589a29904c6a2c98508010", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/60841f42769b154864252b04d622494a9ddfc696/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60841f42769b154864252b04d622494a9ddfc696/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=60841f42769b154864252b04d622494a9ddfc696", "patch": "@@ -1,6 +1,9 @@\n //! This module provides the functionality needed to convert diagnostics from\n //! `cargo check` json format to the LSP diagnostic format.\n-use std::{collections::HashMap, path::Path};\n+use std::{\n+    collections::HashMap,\n+    path::{Path, PathBuf},\n+};\n \n use flycheck::{DiagnosticLevel, DiagnosticSpan};\n use stdx::format_to;\n@@ -42,7 +45,7 @@ fn is_dummy_macro_file(file_name: &str) -> bool {\n \n /// Converts a Rust span to a LSP location\n fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n-    let file_name = workspace_root.join(&span.file_name);\n+    let file_name = resolve_path(workspace_root, &span.file_name);\n     let uri = url_from_abs_path(&file_name);\n \n     // FIXME: this doesn't handle UTF16 offsets correctly\n@@ -61,7 +64,7 @@ fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location\n fn primary_location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n     let span_stack = std::iter::successors(Some(span), |span| Some(&span.expansion.as_ref()?.span));\n     for span in span_stack.clone() {\n-        let abs_path = workspace_root.join(&span.file_name);\n+        let abs_path = resolve_path(workspace_root, &span.file_name);\n         if !is_dummy_macro_file(&span.file_name) && abs_path.starts_with(workspace_root) {\n             return location(workspace_root, span);\n         }\n@@ -84,6 +87,30 @@ fn diagnostic_related_information(\n     Some(lsp_types::DiagnosticRelatedInformation { location, message })\n }\n \n+/// Resolves paths mimicking VSCode's behavior when `file_name` starts\n+/// with the root directory component, which does not discard the base\n+/// path.  If this relative path exists, use it, otherwise fall back\n+/// to the existing Rust behavior of path joining.\n+fn resolve_path(workspace_root: &Path, file_name: &str) -> PathBuf {\n+    let file_name = Path::new(file_name);\n+\n+    // Test path with VSCode's path join behavior.\n+    let vscode_path = {\n+        let mut result = PathBuf::from(workspace_root);\n+        result.extend(file_name.components().skip_while(|component| match component {\n+            std::path::Component::RootDir => true,\n+            _ => false,\n+        }));\n+        result\n+    };\n+    if vscode_path.exists() {\n+        return vscode_path;\n+    }\n+\n+    // Default to Rust's path join behavior.\n+    workspace_root.join(file_name)\n+}\n+\n struct SubDiagnostic {\n     related: lsp_types::DiagnosticRelatedInformation,\n     suggested_fix: Option<lsp_ext::CodeAction>,"}]}