{"sha": "8ef455190494d2fd9a6bb013efd2e59622af2bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjQ1NTE5MDQ5NGQyZmQ5YTZiYjAxM2VmZDJlNTk2MjJhZjJiYzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-25T22:09:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-25T22:09:33Z"}, "message": "rustc: Implement foreign constants.\n\nThis is needed for a lot of Apple libraries, as Apple tends to put a lot of\nglobals in dynamic libraries.", "tree": {"sha": "79b59597ad931e5be3d5440f50c8942a53e3e495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b59597ad931e5be3d5440f50c8942a53e3e495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef455190494d2fd9a6bb013efd2e59622af2bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef455190494d2fd9a6bb013efd2e59622af2bc4", "html_url": "https://github.com/rust-lang/rust/commit/8ef455190494d2fd9a6bb013efd2e59622af2bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef455190494d2fd9a6bb013efd2e59622af2bc4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb5c07922f20559af1e40d63a15b1be0402e5fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5c07922f20559af1e40d63a15b1be0402e5fe4", "html_url": "https://github.com/rust-lang/rust/commit/bb5c07922f20559af1e40d63a15b1be0402e5fe4"}], "stats": {"total": 210, "additions": 139, "deletions": 71}, "files": [{"sha": "fbd155e0729df48b48fd32a81796dc0b674cb753", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -830,6 +830,7 @@ type foreign_item =\n #[auto_serialize]\n enum foreign_item_ {\n     foreign_item_fn(fn_decl, purity, ~[ty_param]),\n+    foreign_item_const(@ty)\n }\n \n // The data we save and restore about an inlined item or method.  This is not"}, {"sha": "8bfbb14fc53f0ae373f7d2b85ad51ea650151f18", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -196,6 +196,9 @@ fn noop_fold_foreign_item(&&ni: @foreign_item, fld: ast_fold)\n                                   purity,\n                                   fold_ty_params(typms, fld))\n                 }\n+                foreign_item_const(t) => {\n+                  foreign_item_const(fld.fold_ty(t))\n+                }\n               },\n           id: fld.new_id(ni.id),\n           span: fld.new_span(ni.span)};"}, {"sha": "84fd0d8cdc99889e4cee5f94f3e7cb3753dbf3c5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -32,32 +32,32 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              expr_move, expr_path, expr_rec, expr_repeat, expr_ret, expr_swap,\n              expr_struct, expr_tup, expr_unary, expr_unary_move, expr_vec,\n              expr_vstore, expr_while, extern_fn, field, fn_decl, foreign_item,\n-             foreign_item_fn, foreign_mod, ident, impure_fn, infer, inherited,\n-             init_assign, init_move, initializer, item, item_,\n-             item_class, item_const, item_enum, item_fn, item_foreign_mod,\n-             item_impl, item_mac, item_mod, item_trait, item_ty, lit, lit_,\n-             lit_bool, lit_float, lit_int, lit_int_unsuffixed, lit_nil,\n-             lit_str, lit_uint, local, m_const, m_imm, m_mutbl, mac_, mac_aq,\n-             mac_ellipsis, mac_invoc, mac_invoc_tt, mac_var, matcher,\n-             match_nonterminal, match_seq, match_tok, method, mode, mt, mul,\n-             mutability, named_field, neg, noreturn, not, pat, pat_box,\n-             pat_enum, pat_ident, pat_lit, pat_range, pat_rec, pat_struct,\n-             pat_tup, pat_uniq, pat_wild, path, private, proto, proto_bare,\n-             proto_block, proto_box, proto_uniq, provided, public, pure_fn,\n-             purity, re_anon, re_named, region, rem, required, ret_style,\n-             return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr,\n-             stmt_semi, struct_def, struct_field, struct_variant_kind,\n-             subtract, sty_box, sty_by_ref, sty_region, sty_static, sty_uniq,\n-             sty_value, token_tree, trait_method, trait_ref, tt_delim, tt_seq,\n-             tt_tok, tt_nonterminal, ty, ty_, ty_bot, ty_box, ty_field, ty_fn,\n-             ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_param_bound,\n-             ty_path, ty_ptr, ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq,\n-             ty_vec, ty_fixed_length, tuple_variant_kind, unchecked_blk, uniq,\n-             unnamed_field, unsafe_blk, unsafe_fn, variant, view_item,\n-             view_item_, view_item_export, view_item_import, view_item_use,\n-             view_path, view_path_glob, view_path_list, view_path_simple,\n-             visibility, vstore, vstore_box, vstore_fixed, vstore_slice,\n-             vstore_uniq};\n+             foreign_item_const, foreign_item_fn, foreign_mod, ident,\n+             impure_fn, infer, inherited, init_assign, init_move, initializer,\n+             item, item_, item_class, item_const, item_enum, item_fn,\n+             item_foreign_mod, item_impl, item_mac, item_mod, item_trait,\n+             item_ty, lit, lit_, lit_bool, lit_float, lit_int,\n+             lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const,\n+             m_imm, m_mutbl, mac_, mac_aq, mac_ellipsis, mac_invoc,\n+             mac_invoc_tt, mac_var, matcher, match_nonterminal, match_seq,\n+             match_tok, method, mode, mt, mul, mutability, named_field, neg,\n+             noreturn, not, pat, pat_box, pat_enum, pat_ident, pat_lit,\n+             pat_range, pat_rec, pat_struct, pat_tup, pat_uniq, pat_wild,\n+             path, private, proto, proto_bare, proto_block, proto_box,\n+             proto_uniq, provided, public, pure_fn, purity, re_anon, re_named,\n+             region, rem, required, ret_style, return_val, self_ty, shl, shr,\n+             stmt, stmt_decl, stmt_expr, stmt_semi, struct_def, struct_field,\n+             struct_variant_kind, subtract, sty_box, sty_by_ref, sty_region,\n+             sty_static, sty_uniq, sty_value, token_tree, trait_method,\n+             trait_ref, tt_delim, tt_seq, tt_tok, tt_nonterminal, ty, ty_,\n+             ty_bot, ty_box, ty_field, ty_fn, ty_infer, ty_mac, ty_method,\n+             ty_nil, ty_param, ty_param_bound, ty_path, ty_ptr, ty_rec,\n+             ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec, ty_fixed_length,\n+             tuple_variant_kind, unchecked_blk, uniq, unnamed_field,\n+             unsafe_blk, unsafe_fn, variant, view_item, view_item_,\n+             view_item_export, view_item_import, view_item_use, view_path,\n+             view_path_glob, view_path_list, view_path_simple, visibility,\n+             vstore, vstore_box, vstore_fixed, vstore_slice, vstore_uniq};\n \n export file_type;\n export parser;\n@@ -2843,6 +2843,21 @@ struct parser {\n                  span: mk_sp(lo, hi)};\n     }\n \n+    fn parse_item_foreign_const(+attrs: ~[attribute]) -> @foreign_item {\n+        let lo = self.span.lo;\n+        self.expect_keyword(~\"const\");\n+        let ident = self.parse_ident();\n+        self.expect(token::COLON);\n+        let ty = self.parse_ty(false);\n+        let hi = self.span.hi;\n+        self.expect(token::SEMI);\n+        return @{ident: ident,\n+                 attrs: attrs,\n+                 node: foreign_item_const(move ty),\n+                 id: self.get_id(),\n+                 span: mk_sp(lo, hi)};\n+    }\n+\n     fn parse_fn_purity() -> purity {\n         if self.eat_keyword(~\"fn\") { impure_fn }\n         else if self.eat_keyword(~\"pure\") {\n@@ -2855,9 +2870,12 @@ struct parser {\n         else { self.unexpected(); }\n     }\n \n-    fn parse_foreign_item(+attrs: ~[attribute]) ->\n-        @foreign_item {\n-        self.parse_item_foreign_fn(attrs)\n+    fn parse_foreign_item(+attrs: ~[attribute]) -> @foreign_item {\n+        if self.is_keyword(~\"const\") {\n+            self.parse_item_foreign_const(move attrs)\n+        } else {\n+            self.parse_item_foreign_fn(move attrs)\n+        }\n     }\n \n     fn parse_foreign_mod_items(+first_item_attrs: ~[attribute]) ->"}, {"sha": "418dfbf33490731d774e0148885da16b66009cf0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -421,6 +421,14 @@ fn print_foreign_item(s: ps, item: @ast::foreign_item) {\n         word(s.s, ~\";\");\n         end(s); // end the outer fn box\n       }\n+      ast::foreign_item_const(t) => {\n+        head(s, ~\"const\");\n+        print_ident(s, item.ident);\n+        word_space(s, ~\":\");\n+        print_type(s, t);\n+        word(s.s, ~\";\");\n+        end(s); // end the head-ibox\n+      }\n     }\n }\n "}, {"sha": "4195ecf32ce2408c2617fc3731e57f1030f26e3f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -254,6 +254,9 @@ fn visit_foreign_item<E>(ni: @foreign_item, e: E, v: vt<E>) {\n         v.visit_ty_params(tps, e, v);\n         visit_fn_decl(fd, e, v);\n       }\n+      foreign_item_const(t) => {\n+        v.visit_ty(t, e, v);\n+      }\n     }\n }\n "}, {"sha": "24b259f84f65902ba73a3f9a50add08eb55bb6c6", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -803,6 +803,14 @@ fn encode_info_for_foreign_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         }\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nitem.ident));\n       }\n+      foreign_item_const(t) => {\n+        encode_def_id(ebml_w, local_def(nitem.id));\n+        encode_family(ebml_w, 'c');\n+        encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, nitem.id));\n+        encode_symbol(ecx, ebml_w, nitem.id);\n+        encode_path(ecx, ebml_w, path, ast_map::path_name(nitem.ident));\n+        ebml_w.end_tag();\n+      }\n     }\n     ebml_w.end_tag();\n }"}, {"sha": "432c1bba77d1f78007928be8debcc3c259c16854", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -420,6 +420,7 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n               ast::foreign_item_fn(decl, _, tps) => {\n                 check_foreign_fn(cx, it.id, decl);\n               }\n+              ast::foreign_item_const(*) => {}  // XXX: Not implemented.\n             }\n         }\n       }"}, {"sha": "0de27f61b621fd6254733b51ca715e93de1e1d65", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -25,23 +25,23 @@ import syntax::ast::{enum_variant_kind, expr, expr_again, expr_assign_op};\n import syntax::ast::{expr_binary, expr_break, expr_cast, expr_field, expr_fn};\n import syntax::ast::{expr_fn_block, expr_index, expr_loop};\n import syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n-import syntax::ast::{foreign_item, foreign_item_fn, ge, gt, ident, trait_ref};\n-import syntax::ast::{impure_fn, inherited, item, item_class, item_const};\n-import syntax::ast::{item_enum, item_fn, item_mac, item_foreign_mod};\n-import syntax::ast::{item_impl, item_mod, item_trait, item_ty, le, local};\n-import syntax::ast::{local_crate, lt, method, mul, ne, neg, node_id, pat};\n-import syntax::ast::{pat_enum, pat_ident, path, prim_ty, pat_box, pat_uniq};\n+import syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n+import syntax::ast::{gt, ident, impure_fn, inherited, item, item_class};\n+import syntax::ast::{item_const, item_enum, item_fn, item_foreign_mod};\n+import syntax::ast::{item_impl, item_mac, item_mod, item_trait, item_ty, le};\n+import syntax::ast::{local, local_crate, lt, method, mul, ne, neg, node_id};\n+import syntax::ast::{pat, pat_enum, pat_ident, path, prim_ty, pat_box};\n import syntax::ast::{pat_lit, pat_range, pat_rec, pat_struct, pat_tup};\n-import syntax::ast::{pat_wild, private, provided, public, required, rem};\n-import syntax::ast::{self_ty_};\n-import syntax::ast::{shl, stmt_decl, struct_field, struct_variant_kind};\n-import syntax::ast::{sty_static, subtract, tuple_variant_kind, ty};\n-import syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n-import syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, ty_param};\n-import syntax::ast::{ty_path, ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8};\n-import syntax::ast::{ty_uint, variant, view_item, view_item_export};\n-import syntax::ast::{view_item_import, view_item_use, view_path_glob};\n-import syntax::ast::{view_path_list, view_path_simple, visibility};\n+import syntax::ast::{pat_uniq, pat_wild, private, provided, public, required};\n+import syntax::ast::{rem, self_ty_, shl, stmt_decl, struct_field};\n+import syntax::ast::{struct_variant_kind, sty_static, subtract, trait_ref};\n+import syntax::ast::{tuple_variant_kind, ty, ty_bool, ty_char, ty_f, ty_f32};\n+import syntax::ast::{ty_f64, ty_float, ty_i, ty_i16, ty_i32, ty_i64, ty_i8};\n+import syntax::ast::{ty_int, ty_param, ty_path, ty_str, ty_u, ty_u16, ty_u32};\n+import syntax::ast::{ty_u64, ty_u8, ty_uint, variant, view_item};\n+import syntax::ast::{view_item_export, view_item_import, view_item_use};\n+import syntax::ast::{view_path_glob, view_path_list, view_path_simple};\n+import syntax::ast::{visibility};\n import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n import syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n import syntax::attr::{attr_metas, contains_name};\n@@ -1213,26 +1213,27 @@ struct Resolver {\n                                                 vt<ReducedGraphParent>) {\n \n         let name = foreign_item.ident;\n+        let (name_bindings, new_parent) =\n+            self.add_child(name, parent, ~[ValueNS], foreign_item.span);\n \n         match foreign_item.node {\n             foreign_item_fn(fn_decl, purity, type_parameters) => {\n-              let (name_bindings, new_parent) = self.add_child(name, parent,\n-                                              ~[ValueNS], foreign_item.span);\n-\n                 let def = def_fn(local_def(foreign_item.id), purity);\n                 (*name_bindings).define_value(Public, def, foreign_item.span);\n \n                 do self.with_type_parameter_rib\n-                        (HasTypeParameters(&type_parameters,\n-                                           foreign_item.id,\n-                                           0u,\n-                                           NormalRibKind)) || {\n-\n+                        (HasTypeParameters(&type_parameters, foreign_item.id,\n+                                           0u, NormalRibKind)) {\n                     visit_foreign_item(foreign_item, new_parent, visitor);\n                 }\n             }\n-        }\n+            foreign_item_const(item_type) => {\n+                let def = def_const(local_def(foreign_item.id));\n+                (*name_bindings).define_value(Public, def, foreign_item.span);\n \n+                visit_foreign_item(foreign_item, new_parent, visitor);\n+            }\n+        }\n     }\n \n     fn build_reduced_graph_for_block(block: blk,\n@@ -2953,6 +2954,10 @@ struct Resolver {\n                                                        visitor);\n                                 }\n                             }\n+                            foreign_item_const(item_type) => {\n+                                visit_foreign_item(foreign_item, (),\n+                                                   visitor);\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "a254876f697c132844ab0d2cc50ac21d44c1e4b5", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -5414,9 +5414,22 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n           }\n           ast_map::node_foreign_item(ni, _, pth) => {\n             exprt = true;\n-            register_fn(ccx, ni.span,\n-                        vec::append(*pth, ~[path_name(ni.ident)]),\n-                        ni.id)\n+            match ni.node {\n+                ast::foreign_item_fn(*) => {\n+                    register_fn(ccx, ni.span,\n+                                vec::append(*pth, ~[path_name(ni.ident)]),\n+                                ni.id)\n+                }\n+                ast::foreign_item_const(*) => {\n+                    let typ = ty::node_id_to_type(ccx.tcx, ni.id);\n+                    let ident = ccx.sess.parse_sess.interner.get(ni.ident);\n+                    let g = do str::as_c_str(*ident) |buf| {\n+                        llvm::LLVMAddGlobal(ccx.llmod, type_of(ccx, typ), buf)\n+                    };\n+                    ccx.item_symbols.insert(ni.id, copy *ident);\n+                    g\n+                }\n+            }\n           }\n           ast_map::node_ctor(nm, _, ctor, _, pt) => {\n             let my_path = vec::append(*pt, ~[path_name(nm)]);"}, {"sha": "5cbdae9c0764f134ee344da290b1a0f0027f9a23", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -789,6 +789,7 @@ fn trans_foreign_mod(ccx: @crate_ctxt,\n               }\n           }\n         }\n+        ast::foreign_item_const(*) => {}\n       }\n     }\n }"}, {"sha": "c450b9952835119bf7ed0977a1752e35fd5ee220", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -537,12 +537,8 @@ fn convert_foreign(ccx: @crate_ctxt, i: @ast::foreign_item) {\n     // type of the foreign item. We simply write it into the node type\n     // table.\n     let tpt = ty_of_foreign_item(ccx, i);\n-    match i.node {\n-      ast::foreign_item_fn(*) => {\n-        write_ty_to_tcx(ccx.tcx, i.id, tpt.ty);\n-        ccx.tcx.tcache.insert(local_def(i.id), tpt);\n-      }\n-    }\n+    write_ty_to_tcx(ccx.tcx, i.id, tpt.ty);\n+    ccx.tcx.tcache.insert(local_def(i.id), tpt);\n }\n \n fn ty_of_method(ccx: @crate_ctxt,\n@@ -695,6 +691,14 @@ fn ty_of_foreign_item(ccx: @crate_ctxt, it: @ast::foreign_item)\n         return ty_of_foreign_fn_decl(ccx, fn_decl, purity, params,\n                                      local_def(it.id));\n       }\n+      ast::foreign_item_const(t) => {\n+        let rb = in_binding_rscope(empty_rscope);\n+        return {\n+            bounds: @~[],\n+            region_param: none,\n+            ty: ast_ty_to_ty(ccx, rb, t)\n+        };\n+      }\n     }\n }\n "}, {"sha": "66b67552b130fa37ea6bd0e4e1c55fe82dd75283", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef455190494d2fd9a6bb013efd2e59622af2bc4/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=8ef455190494d2fd9a6bb013efd2e59622af2bc4", "patch": "@@ -130,16 +130,19 @@ fn nmoddoc_from_mod(\n     itemdoc: doc::itemdoc,\n     module_: ast::foreign_mod\n ) -> doc::nmoddoc {\n+    let mut fns = ~[];\n+    for module_.items.each |item| {\n+        let itemdoc = mk_itemdoc(item.id, to_str(item.ident));\n+        match item.node {\n+          ast::foreign_item_fn(*) => {\n+            vec::push(fns, fndoc_from_fn(itemdoc));\n+          }\n+          ast::foreign_item_const(*) => {} // XXX: Not implemented.\n+        }\n+    }\n     {\n         item: itemdoc,\n-        fns: do vec::map(module_.items) |item| {\n-            let itemdoc = mk_itemdoc(item.id, to_str(item.ident));\n-            match item.node {\n-              ast::foreign_item_fn(*) => {\n-                fndoc_from_fn(itemdoc)\n-              }\n-            }\n-        },\n+        fns: fns,\n         index: none\n     }\n }"}]}