{"sha": "a0724d72b0419a4e458c0174af27c85817b1f7ba", "node_id": "C_kwDOAAsO6NoAKGEwNzI0ZDcyYjA0MTlhNGU0NThjMDE3NGFmMjdjODU4MTdiMWY3YmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-19T03:40:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T03:40:54Z"}, "message": "Rollup merge of #89988 - tmiasko:unpromote-const-drop, r=oli-obk\n\nDo not promote values with const drop that need to be dropped\n\nChanges from #88558 allowed using `~const Drop` in constants by\nintroducing a new `NeedsNonConstDrop` qualif.\n\nThe new qualif was also used for promotion purposes, and allowed\npromotion to happen for values that needs to be dropped but which\ndo have a const drop impl.\n\nSince for promoted the drop implementation is never executed,\nthis lead to observable change in behaviour. For example:\n\n```rust\n\nstruct Panic();\n\nimpl const Drop for Panic {\n    fn drop(&mut self) {\n        panic!();\n    }\n}\n\nfn main() {\n    let _ = &Panic();\n}\n```\n\nRestore the use of `NeedsDrop` qualif during promotion to avoid the issue.", "tree": {"sha": "82dfc0b15353ca077f8def846b0f5c3afcc27136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82dfc0b15353ca077f8def846b0f5c3afcc27136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0724d72b0419a4e458c0174af27c85817b1f7ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbj5GCRBK7hj4Ov3rIwAAf9QIAGgOhVW7aeSDxntInUNZZEXp\nICgMpdklYPZQ7Jmq2DK+jJGKxN9uVxAz62i7OccnfKi2LcgMAzspUbdLWFbRnyGx\nF8wMP9+nIBfvWXnZKLQVmruWrdpccHlf8DajPbaeuSro48CNeH1kiZCbYyDq/h/B\nyHw1JIP5RB/PxafooffEG7lPtvZHdCh7DDqKj2mgqAbcc4QFCqIor9lL9VkLkEDl\nA4J4aNEUU5eFkh1W7qQUz6+jhMdpCcgfO48RKsSEOrSSHZUugO20XR8cpac4AO7s\n0BcPD9Ekiw6woiV6g5vsSeucGr5Jd0wZsMK7wl6p7kj6oDV0vWimv57iWrxM5r0=\n=D/vJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 82dfc0b15353ca077f8def846b0f5c3afcc27136\nparent 8c8835d277e2b462ebf0584b4eb2db93369603a6\nparent 915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634614854 +0200\ncommitter GitHub <noreply@github.com> 1634614854 +0200\n\nRollup merge of #89988 - tmiasko:unpromote-const-drop, r=oli-obk\n\nDo not promote values with const drop that need to be dropped\n\nChanges from #88558 allowed using `~const Drop` in constants by\nintroducing a new `NeedsNonConstDrop` qualif.\n\nThe new qualif was also used for promotion purposes, and allowed\npromotion to happen for values that needs to be dropped but which\ndo have a const drop impl.\n\nSince for promoted the drop implementation is never executed,\nthis lead to observable change in behaviour. For example:\n\n```rust\n\nstruct Panic();\n\nimpl const Drop for Panic {\n    fn drop(&mut self) {\n        panic!();\n    }\n}\n\nfn main() {\n    let _ = &Panic();\n}\n```\n\nRestore the use of `NeedsDrop` qualif during promotion to avoid the issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0724d72b0419a4e458c0174af27c85817b1f7ba", "html_url": "https://github.com/rust-lang/rust/commit/a0724d72b0419a4e458c0174af27c85817b1f7ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0724d72b0419a4e458c0174af27c85817b1f7ba/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c8835d277e2b462ebf0584b4eb2db93369603a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8835d277e2b462ebf0584b4eb2db93369603a6", "html_url": "https://github.com/rust-lang/rust/commit/8c8835d277e2b462ebf0584b4eb2db93369603a6"}, {"sha": "915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f", "html_url": "https://github.com/rust-lang/rust/commit/915a581bcb3d9b7e1e2ef0da4fbfbae6b1a7fa7f"}], "stats": {"total": 122, "additions": 107, "deletions": 15}, "files": [{"sha": "03e60deea2783c9def30a57f04f538ec2f9b4155", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=a0724d72b0419a4e458c0174af27c85817b1f7ba", "patch": "@@ -22,7 +22,7 @@ use std::mem;\n use std::ops::Deref;\n \n use super::ops::{self, NonConstOp, Status};\n-use super::qualifs::{self, CustomEq, HasMutInterior, NeedsNonConstDrop};\n+use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop, NeedsNonConstDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, is_lang_special_const_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n@@ -39,7 +39,8 @@ type QualifResults<'mir, 'tcx, Q> =\n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {\n     has_mut_interior: Option<QualifResults<'mir, 'tcx, HasMutInterior>>,\n-    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n+    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsDrop>>,\n+    needs_non_const_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n     indirectly_mutable: Option<IndirectlyMutableResults<'mir, 'tcx>>,\n }\n \n@@ -80,14 +81,14 @@ impl Qualifs<'mir, 'tcx> {\n         location: Location,\n     ) -> bool {\n         let ty = ccx.body.local_decls[local].ty;\n-        if !NeedsNonConstDrop::in_any_value_of_ty(ccx, ty) {\n+        if !NeedsDrop::in_any_value_of_ty(ccx, ty) {\n             return false;\n         }\n \n         let needs_drop = self.needs_drop.get_or_insert_with(|| {\n             let ConstCx { tcx, body, .. } = *ccx;\n \n-            FlowSensitiveAnalysis::new(NeedsNonConstDrop, ccx)\n+            FlowSensitiveAnalysis::new(NeedsDrop, ccx)\n                 .into_engine(tcx, &body)\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n@@ -97,6 +98,33 @@ impl Qualifs<'mir, 'tcx> {\n         needs_drop.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n     }\n \n+    /// Returns `true` if `local` is `NeedsNonConstDrop` at the given `Location`.\n+    ///\n+    /// Only updates the cursor if absolutely necessary\n+    pub fn needs_non_const_drop(\n+        &mut self,\n+        ccx: &'mir ConstCx<'mir, 'tcx>,\n+        local: Local,\n+        location: Location,\n+    ) -> bool {\n+        let ty = ccx.body.local_decls[local].ty;\n+        if !NeedsNonConstDrop::in_any_value_of_ty(ccx, ty) {\n+            return false;\n+        }\n+\n+        let needs_non_const_drop = self.needs_non_const_drop.get_or_insert_with(|| {\n+            let ConstCx { tcx, body, .. } = *ccx;\n+\n+            FlowSensitiveAnalysis::new(NeedsNonConstDrop, ccx)\n+                .into_engine(tcx, &body)\n+                .iterate_to_fixpoint()\n+                .into_results_cursor(&body)\n+        });\n+\n+        needs_non_const_drop.seek_before_primary_effect(location);\n+        needs_non_const_drop.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n+    }\n+\n     /// Returns `true` if `local` is `HasMutInterior` at the given `Location`.\n     ///\n     /// Only updates the cursor if absolutely necessary.\n@@ -173,6 +201,7 @@ impl Qualifs<'mir, 'tcx> {\n \n         ConstQualifs {\n             needs_drop: self.needs_drop(ccx, RETURN_PLACE, return_loc),\n+            needs_non_const_drop: self.needs_non_const_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,\n             error_occured,\n@@ -999,7 +1028,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n             }\n \n             // Forbid all `Drop` terminators unless the place being dropped is a local with no\n-            // projections that cannot be `NeedsDrop`.\n+            // projections that cannot be `NeedsNonConstDrop`.\n             TerminatorKind::Drop { place: dropped_place, .. }\n             | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n@@ -1019,15 +1048,15 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     return;\n                 }\n \n-                let needs_drop = if let Some(local) = dropped_place.as_local() {\n+                let needs_non_const_drop = if let Some(local) = dropped_place.as_local() {\n                     // Use the span where the local was declared as the span of the drop error.\n                     err_span = self.body.local_decls[local].source_info.span;\n-                    self.qualifs.needs_drop(self.ccx, local, location)\n+                    self.qualifs.needs_non_const_drop(self.ccx, local, location)\n                 } else {\n                     true\n                 };\n \n-                if needs_drop {\n+                if needs_non_const_drop {\n                     self.check_op_spanned(\n                         ops::LiveDrop { dropped_at: Some(terminator.source_info.span) },\n                         err_span,"}, {"sha": "7a2be3c3bad329c8675c500b61fa3288218cce9b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=a0724d72b0419a4e458c0174af27c85817b1f7ba", "patch": "@@ -97,7 +97,7 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n                 // `src/test/ui/consts/control-flow/drop-pass.rs`; e.g., when an `Option<Vec<T>>` is\n                 // initialized with `None` and never changed, it still emits drop glue.\n                 // Hence we additionally check the qualifs here to allow more code to pass.\n-                if self.qualifs.needs_drop(self.ccx, dropped_place.local, location) {\n+                if self.qualifs.needs_non_const_drop(self.ccx, dropped_place.local, location) {\n                     // Use the span where the dropped local was declared for the error.\n                     let span = self.body.local_decls[dropped_place.local].source_info.span;\n                     self.check_live_drop(span);"}, {"sha": "dd2980d40ade7aec66ecd253784f37c679bc1405", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a0724d72b0419a4e458c0174af27c85817b1f7ba", "patch": "@@ -21,7 +21,8 @@ pub fn in_any_value_of_ty(\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n-        needs_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n+        needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n+        needs_non_const_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n         error_occured,\n     }\n@@ -98,17 +99,39 @@ impl Qualif for HasMutInterior {\n }\n \n /// Constant containing an ADT that implements `Drop`.\n-/// This must be ruled out (a) because we cannot run `Drop` during compile-time\n-/// as that might not be a `const fn`, and (b) because implicit promotion would\n-/// remove side-effects that occur as part of dropping that value.\n+/// This must be ruled out because implicit promotion would remove side-effects\n+/// that occur as part of dropping that value. N.B., the implicit promotion has\n+/// to reject const Drop implementations because even if side-effects are ruled\n+/// out through other means, the execution of the drop could diverge.\n+pub struct NeedsDrop;\n+\n+impl Qualif for NeedsDrop {\n+    const ANALYSIS_NAME: &'static str = \"flow_needs_drop\";\n+    const IS_CLEARED_ON_MOVE: bool = true;\n+\n+    fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n+        qualifs.needs_drop\n+    }\n+\n+    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        ty.needs_drop(cx.tcx, cx.param_env)\n+    }\n+\n+    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {\n+        adt.has_dtor(cx.tcx)\n+    }\n+}\n+\n+/// Constant containing an ADT that implements non-const `Drop`.\n+/// This must be ruled out because we cannot run `Drop` during compile-time.\n pub struct NeedsNonConstDrop;\n \n impl Qualif for NeedsNonConstDrop {\n     const ANALYSIS_NAME: &'static str = \"flow_needs_nonconst_drop\";\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n     fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n-        qualifs.needs_drop\n+        qualifs.needs_non_const_drop\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, mut ty: Ty<'tcx>) -> bool {"}, {"sha": "ebcc8213c604b889187c00e17d13d5f1e6b3c658", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=a0724d72b0419a4e458c0174af27c85817b1f7ba", "patch": "@@ -230,7 +230,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                         // We cannot promote things that need dropping, since the promoted value\n                         // would not get dropped.\n-                        if self.qualif_local::<qualifs::NeedsNonConstDrop>(place.local) {\n+                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n                             return Err(Unpromotable);\n                         }\n "}, {"sha": "cb3f3850958ec90d85d9e4d1e0db2667fca32a93", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0724d72b0419a4e458c0174af27c85817b1f7ba/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=a0724d72b0419a4e458c0174af27c85817b1f7ba", "patch": "@@ -225,6 +225,7 @@ pub struct BorrowCheckResult<'tcx> {\n pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n     pub needs_drop: bool,\n+    pub needs_non_const_drop: bool,\n     pub custom_eq: bool,\n     pub error_occured: Option<ErrorReported>,\n }"}, {"sha": "c896c011ab66acdc48b4d3add24f1e9ce16d934c", "filename": "src/test/ui/consts/promoted-const-drop.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0724d72b0419a4e458c0174af27c85817b1f7ba/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0724d72b0419a4e458c0174af27c85817b1f7ba/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.rs?ref=a0724d72b0419a4e458c0174af27c85817b1f7ba", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_trait_impl)]\n+#![feature(const_mut_refs)]\n+\n+struct A();\n+\n+impl const Drop for A {\n+    fn drop(&mut self) {}\n+}\n+\n+const C: A = A();\n+\n+fn main() {\n+    let _: &'static A = &A(); //~ ERROR temporary value dropped while borrowed\n+    let _: &'static [A] = &[C]; //~ ERROR temporary value dropped while borrowed\n+}"}, {"sha": "184ba0ea3b3777788a433315a7b8bbdc4fba297a", "filename": "src/test/ui/consts/promoted-const-drop.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0724d72b0419a4e458c0174af27c85817b1f7ba/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0724d72b0419a4e458c0174af27c85817b1f7ba/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr?ref=a0724d72b0419a4e458c0174af27c85817b1f7ba", "patch": "@@ -0,0 +1,24 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted-const-drop.rs:13:26\n+   |\n+LL |     let _: &'static A = &A();\n+   |            ----------    ^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     let _: &'static [A] = &[C];\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted-const-drop.rs:14:28\n+   |\n+LL |     let _: &'static [A] = &[C];\n+   |            ------------    ^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}]}