{"sha": "fc2373c5a24646745dcbc14dc58889a9d8843f4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjM3M2M1YTI0NjQ2NzQ1ZGNiYzE0ZGM1ODg4OWE5ZDg4NDNmNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-20T23:06:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-20T23:06:53Z"}, "message": "Auto merge of #37888 - bluss:chars-count, r=alexcrichton\n\nImprove .chars().count()\n\nUse a simpler loop to count the `char` of a string: count the\nnumber of non-continuation bytes. Use `count += <conditional>` which the\ncompiler understands well and can apply loop optimizations to.\n\nbenchmark descriptions and results for two configurations:\n\n- ascii: ascii text\n- cy: cyrillic text\n- jp: japanese text\n- words ascii: counting each split_whitespace item from the ascii text\n- words jp: counting each split_whitespace item from the jp text\n\n```\nx86-64 rustc -Copt-level=3\n name               orig_ ns/iter      cmov_ ns/iter      diff ns/iter   diff %\n count_ascii        1,453 (1755 MB/s)  1,398 (1824 MB/s)           -55   -3.79%\n count_cy           5,990 (856 MB/s)   2,545 (2016 MB/s)        -3,445  -57.51%\n count_jp           3,075 (1169 MB/s)  1,772 (2029 MB/s)        -1,303  -42.37%\n count_words_ascii  4,157 (521 MB/s)   1,797 (1205 MB/s)        -2,360  -56.77%\n count_words_jp     3,337 (1071 MB/s)  1,772 (2018 MB/s)        -1,565  -46.90%\n\nx86-64 rustc -Ctarget-feature=+avx -Copt-level=3\n name               orig_ ns/iter      cmov_ ns/iter      diff ns/iter   diff %\n count_ascii        1,444 (1766 MB/s)  763 (3343 MB/s)            -681  -47.16%\n count_cy           5,871 (874 MB/s)   1,527 (3360 MB/s)        -4,344  -73.99%\n count_jp           2,874 (1251 MB/s)  1,073 (3351 MB/s)        -1,801  -62.67%\n count_words_ascii  4,131 (524 MB/s)   1,871 (1157 MB/s)        -2,260  -54.71%\n count_words_jp     3,253 (1099 MB/s)  1,331 (2686 MB/s)        -1,922  -59.08%\n```\n\nI briefly explored a more involved blocked algorithm (looking at 8 or more bytes at a time),\nbut the code in this PR was always winning `count_words_ascii` in particular (counting\nmany small strings); this solution is an improvement without tradeoffs.", "tree": {"sha": "02d4e762981863131fb95ad15a3659def04d11b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d4e762981863131fb95ad15a3659def04d11b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2373c5a24646745dcbc14dc58889a9d8843f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2373c5a24646745dcbc14dc58889a9d8843f4e", "html_url": "https://github.com/rust-lang/rust/commit/fc2373c5a24646745dcbc14dc58889a9d8843f4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2373c5a24646745dcbc14dc58889a9d8843f4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc929013396eede8a22a3e7932fb3a63d2a11da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc929013396eede8a22a3e7932fb3a63d2a11da", "html_url": "https://github.com/rust-lang/rust/commit/4bc929013396eede8a22a3e7932fb3a63d2a11da"}, {"sha": "5a3aa2f73cbb08c6e41418c5378791fa24a66146", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3aa2f73cbb08c6e41418c5378791fa24a66146", "html_url": "https://github.com/rust-lang/rust/commit/5a3aa2f73cbb08c6e41418c5378791fa24a66146"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "14a0819d381bc0033ae8a320188248021a2fd380", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2373c5a24646745dcbc14dc58889a9d8843f4e/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2373c5a24646745dcbc14dc58889a9d8843f4e/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=fc2373c5a24646745dcbc14dc58889a9d8843f4e", "patch": "@@ -767,6 +767,7 @@ fn test_iterator() {\n         pos += 1;\n     }\n     assert_eq!(pos, v.len());\n+    assert_eq!(s.chars().count(), v.len());\n }\n \n #[test]"}, {"sha": "b4cd52e59f658079a1be9f6e0ef86090b0a8c2a9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc2373c5a24646745dcbc14dc58889a9d8843f4e/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2373c5a24646745dcbc14dc58889a9d8843f4e/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=fc2373c5a24646745dcbc14dc58889a9d8843f4e", "patch": "@@ -424,6 +424,17 @@ impl<'a> Iterator for Chars<'a> {\n         })\n     }\n \n+    #[inline]\n+    fn count(self) -> usize {\n+        // length in `char` is equal to the number of non-continuation bytes\n+        let bytes_len = self.iter.len();\n+        let mut cont_bytes = 0;\n+        for &byte in self.iter {\n+            cont_bytes += utf8_is_cont_byte(byte) as usize;\n+        }\n+        bytes_len - cont_bytes\n+    }\n+\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let len = self.iter.len();\n@@ -507,6 +518,11 @@ impl<'a> Iterator for CharIndices<'a> {\n         }\n     }\n \n+    #[inline]\n+    fn count(self) -> usize {\n+        self.iter.count()\n+    }\n+\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()"}]}