{"sha": "33c9ada8003844b6a683930fdd1442effffd3b0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYzlhZGE4MDAzODQ0YjZhNjgzOTMwZmRkMTQ0MmVmZmZmZDNiMGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-29T17:16:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-03T22:12:29Z"}, "message": "metadata: Remove `locator::Context::ident`\n\nIt's a crate name after renaming, so it's entirely irrelevant to crate loading", "tree": {"sha": "bd921ab28ac0cae9038f3261255d261fc232ee34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd921ab28ac0cae9038f3261255d261fc232ee34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33c9ada8003844b6a683930fdd1442effffd3b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33c9ada8003844b6a683930fdd1442effffd3b0a", "html_url": "https://github.com/rust-lang/rust/commit/33c9ada8003844b6a683930fdd1442effffd3b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33c9ada8003844b6a683930fdd1442effffd3b0a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd102aebf82718d79b215b354d002d1be74090d", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd102aebf82718d79b215b354d002d1be74090d", "html_url": "https://github.com/rust-lang/rust/commit/acd102aebf82718d79b215b354d002d1be74090d"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "64af9557ea49e1ccfd67019ad37ac22ad320c61c", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=33c9ada8003844b6a683930fdd1442effffd3b0a", "patch": "@@ -337,23 +337,21 @@ impl<'a> CrateLoader<'a> {\n     fn resolve_crate<'b>(\n         &'b mut self,\n         root: &'b Option<CratePaths>,\n-        ident: Symbol,\n         name: Symbol,\n         hash: Option<&'b Svh>,\n         extra_filename: Option<&'b str>,\n         span: Span,\n         path_kind: PathKind,\n         mut dep_kind: DepKind,\n     ) -> Result<(CrateNum, Lrc<cstore::CrateMetadata>), LoadError<'b>> {\n-        info!(\"resolving crate `extern crate {} as {}`\", name, ident);\n+        info!(\"resolving crate `{}`\", name);\n         let result = if let Some(cnum) = self.existing_match(name, hash, path_kind) {\n             (LoadResult::Previous(cnum), None)\n         } else {\n             info!(\"falling back to a load\");\n             let mut locate_ctxt = locator::Context {\n                 sess: self.sess,\n                 span,\n-                ident,\n                 crate_name: name,\n                 hash,\n                 extra_filename,\n@@ -493,25 +491,23 @@ impl<'a> CrateLoader<'a> {\n                 _ => dep.kind,\n             };\n             let (local_cnum, ..) = self.resolve_crate(\n-                root, dep.name, dep.name, Some(&dep.hash), Some(&dep.extra_filename), span,\n+                root, dep.name, Some(&dep.hash), Some(&dep.extra_filename), span,\n                 PathKind::Dependency, dep_kind,\n             ).unwrap_or_else(|err| err.report());\n             local_cnum\n         })).collect()\n     }\n \n-    fn read_extension_crate(&mut self, span: Span, orig_name: Symbol, rename: Symbol)\n-                            -> ExtensionCrate {\n-        info!(\"read extension crate `extern crate {} as {}`\", orig_name, rename);\n+    fn read_extension_crate(&mut self, name: Symbol, span: Span) -> ExtensionCrate {\n+        info!(\"read extension crate `{}`\", name);\n         let target_triple = self.sess.opts.target_triple.clone();\n         let host_triple = TargetTriple::from_triple(config::host_triple());\n         let is_cross = target_triple != host_triple;\n         let mut target_only = false;\n         let mut locate_ctxt = locator::Context {\n             sess: self.sess,\n             span,\n-            ident: orig_name,\n-            crate_name: rename,\n+            crate_name: name,\n             hash: None,\n             extra_filename: None,\n             filesearch: self.sess.host_filesearch(PathKind::Crate),\n@@ -606,7 +602,7 @@ impl<'a> CrateLoader<'a> {\n                                  span: Span,\n                                  name: Symbol)\n                                  -> Option<(PathBuf, CrateDisambiguator)> {\n-        let ekrate = self.read_extension_crate(span, name, name);\n+        let ekrate = self.read_extension_crate(name, span);\n \n         if ekrate.target_only {\n             // Need to abort before syntax expansion.\n@@ -699,7 +695,7 @@ impl<'a> CrateLoader<'a> {\n \n         let dep_kind = DepKind::Implicit;\n         let (cnum, data) =\n-            self.resolve_crate(&None, name, name, None, None, DUMMY_SP, PathKind::Crate, dep_kind)\n+            self.resolve_crate(&None, name, None, None, DUMMY_SP, PathKind::Crate, dep_kind)\n                 .unwrap_or_else(|err| err.report());\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n@@ -807,7 +803,7 @@ impl<'a> CrateLoader<'a> {\n                 let symbol = Symbol::intern(name);\n                 let dep_kind = DepKind::Explicit;\n                 let (_, data) =\n-                    self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n+                    self.resolve_crate(&None, symbol, None, None, DUMMY_SP,\n                                        PathKind::Crate, dep_kind)\n                         .unwrap_or_else(|err| err.report());\n \n@@ -831,7 +827,7 @@ impl<'a> CrateLoader<'a> {\n             let symbol = Symbol::intern(\"profiler_builtins\");\n             let dep_kind = DepKind::Implicit;\n             let (_, data) =\n-                self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n+                self.resolve_crate(&None, symbol, None, None, DUMMY_SP,\n                                    PathKind::Crate, dep_kind)\n                     .unwrap_or_else(|err| err.report());\n \n@@ -1015,7 +1011,7 @@ impl<'a> CrateLoader<'a> {\n                 };\n \n                 let (cnum, ..) = self.resolve_crate(\n-                    &None, item.ident.name, orig_name, None, None,\n+                    &None, orig_name, None, None,\n                     item.span, PathKind::Crate, dep_kind,\n                 ).unwrap_or_else(|err| err.report());\n \n@@ -1044,7 +1040,7 @@ impl<'a> CrateLoader<'a> {\n         span: Span,\n     ) -> CrateNum {\n         let cnum = self.resolve_crate(\n-            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+            &None, name, None, None, span, PathKind::Crate, DepKind::Explicit\n         ).unwrap_or_else(|err| err.report()).0;\n \n         self.update_extern_crate(\n@@ -1068,7 +1064,7 @@ impl<'a> CrateLoader<'a> {\n         span: Span,\n     ) -> Option<CrateNum> {\n         let cnum = self.resolve_crate(\n-            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+            &None, name, None, None, span, PathKind::Crate, DepKind::Explicit\n         ).ok()?.0;\n \n         self.update_extern_crate("}, {"sha": "f8b2777403346651252c91560c0c12e7247db8c1", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=33c9ada8003844b6a683930fdd1442effffd3b0a", "patch": "@@ -254,7 +254,6 @@ pub struct CrateMismatch {\n pub struct Context<'a> {\n     pub sess: &'a Session,\n     pub span: Span,\n-    pub ident: Symbol,\n     pub crate_name: Symbol,\n     pub hash: Option<&'a Svh>,\n     pub extra_filename: Option<&'a str>,\n@@ -332,12 +331,12 @@ impl<'a> Context<'a> {\n                                            self.span,\n                                            E0460,\n                                            \"found possibly newer version of crate `{}`{}\",\n-                                           self.ident,\n+                                           self.crate_name,\n                                            add);\n             err.note(\"perhaps that crate needs to be recompiled?\");\n             let mismatches = self.rejected_via_hash.iter();\n             for &CrateMismatch { ref path, .. } in mismatches {\n-                msg.push_str(&format!(\"\\ncrate `{}`: {}\", self.ident, path.display()));\n+                msg.push_str(&format!(\"\\ncrate `{}`: {}\", self.crate_name, path.display()));\n             }\n             match self.root {\n                 &None => {}\n@@ -355,13 +354,13 @@ impl<'a> Context<'a> {\n                                            E0461,\n                                            \"couldn't find crate `{}` \\\n                                             with expected target triple {}{}\",\n-                                           self.ident,\n+                                           self.crate_name,\n                                            self.triple,\n                                            add);\n             let mismatches = self.rejected_via_triple.iter();\n             for &CrateMismatch { ref path, ref got } in mismatches {\n                 msg.push_str(&format!(\"\\ncrate `{}`, target triple {}: {}\",\n-                                      self.ident,\n+                                      self.crate_name,\n                                       got,\n                                       path.display()));\n             }\n@@ -372,12 +371,12 @@ impl<'a> Context<'a> {\n                                            self.span,\n                                            E0462,\n                                            \"found staticlib `{}` instead of rlib or dylib{}\",\n-                                           self.ident,\n+                                           self.crate_name,\n                                            add);\n             err.help(\"please recompile that crate using --crate-type lib\");\n             let mismatches = self.rejected_via_kind.iter();\n             for &CrateMismatch { ref path, .. } in mismatches {\n-                msg.push_str(&format!(\"\\ncrate `{}`: {}\", self.ident, path.display()));\n+                msg.push_str(&format!(\"\\ncrate `{}`: {}\", self.crate_name, path.display()));\n             }\n             err.note(&msg);\n             err\n@@ -387,14 +386,14 @@ impl<'a> Context<'a> {\n                                            E0514,\n                                            \"found crate `{}` compiled by an incompatible version \\\n                                             of rustc{}\",\n-                                           self.ident,\n+                                           self.crate_name,\n                                            add);\n             err.help(&format!(\"please recompile that crate using this compiler ({})\",\n                               rustc_version()));\n             let mismatches = self.rejected_via_version.iter();\n             for &CrateMismatch { ref path, ref got } in mismatches {\n                 msg.push_str(&format!(\"\\ncrate `{}` compiled by {}: {}\",\n-                                      self.ident,\n+                                      self.crate_name,\n                                       got,\n                                       path.display()));\n             }\n@@ -405,10 +404,10 @@ impl<'a> Context<'a> {\n                                            self.span,\n                                            E0463,\n                                            \"can't find crate for `{}`{}\",\n-                                           self.ident,\n+                                           self.crate_name,\n                                            add);\n \n-            if (self.ident == sym::std || self.ident == sym::core)\n+            if (self.crate_name == sym::std || self.crate_name == sym::core)\n                 && self.triple != TargetTriple::from_triple(config::host_triple()) {\n                 err.note(&format!(\"the `{}` target may not be installed\", self.triple));\n             }"}, {"sha": "975209efb0c1ba2c63d6646fb9d79e0c622bffdf", "filename": "src/test/ui/use/use-meta-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Ftest%2Fui%2Fuse%2Fuse-meta-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Ftest%2Fui%2Fuse%2Fuse-meta-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-meta-mismatch.rs?ref=33c9ada8003844b6a683930fdd1442effffd3b0a", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:can't find crate for `extra`\n+// error-pattern:can't find crate for `fake_crate`\n \n extern crate fake_crate as extra;\n "}, {"sha": "62b71fe8e12f497809f8795a6f026f7f60ad7ea0", "filename": "src/test/ui/use/use-meta-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Ftest%2Fui%2Fuse%2Fuse-meta-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33c9ada8003844b6a683930fdd1442effffd3b0a/src%2Ftest%2Fui%2Fuse%2Fuse-meta-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-meta-mismatch.stderr?ref=33c9ada8003844b6a683930fdd1442effffd3b0a", "patch": "@@ -1,4 +1,4 @@\n-error[E0463]: can't find crate for `extra`\n+error[E0463]: can't find crate for `fake_crate`\n   --> $DIR/use-meta-mismatch.rs:3:1\n    |\n LL | extern crate fake_crate as extra;"}]}