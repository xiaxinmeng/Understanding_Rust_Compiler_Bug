{"sha": "3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNTdiOGJjYzBhNmEwMzc4YTljZWEwMjkxYmI3NmQ0NGJlYzZmZjg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-07T18:28:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-28T09:33:18Z"}, "message": "doc comments: Less attribute mimicking", "tree": {"sha": "6ed3c1b94ff90cfe6e72625d51824ed67e5e0112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed3c1b94ff90cfe6e72625d51824ed67e5e0112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "html_url": "https://github.com/rust-lang/rust/commit/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a087ad3a924be12343bb035bf9b63ed81f650bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a087ad3a924be12343bb035bf9b63ed81f650bf", "html_url": "https://github.com/rust-lang/rust/commit/3a087ad3a924be12343bb035bf9b63ed81f650bf"}], "stats": {"total": 184, "additions": 81, "deletions": 103}, "files": [{"sha": "fe53a2574bc8a29842764b32191fc1bc44161188", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -314,6 +314,10 @@ pub struct MissingDoc {\n impl_lint_pass!(MissingDoc => [MISSING_DOCS]);\n \n fn has_doc(attr: &ast::Attribute) -> bool {\n+    if attr.is_doc_comment() {\n+        return true;\n+    }\n+\n     if !attr.check_name(sym::doc) {\n         return false;\n     }\n@@ -768,7 +772,7 @@ impl UnusedDocComment {\n \n             let span = sugared_span.take().unwrap_or_else(|| attr.span);\n \n-            if attr.check_name(sym::doc) {\n+            if attr.is_doc_comment() || attr.check_name(sym::doc) {\n                 let mut err = cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, \"unused doc comment\");\n \n                 err.span_label("}, {"sha": "1501e7084a439065956b3480f8c33931876de35c", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -271,6 +271,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n     fn check_attribute(&mut self, cx: &LateContext<'_, '_>, attr: &ast::Attribute) {\n         debug!(\"checking attribute: {:?}\", attr);\n \n+        if attr.is_doc_comment() {\n+            return;\n+        }\n+\n         let attr_info = attr.ident().and_then(|ident| self.builtin_attributes.get(&ident.name));\n \n         if let Some(&&(name, ty, ..)) = attr_info {"}, {"sha": "9b96702fa1f9d73a900c1feaab610c2707cd6d38", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -4,16 +4,17 @@ use crate::parse_in;\n \n use rustc_errors::{Applicability, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n-use syntax::ast::{\n-    self, AttrKind, Attribute, Ident, MacArgs, MacDelimiter, MetaItem, MetaItemKind,\n-};\n-use syntax::attr::mk_name_value_item_str;\n+use syntax::ast::{self, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n use syntax::sess::ParseSess;\n use syntax::tokenstream::DelimSpan;\n use syntax_pos::{sym, Symbol};\n \n pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n+    if attr.is_doc_comment() {\n+        return;\n+    }\n+\n     let attr_info =\n         attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n \n@@ -33,26 +34,22 @@ pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n }\n \n pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, MetaItem> {\n-    Ok(match attr.kind {\n-        AttrKind::Normal(ref item) => MetaItem {\n-            span: attr.span,\n-            path: item.path.clone(),\n-            kind: match &attr.get_normal_item().args {\n-                MacArgs::Empty => MetaItemKind::Word,\n-                MacArgs::Eq(_, t) => {\n-                    let v = parse_in(sess, t.clone(), \"name value\", |p| p.parse_unsuffixed_lit())?;\n-                    MetaItemKind::NameValue(v)\n-                }\n-                MacArgs::Delimited(dspan, delim, t) => {\n-                    check_meta_bad_delim(sess, *dspan, *delim, \"wrong meta list delimiters\");\n-                    let nmis = parse_in(sess, t.clone(), \"meta list\", |p| p.parse_meta_seq_top())?;\n-                    MetaItemKind::List(nmis)\n-                }\n-            },\n+    let item = attr.get_normal_item();\n+    Ok(MetaItem {\n+        span: attr.span,\n+        path: item.path.clone(),\n+        kind: match &item.args {\n+            MacArgs::Empty => MetaItemKind::Word,\n+            MacArgs::Eq(_, t) => {\n+                let v = parse_in(sess, t.clone(), \"name value\", |p| p.parse_unsuffixed_lit())?;\n+                MetaItemKind::NameValue(v)\n+            }\n+            MacArgs::Delimited(dspan, delim, t) => {\n+                check_meta_bad_delim(sess, *dspan, *delim, \"wrong meta list delimiters\");\n+                let nmis = parse_in(sess, t.clone(), \"meta list\", |p| p.parse_meta_seq_top())?;\n+                MetaItemKind::List(nmis)\n+            }\n         },\n-        AttrKind::DocComment(comment) => {\n-            mk_name_value_item_str(Ident::new(sym::doc, attr.span), comment, attr.span)\n-        }\n     })\n }\n "}, {"sha": "9f4fcb1f330a84300df66ff85a361c69f2f34c93", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -815,15 +815,15 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let mut result = String::new();\n \n         for attr in attrs {\n-            if attr.check_name(sym::doc) {\n-                if let Some(val) = attr.value_str() {\n-                    if attr.is_doc_comment() {\n-                        result.push_str(&strip_doc_comment_decoration(&val.as_str()));\n-                    } else {\n-                        result.push_str(&val.as_str());\n-                    }\n-                    result.push('\\n');\n-                } else if let Some(meta_list) = attr.meta_item_list() {\n+            if let Some(val) = attr.doc_str() {\n+                if attr.is_doc_comment() {\n+                    result.push_str(&strip_doc_comment_decoration(&val.as_str()));\n+                } else {\n+                    result.push_str(&val.as_str());\n+                }\n+                result.push('\\n');\n+            } else if attr.check_name(sym::doc) {\n+                if let Some(meta_list) = attr.meta_item_list() {\n                     meta_list\n                         .into_iter()\n                         .filter(|it| it.check_name(sym::include))"}, {"sha": "a8781604622c6cfadd1d0cb649ccda1ed039ecbd", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 21, "deletions": 46, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -17,10 +17,10 @@ use rustc::ty::layout::VariantIdx;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_index::vec::IndexVec;\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, AttrKind, AttrStyle, Attribute, Ident};\n+use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n use syntax::source_map::DUMMY_SP;\n-use syntax::util::comments;\n+use syntax::util::comments::strip_doc_comment_decoration;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::symbol::{sym, Symbol};\n use syntax_pos::{self, FileName};\n@@ -502,58 +502,33 @@ impl Attributes {\n         let mut cfg = Cfg::True;\n         let mut doc_line = 0;\n \n-        /// If `attr` is a doc comment, strips the leading and (if present)\n-        /// trailing comments symbols, e.g. `///`, `/**`, and `*/`. Otherwise,\n-        /// returns `attr` unchanged.\n-        pub fn with_doc_comment_markers_stripped<T>(\n-            attr: &Attribute,\n-            f: impl FnOnce(&Attribute) -> T,\n-        ) -> T {\n-            match attr.kind {\n-                AttrKind::Normal(_) => f(attr),\n-                AttrKind::DocComment(comment) => {\n-                    let comment =\n-                        Symbol::intern(&comments::strip_doc_comment_decoration(&comment.as_str()));\n-                    f(&Attribute {\n-                        kind: AttrKind::DocComment(comment),\n-                        id: attr.id,\n-                        style: attr.style,\n-                        span: attr.span,\n-                    })\n-                }\n-            }\n-        }\n-\n         let other_attrs = attrs\n             .iter()\n             .filter_map(|attr| {\n-                with_doc_comment_markers_stripped(attr, |attr| {\n+                if let Some(value) = attr.doc_str() {\n+                    let (value, mk_fragment): (_, fn(_, _, _) -> _) = if attr.is_doc_comment() {\n+                        (strip_doc_comment_decoration(&value.as_str()), DocFragment::SugaredDoc)\n+                    } else {\n+                        (value.to_string(), DocFragment::RawDoc)\n+                    };\n+\n+                    let line = doc_line;\n+                    doc_line += value.lines().count();\n+                    doc_strings.push(mk_fragment(line, attr.span, value));\n+\n+                    if sp.is_none() {\n+                        sp = Some(attr.span);\n+                    }\n+                    None\n+                } else {\n                     if attr.check_name(sym::doc) {\n                         if let Some(mi) = attr.meta() {\n-                            if let Some(value) = mi.value_str() {\n-                                // Extracted #[doc = \"...\"]\n-                                let value = value.to_string();\n-                                let line = doc_line;\n-                                doc_line += value.lines().count();\n-\n-                                if attr.is_doc_comment() {\n-                                    doc_strings\n-                                        .push(DocFragment::SugaredDoc(line, attr.span, value));\n-                                } else {\n-                                    doc_strings.push(DocFragment::RawDoc(line, attr.span, value));\n-                                }\n-\n-                                if sp.is_none() {\n-                                    sp = Some(attr.span);\n-                                }\n-                                return None;\n-                            } else if let Some(cfg_mi) = Attributes::extract_cfg(&mi) {\n+                            if let Some(cfg_mi) = Attributes::extract_cfg(&mi) {\n                                 // Extracted #[doc(cfg(...))]\n                                 match Cfg::parse(cfg_mi) {\n                                     Ok(new_cfg) => cfg &= new_cfg,\n                                     Err(e) => diagnostic.span_err(e.span, e.msg),\n                                 }\n-                                return None;\n                             } else if let Some((filename, contents)) =\n                                 Attributes::extract_include(&mi)\n                             {\n@@ -566,7 +541,7 @@ impl Attributes {\n                         }\n                     }\n                     Some(attr.clone())\n-                })\n+                }\n             })\n             .collect();\n \n@@ -589,7 +564,7 @@ impl Attributes {\n \n         let inner_docs = attrs\n             .iter()\n-            .filter(|a| a.check_name(sym::doc))\n+            .filter(|a| a.doc_str().is_some())\n             .next()\n             .map_or(true, |a| a.style == AttrStyle::Inner);\n "}, {"sha": "0a2004a8229e99e78d11302a4b221f09d1ef6586", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -2364,10 +2364,6 @@ pub enum AttrKind {\n     /// A doc comment (e.g. `/// ...`, `//! ...`, `/** ... */`, `/*! ... */`).\n     /// Doc attributes (e.g. `#[doc=\"...\"]`) are represented with the `Normal`\n     /// variant (which is much less compact and thus more expensive).\n-    ///\n-    /// Note: `self.has_name(sym::doc)` and `self.check_name(sym::doc)` succeed\n-    /// for this variant, but this may change in the future.\n-    /// ```\n     DocComment(Symbol),\n }\n "}, {"sha": "bf64333830ea2c2f07b2ff983f485b64627d14e7", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -16,7 +16,7 @@ use syntax_pos::{symbol::sym, symbol::Symbol, Span};\n use rustc_error_codes::*;\n \n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n-    attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n+    attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n }\n \n enum AttrError {"}, {"sha": "0cd300384f8561e42c9ee72065fe457aae67f6c6", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -139,7 +139,7 @@ impl Attribute {\n     pub fn has_name(&self, name: Symbol) -> bool {\n         match self.kind {\n             AttrKind::Normal(ref item) => item.path == name,\n-            AttrKind::DocComment(_) => name == sym::doc,\n+            AttrKind::DocComment(_) => false,\n         }\n     }\n \n@@ -163,7 +163,7 @@ impl Attribute {\n                     None\n                 }\n             }\n-            AttrKind::DocComment(_) => Some(Ident::new(sym::doc, self.span)),\n+            AttrKind::DocComment(_) => None,\n         }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n@@ -173,7 +173,7 @@ impl Attribute {\n     pub fn value_str(&self) -> Option<Symbol> {\n         match self.kind {\n             AttrKind::Normal(ref item) => item.meta(self.span).and_then(|meta| meta.value_str()),\n-            AttrKind::DocComment(comment) => Some(comment),\n+            AttrKind::DocComment(..) => None,\n         }\n     }\n \n@@ -279,27 +279,35 @@ impl Attribute {\n         }\n     }\n \n+    pub fn doc_str(&self) -> Option<Symbol> {\n+        match self.kind {\n+            AttrKind::DocComment(symbol) => Some(symbol),\n+            AttrKind::Normal(ref item) if item.path == sym::doc => {\n+                item.meta(self.span).and_then(|meta| meta.value_str())\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     pub fn get_normal_item(&self) -> &AttrItem {\n         match self.kind {\n             AttrKind::Normal(ref item) => item,\n-            AttrKind::DocComment(_) => panic!(\"unexpected sugared doc\"),\n+            AttrKind::DocComment(_) => panic!(\"unexpected doc comment\"),\n         }\n     }\n \n     pub fn unwrap_normal_item(self) -> AttrItem {\n         match self.kind {\n             AttrKind::Normal(item) => item,\n-            AttrKind::DocComment(_) => panic!(\"unexpected sugared doc\"),\n+            AttrKind::DocComment(_) => panic!(\"unexpected doc comment\"),\n         }\n     }\n \n     /// Extracts the MetaItem from inside this Attribute.\n     pub fn meta(&self) -> Option<MetaItem> {\n         match self.kind {\n             AttrKind::Normal(ref item) => item.meta(self.span),\n-            AttrKind::DocComment(comment) => {\n-                Some(mk_name_value_item_str(Ident::new(sym::doc, self.span), comment, self.span))\n-            }\n+            AttrKind::DocComment(..) => None,\n         }\n     }\n }"}, {"sha": "833fda6a2ebe409a5133b1c45d3e79e38980fc0f", "filename": "src/libsyntax_expand/parse/tests.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Ftests.rs?ref=3d57b8bcc0a6a0378a9cea0291bb76d44bec6ff8", "patch": "@@ -3,12 +3,11 @@ use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_pa\n use errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n use syntax::ast::{self, Name, PatKind};\n-use syntax::attr::first_attr_value_str_by_name;\n use syntax::print::pprust::item_to_string;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n-use syntax::symbol::{kw, sym};\n+use syntax::symbol::{kw, sym, Symbol};\n use syntax::token::{self, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use syntax::visit;\n@@ -244,25 +243,20 @@ fn crlf_doc_comments() {\n         let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name_1, source, &sess).unwrap().unwrap();\n-        let doc = first_attr_value_str_by_name(&item.attrs, sym::doc).unwrap();\n+        let doc = item.attrs.iter().filter_map(|at| at.doc_str()).next().unwrap();\n         assert_eq!(doc.as_str(), \"/// doc comment\");\n \n         let name_2 = FileName::Custom(\"crlf_source_2\".to_string());\n         let source = \"/// doc comment\\r\\n/// line 2\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name_2, source, &sess).unwrap().unwrap();\n-        let docs = item\n-            .attrs\n-            .iter()\n-            .filter(|a| a.has_name(sym::doc))\n-            .map(|a| a.value_str().unwrap().to_string())\n-            .collect::<Vec<_>>();\n-        let b: &[_] = &[\"/// doc comment\".to_string(), \"/// line 2\".to_string()];\n+        let docs = item.attrs.iter().filter_map(|at| at.doc_str()).collect::<Vec<_>>();\n+        let b: &[_] = &[Symbol::intern(\"/// doc comment\"), Symbol::intern(\"/// line 2\")];\n         assert_eq!(&docs[..], b);\n \n         let name_3 = FileName::Custom(\"clrf_source_3\".to_string());\n         let source = \"/** doc comment\\r\\n *  with CRLF */\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name_3, source, &sess).unwrap().unwrap();\n-        let doc = first_attr_value_str_by_name(&item.attrs, sym::doc).unwrap();\n+        let doc = item.attrs.iter().filter_map(|at| at.doc_str()).next().unwrap();\n         assert_eq!(doc.as_str(), \"/** doc comment\\n *  with CRLF */\");\n     });\n }"}]}