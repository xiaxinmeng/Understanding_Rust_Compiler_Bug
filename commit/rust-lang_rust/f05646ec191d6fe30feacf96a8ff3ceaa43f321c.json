{"sha": "f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTY0NmVjMTkxZDZmZTMwZmVhY2Y5NmE4ZmYzY2VhYTQzZjMyMWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-16T16:33:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-16T16:33:09Z"}, "message": "Rollup merge of #67318 - Centril:spdocs, r=matthewjasper\n\nImprove typeck & lowering docs for slice patterns\n\ncc #62254\n\nr? @matthewjasper", "tree": {"sha": "6f4af4f32bde69e96a0b9bed8c0ebac3d910c21f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f4af4f32bde69e96a0b9bed8c0ebac3d910c21f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd97HFCRBK7hj4Ov3rIwAAdHIIAJDeEtB5mVbK+BqvZfN/ICHe\nGlMAOV5m2BhiRvnLmQxCJrB1rQCrYqWoxHenY5OfqDTY0qhyLUhe+SCV+rcJ/0Jt\n2Y29lrJm1ANAmLaECpcd+idxrZ9cCsfayBVYpjqWx4PAz4mjzU4aTtCn8IxKvPoY\n3ib3jInz9hiSKz8aF7DMKqZ8LBK28TD3ezYRpIUraneNTIfPC7ORfRMEjClvqLtu\nuMmX5psxXgyjXLfUwcPPfIZ/mW+XWOccNzC7S+oBl4ppel4SL5GZc6pvMSjSfkC3\nJVFaFNxMO2vj6RFyD7sKjakJninfH/Is8caP7GXh+9Y3qQkjG6emDAMzA9oELsM=\n=DUsN\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f4af4f32bde69e96a0b9bed8c0ebac3d910c21f\nparent a1580e72daee5fa9b7a61a74a20326b8c5741177\nparent d9d1f2376f9e2f092e6a01cd14235bdc0c129706\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576513989 +0100\ncommitter GitHub <noreply@github.com> 1576513989 +0100\n\nRollup merge of #67318 - Centril:spdocs, r=matthewjasper\n\nImprove typeck & lowering docs for slice patterns\n\ncc #62254\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "html_url": "https://github.com/rust-lang/rust/commit/f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1580e72daee5fa9b7a61a74a20326b8c5741177", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1580e72daee5fa9b7a61a74a20326b8c5741177", "html_url": "https://github.com/rust-lang/rust/commit/a1580e72daee5fa9b7a61a74a20326b8c5741177"}, {"sha": "d9d1f2376f9e2f092e6a01cd14235bdc0c129706", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d1f2376f9e2f092e6a01cd14235bdc0c129706", "html_url": "https://github.com/rust-lang/rust/commit/d9d1f2376f9e2f092e6a01cd14235bdc0c129706"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "ec9d6802defa305df11e09a920f8875e6bf90b64", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "patch": "@@ -2852,19 +2852,23 @@ impl<'a> LoweringContext<'a> {\n         let mut rest = None;\n \n         let mut iter = pats.iter().enumerate();\n-        while let Some((idx, pat)) = iter.next() {\n-            // Interpret the first `..` pattern as a subtuple pattern.\n+        for (idx, pat) in iter.by_ref() {\n+            // Interpret the first `..` pattern as a sub-tuple pattern.\n+            // Note that unlike for slice patterns,\n+            // where `xs @ ..` is a legal sub-slice pattern,\n+            // it is not a legal sub-tuple pattern.\n             if pat.is_rest() {\n                 rest = Some((idx, pat.span));\n                 break;\n             }\n-            // It was not a subslice pattern so lower it normally.\n+            // It was not a sub-tuple pattern so lower it normally.\n             elems.push(self.lower_pat(pat));\n         }\n \n-        while let Some((_, pat)) = iter.next() {\n-            // There was a previous subtuple pattern; make sure we don't allow more.\n+        for (_, pat) in iter {\n+            // There was a previous sub-tuple pattern; make sure we don't allow more...\n             if pat.is_rest() {\n+                // ...but there was one again, so error.\n                 self.ban_extra_rest_pat(pat.span, rest.unwrap().1, ctx);\n             } else {\n                 elems.push(self.lower_pat(pat));\n@@ -2874,36 +2878,44 @@ impl<'a> LoweringContext<'a> {\n         (elems.into(), rest.map(|(ddpos, _)| ddpos))\n     }\n \n+    /// Lower a slice pattern of form `[pat_0, ..., pat_n]` into\n+    /// `hir::PatKind::Slice(before, slice, after)`.\n+    ///\n+    /// When encountering `($binding_mode $ident @)? ..` (`slice`),\n+    /// this is interpreted as a sub-slice pattern semantically.\n+    /// Patterns that follow, which are not like `slice` -- or an error occurs, are in `after`.\n     fn lower_pat_slice(&mut self, pats: &[AstP<Pat>]) -> hir::PatKind {\n         let mut before = Vec::new();\n         let mut after = Vec::new();\n         let mut slice = None;\n         let mut prev_rest_span = None;\n \n         let mut iter = pats.iter();\n-        while let Some(pat) = iter.next() {\n-            // Interpret the first `((ref mut?)? x @)? ..` pattern as a subslice pattern.\n+        // Lower all the patterns until the first occurence of a sub-slice pattern.\n+        for pat in iter.by_ref() {\n             match pat.kind {\n+                // Found a sub-slice pattern `..`. Record, lower it to `_`, and stop here.\n                 PatKind::Rest => {\n                     prev_rest_span = Some(pat.span);\n                     slice = Some(self.pat_wild_with_node_id_of(pat));\n                     break;\n                 },\n+                // Found a sub-slice pattern `$binding_mode $ident @ ..`.\n+                // Record, lower it to `$binding_mode $ident @ _`, and stop here.\n                 PatKind::Ident(ref bm, ident, Some(ref sub)) if sub.is_rest() => {\n                     prev_rest_span = Some(sub.span);\n                     let lower_sub = |this: &mut Self| Some(this.pat_wild_with_node_id_of(sub));\n                     let node = self.lower_pat_ident(pat, bm, ident, lower_sub);\n                     slice = Some(self.pat_with_node_id_of(pat, node));\n                     break;\n                 },\n-                _ => {}\n+                // It was not a subslice pattern so lower it normally.\n+                _ => before.push(self.lower_pat(pat)),\n             }\n-\n-            // It was not a subslice pattern so lower it normally.\n-            before.push(self.lower_pat(pat));\n         }\n \n-        while let Some(pat) = iter.next() {\n+        // Lower all the patterns after the first sub-slice pattern.\n+        for pat in iter {\n             // There was a previous subslice pattern; make sure we don't allow more.\n             let rest_span = match pat.kind {\n                 PatKind::Rest => Some(pat.span),\n@@ -2915,8 +2927,10 @@ impl<'a> LoweringContext<'a> {\n                 _ => None,\n             };\n             if let Some(rest_span) = rest_span {\n+                // We have e.g., `[a, .., b, ..]`. That's no good, error!\n                 self.ban_extra_rest_pat(rest_span, prev_rest_span.unwrap(), \"slice\");\n             } else {\n+                // Lower the pattern normally.\n                 after.push(self.lower_pat(pat));\n             }\n         }"}, {"sha": "6b354b01518eab02d9d6e90279c61f0f4a97f69a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "patch": "@@ -1048,8 +1048,15 @@ pub enum PatKind {\n     /// A range pattern (e.g., `1..=2` or `1..2`).\n     Range(P<Expr>, P<Expr>, RangeEnd),\n \n-    /// `[a, b, ..i, y, z]` is represented as:\n-    ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`.\n+    /// A slice pattern, `[before_0, ..., before_n, (slice, after_0, ..., after_n)?]`.\n+    ///\n+    /// Here, `slice` is lowered from the syntax `($binding_mode $ident @)? ..`.\n+    /// If `slice` exists, then `after` can be non-empty.\n+    ///\n+    /// The representation for e.g., `[a, b, .., c, d]` is:\n+    /// ```\n+    /// PatKind::Slice([Binding(a), Binding(b)], Some(Wild), [Binding(c), Binding(d)])\n+    /// ```\n     Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n }\n "}, {"sha": "65a5405c03772b4ecb3701c54868c251faebf011", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "patch": "@@ -5351,9 +5351,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                       directly, not through a function pointer\");\n     }\n \n-    // Resolves `typ` by a single level if `typ` is a type variable.\n-    // If no resolution is possible, then an error is reported.\n-    // Numeric inference variables may be left unresolved.\n+    /// Resolves `typ` by a single level if `typ` is a type variable.\n+    /// If no resolution is possible, then an error is reported.\n+    /// Numeric inference variables may be left unresolved.\n     pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let ty = self.resolve_vars_with_obligations(ty);\n         if !ty.is_ty_var() {"}, {"sha": "4fb57a65625747cfe82607c4f4b20faf7ed4d6e2", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05646ec191d6fe30feacf96a8ff3ceaa43f321c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f05646ec191d6fe30feacf96a8ff3ceaa43f321c", "patch": "@@ -1154,6 +1154,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.mk_ref(region, mt)\n     }\n \n+    /// Type check a slice pattern.\n+    ///\n+    /// Syntactically, these look like `[pat_0, ..., pat_n]`.\n+    /// Semantically, we are type checking a pattern with structure:\n+    /// ```\n+    /// [before_0, ..., before_n, (slice, after_0, ... after_n)?]\n+    /// ```\n+    /// The type of `slice`, if it is present, depends on the `expected` type.\n+    /// If `slice` is missing, then so is `after_i`.\n+    /// If `slice` is present, it can still represent 0 elements.\n     fn check_pat_slice(\n         &self,\n         span: Span,\n@@ -1167,27 +1177,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         let expected_ty = self.structurally_resolved_type(span, expected);\n         let (inner_ty, slice_ty) = match expected_ty.kind {\n+            // An array, so we might have something like `let [a, b, c] = [0, 1, 2];`.\n             ty::Array(inner_ty, size) => {\n                 let slice_ty = if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n+                    // Now we know the length...\n                     let min_len = before.len() as u64 + after.len() as u64;\n                     if slice.is_none() {\n+                        // ...and since there is no variable-length pattern,\n+                        // we require an exact match between the number of elements\n+                        // in the array pattern and as provided by the matched type.\n                         if min_len != size {\n                             self.error_scrutinee_inconsistent_length(span, min_len, size)\n                         }\n                         tcx.types.err\n                     } else if let Some(rest) = size.checked_sub(min_len) {\n+                        // The variable-length pattern was there,\n+                        // so it has an array type with the remaining elements left as its size...\n                         tcx.mk_array(inner_ty, rest)\n                     } else {\n+                        // ...however, in this case, there were no remaining elements.\n+                        // That is, the slice pattern requires more than the array type offers.\n                         self.error_scrutinee_with_rest_inconsistent_length(span, min_len, size);\n                         tcx.types.err\n                     }\n                 } else {\n+                    // No idea what the length is, which happens if we have e.g.,\n+                    // `let [a, b] = arr` where `arr: [T; N]` where `const N: usize`.\n                     self.error_scrutinee_unfixed_length(span);\n                     tcx.types.err\n                 };\n                 (inner_ty, slice_ty)\n             }\n             ty::Slice(inner_ty) => (inner_ty, expected_ty),\n+            // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n                 if !expected_ty.references_error() {\n                     self.error_expected_array_or_slice(span, expected_ty);\n@@ -1196,12 +1218,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n+        // Type check all the patterns before `slice`.\n         for elt in before {\n             self.check_pat(&elt, inner_ty, def_bm, discrim_span);\n         }\n+        // Type check the `slice`, if present, against its expected type.\n         if let Some(slice) = slice {\n             self.check_pat(&slice, slice_ty, def_bm, discrim_span);\n         }\n+        // Type check the elements after `slice`, if present.\n         for elt in after {\n             self.check_pat(&elt, inner_ty, def_bm, discrim_span);\n         }"}]}