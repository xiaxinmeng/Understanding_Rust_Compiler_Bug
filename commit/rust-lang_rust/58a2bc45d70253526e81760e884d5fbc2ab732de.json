{"sha": "58a2bc45d70253526e81760e884d5fbc2ab732de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YTJiYzQ1ZDcwMjUzNTI2ZTgxNzYwZTg4NGQ1ZmJjMmFiNzMyZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-23T16:33:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-23T16:33:13Z"}, "message": "Auto merge of #6369 - camsteffen:cast-cfg, r=Manishearth\n\nDisable unnecessary_cast for cfg-dependant types\n\nchangelog: Disable unnecessary_cast for cfg-dependant types\n\nFix  #6331", "tree": {"sha": "e29048ac3357753bbed874de1097de8bb698cfe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29048ac3357753bbed874de1097de8bb698cfe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a2bc45d70253526e81760e884d5fbc2ab732de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a2bc45d70253526e81760e884d5fbc2ab732de", "html_url": "https://github.com/rust-lang/rust/commit/58a2bc45d70253526e81760e884d5fbc2ab732de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a2bc45d70253526e81760e884d5fbc2ab732de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "723ac0faf18613f7652583f83854664e1dc6a89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/723ac0faf18613f7652583f83854664e1dc6a89b", "html_url": "https://github.com/rust-lang/rust/commit/723ac0faf18613f7652583f83854664e1dc6a89b"}, {"sha": "a39a93faeb4969fac62e896138cdf72377fa5502", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39a93faeb4969fac62e896138cdf72377fa5502", "html_url": "https://github.com/rust-lang/rust/commit/a39a93faeb4969fac62e896138cdf72377fa5502"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "840adbbc57a6ccd4f4d2f0e27dfe5add7d43d589", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58a2bc45d70253526e81760e884d5fbc2ab732de/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a2bc45d70253526e81760e884d5fbc2ab732de/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=58a2bc45d70253526e81760e884d5fbc2ab732de", "patch": "@@ -8,6 +8,7 @@ use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n@@ -1632,7 +1633,14 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Cast(ref ex, _) = expr.kind {\n+        if let ExprKind::Cast(ref ex, cast_to) = expr.kind {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = cast_to.kind {\n+                if let Res::Def(_, def_id) = path.res {\n+                    if cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr) {\n+                        return;\n+                    }\n+                }\n+            }\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let Some(lit) = get_numeric_literal(ex) {"}, {"sha": "e8f2fb46665924848e113fa3a5ee4b2859714c0a", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58a2bc45d70253526e81760e884d5fbc2ab732de/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a2bc45d70253526e81760e884d5fbc2ab732de/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=58a2bc45d70253526e81760e884d5fbc2ab732de", "patch": "@@ -20,4 +20,7 @@ fn main() {\n     foo!(a, i32);\n     foo!(b, f32);\n     foo!(c, f64);\n+\n+    // do not lint cast to cfg-dependant type\n+    1 as std::os::raw::c_char;\n }"}]}