{"sha": "60091ee826b071a122ad4ef4ae833591e1db553b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDkxZWU4MjZiMDcxYTEyMmFkNGVmNGFlODMzNTkxZTFkYjU1M2I=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-11-27T18:28:21Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-11-30T02:32:46Z"}, "message": "Format libstd/os with rustfmt\n\nThis commit applies rustfmt with rust-lang/rust's default settings to\nfiles in src/libstd/os *that are not involved in any currently open PR*\nto minimize merge conflicts. THe list of files involved in open PRs was\ndetermined by querying GitHub's GraphQL API with this script:\nhttps://gist.github.com/dtolnay/aa9c34993dc051a4f344d1b10e4487e8\n\nWith the list of files from the script in outstanding_files, the\nrelevant commands were:\n\n    $ find src/libstd/os -name '*.rs' \\\n        | xargs rustfmt --edition=2018 --unstable-features --skip-children\n    $ rg libstd/os outstanding_files | xargs git checkout --\n\nRepeating this process several months apart should get us coverage of\nmost of the rest of the files.\n\nTo confirm no funny business:\n\n    $ git checkout $THIS_COMMIT^\n    $ git show --pretty= --name-only $THIS_COMMIT \\\n        | xargs rustfmt --edition=2018 --unstable-features --skip-children\n    $ git diff $THIS_COMMIT  # there should be no difference", "tree": {"sha": "579a0152c996b81bb4d0a7e2e5494d0908fd9b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/579a0152c996b81bb4d0a7e2e5494d0908fd9b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60091ee826b071a122ad4ef4ae833591e1db553b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl3h1M4ACgkQ+boUO5X/\nbYJIYg//eZvBx41y8YLVMesFAaUT2XOd11V/leWR+DxhmuAI1anE6wE/ylzdtmcl\ne7JWgSurvaMmDJm55Gyy4tfS5kk78EE8rylyY93sxaUCRmhzLutu2UjVym/UYjCd\nhecrleVu3eFP/o5L82a+tgltxVH/j24yNQ+K/26fPyWi7Jv4j82z6DYaQccw3cf3\nMvw6oEpORgMAoJXaK9bI9EYqMLCSVgCUHYaxjEKQAVSRw1H6vha6lTr22CGCFy96\n8wzxAsqAkvR0leEnlI+zyNR48eTbi5qgZBFD5pxyZV+abMoGt9C5UJhT20r5DObl\nHYmvBGmrwy1zhayhs/MqnbSvutv8Xp4knLDlLGNeuOjmtqwVyq8fDpI8B30G7HzM\nfcf2lu0a75UiO3InkQnccBJkbUhF1b3zgUat17UHD0pNN/oQ4whrA1f1g39amQsf\n4sY707l7rnxcjvF6Mp/YGn7HsQcaz4q6iz2rNFDtvi5XYxnjviaxJhfo3JmFvQs4\n4PqK0P0/wBoZZpiC1+chVeYpbFYLLVhwC5MLgsumE6yPNBnwzrCo/JAyO9ySx0hU\nx/JHNn43b8baWKWXja/aqtE8Zw9/QC9YSWQf+vgFFzxpWlDqw9sP7J7vatRldBPV\nXQqNQVOww9eestiFB6dvjb9bfrmscKthsQQEXRFrqvk77yRGGbc=\n=sRPf\n-----END PGP SIGNATURE-----", "payload": "tree 579a0152c996b81bb4d0a7e2e5494d0908fd9b8d\nparent 9081929d45f12d3f56d43b1d6db7519981580fc9\nauthor David Tolnay <dtolnay@gmail.com> 1574879301 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1575081166 -0800\n\nFormat libstd/os with rustfmt\n\nThis commit applies rustfmt with rust-lang/rust's default settings to\nfiles in src/libstd/os *that are not involved in any currently open PR*\nto minimize merge conflicts. THe list of files involved in open PRs was\ndetermined by querying GitHub's GraphQL API with this script:\nhttps://gist.github.com/dtolnay/aa9c34993dc051a4f344d1b10e4487e8\n\nWith the list of files from the script in outstanding_files, the\nrelevant commands were:\n\n    $ find src/libstd/os -name '*.rs' \\\n        | xargs rustfmt --edition=2018 --unstable-features --skip-children\n    $ rg libstd/os outstanding_files | xargs git checkout --\n\nRepeating this process several months apart should get us coverage of\nmost of the rest of the files.\n\nTo confirm no funny business:\n\n    $ git checkout $THIS_COMMIT^\n    $ git show --pretty= --name-only $THIS_COMMIT \\\n        | xargs rustfmt --edition=2018 --unstable-features --skip-children\n    $ git diff $THIS_COMMIT  # there should be no difference\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60091ee826b071a122ad4ef4ae833591e1db553b", "html_url": "https://github.com/rust-lang/rust/commit/60091ee826b071a122ad4ef4ae833591e1db553b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60091ee826b071a122ad4ef4ae833591e1db553b/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9081929d45f12d3f56d43b1d6db7519981580fc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9081929d45f12d3f56d43b1d6db7519981580fc9", "html_url": "https://github.com/rust-lang/rust/commit/9081929d45f12d3f56d43b1d6db7519981580fc9"}], "stats": {"total": 1090, "additions": 657, "deletions": 433}, "files": [{"sha": "9356e607c908e4752c0681521e1e66161b4a5c57", "filename": "src/libstd/os/android/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -62,10 +64,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "dbb0127f369fd01d9a344596fb780c9f88229f6f", "filename": "src/libstd/os/android/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "2b8ade8a82e65f794b6d80e64aa8ba76bf506eb7", "filename": "src/libstd/os/android/raw.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,11 +1,13 @@\n //! Android-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n@@ -15,12 +17,12 @@ pub type pthread_t = c_long;\n \n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use self::arch::{dev_t, mode_t, blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n+pub use self::arch::{blkcnt_t, blksize_t, dev_t, ino_t, mode_t, nlink_t, off_t, stat, time_t};\n \n #[cfg(any(target_arch = \"arm\", target_arch = \"x86\"))]\n mod arch {\n-    use crate::os::raw::{c_uint, c_uchar, c_ulonglong, c_longlong, c_ulong};\n-    use crate::os::unix::raw::{uid_t, gid_t};\n+    use crate::os::raw::{c_longlong, c_uchar, c_uint, c_ulong, c_ulonglong};\n+    use crate::os::unix::raw::{gid_t, uid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u64;\n@@ -83,14 +85,12 @@ mod arch {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ino: c_ulonglong,\n     }\n-\n }\n \n-\n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n     use crate::os::raw::{c_uchar, c_ulong};\n-    use crate::os::unix::raw::{uid_t, gid_t};\n+    use crate::os::unix::raw::{gid_t, uid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u64;\n@@ -157,8 +157,8 @@ mod arch {\n \n #[cfg(target_arch = \"x86_64\")]\n mod arch {\n-    use crate::os::raw::{c_uint, c_long, c_ulong};\n-    use crate::os::unix::raw::{uid_t, gid_t};\n+    use crate::os::raw::{c_long, c_uint, c_ulong};\n+    use crate::os::unix::raw::{gid_t, uid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type dev_t = u64;"}, {"sha": "8552abb1cb9773482306c760faa1a7bccc351a03", "filename": "src/libstd/os/dragonfly/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -68,10 +70,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "350b5fca7ea6646b490ab34c0fdf79bb3c30c9f9", "filename": "src/libstd/os/dragonfly/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "2a2d29043727e1aec51b7f9ba153f17cf655738c", "filename": "src/libstd/os/dragonfly/raw.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,24 +1,35 @@\n //! Dragonfly-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = usize;"}, {"sha": "f5e30dc8eefc9df5124410c1df57bc6e3f55e500", "filename": "src/libstd/os/emscripten/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -62,10 +64,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat64\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "d35307162cc7e3b961eeb3d8810f961ba078485c", "filename": "src/libstd/os/emscripten/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Femscripten%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Femscripten%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "dda7c82525debc637e2d5ecd82e126fc927fb3ef", "filename": "src/libstd/os/emscripten/raw.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -3,28 +3,38 @@\n //! except using the musl-specific stat64 structure in liblibc.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::{c_long, c_short, c_uint, c_ulong};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = c_ulong;\n \n #[doc(inline)]\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = c_long;\n \n #[repr(C)]\n #[derive(Clone)]"}, {"sha": "69923268e570e058d2353dc6787c9df8e89cdde6", "filename": "src/libstd/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -21,19 +21,20 @@ pub mod usercalls {\n \n     /// Lowest-level interfaces to usercalls and usercall ABI type definitions.\n     pub mod raw {\n+        pub use crate::sys::abi::usercalls::raw::{\n+            accept_stream, alloc, async_queues, bind_stream, close, connect_stream, exit, flush,\n+            free, insecure_time, launch_thread, read, read_alloc, send, wait, write,\n+        };\n         pub use crate::sys::abi::usercalls::raw::{do_usercall, Usercalls as UsercallNrs};\n-        pub use crate::sys::abi::usercalls::raw::{accept_stream, alloc, async_queues, bind_stream,\n-                                           close, connect_stream, exit, flush, free, insecure_time,\n-                                           launch_thread, read, read_alloc, send, wait, write};\n \n         // fortanix-sgx-abi re-exports\n-        pub use crate::sys::abi::usercalls::raw::{ByteBuffer, FifoDescriptor, Return, Usercall};\n         pub use crate::sys::abi::usercalls::raw::Error;\n-        pub use crate::sys::abi::usercalls::raw::{EV_RETURNQ_NOT_EMPTY, EV_UNPARK,\n-                                           EV_USERCALLQ_NOT_FULL, FD_STDERR, FD_STDIN, FD_STDOUT,\n-                                           RESULT_SUCCESS, USERCALL_USER_DEFINED, WAIT_INDEFINITE,\n-                                           WAIT_NO};\n+        pub use crate::sys::abi::usercalls::raw::{ByteBuffer, FifoDescriptor, Return, Usercall};\n         pub use crate::sys::abi::usercalls::raw::{Fd, Result, Tcs};\n+        pub use crate::sys::abi::usercalls::raw::{\n+            EV_RETURNQ_NOT_EMPTY, EV_UNPARK, EV_USERCALLQ_NOT_FULL, FD_STDERR, FD_STDIN, FD_STDOUT,\n+            RESULT_SUCCESS, USERCALL_USER_DEFINED, WAIT_INDEFINITE, WAIT_NO,\n+        };\n     }\n }\n \n@@ -42,7 +43,7 @@ pub mod mem {\n     pub use crate::sys::abi::mem::*;\n }\n \n-pub use crate::sys::ext::{io, arch, ffi};\n+pub use crate::sys::ext::{arch, ffi, io};\n \n /// Functions for querying thread-related information.\n pub mod thread {"}, {"sha": "6798e0d8f44fa146a337a8b8f7175863b5634e87", "filename": "src/libstd/os/freebsd/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -72,10 +74,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "c072fae557fe0306821844b89cc11da3c078a840", "filename": "src/libstd/os/freebsd/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "aeae08fc6aae0a4e86e60b6286058532f7b5e616", "filename": "src/libstd/os/freebsd/raw.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,24 +1,35 @@\n //! FreeBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = usize;"}, {"sha": "cd1b8233eb3ec09289562a68cec13ef8ed42db6d", "filename": "src/libstd/os/fuchsia/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffuchsia%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffuchsia%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "f94659cd5baabf3731c2f6bb0f19dfc5fdf6ee5d", "filename": "src/libstd/os/fuchsia/raw.rs", "status": "modified", "additions": 75, "deletions": 42, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,38 +1,50 @@\n //! Fuchsia-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_ulong;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = c_ulong;\n \n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n \n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"le32\",\n-          target_arch = \"powerpc\",\n-          target_arch = \"arm\"))]\n+#[cfg(any(\n+    target_arch = \"x86\",\n+    target_arch = \"le32\",\n+    target_arch = \"powerpc\",\n+    target_arch = \"arm\"\n+))]\n mod arch {\n     use crate::os::raw::{c_long, c_short, c_uint};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -84,20 +96,29 @@ mod arch {\n     use crate::os::raw::{c_long, c_ulong};\n \n     #[cfg(target_env = \"musl\")]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = i64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n     #[cfg(target_env = \"musl\")]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n     #[cfg(target_env = \"musl\")]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -146,19 +167,25 @@ mod arch {\n \n #[cfg(target_arch = \"mips64\")]\n mod arch {\n-    pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+    pub use libc::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n }\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    use crate::os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_int, c_long};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -207,14 +234,20 @@ mod arch {\n \n #[cfg(target_arch = \"x86_64\")]\n mod arch {\n-    use crate::os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_int, c_long};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]"}, {"sha": "13a4a92ae90e43db53898d32f22962563ebaa645", "filename": "src/libstd/os/haiku/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -66,10 +68,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "73f500cadaa3071a7b3b9a460de4c4e1a681af02", "filename": "src/libstd/os/haiku/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fhaiku%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fhaiku%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "0d7e70b6b351d855ff98f4516582d4e12e3d22e7", "filename": "src/libstd/os/haiku/raw.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,23 +1,31 @@\n //! Haiku-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-\n #![allow(deprecated)]\n \n-use crate::os::raw::{c_long};\n-use crate::os::unix::raw::{uid_t, gid_t};\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{gid_t, uid_t};\n \n // Use the direct definition of usize, instead of uintptr_t like in libc\n-#[stable(feature = \"pthread_t\", since = \"1.8.0\")] pub type pthread_t = usize;\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = usize;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i32;\n \n #[repr(C)]\n #[derive(Clone)]"}, {"sha": "08d3e4bcedfe2d07698c6938acb3668179dd6ece", "filename": "src/libstd/os/ios/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -72,10 +74,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "fdefa1f6b21c45299a4c7f1482ab9ef4a75c3f7d", "filename": "src/libstd/os/ios/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "97b0a96b0f1c006c7656e1766d0783441bd66366", "filename": "src/libstd/os/ios/raw.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,23 +1,33 @@\n //! iOS-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = usize;"}, {"sha": "dd71201b50b91a632a17128f167540dd3e8c8ccd", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -34,10 +34,7 @@ pub trait MetadataExt {\n     /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n-        since = \"1.8.0\",\n-        reason = \"other methods of this trait are now prefered\"\n-    )]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"other methods of this trait are now prefered\")]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -328,10 +325,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat64\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "d35307162cc7e3b961eeb3d8810f961ba078485c", "filename": "src/libstd/os/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "d9b2236047bdf78184b737556c7f0ece83ff2cc4", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 92, "deletions": 55, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,41 +1,53 @@\n //! Linux-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n #![allow(missing_debug_implementations)]\n \n use crate::os::raw::c_ulong;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = c_ulong;\n \n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n \n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"le32\",\n-          target_arch = \"powerpc\",\n-          target_arch = \"arm\",\n-          target_arch = \"asmjs\",\n-          target_arch = \"wasm32\"))]\n+#[cfg(any(\n+    target_arch = \"x86\",\n+    target_arch = \"le32\",\n+    target_arch = \"powerpc\",\n+    target_arch = \"arm\",\n+    target_arch = \"asmjs\",\n+    target_arch = \"wasm32\"\n+))]\n mod arch {\n     use crate::os::raw::{c_long, c_short, c_uint};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -87,20 +99,29 @@ mod arch {\n     use crate::os::raw::{c_long, c_ulong};\n \n     #[cfg(target_env = \"musl\")]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = i64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n     #[cfg(target_env = \"musl\")]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n     #[cfg(target_env = \"musl\")]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -149,14 +170,20 @@ mod arch {\n \n #[cfg(target_arch = \"hexagon\")]\n mod arch {\n-    use crate::os::raw::{c_long, c_int, c_longlong, culonglong};\n+    use crate::os::raw::{c_int, c_long, c_longlong, culonglong};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = c_longlong;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = c_long;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = c_ulonglong;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = c_uint;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = c_longlong;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = c_longlong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = c_long;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = c_ulonglong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = c_uint;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = c_longlong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = c_long;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -199,27 +226,31 @@ mod arch {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: ::c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad3: [::c_int;2],\n+        pub __pad3: [::c_int; 2],\n     }\n }\n \n-#[cfg(any(target_arch = \"mips64\",\n-          target_arch = \"s390x\",\n-          target_arch = \"sparc64\"))]\n+#[cfg(any(target_arch = \"mips64\", target_arch = \"s390x\", target_arch = \"sparc64\"))]\n mod arch {\n-    pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+    pub use libc::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n }\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    use crate::os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_int, c_long};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -268,14 +299,20 @@ mod arch {\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\"))]\n mod arch {\n-    use crate::os::raw::{c_long, c_int};\n+    use crate::os::raw::{c_int, c_long};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]"}, {"sha": "ad313a1240dfc13c1eaeba8161e78eb8ee26763d", "filename": "src/libstd/os/macos/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -74,10 +76,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "791d703b142cfefca079f4d94bcc55a9a4389d31", "filename": "src/libstd/os/macos/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "708261d86bddba769ff859c1bf83522fcff4cc2b", "filename": "src/libstd/os/macos/raw.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,23 +1,33 @@\n //! macOS-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = usize;"}, {"sha": "91e37ed833a4faddaa4eb06c399245bb71ee4a29", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -38,20 +38,35 @@ cfg_if::cfg_if! {\n     }\n }\n \n-#[cfg(target_os = \"android\")]    pub mod android;\n-#[cfg(target_os = \"dragonfly\")]  pub mod dragonfly;\n-#[cfg(target_os = \"freebsd\")]    pub mod freebsd;\n-#[cfg(target_os = \"haiku\")]      pub mod haiku;\n-#[cfg(target_os = \"ios\")]        pub mod ios;\n-#[cfg(target_os = \"macos\")]      pub mod macos;\n-#[cfg(target_os = \"netbsd\")]     pub mod netbsd;\n-#[cfg(target_os = \"openbsd\")]    pub mod openbsd;\n-#[cfg(target_os = \"solaris\")]    pub mod solaris;\n-#[cfg(target_os = \"emscripten\")] pub mod emscripten;\n-#[cfg(target_os = \"fuchsia\")]    pub mod fuchsia;\n-#[cfg(target_os = \"redox\")]      pub mod redox;\n-#[cfg(target_os = \"wasi\")]       pub mod wasi;\n-#[cfg(target_os = \"vxworks\")]    pub mod vxworks;\n-#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))] pub mod fortanix_sgx;\n+#[cfg(target_os = \"android\")]\n+pub mod android;\n+#[cfg(target_os = \"dragonfly\")]\n+pub mod dragonfly;\n+#[cfg(target_os = \"emscripten\")]\n+pub mod emscripten;\n+#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n+pub mod fortanix_sgx;\n+#[cfg(target_os = \"freebsd\")]\n+pub mod freebsd;\n+#[cfg(target_os = \"fuchsia\")]\n+pub mod fuchsia;\n+#[cfg(target_os = \"haiku\")]\n+pub mod haiku;\n+#[cfg(target_os = \"ios\")]\n+pub mod ios;\n+#[cfg(target_os = \"macos\")]\n+pub mod macos;\n+#[cfg(target_os = \"netbsd\")]\n+pub mod netbsd;\n+#[cfg(target_os = \"openbsd\")]\n+pub mod openbsd;\n+#[cfg(target_os = \"redox\")]\n+pub mod redox;\n+#[cfg(target_os = \"solaris\")]\n+pub mod solaris;\n+#[cfg(target_os = \"vxworks\")]\n+pub mod vxworks;\n+#[cfg(target_os = \"wasi\")]\n+pub mod wasi;\n \n pub mod raw;"}, {"sha": "90980fdce8028678a13b14e22bac339fb850381a", "filename": "src/libstd/os/netbsd/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -70,10 +72,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "497a51a1df6fdb10b3df0fee8caaa11bf3fa904b", "filename": "src/libstd/os/netbsd/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "475fcdcc4aaabab7bd8626a89f44cabff3b9d3d4", "filename": "src/libstd/os/netbsd/raw.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,25 +1,36 @@\n //! NetBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n-use crate::os::unix::raw::{uid_t, gid_t};\n+use crate::os::unix::raw::{gid_t, uid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = usize;"}, {"sha": "47da00ae26e72518e485b9a0fd0eac4f1a65c939", "filename": "src/libstd/os/openbsd/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -70,10 +72,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "497a51a1df6fdb10b3df0fee8caaa11bf3fa904b", "filename": "src/libstd/os/openbsd/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "8e34e5483b7a0723da078bff431a712a331debfb", "filename": "src/libstd/os/openbsd/raw.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,24 +1,35 @@\n //! OpenBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = usize;"}, {"sha": "e09012007f2d4d59fe31e425e3bc40ec9418bdc8", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 110, "deletions": 60, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -9,85 +9,135 @@\n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n #[doc(include = \"char.md\")]\n-#[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n-                                       target_arch = \"arm\",\n-                                       target_arch = \"hexagon\",\n-                                       target_arch = \"powerpc\",\n-                                       target_arch = \"powerpc64\",\n-                                       target_arch = \"s390x\")),\n-          all(target_os = \"android\", any(target_arch = \"aarch64\",\n-                                         target_arch = \"arm\")),\n-          all(target_os = \"l4re\", target_arch = \"x86_64\"),\n-          all(target_os = \"freebsd\", any(target_arch = \"aarch64\",\n-                                         target_arch = \"arm\",\n-                                         target_arch = \"powerpc\",\n-                                         target_arch = \"powerpc64\")),\n-          all(target_os = \"netbsd\", any(target_arch = \"aarch64\",\n-                                        target_arch = \"arm\",\n-                                        target_arch = \"powerpc\")),\n-          all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n-          all(target_os = \"vxworks\", any(target_arch = \"aarch64\",\n-                                         target_arch = \"arm\",\n-                                         target_arch = \"powerpc64\",\n-                                         target_arch = \"powerpc\")),\n-          all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n+#[cfg(any(\n+    all(\n+        target_os = \"linux\",\n+        any(\n+            target_arch = \"aarch64\",\n+            target_arch = \"arm\",\n+            target_arch = \"hexagon\",\n+            target_arch = \"powerpc\",\n+            target_arch = \"powerpc64\",\n+            target_arch = \"s390x\"\n+        )\n+    ),\n+    all(target_os = \"android\", any(target_arch = \"aarch64\", target_arch = \"arm\")),\n+    all(target_os = \"l4re\", target_arch = \"x86_64\"),\n+    all(\n+        target_os = \"freebsd\",\n+        any(\n+            target_arch = \"aarch64\",\n+            target_arch = \"arm\",\n+            target_arch = \"powerpc\",\n+            target_arch = \"powerpc64\"\n+        )\n+    ),\n+    all(\n+        target_os = \"netbsd\",\n+        any(target_arch = \"aarch64\", target_arch = \"arm\", target_arch = \"powerpc\")\n+    ),\n+    all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n+    all(\n+        target_os = \"vxworks\",\n+        any(\n+            target_arch = \"aarch64\",\n+            target_arch = \"arm\",\n+            target_arch = \"powerpc64\",\n+            target_arch = \"powerpc\"\n+        )\n+    ),\n+    all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n+))]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_char = u8;\n #[doc(include = \"char.md\")]\n-#[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n-                                           target_arch = \"arm\",\n-                                           target_arch = \"hexagon\",\n-                                           target_arch = \"powerpc\",\n-                                           target_arch = \"powerpc64\",\n-                                           target_arch = \"s390x\")),\n-              all(target_os = \"android\", any(target_arch = \"aarch64\",\n-                                             target_arch = \"arm\")),\n-              all(target_os = \"l4re\", target_arch = \"x86_64\"),\n-              all(target_os = \"freebsd\", any(target_arch = \"aarch64\",\n-                                             target_arch = \"arm\",\n-                                             target_arch = \"powerpc\",\n-                                             target_arch = \"powerpc64\")),\n-              all(target_os = \"netbsd\", any(target_arch = \"aarch64\",\n-                                            target_arch = \"arm\",\n-                                            target_arch = \"powerpc\")),\n-              all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n-              all(target_os = \"vxworks\", any(target_arch = \"aarch64\",\n-                                             target_arch = \"arm\",\n-                                             target_arch = \"powerpc64\",\n-                                             target_arch = \"powerpc\")),\n-              all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n+#[cfg(not(any(\n+    all(\n+        target_os = \"linux\",\n+        any(\n+            target_arch = \"aarch64\",\n+            target_arch = \"arm\",\n+            target_arch = \"hexagon\",\n+            target_arch = \"powerpc\",\n+            target_arch = \"powerpc64\",\n+            target_arch = \"s390x\"\n+        )\n+    ),\n+    all(target_os = \"android\", any(target_arch = \"aarch64\", target_arch = \"arm\")),\n+    all(target_os = \"l4re\", target_arch = \"x86_64\"),\n+    all(\n+        target_os = \"freebsd\",\n+        any(\n+            target_arch = \"aarch64\",\n+            target_arch = \"arm\",\n+            target_arch = \"powerpc\",\n+            target_arch = \"powerpc64\"\n+        )\n+    ),\n+    all(\n+        target_os = \"netbsd\",\n+        any(target_arch = \"aarch64\", target_arch = \"arm\", target_arch = \"powerpc\")\n+    ),\n+    all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n+    all(\n+        target_os = \"vxworks\",\n+        any(\n+            target_arch = \"aarch64\",\n+            target_arch = \"arm\",\n+            target_arch = \"powerpc64\",\n+            target_arch = \"powerpc\"\n+        )\n+    ),\n+    all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n+)))]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_char = i8;\n #[doc(include = \"schar.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_schar = i8;\n #[doc(include = \"uchar.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_uchar = u8;\n #[doc(include = \"short.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_short = i16;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_short = i16;\n #[doc(include = \"ushort.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ushort = u16;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_ushort = u16;\n #[doc(include = \"int.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_int = i32;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_int = i32;\n #[doc(include = \"uint.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uint = u32;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_uint = u32;\n #[doc(include = \"long.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i32;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_long = i32;\n #[doc(include = \"ulong.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u32;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_ulong = u32;\n #[doc(include = \"long.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_long = i64;\n #[doc(include = \"ulong.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_ulong = u64;\n #[doc(include = \"longlong.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_longlong = i64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_longlong = i64;\n #[doc(include = \"ulonglong.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulonglong = u64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_ulonglong = u64;\n #[doc(include = \"float.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_float = f32;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_float = f32;\n #[doc(include = \"double.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub type c_double = f64;\n \n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n #[doc(no_inline)]"}, {"sha": "6c87df534bdc683c929cbddc584a361bb7b95717", "filename": "src/libstd/os/redox/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fredox%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -34,9 +34,11 @@ pub trait MetadataExt {\n     /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -327,10 +329,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "d786759c6111a633795f2577941bf48e67b20d61", "filename": "src/libstd/os/redox/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fredox%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "abe6dfc6b0c51beb7e657faeb61252f7e810c53c", "filename": "src/libstd/os/redox/raw.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fredox%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fredox%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fredox%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,30 +1,42 @@\n //! Redox-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n #![allow(missing_debug_implementations)]\n \n use crate::os::raw::{c_char, c_int, c_long, c_ulong, c_void};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = c_long;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type gid_t = c_int;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = c_int;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type uid_t = c_int;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type gid_t = c_int;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = c_int;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type uid_t = c_int;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = *mut c_void;\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = c_ulong;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = c_ulong;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = c_ulong;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = c_ulong;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = c_long;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = c_ulong;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = c_ulong;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = c_ulong;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = c_ulong;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = c_long;\n \n #[repr(C)]\n #[derive(Clone)]"}, {"sha": "549d3d756362df76b60cf3ac400a410f5b1e7fb2", "filename": "src/libstd/os/solaris/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -18,9 +18,11 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n@@ -62,10 +64,7 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64"}, {"sha": "e4cfd53291a6ea590d977d226529c7bfc62785e9", "filename": "src/libstd/os/solaris/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "e78f9992bb32469c457af7877443076805fc109c", "filename": "src/libstd/os/solaris/raw.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,25 +1,36 @@\n //! Solaris-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n #![allow(deprecated)]\n \n use crate::os::raw::c_long;\n-use crate::os::unix::raw::{uid_t, gid_t};\n+use crate::os::unix::raw::{gid_t, uid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = u32;\n@@ -61,5 +72,5 @@ pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub __unused: [u8; 16]\n+    pub __unused: [u8; 16],\n }"}, {"sha": "0a7ac641dd3e1c3d0dba3de345f83fac5fe05674", "filename": "src/libstd/os/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fvxworks%2Fmod.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -2,5 +2,5 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n-pub mod raw;\n pub mod fs;\n+pub mod raw;"}, {"sha": "29a0af5645ee1f4d052b507a4644dd3e1c0968e5", "filename": "src/libstd/os/vxworks/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fvxworks%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60091ee826b071a122ad4ef4ae833591e1db553b/src%2Flibstd%2Fos%2Fvxworks%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fvxworks%2Fraw.rs?ref=60091ee826b071a122ad4ef4ae833591e1db553b", "patch": "@@ -1,7 +1,7 @@\n //! VxWorks-specific raw type definitions\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use crate::os::raw::{c_ulong};\n+use crate::os::raw::c_ulong;\n \n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = c_ulong;"}]}