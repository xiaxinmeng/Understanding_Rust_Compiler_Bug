{"sha": "7369e5120d88ca0c75d32a6ca3558b64351a6858", "node_id": "C_kwDOAAsO6NoAKDczNjllNTEyMGQ4OGNhMGM3NWQzMmE2Y2EzNTU4YjY0MzUxYTY4NTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-18T07:54:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-18T07:54:03Z"}, "message": "Move `CompletionContext::function_def` into `PathKind::Expr`", "tree": {"sha": "f0d0f967f0304203312945b306be63bbd1dc3aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0d0f967f0304203312945b306be63bbd1dc3aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7369e5120d88ca0c75d32a6ca3558b64351a6858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7369e5120d88ca0c75d32a6ca3558b64351a6858", "html_url": "https://github.com/rust-lang/rust/commit/7369e5120d88ca0c75d32a6ca3558b64351a6858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7369e5120d88ca0c75d32a6ca3558b64351a6858/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309ecdd71cc09625052f3d358a3bd9c2b245119d", "url": "https://api.github.com/repos/rust-lang/rust/commits/309ecdd71cc09625052f3d358a3bd9c2b245119d", "html_url": "https://github.com/rust-lang/rust/commit/309ecdd71cc09625052f3d358a3bd9c2b245119d"}], "stats": {"total": 121, "additions": 82, "deletions": 39}, "files": [{"sha": "da26c2ad68241533dd45e8f193a940245d45682a", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=7369e5120d88ca0c75d32a6ca3558b64351a6858", "patch": "@@ -46,27 +46,26 @@ pub(crate) fn complete_undotted_self(\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    match path_ctx {\n-        PathCompletionCtx { qualified: Qualified::No, kind: PathKind::Expr { .. }, .. }\n-            if path_ctx.is_trivial_path() && ctx.qualifier_ctx.none() => {}\n+    let self_param = match path_ctx {\n+        PathCompletionCtx {\n+            qualified: Qualified::No,\n+            kind: PathKind::Expr { self_param: Some(self_param), .. },\n+            ..\n+        } if path_ctx.is_trivial_path() && ctx.qualifier_ctx.none() => self_param,\n         _ => return,\n-    }\n+    };\n \n-    if let Some(func) = ctx.function_def.as_ref().and_then(|fn_| ctx.sema.to_def(fn_)) {\n-        if let Some(self_) = func.self_param(ctx.db) {\n-            let ty = self_.ty(ctx.db);\n-            complete_fields(\n-                acc,\n-                ctx,\n-                &ty,\n-                |acc, field, ty| acc.add_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n-                |acc, field, ty| acc.add_tuple_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n-            );\n-            complete_methods(ctx, &ty, |func| {\n-                acc.add_method(ctx, func, Some(hir::known::SELF_PARAM), None)\n-            });\n-        }\n-    }\n+    let ty = self_param.ty(ctx.db);\n+    complete_fields(\n+        acc,\n+        ctx,\n+        &ty,\n+        |acc, field, ty| acc.add_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n+        |acc, field, ty| acc.add_tuple_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n+    );\n+    complete_methods(ctx, &ty, |func| {\n+        acc.add_method(ctx, func, Some(hir::known::SELF_PARAM), None)\n+    });\n }\n \n fn complete_fields("}, {"sha": "ecc1442bfc701ac5c37136d1c10d95ac96e5603f", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=7369e5120d88ca0c75d32a6ca3558b64351a6858", "patch": "@@ -14,7 +14,9 @@ pub(crate) fn complete_expr_path(\n     path_ctx: &PathCompletionCtx,\n ) {\n     let _p = profile::span(\"complete_expr_path\");\n-\n+    if !ctx.qualifier_ctx.none() {\n+        return;\n+    }\n     let (\n         qualified,\n         in_block_expr,\n@@ -23,6 +25,7 @@ pub(crate) fn complete_expr_path(\n         after_if_expr,\n         wants_mut_token,\n         in_condition,\n+        ty,\n     ) = match path_ctx {\n         &PathCompletionCtx {\n             kind:\n@@ -33,17 +36,20 @@ pub(crate) fn complete_expr_path(\n                     in_condition,\n                     ref ref_expr_parent,\n                     ref is_func_update,\n+                    ref innermost_ret_ty,\n+                    ..\n                 },\n             ref qualified,\n             ..\n-        } if ctx.qualifier_ctx.none() => (\n+        } => (\n             qualified,\n             in_block_expr,\n             in_loop_body,\n             is_func_update.is_some(),\n             after_if_expr,\n             ref_expr_parent.as_ref().map(|it| it.mut_token().is_none()).unwrap_or(false),\n             in_condition,\n+            innermost_ret_ty,\n         ),\n         _ => return,\n     };\n@@ -252,10 +258,10 @@ pub(crate) fn complete_expr_path(\n                     }\n                 }\n \n-                if let Some(fn_def) = &ctx.function_def {\n+                if let Some(ty) = ty {\n                     add_keyword(\n                         \"return\",\n-                        match (in_block_expr, fn_def.ret_type().is_some()) {\n+                        match (in_block_expr, ty.is_unit()) {\n                             (true, true) => \"return ;\",\n                             (true, false) => \"return;\",\n                             (false, true) => \"return $0\","}, {"sha": "7df9b4921af504650ee6dbb7742fe74c2e21fd59", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=7369e5120d88ca0c75d32a6ca3558b64351a6858", "patch": "@@ -95,6 +95,8 @@ pub(super) enum PathKind {\n         in_condition: bool,\n         ref_expr_parent: Option<ast::RefExpr>,\n         is_func_update: Option<ast::RecordExpr>,\n+        self_param: Option<hir::SelfParam>,\n+        innermost_ret_ty: Option<hir::Type>,\n     },\n     Type {\n         location: TypeLocation,\n@@ -317,9 +319,6 @@ pub(crate) struct CompletionContext<'a> {\n     /// The expected type of what we are completing.\n     pub(super) expected_type: Option<Type>,\n \n-    /// The parent function of the cursor position if it exists.\n-    // FIXME: This probably doesn't belong here\n-    pub(super) function_def: Option<ast::Fn>,\n     /// The parent impl of the cursor position if it exists.\n     // FIXME: This probably doesn't belong here\n     pub(super) impl_def: Option<ast::Impl>,\n@@ -500,7 +499,6 @@ impl<'a> CompletionContext<'a> {\n             module,\n             expected_name: None,\n             expected_type: None,\n-            function_def: None,\n             impl_def: None,\n             incomplete_let: false,\n             previous_token: None,"}, {"sha": "4f65ae402e2e889d9933dd22c701e7148d7ba031", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7369e5120d88ca0c75d32a6ca3558b64351a6858/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=7369e5120d88ca0c75d32a6ca3558b64351a6858", "patch": "@@ -404,18 +404,6 @@ impl<'a> CompletionContext<'a> {\n                 ast::Item::Impl(impl_) => Some(impl_),\n                 _ => None,\n             });\n-        self.function_def = self\n-            .sema\n-            .token_ancestors_with_macros(self.token.clone())\n-            .take_while(|it| {\n-                it.kind() != SyntaxKind::SOURCE_FILE && it.kind() != SyntaxKind::MODULE\n-            })\n-            .filter_map(ast::Item::cast)\n-            .take(2)\n-            .find_map(|it| match it {\n-                ast::Item::Fn(fn_) => Some(fn_),\n-                _ => None,\n-            });\n \n         match name_like {\n             ast::NameLike::Lifetime(lifetime) => {\n@@ -727,6 +715,56 @@ impl<'a> CompletionContext<'a> {\n             let after_if_expr = after_if_expr(it.clone());\n             let ref_expr_parent =\n                 path.as_single_name_ref().and_then(|_| it.parent()).and_then(ast::RefExpr::cast);\n+            let (innermost_ret_ty, self_param) = {\n+                let find_ret_ty = |it: SyntaxNode| {\n+                    if let Some(item) = ast::Item::cast(it.clone()) {\n+                        match item {\n+                            ast::Item::Fn(f) => {\n+                                Some(sema.to_def(&f).map(|it| it.ret_type(sema.db)))\n+                            }\n+                            ast::Item::MacroCall(_) => None,\n+                            _ => Some(None),\n+                        }\n+                    } else {\n+                        let expr = ast::Expr::cast(it)?;\n+                        let callable = match expr {\n+                            // FIXME\n+                            // ast::Expr::BlockExpr(b) if b.async_token().is_some() || b.try_token().is_some() => sema.type_of_expr(b),\n+                            ast::Expr::ClosureExpr(_) => sema.type_of_expr(&expr),\n+                            _ => return None,\n+                        };\n+                        Some(\n+                            callable\n+                                .and_then(|c| c.adjusted().as_callable(sema.db))\n+                                .map(|it| it.return_type()),\n+                        )\n+                    }\n+                };\n+                let find_fn_self_param = |it| match it {\n+                    ast::Item::Fn(fn_) => {\n+                        Some(sema.to_def(&fn_).and_then(|it| it.self_param(sema.db)))\n+                    }\n+                    ast::Item::MacroCall(_) => None,\n+                    _ => Some(None),\n+                };\n+\n+                match dbg!(find_node_in_file_compensated(original_file, &expr)) {\n+                    Some(it) => {\n+                        let innermost_ret_ty = sema\n+                            .ancestors_with_macros(it.syntax().clone())\n+                            .find_map(find_ret_ty)\n+                            .flatten();\n+\n+                        let self_param = sema\n+                            .ancestors_with_macros(it.syntax().clone())\n+                            .filter_map(ast::Item::cast)\n+                            .find_map(find_fn_self_param)\n+                            .flatten();\n+                        (innermost_ret_ty, self_param)\n+                    }\n+                    None => (None, None),\n+                }\n+            };\n             let is_func_update = func_update_record(it);\n             let in_condition = is_in_condition(&expr);\n \n@@ -737,6 +775,8 @@ impl<'a> CompletionContext<'a> {\n                 in_condition,\n                 ref_expr_parent,\n                 is_func_update,\n+                innermost_ret_ty,\n+                self_param,\n             }\n         };\n         let make_path_kind_type = |ty: ast::Type| {"}]}