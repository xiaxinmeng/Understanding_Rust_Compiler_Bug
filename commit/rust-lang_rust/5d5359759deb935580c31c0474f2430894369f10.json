{"sha": "5d5359759deb935580c31c0474f2430894369f10", "node_id": "C_kwDOAAsO6NoAKDVkNTM1OTc1OWRlYjkzNTU4MGMzMWMwNDc0ZjI0MzA4OTQzNjlmMTA", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-02-11T10:55:46Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-02-14T10:17:27Z"}, "message": "Describe VecDeque with more consistent names", "tree": {"sha": "2c362b0088b60c82b36a6a0176f5fa634f05111b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c362b0088b60c82b36a6a0176f5fa634f05111b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d5359759deb935580c31c0474f2430894369f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5359759deb935580c31c0474f2430894369f10", "html_url": "https://github.com/rust-lang/rust/commit/5d5359759deb935580c31c0474f2430894369f10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d5359759deb935580c31c0474f2430894369f10/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "902e59057ee723dd6fda6e757b408d487a388139", "url": "https://api.github.com/repos/rust-lang/rust/commits/902e59057ee723dd6fda6e757b408d487a388139", "html_url": "https://github.com/rust-lang/rust/commit/902e59057ee723dd6fda6e757b408d487a388139"}], "stats": {"total": 220, "additions": 110, "deletions": 110}, "files": [{"sha": "db2ad5e8d285c60d4c01dd09741bad248a09abe8", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 110, "deletions": 110, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/5d5359759deb935580c31c0474f2430894369f10/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5359759deb935580c31c0474f2430894369f10/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=5d5359759deb935580c31c0474f2430894369f10", "patch": "@@ -1,4 +1,4 @@\n-//! A double-ended queue implemented with a growable ring buffer.\n+//! A double-ended queue (deque) implemented with a growable ring buffer.\n //!\n //! This queue has *O*(1) amortized inserts and removals from both ends of the\n //! container. It also has *O*(1) indexing like a vector. The contained elements\n@@ -156,7 +156,7 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for VecDeque<T> {\n-    /// Creates an empty `VecDeque<T>`.\n+    /// Creates an empty deque.\n     #[inline]\n     fn default() -> VecDeque<T> {\n         VecDeque::new()\n@@ -483,14 +483,14 @@ impl<T, A: Allocator> VecDeque<T, A> {\n }\n \n impl<T> VecDeque<T> {\n-    /// Creates an empty `VecDeque`.\n+    /// Creates an empty deque.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let vector: VecDeque<u32> = VecDeque::new();\n+    /// let deque: VecDeque<u32> = VecDeque::new();\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -499,14 +499,14 @@ impl<T> VecDeque<T> {\n         VecDeque::new_in(Global)\n     }\n \n-    /// Creates an empty `VecDeque` with space for at least `capacity` elements.\n+    /// Creates an empty deque with space for at least `capacity` elements.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);\n+    /// let deque: VecDeque<u32> = VecDeque::with_capacity(10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -517,29 +517,29 @@ impl<T> VecDeque<T> {\n }\n \n impl<T, A: Allocator> VecDeque<T, A> {\n-    /// Creates an empty `VecDeque`.\n+    /// Creates an empty deque.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let vector: VecDeque<u32> = VecDeque::new();\n+    /// let deque: VecDeque<u32> = VecDeque::new();\n     /// ```\n     #[inline]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub fn new_in(alloc: A) -> VecDeque<T, A> {\n         VecDeque::with_capacity_in(INITIAL_CAPACITY, alloc)\n     }\n \n-    /// Creates an empty `VecDeque` with space for at least `capacity` elements.\n+    /// Creates an empty deque with space for at least `capacity` elements.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);\n+    /// let deque: VecDeque<u32> = VecDeque::with_capacity(10);\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n@@ -636,7 +636,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         unsafe { ptr::swap(self.ptr().add(ri), self.ptr().add(rj)) }\n     }\n \n-    /// Returns the number of elements the `VecDeque` can hold without\n+    /// Returns the number of elements the deque can hold without\n     /// reallocating.\n     ///\n     /// # Examples\n@@ -654,7 +654,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\n-    /// given `VecDeque`. Does nothing if the capacity is already sufficient.\n+    /// given deque. Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it requests. Therefore\n     /// capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future\n@@ -681,7 +681,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Reserves capacity for at least `additional` more elements to be inserted in the given\n-    /// `VecDeque`. The collection may reserve more space to avoid frequent reallocations.\n+    /// deque. The collection may reserve more space to avoid frequent reallocations.\n     ///\n     /// # Panics\n     ///\n@@ -714,7 +714,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Tries to reserve the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `VecDeque<T>`. After calling `try_reserve_exact`,\n+    /// be inserted in the given deque. After calling `try_reserve_exact`,\n     /// capacity will be greater than or equal to `self.len() + additional`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n@@ -756,7 +756,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `VecDeque<T>`. The collection may reserve more space to avoid\n+    /// in the given deque. The collection may reserve more space to avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n@@ -805,10 +805,10 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         Ok(())\n     }\n \n-    /// Shrinks the capacity of the `VecDeque` as much as possible.\n+    /// Shrinks the capacity of the deque as much as possible.\n     ///\n     /// It will drop down as close as possible to the length but the allocator may still inform the\n-    /// `VecDeque` that there is space for a few more elements.\n+    /// deque that there is space for a few more elements.\n     ///\n     /// # Examples\n     ///\n@@ -826,7 +826,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.shrink_to(0);\n     }\n \n-    /// Shrinks the capacity of the `VecDeque` with a lower bound.\n+    /// Shrinks the capacity of the deque with a lower bound.\n     ///\n     /// The capacity will remain at least as large as both the length\n     /// and the supplied value.\n@@ -909,10 +909,10 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Shortens the `VecDeque`, keeping the first `len` elements and dropping\n+    /// Shortens the deque, keeping the first `len` elements and dropping\n     /// the rest.\n     ///\n-    /// If `len` is greater than the `VecDeque`'s current length, this has no\n+    /// If `len` is greater than the deque's current length, this has no\n     /// effect.\n     ///\n     /// # Examples\n@@ -1027,10 +1027,10 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Returns a pair of slices which contain, in order, the contents of the\n-    /// `VecDeque`.\n+    /// deque.\n     ///\n     /// If [`make_contiguous`] was previously called, all elements of the\n-    /// `VecDeque` will be in the first slice and the second slice will be empty.\n+    /// deque will be in the first slice and the second slice will be empty.\n     ///\n     /// [`make_contiguous`]: VecDeque::make_contiguous\n     ///\n@@ -1039,18 +1039,18 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut vector = VecDeque::new();\n+    /// let mut deque = VecDeque::new();\n     ///\n-    /// vector.push_back(0);\n-    /// vector.push_back(1);\n-    /// vector.push_back(2);\n+    /// deque.push_back(0);\n+    /// deque.push_back(1);\n+    /// deque.push_back(2);\n     ///\n-    /// assert_eq!(vector.as_slices(), (&[0, 1, 2][..], &[][..]));\n+    /// assert_eq!(deque.as_slices(), (&[0, 1, 2][..], &[][..]));\n     ///\n-    /// vector.push_front(10);\n-    /// vector.push_front(9);\n+    /// deque.push_front(10);\n+    /// deque.push_front(9);\n     ///\n-    /// assert_eq!(vector.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));\n+    /// assert_eq!(deque.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));\n     /// ```\n     #[inline]\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n@@ -1062,10 +1062,10 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Returns a pair of slices which contain, in order, the contents of the\n-    /// `VecDeque`.\n+    /// deque.\n     ///\n     /// If [`make_contiguous`] was previously called, all elements of the\n-    /// `VecDeque` will be in the first slice and the second slice will be empty.\n+    /// deque will be in the first slice and the second slice will be empty.\n     ///\n     /// [`make_contiguous`]: VecDeque::make_contiguous\n     ///\n@@ -1074,17 +1074,17 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut vector = VecDeque::new();\n+    /// let mut deque = VecDeque::new();\n     ///\n-    /// vector.push_back(0);\n-    /// vector.push_back(1);\n+    /// deque.push_back(0);\n+    /// deque.push_back(1);\n     ///\n-    /// vector.push_front(10);\n-    /// vector.push_front(9);\n+    /// deque.push_front(10);\n+    /// deque.push_front(9);\n     ///\n-    /// vector.as_mut_slices().0[0] = 42;\n-    /// vector.as_mut_slices().1[0] = 24;\n-    /// assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));\n+    /// deque.as_mut_slices().0[0] = 42;\n+    /// deque.as_mut_slices().1[0] = 24;\n+    /// assert_eq!(deque.as_slices(), (&[42, 10][..], &[24, 1][..]));\n     /// ```\n     #[inline]\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n@@ -1097,34 +1097,34 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Returns the number of elements in the `VecDeque`.\n+    /// Returns the number of elements in the deque.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v = VecDeque::new();\n-    /// assert_eq!(v.len(), 0);\n-    /// v.push_back(1);\n-    /// assert_eq!(v.len(), 1);\n+    /// let mut deque = VecDeque::new();\n+    /// assert_eq!(deque.len(), 0);\n+    /// deque.push_back(1);\n+    /// assert_eq!(deque.len(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         count(self.tail, self.head, self.cap())\n     }\n \n-    /// Returns `true` if the `VecDeque` is empty.\n+    /// Returns `true` if the deque is empty.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v = VecDeque::new();\n-    /// assert!(v.is_empty());\n-    /// v.push_front(1);\n-    /// assert!(!v.is_empty());\n+    /// let mut deque = VecDeque::new();\n+    /// assert!(deque.is_empty());\n+    /// deque.push_front(1);\n+    /// assert!(!deque.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n@@ -1141,24 +1141,24 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         (tail, head)\n     }\n \n-    /// Creates an iterator that covers the specified range in the `VecDeque`.\n+    /// Creates an iterator that covers the specified range in the deque.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the starting point is greater than the end point or if\n-    /// the end point is greater than the length of the vector.\n+    /// the end point is greater than the length of the deque.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let v: VecDeque<_> = [1, 2, 3].into();\n-    /// let range = v.range(2..).copied().collect::<VecDeque<_>>();\n+    /// let deque: VecDeque<_> = [1, 2, 3].into();\n+    /// let range = deque.range(2..).copied().collect::<VecDeque<_>>();\n     /// assert_eq!(range, [3]);\n     ///\n     /// // A full range covers all contents\n-    /// let all = v.range(..);\n+    /// let all = deque.range(..);\n     /// assert_eq!(all.len(), 3);\n     /// ```\n     #[inline]\n@@ -1176,29 +1176,29 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Creates an iterator that covers the specified mutable range in the `VecDeque`.\n+    /// Creates an iterator that covers the specified mutable range in the deque.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the starting point is greater than the end point or if\n-    /// the end point is greater than the length of the vector.\n+    /// the end point is greater than the length of the deque.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v: VecDeque<_> = [1, 2, 3].into();\n-    /// for v in v.range_mut(2..) {\n+    /// let mut deque: VecDeque<_> = [1, 2, 3].into();\n+    /// for v in deque.range_mut(2..) {\n     ///   *v *= 2;\n     /// }\n-    /// assert_eq!(v, [1, 2, 6]);\n+    /// assert_eq!(deque, [1, 2, 6]);\n     ///\n     /// // A full range covers all contents\n-    /// for v in v.range_mut(..) {\n+    /// for v in deque.range_mut(..) {\n     ///   *v *= 2;\n     /// }\n-    /// assert_eq!(v, [2, 4, 12]);\n+    /// assert_eq!(deque, [2, 4, 12]);\n     /// ```\n     #[inline]\n     #[stable(feature = \"deque_range\", since = \"1.51.0\")]\n@@ -1216,7 +1216,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Creates a draining iterator that removes the specified range in the\n-    /// `VecDeque` and yields the removed items.\n+    /// deque and yields the removed items.\n     ///\n     /// Note 1: The element range is removed even if the iterator is not\n     /// consumed until the end.\n@@ -1228,21 +1228,21 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// # Panics\n     ///\n     /// Panics if the starting point is greater than the end point or if\n-    /// the end point is greater than the length of the vector.\n+    /// the end point is greater than the length of the deque.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v: VecDeque<_> = [1, 2, 3].into();\n-    /// let drained = v.drain(2..).collect::<VecDeque<_>>();\n+    /// let mut deque: VecDeque<_> = [1, 2, 3].into();\n+    /// let drained = deque.drain(2..).collect::<VecDeque<_>>();\n     /// assert_eq!(drained, [3]);\n-    /// assert_eq!(v, [1, 2]);\n+    /// assert_eq!(deque, [1, 2]);\n     ///\n     /// // A full range clears all contents\n-    /// v.drain(..);\n-    /// assert!(v.is_empty());\n+    /// deque.drain(..);\n+    /// assert!(deque.is_empty());\n     /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -1297,39 +1297,39 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         unsafe { Drain::new(drain_head, head, iter, deque) }\n     }\n \n-    /// Clears the `VecDeque`, removing all values.\n+    /// Clears the deque, removing all values.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v = VecDeque::new();\n-    /// v.push_back(1);\n-    /// v.clear();\n-    /// assert!(v.is_empty());\n+    /// let mut deque = VecDeque::new();\n+    /// deque.push_back(1);\n+    /// deque.clear();\n+    /// assert!(deque.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn clear(&mut self) {\n         self.truncate(0);\n     }\n \n-    /// Returns `true` if the `VecDeque` contains an element equal to the\n+    /// Returns `true` if the deque contains an element equal to the\n     /// given value.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut vector: VecDeque<u32> = VecDeque::new();\n+    /// let mut deque: VecDeque<u32> = VecDeque::new();\n     ///\n-    /// vector.push_back(0);\n-    /// vector.push_back(1);\n+    /// deque.push_back(0);\n+    /// deque.push_back(1);\n     ///\n-    /// assert_eq!(vector.contains(&1), true);\n-    /// assert_eq!(vector.contains(&10), false);\n+    /// assert_eq!(deque.contains(&1), true);\n+    /// assert_eq!(deque.contains(&10), false);\n     /// ```\n     #[stable(feature = \"vec_deque_contains\", since = \"1.12.0\")]\n     pub fn contains(&self, x: &T) -> bool\n@@ -1340,7 +1340,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         a.contains(x) || b.contains(x)\n     }\n \n-    /// Provides a reference to the front element, or `None` if the `VecDeque` is\n+    /// Provides a reference to the front element, or `None` if the deque is\n     /// empty.\n     ///\n     /// # Examples\n@@ -1361,7 +1361,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Provides a mutable reference to the front element, or `None` if the\n-    /// `VecDeque` is empty.\n+    /// deque is empty.\n     ///\n     /// # Examples\n     ///\n@@ -1384,7 +1384,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.get_mut(0)\n     }\n \n-    /// Provides a reference to the back element, or `None` if the `VecDeque` is\n+    /// Provides a reference to the back element, or `None` if the deque is\n     /// empty.\n     ///\n     /// # Examples\n@@ -1405,7 +1405,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Provides a mutable reference to the back element, or `None` if the\n-    /// `VecDeque` is empty.\n+    /// deque is empty.\n     ///\n     /// # Examples\n     ///\n@@ -1428,7 +1428,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.get_mut(self.len().wrapping_sub(1))\n     }\n \n-    /// Removes the first element and returns it, or `None` if the `VecDeque` is\n+    /// Removes the first element and returns it, or `None` if the deque is\n     /// empty.\n     ///\n     /// # Examples\n@@ -1455,7 +1455,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Removes the last element from the `VecDeque` and returns it, or `None` if\n+    /// Removes the last element from the deque and returns it, or `None` if\n     /// it is empty.\n     ///\n     /// # Examples\n@@ -1480,7 +1480,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Prepends an element to the `VecDeque`.\n+    /// Prepends an element to the deque.\n     ///\n     /// # Examples\n     ///\n@@ -1505,7 +1505,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Appends an element to the back of the `VecDeque`.\n+    /// Appends an element to the back of the deque.\n     ///\n     /// # Examples\n     ///\n@@ -1535,7 +1535,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.tail <= self.head\n     }\n \n-    /// Removes an element from anywhere in the `VecDeque` and returns it,\n+    /// Removes an element from anywhere in the deque and returns it,\n     /// replacing it with the first element.\n     ///\n     /// This does not preserve ordering, but is *O*(1).\n@@ -1570,8 +1570,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.pop_front()\n     }\n \n-    /// Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\n-    /// last element.\n+    /// Removes an element from anywhere in the deque and returns it,\n+    /// replacing it with the last element.\n     ///\n     /// This does not preserve ordering, but is *O*(1).\n     ///\n@@ -1605,14 +1605,14 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.pop_back()\n     }\n \n-    /// Inserts an element at `index` within the `VecDeque`, shifting all elements with indices\n-    /// greater than or equal to `index` towards the back.\n+    /// Inserts an element at `index` within the deque, shifting all elements\n+    /// with indices greater than or equal to `index` towards the back.\n     ///\n     /// Element at index 0 is the front of the queue.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `index` is greater than `VecDeque`'s length\n+    /// Panics if `index` is greater than deque's length\n     ///\n     /// # Examples\n     ///\n@@ -1829,7 +1829,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Removes and returns the element at `index` from the `VecDeque`.\n+    /// Removes and returns the element at `index` from the deque.\n     /// Whichever end is closer to the removal point will be moved to make\n     /// room, and all the affected elements will be moved to new positions.\n     /// Returns `None` if `index` is out of bounds.\n@@ -2007,10 +2007,10 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         elem\n     }\n \n-    /// Splits the `VecDeque` into two at the given index.\n+    /// Splits the deque into two at the given index.\n     ///\n     /// Returns a newly allocated `VecDeque`. `self` contains elements `[0, at)`,\n-    /// and the returned `VecDeque` contains elements `[at, len)`.\n+    /// and the returned deque contains elements `[at, len)`.\n     ///\n     /// Note that the capacity of `self` does not change.\n     ///\n@@ -2227,7 +2227,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         debug_assert!(!self.is_full());\n     }\n \n-    /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,\n+    /// Modifies the deque in-place so that `len()` is equal to `new_len`,\n     /// either by removing excess elements from the back or by appending\n     /// elements generated by calling `generator` to the back.\n     ///\n@@ -2272,7 +2272,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// Once the internal storage is contiguous, the [`as_slices`] and\n     /// [`as_mut_slices`] methods will return the entire contents of the\n-    /// `VecDeque` in a single slice.\n+    /// deque in a single slice.\n     ///\n     /// [`as_slices`]: VecDeque::as_slices\n     /// [`as_mut_slices`]: VecDeque::as_mut_slices\n@@ -2524,7 +2524,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Binary searches this sorted `VecDeque` for a given element.\n+    /// Binary searches the sorted deque for a given element.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2556,7 +2556,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// assert!(matches!(r, Ok(1..=4)));\n     /// ```\n     ///\n-    /// If you want to insert an item to a sorted `VecDeque`, while maintaining\n+    /// If you want to insert an item to a sorted deque, while maintaining\n     /// sort order:\n     ///\n     /// ```\n@@ -2577,12 +2577,12 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.binary_search_by(|e| e.cmp(x))\n     }\n \n-    /// Binary searches this sorted `VecDeque` with a comparator function.\n+    /// Binary searches the sorted deque with a comparator function.\n     ///\n     /// The comparator function should implement an order consistent\n-    /// with the sort order of the underlying `VecDeque`, returning an\n-    /// order code that indicates whether its argument is `Less`,\n-    /// `Equal` or `Greater` than the desired target.\n+    /// with the sort order of the deque, returning an order code that\n+    /// indicates whether its argument is `Less`, `Equal` or `Greater`\n+    /// than the desired target.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2630,9 +2630,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Binary searches this sorted `VecDeque` with a key extraction function.\n+    /// Binary searches the sorted deque with a key extraction function.\n     ///\n-    /// Assumes that the `VecDeque` is sorted by the key, for instance with\n+    /// Assumes that the deque is sorted by the key, for instance with\n     /// [`make_contiguous().sort_by_key()`] using the same key extraction function.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n@@ -2687,7 +2687,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n     /// (all odd numbers are at the start, all even at the end).\n     ///\n-    /// If this deque is not partitioned, the returned result is unspecified and meaningless,\n+    /// If the deque is not partitioned, the returned result is unspecified and meaningless,\n     /// as this method performs a kind of binary search.\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`binary_search_by_key`].\n@@ -2724,7 +2724,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n }\n \n impl<T: Clone, A: Allocator> VecDeque<T, A> {\n-    /// Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n+    /// Modifies the deque in-place so that `len()` is equal to new_len,\n     /// either by removing excess elements from the back or by appending clones of `value`\n     /// to the back.\n     ///\n@@ -2878,7 +2878,7 @@ impl<T, A: Allocator> IntoIterator for VecDeque<T, A> {\n     type Item = T;\n     type IntoIter = IntoIter<T, A>;\n \n-    /// Consumes the `VecDeque` into a front-to-back iterator yielding elements by\n+    /// Consumes the deque into a front-to-back iterator yielding elements by\n     /// value.\n     fn into_iter(self) -> IntoIter<T, A> {\n         IntoIter::new(self)"}]}