{"sha": "1c16accfc204b447b128ed17545e88d947144682", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMTZhY2NmYzIwNGI0NDdiMTI4ZWQxNzU0NWU4OGQ5NDcxNDQ2ODI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-13T02:25:05Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-14T20:24:50Z"}, "message": "libsyntax: Accept `use foo as bar;` in lieu of `use bar as foo;`\n\nThe old syntax will be removed after a snapshot.\n\nRFC #47.\n\nIssue #16461.", "tree": {"sha": "c1dded87a5073e546f314996488e86f57cc8a924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1dded87a5073e546f314996488e86f57cc8a924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c16accfc204b447b128ed17545e88d947144682", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c16accfc204b447b128ed17545e88d947144682", "html_url": "https://github.com/rust-lang/rust/commit/1c16accfc204b447b128ed17545e88d947144682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c16accfc204b447b128ed17545e88d947144682/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404978ea722c0257cc763540c93243e8a21f82ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/404978ea722c0257cc763540c93243e8a21f82ed", "html_url": "https://github.com/rust-lang/rust/commit/404978ea722c0257cc763540c93243e8a21f82ed"}], "stats": {"total": 94, "additions": 51, "deletions": 43}, "files": [{"sha": "518cd3a9891a347cda99f115337941c94de864b2", "filename": "src/doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -919,7 +919,7 @@ extern crate foo = \"some/where/rust-foo#foo:1.0\"; // a full crate ID for externa\n ##### Use declarations\n \n ~~~~ {.ebnf .gram}\n-use_decl : \"pub\" ? \"use\" [ ident '=' path\n+use_decl : \"pub\" ? \"use\" [ path \"as\" ident\n                           | path_glob ] ;\n \n path_glob : ident [ \"::\" [ path_glob\n@@ -939,7 +939,7 @@ module item. These declarations may appear at the top of [modules](#modules) and\n \n Use declarations support a number of convenient shortcuts:\n \n-  * Rebinding the target name as a new local name, using the syntax `use x = p::q::r;`.\n+  * Rebinding the target name as a new local name, using the syntax `use p::q::r as x;`.\n   * Simultaneously binding a list of paths differing only in their final element,\n     using the glob-like brace syntax `use a::b::{c,d,e,f};`\n   * Binding all paths matching a given prefix, using the asterisk wildcard syntax `use a::b::*;`"}, {"sha": "d93b28008791d8d6f02784e0c612b1e64b28c55a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -1114,11 +1114,11 @@ pub type ViewPath = Spanned<ViewPath_>;\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum ViewPath_ {\n \n-    /// `quux = foo::bar::baz`\n+    /// `foo::bar::baz as quux`\n     ///\n     /// or just\n     ///\n-    /// `foo::bar::baz ` (with 'baz =' implicitly on the left)\n+    /// `foo::bar::baz` (with `as baz` implicitly on the right)\n     ViewPathSimple(Ident, Path, NodeId),\n \n     /// `foo::bar::*`"}, {"sha": "50db5029904160f6d2e84c2621de383eca304970", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -5309,6 +5309,7 @@ impl<'a> Parser<'a> {\n         match self.token {\n           token::EQ => {\n             // x = foo::bar\n+            // NOTE(stage0, #16461, pcwalton): Deprecate after snapshot.\n             self.bump();\n             let path_lo = self.span.lo;\n             path = vec!(self.parse_ident());\n@@ -5391,7 +5392,7 @@ impl<'a> Parser<'a> {\n           }\n           _ => ()\n         }\n-        let last = *path.get(path.len() - 1u);\n+        let mut rename_to = *path.get(path.len() - 1u);\n         let path = ast::Path {\n             span: mk_sp(lo, self.span.hi),\n             global: false,\n@@ -5403,9 +5404,12 @@ impl<'a> Parser<'a> {\n                 }\n             }).collect()\n         };\n+        if self.eat_keyword(keywords::As) {\n+            rename_to = self.parse_ident()\n+        }\n         return box(GC) spanned(lo,\n                         self.last_span.hi,\n-                        ViewPathSimple(last, path, ast::DUMMY_NODE_ID));\n+                        ViewPathSimple(rename_to, path, ast::DUMMY_NODE_ID));\n     }\n \n     /// Parses a sequence of items. Stops when it finds program"}, {"sha": "be4043bd73ba77f213189610164e551418be0321", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -2262,13 +2262,17 @@ impl<'a> State<'a> {\n     pub fn print_view_path(&mut self, vp: &ast::ViewPath) -> IoResult<()> {\n         match vp.node {\n             ast::ViewPathSimple(ident, ref path, _) => {\n+                try!(self.print_path(path, false));\n+\n                 // FIXME(#6993) can't compare identifiers directly here\n-                if path.segments.last().unwrap().identifier.name != ident.name {\n-                    try!(self.print_ident(ident));\n+                if path.segments.last().unwrap().identifier.name !=\n+                        ident.name {\n                     try!(space(&mut self.s));\n-                    try!(self.word_space(\"=\"));\n+                    try!(self.word_space(\"as\"));\n+                    try!(self.print_ident(ident));\n                 }\n-                self.print_path(path, false)\n+\n+                Ok(())\n             }\n \n             ast::ViewPathGlob(ref path, _) => {"}, {"sha": "266903169c7b07f373ced546cf85f392a7dd498f", "filename": "src/test/auxiliary/privacy_reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use bar = foo;\n+pub use foo as bar;\n \n mod foo {\n     pub fn frob() {}"}, {"sha": "3bad76f0e703e62919f7ea9622bf32ffbe438fd8", "filename": "src/test/auxiliary/reexported_static_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fauxiliary%2Freexported_static_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fauxiliary%2Freexported_static_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Freexported_static_methods.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub use sub_foo::Foo;\n-pub use Baz = self::Bar;\n+pub use self::Bar as Baz;\n pub use sub_foo::Boz;\n pub use sub_foo::Bort;\n "}, {"sha": "b756eb2b582f70076b6dfb7f6189437e23a228d1", "filename": "src/test/auxiliary/static_priv_by_default.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -39,10 +39,10 @@ mod foo {\n }\n \n pub mod bar {\n-    pub use e = foo::reexported_a;\n-    pub use f = foo::reexported_b;\n-    pub use g = foo::reexported_c;\n-    pub use h = foo::reexported_d;\n+    pub use foo::reexported_a as e;\n+    pub use foo::reexported_b as f;\n+    pub use foo::reexported_c as g;\n+    pub use foo::reexported_d as h;\n }\n \n pub static a: int = 0;"}, {"sha": "23cd4d80724e0c5523b25cf3cf763b6af56c51ca", "filename": "src/test/compile-fail/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -12,7 +12,7 @@\n // move, when the struct implements Drop.\n \n // NoCopy\n-use NP = std::kinds::marker::NoCopy;\n+use std::kinds::marker::NoCopy as NP;\n \n \n struct S { a: int, np: NP }"}, {"sha": "c522ecc4817f821c482ab9e0fe789b74ef99d593", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -15,7 +15,7 @@\n use bar::*;\n \n mod bar {\n-    use import = self::fpriv;\n+    use self::fpriv as import;\n     fn fpriv() {}\n     extern {\n         fn epriv();"}, {"sha": "ebd897a0611392efbf8117d092df35f2947137e8", "filename": "src/test/compile-fail/import-from-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:expected\n \n-use baz = foo::{bar};\n+use foo::{bar} as baz;\n \n mod foo {\n     pub fn bar() {}"}, {"sha": "fb400b6c2bb1e9465aacd8052909e046a2294996", "filename": "src/test/compile-fail/import-glob-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:expected\n \n-use baz = foo::*;\n+use foo::* as baz;\n \n mod foo {\n     pub fn bar() {}"}, {"sha": "bfc1ac2daef41d01c0c50e855fa7fb20a77f7dbf", "filename": "src/test/compile-fail/inaccessible-test-modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Finaccessible-test-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Finaccessible-test-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finaccessible-test-modules.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -12,8 +12,8 @@\n \n // the `--test` harness creates modules with these textual names, but\n // they should be inaccessible from normal code.\n-use x = __test; //~ ERROR unresolved import `__test`\n-use y = __test_reexports; //~ ERROR unresolved import `__test_reexports`\n+use __test as x; //~ ERROR unresolved import `__test`\n+use __test_reexports as y; //~ ERROR unresolved import `__test_reexports`\n \n #[test]\n fn baz() {}"}, {"sha": "e4fae73b18991293ee9c9a7a1ada252ca7e276c5", "filename": "src/test/compile-fail/issue-2937.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use x = m::f; //~ ERROR unresolved import `m::f`. There is no `f` in `m`\n+use m::f as x; //~ ERROR unresolved import `m::f`. There is no `f` in `m`\n \n mod m {}\n "}, {"sha": "41e6f24d79c79fcfdf3ead05be80f860fd232eeb", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -16,7 +16,7 @@\n \n extern crate libc;\n \n-pub use x = extern_foo;\n+pub use extern_foo as x;\n extern {\n     fn extern_foo();\n }"}, {"sha": "a63a3a61f68a0923d75b55e2d998e2c1f8b49e20", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -148,8 +148,8 @@ mod internal_impl {\n }\n /// dox\n pub mod public_interface {\n-    pub use foo = internal_impl::documented;\n-    pub use bar = internal_impl::undocumented1;\n+    pub use internal_impl::documented as foo;\n+    pub use internal_impl::undocumented1 as bar;\n     pub use internal_impl::{documented, undocumented2};\n     pub use internal_impl::globbed::*;\n }"}, {"sha": "d9bf722f73e4230f9a4e63df29f874006cc3b7db", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -12,7 +12,7 @@\n #![deny(unused_imports)]\n #![allow(dead_code)]\n \n-use cal = bar::c::cc;\n+use bar::c::cc as cal;\n \n use std::mem::*;            // shouldn't get errors for not using\n                             // everything imported"}, {"sha": "b5ffa3546c19d02cbbaefc8810762a19aa4a94d3", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -43,7 +43,7 @@ mod n {\n }\n \n fn h() {\n-    use not_okay = self::n::OKAY;\n+    use self::n::OKAY as not_okay;\n     let r = match (0,0) {\n         (0, not_okay) => 0,\n //~^ ERROR static constant in pattern `not_okay` should have an uppercase name such as `NOT_OKAY`"}, {"sha": "e52a4da13528799cbbe5a02df36253a17f4f681f", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -176,7 +176,7 @@ pub mod mytest {\n                          //~^ NOTE: module `i` is private\n \n     pub mod foo {\n-        pub use foo = self::i::A;\n+        pub use self::i::A as foo;\n \n         mod i {\n             pub struct A;"}, {"sha": "7da7b364bda3658f16d07a4cece551e42530d460", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -10,7 +10,7 @@\n \n use foo::bar; //~ ERROR unresolved import `foo::bar`. Maybe a missing `extern crate foo`?\n \n-use x = bar::baz; //~ ERROR unresolved import `bar::baz`. There is no `baz` in `bar`\n+use bar::baz as x; //~ ERROR unresolved import `bar::baz`. There is no `baz` in `bar`\n \n mod bar {\n     struct bar;"}, {"sha": "10c3df9388a011f05c105ed4bf8f7f7e7cfd31ba", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -19,8 +19,8 @@ extern crate time;\n \n use std::hashmap::{HashMap, HashSet};\n \n-use EBReader = rbml::reader;\n-use EBWriter = rbml::writer;\n+use rbml::reader as EBReader;\n+use rbml::writer as EBWriter;\n use std::cmp::Eq;\n use std::cmp;\n use std::io;"}, {"sha": "318305b7ec38eda17b592b262f70767ab7391543", "filename": "src/test/run-pass/exponential-notation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexponential-notation.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -10,8 +10,8 @@\n \n #![feature(macro_rules)]\n \n-use s = std::num::strconv;\n-use to_string = std::num::strconv::float_to_str_common;\n+use std::num::strconv as s;\n+use std::num::strconv::float_to_str_common as to_string;\n \n macro_rules! t(($a:expr, $b:expr) => { { let (r, _) = $a; assert_eq!(r, $b.to_string()) } })\n "}, {"sha": "37f7d84aaf1e42a46742267fed395d0fc10b1d4e", "filename": "src/test/run-pass/filter-block-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -11,5 +11,5 @@\n pub fn main() {\n     // Make sure that this view item is filtered out because otherwise it would\n     // trigger a compilation error\n-    #[cfg(not_present)] use foo = bar;\n+    #[cfg(not_present)] use bar as foo;\n }"}, {"sha": "14843b30e1c41a3b5a0a7ad46fa9e927e472f42c", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -11,7 +11,7 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-use NP = std::kinds::marker::NoCopy;\n+use std::kinds::marker::NoCopy as NP;\n \n struct ncint { np: NP, v: int }\n fn ncint(v: int) -> ncint { ncint { np: NP, v: v } }"}, {"sha": "cf825bbbcea76c8c4eb747604bbd7c16b82488af", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -16,7 +16,7 @@ mod foo {\n \n mod bar {\n     use foo::x;\n-    use z = foo::x;\n+    use foo::x as z;\n     pub fn thing() { x(10); z(10); }\n }\n "}, {"sha": "119107404d74d60096f186b2627108ec766f5e6a", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -11,7 +11,7 @@\n \n \n use foo::x;\n-use z = foo::x;\n+use foo::x as z;\n \n mod foo {\n     pub fn x(y: int) { println!(\"{}\", y); }"}, {"sha": "c9413258e0fb8d82442e3b8b76955124eb931cd2", "filename": "src/test/run-pass/issue-5950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fissue-5950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fissue-5950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5950.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-pub use local_alias = local;\n+pub use local as local_alias;\n \n mod local { }\n "}, {"sha": "92f57f34c947d15b3ec641991ffb45f38515811c", "filename": "src/test/run-pass/match-static-const-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -38,7 +38,7 @@ mod m {\n }\n \n fn g() {\n-    use AHA = self::m::aha;\n+    use self::m::aha as AHA;\n     let r = match (0,0) {\n         (0, AHA) => 0,\n         (x, y)   => 1 + x + y,"}, {"sha": "cdc0ffed7a1cb11f0b100959970d69ba3bf7b45e", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -18,9 +18,9 @@ extern crate zed = \"std\";\n \n \n use std::str;\n-use x = zed::str;\n+use zed::str as x;\n mod baz {\n-    pub use x = std::str;\n+    pub use std::str as x;\n }\n \n #[start]"}, {"sha": "6afa02fce55149a45552a0953c317d684b9fe5d4", "filename": "src/test/run-pass/xcrate-static-addresses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c16accfc204b447b128ed17545e88d947144682/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs?ref=1c16accfc204b447b128ed17545e88d947144682", "patch": "@@ -12,7 +12,7 @@\n \n extern crate xcrate_static_addresses;\n \n-use other = xcrate_static_addresses;\n+use xcrate_static_addresses as other;\n \n pub fn main() {\n     other::verify_same(&other::global);"}]}