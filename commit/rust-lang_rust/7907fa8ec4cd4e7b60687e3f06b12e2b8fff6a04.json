{"sha": "7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04", "node_id": "C_kwDOAAsO6NoAKDc5MDdmYThlYzRjZDRlN2I2MDY4N2UzZjA2YjEyZTJiOGZmZjZhMDQ", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2021-11-30T06:10:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2021-11-30T17:25:17Z"}, "message": "Clarify and tidy up explanation of E0038", "tree": {"sha": "f25ed71b6be1efe317b10672c91ec009016973e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25ed71b6be1efe317b10672c91ec009016973e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDdctZueT3Mp4L6V8aYJLAU7mUhkFAmGmXoIACgkQaYJLAU7m\nUhkbMw//VNCd9nWX7EnbHn10nEgaM6ZvbAhBNKKiuIFAnttlyUWq7Tmh30v8936V\nk0d18ASdNRwsEKU0/86IMuFPjqHdj6EITBOywFP04dgW5FNKCsGS0XCqE/mmTaVt\nrvlbLGxJK5k6DJn/RIy8DjaJi4TM64Czr5ZY6epsbU1Ih0XTRTwL6+4jerAngpxp\njcTwFhO8bAgxfhBsoF0VxAoe14x2MAS/ke7mQ+uz44ff0rUvq4EcYe5WsP9zjctj\nLtJNOqBAMMXvt0V3qjVaylsalexortmBETSXS3gbQTF78GiV1sIVT6BnqJCFyReg\nntlyszfBkdYBHN3GhDDrsgJGJw56aEwqXNzmtS9qYsvyQ5WBgSzJXrYf0TG6M0R+\nWom20I/VhnulW2pwrrCffn9cGsdi/ON9KYG74151f1moEuRRt3my2aULqCDqc9E7\n9Nx5hANi40Qhu5P6koz/HncqvlTF5I65QIKOrH6I8//wqZi4CBkzCsrallImRLyp\nDXfMJY83BCSttNmOhGYdeWww9VZwYiwhxPXxWo3u5yyB/RoO5QaCaxzLRBhtf0gV\nLL5l9Q8gDjXN+o0VfTuqNJhlC0k8GD9Khf2fvCBtCcDEhPwP1HsY08SOzTnGLD6J\n+GaX4Q8GVBOVrgvxeT7P9/fPe6/F51hX4sH7j+RxPQKhbUmRkR8=\n=yYRs\n-----END PGP SIGNATURE-----", "payload": "tree f25ed71b6be1efe317b10672c91ec009016973e6\nparent 94bec9070223606632d6112b38670ea1c72763f4\nauthor Graydon Hoare <graydon@pobox.com> 1638252649 -0800\ncommitter Graydon Hoare <graydon@pobox.com> 1638293117 -0800\n\nClarify and tidy up explanation of E0038\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04", "html_url": "https://github.com/rust-lang/rust/commit/7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94bec9070223606632d6112b38670ea1c72763f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/94bec9070223606632d6112b38670ea1c72763f4", "html_url": "https://github.com/rust-lang/rust/commit/94bec9070223606632d6112b38670ea1c72763f4"}], "stats": {"total": 97, "additions": 65, "deletions": 32}, "files": [{"sha": "ca2eaa54057fabb1f561ebd9631fb9c3f7cccbf1", "filename": "compiler/rustc_error_codes/src/error_codes/E0038.md", "status": "modified", "additions": 65, "deletions": 32, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0038.md", "raw_url": "https://github.com/rust-lang/rust/raw/7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0038.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0038.md?ref=7907fa8ec4cd4e7b60687e3f06b12e2b8fff6a04", "patch": "@@ -1,34 +1,64 @@\n-Trait objects like `Box<Trait>` can only be constructed when certain\n-requirements are satisfied by the trait in question.\n-\n-Trait objects are a form of dynamic dispatch and use a dynamically sized type\n-for the inner type. So, for a given trait `Trait`, when `Trait` is treated as a\n-type, as in `Box<Trait>`, the inner type is 'unsized'. In such cases the boxed\n-pointer is a 'fat pointer' that contains an extra pointer to a table of methods\n-(among other things) for dynamic dispatch. This design mandates some\n-restrictions on the types of traits that are allowed to be used in trait\n-objects, which are collectively termed as 'object safety' rules.\n-\n-Attempting to create a trait object for a non object-safe trait will trigger\n-this error.\n-\n-There are various rules:\n-\n-### The trait cannot require `Self: Sized`\n-\n-When `Trait` is treated as a type, the type does not implement the special\n-`Sized` trait, because the type does not have a known size at compile time and\n-can only be accessed behind a pointer. Thus, if we have a trait like the\n-following:\n+For any given trait `Trait` there may be a related _type_ called the _trait\n+object type_ which is typically written as `dyn Trait`. In earlier editions of\n+Rust, trait object types were written as plain `Trait` (just the name of the\n+trait, written in type positions) but this was a bit too confusing, so we now\n+write `dyn Trait`.\n+\n+Some traits are not allowed to be used as trait object types. The traits that\n+are allowed to be used as trait object types are called \"object-safe\" traits.\n+Attempting to use a trait object type for a trait that is not object-safe will\n+trigger error E0038.\n+\n+Two general aspects of trait object types give rise to the restrictions:\n+\n+  1. Trait object types are dynamically sized types (DSTs), and trait objects of\n+     these types can only be accessed through pointers, such as `&dyn Trait` or\n+     `Box<dyn Trait>`. The size of such a pointer is known, but the size of the\n+     `dyn Trait` object pointed-to by the pointer is _opaque_ to code working\n+     with it, and different tait objects with the same trait object type may\n+     have different sizes.\n+\n+  2. The pointer used to access a trait object is paired with an extra pointer\n+     to a \"virtual method table\" or \"vtable\", which is used to implement dynamic\n+     dispatch to the object's implementations of the trait's methods. There is a\n+     single such vtable for each trait implementation, but different trait\n+     objects with the same trait object type may point to vtables from different\n+     implementations.\n+\n+The specific conditions that violate object-safety follow, most of which relate\n+to missing size information and vtable polymorphism arising from these aspects.\n+\n+### The trait requires `Self: Sized`\n+\n+Traits that are declared as `Trait: Sized` or which otherwise inherit a\n+constraint of `Self:Sized` are not object-safe.\n+\n+The reasoning behind this is somewhat subtle. It derives from the fact that Rust\n+requires (and defines) that every trait object type `dyn Trait` automatically\n+implements `Trait`. Rust does this to simplify error reporting and ease\n+interoperation between static and dynamic polymorphism. For example, this code\n+works:\n \n ```\n-trait Foo where Self: Sized {\n+trait Trait {\n+}\n+\n+fn static_foo<T:Trait + ?Sized>(b: &T) {\n+}\n \n+fn dynamic_bar(a: &dyn Trait) {\n+    static_foo(a)\n }\n ```\n \n-We cannot create an object of type `Box<Foo>` or `&Foo` since in this case\n-`Self` would not be `Sized`.\n+This code works because `dyn Trait`, if it exists, always implements `Trait`.\n+\n+However as we know, any `dyn Trait` is also unsized, and so it can never\n+implement a sized trait like `Trait:Sized`. So, rather than allow an exception\n+to the rule that `dyn Trait` always implements `Trait`, Rust chooses to prohibit\n+such a `dyn Trait` from existing at all.\n+\n+Only unsized traits are considered object-safe.\n \n Generally, `Self: Sized` is used to indicate that the trait should not be used\n as a trait object. If the trait comes from your own crate, consider removing\n@@ -67,7 +97,7 @@ trait Trait {\n     fn foo(&self) -> Self;\n }\n \n-fn call_foo(x: Box<Trait>) {\n+fn call_foo(x: Box<dyn Trait>) {\n     let y = x.foo(); // What type is y?\n     // ...\n }\n@@ -76,7 +106,8 @@ fn call_foo(x: Box<Trait>) {\n If only some methods aren't object-safe, you can add a `where Self: Sized` bound\n on them to mark them as explicitly unavailable to trait objects. The\n functionality will still be available to all other implementers, including\n-`Box<Trait>` which is itself sized (assuming you `impl Trait for Box<Trait>`).\n+`Box<dyn Trait>` which is itself sized (assuming you `impl Trait for Box<dyn\n+Trait>`).\n \n ```\n trait Trait {\n@@ -115,7 +146,9 @@ impl Trait for u8 {\n ```\n \n At compile time each implementation of `Trait` will produce a table containing\n-the various methods (and other items) related to the implementation.\n+the various methods (and other items) related to the implementation, which will\n+be used as the virtual method table for a `dyn Trait` object derived from that\n+implementation.\n \n This works fine, but when the method gains generic parameters, we can have a\n problem.\n@@ -174,7 +207,7 @@ Now, if we have the following code:\n # impl Trait for u8 { fn foo<T>(&self, on: T) {} }\n # impl Trait for bool { fn foo<T>(&self, on: T) {} }\n # // etc.\n-fn call_foo(thing: Box<Trait>) {\n+fn call_foo(thing: Box<dyn Trait>) {\n     thing.foo(true); // this could be any one of the 8 types above\n     thing.foo(1);\n     thing.foo(\"hello\");\n@@ -200,7 +233,7 @@ trait Trait {\n ```\n \n If this is not an option, consider replacing the type parameter with another\n-trait object (e.g., if `T: OtherTrait`, use `on: Box<OtherTrait>`). If the\n+trait object (e.g., if `T: OtherTrait`, use `on: Box<dyn OtherTrait>`). If the\n number of types you intend to feed to this method is limited, consider manually\n listing out the methods of different types.\n \n@@ -226,7 +259,7 @@ trait Foo {\n }\n ```\n \n-### The trait cannot contain associated constants\n+### Trait contains associated constants\n \n Just like static functions, associated constants aren't stored on the method\n table. If the trait or any subtrait contain an associated constant, they cannot\n@@ -248,7 +281,7 @@ trait Foo {\n }\n ```\n \n-### The trait cannot use `Self` as a type parameter in the supertrait listing\n+### Trait uses `Self` as a type parameter in the supertrait listing\n \n This is similar to the second sub-error, but subtler. It happens in situations\n like the following:"}]}