{"sha": "1aa0964b543e0e21cadee2fed6a7725b594e92be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTA5NjRiNTQzZTBlMjFjYWRlZTJmZWQ2YTc3MjViNTk0ZTkyYmU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T22:36:04Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T14:47:58Z"}, "message": "Drop RefCell from IdMap in markdown rendering", "tree": {"sha": "355beeb92860d5c8e04f676ad1e09c067858afb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355beeb92860d5c8e04f676ad1e09c067858afb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa0964b543e0e21cadee2fed6a7725b594e92be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa0964b543e0e21cadee2fed6a7725b594e92be", "html_url": "https://github.com/rust-lang/rust/commit/1aa0964b543e0e21cadee2fed6a7725b594e92be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa0964b543e0e21cadee2fed6a7725b594e92be/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c250b5fd033ebd8257cca8ee537e752355a151c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c250b5fd033ebd8257cca8ee537e752355a151c3", "html_url": "https://github.com/rust-lang/rust/commit/c250b5fd033ebd8257cca8ee537e752355a151c3"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "8254bc800ca46d9ccd11b49cf9837326de4d078c", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=1aa0964b543e0e21cadee2fed6a7725b594e92be", "patch": "@@ -6,8 +6,6 @@ use crate::syntax::feature_gate::UnstableFeatures;\n use crate::syntax::edition::Edition;\n use crate::html::markdown::{IdMap, ErrorCodes, Markdown, Playground};\n \n-use std::cell::RefCell;\n-\n #[derive(Clone, Debug)]\n pub struct ExternalHtml {\n     /// Content that will be included inline in the <head> section of a\n@@ -35,7 +33,7 @@ impl ExternalHtml {\n             .and_then(|(ih, bc)|\n                 load_external_files(md_before_content, diag)\n                     .map(|m_bc| (ih,\n-                            format!(\"{}{}\", bc, Markdown(&m_bc, &[], RefCell::new(id_map),\n+                            format!(\"{}{}\", bc, Markdown(&m_bc, &[], id_map,\n                                     codes, edition, playground).to_string())))\n             )\n             .and_then(|(ih, bc)|\n@@ -45,7 +43,7 @@ impl ExternalHtml {\n             .and_then(|(ih, bc, ac)|\n                 load_external_files(md_after_content, diag)\n                     .map(|m_ac| (ih, bc,\n-                            format!(\"{}{}\", ac, Markdown(&m_ac, &[], RefCell::new(id_map),\n+                            format!(\"{}{}\", ac, Markdown(&m_ac, &[], id_map,\n                                     codes, edition, playground).to_string())))\n             )\n             .map(|(ih, bc, ac)|"}, {"sha": "5a7deb651b00d8e9866fde5c3dd3b133621f1319", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1aa0964b543e0e21cadee2fed6a7725b594e92be", "patch": "@@ -9,12 +9,10 @@\n //!\n //! use syntax::edition::Edition;\n //! use rustdoc::html::markdown::{IdMap, Markdown, ErrorCodes};\n-//! use std::cell::RefCell;\n //!\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n-//! let md = Markdown(s, &[], RefCell::new(&mut id_map),\n-//!                                   ErrorCodes::Yes, Edition::Edition2015, None);\n+//! let md = Markdown(s, &[], &mut id_map, ErrorCodes::Yes, Edition::Edition2015, &None);\n //! let html = md.to_string();\n //! // ... something using html\n //! ```\n@@ -51,7 +49,7 @@ pub struct Markdown<'a>(\n     /// A list of link replacements.\n     pub &'a [(String, String)],\n     /// The current list of used header IDs.\n-    pub RefCell<&'a mut IdMap>,\n+    pub &'a mut IdMap,\n     /// Whether to allow the use of explicit error codes in doctest lang strings.\n     pub ErrorCodes,\n     /// Default edition to use when parsing doctests (to add a `fn main`).\n@@ -61,15 +59,15 @@ pub struct Markdown<'a>(\n /// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n pub struct MarkdownWithToc<'a>(\n     pub &'a str,\n-    pub RefCell<&'a mut IdMap>,\n+    pub &'a mut IdMap,\n     pub ErrorCodes,\n     pub Edition,\n     pub &'a Option<Playground>,\n );\n /// A tuple struct like `Markdown` that renders the markdown escaping HTML tags.\n pub struct MarkdownHtml<'a>(\n     pub &'a str,\n-    pub RefCell<&'a mut IdMap>,\n+    pub &'a mut IdMap,\n     pub ErrorCodes,\n     pub Edition,\n     pub &'a Option<Playground>,\n@@ -690,8 +688,7 @@ impl LangString {\n \n impl Markdown<'_> {\n     pub fn to_string(self) -> String {\n-        let Markdown(md, links, ids, codes, edition, playground) = self;\n-        let mut ids = ids.borrow_mut();\n+        let Markdown(md, links, mut ids, codes, edition, playground) = self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return String::new(); }\n@@ -719,8 +716,7 @@ impl Markdown<'_> {\n \n impl MarkdownWithToc<'_> {\n     pub fn to_string(self) -> String {\n-        let MarkdownWithToc(md, ref ids, codes, edition, playground) = self;\n-        let mut ids = ids.borrow_mut();\n+        let MarkdownWithToc(md, mut ids, codes, edition, playground) = self;\n \n         let p = Parser::new_ext(md, opts());\n \n@@ -741,8 +737,7 @@ impl MarkdownWithToc<'_> {\n \n impl MarkdownHtml<'_> {\n     pub fn to_string(self) -> String {\n-        let MarkdownHtml(md, ref ids, codes, edition, playground) = self;\n-        let mut ids = ids.borrow_mut();\n+        let MarkdownHtml(md, mut ids, codes, edition, playground) = self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return String::new(); }"}, {"sha": "a95c29038d46f77cced598d2b3c959db0ae4bac4", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=1aa0964b543e0e21cadee2fed6a7725b594e92be", "patch": "@@ -73,8 +73,8 @@ fn test_lang_string_parse() {\n fn test_header() {\n     fn t(input: &str, expect: &str) {\n         let mut map = IdMap::new();\n-        let output = Markdown(input, &[], RefCell::new(&mut map),\n-                              ErrorCodes::Yes, DEFAULT_EDITION).to_string();\n+        let output = Markdown(\n+            input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -96,8 +96,8 @@ fn test_header() {\n fn test_header_ids_multiple_blocks() {\n     let mut map = IdMap::new();\n     fn t(map: &mut IdMap, input: &str, expect: &str) {\n-        let output = Markdown(input, &[], RefCell::new(map),\n-                              ErrorCodes::Yes, DEFAULT_EDITION).to_string();\n+        let output = Markdown(input, &[], map,\n+                              ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -134,8 +134,8 @@ fn test_plain_summary_line() {\n fn test_markdown_html_escape() {\n     fn t(input: &str, expect: &str) {\n         let mut idmap = IdMap::new();\n-        let output = MarkdownHtml(input, RefCell::new(&mut idmap),\n-                                  ErrorCodes::Yes, DEFAULT_EDITION).to_string();\n+        let output = MarkdownHtml(input, &mut idmap,\n+                                  ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n "}, {"sha": "ea97cea942820a61266789fe4159f29cfd96cf1a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1aa0964b543e0e21cadee2fed6a7725b594e92be", "patch": "@@ -2595,7 +2595,7 @@ fn render_markdown(w: &mut fmt::Formatter<'_>,\n     write!(w, \"<div class='docblock{}'>{}{}</div>\",\n            if is_hidden { \" hidden\" } else { \"\" },\n            prefix,\n-           Markdown(md_text, &links, RefCell::new(&mut ids),\n+           Markdown(md_text, &links, &mut ids,\n            cx.codes, cx.edition, &cx.playground).to_string())\n }\n \n@@ -2961,8 +2961,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n         if let Some(note) = note {\n             let mut ids = cx.id_map.borrow_mut();\n-            let html = MarkdownHtml(\n-                &note, RefCell::new(&mut ids), error_codes, cx.edition, &cx.playground);\n+            let html = MarkdownHtml(&note, &mut ids, error_codes, cx.edition, &cx.playground);\n             message.push_str(&format!(\": {}\", html.to_string()));\n         }\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n@@ -3013,7 +3012,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                 message,\n                 MarkdownHtml(\n                     &unstable_reason,\n-                    RefCell::new(&mut ids),\n+                    &mut ids,\n                     error_codes,\n                     cx.edition,\n                     &cx.playground,\n@@ -4247,7 +4246,7 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n-                   Markdown(&*dox, &i.impl_item.links(), RefCell::new(&mut ids),\n+                   Markdown(&*dox, &i.impl_item.links(), &mut ids,\n                             cx.codes, cx.edition, &cx.playground).to_string())?;\n         }\n     }"}, {"sha": "eaaae3261c728950bca315aa2745c584f4af8e4d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=1aa0964b543e0e21cadee2fed6a7725b594e92be", "patch": "@@ -1,7 +1,6 @@\n use std::fs::File;\n use std::io::prelude::*;\n use std::path::PathBuf;\n-use std::cell::RefCell;\n \n use errors;\n use testing;\n@@ -83,9 +82,9 @@ pub fn render(\n     let mut ids = IdMap::new();\n     let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let text = if !options.markdown_no_toc {\n-        MarkdownWithToc(text, RefCell::new(&mut ids), error_codes, edition, &playground).to_string()\n+        MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).to_string()\n     } else {\n-        Markdown(text, &[], RefCell::new(&mut ids), error_codes, edition, &playground).to_string()\n+        Markdown(text, &[], &mut ids, error_codes, edition, &playground).to_string()\n     };\n \n     let err = write!("}, {"sha": "a9d1d9997f6ef3f7cfc18ce3ce052e3fc2a24a52", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa0964b543e0e21cadee2fed6a7725b594e92be/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=1aa0964b543e0e21cadee2fed6a7725b594e92be", "patch": "@@ -100,7 +100,7 @@ impl Formatter for HTMLFormatter {\n                     url: String::from(\"https://play.rust-lang.org/\"),\n                 };\n                 write!(output, \"{}\",\n-                    Markdown(desc, &[], RefCell::new(&mut id_map),\n+                    Markdown(desc, &[], &mut id_map,\n                              ErrorCodes::Yes, DEFAULT_EDITION, &Some(playground)).to_string())?\n             },\n             None => write!(output, \"<p>No description.</p>\\n\")?,"}]}