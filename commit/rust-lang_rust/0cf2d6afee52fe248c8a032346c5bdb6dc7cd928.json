{"sha": "0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjJkNmFmZWU1MmZlMjQ4YzhhMDMyMzQ2YzViZGI2ZGM3Y2Q5Mjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-08T19:40:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-08T19:40:14Z"}, "message": "Generalized lookahead", "tree": {"sha": "f98f950ada46f596502d8d9987efc67848c46321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f98f950ada46f596502d8d9987efc67848c46321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "html_url": "https://github.com/rust-lang/rust/commit/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdddfc9eb89ee717c38a117383a313e5a49bb267", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdddfc9eb89ee717c38a117383a313e5a49bb267", "html_url": "https://github.com/rust-lang/rust/commit/bdddfc9eb89ee717c38a117383a313e5a49bb267"}], "stats": {"total": 116, "additions": 78, "deletions": 38}, "files": [{"sha": "52210ccad2bd5932ac3fced5e4af192ed097d822", "filename": "src/parser/event_parser/grammar/attributes.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs?ref=0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "patch": "@@ -9,16 +9,15 @@ pub(super) fn outer_attributes(_: &mut Parser) {\n \n \n fn attribute(p: &mut Parser, inner: bool) -> bool {\n-    let attr_start = inner && p.lookahead(&[POUND, EXCL, L_BRACK])\n-        || !inner && p.lookahead(&[POUND, L_BRACK]);\n-    if !attr_start {\n-        return false;\n-    }\n-    node(p, ATTR, |p| {\n-        p.bump_n(if inner { 3 } else { 2 });\n+    fn attr_tail(p: &mut Parser) {\n         meta_item(p) && p.expect(R_BRACK);\n-    });\n-    true\n+    }\n+\n+    if inner {\n+        node_if(p, [POUND, EXCL, L_BRACK], ATTR, attr_tail)\n+    } else {\n+        node_if(p, [POUND, L_BRACK], ATTR, attr_tail)\n+    }\n }\n \n fn meta_item(p: &mut Parser) -> bool {"}, {"sha": "f40a3cce2cdb0d2caf1a9cd1b512ef1c9a945a82", "filename": "src/parser/event_parser/grammar/expressions.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fexpressions.rs?ref=0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "patch": "@@ -1,16 +1,11 @@\n use super::*;\n \n pub(super) fn literal(p: &mut Parser) -> bool {\n-    match p.current() {\n-        TRUE_KW | FALSE_KW\n-        | INT_NUMBER | FLOAT_NUMBER\n-        | BYTE | CHAR\n-        |STRING | RAW_STRING | BYTE_STRING | RAW_BYTE_STRING => {\n-            node(p, LITERAL, |p| {\n-                p.bump();\n-            });\n-            true\n-        }\n-        _ => false\n-    }\n+    let literals = [\n+        TRUE_KW, FALSE_KW,\n+        INT_NUMBER, FLOAT_NUMBER,\n+        BYTE, CHAR,\n+        STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING,\n+    ];\n+    node_if(p, AnyOf(&literals), LITERAL, |_| ())\n }\n\\ No newline at end of file"}, {"sha": "68b444b69885b6d5908aea3255c56bcc5a57b96a", "filename": "src/parser/event_parser/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "patch": "@@ -58,7 +58,7 @@ fn struct_field(p: &mut Parser) -> bool {\n \n fn fn_item(p: &mut Parser) {\n     p.expect(IDENT) && p.expect(L_PAREN) && p.expect(R_PAREN)\n-        && p.curly_block(|p| ());\n+        && p.curly_block(|_| ());\n }\n \n "}, {"sha": "78309aa83268fdab1e463f575b87c7283aa479a9", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 59, "deletions": 9, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "patch": "@@ -18,13 +18,13 @@ pub(crate) fn file(p: &mut Parser) {\n fn visibility(_: &mut Parser) {\n }\n \n-fn node_if<F: FnOnce(&mut Parser)>(\n+fn node_if<F: FnOnce(&mut Parser), L: Lookahead>(\n     p: &mut Parser,\n-    first: SyntaxKind,\n+    first: L,\n     node_kind: SyntaxKind,\n     rest: F\n ) -> bool {\n-    p.current() == first && { node(p, node_kind, |p| { p.bump(); rest(p); }); true }\n+    first.is_ahead(p) && { node(p, node_kind, |p| { L::consume(p); rest(p); }); true }\n }\n \n fn node<F: FnOnce(&mut Parser)>(p: &mut Parser, node_kind: SyntaxKind, rest: F) {\n@@ -99,13 +99,63 @@ impl<'p> Parser<'p> {\n         }\n     }\n \n-    fn bump_n(&mut self, n: u8) {\n-        for _ in 0..n {\n-            self.bump();\n-        }\n-    }\n-\n     fn eat(&mut self, kind: SyntaxKind) -> bool {\n         self.current() == kind && { self.bump(); true }\n     }\n+}\n+\n+trait Lookahead: Copy {\n+    fn is_ahead(self, p: &Parser) -> bool;\n+    fn consume(p: &mut Parser);\n+}\n+\n+impl Lookahead for SyntaxKind {\n+    fn is_ahead(self, p: &Parser) -> bool {\n+        p.current() == self\n+    }\n+\n+    fn consume(p: &mut Parser) {\n+        p.bump();\n+    }\n+}\n+\n+impl Lookahead for [SyntaxKind; 2] {\n+    fn is_ahead(self, p: &Parser) -> bool {\n+        p.current() == self[0]\n+        && p.raw_lookahead(1) == self[1]\n+    }\n+\n+    fn consume(p: &mut Parser) {\n+        p.bump();\n+        p.bump();\n+    }\n+}\n+\n+impl Lookahead for [SyntaxKind; 3] {\n+    fn is_ahead(self, p: &Parser) -> bool {\n+        p.current() == self[0]\n+        && p.raw_lookahead(1) == self[1]\n+        && p.raw_lookahead(2) == self[2]\n+    }\n+\n+    fn consume(p: &mut Parser) {\n+        p.bump();\n+        p.bump();\n+        p.bump();\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+struct AnyOf<'a>(&'a [SyntaxKind]);\n+\n+impl<'a> Lookahead for AnyOf<'a> {\n+    fn is_ahead(self, p: &Parser) -> bool {\n+        let curr = p.current();\n+        self.0.iter().any(|&k| k == curr)\n+    }\n+\n+    fn consume(p: &mut Parser) {\n+        p.bump();\n+    }\n+\n }\n\\ No newline at end of file"}, {"sha": "a1a0ebfea2199ee89cc6184c5de617a054009511", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "patch": "@@ -88,12 +88,8 @@ impl<'t> Parser<'t> {\n         kind\n     }\n \n-    pub(crate) fn lookahead(&self, kinds: &[SyntaxKind]) -> bool {\n-        if self.tokens[self.pos..].len() < kinds.len() {\n-            return false\n-        }\n-        kinds.iter().zip(self.tokens[self.pos..].iter().map(|t| t.kind))\n-            .all(|(&k1, k2)| k1 == k2)\n+    pub(crate) fn raw_lookahead(&self, n: usize) -> SyntaxKind {\n+        self.tokens.get(self.pos + n).map(|t| t.kind).unwrap_or(EOF)\n     }\n \n     pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> bool {"}, {"sha": "7427551427923a28d64c82ed7e91244a3fab3675", "filename": "src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "patch": "@@ -56,4 +56,4 @@ fn is_insignificant(kind: SyntaxKind) -> bool {\n         WHITESPACE | COMMENT => true,\n         _ => false,\n     }\n-}\n\\ No newline at end of file\n+}"}]}