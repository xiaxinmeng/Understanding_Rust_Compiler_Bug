{"sha": "5993f5d0f88a22b87bf1888138055864c3c9e52b", "node_id": "C_kwDOAAsO6NoAKDU5OTNmNWQwZjg4YTIyYjg3YmYxODg4MTM4MDU1ODY0YzNjOWU1MmI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-03T22:08:38Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-23T20:17:47Z"}, "message": "Tweak output to account for alternative bindings in the same pattern", "tree": {"sha": "d16c5365d0c8881e1d89a4a74534c0ff3eeff758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d16c5365d0c8881e1d89a4a74534c0ff3eeff758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5993f5d0f88a22b87bf1888138055864c3c9e52b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5993f5d0f88a22b87bf1888138055864c3c9e52b", "html_url": "https://github.com/rust-lang/rust/commit/5993f5d0f88a22b87bf1888138055864c3c9e52b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5993f5d0f88a22b87bf1888138055864c3c9e52b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f80ea7d758361f0b296ad93b9613b13dbd2235", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f80ea7d758361f0b296ad93b9613b13dbd2235", "html_url": "https://github.com/rust-lang/rust/commit/24f80ea7d758361f0b296ad93b9613b13dbd2235"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "cfbd6d12578b7ef9391855a40586806b06ef1d7b", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5993f5d0f88a22b87bf1888138055864c3c9e52b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5993f5d0f88a22b87bf1888138055864c3c9e52b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=5993f5d0f88a22b87bf1888138055864c3c9e52b", "patch": "@@ -192,26 +192,23 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     is_loop_move = true;\n                 }\n \n-                self.suggest_ref_or_clone(\n-                    mpi,\n-                    move_span,\n-                    &mut err,\n-                    &mut seen_spans,\n-                    &mut in_pattern,\n-                );\n+                if !seen_spans.contains(&move_span) {\n+                    self.suggest_ref_or_clone(mpi, move_span, &mut err, &mut in_pattern);\n \n-                self.explain_captures(\n-                    &mut err,\n-                    span,\n-                    move_span,\n-                    move_spans,\n-                    *moved_place,\n-                    partially_str,\n-                    loop_message,\n-                    move_msg,\n-                    is_loop_move,\n-                    maybe_reinitialized_locations.is_empty(),\n-                );\n+                    self.explain_captures(\n+                        &mut err,\n+                        span,\n+                        move_span,\n+                        move_spans,\n+                        *moved_place,\n+                        partially_str,\n+                        loop_message,\n+                        move_msg,\n+                        is_loop_move,\n+                        maybe_reinitialized_locations.is_empty(),\n+                    );\n+                }\n+                seen_spans.insert(move_span);\n             }\n \n             use_spans.var_path_only_subdiag(&mut err, desired_action);\n@@ -312,7 +309,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         mpi: MovePathIndex,\n         move_span: Span,\n         err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n-        seen_spans: &mut FxHashSet<Span>,\n         in_pattern: &mut bool,\n     ) {\n         struct ExpressionFinder<'hir> {\n@@ -436,15 +432,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            if let Some(pat) = finder.pat && !seen_spans.contains(&pat.span) {\n+            if let Some(pat) = finder.pat {\n                 *in_pattern = true;\n                 err.span_suggestion_verbose(\n                     pat.span.shrink_to_lo(),\n                     \"borrow this binding in the pattern to avoid moving the value\",\n                     \"ref \".to_string(),\n                     Applicability::MachineApplicable,\n                 );\n-                seen_spans.insert(pat.span);\n             }\n         }\n     }"}, {"sha": "50eee1049db6e479e2c827046b8f484927995f4c", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5993f5d0f88a22b87bf1888138055864c3c9e52b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5993f5d0f88a22b87bf1888138055864c3c9e52b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=5993f5d0f88a22b87bf1888138055864c3c9e52b", "patch": "@@ -76,10 +76,7 @@ LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n    |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         foo @ Some(Test::Foo | Test::Bar) => (),\n-   |         ---\n-   |         |\n-   |         value moved here\n-   |         value moved here\n+   |         --- value moved here\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n@@ -132,10 +129,7 @@ LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4])\n    |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         a @ [.., Some(Test::Foo | Test::Bar)] => (),\n-   |         -\n-   |         |\n-   |         value moved here\n-   |         value moved here\n+   |         - value moved here\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move"}]}