{"sha": "8c51d4b002b2743fd50bc715429265aaaf482762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNTFkNGIwMDJiMjc0M2ZkNTBiYzcxNTQyOTI2NWFhYWY0ODI3NjI=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2011-10-28T23:01:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-30T20:40:59Z"}, "message": "Make float::from_str ignore whitespace (#1089)\n\nDiscard leading and trailing whitespace, for consistency with C/JS/Java/etc.\nAlso, don't allow floating point numbers that start or end with 'e'.", "tree": {"sha": "89d9769fbef8d2a1d204aa08e8451752e8abdc21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d9769fbef8d2a1d204aa08e8451752e8abdc21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c51d4b002b2743fd50bc715429265aaaf482762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c51d4b002b2743fd50bc715429265aaaf482762", "html_url": "https://github.com/rust-lang/rust/commit/8c51d4b002b2743fd50bc715429265aaaf482762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c51d4b002b2743fd50bc715429265aaaf482762/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bf10d84e2ec78c129f3fd04ed080d2d2038680f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf10d84e2ec78c129f3fd04ed080d2d2038680f", "html_url": "https://github.com/rust-lang/rust/commit/0bf10d84e2ec78c129f3fd04ed080d2d2038680f"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "e37b9f386b14ee1ea3da1a9bdb29df9727e3e1c9", "filename": "src/lib/float.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c51d4b002b2743fd50bc715429265aaaf482762/src%2Flib%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51d4b002b2743fd50bc715429265aaaf482762/src%2Flib%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffloat.rs?ref=8c51d4b002b2743fd50bc715429265aaaf482762", "patch": "@@ -48,6 +48,8 @@ This function accepts strings such as\n * \"5.\"\n * \".5\", or, equivalently,  \"0.5\"\n \n+Leading and trailing whitespace are ignored.\n+\n Parameters:\n \n num - A string, possibly empty.\n@@ -58,6 +60,8 @@ Returns:\n Otherwise, the floating-point number represented [num].\n */\n fn from_str(num: str) -> float {\n+   num = str::trim(num);\n+\n    let pos = 0u;                  //Current byte position in the string.\n                                   //Used to walk the string in O(n).\n    let len = str::byte_len(num);  //Length of the string, in bytes.\n@@ -66,6 +70,12 @@ fn from_str(num: str) -> float {\n    let total = 0f;                //Accumulated result\n    let c     = 'z';               //Latest char.\n \n+   //The string must start with one of the following characters.\n+   alt str::char_at(num, 0u) {\n+      '-' | '+' | '0' to '9' | '.' {}\n+      _ { ret NaN(); }\n+   }\n+\n    //Determine if first char is '-'/'+'. Set [pos] and [neg] accordingly.\n    let neg = false;               //Sign of the result\n    alt str::char_at(num, 0u) {\n@@ -89,9 +99,12 @@ fn from_str(num: str) -> float {\n            total = total * 10f;\n            total += ((c as int) - ('0' as int)) as float;\n          }\n-         _ {\n+         '.' | 'e' | 'E' {\n            break;\n          }\n+         _ {\n+           ret NaN();\n+         }\n        }\n    }\n \n@@ -106,9 +119,12 @@ fn from_str(num: str) -> float {\n                  decimal /= 10.f;\n                  total += (((c as int) - ('0' as int)) as float)*decimal;\n              }\n-             _ {\n+             'e' | 'E' {\n                  break;\n              }\n+             _ {\n+                 ret NaN();\n+             }\n          }\n       }\n    }\n@@ -132,7 +148,6 @@ fn from_str(num: str) -> float {\n           while(pos < len) {\n              let char_range = str::char_range_at(num, pos);\n              c = char_range.ch;\n-             pos = char_range.next;\n              alt c {\n                  '0' | '1' | '2' | '3' | '4' | '5' | '6'| '7' | '8' | '9' {\n                      exponent *= 10u;\n@@ -142,6 +157,7 @@ fn from_str(num: str) -> float {\n                      break;\n                  }\n              }\n+             pos = char_range.next;\n           }\n           let multiplier = pow_uint_to_uint_as_float(10u, exponent);\n               //Note: not [int::pow], otherwise, we'll quickly\n@@ -151,6 +167,8 @@ fn from_str(num: str) -> float {\n           } else {\n              total = total * multiplier;\n           }\n+      } else {\n+         ret NaN();\n       }\n    }\n "}, {"sha": "04e16648b7d162cf9b2b6169ac6a29003872ab60", "filename": "src/test/stdtest/float.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8c51d4b002b2743fd50bc715429265aaaf482762/src%2Ftest%2Fstdtest%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51d4b002b2743fd50bc715429265aaaf482762/src%2Ftest%2Fstdtest%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffloat.rs?ref=8c51d4b002b2743fd50bc715429265aaaf482762", "patch": "@@ -3,18 +3,39 @@ import std::float;\n \n #[test]\n fn test_from_str() {\n+   assert ( float::from_str(\"3\") == 3. );\n+   assert ( float::from_str(\"  3  \") == 3. );\n    assert ( float::from_str(\"3.14\") == 3.14 );\n    assert ( float::from_str(\"+3.14\") == 3.14 );\n    assert ( float::from_str(\"-3.14\") == -3.14 );\n    assert ( float::from_str(\"2.5E10\") == 25000000000. );\n    assert ( float::from_str(\"2.5e10\") == 25000000000. );\n    assert ( float::from_str(\"25000000000.E-10\") == 2.5 );\n    assert ( float::from_str(\"\") == 0. );\n-   assert ( float::isNaN(float::from_str(\"   \")) );\n    assert ( float::from_str(\".\") == 0. );\n+   assert ( float::from_str(\".e1\") == 0. );\n+   assert ( float::from_str(\".e-1\") == 0. );\n    assert ( float::from_str(\"5.\") == 5. );\n    assert ( float::from_str(\".5\") == 0.5 );\n    assert ( float::from_str(\"0.5\") == 0.5 );\n+   assert ( float::from_str(\"0.5 \") == 0.5 );\n+   assert ( float::from_str(\" 0.5 \") == 0.5 );\n+   assert ( float::from_str(\" -.5 \") == -0.5 );\n+   assert ( float::from_str(\" -.5 \") == -0.5 );\n+   assert ( float::from_str(\" -5 \") == -5. );\n+\n+   assert ( float::isNaN(float::from_str(\"x\")) );\n+   assert ( float::from_str(\" \") == 0. );\n+   assert ( float::from_str(\"   \") == 0. );\n+   assert ( float::from_str(\" 0.5\") == 0.5 );\n+   assert ( float::from_str(\" 0.5 \") == 0.5 );\n+   assert ( float::from_str(\" .1 \") == 0.1 );\n+   assert ( float::isNaN(float::from_str(\"e\")) );\n+   assert ( float::isNaN(float::from_str(\"E\")) );\n+   assert ( float::isNaN(float::from_str(\"E1\")) );\n+   assert ( float::isNaN(float::from_str(\"1e1e1\")) );\n+   assert ( float::isNaN(float::from_str(\"1e1.1\")) );\n+   assert ( float::isNaN(float::from_str(\"1e1-1\")) );\n }\n \n #[test]"}]}