{"sha": "a1f1b95d0043e92a504510434e143962079ffaf2", "node_id": "C_kwDOAAsO6NoAKGExZjFiOTVkMDA0M2U5MmE1MDQ1MTA0MzRlMTQzOTYyMDc5ZmZhZjI", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-26T09:53:50Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-26T09:53:50Z"}, "message": "Merge commit 'e36a20c24f35a4cee82bbdc600289104c9237c22' into ra-sync-and-pms-component", "tree": {"sha": "fa8916d4a629eb1bde7441334e34a3fb2bfc3b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa8916d4a629eb1bde7441334e34a3fb2bfc3b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f1b95d0043e92a504510434e143962079ffaf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f1b95d0043e92a504510434e143962079ffaf2", "html_url": "https://github.com/rust-lang/rust/commit/a1f1b95d0043e92a504510434e143962079ffaf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f1b95d0043e92a504510434e143962079ffaf2/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe84494c142356a53f12279698f7bfc3b056481", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe84494c142356a53f12279698f7bfc3b056481", "html_url": "https://github.com/rust-lang/rust/commit/dfe84494c142356a53f12279698f7bfc3b056481"}], "stats": {"total": 834, "additions": 624, "deletions": 210}, "files": [{"sha": "703f0e5b8af9f3c33a03a678e30c887247ffe183", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -1198,6 +1198,13 @@ dependencies = [\n  \"tt\",\n ]\n \n+[[package]]\n+name = \"proc-macro-srv-cli\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"proc-macro-srv\",\n+]\n+\n [[package]]\n name = \"proc-macro-test\"\n version = \"0.0.0\""}, {"sha": "66f9c24e8724a77e10d73a0f55df2367ebb1e116", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -96,6 +96,7 @@ pub(super) fn lower(\n         expander,\n         name_to_pat_grouping: Default::default(),\n         is_lowering_inside_or_pat: false,\n+        is_lowering_assignee_expr: false,\n     }\n     .collect(params, body)\n }\n@@ -109,6 +110,7 @@ struct ExprCollector<'a> {\n     // a poor-mans union-find?\n     name_to_pat_grouping: FxHashMap<Name, Vec<PatId>>,\n     is_lowering_inside_or_pat: bool,\n+    is_lowering_assignee_expr: bool,\n }\n \n impl ExprCollector<'_> {\n@@ -283,7 +285,10 @@ impl ExprCollector<'_> {\n                 } else {\n                     Box::default()\n                 };\n-                self.alloc_expr(Expr::Call { callee, args }, syntax_ptr)\n+                self.alloc_expr(\n+                    Expr::Call { callee, args, is_assignee_expr: self.is_lowering_assignee_expr },\n+                    syntax_ptr,\n+                )\n             }\n             ast::Expr::MethodCallExpr(e) => {\n                 let receiver = self.collect_expr_opt(e.receiver());\n@@ -359,6 +364,7 @@ impl ExprCollector<'_> {\n             ast::Expr::RecordExpr(e) => {\n                 let path =\n                     e.path().and_then(|path| self.expander.parse_path(self.db, path)).map(Box::new);\n+                let is_assignee_expr = self.is_lowering_assignee_expr;\n                 let record_lit = if let Some(nfl) = e.record_expr_field_list() {\n                     let fields = nfl\n                         .fields()\n@@ -378,9 +384,16 @@ impl ExprCollector<'_> {\n                         })\n                         .collect();\n                     let spread = nfl.spread().map(|s| self.collect_expr(s));\n-                    Expr::RecordLit { path, fields, spread }\n+                    let ellipsis = nfl.dotdot_token().is_some();\n+                    Expr::RecordLit { path, fields, spread, ellipsis, is_assignee_expr }\n                 } else {\n-                    Expr::RecordLit { path, fields: Box::default(), spread: None }\n+                    Expr::RecordLit {\n+                        path,\n+                        fields: Box::default(),\n+                        spread: None,\n+                        ellipsis: false,\n+                        is_assignee_expr,\n+                    }\n                 };\n \n                 self.alloc_expr(record_lit, syntax_ptr)\n@@ -458,14 +471,21 @@ impl ExprCollector<'_> {\n                 )\n             }\n             ast::Expr::BinExpr(e) => {\n+                let op = e.op_kind();\n+                if let Some(ast::BinaryOp::Assignment { op: None }) = op {\n+                    self.is_lowering_assignee_expr = true;\n+                }\n                 let lhs = self.collect_expr_opt(e.lhs());\n+                self.is_lowering_assignee_expr = false;\n                 let rhs = self.collect_expr_opt(e.rhs());\n-                let op = e.op_kind();\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n             ast::Expr::TupleExpr(e) => {\n                 let exprs = e.fields().map(|expr| self.collect_expr(expr)).collect();\n-                self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n+                self.alloc_expr(\n+                    Expr::Tuple { exprs, is_assignee_expr: self.is_lowering_assignee_expr },\n+                    syntax_ptr,\n+                )\n             }\n             ast::Expr::BoxExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n@@ -477,8 +497,14 @@ impl ExprCollector<'_> {\n \n                 match kind {\n                     ArrayExprKind::ElementList(e) => {\n-                        let exprs = e.map(|expr| self.collect_expr(expr)).collect();\n-                        self.alloc_expr(Expr::Array(Array::ElementList(exprs)), syntax_ptr)\n+                        let elements = e.map(|expr| self.collect_expr(expr)).collect();\n+                        self.alloc_expr(\n+                            Expr::Array(Array::ElementList {\n+                                elements,\n+                                is_assignee_expr: self.is_lowering_assignee_expr,\n+                            }),\n+                            syntax_ptr,\n+                        )\n                     }\n                     ArrayExprKind::Repeat { initializer, repeat } => {\n                         let initializer = self.collect_expr_opt(initializer);"}, {"sha": "35c8708955a77757b56635b9c28845e1c3916514", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     db::DefDatabase,\n     intern::Interned,\n     item_tree::{self, AssocItem, FnFlags, ItemTree, ItemTreeId, ModItem, Param, TreeId},\n-    nameres::{attr_resolution::ResolvedAttr, DefMap},\n+    nameres::{attr_resolution::ResolvedAttr, proc_macro::ProcMacroKind, DefMap},\n     type_ref::{TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocItemId, AstIdWithPath, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -348,7 +348,8 @@ impl MacroRulesData {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ProcMacroData {\n     pub name: Name,\n-    // FIXME: Record deriver helper here?\n+    /// Derive helpers, if this is a derive\n+    pub helpers: Option<Box<[Name]>>,\n }\n \n impl ProcMacroData {\n@@ -360,17 +361,23 @@ impl ProcMacroData {\n         let item_tree = loc.id.item_tree(db);\n         let makro = &item_tree[loc.id.value];\n \n-        let name = if let Some(def) = item_tree\n+        let (name, helpers) = if let Some(def) = item_tree\n             .attrs(db, loc.container.krate(), ModItem::from(loc.id.value).into())\n             .parse_proc_macro_decl(&makro.name)\n         {\n-            def.name\n+            (\n+                def.name,\n+                match def.kind {\n+                    ProcMacroKind::CustomDerive { helpers } => Some(helpers),\n+                    ProcMacroKind::FnLike | ProcMacroKind::Attr => None,\n+                },\n+            )\n         } else {\n             // eeeh...\n             stdx::never!(\"proc macro declaration is not a proc macro\");\n-            makro.name.clone()\n+            (makro.name.clone(), None)\n         };\n-        Arc::new(ProcMacroData { name })\n+        Arc::new(ProcMacroData { name, helpers })\n     }\n }\n "}, {"sha": "c1b3788acb7d36d97a53272df8228458b139270e", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -110,6 +110,7 @@ pub enum Expr {\n     Call {\n         callee: ExprId,\n         args: Box<[ExprId]>,\n+        is_assignee_expr: bool,\n     },\n     MethodCall {\n         receiver: ExprId,\n@@ -138,6 +139,8 @@ pub enum Expr {\n         path: Option<Box<Path>>,\n         fields: Box<[RecordLitField]>,\n         spread: Option<ExprId>,\n+        ellipsis: bool,\n+        is_assignee_expr: bool,\n     },\n     Field {\n         expr: ExprId,\n@@ -196,6 +199,7 @@ pub enum Expr {\n     },\n     Tuple {\n         exprs: Box<[ExprId]>,\n+        is_assignee_expr: bool,\n     },\n     Unsafe {\n         body: ExprId,\n@@ -211,7 +215,7 @@ pub enum Expr {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Array {\n-    ElementList(Box<[ExprId]>),\n+    ElementList { elements: Box<[ExprId]>, is_assignee_expr: bool },\n     Repeat { initializer: ExprId, repeat: ExprId },\n }\n \n@@ -285,7 +289,7 @@ impl Expr {\n                 f(*iterable);\n                 f(*body);\n             }\n-            Expr::Call { callee, args } => {\n+            Expr::Call { callee, args, .. } => {\n                 f(*callee);\n                 args.iter().copied().for_each(f);\n             }\n@@ -339,9 +343,9 @@ impl Expr {\n             | Expr::Box { expr } => {\n                 f(*expr);\n             }\n-            Expr::Tuple { exprs } => exprs.iter().copied().for_each(f),\n+            Expr::Tuple { exprs, .. } => exprs.iter().copied().for_each(f),\n             Expr::Array(a) => match a {\n-                Array::ElementList(exprs) => exprs.iter().copied().for_each(f),\n+                Array::ElementList { elements, .. } => elements.iter().copied().for_each(f),\n                 Array::Repeat { initializer, repeat } => {\n                     f(*initializer);\n                     f(*repeat)"}, {"sha": "579f803ea193ac94b3f4f998955e9cbf5a44ccc2", "filename": "crates/hir-def/src/item_scope.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -66,10 +66,14 @@ pub struct ItemScope {\n     attr_macros: FxHashMap<AstId<ast::Item>, MacroCallId>,\n     /// The derive macro invocations in this scope, keyed by the owner item over the actual derive attributes\n     /// paired with the derive macro invocations for the specific attribute.\n-    derive_macros: FxHashMap<\n-        AstId<ast::Adt>,\n-        SmallVec<[(AttrId, MacroCallId, SmallVec<[Option<MacroCallId>; 1]>); 1]>,\n-    >,\n+    derive_macros: FxHashMap<AstId<ast::Adt>, SmallVec<[DeriveMacroInvocation; 1]>>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct DeriveMacroInvocation {\n+    attr_id: AttrId,\n+    attr_call_id: MacroCallId,\n+    derive_call_ids: SmallVec<[Option<MacroCallId>; 1]>,\n }\n \n pub(crate) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {\n@@ -210,12 +214,14 @@ impl ItemScope {\n         &mut self,\n         adt: AstId<ast::Adt>,\n         call: MacroCallId,\n-        attr_id: AttrId,\n+        id: AttrId,\n         idx: usize,\n     ) {\n         if let Some(derives) = self.derive_macros.get_mut(&adt) {\n-            if let Some((.., invocs)) = derives.iter_mut().find(|&&mut (id, ..)| id == attr_id) {\n-                invocs[idx] = Some(call);\n+            if let Some(DeriveMacroInvocation { derive_call_ids, .. }) =\n+                derives.iter_mut().find(|&&mut DeriveMacroInvocation { attr_id, .. }| id == attr_id)\n+            {\n+                derive_call_ids[idx] = Some(call);\n             }\n         }\n     }\n@@ -227,10 +233,14 @@ impl ItemScope {\n         &mut self,\n         adt: AstId<ast::Adt>,\n         attr_id: AttrId,\n-        call_id: MacroCallId,\n+        attr_call_id: MacroCallId,\n         len: usize,\n     ) {\n-        self.derive_macros.entry(adt).or_default().push((attr_id, call_id, smallvec![None; len]));\n+        self.derive_macros.entry(adt).or_default().push(DeriveMacroInvocation {\n+            attr_id,\n+            attr_call_id,\n+            derive_call_ids: smallvec![None; len],\n+        });\n     }\n \n     pub(crate) fn derive_macro_invocs(\n@@ -242,7 +252,12 @@ impl ItemScope {\n         ),\n     > + '_ {\n         self.derive_macros.iter().map(|(k, v)| {\n-            (*k, v.iter().map(|&(attr_id, call_id, ref invocs)| (attr_id, call_id, &**invocs)))\n+            (\n+                *k,\n+                v.iter().map(|DeriveMacroInvocation { attr_id, attr_call_id, derive_call_ids }| {\n+                    (*attr_id, *attr_call_id, &**derive_call_ids)\n+                }),\n+            )\n         })\n     }\n "}, {"sha": "56603f4b154569f471e80fe6cfa807f4b13afab3", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -934,11 +934,11 @@ fn derive_macro_as_call_id(\n     derive_attr: AttrId,\n     derive_pos: u32,\n     krate: CrateId,\n-    resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n-) -> Result<MacroCallId, UnresolvedMacro> {\n-    let def: MacroDefId = resolver(item_attr.path.clone())\n+    resolver: impl Fn(path::ModPath) -> Option<(MacroId, MacroDefId)>,\n+) -> Result<(MacroId, MacroDefId, MacroCallId), UnresolvedMacro> {\n+    let (macro_id, def_id) = resolver(item_attr.path.clone())\n         .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n-    let res = def.as_lazy_macro(\n+    let call_id = def_id.as_lazy_macro(\n         db.upcast(),\n         krate,\n         MacroCallKind::Derive {\n@@ -947,7 +947,7 @@ fn derive_macro_as_call_id(\n             derive_attr_index: derive_attr.ast_index,\n         },\n     );\n-    Ok(res)\n+    Ok((macro_id, def_id, call_id))\n }\n \n fn attr_macro_as_call_id("}, {"sha": "6eb530ecc54209d5e2f37ea98a8012c09ac3e87a", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -48,19 +48,19 @@\n //! the result\n \n pub mod attr_resolution;\n-mod collector;\n+pub mod proc_macro;\n pub mod diagnostics;\n+mod collector;\n mod mod_resolution;\n mod path_resolution;\n-mod proc_macro;\n \n #[cfg(test)]\n mod tests;\n \n-use std::{cmp::Ord, sync::Arc};\n+use std::{cmp::Ord, ops::Deref, sync::Arc};\n \n use base_db::{CrateId, Edition, FileId};\n-use hir_expand::{name::Name, InFile, MacroDefId};\n+use hir_expand::{name::Name, InFile, MacroCallId, MacroDefId};\n use itertools::Itertools;\n use la_arena::Arena;\n use profile::Count;\n@@ -76,7 +76,7 @@ use crate::{\n     path::ModPath,\n     per_ns::PerNs,\n     visibility::Visibility,\n-    AstId, BlockId, BlockLoc, FunctionId, LocalModuleId, ModuleId, ProcMacroId,\n+    AstId, BlockId, BlockLoc, FunctionId, LocalModuleId, MacroId, ModuleId, ProcMacroId,\n };\n \n /// Contains the results of (early) name resolution.\n@@ -106,6 +106,9 @@ pub struct DefMap {\n     fn_proc_macro_mapping: FxHashMap<FunctionId, ProcMacroId>,\n     /// The error that occurred when failing to load the proc-macro dll.\n     proc_macro_loading_error: Option<Box<str>>,\n+    /// Tracks which custom derives are in scope for an item, to allow resolution of derive helper\n+    /// attributes.\n+    derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<(Name, MacroId, MacroCallId)>>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -275,6 +278,7 @@ impl DefMap {\n             exported_derives: FxHashMap::default(),\n             fn_proc_macro_mapping: FxHashMap::default(),\n             proc_macro_loading_error: None,\n+            derive_helpers_in_scope: FxHashMap::default(),\n             prelude: None,\n             root,\n             modules,\n@@ -294,19 +298,30 @@ impl DefMap {\n     pub fn modules(&self) -> impl Iterator<Item = (LocalModuleId, &ModuleData)> + '_ {\n         self.modules.iter()\n     }\n+\n+    pub fn derive_helpers_in_scope(\n+        &self,\n+        id: AstId<ast::Adt>,\n+    ) -> Option<&[(Name, MacroId, MacroCallId)]> {\n+        self.derive_helpers_in_scope.get(&id.map(|it| it.upcast())).map(Deref::deref)\n+    }\n+\n     pub fn registered_tools(&self) -> &[SmolStr] {\n         &self.registered_tools\n     }\n+\n     pub fn registered_attrs(&self) -> &[SmolStr] {\n         &self.registered_attrs\n     }\n+\n     pub fn root(&self) -> LocalModuleId {\n         self.root\n     }\n \n     pub fn fn_as_proc_macro(&self, id: FunctionId) -> Option<ProcMacroId> {\n         self.fn_proc_macro_mapping.get(&id).copied()\n     }\n+\n     pub fn proc_macro_loading_error(&self) -> Option<&str> {\n         self.proc_macro_loading_error.as_deref()\n     }\n@@ -463,6 +478,7 @@ impl DefMap {\n             registered_attrs,\n             registered_tools,\n             fn_proc_macro_mapping,\n+            derive_helpers_in_scope,\n             proc_macro_loading_error: _,\n             block: _,\n             edition: _,\n@@ -479,6 +495,7 @@ impl DefMap {\n         registered_attrs.shrink_to_fit();\n         registered_tools.shrink_to_fit();\n         fn_proc_macro_mapping.shrink_to_fit();\n+        derive_helpers_in_scope.shrink_to_fit();\n         for (_, module) in modules.iter_mut() {\n             module.children.shrink_to_fit();\n             module.scope.shrink_to_fit();"}, {"sha": "f394c541719f323a42f20bc7765b6a300de8b900", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -18,7 +18,7 @@ use hir_expand::{\n     ExpandTo, HirFileId, InFile, MacroCallId, MacroCallKind, MacroCallLoc, MacroDefId,\n     MacroDefKind,\n };\n-use itertools::Itertools;\n+use itertools::{izip, Itertools};\n use la_arena::Idx;\n use limit::Limit;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -110,7 +110,6 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         proc_macros,\n         from_glob_import: Default::default(),\n         skip_attrs: Default::default(),\n-        derive_helpers_in_scope: Default::default(),\n         is_proc_macro,\n     };\n     if tree_id.is_block() {\n@@ -258,9 +257,6 @@ struct DefCollector<'a> {\n     /// This also stores the attributes to skip when we resolve derive helpers and non-macro\n     /// non-builtin attributes in general.\n     skip_attrs: FxHashMap<InFile<ModItem>, AttrId>,\n-    /// Tracks which custom derives are in scope for an item, to allow resolution of derive helper\n-    /// attributes.\n-    derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<Name>>,\n }\n \n impl DefCollector<'_> {\n@@ -1059,16 +1055,20 @@ impl DefCollector<'_> {\n         };\n         let mut res = ReachedFixedPoint::Yes;\n         macros.retain(|directive| {\n-            let resolver = |path| {\n+            let resolver2 = |path| {\n                 let resolved_res = self.def_map.resolve_path_fp_with_macro(\n                     self.db,\n                     ResolveMode::Other,\n                     directive.module_id,\n                     &path,\n                     BuiltinShadowMode::Module,\n                 );\n-                resolved_res.resolved_def.take_macros().map(|it| macro_id_to_def_id(self.db, it))\n+                resolved_res\n+                    .resolved_def\n+                    .take_macros()\n+                    .map(|it| (it, macro_id_to_def_id(self.db, it)))\n             };\n+            let resolver = |path| resolver2(path).map(|(_, it)| it);\n \n             match &directive.kind {\n                 MacroDirectiveKind::FnLike { ast_id, expand_to } => {\n@@ -1087,21 +1087,37 @@ impl DefCollector<'_> {\n                     }\n                 }\n                 MacroDirectiveKind::Derive { ast_id, derive_attr, derive_pos } => {\n-                    let call_id = derive_macro_as_call_id(\n+                    let id = derive_macro_as_call_id(\n                         self.db,\n                         ast_id,\n                         *derive_attr,\n                         *derive_pos as u32,\n                         self.def_map.krate,\n-                        &resolver,\n+                        &resolver2,\n                     );\n-                    if let Ok(call_id) = call_id {\n+\n+                    if let Ok((macro_id, def_id, call_id)) = id {\n                         self.def_map.modules[directive.module_id].scope.set_derive_macro_invoc(\n                             ast_id.ast_id,\n                             call_id,\n                             *derive_attr,\n                             *derive_pos,\n                         );\n+                        // Record its helper attributes.\n+                        if def_id.krate != self.def_map.krate {\n+                            let def_map = self.db.crate_def_map(def_id.krate);\n+                            if let Some(helpers) = def_map.exported_derives.get(&def_id) {\n+                                self.def_map\n+                                    .derive_helpers_in_scope\n+                                    .entry(ast_id.ast_id.map(|it| it.upcast()))\n+                                    .or_default()\n+                                    .extend(izip!(\n+                                        helpers.iter().cloned(),\n+                                        iter::repeat(macro_id),\n+                                        iter::repeat(call_id),\n+                                    ));\n+                            }\n+                        }\n \n                         push_resolved(directive, call_id);\n                         res = ReachedFixedPoint::No;\n@@ -1132,8 +1148,8 @@ impl DefCollector<'_> {\n                     };\n \n                     if let Some(ident) = path.as_ident() {\n-                        if let Some(helpers) = self.derive_helpers_in_scope.get(&ast_id) {\n-                            if helpers.contains(ident) {\n+                        if let Some(helpers) = self.def_map.derive_helpers_in_scope.get(&ast_id) {\n+                            if helpers.iter().any(|(it, ..)| it == ident) {\n                                 cov_mark::hit!(resolved_derive_helper);\n                                 // Resolved to derive helper. Collect the item's attributes again,\n                                 // starting after the derive helper.\n@@ -1148,7 +1164,7 @@ impl DefCollector<'_> {\n                     };\n                     if matches!(\n                         def,\n-                        MacroDefId {  kind:MacroDefKind::BuiltInAttr(expander, _),.. }\n+                        MacroDefId { kind:MacroDefKind::BuiltInAttr(expander, _),.. }\n                         if expander.is_derive()\n                     ) {\n                         // Resolved to `#[derive]`\n@@ -1317,19 +1333,6 @@ impl DefCollector<'_> {\n             self.def_map.diagnostics.push(diag);\n         }\n \n-        // If we've just resolved a derive, record its helper attributes.\n-        if let MacroCallKind::Derive { ast_id, .. } = &loc.kind {\n-            if loc.def.krate != self.def_map.krate {\n-                let def_map = self.db.crate_def_map(loc.def.krate);\n-                if let Some(helpers) = def_map.exported_derives.get(&loc.def) {\n-                    self.derive_helpers_in_scope\n-                        .entry(ast_id.map(|it| it.upcast()))\n-                        .or_default()\n-                        .extend(helpers.iter().cloned());\n-                }\n-            }\n-        }\n-\n         // Then, fetch and process the item tree. This will reuse the expansion result from above.\n         let item_tree = self.db.file_item_tree(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();\n@@ -2140,7 +2143,6 @@ mod tests {\n             proc_macros: Default::default(),\n             from_glob_import: Default::default(),\n             skip_attrs: Default::default(),\n-            derive_helpers_in_scope: Default::default(),\n             is_proc_macro: false,\n         };\n         collector.seed_with_top_level();"}, {"sha": "3163fa0f93fa573c0e2215f2ccaf5f1627340b38", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -149,6 +149,7 @@ impl Resolver {\n         self.resolve_module_path(db, path, BuiltinShadowMode::Module)\n     }\n \n+    // FIXME: This shouldn't exist\n     pub fn resolve_module_path_in_trait_assoc_items(\n         &self,\n         db: &dyn DefDatabase,\n@@ -448,10 +449,14 @@ impl Resolver {\n     }\n \n     pub fn krate(&self) -> CrateId {\n+        self.def_map().krate()\n+    }\n+\n+    pub fn def_map(&self) -> &DefMap {\n         self.scopes\n             .get(0)\n             .and_then(|scope| match scope {\n-                Scope::ModuleScope(m) => Some(m.def_map.krate()),\n+                Scope::ModuleScope(m) => Some(&m.def_map),\n                 _ => None,\n             })\n             .expect(\"module scope invariant violated\")"}, {"sha": "642e03edd230636ca3911a0e0eee44dc8989a41e", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -305,7 +305,10 @@ pub fn record_literal_missing_fields(\n     expr: &Expr,\n ) -> Option<(VariantId, Vec<LocalFieldId>, /*exhaustive*/ bool)> {\n     let (fields, exhaustive) = match expr {\n-        Expr::RecordLit { path: _, fields, spread } => (fields, spread.is_none()),\n+        Expr::RecordLit { fields, spread, ellipsis, is_assignee_expr, .. } => {\n+            let exhaustive = if *is_assignee_expr { !*ellipsis } else { spread.is_none() };\n+            (fields, exhaustive)\n+        }\n         _ => return None,\n     };\n "}, {"sha": "d164e64a8be0780a0d9b5d54008b648e46b89c18", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -276,7 +276,7 @@ impl<'a> InferenceContext<'a> {\n \n                 closure_ty\n             }\n-            Expr::Call { callee, args } => {\n+            Expr::Call { callee, args, .. } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let mut derefs = Autoderef::new(&mut self.table, callee_ty.clone());\n                 let mut res = None;\n@@ -421,7 +421,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 TyKind::Never.intern(Interner)\n             }\n-            Expr::RecordLit { path, fields, spread } => {\n+            Expr::RecordLit { path, fields, spread, .. } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_deref(), false);\n                 if let Some(variant) = def_id {\n                     self.write_variant_resolution(tgt_expr.into(), variant);\n@@ -693,7 +693,7 @@ impl<'a> InferenceContext<'a> {\n                     self.err_ty()\n                 }\n             }\n-            Expr::Tuple { exprs } => {\n+            Expr::Tuple { exprs, .. } => {\n                 let mut tys = match expected\n                     .only_has_type(&mut self.table)\n                     .as_ref()\n@@ -724,12 +724,12 @@ impl<'a> InferenceContext<'a> {\n \n                 let expected = Expectation::has_type(elem_ty.clone());\n                 let len = match array {\n-                    Array::ElementList(items) => {\n-                        for &expr in items.iter() {\n+                    Array::ElementList { elements, .. } => {\n+                        for &expr in elements.iter() {\n                             let cur_elem_ty = self.infer_expr_inner(expr, &expected);\n                             coerce.coerce(self, Some(expr), &cur_elem_ty);\n                         }\n-                        consteval::usize_const(Some(items.len() as u128))\n+                        consteval::usize_const(Some(elements.len() as u128))\n                     }\n                     &Array::Repeat { initializer, repeat } => {\n                         self.infer_expr_coerce(initializer, &Expectation::has_type(elem_ty));\n@@ -850,15 +850,15 @@ impl<'a> InferenceContext<'a> {\n         let rhs_ty = self.resolve_ty_shallow(rhs_ty);\n \n         let ty = match &self.body[lhs] {\n-            Expr::Tuple { exprs } => {\n+            Expr::Tuple { exprs, .. } => {\n                 // We don't consider multiple ellipses. This is analogous to\n                 // `hir_def::body::lower::ExprCollector::collect_tuple_pat()`.\n                 let ellipsis = exprs.iter().position(|e| is_rest_expr(*e));\n                 let exprs: Vec<_> = exprs.iter().filter(|e| !is_rest_expr(**e)).copied().collect();\n \n                 self.infer_tuple_pat_like(&rhs_ty, (), ellipsis, &exprs)\n             }\n-            Expr::Call { callee, args } => {\n+            Expr::Call { callee, args, .. } => {\n                 // Tuple structs\n                 let path = match &self.body[*callee] {\n                     Expr::Path(path) => Some(path),\n@@ -872,7 +872,7 @@ impl<'a> InferenceContext<'a> {\n \n                 self.infer_tuple_struct_pat_like(path, &rhs_ty, (), lhs, ellipsis, &args)\n             }\n-            Expr::Array(Array::ElementList(elements)) => {\n+            Expr::Array(Array::ElementList { elements, .. }) => {\n                 let elem_ty = match rhs_ty.kind(Interner) {\n                     TyKind::Array(st, _) => st.clone(),\n                     _ => self.err_ty(),"}, {"sha": "d4925455d7bd2dcf4c7d90df5a0d2d6bfb41e9bc", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -2252,6 +2252,32 @@ impl Local {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct DeriveHelper {\n+    pub(crate) derive: MacroId,\n+    pub(crate) idx: usize,\n+}\n+\n+impl DeriveHelper {\n+    pub fn derive(&self) -> Macro {\n+        Macro { id: self.derive.into() }\n+    }\n+\n+    pub fn name(&self, db: &dyn HirDatabase) -> Name {\n+        match self.derive {\n+            MacroId::Macro2Id(_) => None,\n+            MacroId::MacroRulesId(_) => None,\n+            MacroId::ProcMacroId(proc_macro) => db\n+                .proc_macro_data(proc_macro)\n+                .helpers\n+                .as_ref()\n+                .and_then(|it| it.get(self.idx))\n+                .cloned(),\n+        }\n+        .unwrap_or_else(|| Name::missing())\n+    }\n+}\n+\n // FIXME: Wrong name? This is could also be a registered attribute\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct BuiltinAttr {"}, {"sha": "fc8f23f19ab9112839303e2f33c022e056567891", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 87, "deletions": 51, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -29,9 +29,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, BindingMode, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n-    HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef, Name, Path,\n-    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, BindingMode, BuiltinAttr, Callable, ConstParam, Crate, DeriveHelper, Field, Function,\n+    HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef,\n+    Name, Path, ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -47,6 +47,7 @@ pub enum PathResolution {\n     SelfType(Impl),\n     BuiltinAttr(BuiltinAttr),\n     ToolModule(ToolModule),\n+    DeriveHelper(DeriveHelper),\n }\n \n impl PathResolution {\n@@ -71,6 +72,7 @@ impl PathResolution {\n             PathResolution::BuiltinAttr(_)\n             | PathResolution::ToolModule(_)\n             | PathResolution::Local(_)\n+            | PathResolution::DeriveHelper(_)\n             | PathResolution::ConstParam(_) => None,\n             PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n@@ -733,6 +735,8 @@ impl<'db> SemanticsImpl<'db> {\n             Some(it) => it,\n             None => return,\n         };\n+        let def_map = sa.resolver.def_map();\n+\n         let mut stack: SmallVec<[_; 4]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n         let mut mcache = self.macro_call_cache.borrow_mut();\n@@ -764,7 +768,7 @@ impl<'db> SemanticsImpl<'db> {\n         while let Some(token) = stack.pop() {\n             self.db.unwind_if_cancelled();\n             let was_not_remapped = (|| {\n-                // are we inside an attribute macro call\n+                // First expand into attribute invocations\n                 let containing_attribute_macro_call = self.with_ctx(|ctx| {\n                     token.value.parent_ancestors().filter_map(ast::Item::cast).find_map(|item| {\n                         if item.attrs().next().is_none() {\n@@ -784,67 +788,99 @@ impl<'db> SemanticsImpl<'db> {\n                     );\n                 }\n \n-                // or are we inside a function-like macro call\n-                if let Some(tt) =\n-                    // FIXME replace map.while_some with take_while once stable\n-                    token\n-                        .value\n-                        .parent_ancestors()\n-                        .map(ast::TokenTree::cast)\n-                        .while_some()\n-                        .last()\n-                {\n-                    let parent = tt.syntax().parent()?;\n-                    // check for derive attribute here\n-                    let macro_call = match_ast! {\n-                        match parent {\n-                            ast::MacroCall(mcall) => mcall,\n-                            // attribute we failed expansion for earlier, this might be a derive invocation\n+                // Then check for token trees, that means we are either in a function-like macro or\n+                // secondary attribute inputs\n+                let tt = token.value.parent_ancestors().map_while(ast::TokenTree::cast).last()?;\n+                let parent = tt.syntax().parent()?;\n+\n+                if tt.left_delimiter_token().map_or(false, |it| it == token.value) {\n+                    return None;\n+                }\n+                if tt.right_delimiter_token().map_or(false, |it| it == token.value) {\n+                    return None;\n+                }\n+\n+                if let Some(macro_call) = ast::MacroCall::cast(parent.clone()) {\n+                    let mcall = token.with_value(macro_call);\n+                    let file_id = match mcache.get(&mcall) {\n+                        Some(&it) => it,\n+                        None => {\n+                            let it = sa.expand(self.db, mcall.as_ref())?;\n+                            mcache.insert(mcall, it);\n+                            it\n+                        }\n+                    };\n+                    process_expansion_for_token(&mut stack, file_id, None, token.as_ref())\n+                } else if let Some(meta) = ast::Meta::cast(parent.clone()) {\n+                    // attribute we failed expansion for earlier, this might be a derive invocation\n+                    // or derive helper attribute\n+                    let attr = meta.parent_attr()?;\n+\n+                    let adt = if let Some(adt) = attr.syntax().parent().and_then(ast::Adt::cast) {\n+                        // this might be a derive, or a derive helper on an ADT\n+                        let derive_call = self.with_ctx(|ctx| {\n                             // so try downmapping the token into the pseudo derive expansion\n                             // see [hir_expand::builtin_attr_macro] for how the pseudo derive expansion works\n-                            ast::Meta(meta) => {\n-                                let attr = meta.parent_attr()?;\n-                                let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n-                                let call_id = self.with_ctx(|ctx| {\n-                                    let (_, call_id, _) = ctx.attr_to_derive_macro_call(\n-                                        token.with_value(&adt),\n-                                        token.with_value(attr),\n-                                    )?;\n-                                    Some(call_id)\n-                                })?;\n+                            ctx.attr_to_derive_macro_call(\n+                                token.with_value(&adt),\n+                                token.with_value(attr.clone()),\n+                            )\n+                            .map(|(_, call_id, _)| call_id)\n+                        });\n+\n+                        match derive_call {\n+                            Some(call_id) => {\n+                                // resolved to a derive\n                                 let file_id = call_id.as_file();\n                                 return process_expansion_for_token(\n                                     &mut stack,\n                                     file_id,\n                                     Some(adt.into()),\n                                     token.as_ref(),\n                                 );\n-                            },\n-                            _ => return None,\n+                            }\n+                            None => Some(adt),\n                         }\n-                    };\n-\n-                    if tt.left_delimiter_token().map_or(false, |it| it == token.value) {\n+                    } else {\n+                        // Otherwise this could be a derive helper on a variant or field\n+                        if let Some(field) = attr.syntax().parent().and_then(ast::RecordField::cast)\n+                        {\n+                            field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                        } else if let Some(field) =\n+                            attr.syntax().parent().and_then(ast::TupleField::cast)\n+                        {\n+                            field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                        } else if let Some(variant) =\n+                            attr.syntax().parent().and_then(ast::Variant::cast)\n+                        {\n+                            variant.syntax().ancestors().nth(2).and_then(ast::Adt::cast)\n+                        } else {\n+                            None\n+                        }\n+                    }?;\n+                    if !self.with_ctx(|ctx| ctx.has_derives(InFile::new(token.file_id, &adt))) {\n                         return None;\n                     }\n-                    if tt.right_delimiter_token().map_or(false, |it| it == token.value) {\n-                        return None;\n+                    // Not an attribute, nor a derive, so it's either a builtin or a derive helper\n+                    // Try to resolve to a derive helper and downmap\n+                    let attr_name = attr.path().and_then(|it| it.as_single_name_ref())?.as_name();\n+                    let id = self.db.ast_id_map(token.file_id).ast_id(&adt);\n+                    let helpers =\n+                        def_map.derive_helpers_in_scope(InFile::new(token.file_id, id))?;\n+                    let item = Some(adt.into());\n+                    let mut res = None;\n+                    for (.., derive) in helpers.iter().filter(|(helper, ..)| *helper == attr_name) {\n+                        res = res.or(process_expansion_for_token(\n+                            &mut stack,\n+                            derive.as_file(),\n+                            item.clone(),\n+                            token.as_ref(),\n+                        ));\n                     }\n-\n-                    let mcall = token.with_value(macro_call);\n-                    let file_id = match mcache.get(&mcall) {\n-                        Some(&it) => it,\n-                        None => {\n-                            let it = sa.expand(self.db, mcall.as_ref())?;\n-                            mcache.insert(mcall, it);\n-                            it\n-                        }\n-                    };\n-                    return process_expansion_for_token(&mut stack, file_id, None, token.as_ref());\n+                    res\n+                } else {\n+                    None\n                 }\n-\n-                // outside of a macro invocation so this is a \"final\" token\n-                None\n             })()\n             .is_none();\n "}, {"sha": "ba9a1cfb6b51c5cdb0a27a27c4a1901d42927a13", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -247,6 +247,7 @@ impl SourceToDefCtx<'_, '_> {\n         map[keys::ATTR_MACRO_CALL].get(&src.value).copied()\n     }\n \n+    /// (AttrId, derive attribute call id, derive call ids)\n     pub(super) fn attr_to_derive_macro_call(\n         &mut self,\n         item: InFile<&ast::Adt>,\n@@ -257,6 +258,7 @@ impl SourceToDefCtx<'_, '_> {\n             .get(&src.value)\n             .map(|&(attr_id, call_id, ref ids)| (attr_id, call_id, &**ids))\n     }\n+\n     pub(super) fn has_derives(&mut self, adt: InFile<&ast::Adt>) -> bool {\n         self.dyn_map(adt).as_ref().map_or(false, |map| !map[keys::DERIVE_MACRO_CALL].is_empty())\n     }"}, {"sha": "1eb51b20c356b602efa8057b9b09a4447a2f9e93", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -35,6 +35,7 @@ use hir_ty::{\n     method_resolution, Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution,\n     TyExt, TyKind, TyLoweringContext,\n };\n+use itertools::Itertools;\n use smallvec::SmallVec;\n use syntax::{\n     ast::{self, AstNode},\n@@ -43,8 +44,8 @@ use syntax::{\n \n use crate::{\n     db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BindingMode, BuiltinAttr,\n-    BuiltinType, Callable, Const, Field, Function, Local, Macro, ModuleDef, Static, Struct,\n-    ToolModule, Trait, Type, TypeAlias, Variant,\n+    BuiltinType, Callable, Const, DeriveHelper, Field, Function, Local, Macro, ModuleDef, Static,\n+    Struct, ToolModule, Trait, Type, TypeAlias, Variant,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -429,36 +430,78 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        let is_path_of_attr = path\n+        let meta_path = path\n             .syntax()\n             .ancestors()\n-            .map(|it| it.kind())\n-            .take_while(|&kind| ast::Path::can_cast(kind) || ast::Meta::can_cast(kind))\n+            .take_while(|it| {\n+                let kind = it.kind();\n+                ast::Path::can_cast(kind) || ast::Meta::can_cast(kind)\n+            })\n             .last()\n-            .map_or(false, ast::Meta::can_cast);\n+            .and_then(ast::Meta::cast);\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we are\n         // trying to resolve foo::bar.\n         if path.parent_path().is_some() {\n             return match resolve_hir_path_qualifier(db, &self.resolver, &hir_path) {\n-                None if is_path_of_attr => {\n+                None if meta_path.is_some() => {\n                     path.first_segment().and_then(|it| it.name_ref()).and_then(|name_ref| {\n                         ToolModule::by_name(db, self.resolver.krate().into(), &name_ref.text())\n                             .map(PathResolution::ToolModule)\n                     })\n                 }\n                 res => res,\n             };\n-        } else if is_path_of_attr {\n+        } else if let Some(meta_path) = meta_path {\n             // Case where we are resolving the final path segment of a path in an attribute\n             // in this case we have to check for inert/builtin attributes and tools and prioritize\n             // resolution of attributes over other namespaces\n-            let name_ref = path.as_single_name_ref();\n-            let builtin = name_ref.as_ref().and_then(|name_ref| {\n-                BuiltinAttr::by_name(db, self.resolver.krate().into(), &name_ref.text())\n-            });\n-            if let Some(_) = builtin {\n-                return builtin.map(PathResolution::BuiltinAttr);\n+            if let Some(name_ref) = path.as_single_name_ref() {\n+                let builtin =\n+                    BuiltinAttr::by_name(db, self.resolver.krate().into(), &name_ref.text());\n+                if let Some(_) = builtin {\n+                    return builtin.map(PathResolution::BuiltinAttr);\n+                }\n+\n+                if let Some(attr) = meta_path.parent_attr() {\n+                    let adt = if let Some(field) =\n+                        attr.syntax().parent().and_then(ast::RecordField::cast)\n+                    {\n+                        field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                    } else if let Some(field) =\n+                        attr.syntax().parent().and_then(ast::TupleField::cast)\n+                    {\n+                        field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                    } else if let Some(variant) =\n+                        attr.syntax().parent().and_then(ast::Variant::cast)\n+                    {\n+                        variant.syntax().ancestors().nth(2).and_then(ast::Adt::cast)\n+                    } else {\n+                        None\n+                    };\n+                    if let Some(adt) = adt {\n+                        let ast_id = db.ast_id_map(self.file_id).ast_id(&adt);\n+                        if let Some(helpers) = self\n+                            .resolver\n+                            .def_map()\n+                            .derive_helpers_in_scope(InFile::new(self.file_id, ast_id))\n+                        {\n+                            // FIXME: Multiple derives can have the same helper\n+                            let name_ref = name_ref.as_name();\n+                            for (macro_id, mut helpers) in\n+                                helpers.iter().group_by(|(_, macro_id, ..)| macro_id).into_iter()\n+                            {\n+                                if let Some(idx) = helpers.position(|(name, ..)| *name == name_ref)\n+                                {\n+                                    return Some(PathResolution::DeriveHelper(DeriveHelper {\n+                                        derive: *macro_id,\n+                                        idx,\n+                                    }));\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n             }\n             return match resolve_hir_path_as_macro(db, &self.resolver, &hir_path) {\n                 Some(m) => Some(PathResolution::Def(ModuleDef::Macro(m))),"}, {"sha": "c808c010c672eac67d9d397eaf20fa5332d7fee7", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -145,13 +145,16 @@ fn add_missing_impl_members_inner(\n             Some(cap) => {\n                 let mut cursor = Cursor::Before(first_new_item.syntax());\n                 let placeholder;\n-                if let ast::AssocItem::Fn(func) = &first_new_item {\n-                    if try_gen_trait_body(ctx, func, &trait_, &impl_def).is_none() {\n-                        if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast)\n-                        {\n-                            if m.syntax().text() == \"todo!()\" {\n-                                placeholder = m;\n-                                cursor = Cursor::Replace(placeholder.syntax());\n+                if let DefaultMethods::No = mode {\n+                    if let ast::AssocItem::Fn(func) = &first_new_item {\n+                        if try_gen_trait_body(ctx, func, &trait_, &impl_def).is_none() {\n+                            if let Some(m) =\n+                                func.syntax().descendants().find_map(ast::MacroCall::cast)\n+                            {\n+                                if m.syntax().text() == \"todo!()\" {\n+                                    placeholder = m;\n+                                    cursor = Cursor::Replace(placeholder.syntax());\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "7a0c912959a12c53b9b909225accc56e866d3ca5", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n     ted,\n };\n \n-/// Generate custom trait bodies where possible.\n+/// Generate custom trait bodies without default implementation where possible.\n ///\n /// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n /// `None` means that generating a custom trait body failed, and the body will remain\n@@ -28,6 +28,7 @@ pub(crate) fn gen_trait_fn_body(\n \n /// Generate a `Clone` impl based on the fields and members of the target type.\n fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"clone\"));\n     fn gen_clone_call(target: ast::Expr) -> ast::Expr {\n         let method = make::name_ref(\"clone\");\n         make::expr_method_call(target, method, make::arg_list(None))\n@@ -339,6 +340,7 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `Hash` impl based on the fields and members of the target type.\n fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"hash\"));\n     fn gen_hash_call(target: ast::Expr) -> ast::Stmt {\n         let method = make::name_ref(\"hash\");\n         let arg = make::expr_path(make::ext::ident_path(\"state\"));\n@@ -394,9 +396,7 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `PartialEq` impl based on the fields and members of the target type.\n fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    if func.name().map_or(false, |name| name.text() == \"ne\") {\n-        return None;\n-    }\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"eq\"));\n     fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n         match expr {\n             Some(expr) => Some(make::expr_bin_op(expr, BinaryOp::LogicOp(LogicOp::And), cmp)),\n@@ -573,6 +573,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"partial_cmp\"));\n     fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n         let mut arms = vec![];\n \n@@ -643,7 +644,7 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                 make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n             }\n \n-            // No fields in the body means there's nothing to hash.\n+            // No fields in the body means there's nothing to compare.\n             None => {\n                 let expr = make::expr_literal(\"true\").into();\n                 make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))"}, {"sha": "27c3ccb35a1eaf263eb8610fce1ccfe1fc8bd5ab", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -292,6 +292,7 @@ impl CompletionItemKind {\n                 SymbolKind::Const => \"ct\",\n                 SymbolKind::ConstParam => \"cp\",\n                 SymbolKind::Derive => \"de\",\n+                SymbolKind::DeriveHelper => \"dh\",\n                 SymbolKind::Enum => \"en\",\n                 SymbolKind::Field => \"fd\",\n                 SymbolKind::Function => \"fn\","}, {"sha": "9b25964a6086e704e0c4ca5ef5676cf1f985127c", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn render_field(\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n-        receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name).into()),\n+        field_with_receiver(receiver.as_ref(), &name),\n     );\n     item.set_relevance(CompletionRelevance {\n         type_match: compute_type_match(ctx.completion, ty),\n@@ -132,7 +132,7 @@ pub(crate) fn render_field(\n         .set_documentation(field.docs(ctx.db()))\n         .set_deprecated(is_deprecated)\n         .lookup_by(name.clone());\n-    item.insert_text(escaped_name);\n+    item.insert_text(field_with_receiver(receiver.as_ref(), &escaped_name));\n     if let Some(receiver) = &dot_access.receiver {\n         if let Some(original) = ctx.completion.sema.original_ast_node(receiver.clone()) {\n             if let Some(ref_match) = compute_ref_match(ctx.completion, ty) {\n@@ -143,6 +143,11 @@ pub(crate) fn render_field(\n     item.build()\n }\n \n+fn field_with_receiver(receiver: Option<&hir::Name>, field_name: &str) -> SmolStr {\n+    receiver\n+        .map_or_else(|| field_name.into(), |receiver| format!(\"{}.{}\", receiver, field_name).into())\n+}\n+\n pub(crate) fn render_tuple_field(\n     ctx: RenderContext<'_>,\n     receiver: Option<hir::Name>,\n@@ -152,7 +157,7 @@ pub(crate) fn render_tuple_field(\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n-        receiver.map_or_else(|| field.to_string(), |receiver| format!(\"{}.{}\", receiver, field)),\n+        field_with_receiver(receiver.as_ref(), &field.to_string()),\n     );\n     item.detail(ty.display(ctx.db()).to_string()).lookup_by(field.to_string());\n     item.build()\n@@ -1873,6 +1878,35 @@ impl r#trait for r#struct { type t$0 }\n struct r#struct {}\n trait r#trait { type r#type; }\n impl r#trait for r#struct { type r#type = $0; }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn field_access_includes_self() {\n+        check_edit(\n+            \"length\",\n+            r#\"\n+struct S {\n+    length: i32\n+}\n+\n+impl S {\n+    fn some_fn(&self) {\n+        let l = len$0\n+    }\n+}\n+\"#,\n+            r#\"\n+struct S {\n+    length: i32\n+}\n+\n+impl S {\n+    fn some_fn(&self) {\n+        let l = self.length\n+    }\n+}\n \"#,\n         )\n     }"}, {"sha": "aeaca00ec65cc3aeb053cf2731ddfd26e877fccf", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -7,9 +7,9 @@\n \n use arrayvec::ArrayVec;\n use hir::{\n-    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Crate, Field, Function,\n-    GenericParam, HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef, Name,\n-    PathResolution, Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n+    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Crate, DeriveHelper, Field,\n+    Function, GenericParam, HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef,\n+    Name, PathResolution, Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n };\n use stdx::impl_from;\n use syntax::{\n@@ -37,6 +37,7 @@ pub enum Definition {\n     Local(Local),\n     GenericParam(GenericParam),\n     Label(Label),\n+    DeriveHelper(DeriveHelper),\n     BuiltinAttr(BuiltinAttr),\n     ToolModule(ToolModule),\n }\n@@ -69,6 +70,7 @@ impl Definition {\n             Definition::Local(it) => it.module(db),\n             Definition::GenericParam(it) => it.module(db),\n             Definition::Label(it) => it.module(db),\n+            Definition::DeriveHelper(it) => it.derive().module(db),\n             Definition::BuiltinAttr(_) | Definition::BuiltinType(_) | Definition::ToolModule(_) => {\n                 return None\n             }\n@@ -94,7 +96,8 @@ impl Definition {\n             | Definition::SelfType(_)\n             | Definition::Local(_)\n             | Definition::GenericParam(_)\n-            | Definition::Label(_) => return None,\n+            | Definition::Label(_)\n+            | Definition::DeriveHelper(_) => return None,\n         };\n         Some(vis)\n     }\n@@ -118,6 +121,7 @@ impl Definition {\n             Definition::Label(it) => it.name(db),\n             Definition::BuiltinAttr(_) => return None, // FIXME\n             Definition::ToolModule(_) => return None,  // FIXME\n+            Definition::DeriveHelper(it) => it.name(db),\n         };\n         Some(name)\n     }\n@@ -500,6 +504,7 @@ impl From<PathResolution> for Definition {\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n             PathResolution::BuiltinAttr(attr) => Definition::BuiltinAttr(attr),\n             PathResolution::ToolModule(tool) => Definition::ToolModule(tool),\n+            PathResolution::DeriveHelper(helper) => Definition::DeriveHelper(helper),\n         }\n     }\n }"}, {"sha": "966bba616f6277aa3a97d9dbbec808927fce05b8", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -173,6 +173,7 @@ pub enum SymbolKind {\n     Const,\n     ConstParam,\n     Derive,\n+    DeriveHelper,\n     Enum,\n     Field,\n     Function,"}, {"sha": "40af9e6fe2ad80f04042810ab5bc500548bc60b4", "filename": "crates/ide-db/src/path_transform.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fpath_transform.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -224,7 +224,8 @@ impl<'a> Ctx<'a> {\n             | hir::PathResolution::SelfType(_)\n             | hir::PathResolution::Def(_)\n             | hir::PathResolution::BuiltinAttr(_)\n-            | hir::PathResolution::ToolModule(_) => (),\n+            | hir::PathResolution::ToolModule(_)\n+            | hir::PathResolution::DeriveHelper(_) => (),\n         }\n         Some(())\n     }"}, {"sha": "517fe3f246d08ecfb3ee8dd59401abe1a0175f62", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -156,6 +156,8 @@ impl Definition {\n             Definition::SelfType(_) => return None,\n             Definition::BuiltinAttr(_) => return None,\n             Definition::ToolModule(_) => return None,\n+            // FIXME: This should be doable in theory\n+            Definition::DeriveHelper(_) => return None,\n         };\n         return res;\n \n@@ -316,14 +318,20 @@ pub fn source_edit_from_references(\n     // macros can cause multiple refs to occur for the same text range, so keep track of what we have edited so far\n     let mut edited_ranges = Vec::new();\n     for &FileReference { range, ref name, .. } in references {\n+        let name_range = name.syntax().text_range();\n+        if name_range.len() != range.len() {\n+            // This usage comes from a different token kind that was downmapped to a NameLike in a macro\n+            // Renaming this will most likely break things syntax-wise\n+            continue;\n+        }\n         let has_emitted_edit = match name {\n             // if the ranges differ then the node is inside a macro call, we can't really attempt\n             // to make special rewrites like shorthand syntax and such, so just rename the node in\n             // the macro input\n-            ast::NameLike::NameRef(name_ref) if name_ref.syntax().text_range() == range => {\n+            ast::NameLike::NameRef(name_ref) if name_range == range => {\n                 source_edit_from_name_ref(&mut edit, name_ref, new_name, def)\n             }\n-            ast::NameLike::Name(name) if name.syntax().text_range() == range => {\n+            ast::NameLike::Name(name) if name_range == range => {\n                 source_edit_from_name(&mut edit, name, new_name)\n             }\n             _ => false,"}, {"sha": "bd038cdaa068261e3738849a930ff0ec59c74e91", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -54,7 +54,9 @@ impl IntoIterator for UsageSearchResult {\n \n #[derive(Debug, Clone)]\n pub struct FileReference {\n+    /// The range of the reference in the original file\n     pub range: TextRange,\n+    /// The node of the reference in the (macro-)file\n     pub name: ast::NameLike,\n     pub category: Option<ReferenceCategory>,\n }\n@@ -276,16 +278,16 @@ impl Definition {\n                     }\n                 }\n                 hir::MacroKind::BuiltIn => SearchScope::crate_graph(db),\n-                // FIXME: We don't actually see derives in derive attributes as these do not\n-                // expand to something that references the derive macro in the output.\n-                // We could get around this by doing pseudo expansions for proc_macro_derive like we\n-                // do for the derive attribute\n                 hir::MacroKind::Derive | hir::MacroKind::Attr | hir::MacroKind::ProcMacro => {\n                     SearchScope::reverse_dependencies(db, module.krate())\n                 }\n             };\n         }\n \n+        if let Definition::DeriveHelper(_) = self {\n+            return SearchScope::reverse_dependencies(db, module.krate());\n+        }\n+\n         let vis = self.visibility(db);\n         if let Some(Visibility::Public) = vis {\n             return SearchScope::reverse_dependencies(db, module.krate());"}, {"sha": "edb1fc0919c242c9f83dc921a488f5b76813e3a4", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -292,6 +292,37 @@ fn x(a: S) {\n         )\n     }\n \n+    #[test]\n+    fn missing_record_expr_in_assignee_expr() {\n+        check_diagnostics(\n+            r\"\n+struct S { s: usize, t: usize }\n+struct S2 { s: S, t: () }\n+struct T(S);\n+fn regular(a: S) {\n+    let s;\n+    S { s, .. } = a;\n+}\n+fn nested(a: S2) {\n+    let s;\n+    S2 { s: S { s, .. }, .. } = a;\n+}\n+fn in_tuple(a: (S,)) {\n+    let s;\n+    (S { s, .. },) = a;\n+}\n+fn in_array(a: [S;1]) {\n+    let s;\n+    [S { s, .. },] = a;\n+}\n+fn in_tuple_struct(a: T) {\n+    let s;\n+    T(S { s, .. }) = a;\n+}\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn range_mapping_out_of_macros() {\n         check_fix("}, {"sha": "582e9fe7e808c05b933de4293d5e66bc719dba70", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -190,7 +190,8 @@ pub(crate) fn resolve_doc_path_for_def(\n         | Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::GenericParam(_)\n-        | Definition::Label(_) => None,\n+        | Definition::Label(_)\n+        | Definition::DeriveHelper(_) => None,\n     }\n     .map(Definition::from)\n }\n@@ -515,7 +516,8 @@ fn filename_and_frag_for_def(\n         | Definition::GenericParam(_)\n         | Definition::Label(_)\n         | Definition::BuiltinAttr(_)\n-        | Definition::ToolModule(_) => return None,\n+        | Definition::ToolModule(_)\n+        | Definition::DeriveHelper(_) => return None,\n     };\n \n     Some((def, res, None))"}, {"sha": "59c97f2dcf966bff485bdd32b5b14cfeba614d60", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -115,7 +115,12 @@ pub(crate) fn hover(\n         });\n     }\n \n-    let descended = sema.descend_into_macros_with_same_text(original_token.clone());\n+    let in_attr = matches!(original_token.parent().and_then(ast::TokenTree::cast), Some(tt) if tt.syntax().ancestors().any(|it| ast::Meta::can_cast(it.kind())));\n+    let descended = if in_attr {\n+        [sema.descend_into_macros_with_kind_preference(original_token.clone())].into()\n+    } else {\n+        sema.descend_into_macros_with_same_text(original_token.clone())\n+    };\n \n     // FIXME: Definition should include known lints and the like instead of having this special case here\n     let hovered_lint = descended.iter().find_map(|token| {"}, {"sha": "6c50a4e6adc0ef663856331f022dcc63000e0f77", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -370,6 +370,7 @@ pub(super) fn definition(\n         // FIXME: We should be able to show more info about these\n         Definition::BuiltinAttr(it) => return render_builtin_attr(db, it),\n         Definition::ToolModule(it) => return Some(Markup::fenced_block(&it.name(db))),\n+        Definition::DeriveHelper(it) => (format!(\"derive_helper {}\", it.name(db)), None),\n     };\n \n     let docs = match config.documentation {"}, {"sha": "9f049e298ad119573cccfdc09fab0ea5c3524507", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -196,6 +196,8 @@ impl TryToNav for Definition {\n             Definition::BuiltinType(_) => None,\n             Definition::ToolModule(_) => None,\n             Definition::BuiltinAttr(_) => None,\n+            // FIXME: The focus range should be set to the helper declaration\n+            Definition::DeriveHelper(it) => it.derive().try_to_nav(db),\n         }\n     }\n }"}, {"sha": "fedc1a435827233ac24135b0918167efa4238dc6", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -237,7 +237,8 @@ fn signature_help_for_generics(\n             | hir::PathResolution::Local(_)\n             | hir::PathResolution::TypeParam(_)\n             | hir::PathResolution::ConstParam(_)\n-            | hir::PathResolution::SelfType(_) => return None,\n+            | hir::PathResolution::SelfType(_)\n+            | hir::PathResolution::DeriveHelper(_) => return None,\n         };\n \n         generic_def"}, {"sha": "d013d6f4b19ff95b0ef03e178ed3a194983ca09a", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -107,6 +107,7 @@ pub struct HlRange {\n // builtinType:: Emitted for builtin types like `u32`, `str` and `f32`.\n // comment:: Emitted for comments.\n // constParameter:: Emitted for const parameters.\n+// deriveHelper:: Emitted for derive helper attributes.\n // enumMember:: Emitted for enum variants.\n // generic:: Emitted for generic tokens that have no mapping.\n // keyword:: Emitted for keywords.\n@@ -431,6 +432,13 @@ fn traverse(\n                 // let the editor do its highlighting for these tokens instead\n                 continue;\n             }\n+            if highlight.tag == HlTag::UnresolvedReference\n+                && matches!(attr_or_derive_item, Some(AttrOrDerive::Derive(_)) if inside_attribute)\n+            {\n+                // do not emit unresolved references in derive helpers if the token mapping maps to\n+                // something unresolvable. FIXME: There should be a way to prevent that\n+                continue;\n+            }\n             if inside_attribute {\n                 highlight |= HlMod::Attribute\n             }"}, {"sha": "9395e914c43aa6ad796215cf1f5b926f2a7df8dd", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -472,6 +472,7 @@ fn highlight_def(\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n         Definition::BuiltinAttr(_) => Highlight::new(HlTag::Symbol(SymbolKind::BuiltinAttr)),\n         Definition::ToolModule(_) => Highlight::new(HlTag::Symbol(SymbolKind::ToolModule)),\n+        Definition::DeriveHelper(_) => Highlight::new(HlTag::Symbol(SymbolKind::DeriveHelper)),\n     };\n \n     let def_crate = def.krate(db);"}, {"sha": "f779a985a99ae60eb9289044d604b64775532a35", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -270,6 +270,7 @@ fn module_def_to_hl_tag(def: Definition) -> HlTag {\n         Definition::Label(_) => SymbolKind::Label,\n         Definition::BuiltinAttr(_) => SymbolKind::BuiltinAttr,\n         Definition::ToolModule(_) => SymbolKind::ToolModule,\n+        Definition::DeriveHelper(_) => SymbolKind::DeriveHelper,\n     };\n     HlTag::Symbol(symbol)\n }"}, {"sha": "5262770f30317f9312cc156f5664f1185ceba8f9", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -134,6 +134,7 @@ impl HlTag {\n                 SymbolKind::Const => \"constant\",\n                 SymbolKind::ConstParam => \"const_param\",\n                 SymbolKind::Derive => \"derive\",\n+                SymbolKind::DeriveHelper => \"derive_helper\",\n                 SymbolKind::Enum => \"enum\",\n                 SymbolKind::Field => \"field\",\n                 SymbolKind::Function => \"function\","}, {"sha": "c4018d3b39e7705fabcdc36424a9de5a2d37aae3", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -86,6 +86,7 @@ fn mk_child(\n ) -> io::Result<Child> {\n     Command::new(path.as_os_str())\n         .args(args)\n+        .env(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\", \"this is unstable\")\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())\n         .stderr(Stdio::inherit())"}, {"sha": "9d0da5dee9c109e28e3f803d329a9f34b89115de", "filename": "crates/proc-macro-srv-cli/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-srv-cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-srv-cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2FCargo.toml?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+name = \"proc-macro-srv-cli\"\n+version = \"0.0.0\"\n+description = \"TBD\"\n+license = \"MIT OR Apache-2.0\"\n+edition = \"2021\"\n+rust-version = \"1.57\"\n+\n+[dependencies]\n+proc-macro-srv = { version = \"0.0.0\", path = \"../proc-macro-srv\" }\n+\n+[features]\n+sysroot-abi = [\"proc-macro-srv/sysroot-abi\"]\n+\n+[[bin]]\n+name = \"rust-analyzer-proc-macro-srv\"\n+path = \"src/main.rs\""}, {"sha": "ac9fa9f5a4ce5fa38668fe81ce48b87539905339", "filename": "crates/proc-macro-srv-cli/src/main.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -0,0 +1,19 @@\n+//! A standalone binary for `proc-macro-srv`.\n+\n+use proc_macro_srv::cli;\n+\n+fn main() -> std::io::Result<()> {\n+    let v = std::env::var(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\");\n+    match v.as_deref() {\n+        Ok(\"this is unstable\") => {\n+            // very well, if you must\n+        }\n+        _ => {\n+            eprintln!(\"If you're rust-analyzer, you can use this tool by exporting RUST_ANALYZER_INTERNALS_DO_NOT_USE='this is unstable'.\");\n+            eprintln!(\"If not, you probably shouldn't use this tool. But do what you want: I'm an error message, not a cop.\");\n+            std::process::exit(122);\n+        }\n+    }\n+\n+    cli::run()\n+}"}, {"sha": "a80c962617bb3611a746e0d4482a3143621e4e65", "filename": "crates/proc-macro-test/build.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproc-macro-test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fbuild.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -62,8 +62,7 @@ fn main() {\n         Command::new(toolchain::cargo())\n     };\n \n-    cmd\n-        .current_dir(&staging_dir)\n+    cmd.current_dir(&staging_dir)\n         .args(&[\"build\", \"-p\", \"proc-macro-test-impl\", \"--message-format\", \"json\"])\n         // Explicit override the target directory to avoid using the same one which the parent\n         // cargo is using, or we'll deadlock."}, {"sha": "63d1d0ace96b973bd84f22e61f83348c120f34c6", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -17,6 +17,9 @@ use crate::cfg_flag::CfgFlag;\n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n+    /// e.g. `path/to/sysroot`\n+    pub(crate) sysroot: Option<AbsPathBuf>,\n+    /// e.g. `path/to/sysroot/lib/rustlib/src/rust`\n     pub(crate) sysroot_src: Option<AbsPathBuf>,\n     project_root: AbsPathBuf,\n     crates: Vec<Crate>,\n@@ -52,6 +55,7 @@ impl ProjectJson {\n     ///            configuration.\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n+            sysroot: data.sysroot.map(|it| base.join(it)),\n             sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n             project_root: base.to_path_buf(),\n             crates: data\n@@ -122,6 +126,7 @@ impl ProjectJson {\n \n #[derive(Deserialize, Debug, Clone)]\n pub struct ProjectJsonData {\n+    sysroot: Option<PathBuf>,\n     sysroot_src: Option<PathBuf>,\n     crates: Vec<CrateData>,\n }"}, {"sha": "362bb0f5e79cdb8fea2bb68e7a0591f978c81c90", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -15,6 +15,7 @@ use crate::{utf8_stdout, ManifestPath};\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n     root: AbsPathBuf,\n+    src_root: AbsPathBuf,\n     crates: Arena<SysrootCrateData>,\n }\n \n@@ -35,10 +36,19 @@ impl ops::Index<SysrootCrate> for Sysroot {\n }\n \n impl Sysroot {\n+    /// Returns sysroot \"root\" directory, where `bin/`, `etc/`, `lib/`, `libexec/`\n+    /// subfolder live, like:\n+    /// `$HOME/.rustup/toolchains/nightly-2022-07-23-x86_64-unknown-linux-gnu`\n     pub fn root(&self) -> &AbsPath {\n         &self.root\n     }\n \n+    /// Returns the sysroot \"source\" directory, where stdlib sources are located, like:\n+    /// `$HOME/.rustup/toolchains/nightly-2022-07-23-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library`\n+    pub fn src_root(&self) -> &AbsPath {\n+        &self.src_root\n+    }\n+\n     pub fn public_deps(&self) -> impl Iterator<Item = (&'static str, SysrootCrate, bool)> + '_ {\n         // core is added as a dependency before std in order to\n         // mimic rustcs dependency order\n@@ -61,7 +71,7 @@ impl Sysroot {\n         tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n         let sysroot_dir = discover_sysroot_dir(dir)?;\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir)?;\n-        let res = Sysroot::load(sysroot_src_dir)?;\n+        let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n         Ok(res)\n     }\n \n@@ -71,14 +81,15 @@ impl Sysroot {\n         discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n \n-    pub fn load(sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n-        let mut sysroot = Sysroot { root: sysroot_src_dir, crates: Arena::default() };\n+    pub fn load(sysroot_dir: AbsPathBuf, sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n+        let mut sysroot =\n+            Sysroot { root: sysroot_dir, src_root: sysroot_src_dir, crates: Arena::default() };\n \n         for path in SYSROOT_CRATES.trim().lines() {\n             let name = path.split('/').last().unwrap();\n             let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n                 .into_iter()\n-                .map(|it| sysroot.root.join(it))\n+                .map(|it| sysroot.src_root.join(it))\n                 .filter_map(|it| ManifestPath::try_from(it).ok())\n                 .find(|it| fs::metadata(it).is_ok());\n \n@@ -119,7 +130,7 @@ impl Sysroot {\n             };\n             anyhow::bail!(\n                 \"could not find libcore in sysroot path `{}`{}\",\n-                sysroot.root.as_path().display(),\n+                sysroot.src_root.as_path().display(),\n                 var_note,\n             );\n         }"}, {"sha": "e304a59c0180bf7ef9c38e8f6269c35f4c167973", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -75,8 +75,11 @@ fn get_test_path(file: &str) -> PathBuf {\n \n fn get_fake_sysroot() -> Sysroot {\n     let sysroot_path = get_test_path(\"fake-sysroot\");\n-    let sysroot_src_dir = AbsPathBuf::assert(sysroot_path);\n-    Sysroot::load(sysroot_src_dir).unwrap()\n+    // there's no `libexec/` directory with a `proc-macro-srv` binary in that\n+    // fake sysroot, so we give them both the same path:\n+    let sysroot_dir = AbsPathBuf::assert(sysroot_path);\n+    let sysroot_src_dir = sysroot_dir.clone();\n+    Sysroot::load(sysroot_dir, sysroot_src_dir).unwrap()\n }\n \n fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {"}, {"sha": "b144006b44e037580db5354357c564ea466698ea", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -230,10 +230,26 @@ impl ProjectWorkspace {\n         project_json: ProjectJson,\n         target: Option<&str>,\n     ) -> Result<ProjectWorkspace> {\n-        let sysroot = match &project_json.sysroot_src {\n-            Some(path) => Some(Sysroot::load(path.clone())?),\n-            None => None,\n+        let sysroot = match (project_json.sysroot.clone(), project_json.sysroot_src.clone()) {\n+            (Some(sysroot), Some(sysroot_src)) => Some(Sysroot::load(sysroot, sysroot_src)?),\n+            (Some(sysroot), None) => {\n+                // assume sysroot is structured like rustup's and guess `sysroot_src`\n+                let sysroot_src =\n+                    sysroot.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\").join(\"library\");\n+\n+                Some(Sysroot::load(sysroot, sysroot_src)?)\n+            }\n+            (None, Some(sysroot_src)) => {\n+                // assume sysroot is structured like rustup's and guess `sysroot`\n+                let mut sysroot = sysroot_src.clone();\n+                for _ in 0..5 {\n+                    sysroot.pop();\n+                }\n+                Some(Sysroot::load(sysroot, sysroot_src)?)\n+            }\n+            (None, None) => None,\n         };\n+\n         let rustc_cfg = rustc_cfg::get(None, target);\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n@@ -345,7 +361,7 @@ impl ProjectWorkspace {\n                     })\n                     .chain(sysroot.iter().map(|sysroot| PackageRoot {\n                         is_local: false,\n-                        include: vec![sysroot.root().to_path_buf()],\n+                        include: vec![sysroot.src_root().to_path_buf()],\n                         exclude: Vec::new(),\n                     }))\n                     .chain(rustc.iter().flat_map(|rustc| {"}, {"sha": "0ada4b73e842d9d7f814bf71f74c9dc4441158c3", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -60,9 +60,9 @@ pub fn load_workspace(\n \n     let proc_macro_client = if load_config.with_proc_macro {\n         let path = AbsPathBuf::assert(std::env::current_exe()?);\n-        Some(ProcMacroServer::spawn(path, &[\"proc-macro\"]).unwrap())\n+        Ok(ProcMacroServer::spawn(path, &[\"proc-macro\"]).unwrap())\n     } else {\n-        None\n+        Err(\"proc macro server not started\".to_owned())\n     };\n \n     let crate_graph = ws.to_crate_graph(\n@@ -89,7 +89,7 @@ pub fn load_workspace(\n     if load_config.prefill_caches {\n         host.analysis().parallel_prime_caches(1, |_| {})?;\n     }\n-    Ok((host, vfs, proc_macro_client))\n+    Ok((host, vfs, proc_macro_client.ok()))\n }\n \n fn load_crate_graph("}, {"sha": "8f881cba4dbd7b113534e3cfdf1d6aa85bf95d27", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct GlobalState {\n     pub(crate) proc_macro_changed: bool,\n     pub(crate) last_reported_status: Option<lsp_ext::ServerStatusParams>,\n     pub(crate) source_root_config: SourceRootConfig,\n-    pub(crate) proc_macro_client: Option<ProcMacroServer>,\n+    pub(crate) proc_macro_clients: Vec<Result<ProcMacroServer, String>>,\n \n     pub(crate) flycheck: Vec<FlycheckHandle>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n@@ -151,7 +151,7 @@ impl GlobalState {\n             proc_macro_changed: false,\n             last_reported_status: None,\n             source_root_config: SourceRootConfig::default(),\n-            proc_macro_client: None,\n+            proc_macro_clients: vec![],\n \n             flycheck: Vec::new(),\n             flycheck_sender,"}, {"sha": "deb777c952fdf7d7658f92b77b8d50f68244499c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -44,7 +44,7 @@ use crate::{\n };\n \n pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n-    state.proc_macro_client = None;\n+    state.proc_macro_clients.clear();\n     state.proc_macro_changed = false;\n     state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n     state.fetch_build_data_queue.request_op(\"reload workspace request\".to_string());"}, {"sha": "9ae361b034e28959043b1fbd2a40298fb86a7146", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -303,18 +303,55 @@ impl GlobalState {\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n-        if self.proc_macro_client.is_none() {\n+        if self.proc_macro_clients.is_empty() {\n             if let Some((path, args)) = self.config.proc_macro_srv() {\n-                match ProcMacroServer::spawn(path.clone(), args) {\n-                    Ok(it) => self.proc_macro_client = Some(it),\n-                    Err(err) => {\n-                        tracing::error!(\n-                            \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n+                self.proc_macro_clients = self\n+                    .workspaces\n+                    .iter()\n+                    .map(|ws| {\n+                        let mut args = args.clone();\n+                        let mut path = path.clone();\n+\n+                        if let ProjectWorkspace::Cargo { sysroot, .. } = ws {\n+                            tracing::info!(\"Found a cargo workspace...\");\n+                            if let Some(sysroot) = sysroot.as_ref() {\n+                                tracing::info!(\"Found a cargo workspace with a sysroot...\");\n+                                let server_path = sysroot\n+                                    .root()\n+                                    .join(\"libexec\")\n+                                    .join(\"rust-analyzer-proc-macro-srv\");\n+                                if std::fs::metadata(&server_path).is_ok() {\n+                                    tracing::info!(\n+                                        \"And the server exists at {}\",\n+                                        server_path.display()\n+                                    );\n+                                    path = server_path;\n+                                    args = vec![];\n+                                } else {\n+                                    tracing::info!(\n+                                        \"And the server does not exist at {}\",\n+                                        server_path.display()\n+                                    );\n+                                }\n+                            }\n+                        }\n+\n+                        tracing::info!(\n+                            \"Using proc-macro server at {} with args {:?}\",\n                             path.display(),\n-                            err\n+                            args\n                         );\n-                    }\n-                }\n+                        ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|err| {\n+                            let error = format!(\n+                                \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n+                                path.display(),\n+                                err\n+                            );\n+                            tracing::error!(error);\n+                            error\n+                        })\n+                    })\n+                    .collect();\n             }\n         }\n \n@@ -331,15 +368,7 @@ impl GlobalState {\n \n         // Create crate graph from all the workspaces\n         let crate_graph = {\n-            let proc_macro_client = self.proc_macro_client.as_ref();\n             let dummy_replacements = self.config.dummy_replacements();\n-            let mut load_proc_macro = move |crate_name: &str, path: &AbsPath| {\n-                load_proc_macro(\n-                    proc_macro_client,\n-                    path,\n-                    dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n-                )\n-            };\n \n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n@@ -359,7 +388,15 @@ impl GlobalState {\n             };\n \n             let mut crate_graph = CrateGraph::default();\n-            for ws in self.workspaces.iter() {\n+            for (idx, ws) in self.workspaces.iter().enumerate() {\n+                let proc_macro_client = self.proc_macro_clients[idx].as_ref();\n+                let mut load_proc_macro = move |crate_name: &str, path: &AbsPath| {\n+                    load_proc_macro(\n+                        proc_macro_client,\n+                        path,\n+                        dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n+                    )\n+                };\n                 crate_graph.extend(ws.to_crate_graph(&mut load_proc_macro, &mut load));\n             }\n             crate_graph\n@@ -536,14 +573,14 @@ impl SourceRootConfig {\n /// Load the proc-macros for the given lib path, replacing all expanders whose names are in `dummy_replace`\n /// with an identity dummy expander.\n pub(crate) fn load_proc_macro(\n-    server: Option<&ProcMacroServer>,\n+    server: Result<&ProcMacroServer, &String>,\n     path: &AbsPath,\n     dummy_replace: &[Box<str>],\n ) -> ProcMacroLoadResult {\n     let res: Result<Vec<_>, String> = (|| {\n         let dylib = MacroDylib::new(path.to_path_buf())\n             .map_err(|io| format!(\"Proc-macro dylib loading failed: {io}\"))?;\n-        let server = server.ok_or_else(|| format!(\"Proc-macro server not started\"))?;\n+        let server = server.map_err(ToOwned::to_owned)?;\n         let vec = server.load_dylib(dylib).map_err(|e| format!(\"{e}\"))?;\n         if vec.is_empty() {\n             return Err(\"proc macro library returned no proc macros\".to_string());"}, {"sha": "6c78b5df1a7050472d9cacb304bb799792aa4ee0", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -54,6 +54,7 @@ define_semantic_token_types![\n     (COMPARISON, \"comparison\"),\n     (CONST_PARAMETER, \"constParameter\"),\n     (DERIVE, \"derive\"),\n+    (DERIVE_HELPER, \"deriveHelper\"),\n     (DOT, \"dot\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),"}, {"sha": "7f4fa57fa1e095f2138d6924815c9a7643a3c82b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f1b95d0043e92a504510434e143962079ffaf2/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=a1f1b95d0043e92a504510434e143962079ffaf2", "patch": "@@ -53,7 +53,8 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Macro\n         | SymbolKind::BuiltinAttr\n         | SymbolKind::Attribute\n-        | SymbolKind::Derive => lsp_types::SymbolKind::FUNCTION,\n+        | SymbolKind::Derive\n+        | SymbolKind::DeriveHelper => lsp_types::SymbolKind::FUNCTION,\n         SymbolKind::Module | SymbolKind::ToolModule => lsp_types::SymbolKind::MODULE,\n         SymbolKind::TypeAlias | SymbolKind::TypeParam | SymbolKind::SelfType => {\n             lsp_types::SymbolKind::TYPE_PARAMETER\n@@ -117,6 +118,7 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Const => lsp_types::CompletionItemKind::CONSTANT,\n             SymbolKind::ConstParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n             SymbolKind::Derive => lsp_types::CompletionItemKind::FUNCTION,\n+            SymbolKind::DeriveHelper => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Enum => lsp_types::CompletionItemKind::ENUM,\n             SymbolKind::Field => lsp_types::CompletionItemKind::FIELD,\n             SymbolKind::Function => lsp_types::CompletionItemKind::FUNCTION,\n@@ -561,6 +563,7 @@ fn semantic_token_type_and_modifiers(\n         HlTag::Symbol(symbol) => match symbol {\n             SymbolKind::Attribute => semantic_tokens::ATTRIBUTE,\n             SymbolKind::Derive => semantic_tokens::DERIVE,\n+            SymbolKind::DeriveHelper => semantic_tokens::DERIVE_HELPER,\n             SymbolKind::Module => lsp_types::SemanticTokenType::NAMESPACE,\n             SymbolKind::Impl => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,"}]}