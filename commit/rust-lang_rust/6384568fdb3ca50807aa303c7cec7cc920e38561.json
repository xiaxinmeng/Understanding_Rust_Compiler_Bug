{"sha": "6384568fdb3ca50807aa303c7cec7cc920e38561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzODQ1NjhmZGIzY2E1MDgwN2FhMzAzYzdjZWM3Y2M5MjBlMzg1NjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-31T23:32:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-31T23:32:41Z"}, "message": "Reword trying to operate in immutable fields\n\nThe previous message (\"cannot assign/mutably borrow immutable field\")\nwhen trying to modify a field of an immutable binding gave the\n(incorrect) impression that fields can be mutable independently of their\nADT's binding. Slightly reword the message to read \"cannot\nassign/mutably borrow field of immutable binding\".", "tree": {"sha": "7ce16f7be2f6e67a2256dda1a50f1dbb95bc11ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce16f7be2f6e67a2256dda1a50f1dbb95bc11ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6384568fdb3ca50807aa303c7cec7cc920e38561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6384568fdb3ca50807aa303c7cec7cc920e38561", "html_url": "https://github.com/rust-lang/rust/commit/6384568fdb3ca50807aa303c7cec7cc920e38561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6384568fdb3ca50807aa303c7cec7cc920e38561/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885011ef1fd8fbe8c5be50a0713c03c980772be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/885011ef1fd8fbe8c5be50a0713c03c980772be3", "html_url": "https://github.com/rust-lang/rust/commit/885011ef1fd8fbe8c5be50a0713c03c980772be3"}], "stats": {"total": 149, "additions": 85, "deletions": 64}, "files": [{"sha": "c7a13b42028d78c8b9eef2d5e66bc408acfddbb2", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -484,54 +484,60 @@ impl<'a, 'tcx> LoanPath<'tcx> {\n     }\n }\n \n-pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n-    //! Computes the `LoanPath` (if any) for a `cmt`.\n-    //! Note that this logic is somewhat duplicated in\n-    //! the method `compute()` found in `gather_loans::restrictions`,\n-    //! which allows it to share common loan path pieces as it\n-    //! traverses the CMT.\n-\n+// Avoid \"cannot borrow immutable field `self.x` as mutable\" as that implies that a field *can* be\n+// mutable independently of the struct it belongs to. (#35937)\n+pub fn opt_loan_path_is_field<'tcx>(cmt: &mc::cmt<'tcx>) -> (Option<Rc<LoanPath<'tcx>>>, bool) {\n     let new_lp = |v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n \n     match cmt.cat {\n         Categorization::Rvalue(..) |\n         Categorization::StaticItem => {\n-            None\n+            (None, false)\n         }\n \n         Categorization::Local(id) => {\n-            Some(new_lp(LpVar(id)))\n+            (Some(new_lp(LpVar(id))), false)\n         }\n \n         Categorization::Upvar(mc::Upvar { id, .. }) => {\n-            Some(new_lp(LpUpvar(id)))\n+            (Some(new_lp(LpUpvar(id))), false)\n         }\n \n         Categorization::Deref(ref cmt_base, pk) => {\n-            opt_loan_path(cmt_base).map(|lp| {\n+            let lp = opt_loan_path_is_field(cmt_base);\n+            (lp.0.map(|lp| {\n                 new_lp(LpExtend(lp, cmt.mutbl, LpDeref(pk)))\n-            })\n+            }), lp.1)\n         }\n \n         Categorization::Interior(ref cmt_base, ik) => {\n-            opt_loan_path(cmt_base).map(|lp| {\n+            (opt_loan_path(cmt_base).map(|lp| {\n                 let opt_variant_id = match cmt_base.cat {\n                     Categorization::Downcast(_, did) =>  Some(did),\n                     _ => None\n                 };\n                 new_lp(LpExtend(lp, cmt.mutbl, LpInterior(opt_variant_id, ik.cleaned())))\n-            })\n+            }), true)\n         }\n \n-        Categorization::Downcast(ref cmt_base, variant_def_id) =>\n-            opt_loan_path(cmt_base)\n-            .map(|lp| {\n+        Categorization::Downcast(ref cmt_base, variant_def_id) => {\n+            let lp = opt_loan_path_is_field(cmt_base);\n+            (lp.0.map(|lp| {\n                 new_lp(LpDowncast(lp, variant_def_id))\n-            }),\n-\n+            }), lp.1)\n+        }\n     }\n }\n \n+/// Computes the `LoanPath` (if any) for a `cmt`.\n+/// Note that this logic is somewhat duplicated in\n+/// the method `compute()` found in `gather_loans::restrictions`,\n+/// which allows it to share common loan path pieces as it\n+/// traverses the CMT.\n+pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n+    opt_loan_path_is_field(cmt).0\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Errors\n \n@@ -787,14 +793,26 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n                         self.cmt_to_string(&err.cmt)\n                     }\n-                    _ => match opt_loan_path(&err.cmt) {\n-                        None => {\n+                    _ => match opt_loan_path_is_field(&err.cmt) {\n+                        (None, true) => {\n+                            format!(\"{} of {} binding\",\n+                                    self.cmt_to_string(&err.cmt),\n+                                    err.cmt.mutbl.to_user_str())\n+\n+                        }\n+                        (None, false) => {\n                             format!(\"{} {}\",\n                                     err.cmt.mutbl.to_user_str(),\n                                     self.cmt_to_string(&err.cmt))\n \n                         }\n-                        Some(lp) => {\n+                        (Some(lp), true) => {\n+                            format!(\"{} `{}` of {} binding\",\n+                                    self.cmt_to_string(&err.cmt),\n+                                    self.loan_path_to_string(&lp),\n+                                    err.cmt.mutbl.to_user_str())\n+                        }\n+                        (Some(lp), false) => {\n                             format!(\"{} {} `{}`\",\n                                     err.cmt.mutbl.to_user_str(),\n                                     self.cmt_to_string(&err.cmt),\n@@ -1326,7 +1344,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 } else if let Categorization::Interior(ref cmt, _) = err.cmt.cat {\n                     if let mc::MutabilityCategory::McImmutable = cmt.mutbl {\n                         db.span_label(*error_span,\n-                                      \"cannot mutably borrow immutable field\");\n+                                      \"cannot mutably borrow field of immutable binding\");\n                     }\n                 }\n             }"}, {"sha": "4bd147a5e1c89a0cf6ea5003ce177aea82038d18", "filename": "src/test/compile-fail/issue-5500-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -18,8 +18,8 @@ struct TrieMapIterator<'a> {\n fn main() {\n     let a = 5;\n     let _iter = TrieMapIterator{node: &a};\n-    _iter.node = & //[ast]~ ERROR cannot assign to immutable field `_iter.node`\n-                   //[mir]~^ ERROR cannot assign to immutable field `_iter.node` (Ast)\n+    _iter.node = & //[ast]~ ERROR cannot assign to field `_iter.node` of immutable binding\n+                   //[mir]~^ ERROR cannot assign to field `_iter.node` of immutable binding (Ast)\n                    // MIR doesn't generate an error because the code isn't reachable. This is OK\n                    // because the test is here to check that the compiler doesn't ICE (cf. #5500).\n     panic!()"}, {"sha": "cfaff9731704f102e9d83f541961295f8367270a", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -1,26 +1,26 @@\n-error[E0596]: cannot borrow immutable field `f.v` as mutable\n+error[E0596]: cannot borrow field `f.v` of immutable binding as mutable\n   --> $DIR/issue-35937.rs:17:5\n    |\n 16 |     let f = Foo { v: Vec::new() };\n    |         - consider changing this to `mut f`\n 17 |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n-   |     ^^^ cannot mutably borrow immutable field\n+   |     ^^^ cannot mutably borrow field of immutable binding\n \n-error[E0594]: cannot assign to immutable field `s.x`\n+error[E0594]: cannot assign to field `s.x` of immutable binding\n   --> $DIR/issue-35937.rs:26:5\n    |\n 25 |     let s = S { x: 42 };\n    |         - consider changing this to `mut s`\n 26 |     s.x += 1; //~ ERROR cannot assign\n-   |     ^^^^^^^^ cannot mutably borrow immutable field\n+   |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0594]: cannot assign to immutable field `s.x`\n+error[E0594]: cannot assign to field `s.x` of immutable binding\n   --> $DIR/issue-35937.rs:30:5\n    |\n 29 | fn bar(s: S) {\n    |        - consider changing this to `mut s`\n 30 |     s.x += 1; //~ ERROR cannot assign\n-   |     ^^^^^^^^ cannot mutably borrow immutable field\n+   |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1a24f471f0855269ffeba986e6cab7a59d40ea9a", "filename": "src/test/ui/did_you_mean/issue-38147-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -14,7 +14,8 @@ struct Bar<'a> {\n \n impl<'a> Bar<'a> {\n     fn f(&mut self) {\n-        self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n+        self.s.push('x');\n+        //~^ ERROR cannot borrow borrowed content `*self.s` of immutable binding as mutable\n     }\n }\n "}, {"sha": "569bfa11803c959b42351e8027cf05a132f36602", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -1,10 +1,10 @@\n-error[E0596]: cannot borrow immutable borrowed content `*self.s` as mutable\n+error[E0596]: cannot borrow borrowed content `*self.s` of immutable binding as mutable\n   --> $DIR/issue-38147-2.rs:17:9\n    |\n 12 |     s: &'a String\n    |        ---------- use `&'a mut String` here to make mutable\n ...\n-17 |         self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n+17 |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "5e2bf06e5d9023403ac36d7f59b7f9a26fbcf4e1", "filename": "src/test/ui/did_you_mean/issue-38147-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.rs?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -14,7 +14,8 @@ struct Qux<'a> {\n \n impl<'a> Qux<'a> {\n     fn f(&self) {\n-        self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n+        self.s.push('x');\n+        //~^ ERROR cannot borrow borrowed content `*self.s` of immutable binding as mutable\n     }\n }\n "}, {"sha": "75d904d394a8b4490c1e58e8f8988932d9407d29", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -1,10 +1,10 @@\n-error[E0596]: cannot borrow immutable borrowed content `*self.s` as mutable\n+error[E0596]: cannot borrow borrowed content `*self.s` of immutable binding as mutable\n   --> $DIR/issue-38147-3.rs:17:9\n    |\n 12 |     s: &'a String\n    |        ---------- use `&'a mut String` here to make mutable\n ...\n-17 |         self.s.push('x'); //~ ERROR cannot borrow immutable borrowed\n+17 |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "205cbce709491c082515ff0f5b7612d70ea543ef", "filename": "src/test/ui/did_you_mean/issue-39544.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -55,5 +55,6 @@ pub fn with_arg(z: Z, w: &Z) {\n pub fn with_tuple() {\n     let mut y = 0;\n     let x = (&y,);\n-    *x.0 = 1; //~ ERROR cannot assign to immutable borrowed content\n+    *x.0 = 1;\n+    //~^ ERROR cannot assign to borrowed content `*x.0` of immutable binding\n }"}, {"sha": "d8c089806cdf9d1d56d5c030a98fd4e3b86e6ccb", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -1,99 +1,99 @@\n-error[E0596]: cannot borrow immutable field `z.x` as mutable\n+error[E0596]: cannot borrow field `z.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:21:18\n    |\n 20 |     let z = Z { x: X::Y };\n    |         - consider changing this to `mut z`\n 21 |     let _ = &mut z.x; //~ ERROR cannot borrow\n-   |                  ^^^ cannot mutably borrow immutable field\n+   |                  ^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:26:22\n    |\n 25 |     fn foo<'z>(&'z self) {\n    |                -------- use `&'z mut self` here to make mutable\n 26 |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:30:22\n    |\n 29 |     fn foo1(&self, other: &Z) {\n    |             ----- use `&mut self` here to make mutable\n 30 |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:31:22\n    |\n 29 |     fn foo1(&self, other: &Z) {\n    |                           -- use `&mut Z` here to make mutable\n 30 |         let _ = &mut self.x; //~ ERROR cannot borrow\n 31 |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:35:22\n    |\n 34 |     fn foo2<'a>(&'a self, other: &Z) {\n    |                 -------- use `&'a mut self` here to make mutable\n 35 |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:36:22\n    |\n 34 |     fn foo2<'a>(&'a self, other: &Z) {\n    |                                  -- use `&mut Z` here to make mutable\n 35 |         let _ = &mut self.x; //~ ERROR cannot borrow\n 36 |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `self.x` as mutable\n+error[E0596]: cannot borrow field `self.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:40:22\n    |\n 39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                       -------- use `&'a mut Self` here to make mutable\n 40 |         let _ = &mut self.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:41:22\n    |\n 39 |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                                        -- use `&mut Z` here to make mutable\n 40 |         let _ = &mut self.x; //~ ERROR cannot borrow\n 41 |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `other.x` as mutable\n+error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:45:22\n    |\n 44 |     fn foo4(other: &Z) {\n    |                    -- use `&mut Z` here to make mutable\n 45 |         let _ = &mut other.x; //~ ERROR cannot borrow\n-   |                      ^^^^^^^ cannot mutably borrow immutable field\n+   |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `z.x` as mutable\n+error[E0596]: cannot borrow field `z.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:51:18\n    |\n 50 | pub fn with_arg(z: Z, w: &Z) {\n    |                 - consider changing this to `mut z`\n 51 |     let _ = &mut z.x; //~ ERROR cannot borrow\n-   |                  ^^^ cannot mutably borrow immutable field\n+   |                  ^^^ cannot mutably borrow field of immutable binding\n \n-error[E0596]: cannot borrow immutable field `w.x` as mutable\n+error[E0596]: cannot borrow field `w.x` of immutable binding as mutable\n   --> $DIR/issue-39544.rs:52:18\n    |\n 50 | pub fn with_arg(z: Z, w: &Z) {\n    |                          -- use `&mut Z` here to make mutable\n 51 |     let _ = &mut z.x; //~ ERROR cannot borrow\n 52 |     let _ = &mut w.x; //~ ERROR cannot borrow\n-   |                  ^^^ cannot mutably borrow immutable field\n+   |                  ^^^ cannot mutably borrow field of immutable binding\n \n-error[E0594]: cannot assign to immutable borrowed content `*x.0`\n+error[E0594]: cannot assign to borrowed content `*x.0` of immutable binding\n   --> $DIR/issue-39544.rs:58:5\n    |\n-58 |     *x.0 = 1; //~ ERROR cannot assign to immutable borrowed content\n+58 |     *x.0 = 1;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 12 previous errors"}, {"sha": "8e03c303e54d7ff090723c7c8e081cc332d033fd", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -42,7 +42,7 @@ fn test3<F>(f: &mut F) where F: FnMut() {\n \n fn test4(f: &Test) {\n     f.f.call_mut(())\n-    //~^ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n+    //~^ ERROR: cannot borrow `Box` content `*f.f` of immutable binding as mutable\n }\n \n fn test5(f: &mut Test) {"}, {"sha": "581b366af1c1b0cdb92c27a6be6f8250a5ca902c", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6384568fdb3ca50807aa303c7cec7cc920e38561/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=6384568fdb3ca50807aa303c7cec7cc920e38561", "patch": "@@ -19,7 +19,7 @@ error[E0596]: cannot borrow immutable borrowed content `*f` as mutable\n 35 |     (*f)();\n    |     ^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable `Box` content `*f.f` as mutable\n+error[E0596]: cannot borrow `Box` content `*f.f` of immutable binding as mutable\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:44:5\n    |\n 43 | fn test4(f: &Test) {"}]}