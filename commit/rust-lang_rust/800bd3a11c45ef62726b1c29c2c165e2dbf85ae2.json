{"sha": "800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMGJkM2ExMWM0NWVmNjI3MjZiMWMyOWMyYzE2NWUyZGJmODVhZTI=", "commit": {"author": {"name": "Shivani Bhardwaj", "email": "shivanib134@gmail.com", "date": "2019-09-03T10:12:54Z"}, "committer": {"name": "Shivani Bhardwaj", "email": "shivanib134@gmail.com", "date": "2019-09-28T09:05:20Z"}, "message": "data_structures: Add deterministic FxHashMap and FxHashSet wrappers\n\nStableMap\nA wrapper for FxHashMap that allows to insert, remove, get and get_mut\nbut no iteration support.\n\nStableSet\nA wrapper for FxHashSet that allows to insert, remove, get and create a\nsorted vector from a hashset but no iteration support.", "tree": {"sha": "78b95fa1d59137977eb30dc6a459a9c6884e1ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b95fa1d59137977eb30dc6a459a9c6884e1ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "html_url": "https://github.com/rust-lang/rust/commit/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2/comments", "author": {"login": "inashivb", "id": 57791542, "node_id": "MDQ6VXNlcjU3NzkxNTQy", "avatar_url": "https://avatars.githubusercontent.com/u/57791542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inashivb", "html_url": "https://github.com/inashivb", "followers_url": "https://api.github.com/users/inashivb/followers", "following_url": "https://api.github.com/users/inashivb/following{/other_user}", "gists_url": "https://api.github.com/users/inashivb/gists{/gist_id}", "starred_url": "https://api.github.com/users/inashivb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inashivb/subscriptions", "organizations_url": "https://api.github.com/users/inashivb/orgs", "repos_url": "https://api.github.com/users/inashivb/repos", "events_url": "https://api.github.com/users/inashivb/events{/privacy}", "received_events_url": "https://api.github.com/users/inashivb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inashivb", "id": 57791542, "node_id": "MDQ6VXNlcjU3NzkxNTQy", "avatar_url": "https://avatars.githubusercontent.com/u/57791542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inashivb", "html_url": "https://github.com/inashivb", "followers_url": "https://api.github.com/users/inashivb/followers", "following_url": "https://api.github.com/users/inashivb/following{/other_user}", "gists_url": "https://api.github.com/users/inashivb/gists{/gist_id}", "starred_url": "https://api.github.com/users/inashivb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inashivb/subscriptions", "organizations_url": "https://api.github.com/users/inashivb/orgs", "repos_url": "https://api.github.com/users/inashivb/repos", "events_url": "https://api.github.com/users/inashivb/events{/privacy}", "received_events_url": "https://api.github.com/users/inashivb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c8eba643a815d720e7f20699b3dca144c845c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c8eba643a815d720e7f20699b3dca144c845c4", "html_url": "https://github.com/rust-lang/rust/commit/f3c8eba643a815d720e7f20699b3dca144c845c4"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "d6e9c479c9b8dad1d1e5fb87763a8a406a480af4", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "patch": "@@ -73,6 +73,7 @@ pub mod box_region;\n pub mod const_cstr;\n pub mod flock;\n pub mod fx;\n+pub mod stable_map;\n pub mod graph;\n pub mod indexed_vec;\n pub mod jobserver;\n@@ -84,6 +85,7 @@ pub mod small_c_str;\n pub mod snapshot_map;\n pub use ena::snapshot_vec;\n pub mod sorted_map;\n+pub mod stable_set;\n #[macro_use] pub mod stable_hasher;\n pub mod sync;\n pub mod sharded;"}, {"sha": "f69f28e14b2a1b3fcd2d6ceace3e812ff5fe9cc5", "filename": "src/librustc_data_structures/stable_map.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2/src%2Flibrustc_data_structures%2Fstable_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2/src%2Flibrustc_data_structures%2Fstable_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_map.rs?ref=800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "patch": "@@ -0,0 +1,99 @@\n+pub use rustc_hash::FxHashMap;\n+use std::borrow::Borrow;\n+use std::collections::hash_map::Entry;\n+use std::fmt;\n+use std::hash::Hash;\n+\n+/// A deterministic wrapper around FxHashMap that does not provide iteration support.\n+///\n+/// It supports insert, remove, get and get_mut functions from FxHashMap.\n+/// It also allows to convert hashmap to a sorted vector with the method `into_sorted_vector()`.\n+#[derive(Clone)]\n+pub struct StableMap<K, V> {\n+    base: FxHashMap<K, V>,\n+}\n+\n+impl<K, V> Default for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+{\n+    fn default() -> StableMap<K, V> {\n+        StableMap::new()\n+    }\n+}\n+\n+impl<K, V> fmt::Debug for StableMap<K, V>\n+where\n+    K: Eq + Hash + fmt::Debug,\n+    V: fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self.base)\n+    }\n+}\n+\n+impl<K, V> PartialEq for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+    V: PartialEq,\n+{\n+    fn eq(&self, other: &StableMap<K, V>) -> bool {\n+        self.base == other.base\n+    }\n+}\n+\n+impl<K, V> Eq for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+    V: Eq,\n+{}\n+\n+impl<K, V> StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+{\n+    pub fn new() -> StableMap<K, V> {\n+        StableMap { base: FxHashMap::default() }\n+    }\n+\n+    pub fn into_sorted_vector(self) -> Vec<(K, V)>\n+    where\n+        K: Ord + Copy,\n+    {\n+        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n+        vector.sort_unstable_by_key(|pair| pair.0);\n+        vector\n+    }\n+\n+    pub fn entry(&mut self, k: K) -> Entry<'_, K, V> {\n+        self.base.entry(k)\n+    }\n+\n+    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get(k)\n+    }\n+\n+    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_mut(k)\n+    }\n+\n+    pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n+        self.base.insert(k, v)\n+    }\n+\n+    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.remove(k)\n+    }\n+}"}, {"sha": "c7ca74f5fbd9d1243f1895b392451b6b4757fbd9", "filename": "src/librustc_data_structures/stable_set.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2/src%2Flibrustc_data_structures%2Fstable_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2/src%2Flibrustc_data_structures%2Fstable_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_set.rs?ref=800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "patch": "@@ -0,0 +1,77 @@\n+pub use rustc_hash::FxHashSet;\n+use std::borrow::Borrow;\n+use std::fmt;\n+use std::hash::Hash;\n+\n+/// A deterministic wrapper around FxHashSet that does not provide iteration support.\n+///\n+/// It supports insert, remove, get functions from FxHashSet.\n+/// It also allows to convert hashset to a sorted vector with the method `into_sorted_vector()`.\n+#[derive(Clone)]\n+pub struct StableSet<T> {\n+    base: FxHashSet<T>,\n+}\n+\n+impl<T> Default for StableSet<T>\n+where\n+    T: Eq + Hash,\n+{\n+    fn default() -> StableSet<T> {\n+        StableSet::new()\n+    }\n+}\n+\n+impl<T> fmt::Debug for StableSet<T>\n+where\n+    T: Eq + Hash + fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self.base)\n+    }\n+}\n+\n+impl<T> PartialEq<StableSet<T>> for StableSet<T>\n+where\n+    T: Eq + Hash,\n+{\n+    fn eq(&self, other: &StableSet<T>) -> bool {\n+        self.base == other.base\n+    }\n+}\n+\n+impl<T> Eq for StableSet<T> where T: Eq + Hash {}\n+\n+impl<T: Hash + Eq> StableSet<T> {\n+    pub fn new() -> StableSet<T> {\n+        StableSet { base: FxHashSet::default() }\n+    }\n+\n+    pub fn into_sorted_vector(self) -> Vec<T>\n+    where\n+        T: Ord,\n+    {\n+        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n+        vector.sort_unstable();\n+        vector\n+    }\n+\n+    pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get(value)\n+    }\n+\n+    pub fn insert(&mut self, value: T) -> bool {\n+        self.base.insert(value)\n+    }\n+\n+    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.remove(value)\n+    }\n+}"}]}