{"sha": "4edba553c3999ae8b6204484be5e1460be30d741", "node_id": "C_kwDOAAsO6NoAKDRlZGJhNTUzYzM5OTlhZThiNjIwNDQ4NGJlNWUxNDYwYmUzMGQ3NDE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-17T09:00:29Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2023-04-21T13:34:33Z"}, "message": "add support for `// unset-exec-env` in compiletest", "tree": {"sha": "6e6501ab8d6cd2ca5d4e1a995bb7210e3e375d17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6501ab8d6cd2ca5d4e1a995bb7210e3e375d17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4edba553c3999ae8b6204484be5e1460be30d741", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAmRCkOkACgkQPgar6Auq\n8Zw5zhAAw7dB1n6hmE0Qa72n9FrIvfgbeCZUuqOjaJfOI6bNeojgJ9QqaLoRGHyt\nZF89tKaGlk71Ef3IPnqRm10v8ww7PQMB9Q2O1lv9gJ/AA5BWNB2MWRXjCLNiyngF\nWuHCN4Q2bPiIU0wv7MWxTFz63OkdzKj/7jnlYpB2HFz7B+EcsVUTiSoQnrVSOy61\nNGeaK0ZoBaZxqc35Q89cBSX3h3DAofHqdDEQiYvE3wDIeTuPpvx4Lw1+MicPrMn2\neiRhVa3qnPzFwyUw5JzSGFvMsS36rVlMPA8BFDplxDel7/46FIAXwwg2dSWvbepP\n9Wh8YDB0x5tJHJj6/ejjO801VDdzycODxW3/OG8c6arnlT6EiHtj0bSpoMfV2wm/\nHxJUgke+ETHEiOFnyQU4jKY/C75JrtxeVFhK9+BB9IvnMieuvBRX6FsiwVWZnkqF\nHX4xWgcbszpKPIXWku7oWitZ1jsnLapxMvOB+CfHuQ0miiFzcplVDAc+V34nukuC\nAmbE9cfDJaCfwLrS/Q/PCnluy2DI9CSMzLrMyU87vCQGARJGplN6OFs/uC3la1Jl\nVsps+Mn+MEeczPXL9lnEvWUaE4VaoTfkO5YdEC61daEse9I588A8I2zEevf1yvpQ\nCBg2aayy7MWHK6niCWHoSfedL6/HD2gIZq7PMYc6yalAVax9IrA=\n=QSTI\n-----END PGP SIGNATURE-----", "payload": "tree 6e6501ab8d6cd2ca5d4e1a995bb7210e3e375d17\nparent 2bf5f77696504d86426162364a1e2f9ef8c29f02\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1681722029 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1682084073 +0200\n\nadd support for `// unset-exec-env` in compiletest\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4edba553c3999ae8b6204484be5e1460be30d741", "html_url": "https://github.com/rust-lang/rust/commit/4edba553c3999ae8b6204484be5e1460be30d741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4edba553c3999ae8b6204484be5e1460be30d741/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf5f77696504d86426162364a1e2f9ef8c29f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf5f77696504d86426162364a1e2f9ef8c29f02", "html_url": "https://github.com/rust-lang/rust/commit/2bf5f77696504d86426162364a1e2f9ef8c29f02"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "89df2b54de38ddd6c22040d4a4fc027265ac86b1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4edba553c3999ae8b6204484be5e1460be30d741/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edba553c3999ae8b6204484be5e1460be30d741/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=4edba553c3999ae8b6204484be5e1460be30d741", "patch": "@@ -90,6 +90,9 @@ pub struct TestProps {\n     pub unset_rustc_env: Vec<String>,\n     // Environment settings to use during execution\n     pub exec_env: Vec<(String, String)>,\n+    // Environment variables to unset prior to execution.\n+    // Variables are unset before applying 'exec_env'\n+    pub unset_exec_env: Vec<String>,\n     // Build documentation for all specified aux-builds as well\n     pub build_aux_docs: bool,\n     // Flag to force a crate to be built with the host architecture\n@@ -198,6 +201,7 @@ mod directives {\n     pub const AUX_CRATE: &'static str = \"aux-crate\";\n     pub const EXEC_ENV: &'static str = \"exec-env\";\n     pub const RUSTC_ENV: &'static str = \"rustc-env\";\n+    pub const UNSET_EXEC_ENV: &'static str = \"unset-exec-env\";\n     pub const UNSET_RUSTC_ENV: &'static str = \"unset-rustc-env\";\n     pub const FORBID_OUTPUT: &'static str = \"forbid-output\";\n     pub const CHECK_TEST_LINE_NUMBERS_MATCH: &'static str = \"check-test-line-numbers-match\";\n@@ -231,6 +235,7 @@ impl TestProps {\n             rustc_env: vec![],\n             unset_rustc_env: vec![],\n             exec_env: vec![],\n+            unset_exec_env: vec![],\n             build_aux_docs: false,\n             force_host: false,\n             check_stdout: false,\n@@ -382,6 +387,12 @@ impl TestProps {\n                     &mut self.exec_env,\n                     Config::parse_env,\n                 );\n+                config.push_name_value_directive(\n+                    ln,\n+                    UNSET_EXEC_ENV,\n+                    &mut self.unset_exec_env,\n+                    |r| r,\n+                );\n                 config.push_name_value_directive(\n                     ln,\n                     RUSTC_ENV,"}, {"sha": "e88074961a68395022b582cd9a0668a6e1cf50dd", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4edba553c3999ae8b6204484be5e1460be30d741/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edba553c3999ae8b6204484be5e1460be30d741/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4edba553c3999ae8b6204484be5e1460be30d741", "patch": "@@ -1613,8 +1613,13 @@ impl<'test> TestCx<'test> {\n                 test_client\n                     .args(&[\"run\", &support_libs.len().to_string(), &prog])\n                     .args(support_libs)\n-                    .args(args)\n-                    .envs(env.clone());\n+                    .args(args);\n+\n+                for key in &self.props.unset_exec_env {\n+                    test_client.env_remove(key);\n+                }\n+                test_client.envs(env.clone());\n+\n                 self.compose_and_run(\n                     test_client,\n                     self.config.run_lib_path.to_str().unwrap(),\n@@ -1626,7 +1631,13 @@ impl<'test> TestCx<'test> {\n                 let aux_dir = self.aux_output_dir_name();\n                 let ProcArgs { prog, args } = self.make_run_args();\n                 let mut wr_run = Command::new(\"wr-run\");\n-                wr_run.args(&[&prog]).args(args).envs(env.clone());\n+                wr_run.args(&[&prog]).args(args);\n+\n+                for key in &self.props.unset_exec_env {\n+                    wr_run.env_remove(key);\n+                }\n+                wr_run.envs(env.clone());\n+\n                 self.compose_and_run(\n                     wr_run,\n                     self.config.run_lib_path.to_str().unwrap(),\n@@ -1638,7 +1649,13 @@ impl<'test> TestCx<'test> {\n                 let aux_dir = self.aux_output_dir_name();\n                 let ProcArgs { prog, args } = self.make_run_args();\n                 let mut program = Command::new(&prog);\n-                program.args(args).current_dir(&self.output_base_dir()).envs(env.clone());\n+                program.args(args).current_dir(&self.output_base_dir());\n+\n+                for key in &self.props.unset_exec_env {\n+                    program.env_remove(key);\n+                }\n+                program.envs(env.clone());\n+\n                 self.compose_and_run(\n                     program,\n                     self.config.run_lib_path.to_str().unwrap(),"}]}