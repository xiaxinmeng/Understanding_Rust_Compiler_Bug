{"sha": "4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOGQ0YmRmNGI1ZjE4NWE2MDk2YzI5MTQ3ZGZmN2QyZDNkYWE3ZDc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T12:22:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:46Z"}, "message": "Use () for all_traits.", "tree": {"sha": "80054eab2bf98b077e39bfa10a540dbf675c2bf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80054eab2bf98b077e39bfa10a540dbf675c2bf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "html_url": "https://github.com/rust-lang/rust/commit/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "html_url": "https://github.com/rust-lang/rust/commit/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "1754ab84a553dad3f28a7b529facf36b906434b3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "patch": "@@ -1420,7 +1420,7 @@ rustc_queries! {\n     /// A vector of every trait accessible in the whole crate\n     /// (i.e., including those from subcrates). This is used only for\n     /// error reporting.\n-    query all_traits(_: CrateNum) -> &'tcx [DefId] {\n+    query all_traits(_: ()) -> &'tcx [DefId] {\n         desc { \"fetching all foreign and local traits\" }\n     }\n "}, {"sha": "db396356d67111adc9ed9175f5bbc49d745e33df", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "patch": "@@ -14,7 +14,7 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n@@ -1427,7 +1427,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             self.tcx.find_map_relevant_impl(trait_def_id, trait_ref.skip_binder().self_ty(), Some)\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n-        let all_traits = self.tcx.all_traits(LOCAL_CRATE);\n+        let all_traits = self.tcx.all_traits(());\n         let traits_with_same_path: std::collections::BTreeSet<_> = all_traits\n             .iter()\n             .filter(|trait_def_id| **trait_def_id != trait_ref.def_id())"}, {"sha": "2320a29e6d823a8c362fcd82638c0b4ae3a5c482", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::intravisit;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n@@ -1440,11 +1440,11 @@ impl Ord for TraitInfo {\n \n /// Retrieves all traits in this crate and any dependent crates.\n pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n-    tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n+    tcx.all_traits(()).iter().map(|&def_id| TraitInfo { def_id }).collect()\n }\n \n /// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n+fn compute_all_traits(tcx: TyCtxt<'_>, (): ()) -> &[DefId] {\n     use hir::itemlikevisit;\n \n     let mut traits = vec![];\n@@ -1503,14 +1503,11 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n         handle_external_res(tcx, &mut traits, &mut external_mods, Res::Def(DefKind::Mod, def_id));\n     }\n \n-    traits\n+    tcx.arena.alloc_from_iter(traits)\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.all_traits = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        &tcx.arena.alloc(compute_all_traits(tcx))[..]\n-    }\n+    providers.all_traits = compute_all_traits;\n }\n \n struct UsePlacementFinder<'tcx> {"}, {"sha": "fd4274863efa451a84da8f8973fe2d5c446f931e", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "patch": "@@ -1,6 +1,5 @@\n use crate::rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_hir as hir;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits;\n use rustc_middle::ty::subst::Subst;\n@@ -20,7 +19,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n \n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n-        for &trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n+        for &trait_def_id in self.cx.tcx.all_traits(()).iter() {\n             if !self.cx.cache.access_levels.is_public(trait_def_id)\n                 || self.cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n             {"}, {"sha": "f7980c66c3256ecfcdb4b5835d4f61a851929d8f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::HirId;\n use rustc_hir::{\n     intravisit::{self, NestedVisitorMap, Visitor},\n@@ -371,7 +371,7 @@ crate fn run_global_ctxt(\n         impl_trait_bounds: Default::default(),\n         generated_synthetics: Default::default(),\n         auto_traits: tcx\n-            .all_traits(LOCAL_CRATE)\n+            .all_traits(())\n             .iter()\n             .cloned()\n             .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))"}, {"sha": "564408768f72d451c2fe9c8d28696f2ec55752e7", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "patch": "@@ -4,7 +4,7 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::DefIdTree;\n use rustc_span::symbol::sym;\n \n@@ -56,7 +56,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     // `tcx.crates()` doesn't include the local crate, and `tcx.all_trait_implementations`\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     let mut extra_attrs = Vec::new();\n-    for &trait_did in cx.tcx.all_traits(LOCAL_CRATE).iter() {\n+    for &trait_did in cx.tcx.all_traits(()).iter() {\n         for &impl_did in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = impl_did.to_def_id();\n             cx.tcx.sess.prof.generic_activity(\"build_local_trait_impl\").run(|| {"}]}