{"sha": "fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYjEyZjNlMGVjZjgyN2QxMGY4MWJhNGRkMDgyNGEzYmRjZTFjOTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-21T18:27:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T18:27:23Z"}, "message": "Merge #3672\n\n3672: gen_assists_docs skip hidden files r=JoshMcguigan a=JoshMcguigan\n\nFixes #3670 \r\n\r\nSkips hidden files when generating assist docs, which fixes an issue where the tests would fail while an editor has created a temp file in the assists directory.\r\n\r\nThere is similar logic [here](https://github.com/rust-analyzer/rust-analyzer/blob/2720e2374be951bb762ff2815dd67c7ffe3419b7/xtask/tests/tidy-tests/main.rs#L157), although in that case the `DirEntry` is a `walkdir::DirEntry` rather than a `fs::DirEntry`. Also, it's not immediately clear that it is worth moving this functionality to somewhere accessible from both of these places and creating dependencies in this way. Let me know if this is off the mark.\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "31d89ca9d79afa29c54d30e3a9fa2679d44bd976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d89ca9d79afa29c54d30e3a9fa2679d44bd976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedlyLCRBK7hj4Ov3rIwAAdHIIAIhXFMEOM8E5Ag6xFAWKw1Nq\nCL2INQ53teEcpBnPdPJWkxIExd9y+/obFg2T1twi7KbvSubDRclcipgs1vGQxQpg\nz4M4w7g+yBqgE0mR79jIKepNjQ33NX0vUS8tewzOrx+4UsoVoyP4uXk/aSUjfBC1\nq8gNk5+F/jqyHv6Rm20B+BfPBM8Nti/ipcWNjXKIlmSUCL70WAdIfW/9rtBDni5H\n4+D67sx+mswwmGBpvmJzgkAJ4lMFwEVoqtoF6guoFHULqCZ8FL8HimiXIJ4nAsax\n7+n1mnst+zwrpyWtFbec0zT4++nHiiX854nqZ2wkeLOstby6KXun5T2iCTOw36Q=\n=8vn7\n-----END PGP SIGNATURE-----\n", "payload": "tree 31d89ca9d79afa29c54d30e3a9fa2679d44bd976\nparent a2b5fbb07660f192166f96523680ea31c470736a\nparent 90c66470f9d87fd61a9d80b6f29e53e85a0a340e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584815243 +0000\ncommitter GitHub <noreply@github.com> 1584815243 +0000\n\nMerge #3672\n\n3672: gen_assists_docs skip hidden files r=JoshMcguigan a=JoshMcguigan\n\nFixes #3670 \r\n\r\nSkips hidden files when generating assist docs, which fixes an issue where the tests would fail while an editor has created a temp file in the assists directory.\r\n\r\nThere is similar logic [here](https://github.com/rust-analyzer/rust-analyzer/blob/2720e2374be951bb762ff2815dd67c7ffe3419b7/xtask/tests/tidy-tests/main.rs#L157), although in that case the `DirEntry` is a `walkdir::DirEntry` rather than a `fs::DirEntry`. Also, it's not immediately clear that it is worth moving this functionality to somewhere accessible from both of these places and creating dependencies in this way. Let me know if this is off the mark.\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "html_url": "https://github.com/rust-lang/rust/commit/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b5fbb07660f192166f96523680ea31c470736a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b5fbb07660f192166f96523680ea31c470736a", "html_url": "https://github.com/rust-lang/rust/commit/a2b5fbb07660f192166f96523680ea31c470736a"}, {"sha": "90c66470f9d87fd61a9d80b6f29e53e85a0a340e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c66470f9d87fd61a9d80b6f29e53e85a0a340e", "html_url": "https://github.com/rust-lang/rust/commit/90c66470f9d87fd61a9d80b6f29e53e85a0a340e"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "31d606535fb08feb79e8764bc455a9b0f46929c1", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "patch": "@@ -4,7 +4,7 @@ use std::{fs, path::Path};\n \n use crate::{\n     codegen::{self, extract_comment_blocks_with_empty_lines, Mode},\n-    project_root, Result,\n+    project_root, rust_files, Result,\n };\n \n pub fn generate_assists_docs(mode: Mode) -> Result<()> {\n@@ -46,12 +46,8 @@ fn reveal_hash_comments(text: &str) -> String {\n \n fn collect_assists() -> Result<Vec<Assist>> {\n     let mut res = Vec::new();\n-    for entry in fs::read_dir(project_root().join(codegen::ASSISTS_DIR))? {\n-        let entry = entry?;\n-        let path = entry.path();\n-        if path.is_file() {\n-            collect_file(&mut res, path.as_path())?;\n-        }\n+    for path in rust_files(&project_root().join(codegen::ASSISTS_DIR)) {\n+        collect_file(&mut res, path.as_path())?;\n     }\n     res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n     return Ok(res);"}, {"sha": "4f01f84fb4100461df02e1c55103b8af082c90a3", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "patch": "@@ -17,6 +17,7 @@ use std::{\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n+use walkdir::{DirEntry, WalkDir};\n \n use crate::{\n     codegen::Mode,\n@@ -37,6 +38,21 @@ pub fn project_root() -> PathBuf {\n     .to_path_buf()\n }\n \n+pub fn rust_files(path: &Path) -> impl Iterator<Item = PathBuf> {\n+    let iter = WalkDir::new(path);\n+    return iter\n+        .into_iter()\n+        .filter_entry(|e| !is_hidden(e))\n+        .map(|e| e.unwrap())\n+        .filter(|e| !e.file_type().is_dir())\n+        .map(|e| e.into_path())\n+        .filter(|path| path.extension().map(|it| it == \"rs\").unwrap_or(false));\n+\n+    fn is_hidden(entry: &DirEntry) -> bool {\n+        entry.file_name().to_str().map(|s| s.starts_with('.')).unwrap_or(false)\n+    }\n+}\n+\n pub fn run_rustfmt(mode: Mode) -> Result<()> {\n     let _dir = pushd(project_root());\n     ensure_rustfmt()?;"}, {"sha": "80911a68e8b72481a1e5169c6fd83285db912fbe", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "patch": "@@ -5,13 +5,12 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use walkdir::{DirEntry, WalkDir};\n-use xtask::{not_bash::fs2, project_root};\n+use xtask::{not_bash::fs2, project_root, rust_files};\n \n #[test]\n fn rust_files_are_tidy() {\n     let mut tidy_docs = TidyDocs::default();\n-    for path in rust_files() {\n+    for path in rust_files(&project_root().join(\"crates\")) {\n         let text = fs2::read_to_string(&path).unwrap();\n         check_todo(&path, &text);\n         check_trailing_ws(&path, &text);\n@@ -142,19 +141,3 @@ fn is_exclude_dir(p: &Path, dirs_to_exclude: &[&str]) -> bool {\n \n     false\n }\n-\n-fn rust_files() -> impl Iterator<Item = PathBuf> {\n-    let crates = project_root().join(\"crates\");\n-    let iter = WalkDir::new(crates);\n-    return iter\n-        .into_iter()\n-        .filter_entry(|e| !is_hidden(e))\n-        .map(|e| e.unwrap())\n-        .filter(|e| !e.file_type().is_dir())\n-        .map(|e| e.into_path())\n-        .filter(|path| path.extension().map(|it| it == \"rs\").unwrap_or(false));\n-\n-    fn is_hidden(entry: &DirEntry) -> bool {\n-        entry.file_name().to_str().map(|s| s.starts_with('.')).unwrap_or(false)\n-    }\n-}"}]}