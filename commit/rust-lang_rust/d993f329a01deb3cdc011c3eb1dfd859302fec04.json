{"sha": "d993f329a01deb3cdc011c3eb1dfd859302fec04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OTNmMzI5YTAxZGViM2NkYzAxMWMzZWIxZGZkODU5MzAyZmVjMDQ=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-01-04T22:46:01Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-01-10T20:14:19Z"}, "message": "Basic DocumentHighlightKind support for assignments", "tree": {"sha": "4ee64d1bd29b793cf5d9cff1f712cc02077b490a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee64d1bd29b793cf5d9cff1f712cc02077b490a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d993f329a01deb3cdc011c3eb1dfd859302fec04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d993f329a01deb3cdc011c3eb1dfd859302fec04", "html_url": "https://github.com/rust-lang/rust/commit/d993f329a01deb3cdc011c3eb1dfd859302fec04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d993f329a01deb3cdc011c3eb1dfd859302fec04/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19eb7fa1db7da8417314ddfafe7addbbd9c3b46a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19eb7fa1db7da8417314ddfafe7addbbd9c3b46a", "html_url": "https://github.com/rust-lang/rust/commit/19eb7fa1db7da8417314ddfafe7addbbd9c3b46a"}], "stats": {"total": 124, "additions": 107, "deletions": 17}, "files": [{"sha": "837315ca702ed8bec5acf8987989cd3280ecac88", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=d993f329a01deb3cdc011c3eb1dfd859302fec04", "patch": "@@ -75,7 +75,7 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayKind},\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n-    references::{Reference, ReferenceKind, ReferenceSearchResult, SearchScope},\n+    references::{Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope},\n     runnables::{Runnable, RunnableKind},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     syntax_highlighting::HighlightedRange,"}, {"sha": "b9d8a6b1eea99132028c2118333da91652e2f333", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 68, "deletions": 5, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=d993f329a01deb3cdc011c3eb1dfd859302fec04", "patch": "@@ -19,8 +19,8 @@ use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{\n-    algo::find_node_at_offset, ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextUnit,\n-    TokenAtOffset,\n+    algo::find_node_at_offset, ast, match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode,\n+    TextUnit, TokenAtOffset,\n };\n \n use crate::{\n@@ -46,6 +46,7 @@ pub struct ReferenceSearchResult {\n pub struct Reference {\n     pub file_range: FileRange,\n     pub kind: ReferenceKind,\n+    pub access: Option<ReferenceAccess>,\n }\n \n #[derive(Debug, Clone, PartialEq)]\n@@ -54,6 +55,12 @@ pub enum ReferenceKind {\n     Other,\n }\n \n+#[derive(Debug, Clone, PartialEq)]\n+pub enum ReferenceAccess {\n+    Read,\n+    Write,\n+}\n+\n impl ReferenceSearchResult {\n     pub fn declaration(&self) -> &NavigationTarget {\n         &self.declaration\n@@ -72,7 +79,7 @@ impl ReferenceSearchResult {\n }\n \n // allow turning ReferenceSearchResult into an iterator\n-// over FileRanges\n+// over References\n impl IntoIterator for ReferenceSearchResult {\n     type Item = Reference;\n     type IntoIter = std::vec::IntoIter<Reference>;\n@@ -85,6 +92,7 @@ impl IntoIterator for ReferenceSearchResult {\n                 range: self.declaration.range(),\n             },\n             kind: self.declaration_kind,\n+            access: None,\n         });\n         v.append(&mut self.references);\n         v.into_iter()\n@@ -201,7 +209,13 @@ fn process_definition(\n                         } else {\n                             ReferenceKind::Other\n                         };\n-                        refs.push(Reference { file_range: FileRange { file_id, range }, kind });\n+                        let access = access_mode(d.kind, &name_ref);\n+\n+                        refs.push(Reference {\n+                            file_range: FileRange { file_id, range },\n+                            kind,\n+                            access,\n+                        });\n                     }\n                 }\n             }\n@@ -210,11 +224,46 @@ fn process_definition(\n     refs\n }\n \n+fn access_mode(kind: NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n+    match kind {\n+        NameKind::Local(_) | NameKind::Field(_) => {\n+            //LetExpr or BinExpr\n+            name_ref.syntax().ancestors().find_map(|node| {\n+                match_ast! {\n+                    match (node) {\n+                        ast::BinExpr(expr) => {\n+                            match expr.op_kind() {\n+                                Some(kind) if kind.is_assignment() => {\n+                                    if let Some(lhs) = expr.lhs() {\n+                                        if lhs.syntax().text_range() == name_ref.syntax().text_range() {\n+                                            return Some(ReferenceAccess::Write);\n+                                        }\n+                                    }\n+\n+                                    if let Some(rhs) = expr.rhs() {\n+                                        if rhs.syntax().text_range().is_subrange(&name_ref.syntax().text_range()) {\n+                                            return Some(ReferenceAccess::Read);\n+                                        }\n+                                    }\n+                                },\n+                                _ => { return Some(ReferenceAccess::Read) },\n+                            }\n+                            None\n+                        },\n+                        _ => {None}\n+                    }\n+                }\n+            })\n+        }\n+        _ => None,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::{\n         mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n-        Reference, ReferenceKind, ReferenceSearchResult, SearchScope,\n+        Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope,\n     };\n \n     #[test]\n@@ -515,6 +564,20 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_basic_highlight_read() {\n+        let code = r#\"\n+        fn foo() {\n+            let i<|> = 0;\n+            i = i + 1;\n+        }\"#;\n+\n+        let refs = get_all_refs(code);\n+        assert_eq!(refs.len(), 3);\n+        assert_eq!(refs.references[0].access, Some(ReferenceAccess::Write));\n+        assert_eq!(refs.references[1].access, Some(ReferenceAccess::Read));\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position, None).unwrap().unwrap()"}, {"sha": "1b93195d7c6545efee371387497f6c0c7ac418c8", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=d993f329a01deb3cdc011c3eb1dfd859302fec04", "patch": "@@ -9,7 +9,7 @@ use lsp_types::{\n use ra_ide::{\n     translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n     FileRange, FileSystemEdit, Fold, FoldKind, InsertTextFormat, LineCol, LineIndex,\n-    NavigationTarget, RangeInfo, Severity, SourceChange, SourceFileEdit,\n+    NavigationTarget, RangeInfo, ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n@@ -53,6 +53,18 @@ impl Conv for SyntaxKind {\n     }\n }\n \n+impl Conv for ReferenceAccess {\n+    type Output = ::lsp_types::DocumentHighlightKind;\n+\n+    fn conv(self) -> Self::Output {\n+        use lsp_types::DocumentHighlightKind::*;\n+        match self {\n+            ReferenceAccess::Read => Read,\n+            ReferenceAccess::Write => Write,\n+        }\n+    }\n+}\n+\n impl Conv for CompletionItemKind {\n     type Output = ::lsp_types::CompletionItemKind;\n "}, {"sha": "a592f0a1266bd15358122a8648ba50c5e3e43494", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d993f329a01deb3cdc011c3eb1dfd859302fec04", "patch": "@@ -536,18 +536,32 @@ pub fn handle_references(\n \n     let locations = if params.context.include_declaration {\n         refs.into_iter()\n-            .filter_map(|r| {\n-                let line_index = world.analysis().file_line_index(r.file_range.file_id).ok()?;\n-                to_location(r.file_range.file_id, r.file_range.range, &world, &line_index).ok()\n+            .filter_map(|reference| {\n+                let line_index =\n+                    world.analysis().file_line_index(reference.file_range.file_id).ok()?;\n+                to_location(\n+                    reference.file_range.file_id,\n+                    reference.file_range.range,\n+                    &world,\n+                    &line_index,\n+                )\n+                .ok()\n             })\n             .collect()\n     } else {\n         // Only iterate over the references if include_declaration was false\n         refs.references()\n             .iter()\n-            .filter_map(|r| {\n-                let line_index = world.analysis().file_line_index(r.file_range.file_id).ok()?;\n-                to_location(r.file_range.file_id, r.file_range.range, &world, &line_index).ok()\n+            .filter_map(|reference| {\n+                let line_index =\n+                    world.analysis().file_line_index(reference.file_range.file_id).ok()?;\n+                to_location(\n+                    reference.file_range.file_id,\n+                    reference.file_range.range,\n+                    &world,\n+                    &line_index,\n+                )\n+                .ok()\n             })\n             .collect()\n     };\n@@ -836,10 +850,10 @@ pub fn handle_document_highlight(\n \n     Ok(Some(\n         refs.into_iter()\n-            .filter(|r| r.file_range.file_id == file_id)\n-            .map(|r| DocumentHighlight {\n-                range: r.file_range.range.conv_with(&line_index),\n-                kind: None,\n+            .filter(|reference| reference.file_range.file_id == file_id)\n+            .map(|reference| DocumentHighlight {\n+                range: reference.file_range.range.conv_with(&line_index),\n+                kind: reference.access.map(|it| it.conv()),\n             })\n             .collect(),\n     ))"}, {"sha": "3dfecfe762599fc85a984a9db05032d58145a599", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d993f329a01deb3cdc011c3eb1dfd859302fec04/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=d993f329a01deb3cdc011c3eb1dfd859302fec04", "patch": "@@ -144,6 +144,7 @@ impl BinOp {\n         }\n     }\n }\n+\n impl ast::BinExpr {\n     pub fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n         self.syntax().children_with_tokens().filter_map(|it| it.into_token()).find_map(|c| {"}]}