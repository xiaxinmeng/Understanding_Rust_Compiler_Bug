{"sha": "4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZjZiNGQzYjRlYTVjZDIzMWFiOTZkODJmNWY4Y2Q3OTRlMGIyYzM=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-18T00:40:40Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-18T00:45:07Z"}, "message": "Tasks should not hold a ref to their parent (Close #1789)", "tree": {"sha": "3f9ca49a7c78422148869b50df72f999c706cbe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f9ca49a7c78422148869b50df72f999c706cbe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "html_url": "https://github.com/rust-lang/rust/commit/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d930d717e5f4557e47c9fd5bdca62a92f5cc8c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/d930d717e5f4557e47c9fd5bdca62a92f5cc8c38", "html_url": "https://github.com/rust-lang/rust/commit/d930d717e5f4557e47c9fd5bdca62a92f5cc8c38"}], "stats": {"total": 82, "additions": 24, "deletions": 58}, "files": [{"sha": "7a23f0c3e0b4daeea3138c97ab95e55c5bd208e2", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "patch": "@@ -19,7 +19,6 @@ type rust_cond_lock = *libc::c_void;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    fn unsupervise();\n     pure fn shape_log_str(t: *sys::type_desc, data: *()) -> ~str;\n \n     fn rust_create_cond_lock() -> rust_cond_lock;"}, {"sha": "7f798dcf0479889e72adc35f207c37b8c252356d", "filename": "src/libcore/task.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "patch": "@@ -731,8 +731,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) {\n             // Getting killed after here would leak the task.\n \n             let child_wrapper =\n-                make_child_wrapper(new_task, child_tg,\n-                                   opts.supervise, is_main, f);\n+                make_child_wrapper(new_task, child_tg, is_main, f);\n             let fptr = ptr::addr_of(child_wrapper);\n             let closure: *rust_closure = unsafe::reinterpret_cast(fptr);\n \n@@ -750,19 +749,14 @@ fn spawn_raw(opts: task_opts, +f: fn~()) {\n     }\n \n     fn make_child_wrapper(child_task: *rust_task, -child_tg: taskgroup_arc,\n-                          supervise: bool, is_main: bool,\n-                          -f: fn~()) -> fn~() {\n+                          is_main: bool, -f: fn~()) -> fn~() {\n         let child_tg_ptr = ~mut some(child_tg);\n         fn~() {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n             let mut child_tg_opt = none;\n             *child_tg_ptr <-> child_tg_opt;\n             let child_tg = option::unwrap(child_tg_opt);\n             // Child task runs this code.\n-            if !supervise {\n-                // FIXME (#1868, #1789) take this out later\n-                rustrt::unsupervise();\n-            }\n             // Set up membership in taskgroup. If this returns none, the\n             // parent was already failing, so don't bother doing anything.\n             alt enlist_in_taskgroup(child_tg, child_task) {\n@@ -1018,7 +1012,6 @@ extern mod rustrt {\n     fn start_task(task: *rust_task, closure: *rust_closure);\n \n     fn rust_task_is_unwinding(task: *rust_task) -> bool;\n-    fn unsupervise();\n     fn rust_osmain_sched_id() -> sched_id;\n     fn rust_task_inhibit_kill();\n     fn rust_task_allow_kill();\n@@ -1464,6 +1457,21 @@ fn test_unkillable_nested() {\n     po.recv();\n }\n \n+#[test]\n+fn test_child_doesnt_ref_parent() {\n+    // If the child refcounts the parent task, this will stack overflow when\n+    // climbing the task tree to dereference each ancestor. (See #1789)\n+    const generations: uint = 8192;\n+    fn child_no(x: uint) -> fn~() {\n+        ret || {\n+            if x < generations {\n+                task::spawn(child_no(x+1));\n+            }\n+        }\n+    }\n+    task::spawn(child_no(0));\n+}\n+\n #[test]\n fn test_tls_multitask() unsafe {\n     fn my_key(+_x: @~str) { }"}, {"sha": "f86e9232625ce903c0b6fd5bf591e5434032d63a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "patch": "@@ -129,8 +129,7 @@ rust_env_pairs() {\n \n extern \"C\" CDECL void\n unsupervise() {\n-    rust_task *task = rust_get_current_task();\n-    task->unsupervise();\n+    // FIXME(#1789): bblum: remove this; requires a snapshot\n }\n \n extern \"C\" CDECL void"}, {"sha": "1fbc0c1e07c52f71f29a6c4901c3e34a884c1971", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "patch": "@@ -76,9 +76,6 @@ rust_sched_loop::kill_all_tasks() {\n     while (!all_tasks.empty()) {\n         rust_task *task = all_tasks.back();\n         all_tasks.pop_back();\n-        // We don't want the failure of these tasks to propagate back\n-        // to the kernel again since we're already failing everything\n-        task->unsupervise();\n         task->kill();\n     }\n }\n@@ -261,9 +258,9 @@ rust_sched_loop::create_task(rust_task *spawner, const char *name) {\n     rust_task *task =\n         new (this->kernel, \"rust_task\")\n         rust_task(this, task_state_newborn,\n-                  spawner, name, kernel->env->min_stack_size);\n+                  name, kernel->env->min_stack_size);\n     DLOG(this, task, \"created task: \" PTR \", spawner: %s, name: %s\",\n-                        task, spawner ? spawner->name : \"null\", name);\n+                        task, spawner ? spawner->name : \"(none)\", name);\n \n     task->id = kernel->generate_task_id();\n     return task;"}, {"sha": "84984d499e9a5396b74455096987d5ccb180b3fc", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "patch": "@@ -10,12 +10,9 @@\n #include \"rust_env.h\"\n #include \"rust_port.h\"\n \n-// FIXME (#1789) (bblum): get rid of supervisors\n-\n // Tasks\n rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n-                     rust_task *spawner, const char *name,\n-                     size_t init_stack_sz) :\n+                     const char *name, size_t init_stack_sz) :\n     ref_count(1),\n     id(0),\n     notify_enabled(false),\n@@ -30,7 +27,6 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     local_region(&sched_loop->local_region),\n     boxed(sched_loop->kernel->env, &local_region),\n     unwinding(false),\n-    propagate_failure(true),\n     cc_counter(0),\n     total_stack_sz(0),\n     task_local_data(NULL),\n@@ -45,17 +41,13 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     disallow_kill(0),\n     c_stack(NULL),\n     next_c_sp(0),\n-    next_rust_sp(0),\n-    supervisor(spawner)\n+    next_rust_sp(0)\n {\n     LOGPTR(sched_loop, \"new task\", (uintptr_t)this);\n     DLOG(sched_loop, task, \"sizeof(task) = %d (0x%x)\",\n          sizeof *this, sizeof *this);\n \n     new_stack(init_stack_sz);\n-    if (supervisor) {\n-        supervisor->ref();\n-    }\n }\n \n // NB: This does not always run on the task's scheduler thread\n@@ -65,15 +57,6 @@ rust_task::delete_this()\n     DLOG(sched_loop, task, \"~rust_task %s @0x%\" PRIxPTR \", refcnt=%d\",\n          name, (uintptr_t)this, ref_count);\n \n-    // FIXME (#2677): We should do this when the task exits, not in the\n-    // destructor\n-    {\n-        scoped_lock with(supervisor_lock);\n-        if (supervisor) {\n-            supervisor->deref();\n-        }\n-    }\n-\n     /* FIXME (#2677): tighten this up, there are some more\n        assertions that hold at task-lifecycle events. */\n     assert(ref_count == 0); // ||\n@@ -335,21 +318,6 @@ void rust_task::fail_sched_loop() {\n     sched_loop->fail();\n }\n \n-void\n-rust_task::unsupervise()\n-{\n-    scoped_lock with(supervisor_lock);\n-    if (supervisor) {\n-        DLOG(sched_loop, task,\n-             \"task %s @0x%\" PRIxPTR\n-             \" disconnecting from supervisor %s @0x%\" PRIxPTR,\n-             name, this, supervisor->name, supervisor);\n-        supervisor->deref();\n-    }\n-    supervisor = NULL;\n-    propagate_failure = false;\n-}\n-\n frame_glue_fns*\n rust_task::get_frame_glue_fns(uintptr_t fp) {\n     fp -= sizeof(uintptr_t);"}, {"sha": "cae058d7227d26b8e0c0892b831ad5f80a2d357e", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=4cf6b4d3b4ea5cd231ab96d82f5f8cd794e0b2c3", "patch": "@@ -122,6 +122,8 @@ rust_task_fail(rust_task *task,\n struct\n rust_task : public kernel_owned<rust_task>\n {\n+    // FIXME(#1789) Refcounting no longer seems needed now that tasks don't\n+    // ref their parents. I'll leave it in just in case... -- bblum\n     RUST_ATOMIC_REFCOUNT();\n \n     rust_task_id id;\n@@ -193,9 +195,6 @@ rust_task : public kernel_owned<rust_task>\n \n     rust_port_selector port_selector;\n \n-    lock_and_signal supervisor_lock;\n-    rust_task *supervisor;     // Parent-link for failure propagation.\n-\n     // Called when the atomic refcount reaches zero\n     void delete_this();\n \n@@ -237,7 +236,6 @@ rust_task : public kernel_owned<rust_task>\n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_sched_loop *sched_loop,\n               rust_task_state state,\n-              rust_task *spawner,\n               const char *name,\n               size_t init_stack_sz);\n \n@@ -279,9 +277,6 @@ rust_task : public kernel_owned<rust_task>\n     // FIXME (#1868) (bblum): maybe this can be done at rust-level?\n     void fail_sched_loop();\n \n-    // Disconnect from our supervisor.\n-    void unsupervise();\n-\n     frame_glue_fns *get_frame_glue_fns(uintptr_t fp);\n \n     void *calloc(size_t size, const char *tag);"}]}