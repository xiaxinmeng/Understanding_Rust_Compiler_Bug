{"sha": "8ad7c0439cb1d54af7212915c6004be4a49c2f30", "node_id": "C_kwDOAAsO6NoAKDhhZDdjMDQzOWNiMWQ1NGFmNzIxMjkxNWM2MDA0YmU0YTQ5YzJmMzA", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-17T15:35:10Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-17T15:35:10Z"}, "message": "Remove needless clones", "tree": {"sha": "8f69b7aad0c2844f6346b7b9c530b45f61b3172e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f69b7aad0c2844f6346b7b9c530b45f61b3172e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad7c0439cb1d54af7212915c6004be4a49c2f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7c0439cb1d54af7212915c6004be4a49c2f30", "html_url": "https://github.com/rust-lang/rust/commit/8ad7c0439cb1d54af7212915c6004be4a49c2f30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7c0439cb1d54af7212915c6004be4a49c2f30/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9529626d040de186c5752a9cfdd49d43096bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9529626d040de186c5752a9cfdd49d43096bfc", "html_url": "https://github.com/rust-lang/rust/commit/fb9529626d040de186c5752a9cfdd49d43096bfc"}], "stats": {"total": 68, "additions": 25, "deletions": 43}, "files": [{"sha": "2449e4f3e22cc8279cb55167bf9baf3185e673d5", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad7c0439cb1d54af7212915c6004be4a49c2f30/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad7c0439cb1d54af7212915c6004be4a49c2f30/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=8ad7c0439cb1d54af7212915c6004be4a49c2f30", "patch": "@@ -148,7 +148,7 @@ impl ItemTree {\n         let loc = db.lookup_intern_block(block);\n         let block = loc.ast_id.to_node(db.upcast());\n         let hygiene = Hygiene::new(db.upcast(), loc.ast_id.file_id);\n-        let ctx = lower::Ctx::new(db, hygiene.clone(), loc.ast_id.file_id);\n+        let ctx = lower::Ctx::new(db, hygiene, loc.ast_id.file_id);\n         Arc::new(ctx.lower_block(&block))\n     }\n "}, {"sha": "de6afaef8e5f31781585ee997b45d4ced3d9be24", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad7c0439cb1d54af7212915c6004be4a49c2f30/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad7c0439cb1d54af7212915c6004be4a49c2f30/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=8ad7c0439cb1d54af7212915c6004be4a49c2f30", "patch": "@@ -78,7 +78,7 @@ fn highlight_references(\n     token: SyntaxToken,\n     file_id: FileId,\n ) -> Option<Vec<HighlightedRange>> {\n-    let defs = find_defs(sema, token.clone());\n+    let defs = find_defs(sema, token);\n     let usages = defs\n         .iter()\n         .filter_map(|&d| {"}, {"sha": "d765dcf366db4f2439ad60475df3ca4c349cfaa9", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8ad7c0439cb1d54af7212915c6004be4a49c2f30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad7c0439cb1d54af7212915c6004be4a49c2f30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=8ad7c0439cb1d54af7212915c6004be4a49c2f30", "patch": "@@ -151,7 +151,7 @@ fn extract_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Modul\n     let mut body_items: Vec<ast::Item> = node\n         .children()\n         .filter_map(|child| {\n-            if let Some(item) = ast::Item::cast(child.clone()) {\n+            if let Some(item) = ast::Item::cast(child) {\n                 if selection_range.contains_range(item.syntax().text_range()) {\n                     return Some(item);\n                 }\n@@ -312,20 +312,20 @@ impl Module {\n             get_replacements_for_visibilty_change(self.body_items.clone(), false);\n \n         let impl_items = impls.into_iter().fold(Vec::new(), |mut impl_items, x| {\n-            let this_impl_items =\n+            let mut this_impl_items =\n                 x.syntax().descendants().fold(Vec::new(), |mut this_impl_items, x| {\n-                    if let Some(item) = ast::Item::cast(x.clone()) {\n+                    if let Some(item) = ast::Item::cast(x) {\n                         this_impl_items.push(item);\n                     }\n                     return this_impl_items;\n                 });\n \n-            impl_items.append(&mut this_impl_items.clone());\n+            impl_items.append(&mut this_impl_items);\n             return impl_items;\n         });\n \n         let (_, mut impl_item_replacements, _, _) =\n-            get_replacements_for_visibilty_change(impl_items.clone(), true);\n+            get_replacements_for_visibilty_change(impl_items, true);\n \n         replacements.append(&mut impl_item_replacements);\n \n@@ -337,7 +337,7 @@ impl Module {\n                     .find(|x| x.to_string() == desc.to_string())\n                     .is_some();\n                 if is_record_field_present {\n-                    replacements.push((desc.visibility().clone(), desc.syntax().clone()));\n+                    replacements.push((desc.visibility(), desc.syntax().clone()));\n                 }\n             });\n         });\n@@ -472,7 +472,7 @@ impl Module {\n                 (&x.1).into_iter().for_each(|x| {\n                     let node_opt: Option<ast::Use> = find_node_at_range(file.syntax(), x.range);\n                     if let Some(node) = node_opt {\n-                        use_opt = Some(node.clone());\n+                        use_opt = Some(node);\n                     }\n                 });\n             }\n@@ -529,7 +529,7 @@ impl Module {\n         }\n \n         if let Some(use_tree_str) = use_tree_str_opt {\n-            let mut use_tree_str = use_tree_str.clone();\n+            let mut use_tree_str = use_tree_str;\n             use_tree_str.reverse();\n             if use_tree_str[0].to_string().contains(\"super\") {\n                 let super_path = make::ext::ident_path(\"super\");\n@@ -776,42 +776,24 @@ fn get_replacements_for_visibilty_change(\n         body_items.push(item.clone());\n         //Use stmts are ignored\n         match item {\n-            ast::Item::Const(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Enum(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::ExternCrate(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Fn(it) => replacements.push((it.visibility().clone(), it.syntax().clone())),\n+            ast::Item::Const(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Enum(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::ExternCrate(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Fn(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Impl(it) => impls.push(it),\n-            ast::Item::MacroRules(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::MacroDef(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Module(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Static(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n+            ast::Item::MacroRules(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::MacroDef(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Module(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Static(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Struct(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()));\n-                record_field_parents.push((it.visibility().clone(), it.syntax().clone()));\n-            }\n-            ast::Item::Trait(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::TypeAlias(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n+                replacements.push((it.visibility(), it.syntax().clone()));\n+                record_field_parents.push((it.visibility(), it.syntax().clone()));\n             }\n+            ast::Item::Trait(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::TypeAlias(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Union(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()));\n-                record_field_parents.push((it.visibility().clone(), it.syntax().clone()));\n+                replacements.push((it.visibility(), it.syntax().clone()));\n+                record_field_parents.push((it.visibility(), it.syntax().clone()));\n             }\n             _ => (),\n         }\n@@ -825,7 +807,7 @@ fn get_use_tree_paths_from_path(\n     use_tree_str: &mut Vec<ast::Path>,\n ) -> Option<&mut Vec<ast::Path>> {\n     path.syntax().ancestors().filter(|x| x.to_string() != path.to_string()).find_map(|x| {\n-        if let Some(use_tree) = ast::UseTree::cast(x.clone()) {\n+        if let Some(use_tree) = ast::UseTree::cast(x) {\n             if let Some(upper_tree_path) = use_tree.path() {\n                 if upper_tree_path.to_string() != path.to_string() {\n                     use_tree_str.push(upper_tree_path.clone());"}]}