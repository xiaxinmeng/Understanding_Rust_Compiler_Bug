{"sha": "7be8693984d32d2f65ce9ded4f65b6b7340bddce", "node_id": "C_kwDOAAsO6NoAKDdiZTg2OTM5ODRkMzJkMmY2NWNlOWRlZDRmNjViNmI3MzQwYmRkY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-16T11:19:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-16T11:19:21Z"}, "message": "Auto merge of #92805 - BoxyUwU:revert-lazy-anon-const-substs, r=lcnr\n\npartially revertish `lazily \"compute\" anon const default substs`\n\nreverts #87280 except for some of the changes around `ty::Unevaluated` having a visitor and a generic for promoted\nwhy revert: <https://github.com/rust-lang/rust/pull/92805#issuecomment-1010736049>\n\nr? `@lcnr`", "tree": {"sha": "5f9cec2bbb5a4332ab6d80c61dbcc2afb8c8eb23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f9cec2bbb5a4332ab6d80c61dbcc2afb8c8eb23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be8693984d32d2f65ce9ded4f65b6b7340bddce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be8693984d32d2f65ce9ded4f65b6b7340bddce", "html_url": "https://github.com/rust-lang/rust/commit/7be8693984d32d2f65ce9ded4f65b6b7340bddce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be8693984d32d2f65ce9ded4f65b6b7340bddce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42852d7857d2955f19ec333bec1ed107964db200", "url": "https://api.github.com/repos/rust-lang/rust/commits/42852d7857d2955f19ec333bec1ed107964db200", "html_url": "https://github.com/rust-lang/rust/commit/42852d7857d2955f19ec333bec1ed107964db200"}, {"sha": "3f3a10fa64278173718b1fb9ee9ae85b14380af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3a10fa64278173718b1fb9ee9ae85b14380af0", "html_url": "https://github.com/rust-lang/rust/commit/3f3a10fa64278173718b1fb9ee9ae85b14380af0"}], "stats": {"total": 1291, "additions": 405, "deletions": 886}, "files": [{"sha": "169de23facce2336cac470575c5245fbb38f1f61", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -171,7 +171,7 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         for (local, location) in drop_used {\n             if !live_locals.contains(&local) {\n                 let local_ty = self.cx.body.local_decls[local].ty;\n-                if local_ty.has_free_regions(self.cx.typeck.tcx()) {\n+                if local_ty.has_free_regions() {\n                     self.cx.add_drop_live_facts_for(local, local_ty, &[location], &locations);\n                 }\n             }"}, {"sha": "54365c3279b4af88721817e8b22cbf8192c1855c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n                             constant.literal.ty(),\n                             uv.def.did,\n-                            UserSubsts { substs: uv.substs(self.tcx()), user_self_ty: None },\n+                            UserSubsts { substs: uv.substs, user_self_ty: None },\n                         )),\n                     ) {\n                         span_mirbug!(\n@@ -1970,7 +1970,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         let predicates = self.prove_closure_bounds(\n                             tcx,\n                             def_id.expect_local(),\n-                            uv.substs(tcx),\n+                            uv.substs,\n                             location,\n                         );\n                         self.normalize_and_prove_instantiated_predicates("}, {"sha": "0c06c77472b9170e41ed462026877e374355542f", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -129,11 +129,13 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(uv) if fx.tcx.is_static(uv.def.did) => {\n-            assert!(uv.substs(fx.tcx).is_empty());\n-            assert!(uv.promoted.is_none());\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+            if fx.tcx.is_static(def.did) =>\n+        {\n+            assert!(substs.is_empty());\n+            assert!(promoted.is_none());\n \n-            return codegen_static_ref(fx, uv.def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {"}, {"sha": "d1cea147a7a709b653e9e6283313dcba9ac26050", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -507,7 +507,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         ty::Adt(def, ..) if !def.is_box() => {\n                             // Again, only create type information if full debuginfo is enabled\n                             if cx.sess().opts.debuginfo == DebugInfo::Full\n-                                && !impl_self_ty.definitely_needs_subst(cx.tcx)\n+                                && !impl_self_ty.needs_subst()\n                             {\n                                 Some(type_metadata(cx, impl_self_ty, rustc_span::DUMMY_SP))\n                             } else {"}, {"sha": "5ce4e606fd20b74c5410d5f176951ebad7974611", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1477,7 +1477,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 LocalRef::UnsizedPlace(_) => bug!(\"transmute must not involve unsized locals\"),\n                 LocalRef::Operand(None) => {\n                     let dst_layout = bx.layout_of(self.monomorphized_place_ty(dst.as_ref()));\n-                    assert!(!dst_layout.ty.has_erasable_regions(self.cx.tcx()));\n+                    assert!(!dst_layout.ty.has_erasable_regions());\n                     let place = PlaceRef::alloca(bx, dst_layout);\n                     place.storage_live(bx);\n                     self.codegen_transmute_into(bx, src, place);"}, {"sha": "814e4d626e119c8602afd886e7f56813a4ad81a9", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -209,7 +209,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         let mut allocate_local = |local| {\n             let decl = &mir.local_decls[local];\n             let layout = bx.layout_of(fx.monomorphize(decl.ty));\n-            assert!(!layout.ty.has_erasable_regions(cx.tcx()));\n+            assert!(!layout.ty.has_erasable_regions());\n \n             if local == mir::RETURN_PLACE && fx.fn_abi.ret.is_indirect() {\n                 debug!(\"alloc: {:?} (return place) -> place\", local);"}, {"sha": "e9c94c0cc434ccf73a8270d7cba68aaf1f1e0d9b", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -568,7 +568,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n             ty::ConstKind::Unevaluated(uv) => {\n-                let instance = self.resolve(uv.def, uv.substs(*self.tcx))?;\n+                let instance = self.resolve(uv.def, uv.substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n             }\n             ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {"}, {"sha": "3dde34a64103e98fa0bf591647bd10c41d437bac", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -9,7 +9,7 @@ where\n     T: TypeFoldable<'tcx>,\n {\n     debug!(\"ensure_monomorphic_enough: ty={:?}\", ty);\n-    if !ty.potentially_needs_subst() {\n+    if !ty.needs_subst() {\n         return Ok(());\n     }\n \n@@ -21,12 +21,8 @@ where\n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = FoundParam;\n \n-        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-            Some(self.tcx)\n-        }\n-\n         fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if !ty.potentially_needs_subst() {\n+            if !ty.needs_subst() {\n                 return ControlFlow::CONTINUE;\n             }\n \n@@ -44,7 +40,7 @@ where\n                         let is_used = unused_params.contains(index).map_or(true, |unused| !unused);\n                         // Only recurse when generic parameters in fns, closures and generators\n                         // are used and require substitution.\n-                        match (is_used, subst.definitely_needs_subst(self.tcx)) {\n+                        match (is_used, subst.needs_subst()) {\n                             // Just in case there are closures or generators within this subst,\n                             // recurse.\n                             (true, true) => return subst.super_visit_with(self),"}, {"sha": "b7665d149e4af7f71faec63ab7177ff88ae3dd8a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -347,7 +347,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n     fn check_local_or_return_ty(&mut self, ty: Ty<'tcx>, local: Local) {\n         let kind = self.body.local_kind(local);\n \n-        for ty in ty.walk(self.tcx) {\n+        for ty in ty.walk() {\n             let ty = match ty.unpack() {\n                 GenericArgKind::Type(ty) => ty,\n "}, {"sha": "cf939aaa73f64a0f3529d6eccf371e6b03909346", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -337,7 +337,7 @@ where\n \n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted }) = ct.val {\n+        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {\n             // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n             // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n             // check performed after the promotion. Verify that with an assertion."}, {"sha": "ac282a5ecc82c281454dcc0c83a31a4662bd7f3d", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -843,17 +843,13 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             ty,\n                             val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                                 def,\n-                                substs_: Some(InternalSubsts::for_item(\n-                                    tcx,\n-                                    def.did,\n-                                    |param, _| {\n-                                        if let ty::GenericParamDefKind::Lifetime = param.kind {\n-                                            tcx.lifetimes.re_erased.into()\n-                                        } else {\n-                                            tcx.mk_param_from_def(param)\n-                                        }\n-                                    },\n-                                )),\n+                                substs: InternalSubsts::for_item(tcx, def.did, |param, _| {\n+                                    if let ty::GenericParamDefKind::Lifetime = param.kind {\n+                                        tcx.lifetimes.re_erased.into()\n+                                    } else {\n+                                        tcx.mk_param_from_def(param)\n+                                    }\n+                                }),\n                                 promoted: Some(promoted_id),\n                             }),\n                         })\n@@ -969,7 +965,6 @@ pub fn promote_candidates<'tcx>(\n         scope.parent_scope = None;\n \n         let promoted = Body::new(\n-            tcx,\n             body.source, // `promoted` gets filled in below\n             IndexVec::new(),\n             IndexVec::from_elem_n(scope, 1),"}, {"sha": "0e267179e309978837f9a9c8844cb9ade385257d", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -470,7 +470,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     {\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::NEEDS_INFER |\n-            TypeFlags::HAS_POTENTIAL_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_POTENTIAL_FREE_REGIONS`\n+            TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`\n             TypeFlags::HAS_TY_PLACEHOLDER |\n             TypeFlags::HAS_CT_PLACEHOLDER\n         } else {"}, {"sha": "a77fd8fae8d20d059cbfc110d90bda00580111d9", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -129,8 +129,6 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     where\n         R: ConstEquateRelation<'tcx>,\n     {\n-        let a = self.tcx.expose_default_const_substs(a);\n-        let b = self.tcx.expose_default_const_substs(b);\n         debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n         if a == b {\n             return Ok(a);\n@@ -746,9 +744,10 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(uv) if self.tcx().lazy_normalization() => {\n-                assert_eq!(uv.promoted, None);\n-                let substs = uv.substs(self.tcx());\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+                if self.tcx().lazy_normalization() =>\n+            {\n+                assert_eq!(promoted, None);\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -757,7 +756,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 )?;\n                 Ok(self.tcx().mk_const(ty::Const {\n                     ty: c.ty,\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(uv.def, substs)),\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n@@ -991,9 +990,10 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(uv) if self.tcx().lazy_normalization() => {\n-                assert_eq!(uv.promoted, None);\n-                let substs = uv.substs(self.tcx());\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+                if self.tcx().lazy_normalization() =>\n+            {\n+                assert_eq!(promoted, None);\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -1002,7 +1002,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 )?;\n                 Ok(self.tcx().mk_const(ty::Const {\n                     ty: c.ty,\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(uv.def, substs)),\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),"}, {"sha": "6e6012fdc1a60a44dfdaaaa25115fdd086f11d49", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1549,10 +1549,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n-            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-                Some(self.tcx)\n-            }\n-\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);"}, {"sha": "4e2946bb2f910632c73cd793bb8e0869b2f1cd71", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> FindHirNodeVisitor<'a, 'tcx> {\n \n     fn node_ty_contains_target(&self, hir_id: HirId) -> Option<Ty<'tcx>> {\n         self.node_type_opt(hir_id).map(|ty| self.infcx.resolve_vars_if_possible(ty)).filter(|ty| {\n-            ty.walk(self.infcx.tcx).any(|inner| {\n+            ty.walk().any(|inner| {\n                 inner == self.target\n                     || match (inner.unpack(), self.target.unpack()) {\n                         (GenericArgKind::Type(inner_ty), GenericArgKind::Type(target_ty)) => {\n@@ -445,9 +445,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             parent: None,\n                         }\n                     }\n-                    ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                        substs_: Some(substs), ..\n-                    }) => {\n+                    ty::ConstKind::Unevaluated(ty::Unevaluated { substs, .. }) => {\n                         assert!(substs.has_infer_types_or_consts());\n \n                         // FIXME: We only use the first inference variable we encounter in"}, {"sha": "87d79b1344421c8100557475b08c7ebfc41a8501", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -558,12 +558,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n pub(super) struct TraitObjectVisitor(pub(super) FxHashSet<DefId>);\n \n impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        // The default anon const substs cannot include\n-        // trait objects, so we don't have to bother looking.\n-        None\n-    }\n-\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Dynamic(preds, RegionKind::ReStatic) => {"}, {"sha": "cd6b51195e491ff8a97add3c848698ff561d0ce1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -80,26 +80,21 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         // Mark all unnamed regions in the type with a number.\n         // This diagnostic is called in response to lifetime errors, so be informative.\n-        struct HighlightBuilder<'tcx> {\n+        struct HighlightBuilder {\n             highlight: RegionHighlightMode,\n-            tcx: TyCtxt<'tcx>,\n             counter: usize,\n         }\n \n-        impl<'tcx> HighlightBuilder<'tcx> {\n-            fn build(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> RegionHighlightMode {\n+        impl HighlightBuilder {\n+            fn build(ty: Ty<'_>) -> RegionHighlightMode {\n                 let mut builder =\n-                    HighlightBuilder { highlight: RegionHighlightMode::default(), counter: 1, tcx };\n+                    HighlightBuilder { highlight: RegionHighlightMode::default(), counter: 1 };\n                 builder.visit_ty(ty);\n                 builder.highlight\n             }\n         }\n \n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n-            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-                Some(self.tcx)\n-            }\n-\n+        impl<'tcx> ty::fold::TypeVisitor<'tcx> for HighlightBuilder {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);\n@@ -109,12 +104,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        let expected_highlight = HighlightBuilder::build(self.tcx(), expected);\n+        let expected_highlight = HighlightBuilder::build(expected);\n         let expected = self\n             .infcx\n             .extract_inference_diagnostics_data(expected.into(), Some(expected_highlight))\n             .name;\n-        let found_highlight = HighlightBuilder::build(self.tcx(), found);\n+        let found_highlight = HighlightBuilder::build(found);\n         let found =\n             self.infcx.extract_inference_diagnostics_data(found.into(), Some(found_highlight)).name;\n "}, {"sha": "4af1bdf97a773f7e9796b857d02ce31ff6f24b32", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_infer() && !t.has_erasable_regions(self.tcx()) {\n+        if !t.needs_infer() && !t.has_erasable_regions() {\n             return t;\n         }\n "}, {"sha": "266eec08cebf57ec7fed15994cbf0998db03b961", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1585,8 +1585,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        let mut substs = unevaluated.substs(self.tcx);\n-        substs = self.resolve_vars_if_possible(substs);\n+        let substs = self.resolve_vars_if_possible(unevaluated.substs);\n \n         // Postpone the evaluation of constants whose substs depend on inference\n         // variables\n@@ -1599,7 +1598,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let unevaluated = ty::Unevaluated {\n             def: unevaluated.def,\n-            substs_: Some(substs_erased),\n+            substs: substs_erased,\n             promoted: unevaluated.promoted,\n         };\n "}, {"sha": "0a210ed053ce4ec7f61c9bbc0aa4ea3e0e13c6e5", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -201,7 +201,6 @@ where\n         };\n \n         value.skip_binder().visit_with(&mut ScopeInstantiator {\n-            tcx: self.infcx.tcx,\n             next_region: &mut next_region,\n             target_index: ty::INNERMOST,\n             bound_region_scope: &mut scope,\n@@ -759,18 +758,13 @@ where\n /// `for<..`>.  For each of those, it creates an entry in\n /// `bound_region_scope`.\n struct ScopeInstantiator<'me, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     next_region: &'me mut dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n     // The debruijn index of the scope we are instantiating.\n     target_index: ty::DebruijnIndex,\n     bound_region_scope: &'me mut BoundRegionScope<'tcx>,\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n-\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "8894093c66c985c0990a9b86387126eff76191c0", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -316,7 +316,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         );\n \n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-            tcx: self.tcx,\n             op: |r| {\n                 self.member_constraint(\n                     opaque_type_key.def_id,\n@@ -368,19 +367,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n //\n // We ignore any type parameters because impl trait values are assumed to\n // capture all the in-scope type parameters.\n-struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP> {\n-    tcx: TyCtxt<'tcx>,\n+struct ConstrainOpaqueTypeRegionVisitor<OP> {\n     op: OP,\n }\n \n-impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n+impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n-\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n@@ -402,7 +396,7 @@ where\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // We're only interested in types involving regions\n-        if !ty.flags().intersects(ty::TypeFlags::HAS_POTENTIAL_FREE_REGIONS) {\n+        if !ty.flags().intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n             return ControlFlow::CONTINUE;\n         }\n "}, {"sha": "fbf149a4788e3fe76feba0bd00c878c58b8dcdcb", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -196,7 +196,7 @@ fn compute_components_recursive<'tcx>(\n     out: &mut SmallVec<[Component<'tcx>; 4]>,\n     visited: &mut SsoHashSet<GenericArg<'tcx>>,\n ) {\n-    for child in parent.walk_shallow(tcx, visited) {\n+    for child in parent.walk_shallow(visited) {\n         match child.unpack() {\n             GenericArgKind::Type(ty) => {\n                 compute_components(tcx, ty, out, visited);"}, {"sha": "f69212c599b6258dbb4964098c7a15749aea9e32", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -189,7 +189,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> VerifyBound<'tcx> {\n         let mut bounds = parent\n-            .walk_shallow(self.tcx, visited)\n+            .walk_shallow(visited)\n             .filter_map(|child| match child.unpack() {\n                 GenericArgKind::Type(ty) => Some(self.type_bound(ty, visited)),\n                 GenericArgKind::Lifetime(lt) => {"}, {"sha": "744599113849b2282cc6df446f889bd85093d19d", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -126,11 +126,6 @@ impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n     type BreakTy = (Ty<'tcx>, Option<Span>);\n-\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.infcx.tcx)\n-    }\n-\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);\n         if t.has_infer_types() {"}, {"sha": "0da37cc1be5a6471b7e9783dfd4f5431431ddfa9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -152,8 +152,8 @@ declare_lint! {\n declare_lint_pass!(BoxPointers => [BOX_POINTERS]);\n \n impl BoxPointers {\n-    fn check_heap_type<'tcx>(&self, cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n-        for leaf in ty.walk(cx.tcx) {\n+    fn check_heap_type(&self, cx: &LateContext<'_>, span: Span, ty: Ty<'_>) {\n+        for leaf in ty.walk() {\n             if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n                 if leaf_ty.is_box() {\n                     cx.struct_span_lint(BOX_POINTERS, span, |lint| {\n@@ -1662,7 +1662,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     ConstEquate(..) |\n                     TypeWellFormedFromEnv(..) => continue,\n                 };\n-                if predicate.is_global(cx.tcx) {\n+                if predicate.is_global() {\n                     cx.struct_span_lint(TRIVIAL_BOUNDS, span, |lint| {\n                         lint.build(&format!(\n                             \"{} bound {} does not depend on any type \\"}, {"sha": "c5e15a88fdf1c302a48d75dfc5795f9311613314", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -38,7 +38,7 @@ declare_lint_pass!(EnumIntrinsicsNonEnums => [ENUM_INTRINSICS_NON_ENUMS]);\n /// Returns `true` if we know for sure that the given type is not an enum. Note that for cases where\n /// the type is generic, we can't be certain if it will be an enum so we have to assume that it is.\n fn is_non_enum(t: Ty<'_>) -> bool {\n-    !t.is_enum() && !t.potentially_needs_subst()\n+    !t.is_enum() && !t.needs_subst()\n }\n \n fn enforce_mem_discriminant("}, {"sha": "4bcd4c6d6038d72e961f62413b3d12872d06f88c", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             _ => return,\n         };\n         let substs = cx.typeck_results().node_substs(expr.hir_id);\n-        if substs.definitely_needs_subst(cx.tcx) {\n+        if substs.needs_subst() {\n             // We can't resolve on types that require monomorphization, so we don't handle them if\n             // we need to perfom substitution.\n             return;"}, {"sha": "1acff13d1aa33f7fc317d3f9a15c1049d3ef8de3", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1175,9 +1175,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n             type BreakTy = Ty<'tcx>;\n-            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-                Some(self.cx.tcx)\n-            }\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match ty.kind() {"}, {"sha": "ec0f5b7d0595cb070a576d85111a675ce53e25f9", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ct: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs(self)) {\n+        match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted: ct.promoted };\n                 self.const_eval_global_id(param_env, cid, span)"}, {"sha": "899386d2bc8f29622218c495f52cc09a42c7c772", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -288,7 +288,6 @@ pub struct Body<'tcx> {\n \n impl<'tcx> Body<'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n@@ -331,7 +330,7 @@ impl<'tcx> Body<'tcx> {\n             predecessor_cache: PredecessorCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n         };\n-        body.is_polymorphic = body.definitely_has_param_types_or_consts(tcx);\n+        body.is_polymorphic = body.has_param_types_or_consts();\n         body\n     }\n \n@@ -341,7 +340,7 @@ impl<'tcx> Body<'tcx> {\n     /// is only useful for testing but cannot be `#[cfg(test)]` because it is used in a different\n     /// crate.\n     pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {\n-        Body {\n+        let mut body = Body {\n             phase: MirPhase::Build,\n             source: MirSource::item(DefId::local(CRATE_DEF_INDEX)),\n             basic_blocks,\n@@ -357,7 +356,9 @@ impl<'tcx> Body<'tcx> {\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n-        }\n+        };\n+        body.is_polymorphic = body.has_param_types_or_consts();\n+        body\n     }\n \n     #[inline]"}, {"sha": "f2ad591071114bb043961e8c8679a4211447c2e2", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -476,8 +476,8 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 ty::ConstKind::Unevaluated(uv) => format!(\n                     \"Unevaluated({}, {:?}, {:?})\",\n                     self.tcx.def_path_str(uv.def.did),\n-                    uv.substs(self.tcx),\n-                    uv.promoted\n+                    uv.substs,\n+                    uv.promoted,\n                 ),\n                 ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n                 ty::ConstKind::Error(_) => \"Error\".to_string(),\n@@ -683,12 +683,6 @@ pub fn write_allocations<'tcx>(\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n     impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-            // `AllocId`s are only inside of `ConstKind::Value` which\n-            // can't be part of the anon const default substs.\n-            None\n-        }\n-\n         fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Value(val) = c.val {\n                 self.0.extend(alloc_ids_from_const(val));"}, {"sha": "5dc7b21964266f3b67269fbf3076ea67ce2f76f3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -110,10 +110,6 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query default_anon_const_substs(key: DefId) -> SubstsRef<'tcx> {\n-        desc { |tcx| \"computing the default generic arguments for `{}`\", tcx.def_path_str(key) }\n-    }\n-\n     /// Records the type of every item.\n     query type_of(key: DefId) -> Ty<'tcx> {\n         desc { |tcx|"}, {"sha": "75705d40a6c80209b9904df4ecf02ec12652bbca", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> Const<'tcx> {\n             None => tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: def.to_global(),\n-                    substs_: None,\n+                    substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                     promoted: None,\n                 }),\n                 ty,\n@@ -151,14 +151,14 @@ impl<'tcx> Const<'tcx> {\n                 tcx.mk_const(ty::Const {\n                     val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: ty::WithOptConstParam::unknown(def_id).to_global(),\n-                        substs_: Some(substs),\n+                        substs,\n                         promoted: None,\n                     }),\n                     ty,\n                 })\n             }\n         };\n-        debug_assert!(!ret.has_free_regions(tcx));\n+        debug_assert!(!ret.has_free_regions());\n         ret\n     }\n "}, {"sha": "af7c2c5cb4cff0637d75d190d0d4a14c13f07a29", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1,5 +1,4 @@\n use std::convert::TryInto;\n-use std::fmt;\n \n use crate::mir::interpret::{AllocId, ConstValue, Scalar};\n use crate::mir::Promoted;\n@@ -13,52 +12,33 @@ use rustc_target::abi::Size;\n \n use super::ScalarInt;\n /// An unevaluated, potentially generic, constant.\n-///\n-/// If `substs_` is `None` it means that this anon const\n-/// still has its default substs.\n-///\n-/// We check for all possible substs in `fn default_anon_const_substs`,\n-/// so refer to that check for more info.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n #[derive(Hash, HashStable)]\n pub struct Unevaluated<'tcx, P = Option<Promoted>> {\n     pub def: ty::WithOptConstParam<DefId>,\n-    pub substs_: Option<SubstsRef<'tcx>>,\n+    pub substs: SubstsRef<'tcx>,\n     pub promoted: P,\n }\n \n impl<'tcx> Unevaluated<'tcx> {\n     #[inline]\n     pub fn shrink(self) -> Unevaluated<'tcx, ()> {\n         debug_assert_eq!(self.promoted, None);\n-        Unevaluated { def: self.def, substs_: self.substs_, promoted: () }\n+        Unevaluated { def: self.def, substs: self.substs, promoted: () }\n     }\n }\n \n impl<'tcx> Unevaluated<'tcx, ()> {\n     #[inline]\n     pub fn expand(self) -> Unevaluated<'tcx> {\n-        Unevaluated { def: self.def, substs_: self.substs_, promoted: None }\n+        Unevaluated { def: self.def, substs: self.substs, promoted: None }\n     }\n }\n \n impl<'tcx, P: Default> Unevaluated<'tcx, P> {\n     #[inline]\n     pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx, P> {\n-        Unevaluated { def, substs_: Some(substs), promoted: Default::default() }\n-    }\n-}\n-\n-impl<'tcx, P: Default + PartialEq + fmt::Debug> Unevaluated<'tcx, P> {\n-    #[inline]\n-    pub fn substs(self, tcx: TyCtxt<'tcx>) -> SubstsRef<'tcx> {\n-        self.substs_.unwrap_or_else(|| {\n-            // We must not use the parents default substs for promoted constants\n-            // as that can result in incorrect substs and calls the `default_anon_const_substs`\n-            // for something that might not actually be a constant.\n-            debug_assert_eq!(self.promoted, Default::default());\n-            tcx.default_anon_const_substs(self.def.did)\n-        })\n+        Unevaluated { def, substs, promoted: Default::default() }\n     }\n }\n \n@@ -173,7 +153,7 @@ impl<'tcx> ConstKind<'tcx> {\n             let param_env_and = if param_env_and.needs_infer() {\n                 tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {\n                     def: unevaluated.def,\n-                    substs_: Some(InternalSubsts::identity_for_item(tcx, unevaluated.def.did)),\n+                    substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),\n                     promoted: unevaluated.promoted,\n                 })\n             } else {"}, {"sha": "ef4f77c8a69e11ae06ae0193e9e8891850316242", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -21,9 +21,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         // If there's nothing to erase avoid performing the query at all\n-        if !value\n-            .has_type_flags(TypeFlags::HAS_RE_LATE_BOUND | TypeFlags::HAS_POTENTIAL_FREE_REGIONS)\n-        {\n+        if !value.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND | TypeFlags::HAS_FREE_REGIONS) {\n             return value;\n         }\n         debug!(\"erase_regions({:?})\", value);"}, {"sha": "b6e673983fd4ed32d6bb7896c38d8f8ce7e78114", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -97,7 +97,7 @@ impl FlagComputation {\n             &ty::Error(_) => self.add_flags(TypeFlags::HAS_ERROR),\n \n             &ty::Param(_) => {\n-                self.add_flags(TypeFlags::HAS_KNOWN_TY_PARAM);\n+                self.add_flags(TypeFlags::HAS_TY_PARAM);\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n \n@@ -298,7 +298,7 @@ impl FlagComputation {\n                 self.add_bound_var(debruijn);\n             }\n             ty::ConstKind::Param(_) => {\n-                self.add_flags(TypeFlags::HAS_KNOWN_CT_PARAM);\n+                self.add_flags(TypeFlags::HAS_CT_PARAM);\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n             ty::ConstKind::Placeholder(_) => {\n@@ -311,23 +311,7 @@ impl FlagComputation {\n     }\n \n     fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'_, P>) {\n-        // The generic arguments of unevaluated consts are a bit special,\n-        // see the `rustc-dev-guide` for more information.\n-        //\n-        // FIXME(@lcnr): Actually add a link here.\n-        if let Some(substs) = ct.substs_ {\n-            // If they are available, we treat them as ordinary generic arguments.\n-            self.add_substs(substs);\n-        } else {\n-            // Otherwise, we add `HAS_UNKNOWN_DEFAULT_CONST_SUBSTS` to signify\n-            // that our const may potentially refer to generic parameters.\n-            //\n-            // Note that depending on which generic parameters are actually\n-            // used in this constant, we may not actually refer to any generic\n-            // parameters at all.\n-            self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n-            self.add_flags(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS);\n-        }\n+        self.add_substs(ct.substs);\n         self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n     }\n "}, {"sha": "3133cdfdd7a7211222a0e9336aa4240a798e0121", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 39, "deletions": 209, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -95,15 +95,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_vars_bound_at_or_above(ty::INNERMOST)\n     }\n \n-    fn definitely_has_type_flags(&self, tcx: TyCtxt<'tcx>, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { tcx: Some(tcx), flags }).break_value()\n-            == Some(FoundFlags)\n-    }\n-\n     #[instrument(level = \"trace\")]\n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { tcx: None, flags }).break_value()\n-            == Some(FoundFlags)\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n@@ -114,18 +108,8 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n-    fn potentially_has_param_types_or_consts(&self) -> bool {\n-        self.has_type_flags(\n-            TypeFlags::HAS_KNOWN_TY_PARAM\n-                | TypeFlags::HAS_KNOWN_CT_PARAM\n-                | TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS,\n-        )\n-    }\n-    fn definitely_has_param_types_or_consts(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        self.definitely_has_type_flags(\n-            tcx,\n-            TypeFlags::HAS_KNOWN_TY_PARAM | TypeFlags::HAS_KNOWN_CT_PARAM,\n-        )\n+    fn has_param_types_or_consts(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }\n     fn has_infer_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_INFER)\n@@ -146,44 +130,29 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n                 | TypeFlags::HAS_CT_PLACEHOLDER,\n         )\n     }\n-    fn potentially_needs_subst(&self) -> bool {\n-        self.has_type_flags(\n-            TypeFlags::KNOWN_NEEDS_SUBST | TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS,\n-        )\n-    }\n-    fn definitely_needs_subst(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        self.definitely_has_type_flags(tcx, TypeFlags::KNOWN_NEEDS_SUBST)\n+    fn needs_subst(&self) -> bool {\n+        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }\n     /// \"Free\" regions in this context means that it has any region\n     /// that is not (a) erased or (b) late-bound.\n-    fn has_free_regions(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        self.definitely_has_type_flags(tcx, TypeFlags::HAS_KNOWN_FREE_REGIONS)\n+    fn has_free_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n     }\n \n     fn has_erased_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_ERASED)\n     }\n \n     /// True if there are any un-erased free regions.\n-    fn has_erasable_regions(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        self.definitely_has_type_flags(tcx, TypeFlags::HAS_KNOWN_FREE_REGIONS)\n-    }\n-\n-    /// Indicates whether this value definitely references only 'global'\n-    /// generic parameters that are the same regardless of what fn we are\n-    /// in. This is used for caching.\n-    ///\n-    /// Note that this function is pessimistic and may incorrectly return\n-    /// `false`.\n-    fn is_known_global(&self) -> bool {\n-        !self.has_type_flags(TypeFlags::HAS_POTENTIAL_FREE_LOCAL_NAMES)\n+    fn has_erasable_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n     }\n \n     /// Indicates whether this value references only 'global'\n     /// generic parameters that are the same regardless of what fn we are\n     /// in. This is used for caching.\n-    fn is_global(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        !self.definitely_has_type_flags(tcx, TypeFlags::HAS_KNOWN_FREE_LOCAL_NAMES)\n+    fn is_global(&self) -> bool {\n+        !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)\n     }\n \n     /// True if there are any late-bound regions\n@@ -361,17 +330,6 @@ where\n \n pub trait TypeVisitor<'tcx>: Sized {\n     type BreakTy = !;\n-    /// Supplies the `tcx` for an unevaluated anonymous constant in case its default substs\n-    /// are not yet supplied.\n-    ///\n-    /// Returning `None` for this method is only recommended if the `TypeVisitor`\n-    /// does not care about default anon const substs, as it ignores generic parameters,\n-    /// and fetching the default substs would cause a query cycle.\n-    ///\n-    /// For visitors which return `None` we completely skip the default substs in `ty::Unevaluated::super_visit_with`.\n-    /// This means that incorrectly returning `None` can very quickly lead to ICE or other critical bugs, so be careful and\n-    /// try to return an actual `tcx` if possible.\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>>;\n \n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n@@ -488,8 +446,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: &impl TypeFoldable<'tcx>,\n         callback: impl FnMut(ty::Region<'tcx>) -> bool,\n     ) -> bool {\n-        struct RegionVisitor<'tcx, F> {\n-            tcx: TyCtxt<'tcx>,\n+        struct RegionVisitor<F> {\n             /// The index of a binder *just outside* the things we have\n             /// traversed. If we encounter a bound region bound by this\n             /// binder or one outer to it, it appears free. Example:\n@@ -511,16 +468,12 @@ impl<'tcx> TyCtxt<'tcx> {\n             callback: F,\n         }\n \n-        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<'tcx, F>\n+        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n             type BreakTy = ();\n \n-            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-                Some(self.tcx)\n-            }\n-\n             fn visit_binder<T: TypeFoldable<'tcx>>(\n                 &mut self,\n                 t: &Binder<'tcx, T>,\n@@ -548,17 +501,15 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 // We're only interested in types involving regions\n-                if ty.flags().intersects(TypeFlags::HAS_POTENTIAL_FREE_REGIONS) {\n+                if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n                 } else {\n                     ControlFlow::CONTINUE\n                 }\n             }\n         }\n \n-        value\n-            .visit_with(&mut RegionVisitor { tcx: self, outer_index: ty::INNERMOST, callback })\n-            .is_break()\n+        value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()\n     }\n }\n \n@@ -897,7 +848,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let mut collector = LateBoundRegionsCollector::new(self, just_constraint);\n+        let mut collector = LateBoundRegionsCollector::new(just_constraint);\n         let result = value.as_ref().skip_binder().visit_with(&mut collector);\n         assert!(result.is_continue()); // should never have stopped early\n         collector.regions\n@@ -964,11 +915,6 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        // Anonymous constants do not contain bound vars in their substs by default.\n-        None\n-    }\n-\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -1183,11 +1129,6 @@ struct HasEscapingVarsVisitor {\n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        // Anonymous constants do not contain bound vars in their substs by default.\n-        None\n-    }\n-\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -1252,35 +1193,32 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n struct FoundFlags;\n \n // FIXME: Optimize for checking for infer flags\n-struct HasTypeFlagsVisitor<'tcx> {\n-    tcx: Option<TyCtxt<'tcx>>,\n+struct HasTypeFlagsVisitor {\n     flags: ty::TypeFlags,\n }\n \n-impl<'tcx> std::fmt::Debug for HasTypeFlagsVisitor<'tcx> {\n+impl std::fmt::Debug for HasTypeFlagsVisitor {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         self.flags.fmt(fmt)\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor<'tcx> {\n+impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        bug!(\"we shouldn't call this method as we manually look at ct substs\");\n-    }\n \n     #[inline]\n     #[instrument(level = \"trace\")]\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let flags = t.flags();\n-        trace!(t.flags=?t.flags());\n-        if flags.intersects(self.flags) {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n+        debug!(\n+            \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n+            t,\n+            t.flags(),\n+            self.flags\n+        );\n+        if t.flags().intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            match flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-                true if self.tcx.is_some() => UnknownConstSubstsVisitor::search(&self, t),\n-                _ => ControlFlow::CONTINUE,\n-            }\n+            ControlFlow::CONTINUE\n         }\n     }\n \n@@ -1304,10 +1242,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor<'tcx> {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            match flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-                true if self.tcx.is_some() => UnknownConstSubstsVisitor::search(&self, c),\n-                _ => ControlFlow::CONTINUE,\n-            }\n+            ControlFlow::CONTINUE\n         }\n     }\n \n@@ -1319,128 +1254,28 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor<'tcx> {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            match flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-                true if self.tcx.is_some() => UnknownConstSubstsVisitor::search(&self, uv),\n-                _ => ControlFlow::CONTINUE,\n-            }\n+            ControlFlow::CONTINUE\n         }\n     }\n \n     #[inline]\n     #[instrument(level = \"trace\")]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let flags = predicate.inner.flags;\n-        trace!(predicate.flags=?flags);\n-        if flags.intersects(self.flags) {\n+        debug!(\n+            \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n+            predicate, predicate.inner.flags, self.flags\n+        );\n+        if predicate.inner.flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n-        } else {\n-            match flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-                true if self.tcx.is_some() => UnknownConstSubstsVisitor::search(&self, predicate),\n-                _ => ControlFlow::CONTINUE,\n-            }\n-        }\n-    }\n-}\n-\n-struct UnknownConstSubstsVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    flags: ty::TypeFlags,\n-}\n-\n-impl<'tcx> UnknownConstSubstsVisitor<'tcx> {\n-    /// This is fairly cold and we don't want to\n-    /// bloat the size of the `HasTypeFlagsVisitor`.\n-    #[inline(never)]\n-    pub fn search<T: TypeFoldable<'tcx>>(\n-        visitor: &HasTypeFlagsVisitor<'tcx>,\n-        v: T,\n-    ) -> ControlFlow<FoundFlags> {\n-        if visitor.flags.intersects(TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS) {\n-            v.super_visit_with(&mut UnknownConstSubstsVisitor {\n-                tcx: visitor.tcx.unwrap(),\n-                flags: visitor.flags,\n-            })\n         } else {\n             ControlFlow::CONTINUE\n         }\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for UnknownConstSubstsVisitor<'tcx> {\n-    type BreakTy = FoundFlags;\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        bug!(\"we shouldn't call this method as we manually look at ct substs\");\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if t.flags().intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-            t.super_visit_with(self)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    #[inline]\n-    fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if uv.substs_.is_none() {\n-            self.tcx\n-                .default_anon_const_substs(uv.def.did)\n-                .visit_with(&mut HasTypeFlagsVisitor { tcx: Some(self.tcx), flags: self.flags })\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n-    #[inline]\n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if predicate.inner.flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-            predicate.super_visit_with(self)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-}\n-\n-impl<'tcx> TyCtxt<'tcx> {\n-    /// This is a HACK(const_generics) and should probably not be needed.\n-    /// Might however be perf relevant, so who knows.\n-    ///\n-    /// FIXME(@lcnr): explain this function a bit more\n-    pub fn expose_default_const_substs<T: TypeFoldable<'tcx>>(self, v: T) -> T {\n-        v.fold_with(&mut ExposeDefaultConstSubstsFolder { tcx: self })\n-    }\n-}\n-\n-struct ExposeDefaultConstSubstsFolder<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl<'tcx> TypeFolder<'tcx> for ExposeDefaultConstSubstsFolder<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if ty.flags().intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-            ty.super_fold_with(self)\n-        } else {\n-            ty\n-        }\n-    }\n-\n-    fn fold_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n-        if pred.inner.flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS) {\n-            pred.super_fold_with(self)\n-        } else {\n-            pred\n-        }\n-    }\n-}\n-\n /// Collects all the late-bound regions at the innermost binding level\n /// into a hash set.\n-struct LateBoundRegionsCollector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+struct LateBoundRegionsCollector {\n     current_index: ty::DebruijnIndex,\n     regions: FxHashSet<ty::BoundRegionKind>,\n \n@@ -1454,22 +1289,17 @@ struct LateBoundRegionsCollector<'tcx> {\n     just_constrained: bool,\n }\n \n-impl<'tcx> LateBoundRegionsCollector<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>, just_constrained: bool) -> Self {\n+impl LateBoundRegionsCollector {\n+    fn new(just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n-            tcx,\n             current_index: ty::INNERMOST,\n             regions: Default::default(),\n             just_constrained,\n         }\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n-\n+impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,"}, {"sha": "caf33fa5d213b49559068fd8070e9ced4c50a42a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1769,9 +1769,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // Ignore layouts that are done with non-empty environments or\n         // non-monomorphic layouts, as the user only wants to see the stuff\n         // resulting from the final codegen session.\n-        if layout.ty.definitely_has_param_types_or_consts(self.tcx)\n-            || !self.param_env.caller_bounds().is_empty()\n-        {\n+        if layout.ty.has_param_types_or_consts() || !self.param_env.caller_bounds().is_empty() {\n             return;\n         }\n \n@@ -1936,7 +1934,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n                 let tail = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n                 match tail.kind() {\n                     ty::Param(_) | ty::Projection(_) => {\n-                        debug_assert!(tail.definitely_has_param_types_or_consts(tcx));\n+                        debug_assert!(tail.has_param_types_or_consts());\n                         Ok(SizeSkeleton::Pointer { non_zero, tail: tcx.erase_regions(tail) })\n                     }\n                     _ => bug!("}, {"sha": "ceb8795a1a826ceecd12179dfbdf2cdb021d7fdd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1417,7 +1417,7 @@ impl<'tcx> ParamEnv<'tcx> {\n             Reveal::UserFacing => ParamEnvAnd { param_env: self, value },\n \n             Reveal::All => {\n-                if value.is_known_global() {\n+                if value.is_global() {\n                     ParamEnvAnd { param_env: self.without_caller_bounds(), value }\n                 } else {\n                     ParamEnvAnd { param_env: self, value }"}, {"sha": "94cd650e39e6f2a75466dffd9374321b2018a20e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1151,28 +1151,29 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.val {\n-            ty::ConstKind::Unevaluated(uv) => {\n-                if let Some(promoted) = uv.promoted {\n-                    let substs = uv.substs_.unwrap();\n-                    p!(print_value_path(uv.def.did, substs));\n-                    p!(write(\"::{:?}\", promoted));\n-                } else {\n-                    let tcx = self.tcx();\n-                    match tcx.def_kind(uv.def.did) {\n-                        DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n-                            p!(print_value_path(uv.def.did, uv.substs(tcx)))\n-                        }\n-                        _ => {\n-                            if uv.def.is_local() {\n-                                let span = tcx.def_span(uv.def.did);\n-                                if let Ok(snip) = tcx.sess.source_map().span_to_snippet(span) {\n-                                    p!(write(\"{}\", snip))\n-                                } else {\n-                                    print_underscore!()\n-                                }\n+            ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                def,\n+                substs,\n+                promoted: Some(promoted),\n+            }) => {\n+                p!(print_value_path(def.did, substs));\n+                p!(write(\"::{:?}\", promoted));\n+            }\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None }) => {\n+                match self.tcx().def_kind(def.did) {\n+                    DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n+                        p!(print_value_path(def.did, substs))\n+                    }\n+                    _ => {\n+                        if def.is_local() {\n+                            let span = self.tcx().def_span(def.did);\n+                            if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n+                                p!(write(\"{}\", snip))\n                             } else {\n                                 print_underscore!()\n                             }\n+                        } else {\n+                            print_underscore!()\n                         }\n                     }\n                 }\n@@ -1417,17 +1418,15 @@ pub trait PrettyPrinter<'tcx>:\n \n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n             //\n-            // NB: the `potentially_has_param_types_or_consts` check ensures that we can use\n+            // NB: the `has_param_types_or_consts` check ensures that we can use\n             // the `destructure_const` query with an empty `ty::ParamEnv` without\n             // introducing ICEs (e.g. via `layout_of`) from missing bounds.\n             // E.g. `transmute([0usize; 2]): (u8, *mut T)` needs to know `T: Sized`\n             // to be able to destructure the tuple into `(0u8, *mut T)\n             //\n             // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n             // correct `ty::ParamEnv` to allow printing *all* constant values.\n-            (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..))\n-                if !ty.potentially_has_param_types_or_consts() =>\n-            {\n+            (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n                 let contents = self.tcx().destructure_const(\n                     ty::ParamEnv::reveal_all()\n                         .and(self.tcx().mk_const(ty::Const { val: ty::ConstKind::Value(ct), ty })),\n@@ -2245,18 +2244,13 @@ impl<'tcx, F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         T: TypeFoldable<'tcx>,\n     {\n         struct LateBoundRegionNameCollector<'a, 'tcx> {\n-            tcx: TyCtxt<'tcx>,\n             used_region_names: &'a mut FxHashSet<Symbol>,\n             type_collector: SsoHashSet<Ty<'tcx>>,\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_, 'tcx> {\n             type BreakTy = ();\n \n-            fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-                Some(self.tcx)\n-            }\n-\n             #[instrument(skip(self), level = \"trace\")]\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 trace!(\"address: {:p}\", r);\n@@ -2287,7 +2281,6 @@ impl<'tcx, F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n \n         self.used_region_names.clear();\n         let mut collector = LateBoundRegionNameCollector {\n-            tcx: self.tcx,\n             used_region_names: &mut self.used_region_names,\n             type_collector: SsoHashSet::new(),\n         };\n@@ -2546,7 +2539,7 @@ define_print_and_forward_display! {\n                 write(\"` implements the trait `{}`\", kind))\n             }\n             ty::PredicateKind::ConstEvaluatable(uv) => {\n-                p!(\"the constant `\", print_value_path(uv.def.did, uv.substs_.map_or(&[], |x| x)), \"` can be evaluated\")\n+                p!(\"the constant `\", print_value_path(uv.def.did, uv.substs), \"` can be evaluated\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 p!(\"the constant `\", print(c1), \"` equals `\", print(c2), \"`\")"}, {"sha": "9e381cabdfe8482995ecdf1ed05dc4238b02f85f", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -599,13 +599,13 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n             let substs = relation.relate_with_variance(\n                 ty::Variance::Invariant,\n                 ty::VarianceDiagInfo::default(),\n-                au.substs(tcx),\n-                bu.substs(tcx),\n+                au.substs,\n+                bu.substs,\n             )?;\n             return Ok(tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: au.def,\n-                    substs_: Some(substs),\n+                    substs,\n                     promoted: au.promoted,\n                 }),\n                 ty: a.ty,"}, {"sha": "63ebbcbc5bb67f01d21635544fb7fc6aca32b0b1", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n                 write!(f, \"ClosureKind({:?}, {:?}, {:?})\", closure_def_id, closure_substs, kind)\n             }\n             ty::PredicateKind::ConstEvaluatable(uv) => {\n-                write!(f, \"ConstEvaluatable({:?}, {:?})\", uv.def, uv.substs_)\n+                write!(f, \"ConstEvaluatable({:?}, {:?})\", uv.def, uv.substs)\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n@@ -1226,7 +1226,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n     ) -> Result<Self, F::Error> {\n         Ok(ty::Unevaluated {\n             def: self.def,\n-            substs_: Some(self.substs(folder.tcx()).try_fold_with(folder)?),\n+            substs: self.substs.try_fold_with(folder)?,\n             promoted: self.promoted,\n         })\n     }\n@@ -1236,14 +1236,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        if let Some(tcx) = visitor.tcx_for_anon_const_substs() {\n-            self.substs(tcx).visit_with(visitor)\n-        } else if let Some(substs) = self.substs_ {\n-            substs.visit_with(visitor)\n-        } else {\n-            debug!(\"ignoring default substs of `{:?}`\", self.def);\n-            ControlFlow::CONTINUE\n-        }\n+        self.substs.visit_with(visitor)\n     }\n }\n \n@@ -1254,7 +1247,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n     ) -> Result<Self, F::Error> {\n         Ok(ty::Unevaluated {\n             def: self.def,\n-            substs_: Some(self.substs(folder.tcx()).try_fold_with(folder)?),\n+            substs: self.substs.try_fold_with(folder)?,\n             promoted: self.promoted,\n         })\n     }\n@@ -1264,13 +1257,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        if let Some(tcx) = visitor.tcx_for_anon_const_substs() {\n-            self.substs(tcx).visit_with(visitor)\n-        } else if let Some(substs) = self.substs_ {\n-            substs.visit_with(visitor)\n-        } else {\n-            debug!(\"ignoring default substs of `{:?}`\", self.def);\n-            ControlFlow::CONTINUE\n-        }\n+        self.substs.visit_with(visitor)\n     }\n }"}, {"sha": "92fb7612688c08c2f265d21dfa428bd2f7653f9c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1642,26 +1642,26 @@ impl RegionKind {\n \n         match *self {\n             ty::ReVar(..) => {\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_LOCAL_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_INFER;\n             }\n             ty::RePlaceholder(..) => {\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_LOCAL_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PLACEHOLDER;\n             }\n             ty::ReEarlyBound(..) => {\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_LOCAL_REGIONS;\n-                flags = flags | TypeFlags::HAS_KNOWN_RE_PARAM;\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n+                flags = flags | TypeFlags::HAS_RE_PARAM;\n             }\n             ty::ReFree { .. } => {\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_LOCAL_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n             }\n             ty::ReEmpty(_) | ty::ReStatic => {\n-                flags = flags | TypeFlags::HAS_KNOWN_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }\n             ty::ReLateBound(..) => {\n                 flags = flags | TypeFlags::HAS_RE_LATE_BOUND;"}, {"sha": "ab33fbcca15a3172513e2124b374632cf604b80a", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -505,7 +505,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.potentially_needs_subst() {\n+        if !t.needs_subst() {\n             return t;\n         }\n "}, {"sha": "6808316a23095208fbc12a4e68d67b486804f3b6", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1,8 +1,8 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n+use crate::ty;\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, TyCtxt};\n use rustc_data_structures::sso::SsoHashSet;\n use smallvec::{self, SmallVec};\n \n@@ -11,7 +11,6 @@ use smallvec::{self, SmallVec};\n type TypeWalkerStack<'tcx> = SmallVec<[GenericArg<'tcx>; 8]>;\n \n pub struct TypeWalker<'tcx> {\n-    expose_default_const_substs: Option<TyCtxt<'tcx>>,\n     stack: TypeWalkerStack<'tcx>,\n     last_subtree: usize,\n     pub visited: SsoHashSet<GenericArg<'tcx>>,\n@@ -26,13 +25,8 @@ pub struct TypeWalker<'tcx> {\n /// It maintains a set of visited types and\n /// skips any types that are already there.\n impl<'tcx> TypeWalker<'tcx> {\n-    fn new(expose_default_const_substs: Option<TyCtxt<'tcx>>, root: GenericArg<'tcx>) -> Self {\n-        Self {\n-            expose_default_const_substs,\n-            stack: smallvec![root],\n-            last_subtree: 1,\n-            visited: SsoHashSet::new(),\n-        }\n+    pub fn new(root: GenericArg<'tcx>) -> Self {\n+        Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }\n     }\n \n     /// Skips the subtree corresponding to the last type\n@@ -61,7 +55,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n             let next = self.stack.pop()?;\n             self.last_subtree = self.stack.len();\n             if self.visited.insert(next) {\n-                push_inner(self.expose_default_const_substs, &mut self.stack, next);\n+                push_inner(&mut self.stack, next);\n                 debug!(\"next: stack={:?}\", self.stack);\n                 return Some(next);\n             }\n@@ -80,8 +74,8 @@ impl<'tcx> GenericArg<'tcx> {\n     /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n     /// [isize] => { [isize], isize }\n     /// ```\n-    pub fn walk(self, tcx: TyCtxt<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker::new(Some(tcx), self)\n+    pub fn walk(self) -> TypeWalker<'tcx> {\n+        TypeWalker::new(self)\n     }\n \n     /// Iterator that walks the immediate children of `self`. Hence\n@@ -93,21 +87,16 @@ impl<'tcx> GenericArg<'tcx> {\n     /// and skips any types that are already there.\n     pub fn walk_shallow(\n         self,\n-        tcx: TyCtxt<'tcx>,\n         visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> impl Iterator<Item = GenericArg<'tcx>> {\n         let mut stack = SmallVec::new();\n-        push_inner(Some(tcx), &mut stack, self);\n+        push_inner(&mut stack, self);\n         stack.retain(|a| visited.insert(*a));\n         stack.into_iter()\n     }\n }\n \n impl<'tcx> super::TyS<'tcx> {\n-    pub fn walk_ignoring_default_const_substs(&'tcx self) -> TypeWalker<'tcx> {\n-        TypeWalker::new(None, self.into())\n-    }\n-\n     /// Iterator that walks `self` and any types reachable from\n     /// `self`, in depth-first order. Note that just walks the types\n     /// that appear in `self`, it does not descend into the fields of\n@@ -118,8 +107,8 @@ impl<'tcx> super::TyS<'tcx> {\n     /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n     /// [isize] => { [isize], isize }\n     /// ```\n-    pub fn walk(&'tcx self, tcx: TyCtxt<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker::new(Some(tcx), self.into())\n+    pub fn walk(&'tcx self) -> TypeWalker<'tcx> {\n+        TypeWalker::new(self.into())\n     }\n }\n \n@@ -129,11 +118,7 @@ impl<'tcx> super::TyS<'tcx> {\n /// known to be significant to any code, but it seems like the\n /// natural order one would expect (basically, the order of the\n /// types as they are written).\n-fn push_inner<'tcx>(\n-    expose_default_const_substs: Option<TyCtxt<'tcx>>,\n-    stack: &mut TypeWalkerStack<'tcx>,\n-    parent: GenericArg<'tcx>,\n-) {\n+fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>) {\n     match parent.unpack() {\n         GenericArgKind::Type(parent_ty) => match *parent_ty.kind() {\n             ty::Bool\n@@ -211,11 +196,7 @@ fn push_inner<'tcx>(\n                 | ty::ConstKind::Error(_) => {}\n \n                 ty::ConstKind::Unevaluated(ct) => {\n-                    if let Some(tcx) = expose_default_const_substs {\n-                        stack.extend(ct.substs(tcx).iter().rev());\n-                    } else if let Some(substs) = ct.substs_ {\n-                        stack.extend(substs.iter().rev());\n-                    }\n+                    stack.extend(ct.substs.iter().rev());\n                 }\n             }\n         }"}, {"sha": "e2a42de71b956701da9f1a490964b6a634b229f7", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -244,10 +244,10 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n         // The exception is `body.user_type_annotations`, which is used unmodified\n         // by borrow checking.\n         debug_assert!(\n-            !(body.local_decls.has_free_regions(tcx)\n-                || body.basic_blocks().has_free_regions(tcx)\n-                || body.var_debug_info.has_free_regions(tcx)\n-                || body.yield_ty().has_free_regions(tcx)),\n+            !(body.local_decls.has_free_regions()\n+                || body.basic_blocks().has_free_regions()\n+                || body.var_debug_info.has_free_regions()\n+                || body.yield_ty().has_free_regions()),\n             \"Unexpected free regions in MIR: {:?}\",\n             body,\n         );\n@@ -760,7 +760,6 @@ fn construct_error<'a, 'tcx>(\n     cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n \n     let mut body = Body::new(\n-        tcx,\n         MirSource::item(def.did.to_def_id()),\n         cfg.basic_blocks,\n         source_scopes,\n@@ -849,7 +848,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         Body::new(\n-            self.tcx,\n             MirSource::item(self.def_id),\n             self.cfg.basic_blocks,\n             self.source_scopes,"}, {"sha": "d8c9a6fa3fe969d8cbb15a08c71d44f7b4365740", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         // code at the moment, because types like `for <'a> fn(&'a ())` do\n         // not *yet* implement `PartialEq`. So for now we leave this here.\n         has_impl\n-            || ty.walk(self.tcx()).any(|t| match t.unpack() {\n+            || ty.walk().any(|t| match t.unpack() {\n                 ty::subst::GenericArgKind::Lifetime(_) => false,\n                 ty::subst::GenericArgKind::Type(t) => t.is_fn_ptr(),\n                 ty::subst::GenericArgKind::Const(_) => false,"}, {"sha": "14caf03d7aff3842d362904304f1de27ae833eb9", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             .predicates_of(def_id.to_def_id())\n             .predicates\n             .iter()\n-            .filter_map(|(p, _)| if p.is_global(tcx) { Some(*p) } else { None });\n+            .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n         if traits::impossible_predicates(\n             tcx,\n             traits::elaborate_predicates(tcx, predicates).map(|o| o.predicate).collect(),\n@@ -136,7 +136,6 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         trace!(\"ConstProp starting for {:?}\", def_id);\n \n         let dummy_body = &Body::new(\n-            tcx,\n             body.source,\n             body.basic_blocks().clone(),\n             body.source_scopes.clone(),\n@@ -473,7 +472,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Returns the value, if any, of evaluating `c`.\n     fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n-        if c.definitely_needs_subst(self.tcx) {\n+        if c.needs_subst() {\n             return None;\n         }\n \n@@ -488,14 +487,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             // Promoteds must lint and not error as the user didn't ask for them\n                             ConstKind::Unevaluated(ty::Unevaluated {\n                                 def: _,\n-                                substs_: _,\n+                                substs: _,\n                                 promoted: Some(_),\n                             }) => true,\n                             // Out of backwards compatibility we cannot report hard errors in unused\n                             // generic functions using associated constants of the generic parameters.\n-                            _ => c.literal.definitely_needs_subst(*tcx),\n+                            _ => c.literal.needs_subst(),\n                         },\n-                        ConstantKind::Val(_, ty) => ty.definitely_needs_subst(*tcx),\n+                        ConstantKind::Val(_, ty) => ty.needs_subst(),\n                     };\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n@@ -726,7 +725,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         // FIXME we need to revisit this for #67176\n-        if rvalue.definitely_needs_subst(self.tcx) {\n+        if rvalue.needs_subst() {\n             return None;\n         }\n "}, {"sha": "f364a332a788cce900693575d3708fc0a5cf34a9", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n                     // Handle calls to `transmute`\n                     if self.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                         let arg_ty = args[0].ty(self.body, self.tcx);\n-                        for generic_inner_ty in arg_ty.walk(self.tcx) {\n+                        for generic_inner_ty in arg_ty.walk() {\n                             if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n                                 if let Some((fn_id, fn_substs)) =\n                                     FunctionItemRefChecker::is_fn_ref(inner_ty)\n@@ -110,7 +110,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                 let arg_defs = self.tcx.fn_sig(def_id).skip_binder().inputs();\n                 for (arg_num, arg_def) in arg_defs.iter().enumerate() {\n                     // For all types reachable from the argument type in the fn sig\n-                    for generic_inner_ty in arg_def.walk(self.tcx) {\n+                    for generic_inner_ty in arg_def.walk() {\n                         if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n                             // If the inner type matches the type bound by `Pointer`\n                             if TyS::same_type(inner_ty, bound_ty) {"}, {"sha": "44ded1647fc28f93aa0f3ff1b07ad4f4560d5f2f", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -89,7 +89,7 @@ crate fn mir_callgraph_reachable<'tcx>(\n                     // FIXME: A not fully substituted drop shim can cause ICEs if one attempts to\n                     // have its MIR built. Likely oli-obk just screwed up the `ParamEnv`s, so this\n                     // needs some more analysis.\n-                    if callee.definitely_needs_subst(tcx) {\n+                    if callee.needs_subst() {\n                         continue;\n                     }\n                 }"}, {"sha": "93cc24b879d3505611fa32c17645479a3390cad2", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -342,7 +342,7 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n         }\n     }\n \n-    debug_assert!(!body.has_free_regions(tcx), \"Free regions in MIR for CTFE\");\n+    debug_assert!(!body.has_free_regions(), \"Free regions in MIR for CTFE\");\n \n     body\n }\n@@ -529,7 +529,7 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n         tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(did)).steal();\n     run_optimization_passes(tcx, &mut body);\n \n-    debug_assert!(!body.has_free_regions(tcx), \"Free regions in optimized MIR\");\n+    debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n \n     body\n }\n@@ -556,7 +556,7 @@ fn promoted_mir<'tcx>(\n         run_post_borrowck_cleanup_passes(tcx, body);\n     }\n \n-    debug_assert!(!promoted.has_free_regions(tcx), \"Free regions in promoted MIR\");\n+    debug_assert!(!promoted.has_free_regions(), \"Free regions in promoted MIR\");\n \n     tcx.arena.alloc(promoted)\n }"}, {"sha": "919171db39e3160ac15bfe61f13b8cf523c8acf5", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -171,7 +171,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n     let source = MirSource::from_instance(ty::InstanceDef::DropGlue(def_id, ty));\n     let mut body =\n-        new_body(tcx, source, blocks, local_decls_for_sig(&sig, span), sig.inputs().len(), span);\n+        new_body(source, blocks, local_decls_for_sig(&sig, span), sig.inputs().len(), span);\n \n     if ty.is_some() {\n         // The first argument (index 0), but add 1 for the return value.\n@@ -210,15 +210,13 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n }\n \n fn new_body<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n     source: MirSource<'tcx>,\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     arg_count: usize,\n     span: Span,\n ) -> Body<'tcx> {\n     Body::new(\n-        tcx,\n         source,\n         basic_blocks,\n         IndexVec::from_elem_n(\n@@ -362,14 +360,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             self.def_id,\n             self.sig.inputs_and_output[0],\n         ));\n-        new_body(\n-            self.tcx,\n-            source,\n-            self.blocks,\n-            self.local_decls,\n-            self.sig.inputs().len(),\n-            self.span,\n-        )\n+        new_body(source, self.blocks, self.local_decls, self.sig.inputs().len(), self.span)\n     }\n \n     fn source_info(&self) -> SourceInfo {\n@@ -719,14 +710,8 @@ fn build_call_shim<'tcx>(\n         block(&mut blocks, vec![], TerminatorKind::Resume, true);\n     }\n \n-    let mut body = new_body(\n-        tcx,\n-        MirSource::from_instance(instance),\n-        blocks,\n-        local_decls,\n-        sig.inputs().len(),\n-        span,\n-    );\n+    let mut body =\n+        new_body(MirSource::from_instance(instance), blocks, local_decls, sig.inputs().len(), span);\n \n     if let Abi::RustCall = sig.abi {\n         body.spread_arg = Some(Local::new(sig.inputs().len()));\n@@ -791,7 +776,6 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n \n     let source = MirSource::item(ctor_id);\n     let body = new_body(\n-        tcx,\n         source,\n         IndexVec::from_elem_n(start_block, 1),\n         local_decls,"}, {"sha": "7e7f693870656ec4e8728248c8e82db15a6f64a2", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -573,7 +573,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     let type_length = instance\n         .substs\n         .iter()\n-        .flat_map(|arg| arg.walk(tcx))\n+        .flat_map(|arg| arg.walk())\n         .filter(|arg| match arg.unpack() {\n             GenericArgKind::Type(_) | GenericArgKind::Const(_) => true,\n             GenericArgKind::Lifetime(_) => false,"}, {"sha": "681271be7beb9be54bf9425cab8c835372bbf2eb", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -303,9 +303,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n \n                 // When polymorphization is enabled, methods which do not depend on their generic\n                 // parameters, but the self-type of their impl block do will fail to normalize.\n-                if !tcx.sess.opts.debugging_opts.polymorphize\n-                    || !instance.definitely_needs_subst(tcx)\n-                {\n+                if !tcx.sess.opts.debugging_opts.polymorphize || !instance.needs_subst() {\n                     // This is a method within an impl, find out what the self-type is:\n                     let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,"}, {"sha": "4b17c22a68c268c8ee17b782c097af6dd67ceb06", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -277,12 +277,9 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !c.potentially_has_param_types_or_consts() {\n+        if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -292,7 +289,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted: Some(p)})\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p)})\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`\n                 if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n@@ -306,7 +303,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n             ty::ConstKind::Unevaluated(uv)\n                 if matches!(self.tcx.def_kind(uv.def.did), DefKind::AnonConst | DefKind::InlineConst) =>\n             {\n-                self.visit_child_body(uv.def.did, uv.substs(self.tcx));\n+                self.visit_child_body(uv.def.did, uv.substs);\n                 ControlFlow::CONTINUE\n             }\n             _ => c.super_visit_with(self),\n@@ -315,7 +312,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !ty.potentially_has_param_types_or_consts() {\n+        if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -343,21 +340,16 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n /// Visitor used to check if a generic parameter is used.\n-struct HasUsedGenericParams<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+struct HasUsedGenericParams<'a> {\n     unused_parameters: &'a FiniteBitSet<u32>,\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n+impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n     type BreakTy = ();\n \n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n-\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !c.potentially_has_param_types_or_consts() {\n+        if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -375,7 +367,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !ty.potentially_has_param_types_or_consts() {\n+        if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n "}, {"sha": "7577b77181a061e308bd8c2e96ed3b8052556c30", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -177,10 +177,6 @@ where\n {\n     type BreakTy = V::BreakTy;\n \n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.def_id_visitor.tcx())\n-    }\n-\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n         // InternalSubsts are not visited here because they are visited below in `super_visit_with`."}, {"sha": "c981b3ff54663a21f66dd28decbafda8e0bb74af", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -107,9 +107,9 @@ fn get_symbol_hash<'tcx>(\n         tcx.def_path_hash(def_id).hash_stable(&mut hcx, &mut hasher);\n \n         // Include the main item-type. Note that, in this case, the\n-        // assertions about `definitely_needs_subst` may not hold, but this item-type\n+        // assertions about `needs_subst` may not hold, but this item-type\n         // ought to be the same for every reference anyway.\n-        assert!(!item_type.has_erasable_regions(tcx));\n+        assert!(!item_type.has_erasable_regions());\n         hcx.while_hashing_spans(false, |hcx| {\n             hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n                 item_type.hash_stable(hcx, &mut hasher);"}, {"sha": "14e12bed59e1e77282c6832e73b4e79c088e991e", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -317,9 +317,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n         // Encode impl generic params if the substitutions contain parameters (implying\n         // polymorphization is enabled) and this isn't an inherent impl.\n-        if impl_trait_ref.is_some()\n-            && substs.iter().any(|a| a.definitely_has_param_types_or_consts(self.tcx))\n-        {\n+        if impl_trait_ref.is_some() && substs.iter().any(|a| a.has_param_types_or_consts()) {\n             self = self.path_generic_args(\n                 |this| {\n                     this.path_append_ns("}, {"sha": "d174e00df77a9c722e6837e5d5fbd14c2342e3cf", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -444,7 +444,7 @@ fn orphan_check_trait_ref<'tcx>(\n ) -> Result<(), OrphanCheckErr<'tcx>> {\n     debug!(\"orphan_check_trait_ref(trait_ref={:?}, in_crate={:?})\", trait_ref, in_crate);\n \n-    if trait_ref.needs_infer() && trait_ref.definitely_needs_subst(tcx) {\n+    if trait_ref.needs_infer() && trait_ref.needs_subst() {\n         bug!(\n             \"can't orphan check a trait ref with both params and inference variables {:?}\",\n             trait_ref"}, {"sha": "5a69c5d50ff762dc26dae8bf6e08720d23ac7393", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -84,7 +84,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Node::Leaf(leaf) => {\n                         if leaf.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n-                        } else if leaf.definitely_has_param_types_or_consts(tcx) {\n+                        } else if leaf.has_param_types_or_consts() {\n                             failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                         }\n \n@@ -93,7 +93,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Node::Cast(_, _, ty) => {\n                         if ty.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n-                        } else if ty.definitely_has_param_types_or_consts(tcx) {\n+                        } else if ty.has_param_types_or_consts() {\n                             failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                         }\n \n@@ -149,7 +149,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // See #74595 for more details about this.\n     let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n \n-    if concrete.is_ok() && uv.substs(infcx.tcx).definitely_has_param_types_or_consts(infcx.tcx) {\n+    if concrete.is_ok() && uv.substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(uv.def.did) {\n             DefKind::AnonConst | DefKind::InlineConst => {\n                 let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n@@ -196,7 +196,7 @@ impl<'tcx> AbstractConst<'tcx> {\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         let inner = tcx.thir_abstract_const_opt_const_arg(uv.def)?;\n         debug!(\"AbstractConst::new({:?}) = {:?}\", uv, inner);\n-        Ok(inner.map(|inner| AbstractConst { inner, substs: uv.substs(tcx) }))\n+        Ok(inner.map(|inner| AbstractConst { inner, substs: uv.substs }))\n     }\n \n     pub fn from_const(\n@@ -271,7 +271,6 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         struct IsThirPolymorphic<'a, 'tcx> {\n             is_poly: bool,\n             thir: &'a thir::Thir<'tcx>,\n-            tcx: TyCtxt<'tcx>,\n         }\n \n         use thir::visit;\n@@ -281,25 +280,25 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             }\n \n             fn visit_expr(&mut self, expr: &thir::Expr<'tcx>) {\n-                self.is_poly |= expr.ty.definitely_has_param_types_or_consts(self.tcx);\n+                self.is_poly |= expr.ty.has_param_types_or_consts();\n                 if !self.is_poly {\n                     visit::walk_expr(self, expr)\n                 }\n             }\n \n             fn visit_pat(&mut self, pat: &thir::Pat<'tcx>) {\n-                self.is_poly |= pat.ty.definitely_has_param_types_or_consts(self.tcx);\n+                self.is_poly |= pat.ty.has_param_types_or_consts();\n                 if !self.is_poly {\n                     visit::walk_pat(self, pat);\n                 }\n             }\n \n             fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) {\n-                self.is_poly |= ct.definitely_has_param_types_or_consts(self.tcx);\n+                self.is_poly |= ct.has_param_types_or_consts();\n             }\n         }\n \n-        let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body, tcx };\n+        let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body };\n         visit::walk_expr(&mut is_poly_vis, &body[body_id]);\n         debug!(\"AbstractConstBuilder: is_poly={}\", is_poly_vis.is_poly);\n         if !is_poly_vis.is_poly {"}, {"sha": "346590a2de26ff9118a55f6280153246e66afe85", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -538,7 +538,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         Err(NotConstEvaluatable::MentionsInfer) => {\n                             pending_obligation.stalled_on.clear();\n                             pending_obligation.stalled_on.extend(\n-                                uv.substs(infcx.tcx)\n+                                uv.substs\n                                     .iter()\n                                     .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                             );\n@@ -583,7 +583,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                                 Err(ErrorHandled::TooGeneric) => {\n                                     stalled_on.extend(\n                                         unevaluated\n-                                            .substs(tcx)\n+                                            .substs\n                                             .iter()\n                                             .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                                     );\n@@ -654,7 +654,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,\n     ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {\n         let infcx = self.selcx.infcx();\n-        if obligation.predicate.is_known_global() {\n+        if obligation.predicate.is_global() {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n             if infcx.predicate_must_hold_considering_regions(obligation) {\n@@ -708,7 +708,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n     ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {\n         let tcx = self.selcx.tcx();\n \n-        if obligation.predicate.is_global(tcx) {\n+        if obligation.predicate.is_global() {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n             if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {\n@@ -756,15 +756,14 @@ fn substs_infer_vars<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     substs: ty::Binder<'tcx, SubstsRef<'tcx>>,\n ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {\n-    let tcx = selcx.tcx();\n     selcx\n         .infcx()\n         .resolve_vars_if_possible(substs)\n         .skip_binder() // ok because this check doesn't care about regions\n         .iter()\n         .filter(|arg| arg.has_infer_types_or_consts())\n-        .flat_map(move |arg| {\n-            let mut walker = arg.walk(tcx);\n+        .flat_map(|arg| {\n+            let mut walker = arg.walk();\n             while let Some(c) = walker.next() {\n                 if !c.has_infer_types_or_consts() {\n                     walker.visited.remove(&c);"}, {"sha": "23f534858b82a865436661d444580391cdf59fd0", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -465,7 +465,7 @@ fn subst_and_check_impossible_predicates<'tcx>(\n     debug!(\"subst_and_check_impossible_predicates(key={:?})\", key);\n \n     let mut predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n-    predicates.retain(|predicate| !predicate.definitely_needs_subst(tcx));\n+    predicates.retain(|predicate| !predicate.needs_subst());\n     let result = impossible_predicates(tcx, predicates);\n \n     debug!(\"subst_and_check_impossible_predicates(key={:?}) = {:?}\", key, result);"}, {"sha": "185d64eab707ac4c99222ded595518d8dff9309a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -274,7 +274,7 @@ fn predicate_references_self<'tcx>(\n     (predicate, sp): (ty::Predicate<'tcx>, Span),\n ) -> Option<Span> {\n     let self_ty = tcx.types.self_param;\n-    let has_self_ty = |arg: &GenericArg<'tcx>| arg.walk(tcx).any(|arg| arg == self_ty.into());\n+    let has_self_ty = |arg: &GenericArg<'_>| arg.walk().any(|arg| arg == self_ty.into());\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Trait(ref data) => {\n             // In the case of a trait predicate, we can skip the \"self\" type.\n@@ -768,9 +768,6 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n \n     impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n         type BreakTy = ();\n-        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-            Some(self.tcx)\n-        }\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {"}, {"sha": "81ee22c1de4d93dae3f52dcd22f6c00926f1bc9c", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -77,11 +77,8 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n         // The rest of the code is already set up to be lazy about replacing bound vars,\n         // and only when we actually have to normalize.\n         if value.has_escaping_bound_vars() {\n-            let mut max_visitor = MaxEscapingBoundVarVisitor {\n-                tcx: self.infcx.tcx,\n-                outer_index: ty::INNERMOST,\n-                escaping: 0,\n-            };\n+            let mut max_visitor =\n+                MaxEscapingBoundVarVisitor { outer_index: ty::INNERMOST, escaping: 0 };\n             value.visit_with(&mut max_visitor);\n             if max_visitor.escaping > 0 {\n                 normalizer.universes.extend((0..max_visitor.escaping).map(|_| None));\n@@ -104,18 +101,13 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n }\n \n /// Visitor to find the maximum escaping bound var\n-struct MaxEscapingBoundVarVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+struct MaxEscapingBoundVarVisitor {\n     // The index which would count as escaping\n     outer_index: ty::DebruijnIndex,\n     escaping: usize,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n-\n+impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "36af78b66edfa47bd8d5790a6ece1aac188d97c9", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -997,7 +997,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let tail_field_ty = tcx.type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                for arg in tail_field_ty.walk(tcx) {\n+                for arg in tail_field_ty.walk() {\n                     if let Some(i) = maybe_unsizing_param_idx(arg) {\n                         unsizing_params.insert(i);\n                     }\n@@ -1006,7 +1006,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Ensure none of the other fields mention the parameters used\n                 // in unsizing.\n                 for field in prefix_fields {\n-                    for arg in tcx.type_of(field.did).walk(tcx) {\n+                    for arg in tcx.type_of(field.did).walk() {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n                             unsizing_params.remove(i);\n                         }"}, {"sha": "1414c742635c401855b0f8de3f54b487b31542c1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -527,7 +527,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // contain the \"'static\" lifetime (any other lifetime\n                     // would either be late-bound or local), so it is guaranteed\n                     // to outlive any other lifetime\n-                    if pred.0.is_global(self.infcx.tcx) && !pred.0.has_late_bound_regions() {\n+                    if pred.0.is_global() && !pred.0.has_late_bound_regions() {\n                         Ok(EvaluatedToOk)\n                     } else {\n                         Ok(EvaluatedToOkModuloRegions)\n@@ -712,12 +712,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         mut obligation: TraitObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n         if !self.intercrate\n-            && obligation.is_global(self.tcx())\n-            && obligation\n-                .param_env\n-                .caller_bounds()\n-                .iter()\n-                .all(|bound| bound.definitely_needs_subst(self.tcx()))\n+            && obligation.is_global()\n+            && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())\n         {\n             // If a param env has no global bounds, global obligations do not\n             // depend on its particular value in order to work, so we can clear\n@@ -1537,7 +1533,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // the param_env so that it can be given the lowest priority. See\n         // #50825 for the motivation for this.\n         let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {\n-            cand.is_global(self.infcx.tcx) && !cand.has_late_bound_regions()\n+            cand.is_global() && !cand.has_late_bound_regions()\n         };\n \n         // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,"}, {"sha": "2ed7a8f9cf9ea2d2f4366289f3f6f6a5ee3ab43d", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -130,9 +130,6 @@ impl<'a, 'tcx> Search<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n     type BreakTy = NonStructuralMatchTy<'tcx>;\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx())\n-    }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"Search visiting ty: {:?}\", ty);"}, {"sha": "f6e98f427108f7f380dd0579040acaa986fb2677", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -132,11 +132,10 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(b.into());\n         }\n         ty::PredicateKind::ConstEvaluatable(uv) => {\n-            let substs = uv.substs(wf.tcx());\n-            let obligations = wf.nominal_obligations(uv.def.did, substs);\n+            let obligations = wf.nominal_obligations(uv.def.did, uv.substs);\n             wf.out.extend(obligations);\n \n-            for arg in substs.iter() {\n+            for arg in uv.substs.iter() {\n                 wf.compute(arg);\n             }\n         }\n@@ -429,7 +428,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n     /// Pushes all the predicates needed to validate that `ty` is WF into `out`.\n     fn compute(&mut self, arg: GenericArg<'tcx>) {\n-        let mut walker = arg.walk(self.tcx());\n+        let mut walker = arg.walk();\n         let param_env = self.param_env;\n         let depth = self.recursion_depth;\n         while let Some(arg) = walker.next() {\n@@ -443,16 +442,12 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 GenericArgKind::Const(constant) => {\n                     match constant.val {\n                         ty::ConstKind::Unevaluated(uv) => {\n-                            assert!(uv.promoted.is_none());\n-                            let substs = uv.substs(self.tcx());\n-\n-                            let obligations = self.nominal_obligations(uv.def.did, substs);\n+                            let obligations = self.nominal_obligations(uv.def.did, uv.substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n-                                ty::Unevaluated::new(uv.def, substs),\n-                            ))\n-                            .to_predicate(self.tcx());\n+                            let predicate =\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                                    .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::with_depth(\n                                 cause,"}, {"sha": "36c536c0ba3b2af0273852b537d7e45f31fd1134", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -806,7 +806,7 @@ crate fn collect_bound_vars<'tcx, T: TypeFoldable<'tcx>>(\n     tcx: TyCtxt<'tcx>,\n     ty: Binder<'tcx, T>,\n ) -> (T, chalk_ir::VariableKinds<RustInterner<'tcx>>, BTreeMap<DefId, u32>) {\n-    let mut bound_vars_collector = BoundVarsCollector::new(tcx);\n+    let mut bound_vars_collector = BoundVarsCollector::new();\n     ty.as_ref().skip_binder().visit_with(&mut bound_vars_collector);\n     let mut parameters = bound_vars_collector.parameters;\n     let named_parameters: BTreeMap<DefId, u32> = bound_vars_collector\n@@ -836,16 +836,14 @@ crate fn collect_bound_vars<'tcx, T: TypeFoldable<'tcx>>(\n }\n \n crate struct BoundVarsCollector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     binder_index: ty::DebruijnIndex,\n     crate parameters: BTreeMap<u32, chalk_ir::VariableKind<RustInterner<'tcx>>>,\n     crate named_parameters: Vec<DefId>,\n }\n \n impl<'tcx> BoundVarsCollector<'tcx> {\n-    crate fn new(tcx: TyCtxt<'tcx>) -> Self {\n+    crate fn new() -> Self {\n         BoundVarsCollector {\n-            tcx,\n             binder_index: ty::INNERMOST,\n             parameters: BTreeMap::new(),\n             named_parameters: vec![],\n@@ -854,10 +852,6 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n-\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -1076,11 +1070,6 @@ impl PlaceholdersCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        // Anon const substs do not contain placeholders by default.\n-        None\n-    }\n-\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {"}, {"sha": "e7cc0f69e9f952804cb7870e8677a03678e3a384", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -54,10 +54,6 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     type BreakTy = ();\n \n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        // Anon const substs do not contain bound vars by default.\n-        None\n-    }\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,"}, {"sha": "fef83190468196c32ee0257fb33c36aadd889724", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -157,16 +157,6 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         predicates.extend(environment);\n     }\n \n-    // It's important that we include the default substs in unevaluated\n-    // constants, since `Unevaluated` instances in predicates whose substs are None\n-    // can lead to \"duplicate\" caller bounds candidates during trait selection,\n-    // duplicate in the sense that both have their default substs, but the\n-    // candidate that resulted from a superpredicate still uses `None` in its\n-    // `substs_` field of `Unevaluated` to indicate that it has its default substs,\n-    // whereas the other candidate has `substs_: Some(default_substs)`, see\n-    // issue #89334\n-    predicates = tcx.expose_default_const_substs(predicates);\n-\n     let local_did = def_id.as_local();\n     let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n \n@@ -333,7 +323,7 @@ fn well_formed_types_in_env<'tcx>(\n         // constituents are well-formed.\n         NodeKind::InherentImpl => {\n             let self_ty = tcx.type_of(def_id);\n-            inputs.extend(self_ty.walk(tcx));\n+            inputs.extend(self_ty.walk());\n         }\n \n         // In an fn, we assume that the arguments and all their constituents are\n@@ -342,7 +332,7 @@ fn well_formed_types_in_env<'tcx>(\n             let fn_sig = tcx.fn_sig(def_id);\n             let fn_sig = tcx.liberate_late_bound_regions(def_id, fn_sig);\n \n-            inputs.extend(fn_sig.inputs().iter().flat_map(|ty| ty.walk(tcx)));\n+            inputs.extend(fn_sig.inputs().iter().flat_map(|ty| ty.walk()));\n         }\n \n         NodeKind::Other => (),"}, {"sha": "ec6fb622d32aa40c9f7d097115ed143fd1b609e3", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 45, "deletions": 67, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -19,116 +19,94 @@ bitflags! {\n         // Does this have parameters? Used to determine whether substitution is\n         // required.\n         /// Does this have `Param`?\n-        const HAS_KNOWN_TY_PARAM                = 1 << 0;\n+        const HAS_TY_PARAM                = 1 << 0;\n         /// Does this have `ReEarlyBound`?\n-        const HAS_KNOWN_RE_PARAM                = 1 << 1;\n+        const HAS_RE_PARAM                = 1 << 1;\n         /// Does this have `ConstKind::Param`?\n-        const HAS_KNOWN_CT_PARAM                = 1 << 2;\n+        const HAS_CT_PARAM                = 1 << 2;\n \n-        const KNOWN_NEEDS_SUBST                 = TypeFlags::HAS_KNOWN_TY_PARAM.bits\n-                                                | TypeFlags::HAS_KNOWN_RE_PARAM.bits\n-                                                | TypeFlags::HAS_KNOWN_CT_PARAM.bits;\n+        const NEEDS_SUBST                 = TypeFlags::HAS_TY_PARAM.bits\n+                                          | TypeFlags::HAS_RE_PARAM.bits\n+                                          | TypeFlags::HAS_CT_PARAM.bits;\n \n         /// Does this have `Infer`?\n-        const HAS_TY_INFER                      = 1 << 3;\n+        const HAS_TY_INFER                = 1 << 3;\n         /// Does this have `ReVar`?\n-        const HAS_RE_INFER                      = 1 << 4;\n+        const HAS_RE_INFER                = 1 << 4;\n         /// Does this have `ConstKind::Infer`?\n-        const HAS_CT_INFER                      = 1 << 5;\n+        const HAS_CT_INFER                = 1 << 5;\n \n         /// Does this have inference variables? Used to determine whether\n         /// inference is required.\n-        const NEEDS_INFER                       = TypeFlags::HAS_TY_INFER.bits\n-                                                | TypeFlags::HAS_RE_INFER.bits\n-                                                | TypeFlags::HAS_CT_INFER.bits;\n+        const NEEDS_INFER                 = TypeFlags::HAS_TY_INFER.bits\n+                                          | TypeFlags::HAS_RE_INFER.bits\n+                                          | TypeFlags::HAS_CT_INFER.bits;\n \n         /// Does this have `Placeholder`?\n-        const HAS_TY_PLACEHOLDER                = 1 << 6;\n+        const HAS_TY_PLACEHOLDER          = 1 << 6;\n         /// Does this have `RePlaceholder`?\n-        const HAS_RE_PLACEHOLDER                = 1 << 7;\n+        const HAS_RE_PLACEHOLDER          = 1 << 7;\n         /// Does this have `ConstKind::Placeholder`?\n-        const HAS_CT_PLACEHOLDER                = 1 << 8;\n+        const HAS_CT_PLACEHOLDER          = 1 << 8;\n \n         /// `true` if there are \"names\" of regions and so forth\n         /// that are local to a particular fn/inferctxt\n-        const HAS_KNOWN_FREE_LOCAL_REGIONS      = 1 << 9;\n+        const HAS_FREE_LOCAL_REGIONS      = 1 << 9;\n \n         /// `true` if there are \"names\" of types and regions and so forth\n         /// that are local to a particular fn\n-        const HAS_KNOWN_FREE_LOCAL_NAMES        = TypeFlags::HAS_KNOWN_TY_PARAM.bits\n-                                                | TypeFlags::HAS_KNOWN_CT_PARAM.bits\n-                                                | TypeFlags::HAS_TY_INFER.bits\n-                                                | TypeFlags::HAS_CT_INFER.bits\n-                                                | TypeFlags::HAS_TY_PLACEHOLDER.bits\n-                                                | TypeFlags::HAS_CT_PLACEHOLDER.bits\n-                                                // We consider 'freshened' types and constants\n-                                                // to depend on a particular fn.\n-                                                // The freshening process throws away information,\n-                                                // which can make things unsuitable for use in a global\n-                                                // cache. Note that there is no 'fresh lifetime' flag -\n-                                                // freshening replaces all lifetimes with `ReErased`,\n-                                                // which is different from how types/const are freshened.\n-                                                | TypeFlags::HAS_TY_FRESH.bits\n-                                                | TypeFlags::HAS_CT_FRESH.bits\n-                                                | TypeFlags::HAS_KNOWN_FREE_LOCAL_REGIONS.bits;\n-\n-        const HAS_POTENTIAL_FREE_LOCAL_NAMES    = TypeFlags::HAS_KNOWN_FREE_LOCAL_NAMES.bits\n-                                                | TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS.bits;\n+        const HAS_FREE_LOCAL_NAMES        = TypeFlags::HAS_TY_PARAM.bits\n+                                          | TypeFlags::HAS_CT_PARAM.bits\n+                                          | TypeFlags::HAS_TY_INFER.bits\n+                                          | TypeFlags::HAS_CT_INFER.bits\n+                                          | TypeFlags::HAS_TY_PLACEHOLDER.bits\n+                                          | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                          // We consider 'freshened' types and constants\n+                                          // to depend on a particular fn.\n+                                          // The freshening process throws away information,\n+                                          // which can make things unsuitable for use in a global\n+                                          // cache. Note that there is no 'fresh lifetime' flag -\n+                                          // freshening replaces all lifetimes with `ReErased`,\n+                                          // which is different from how types/const are freshened.\n+                                          | TypeFlags::HAS_TY_FRESH.bits\n+                                          | TypeFlags::HAS_CT_FRESH.bits\n+                                          | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n         /// Does this have `Projection`?\n-        const HAS_TY_PROJECTION                 = 1 << 10;\n+        const HAS_TY_PROJECTION           = 1 << 10;\n         /// Does this have `Opaque`?\n-        const HAS_TY_OPAQUE                     = 1 << 11;\n+        const HAS_TY_OPAQUE               = 1 << 11;\n         /// Does this have `ConstKind::Unevaluated`?\n-        const HAS_CT_PROJECTION                 = 1 << 12;\n+        const HAS_CT_PROJECTION           = 1 << 12;\n \n         /// Could this type be normalized further?\n-        const HAS_PROJECTION                    = TypeFlags::HAS_TY_PROJECTION.bits\n-                                                | TypeFlags::HAS_TY_OPAQUE.bits\n-                                                | TypeFlags::HAS_CT_PROJECTION.bits;\n+        const HAS_PROJECTION              = TypeFlags::HAS_TY_PROJECTION.bits\n+                                          | TypeFlags::HAS_TY_OPAQUE.bits\n+                                          | TypeFlags::HAS_CT_PROJECTION.bits;\n \n         /// Is an error type/const reachable?\n-        const HAS_ERROR                         = 1 << 13;\n+        const HAS_ERROR                   = 1 << 13;\n \n         /// Does this have any region that \"appears free\" in the type?\n         /// Basically anything but `ReLateBound` and `ReErased`.\n-        const HAS_KNOWN_FREE_REGIONS            = 1 << 14;\n-\n-        const HAS_POTENTIAL_FREE_REGIONS        = TypeFlags::HAS_KNOWN_FREE_REGIONS.bits\n-                                                | TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS.bits;\n+        const HAS_FREE_REGIONS            = 1 << 14;\n \n         /// Does this have any `ReLateBound` regions? Used to check\n         /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND                 = 1 << 15;\n+        const HAS_RE_LATE_BOUND           = 1 << 15;\n \n         /// Does this have any `ReErased` regions?\n-        const HAS_RE_ERASED                     = 1 << 16;\n+        const HAS_RE_ERASED               = 1 << 16;\n \n         /// Does this value have parameters/placeholders/inference variables which could be\n         /// replaced later, in a way that would change the results of `impl` specialization?\n-        ///\n-        /// Note that this flag being set is not a guarantee, as it is also\n-        /// set if there are any anon consts with unknown default substs.\n-        const STILL_FURTHER_SPECIALIZABLE       = 1 << 17;\n+        const STILL_FURTHER_SPECIALIZABLE = 1 << 17;\n \n         /// Does this value have `InferTy::FreshTy/FreshIntTy/FreshFloatTy`?\n-        const HAS_TY_FRESH                      = 1 << 18;\n+        const HAS_TY_FRESH                = 1 << 18;\n \n         /// Does this value have `InferConst::Fresh`?\n-        const HAS_CT_FRESH                      = 1 << 19;\n-\n-        /// Does this value have unknown default anon const substs.\n-        ///\n-        /// For more details refer to...\n-        /// FIXME(@lcnr): ask me for now, still have to write all of this.\n-        const HAS_UNKNOWN_DEFAULT_CONST_SUBSTS  = 1 << 20;\n-        /// Flags which can be influenced by default anon const substs.\n-        const MAY_NEED_DEFAULT_CONST_SUBSTS     = TypeFlags::HAS_KNOWN_RE_PARAM.bits\n-                                                | TypeFlags::HAS_KNOWN_TY_PARAM.bits\n-                                                | TypeFlags::HAS_KNOWN_CT_PARAM.bits\n-                                                | TypeFlags::HAS_KNOWN_FREE_LOCAL_REGIONS.bits\n-                                                | TypeFlags::HAS_KNOWN_FREE_REGIONS.bits;\n-\n+        const HAS_CT_FRESH                = 1 << 19;\n     }\n }\n "}, {"sha": "2ada1c0ddf4fa19c9fc6275577d72337ece2e415", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -388,7 +388,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     if self.is_object && has_default {\n                         let default_ty = tcx.at(self.span).type_of(param.def_id);\n                         let self_param = tcx.types.self_param;\n-                        if default_ty.walk(tcx).any(|arg| arg == self_param.into()) {\n+                        if default_ty.walk().any(|arg| arg == self_param.into()) {\n                             // There is no suitable inference default for a type parameter\n                             // that references self, in an object type.\n                             return true;\n@@ -1378,7 +1378,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         // A `Self` within the original bound will be substituted with a\n                         // `trait_object_dummy_self`, so check for that.\n                         let references_self =\n-                            pred.skip_binder().ty.walk(tcx).any(|arg| arg == dummy_self.into());\n+                            pred.skip_binder().ty.walk().any(|arg| arg == dummy_self.into());\n \n                         // If the projection output contains `Self`, force the user to\n                         // elaborate it explicitly to avoid a lot of complexity.\n@@ -2225,7 +2225,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(path.segments);\n                 // Try to evaluate any array length constants.\n                 let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n-                if forbid_generic && normalized_ty.definitely_needs_subst(tcx) {\n+                if forbid_generic && normalized_ty.needs_subst() {\n                     let mut err = tcx.sess.struct_span_err(\n                         path.span,\n                         \"generic `Self` types are currently not permitted in anonymous constants\","}, {"sha": "b884f4c9b8964724c53a57a5c788e08c1b74d5fc", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -462,17 +462,14 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n     debug!(?item, ?span);\n \n     struct FoundParentLifetime;\n-    struct FindParentLifetimeVisitor<'tcx>(TyCtxt<'tcx>, &'tcx ty::Generics);\n+    struct FindParentLifetimeVisitor<'tcx>(&'tcx ty::Generics);\n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for FindParentLifetimeVisitor<'tcx> {\n         type BreakTy = FoundParentLifetime;\n-        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-            Some(self.0)\n-        }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"FindParentLifetimeVisitor: r={:?}\", r);\n             if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n-                if *index < self.1.parent_count as u32 {\n+                if *index < self.0.parent_count as u32 {\n                     return ControlFlow::Break(FoundParentLifetime);\n                 } else {\n                     return ControlFlow::CONTINUE;\n@@ -502,16 +499,13 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n-        fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-            Some(self.tcx)\n-        }\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n             if t == self.opaque_identity_ty {\n                 ControlFlow::CONTINUE\n             } else {\n-                t.super_visit_with(&mut FindParentLifetimeVisitor(self.tcx, self.generics))\n+                t.super_visit_with(&mut FindParentLifetimeVisitor(self.generics))\n                     .map_break(|FoundParentLifetime| t)\n             }\n         }\n@@ -1381,7 +1375,7 @@ pub(super) fn check_type_params_are_used<'tcx>(\n         return;\n     }\n \n-    for leaf in ty.walk(tcx) {\n+    for leaf in ty.walk() {\n         if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n             if let ty::Param(param) = leaf_ty.kind() {\n                 debug!(\"found use of ty param {:?}\", param);\n@@ -1479,10 +1473,6 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n             {\n                 struct OpaqueTypeCollector(Vec<DefId>);\n                 impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypeCollector {\n-                    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-                        // Default anon const substs cannot contain opaque types.\n-                        None\n-                    }\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Opaque(def, _) => {"}, {"sha": "a031f802b6d98aab4c3aa566f0eff178ba6bc549", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -235,7 +235,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         debug!(\"fcx {}\", self.tag());\n \n-        if self.can_contain_user_lifetime_bounds((substs, user_self_ty)) {\n+        if Self::can_contain_user_lifetime_bounds((substs, user_self_ty)) {\n             let canonicalized = self.infcx.canonicalize_user_type_annotation(UserType::TypeOf(\n                 def_id,\n                 UserSubsts { substs, user_self_ty },\n@@ -489,7 +489,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = self.to_ty(ast_ty);\n         debug!(\"to_ty_saving_user_provided_ty: ty={:?}\", ty);\n \n-        if self.can_contain_user_lifetime_bounds(ty) {\n+        if Self::can_contain_user_lifetime_bounds(ty) {\n             let c_ty = self.infcx.canonicalize_response(UserType::Ty(ty));\n             debug!(\"to_ty_saving_user_provided_ty: c_ty={:?}\", c_ty);\n             self.typeck_results.borrow_mut().user_provided_types_mut().insert(ast_ty.hir_id, c_ty);\n@@ -541,11 +541,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // reader, although I have my doubts). Also pass in types with inference\n     // types, because they may be repeated. Other sorts of things are already\n     // sufficiently enforced with erased regions. =)\n-    fn can_contain_user_lifetime_bounds<T>(&self, t: T) -> bool\n+    fn can_contain_user_lifetime_bounds<T>(t: T) -> bool\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        t.has_free_regions(self.tcx) || t.has_projections() || t.has_infer_types()\n+        t.has_free_regions() || t.has_projections() || t.has_infer_types()\n     }\n \n     pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {"}, {"sha": "4d88feb65d17d4200f2955d6969009f8b25dcf2c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1036,7 +1036,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let ty = self.resolve_vars_if_possible(ty);\n                     // We walk the argument type because the argument's type could have\n                     // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                    if ty.walk(self.tcx).any(|arg| arg == self_) { Some(i) } else { None }\n+                    if ty.walk().any(|arg| arg == self_) { Some(i) } else { None }\n                 })\n                 .collect::<Vec<usize>>();\n "}, {"sha": "c20c457de85c8796f6429c20ef6d365a474cb249", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -423,7 +423,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n                 if let Some(missing_trait) = missing_trait {\n-                    let mut visitor = TypeParamVisitor(self.tcx, vec![]);\n+                    let mut visitor = TypeParamVisitor(vec![]);\n                     visitor.visit_ty(lhs_ty);\n \n                     if op.node == hir::BinOpKind::Add\n@@ -434,7 +434,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // This has nothing here because it means we did string\n                         // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                         // we don't want the note in the else clause to be emitted\n-                    } else if let [ty] = &visitor.1[..] {\n+                    } else if let [ty] = &visitor.0[..] {\n                         if let ty::Param(p) = *ty.kind() {\n                             // Check if the method would be found if the type param wasn't\n                             // involved. If so, it means that adding a trait bound to the param is\n@@ -991,15 +991,12 @@ fn suggest_constraining_param(\n     }\n }\n \n-struct TypeParamVisitor<'tcx>(TyCtxt<'tcx>, Vec<Ty<'tcx>>);\n+struct TypeParamVisitor<'tcx>(Vec<Ty<'tcx>>);\n \n impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.0)\n-    }\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Param(_) = ty.kind() {\n-            self.1.push(ty);\n+            self.0.push(ty);\n         }\n         ty.super_visit_with(self)\n     }"}, {"sha": "964d4523bc01c92e65fba2fd277a0014f860db6f", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -312,7 +312,7 @@ fn check_gat_where_clauses(\n         // of  the function signature. In our example, the GAT in the return\n         // type is `<Self as LendingIterator>::Item<'a>`, so 'a and Self are arguments.\n         let (regions, types) =\n-            GATSubstCollector::visit(tcx, trait_item.def_id.to_def_id(), sig.output());\n+            GATSubstCollector::visit(trait_item.def_id.to_def_id(), sig.output());\n \n         // If both regions and types are empty, then this GAT isn't in the\n         // return type, and we shouldn't try to do clause analysis\n@@ -602,7 +602,6 @@ fn resolve_regions_with_wf_tys<'tcx>(\n /// the two vectors, `regions` and `types` (depending on their kind). For each\n /// parameter `Pi` also track the index `i`.\n struct GATSubstCollector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     gat: DefId,\n     // Which region appears and which parameter index its subsituted for\n     regions: FxHashSet<(ty::Region<'tcx>, usize)>,\n@@ -612,16 +611,11 @@ struct GATSubstCollector<'tcx> {\n \n impl<'tcx> GATSubstCollector<'tcx> {\n     fn visit<T: TypeFoldable<'tcx>>(\n-        tcx: TyCtxt<'tcx>,\n         gat: DefId,\n         t: T,\n     ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n-        let mut visitor = GATSubstCollector {\n-            tcx,\n-            gat,\n-            regions: FxHashSet::default(),\n-            types: FxHashSet::default(),\n-        };\n+        let mut visitor =\n+            GATSubstCollector { gat, regions: FxHashSet::default(), types: FxHashSet::default() };\n         t.visit_with(&mut visitor);\n         (visitor.regions, visitor.types)\n     }\n@@ -649,10 +643,6 @@ impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n         }\n         t.super_visit_with(self)\n     }\n-\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n }\n \n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n@@ -1198,7 +1188,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                     // Ignore dependent defaults -- that is, where the default of one type\n                     // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n                     // be sure if it will error or not as user might always specify the other.\n-                    if !ty.definitely_needs_subst(tcx) {\n+                    if !ty.needs_subst() {\n                         fcx.register_wf_obligation(\n                             ty.into(),\n                             tcx.def_span(param.def_id),\n@@ -1214,7 +1204,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                     // for `struct Foo<const N: usize, const M: usize = { 1 - 2 }>`\n                     // we should eagerly error.\n                     let default_ct = tcx.const_param_default(param.def_id);\n-                    if !default_ct.definitely_needs_subst(tcx) {\n+                    if !default_ct.needs_subst() {\n                         fcx.register_wf_obligation(\n                             default_ct.into(),\n                             tcx.def_span(param.def_id),\n@@ -1248,7 +1238,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 if is_our_default(param) {\n                     let default_ty = tcx.type_of(param.def_id);\n                     // ... and it's not a dependent default, ...\n-                    if !default_ty.definitely_needs_subst(tcx) {\n+                    if !default_ty.needs_subst() {\n                         // ... then substitute it with the default.\n                         return default_ty.into();\n                     }\n@@ -1261,7 +1251,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 if is_our_default(param) {\n                     let default_ct = tcx.const_param_default(param.def_id);\n                     // ... and it's not a dependent default, ...\n-                    if !default_ct.definitely_needs_subst(tcx) {\n+                    if !default_ct.needs_subst() {\n                         // ... then substitute it with the default.\n                         return default_ct.into();\n                     }\n@@ -1277,15 +1267,12 @@ fn check_where_clauses<'tcx, 'fcx>(\n         .predicates\n         .iter()\n         .flat_map(|&(pred, sp)| {\n-            struct CountParams<'tcx> {\n-                tcx: TyCtxt<'tcx>,\n+            #[derive(Default)]\n+            struct CountParams {\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams<'tcx> {\n+            impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n                 type BreakTy = ();\n-                fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-                    Some(self.tcx)\n-                }\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Param(param) = t.kind() {\n@@ -1305,12 +1292,12 @@ fn check_where_clauses<'tcx, 'fcx>(\n                     c.super_visit_with(self)\n                 }\n             }\n-            let mut param_count = CountParams { tcx: fcx.tcx, params: FxHashSet::default() };\n+            let mut param_count = CountParams::default();\n             let has_region = pred.visit_with(&mut param_count).is_break();\n             let substituted_pred = pred.subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n-            if substituted_pred.definitely_has_param_types_or_consts(tcx)\n+            if substituted_pred.has_param_types_or_consts()\n                 || param_count.params.len() > 1\n                 || has_region\n             {\n@@ -1698,7 +1685,7 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirI\n     for obligation in implied_obligations {\n         let pred = obligation.predicate;\n         // Match the existing behavior.\n-        if pred.is_global(fcx.tcx) && !pred.has_late_bound_regions() {\n+        if pred.is_global() && !pred.has_late_bound_regions() {\n             let pred = fcx.normalize_associated_types_in(span, pred);\n             let hir_node = fcx.tcx.hir().find(id);\n "}, {"sha": "bb407d563e7aac52c0f024195722129542450c8b", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -130,7 +130,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     fn write_ty_to_typeck_results(&mut self, hir_id: hir::HirId, ty: Ty<'tcx>) {\n         debug!(\"write_ty_to_typeck_results({:?}, {:?})\", hir_id, ty);\n-        assert!(!ty.needs_infer() && !ty.has_placeholders() && !ty.has_free_regions(self.tcx()));\n+        assert!(!ty.needs_infer() && !ty.has_placeholders() && !ty.has_free_regions());\n         self.typeck_results.node_types_mut().insert(hir_id, ty);\n     }\n \n@@ -750,7 +750,7 @@ impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n         self.tcx\n     }\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if ty.has_type_flags(ty::TypeFlags::HAS_POTENTIAL_FREE_REGIONS) {\n+        if ty.has_type_flags(ty::TypeFlags::HAS_FREE_REGIONS) {\n             ty.super_fold_with(self)\n         } else {\n             ty"}, {"sha": "fbb630004cacd58c5bfa92cc3e754169f3c97cef", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -67,7 +67,6 @@ fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         opt_const_param_of: type_of::opt_const_param_of,\n-        default_anon_const_substs: type_of::default_anon_const_substs,\n         type_of: type_of::type_of,\n         item_bounds: item_bounds::item_bounds,\n         explicit_item_bounds: item_bounds::explicit_item_bounds,\n@@ -2277,7 +2276,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             tcx,\n             &mut predicates,\n             trait_ref,\n-            &mut cgp::parameters_for_impl(tcx, self_ty, trait_ref),\n+            &mut cgp::parameters_for_impl(self_ty, trait_ref),\n         );\n     }\n "}, {"sha": "403310a865ad8755ba62aecd2444b30305ba5cdb", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, Node};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::Ident;\n@@ -278,32 +278,6 @@ fn get_path_containing_arg_in_pat<'hir>(\n     arg_path\n }\n \n-pub(super) fn default_anon_const_substs(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n-    let generics = tcx.generics_of(def_id);\n-    if let Some(parent) = generics.parent {\n-        // This is the reason we bother with having optional anon const substs.\n-        //\n-        // In the future the substs of an anon const will depend on its parents predicates\n-        // at which point eagerly looking at them will cause a query cycle.\n-        //\n-        // So for now this is only an assurance that this approach won't cause cycle errors in\n-        // the future.\n-        let _cycle_check = tcx.predicates_of(parent);\n-    }\n-\n-    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-    // We only expect substs with the following type flags as default substs.\n-    //\n-    // Getting this wrong can lead to ICE and unsoundness, so we assert it here.\n-    for arg in substs.iter() {\n-        let allowed_flags = ty::TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS\n-            | ty::TypeFlags::STILL_FURTHER_SPECIALIZABLE\n-            | ty::TypeFlags::HAS_ERROR;\n-        assert!(!arg.has_type_flags(!allowed_flags));\n-    }\n-    substs\n-}\n-\n pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     let def_id = def_id.expect_local();\n     use rustc_hir::*;"}, {"sha": "1095290132347c85c570b1c0fa04898d896257f9", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -27,13 +27,12 @@ impl From<ty::ParamConst> for Parameter {\n \n /// Returns the set of parameters constrained by the impl header.\n pub fn parameters_for_impl<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n     impl_self_ty: Ty<'tcx>,\n     impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n ) -> FxHashSet<Parameter> {\n     let vec = match impl_trait_ref {\n-        Some(tr) => parameters_for(tcx, &tr, false),\n-        None => parameters_for(tcx, &impl_self_ty, false),\n+        Some(tr) => parameters_for(&tr, false),\n+        None => parameters_for(&impl_self_ty, false),\n     };\n     vec.into_iter().collect()\n }\n@@ -44,26 +43,20 @@ pub fn parameters_for_impl<'tcx>(\n /// of parameters whose values are needed in order to constrain `ty` - these\n /// differ, with the latter being a superset, in the presence of projections.\n pub fn parameters_for<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n     t: &impl TypeFoldable<'tcx>,\n     include_nonconstraining: bool,\n ) -> Vec<Parameter> {\n-    let mut collector = ParameterCollector { tcx, parameters: vec![], include_nonconstraining };\n+    let mut collector = ParameterCollector { parameters: vec![], include_nonconstraining };\n     t.visit_with(&mut collector);\n     collector.parameters\n }\n \n-struct ParameterCollector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+struct ParameterCollector {\n     parameters: Vec<Parameter>,\n     include_nonconstraining: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ParameterCollector<'tcx> {\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.tcx)\n-    }\n-\n+impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Projection(..) | ty::Opaque(..) if !self.include_nonconstraining => {\n@@ -205,12 +198,12 @@ pub fn setup_constraining_predicates<'tcx>(\n                 //     `<<T as Bar>::Baz as Iterator>::Output = <U as Iterator>::Output`\n                 // Then the projection only applies if `T` is known, but it still\n                 // does not determine `U`.\n-                let inputs = parameters_for(tcx, &projection.projection_ty, true);\n+                let inputs = parameters_for(&projection.projection_ty, true);\n                 let relies_only_on_inputs = inputs.iter().all(|p| input_parameters.contains(p));\n                 if !relies_only_on_inputs {\n                     continue;\n                 }\n-                input_parameters.extend(parameters_for(tcx, &projection.ty, false));\n+                input_parameters.extend(parameters_for(&projection.ty, false));\n             } else {\n                 continue;\n             }"}, {"sha": "16049089151c40f44d9239f22c5d8d5c74a13f91", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -117,7 +117,7 @@ fn enforce_impl_params_are_constrained(\n     let impl_predicates = tcx.predicates_of(impl_def_id);\n     let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n \n-    let mut input_parameters = cgp::parameters_for_impl(tcx, impl_self_ty, impl_trait_ref);\n+    let mut input_parameters = cgp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n     cgp::identify_constrained_generic_params(\n         tcx,\n         impl_predicates,\n@@ -134,7 +134,7 @@ fn enforce_impl_params_are_constrained(\n             match item.kind {\n                 ty::AssocKind::Type => {\n                     if item.defaultness.has_value() {\n-                        cgp::parameters_for(tcx, &tcx.type_of(def_id), true)\n+                        cgp::parameters_for(&tcx.type_of(def_id), true)\n                     } else {\n                         Vec::new()\n                     }"}, {"sha": "6296f2ab32a5236d26e77d967de9f52cf7a1f40b", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -206,15 +206,15 @@ fn unconstrained_parent_impl_substs<'tcx>(\n                 continue;\n             }\n \n-            unconstrained_parameters.extend(cgp::parameters_for(tcx, &projection_ty, true));\n+            unconstrained_parameters.extend(cgp::parameters_for(&projection_ty, true));\n \n-            for param in cgp::parameters_for(tcx, &projected_ty, false) {\n+            for param in cgp::parameters_for(&projected_ty, false) {\n                 if !unconstrained_parameters.contains(&param) {\n                     constrained_params.insert(param.0);\n                 }\n             }\n \n-            unconstrained_parameters.extend(cgp::parameters_for(tcx, &projected_ty, true));\n+            unconstrained_parameters.extend(cgp::parameters_for(&projected_ty, true));\n         }\n     }\n \n@@ -248,7 +248,7 @@ fn check_duplicate_params<'tcx>(\n     parent_substs: &Vec<GenericArg<'tcx>>,\n     span: Span,\n ) {\n-    let mut base_params = cgp::parameters_for(tcx, parent_substs, true);\n+    let mut base_params = cgp::parameters_for(parent_substs, true);\n     base_params.sort_by_key(|param| param.0);\n     if let (_, [duplicate, ..]) = base_params.partition_dedup() {\n         let param = impl1_substs[duplicate.0 as usize];\n@@ -376,7 +376,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n     match predicate.kind().skip_binder() {\n         // Global predicates are either always true or always false, so we\n         // are fine to specialize on.\n-        _ if predicate.is_global(tcx) => (),\n+        _ if predicate.is_global() => (),\n         // We allow specializing on explicitly marked traits with no associated\n         // items.\n         ty::PredicateKind::Trait(ty::TraitPredicate {"}, {"sha": "89f0bd8d4215440424d990b78e0e7ea12328bed0", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -114,18 +114,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     required_predicates: &mut RequiredPredicates<'tcx>,\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n ) {\n-    // We must not look into the default substs of consts\n-    // as computing those depends on the results of `predicates_of`.\n-    //\n-    // Luckily the only types contained in default substs are type\n-    // parameters which don't matter here.\n-    //\n-    // FIXME(adt_const_params): Once complex const parameter types\n-    // are allowed, this might be incorrect. I think that we will still be\n-    // fine, as all outlives relations of the const param types should also\n-    // be part of the adt containing it, but we should still both update the\n-    // documentation and add some tests for this.\n-    for arg in field_ty.walk_ignoring_default_const_substs() {\n+    for arg in field_ty.walk() {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n \n@@ -317,7 +306,7 @@ pub fn check_explicit_predicates<'tcx>(\n         // 'b`.\n         if let Some(self_ty) = ignored_self_ty {\n             if let GenericArgKind::Type(ty) = outlives_predicate.0.unpack() {\n-                if ty.walk(tcx).any(|arg| arg == self_ty.into()) {\n+                if ty.walk().any(|arg| arg == self_ty.into()) {\n                     debug!(\"skipping self ty = {:?}\", &ty);\n                     continue;\n                 }"}, {"sha": "b2b607a2ffc2899453867cfc8cc442a0f194b2cc", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -405,8 +405,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n         match &val.val {\n             ty::ConstKind::Unevaluated(uv) => {\n-                let substs = uv.substs(self.tcx());\n-                self.add_constraints_from_invariant_substs(current, substs, variance);\n+                self.add_constraints_from_invariant_substs(current, uv.substs, variance);\n             }\n             _ => {}\n         }"}, {"sha": "38da9a4635db888d1df7862dff479c193ea4e098", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -229,7 +229,7 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n \n crate fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     match n.val {\n-        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted }) => {\n+        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n                 print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))"}, {"sha": "1e53136563885e55fb82974d77d5c8d07db6af76", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -30,7 +30,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[HASH]::BAR), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[HASH]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35"}, {"sha": "a012285c7ec887aca480837179f5cc75d3731608", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -32,7 +32,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[HASH]::FOO), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[HASH]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46"}, {"sha": "7627ed5462396cbfa11be28a9ea700a0b738f4b2", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "7627ed5462396cbfa11be28a9ea700a0b738f4b2", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "e6220176778dcfa42d110f0a172e72c9f25e349c", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -22,7 +22,7 @@\n                                            // + val: Unevaluated(FOO, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[HASH]::main::FOO), const_param_did: None }, substs_: Some([]), promoted: None }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[HASH]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "d602e12a370a3e31d691625157fd4002bb26bd30", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "35916d90e564023fff1d7f5be3cd276496275662", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "39651884e775d1670cf32316fbee3efd07c33450", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "501d72056795c4555acf98c7bfba13dc856bbd69", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "6a580278d5f12490a4438d21e33bc00f563919c5", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -25,7 +25,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "6a580278d5f12490a4438d21e33bc00f563919c5", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -25,7 +25,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "486fc7541c3af26ffd5306fdb543ad6ca7ef29cb", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -38,7 +38,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -52,7 +52,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "7938c0a23e8e9c5c14c9814a007d430e11f45fa9", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "7938c0a23e8e9c5c14c9814a007d430e11f45fa9", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "20771bf4231a0ee8daa2887ce1f0365961ff1d79", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "20771bf4231a0ee8daa2887ce1f0365961ff1d79", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "75d0e75f5b15d0dd8348f7b6ae67045e2d157020", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -50,7 +50,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[2]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:75:42: 75:44\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[2]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n@@ -74,7 +74,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:76:42: 76:45\n-                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[1]) }) }\n+                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n@@ -98,7 +98,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:77:42: 77:47\n-                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48"}, {"sha": "51425af4bdf9a22bfc9ac25f49ba4955af300c7a", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -57,7 +57,7 @@ fn full_tested_match() -> () {\n                                          // + val: Unevaluated(full_tested_match, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[HASH]::full_tested_match), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[HASH]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "1db36c352ff3665b94a95662b3b8514f830d4b44", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -127,7 +127,7 @@ fn array_casts() -> () {\n                                          // + val: Unevaluated(array_casts, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[HASH]::array_casts), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[HASH]::array_casts), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_35);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_18);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "cffe723898777802efcaaec3fdf4ff6811f6b6e0", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -153,7 +153,7 @@ fn main() -> () {\n                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_28);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "af591dd71aa1d37d383570065195df3d6b637821", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -175,8 +175,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                 // skip if there is a `self` parameter binding to a type\n                 // that contains `Self` (i.e.: `self: Box<Self>`), see #4804\n                 if let Some(trait_self_ty) = self.trait_self_ty {\n-                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(self.cx.tcx, cmt.place.ty(), trait_self_ty)\n-                    {\n+                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(cmt.place.ty(), trait_self_ty) {\n                         return;\n                     }\n                 }"}, {"sha": "cb1ef01f5ba9da535914e20717219b40ef8c33af", "filename": "src/tools/clippy/clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if let Some(init) = local.init;\n             then {\n                 let init_ty = cx.typeck_results().expr_ty(init);\n-                let contains_sync_guard = init_ty.walk(cx.tcx).any(|inner| match inner.unpack() {\n+                let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n                     GenericArgKind::Type(inner_ty) => {\n                         SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n                     },"}, {"sha": "ab83291461fb4e1526dd727a898c9d84201a0bd2", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -49,7 +49,7 @@ pub(super) fn check<'tcx>(\n         if same_item_push_visitor.should_lint();\n         if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push;\n         let vec_ty = cx.typeck_results().expr_ty(vec);\n-        let ty = vec_ty.walk(cx.tcx).nth(1).unwrap().expect_ty();\n+        let ty = vec_ty.walk().nth(1).unwrap().expect_ty();\n         if cx\n             .tcx\n             .lang_items()"}, {"sha": "ed5136e7d00ff1cbe7c0643f06062916840ed42c", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -2129,10 +2129,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             // walk the return type and check for Self (this does not check associated types)\n             if let Some(self_adt) = self_ty.ty_adt_def() {\n-                if contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n+                if contains_adt_constructor(ret_ty, self_adt) {\n                     return;\n                 }\n-            } else if contains_ty(cx.tcx, ret_ty, self_ty) {\n+            } else if contains_ty(ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -2143,10 +2143,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(cx.tcx, projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(cx.tcx, projection_predicate.ty, self_ty) {\n+                        } else if contains_ty(projection_predicate.ty, self_ty) {\n                             return;\n                         }\n                     }\n@@ -2195,7 +2195,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n             let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n-            if !contains_ty(cx.tcx, ret_ty, self_ty);\n+            if !contains_ty(ret_ty, self_ty);\n \n             then {\n                 span_lint("}, {"sha": "ebd4fb0bf51ccb4390a4fa96fdf7e9c5c42f1549", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -118,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n-            .filter(|p| !p.is_global(cx.tcx))\n+            .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n                 match obligation.predicate.kind().no_bound_vars() {"}, {"sha": "afc356d1ab25794b810913ade86be05da6be3c3b", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -188,7 +188,10 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx.tcx.const_eval_resolve(\n         cx.param_env,\n-        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+        ty::Unevaluated::new(\n+            ty::WithOptConstParam::unknown(def_id),\n+            substs,\n+        ),\n         None,\n     );\n     is_value_unfrozen_raw(cx, result, ty)"}, {"sha": "ab1559c85d8b1f431946778eeb03991ffa925aa9", "filename": "src/tools/clippy/clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                                 non_send_fields.push(NonSendField {\n                                     def: field_def,\n                                     ty: field_ty,\n-                                    generic_params: collect_generic_params(cx, field_ty),\n+                                    generic_params: collect_generic_params(field_ty),\n                                 })\n                             }\n                         }\n@@ -171,8 +171,8 @@ impl<'tcx> NonSendField<'tcx> {\n \n /// Given a type, collect all of its generic parameters.\n /// Example: `MyStruct<P, Box<Q, R>>` => `vec![P, Q, R]`\n-fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n-    ty.walk(cx.tcx)\n+fn collect_generic_params(ty: Ty<'_>) -> Vec<Ty<'_>> {\n+    ty.walk()\n         .filter_map(|inner| match inner.unpack() {\n             GenericArgKind::Type(inner_ty) => Some(inner_ty),\n             _ => None,\n@@ -226,7 +226,7 @@ fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'t\n \n /// Checks if the type contains any pointer-like types in substs (including nested ones)\n fn contains_pointer_like<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n-    for ty_node in target_ty.walk(cx.tcx) {\n+    for ty_node in target_ty.walk() {\n         if let GenericArgKind::Type(inner_ty) = ty_node.unpack() {\n             match inner_ty.kind() {\n                 ty::RawPtr(_) => {"}, {"sha": "dce1f66107a62c5921a81a9cbe99bbb142e5ce94", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n     Mutability,\n };\n-use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n+use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n@@ -575,7 +575,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 self.possible_borrower.add(borrowed.local, lhs);\n             },\n             other => {\n-                if ContainsRegion(self.cx.tcx)\n+                if ContainsRegion\n                     .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n                     .is_continue()\n                 {\n@@ -624,7 +624,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 .flat_map(HybridBitSet::iter)\n                 .collect();\n \n-            if ContainsRegion(self.cx.tcx)\n+            if ContainsRegion\n                 .visit_ty(self.body.local_decls[*dest].ty)\n                 .is_break()\n             {\n@@ -703,15 +703,12 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleOriginVisitor<'a, 'tcx> {\n     }\n }\n \n-struct ContainsRegion<'tcx>(TyCtxt<'tcx>);\n+struct ContainsRegion;\n \n-impl<'tcx> TypeVisitor<'tcx> for ContainsRegion<'tcx> {\n+impl TypeVisitor<'_> for ContainsRegion {\n     type BreakTy = ();\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.0)\n-    }\n \n-    fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::BREAK\n     }\n }"}, {"sha": "52e708f628a241ffa55f4bdd5a7d18e7287b7d18", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -301,7 +301,7 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n                 .fn_sig(def_id)\n                 .output()\n                 .skip_binder()\n-                .walk(self.cx.tcx)\n+                .walk()\n                 .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n         }\n "}, {"sha": "123d0ad0457d1f1d5c2dff1f13c3f5eee0f6eb28", "filename": "src/tools/clippy/clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -63,10 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         // Ensure method is constructor-like\n         if let Some(self_adt) = self_ty.ty_adt_def() {\n-            if !contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n+            if !contains_adt_constructor(ret_ty, self_adt) {\n                 return;\n             }\n-        } else if !contains_ty(cx.tcx, ret_ty, self_ty) {\n+        } else if !contains_ty(ret_ty, self_ty) {\n             return;\n         }\n "}, {"sha": "32adccdbd1cedea225f47209ea1a97680dc0bc96", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -226,7 +226,7 @@ fn expr_borrows(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n     matches!(ty.kind(), ty::Ref(..))\n         || ty\n-            .walk(cx.tcx)\n+            .walk()\n             .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)))\n }\n "}, {"sha": "cf9a4a5e6d37d7d1c32a4ccdae3e26f7c9485e89", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 //\n                 // See also https://github.com/rust-lang/rust-clippy/issues/2894.\n                 for (impl_hir_ty, trait_sem_ty) in impl_inputs_outputs.zip(trait_method_sig.inputs_and_output) {\n-                    if trait_sem_ty.walk(cx.tcx).any(|inner| inner == self_ty.into()) {\n+                    if trait_sem_ty.walk().any(|inner| inner == self_ty.into()) {\n                         let mut visitor = SkipTyCollector::default();\n                         visitor.visit_ty(impl_hir_ty);\n                         types_to_skip.extend(visitor.types_to_skip);"}, {"sha": "e09a663538ddcfeff5899eae3d0af5155b6a2340", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -413,7 +413,10 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+                        ty::Unevaluated::new(\n+                            ty::WithOptConstParam::unknown(def_id),\n+                            substs,\n+                        ),\n                         None,\n                     )\n                     .ok()"}, {"sha": "c11594002702652576476437e290c357d7ce5cc8", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -1955,7 +1955,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n         .predicates_of(did)\n         .predicates\n         .iter()\n-        .filter_map(|(p, _)| if p.is_global(cx.tcx) { Some(*p) } else { None });\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n     traits::impossible_predicates(\n         cx.tcx,\n         traits::elaborate_predicates(cx.tcx, predicates)\n@@ -2001,15 +2001,15 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n     if is_primitive {\n         // if we have wrappers like Array, Slice or Tuple, print these\n         // and get the type enclosed in the slice ref\n-        match expr_type.peel_refs().walk(cx.tcx).nth(1).unwrap().expect_ty().kind() {\n+        match expr_type.peel_refs().walk().nth(1).unwrap().expect_ty().kind() {\n             rustc_ty::Slice(..) => return Some(\"slice\".into()),\n             rustc_ty::Array(..) => return Some(\"array\".into()),\n             rustc_ty::Tuple(..) => return Some(\"tuple\".into()),\n             _ => {\n                 // is_recursively_primitive_type() should have taken care\n                 // of the rest and we can rely on the type that is found\n                 let refs_peeled = expr_type.peel_refs();\n-                return Some(refs_peeled.walk(cx.tcx).last().unwrap().to_string());\n+                return Some(refs_peeled.walk().last().unwrap().to_string());\n             },\n         }\n     }"}, {"sha": "729ee00cba00e2ce75c86bb7a9b086f249fd895b", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -86,7 +86,7 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n }\n \n fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n-    for arg in ty.walk(tcx) {\n+    for arg in ty.walk() {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n "}, {"sha": "f109b7845b4bdf7e63af2399cdba24b674fccc05", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8693984d32d2f65ce9ded4f65b6b7340bddce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=7be8693984d32d2f65ce9ded4f65b6b7340bddce", "patch": "@@ -37,17 +37,17 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n-    ty.walk(tcx).any(|inner| match inner.unpack() {\n+pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n }\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, adt: &'tcx AdtDef) -> bool {\n-    ty.walk(tcx).any(|inner| match inner.unpack() {\n+pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n@@ -221,7 +221,7 @@ fn is_normalizable_helper<'tcx>(\n                         .iter()\n                         .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n                 }),\n-                _ => ty.walk(cx.tcx).all(|generic_arg| match generic_arg.unpack() {\n+                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n                     GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n                         is_normalizable_helper(cx, param_env, inner_ty, cache)\n                     },"}]}