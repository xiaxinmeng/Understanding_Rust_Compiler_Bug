{"sha": "75f641799effae2c0138215eca968b33429d23fe", "node_id": "C_kwDOAAsO6NoAKDc1ZjY0MTc5OWVmZmFlMmMwMTM4MjE1ZWNhOTY4YjMzNDI5ZDIzZmU", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-10-09T21:58:55Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-10-09T22:44:23Z"}, "message": "Add `GenericParamList::to_generic_args`", "tree": {"sha": "04058850ff7376c1f5fcf6d72fda77dd2d469791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04058850ff7376c1f5fcf6d72fda77dd2d469791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75f641799effae2c0138215eca968b33429d23fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75f641799effae2c0138215eca968b33429d23fe", "html_url": "https://github.com/rust-lang/rust/commit/75f641799effae2c0138215eca968b33429d23fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75f641799effae2c0138215eca968b33429d23fe/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8437e4ba5864143cd3315b8c6a48bcca1192a37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8437e4ba5864143cd3315b8c6a48bcca1192a37a", "html_url": "https://github.com/rust-lang/rust/commit/8437e4ba5864143cd3315b8c6a48bcca1192a37a"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "970e948dfd930f4226be3c9697f0e19dead8d044", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/75f641799effae2c0138215eca968b33429d23fe/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f641799effae2c0138215eca968b33429d23fe/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=75f641799effae2c0138215eca968b33429d23fe", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n     search::FileReference,\n     FxHashSet, RootDatabase,\n };\n-use itertools::{Itertools, Position};\n+use itertools::Itertools;\n use syntax::{\n     ast::{\n         self, edit::IndentLevel, edit_in_place::Indent, make, AstNode, HasAttrs, HasGenericParams,\n@@ -298,37 +298,7 @@ fn update_variant(variant: &ast::Variant, generics: Option<ast::GenericParamList\n     let name = variant.name()?;\n     let ty = generics\n         .filter(|generics| generics.generic_params().count() > 0)\n-        .map(|generics| {\n-            let mut generic_str = String::with_capacity(8);\n-\n-            for (p, more) in generics.generic_params().with_position().map(|p| match p {\n-                Position::First(p) | Position::Middle(p) => (p, true),\n-                Position::Last(p) | Position::Only(p) => (p, false),\n-            }) {\n-                match p {\n-                    ast::GenericParam::ConstParam(konst) => {\n-                        if let Some(name) = konst.name() {\n-                            generic_str.push_str(name.text().as_str());\n-                        }\n-                    }\n-                    ast::GenericParam::LifetimeParam(lt) => {\n-                        if let Some(lt) = lt.lifetime() {\n-                            generic_str.push_str(lt.text().as_str());\n-                        }\n-                    }\n-                    ast::GenericParam::TypeParam(ty) => {\n-                        if let Some(name) = ty.name() {\n-                            generic_str.push_str(name.text().as_str());\n-                        }\n-                    }\n-                }\n-                if more {\n-                    generic_str.push_str(\", \");\n-                }\n-            }\n-\n-            make::ty(&format!(\"{}<{}>\", &name.text(), &generic_str))\n-        })\n+        .map(|generics| make::ty(&format!(\"{}{}\", &name.text(), generics.to_generic_args())))\n         .unwrap_or_else(|| make::ty(&name.text()));\n \n     // change from a record to a tuple field list"}, {"sha": "7d632352828ef8fe43cbc6125c51c6d832ef0e8a", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75f641799effae2c0138215eca968b33429d23fe/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f641799effae2c0138215eca968b33429d23fe/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=75f641799effae2c0138215eca968b33429d23fe", "patch": "@@ -235,6 +235,23 @@ impl ast::GenericParamList {\n             }\n         }\n     }\n+\n+    /// Extracts the const, type, and lifetime names into a new [`ast::GenericParamList`]\n+    pub fn to_generic_args(&self) -> ast::GenericParamList {\n+        let params = self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::ConstParam(it) => {\n+                Some(ast::GenericParam::TypeParam(make::type_param(it.name()?, None)))\n+            }\n+            ast::GenericParam::LifetimeParam(it) => {\n+                Some(ast::GenericParam::LifetimeParam(make::lifetime_param(it.lifetime()?)))\n+            }\n+            ast::GenericParam::TypeParam(it) => {\n+                Some(ast::GenericParam::TypeParam(make::type_param(it.name()?, None)))\n+            }\n+        });\n+\n+        make::generic_param_list(params)\n+    }\n }\n \n impl ast::WhereClause {"}]}