{"sha": "2a3c0d91cfc3852837f857aff0c23c0055bc94fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhM2MwZDkxY2ZjMzg1MjgzN2Y4NTdhZmYwYzIzYzAwNTViYzk0ZmM=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-28T21:31:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-29T22:43:57Z"}, "message": "manual: update list of feature gates, add phase attribute", "tree": {"sha": "6b2852fb149e511145921d552af156ec734e706d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b2852fb149e511145921d552af156ec734e706d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3c0d91cfc3852837f857aff0c23c0055bc94fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3c0d91cfc3852837f857aff0c23c0055bc94fc", "html_url": "https://github.com/rust-lang/rust/commit/2a3c0d91cfc3852837f857aff0c23c0055bc94fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3c0d91cfc3852837f857aff0c23c0055bc94fc/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a91280084347ced9a27c8d05a211f50fe90737", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a91280084347ced9a27c8d05a211f50fe90737", "html_url": "https://github.com/rust-lang/rust/commit/59a91280084347ced9a27c8d05a211f50fe90737"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "79222112b9294ad6add35d24805e6308caf51bfa", "filename": "src/doc/rust.md", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c0d91cfc3852837f857aff0c23c0055bc94fc/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c0d91cfc3852837f857aff0c23c0055bc94fc/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=2a3c0d91cfc3852837f857aff0c23c0055bc94fc", "patch": "@@ -1950,6 +1950,12 @@ interpreted:\n - `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n   destructors from being run twice. Destructors might be run multiple times on\n   the same object with this attribute.\n+- `phase` - on `extern crate` statements, allows specifying which \"phase\" of\n+  compilation the crate should be loaded for. Currently, there are two\n+  choices: `link` and `plugin`. `link` is the default. `plugin` will load the\n+  crate at compile-time and use any syntax extensions or lints that the crate\n+  defines. They can both be specified, `#[phase(link, plugin)]` to use a crate\n+  both at runtime and compiletime.\n \n ### Conditional compilation\n \n@@ -2395,17 +2401,17 @@ The currently implemented features of the reference compiler are:\n                closure as `once` is unlikely to be supported going forward. So\n                they are hidden behind this feature until they are to be removed.\n \n-* `managed_boxes` - Usage of `@` pointers is gated due to many\n+* `asm` - The `asm!` macro provides a means for inline assembly. This is often\n+          useful, but the exact syntax for this feature along with its semantics\n+          are likely to change, so this macro usage must be opted into.\n+\n+* `managed_boxes` - Usage of `@` is gated due to many\n                     planned changes to this feature. In the past, this has meant\n                     \"a GC pointer\", but the current implementation uses\n                     reference counting and will likely change drastically over\n                     time. Additionally, the `@` syntax will no longer be used to\n                     create GC boxes.\n \n-* `asm` - The `asm!` macro provides a means for inline assembly. This is often\n-          useful, but the exact syntax for this feature along with its semantics\n-          are likely to change, so this macro usage must be opted into.\n-\n * `non_ascii_idents` - The compiler supports the use of non-ascii identifiers,\n                        but the implementation is a little rough around the\n                        edges, so this can be seen as an experimental feature for\n@@ -2427,6 +2433,66 @@ The currently implemented features of the reference compiler are:\n                 if the system linker is not used then specifying custom flags\n                 doesn't have much meaning.\n \n+* `phase` - Usage of the `#[phase]` attribute allows loading compiler plugins\n+            for custom lints or syntax extensions. The implementation is considered\n+            unwholesome and in need of overhaul, and it is not clear what they\n+            will look like moving forward.\n+\n+* `plugin_registrar` - Indicates that a crate has compiler plugins that it\n+                       wants to load. As with `phase`, the implementation is\n+                       in need of a overhaul, and it is not clear that plugins\n+                       defined using this will continue to work.\n+\n+* `log_syntax` - Allows use of the `log_syntax` macro attribute, which is a\n+                 nasty hack that will certainly be removed.\n+\n+* `trace_macros` - Allows use of the `trace_macros` macro, which is a nasty\n+                   hack that will certainly be removed.\n+\n+* `concat_idents` - Allows use of the `concat_idents` macro, which is in many\n+                    ways insufficient for concatenating identifiers, and may\n+                    be removed entirely for something more wholsome.\n+\n+* `unsafe_destructor` - Allows use of the `#[unsafe_destructor]` attribute,\n+                        which is considered wildly unsafe and will be\n+                        obsoleted by language improvements.\n+\n+* `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n+                 are inherently unstable and no promise about them is made.\n+\n+* `lang_items` - Allows use of the `#[lang]` attribute. Like `intrinsics`,\n+                 lang items are inherently unstable and no promise about\n+                 them is made.\n+\n+* `simd` - Allows use of the `#[simd]` attribute, which is overly simple and\n+           not the SIMD interface we want to expose in the long term.\n+\n+* `default_type_params` - Allows use of default type parameters. The future of\n+                          this feature is uncertain.\n+\n+* `quote` - Allows use of the `quote_*!` family of macros, which are\n+            implemented very poorly and will likely change significantly\n+            with a proper implementation.\n+\n+* `linkage` - Allows use of the `linkage` attribute, which is not portable.\n+\n+* `struct_inherit` - Allows using struct inheritance, which is barely\n+                     implemented and will probably be removed. Don't use this.\n+\n+* `overloaded_calls` - Allow implementing the `Fn*` family of traits on user\n+                       types, allowing overloading the call operator (`()`).\n+                       This feature may still undergo changes before being\n+                       stabilized.\n+\n+* `unboxed_closure_sugar` - Allows using `|Foo| -> Bar` as a trait bound\n+                            meaning one of the `Fn` traits.  Still\n+                            experimental.\n+\n+* `rustc_diagnostic_macros`- A mysterious feature, used in the implementation\n+                             of rustc, not meant for mortals.\n+\n+* `unboxed_closures` - A work in progress feature with many known bugs.\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled\n the new feature (because the directive is no longer necessary). However, if"}, {"sha": "99855c7345cb4e5269a35959944a4edc71e66389", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3c0d91cfc3852837f857aff0c23c0055bc94fc/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3c0d91cfc3852837f857aff0c23c0055bc94fc/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=2a3c0d91cfc3852837f857aff0c23c0055bc94fc", "patch": "@@ -69,6 +69,8 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"rustc_diagnostic_macros\", Active),\n     (\"unboxed_closures\", Active),\n \n+    // if you change this list without updating src/doc/rust.md, cmr will be sad\n+\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", Active),"}]}