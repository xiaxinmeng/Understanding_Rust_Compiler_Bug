{"sha": "2fe6f22dea25dd7498b2acb0f0156563644a13f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTZmMjJkZWEyNWRkNzQ5OGIyYWNiMGYwMTU2NTYzNjQ0YTEzZjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-28T20:35:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-28T20:35:58Z"}, "message": "Rollup merge of #65640 - estebank:recover-missing-semi, r=Centril\n\nUse heuristics to recover parsing of missing `;`\n\n- Detect `,` and `:` typos where `;` was intended.\n- When the next token could have been the start of a new statement,\n  detect a missing semicolon.\n\nFix #48160, fix #44767 (after adding note about statements).", "tree": {"sha": "1b750d9b784fc10e9690b0a6d853edc2c5d1832c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b750d9b784fc10e9690b0a6d853edc2c5d1832c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe6f22dea25dd7498b2acb0f0156563644a13f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdt1EuCRBK7hj4Ov3rIwAAdHIIAFQaAY96n4xy/RHFgdD8IL6D\nb+CIwUNnJuJV0XCtbtc9wDWYkHewW3b9w9IilJaRe50I7nwqOYBMGUhWw42NCm4S\nXIVY03ChpGHo0UZZHelOoFniCwlU0QV5S67mXJZzahHVQ5OVwit+f6XYyVNR06Kq\nxnXY3NltxbdvN5uM9KPiZPf+Zi6xoy9DHJf81K4uHDGcqz2fBFOs57zrzBWv1Idz\nHoHDjJoGcTp3sGXTNP6RMsfHlmZ9Cbrz515endQsIn12PdPOwjd7eCr/pJotokeo\n5lSP1CJav1HxsMZDLeVSwmT1BWPnqRKym0eOXtM/+6KXPb4dbj5WD1wVX0GrRfQ=\n=vNyF\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b750d9b784fc10e9690b0a6d853edc2c5d1832c\nparent eec3a9c4af5067c37f5b681599a48b4e21098260\nparent e8016c2b13a7e16b6eed9e30b4b6bfe304750566\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572294958 +0100\ncommitter GitHub <noreply@github.com> 1572294958 +0100\n\nRollup merge of #65640 - estebank:recover-missing-semi, r=Centril\n\nUse heuristics to recover parsing of missing `;`\n\n- Detect `,` and `:` typos where `;` was intended.\n- When the next token could have been the start of a new statement,\n  detect a missing semicolon.\n\nFix #48160, fix #44767 (after adding note about statements).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe6f22dea25dd7498b2acb0f0156563644a13f2", "html_url": "https://github.com/rust-lang/rust/commit/2fe6f22dea25dd7498b2acb0f0156563644a13f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe6f22dea25dd7498b2acb0f0156563644a13f2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eec3a9c4af5067c37f5b681599a48b4e21098260", "url": "https://api.github.com/repos/rust-lang/rust/commits/eec3a9c4af5067c37f5b681599a48b4e21098260", "html_url": "https://github.com/rust-lang/rust/commit/eec3a9c4af5067c37f5b681599a48b4e21098260"}, {"sha": "e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "html_url": "https://github.com/rust-lang/rust/commit/e8016c2b13a7e16b6eed9e30b4b6bfe304750566"}], "stats": {"total": 332, "additions": 175, "deletions": 157}, "files": [{"sha": "ab2b4519cb72a13f5cc577801867040ce310d883", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 82, "deletions": 68, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -6,7 +6,7 @@ use crate::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n };\n-use crate::parse::token::{self, TokenKind};\n+use crate::parse::token::{self, TokenKind, token_can_begin_expr};\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::{kw, sym};\n@@ -274,23 +274,23 @@ impl<'a> Parser<'a> {\n         expected.sort_by_cached_key(|x| x.to_string());\n         expected.dedup();\n         let expect = tokens_to_string(&expected[..]);\n-        let actual = self.this_token_to_string();\n+        let actual = self.this_token_descr();\n         let (msg_exp, (label_sp, label_exp)) = if expected.len() > 1 {\n             let short_expect = if expected.len() > 6 {\n                 format!(\"{} possible tokens\", expected.len())\n             } else {\n                 expect.clone()\n             };\n-            (format!(\"expected one of {}, found `{}`\", expect, actual),\n+            (format!(\"expected one of {}, found {}\", expect, actual),\n                 (self.sess.source_map().next_point(self.prev_span),\n                 format!(\"expected one of {} here\", short_expect)))\n         } else if expected.is_empty() {\n-            (format!(\"unexpected token: `{}`\", actual),\n+            (format!(\"unexpected token: {}\", actual),\n                 (self.prev_span, \"unexpected token after this\".to_string()))\n         } else {\n-            (format!(\"expected {}, found `{}`\", expect, actual),\n+            (format!(\"expected {}, found {}\", expect, actual),\n                 (self.sess.source_map().next_point(self.prev_span),\n-                format!(\"expected {} here\", expect)))\n+                format!(\"expected {}\", expect)))\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n         let mut err = self.fatal(&msg_exp);\n@@ -326,58 +326,28 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let is_semi_suggestable = expected.iter().any(|t| match t {\n-            TokenType::Token(token::Semi) => true, // We expect a `;` here.\n-            _ => false,\n-        }) && ( // A `;` would be expected before the current keyword.\n-            self.token.is_keyword(kw::Break) ||\n-            self.token.is_keyword(kw::Continue) ||\n-            self.token.is_keyword(kw::For) ||\n-            self.token.is_keyword(kw::If) ||\n-            self.token.is_keyword(kw::Let) ||\n-            self.token.is_keyword(kw::Loop) ||\n-            self.token.is_keyword(kw::Match) ||\n-            self.token.is_keyword(kw::Return) ||\n-            self.token.is_keyword(kw::While)\n-        );\n         let sm = self.sess.source_map();\n-        match (sm.lookup_line(self.token.span.lo()), sm.lookup_line(sp.lo())) {\n-            (Ok(ref a), Ok(ref b)) if a.line != b.line && is_semi_suggestable => {\n-                // The spans are in different lines, expected `;` and found `let` or `return`.\n-                // High likelihood that it is only a missing `;`.\n-                err.span_suggestion_short(\n-                    label_sp,\n-                    \"a semicolon may be missing here\",\n-                    \";\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-                err.emit();\n-                return Ok(true);\n-            }\n-            (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n-                // When the spans are in the same line, it means that the only content between\n-                // them is whitespace, point at the found token in that case:\n-                //\n-                // X |     () => { syntax error };\n-                //   |                    ^^^^^ expected one of 8 possible tokens here\n-                //\n-                // instead of having:\n-                //\n-                // X |     () => { syntax error };\n-                //   |                   -^^^^^ unexpected token\n-                //   |                   |\n-                //   |                   expected one of 8 possible tokens here\n-                err.span_label(self.token.span, label_exp);\n-            }\n-            _ if self.prev_span == syntax_pos::DUMMY_SP => {\n-                // Account for macro context where the previous span might not be\n-                // available to avoid incorrect output (#54841).\n-                err.span_label(self.token.span, \"unexpected token\");\n-            }\n-            _ => {\n-                err.span_label(sp, label_exp);\n-                err.span_label(self.token.span, \"unexpected token\");\n-            }\n+        if self.prev_span == DUMMY_SP {\n+            // Account for macro context where the previous span might not be\n+            // available to avoid incorrect output (#54841).\n+            err.span_label(self.token.span, label_exp);\n+        } else if !sm.is_multiline(self.token.span.shrink_to_hi().until(sp.shrink_to_lo())) {\n+            // When the spans are in the same line, it means that the only content between\n+            // them is whitespace, point at the found token in that case:\n+            //\n+            // X |     () => { syntax error };\n+            //   |                    ^^^^^ expected one of 8 possible tokens here\n+            //\n+            // instead of having:\n+            //\n+            // X |     () => { syntax error };\n+            //   |                   -^^^^^ unexpected token\n+            //   |                   |\n+            //   |                   expected one of 8 possible tokens here\n+            err.span_label(self.token.span, label_exp);\n+        } else {\n+            err.span_label(sp, label_exp);\n+            err.span_label(self.token.span, \"unexpected token\");\n         }\n         self.maybe_annotate_with_ascription(&mut err, false);\n         Err(err)\n@@ -902,20 +872,64 @@ impl<'a> Parser<'a> {\n             }\n         }\n         let sm = self.sess.source_map();\n-        match (sm.lookup_line(prev_sp.lo()), sm.lookup_line(sp.lo())) {\n-            (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n-                // When the spans are in the same line, it means that the only content\n-                // between them is whitespace, point only at the found token.\n-                err.span_label(sp, label_exp);\n-            }\n-            _ => {\n-                err.span_label(prev_sp, label_exp);\n-                err.span_label(sp, \"unexpected token\");\n-            }\n+        if !sm.is_multiline(prev_sp.until(sp)) {\n+            // When the spans are in the same line, it means that the only content\n+            // between them is whitespace, point only at the found token.\n+            err.span_label(sp, label_exp);\n+        } else {\n+            err.span_label(prev_sp, label_exp);\n+            err.span_label(sp, \"unexpected token\");\n         }\n         Err(err)\n     }\n \n+    pub(super) fn expect_semi(&mut self) -> PResult<'a, ()> {\n+        if self.eat(&token::Semi) {\n+            return Ok(());\n+        }\n+        let sm = self.sess.source_map();\n+        let msg = format!(\"expected `;`, found `{}`\", self.this_token_descr());\n+        let appl = Applicability::MachineApplicable;\n+        if self.token.span == DUMMY_SP || self.prev_span == DUMMY_SP {\n+            // Likely inside a macro, can't provide meaninful suggestions.\n+            return self.expect(&token::Semi).map(|_| ());\n+        } else if !sm.is_multiline(self.prev_span.until(self.token.span)) {\n+            // The current token is in the same line as the prior token, not recoverable.\n+        } else if self.look_ahead(1, |t| t == &token::CloseDelim(token::Brace)\n+            || token_can_begin_expr(t) && t.kind != token::Colon\n+        ) && [token::Comma, token::Colon].contains(&self.token.kind) {\n+            // Likely typo: `,` \u2192 `;` or `:` \u2192 `;`. This is triggered if the current token is\n+            // either `,` or `:`, and the next token could either start a new statement or is a\n+            // block close. For example:\n+            //\n+            //   let x = 32:\n+            //   let y = 42;\n+            self.bump();\n+            let sp = self.prev_span;\n+            self.struct_span_err(sp, &msg)\n+                .span_suggestion(sp, \"change this to `;`\", \";\".to_string(), appl)\n+                .emit();\n+            return Ok(())\n+        } else if self.look_ahead(0, |t| t == &token::CloseDelim(token::Brace) || (\n+                token_can_begin_expr(t)\n+                && t != &token::Semi\n+                && t != &token::Pound // Avoid triggering with too many trailing `#` in raw string.\n+        )) {\n+            // Missing semicolon typo. This is triggered if the next token could either start a\n+            // new statement or is a block close. For example:\n+            //\n+            //   let x = 32\n+            //   let y = 42;\n+            let sp = self.prev_span.shrink_to_hi();\n+            self.struct_span_err(sp, &msg)\n+                .span_label(self.token.span, \"unexpected token\")\n+                .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n+                .emit();\n+            return Ok(())\n+        }\n+        self.expect(&token::Semi).map(|_| ()) // Error unconditionally\n+    }\n+\n     pub(super) fn parse_semi_or_incorrect_foreign_fn_body(\n         &mut self,\n         ident: &Ident,\n@@ -943,7 +957,7 @@ impl<'a> Parser<'a> {\n                 Err(mut err) => {\n                     err.cancel();\n                     mem::replace(self, parser_snapshot);\n-                    self.expect(&token::Semi)?;\n+                    self.expect_semi()?;\n                 }\n             }\n         } else {"}, {"sha": "fe1253361903349215f9fbb5e1f5b3f30e4eff2d", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -98,7 +98,7 @@ impl<'a> Parser<'a> {\n         if self.eat_keyword(kw::Use) {\n             // USE ITEM\n             let item_ = ItemKind::Use(P(self.parse_use_tree()?));\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n \n             let span = lo.to(self.prev_span);\n             let item = self.mk_item(span, Ident::invalid(), item_, vis, attrs);\n@@ -526,7 +526,7 @@ impl<'a> Parser<'a> {\n             // eat a matched-delimiter token tree:\n             let (delim, tts) = self.expect_delimited_token_tree()?;\n             if delim != MacDelimiter::Brace {\n-                self.expect(&token::Semi)?;\n+                self.expect_semi()?;\n             }\n \n             Ok(Some(Mac {\n@@ -776,7 +776,7 @@ impl<'a> Parser<'a> {\n         let typ = self.parse_ty()?;\n         self.expect(&token::Eq)?;\n         let expr = self.parse_expr()?;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((name, ImplItemKind::Const(typ, expr), Generics::default()))\n     }\n \n@@ -813,7 +813,7 @@ impl<'a> Parser<'a> {\n \n             let bounds = self.parse_generic_bounds(None)?;\n             tps.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n \n             let whole_span = lo.to(self.prev_span);\n             if is_auto == IsAuto::Yes {\n@@ -927,7 +927,7 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((ident, TraitItemKind::Const(ty, default), Generics::default()))\n     }\n \n@@ -951,7 +951,7 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n \n         Ok((ident, TraitItemKind::Type(bounds, default), generics))\n     }\n@@ -1054,7 +1054,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (orig_name, None)\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n \n         let span = lo.to(self.prev_span);\n         Ok(self.mk_item(span, item_name, ItemKind::ExternCrate(orig_name), visibility, attrs))\n@@ -1217,7 +1217,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         let hi = self.token.span;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok(ForeignItem {\n             ident,\n             attrs,\n@@ -1235,7 +1235,7 @@ impl<'a> Parser<'a> {\n \n         let ident = self.parse_ident()?;\n         let hi = self.token.span;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok(ast::ForeignItem {\n             ident,\n             attrs,\n@@ -1282,7 +1282,7 @@ impl<'a> Parser<'a> {\n \n         self.expect(&token::Eq)?;\n         let e = self.parse_expr()?;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         let item = match m {\n             Some(m) => ItemKind::Static(ty, m, e),\n             None => ItemKind::Const(ty, e),\n@@ -1344,7 +1344,7 @@ impl<'a> Parser<'a> {\n             let ty = self.parse_ty()?;\n             AliasKind::Weak(ty)\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((ident, alias, tps))\n     }\n \n@@ -1468,7 +1468,7 @@ impl<'a> Parser<'a> {\n         } else if self.token == token::OpenDelim(token::Paren) {\n             let body = VariantData::Tuple(self.parse_tuple_struct_body()?, DUMMY_NODE_ID);\n             generics.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n             body\n         } else {\n             let token_str = self.this_token_descr();"}, {"sha": "4f51fefe66fbabdb10d0ad44597431cb975188e8", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -432,6 +432,7 @@ impl<'a> Parser<'a> {\n             None => return Ok(None),\n         };\n \n+        let mut eat_semi = true;\n         match stmt.kind {\n             StmtKind::Expr(ref expr) if self.token != token::Eof => {\n                 // expression without semicolon\n@@ -453,13 +454,14 @@ impl<'a> Parser<'a> {\n                 if macro_legacy_warnings && self.token != token::Semi {\n                     self.warn_missing_semicolon();\n                 } else {\n-                    self.expect_one_of(&[], &[token::Semi])?;\n+                    self.expect_semi()?;\n+                    eat_semi = false;\n                 }\n             }\n             _ => {}\n         }\n \n-        if self.eat(&token::Semi) {\n+        if eat_semi && self.eat(&token::Semi) {\n             stmt = stmt.add_trailing_semicolon();\n         }\n         stmt.span = stmt.span.to(self.prev_span);"}, {"sha": "03e77b199cc3bacd754cbc24aafce912b149a84e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -143,34 +143,35 @@ impl Lit {\n \n pub(crate) fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n     let ident_token = Token::new(Ident(name, is_raw), span);\n+    token_can_begin_expr(&ident_token)\n+}\n \n+pub(crate) fn token_can_begin_expr(ident_token: &Token) -> bool {\n     !ident_token.is_reserved_ident() ||\n     ident_token.is_path_segment_keyword() ||\n-    [\n-        kw::Async,\n-\n-        // FIXME: remove when `await!(..)` syntax is removed\n-        // https://github.com/rust-lang/rust/issues/60610\n-        kw::Await,\n-\n-        kw::Do,\n-        kw::Box,\n-        kw::Break,\n-        kw::Continue,\n-        kw::False,\n-        kw::For,\n-        kw::If,\n-        kw::Let,\n-        kw::Loop,\n-        kw::Match,\n-        kw::Move,\n-        kw::Return,\n-        kw::True,\n-        kw::Unsafe,\n-        kw::While,\n-        kw::Yield,\n-        kw::Static,\n-    ].contains(&name)\n+    match ident_token.kind {\n+        TokenKind::Ident(ident, _) => [\n+            kw::Async,\n+            kw::Do,\n+            kw::Box,\n+            kw::Break,\n+            kw::Continue,\n+            kw::False,\n+            kw::For,\n+            kw::If,\n+            kw::Let,\n+            kw::Loop,\n+            kw::Match,\n+            kw::Move,\n+            kw::Return,\n+            kw::True,\n+            kw::Unsafe,\n+            kw::While,\n+            kw::Yield,\n+            kw::Static,\n+        ].contains(&ident),\n+        _=> false,\n+    }\n }\n \n fn ident_can_begin_type(name: ast::Name, span: Span, is_raw: bool) -> bool {"}, {"sha": "44f02d1a7b19b79e10e4001ea777e115409cda7b", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -3,4 +3,4 @@\n // compile-flags: --crate-type lib\n \n pub async const fn x() {}\n-//~^ ERROR expected one of `fn` or `unsafe`, found `const`\n+//~^ ERROR expected one of `fn` or `unsafe`, found keyword `const`"}, {"sha": "f89d1810ba44920d86f30d86e7d0d130799fd006", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `fn` or `unsafe`, found `const`\n+error: expected one of `fn` or `unsafe`, found keyword `const`\n   --> $DIR/no-async-const.rs:5:11\n    |\n LL | pub async const fn x() {}"}, {"sha": "1ac1bdffda9476615be71d2c28f92504e19985f5", "filename": "src/test/ui/async-await/no-unsafe-async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -4,8 +4,8 @@ struct S;\n \n impl S {\n     #[cfg(FALSE)]\n-    unsafe async fn g() {} //~ ERROR expected one of `extern` or `fn`, found `async`\n+    unsafe async fn g() {} //~ ERROR expected one of `extern` or `fn`, found keyword `async`\n }\n \n #[cfg(FALSE)]\n-unsafe async fn f() {} //~ ERROR expected one of `extern`, `fn`, or `{`, found `async`\n+unsafe async fn f() {} //~ ERROR expected one of `extern`, `fn`, or `{`, found keyword `async`"}, {"sha": "79d9f1befd66ac83cc2a4ad9586df7eec64cae4d", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,10 +1,10 @@\n-error: expected one of `extern` or `fn`, found `async`\n+error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:7:12\n    |\n LL |     unsafe async fn g() {}\n    |            ^^^^^ expected one of `extern` or `fn` here\n \n-error: expected one of `extern`, `fn`, or `{`, found `async`\n+error: expected one of `extern`, `fn`, or `{`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8\n    |\n LL | unsafe async fn f() {}"}, {"sha": "8974d9f48c1e3076d759d036ae102e13bc568a35", "filename": "src/test/ui/can-begin-expr-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fcan-begin-expr-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fcan-begin-expr-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcan-begin-expr-check.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n         return break as ();\n     }\n \n-    return enum; //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `enum`\n+    return enum; //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n }"}, {"sha": "0e03e9915fca2dbf6e2049bbe7284f300a0ac73f", "filename": "src/test/ui/can-begin-expr-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `enum`\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n   --> $DIR/can-begin-expr-check.rs:19:12\n    |\n LL |     return enum;"}, {"sha": "4f7ed5cc6fdd819f53bc2a0a0479d09fd0e51962", "filename": "src/test/ui/issues/issue-43196.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fissues%2Fissue-43196.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fissues%2Fissue-43196.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43196.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -2,7 +2,7 @@ error: expected `|`, found `}`\n   --> $DIR/issue-43196.rs:3:1\n    |\n LL |     |\n-   |      - expected `|` here\n+   |      - expected `|`\n LL | }\n    | ^ unexpected token\n "}, {"sha": "48c2f556f1dd9f0754d47fdc8817c4ccf9669b00", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -2,7 +2,7 @@ error: expected `fn`, found `::`\n   --> $DIR/keyword-extern-as-identifier-type.rs:1:16\n    |\n LL | type A = extern::foo::bar;\n-   |                ^^ expected `fn` here\n+   |                ^^ expected `fn`\n \n error: aborting due to previous error\n "}, {"sha": "287d579c76d5f51b42d6c743dbfcded370171c92", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found `let`\n+error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found keyword `let`\n   --> $DIR/issue-54441.rs:3:9\n    |\n LL |         let\n-   |         ^^^ unexpected token\n+   |         ^^^ expected one of `crate`, `fn`, `pub`, `static`, or `type` here\n ...\n LL |     m!();\n    |     ----- in this macro invocation"}, {"sha": "8843fd303ec0c654be09dd7613bcecd99fa570a3", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found `pub`\n+error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found keyword `pub`\n   --> $DIR/default.rs:22:13\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }"}, {"sha": "675adb88d20847452150b1d255129b2ef440341a", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `(`, `fn`, `static`, or `type`, found `pub`\n+error: expected one of `(`, `fn`, `static`, or `type`, found keyword `pub`\n   --> $DIR/duplicate-visibility.rs:3:9\n    |\n LL |     pub pub fn foo();"}, {"sha": "907de0d8f91d84ddf81d7f08403a60fde4eff194", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n // Verifies that the expected token errors for `extern crate` are\n // raised\n \n-extern \"C\" mod foo; //~ERROR expected one of `fn` or `{`, found `mod`\n+extern \"C\" mod foo; //~ERROR expected one of `fn` or `{`, found keyword `mod`"}, {"sha": "691f4cddff29197ef9b002e7f1a2711652e3d716", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `fn` or `{`, found `mod`\n+error: expected one of `fn` or `{`, found keyword `mod`\n   --> $DIR/extern-expected-fn-or-brace.rs:4:12\n    |\n LL | extern \"C\" mod foo;"}, {"sha": "e929fa53620f66884b44e51a229eb9830b4e31a9", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -26,7 +26,7 @@ error: expected `impl`, found `FAIL`\n   --> $DIR/impl-parsing.rs:11:16\n    |\n LL | default unsafe FAIL\n-   |                ^^^^ expected `impl` here\n+   |                ^^^^ expected `impl`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "beb94c8042d5fe37c0291fcd881e149743a2c892", "filename": "src/test/ui/parser/issue-15980.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -11,7 +11,7 @@ fn main(){\n         }\n         //~^ NOTE expected one of `.`, `=>`, `?`, or an operator here\n         _ => {}\n-        //~^ ERROR expected one of `.`, `=>`, `?`, or an operator, found `_`\n+        //~^ ERROR expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n         //~| NOTE unexpected token\n     }\n }"}, {"sha": "26f75d45fa241dda1ae8c3c46cc65ffa5bb8eae4", "filename": "src/test/ui/parser/issue-15980.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -12,7 +12,7 @@ help: you can escape reserved keywords to use them as identifiers\n LL |             r#return\n    |\n \n-error: expected one of `.`, `=>`, `?`, or an operator, found `_`\n+error: expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n   --> $DIR/issue-15980.rs:13:9\n    |\n LL |         }"}, {"sha": "90221039b4148cdde1778b1b34ced8a79c56aa24", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,5 +1,5 @@\n trait T {\n-    extern \"Rust\" unsafe fn foo(); //~ ERROR expected `fn`, found `unsafe`\n+    extern \"Rust\" unsafe fn foo(); //~ ERROR expected `fn`, found keyword `unsafe`\n }\n \n fn main() {}"}, {"sha": "41ec4f3ced4e907581792ebd506491db3a1cdfa2", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,8 +1,8 @@\n-error: expected `fn`, found `unsafe`\n+error: expected `fn`, found keyword `unsafe`\n   --> $DIR/issue-19398.rs:2:19\n    |\n LL |     extern \"Rust\" unsafe fn foo();\n-   |                   ^^^^^^ expected `fn` here\n+   |                   ^^^^^^ expected `fn`\n \n error: aborting due to previous error\n "}, {"sha": "6a8b67fefa780fb7d6a65ebd960974bc024c59d9", "filename": "src/test/ui/parser/issue-3036.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -2,5 +2,5 @@\n \n fn main()\n {\n-    let x = 3\n-} //~ ERROR: expected one of `.`, `;`, `?`, or an operator, found `}`\n+    let x = 3 //~ ERROR: expected `;`\n+}"}, {"sha": "b6557163d4520b14558eb369d65286e4bf138205", "filename": "src/test/ui/parser/issue-3036.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,10 +1,10 @@\n-error: expected one of `.`, `;`, `?`, or an operator, found `}`\n-  --> $DIR/issue-3036.rs:6:1\n+error: expected `;`, found ``}``\n+  --> $DIR/issue-3036.rs:5:14\n    |\n LL |     let x = 3\n-   |              - expected one of `.`, `;`, `?`, or an operator here\n+   |              ^ help: add `;` here\n LL | }\n-   | ^ unexpected token\n+   | - unexpected token\n \n error: aborting due to previous error\n "}, {"sha": "a953e23a710fa9dc22e8e2feb8bc43e4f6b1deeb", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, fo\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ unexpected token\n+   |                   ^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe` here\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}, {"sha": "bf9cbcdab2e89b58f2348eaed9894c6286e61c30", "filename": "src/test/ui/parser/raw/raw-literal-keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,5 +1,5 @@\n fn test_if() {\n-    r#if true { } //~ ERROR found `true`\n+    r#if true { } //~ ERROR found keyword `true`\n }\n \n fn test_struct() {"}, {"sha": "4cea605be6f5e1adc8b28232339e9284cf5f65e0", "filename": "src/test/ui/parser/raw/raw-literal-keywords.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `true`\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `true`\n   --> $DIR/raw-literal-keywords.rs:2:10\n    |\n LL |     r#if true { }"}, {"sha": "779e1646344787b680be00576c3e9d588791201d", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let vec = vec![1, 2, 3];\n \n     for ( elem in vec ) {\n-        //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found `in`\n+        //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n         //~| ERROR unexpected closing `)`\n         const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n     }"}, {"sha": "1a1f395ee213eb0ad6c58ad0b239ed84ffc0a6e1", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `)`, `,`, `@`, or `|`, found `in`\n+error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:16\n    |\n LL |     for ( elem in vec ) {"}, {"sha": "f47d5e6805f88708d5d1574f0d304df5451388ec", "filename": "src/test/ui/parser/recover-missing-semi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,13 +1,13 @@\n fn main() {\n     let _: usize = ()\n     //~^ ERROR mismatched types\n+    //~| ERROR expected `;`\n     let _ = 3;\n-    //~^ ERROR expected one of\n }\n \n fn foo() -> usize {\n     let _: usize = ()\n     //~^ ERROR mismatched types\n+    //~| ERROR expected `;`\n     return 3;\n-    //~^ ERROR expected one of\n }"}, {"sha": "c40918ee2bd5fa710c691bb71825d08ec598929c", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,20 +1,20 @@\n-error: expected one of `.`, `;`, `?`, or an operator, found `let`\n-  --> $DIR/recover-missing-semi.rs:4:5\n+error: expected `;`, found `keyword `let``\n+  --> $DIR/recover-missing-semi.rs:2:22\n    |\n LL |     let _: usize = ()\n-   |                      - help: a semicolon may be missing here\n-LL |\n+   |                      ^ help: add `;` here\n+...\n LL |     let _ = 3;\n-   |     ^^^\n+   |     --- unexpected token\n \n-error: expected one of `.`, `;`, `?`, or an operator, found `return`\n-  --> $DIR/recover-missing-semi.rs:11:5\n+error: expected `;`, found `keyword `return``\n+  --> $DIR/recover-missing-semi.rs:9:22\n    |\n LL |     let _: usize = ()\n-   |                      - help: a semicolon may be missing here\n-LL |\n+   |                      ^ help: add `;` here\n+...\n LL |     return 3;\n-   |     ^^^^^^\n+   |     ------ unexpected token\n \n error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:2:20"}, {"sha": "af148e697118cc24e65f9e128a944d4d80d0079b", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `static`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `static`\n   --> $DIR/removed-syntax-static-fn.rs:4:5\n    |\n LL | impl S {"}, {"sha": "f9a9d071a3d1b5c5263242d9cfd538d94da41b25", "filename": "src/test/ui/parser/removed-syntax-uniq-mut-ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1 +1,2 @@\n-type mut_box = Box<mut isize>; //~ ERROR expected one of `>`, const, lifetime, or type, found `mut`\n+type mut_box = Box<mut isize>;\n+//~^ ERROR expected one of `>`, const, lifetime, or type, found keyword `mut`"}, {"sha": "9c47e3db67dd30d5997da1ceba412cc87c86aeb0", "filename": "src/test/ui/parser/removed-syntax-uniq-mut-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `>`, const, lifetime, or type, found `mut`\n+error: expected one of `>`, const, lifetime, or type, found keyword `mut`\n   --> $DIR/removed-syntax-uniq-mut-ty.rs:1:20\n    |\n LL | type mut_box = Box<mut isize>;"}, {"sha": "7b0d128f06f8a7c4151c5c364111a524506c17ed", "filename": "src/test/ui/parser/underscore_item_not_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -25,6 +25,6 @@ use _ as g; //~ ERROR expected identifier, found reserved identifier `_`\n trait _ {} //~ ERROR expected identifier, found reserved identifier `_`\n trait _ = Copy; //~ ERROR expected identifier, found reserved identifier `_`\n macro_rules! _ { () => {} } //~ ERROR expected identifier, found reserved identifier `_`\n-union _ { f: u8 } //~ ERROR expected one of `!` or `::`, found `_`\n+union _ { f: u8 } //~ ERROR expected one of `!` or `::`, found reserved identifier `_`\n \n fn main() {}"}, {"sha": "8814aa3527153d2b337acc591bed40fcc72d14b0", "filename": "src/test/ui/parser/underscore_item_not_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe6f22dea25dd7498b2acb0f0156563644a13f2/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr?ref=2fe6f22dea25dd7498b2acb0f0156563644a13f2", "patch": "@@ -82,7 +82,7 @@ error: expected identifier, found reserved identifier `_`\n LL | macro_rules! _ { () => {} }\n    |              ^ expected identifier, found reserved identifier\n \n-error: expected one of `!` or `::`, found `_`\n+error: expected one of `!` or `::`, found reserved identifier `_`\n   --> $DIR/underscore_item_not_const.rs:28:7\n    |\n LL | union _ { f: u8 }"}]}