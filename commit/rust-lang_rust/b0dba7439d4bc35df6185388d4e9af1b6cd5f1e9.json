{"sha": "b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZGJhNzQzOWQ0YmMzNWRmNjE4NTM4OGQ0ZTlhZjFiNmNkNWYxZTk=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-09-24T16:42:54Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-09-26T05:07:41Z"}, "message": "make emit_feature_err take a ParseSess", "tree": {"sha": "12ab14fe010369c27908f418a2d8da4a5b0aee91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ab14fe010369c27908f418a2d8da4a5b0aee91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "html_url": "https://github.com/rust-lang/rust/commit/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9966397b61d5e065b692c59f4f721e31d038f1fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9966397b61d5e065b692c59f4f721e31d038f1fc", "html_url": "https://github.com/rust-lang/rust/commit/9966397b61d5e065b692c59f4f721e31d038f1fc"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "ccab4279232b5f4e8b9b56412c77bea0175087da", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -411,8 +411,8 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                                                &feature, &r),\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n-                    emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n-                                      &feature, span, GateIssue::Library(Some(issue)), &msg);\n+                    emit_feature_err(&self.tcx.sess.parse_sess, &feature, span,\n+                                     GateIssue::Library(Some(issue)), &msg);\n                 }\n             }\n             Some(&Stability { ref level, ref feature, .. }) => {"}, {"sha": "0336c3063d83f69c0ec63315be60e62a17b745b4", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n             });\n             if any_static {\n                 if !self.sess.features.borrow().static_recursion {\n-                    emit_feature_err(&self.sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.sess.parse_sess,\n                                      \"static_recursion\",\n                                      *self.root_span,\n                                      GateIssue::Language,"}, {"sha": "f5e289c33028e3010044b751c8ee4499cf5a9a3e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -795,7 +795,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // For now, require that parenthetical notation be used\n                 // only with `Fn()` etc.\n                 if !self.tcx().sess.features.borrow().unboxed_closures && trait_def.paren_sugar {\n-                    emit_feature_err(&self.tcx().sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.tcx().sess.parse_sess,\n                                      \"unboxed_closures\", span, GateIssue::Language,\n                                      \"\\\n                         the precise format of `Fn`-family traits' \\\n@@ -807,7 +807,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // For now, require that parenthetical notation be used\n                 // only with `Fn()` etc.\n                 if !self.tcx().sess.features.borrow().unboxed_closures && !trait_def.paren_sugar {\n-                    emit_feature_err(&self.tcx().sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.tcx().sess.parse_sess,\n                                      \"unboxed_closures\", span, GateIssue::Language,\n                                      \"\\\n                         parenthetical notation is only stable when used with `Fn`-family traits\");"}, {"sha": "47f545a6726954b05f18344512d5e6bceaa2d1cf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -3256,7 +3256,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some((def_id, variant)) = variant {\n             if variant.kind == ty::VariantKind::Tuple &&\n                     !self.tcx.sess.features.borrow().relaxed_adts {\n-                emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n+                emit_feature_err(&self.tcx.sess.parse_sess,\n                                  \"relaxed_adts\", span, GateIssue::Language,\n                                  \"tuple structs and variants in struct patterns are unstable\");\n             }"}, {"sha": "78d047c7651f9aca90a5b29c226bfcf6b41d5e3e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -157,7 +157,7 @@ impl<'a> StripUnconfigured<'a> {\n         // flag the offending attributes\n         for attr in attrs.iter() {\n             if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n-                emit_feature_err(&self.sess.span_diagnostic,\n+                emit_feature_err(&self.sess,\n                                  \"stmt_expr_attributes\",\n                                  attr.span,\n                                  GateIssue::Language,"}, {"sha": "43c622189632a3eaa63880f36993b905683006a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Detect use of feature-gated or invalid attributes on macro invoations\n         // since they will not be detected after macro expansion.\n         for attr in attrs.iter() {\n-            feature_gate::check_attribute(&attr, &self.cx.parse_sess.span_diagnostic,\n+            feature_gate::check_attribute(&attr, &self.cx.parse_sess,\n                                           &self.cx.parse_sess.codemap(),\n                                           &self.cx.ecfg.features.unwrap());\n         }"}, {"sha": "f8eb4508b1606d0ba2b9c8c1137b2e33e236a860", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -679,16 +679,15 @@ impl GatedCfg {\n     pub fn check_and_emit(&self, sess: &ParseSess, features: &Features) {\n         let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n         if !has_feature(features) && !sess.codemap().span_allows_unstable(self.span) {\n-            let diagnostic = &sess.span_diagnostic;\n             let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n-            emit_feature_err(diagnostic, feature, self.span, GateIssue::Language, &explain);\n+            emit_feature_err(sess, feature, self.span, GateIssue::Language, &explain);\n         }\n     }\n }\n \n struct Context<'a> {\n     features: &'a Features,\n-    span_handler: &'a Handler,\n+    parse_sess: &'a ParseSess,\n     cm: &'a CodeMap,\n     plugin_attributes: &'a [(String, AttributeType)],\n }\n@@ -699,7 +698,7 @@ macro_rules! gate_feature_fn {\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !cx.cm.span_allows_unstable(span) {\n-            emit_feature_err(cx.span_handler, name, span, GateIssue::Language, explain);\n+            emit_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain);\n         }\n     }}\n }\n@@ -756,10 +755,10 @@ impl<'a> Context<'a> {\n     }\n }\n \n-pub fn check_attribute(attr: &ast::Attribute, handler: &Handler,\n+pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess,\n                        cm: &CodeMap, features: &Features) {\n     let cx = Context {\n-        features: features, span_handler: handler,\n+        features: features, parse_sess: parse_sess,\n         cm: cm, plugin_attributes: &[]\n     };\n     cx.check_attribute(attr, true);\n@@ -788,8 +787,10 @@ pub enum GateIssue {\n     Library(Option<u32>)\n }\n \n-pub fn emit_feature_err(diag: &Handler, feature: &str, span: Span, issue: GateIssue,\n+pub fn emit_feature_err(sess: &ParseSess, feature: &str, span: Span, issue: GateIssue,\n                         explain: &str) {\n+    let diag = &sess.span_diagnostic;\n+\n     let issue = match issue {\n         GateIssue::Language => find_lang_feature_issue(feature),\n         GateIssue::Library(lib) => lib,\n@@ -962,9 +963,10 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 if attr::contains_name(&i.attrs[..], \"simd\") {\n                     gate_feature_post!(&self, simd, i.span,\n                                        \"SIMD types are experimental and possibly buggy\");\n-                    self.context.span_handler.span_warn(i.span,\n-                                                        \"the `#[simd]` attribute is deprecated, \\\n-                                                         use `#[repr(simd)]` instead\");\n+                    self.context.parse_sess.span_diagnostic.span_warn(i.span,\n+                                                                      \"the `#[simd]` attribute \\\n+                                                                       is deprecated, use \\\n+                                                                       `#[repr(simd)]` instead\");\n                 }\n                 for attr in &i.attrs {\n                     if attr.name() == \"repr\" {\n@@ -1273,7 +1275,7 @@ pub fn check_crate(krate: &ast::Crate,\n     maybe_stage_features(&sess.span_diagnostic, krate, unstable);\n     let ctx = Context {\n         features: features,\n-        span_handler: &sess.span_diagnostic,\n+        parse_sess: sess,\n         cm: sess.codemap(),\n         plugin_attributes: plugin_attributes,\n     };"}, {"sha": "cc4fb604d6ccb76799c0db76a044352b7029807d", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -53,7 +53,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<base::MacResult + 'cx> {\n     if !cx.ecfg.enable_asm() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"asm\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}, {"sha": "e56c6e2229a75630657eedd7bcc164635b033541", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -23,7 +23,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                               tts: &[TokenTree])\n                               -> Box<base::MacResult + 'cx> {\n     if !cx.ecfg.enable_concat_idents() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"concat_idents\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}, {"sha": "e3a38d568d313d8f77a0780c1f2af5e40c6c3f0c", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -221,7 +221,7 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n         // the old custom derive mechanism. If the feature isn't enabled, we\n         // issue an error, otherwise manufacture the `derive_Foo` attribute.\n         } else if !cx.ecfg.enable_custom_derive() {\n-            feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+            feature_gate::emit_feature_err(&cx.parse_sess,\n                                            \"custom_derive\",\n                                            titem.span,\n                                            feature_gate::GateIssue::Language,"}, {"sha": "71f1951d5d455c168d7c9d23d784d8ed8a19691b", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -19,7 +19,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<base::MacResult + 'cx> {\n     if !cx.ecfg.enable_log_syntax() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"log_syntax\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}, {"sha": "9578af68100782d0611ba79239c4643908b7eda0", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "patch": "@@ -20,7 +20,7 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            tt: &[TokenTree])\n                            -> Box<base::MacResult + 'static> {\n     if !cx.ecfg.enable_trace_macros() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"trace_macros\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}]}