{"sha": "1e06b1757c843c4cda538327dbd325378c539bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMDZiMTc1N2M4NDNjNGNkYTUzODMyN2RiZDMyNTM3OGM1MzliZmU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-06-12T17:22:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-12T17:22:53Z"}, "message": "Rollup merge of #51502 - jebrosen:pub_parse_methods, r=Mark-Simulacrum\n\nMake parse_seq_to_end and parse_path public\n\n(see SergioBenitez/Rocket#660, rust-lang/rust#51265)\n\nRocket currently uses `parse_seq_to_end` and `parse_path` in its codegen macros. Assuming I tested correctly, this is the minimal set of methods that are currently necessary to build Rocket again. I would be happy to add documentation of this and Rocket's other usages, if desired.", "tree": {"sha": "f3822bfcc4b466fccb6b014fe45007c06803f677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3822bfcc4b466fccb6b014fe45007c06803f677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e06b1757c843c4cda538327dbd325378c539bfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbIAFtCRBK7hj4Ov3rIwAAdHIIAA5XNsUhVRftNaRPg9WvDG8X\nWoZDppMoV/7+5peZY3SJCtB9JtfNDVBLJpKseTORWocb2A4qBkNmFPTcC+fMy1+7\n/gqUFsEZchS1cMETRvpwATOPTdHpon54jUhnoR5/FUx3d6HvB7mL25mBfrqocVzS\nTB9tXdaa7vqAmGvTN3SDetRNgFhyh5Y6v9kO+jEZfVW/1UIhF0B6jWq/OYyQoPJ0\nLUlVMwRcAbK+XOiN5gMjv7RnssvLp9HsheXNSJ0XLonOHqAfLrqNMB/c2ufvc/yU\nnKQrt0aUzH/fhpCZQbyF7j8jv1ucYjflZawhPxalJIjg6yknlrhbQ0Vb3vUN2HM=\n=fA0c\n-----END PGP SIGNATURE-----\n", "payload": "tree f3822bfcc4b466fccb6b014fe45007c06803f677\nparent 2b21f66bebdb0685119b300ed21a15ae9dae22ab\nparent 7e56261fcbdaa8d039ee507911f8e5e886de1e41\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1528824173 -0600\ncommitter GitHub <noreply@github.com> 1528824173 -0600\n\nRollup merge of #51502 - jebrosen:pub_parse_methods, r=Mark-Simulacrum\n\nMake parse_seq_to_end and parse_path public\n\n(see SergioBenitez/Rocket#660, rust-lang/rust#51265)\n\nRocket currently uses `parse_seq_to_end` and `parse_path` in its codegen macros. Assuming I tested correctly, this is the minimal set of methods that are currently necessary to build Rocket again. I would be happy to add documentation of this and Rocket's other usages, if desired.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e06b1757c843c4cda538327dbd325378c539bfe", "html_url": "https://github.com/rust-lang/rust/commit/1e06b1757c843c4cda538327dbd325378c539bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e06b1757c843c4cda538327dbd325378c539bfe/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b21f66bebdb0685119b300ed21a15ae9dae22ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b21f66bebdb0685119b300ed21a15ae9dae22ab", "html_url": "https://github.com/rust-lang/rust/commit/2b21f66bebdb0685119b300ed21a15ae9dae22ab"}, {"sha": "7e56261fcbdaa8d039ee507911f8e5e886de1e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e56261fcbdaa8d039ee507911f8e5e886de1e41", "html_url": "https://github.com/rust-lang/rust/commit/7e56261fcbdaa8d039ee507911f8e5e886de1e41"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "e1f920c16fd395f6d2b2f6960d26d05f15935fc6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e06b1757c843c4cda538327dbd325378c539bfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e06b1757c843c4cda538327dbd325378c539bfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1e06b1757c843c4cda538327dbd325378c539bfe", "patch": "@@ -1022,7 +1022,7 @@ impl<'a> Parser<'a> {\n     /// Parse a sequence, including the closing delimiter. The function\n     /// f must consume tokens until reaching the next separator or\n     /// closing bracket.\n-    crate fn parse_seq_to_end<T, F>(&mut self,\n+    pub fn parse_seq_to_end<T, F>(&mut self,\n                                   ket: &token::Token,\n                                   sep: SeqSep,\n                                   f: F)\n@@ -1886,7 +1886,7 @@ impl<'a> Parser<'a> {\n     /// `a::b::C::<D>` (with disambiguator)\n     /// `Fn(Args)` (without disambiguator)\n     /// `Fn::(Args)` (with disambiguator)\n-    crate fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n+    pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n         self.parse_path_common(style, true)\n     }\n "}]}