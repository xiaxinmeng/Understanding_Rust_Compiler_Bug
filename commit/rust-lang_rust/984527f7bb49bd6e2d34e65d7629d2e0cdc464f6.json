{"sha": "984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "node_id": "C_kwDOAAsO6NoAKDk4NDUyN2Y3YmI0OWJkNmUyZDM0ZTY1ZDc2MjlkMmUwY2RjNDY0ZjY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-02-07T03:24:47Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-03-07T22:06:11Z"}, "message": "fix weird bug when `out` would get overridden by unit tests", "tree": {"sha": "60d058182a3e006ee4f6670ec2eaa41286a25e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d058182a3e006ee4f6670ec2eaa41286a25e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "html_url": "https://github.com/rust-lang/rust/commit/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62b522ec3a8967501466bfe8889fe54667c4e4d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b522ec3a8967501466bfe8889fe54667c4e4d1", "html_url": "https://github.com/rust-lang/rust/commit/62b522ec3a8967501466bfe8889fe54667c4e4d1"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "6494e5b113bca9afd88fcbedcac80539199e0ca1", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "patch": "@@ -11,7 +11,7 @@ use bootstrap::{Build, Config, Subcommand, VERSION};\n \n fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n-    let config = Config::parse(&args);\n+    let config = Config::parse(&args, false);\n \n     // check_version warnings are not printed during setup\n     let changelog_suggestion ="}, {"sha": "bd0be6da0b1aad00121d10a40b26b825fdfad0fc", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "patch": "@@ -3,15 +3,15 @@ use crate::config::{Config, TargetSelection};\n use std::thread;\n \n fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n-    let mut config = Config::parse(&[cmd.to_owned()]);\n+    let mut config = Config::parse(&[cmd.to_owned()], true);\n     // don't save toolstates\n     config.save_toolstates = None;\n     config.dry_run = true;\n     config.ninja_in_file = false;\n-    // try to avoid spurious failures in dist where we create/delete each others file\n     config.out = PathBuf::from(env::var_os(\"BOOTSTRAP_OUTPUT_DIRECTORY\").unwrap());\n     config.initial_rustc = PathBuf::from(env::var_os(\"RUSTC\").unwrap());\n     config.initial_cargo = PathBuf::from(env::var_os(\"BOOTSTRAP_INITIAL_CARGO\").unwrap());\n+    // try to avoid spurious failures in dist where we create/delete each others file\n     let dir = config\n         .out\n         .join(\"tmp-rustbuild-tests\")"}, {"sha": "fb387f94086355603293e295736a6a117ee90e48", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "patch": "@@ -619,7 +619,7 @@ impl Config {\n         config\n     }\n \n-    pub fn parse(args: &[String]) -> Config {\n+    pub fn parse(args: &[String], unit_test: bool) -> Config {\n         let flags = Flags::parse(&args);\n \n         let mut config = Config::default_opts();\n@@ -682,11 +682,26 @@ impl Config {\n         let build = toml.build.unwrap_or_default();\n \n         set(&mut config.out, build.build_dir.map(String::into));\n-        t!(fs::create_dir_all(&config.out));\n-        config.out = t!(\n-            config.out.canonicalize(),\n-            format!(\"failed to canonicalize {}\", config.out.display())\n-        );\n+        // NOTE: Bootstrap spawns various commands with different working directories.\n+        // To avoid writing to random places on the file system, `config.out` needs to be an absolute path.\n+\n+        // FIXME: using `canonicalize()` makes this a lot more complicated than it needs to be -\n+        // if/when `std::path::absolute` lands, we should use that instead.\n+\n+        // HACK: in tests, we override the build directory manually.\n+        // Avoid creating a directory we won't actually need.\n+        // (The original motivation for this is that CI uses read-only directories.)\n+        if !config.out.is_absolute() && !unit_test {\n+            // canonicalize() gives a hard error if the directory doesn't exist\n+            t!(\n+                fs::create_dir_all(&config.out),\n+                format!(\"failed to create build dir: {}\", config.out.display())\n+            );\n+            config.out = t!(\n+                config.out.canonicalize(),\n+                format!(\"failed to canonicalize {}\", config.out.display())\n+            );\n+        }\n \n         if config.dry_run {\n             let dir = config.out.join(\"tmp-dry-run\");"}, {"sha": "b12ba1e89e0ceb716e0d09548e31b8ed62321670", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "patch": "@@ -343,7 +343,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n \n             // All subcommands except `clean` can have an optional \"Available paths\" section\n             if verbose {\n-                let config = Config::parse(&[\"build\".to_string()]);\n+                let config = Config::parse(&[\"build\".to_string()], false);\n                 let build = Build::new(config);\n \n                 let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());"}, {"sha": "1665affcf8f0a437120202dd1e86c260f91a0ab2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "patch": "@@ -2346,6 +2346,8 @@ impl Step for Bootstrap {\n             .current_dir(builder.src.join(\"src/bootstrap\"))\n             .env(\"RUSTFLAGS\", \"-Cdebuginfo=2\")\n             .env(\"CARGO_TARGET_DIR\", builder.out.join(\"bootstrap\"))\n+            // HACK: bootstrap's tests want to know the output directory, but there's no way to set\n+            // it except through config.toml. Set it through an env variable instead.\n             .env(\"BOOTSTRAP_OUTPUT_DIRECTORY\", &builder.config.out)\n             .env(\"BOOTSTRAP_INITIAL_CARGO\", &builder.config.initial_cargo)\n             .env(\"RUSTC_BOOTSTRAP\", \"1\")"}]}