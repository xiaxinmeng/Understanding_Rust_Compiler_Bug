{"sha": "12fa90888e56c81088e30edd26d1bc404b3e334d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZmE5MDg4OGU1NmM4MTA4OGUzMGVkZDI2ZDFiYzQwNGIzZTMzNGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-04T01:26:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-04T07:48:12Z"}, "message": "rt: Clean up the way the kernel tracks tasks", "tree": {"sha": "dc172057b2c4c78859be010907945cc257ac2946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc172057b2c4c78859be010907945cc257ac2946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12fa90888e56c81088e30edd26d1bc404b3e334d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12fa90888e56c81088e30edd26d1bc404b3e334d", "html_url": "https://github.com/rust-lang/rust/commit/12fa90888e56c81088e30edd26d1bc404b3e334d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12fa90888e56c81088e30edd26d1bc404b3e334d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f00b64933b85289921f641b2658f41eeb338ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f00b64933b85289921f641b2658f41eeb338ec", "html_url": "https://github.com/rust-lang/rust/commit/e7f00b64933b85289921f641b2658f41eeb338ec"}], "stats": {"total": 91, "additions": 49, "deletions": 42}, "files": [{"sha": "46bed7237c190707b2feba76c9c7026f8f546985", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=12fa90888e56c81088e30edd26d1bc404b3e334d", "patch": "@@ -11,9 +11,9 @@ rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     _region(srv, true),\n     _log(srv, NULL),\n     srv(srv),\n-    max_id(0),\n-    rval(0),\n     live_tasks(0),\n+    max_task_id(0),\n+    rval(0),\n     env(srv->env)\n {\n     sched = new (this, \"rust_scheduler\")\n@@ -84,14 +84,35 @@ rust_kernel::fail() {\n \n void\n rust_kernel::register_task(rust_task *task) {\n-    scoped_lock with(_kernel_lock);\n-    task->user.id = max_id++;\n-    task_table.put(task->user.id, task);\n+    {\n+        scoped_lock with(task_lock);\n+        task->user.id = max_task_id++;\n+        task_table.put(task->user.id, task);\n+    }\n+    KLOG_(\"Registered task %\" PRIdPTR, task->user.id);\n+    int new_live_tasks = sync::increment(live_tasks);\n+    KLOG_(\"Total outstanding tasks: %d\", new_live_tasks);\n+}\n+\n+void\n+rust_kernel::release_task_id(rust_task_id id) {\n+    KLOG_(\"Releasing task %\" PRIdPTR, id);\n+    {\n+        scoped_lock with(task_lock);\n+        task_table.remove(id);\n+    }\n+    int new_live_tasks = sync::decrement(live_tasks);\n+    KLOG_(\"Total outstanding tasks: %d\", new_live_tasks);\n+    if (new_live_tasks == 0) {\n+        // There are no more tasks and there never will be.\n+        // Tell all the schedulers to exit.\n+        sched->exit();\n+    }\n }\n \n rust_task *\n rust_kernel::get_task_by_id(rust_task_id id) {\n-    scoped_lock with(_kernel_lock);\n+    scoped_lock with(task_lock);\n     rust_task *task = NULL;\n     // get leaves task unchanged if not found.\n     task_table.get(id, &task);\n@@ -109,16 +130,6 @@ rust_kernel::get_task_by_id(rust_task_id id) {\n     return task;\n }\n \n-void\n-rust_kernel::release_task_id(rust_task_id id) {\n-    scoped_lock with(_kernel_lock);\n-    task_table.remove(id);\n-}\n-\n-void rust_kernel::exit_schedulers() {\n-    sched->exit();\n-}\n-\n #ifdef __WIN32__\n void\n rust_kernel::win32_require(LPCTSTR fn, BOOL ok) {\n@@ -140,7 +151,7 @@ rust_kernel::win32_require(LPCTSTR fn, BOOL ok) {\n \n void\n rust_kernel::set_exit_status(int code) {\n-    scoped_lock with(_kernel_lock);\n+    scoped_lock with(rval_lock);\n     // If we've already failed then that's the code we're going to use\n     if (rval != PROC_FAIL_CODE) {\n         rval = code;"}, {"sha": "ff892aea30329b329a1656077a7b142c83f8228c", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=12fa90888e56c81088e30edd26d1bc404b3e334d", "patch": "@@ -20,25 +20,29 @@ class rust_kernel {\n public:\n     rust_srv *srv;\n private:\n-    lock_and_signal _kernel_lock;\n     rust_scheduler *sched;\n \n-    rust_task_id max_id;\n+    // Tracks the number of tasks that are being managed by\n+    // schedulers. When this hits 0 we will tell all schedulers\n+    // to exit.\n+    volatile int live_tasks;\n+    // Protects max_task_id and task_table\n+    lock_and_signal task_lock;\n+    rust_task_id max_task_id;\n     hash_map<rust_task_id, rust_task *> task_table;\n+\n+    lock_and_signal rval_lock;\n     int rval;\n \n public:\n \n-    volatile int live_tasks;\n     struct rust_env *env;\n \n     rust_kernel(rust_srv *srv, size_t num_threads);\n-\n-    void exit_schedulers();\n+    ~rust_kernel();\n \n     void log(uint32_t level, char const *fmt, ...);\n     void fatal(char const *fmt, ...);\n-    virtual ~rust_kernel();\n \n     void *malloc(size_t size, const char *tag);\n     void *realloc(void *mem, size_t size);"}, {"sha": "2af733db7ca85fecacdb72b59abb73f7d8449dc5", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=12fa90888e56c81088e30edd26d1bc404b3e334d", "patch": "@@ -87,9 +87,7 @@ rust_scheduler::create_task(rust_task *spawner, const char *name,\n \tthread_no = isaac_rand(&rctx) % num_threads;\n     }\n     rust_task_thread *thread = threads[thread_no];\n-    rust_task *t = thread->create_task(spawner, name, init_stack_sz);\n-    kernel->register_task(t);\n-    return t->user.id;\n+    return thread->create_task(spawner, name, init_stack_sz);\n }\n \n rust_task_id"}, {"sha": "1563fe635162dbd6208018eae43b603742a67eeb", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=12fa90888e56c81088e30edd26d1bc404b3e334d", "patch": "@@ -275,19 +275,19 @@ rust_task::~rust_task()\n     DLOG(thread, task, \"~rust_task %s @0x%\" PRIxPTR \", refcnt=%d\",\n          name, (uintptr_t)this, ref_count);\n \n+    // FIXME: We should do this when the task exits, not in the destructor\n     if (supervisor) {\n         supervisor->deref();\n     }\n \n-    kernel->release_task_id(user.id);\n-\n     /* FIXME: tighten this up, there are some more\n        assertions that hold at task-lifecycle events. */\n     I(thread, ref_count == 0); // ||\n     //   (ref_count == 1 && this == sched->root_task));\n \n     // Delete all the stacks. There may be more than one if the task failed\n     // and no landing pads stopped to clean up.\n+    // FIXME: We should do this when the task exits, not in the destructor\n     while (stk != NULL) {\n         del_stk(this, stk);\n     }"}, {"sha": "d31575510e9374072cdaa2ebfc5e92bf44f51d52", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=12fa90888e56c81088e30edd26d1bc404b3e334d", "patch": "@@ -137,13 +137,8 @@ rust_task_thread::reap_dead_tasks() {\n     for (size_t i = 0; i < dead_tasks_len; ++i) {\n         rust_task *task = dead_tasks_copy[i];\n         if (task) {\n+            kernel->release_task_id(task->user.id);\n             task->deref();\n-            int live_tasks = sync::decrement(kernel->live_tasks);\n-            if (live_tasks == 0) {\n-                // There are no more tasks and there never will be.\n-                // Tell all the schedulers to exit.\n-                kernel->exit_schedulers();\n-            }\n         }\n     }\n     srv->free(dead_tasks_copy);\n@@ -219,8 +214,8 @@ rust_task_thread::start_main_loop() {\n     DLOG(this, dom, \"started domain loop %d\", id);\n \n     while (!should_exit) {\n-        DLOG(this, dom, \"worker %d, number_of_live_tasks = %d, total = %d\",\n-             id, number_of_live_tasks(), kernel->live_tasks);\n+        DLOG(this, dom, \"worker %d, number_of_live_tasks = %d\",\n+             id, number_of_live_tasks());\n \n         rust_task *scheduled_task = schedule_task();\n \n@@ -281,7 +276,7 @@ rust_task_thread::get_cache() {\n     return &cache;\n }\n \n-rust_task *\n+rust_task_id\n rust_task_thread::create_task(rust_task *spawner, const char *name,\n                             size_t init_stack_sz) {\n     rust_task *task =\n@@ -295,9 +290,8 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n         newborn_tasks.append(task);\n     }\n \n-    sync::increment(kernel->live_tasks);\n-\n-    return task;\n+    kernel->register_task(task);\n+    return task->user.id;\n }\n \n void rust_task_thread::run() {"}, {"sha": "8a3736098febe959c980b4bf7938addfcd35422f", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/12fa90888e56c81088e30edd26d1bc404b3e334d/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=12fa90888e56c81088e30edd26d1bc404b3e334d", "patch": "@@ -112,8 +112,8 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n \n     void kill_all_tasks();\n \n-    rust_task *create_task(rust_task *spawner, const char *name,\n-                           size_t init_stack_sz);\n+    rust_task_id create_task(rust_task *spawner, const char *name,\n+                             size_t init_stack_sz);\n \n     virtual void run();\n "}]}