{"sha": "7ab6315f5fe51e9620e48fa4118d44b780e1c828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYjYzMTVmNWZlNTFlOTYyMGU0OGZhNDExOGQ0NGI3ODBlMWM4Mjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T22:06:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T23:07:40Z"}, "message": "Free vectors during cc sweep", "tree": {"sha": "cd955a2f68bd2788afeeea4bc26ccebb3fe3afbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd955a2f68bd2788afeeea4bc26ccebb3fe3afbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ab6315f5fe51e9620e48fa4118d44b780e1c828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab6315f5fe51e9620e48fa4118d44b780e1c828", "html_url": "https://github.com/rust-lang/rust/commit/7ab6315f5fe51e9620e48fa4118d44b780e1c828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ab6315f5fe51e9620e48fa4118d44b780e1c828/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d713215a8fba320b2e5472d1ae6924e5a9d263c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d713215a8fba320b2e5472d1ae6924e5a9d263c", "html_url": "https://github.com/rust-lang/rust/commit/2d713215a8fba320b2e5472d1ae6924e5a9d263c"}], "stats": {"total": 139, "additions": 136, "deletions": 3}, "files": [{"sha": "8982a4a312ef946ac60f42f67765eb156b81cfc3", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 126, "deletions": 3, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/7ab6315f5fe51e9620e48fa4118d44b780e1c828/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7ab6315f5fe51e9620e48fa4118d44b780e1c828/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=7ab6315f5fe51e9620e48fa4118d44b780e1c828", "patch": "@@ -422,18 +422,141 @@ mark::do_mark(rust_task *task, const std::vector<void *> &roots,\n     }\n }\n \n+class sweep : public shape::data<sweep,shape::ptr> {\n+    friend class shape::data<sweep,shape::ptr>;\n+\n+    sweep(const sweep &other, const shape::ptr &in_dp)\n+\t: shape::data<sweep,shape::ptr>(other.task, other.align,\n+\t\t\t\t\tother.sp, other.params,\n+\t\t\t\t\tother.tables, in_dp) {}\n+\n+    sweep(const sweep &other,\n+\t  const uint8_t *in_sp,\n+\t  const shape::type_param *in_params,\n+\t  const rust_shape_tables *in_tables = NULL)\n+\t: shape::data<sweep,shape::ptr>(other.task,\n+\t\t\t\t\tother.align,\n+\t\t\t\t\tin_sp,\n+\t\t\t\t\tin_params,\n+\t\t\t\t\tin_tables ? in_tables : other.tables,\n+\t\t\t\t\tother.dp) {}\n+\n+    sweep(const sweep &other,\n+\t  const uint8_t *in_sp,\n+\t  const shape::type_param *in_params,\n+\t  const rust_shape_tables *in_tables,\n+\t  shape::ptr in_dp)\n+\t: shape::data<sweep,shape::ptr>(other.task,\n+\t\t\t\t\tother.align,\n+\t\t\t\t\tin_sp,\n+\t\t\t\t\tin_params,\n+\t\t\t\t\tin_tables,\n+\t\t\t\t\tin_dp) {}\n+\n+    sweep(rust_task *in_task,\n+\t  bool in_align,\n+\t  const uint8_t *in_sp,\n+\t  const shape::type_param *in_params,\n+\t  const rust_shape_tables *in_tables,\n+\t  uint8_t *in_data)\n+\t: shape::data<sweep,shape::ptr>(in_task, in_align, in_sp,\n+\t\t\t\t\tin_params, in_tables, in_data) {}\n+\n+    void walk_vec(bool is_pod, uint16_t sp_size) {\n+\tvoid *vec = shape::get_dp<void *>(dp);\n+\twalk_vec(is_pod, get_vec_data_range(dp));\n+\ttask->kernel->free(vec);\n+    }\n+\n+    void walk_vec(bool is_pod,\n+\t\t  const std::pair<shape::ptr,shape::ptr> &data_range) {\n+\tsweep sub(*this, data_range.first);\n+\tshape::ptr data_end = sub.end_dp = data_range.second;\n+\twhile (sub.dp < data_end) {\n+\t    sub.walk_reset();\n+\t    sub.align = true;\n+\t}\n+    }\n+\n+    void walk_tag(shape::tag_info &tinfo, uint32_t tag_variant) {\n+        shape::data<sweep,shape::ptr>::walk_variant(tinfo, tag_variant);\n+    }\n+\n+    void walk_box() {\n+\tshape::data<sweep,shape::ptr>::walk_box_contents();\n+    }\n+\n+    void walk_fn() {\n+\treturn;\n+    }\n+\n+    void walk_obj() {\n+        shape::data<sweep,shape::ptr>::walk_obj_contents(dp);\n+    }\n+\n+    void walk_res(const shape::rust_fn *dtor, unsigned n_params,\n+                  const shape::type_param *params, const uint8_t *end_sp,\n+                  bool live) {\n+        while (this->sp != end_sp) {\n+            this->walk();\n+            align = true;\n+        }\n+    }\n+\n+    void walk_subcontext(sweep &sub) { sub.walk(); }\n+\n+    void walk_box_contents(sweep &sub, shape::ptr &ref_count_dp) {\n+\treturn;\n+    }\n+\n+    void walk_struct(const uint8_t *end_sp) {\n+        while (this->sp != end_sp) {\n+            this->walk();\n+            align = true;\n+        }\n+    }\n+\n+    void walk_variant(shape::tag_info &tinfo, uint32_t variant_id,\n+                      const std::pair<const uint8_t *,const uint8_t *>\n+                      variant_ptr_and_end) {\n+\tsweep sub(*this, variant_ptr_and_end.first, tinfo.params);\n+\n+\tconst uint8_t *variant_end = variant_ptr_and_end.second;\n+\twhile (sub.sp < variant_end) {\n+\t    sub.walk();\n+\t    align = true;\n+\t}\n+    }\n+\n+    template<typename T>\n+    inline void walk_number() { /* no-op */ }\n+\n+public:\n+    static void do_sweep(rust_task *task, const std::set<void *> &marked);\n+};\n \n void\n-sweep(rust_task *task, const std::set<void *> &marked) {\n+sweep::do_sweep(rust_task *task, const std::set<void *> &marked) {\n     std::map<void *,const type_desc *>::iterator\n         begin(task->local_allocs.begin()), end(task->local_allocs.end());\n     while (begin != end) {\n         void *alloc = begin->first;\n+\n         if (marked.find(alloc) == marked.end()) {\n             LOG(task, gc, \"object is part of a cycle: %p\", alloc);\n \n-            // FIXME: Run the destructor, *if* it's a resource.\n+\t    const type_desc *tydesc = begin->second;\n+            uint8_t *p = reinterpret_cast<uint8_t *>(alloc);\n+            shape::arena arena;\n+            shape::type_param *params =\n+                shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n+\n+\t    sweep sweep(task, true, tydesc->shape,\n+\t\t\tparams, tydesc->shape_tables,\n+\t\t\tp + sizeof(uintptr_t));\n+\t    sweep.walk();\n \n+            // FIXME: Run the destructor, *if* it's a resource.\n             task->free(alloc);\n         }\n         ++begin;\n@@ -455,7 +578,7 @@ do_cc(rust_task *task) {\n     std::set<void *> marked;\n     mark::do_mark(task, roots, marked);\n \n-    sweep(task, marked);\n+    sweep::do_sweep(task, marked);\n }\n \n void"}, {"sha": "d7a16f63a6d76cd8a102e0f7b0de6eaf506abc24", "filename": "src/test/run-pass/cycle-collection4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ab6315f5fe51e9620e48fa4118d44b780e1c828/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab6315f5fe51e9620e48fa4118d44b780e1c828/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs?ref=7ab6315f5fe51e9620e48fa4118d44b780e1c828", "patch": "@@ -0,0 +1,10 @@\n+type foo = { mutable z : fn@() };\n+\n+fn nop() { }\n+fn nop_foo(_y: [int], _x : @foo) { }\n+\n+fn main() {\n+    let w = @{ mutable z: bind nop() };\n+    let x = bind nop_foo([], w);\n+    w.z = x;\n+}\n\\ No newline at end of file"}]}