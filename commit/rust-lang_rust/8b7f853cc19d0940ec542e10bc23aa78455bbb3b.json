{"sha": "8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiN2Y4NTNjYzE5ZDA5NDBlYzU0MmUxMGJjMjNhYTc4NDU1YmJiM2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-09T21:32:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-11T11:42:08Z"}, "message": "Add hir::Local", "tree": {"sha": "eb418bb0df37516dcf24ffc754a862ffea1ab789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb418bb0df37516dcf24ffc754a862ffea1ab789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "html_url": "https://github.com/rust-lang/rust/commit/8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ac4ffbc121c8231fe3ea5c2bb918f7aae60f197", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac4ffbc121c8231fe3ea5c2bb918f7aae60f197", "html_url": "https://github.com/rust-lang/rust/commit/5ac4ffbc121c8231fe3ea5c2bb918f7aae60f197"}], "stats": {"total": 344, "additions": 171, "deletions": 173}, "files": [{"sha": "09c4e97fa98b62767b2c7b190b62d857d28b607f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -22,7 +22,7 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n use crate::{\n     adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    expr::{validation::ExprValidator, Body, BodySourceMap},\n+    expr::{validation::ExprValidator, BindingAnnotation, Body, BodySourceMap, Pat, PatId},\n     generics::HasGenericParams,\n     ids::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n@@ -32,7 +32,7 @@ use crate::{\n     resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n     ty::{InferenceResult, Namespace, TraitRef},\n-    Either, HasSource, ImportId, Name, ScopeDef, Ty,\n+    Either, HasSource, ImportId, Name, ScopeDef, Source, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -1070,3 +1070,54 @@ impl AssocItem {\n         .expect(\"AssocItem without container\")\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct Local {\n+    pub(crate) parent: DefWithBody,\n+    pub(crate) pat_id: PatId,\n+}\n+\n+impl Local {\n+    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+        let body = db.body_hir(self.parent);\n+        match &body[self.pat_id] {\n+            Pat::Bind { name, .. } => Some(name.clone()),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn is_self(self, db: &impl HirDatabase) -> bool {\n+        self.name(db) == Some(name::SELF_PARAM)\n+    }\n+\n+    pub fn is_mut(self, db: &impl HirDatabase) -> bool {\n+        let body = db.body_hir(self.parent);\n+        match &body[self.pat_id] {\n+            Pat::Bind { mode, .. } => match mode {\n+                BindingAnnotation::Mutable | BindingAnnotation::RefMut => true,\n+                _ => false,\n+            },\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn parent(self, _db: &impl HirDatabase) -> DefWithBody {\n+        self.parent\n+    }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        self.parent.module(db)\n+    }\n+\n+    pub fn ty(self, db: &impl HirDatabase) -> Ty {\n+        let infer = db.infer(self.parent);\n+        infer[self.pat_id].clone()\n+    }\n+\n+    pub fn source(self, db: &impl HirDatabase) -> Source<Either<ast::BindPat, ast::SelfParam>> {\n+        let (_body, source_map) = db.body_with_source_map(self.parent);\n+        let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n+        let root = src.file_syntax(db);\n+        src.map(|ast| ast.map(|it| it.cast().unwrap().to_node(&root), |it| it.to_node(&root)))\n+    }\n+}"}, {"sha": "daf8d8d0795182a2c8de8088f0f1eaef94876ff7", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -17,7 +17,7 @@ impl_arena_id!(ScopeId);\n \n #[derive(Debug, PartialEq, Eq)]\n pub struct ExprScopes {\n-    body: Arc<Body>,\n+    pub(crate) body: Arc<Body>,\n     scopes: Arena<ScopeId, ScopeData>,\n     scope_by_expr: FxHashMap<ExprId, ScopeId>,\n }"}, {"sha": "2c441b0f4d51a6daa73fea5070f7cb4083931ff1", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -2,13 +2,17 @@\n \n use hir_def::{StructId, StructOrUnionId, UnionId};\n use hir_expand::name::AsName;\n-use ra_syntax::ast::{self, AstNode, NameOwner};\n+use ra_syntax::{\n+    ast::{self, AstNode, NameOwner},\n+    match_ast,\n+};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::{AstItemDef, LocationCtx},\n-    AstId, Const, Crate, Enum, EnumVariant, FieldSource, Function, HasSource, ImplBlock, Module,\n-    ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias, Union, VariantDef,\n+    AstId, Const, Crate, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasSource,\n+    ImplBlock, Local, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias,\n+    Union, VariantDef,\n };\n \n pub trait FromSource: Sized {\n@@ -126,6 +130,26 @@ impl FromSource for StructField {\n     }\n }\n \n+impl Local {\n+    pub fn from_source(db: &impl HirDatabase, src: Source<ast::BindPat>) -> Option<Self> {\n+        let file_id = src.file_id;\n+        let parent: DefWithBody = src.ast.syntax().ancestors().find_map(|it| {\n+            let res = match_ast! {\n+                match it {\n+                    ast::ConstDef(ast) => { Const::from_source(db, Source { ast, file_id})?.into() },\n+                    ast::StaticDef(ast) => { Static::from_source(db, Source { ast, file_id})?.into() },\n+                    ast::FnDef(ast) => { Function::from_source(db, Source { ast, file_id})?.into() },\n+                    _ => return None,\n+                }\n+            };\n+            Some(res)\n+        })?;\n+        let (_body, source_map) = db.body_with_source_map(parent);\n+        let pat_id = source_map.node_pat(&src.ast.into())?;\n+        Some(Local { parent, pat_id })\n+    }\n+}\n+\n impl Module {\n     pub fn from_declaration(db: &impl HirDatabase, src: Source<ast::Module>) -> Option<Self> {\n         let src_parent = Source {"}, {"sha": "806f1daed171e85aaeef8bb174b90f53a6bf1b66", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -65,7 +65,7 @@ pub use crate::{\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n+        EnumVariant, FieldSource, FnData, Function, HasBody, Local, MacroDef, Module, ModuleDef,\n         ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n     },\n     expr::ExprScopes,"}, {"sha": "c5fdf3bab8827d8ffc4054a21125de8a61ab752e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -28,7 +28,7 @@ use crate::{\n     ids::LocationCtx,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n-    AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId,\n+    AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, Local,\n     MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,\n };\n \n@@ -94,6 +94,7 @@ fn def_with_body_from_child_node(\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n     resolver: Resolver,\n+    body_owner: Option<DefWithBody>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n     infer: Option<Arc<crate::ty::InferenceResult>>,\n     scopes: Option<Arc<crate::expr::ExprScopes>>,\n@@ -104,7 +105,7 @@ pub enum PathResolution {\n     /// An item\n     Def(crate::ModuleDef),\n     /// A local binding (only value namespace)\n-    LocalBinding(Either<AstPtr<ast::BindPat>, AstPtr<ast::SelfParam>>),\n+    Local(Local),\n     /// A generic parameter\n     GenericParam(u32),\n     SelfType(crate::ImplBlock),\n@@ -152,6 +153,7 @@ impl SourceAnalyzer {\n             let resolver = expr::resolver_for_scope(def.body(db), db, scope);\n             SourceAnalyzer {\n                 resolver,\n+                body_owner: Some(def),\n                 body_source_map: Some(source_map),\n                 infer: Some(def.infer(db)),\n                 scopes: Some(scopes),\n@@ -162,6 +164,7 @@ impl SourceAnalyzer {\n                     .ancestors()\n                     .find_map(|node| try_get_resolver_for_node(db, file_id, &node))\n                     .unwrap_or_default(),\n+                body_owner: None,\n                 body_source_map: None,\n                 infer: None,\n                 scopes: None,\n@@ -233,16 +236,9 @@ impl SourceAnalyzer {\n         });\n         let values = self.resolver.resolve_path_in_value_ns_fully(db, &path).and_then(|val| {\n             let res = match val {\n-                ValueNs::LocalBinding(it) => {\n-                    // We get a `PatId` from resolver, but it actually can only\n-                    // point at `BindPat`, and not at the arbitrary pattern.\n-                    let pat_ptr = self\n-                        .body_source_map\n-                        .as_ref()?\n-                        .pat_syntax(it)?\n-                        .ast // FIXME: ignoring file_id here is definitelly wrong\n-                        .map_a(|ptr| ptr.cast::<ast::BindPat>().unwrap());\n-                    PathResolution::LocalBinding(pat_ptr)\n+                ValueNs::LocalBinding(pat_id) => {\n+                    let var = Local { parent: self.body_owner?, pat_id };\n+                    PathResolution::Local(var)\n                 }\n                 ValueNs::Function(it) => PathResolution::Def(it.into()),\n                 ValueNs::Const(it) => PathResolution::Def(it.into()),"}, {"sha": "f7ad085158273f087fd2ea34bb340077b21efe96", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir::{AssocItem, FieldSource, HasSource, ModuleSource};\n+use hir::{AssocItem, Either, FieldSource, HasSource, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, AstPtr, SmolStr,\n-    SyntaxKind::{self, NAME},\n+    ast::{self, DocCommentsOwner, NameOwner},\n+    match_ast, AstNode, SmolStr,\n+    SyntaxKind::{self, BIND_PAT},\n     SyntaxNode, TextRange,\n };\n \n@@ -76,42 +76,6 @@ impl NavigationTarget {\n         self.focus_range\n     }\n \n-    pub(crate) fn from_bind_pat(\n-        db: &RootDatabase,\n-        file_id: FileId,\n-        pat: &ast::BindPat,\n-    ) -> NavigationTarget {\n-        NavigationTarget::from_named(db, file_id.into(), pat, None, None)\n-    }\n-\n-    pub(crate) fn from_pat(\n-        db: &RootDatabase,\n-        file_id: FileId,\n-        pat: AstPtr<ast::BindPat>,\n-    ) -> NavigationTarget {\n-        let parse = db.parse(file_id);\n-        let pat = pat.to_node(parse.tree().syntax());\n-        NavigationTarget::from_bind_pat(db, file_id, &pat)\n-    }\n-\n-    pub(crate) fn from_self_param(\n-        file_id: FileId,\n-        par: AstPtr<ast::SelfParam>,\n-    ) -> NavigationTarget {\n-        let (name, full_range) = (\"self\".into(), par.syntax_node_ptr().range());\n-\n-        NavigationTarget {\n-            file_id,\n-            name,\n-            full_range,\n-            focus_range: None,\n-            kind: NAME,\n-            container_name: None,\n-            description: None, //< No document node for SelfParam\n-            docs: None,        //< No document node for SelfParam\n-        }\n-    }\n-\n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n@@ -370,6 +334,32 @@ impl ToNav for hir::AssocItem {\n     }\n }\n \n+impl ToNav for hir::Local {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.source(db);\n+        let (full_range, focus_range) = match src.ast {\n+            Either::A(it) => {\n+                (it.syntax().text_range(), it.name().map(|it| it.syntax().text_range()))\n+            }\n+            Either::B(it) => (it.syntax().text_range(), Some(it.self_kw_token().text_range())),\n+        };\n+        let name = match self.name(db) {\n+            Some(it) => it.to_string().into(),\n+            None => \"\".into(),\n+        };\n+        NavigationTarget {\n+            file_id: src.file_id.original_file(db),\n+            name,\n+            kind: BIND_PAT,\n+            full_range,\n+            focus_range,\n+            container_name: None,\n+            description: None,\n+            docs: None,\n+        }\n+    }\n+}\n+\n fn find_range_from_node(\n     db: &RootDatabase,\n     src: hir::HirFileId,"}, {"sha": "6c8387f6cd78aab94175015ce3d03e9bce66e0da", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -68,8 +68,7 @@ pub(crate) fn reference_definition(\n                 return Exact(adt.to_nav(db));\n             }\n         }\n-        Some(Pat((_, pat))) => return Exact(NavigationTarget::from_pat(db, file_id, pat)),\n-        Some(SelfParam(par)) => return Exact(NavigationTarget::from_self_param(file_id, par)),\n+        Some(Local(local)) => return Exact(local.to_nav(db)),\n         Some(GenericParam(_)) => {\n             // FIXME: go to the generic param def\n         }"}, {"sha": "086e6dec3a93c239f5d17d9e266b4fae40c29cdc", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -143,7 +143,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                     })\n                 }\n             }\n-            Some(Pat(_)) | Some(SelfParam(_)) => {\n+            Some(Local(_)) => {\n                 // Hover for these shows type names\n                 no_fallback = true;\n             }"}, {"sha": "9cb9433e7beaabc8fe2f4eb9ad61455bdf680dc6", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -86,8 +86,7 @@ pub(crate) fn find_all_refs(\n             Some((adt, _)) => adt.to_nav(db),\n             None => return None,\n         },\n-        NameKind::Pat((_, pat)) => NavigationTarget::from_pat(db, position.file_id, pat),\n-        NameKind::SelfParam(par) => NavigationTarget::from_self_param(position.file_id, par),\n+        NameKind::Local(local) => local.to_nav(db),\n         NameKind::GenericParam(_) => return None,\n     };\n "}, {"sha": "217f9951e3cc1f14eea1c50e96edbb51d1c9d271", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -1,13 +1,13 @@\n //! Functions that are used to classify an element from its definition or reference.\n \n-use hir::{Either, FromSource, Module, ModuleSource, Path, PathResolution, Source, SourceAnalyzer};\n+use hir::{FromSource, Module, ModuleSource, Path, PathResolution, Source, SourceAnalyzer};\n use ra_db::FileId;\n use ra_prof::profile;\n-use ra_syntax::{ast, match_ast, AstNode, AstPtr};\n+use ra_syntax::{ast, match_ast, AstNode};\n use test_utils::tested_by;\n \n use super::{\n-    name_definition::{from_assoc_item, from_module_def, from_pat, from_struct_field},\n+    name_definition::{from_assoc_item, from_module_def, from_struct_field},\n     NameDefinition, NameKind,\n };\n use crate::db::RootDatabase;\n@@ -25,7 +25,13 @@ pub(crate) fn classify_name(\n     match_ast! {\n         match parent {\n             ast::BindPat(it) => {\n-                from_pat(db, file_id, AstPtr::new(&it))\n+                let src = hir::Source { file_id, ast: it };\n+                let local = hir::Local::from_source(db, src)?;\n+                Some(NameDefinition {\n+                    visibility: None,\n+                    container: local.module(db),\n+                    kind: NameKind::Local(local),\n+                })\n             },\n             ast::RecordFieldDef(it) => {\n                 let ast = hir::FieldSource::Named(it);\n@@ -159,10 +165,10 @@ pub(crate) fn classify_name_ref(\n     match resolved {\n         Def(def) => Some(from_module_def(db, def, Some(container))),\n         AssocItem(item) => Some(from_assoc_item(db, item)),\n-        LocalBinding(Either::A(pat)) => from_pat(db, file_id, pat),\n-        LocalBinding(Either::B(par)) => {\n-            let kind = NameKind::SelfParam(par);\n-            Some(NameDefinition { kind, container, visibility })\n+        Local(local) => {\n+            let container = local.module(db);\n+            let kind = NameKind::Local(local);\n+            Some(NameDefinition { kind, container, visibility: None })\n         }\n         GenericParam(par) => {\n             // FIXME: get generic param def"}, {"sha": "450f7ea9b6da6229bf96b0ba67d20d82ad0aee67", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -4,10 +4,9 @@\n //! Note that the reference search is possible for not all of the classified items.\n \n use hir::{\n-    db::AstDatabase, Adt, AssocItem, DefWithBody, FromSource, HasSource, HirFileId, MacroDef,\n-    Module, ModuleDef, StructField, Ty, VariantDef,\n+    Adt, AssocItem, HasSource, Local, MacroDef, Module, ModuleDef, StructField, Ty, VariantDef,\n };\n-use ra_syntax::{ast, ast::VisibilityOwner, match_ast, AstNode, AstPtr};\n+use ra_syntax::{ast, ast::VisibilityOwner};\n \n use crate::db::RootDatabase;\n \n@@ -18,8 +17,7 @@ pub enum NameKind {\n     AssocItem(AssocItem),\n     Def(ModuleDef),\n     SelfType(Ty),\n-    Pat((DefWithBody, AstPtr<ast::BindPat>)),\n-    SelfParam(AstPtr<ast::SelfParam>),\n+    Local(Local),\n     GenericParam(u32),\n }\n \n@@ -30,36 +28,6 @@ pub(crate) struct NameDefinition {\n     pub kind: NameKind,\n }\n \n-pub(super) fn from_pat(\n-    db: &RootDatabase,\n-    file_id: HirFileId,\n-    pat: AstPtr<ast::BindPat>,\n-) -> Option<NameDefinition> {\n-    let root = db.parse_or_expand(file_id)?;\n-    let def = pat.to_node(&root).syntax().ancestors().find_map(|node| {\n-        match_ast! {\n-            match node {\n-                ast::FnDef(it) => {\n-                    let src = hir::Source { file_id, ast: it };\n-                    Some(hir::Function::from_source(db, src)?.into())\n-                },\n-                ast::ConstDef(it) => {\n-                    let src = hir::Source { file_id, ast: it };\n-                    Some(hir::Const::from_source(db, src)?.into())\n-                },\n-                ast::StaticDef(it) => {\n-                    let src = hir::Source { file_id, ast: it };\n-                    Some(hir::Static::from_source(db, src)?.into())\n-                },\n-                _ => None,\n-            }\n-        }\n-    })?;\n-    let kind = NameKind::Pat((def, pat));\n-    let container = def.module(db);\n-    Some(NameDefinition { kind, container, visibility: None })\n-}\n-\n pub(super) fn from_assoc_item(db: &RootDatabase, item: AssocItem) -> NameDefinition {\n     let container = item.module(db);\n     let visibility = match item {"}, {"sha": "2907787c24583468f29abfac6b6eb5e4d6b98203", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -71,13 +71,13 @@ impl NameDefinition {\n         let module_src = self.container.definition_source(db);\n         let file_id = module_src.file_id.original_file(db);\n \n-        if let NameKind::Pat((def, _)) = self.kind {\n-            let mut res = FxHashMap::default();\n-            let range = match def {\n+        if let NameKind::Local(var) = self.kind {\n+            let range = match var.parent(db) {\n                 DefWithBody::Function(f) => f.source(db).ast.syntax().text_range(),\n                 DefWithBody::Const(c) => c.source(db).ast.syntax().text_range(),\n                 DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n             };\n+            let mut res = FxHashMap::default();\n             res.insert(file_id, Some(range));\n             return SearchScope::new(res);\n         }"}, {"sha": "79f11ea80ccfa4bfaa0589506df43f9653e81f26", "filename": "crates/ra_ide_api/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -20,14 +20,14 @@\n .keyword\\.control  { color: #F0DFAF; font-weight: bold; }\n </style>\n <pre><code><span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5695551762718493399\" style=\"color: hsl(272,48%,45%);\">x</span> = <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span>.<span class=\"text\">to_string</span>();\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5435401749617022797\" style=\"color: hsl(353,77%,74%);\">y</span> = <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span>.<span class=\"text\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"14702933417323009544\" style=\"color: hsl(108,90%,49%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span>.<span class=\"text\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5443150872754369068\" style=\"color: hsl(215,43%,43%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span>.<span class=\"text\">to_string</span>();\n \n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span> = <span class=\"string\">\"other color please!\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"14878783531007968800\" style=\"color: hsl(265,73%,83%);\">y</span> = <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span>.<span class=\"text\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"17358108296605513516\" style=\"color: hsl(331,46%,60%);\">x</span> = <span class=\"string\">\"other color please!\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"2073121142529774969\" style=\"color: hsl(320,43%,74%);\">y</span> = <span class=\"variable\" data-binding-hash=\"17358108296605513516\" style=\"color: hsl(331,46%,60%);\">x</span>.<span class=\"text\">to_string</span>();\n }\n \n <span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\" data-binding-hash=\"8723171760279909834\" style=\"color: hsl(307,91%,75%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "d53a759ee298494083e1e3f4ef1746eebd624b25", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 22, "deletions": 57, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f853cc19d0940ec542e10bc23aa78455bbb3b/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=8b7f853cc19d0940ec542e10bc23aa78455bbb3b", "patch": "@@ -2,15 +2,10 @@\n \n use rustc_hash::{FxHashMap, FxHashSet};\n \n-use hir::{Mutability, Ty};\n+use hir::{Mutability, Name};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n-use ra_syntax::{\n-    ast::{self, NameOwner},\n-    AstNode, Direction, SmolStr, SyntaxElement, SyntaxKind,\n-    SyntaxKind::*,\n-    SyntaxNode, TextRange, T,\n-};\n+use ra_syntax::{ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, TextRange, T};\n \n use crate::{\n     db::RootDatabase,\n@@ -43,32 +38,12 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n     }\n }\n \n-fn is_variable_mutable(\n-    db: &RootDatabase,\n-    analyzer: &hir::SourceAnalyzer,\n-    pat: ast::BindPat,\n-) -> bool {\n-    if pat.is_mutable() {\n-        return true;\n-    }\n-\n-    let ty = analyzer.type_of_pat(db, &pat.into()).unwrap_or(Ty::Unknown);\n-    if let Some((_, mutability)) = ty.as_reference() {\n-        match mutability {\n-            Mutability::Shared => false,\n-            Mutability::Mut => true,\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let parse = db.parse(file_id);\n     let root = parse.tree().syntax().clone();\n \n-    fn calc_binding_hash(file_id: FileId, text: &SmolStr, shadow_count: u32) -> u64 {\n+    fn calc_binding_hash(file_id: FileId, name: &Name, shadow_count: u32) -> u64 {\n         fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n             use std::{collections::hash_map::DefaultHasher, hash::Hasher};\n \n@@ -77,13 +52,13 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             hasher.finish()\n         }\n \n-        hash((file_id, text, shadow_count))\n+        hash((file_id, name, shadow_count))\n     }\n \n     // Visited nodes to handle highlighting priorities\n     // FIXME: retain only ranges here\n     let mut highlighted: FxHashSet<SyntaxElement> = FxHashSet::default();\n-    let mut bindings_shadow_count: FxHashMap<SmolStr, u32> = FxHashMap::default();\n+    let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n \n     let mut res = Vec::new();\n     for node in root.descendants_with_tokens() {\n@@ -107,34 +82,29 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 let name_ref = node.as_node().cloned().and_then(ast::NameRef::cast).unwrap();\n                 let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.kind);\n \n-                if let Some(Pat((_, ptr))) = &name_kind {\n-                    let pat = ptr.to_node(&root);\n-                    if let Some(name) = pat.name() {\n-                        let text = name.text();\n-                        let shadow_count = bindings_shadow_count.entry(text.clone()).or_default();\n-                        binding_hash = Some(calc_binding_hash(file_id, &text, *shadow_count))\n+                if let Some(Local(local)) = &name_kind {\n+                    if let Some(name) = local.name(db) {\n+                        let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n+                        binding_hash = Some(calc_binding_hash(file_id, &name, *shadow_count))\n                     }\n                 };\n \n-                name_kind\n-                    .map_or(\"text\", |it| highlight_name(db, file_id, name_ref.syntax(), &root, it))\n+                name_kind.map_or(\"text\", |it| highlight_name(db, it))\n             }\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();\n                 let name_kind = classify_name(db, file_id, &name).map(|d| d.kind);\n \n-                if let Some(Pat((_, ptr))) = &name_kind {\n-                    let pat = ptr.to_node(&root);\n-                    if let Some(name) = pat.name() {\n-                        let text = name.text();\n-                        let shadow_count = bindings_shadow_count.entry(text.clone()).or_default();\n+                if let Some(Local(local)) = &name_kind {\n+                    if let Some(name) = local.name(db) {\n+                        let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n                         *shadow_count += 1;\n-                        binding_hash = Some(calc_binding_hash(file_id, &text, *shadow_count))\n+                        binding_hash = Some(calc_binding_hash(file_id, &name, *shadow_count))\n                     }\n                 };\n \n                 match name_kind {\n-                    Some(name_kind) => highlight_name(db, file_id, name.syntax(), &root, name_kind),\n+                    Some(name_kind) => highlight_name(db, name_kind),\n                     None => name.syntax().parent().map_or(\"function\", |x| match x.kind() {\n                         TYPE_PARAM | STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => \"type\",\n                         RECORD_FIELD_DEF => \"field\",\n@@ -237,13 +207,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     buf\n }\n \n-fn highlight_name(\n-    db: &RootDatabase,\n-    file_id: FileId,\n-    node: &SyntaxNode,\n-    root: &SyntaxNode,\n-    name_kind: NameKind,\n-) -> &'static str {\n+fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n         Macro(_) => \"macro\",\n         Field(_) => \"field\",\n@@ -260,14 +224,15 @@ fn highlight_name(\n         Def(hir::ModuleDef::TypeAlias(_)) => \"type\",\n         Def(hir::ModuleDef::BuiltinType(_)) => \"type\",\n         SelfType(_) => \"type\",\n-        SelfParam(_) => \"type\",\n         GenericParam(_) => \"type\",\n-        Pat((_, ptr)) => {\n-            let analyzer = hir::SourceAnalyzer::new(db, file_id, node, None);\n-            if is_variable_mutable(db, &analyzer, ptr.to_node(&root)) {\n+        Local(local) => {\n+            if local.is_mut(db) {\n                 \"variable.mut\"\n             } else {\n-                \"variable\"\n+                match local.ty(db).as_reference() {\n+                    Some((_, Mutability::Mut)) => \"variable.mut\",\n+                    _ => \"variable\",\n+                }\n             }\n         }\n     }"}]}