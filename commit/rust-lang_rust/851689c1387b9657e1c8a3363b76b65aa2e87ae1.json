{"sha": "851689c1387b9657e1c8a3363b76b65aa2e87ae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MTY4OWMxMzg3Yjk2NTdlMWM4YTMzNjNiNzZiNjVhYTJlODdhZTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-27T12:32:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-27T12:32:31Z"}, "message": "Rollup merge of #58749 - kenta7777:reduce-repetition, r=oli-obk\n\nReduce Repetitions of (n << amt) >> amt\n\nFixes part of [#49937](https://github.com/rust-lang/rust/issues/49937).", "tree": {"sha": "d520f8a928a0e7acf8a4944cab3eec444e71d6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d520f8a928a0e7acf8a4944cab3eec444e71d6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/851689c1387b9657e1c8a3363b76b65aa2e87ae1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcdoNgCRBK7hj4Ov3rIwAAdHIIAAZ1WEFi/vgykcPW9cuUTUPd\nr0OQqyPQrsRdmqb/n3Y1MIRbmw+g3BWAq7zGGijicLEJMpmXJCY63ySPK4v6TNEC\nMLwXbdgIeWD9Zhd5LkrnsJ3O9TQNp1/IM0wVd/cfr4fmMsPW328ss2I0m9kDRJd6\ngH3jX4h8t16ODNcQoOdB1JefDZuj+YIfboKc9+f1yWYWG8Vo85wJ9dpij/vpeYp+\n9xJZr9UvVhSbALTN9YhgcDKDjWyQ9vgEXmjFqXeSZsu3LAAoi0+/r2Ulc8+PlCo7\nQ9LNyHZ6f19cATSfseDi0HOuE+4fxoPJT0pUEAt5THCbAkYCD3V2vBLyMIvXbUs=\n=Baid\n-----END PGP SIGNATURE-----\n", "payload": "tree d520f8a928a0e7acf8a4944cab3eec444e71d6dc\nparent a20c2fdd4784992d7ce23d7d78df6a1b4143941b\nparent 992694ac4dcbc93ca249fbb9f148cc586f1d384d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1551270751 +0100\ncommitter GitHub <noreply@github.com> 1551270751 +0100\n\nRollup merge of #58749 - kenta7777:reduce-repetition, r=oli-obk\n\nReduce Repetitions of (n << amt) >> amt\n\nFixes part of [#49937](https://github.com/rust-lang/rust/issues/49937).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/851689c1387b9657e1c8a3363b76b65aa2e87ae1", "html_url": "https://github.com/rust-lang/rust/commit/851689c1387b9657e1c8a3363b76b65aa2e87ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/851689c1387b9657e1c8a3363b76b65aa2e87ae1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a20c2fdd4784992d7ce23d7d78df6a1b4143941b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a20c2fdd4784992d7ce23d7d78df6a1b4143941b", "html_url": "https://github.com/rust-lang/rust/commit/a20c2fdd4784992d7ce23d7d78df6a1b4143941b"}, {"sha": "992694ac4dcbc93ca249fbb9f148cc586f1d384d", "url": "https://api.github.com/repos/rust-lang/rust/commits/992694ac4dcbc93ca249fbb9f148cc586f1d384d", "html_url": "https://github.com/rust-lang/rust/commit/992694ac4dcbc93ca249fbb9f148cc586f1d384d"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "4ad3ffaa93da4f41685391e2cd138b519e2a9549", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/851689c1387b9657e1c8a3363b76b65aa2e87ae1/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851689c1387b9657e1c8a3363b76b65aa2e87ae1/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=851689c1387b9657e1c8a3363b76b65aa2e87ae1", "patch": "@@ -4,6 +4,7 @@ use crate::hir::def::Def;\n use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathData;\n use crate::hir::{self, Node};\n+use crate::mir::interpret::{sign_extend, truncate};\n use crate::ich::NodeIdHashingMode;\n use crate::traits::{self, ObligationCause};\n use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n@@ -32,12 +33,12 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.ty.sty {\n             ty::Int(ity) => {\n-                let bits = ty::tls::with(|tcx| {\n-                    Integer::from_attr(&tcx, SignedInt(ity)).size().bits()\n+                let size = ty::tls::with(|tcx| {\n+                    Integer::from_attr(&tcx, SignedInt(ity)).size()\n                 });\n-                let x = self.val as i128;\n+                let x = self.val;\n                 // sign extend the raw representation to be an i128\n-                let x = (x << (128 - bits)) >> (128 - bits);\n+                let x = sign_extend(x, size) as i128;\n                 write!(fmt, \"{}\", x)\n             },\n             _ => write!(fmt, \"{}\", self.val),\n@@ -57,12 +58,12 @@ impl<'tcx> Discr<'tcx> {\n             _ => bug!(\"non integer discriminant\"),\n         };\n \n+        let size = int.size();\n         let bit_size = int.size().bits();\n         let shift = 128 - bit_size;\n         if signed {\n             let sext = |u| {\n-                let i = u as i128;\n-                (i << shift) >> shift\n+                sign_extend(u, size) as i128\n             };\n             let min = sext(1_u128 << (bit_size - 1));\n             let max = i128::max_value() >> shift;\n@@ -77,7 +78,7 @@ impl<'tcx> Discr<'tcx> {\n             };\n             // zero the upper bits\n             let val = val as u128;\n-            let val = (val << shift) >> shift;\n+            let val = truncate(val, size);\n             (Self {\n                 val: val as u128,\n                 ty: self.ty,"}]}