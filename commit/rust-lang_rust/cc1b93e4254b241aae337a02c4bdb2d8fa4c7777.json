{"sha": "cc1b93e4254b241aae337a02c4bdb2d8fa4c7777", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMWI5M2U0MjU0YjI0MWFhZTMzN2EwMmM0YmRiMmQ4ZmE0Yzc3Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-27T18:11:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-27T18:11:48Z"}, "message": "auto merge of #11158 : alexcrichton/rust/green-bootstrap-task, r=pcwalton\n\nCloses #11054", "tree": {"sha": "5cb2541c4c657a29a7a4058436210fcc26eea21a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb2541c4c657a29a7a4058436210fcc26eea21a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777", "html_url": "https://github.com/rust-lang/rust/commit/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00d87e0d8198ffb268251b5af2eb2ce19249c7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d87e0d8198ffb268251b5af2eb2ce19249c7f8", "html_url": "https://github.com/rust-lang/rust/commit/00d87e0d8198ffb268251b5af2eb2ce19249c7f8"}, {"sha": "3c4eb2b1d1e1dbebe42a9a93bd23b7eab8dc0f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4eb2b1d1e1dbebe42a9a93bd23b7eab8dc0f0f", "html_url": "https://github.com/rust-lang/rust/commit/3c4eb2b1d1e1dbebe42a9a93bd23b7eab8dc0f0f"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "9fdb8175e5c4cee8121ea4bd38f47a6cbc584ac0", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=cc1b93e4254b241aae337a02c4bdb2d8fa4c7777", "patch": "@@ -214,11 +214,7 @@ impl SchedPool {\n             pool.handles.push(sched.make_handle());\n             let sched = sched;\n             pool.threads.push(do Thread::start {\n-                let mut sched = sched;\n-                let task = do GreenTask::new(&mut sched.stack_pool, None) {\n-                    rtdebug!(\"boostraping a non-primary scheduler\");\n-                };\n-                sched.bootstrap(task);\n+                sched.bootstrap();\n             });\n         }\n \n@@ -270,13 +266,7 @@ impl SchedPool {\n         let ret = sched.make_handle();\n         self.handles.push(sched.make_handle());\n         let sched = sched;\n-        self.threads.push(do Thread::start {\n-            let mut sched = sched;\n-            let task = do GreenTask::new(&mut sched.stack_pool, None) {\n-                rtdebug!(\"boostraping a non-primary scheduler\");\n-            };\n-            sched.bootstrap(task);\n-        });\n+        self.threads.push(do Thread::start { sched.bootstrap() });\n \n         return ret;\n     }"}, {"sha": "b63c3d92da3eeadc1a5ce6e21993944a57dbd7d8", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1b93e4254b241aae337a02c4bdb2d8fa4c7777/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=cc1b93e4254b241aae337a02c4bdb2d8fa4c7777", "patch": "@@ -171,7 +171,7 @@ impl Scheduler {\n \n     // Take a main task to run, and a scheduler to run it in. Create a\n     // scheduler task and bootstrap into it.\n-    pub fn bootstrap(mut ~self, task: ~GreenTask) {\n+    pub fn bootstrap(mut ~self) {\n \n         // Build an Idle callback.\n         let cb = ~SchedRunner as ~Callback;\n@@ -187,18 +187,11 @@ impl Scheduler {\n         self.idle_callback.get_mut_ref().resume();\n \n         // Now, as far as all the scheduler state is concerned, we are inside\n-        // the \"scheduler\" context. So we can act like the scheduler and resume\n-        // the provided task. Let it think that the currently running task is\n-        // actually the sched_task so it knows where to squirrel it away.\n-        let mut sched_task = self.resume_task_immediately(sched_task, task);\n-\n-        // Now we are back in the scheduler context, having\n-        // successfully run the input task. Start by running the\n-        // scheduler. Grab it out of TLS - performing the scheduler\n-        // action will have given it away.\n-        let sched = sched_task.sched.take_unwrap();\n-        rtdebug!(\"starting scheduler {}\", sched.sched_id());\n-        let mut sched_task = sched.run(sched_task);\n+        // the \"scheduler\" context. The scheduler immediately hands over control\n+        // to the event loop, and this will only exit once the event loop no\n+        // longer has any references (handles or I/O objects).\n+        rtdebug!(\"starting scheduler {}\", self.sched_id());\n+        let mut sched_task = self.run(sched_task);\n \n         // Close the idle callback.\n         let mut sched = sched_task.sched.take_unwrap();\n@@ -548,7 +541,10 @@ impl Scheduler {\n         // We push the task onto our local queue clone.\n         assert!(!task.is_sched());\n         self.work_queue.push(task);\n-        self.idle_callback.get_mut_ref().resume();\n+        match self.idle_callback {\n+            Some(ref mut idle) => idle.resume(),\n+            None => {} // allow enqueuing before the scheduler starts\n+        }\n \n         // We've made work available. Notify a\n         // sleeping scheduler.\n@@ -1176,25 +1172,21 @@ mod test {\n                 let mut sh = special_handle;\n                 sh.send(Shutdown);\n             };\n-\n+            normal_sched.enqueue_task(normal_task);\n \n             let special_task = do GreenTask::new(&mut special_sched.stack_pool,\n                                                  None) {\n                 run(task1);\n                 run(task3);\n                 chan.send(());\n             };\n-\n+            special_sched.enqueue_task(special_task);\n \n             let normal_sched = normal_sched;\n-            let normal_thread = do Thread::start {\n-                normal_sched.bootstrap(normal_task);\n-            };\n+            let normal_thread = do Thread::start { normal_sched.bootstrap() };\n \n             let special_sched = special_sched;\n-            let special_thread = do Thread::start {\n-                special_sched.bootstrap(special_task);\n-            };\n+            let special_thread = do Thread::start { special_sched.bootstrap() };\n \n             normal_thread.join();\n             special_thread.join();"}]}