{"sha": "d215411911c2f6e5a68a12686c930352f68d2031", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMTU0MTE5MTFjMmY2ZTVhNjhhMTI2ODZjOTMwMzUyZjY4ZDIwMzE=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-18T00:49:16Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:26Z"}, "message": "Make Send/Sync go through the default implementation path", "tree": {"sha": "f47b729649ea48f3bd112d4fc088106a93b396aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f47b729649ea48f3bd112d4fc088106a93b396aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d215411911c2f6e5a68a12686c930352f68d2031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d215411911c2f6e5a68a12686c930352f68d2031", "html_url": "https://github.com/rust-lang/rust/commit/d215411911c2f6e5a68a12686c930352f68d2031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d215411911c2f6e5a68a12686c930352f68d2031/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3ed61d8273377544e40bdbbdf8391b51571293", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3ed61d8273377544e40bdbbdf8391b51571293", "html_url": "https://github.com/rust-lang/rust/commit/1e3ed61d8273377544e40bdbbdf8391b51571293"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "6462f3830a11cee39d82a82682f66709b0ac79f9", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d215411911c2f6e5a68a12686c930352f68d2031/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d215411911c2f6e5a68a12686c930352f68d2031/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=d215411911c2f6e5a68a12686c930352f68d2031", "patch": "@@ -824,24 +824,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                                             stack,\n                                                             &mut candidates));\n             }\n-            Some(bound @ ty::BoundSend) |\n-            Some(bound @ ty::BoundSync) => {\n-                // Ideally, we shouldn't sepcial case Send/Sync. This will be unified\n-                // as soon as default trait implementations for these traits land.\n-                try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n-\n-                // No explicit impls were declared for this type, consider the fallback rules.\n-                if candidates.vec.is_empty() && !candidates.ambiguous {\n-                    try!(self.assemble_builtin_bound_candidates(bound, stack, &mut candidates));\n-                }\n-            }\n-\n             Some(bound @ ty::BoundSized) => {\n                 // Sized and Copy are always automatically computed.\n                 try!(self.assemble_builtin_bound_candidates(bound, stack, &mut candidates));\n             }\n \n-            None => {\n+            _ => {\n                 // For the time being, we ignore user-defined impls for builtin-bounds, other than\n                 // `Copy`.\n                 // (And unboxed candidates only apply to the Fn/FnMut/etc traits.)\n@@ -1149,8 +1137,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             });\n         }\n \n-        if ty::trait_has_default_impl(self.tcx(), def_id) {\n-            candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n+        match self_ty.sty {\n+            ty::ty_infer(ty::TyVar(_)) |\n+            ty::ty_trait(..) => {},\n+            _ => {\n+                if ty::trait_has_default_impl(self.tcx(), def_id) {\n+                    candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n+                }\n+            }\n         }\n \n         Ok(())\n@@ -1179,6 +1173,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let poly_trait_ref = match self_ty.sty {\n             ty::ty_trait(ref data) => {\n+                match self.tcx().lang_items.to_builtin_kind(obligation.predicate.def_id()) {\n+                    Some(bound @ ty::BoundSend) | Some(bound @ ty::BoundSync) => {\n+                        if data.bounds.builtin_bounds.contains(&bound) {\n+                            debug!(\"assemble_candidates_from_object_ty: matched builtin bound, \\\n+                            pushing candidate\");\n+                            candidates.vec.push(BuiltinCandidate(bound));\n+                            return;\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+\n                 data.principal_trait_ref_with_self_ty(self.tcx(), self_ty)\n             }\n             ty::ty_infer(ty::TyVar(_)) => {\n@@ -1622,13 +1628,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::ty_bare_fn(..) |\n             ty::ty_str |\n             ty::ty_err |\n+            ty::ty_param(..) |\n             ty::ty_char => {\n                 Vec::new()\n             }\n \n             ty::ty_trait(..) |\n             ty::ty_projection(..) |\n-            ty::ty_param(..) |\n             ty::ty_infer(..) => {\n                 self.tcx().sess.bug(\n                     &format!("}, {"sha": "3f8e283b20970263f5909f5a324aff622d714f47", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d215411911c2f6e5a68a12686c930352f68d2031/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d215411911c2f6e5a68a12686c930352f68d2031/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d215411911c2f6e5a68a12686c930352f68d2031", "patch": "@@ -6007,7 +6007,10 @@ pub fn trait_default_impl(tcx: &ctxt, trait_def_id: DefId) -> Option<ast::DefId>\n }\n \n pub fn trait_has_default_impl(tcx: &ctxt, trait_def_id: DefId) -> bool {\n-    tcx.default_trait_impls.borrow().contains_key(&trait_def_id)\n+    match tcx.lang_items.to_builtin_kind(trait_def_id) {\n+        Some(BoundSend) | Some(BoundSync) => true,\n+        _ => tcx.default_trait_impls.borrow().contains_key(&trait_def_id)\n+    }\n }\n \n /// Records a trait-to-implementation mapping."}, {"sha": "bd1c8e1ba12ca258f468b0b4889effa04b65f533", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d215411911c2f6e5a68a12686c930352f68d2031/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d215411911c2f6e5a68a12686c930352f68d2031/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d215411911c2f6e5a68a12686c930352f68d2031", "patch": "@@ -2989,7 +2989,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 // check for imports shadowing primitive types\n                 if let ast::ViewPathSimple(ident, _) = view_path.node {\n                     match self.def_map.borrow().get(&item.id) {\n-                        Some(&DefTy(..)) | Some(&DefStruct(..)) | Some(&DefTrait(..)) | None => {\n+                        Some(&DefTy(..)) | Some(&DefStruct(..)) | Some(&DefaultImpl(..)) | None => {\n                             self.check_if_primitive_type_name(ident.name, item.span);\n                         }\n                         _ => {}"}]}