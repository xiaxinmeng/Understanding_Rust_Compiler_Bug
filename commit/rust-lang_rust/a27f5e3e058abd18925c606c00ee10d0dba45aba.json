{"sha": "a27f5e3e058abd18925c606c00ee10d0dba45aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyN2Y1ZTNlMDU4YWJkMTg5MjVjNjA2YzAwZWUxMGQwZGJhNDVhYmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-23T11:55:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T11:55:26Z"}, "message": "Merge #3632\n\n3632: ra_cargo_watch: log errors r=matklad a=Veetaha\n\nUntil this moment we totally ignored all the errors from cargo process. Though this is still true, but we\r\nnow try to log ones that are critical (i.e. misconfiguration errors and ignore compile errors).\r\n\r\nThis fixes #3631, and gives us a better error message to more gracefully handle the #3265\r\n![image](https://user-images.githubusercontent.com/36276403/76958683-d7e1f080-6920-11ea-83d8-04561c11ccc4.png)\r\n\r\nThough I think that outputting this only to `Output` channel is not enough. We should somehow warn the user that he passed wrong arguments to `cargo-watch.args`. I didn't bother looking for how to do this now, but this PR at least gives us something.\r\n\r\n*cc* @kiljacken @matklad \n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "7d431f92de44991eeb84424850489bf15bdaaa3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d431f92de44991eeb84424850489bf15bdaaa3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a27f5e3e058abd18925c606c00ee10d0dba45aba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeKOuCRBK7hj4Ov3rIwAAdHIIAIg45U8lyK0BxUxuf2ZkrWnw\nnhSnn6rKbEp6TIiEtoZtZ7kPvqqisUx5/DaCuZR0Ia4qLuTF6NjlfFCRHUk0C6A/\nOYusig9xBLZLilXRqrqE6anPp4cQpf2owYS+trnE/6POtb+7M+Jbf9uwfjYFdEJl\nFnBupmCmixSHBXI4MxyMPT9cF3cTXi+60m90Q+mQurEqzHuPr6Y2qDAeTY5HyIib\nKQyZ7Htd926s1NTg+4Cuz0vEFxHrrIwQHdjC9AY33NkSpUH1boKf9zlxbgK8AEv/\n8meiO5BDZD8sjX9tmOxiSdgFp1ptTMucw3yPgLLMR58G10Zj1lzgZK7om6RiXtc=\n=UwOU\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d431f92de44991eeb84424850489bf15bdaaa3b\nparent c7a2052e7302a5ff6c05aa2589ef3ff51a9e7c95\nparent 8be28a2d4f1fa1593bab81e32e465dba35b99448\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584964526 +0000\ncommitter GitHub <noreply@github.com> 1584964526 +0000\n\nMerge #3632\n\n3632: ra_cargo_watch: log errors r=matklad a=Veetaha\n\nUntil this moment we totally ignored all the errors from cargo process. Though this is still true, but we\r\nnow try to log ones that are critical (i.e. misconfiguration errors and ignore compile errors).\r\n\r\nThis fixes #3631, and gives us a better error message to more gracefully handle the #3265\r\n![image](https://user-images.githubusercontent.com/36276403/76958683-d7e1f080-6920-11ea-83d8-04561c11ccc4.png)\r\n\r\nThough I think that outputting this only to `Output` channel is not enough. We should somehow warn the user that he passed wrong arguments to `cargo-watch.args`. I didn't bother looking for how to do this now, but this PR at least gives us something.\r\n\r\n*cc* @kiljacken @matklad \n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a27f5e3e058abd18925c606c00ee10d0dba45aba", "html_url": "https://github.com/rust-lang/rust/commit/a27f5e3e058abd18925c606c00ee10d0dba45aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a27f5e3e058abd18925c606c00ee10d0dba45aba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a2052e7302a5ff6c05aa2589ef3ff51a9e7c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a2052e7302a5ff6c05aa2589ef3ff51a9e7c95", "html_url": "https://github.com/rust-lang/rust/commit/c7a2052e7302a5ff6c05aa2589ef3ff51a9e7c95"}, {"sha": "8be28a2d4f1fa1593bab81e32e465dba35b99448", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be28a2d4f1fa1593bab81e32e465dba35b99448", "html_url": "https://github.com/rust-lang/rust/commit/8be28a2d4f1fa1593bab81e32e465dba35b99448"}], "stats": {"total": 94, "additions": 59, "deletions": 35}, "files": [{"sha": "7c525c4300392dd60acb3f10bde969d2d6ab20ae", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a27f5e3e058abd18925c606c00ee10d0dba45aba/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f5e3e058abd18925c606c00ee10d0dba45aba/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=a27f5e3e058abd18925c606c00ee10d0dba45aba", "patch": "@@ -8,9 +8,10 @@ use lsp_types::{\n     WorkDoneProgressEnd, WorkDoneProgressReport,\n };\n use std::{\n+    error, fmt,\n     io::{BufRead, BufReader},\n     path::{Path, PathBuf},\n-    process::{Child, Command, Stdio},\n+    process::{Command, Stdio},\n     thread::JoinHandle,\n     time::Instant,\n };\n@@ -70,10 +71,10 @@ impl std::ops::Drop for CheckWatcher {\n     fn drop(&mut self) {\n         if let Some(handle) = self.handle.take() {\n             // Take the sender out of the option\n-            let recv = self.cmd_send.take();\n+            let cmd_send = self.cmd_send.take();\n \n             // Dropping the sender finishes the thread loop\n-            drop(recv);\n+            drop(cmd_send);\n \n             // Join the thread, it should finish shortly. We don't really care\n             // whether it panicked, so it is safe to ignore the result\n@@ -246,11 +247,21 @@ enum CheckEvent {\n     End,\n }\n \n+#[derive(Debug)]\n+pub struct CargoError(String);\n+\n+impl fmt::Display for CargoError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Cargo failed: {}\", self.0)\n+    }\n+}\n+impl error::Error for CargoError {}\n+\n pub fn run_cargo(\n     args: &[String],\n     current_dir: Option<&Path>,\n     on_message: &mut dyn FnMut(cargo_metadata::Message) -> bool,\n-) -> Child {\n+) -> Result<(), CargoError> {\n     let mut command = Command::new(\"cargo\");\n     if let Some(current_dir) = current_dir {\n         command.current_dir(current_dir);\n@@ -273,6 +284,8 @@ pub fn run_cargo(\n     // simply skip a line if it doesn't parse, which just ignores any\n     // erroneus output.\n     let stdout = BufReader::new(child.stdout.take().unwrap());\n+    let mut read_at_least_one_message = false;\n+\n     for line in stdout.lines() {\n         let line = match line {\n             Ok(line) => line,\n@@ -291,12 +304,31 @@ pub fn run_cargo(\n             }\n         };\n \n+        read_at_least_one_message = true;\n+\n         if !on_message(message) {\n             break;\n         }\n     }\n \n-    child\n+    // It is okay to ignore the result, as it only errors if the process is already dead\n+    let _ = child.kill();\n+\n+    let err_msg = match child.wait() {\n+        Ok(exit_code) if !exit_code.success() && !read_at_least_one_message => {\n+            // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n+            // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n+            format!(\n+                \"the command produced no valid metadata (exit code: {:?}): cargo {}\",\n+                exit_code,\n+                args.join(\" \")\n+            )\n+        }\n+        Err(err) => format!(\"io error: {:?}\", err),\n+        Ok(_) => return Ok(()),\n+    };\n+\n+    Err(CargoError(err_msg))\n }\n \n impl WatchThread {\n@@ -325,7 +357,7 @@ impl WatchThread {\n                 // which will break out of the loop, and continue the shutdown\n                 let _ = message_send.send(CheckEvent::Begin);\n \n-                let mut child = run_cargo(&args, Some(&workspace_root), &mut |message| {\n+                let res = run_cargo(&args, Some(&workspace_root), &mut |message| {\n                     // Skip certain kinds of messages to only spend time on what's useful\n                     match &message {\n                         Message::CompilerArtifact(artifact) if artifact.fresh => return true,\n@@ -334,26 +366,19 @@ impl WatchThread {\n                         _ => {}\n                     }\n \n-                    match message_send.send(CheckEvent::Msg(message)) {\n-                        Ok(()) => {}\n-                        Err(_err) => {\n-                            // The send channel was closed, so we want to shutdown\n-                            return false;\n-                        }\n-                    };\n-\n-                    true\n+                    // if the send channel was closed, we want to shutdown\n+                    message_send.send(CheckEvent::Msg(message)).is_ok()\n                 });\n \n+                if let Err(err) = res {\n+                    // FIXME: make the `message_send` to be `Sender<Result<CheckEvent, CargoError>>`\n+                    // to display user-caused misconfiguration errors instead of just logging them here\n+                    log::error!(\"Cargo watcher failed {:?}\", err);\n+                }\n+\n                 // We can ignore any error here, as we are already in the progress\n                 // of shutting down.\n                 let _ = message_send.send(CheckEvent::End);\n-\n-                // It is okay to ignore the result, as it only errors if the process is already dead\n-                let _ = child.kill();\n-\n-                // Again, we don't care about the exit status so just ignore the result\n-                let _ = child.wait();\n             }))\n         } else {\n             None"}, {"sha": "c7f9bd873e4d9b17080fcb469b6c6789254d6a99", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a27f5e3e058abd18925c606c00ee10d0dba45aba/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f5e3e058abd18925c606c00ee10d0dba45aba/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=a27f5e3e058abd18925c606c00ee10d0dba45aba", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use anyhow::{Context, Result};\n-use cargo_metadata::{CargoOpt, Message, MetadataCommand, PackageId};\n+use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId};\n use ra_arena::{Arena, Idx};\n use ra_cargo_watch::run_cargo;\n use ra_db::Edition;\n@@ -254,7 +254,7 @@ pub fn load_out_dirs(\n         \"check\".to_string(),\n         \"--message-format=json\".to_string(),\n         \"--manifest-path\".to_string(),\n-        format!(\"{}\", cargo_toml.display()),\n+        cargo_toml.display().to_string(),\n     ];\n \n     if cargo_features.all_features {\n@@ -263,19 +263,15 @@ pub fn load_out_dirs(\n         // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n         // https://github.com/oli-obk/cargo_metadata/issues/79\n         args.push(\"--no-default-features\".to_string());\n-    } else if !cargo_features.features.is_empty() {\n-        for feature in &cargo_features.features {\n-            args.push(feature.clone());\n-        }\n+    } else {\n+        args.extend(cargo_features.features.iter().cloned());\n     }\n \n-    let mut res = FxHashMap::default();\n-    let mut child = run_cargo(&args, cargo_toml.parent(), &mut |message| {\n+    let mut acc = FxHashMap::default();\n+    let res = run_cargo(&args, cargo_toml.parent(), &mut |message| {\n         match message {\n-            Message::BuildScriptExecuted(message) => {\n-                let package_id = message.package_id;\n-                let out_dir = message.out_dir;\n-                res.insert(package_id, out_dir);\n+            Message::BuildScriptExecuted(BuildScript { package_id, out_dir, .. }) => {\n+                acc.insert(package_id, out_dir);\n             }\n \n             Message::CompilerArtifact(_) => (),\n@@ -285,6 +281,9 @@ pub fn load_out_dirs(\n         true\n     });\n \n-    let _ = child.wait();\n-    res\n+    if let Err(err) = res {\n+        log::error!(\"Failed to load outdirs: {:?}\", err);\n+    }\n+\n+    acc\n }"}]}