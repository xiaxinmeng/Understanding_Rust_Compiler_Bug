{"sha": "b8b52d61f3465546eeba9f69fe49b3d2945b1fbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YjUyZDYxZjM0NjU1NDZlZWJhOWY2OWZlNDliM2QyOTQ1YjFmYmU=", "commit": {"author": {"name": "Carol Nichols", "email": "carol.nichols@gmail.com", "date": "2015-01-24T21:55:38Z"}, "committer": {"name": "Carol Nichols", "email": "carol.nichols@gmail.com", "date": "2015-01-27T02:09:50Z"}, "message": "Add examples to documentation of SliceExt methods", "tree": {"sha": "2fdd0b6539481ec64990f551603d13a0002d55e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fdd0b6539481ec64990f551603d13a0002d55e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8b52d61f3465546eeba9f69fe49b3d2945b1fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b52d61f3465546eeba9f69fe49b3d2945b1fbe", "html_url": "https://github.com/rust-lang/rust/commit/b8b52d61f3465546eeba9f69fe49b3d2945b1fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8b52d61f3465546eeba9f69fe49b3d2945b1fbe/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec3a833d5082a77e74a30c2d3d353ba7f5df644", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec3a833d5082a77e74a30c2d3d353ba7f5df644", "html_url": "https://github.com/rust-lang/rust/commit/8ec3a833d5082a77e74a30c2d3d353ba7f5df644"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "5534605074ab1b67fa3356dffcd9611f40db2815", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 104, "deletions": 3, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b8b52d61f3465546eeba9f69fe49b3d2945b1fbe/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b52d61f3465546eeba9f69fe49b3d2945b1fbe/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b8b52d61f3465546eeba9f69fe49b3d2945b1fbe", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -188,22 +188,55 @@ pub trait SliceExt {\n     /// indices from `[mid, len)` (excluding the index `len` itself).\n     ///\n     /// Panics if `mid > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 50];\n+    /// let (v1, v2) = v.split_at(2);\n+    /// assert_eq!([10, 40], v1);\n+    /// assert_eq!([30, 20, 50], v2);\n+    /// ```\n     #[stable]\n     fn split_at(&self, mid: uint) -> (&[Self::Item], &[Self::Item]);\n \n-    /// Returns an iterator over the slice\n+    /// Returns an iterator over the slice.\n     #[stable]\n     fn iter(&self) -> Iter<Self::Item>;\n \n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred`.  The matched element is not contained in the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Print the slice split by numbers divisible by 3 (i.e. `[10, 40]`,\n+    /// `[20]`, `[50]`):\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 60, 50];\n+    /// for group in v.split(|num| *num % 3 == 0) {\n+    ///     println!(\"{:?}\", group);\n+    /// }\n+    /// ```\n     #[stable]\n     fn split<F>(&self, pred: F) -> Split<Self::Item, F>\n                 where F: FnMut(&Self::Item) -> bool;\n \n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred`, limited to splitting at most `n` times.  The matched element is\n     /// not contained in the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Print the slice split once by numbers divisible by 3 (i.e. `[10, 40]`,\n+    /// `[20, 60, 50]`):\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 60, 50];\n+    /// for group in v.splitn(1, |num| *num % 3 == 0) {\n+    ///     println!(\"{:?}\", group);\n+    /// }\n+    /// ```\n     #[stable]\n     fn splitn<F>(&self, n: uint, pred: F) -> SplitN<Self::Item, F>\n                  where F: FnMut(&Self::Item) -> bool;\n@@ -212,6 +245,18 @@ pub trait SliceExt {\n     /// `pred` limited to splitting at most `n` times. This starts at the end of\n     /// the slice and works backwards.  The matched element is not contained in\n     /// the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Print the slice split once, starting from the end, by numbers divisible\n+    /// by 3 (i.e. `[50]`, `[10, 40, 30, 20]`):\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 60, 50];\n+    /// for group in v.rsplitn(1, |num| *num % 3 == 0) {\n+    ///     println!(\"{:?}\", group);\n+    /// }\n+    /// ```\n     #[stable]\n     fn rsplitn<F>(&self, n: uint, pred: F) -> RSplitN<Self::Item, F>\n                   where F: FnMut(&Self::Item) -> bool;\n@@ -263,10 +308,28 @@ pub trait SliceExt {\n \n     /// Returns the element of a slice at the given index, or `None` if the\n     /// index is out of bounds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert_eq!(Some(&40), v.get(1));\n+    /// assert_eq!(None, v.get(3));\n+    /// ```\n     #[stable]\n     fn get(&self, index: uint) -> Option<&Self::Item>;\n \n     /// Returns the first element of a slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert_eq!(Some(&10), v.first());\n+    ///\n+    /// let w: &[i32] = &[];\n+    /// assert_eq!(None, w.first());\n+    /// ```\n     #[stable]\n     fn first(&self) -> Option<&Self::Item>;\n \n@@ -279,6 +342,16 @@ pub trait SliceExt {\n     fn init(&self) -> &[Self::Item];\n \n     /// Returns the last element of a slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert_eq!(Some(&30), v.last());\n+    ///\n+    /// let w: &[i32] = &[];\n+    /// assert_eq!(None, w.last());\n+    /// ```\n     #[stable]\n     fn last(&self) -> Option<&Self::Item>;\n \n@@ -658,15 +731,43 @@ pub trait SliceExt {\n     #[unstable]\n     fn rposition_elem(&self, t: &Self::Item) -> Option<uint> where Self::Item: PartialEq;\n \n-    /// Return true if the slice contains an element with the given value.\n+    /// Returns true if the slice contains an element with the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert!(v.contains(&30));\n+    /// assert!(!v.contains(&50));\n+    /// ```\n     #[stable]\n     fn contains(&self, x: &Self::Item) -> bool where Self::Item: PartialEq;\n \n     /// Returns true if `needle` is a prefix of the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert!(v.starts_with(&[10]));\n+    /// assert!(v.starts_with(&[10, 40]));\n+    /// assert!(!v.starts_with(&[50]));\n+    /// assert!(!v.starts_with(&[10, 50]));\n+    /// ```\n     #[stable]\n     fn starts_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n     /// Returns true if `needle` is a suffix of the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert!(v.ends_with(&[30]));\n+    /// assert!(v.ends_with(&[40, 30]));\n+    /// assert!(!v.ends_with(&[50]));\n+    /// assert!(!v.ends_with(&[50, 30]));\n+    /// ```\n     #[stable]\n     fn ends_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n "}]}