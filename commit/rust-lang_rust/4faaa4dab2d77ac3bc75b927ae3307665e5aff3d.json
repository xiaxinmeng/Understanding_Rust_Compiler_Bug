{"sha": "4faaa4dab2d77ac3bc75b927ae3307665e5aff3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYWFhNGRhYjJkNzdhYzNiYzc1YjkyN2FlMzMwNzY2NWU1YWZmM2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T06:10:43Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T06:10:43Z"}, "message": "minor reformatting", "tree": {"sha": "fdb3612c62483874b74b74ca96152b5b61dcc531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdb3612c62483874b74b74ca96152b5b61dcc531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d", "html_url": "https://github.com/rust-lang/rust/commit/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28d90bc439f86ddf8a97133982986296271f4a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/28d90bc439f86ddf8a97133982986296271f4a35", "html_url": "https://github.com/rust-lang/rust/commit/28d90bc439f86ddf8a97133982986296271f4a35"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "32ad65befe78872d311ec4fe139a3c0bfad4d19f", "filename": "src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=4faaa4dab2d77ac3bc75b927ae3307665e5aff3d", "patch": "@@ -195,7 +195,7 @@ impl<'a> FmtVisitor<'a> {\n         write_list(&arg_strs, &fmt)\n     }\n \n-    // Gets comments in between items of a list. \n+    // Gets comments in between items of a list.\n     fn make_comments_for_list<T, I, F1, F2>(&self,\n                                             prefix: Vec<String>,\n                                             mut it: I,\n@@ -228,7 +228,7 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME If you thought the crap with the commas was ugly, just wait.\n         // This is awful. We're going to look from the last item span to the\n         // start of the return type span, then we drop everything after the\n-        // first closing paren. Obviously, this will break if there is a \n+        // first closing paren. Obviously, this will break if there is a\n         // closing paren in the comment.\n         // The fix is comments in the AST or a span for the closing paren.\n         let snippet = self.snippet(codemap::mk_sp(prev_end, next_span_start));\n@@ -406,7 +406,7 @@ impl<'a> FmtVisitor<'a> {\n             ast::FunctionRetTy::DefaultReturn(_) => String::new(),\n             ast::FunctionRetTy::NoReturn(_) => \"-> !\".to_string(),\n             ast::FunctionRetTy::Return(ref ty) => \"-> \".to_string() + &pprust::ty_to_string(ty),\n-        }        \n+        }\n     }\n \n     // TODO we farm this out, but this could spill over the column limit, so we ought to handle it properly"}, {"sha": "71ce9120fe1f29f23c3d984c77f2b8045885c43b", "filename": "src/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faaa4dab2d77ac3bc75b927ae3307665e5aff3d/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=4faaa4dab2d77ac3bc75b927ae3307665e5aff3d", "patch": "@@ -255,13 +255,13 @@ impl<'a> CompilerCalls<'a> for RustFmtCalls {\n \n fn run(args: Vec<String>, write_mode: WriteMode) {\n     let mut call_ctxt = RustFmtCalls { input_path: None, write_mode: write_mode };\n-    rustc_driver::run_compiler(&args, &mut call_ctxt);    \n+    rustc_driver::run_compiler(&args, &mut call_ctxt);\n }\n \n fn main() {\n     let args: Vec<_> = std::env::args().collect();\n-    //run(args, WriteMode::Display);\n-    run(args, WriteMode::NewFile(\"new\"));\n+    run(args, WriteMode::Display);\n+    //run(args, WriteMode::NewFile(\"new\"));\n     std::env::set_exit_status(0);\n \n     // TODO unit tests"}]}