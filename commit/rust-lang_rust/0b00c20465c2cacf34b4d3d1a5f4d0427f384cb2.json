{"sha": "0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMDBjMjA0NjVjMmNhY2YzNGI0ZDNkMWE1ZjRkMDQyN2YzODRjYjI=", "commit": {"author": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2020-03-26T12:14:25Z"}, "committer": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2020-03-26T12:14:25Z"}, "message": "Reorganize a bit the code and add a comment", "tree": {"sha": "3ed18661d76b5c53c07356f3bf57e4b0f44c7b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed18661d76b5c53c07356f3bf57e4b0f44c7b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2", "html_url": "https://github.com/rust-lang/rust/commit/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2/comments", "author": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb3e513a2cfdc01a35c5226c24b15200d635135e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3e513a2cfdc01a35c5226c24b15200d635135e", "html_url": "https://github.com/rust-lang/rust/commit/bb3e513a2cfdc01a35c5226c24b15200d635135e"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "dc34f076654755d0ba870b0f6f202f41d069b543", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2", "patch": "@@ -907,12 +907,18 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         let count = (niche_variants.end().as_u32()\n                             - niche_variants.start().as_u32()\n                             + 1) as u128;\n-                        if let Some((field_index, niche, (niche_start, niche_scalar))) = variants[i]\n+\n+                        // Find the field with the largest niche\n+                        let niche_candidate = variants[i]\n                             .iter()\n                             .enumerate()\n-                            .filter_map(|(i, &field)| Some((i, field.largest_niche.as_ref()?)))\n-                            .max_by_key(|(_, niche)| niche.available(dl))\n-                            .and_then(|(i, niche)| Some((i, niche, niche.reserve(self, count)?)))\n+                            .filter_map(|(j, &field)| Some((j, field.largest_niche.as_ref()?)))\n+                            .max_by_key(|(_, niche)| niche.available(dl));\n+\n+                        if let Some((field_index, niche, (niche_start, niche_scalar))) =\n+                            niche_candidate.and_then(|(field_index, niche)| {\n+                                Some((field_index, niche, niche.reserve(self, count)?))\n+                            })\n                         {\n                             let mut align = dl.aggregate_align;\n                             let st = variants"}]}