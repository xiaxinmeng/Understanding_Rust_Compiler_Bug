{"sha": "c2cbcd32299270487388442e3dc684619279ae6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyY2JjZDMyMjk5MjcwNDg3Mzg4NDQyZTNkYzY4NDYxOTI3OWFlNmI=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T02:22:17Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T02:22:17Z"}, "message": "Move cast_precision_loss to its own module", "tree": {"sha": "df70311ecbd92cc0e9d5f395da80a2774f5956e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df70311ecbd92cc0e9d5f395da80a2774f5956e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2cbcd32299270487388442e3dc684619279ae6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cbcd32299270487388442e3dc684619279ae6b", "html_url": "https://github.com/rust-lang/rust/commit/c2cbcd32299270487388442e3dc684619279ae6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2cbcd32299270487388442e3dc684619279ae6b/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360f0654047ef45212440e0cc9dcfe77c970b1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/360f0654047ef45212440e0cc9dcfe77c970b1eb", "html_url": "https://github.com/rust-lang/rust/commit/360f0654047ef45212440e0cc9dcfe77c970b1eb"}], "stats": {"total": 138, "additions": 83, "deletions": 55}, "files": [{"sha": "a1c3900ce1f6c0a8a27d2ec6566e39140bde6b37", "filename": "clippy_lints/src/casts/cast_precision_loss.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c2cbcd32299270487388442e3dc684619279ae6b/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cbcd32299270487388442e3dc684619279ae6b/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs?ref=c2cbcd32299270487388442e3dc684619279ae6b", "patch": "@@ -0,0 +1,51 @@\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, FloatTy, Ty};\n+\n+use crate::utils::{is_isize_or_usize, span_lint};\n+\n+use super::{utils, CAST_PRECISION_LOSS};\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    if !cast_from.is_integral() || cast_to.is_integral() {\n+        return;\n+    }\n+\n+    let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n+    let to_nbits = if let ty::Float(FloatTy::F32) = cast_to.kind() {\n+        32\n+    } else {\n+        64\n+    };\n+\n+    if !(is_isize_or_usize(cast_from) || from_nbits >= to_nbits) {\n+        return;\n+    }\n+\n+    let cast_to_f64 = to_nbits == 64;\n+    let mantissa_nbits = if cast_to_f64 { 52 } else { 23 };\n+    let arch_dependent = is_isize_or_usize(cast_from) && cast_to_f64;\n+    let arch_dependent_str = \"on targets with 64-bit wide pointers \";\n+    let from_nbits_str = if arch_dependent {\n+        \"64\".to_owned()\n+    } else if is_isize_or_usize(cast_from) {\n+        \"32 or 64\".to_owned()\n+    } else {\n+        utils::int_ty_to_nbits(cast_from, cx.tcx).to_string()\n+    };\n+\n+    span_lint(\n+        cx,\n+        CAST_PRECISION_LOSS,\n+        expr.span,\n+        &format!(\n+            \"casting `{0}` to `{1}` causes a loss of precision {2}(`{0}` is {3} bits wide, \\\n+             but `{1}`'s mantissa is only {4} bits wide)\",\n+            cast_from,\n+            if cast_to_f64 { \"f64\" } else { \"f32\" },\n+            if arch_dependent { arch_dependent_str } else { \"\" },\n+            from_nbits_str,\n+            mantissa_nbits\n+        ),\n+    );\n+}"}, {"sha": "7eb35aa829087f6bc8ad6cca7f23a6681dfde642", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 7, "deletions": 55, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c2cbcd32299270487388442e3dc684619279ae6b/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cbcd32299270487388442e3dc684619279ae6b/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=c2cbcd32299270487388442e3dc684619279ae6b", "patch": "@@ -1,3 +1,6 @@\n+mod cast_precision_loss;\n+mod utils;\n+\n use std::borrow::Cow;\n \n use if_chain::if_chain;\n@@ -6,7 +9,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, GenericArg, Lit, MutTy, Mutability, TyKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, FloatTy, InferTy, IntTy, Ty, TyCtxt, TypeAndMut, UintTy};\n+use rustc_middle::ty::{self, FloatTy, InferTy, Ty, TypeAndMut, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n@@ -20,6 +23,8 @@ use crate::utils::{\n     span_lint_and_then,\n };\n \n+use utils::int_ty_to_nbits;\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for casts from any numerical to a float type where\n     /// the receiving type cannot store all values from the original type without\n@@ -249,57 +254,6 @@ declare_clippy_lint! {\n     \"casting a function pointer to a numeric type not wide enough to store the address\"\n }\n \n-/// Returns the size in bits of an integral type.\n-/// Will return 0 if the type is not an int or uint variant\n-fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_>) -> u64 {\n-    match typ.kind() {\n-        ty::Int(i) => match i {\n-            IntTy::Isize => tcx.data_layout.pointer_size.bits(),\n-            IntTy::I8 => 8,\n-            IntTy::I16 => 16,\n-            IntTy::I32 => 32,\n-            IntTy::I64 => 64,\n-            IntTy::I128 => 128,\n-        },\n-        ty::Uint(i) => match i {\n-            UintTy::Usize => tcx.data_layout.pointer_size.bits(),\n-            UintTy::U8 => 8,\n-            UintTy::U16 => 16,\n-            UintTy::U32 => 32,\n-            UintTy::U64 => 64,\n-            UintTy::U128 => 128,\n-        },\n-        _ => 0,\n-    }\n-}\n-\n-fn span_precision_loss_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to_f64: bool) {\n-    let mantissa_nbits = if cast_to_f64 { 52 } else { 23 };\n-    let arch_dependent = is_isize_or_usize(cast_from) && cast_to_f64;\n-    let arch_dependent_str = \"on targets with 64-bit wide pointers \";\n-    let from_nbits_str = if arch_dependent {\n-        \"64\".to_owned()\n-    } else if is_isize_or_usize(cast_from) {\n-        \"32 or 64\".to_owned()\n-    } else {\n-        int_ty_to_nbits(cast_from, cx.tcx).to_string()\n-    };\n-    span_lint(\n-        cx,\n-        CAST_PRECISION_LOSS,\n-        expr.span,\n-        &format!(\n-            \"casting `{0}` to `{1}` causes a loss of precision {2}(`{0}` is {3} bits wide, \\\n-             but `{1}`'s mantissa is only {4} bits wide)\",\n-            cast_from,\n-            if cast_to_f64 { \"f64\" } else { \"f32\" },\n-            if arch_dependent { arch_dependent_str } else { \"\" },\n-            from_nbits_str,\n-            mantissa_nbits\n-        ),\n-    );\n-}\n-\n fn should_strip_parens(op: &Expr<'_>, snip: &str) -> bool {\n     if let ExprKind::Binary(_, _, _) = op.kind {\n         if snip.starts_with('(') && snip.ends_with(')') {\n@@ -629,6 +583,7 @@ fn lint_numeric_casts<'tcx>(\n     cast_from: Ty<'tcx>,\n     cast_to: Ty<'tcx>,\n ) {\n+    cast_precision_loss::check(cx, expr, cast_from, cast_to);\n     match (cast_from.is_integral(), cast_to.is_integral()) {\n         (true, false) => {\n             let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n@@ -637,9 +592,6 @@ fn lint_numeric_casts<'tcx>(\n             } else {\n                 64\n             };\n-            if is_isize_or_usize(cast_from) || from_nbits >= to_nbits {\n-                span_precision_loss_lint(cx, expr, cast_from, to_nbits == 64);\n-            }\n             if from_nbits < to_nbits {\n                 span_lossless_lint(cx, expr, cast_expr, cast_from, cast_to);\n             }"}, {"sha": "00fd0b3473b4417949097b5ebb34ba8c10144e60", "filename": "clippy_lints/src/casts/utils.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c2cbcd32299270487388442e3dc684619279ae6b/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cbcd32299270487388442e3dc684619279ae6b/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Futils.rs?ref=c2cbcd32299270487388442e3dc684619279ae6b", "patch": "@@ -0,0 +1,25 @@\n+use rustc_middle::ty::{self, IntTy, Ty, TyCtxt, UintTy};\n+\n+/// Returns the size in bits of an integral type.\n+/// Will return 0 if the type is not an int or uint variant\n+pub(super) fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_>) -> u64 {\n+    match typ.kind() {\n+        ty::Int(i) => match i {\n+            IntTy::Isize => tcx.data_layout.pointer_size.bits(),\n+            IntTy::I8 => 8,\n+            IntTy::I16 => 16,\n+            IntTy::I32 => 32,\n+            IntTy::I64 => 64,\n+            IntTy::I128 => 128,\n+        },\n+        ty::Uint(i) => match i {\n+            UintTy::Usize => tcx.data_layout.pointer_size.bits(),\n+            UintTy::U8 => 8,\n+            UintTy::U16 => 16,\n+            UintTy::U32 => 32,\n+            UintTy::U64 => 64,\n+            UintTy::U128 => 128,\n+        },\n+        _ => 0,\n+    }\n+}"}]}