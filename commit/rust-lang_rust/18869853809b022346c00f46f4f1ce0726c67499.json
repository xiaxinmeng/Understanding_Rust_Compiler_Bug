{"sha": "18869853809b022346c00f46f4f1ce0726c67499", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ODY5ODUzODA5YjAyMjM0NmMwMGY0NmY0ZjFjZTA3MjZjNjc0OTk=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-12-28T21:51:13Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-12-31T01:08:38Z"}, "message": "[const-prop] Clean up `check_cast()` a bit", "tree": {"sha": "ccf4f9bcf858ac346ec2e4c1bd44310ecf14c836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf4f9bcf858ac346ec2e4c1bd44310ecf14c836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18869853809b022346c00f46f4f1ce0726c67499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18869853809b022346c00f46f4f1ce0726c67499", "html_url": "https://github.com/rust-lang/rust/commit/18869853809b022346c00f46f4f1ce0726c67499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18869853809b022346c00f46f4f1ce0726c67499/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397a2fd744c489b3ad656fc4ca5767593fd8a7eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/397a2fd744c489b3ad656fc4ca5767593fd8a7eb", "html_url": "https://github.com/rust-lang/rust/commit/397a2fd744c489b3ad656fc4ca5767593fd8a7eb"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "9f474d97afb12ed1d73b06151bc10bddce7ab751", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/18869853809b022346c00f46f4f1ce0726c67499/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18869853809b022346c00f46f4f1ce0726c67499/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=18869853809b022346c00f46f4f1ce0726c67499", "patch": "@@ -546,38 +546,42 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         source_info: SourceInfo,\n         place_layout: TyLayout<'tcx>,\n     ) -> Option<()> {\n-        if ty.is_integral() && op.ty(&self.local_decls, self.tcx).is_integral() {\n-            let value = self.use_ecx(source_info, |this| {\n-                this.ecx.read_immediate(this.ecx.eval_operand(op, None)?)\n-            })?;\n+        if !ty.is_integral() || !op.ty(&self.local_decls, self.tcx).is_integral() {\n+            return Some(());\n+        }\n \n-            // Do not try to read bits for ZSTs\n-            if !value.layout.is_zst() {\n-                let value_size = value.layout.size;\n-                let value_bits = value.to_scalar().and_then(|r| r.to_bits(value_size));\n-                if let Ok(value_bits) = value_bits {\n-                    let truncated = truncate(value_bits, place_layout.size);\n-                    if truncated != value_bits {\n-                        let scope = source_info.scope;\n-                        let lint_root = match &self.source_scopes[scope].local_data {\n-                            ClearCrossCrate::Set(data) => data.lint_root,\n-                            ClearCrossCrate::Clear => return None,\n-                        };\n-                        self.tcx.lint_hir(\n-                            ::rustc::lint::builtin::CONST_ERR,\n-                            lint_root,\n-                            source_info.span,\n-                            &format!(\n-                                \"truncating cast: the value {} requires {} bits but \\\n-                                              the target type is only {} bits\",\n-                                value_bits,\n-                                value_size.bits(),\n-                                place_layout.size.bits()\n-                            ),\n-                        );\n-                        return None;\n-                    }\n-                }\n+        let value = self.use_ecx(source_info, |this| {\n+            this.ecx.read_immediate(this.ecx.eval_operand(op, None)?)\n+        })?;\n+\n+        // Do not try to read bits for ZSTs\n+        if value.layout.is_zst() {\n+            return Some(());\n+        }\n+\n+        let value_size = value.layout.size;\n+        let value_bits = value.to_scalar().and_then(|r| r.to_bits(value_size));\n+        if let Ok(value_bits) = value_bits {\n+            let truncated = truncate(value_bits, place_layout.size);\n+            if truncated != value_bits {\n+                let scope = source_info.scope;\n+                let lint_root = match &self.source_scopes[scope].local_data {\n+                    ClearCrossCrate::Set(data) => data.lint_root,\n+                    ClearCrossCrate::Clear => return None,\n+                };\n+                self.tcx.lint_hir(\n+                    ::rustc::lint::builtin::CONST_ERR,\n+                    lint_root,\n+                    source_info.span,\n+                    &format!(\n+                        \"truncating cast: the value {} requires {} bits but the target type is \\\n+                                          only {} bits\",\n+                        value_bits,\n+                        value_size.bits(),\n+                        place_layout.size.bits()\n+                    ),\n+                );\n+                return None;\n             }\n         }\n "}]}