{"sha": "f5ac93b94b611bd9193b81c7eae85a3afe835549", "node_id": "C_kwDOAAsO6NoAKGY1YWM5M2I5NGI2MTFiZDkxOTNiODFjN2VhZTg1YTNhZmU4MzU1NDk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-18T00:27:14Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-18T00:27:14Z"}, "message": "rustdoc: avoid including impl blocks with filled-in generics\n\nFixes #94937", "tree": {"sha": "4d67b6c9f1375f932e1ec02fd255a2ba15f81c5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d67b6c9f1375f932e1ec02fd255a2ba15f81c5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5ac93b94b611bd9193b81c7eae85a3afe835549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ac93b94b611bd9193b81c7eae85a3afe835549", "html_url": "https://github.com/rust-lang/rust/commit/f5ac93b94b611bd9193b81c7eae85a3afe835549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5ac93b94b611bd9193b81c7eae85a3afe835549/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00755e4ca68f12ed200e921276788ab19975e85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/00755e4ca68f12ed200e921276788ab19975e85f", "html_url": "https://github.com/rust-lang/rust/commit/00755e4ca68f12ed200e921276788ab19975e85f"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "0dc1c9d9663130ea46095484d6c4eaeb792b5b62", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f5ac93b94b611bd9193b81c7eae85a3afe835549/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ac93b94b611bd9193b81c7eae85a3afe835549/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=f5ac93b94b611bd9193b81c7eae85a3afe835549", "patch": "@@ -9,7 +9,7 @@ use crate::visit::DocVisitor;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::DefIdTree;\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_span::symbol::sym;\n \n crate const COLLECT_TRAIT_IMPLS: Pass = Pass {\n@@ -81,8 +81,33 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n             // Do not calculate blanket impl list for docs that are not going to be rendered.\n             // While the `impl` blocks themselves are only in `libcore`, the module with `doc`\n             // attached is directly included in `libstd` as well.\n+            let tcx = cx.tcx;\n             if did.is_local() {\n-                for def_id in prim.impls(cx.tcx) {\n+                for def_id in prim.impls(tcx).filter(|def_id| {\n+                    // Avoid including impl blocks with filled-in generics.\n+                    // https://github.com/rust-lang/rust/issues/94937\n+                    //\n+                    // FIXME(notriddle): https://github.com/rust-lang/rust/issues/97129\n+                    //\n+                    // This tactic of using inherent impl blocks for getting\n+                    // auto traits and blanket impls is a hack. What we really\n+                    // want is to check if `[T]` impls `Send`, which has\n+                    // nothing to do with the inherent impl.\n+                    //\n+                    // Rustdoc currently uses these `impl` block as a source of\n+                    // the `Ty`, as well as the `ParamEnv`, `SubstsRef`, and\n+                    // `Generics`. To avoid relying on the `impl` block, these\n+                    // things would need to be created from wholecloth, in a\n+                    // form that is valid for use in type inference.\n+                    let ty = tcx.type_of(def_id);\n+                    match ty.kind() {\n+                        ty::Slice(ty) => matches!(ty.kind(), ty::Param(..)),\n+                        ty::Ref(_region, ty, _mutbl) => matches!(ty.kind(), ty::Param(..)),\n+                        ty::RawPtr(ty::TypeAndMut { ty, .. }) => matches!(ty.kind(), ty::Param(..)),\n+                        ty::Tuple(tys) => tys.iter().all(|ty| matches!(ty.kind(), ty::Param(..))),\n+                        _ => true,\n+                    }\n+                }) {\n                     let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n                     new_items_external.extend(impls.filter(|i| cx.inlined.insert(i.item_id)));\n                 }"}]}