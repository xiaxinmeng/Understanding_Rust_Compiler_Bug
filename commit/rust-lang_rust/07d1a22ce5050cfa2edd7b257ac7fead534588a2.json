{"sha": "07d1a22ce5050cfa2edd7b257ac7fead534588a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZDFhMjJjZTUwNTBjZmEyZWRkN2IyNTdhYzdmZWFkNTM0NTg4YTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-27T22:08:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-27T22:08:37Z"}, "message": "Rollup merge of #28039 - birkenfeld:option_result_ref_intoiter, r=alexcrichton\n\nFixes #27996.\r\n\r\nDoes this need any `#[stable]`/`#[unstable]` attributes?", "tree": {"sha": "08391a01e310da9b0e14dce0791867c77d324915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08391a01e310da9b0e14dce0791867c77d324915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07d1a22ce5050cfa2edd7b257ac7fead534588a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07d1a22ce5050cfa2edd7b257ac7fead534588a2", "html_url": "https://github.com/rust-lang/rust/commit/07d1a22ce5050cfa2edd7b257ac7fead534588a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07d1a22ce5050cfa2edd7b257ac7fead534588a2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0833d8776282b39740345bbb5710037eabc67180", "url": "https://api.github.com/repos/rust-lang/rust/commits/0833d8776282b39740345bbb5710037eabc67180", "html_url": "https://github.com/rust-lang/rust/commit/0833d8776282b39740345bbb5710037eabc67180"}, {"sha": "a7313a0b891fb5fa62357527409bafde63aa44aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7313a0b891fb5fa62357527409bafde63aa44aa", "html_url": "https://github.com/rust-lang/rust/commit/a7313a0b891fb5fa62357527409bafde63aa44aa"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "a36a120689cc6845132d1283457ac0b79c97eb9c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=07d1a22ce5050cfa2edd7b257ac7fead534588a2", "patch": "@@ -779,6 +779,26 @@ impl<T> IntoIterator for Option<T> {\n     }\n }\n \n+#[stable(since = \"1.4.0\", feature = \"option_iter\")]\n+impl<'a, T> IntoIterator for &'a Option<T> {\n+    type Item = &'a T;\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+#[stable(since = \"1.4.0\", feature = \"option_iter\")]\n+impl<'a, T> IntoIterator for &'a mut Option<T> {\n+    type Item = &'a mut T;\n+    type IntoIter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Option Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "2546d9cd63d8365b4fd7f85217a757e0b0b6d680", "filename": "src/libcore/result.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=07d1a22ce5050cfa2edd7b257ac7fead534588a2", "patch": "@@ -815,6 +815,26 @@ impl<T, E> IntoIterator for Result<T, E> {\n     }\n }\n \n+#[stable(since = \"1.4.0\", feature = \"result_iter\")]\n+impl<'a, T, E> IntoIterator for &'a Result<T, E> {\n+    type Item = &'a T;\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+#[stable(since = \"1.4.0\", feature = \"result_iter\")]\n+impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n+    type Item = &'a mut T;\n+    type IntoIter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Result Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "3e564cf197061fc7cebdda72e2d2aea034aeb708", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=07d1a22ce5050cfa2edd7b257ac7fead534588a2", "patch": "@@ -180,11 +180,14 @@ fn test_iter() {\n     assert_eq!(it.next(), Some(&val));\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert!(it.next().is_none());\n+\n+    let mut it = (&x).into_iter();\n+    assert_eq!(it.next(), Some(&val));\n }\n \n #[test]\n fn test_mut_iter() {\n-    let val = 5;\n+    let mut val = 5;\n     let new_val = 11;\n \n     let mut x = Some(val);\n@@ -205,6 +208,10 @@ fn test_mut_iter() {\n         assert!(it.next().is_none());\n     }\n     assert_eq!(x, Some(new_val));\n+\n+    let mut y = Some(val);\n+    let mut it = (&mut y).into_iter();\n+    assert_eq!(it.next(), Some(&mut val));\n }\n \n #[test]"}, {"sha": "6e9f653dcd8ac16b6948d1969e984caedeccdb0a", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d1a22ce5050cfa2edd7b257ac7fead534588a2/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=07d1a22ce5050cfa2edd7b257ac7fead534588a2", "patch": "@@ -150,3 +150,36 @@ pub fn test_expect_err() {\n     let err: Result<isize, &'static str> = Err(\"All good\");\n     err.expect(\"Got expected error\");\n }\n+\n+#[test]\n+pub fn test_iter() {\n+    let ok: Result<isize, &'static str> = Ok(100);\n+    let mut it = ok.iter();\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n+    assert_eq!(it.next(), Some(&100));\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n+    assert!(it.next().is_none());\n+    assert_eq!((&ok).into_iter().next(), Some(&100));\n+\n+    let err: Result<isize, &'static str> = Err(\"error\");\n+    assert_eq!(err.iter().next(), None);\n+}\n+\n+#[test]\n+pub fn test_iter_mut() {\n+    let mut ok: Result<isize, &'static str> = Ok(100);\n+    for loc in ok.iter_mut() {\n+        *loc = 200;\n+    }\n+    assert_eq!(ok, Ok(200));\n+    for loc in &mut ok {\n+        *loc = 300;\n+    }\n+    assert_eq!(ok, Ok(300));\n+\n+    let mut err: Result<isize, &'static str> = Err(\"error\");\n+    for loc in err.iter_mut() {\n+        *loc = 200;\n+    }\n+    assert_eq!(err, Err(\"error\"));\n+}"}]}