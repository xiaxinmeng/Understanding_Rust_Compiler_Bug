{"sha": "bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjI5YjhmNmM1ZGNmMmFjZmRkMWNjMWU1NGQ2NTdjZDViM2NhY2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-07T17:05:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-07T17:05:58Z"}, "message": "Rollup merge of #80012 - sasurau4:feature/point-constant-identifier-E0435, r=petrochenkov\n\nAdd pointing const identifier when emitting E0435\n\nFix #79919", "tree": {"sha": "f6fd509f8b72d32b7b6888c611440e778bdde94a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6fd509f8b72d32b7b6888c611440e778bdde94a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9z92CRBK7hj4Ov3rIwAAdHIIAD7HOTSSLuKMoHUPARF3iKE6\nuo4SbC/nt07wSX5Kfj2frANgSXHtFeRLDI6+xbZQ4eZDw0aaubzSFx7IPz/ocxLo\nSEUPi8oERwrsbASREMmR5iDHpl8cnwTTUrkeSQ/zaJaUwB7wnLO0k+gapstI38Cp\n9mw5ZSbaRpxawSVI8Axj0KcW9wpWNkOyD59AYLwU2k9W0w7yFI0/rMQkAPcvHryF\nbbOFGIuHEfWotu2a0li4rIYYhYyIabxZ5hIdYP4ZHRYlpggHOA236H+blcIy/PuA\nI/UKFbOF2HpCKRSIFpadoQavi/OW943hOmF/U0MaYgDUcbURhArV1iCQYeuhjtc=\n=k3rD\n-----END PGP SIGNATURE-----\n", "payload": "tree f6fd509f8b72d32b7b6888c611440e778bdde94a\nparent b5c496de374407c0937cf5257d89230b5358d053\nparent c71348a9c6d8c27c4d0a39428b7478c19b0c97d9\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610039158 +0900\ncommitter GitHub <noreply@github.com> 1610039158 +0900\n\nRollup merge of #80012 - sasurau4:feature/point-constant-identifier-E0435, r=petrochenkov\n\nAdd pointing const identifier when emitting E0435\n\nFix #79919\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "html_url": "https://github.com/rust-lang/rust/commit/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c496de374407c0937cf5257d89230b5358d053", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c496de374407c0937cf5257d89230b5358d053", "html_url": "https://github.com/rust-lang/rust/commit/b5c496de374407c0937cf5257d89230b5358d053"}, {"sha": "c71348a9c6d8c27c4d0a39428b7478c19b0c97d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c71348a9c6d8c27c4d0a39428b7478c19b0c97d9", "html_url": "https://github.com/rust-lang/rust/commit/c71348a9c6d8c27c4d0a39428b7478c19b0c97d9"}], "stats": {"total": 144, "additions": 116, "deletions": 28}, "files": [{"sha": "798a20d48b65bcb5e4d1c928903c6938a7cb4a2b", "filename": "compiler/rustc_error_codes/src/error_codes/E0435.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0435.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0435.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0435.md?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -7,6 +7,12 @@ let foo = 42;\n let a: [u8; foo]; // error: attempt to use a non-constant value in a constant\n ```\n \n+'constant' means 'a compile-time value'.\n+\n+More details can be found in the [Variables and Mutability] section of the book.\n+\n+[Variables and Mutability]: https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n+\n To fix this error, please replace the value with a constant. Example:\n \n ```"}, {"sha": "6a181dbab5af76b6a298caa604927c528bdcdd86", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -398,13 +398,19 @@ impl<'a> Resolver<'a> {\n                 err.help(\"use the `|| { ... }` closure form instead\");\n                 err\n             }\n-            ResolutionError::AttemptToUseNonConstantValueInConstant => {\n+            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0435,\n                     \"attempt to use a non-constant value in a constant\"\n                 );\n+                err.span_suggestion(\n+                    ident.span,\n+                    &sugg,\n+                    \"\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n                 err.span_label(span, \"non-constant value\");\n                 err\n             }"}, {"sha": "4d956e7f0d2c364ea323c66e938f893525d675bc", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -92,6 +92,12 @@ crate enum HasGenericParams {\n     No,\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+crate enum ConstantItemKind {\n+    Const,\n+    Static,\n+}\n+\n /// The rib kind restricts certain accesses,\n /// e.g. to a `Res::Local` of an outer item.\n #[derive(Copy, Clone, Debug)]\n@@ -119,7 +125,7 @@ crate enum RibKind<'a> {\n     ///\n     /// The `bool` indicates if this constant may reference generic parameters\n     /// and is used to only allow generic parameters to be used in trivial constant expressions.\n-    ConstantItemRibKind(bool),\n+    ConstantItemRibKind(bool, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -145,7 +151,7 @@ impl RibKind<'_> {\n             NormalRibKind\n             | ClosureOrAsyncRibKind\n             | FnItemRibKind\n-            | ConstantItemRibKind(_)\n+            | ConstantItemRibKind(..)\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n             | ConstParamTyRibKind => false,\n@@ -634,7 +640,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // Note that we might not be inside of an repeat expression here,\n                             // but considering that `IsRepeatExpr` is only relevant for\n                             // non-trivial constants this is doesn't matter.\n-                            self.with_constant_rib(IsRepeatExpr::No, true, |this| {\n+                            self.with_constant_rib(IsRepeatExpr::No, true, None, |this| {\n                                 this.smart_resolve_path(\n                                     ty.id,\n                                     qself.as_ref(),\n@@ -843,7 +849,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ClosureOrAsyncRibKind\n                 | FnItemRibKind\n                 | ItemRibKind(..)\n-                | ConstantItemRibKind(_)\n+                | ConstantItemRibKind(..)\n                 | ModuleRibKind(..)\n                 | ForwardTyParamBanRibKind\n                 | ConstParamTyRibKind => {\n@@ -970,6 +976,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             this.with_constant_rib(\n                                                 IsRepeatExpr::No,\n                                                 true,\n+                                                None,\n                                                 |this| this.visit_expr(expr),\n                                             );\n                                         }\n@@ -1012,11 +1019,19 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n+                        let constant_item_kind = match item.kind {\n+                            ItemKind::Const(..) => ConstantItemKind::Const,\n+                            ItemKind::Static(..) => ConstantItemKind::Static,\n+                            _ => unreachable!(),\n+                        };\n                         // We already forbid generic params because of the above item rib,\n                         // so it doesn't matter whether this is a trivial constant.\n-                        this.with_constant_rib(IsRepeatExpr::No, true, |this| {\n-                            this.visit_expr(expr)\n-                        });\n+                        this.with_constant_rib(\n+                            IsRepeatExpr::No,\n+                            true,\n+                            Some((item.ident, constant_item_kind)),\n+                            |this| this.visit_expr(expr),\n+                        );\n                     }\n                 });\n             }\n@@ -1118,15 +1133,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         is_repeat: IsRepeatExpr,\n         is_trivial: bool,\n+        item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n         debug!(\"with_constant_rib: is_repeat={:?} is_trivial={}\", is_repeat, is_trivial);\n-        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial), |this| {\n+        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial),\n+                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial, item),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(is_trivial), f);\n+                    this.with_label_rib(ConstantItemRibKind(is_trivial, item), f);\n                 },\n             )\n         });\n@@ -1266,6 +1282,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             this.with_constant_rib(\n                                                 IsRepeatExpr::No,\n                                                 true,\n+                                                None,\n                                                 |this| {\n                                                     visit::walk_assoc_item(\n                                                         this,\n@@ -2200,6 +2217,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_constant_rib(\n             is_repeat,\n             constant.value.is_potential_trivial_const_param(),\n+            None,\n             |this| {\n                 visit::walk_anon_const(this, constant);\n             },"}, {"sha": "a6d0240b6fdcf7a190fa4bc5b60d3af144b8ff59", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -64,7 +64,7 @@ use tracing::debug;\n use diagnostics::{extend_span_to_previous_binding, find_span_of_binding_until_next_binding};\n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};\n-use late::{HasGenericParams, PathSource, Rib, RibKind::*};\n+use late::{ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind::*};\n use macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n \n type Res = def::Res<NodeId>;\n@@ -210,7 +210,7 @@ enum ResolutionError<'a> {\n     /// Error E0434: can't capture dynamic environment in a fn item.\n     CannotCaptureDynamicEnvironmentInFnItem,\n     /// Error E0435: attempt to use a non-constant value in a constant.\n-    AttemptToUseNonConstantValueInConstant,\n+    AttemptToUseNonConstantValueInConstant(Ident, String),\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n@@ -1837,14 +1837,16 @@ impl<'a> Resolver<'a> {\n             // Use the rib kind to determine whether we are resolving parameters\n             // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).\n             let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };\n-            if let Some(res) = ribs[i].bindings.get(&rib_ident).cloned() {\n+            if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)\n+            {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(\n                     i,\n                     rib_ident,\n-                    res,\n+                    *res,\n                     record_used,\n                     path_span,\n+                    *original_rib_ident_def,\n                     ribs,\n                 )));\n             }\n@@ -2556,6 +2558,7 @@ impl<'a> Resolver<'a> {\n         mut res: Res,\n         record_used: bool,\n         span: Span,\n+        original_rib_ident_def: Ident,\n         all_ribs: &[Rib<'a>],\n     ) -> Res {\n         const CG_BUG_STR: &str = \"min_const_generics resolve check didn't stop compilation\";\n@@ -2602,10 +2605,31 @@ impl<'a> Resolver<'a> {\n                                 res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);\n                             }\n                         }\n-                        ConstantItemRibKind(_) => {\n+                        ConstantItemRibKind(_, item) => {\n                             // Still doesn't deal with upvars\n                             if record_used {\n-                                self.report_error(span, AttemptToUseNonConstantValueInConstant);\n+                                let (span, resolution_error) =\n+                                    if let Some((ident, constant_item_kind)) = item {\n+                                        let kind_str = match constant_item_kind {\n+                                            ConstantItemKind::Const => \"const\",\n+                                            ConstantItemKind::Static => \"static\",\n+                                        };\n+                                        let sugg = format!(\n+                                            \"consider using `let` instead of `{}`\",\n+                                            kind_str\n+                                        );\n+                                        (span, AttemptToUseNonConstantValueInConstant(ident, sugg))\n+                                    } else {\n+                                        let sugg = \"consider using `const` instead of `let`\";\n+                                        (\n+                                            rib_ident.span,\n+                                            AttemptToUseNonConstantValueInConstant(\n+                                                original_rib_ident_def,\n+                                                sugg.to_string(),\n+                                            ),\n+                                        )\n+                                    };\n+                                self.report_error(span, resolution_error);\n                             }\n                             return Res::Err;\n                         }\n@@ -2641,7 +2665,7 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind(trivial) => {\n+                        ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial\n@@ -2734,7 +2758,7 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind(trivial) => {\n+                        ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial"}, {"sha": "21827d1fd874372ac93c3a0af9c663979202e7a6", "filename": "src/test/ui/error-codes/E0435.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -1,6 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/E0435.rs:3:17\n    |\n+LL |     let foo = 42u32;\n+   |         --- help: consider using `const` instead of `let`\n LL |     let _: [u8; foo];\n    |                 ^^^ non-constant value\n "}, {"sha": "ad5f13d0672306c07b63d41a0607aa87c44fc20e", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -2,25 +2,33 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:5:29\n    |\n LL |     const foo: impl Clone = x;\n-   |                             ^ non-constant value\n+   |           ---               ^ non-constant value\n+   |           |\n+   |           help: consider using `let` instead of `const`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:11:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^ non-constant value\n+   |               ---               ^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `const`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:18:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^ non-constant value\n+   |               ---               ^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `const`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:25:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^ non-constant value\n+   |               ---               ^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `const`\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bindings.rs:1:12"}, {"sha": "201b7e8549cb17ba06a4253d24fd89e9098f8ae5", "filename": "src/test/ui/issues/issue-27433.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-27433.rs:3:23\n    |\n LL |     const FOO : u32 = foo;\n-   |                       ^^^ non-constant value\n+   |           ---         ^^^ non-constant value\n+   |           |\n+   |           help: consider using `let` instead of `const`\n \n error: aborting due to previous error\n "}, {"sha": "ba29d1becb85afa1772ed8db8151b511461a0d85", "filename": "src/test/ui/issues/issue-3521-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3521-2.rs:4:23\n    |\n LL |     static y: isize = foo + 1;\n-   |                       ^^^ non-constant value\n+   |            -          ^^^ non-constant value\n+   |            |\n+   |            help: consider using `let` instead of `static`\n \n error: aborting due to previous error\n "}, {"sha": "8473526006c5c80fb3d365526d31aa9f4ce6e687", "filename": "src/test/ui/issues/issue-3521.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -1,6 +1,9 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3521.rs:6:15\n    |\n+LL |     let foo = 100;\n+   |         --- help: consider using `const` instead of `let`\n+...\n LL |         Bar = foo\n    |               ^^^ non-constant value\n "}, {"sha": "7cee497b0bcedffc8dacfdafb0095cc1539c470d", "filename": "src/test/ui/issues/issue-3668-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668-2.rs:2:27\n    |\n LL |     static child: isize = x + 1;\n-   |                           ^ non-constant value\n+   |            -----          ^ non-constant value\n+   |            |\n+   |            help: consider using `let` instead of `static`\n \n error: aborting due to previous error\n "}, {"sha": "e45472929ab31ee1a0fc45155a70399adafb16ef", "filename": "src/test/ui/issues/issue-3668.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668.rs:8:34\n    |\n LL |        static childVal: Box<P> = self.child.get();\n-   |                                  ^^^^ non-constant value\n+   |               --------           ^^^^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `static`\n \n error: aborting due to previous error\n "}, {"sha": "dc089b856bb234531408b1e2316ec64186df506b", "filename": "src/test/ui/issues/issue-42060.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -1,12 +1,16 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:3:23\n    |\n+LL |     let thing = ();\n+   |         ----- help: consider using `const` instead of `let`\n LL |     let other: typeof(thing) = thing;\n    |                       ^^^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:9:13\n    |\n+LL |     let q = 1;\n+   |         - help: consider using `const` instead of `let`\n LL |     <typeof(q)>::N\n    |             ^ non-constant value\n "}, {"sha": "bbd3d116c9634530868aab405e404879c54e0141", "filename": "src/test/ui/issues/issue-44239.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -1,6 +1,9 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-44239.rs:6:26\n    |\n+LL |     let n = 0;\n+   |         - help: consider using `const` instead of `let`\n+...\n LL |         const N: usize = n;\n    |                          ^ non-constant value\n "}, {"sha": "01da6bcf49aaa815e5f5c49efa0c989ace49997e", "filename": "src/test/ui/non-constant-expr-for-arr-len.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -1,6 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/non-constant-expr-for-arr-len.rs:5:22\n    |\n+LL |     fn bar(n: usize) {\n+   |            - help: consider using `const` instead of `let`\n LL |         let _x = [0; n];\n    |                      ^ non-constant value\n "}, {"sha": "aa1b2e60d51f865408e06cc27a59a3ed6cd4b3f4", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -1,6 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/repeat_count.rs:5:17\n    |\n+LL |     let n = 1;\n+   |         - help: consider using `const` instead of `let`\n LL |     let a = [0; n];\n    |                 ^ non-constant value\n "}, {"sha": "df791435e88b95d8017f5f8cc5ed23c4868e6a21", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=bb229b8f6c5dcf2acfdd1cc1e54d657cd5b3cacd", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/type-dependent-def-issue-49241.rs:3:22\n    |\n LL |     const l: usize = v.count();\n-   |                      ^ non-constant value\n+   |           -          ^ non-constant value\n+   |           |\n+   |           help: consider using `let` instead of `const`\n \n error: aborting due to previous error\n "}]}