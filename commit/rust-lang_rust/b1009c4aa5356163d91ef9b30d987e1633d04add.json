{"sha": "b1009c4aa5356163d91ef9b30d987e1633d04add", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDA5YzRhYTUzNTYxNjNkOTFlZjliMzBkOTg3ZTE2MzNkMDRhZGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-08T10:30:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-08T10:33:14Z"}, "message": "more editing", "tree": {"sha": "3b16c97b31b53f22e14f3d6b984ae99386b726b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b16c97b31b53f22e14f3d6b984ae99386b726b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1009c4aa5356163d91ef9b30d987e1633d04add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1009c4aa5356163d91ef9b30d987e1633d04add", "html_url": "https://github.com/rust-lang/rust/commit/b1009c4aa5356163d91ef9b30d987e1633d04add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1009c4aa5356163d91ef9b30d987e1633d04add/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "925465ebab87af43a40a32083f9db2799364c001", "url": "https://api.github.com/repos/rust-lang/rust/commits/925465ebab87af43a40a32083f9db2799364c001", "html_url": "https://github.com/rust-lang/rust/commit/925465ebab87af43a40a32083f9db2799364c001"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "5862d2d402ae8b767ca8437b35ab7171812746ef", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b1009c4aa5356163d91ef9b30d987e1633d04add/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1009c4aa5356163d91ef9b30d987e1633d04add/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=b1009c4aa5356163d91ef9b30d987e1633d04add", "patch": "@@ -14,9 +14,9 @@ contact us (`oli-obk` and `RalfJ`) on the [Rust Zulip].\n \n ## Preparing the build environment\n \n-Miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n-things (like adding support for a new intrinsic or a shim for an external\n-function being called) can be done by working just on the Miri side.\n+Miri heavily relies on internal and unstable rustc interfaces to execute MIR,\n+which means it is important that you install a version of rustc that Miri\n+actually works with.\n \n The `rust-version` file contains the commit hash of rustc that Miri is currently\n tested against. Other versions will likely not work. After installing\n@@ -25,13 +25,15 @@ install that exact version of rustc as a toolchain:\n ```\n ./rustup-toolchain\n ```\n+This will set up a rustup toolchain called `miri` and set it as an override for\n+the current directory.\n \n [`rustup-toolchain-install-master`]: https://github.com/kennytm/rustup-toolchain-install-master\n \n ## Building and testing Miri\n \n Invoking Miri requires getting a bunch of flags right and setting up a custom\n-sysroot with xargo. The `miri` script takes care of that for you.  With the\n+sysroot with xargo. The `miri` script takes care of that for you. With the\n build environment prepared, compiling Miri is just one command away:\n \n ```\n@@ -76,7 +78,7 @@ MIRI_LOG=info ./miri run tests/run-pass/vecs.rs\n ```\n \n Setting `MIRI_LOG` like this will configure logging for Miri itself as well as\n-the `rustc_middle::mir::interpret` and `rustc_mir::interpret` modules in rustc.  You\n+the `rustc_middle::mir::interpret` and `rustc_mir::interpret` modules in rustc. You\n can also do more targeted configuration, e.g. the following helps debug the\n stacked borrows implementation:\n \n@@ -90,8 +92,8 @@ evaluation error was originally raised.\n ### Testing `cargo miri`\n \n Working with the driver directly gives you full control, but you also lose all\n-the convenience provided by cargo.  Once your test case depends on a crate, it\n-is probably easier to test it with the cargo wrapper.  You can install your\n+the convenience provided by cargo. Once your test case depends on a crate, it\n+is probably easier to test it with the cargo wrapper. You can install your\n development version of Miri using\n \n ```\n@@ -105,27 +107,33 @@ There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n `./run-test.py` in there to execute it. Like `./miri test`, this respects the\n `MIRI_TEST_TARGET` environment variable to execute the test for another target.\n \n-### Fixing Miri when rustc changes\n+## Advanced topic: other build environments\n \n-Miri is heavily tied to rustc internals, so it is very common that rustc changes\n-break Miri. Usually, Miri will require changes similar to the other consumers\n-of the changed rustc API, so reading the rustc PR diff is a good way to get an\n-idea for what is needed.\n+We described above the simplest way to get a working build environment for Miri,\n+which is to use the version of rustc indicated by `rustc-version`. But\n+sometimes, that is not enough.\n+\n+### Updating `rustc-version`\n+\n+The `rustc-version` file is regularly updated to keep Miri close to the latest\n+version of rustc. Usually, new contributors do not have to worry about this. But\n+sometimes a newer rustc is needed for a patch, and sometimes Miri needs fixing\n+for changes in rustc. In both cases, `rustc-version` needs updating.\n \n To update the `rustc-version` file and install the latest rustc, you can run:\n ```\n ./rustup-toolchain HEAD\n ```\n \n-Now try `./miri test`, and submit a PR once that works again. Even if you choose\n-not to use `./rustup-toolchain`, it is important that the `rustc-version` file\n-is updated, as our CI makes sure that Miri works well with that particular\n-version of rustc.\n+Now edit Miri until `./miri test` passes, and submit a PR. Generally, it is\n+preferred to separate updating `rustc-version` and doing what it takes to get\n+Miri working again, from implementing new features that rely on the updated\n+rustc. This avoids blocking all Miri development on landing a big PR.\n \n-## Advanced topic: Building Miri with a locally built rustc\n+### Building Miri with a locally built rustc\n \n A big part of the Miri driver lives in rustc, so working on Miri will sometimes\n-require using a locally built rustc.  The bug you want to fix may actually be on\n+require using a locally built rustc. The bug you want to fix may actually be on\n the rustc side, or you just need to get more detailed trace of the execution\n than what is possible with release builds -- in both cases, you should develop\n miri against a rustc you compiled yourself, with debug assertions (and hence"}]}