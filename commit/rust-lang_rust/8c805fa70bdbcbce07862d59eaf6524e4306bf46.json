{"sha": "8c805fa70bdbcbce07862d59eaf6524e4306bf46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODA1ZmE3MGJkYmNiY2UwNzg2MmQ1OWVhZjY1MjRlNDMwNmJmNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-24T16:46:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-24T16:46:33Z"}, "message": "auto merge of #11760 : dmac/rust/addressable-search, r=alexcrichton\n\nThis change adds two improvements to docs searching functionality.\r\n\r\nFirst, search results will immediately be displayed when a ?search=searchterm\r\nquery string parameter is provided to any docs url.\r\n\r\nSecond, search results are now inserted into the browser history, allowing for\r\neasier navigation between search results and docs pages.", "tree": {"sha": "55cd2f32a7e24e24fc089d74110cf9269ccbfbae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55cd2f32a7e24e24fc089d74110cf9269ccbfbae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c805fa70bdbcbce07862d59eaf6524e4306bf46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c805fa70bdbcbce07862d59eaf6524e4306bf46", "html_url": "https://github.com/rust-lang/rust/commit/8c805fa70bdbcbce07862d59eaf6524e4306bf46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c805fa70bdbcbce07862d59eaf6524e4306bf46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea0947c5d1d113f58beafd98a6bb966e07b6f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea0947c5d1d113f58beafd98a6bb966e07b6f60", "html_url": "https://github.com/rust-lang/rust/commit/1ea0947c5d1d113f58beafd98a6bb966e07b6f60"}, {"sha": "b869f36e787530989172db7a9ec233785f93dca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b869f36e787530989172db7a9ec233785f93dca3", "html_url": "https://github.com/rust-lang/rust/commit/b869f36e787530989172db7a9ec233785f93dca3"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "6dbf56681bd0c5dc4a8921285c1165a0abb958c2", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8c805fa70bdbcbce07862d59eaf6524e4306bf46/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/8c805fa70bdbcbce07862d59eaf6524e4306bf46/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=8c805fa70bdbcbce07862d59eaf6524e4306bf46", "patch": "@@ -17,6 +17,21 @@\n \n     $('.js-only').removeClass('js-only');\n \n+    function getQueryStringParams() {\n+        var params = {};\n+        window.location.search.substring(1).split(\"&\").\n+            map(function(s) {\n+                var pair = s.split(\"=\");\n+                params[decodeURIComponent(pair[0])] =\n+                    typeof pair[1] === \"undefined\" ? null : decodeURIComponent(pair[1]);\n+            });\n+        return params;\n+    }\n+\n+    function browserSupportsHistoryApi() {\n+        return window.history && typeof window.history.pushState === \"function\";\n+    }\n+\n     function resizeShortBlocks() {\n         if (resizeTimeout) {\n             clearTimeout(resizeTimeout);\n@@ -97,10 +112,10 @@\n     });\n \n     function initSearch(searchIndex) {\n-        var currentResults, index;\n+        var currentResults, index, params = getQueryStringParams();\n \n-        // clear cached values from the search bar\n-        $(\".search-input\")[0].value = '';\n+        // Populate search bar with query string search term when provided.\n+        $(\".search-input\")[0].value = params.search || '';\n \n         /**\n          * Executes the query and builds an index of results\n@@ -418,6 +433,7 @@\n                 results = [],\n                 maxResults = 200,\n                 resultIndex;\n+            var params = getQueryStringParams();\n \n             query = getQuery();\n             if (e) {\n@@ -428,6 +444,16 @@\n                 return;\n             }\n \n+            // Because searching is incremental by character, only the most recent search query\n+            // is added to the browser history.\n+            if (browserSupportsHistoryApi()) {\n+                if (!history.state && !params.search) {\n+                    history.pushState(query, \"\", \"?search=\" + encodeURIComponent(query.query));\n+                } else {\n+                    history.replaceState(query, \"\", \"?search=\" + encodeURIComponent(query.query));\n+                }\n+            }\n+\n             resultIndex = execQuery(query, 20000, index);\n             len = resultIndex.length;\n             for (i = 0; i < len; i += 1) {\n@@ -536,6 +562,27 @@\n                 clearTimeout(keyUpTimeout);\n                 keyUpTimeout = setTimeout(search, 100);\n             });\n+            // Push and pop states are used to add search results to the browser history.\n+            if (browserSupportsHistoryApi()) {\n+                $(window).on('popstate', function(e) {\n+                    var params = getQueryStringParams();\n+                    // When browsing back from search results the main page visibility must be reset.\n+                    if (!params.search) {\n+                        $('#main.content').removeClass('hidden');\n+                        $('#search.content').addClass('hidden');\n+                    }\n+                    // When browsing forward to search results the previous search will be repeated,\n+                    // so the currentResults are cleared to ensure the search is successful.\n+                    currentResults = null;\n+                    // Synchronize search bar with query string state and perform the search.\n+                    $('.search-input').val(params.search);\n+                    // Some browsers fire 'onpopstate' for every page load (Chrome), while others fire the\n+                    // event only when actually popping a state (Firefox), which is why search() is called\n+                    // both here and at the end of the startSearch() function.\n+                    search();\n+                });\n+            }\n+            search();\n         }\n \n         index = buildIndex(searchIndex);"}]}