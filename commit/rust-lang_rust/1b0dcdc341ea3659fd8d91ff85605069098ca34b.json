{"sha": "1b0dcdc341ea3659fd8d91ff85605069098ca34b", "node_id": "C_kwDOAAsO6NoAKDFiMGRjZGMzNDFlYTM2NTlmZDhkOTFmZjg1NjA1MDY5MDk4Y2EzNGI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-03T09:34:30Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-12T08:24:04Z"}, "message": "More informative error message for E0015", "tree": {"sha": "b121ab43d624b3d4ddf1eaa286b120186edf7079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b121ab43d624b3d4ddf1eaa286b120186edf7079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0dcdc341ea3659fd8d91ff85605069098ca34b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmIHbqQACgkQbQF6ltjm\nwvn2qQ/9HHuRtZv65pFdNsi6WKoBPAjwAeppO1kVzpVlj5wEK0Rj3vyJwj7qwrJl\n2u0kdfvfNCr1rR+i2jECT18bLn72WJ9yYIo4H/+4Oirl+iyhB5yk2T7fMiSaD0uG\nyeO2SCjx2ing/+0GEMut2uhfpI16gZqeTaTlyfuoio8wWRtqq5mPcnXKleezf18q\n1DOTxgtvN2358N6YADz5lexxaXOvZr2DDVEyHN453Vt7cnInUvzWo9ajcQu3j+Y6\n+LZuOP1mrEsqGoFzwRM5qOl9SRQt/Sfu5SIx65ttsojypNvxibWIennAtorlwz5b\nc7UTz6INj7VwPNnD1OjjHVfCy8JsQsn9kN2PXdSw1S99HWLW9JB6u/HhMrQ5GTtk\nwZXuQ7fNy7I72MnXdcP1CdFv7m1yDnGBtsGc704790CVezi09McZTvcgc7A5muYJ\nucWn+zSifJt94nVTKrsvpUbVDP4yiBgqQGO4n8IzIpAYAzlOuqWLY6o8FGOYnzWm\noSt62CwtxManeivYmJzve1lJ01Xuy6tronFgJGeon7KRptUac4qzXMoKshdqqH/G\nlO0uZHGd2ZeVmuFJXR7gn8MAYfvHNLIW/rSdsBE3382OplWIfYX6rv+NFUUttTy8\nXMySqm5ASK6sU9FCfUIp9Ja+uSNTzdu4TbVa4yPYxx9SN9VznQ8=\n=99Tb\n-----END PGP SIGNATURE-----", "payload": "tree b121ab43d624b3d4ddf1eaa286b120186edf7079\nparent 9cdefd763b910ffd1d42233a8c752ab5fd84ca4d\nauthor Deadbeef <ent3rm4n@gmail.com> 1635932070 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1644654244 +1100\n\nMore informative error message for E0015\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0dcdc341ea3659fd8d91ff85605069098ca34b", "html_url": "https://github.com/rust-lang/rust/commit/1b0dcdc341ea3659fd8d91ff85605069098ca34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0dcdc341ea3659fd8d91ff85605069098ca34b/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "html_url": "https://github.com/rust-lang/rust/commit/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d"}], "stats": {"total": 100, "additions": 51, "deletions": 49}, "files": [{"sha": "ec96064222b57901fe03bccab4290c84a98e139b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dcdc341ea3659fd8d91ff85605069098ca34b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dcdc341ea3659fd8d91ff85605069098ca34b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=1b0dcdc341ea3659fd8d91ff85605069098ca34b", "patch": "@@ -797,7 +797,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n                     trace!(\"attempting to call a trait method\");\n                     if !self.tcx.features().const_trait_impl {\n-                        self.check_op(ops::FnCallNonConst(Some((callee, substs))));\n+                        self.check_op(ops::FnCallNonConst(callee, substs));\n                         return;\n                     }\n \n@@ -856,7 +856,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             }\n \n                             if !nonconst_call_permission {\n-                                self.check_op(ops::FnCallNonConst(None));\n+                                self.check_op(ops::FnCallNonConst(callee, substs));\n                                 return;\n                             }\n                         }\n@@ -925,7 +925,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     }\n \n                     if !nonconst_call_permission {\n-                        self.check_op(ops::FnCallNonConst(None));\n+                        self.check_op(ops::FnCallNonConst(callee, substs));\n                         return;\n                     }\n                 }"}, {"sha": "a6da3ebba6ef6c78f67ad73803f9b71d0fe8aa0d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dcdc341ea3659fd8d91ff85605069098ca34b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dcdc341ea3659fd8d91ff85605069098ca34b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=1b0dcdc341ea3659fd8d91ff85605069098ca34b", "patch": "@@ -74,65 +74,67 @@ impl NonConstOp for FnCallIndirect {\n \n /// A function call where the callee is not marked as `const`.\n #[derive(Debug)]\n-pub struct FnCallNonConst<'tcx>(pub Option<(DefId, SubstsRef<'tcx>)>);\n+pub struct FnCallNonConst<'tcx>(pub DefId, pub SubstsRef<'tcx>);\n impl<'a> NonConstOp for FnCallNonConst<'a> {\n     fn build_error<'tcx>(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let FnCallNonConst(def_id, substs) = *self;\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0015,\n+            \"cannot call non-const fn `{}` in {}s\",\n+            ccx.tcx.def_path_str_with_substs(def_id, substs),\n+            ccx.const_kind()\n+        );\n+        err.note(&format!(\n             \"calls in {}s are limited to constant functions, \\\n              tuple structs and tuple variants\",\n             ccx.const_kind(),\n-        );\n-\n-        if let FnCallNonConst(Some((callee, substs))) = *self {\n-            if let Some(trait_def_id) = ccx.tcx.lang_items().eq_trait() {\n-                if let Some(eq_item) = ccx.tcx.associated_items(trait_def_id).find_by_name_and_kind(\n-                    ccx.tcx,\n-                    Ident::with_dummy_span(sym::eq),\n-                    AssocKind::Fn,\n-                    trait_def_id,\n-                ) {\n-                    if callee == eq_item.def_id && substs.len() == 2 {\n-                        match (substs[0].unpack(), substs[1].unpack()) {\n-                            (GenericArgKind::Type(self_ty), GenericArgKind::Type(rhs_ty))\n-                                if self_ty == rhs_ty\n-                                    && self_ty.is_ref()\n-                                    && self_ty.peel_refs().is_primitive() =>\n-                            {\n-                                let mut num_refs = 0;\n-                                let mut tmp_ty = self_ty;\n-                                while let rustc_middle::ty::Ref(_, inner_ty, _) = tmp_ty.kind() {\n-                                    num_refs += 1;\n-                                    tmp_ty = inner_ty;\n-                                }\n-                                let deref = \"*\".repeat(num_refs);\n-\n-                                if let Ok(call_str) =\n-                                    ccx.tcx.sess.source_map().span_to_snippet(span)\n-                                {\n-                                    if let Some(eq_idx) = call_str.find(\"==\") {\n-                                        if let Some(rhs_idx) = call_str[(eq_idx + 2)..]\n-                                            .find(|c: char| !c.is_whitespace())\n-                                        {\n-                                            let rhs_pos = span.lo()\n-                                                + BytePos::from_usize(eq_idx + 2 + rhs_idx);\n-                                            let rhs_span = span.with_lo(rhs_pos).with_hi(rhs_pos);\n-                                            err.multipart_suggestion(\n-                                                \"consider dereferencing here\",\n-                                                vec![\n-                                                    (span.shrink_to_lo(), deref.clone()),\n-                                                    (rhs_span, deref),\n-                                                ],\n-                                                Applicability::MachineApplicable,\n-                                            );\n-                                        }\n+        ));\n+\n+        if let Some(trait_def_id) = ccx.tcx.lang_items().eq_trait() {\n+            if let Some(eq_item) = ccx.tcx.associated_items(trait_def_id).find_by_name_and_kind(\n+                ccx.tcx,\n+                Ident::with_dummy_span(sym::eq),\n+                AssocKind::Fn,\n+                trait_def_id,\n+            ) {\n+                if callee == eq_item.def_id && substs.len() == 2 {\n+                    match (substs[0].unpack(), substs[1].unpack()) {\n+                        (GenericArgKind::Type(self_ty), GenericArgKind::Type(rhs_ty))\n+                            if self_ty == rhs_ty\n+                                && self_ty.is_ref()\n+                                && self_ty.peel_refs().is_primitive() =>\n+                        {\n+                            let mut num_refs = 0;\n+                            let mut tmp_ty = self_ty;\n+                            while let rustc_middle::ty::Ref(_, inner_ty, _) = tmp_ty.kind() {\n+                                num_refs += 1;\n+                                tmp_ty = inner_ty;\n+                            }\n+                            let deref = \"*\".repeat(num_refs);\n+\n+                            if let Ok(call_str) = ccx.tcx.sess.source_map().span_to_snippet(span) {\n+                                if let Some(eq_idx) = call_str.find(\"==\") {\n+                                    if let Some(rhs_idx) =\n+                                        call_str[(eq_idx + 2)..].find(|c: char| !c.is_whitespace())\n+                                    {\n+                                        let rhs_pos =\n+                                            span.lo() + BytePos::from_usize(eq_idx + 2 + rhs_idx);\n+                                        let rhs_span = span.with_lo(rhs_pos).with_hi(rhs_pos);\n+                                        err.multipart_suggestion(\n+                                            \"consider dereferencing here\",\n+                                            vec![\n+                                                (span.shrink_to_lo(), deref.clone()),\n+                                                (rhs_span, deref),\n+                                            ],\n+                                            Applicability::MachineApplicable,\n+                                        );\n                                     }\n                                 }\n                             }\n-                            _ => {}\n                         }\n+                        _ => {}\n                     }\n                 }\n             }"}]}