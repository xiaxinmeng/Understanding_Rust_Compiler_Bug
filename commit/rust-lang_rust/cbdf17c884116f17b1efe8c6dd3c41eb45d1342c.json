{"sha": "cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "node_id": "C_kwDOAAsO6NoAKGNiZGYxN2M4ODQxMTZmMTdiMWVmZThjNmRkM2M0MWViNDVkMTM0MmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-18T18:36:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-18T18:36:50Z"}, "message": "Auto merge of #8707 - OneSignal:await-invalid-types, r=llogiq\n\nAdd `await_holding_invalid_type` lint\n\nchangelog: [`await_holding_invalid_type`]\n\nThis lint allows users to create a denylist of types which are not allowed to be\nheld across await points. This is essentially a re-implementation of the\nlanguage-level [`must_not_suspend`\nlint](https://github.com/rust-lang/rust/issues/83310). That lint has a lot of\nwork still to be done before it will reach Rust stable, and in the meantime\nthere are a lot of types which can trip up developers if they are used\nimproperly.\n\nI originally implemented this specifically for `tracing::span::Entered`, until I discovered #8434 and read the commentary on that PR. Given this implementation is fully user configurable, doesn't tie clippy to any one particular crate, and introduces no additional dependencies, it seems more appropriate.", "tree": {"sha": "d781047a1e50c4c61a21b7ed1365e202cd0e5f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d781047a1e50c4c61a21b7ed1365e202cd0e5f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "html_url": "https://github.com/rust-lang/rust/commit/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95de4dcb5ebc556cf4fc16b874ba18835bff898b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95de4dcb5ebc556cf4fc16b874ba18835bff898b", "html_url": "https://github.com/rust-lang/rust/commit/95de4dcb5ebc556cf4fc16b874ba18835bff898b"}, {"sha": "05086858c4058400053e67d53d647ffa43945530", "url": "https://api.github.com/repos/rust-lang/rust/commits/05086858c4058400053e67d53d647ffa43945530", "html_url": "https://github.com/rust-lang/rust/commit/05086858c4058400053e67d53d647ffa43945530"}], "stats": {"total": 252, "additions": 212, "deletions": 40}, "files": [{"sha": "aaa71a9affc56122076d28df3acf954dc1e11b28", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -3283,6 +3283,7 @@ Released 2018-09-13\n [`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n [`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n [`async_yields_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async\n+[`await_holding_invalid_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_invalid_type\n [`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n [`await_holding_refcell_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_refcell_ref\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask"}, {"sha": "5b7c4591504e1cbaa3710a1cad5b684b4f13efbe", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 129, "deletions": 38, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -1,12 +1,15 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::{match_def_path, paths};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{AsyncGeneratorKind, Body, BodyId, GeneratorKind};\n+use rustc_hir::{def::Res, AsyncGeneratorKind, Body, BodyId, GeneratorKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::GeneratorInteriorTypeCause;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n+use crate::utils::conf::DisallowedType;\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to await while holding a non-async-aware MutexGuard.\n@@ -127,17 +130,83 @@ declare_clippy_lint! {\n     \"inside an async function, holding a `RefCell` ref while calling `await`\"\n }\n \n-declare_lint_pass!(AwaitHolding => [AWAIT_HOLDING_LOCK, AWAIT_HOLDING_REFCELL_REF]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Allows users to configure types which should not be held across `await`\n+    /// suspension points.\n+    ///\n+    /// ### Why is this bad?\n+    /// There are some types which are perfectly \"safe\" to be used concurrently\n+    /// from a memory access perspective but will cause bugs at runtime if they\n+    /// are held in such a way.\n+    ///\n+    /// ### Known problems\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```toml\n+    /// await-holding-invalid-types = [\n+    ///   # You can specify a type name\n+    ///   \"CustomLockType\",\n+    ///   # You can (optionally) specify a reason\n+    ///   { path = \"OtherCustomLockType\", reason = \"Relies on a thread local\" }\n+    /// ]\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// # async fn baz() {}\n+    /// struct CustomLockType;\n+    /// struct OtherCustomLockType;\n+    /// async fn foo() {\n+    ///   let _x = CustomLockType;\n+    ///   let _y = OtherCustomLockType;\n+    ///   baz().await; // Lint violation\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.49.0\"]\n+    pub AWAIT_HOLDING_INVALID_TYPE,\n+    suspicious,\n+    \"holding a type across an await point which is not allowed to be held as per the configuration\"\n+}\n+\n+impl_lint_pass!(AwaitHolding => [AWAIT_HOLDING_LOCK, AWAIT_HOLDING_REFCELL_REF, AWAIT_HOLDING_INVALID_TYPE]);\n+\n+#[derive(Debug)]\n+pub struct AwaitHolding {\n+    conf_invalid_types: Vec<DisallowedType>,\n+    def_ids: FxHashMap<DefId, DisallowedType>,\n+}\n+\n+impl AwaitHolding {\n+    pub(crate) fn new(conf_invalid_types: Vec<DisallowedType>) -> Self {\n+        Self {\n+            conf_invalid_types,\n+            def_ids: FxHashMap::default(),\n+        }\n+    }\n+}\n \n impl LateLintPass<'_> for AwaitHolding {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n+        for conf in &self.conf_invalid_types {\n+            let path = match conf {\n+                DisallowedType::Simple(path) | DisallowedType::WithReason { path, .. } => path,\n+            };\n+            let segs: Vec<_> = path.split(\"::\").collect();\n+            if let Res::Def(_, id) = clippy_utils::def_path_res(cx, &segs) {\n+                self.def_ids.insert(id, conf.clone());\n+            }\n+        }\n+    }\n+\n     fn check_body(&mut self, cx: &LateContext<'_>, body: &'_ Body<'_>) {\n         use AsyncGeneratorKind::{Block, Closure, Fn};\n         if let Some(GeneratorKind::Async(Block | Closure | Fn)) = body.generator_kind {\n             let body_id = BodyId {\n                 hir_id: body.value.hir_id,\n             };\n             let typeck_results = cx.tcx.typeck_body(body_id);\n-            check_interior_types(\n+            self.check_interior_types(\n                 cx,\n                 typeck_results.generator_interior_types.as_ref().skip_binder(),\n                 body.value.span,\n@@ -146,46 +215,68 @@ impl LateLintPass<'_> for AwaitHolding {\n     }\n }\n \n-fn check_interior_types(cx: &LateContext<'_>, ty_causes: &[GeneratorInteriorTypeCause<'_>], span: Span) {\n-    for ty_cause in ty_causes {\n-        if let rustc_middle::ty::Adt(adt, _) = ty_cause.ty.kind() {\n-            if is_mutex_guard(cx, adt.did()) {\n-                span_lint_and_then(\n-                    cx,\n-                    AWAIT_HOLDING_LOCK,\n-                    ty_cause.span,\n-                    \"this `MutexGuard` is held across an `await` point\",\n-                    |diag| {\n-                        diag.help(\n-                            \"consider using an async-aware `Mutex` type or ensuring the \\\n+impl AwaitHolding {\n+    fn check_interior_types(&self, cx: &LateContext<'_>, ty_causes: &[GeneratorInteriorTypeCause<'_>], span: Span) {\n+        for ty_cause in ty_causes {\n+            if let rustc_middle::ty::Adt(adt, _) = ty_cause.ty.kind() {\n+                if is_mutex_guard(cx, adt.did()) {\n+                    span_lint_and_then(\n+                        cx,\n+                        AWAIT_HOLDING_LOCK,\n+                        ty_cause.span,\n+                        \"this `MutexGuard` is held across an `await` point\",\n+                        |diag| {\n+                            diag.help(\n+                                \"consider using an async-aware `Mutex` type or ensuring the \\\n                                 `MutexGuard` is dropped before calling await\",\n-                        );\n-                        diag.span_note(\n-                            ty_cause.scope_span.unwrap_or(span),\n-                            \"these are all the `await` points this lock is held through\",\n-                        );\n-                    },\n-                );\n-            }\n-            if is_refcell_ref(cx, adt.did()) {\n-                span_lint_and_then(\n-                    cx,\n-                    AWAIT_HOLDING_REFCELL_REF,\n-                    ty_cause.span,\n-                    \"this `RefCell` reference is held across an `await` point\",\n-                    |diag| {\n-                        diag.help(\"ensure the reference is dropped before calling `await`\");\n-                        diag.span_note(\n-                            ty_cause.scope_span.unwrap_or(span),\n-                            \"these are all the `await` points this reference is held through\",\n-                        );\n-                    },\n-                );\n+                            );\n+                            diag.span_note(\n+                                ty_cause.scope_span.unwrap_or(span),\n+                                \"these are all the `await` points this lock is held through\",\n+                            );\n+                        },\n+                    );\n+                } else if is_refcell_ref(cx, adt.did()) {\n+                    span_lint_and_then(\n+                        cx,\n+                        AWAIT_HOLDING_REFCELL_REF,\n+                        ty_cause.span,\n+                        \"this `RefCell` reference is held across an `await` point\",\n+                        |diag| {\n+                            diag.help(\"ensure the reference is dropped before calling `await`\");\n+                            diag.span_note(\n+                                ty_cause.scope_span.unwrap_or(span),\n+                                \"these are all the `await` points this reference is held through\",\n+                            );\n+                        },\n+                    );\n+                } else if let Some(disallowed) = self.def_ids.get(&adt.did()) {\n+                    emit_invalid_type(cx, ty_cause.span, disallowed);\n+                }\n             }\n         }\n     }\n }\n \n+fn emit_invalid_type(cx: &LateContext<'_>, span: Span, disallowed: &DisallowedType) {\n+    let (type_name, reason) = match disallowed {\n+        DisallowedType::Simple(path) => (path, &None),\n+        DisallowedType::WithReason { path, reason } => (path, reason),\n+    };\n+\n+    span_lint_and_then(\n+        cx,\n+        AWAIT_HOLDING_INVALID_TYPE,\n+        span,\n+        &format!(\"`{type_name}` may not be held across an `await` point per `clippy.toml`\",),\n+        |diag| {\n+            if let Some(reason) = reason {\n+                diag.note(reason.clone());\n+            }\n+        },\n+    );\n+}\n+\n fn is_mutex_guard(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     match_def_path(cx, def_id, &paths::MUTEX_GUARD)\n         || match_def_path(cx, def_id, &paths::RWLOCK_READ_GUARD)"}, {"sha": "a2e9e07ac084f09750d4f9aa7f6a0f00d0331e15", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -14,6 +14,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(attrs::DEPRECATED_SEMVER),\n     LintId::of(attrs::MISMATCHED_TARGET_OS),\n     LintId::of(attrs::USELESS_ATTRIBUTE),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(bit_mask::BAD_BIT_MASK),"}, {"sha": "78b727f4cdf8c4f37657e60fc45deeb8d58ab782", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -52,6 +52,7 @@ store.register_lints(&[\n     attrs::INLINE_ALWAYS,\n     attrs::MISMATCHED_TARGET_OS,\n     attrs::USELESS_ATTRIBUTE,\n+    await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE,\n     await_holding_invalid::AWAIT_HOLDING_LOCK,\n     await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n     bit_mask::BAD_BIT_MASK,"}, {"sha": "7a881bfe3991265ea34c021512e42a783e1783a3", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -5,6 +5,7 @@\n store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec![\n     LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),"}, {"sha": "27c602818a68b83f949629d6ef6f5409aaf54f88", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -515,7 +515,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_late_pass(|| Box::new(utils::dump_hir::DumpHir));\n     store.register_late_pass(|| Box::new(utils::author::Author));\n-    store.register_late_pass(|| Box::new(await_holding_invalid::AwaitHolding));\n+    let await_holding_invalid_types = conf.await_holding_invalid_types.clone();\n+    store.register_late_pass(move || {\n+        Box::new(await_holding_invalid::AwaitHolding::new(\n+            await_holding_invalid_types.clone(),\n+        ))\n+    });\n     store.register_late_pass(|| Box::new(serde_api::SerdeApi));\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;"}, {"sha": "e6abe499b430d891ec49b68a9ad32e1f5e90ee9b", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -310,6 +310,8 @@ define_Conf! {\n     /// the slice pattern that is suggested. If more elements would be necessary, the lint is suppressed.\n     /// For example, `[_, _, _, e, ..]` is a slice pattern with 4 elements.\n     (max_suggested_slice_pattern_length: u64 = 3),\n+    /// Lint: AWAIT_HOLDING_INVALID_TYPE\n+    (await_holding_invalid_types: Vec<crate::utils::conf::DisallowedType> = Vec::new()),\n }\n \n /// Search for the configuration file."}, {"sha": "fbef5c4564b1bb6444016ec07b0ca11ca91bb5c6", "filename": "tests/ui-toml/await_holding_invalid_type/await_holding_invalid_type.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.rs?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -0,0 +1,41 @@\n+#![warn(clippy::await_holding_invalid_type)]\n+use std::net::Ipv4Addr;\n+\n+async fn bad() -> u32 {\n+    let _x = String::from(\"hello\");\n+    baz().await\n+}\n+\n+async fn bad_reason() -> u32 {\n+    let _x = Ipv4Addr::new(127, 0, 0, 1);\n+    baz().await\n+}\n+\n+async fn good() -> u32 {\n+    {\n+        let _x = String::from(\"hi!\");\n+        let _y = Ipv4Addr::new(127, 0, 0, 1);\n+    }\n+    baz().await;\n+    let _x = String::from(\"hi!\");\n+    47\n+}\n+\n+async fn baz() -> u32 {\n+    42\n+}\n+\n+#[allow(clippy::manual_async_fn)]\n+fn block_bad() -> impl std::future::Future<Output = u32> {\n+    async move {\n+        let _x = String::from(\"hi!\");\n+        baz().await\n+    }\n+}\n+\n+fn main() {\n+    good();\n+    bad();\n+    bad_reason();\n+    block_bad();\n+}"}, {"sha": "62c45b54634f4298060b729a3674e9d2bfe1468a", "filename": "tests/ui-toml/await_holding_invalid_type/await_holding_invalid_type.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fawait_holding_invalid_type.stderr?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -0,0 +1,25 @@\n+error: `std::string::String` may not be held across an `await` point per `clippy.toml`\n+  --> $DIR/await_holding_invalid_type.rs:5:9\n+   |\n+LL |     let _x = String::from(\"hello\");\n+   |         ^^\n+   |\n+   = note: `-D clippy::await-holding-invalid-type` implied by `-D warnings`\n+   = note: strings are bad\n+\n+error: `std::net::Ipv4Addr` may not be held across an `await` point per `clippy.toml`\n+  --> $DIR/await_holding_invalid_type.rs:10:9\n+   |\n+LL |     let _x = Ipv4Addr::new(127, 0, 0, 1);\n+   |         ^^\n+\n+error: `std::string::String` may not be held across an `await` point per `clippy.toml`\n+  --> $DIR/await_holding_invalid_type.rs:31:13\n+   |\n+LL |         let _x = String::from(\"hi!\");\n+   |             ^^\n+   |\n+   = note: strings are bad\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "79990096b84e0947281b3714c1142f03b33841bf", "filename": "tests/ui-toml/await_holding_invalid_type/clippy.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fawait_holding_invalid_type%2Fclippy.toml?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -0,0 +1,4 @@\n+await-holding-invalid-types = [\n+    { path = \"std::string::String\", reason = \"strings are bad\" },\n+    \"std::net::Ipv4Addr\",\n+]"}, {"sha": "f60afb8d4e3825b2a11fb94f382a6b6d5af9202d", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `max-suggested-slice-pattern-length`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `max-suggested-slice-pattern-length`, `await-holding-invalid-types`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}]}