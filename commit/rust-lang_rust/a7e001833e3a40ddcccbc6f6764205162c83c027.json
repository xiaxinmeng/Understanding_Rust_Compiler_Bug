{"sha": "a7e001833e3a40ddcccbc6f6764205162c83c027", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZTAwMTgzM2UzYTQwZGRjY2NiYzZmNjc2NDIwNTE2MmM4M2MwMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-17T06:19:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-17T06:19:38Z"}, "message": "Auto merge of #43878 - kennytm:fix-43869-put-impl-trait-out-of-the-loop, r=alexcrichton\n\nExclude `impl Trait` functions from everybody_loops.\n\nFixes #43869.\n\ncc #34511.", "tree": {"sha": "da3433acd67976593e31bbb63a882e3e87e3ebf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3433acd67976593e31bbb63a882e3e87e3ebf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7e001833e3a40ddcccbc6f6764205162c83c027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e001833e3a40ddcccbc6f6764205162c83c027", "html_url": "https://github.com/rust-lang/rust/commit/a7e001833e3a40ddcccbc6f6764205162c83c027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7e001833e3a40ddcccbc6f6764205162c83c027/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4072065345fb33ee6f4ada8cb127a2f0cade7ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4072065345fb33ee6f4ada8cb127a2f0cade7ce", "html_url": "https://github.com/rust-lang/rust/commit/e4072065345fb33ee6f4ada8cb127a2f0cade7ce"}, {"sha": "034cd20f528c88be114cbd10c9a28d971ac12acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/034cd20f528c88be114cbd10c9a28d971ac12acc", "html_url": "https://github.com/rust-lang/rust/commit/034cd20f528c88be114cbd10c9a28d971ac12acc"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "20f2a146b0b1584c1e83a7de8365eae64a5610c2", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a7e001833e3a40ddcccbc6f6764205162c83c027/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e001833e3a40ddcccbc6f6764205162c83c027/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=a7e001833e3a40ddcccbc6f6764205162c83c027", "patch": "@@ -620,6 +620,15 @@ impl UserIdentifiedItem {\n }\n \n // Note: Also used by librustdoc, see PR #43348. Consider moving this struct elsewhere.\n+//\n+// FIXME: Currently the `everybody_loops` transformation is not applied to:\n+//  * `const fn`, due to issue #43636 that `loop` is not supported for const evaluation. We are\n+//    waiting for miri to fix that.\n+//  * `impl Trait`, due to issue #43869 that functions returning impl Trait cannot be diverging.\n+//    Solving this may require `!` to implement every trait, which relies on the an even more\n+//    ambitious form of the closed RFC #1637. See also [#34511].\n+//\n+// [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n pub struct ReplaceBodyWithLoop {\n     within_static_or_const: bool,\n }\n@@ -635,14 +644,34 @@ impl ReplaceBodyWithLoop {\n         self.within_static_or_const = old_const;\n         ret\n     }\n+\n+    fn should_ignore_fn(ret_ty: &ast::FnDecl) -> bool {\n+        if let ast::FunctionRetTy::Ty(ref ty) = ret_ty.output {\n+            fn involves_impl_trait(ty: &ast::Ty) -> bool {\n+                match ty.node {\n+                    ast::TyKind::ImplTrait(_) => true,\n+                    ast::TyKind::Slice(ref subty) |\n+                    ast::TyKind::Array(ref subty, _) |\n+                    ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. }) |\n+                    ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. }) |\n+                    ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n+                    ast::TyKind::Tup(ref tys) => tys.iter().any(|subty| involves_impl_trait(subty)),\n+                    _ => false,\n+                }\n+            }\n+            involves_impl_trait(ty)\n+        } else {\n+            false\n+        }\n+    }\n }\n \n impl fold::Folder for ReplaceBodyWithLoop {\n     fn fold_item_kind(&mut self, i: ast::ItemKind) -> ast::ItemKind {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(_, _, ref constness, _, _, _) =>\n-                constness.node == ast::Constness::Const,\n+            ast::ItemKind::Fn(ref decl, _, ref constness, _, _, _) =>\n+                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_item_kind(i, s))\n@@ -651,8 +680,8 @@ impl fold::Folder for ReplaceBodyWithLoop {\n     fn fold_trait_item(&mut self, i: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n         let is_const = match i.node {\n             ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ast::MethodSig { ref constness, .. }, _) =>\n-                constness.node == ast::Constness::Const,\n+            ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref constness, .. }, _) =>\n+                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_trait_item(i, s))\n@@ -661,8 +690,8 @@ impl fold::Folder for ReplaceBodyWithLoop {\n     fn fold_impl_item(&mut self, i: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n         let is_const = match i.node {\n             ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ast::MethodSig { ref constness, .. }, _) =>\n-                constness.node == ast::Constness::Const,\n+            ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref constness, .. }, _) =>\n+                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_impl_item(i, s))"}, {"sha": "2d18e4be5328683f7591f043b3bce7557f537898", "filename": "src/test/rustdoc/issue-43869.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a7e001833e3a40ddcccbc6f6764205162c83c027/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e001833e3a40ddcccbc6f6764205162c83c027/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-43869.rs?ref=a7e001833e3a40ddcccbc6f6764205162c83c027", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+\n+pub fn g() -> impl Iterator<Item=u8> {\n+    Some(1u8).into_iter()\n+}\n+\n+pub fn h() -> (impl Iterator<Item=u8>) {\n+    Some(1u8).into_iter()\n+}\n+\n+pub fn i() -> impl Iterator<Item=u8> + 'static {\n+    Some(1u8).into_iter()\n+}\n+\n+pub fn j() -> impl Iterator<Item=u8> + Clone {\n+    Some(1u8).into_iter()\n+}\n+\n+// @has issue_43869/fn.g.html\n+// @has issue_43869/fn.h.html\n+// @has issue_43869/fn.i.html\n+// @has issue_43869/fn.j.html"}]}