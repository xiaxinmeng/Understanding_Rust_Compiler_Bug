{"sha": "eaddc3707520988f8bc2d267cb192d2f0c63ee80", "node_id": "C_kwDOAAsO6NoAKGVhZGRjMzcwNzUyMDk4OGY4YmMyZDI2N2NiMTkyZDJmMGM2M2VlODA", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-20T22:28:03Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-05-18T21:46:39Z"}, "message": "Take MIR dataflow analyses by mutable reference.", "tree": {"sha": "0ed197fa7a525c6543e08b8bae3fad983241dc47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed197fa7a525c6543e08b8bae3fad983241dc47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaddc3707520988f8bc2d267cb192d2f0c63ee80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaddc3707520988f8bc2d267cb192d2f0c63ee80", "html_url": "https://github.com/rust-lang/rust/commit/eaddc3707520988f8bc2d267cb192d2f0c63ee80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaddc3707520988f8bc2d267cb192d2f0c63ee80/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd030127cc68afec44a8d3f6341525dd34e50ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd030127cc68afec44a8d3f6341525dd34e50ae", "html_url": "https://github.com/rust-lang/rust/commit/fdd030127cc68afec44a8d3f6341525dd34e50ae"}], "stats": {"total": 779, "additions": 491, "deletions": 288}, "files": [{"sha": "9e0a9a3b6f447e47c156f1241f091acf362e7083", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -59,7 +59,7 @@ macro_rules! impl_visitable {\n             }\n \n             fn reconstruct_before_statement_effect(\n-                &self,\n+                &mut self,\n                 state: &mut Self::FlowState,\n                 stmt: &mir::Statement<'tcx>,\n                 loc: Location,\n@@ -69,7 +69,7 @@ macro_rules! impl_visitable {\n             }\n \n             fn reconstruct_statement_effect(\n-                &self,\n+                &mut self,\n                 state: &mut Self::FlowState,\n                 stmt: &mir::Statement<'tcx>,\n                 loc: Location,\n@@ -79,7 +79,7 @@ macro_rules! impl_visitable {\n             }\n \n             fn reconstruct_before_terminator_effect(\n-                &self,\n+                &mut self,\n                 state: &mut Self::FlowState,\n                 term: &mir::Terminator<'tcx>,\n                 loc: Location,\n@@ -89,7 +89,7 @@ macro_rules! impl_visitable {\n             }\n \n             fn reconstruct_terminator_effect(\n-                &self,\n+                &mut self,\n                 state: &mut Self::FlowState,\n                 term: &mir::Terminator<'tcx>,\n                 loc: Location,\n@@ -341,7 +341,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     type Idx = BorrowIndex;\n \n     fn before_statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -350,7 +350,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     }\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         stmt: &mir::Statement<'tcx>,\n         location: Location,\n@@ -398,7 +398,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     }\n \n     fn before_terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -407,7 +407,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n@@ -424,7 +424,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n         _return_places: CallReturnPlaces<'_, 'tcx>,"}, {"sha": "c00efdaa9ac96c265b5807df5c94fafb402fb516", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -372,7 +372,7 @@ fn do_mir_borrowck<'tcx>(\n     // Compute and report region errors, if any.\n     mbcx.report_region_errors(nll_errors);\n \n-    let results = BorrowckResults {\n+    let mut results = BorrowckResults {\n         ever_inits: flow_ever_inits,\n         uninits: flow_uninits,\n         borrows: flow_borrows,\n@@ -383,7 +383,7 @@ fn do_mir_borrowck<'tcx>(\n     rustc_mir_dataflow::visit_results(\n         body,\n         traversal::reverse_postorder(body).map(|(bb, _)| bb),\n-        &results,\n+        &mut results,\n         &mut mbcx,\n     );\n \n@@ -618,11 +618,12 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n // 2. loans made in overlapping scopes do not conflict\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n-impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {\n+impl<'cx, 'tcx, R> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx, R> for MirBorrowckCtxt<'cx, 'tcx> {\n     type FlowState = Flows<'cx, 'tcx>;\n \n     fn visit_statement_before_primary_effect(\n         &mut self,\n+        _results: &R,\n         flow_state: &Flows<'cx, 'tcx>,\n         stmt: &'cx Statement<'tcx>,\n         location: Location,\n@@ -692,6 +693,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n \n     fn visit_terminator_before_primary_effect(\n         &mut self,\n+        _results: &R,\n         flow_state: &Flows<'cx, 'tcx>,\n         term: &'cx Terminator<'tcx>,\n         loc: Location,\n@@ -800,6 +802,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n \n     fn visit_terminator_after_primary_effect(\n         &mut self,\n+        _results: &R,\n         flow_state: &Flows<'cx, 'tcx>,\n         term: &'cx Terminator<'tcx>,\n         loc: Location,"}, {"sha": "65fe164f8ec76ff353716d7c4f9de310a2865728", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -337,7 +337,7 @@ where\n     Q: Qualif,\n {\n     fn apply_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -346,7 +346,7 @@ where\n     }\n \n     fn apply_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -355,7 +355,7 @@ where\n     }\n \n     fn apply_call_return_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         block: BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,"}, {"sha": "c978bddfef540011e6de97f3852aeb61f16932e5", "filename": "compiler/rustc_mir_dataflow/src/framework/cursor.rs", "status": "modified", "additions": 97, "deletions": 15, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -1,18 +1,60 @@\n //! Random access inspection of the results of a dataflow analysis.\n \n-use crate::framework::BitSetExt;\n+use crate::{framework::BitSetExt, CloneAnalysis};\n \n-use std::borrow::Borrow;\n+use std::borrow::{Borrow, BorrowMut};\n use std::cmp::Ordering;\n \n #[cfg(debug_assertions)]\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::{self, BasicBlock, Location};\n \n-use super::{Analysis, Direction, Effect, EffectIndex, Results};\n+use super::{Analysis, Direction, Effect, EffectIndex, EntrySets, Results, ResultsCloned};\n+\n+// `AnalysisResults` is needed as an impl such as the following has an unconstrained type\n+// parameter:\n+// ```\n+// impl<'tcx, A, E, R> ResultsCursor<'_, 'tcx, A, R>\n+// where\n+//     A: Analysis<'tcx>,\n+//     E: Borrow<EntrySets<'tcx, A>>,\n+//     R: Results<'tcx, A, E>,\n+// {}\n+// ```\n+\n+/// A type representing the analysis results consumed by a `ResultsCursor`.\n+pub trait AnalysisResults<'tcx, A>: BorrowMut<Results<'tcx, A, Self::EntrySets>>\n+where\n+    A: Analysis<'tcx>,\n+{\n+    /// The type containing the entry sets for this `Results` type.\n+    ///\n+    /// Should be either `EntrySets<'tcx, A>` or `&EntrySets<'tcx, A>`.\n+    type EntrySets: Borrow<EntrySets<'tcx, A>>;\n+}\n+impl<'tcx, A, E> AnalysisResults<'tcx, A> for Results<'tcx, A, E>\n+where\n+    A: Analysis<'tcx>,\n+    E: Borrow<EntrySets<'tcx, A>>,\n+{\n+    type EntrySets = E;\n+}\n+impl<'a, 'tcx, A, E> AnalysisResults<'tcx, A> for &'a mut Results<'tcx, A, E>\n+where\n+    A: Analysis<'tcx>,\n+    E: Borrow<EntrySets<'tcx, A>>,\n+{\n+    type EntrySets = E;\n+}\n \n /// A `ResultsCursor` that borrows the underlying `Results`.\n-pub type ResultsRefCursor<'a, 'mir, 'tcx, A> = ResultsCursor<'mir, 'tcx, A, &'a Results<'tcx, A>>;\n+pub type ResultsRefCursor<'res, 'mir, 'tcx, A> =\n+    ResultsCursor<'mir, 'tcx, A, &'res mut Results<'tcx, A>>;\n+\n+/// A `ResultsCursor` which uses a cloned `Analysis` while borrowing the underlying `Results`. This\n+/// allows multiple cursors over the same `Results`.\n+pub type ResultsClonedCursor<'res, 'mir, 'tcx, A> =\n+    ResultsCursor<'mir, 'tcx, A, ResultsCloned<'res, 'tcx, A>>;\n \n /// Allows random access inspection of the results of a dataflow analysis.\n ///\n@@ -45,7 +87,38 @@ where\n impl<'mir, 'tcx, A, R> ResultsCursor<'mir, 'tcx, A, R>\n where\n     A: Analysis<'tcx>,\n-    R: Borrow<Results<'tcx, A>>,\n+{\n+    /// Returns the dataflow state at the current location.\n+    pub fn get(&self) -> &A::Domain {\n+        &self.state\n+    }\n+\n+    /// Returns the body this analysis was run on.\n+    pub fn body(&self) -> &'mir mir::Body<'tcx> {\n+        self.body\n+    }\n+\n+    /// Unwraps this cursor, returning the underlying `Results`.\n+    pub fn into_results(self) -> R {\n+        self.results\n+    }\n+}\n+\n+impl<'res, 'mir, 'tcx, A> ResultsCursor<'mir, 'tcx, A, ResultsCloned<'res, 'tcx, A>>\n+where\n+    A: Analysis<'tcx> + CloneAnalysis,\n+{\n+    /// Creates a new cursor over the same `Results`. Note that the cursor's position is *not*\n+    /// copied.\n+    pub fn new_cursor(&self) -> Self {\n+        Self::new(self.body, self.results.reclone_analysis())\n+    }\n+}\n+\n+impl<'mir, 'tcx, A, R> ResultsCursor<'mir, 'tcx, A, R>\n+where\n+    A: Analysis<'tcx>,\n+    R: AnalysisResults<'tcx, A>,\n {\n     /// Returns a new cursor that can inspect `results`.\n     pub fn new(body: &'mir mir::Body<'tcx>, results: R) -> Self {\n@@ -74,18 +147,28 @@ where\n     }\n \n     /// Returns the underlying `Results`.\n-    pub fn results(&self) -> &Results<'tcx, A> {\n-        &self.results.borrow()\n+    pub fn results(&mut self) -> &Results<'tcx, A, R::EntrySets> {\n+        self.results.borrow()\n+    }\n+\n+    /// Returns the underlying `Results`.\n+    pub fn mut_results(&mut self) -> &mut Results<'tcx, A, R::EntrySets> {\n+        self.results.borrow_mut()\n     }\n \n     /// Returns the `Analysis` used to generate the underlying `Results`.\n     pub fn analysis(&self) -> &A {\n         &self.results.borrow().analysis\n     }\n \n-    /// Returns the dataflow state at the current location.\n-    pub fn get(&self) -> &A::Domain {\n-        &self.state\n+    /// Returns the `Analysis` used to generate the underlying `Results`.\n+    pub fn mut_analysis(&mut self) -> &mut A {\n+        &mut self.results.borrow_mut().analysis\n+    }\n+\n+    /// Returns both the dataflow state at the current location and the `Analysis`.\n+    pub fn get_with_analysis(&mut self) -> (&A::Domain, &mut A) {\n+        (&self.state, &mut self.results.borrow_mut().analysis)\n     }\n \n     /// Resets the cursor to hold the entry set for the given basic block.\n@@ -97,7 +180,7 @@ where\n         #[cfg(debug_assertions)]\n         assert!(self.reachable_blocks.contains(block));\n \n-        self.state.clone_from(&self.results.borrow().entry_set_for_block(block));\n+        self.state.clone_from(self.results.borrow().entry_set_for_block(block));\n         self.pos = CursorPosition::block_entry(block);\n         self.state_needs_reset = false;\n     }\n@@ -186,7 +269,7 @@ where\n             )\n         };\n \n-        let analysis = &self.results.borrow().analysis;\n+        let analysis = &mut self.results.borrow_mut().analysis;\n         let target_effect_index = effect.at_index(target.statement_index);\n \n         A::Direction::apply_effects_in_range(\n@@ -205,8 +288,8 @@ where\n     ///\n     /// This can be used, e.g., to apply the call return effect directly to the cursor without\n     /// creating an extra copy of the dataflow state.\n-    pub fn apply_custom_effect(&mut self, f: impl FnOnce(&A, &mut A::Domain)) {\n-        f(&self.results.borrow().analysis, &mut self.state);\n+    pub fn apply_custom_effect(&mut self, f: impl FnOnce(&mut A, &mut A::Domain)) {\n+        f(&mut self.results.borrow_mut().analysis, &mut self.state);\n         self.state_needs_reset = true;\n     }\n }\n@@ -215,7 +298,6 @@ impl<'mir, 'tcx, A, R> ResultsCursor<'mir, 'tcx, A, R>\n where\n     A: crate::GenKillAnalysis<'tcx>,\n     A::Domain: BitSetExt<A::Idx>,\n-    R: Borrow<Results<'tcx, A>>,\n {\n     pub fn contains(&self, elem: A::Idx) -> bool {\n         self.get().contains(elem)"}, {"sha": "f6100a90a046488f64800bd2599bbcc16d716ee2", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -16,7 +16,7 @@ pub trait Direction {\n     ///\n     /// `effects.start()` must precede or equal `effects.end()` in this direction.\n     fn apply_effects_in_range<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -25,15 +25,15 @@ pub trait Direction {\n         A: Analysis<'tcx>;\n \n     fn apply_effects_in_block<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n     ) where\n         A: Analysis<'tcx>;\n \n     fn gen_kill_effects_in_block<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -44,13 +44,13 @@ pub trait Direction {\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n-        results: &R,\n-        vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = F>,\n+        results: &mut R,\n+        vis: &mut impl ResultsVisitor<'mir, 'tcx, R, FlowState = F>,\n     ) where\n         R: ResultsVisitable<'tcx, FlowState = F>;\n \n     fn join_state_into_successors_of<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n         exit_state: &mut A::Domain,\n@@ -67,7 +67,7 @@ impl Direction for Backward {\n     const IS_FORWARD: bool = false;\n \n     fn apply_effects_in_block<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -87,7 +87,7 @@ impl Direction for Backward {\n     }\n \n     fn gen_kill_effects_in_block<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -107,7 +107,7 @@ impl Direction for Backward {\n     }\n \n     fn apply_effects_in_range<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -187,36 +187,36 @@ impl Direction for Backward {\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n-        results: &R,\n-        vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = F>,\n+        results: &mut R,\n+        vis: &mut impl ResultsVisitor<'mir, 'tcx, R, FlowState = F>,\n     ) where\n         R: ResultsVisitable<'tcx, FlowState = F>,\n     {\n         results.reset_to_block_entry(state, block);\n \n-        vis.visit_block_end(&state, block_data, block);\n+        vis.visit_block_end(results, &state, block_data, block);\n \n         // Terminator\n         let loc = Location { block, statement_index: block_data.statements.len() };\n         let term = block_data.terminator();\n         results.reconstruct_before_terminator_effect(state, term, loc);\n-        vis.visit_terminator_before_primary_effect(state, term, loc);\n+        vis.visit_terminator_before_primary_effect(results, state, term, loc);\n         results.reconstruct_terminator_effect(state, term, loc);\n-        vis.visit_terminator_after_primary_effect(state, term, loc);\n+        vis.visit_terminator_after_primary_effect(results, state, term, loc);\n \n         for (statement_index, stmt) in block_data.statements.iter().enumerate().rev() {\n             let loc = Location { block, statement_index };\n             results.reconstruct_before_statement_effect(state, stmt, loc);\n-            vis.visit_statement_before_primary_effect(state, stmt, loc);\n+            vis.visit_statement_before_primary_effect(results, state, stmt, loc);\n             results.reconstruct_statement_effect(state, stmt, loc);\n-            vis.visit_statement_after_primary_effect(state, stmt, loc);\n+            vis.visit_statement_after_primary_effect(results, state, stmt, loc);\n         }\n \n-        vis.visit_block_start(state, block_data, block);\n+        vis.visit_block_start(results, state, block_data, block);\n     }\n \n     fn join_state_into_successors_of<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         _tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n         exit_state: &mut A::Domain,\n@@ -319,7 +319,7 @@ impl Direction for Forward {\n     const IS_FORWARD: bool = true;\n \n     fn apply_effects_in_block<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -339,7 +339,7 @@ impl Direction for Forward {\n     }\n \n     fn gen_kill_effects_in_block<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -359,7 +359,7 @@ impl Direction for Forward {\n     }\n \n     fn apply_effects_in_range<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n@@ -435,35 +435,35 @@ impl Direction for Forward {\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n-        results: &R,\n-        vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = F>,\n+        results: &mut R,\n+        vis: &mut impl ResultsVisitor<'mir, 'tcx, R, FlowState = F>,\n     ) where\n         R: ResultsVisitable<'tcx, FlowState = F>,\n     {\n         results.reset_to_block_entry(state, block);\n \n-        vis.visit_block_start(state, block_data, block);\n+        vis.visit_block_start(results, state, block_data, block);\n \n         for (statement_index, stmt) in block_data.statements.iter().enumerate() {\n             let loc = Location { block, statement_index };\n             results.reconstruct_before_statement_effect(state, stmt, loc);\n-            vis.visit_statement_before_primary_effect(state, stmt, loc);\n+            vis.visit_statement_before_primary_effect(results, state, stmt, loc);\n             results.reconstruct_statement_effect(state, stmt, loc);\n-            vis.visit_statement_after_primary_effect(state, stmt, loc);\n+            vis.visit_statement_after_primary_effect(results, state, stmt, loc);\n         }\n \n         let loc = Location { block, statement_index: block_data.statements.len() };\n         let term = block_data.terminator();\n         results.reconstruct_before_terminator_effect(state, term, loc);\n-        vis.visit_terminator_before_primary_effect(state, term, loc);\n+        vis.visit_terminator_before_primary_effect(results, state, term, loc);\n         results.reconstruct_terminator_effect(state, term, loc);\n-        vis.visit_terminator_after_primary_effect(state, term, loc);\n+        vis.visit_terminator_after_primary_effect(results, state, term, loc);\n \n-        vis.visit_block_end(state, block_data, block);\n+        vis.visit_block_end(results, state, block_data, block);\n     }\n \n     fn join_state_into_successors_of<'tcx, A>(\n-        analysis: &A,\n+        analysis: &mut A,\n         _tcx: TyCtxt<'tcx>,\n         _body: &mir::Body<'tcx>,\n         exit_state: &mut A::Domain,"}, {"sha": "4bdfa35fc708bb5c4a83da5c4a8496d84f43f382", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 83, "deletions": 19, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -5,7 +5,9 @@ use crate::errors::{\n };\n use crate::framework::BitSetExt;\n \n+use std::borrow::Borrow;\n use std::ffi::OsString;\n+use std::marker::PhantomData;\n use std::path::PathBuf;\n \n use rustc_ast as ast;\n@@ -22,54 +24,108 @@ use rustc_span::symbol::{sym, Symbol};\n use super::fmt::DebugWithContext;\n use super::graphviz;\n use super::{\n-    visit_results, Analysis, Direction, GenKill, GenKillAnalysis, GenKillSet, JoinSemiLattice,\n-    ResultsCursor, ResultsVisitor,\n+    visit_results, Analysis, AnalysisDomain, CloneAnalysis, Direction, GenKill, GenKillAnalysis,\n+    GenKillSet, JoinSemiLattice, ResultsClonedCursor, ResultsCursor, ResultsRefCursor,\n+    ResultsVisitor,\n };\n \n+pub type EntrySets<'tcx, A> = IndexVec<BasicBlock, <A as AnalysisDomain<'tcx>>::Domain>;\n+\n /// A dataflow analysis that has converged to fixpoint.\n-pub struct Results<'tcx, A>\n+pub struct Results<'tcx, A, E = EntrySets<'tcx, A>>\n where\n     A: Analysis<'tcx>,\n {\n     pub analysis: A,\n-    pub(super) entry_sets: IndexVec<BasicBlock, A::Domain>,\n+    pub(super) entry_sets: E,\n+    pub(super) _marker: PhantomData<&'tcx ()>,\n }\n \n-impl<'tcx, A> Results<'tcx, A>\n+/// `Results` type with a cloned `Analysis` and borrowed entry sets.\n+pub type ResultsCloned<'res, 'tcx, A> = Results<'tcx, A, &'res EntrySets<'tcx, A>>;\n+\n+impl<'tcx, A, E> Results<'tcx, A, E>\n where\n     A: Analysis<'tcx>,\n+    E: Borrow<EntrySets<'tcx, A>>,\n {\n     /// Creates a `ResultsCursor` that can inspect these `Results`.\n     pub fn into_results_cursor<'mir>(\n         self,\n         body: &'mir mir::Body<'tcx>,\n-    ) -> ResultsCursor<'mir, 'tcx, A> {\n+    ) -> ResultsCursor<'mir, 'tcx, A, Self> {\n         ResultsCursor::new(body, self)\n     }\n \n     /// Gets the dataflow state for the given block.\n     pub fn entry_set_for_block(&self, block: BasicBlock) -> &A::Domain {\n-        &self.entry_sets[block]\n+        &self.entry_sets.borrow()[block]\n     }\n \n     pub fn visit_with<'mir>(\n-        &self,\n+        &mut self,\n         body: &'mir mir::Body<'tcx>,\n         blocks: impl IntoIterator<Item = BasicBlock>,\n-        vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = A::Domain>,\n+        vis: &mut impl ResultsVisitor<'mir, 'tcx, Self, FlowState = A::Domain>,\n     ) {\n         visit_results(body, blocks, self, vis)\n     }\n \n     pub fn visit_reachable_with<'mir>(\n-        &self,\n+        &mut self,\n         body: &'mir mir::Body<'tcx>,\n-        vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = A::Domain>,\n+        vis: &mut impl ResultsVisitor<'mir, 'tcx, Self, FlowState = A::Domain>,\n     ) {\n         let blocks = mir::traversal::reachable(body);\n         visit_results(body, blocks.map(|(bb, _)| bb), self, vis)\n     }\n }\n+impl<'tcx, A> Results<'tcx, A>\n+where\n+    A: Analysis<'tcx>,\n+{\n+    /// Creates a `ResultsCursor` that can inspect these `Results`.\n+    pub fn as_results_cursor<'a, 'mir>(\n+        &'a mut self,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> ResultsRefCursor<'a, 'mir, 'tcx, A> {\n+        ResultsCursor::new(body, self)\n+    }\n+}\n+impl<'tcx, A> Results<'tcx, A>\n+where\n+    A: Analysis<'tcx> + CloneAnalysis,\n+{\n+    /// Creates a new `Results` type with a cloned `Analysis` and borrowed entry sets.\n+    pub fn clone_analysis(&self) -> ResultsCloned<'_, 'tcx, A> {\n+        Results {\n+            analysis: self.analysis.clone_analysis(),\n+            entry_sets: &self.entry_sets,\n+            _marker: PhantomData,\n+        }\n+    }\n+\n+    /// Creates a `ResultsCursor` that can inspect these `Results`.\n+    pub fn cloned_results_cursor<'mir>(\n+        &self,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> ResultsClonedCursor<'_, 'mir, 'tcx, A> {\n+        self.clone_analysis().into_results_cursor(body)\n+    }\n+}\n+impl<'res, 'tcx, A> Results<'tcx, A, &'res EntrySets<'tcx, A>>\n+where\n+    A: Analysis<'tcx> + CloneAnalysis,\n+{\n+    /// Creates a new `Results` type with a cloned `Analysis` and borrowed entry sets.\n+    pub fn reclone_analysis(&self) -> Self {\n+        Results {\n+            analysis: self.analysis.clone_analysis(),\n+            entry_sets: self.entry_sets,\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n \n /// A solver for dataflow problems.\n pub struct Engine<'a, 'tcx, A>\n@@ -98,7 +154,7 @@ where\n     T: Idx,\n {\n     /// Creates a new `Engine` to solve a gen-kill dataflow problem.\n-    pub fn new_gen_kill(tcx: TyCtxt<'tcx>, body: &'a mir::Body<'tcx>, analysis: A) -> Self {\n+    pub fn new_gen_kill(tcx: TyCtxt<'tcx>, body: &'a mir::Body<'tcx>, mut analysis: A) -> Self {\n         // If there are no back-edges in the control-flow graph, we only ever need to apply the\n         // transfer function for each block exactly once (assuming that we process blocks in RPO).\n         //\n@@ -114,7 +170,7 @@ where\n \n         for (block, block_data) in body.basic_blocks.iter_enumerated() {\n             let trans = &mut trans_for_block[block];\n-            A::Direction::gen_kill_effects_in_block(&analysis, trans, block, block_data);\n+            A::Direction::gen_kill_effects_in_block(&mut analysis, trans, block, block_data);\n         }\n \n         let apply_trans = Box::new(move |bb: BasicBlock, state: &mut A::Domain| {\n@@ -171,7 +227,13 @@ where\n         A::Domain: DebugWithContext<A>,\n     {\n         let Engine {\n-            analysis, body, mut entry_sets, tcx, apply_trans_for_block, pass_name, ..\n+            mut analysis,\n+            body,\n+            mut entry_sets,\n+            tcx,\n+            apply_trans_for_block,\n+            pass_name,\n+            ..\n         } = self;\n \n         let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body.basic_blocks.len());\n@@ -203,11 +265,13 @@ where\n             // Apply the block transfer function, using the cached one if it exists.\n             match &apply_trans_for_block {\n                 Some(apply) => apply(bb, &mut state),\n-                None => A::Direction::apply_effects_in_block(&analysis, &mut state, bb, bb_data),\n+                None => {\n+                    A::Direction::apply_effects_in_block(&mut analysis, &mut state, bb, bb_data)\n+                }\n             }\n \n             A::Direction::join_state_into_successors_of(\n-                &analysis,\n+                &mut analysis,\n                 tcx,\n                 body,\n                 &mut state,\n@@ -221,9 +285,9 @@ where\n             );\n         }\n \n-        let results = Results { analysis, entry_sets };\n+        let mut results = Results { analysis, entry_sets, _marker: PhantomData };\n \n-        let res = write_graphviz_results(tcx, &body, &results, pass_name);\n+        let res = write_graphviz_results(tcx, body, &mut results, pass_name);\n         if let Err(e) = res {\n             error!(\"Failed to write graphviz dataflow results: {}\", e);\n         }\n@@ -239,7 +303,7 @@ where\n fn write_graphviz_results<'tcx, A>(\n     tcx: TyCtxt<'tcx>,\n     body: &mir::Body<'tcx>,\n-    results: &Results<'tcx, A>,\n+    results: &mut Results<'tcx, A>,\n     pass_name: Option<&'static str>,\n ) -> std::io::Result<()>\n where"}, {"sha": "e331533c37103c3e2ca1cc233545f727965f7314", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 52, "deletions": 46, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -1,6 +1,7 @@\n //! A helpful diagram for debugging dataflow problems.\n \n use std::borrow::Cow;\n+use std::cell::RefCell;\n use std::sync::OnceLock;\n use std::{io, ops, str};\n \n@@ -28,23 +29,27 @@ impl OutputStyle {\n     }\n }\n \n-pub struct Formatter<'a, 'tcx, A>\n+pub struct Formatter<'res, 'mir, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n-    body: &'a Body<'tcx>,\n-    results: &'a Results<'tcx, A>,\n+    body: &'mir Body<'tcx>,\n+    results: RefCell<&'res mut Results<'tcx, A>>,\n     style: OutputStyle,\n     reachable: BitSet<BasicBlock>,\n }\n \n-impl<'a, 'tcx, A> Formatter<'a, 'tcx, A>\n+impl<'res, 'mir, 'tcx, A> Formatter<'res, 'mir, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n-    pub fn new(body: &'a Body<'tcx>, results: &'a Results<'tcx, A>, style: OutputStyle) -> Self {\n+    pub fn new(\n+        body: &'mir Body<'tcx>,\n+        results: &'res mut Results<'tcx, A>,\n+        style: OutputStyle,\n+    ) -> Self {\n         let reachable = mir::traversal::reachable_as_bitset(body);\n-        Formatter { body, results, style, reachable }\n+        Formatter { body, results: results.into(), style, reachable }\n     }\n }\n \n@@ -64,7 +69,7 @@ fn dataflow_successors(body: &Body<'_>, bb: BasicBlock) -> Vec<CfgEdge> {\n         .collect()\n }\n \n-impl<'tcx, A> dot::Labeller<'_> for Formatter<'_, 'tcx, A>\n+impl<'tcx, A> dot::Labeller<'_> for Formatter<'_, '_, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -83,13 +88,14 @@ where\n \n     fn node_label(&self, block: &Self::Node) -> dot::LabelText<'_> {\n         let mut label = Vec::new();\n+        let mut results = self.results.borrow_mut();\n         let mut fmt = BlockFormatter {\n-            results: ResultsRefCursor::new(self.body, self.results),\n+            results: results.as_results_cursor(self.body),\n             style: self.style,\n             bg: Background::Light,\n         };\n \n-        fmt.write_node_label(&mut label, self.body, *block).unwrap();\n+        fmt.write_node_label(&mut label, *block).unwrap();\n         dot::LabelText::html(String::from_utf8(label).unwrap())\n     }\n \n@@ -103,7 +109,7 @@ where\n     }\n }\n \n-impl<'a, 'tcx, A> dot::GraphWalk<'a> for Formatter<'a, 'tcx, A>\n+impl<'mir, 'tcx, A> dot::GraphWalk<'mir> for Formatter<'_, 'mir, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n@@ -137,16 +143,16 @@ where\n     }\n }\n \n-struct BlockFormatter<'a, 'tcx, A>\n+struct BlockFormatter<'res, 'mir, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n-    results: ResultsRefCursor<'a, 'a, 'tcx, A>,\n+    results: ResultsRefCursor<'res, 'mir, 'tcx, A>,\n     bg: Background,\n     style: OutputStyle,\n }\n \n-impl<'a, 'tcx, A> BlockFormatter<'a, 'tcx, A>\n+impl<'res, 'mir, 'tcx, A> BlockFormatter<'res, 'mir, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -159,12 +165,7 @@ where\n         bg\n     }\n \n-    fn write_node_label(\n-        &mut self,\n-        w: &mut impl io::Write,\n-        body: &'a Body<'tcx>,\n-        block: BasicBlock,\n-    ) -> io::Result<()> {\n+    fn write_node_label(&mut self, w: &mut impl io::Write, block: BasicBlock) -> io::Result<()> {\n         //   Sample output:\n         //   +-+-----------------------------------------------+\n         // A |                      bb4                        |\n@@ -215,11 +216,11 @@ where\n         self.write_row_with_full_state(w, \"\", \"(on start)\")?;\n \n         // D + E: Statement and terminator transfer functions\n-        self.write_statements_and_terminator(w, body, block)?;\n+        self.write_statements_and_terminator(w, block)?;\n \n         // F: State at end of block\n \n-        let terminator = body[block].terminator();\n+        let terminator = self.results.body()[block].terminator();\n \n         // Write the full dataflow state immediately after the terminator if it differs from the\n         // state at block entry.\n@@ -389,10 +390,14 @@ where\n     fn write_statements_and_terminator(\n         &mut self,\n         w: &mut impl io::Write,\n-        body: &'a Body<'tcx>,\n         block: BasicBlock,\n     ) -> io::Result<()> {\n-        let diffs = StateDiffCollector::run(body, block, self.results.results(), self.style);\n+        let diffs = StateDiffCollector::run(\n+            self.results.body(),\n+            block,\n+            self.results.mut_results(),\n+            self.style,\n+        );\n \n         let mut diffs_before = diffs.before.map(|v| v.into_iter());\n         let mut diffs_after = diffs.after.into_iter();\n@@ -401,7 +406,7 @@ where\n             if A::Direction::IS_FORWARD { it.next().unwrap() } else { it.next_back().unwrap() }\n         };\n \n-        for (i, statement) in body[block].statements.iter().enumerate() {\n+        for (i, statement) in self.results.body()[block].statements.iter().enumerate() {\n             let statement_str = format!(\"{statement:?}\");\n             let index_str = format!(\"{i}\");\n \n@@ -423,7 +428,7 @@ where\n         assert!(diffs_after.is_empty());\n         assert!(diffs_before.as_ref().map_or(true, ExactSizeIterator::is_empty));\n \n-        let terminator = body[block].terminator();\n+        let terminator = self.results.body()[block].terminator();\n         let mut terminator_str = String::new();\n         terminator.kind.fmt_head(&mut terminator_str).unwrap();\n \n@@ -492,29 +497,24 @@ where\n     }\n }\n \n-struct StateDiffCollector<'a, 'tcx, A>\n-where\n-    A: Analysis<'tcx>,\n-{\n-    analysis: &'a A,\n-    prev_state: A::Domain,\n+struct StateDiffCollector<D> {\n+    prev_state: D,\n     before: Option<Vec<String>>,\n     after: Vec<String>,\n }\n \n-impl<'a, 'tcx, A> StateDiffCollector<'a, 'tcx, A>\n-where\n-    A: Analysis<'tcx>,\n-    A::Domain: DebugWithContext<A>,\n-{\n-    fn run(\n-        body: &'a mir::Body<'tcx>,\n+impl<D> StateDiffCollector<D> {\n+    fn run<'tcx, A>(\n+        body: &mir::Body<'tcx>,\n         block: BasicBlock,\n-        results: &'a Results<'tcx, A>,\n+        results: &mut Results<'tcx, A>,\n         style: OutputStyle,\n-    ) -> Self {\n+    ) -> Self\n+    where\n+        A: Analysis<'tcx, Domain = D>,\n+        D: DebugWithContext<A>,\n+    {\n         let mut collector = StateDiffCollector {\n-            analysis: &results.analysis,\n             prev_state: results.analysis.bottom_value(body),\n             after: vec![],\n             before: (style == OutputStyle::BeforeAndAfter).then_some(vec![]),\n@@ -525,7 +525,7 @@ where\n     }\n }\n \n-impl<'a, 'tcx, A> ResultsVisitor<'a, 'tcx> for StateDiffCollector<'a, 'tcx, A>\n+impl<'tcx, A> ResultsVisitor<'_, 'tcx, Results<'tcx, A>> for StateDiffCollector<A::Domain>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -534,6 +534,7 @@ where\n \n     fn visit_block_start(\n         &mut self,\n+        _results: &Results<'tcx, A>,\n         state: &Self::FlowState,\n         _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n@@ -545,6 +546,7 @@ where\n \n     fn visit_block_end(\n         &mut self,\n+        _results: &Results<'tcx, A>,\n         state: &Self::FlowState,\n         _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n@@ -556,45 +558,49 @@ where\n \n     fn visit_statement_before_primary_effect(\n         &mut self,\n+        results: &Results<'tcx, A>,\n         state: &Self::FlowState,\n         _statement: &mir::Statement<'tcx>,\n         _location: Location,\n     ) {\n         if let Some(before) = self.before.as_mut() {\n-            before.push(diff_pretty(state, &self.prev_state, self.analysis));\n+            before.push(diff_pretty(state, &self.prev_state, &results.analysis));\n             self.prev_state.clone_from(state)\n         }\n     }\n \n     fn visit_statement_after_primary_effect(\n         &mut self,\n+        results: &Results<'tcx, A>,\n         state: &Self::FlowState,\n         _statement: &mir::Statement<'tcx>,\n         _location: Location,\n     ) {\n-        self.after.push(diff_pretty(state, &self.prev_state, self.analysis));\n+        self.after.push(diff_pretty(state, &self.prev_state, &results.analysis));\n         self.prev_state.clone_from(state)\n     }\n \n     fn visit_terminator_before_primary_effect(\n         &mut self,\n+        results: &Results<'tcx, A>,\n         state: &Self::FlowState,\n         _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n         if let Some(before) = self.before.as_mut() {\n-            before.push(diff_pretty(state, &self.prev_state, self.analysis));\n+            before.push(diff_pretty(state, &self.prev_state, &results.analysis));\n             self.prev_state.clone_from(state)\n         }\n     }\n \n     fn visit_terminator_after_primary_effect(\n         &mut self,\n+        results: &Results<'tcx, A>,\n         state: &Self::FlowState,\n         _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n-        self.after.push(diff_pretty(state, &self.prev_state, self.analysis));\n+        self.after.push(diff_pretty(state, &self.prev_state, &results.analysis));\n         self.prev_state.clone_from(state)\n     }\n }"}, {"sha": "e5e9c1507ba8b854b257f00417fd6bb31d8a96cb", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -45,9 +45,9 @@ pub mod graphviz;\n pub mod lattice;\n mod visitor;\n \n-pub use self::cursor::{ResultsCursor, ResultsRefCursor};\n+pub use self::cursor::{ResultsClonedCursor, ResultsCursor, ResultsRefCursor};\n pub use self::direction::{Backward, Direction, Forward};\n-pub use self::engine::{Engine, Results};\n+pub use self::engine::{Engine, EntrySets, Results, ResultsCloned};\n pub use self::lattice::{JoinSemiLattice, MeetSemiLattice};\n pub use self::visitor::{visit_results, ResultsVisitable, ResultsVisitor};\n \n@@ -146,7 +146,7 @@ pub trait AnalysisDomain<'tcx> {\n pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// Updates the current dataflow state with the effect of evaluating a statement.\n     fn apply_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -159,7 +159,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// *part* of the effect of a statement (e.g. for two-phase borrows). As a general rule,\n     /// analyses should not implement this without also implementing `apply_statement_effect`.\n     fn apply_before_statement_effect(\n-        &self,\n+        &mut self,\n         _state: &mut Self::Domain,\n         _statement: &mir::Statement<'tcx>,\n         _location: Location,\n@@ -173,7 +173,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// `InitializedPlaces` analyses, the return place for a function call is not marked as\n     /// initialized here.\n     fn apply_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -186,7 +186,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// *part* of the effect of a terminator (e.g. for two-phase borrows). As a general rule,\n     /// analyses should not implement this without also implementing `apply_terminator_effect`.\n     fn apply_before_terminator_effect(\n-        &self,\n+        &mut self,\n         _state: &mut Self::Domain,\n         _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n@@ -201,7 +201,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// This is separate from `apply_terminator_effect` to properly track state across unwind\n     /// edges.\n     fn apply_call_return_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         block: BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -214,7 +214,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     ///\n     /// By default, no effects happen.\n     fn apply_yield_resume_effect(\n-        &self,\n+        &mut self,\n         _state: &mut Self::Domain,\n         _resume_block: BasicBlock,\n         _resume_place: mir::Place<'tcx>,\n@@ -235,7 +235,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// engine doesn't need to clone the exit state for a block unless\n     /// `SwitchIntEdgeEffects::apply` is actually called.\n     fn apply_switch_int_edge_effects(\n-        &self,\n+        &mut self,\n         _block: BasicBlock,\n         _discr: &mir::Operand<'tcx>,\n         _apply_edge_effects: &mut impl SwitchIntEdgeEffects<Self::Domain>,\n@@ -269,6 +269,21 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     }\n }\n \n+/// Defines an `Analysis` which can be cloned for use in multiple `ResultsCursor`s or\n+/// `ResultsVisitor`s. Note this need not be a full clone, only enough of one to be used with a new\n+/// `ResultsCursor` or `ResultsVisitor`\n+pub trait CloneAnalysis {\n+    fn clone_analysis(&self) -> Self;\n+}\n+impl<'tcx, A> CloneAnalysis for A\n+where\n+    A: Analysis<'tcx> + Copy,\n+{\n+    fn clone_analysis(&self) -> Self {\n+        *self\n+    }\n+}\n+\n /// A gen/kill dataflow problem.\n ///\n /// Each method in this trait has a corresponding one in `Analysis`. However, these methods only\n@@ -282,15 +297,15 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n \n     /// See `Analysis::apply_statement_effect`.\n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n     );\n \n     /// See `Analysis::apply_before_statement_effect`.\n     fn before_statement_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _statement: &mir::Statement<'tcx>,\n         _location: Location,\n@@ -299,15 +314,15 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n \n     /// See `Analysis::apply_terminator_effect`.\n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     );\n \n     /// See `Analysis::apply_before_terminator_effect`.\n     fn before_terminator_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n@@ -318,15 +333,15 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n \n     /// See `Analysis::apply_call_return_effect`.\n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         block: BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n     );\n \n     /// See `Analysis::apply_yield_resume_effect`.\n     fn yield_resume_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _resume_block: BasicBlock,\n         _resume_place: mir::Place<'tcx>,\n@@ -335,7 +350,7 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n \n     /// See `Analysis::apply_switch_int_edge_effects`.\n     fn switch_int_edge_effects<G: GenKill<Self::Idx>>(\n-        &self,\n+        &mut self,\n         _block: BasicBlock,\n         _discr: &mir::Operand<'tcx>,\n         _edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n@@ -349,7 +364,7 @@ where\n     A::Domain: GenKill<A::Idx> + BitSetExt<A::Idx>,\n {\n     fn apply_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut A::Domain,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -358,7 +373,7 @@ where\n     }\n \n     fn apply_before_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut A::Domain,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -367,7 +382,7 @@ where\n     }\n \n     fn apply_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut A::Domain,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -376,7 +391,7 @@ where\n     }\n \n     fn apply_before_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut A::Domain,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -387,7 +402,7 @@ where\n     /* Edge-specific effects */\n \n     fn apply_call_return_effect(\n-        &self,\n+        &mut self,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -396,7 +411,7 @@ where\n     }\n \n     fn apply_yield_resume_effect(\n-        &self,\n+        &mut self,\n         state: &mut A::Domain,\n         resume_block: BasicBlock,\n         resume_place: mir::Place<'tcx>,\n@@ -405,7 +420,7 @@ where\n     }\n \n     fn apply_switch_int_edge_effects(\n-        &self,\n+        &mut self,\n         block: BasicBlock,\n         discr: &mir::Operand<'tcx>,\n         edge_effects: &mut impl SwitchIntEdgeEffects<A::Domain>,"}, {"sha": "45c2fe55aca9fa8a1646fbf31c5ad75c90eceddc", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -179,7 +179,7 @@ impl<'tcx, D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n \n impl<'tcx, D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n     fn apply_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         _statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -189,7 +189,7 @@ impl<'tcx, D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n     }\n \n     fn apply_before_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         _statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -199,7 +199,7 @@ impl<'tcx, D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n     }\n \n     fn apply_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -209,7 +209,7 @@ impl<'tcx, D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n     }\n \n     fn apply_before_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -219,7 +219,7 @@ impl<'tcx, D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n     }\n \n     fn apply_call_return_effect(\n-        &self,\n+        &mut self,\n         _state: &mut Self::Domain,\n         _block: BasicBlock,\n         _return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -266,7 +266,8 @@ fn test_cursor<D: Direction>(analysis: MockAnalysis<'_, D>) {\n     let body = analysis.body;\n \n     let mut cursor =\n-        Results { entry_sets: analysis.mock_entry_sets(), analysis }.into_results_cursor(body);\n+        Results { entry_sets: analysis.mock_entry_sets(), analysis, _marker: PhantomData }\n+            .into_results_cursor(body);\n \n     cursor.allow_unreachable();\n "}, {"sha": "76a729827813e6850e487729e54cba7c82c0fb07", "filename": "compiler/rustc_mir_dataflow/src/framework/visitor.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -1,16 +1,18 @@\n+use std::borrow::Borrow;\n+\n use rustc_middle::mir::{self, BasicBlock, Location};\n \n-use super::{Analysis, Direction, Results};\n+use super::{Analysis, Direction, EntrySets, Results};\n \n /// Calls the corresponding method in `ResultsVisitor` for every location in a `mir::Body` with the\n /// dataflow state at that location.\n-pub fn visit_results<'mir, 'tcx, F, V>(\n+pub fn visit_results<'mir, 'tcx, F, R>(\n     body: &'mir mir::Body<'tcx>,\n     blocks: impl IntoIterator<Item = BasicBlock>,\n-    results: &V,\n-    vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = F>,\n+    results: &mut R,\n+    vis: &mut impl ResultsVisitor<'mir, 'tcx, R, FlowState = F>,\n ) where\n-    V: ResultsVisitable<'tcx, FlowState = F>,\n+    R: ResultsVisitable<'tcx, FlowState = F>,\n {\n     let mut state = results.new_flow_state(body);\n \n@@ -22,15 +24,18 @@ pub fn visit_results<'mir, 'tcx, F, V>(\n         assert!(reachable_blocks.contains(block));\n \n         let block_data = &body[block];\n-        V::Direction::visit_results_in_block(&mut state, block, block_data, results, vis);\n+        R::Direction::visit_results_in_block(&mut state, block, block_data, results, vis);\n     }\n }\n \n-pub trait ResultsVisitor<'mir, 'tcx> {\n+/// A visitor over the results of an `Analysis`. The type parameter `R` is the results type being\n+/// visited.\n+pub trait ResultsVisitor<'mir, 'tcx, R> {\n     type FlowState;\n \n     fn visit_block_start(\n         &mut self,\n+        _results: &R,\n         _state: &Self::FlowState,\n         _block_data: &'mir mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n@@ -41,6 +46,7 @@ pub trait ResultsVisitor<'mir, 'tcx> {\n     /// its `statement_effect`.\n     fn visit_statement_before_primary_effect(\n         &mut self,\n+        _results: &R,\n         _state: &Self::FlowState,\n         _statement: &'mir mir::Statement<'tcx>,\n         _location: Location,\n@@ -51,6 +57,7 @@ pub trait ResultsVisitor<'mir, 'tcx> {\n     /// statement applied to `state`.\n     fn visit_statement_after_primary_effect(\n         &mut self,\n+        _results: &R,\n         _state: &Self::FlowState,\n         _statement: &'mir mir::Statement<'tcx>,\n         _location: Location,\n@@ -61,6 +68,7 @@ pub trait ResultsVisitor<'mir, 'tcx> {\n     /// its `terminator_effect`.\n     fn visit_terminator_before_primary_effect(\n         &mut self,\n+        _results: &R,\n         _state: &Self::FlowState,\n         _terminator: &'mir mir::Terminator<'tcx>,\n         _location: Location,\n@@ -73,6 +81,7 @@ pub trait ResultsVisitor<'mir, 'tcx> {\n     /// The `call_return_effect` (if one exists) will *not* be applied to `state`.\n     fn visit_terminator_after_primary_effect(\n         &mut self,\n+        _results: &R,\n         _state: &Self::FlowState,\n         _terminator: &'mir mir::Terminator<'tcx>,\n         _location: Location,\n@@ -81,6 +90,7 @@ pub trait ResultsVisitor<'mir, 'tcx> {\n \n     fn visit_block_end(\n         &mut self,\n+        _results: &R,\n         _state: &Self::FlowState,\n         _block_data: &'mir mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n@@ -105,37 +115,38 @@ pub trait ResultsVisitable<'tcx> {\n     fn reset_to_block_entry(&self, state: &mut Self::FlowState, block: BasicBlock);\n \n     fn reconstruct_before_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n     );\n \n     fn reconstruct_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n     );\n \n     fn reconstruct_before_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     );\n \n     fn reconstruct_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     );\n }\n \n-impl<'tcx, A> ResultsVisitable<'tcx> for Results<'tcx, A>\n+impl<'tcx, A, E> ResultsVisitable<'tcx> for Results<'tcx, A, E>\n where\n     A: Analysis<'tcx>,\n+    E: Borrow<EntrySets<'tcx, A>>,\n {\n     type FlowState = A::Domain;\n \n@@ -146,11 +157,11 @@ where\n     }\n \n     fn reset_to_block_entry(&self, state: &mut Self::FlowState, block: BasicBlock) {\n-        state.clone_from(&self.entry_set_for_block(block));\n+        state.clone_from(self.entry_set_for_block(block));\n     }\n \n     fn reconstruct_before_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         stmt: &mir::Statement<'tcx>,\n         loc: Location,\n@@ -159,7 +170,7 @@ where\n     }\n \n     fn reconstruct_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         stmt: &mir::Statement<'tcx>,\n         loc: Location,\n@@ -168,7 +179,7 @@ where\n     }\n \n     fn reconstruct_before_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         term: &mir::Terminator<'tcx>,\n         loc: Location,\n@@ -177,7 +188,7 @@ where\n     }\n \n     fn reconstruct_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::FlowState,\n         term: &mir::Terminator<'tcx>,\n         loc: Location,"}, {"sha": "b88ed32b687f6ada69707ac7cabc56f43fc83350", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::mir::*;\n /// At present, this is used as a very limited form of alias analysis. For example,\n /// `MaybeBorrowedLocals` is used to compute which locals are live during a yield expression for\n /// immovable generators.\n+#[derive(Clone, Copy)]\n pub struct MaybeBorrowedLocals;\n \n impl MaybeBorrowedLocals {\n@@ -36,7 +37,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n     type Idx = Local;\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -45,7 +46,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -54,7 +55,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n         _return_places: CallReturnPlaces<'_, 'tcx>,"}, {"sha": "56cd18cf7111c141ce24a5fff50443c6a02f3ca1", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -21,6 +21,7 @@ use crate::{Analysis, AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKi\n /// [`MaybeBorrowedLocals`]: super::MaybeBorrowedLocals\n /// [flow-test]: https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src/test/ui/mir-dataflow/liveness-ptr.rs\n /// [liveness]: https://en.wikipedia.org/wiki/Live_variable_analysis\n+#[derive(Clone, Copy)]\n pub struct MaybeLiveLocals;\n \n impl<'tcx> AnalysisDomain<'tcx> for MaybeLiveLocals {\n@@ -43,7 +44,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n     type Idx = Local;\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -52,7 +53,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -61,7 +62,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -74,7 +75,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n     }\n \n     fn yield_resume_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _resume_block: mir::BasicBlock,\n         resume_place: mir::Place<'tcx>,\n@@ -216,6 +217,7 @@ impl DefUse {\n /// This is basically written for dead store elimination and nothing else.\n ///\n /// All of the caveats of `MaybeLiveLocals` apply.\n+#[derive(Clone, Copy)]\n pub struct MaybeTransitiveLiveLocals<'a> {\n     always_live: &'a BitSet<Local>,\n }\n@@ -248,7 +250,7 @@ impl<'a, 'tcx> AnalysisDomain<'tcx> for MaybeTransitiveLiveLocals<'a> {\n \n impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     fn apply_statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut Self::Domain,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -283,7 +285,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     }\n \n     fn apply_terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut Self::Domain,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -292,7 +294,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     }\n \n     fn apply_call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut Self::Domain,\n         _block: mir::BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -305,7 +307,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     }\n \n     fn apply_yield_resume_effect(\n-        &self,\n+        &mut self,\n         trans: &mut Self::Domain,\n         _resume_block: mir::BasicBlock,\n         resume_place: mir::Place<'tcx>,"}, {"sha": "98cec1c676022ea849bc7d021f2e4ab55d43bc5f", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -306,7 +306,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n     type Idx = MovePathIndex;\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -329,7 +329,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -351,7 +351,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -372,7 +372,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n     }\n \n     fn switch_int_edge_effects<G: GenKill<Self::Idx>>(\n-        &self,\n+        &mut self,\n         block: mir::BasicBlock,\n         discr: &mir::Operand<'tcx>,\n         edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n@@ -442,7 +442,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n     type Idx = MovePathIndex;\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -456,7 +456,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -467,7 +467,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -488,7 +488,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n     }\n \n     fn switch_int_edge_effects<G: GenKill<Self::Idx>>(\n-        &self,\n+        &mut self,\n         block: mir::BasicBlock,\n         discr: &mir::Operand<'tcx>,\n         edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n@@ -562,7 +562,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for DefinitelyInitializedPlaces<'_, 'tcx> {\n     type Idx = MovePathIndex;\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _statement: &mir::Statement<'tcx>,\n         location: Location,\n@@ -573,7 +573,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for DefinitelyInitializedPlaces<'_, 'tcx> {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -584,7 +584,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for DefinitelyInitializedPlaces<'_, 'tcx> {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -627,7 +627,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n \n     #[instrument(skip(self, trans), level = \"debug\")]\n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         stmt: &mir::Statement<'tcx>,\n         location: Location,\n@@ -651,7 +651,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n \n     #[instrument(skip(self, trans, _terminator), level = \"debug\")]\n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _terminator: &mir::Terminator<'tcx>,\n         location: Location,\n@@ -672,7 +672,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         block: mir::BasicBlock,\n         _return_places: CallReturnPlaces<'_, 'tcx>,"}, {"sha": "666c8d50a8a8c266f023a483535bb98873d2a878", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -1,10 +1,9 @@\n pub use super::*;\n \n-use crate::{CallReturnPlaces, GenKill, Results, ResultsRefCursor};\n+use crate::{CallReturnPlaces, GenKill, ResultsClonedCursor};\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use std::borrow::Cow;\n-use std::cell::RefCell;\n \n #[derive(Clone)]\n pub struct MaybeStorageLive<'a> {\n@@ -17,6 +16,12 @@ impl<'a> MaybeStorageLive<'a> {\n     }\n }\n \n+impl crate::CloneAnalysis for MaybeStorageLive<'_> {\n+    fn clone_analysis(&self) -> Self {\n+        self.clone()\n+    }\n+}\n+\n impl<'tcx, 'a> crate::AnalysisDomain<'tcx> for MaybeStorageLive<'a> {\n     type Domain = BitSet<Local>;\n \n@@ -43,7 +48,7 @@ impl<'tcx, 'a> crate::GenKillAnalysis<'tcx> for MaybeStorageLive<'a> {\n     type Idx = Local;\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         stmt: &mir::Statement<'tcx>,\n         _: Location,\n@@ -56,7 +61,7 @@ impl<'tcx, 'a> crate::GenKillAnalysis<'tcx> for MaybeStorageLive<'a> {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _: &mir::Terminator<'tcx>,\n         _: Location,\n@@ -65,7 +70,7 @@ impl<'tcx, 'a> crate::GenKillAnalysis<'tcx> for MaybeStorageLive<'a> {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n         _return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -110,7 +115,7 @@ impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeStorageDead {\n     type Idx = Local;\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         stmt: &mir::Statement<'tcx>,\n         _: Location,\n@@ -123,7 +128,7 @@ impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeStorageDead {\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _: &mir::Terminator<'tcx>,\n         _: Location,\n@@ -132,7 +137,7 @@ impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeStorageDead {\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n         _return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -141,28 +146,28 @@ impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeStorageDead {\n     }\n }\n \n-type BorrowedLocalsResults<'a, 'tcx> = ResultsRefCursor<'a, 'a, 'tcx, MaybeBorrowedLocals>;\n+type BorrowedLocalsResults<'res, 'mir, 'tcx> =\n+    ResultsClonedCursor<'res, 'mir, 'tcx, MaybeBorrowedLocals>;\n \n /// Dataflow analysis that determines whether each local requires storage at a\n /// given location; i.e. whether its storage can go away without being observed.\n-pub struct MaybeRequiresStorage<'mir, 'tcx> {\n-    body: &'mir Body<'tcx>,\n-    borrowed_locals: RefCell<BorrowedLocalsResults<'mir, 'tcx>>,\n+pub struct MaybeRequiresStorage<'res, 'mir, 'tcx> {\n+    borrowed_locals: BorrowedLocalsResults<'res, 'mir, 'tcx>,\n }\n \n-impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n-    pub fn new(\n-        body: &'mir Body<'tcx>,\n-        borrowed_locals: &'mir Results<'tcx, MaybeBorrowedLocals>,\n-    ) -> Self {\n-        MaybeRequiresStorage {\n-            body,\n-            borrowed_locals: RefCell::new(ResultsRefCursor::new(&body, borrowed_locals)),\n-        }\n+impl<'res, 'mir, 'tcx> MaybeRequiresStorage<'res, 'mir, 'tcx> {\n+    pub fn new(borrowed_locals: BorrowedLocalsResults<'res, 'mir, 'tcx>) -> Self {\n+        MaybeRequiresStorage { borrowed_locals }\n+    }\n+}\n+\n+impl crate::CloneAnalysis for MaybeRequiresStorage<'_, '_, '_> {\n+    fn clone_analysis(&self) -> Self {\n+        Self { borrowed_locals: self.borrowed_locals.new_cursor() }\n     }\n }\n \n-impl<'mir, 'tcx> crate::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n+impl<'tcx> crate::AnalysisDomain<'tcx> for MaybeRequiresStorage<'_, '_, 'tcx> {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"requires_storage\";\n@@ -181,17 +186,17 @@ impl<'mir, 'tcx> crate::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx\n     }\n }\n \n-impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n+impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'_, '_, 'tcx> {\n     type Idx = Local;\n \n     fn before_statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         stmt: &mir::Statement<'tcx>,\n         loc: Location,\n     ) {\n         // If a place is borrowed in a statement, it needs storage for that statement.\n-        self.borrowed_locals.borrow().analysis().statement_effect(trans, stmt, loc);\n+        self.borrowed_locals.mut_analysis().statement_effect(trans, stmt, loc);\n \n         match &stmt.kind {\n             StatementKind::StorageDead(l) => trans.kill(*l),\n@@ -218,7 +223,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n     }\n \n     fn statement_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _: &mir::Statement<'tcx>,\n         loc: Location,\n@@ -229,13 +234,13 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n     }\n \n     fn before_terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         loc: Location,\n     ) {\n         // If a place is borrowed in a terminator, it needs storage for that terminator.\n-        self.borrowed_locals.borrow().analysis().terminator_effect(trans, terminator, loc);\n+        self.borrowed_locals.mut_analysis().terminator_effect(trans, terminator, loc);\n \n         match &terminator.kind {\n             TerminatorKind::Call { destination, .. } => {\n@@ -282,7 +287,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n     }\n \n     fn terminator_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         terminator: &mir::Terminator<'tcx>,\n         loc: Location,\n@@ -321,7 +326,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n     }\n \n     fn call_return_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n         return_places: CallReturnPlaces<'_, 'tcx>,\n@@ -330,7 +335,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n     }\n \n     fn yield_resume_effect(\n-        &self,\n+        &mut self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _resume_block: BasicBlock,\n         resume_place: mir::Place<'tcx>,\n@@ -339,28 +344,28 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n     }\n }\n \n-impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n+impl<'tcx> MaybeRequiresStorage<'_, '_, 'tcx> {\n     /// Kill locals that are fully moved and have not been borrowed.\n-    fn check_for_move(&self, trans: &mut impl GenKill<Local>, loc: Location) {\n-        let mut visitor = MoveVisitor { trans, borrowed_locals: &self.borrowed_locals };\n-        visitor.visit_location(&self.body, loc);\n+    fn check_for_move(&mut self, trans: &mut impl GenKill<Local>, loc: Location) {\n+        let body = self.borrowed_locals.body();\n+        let mut visitor = MoveVisitor { trans, borrowed_locals: &mut self.borrowed_locals };\n+        visitor.visit_location(body, loc);\n     }\n }\n \n-struct MoveVisitor<'a, 'mir, 'tcx, T> {\n-    borrowed_locals: &'a RefCell<BorrowedLocalsResults<'mir, 'tcx>>,\n+struct MoveVisitor<'a, 'res, 'mir, 'tcx, T> {\n+    borrowed_locals: &'a mut BorrowedLocalsResults<'res, 'mir, 'tcx>,\n     trans: &'a mut T,\n }\n \n-impl<'a, 'mir, 'tcx, T> Visitor<'tcx> for MoveVisitor<'a, 'mir, 'tcx, T>\n+impl<'tcx, T> Visitor<'tcx> for MoveVisitor<'_, '_, '_, 'tcx, T>\n where\n     T: GenKill<Local>,\n {\n     fn visit_local(&mut self, local: Local, context: PlaceContext, loc: Location) {\n         if PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) == context {\n-            let mut borrowed_locals = self.borrowed_locals.borrow_mut();\n-            borrowed_locals.seek_before_primary_effect(loc);\n-            if !borrowed_locals.contains(local) {\n+            self.borrowed_locals.seek_before_primary_effect(loc);\n+            if !self.borrowed_locals.contains(local) {\n                 self.trans.kill(local);\n             }\n         }"}, {"sha": "3494a37c3cf2d99fd18b11f0782cc127582f8533", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -28,8 +28,9 @@ pub use self::drop_flag_effects::{\n };\n pub use self::framework::{\n     fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, CallReturnPlaces,\n-    Direction, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor,\n-    ResultsRefCursor, ResultsVisitable, ResultsVisitor, SwitchIntEdgeEffects,\n+    CloneAnalysis, Direction, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results,\n+    ResultsCloned, ResultsClonedCursor, ResultsCursor, ResultsRefCursor, ResultsVisitable,\n+    ResultsVisitor, SwitchIntEdgeEffects,\n };\n \n use self::move_paths::MoveData;"}, {"sha": "0cbc7442cf1fba170fbfafdce3eece12872f8b11", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -17,7 +17,7 @@ use crate::impls::{\n use crate::move_paths::{HasMoveData, MoveData};\n use crate::move_paths::{LookupResult, MovePathIndex};\n use crate::MoveDataParamEnv;\n-use crate::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n+use crate::{Analysis, JoinSemiLattice, ResultsCursor};\n \n pub struct SanityCheck;\n \n@@ -42,29 +42,29 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n                 .into_engine(tcx, body)\n                 .iterate_to_fixpoint();\n \n-            sanity_check_via_rustc_peek(tcx, body, &flow_inits);\n+            sanity_check_via_rustc_peek(tcx, flow_inits.into_results_cursor(body));\n         }\n \n         if has_rustc_mir_with(tcx, def_id, sym::rustc_peek_maybe_uninit).is_some() {\n             let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)\n                 .into_engine(tcx, body)\n                 .iterate_to_fixpoint();\n \n-            sanity_check_via_rustc_peek(tcx, body, &flow_uninits);\n+            sanity_check_via_rustc_peek(tcx, flow_uninits.into_results_cursor(body));\n         }\n \n         if has_rustc_mir_with(tcx, def_id, sym::rustc_peek_definite_init).is_some() {\n             let flow_def_inits = DefinitelyInitializedPlaces::new(tcx, body, &mdpe)\n                 .into_engine(tcx, body)\n                 .iterate_to_fixpoint();\n \n-            sanity_check_via_rustc_peek(tcx, body, &flow_def_inits);\n+            sanity_check_via_rustc_peek(tcx, flow_def_inits.into_results_cursor(body));\n         }\n \n         if has_rustc_mir_with(tcx, def_id, sym::rustc_peek_liveness).is_some() {\n             let flow_liveness = MaybeLiveLocals.into_engine(tcx, body).iterate_to_fixpoint();\n \n-            sanity_check_via_rustc_peek(tcx, body, &flow_liveness);\n+            sanity_check_via_rustc_peek(tcx, flow_liveness.into_results_cursor(body));\n         }\n \n         if has_rustc_mir_with(tcx, def_id, sym::stop_after_dataflow).is_some() {\n@@ -91,17 +91,14 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n /// errors are not intended to be used for unit tests.)\n pub fn sanity_check_via_rustc_peek<'tcx, A>(\n     tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n-    results: &Results<'tcx, A>,\n+    mut cursor: ResultsCursor<'_, 'tcx, A>,\n ) where\n     A: RustcPeekAt<'tcx>,\n {\n-    let def_id = body.source.def_id();\n+    let def_id = cursor.body().source.def_id();\n     debug!(\"sanity_check_via_rustc_peek def_id: {:?}\", def_id);\n \n-    let mut cursor = ResultsCursor::new(body, results);\n-\n-    let peek_calls = body.basic_blocks.iter_enumerated().filter_map(|(bb, block_data)| {\n+    let peek_calls = cursor.body().basic_blocks.iter_enumerated().filter_map(|(bb, block_data)| {\n         PeekCall::from_terminator(tcx, block_data.terminator()).map(|call| (bb, block_data, call))\n     });\n \n@@ -132,8 +129,8 @@ pub fn sanity_check_via_rustc_peek<'tcx, A>(\n             ) => {\n                 let loc = Location { block: bb, statement_index };\n                 cursor.seek_before_primary_effect(loc);\n-                let state = cursor.get();\n-                results.analysis.peek_at(tcx, *place, state, call);\n+                let (state, analysis) = cursor.get_with_analysis();\n+                analysis.peek_at(tcx, *place, state, call);\n             }\n \n             _ => {"}, {"sha": "5693e5a4a712a0df5bc776365062319229b7709d", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -343,7 +343,7 @@ where\n     T: ValueAnalysis<'tcx>,\n {\n     fn apply_statement_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         statement: &Statement<'tcx>,\n         _location: Location,\n@@ -354,7 +354,7 @@ where\n     }\n \n     fn apply_terminator_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         terminator: &Terminator<'tcx>,\n         _location: Location,\n@@ -365,7 +365,7 @@ where\n     }\n \n     fn apply_call_return_effect(\n-        &self,\n+        &mut self,\n         state: &mut Self::Domain,\n         _block: BasicBlock,\n         return_places: crate::CallReturnPlaces<'_, 'tcx>,\n@@ -376,7 +376,7 @@ where\n     }\n \n     fn apply_switch_int_edge_effects(\n-        &self,\n+        &mut self,\n         _block: BasicBlock,\n         discr: &Operand<'tcx>,\n         apply_edge_effects: &mut impl SwitchIntEdgeEffects<Self::Domain>,"}, {"sha": "78fb196358faf8161814f9beaaf4101ffba01de1", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -10,8 +10,12 @@ use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, ValueOrPlace};\n-use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n+use rustc_mir_dataflow::value_analysis::{\n+    Map, State, TrackElem, ValueAnalysis, ValueAnalysisWrapper, ValueOrPlace,\n+};\n+use rustc_mir_dataflow::{\n+    lattice::FlatSet, Analysis, Results, ResultsVisitor, SwitchIntEdgeEffects,\n+};\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::{Align, FieldIdx, VariantIdx};\n \n@@ -52,11 +56,11 @@ impl<'tcx> MirPass<'tcx> for DataflowConstProp {\n \n         // Perform the actual dataflow analysis.\n         let analysis = ConstAnalysis::new(tcx, body, map);\n-        let results = debug_span!(\"analyze\")\n+        let mut results = debug_span!(\"analyze\")\n             .in_scope(|| analysis.wrap().into_engine(tcx, body).iterate_to_fixpoint());\n \n         // Collect results and patch the body afterwards.\n-        let mut visitor = CollectAndPatch::new(tcx, &results.analysis.0.map);\n+        let mut visitor = CollectAndPatch::new(tcx);\n         debug_span!(\"collect\").in_scope(|| results.visit_reachable_with(body, &mut visitor));\n         debug_span!(\"patch\").in_scope(|| visitor.visit_body(body));\n     }\n@@ -387,9 +391,8 @@ impl<'a, 'tcx> ConstAnalysis<'a, 'tcx> {\n     }\n }\n \n-struct CollectAndPatch<'tcx, 'map> {\n+struct CollectAndPatch<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    map: &'map Map,\n \n     /// For a given MIR location, this stores the values of the operands used by that location. In\n     /// particular, this is before the effect, such that the operands of `_1 = _1 + _2` are\n@@ -400,9 +403,9 @@ struct CollectAndPatch<'tcx, 'map> {\n     assignments: FxHashMap<Location, ScalarTy<'tcx>>,\n }\n \n-impl<'tcx, 'map> CollectAndPatch<'tcx, 'map> {\n-    fn new(tcx: TyCtxt<'tcx>, map: &'map Map) -> Self {\n-        Self { tcx, map, before_effect: FxHashMap::default(), assignments: FxHashMap::default() }\n+impl<'tcx> CollectAndPatch<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        Self { tcx, before_effect: FxHashMap::default(), assignments: FxHashMap::default() }\n     }\n \n     fn make_operand(&self, scalar: ScalarTy<'tcx>) -> Operand<'tcx> {\n@@ -414,25 +417,31 @@ impl<'tcx, 'map> CollectAndPatch<'tcx, 'map> {\n     }\n }\n \n-impl<'mir, 'tcx, 'map> ResultsVisitor<'mir, 'tcx> for CollectAndPatch<'tcx, 'map> {\n+impl<'mir, 'tcx>\n+    ResultsVisitor<'mir, 'tcx, Results<'tcx, ValueAnalysisWrapper<ConstAnalysis<'_, 'tcx>>>>\n+    for CollectAndPatch<'tcx>\n+{\n     type FlowState = State<FlatSet<ScalarTy<'tcx>>>;\n \n     fn visit_statement_before_primary_effect(\n         &mut self,\n+        results: &Results<'tcx, ValueAnalysisWrapper<ConstAnalysis<'_, 'tcx>>>,\n         state: &Self::FlowState,\n         statement: &'mir Statement<'tcx>,\n         location: Location,\n     ) {\n         match &statement.kind {\n             StatementKind::Assign(box (_, rvalue)) => {\n-                OperandCollector { state, visitor: self }.visit_rvalue(rvalue, location);\n+                OperandCollector { state, visitor: self, map: &results.analysis.0.map }\n+                    .visit_rvalue(rvalue, location);\n             }\n             _ => (),\n         }\n     }\n \n     fn visit_statement_after_primary_effect(\n         &mut self,\n+        results: &Results<'tcx, ValueAnalysisWrapper<ConstAnalysis<'_, 'tcx>>>,\n         state: &Self::FlowState,\n         statement: &'mir Statement<'tcx>,\n         location: Location,\n@@ -441,30 +450,34 @@ impl<'mir, 'tcx, 'map> ResultsVisitor<'mir, 'tcx> for CollectAndPatch<'tcx, 'map\n             StatementKind::Assign(box (_, Rvalue::Use(Operand::Constant(_)))) => {\n                 // Don't overwrite the assignment if it already uses a constant (to keep the span).\n             }\n-            StatementKind::Assign(box (place, _)) => match state.get(place.as_ref(), self.map) {\n-                FlatSet::Top => (),\n-                FlatSet::Elem(value) => {\n-                    self.assignments.insert(location, value);\n-                }\n-                FlatSet::Bottom => {\n-                    // This assignment is either unreachable, or an uninitialized value is assigned.\n+            StatementKind::Assign(box (place, _)) => {\n+                match state.get(place.as_ref(), &results.analysis.0.map) {\n+                    FlatSet::Top => (),\n+                    FlatSet::Elem(value) => {\n+                        self.assignments.insert(location, value);\n+                    }\n+                    FlatSet::Bottom => {\n+                        // This assignment is either unreachable, or an uninitialized value is assigned.\n+                    }\n                 }\n-            },\n+            }\n             _ => (),\n         }\n     }\n \n     fn visit_terminator_before_primary_effect(\n         &mut self,\n+        results: &Results<'tcx, ValueAnalysisWrapper<ConstAnalysis<'_, 'tcx>>>,\n         state: &Self::FlowState,\n         terminator: &'mir Terminator<'tcx>,\n         location: Location,\n     ) {\n-        OperandCollector { state, visitor: self }.visit_terminator(terminator, location);\n+        OperandCollector { state, visitor: self, map: &results.analysis.0.map }\n+            .visit_terminator(terminator, location);\n     }\n }\n \n-impl<'tcx, 'map> MutVisitor<'tcx> for CollectAndPatch<'tcx, 'map> {\n+impl<'tcx> MutVisitor<'tcx> for CollectAndPatch<'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -496,14 +509,15 @@ impl<'tcx, 'map> MutVisitor<'tcx> for CollectAndPatch<'tcx, 'map> {\n \n struct OperandCollector<'tcx, 'map, 'a> {\n     state: &'a State<FlatSet<ScalarTy<'tcx>>>,\n-    visitor: &'a mut CollectAndPatch<'tcx, 'map>,\n+    visitor: &'a mut CollectAndPatch<'tcx>,\n+    map: &'map Map,\n }\n \n impl<'tcx, 'map, 'a> Visitor<'tcx> for OperandCollector<'tcx, 'map, 'a> {\n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         match operand {\n             Operand::Copy(place) | Operand::Move(place) => {\n-                match self.state.get(place.as_ref(), self.visitor.map) {\n+                match self.state.get(place.as_ref(), self.map) {\n                     FlatSet::Top => (),\n                     FlatSet::Elem(value) => {\n                         self.visitor.before_effect.insert((location, *place), value);"}, {"sha": "98f5020e355c00fae5fb9d16dbcd7f42f7e23944", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaddc3707520988f8bc2d267cb192d2f0c63ee80/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=eaddc3707520988f8bc2d267cb192d2f0c63ee80", "patch": "@@ -597,16 +597,15 @@ fn locals_live_across_suspend_points<'tcx>(\n     let borrowed_locals_results =\n         MaybeBorrowedLocals.into_engine(tcx, body_ref).pass_name(\"generator\").iterate_to_fixpoint();\n \n-    let mut borrowed_locals_cursor =\n-        rustc_mir_dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);\n+    let mut borrowed_locals_cursor = borrowed_locals_results.cloned_results_cursor(body_ref);\n \n     // Calculate the MIR locals that we actually need to keep storage around\n     // for.\n-    let requires_storage_results = MaybeRequiresStorage::new(body, &borrowed_locals_results)\n-        .into_engine(tcx, body_ref)\n-        .iterate_to_fixpoint();\n-    let mut requires_storage_cursor =\n-        rustc_mir_dataflow::ResultsCursor::new(body_ref, &requires_storage_results);\n+    let mut requires_storage_results =\n+        MaybeRequiresStorage::new(borrowed_locals_results.cloned_results_cursor(body))\n+            .into_engine(tcx, body_ref)\n+            .iterate_to_fixpoint();\n+    let mut requires_storage_cursor = requires_storage_results.as_results_cursor(body_ref);\n \n     // Calculate the liveness of MIR locals ignoring borrows.\n     let mut liveness = MaybeLiveLocals\n@@ -747,7 +746,7 @@ fn compute_storage_conflicts<'mir, 'tcx>(\n     body: &'mir Body<'tcx>,\n     saved_locals: &GeneratorSavedLocals,\n     always_live_locals: BitSet<Local>,\n-    requires_storage: rustc_mir_dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n+    mut requires_storage: rustc_mir_dataflow::Results<'tcx, MaybeRequiresStorage<'_, 'mir, 'tcx>>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), saved_locals.domain_size());\n \n@@ -802,13 +801,14 @@ struct StorageConflictVisitor<'mir, 'tcx, 's> {\n     local_conflicts: BitMatrix<Local, Local>,\n }\n \n-impl<'mir, 'tcx> rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx>\n+impl<'mir, 'tcx, R> rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx, R>\n     for StorageConflictVisitor<'mir, 'tcx, '_>\n {\n     type FlowState = BitSet<Local>;\n \n     fn visit_statement_before_primary_effect(\n         &mut self,\n+        _results: &R,\n         state: &Self::FlowState,\n         _statement: &'mir Statement<'tcx>,\n         loc: Location,\n@@ -818,6 +818,7 @@ impl<'mir, 'tcx> rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx>\n \n     fn visit_terminator_before_primary_effect(\n         &mut self,\n+        _results: &R,\n         state: &Self::FlowState,\n         _terminator: &'mir Terminator<'tcx>,\n         loc: Location,"}]}