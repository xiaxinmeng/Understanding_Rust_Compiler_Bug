{"sha": "7a077804a3a58c93f690e382c86ccd4f1a8850af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMDc3ODA0YTNhNThjOTNmNjkwZTM4MmM4NmNjZDRmMWE4ODUwYWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-01T12:31:24Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-12T08:55:20Z"}, "message": "New return types for str::escape_* that impl Display and Iterator<char>\n\nAs FCP\u2019ed in the tracking issue: https://github.com/rust-lang/rust/issues/27791#issuecomment-376864727", "tree": {"sha": "01e31a8271689a67d4935060d833d0a75b69a8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e31a8271689a67d4935060d833d0a75b69a8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a077804a3a58c93f690e382c86ccd4f1a8850af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a077804a3a58c93f690e382c86ccd4f1a8850af", "html_url": "https://github.com/rust-lang/rust/commit/7a077804a3a58c93f690e382c86ccd4f1a8850af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a077804a3a58c93f690e382c86ccd4f1a8850af/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92dcae47425a9084b97680bc0327ac88353b8a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/92dcae47425a9084b97680bc0327ac88353b8a68", "html_url": "https://github.com/rust-lang/rust/commit/92dcae47425a9084b97680bc0327ac88353b8a68"}], "stats": {"total": 178, "additions": 132, "deletions": 46}, "files": [{"sha": "d4ee428a3b5c775ee4369d004d9707a2b4902932", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=7a077804a3a58c93f690e382c86ccd4f1a8850af", "patch": "@@ -68,7 +68,6 @@\n #![warn(intra_doc_link_resolution_failure)]\n #![warn(missing_debug_implementations)]\n \n-#![cfg_attr(not(test), feature(fn_traits))]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]\n \n@@ -86,6 +85,7 @@\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n+#![feature(fn_traits)]\n #![feature(fundamental)]\n #![feature(futures_api)]\n #![feature(lang_items)]\n@@ -100,6 +100,7 @@\n #![feature(receiver_trait)]\n #![feature(specialization)]\n #![feature(staged_api)]\n+#![feature(std_internals)]\n #![feature(str_internals)]\n #![feature(trusted_len)]\n #![feature(try_reserve)]"}, {"sha": "1705c80d5f50c259dcbce8b60ad5ed8b72491615", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 96, "deletions": 12, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=7a077804a3a58c93f690e382c86ccd4f1a8850af", "patch": "@@ -29,10 +29,13 @@\n #![allow(unused_imports)]\n \n use core::borrow::Borrow;\n-use core::fmt;\n-use core::str as core_str;\n+use core::fmt::{self, Write};\n+use core::char;\n+use core::iter::{Chain, Flatten, FlatMap};\n use core::str::pattern::{Pattern, Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n+use core::ops::Try;\n+use core::option;\n use core::ptr;\n use core::iter::FusedIterator;\n use core::unicode::conversions;\n@@ -452,14 +455,15 @@ impl str {\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n-    pub fn escape_debug(&self) -> String {\n-        let mut string = String::with_capacity(self.len());\n+    pub fn escape_debug(&self) -> EscapeDebug {\n         let mut chars = self.chars();\n-        if let Some(first) = chars.next() {\n-            string.extend(first.escape_debug_ext(true))\n+        EscapeDebug {\n+            inner: chars.next()\n+                .map(|first| first.escape_debug_ext(true))\n+                .into_iter()\n+                .flatten()\n+                .chain(chars.flat_map(CharEscapeDebugContinue))\n         }\n-        string.extend(chars.flat_map(|c| c.escape_debug_ext(false)));\n-        string\n     }\n \n     /// Escapes each char in `s` with [`char::escape_default`].\n@@ -468,8 +472,8 @@ impl str {\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n-    pub fn escape_default(&self) -> String {\n-        self.chars().flat_map(|c| c.escape_default()).collect()\n+    pub fn escape_default(&self) -> EscapeDefault {\n+        EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n     }\n \n     /// Escapes each char in `s` with [`char::escape_unicode`].\n@@ -478,8 +482,8 @@ impl str {\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n-    pub fn escape_unicode(&self) -> String {\n-        self.chars().flat_map(|c| c.escape_unicode()).collect()\n+    pub fn escape_unicode(&self) -> EscapeUnicode {\n+        EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }\n     }\n \n     /// Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n@@ -612,3 +616,83 @@ impl str {\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     Box::from_raw(Box::into_raw(v) as *mut str)\n }\n+\n+impl_fn_for_zst! {\n+    #[derive(Clone)]\n+    struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n+        c.escape_debug_ext(false)\n+    };\n+\n+    #[derive(Clone)]\n+    struct CharEscapeUnicode impl Fn = |c: char| -> char::EscapeUnicode {\n+        c.escape_unicode()\n+    };\n+    #[derive(Clone)]\n+    struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {\n+        c.escape_default()\n+    };\n+}\n+\n+macro_rules! escape_types {\n+    ($(\n+        struct $Name: ident<'a> {\n+            inner: $Inner: ty,\n+        }\n+    )+) => {$(\n+        #[unstable(feature = \"str_escape\", issue = \"27791\")]\n+        #[derive(Clone, Debug)]\n+        pub struct $Name<'a> {\n+            inner: $Inner,\n+        }\n+\n+        #[unstable(feature = \"str_escape\", issue = \"27791\")]\n+        impl<'a> fmt::Display for $Name<'a> {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                self.clone().try_for_each(|c| f.write_char(c))\n+            }\n+        }\n+\n+        #[unstable(feature = \"str_escape\", issue = \"27791\")]\n+        impl<'a> Iterator for $Name<'a> {\n+            type Item = char;\n+\n+            #[inline]\n+            fn next(&mut self) -> Option<char> { self.inner.next() }\n+\n+            #[inline]\n+            fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+\n+            #[inline]\n+            fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n+                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n+            {\n+                self.inner.try_fold(init, fold)\n+            }\n+\n+            #[inline]\n+            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n+                where Fold: FnMut(Acc, Self::Item) -> Acc,\n+            {\n+                self.inner.fold(init, fold)\n+            }\n+        }\n+\n+        #[unstable(feature = \"str_escape\", issue = \"27791\")]\n+        impl<'a> FusedIterator for $Name<'a> {}\n+    )+}\n+}\n+\n+escape_types! {\n+    struct EscapeDebug<'a> {\n+        inner: Chain<\n+            Flatten<option::IntoIter<char::EscapeDebug>>,\n+            FlatMap<Chars<'a>, char::EscapeDebug, CharEscapeDebugContinue>\n+        >,\n+    }\n+    struct EscapeUnicode<'a> {\n+        inner: FlatMap<Chars<'a>, char::EscapeUnicode, CharEscapeUnicode>,\n+    }\n+    struct EscapeDefault<'a> {\n+        inner: FlatMap<Chars<'a>, char::EscapeDefault, CharEscapeDefault>,\n+    }\n+}"}, {"sha": "a1dc763f6d8ffc2d928b9f8185e912a37fb4a512", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=7a077804a3a58c93f690e382c86ccd4f1a8850af", "patch": "@@ -990,15 +990,15 @@ fn test_split_at_boundscheck() {\n \n #[test]\n fn test_escape_unicode() {\n-    assert_eq!(\"abc\".escape_unicode(), \"\\\\u{61}\\\\u{62}\\\\u{63}\");\n-    assert_eq!(\"a c\".escape_unicode(), \"\\\\u{61}\\\\u{20}\\\\u{63}\");\n-    assert_eq!(\"\\r\\n\\t\".escape_unicode(), \"\\\\u{d}\\\\u{a}\\\\u{9}\");\n-    assert_eq!(\"'\\\"\\\\\".escape_unicode(), \"\\\\u{27}\\\\u{22}\\\\u{5c}\");\n-    assert_eq!(\"\\x00\\x01\\u{fe}\\u{ff}\".escape_unicode(), \"\\\\u{0}\\\\u{1}\\\\u{fe}\\\\u{ff}\");\n-    assert_eq!(\"\\u{100}\\u{ffff}\".escape_unicode(), \"\\\\u{100}\\\\u{ffff}\");\n-    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_unicode(), \"\\\\u{10000}\\\\u{10ffff}\");\n-    assert_eq!(\"ab\\u{fb00}\".escape_unicode(), \"\\\\u{61}\\\\u{62}\\\\u{fb00}\");\n-    assert_eq!(\"\\u{1d4ea}\\r\".escape_unicode(), \"\\\\u{1d4ea}\\\\u{d}\");\n+    assert_eq!(\"abc\".escape_unicode().to_string(), \"\\\\u{61}\\\\u{62}\\\\u{63}\");\n+    assert_eq!(\"a c\".escape_unicode().to_string(), \"\\\\u{61}\\\\u{20}\\\\u{63}\");\n+    assert_eq!(\"\\r\\n\\t\".escape_unicode().to_string(), \"\\\\u{d}\\\\u{a}\\\\u{9}\");\n+    assert_eq!(\"'\\\"\\\\\".escape_unicode().to_string(), \"\\\\u{27}\\\\u{22}\\\\u{5c}\");\n+    assert_eq!(\"\\x00\\x01\\u{fe}\\u{ff}\".escape_unicode().to_string(), \"\\\\u{0}\\\\u{1}\\\\u{fe}\\\\u{ff}\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_unicode().to_string(), \"\\\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_unicode().to_string(), \"\\\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{fb00}\".escape_unicode().to_string(), \"\\\\u{61}\\\\u{62}\\\\u{fb00}\");\n+    assert_eq!(\"\\u{1d4ea}\\r\".escape_unicode().to_string(), \"\\\\u{1d4ea}\\\\u{d}\");\n }\n \n #[test]\n@@ -1009,31 +1009,32 @@ fn test_escape_debug() {\n     // they are escaped. However, when the character is unescaped (e.g., for\n     // printable characters), only a single backslash appears (as the character\n     // itself appears in the debug string).\n-    assert_eq!(\"abc\".escape_debug(), \"abc\");\n-    assert_eq!(\"a c\".escape_debug(), \"a c\");\n-    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_debug(), \"\u00e9\u00e8\u00ea\");\n-    assert_eq!(\"\\r\\n\\t\".escape_debug(), \"\\\\r\\\\n\\\\t\");\n-    assert_eq!(\"'\\\"\\\\\".escape_debug(), \"\\\\'\\\\\\\"\\\\\\\\\");\n-    assert_eq!(\"\\u{7f}\\u{ff}\".escape_debug(), \"\\\\u{7f}\\u{ff}\");\n-    assert_eq!(\"\\u{100}\\u{ffff}\".escape_debug(), \"\\u{100}\\\\u{ffff}\");\n-    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_debug(), \"\\u{10000}\\\\u{10ffff}\");\n-    assert_eq!(\"ab\\u{200b}\".escape_debug(), \"ab\\\\u{200b}\");\n-    assert_eq!(\"\\u{10d4ea}\\r\".escape_debug(), \"\\\\u{10d4ea}\\\\r\");\n-    assert_eq!(\"\\u{301}a\\u{301}b\u00e9\\u{e000}\".escape_debug(), \"\\\\u{301}a\\u{301}b\u00e9\\\\u{e000}\");\n+    assert_eq!(\"abc\".escape_debug().to_string(), \"abc\");\n+    assert_eq!(\"a c\".escape_debug().to_string(), \"a c\");\n+    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_debug().to_string(), \"\u00e9\u00e8\u00ea\");\n+    assert_eq!(\"\\r\\n\\t\".escape_debug().to_string(), \"\\\\r\\\\n\\\\t\");\n+    assert_eq!(\"'\\\"\\\\\".escape_debug().to_string(), \"\\\\'\\\\\\\"\\\\\\\\\");\n+    assert_eq!(\"\\u{7f}\\u{ff}\".escape_debug().to_string(), \"\\\\u{7f}\\u{ff}\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_debug().to_string(), \"\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_debug().to_string(), \"\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{200b}\".escape_debug().to_string(), \"ab\\\\u{200b}\");\n+    assert_eq!(\"\\u{10d4ea}\\r\".escape_debug().to_string(), \"\\\\u{10d4ea}\\\\r\");\n+    assert_eq!(\"\\u{301}a\\u{301}b\u00e9\\u{e000}\".escape_debug().to_string(),\n+               \"\\\\u{301}a\\u{301}b\u00e9\\\\u{e000}\");\n }\n \n #[test]\n fn test_escape_default() {\n-    assert_eq!(\"abc\".escape_default(), \"abc\");\n-    assert_eq!(\"a c\".escape_default(), \"a c\");\n-    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_default(), \"\\\\u{e9}\\\\u{e8}\\\\u{ea}\");\n-    assert_eq!(\"\\r\\n\\t\".escape_default(), \"\\\\r\\\\n\\\\t\");\n-    assert_eq!(\"'\\\"\\\\\".escape_default(), \"\\\\'\\\\\\\"\\\\\\\\\");\n-    assert_eq!(\"\\u{7f}\\u{ff}\".escape_default(), \"\\\\u{7f}\\\\u{ff}\");\n-    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(), \"\\\\u{100}\\\\u{ffff}\");\n-    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(), \"\\\\u{10000}\\\\u{10ffff}\");\n-    assert_eq!(\"ab\\u{200b}\".escape_default(), \"ab\\\\u{200b}\");\n-    assert_eq!(\"\\u{10d4ea}\\r\".escape_default(), \"\\\\u{10d4ea}\\\\r\");\n+    assert_eq!(\"abc\".escape_default().to_string(), \"abc\");\n+    assert_eq!(\"a c\".escape_default().to_string(), \"a c\");\n+    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_default().to_string(), \"\\\\u{e9}\\\\u{e8}\\\\u{ea}\");\n+    assert_eq!(\"\\r\\n\\t\".escape_default().to_string(), \"\\\\r\\\\n\\\\t\");\n+    assert_eq!(\"'\\\"\\\\\".escape_default().to_string(), \"\\\\'\\\\\\\"\\\\\\\\\");\n+    assert_eq!(\"\\u{7f}\\u{ff}\".escape_default().to_string(), \"\\\\u{7f}\\\\u{ff}\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default().to_string(), \"\\\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default().to_string(), \"\\\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{200b}\".escape_default().to_string(), \"ab\\\\u{200b}\");\n+    assert_eq!(\"\\u{10d4ea}\\r\".escape_default().to_string(), \"\\\\u{10d4ea}\\\\r\");\n }\n \n #[test]"}, {"sha": "6ee151a6484d98bf0729e448fc0c5fd3ad90d5c5", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=7a077804a3a58c93f690e382c86ccd4f1a8850af", "patch": "@@ -538,7 +538,7 @@ impl<'a> LabelText<'a> {\n             EscStr(s) => s,\n             LabelStr(s) => {\n                 if s.contains('\\\\') {\n-                    (&*s).escape_default().into()\n+                    (&*s).escape_default().to_string().into()\n                 } else {\n                     s\n                 }"}, {"sha": "6c3f6c173edb37f1c8edbf104743af0f8a51d3e7", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=7a077804a3a58c93f690e382c86ccd4f1a8850af", "patch": "@@ -634,7 +634,7 @@ impl LitKind {\n \n         match *self {\n             LitKind::Str(string, ast::StrStyle::Cooked) => {\n-                let escaped = string.as_str().escape_default();\n+                let escaped = string.as_str().escape_default().to_string();\n                 Token::Literal(token::Lit::Str_(Symbol::intern(&escaped)), None)\n             }\n             LitKind::Str(string, ast::StrStyle::Raw(n)) => {"}, {"sha": "cdf805176a2938f3e37db04fc62d9a8bc2780c49", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a077804a3a58c93f690e382c86ccd4f1a8850af/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7a077804a3a58c93f690e382c86ccd4f1a8850af", "patch": "@@ -606,7 +606,7 @@ pub trait PrintState<'a> {\n         match lit.node {\n             ast::LitKind::Str(st, style) => self.print_string(&st.as_str(), style),\n             ast::LitKind::Err(st) => {\n-                let st = st.as_str().escape_debug();\n+                let st = st.as_str().escape_debug().to_string();\n                 let mut res = String::with_capacity(st.len() + 2);\n                 res.push('\\'');\n                 res.push_str(&st);"}]}