{"sha": "6c08cc2db4f98e9f07ae7d50338396c4123c2f0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDhjYzJkYjRmOThlOWYwN2FlN2Q1MDMzODM5NmM0MTIzYzJmMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T04:41:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T04:41:23Z"}, "message": "auto merge of #9846 : cmr/rust/serialize_uuid, r=alexcrichton", "tree": {"sha": "0d60c8fa839b0a99cf37958d948232ed19603009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d60c8fa839b0a99cf37958d948232ed19603009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c08cc2db4f98e9f07ae7d50338396c4123c2f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c08cc2db4f98e9f07ae7d50338396c4123c2f0a", "html_url": "https://github.com/rust-lang/rust/commit/6c08cc2db4f98e9f07ae7d50338396c4123c2f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c08cc2db4f98e9f07ae7d50338396c4123c2f0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d8e494a8c7d668eaac80fea59091a6e8fd70368", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8e494a8c7d668eaac80fea59091a6e8fd70368", "html_url": "https://github.com/rust-lang/rust/commit/5d8e494a8c7d668eaac80fea59091a6e8fd70368"}, {"sha": "75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2", "html_url": "https://github.com/rust-lang/rust/commit/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "345cf64f1281aa856d707b9f0a6f560029c27c63", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6c08cc2db4f98e9f07ae7d50338396c4123c2f0a/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c08cc2db4f98e9f07ae7d50338396c4123c2f0a/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=6c08cc2db4f98e9f07ae7d50338396c4123c2f0a", "patch": "@@ -66,6 +66,8 @@ use std::rand::Rng;\n use std::cmp::Eq;\n use std::cast::{transmute,transmute_copy};\n \n+use serialize::{Encoder, Encodable, Decoder, Decodable};\n+\n /// A 128-bit (16 byte) buffer containing the ID\n pub type UuidBytes = [u8, ..16];\n \n@@ -486,6 +488,21 @@ impl TotalEq for Uuid {\n     }\n }\n \n+// FIXME #9845: Test these more thoroughly\n+impl<T: Encoder> Encodable<T> for Uuid {\n+    /// Encode a UUID as a hypenated string\n+    fn encode(&self, e: &mut T) {\n+        e.emit_str(self.to_hyphenated_str());\n+    }\n+}\n+\n+impl<T: Decoder> Decodable<T> for Uuid {\n+    /// Decode a UUID from a string\n+    fn decode(d: &mut T) -> Uuid {\n+        from_str(d.read_str()).unwrap()\n+    }\n+}\n+\n /// Generates a random instance of UUID (V4 conformant)\n impl rand::Rand for Uuid {\n     #[inline]\n@@ -770,6 +787,20 @@ mod test {\n         assert!(ub.len() == 16);\n         assert!(! ub.iter().all(|&b| b == 0));\n     }\n+\n+    #[test]\n+    fn test_serialize_round_trip() {\n+        use std;\n+        use ebml;\n+        use serialize::{Encodable, Decodable};\n+\n+        let u = Uuid::new_v4();\n+        let bytes = do std::io::with_bytes_writer |wr| {\n+            u.encode(&mut ebml::writer::Encoder(wr));\n+        };\n+        let u2 = Decodable::decode(&mut ebml::reader::Decoder(ebml::reader::Doc(@bytes)));\n+        assert_eq!(u, u2);\n+    }\n }\n \n #[cfg(test)]"}]}