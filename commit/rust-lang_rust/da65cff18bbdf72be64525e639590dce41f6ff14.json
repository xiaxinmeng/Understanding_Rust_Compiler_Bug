{"sha": "da65cff18bbdf72be64525e639590dce41f6ff14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNjVjZmYxOGJiZGY3MmJlNjQ1MjVlNjM5NTkwZGNlNDFmNmZmMTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-26T09:05:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-26T09:05:28Z"}, "message": "Add one more test", "tree": {"sha": "6e7fc8f7fc851fdca4e34644dc8af3bfd299d98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e7fc8f7fc851fdca4e34644dc8af3bfd299d98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da65cff18bbdf72be64525e639590dce41f6ff14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da65cff18bbdf72be64525e639590dce41f6ff14", "html_url": "https://github.com/rust-lang/rust/commit/da65cff18bbdf72be64525e639590dce41f6ff14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da65cff18bbdf72be64525e639590dce41f6ff14/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f9a05692e509c3bfd7df5b1088fe2863617714", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f9a05692e509c3bfd7df5b1088fe2863617714", "html_url": "https://github.com/rust-lang/rust/commit/48f9a05692e509c3bfd7df5b1088fe2863617714"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "e9196fcd2f9441772a003f0db074c8dcafee736e", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/da65cff18bbdf72be64525e639590dce41f6ff14/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da65cff18bbdf72be64525e639590dce41f6ff14/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=da65cff18bbdf72be64525e639590dce41f6ff14", "patch": "@@ -148,25 +148,54 @@ impl fst::Automaton for PrefixOf<'_> {\n     }\n }\n \n-#[test]\n-fn test_partitioning() {\n-    let mut file_set = FileSetConfig::builder();\n-    file_set.add_file_set(vec![VfsPath::new_virtual_path(\"/foo\".into())]);\n-    file_set.add_file_set(vec![VfsPath::new_virtual_path(\"/foo/bar/baz\".into())]);\n-    let file_set = file_set.build();\n-\n-    let mut vfs = Vfs::default();\n-    vfs.set_file_contents(VfsPath::new_virtual_path(\"/foo/src/lib.rs\".into()), Some(Vec::new()));\n-    vfs.set_file_contents(\n-        VfsPath::new_virtual_path(\"/foo/src/bar/baz/lib.rs\".into()),\n-        Some(Vec::new()),\n-    );\n-    vfs.set_file_contents(\n-        VfsPath::new_virtual_path(\"/foo/bar/baz/lib.rs\".into()),\n-        Some(Vec::new()),\n-    );\n-    vfs.set_file_contents(VfsPath::new_virtual_path(\"/quux/lib.rs\".into()), Some(Vec::new()));\n-\n-    let partition = file_set.partition(&vfs).into_iter().map(|it| it.len()).collect::<Vec<_>>();\n-    assert_eq!(partition, vec![2, 1, 1]);\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn path_prefix() {\n+        let mut file_set = FileSetConfig::builder();\n+        file_set.add_file_set(vec![VfsPath::new_virtual_path(\"/foo\".into())]);\n+        file_set.add_file_set(vec![VfsPath::new_virtual_path(\"/foo/bar/baz\".into())]);\n+        let file_set = file_set.build();\n+\n+        let mut vfs = Vfs::default();\n+        vfs.set_file_contents(\n+            VfsPath::new_virtual_path(\"/foo/src/lib.rs\".into()),\n+            Some(Vec::new()),\n+        );\n+        vfs.set_file_contents(\n+            VfsPath::new_virtual_path(\"/foo/src/bar/baz/lib.rs\".into()),\n+            Some(Vec::new()),\n+        );\n+        vfs.set_file_contents(\n+            VfsPath::new_virtual_path(\"/foo/bar/baz/lib.rs\".into()),\n+            Some(Vec::new()),\n+        );\n+        vfs.set_file_contents(VfsPath::new_virtual_path(\"/quux/lib.rs\".into()), Some(Vec::new()));\n+\n+        let partition = file_set.partition(&vfs).into_iter().map(|it| it.len()).collect::<Vec<_>>();\n+        assert_eq!(partition, vec![2, 1, 1]);\n+    }\n+\n+    #[test]\n+    fn name_prefix() {\n+        let mut file_set = FileSetConfig::builder();\n+        file_set.add_file_set(vec![VfsPath::new_virtual_path(\"/foo\".into())]);\n+        file_set.add_file_set(vec![VfsPath::new_virtual_path(\"/foo-things\".into())]);\n+        let file_set = file_set.build();\n+\n+        let mut vfs = Vfs::default();\n+        vfs.set_file_contents(\n+            VfsPath::new_virtual_path(\"/foo/src/lib.rs\".into()),\n+            Some(Vec::new()),\n+        );\n+        vfs.set_file_contents(\n+            VfsPath::new_virtual_path(\"/foo-things/src/lib.rs\".into()),\n+            Some(Vec::new()),\n+        );\n+\n+        let partition = file_set.partition(&vfs).into_iter().map(|it| it.len()).collect::<Vec<_>>();\n+        assert_eq!(partition, vec![1, 1, 0]);\n+    }\n }"}]}