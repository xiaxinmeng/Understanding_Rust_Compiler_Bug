{"sha": "a89eab9bca8b7efc37d386ff38d663035a5192de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OWVhYjliY2E4YjdlZmMzN2QzODZmZjM4ZDY2MzAzNWE1MTkyZGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-04T17:20:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T17:20:01Z"}, "message": "Rollup merge of #83521 - sexxi-goose:quick-diagnostic-fix, r=nikomatsakis\n\n2229: Fix diagnostic issue when using FakeReads in closures\n\nThis PR fixes a diagnostic issue caused by https://github.com/rust-lang/rust/pull/82536. A temporary work around was used in this merged PR which involved feature gating the addition of FakeReads introduced as a result of pattern matching in closures.\n\nThe fix involves adding an optional closure DefId to ForLet and ForMatchedPlace FakeReadCauses. This DefId will only be added if a closure pattern matches a Place starting with an Upvar.\n\nr? ```@nikomatsakis```", "tree": {"sha": "a213e9209a8268ba71722f3f1e70e4db468ea317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a213e9209a8268ba71722f3f1e70e4db468ea317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a89eab9bca8b7efc37d386ff38d663035a5192de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgafVBCRBK7hj4Ov3rIwAAdHIIAF0sx/4dGgqcmQH0X3OLDm2u\nNAOgEzSXZKsmo7DOsbwYHGxOaeu7GV51pxEMFkv4aa9bm7J8fW2Z0bMhgdgKcShR\n/pEEHXh/P+jL4Ea6CyRYHoqJNv0ADzQy1wPy69LTN8Hz76pCBgW4/cMfoWAl4c6c\nKj94sjGgFbm/caGcqv2t/CfCC8Qi8Zi9DJ3D/7cEbeIFi81505xKWTFPSoFsAZF+\nZpXykC+ThOxcIPTwHTErX/jwctAdLQJVvVob9bi4LaHlJOcWxL5q35ojtMsH+SLB\nH8gJNpUKo73aciqfTAGAUjhmF4DC2I/0nptAfBExNOTlPeo6JhbWsYoT9t3LlEk=\n=kHb3\n-----END PGP SIGNATURE-----\n", "payload": "tree a213e9209a8268ba71722f3f1e70e4db468ea317\nparent 6c135561830a4126d1ce2c4767c8388b3c57bc86\nparent c29dc120e5e43a4757d8f7f20db35c61767fe987\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617556801 +0200\ncommitter GitHub <noreply@github.com> 1617556801 +0200\n\nRollup merge of #83521 - sexxi-goose:quick-diagnostic-fix, r=nikomatsakis\n\n2229: Fix diagnostic issue when using FakeReads in closures\n\nThis PR fixes a diagnostic issue caused by https://github.com/rust-lang/rust/pull/82536. A temporary work around was used in this merged PR which involved feature gating the addition of FakeReads introduced as a result of pattern matching in closures.\n\nThe fix involves adding an optional closure DefId to ForLet and ForMatchedPlace FakeReadCauses. This DefId will only be added if a closure pattern matches a Place starting with an Upvar.\n\nr? ```@nikomatsakis```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a89eab9bca8b7efc37d386ff38d663035a5192de", "html_url": "https://github.com/rust-lang/rust/commit/a89eab9bca8b7efc37d386ff38d663035a5192de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a89eab9bca8b7efc37d386ff38d663035a5192de/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c135561830a4126d1ce2c4767c8388b3c57bc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c135561830a4126d1ce2c4767c8388b3c57bc86", "html_url": "https://github.com/rust-lang/rust/commit/6c135561830a4126d1ce2c4767c8388b3c57bc86"}, {"sha": "c29dc120e5e43a4757d8f7f20db35c61767fe987", "url": "https://api.github.com/repos/rust-lang/rust/commits/c29dc120e5e43a4757d8f7f20db35c61767fe987", "html_url": "https://github.com/rust-lang/rust/commit/c29dc120e5e43a4757d8f7f20db35c61767fe987"}], "stats": {"total": 225, "additions": 133, "deletions": 92}, "files": [{"sha": "a7e9fc468b4fdfc0bfb50aee29205cb397dfd87e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -1482,7 +1482,7 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// Note that this also is emitted for regular `let` bindings to ensure that locals that are\n     /// never accessed still get some sanity checks for, e.g., `let x: ! = ..;`\n-    FakeRead(FakeReadCause, Box<Place<'tcx>>),\n+    FakeRead(Box<(FakeReadCause, Place<'tcx>)>),\n \n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n@@ -1575,7 +1575,12 @@ pub enum FakeReadCause {\n \n     /// `let x: !; match x {}` doesn't generate any read of x so we need to\n     /// generate a read of x to check that it is initialized and safe.\n-    ForMatchedPlace,\n+    ///\n+    /// If a closure pattern matches a Place starting with an Upvar, then we introduce a\n+    /// FakeRead for that Place outside the closure, in such a case this option would be\n+    /// Some(closure_def_id).\n+    /// Otherwise, the value of the optional DefId will be None.\n+    ForMatchedPlace(Option<DefId>),\n \n     /// A fake read of the RefWithinGuard version of a bind-by-value variable\n     /// in a match guard to ensure that it's value hasn't change by the time\n@@ -1594,7 +1599,12 @@ pub enum FakeReadCause {\n     /// but in some cases it can affect the borrow checker, as in #53695.\n     /// Therefore, we insert a \"fake read\" here to ensure that we get\n     /// appropriate errors.\n-    ForLet,\n+    ///\n+    /// If a closure pattern matches a Place starting with an Upvar, then we introduce a\n+    /// FakeRead for that Place outside the closure, in such a case this option would be\n+    /// Some(closure_def_id).\n+    /// Otherwise, the value of the optional DefId will be None.\n+    ForLet(Option<DefId>),\n \n     /// If we have an index expression like\n     ///\n@@ -1618,7 +1628,9 @@ impl Debug for Statement<'_> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(box (ref place, ref rv)) => write!(fmt, \"{:?} = {:?}\", place, rv),\n-            FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n+            FakeRead(box (ref cause, ref place)) => {\n+                write!(fmt, \"FakeRead({:?}, {:?})\", cause, place)\n+            }\n             Retag(ref kind, ref place) => write!(\n                 fmt,\n                 \"Retag({}{:?})\","}, {"sha": "fd504f8c5d5acae6a65770544419e4ed96e8b3c6", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -380,7 +380,7 @@ macro_rules! make_mir_visitor {\n                     ) => {\n                         self.visit_assign(place, rvalue, location);\n                     }\n-                    StatementKind::FakeRead(_, place) => {\n+                    StatementKind::FakeRead(box (_, place)) => {\n                         self.visit_place(\n                             place,\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect),"}, {"sha": "d5deec820889ac05595d459789de888bf53970de", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -1728,7 +1728,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         impl<'tcx> Visitor<'tcx> for FakeReadCauseFinder<'tcx> {\n             fn visit_statement(&mut self, statement: &Statement<'tcx>, _: Location) {\n                 match statement {\n-                    Statement { kind: StatementKind::FakeRead(cause, box place), .. }\n+                    Statement { kind: StatementKind::FakeRead(box (cause, place)), .. }\n                         if *place == self.place =>\n                     {\n                         self.cause = Some(*cause);"}, {"sha": "2a388b8a72bb05b4aa3ff9a7099ccfcae3850e85", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -515,7 +515,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let block = &self.body.basic_blocks()[location.block];\n \n                 let kind = if let Some(&Statement {\n-                    kind: StatementKind::FakeRead(FakeReadCause::ForLet, _),\n+                    kind: StatementKind::FakeRead(box (FakeReadCause::ForLet(_), _)),\n                     ..\n                 }) = block.statements.get(location.statement_index)\n                 {"}, {"sha": "577d7d53814ee1d362a084d421919f8ce5c5ff06", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -7,8 +7,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItemGroup;\n use rustc_hir::GeneratorKind;\n use rustc_middle::mir::{\n-    AggregateKind, Constant, Field, Local, LocalInfo, LocalKind, Location, Operand, Place,\n-    PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n+    AggregateKind, Constant, FakeReadCause, Field, Local, LocalInfo, LocalKind, Location, Operand,\n+    Place, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Instance, Ty, TyCtxt};\n@@ -795,6 +795,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n+        // StatementKind::FakeRead only contains a def_id if they are introduced as a result\n+        // of pattern matching within a closure.\n+        if let StatementKind::FakeRead(box (cause, ref place)) = stmt.kind {\n+            match cause {\n+                FakeReadCause::ForMatchedPlace(Some(closure_def_id))\n+                | FakeReadCause::ForLet(Some(closure_def_id)) => {\n+                    debug!(\"move_spans: def_id={:?} place={:?}\", closure_def_id, place);\n+                    let places = &[Operand::Move(*place)];\n+                    if let Some((args_span, generator_kind, var_span)) =\n+                        self.closure_span(closure_def_id, moved_place, places)\n+                    {\n+                        return ClosureUse { generator_kind, args_span, var_span };\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         let normal_ret =\n             if moved_place.projection.iter().any(|p| matches!(p, ProjectionElem::Downcast(..))) {\n                 PatUse(stmt.source_info.span)"}, {"sha": "9374741f83749ec8507ebf8842c617e1628c1060", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -63,7 +63,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n \n                 self.mutate_place(location, *lhs, Shallow(None), JustWrite);\n             }\n-            StatementKind::FakeRead(_, _) => {\n+            StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {"}, {"sha": "71db6abde43512abd716ca9817815b0af1026cbd", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -574,7 +574,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n \n                 self.mutate_place(location, (*lhs, span), Shallow(None), JustWrite, flow_state);\n             }\n-            StatementKind::FakeRead(_, box ref place) => {\n+            StatementKind::FakeRead(box (_, ref place)) => {\n                 // Read for match doesn't access any memory and is used to\n                 // assert that a place is safe and live. So we don't have to\n                 // do any checks here."}, {"sha": "538d8921869c3e7267fe0f53ad2c40f12e426cb9", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -293,8 +293,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n-            StatementKind::FakeRead(_, place) => {\n-                self.create_move_path(**place);\n+            StatementKind::FakeRead(box (_, place)) => {\n+                self.create_move_path(*place);\n             }\n             StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {"}, {"sha": "324d826b375c1976d9a23b3a8e1e1a2e16a42272", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -683,10 +683,10 @@ pub(super) fn filtered_statement_span(\n         // and `_1` is the `Place` for `somenum`.\n         //\n         // If and when the Issue is resolved, remove this special case match pattern:\n-        StatementKind::FakeRead(cause, _) if cause == FakeReadCause::ForGuardBinding => None,\n+        StatementKind::FakeRead(box (cause, _)) if cause == FakeReadCause::ForGuardBinding => None,\n \n         // Retain spans from all other statements\n-        StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n+        StatementKind::FakeRead(box (_, _)) // Not including `ForGuardBinding`\n         | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }"}, {"sha": "fd4a783d12a003bb6f843f09892c6300eb525c62", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> CFG<'tcx> {\n         cause: FakeReadCause,\n         place: Place<'tcx>,\n     ) {\n-        let kind = StatementKind::FakeRead(cause, box place);\n+        let kind = StatementKind::FakeRead(box (cause, place));\n         let stmt = Statement { source_info, kind };\n         self.push(block, stmt);\n     }"}, {"sha": "822fbd91c947ea49ccbef8daf36b43fbc4e09522", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -179,24 +179,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //     match x { _ => () } // fake read of `x`\n                 // };\n                 // ```\n-                // FIXME(RFC2229): Remove feature gate once diagnostics are improved\n-                if this.tcx.features().capture_disjoint_fields {\n-                    for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n-                        let place_builder =\n-                            unpack!(block = this.as_place_builder(block, thir_place));\n-\n-                        if let Ok(place_builder_resolved) =\n-                            place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n-                        {\n-                            let mir_place =\n-                                place_builder_resolved.into_place(this.tcx, this.typeck_results);\n-                            this.cfg.push_fake_read(\n-                                block,\n-                                this.source_info(this.tcx.hir().span(*hir_id)),\n-                                *cause,\n-                                mir_place,\n-                            );\n-                        }\n+                for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n+                    let place_builder = unpack!(block = this.as_place_builder(block, thir_place));\n+\n+                    if let Ok(place_builder_resolved) =\n+                        place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n+                    {\n+                        let mir_place =\n+                            place_builder_resolved.into_place(this.tcx, this.typeck_results);\n+                        this.cfg.push_fake_read(\n+                            block,\n+                            this.source_info(this.tcx.hir().span(*hir_id)),\n+                            *cause,\n+                            mir_place,\n+                        );\n                     }\n                 }\n "}, {"sha": "0e422dc3c6378837608f27cd030bd0982514c0bd", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // uninhabited value. If we get never patterns, those will check that\n         // the place is initialized, and so this read would only be used to\n         // check safety.\n-        let cause_matched_place = FakeReadCause::ForMatchedPlace;\n+        let cause_matched_place = FakeReadCause::ForMatchedPlace(None);\n         let source_info = self.source_info(scrutinee_span);\n \n         if let Ok(scrutinee_builder) =\n@@ -400,7 +400,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let source_info = self.source_info(irrefutable_pat.span);\n-                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet, place);\n+                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet(None), place);\n \n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n@@ -435,7 +435,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let pattern_source_info = self.source_info(irrefutable_pat.span);\n-                let cause_let = FakeReadCause::ForLet;\n+                let cause_let = FakeReadCause::ForLet(None);\n                 self.cfg.push_fake_read(block, pattern_source_info, cause_let, place);\n \n                 let ty_source_info = self.source_info(user_ty_span);"}, {"sha": "02510cb6a44cf87806fa0edc8b1a9b3d8efcd069", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -280,9 +280,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 if needs_to_be_read {\n                     self.borrow_expr(&discr, ty::ImmBorrow);\n                 } else {\n+                    let closure_def_id = match discr_place.place.base {\n+                        PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+                        _ => None,\n+                    };\n+\n                     self.delegate.fake_read(\n                         discr_place.place.clone(),\n-                        FakeReadCause::ForMatchedPlace,\n+                        FakeReadCause::ForMatchedPlace(closure_def_id),\n                         discr_place.hir_id,\n                     );\n \n@@ -578,9 +583,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     }\n \n     fn walk_arm(&mut self, discr_place: &PlaceWithHirId<'tcx>, arm: &hir::Arm<'_>) {\n+        let closure_def_id = match discr_place.place.base {\n+            PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+            _ => None,\n+        };\n+\n         self.delegate.fake_read(\n             discr_place.place.clone(),\n-            FakeReadCause::ForMatchedPlace,\n+            FakeReadCause::ForMatchedPlace(closure_def_id),\n             discr_place.hir_id,\n         );\n         self.walk_pat(discr_place, &arm.pat);\n@@ -595,9 +605,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// Walks a pat that occurs in isolation (i.e., top-level of fn argument or\n     /// let binding, and *not* a match arm or nested pat.)\n     fn walk_irrefutable_pat(&mut self, discr_place: &PlaceWithHirId<'tcx>, pat: &hir::Pat<'_>) {\n+        let closure_def_id = match discr_place.place.base {\n+            PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+            _ => None,\n+        };\n+\n         self.delegate.fake_read(\n             discr_place.place.clone(),\n-            FakeReadCause::ForLet,\n+            FakeReadCause::ForLet(closure_def_id),\n             discr_place.hir_id,\n         );\n         self.walk_pat(discr_place, pat);"}, {"sha": "9fa478f8a826c73b97626ae2420e2d4035d26b81", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -130,12 +130,12 @@ fn address_of_reborrow() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:4:14: 4:21\n         _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:4:14: 4:21\n         _1 = &_2;                        // scope 0 at $DIR/address-of.rs:4:13: 4:21\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/address-of.rs:4:9: 4:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address-of.rs:4:9: 4:10\n         StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:5:22: 5:29\n         _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:5:22: 5:29\n         _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:5:17: 5:29\n-        FakeRead(ForLet, _3);            // scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n         StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n         _6 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:7:5: 7:6\n@@ -170,25 +170,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_13);                // scope 2 at $DIR/address-of.rs:11:20: 11:21\n         StorageLive(_15);                // scope 2 at $DIR/address-of.rs:13:9: 13:10\n         _15 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:13:23: 13:24\n-        FakeRead(ForLet, _15);           // scope 2 at $DIR/address-of.rs:13:9: 13:10\n+        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address-of.rs:13:9: 13:10\n         AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address-of.rs:13:12: 13:20\n         StorageLive(_16);                // scope 3 at $DIR/address-of.rs:14:9: 14:10\n         _16 = &raw const (*_1);          // scope 3 at $DIR/address-of.rs:14:31: 14:32\n-        FakeRead(ForLet, _16);           // scope 3 at $DIR/address-of.rs:14:9: 14:10\n+        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address-of.rs:14:9: 14:10\n         AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address-of.rs:14:12: 14:28\n         StorageLive(_17);                // scope 4 at $DIR/address-of.rs:15:9: 15:10\n         StorageLive(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         _18 = &raw const (*_1);          // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         StorageDead(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        FakeRead(ForLet, _17);           // scope 4 at $DIR/address-of.rs:15:9: 15:10\n+        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address-of.rs:15:9: 15:10\n         AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address-of.rs:15:12: 15:27\n         StorageLive(_19);                // scope 5 at $DIR/address-of.rs:16:9: 16:10\n         StorageLive(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         _20 = &raw const (*_1);          // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         StorageDead(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        FakeRead(ForLet, _19);           // scope 5 at $DIR/address-of.rs:16:9: 16:10\n+        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address-of.rs:16:9: 16:10\n         AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address-of.rs:16:12: 16:24\n         StorageLive(_21);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n         StorageLive(_22);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n@@ -218,25 +218,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_27);                // scope 6 at $DIR/address-of.rs:21:22: 21:23\n         StorageLive(_29);                // scope 6 at $DIR/address-of.rs:23:9: 23:10\n         _29 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:23:23: 23:24\n-        FakeRead(ForLet, _29);           // scope 6 at $DIR/address-of.rs:23:9: 23:10\n+        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address-of.rs:23:9: 23:10\n         AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address-of.rs:23:12: 23:20\n         StorageLive(_30);                // scope 7 at $DIR/address-of.rs:24:9: 24:10\n         _30 = &raw const (*_3);          // scope 7 at $DIR/address-of.rs:24:31: 24:32\n-        FakeRead(ForLet, _30);           // scope 7 at $DIR/address-of.rs:24:9: 24:10\n+        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address-of.rs:24:9: 24:10\n         AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address-of.rs:24:12: 24:28\n         StorageLive(_31);                // scope 8 at $DIR/address-of.rs:25:9: 25:10\n         StorageLive(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         _32 = &raw const (*_3);          // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         StorageDead(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        FakeRead(ForLet, _31);           // scope 8 at $DIR/address-of.rs:25:9: 25:10\n+        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address-of.rs:25:9: 25:10\n         AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address-of.rs:25:12: 25:27\n         StorageLive(_33);                // scope 9 at $DIR/address-of.rs:26:9: 26:10\n         StorageLive(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         _34 = &raw const (*_3);          // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         StorageDead(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        FakeRead(ForLet, _33);           // scope 9 at $DIR/address-of.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address-of.rs:26:9: 26:10\n         AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address-of.rs:26:12: 26:24\n         StorageLive(_35);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n         StorageLive(_36);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n@@ -266,25 +266,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_41);                // scope 10 at $DIR/address-of.rs:31:20: 31:21\n         StorageLive(_43);                // scope 10 at $DIR/address-of.rs:33:9: 33:10\n         _43 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:33:21: 33:22\n-        FakeRead(ForLet, _43);           // scope 10 at $DIR/address-of.rs:33:9: 33:10\n+        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address-of.rs:33:9: 33:10\n         AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address-of.rs:33:12: 33:18\n         StorageLive(_44);                // scope 11 at $DIR/address-of.rs:34:9: 34:10\n         _44 = &raw mut (*_3);            // scope 11 at $DIR/address-of.rs:34:29: 34:30\n-        FakeRead(ForLet, _44);           // scope 11 at $DIR/address-of.rs:34:9: 34:10\n+        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address-of.rs:34:9: 34:10\n         AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address-of.rs:34:12: 34:26\n         StorageLive(_45);                // scope 12 at $DIR/address-of.rs:35:9: 35:10\n         StorageLive(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         _46 = &raw mut (*_3);            // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         StorageDead(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        FakeRead(ForLet, _45);           // scope 12 at $DIR/address-of.rs:35:9: 35:10\n+        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address-of.rs:35:9: 35:10\n         AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address-of.rs:35:12: 35:25\n         StorageLive(_47);                // scope 13 at $DIR/address-of.rs:36:9: 36:10\n         StorageLive(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         _48 = &raw mut (*_3);            // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         StorageDead(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        FakeRead(ForLet, _47);           // scope 13 at $DIR/address-of.rs:36:9: 36:10\n+        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address-of.rs:36:9: 36:10\n         AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:36:12: 36:22\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:3:26: 37:2\n         StorageDead(_47);                // scope 13 at $DIR/address-of.rs:37:1: 37:2"}, {"sha": "195f3e2e65c642cd1eacabcd833dca54630f781a", "filename": "src/test/mir-opt/address_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -24,19 +24,19 @@ fn borrow_and_cast(_1: i32) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/address-of.rs:42:13: 42:15\n         _3 = &_1;                        // scope 0 at $DIR/address-of.rs:42:13: 42:15\n         _2 = &raw const (*_3);           // scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/address-of.rs:42:9: 42:10\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address-of.rs:42:9: 42:10\n         StorageDead(_3);                 // scope 0 at $DIR/address-of.rs:42:29: 42:30\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:43:9: 43:10\n         StorageLive(_5);                 // scope 1 at $DIR/address-of.rs:43:13: 43:19\n         _5 = &mut _1;                    // scope 1 at $DIR/address-of.rs:43:13: 43:19\n         _4 = &raw const (*_5);           // scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        FakeRead(ForLet, _4);            // scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address-of.rs:43:9: 43:10\n         StorageDead(_5);                 // scope 1 at $DIR/address-of.rs:43:33: 43:34\n         StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:44:13: 44:19\n         _7 = &mut _1;                    // scope 2 at $DIR/address-of.rs:44:13: 44:19\n         _6 = &raw mut (*_7);             // scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        FakeRead(ForLet, _6);            // scope 2 at $DIR/address-of.rs:44:9: 44:10\n+        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:44:31: 44:32\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:41:32: 45:2\n         StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:45:1: 45:2"}, {"sha": "e751b825c050535f5f776972e10f650200ceed69", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -28,15 +28,15 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:11:20: 11:25\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n         StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n         _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n         _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:16:5: 16:24\n         StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:23: 16:24\n         StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n         _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n-        FakeRead(ForLet, _4);            // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n+        FakeRead(ForLet(None), _4);      // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n         AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:18:17: 18:33\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20"}, {"sha": "93507879a6f83e286563fb152ae91c6215301369", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -18,7 +18,7 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n         switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:15: 6:16\n     }\n "}, {"sha": "8355b2d195e148d519123c0625eaddb82d405bbb", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -14,7 +14,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         _1 = const false;                // scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n "}, {"sha": "06fbbda3d9e2298b3c144ddcdd10eba2e6572416", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -24,7 +24,7 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n@@ -51,7 +51,7 @@ fn main() -> () {\n     }\n \n     bb8: {\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n         StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21"}, {"sha": "2e6783b7f3c9d9987f5afdf08bc80ff284d476f9", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25"}, {"sha": "2e6783b7f3c9d9987f5afdf08bc80ff284d476f9", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25"}, {"sha": "7def08ece220b09d7babc4741428ada79e1ee3e3", "filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -9,7 +9,7 @@ fn f(_1: Void) -> ! {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n         StorageLive(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n     }\n "}, {"sha": "3c26b20c35e2d79fc4a033ffd5cd382a9e55b7d3", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -29,7 +29,7 @@ fn main() -> () {\n \n     bb1: {\n         StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:43: 17:44\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:16:12: 16:16\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8"}, {"sha": "99c7ac8d5b708c4e7e076ec359e6f8699fa0dde2", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -41,7 +41,7 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n-        FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        FakeRead(ForLet(None), _6);      // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n         goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n     }"}, {"sha": "3395cbfbdfb3ac30c4b83c4a57352a0bb7332b38", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -31,7 +31,7 @@\n       }\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+-         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n -         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n +         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n       }"}, {"sha": "5af242376c9304066de78725f9c5cfb9acd0d119", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -27,7 +27,7 @@ fn full_tested_match() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n         switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }"}, {"sha": "a4ebf8a02466a5160d5dd27806afba0f3bf4418b", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -26,7 +26,7 @@ fn full_tested_match2() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n         switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }"}, {"sha": "5de52b324f43ffd2813cca70ff7428ade62930af", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -37,7 +37,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }"}, {"sha": "5bb910947ca2523556cea829e733822e11189d7f", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -21,12 +21,12 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         _1 = const 3_i32;                // scope 0 at $DIR/match_test.rs:7:13: 7:14\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/match_test.rs:7:9: 7:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         _2 = const true;                 // scope 1 at $DIR/match_test.rs:8:13: 8:17\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         StorageLive(_3);                 // scope 2 at $DIR/match_test.rs:12:5: 17:6\n-        FakeRead(ForMatchedPlace, _1);   // scope 2 at $DIR/match_test.rs:12:11: 12:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 2 at $DIR/match_test.rs:12:11: 12:12\n         _6 = Le(const 0_i32, _1);        // scope 2 at $DIR/match_test.rs:13:9: 13:14\n         switchInt(move _6) -> [false: bb4, otherwise: bb1]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }"}, {"sha": "39e6cee11b4c9c8a6e9fca6a08e2316f1f2a58d0", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -46,7 +46,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x00000001)): usize), const Const(Value(Scalar(0x00000002)): usize), const Const(Value(Scalar(0x00000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n@@ -57,10 +57,10 @@ fn main() -> () {\n \n     bb1: {\n         _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6"}, {"sha": "6021b6529f911f81110faf21750685aad4452d35", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -46,7 +46,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n@@ -57,10 +57,10 @@ fn main() -> () {\n \n     bb1: {\n         _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6"}, {"sha": "f54c8f8ab4a2e2ba60f1946669d8b1b61a05da42", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -36,7 +36,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n         AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/receiver-ptr-mutability.rs:14:14: 14:23\n         StorageLive(_2);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n         StorageLive(_3);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n@@ -63,7 +63,7 @@ fn main() -> () {\n         _7 = &_8;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:18:35: 18:41\n         _6 = &_7;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:18:34: 18:41\n         _5 = &(*_6);                     // scope 1 at $DIR/receiver-ptr-mutability.rs:18:34: 18:41\n-        FakeRead(ForLet, _5);            // scope 1 at $DIR/receiver-ptr-mutability.rs:18:9: 18:16\n+        FakeRead(ForLet(None), _5);      // scope 1 at $DIR/receiver-ptr-mutability.rs:18:9: 18:16\n         AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 1 at $DIR/receiver-ptr-mutability.rs:18:18: 18:31\n         StorageDead(_6);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:18:41: 18:42\n         StorageLive(_10);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16"}, {"sha": "4aa388fc67bd0204208e5795f831e03a17d663e8", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -13,7 +13,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n           _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n           switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16"}, {"sha": "841cca7c381f78670161de9738aff47375aaed64", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -5,7 +5,7 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n         switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n "}, {"sha": "841cca7c381f78670161de9738aff47375aaed64", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -5,7 +5,7 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n         switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n "}, {"sha": "e02580135af38f3f9a02d8745b52b024052d91c9", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -39,7 +39,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         _1 = const 0_i32;                // scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         StorageLive(_2);                 // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n         StorageLive(_3);                 // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n         StorageLive(_4);                 // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n@@ -48,14 +48,14 @@ fn main() -> () {\n         _4 = Option::<i32>::Some(move _5); // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n         StorageDead(_5);                 // scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n         _3 = &_4;                        // scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n-        FakeRead(ForLet, _3);            // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n         _2 = const ();                   // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n         StorageDead(_4);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_3);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_2);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageLive(_6);                 // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _6 = const 1_i32;                // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n-        FakeRead(ForLet, _6);            // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        FakeRead(ForLet(None), _6);      // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _0 = const ();                   // scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n         StorageDead(_6);                 // scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_ranges.rs:9:1: 9:2"}, {"sha": "7f81d9fc482ff91e17445f060855618925bc9e98", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -48,7 +48,7 @@ fn move_out_by_subslice() -> () {\n \n     bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2"}, {"sha": "62ab494c066285935830d66237b7b9bcba83a4bc", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -48,7 +48,7 @@ fn move_out_from_end() -> () {\n \n     bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2"}, {"sha": "dac4d93499dc2e7c31a653a25a9673f7fc9d5d04", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89eab9bca8b7efc37d386ff38d663035a5192de/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=a89eab9bca8b7efc37d386ff38d663035a5192de", "patch": "@@ -212,7 +212,7 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n             check_rvalue(tcx, body, def_id, rval, span)\n         }\n \n-        StatementKind::FakeRead(_, place) |\n+        StatementKind::FakeRead(box (_, place)) => check_place(tcx, *place, span, body),\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n "}]}