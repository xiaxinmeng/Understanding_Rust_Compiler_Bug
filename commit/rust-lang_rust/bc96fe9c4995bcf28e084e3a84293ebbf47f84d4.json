{"sha": "bc96fe9c4995bcf28e084e3a84293ebbf47f84d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOTZmZTljNDk5NWJjZjI4ZTA4NGUzYTg0MjkzZWJiZjQ3Zjg0ZDQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T15:44:17Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T19:25:06Z"}, "message": "get rid of the std::map::Map LinearMap impl\n\nThis legacy trait needs to be dropped in order to migrate to\ncore::container::Map, which doesn't require @ and Copy, and will make\nproper use of borrowed pointers.", "tree": {"sha": "d0fd728fd468a22b6de7dcf256914d07396e13b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0fd728fd468a22b6de7dcf256914d07396e13b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4", "html_url": "https://github.com/rust-lang/rust/commit/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ef28c33abff6bcaf353a3958e497e15ee3268d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ef28c33abff6bcaf353a3958e497e15ee3268d", "html_url": "https://github.com/rust-lang/rust/commit/b7ef28c33abff6bcaf353a3958e497e15ee3268d"}], "stats": {"total": 116, "additions": 0, "deletions": 116}, "files": [{"sha": "5a64fec3763bd7415cd399007aba8f9476512609", "filename": "src/libstd/map.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=bc96fe9c4995bcf28e084e3a84293ebbf47f84d4", "patch": "@@ -19,7 +19,6 @@ use core::ops;\n use core::to_str::ToStr;\n use core::mutable::Mut;\n use core::prelude::*;\n-use core::hashmap::linear::LinearMap;\n use core::to_bytes::IterBytes;\n use core::uint;\n use core::vec;\n@@ -498,121 +497,6 @@ pub fn hash_from_vec<K: Eq IterBytes Hash Const Copy, V: Copy>(\n     map\n }\n \n-// FIXME #4431: Transitional\n-impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n-    Map<K, V> {\n-    pure fn size() -> uint {\n-        unsafe {\n-            do self.borrow_const |p| {\n-                p.len()\n-            }\n-        }\n-    }\n-\n-    fn insert(key: K, value: V) -> bool {\n-        do self.borrow_mut |p| {\n-            p.insert(key, value)\n-        }\n-    }\n-\n-    pure fn contains_key(key: K) -> bool {\n-        do self.borrow_const |p| {\n-            p.contains_key(&key)\n-        }\n-    }\n-\n-    pure fn contains_key_ref(key: &K) -> bool {\n-        do self.borrow_const |p| {\n-            p.contains_key(key)\n-        }\n-    }\n-\n-    pure fn get(key: K) -> V {\n-        do self.borrow_const |p| {\n-            p.get(&key)\n-        }\n-    }\n-\n-    pure fn find(key: K) -> Option<V> {\n-        unsafe {\n-            do self.borrow_const |p| {\n-                p.find(&key)\n-            }\n-        }\n-    }\n-\n-    fn update_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool {\n-        match self.find(key) {\n-            None            => return self.insert(key, newval),\n-            Some(copy orig) => return self.insert(key, ff(key, orig, newval))\n-        }\n-    }\n-\n-    fn update(key: K, newval: V, ff: fn(V, V) -> V) -> bool {\n-        return self.update_with_key(key, newval, |_k, v, v1| ff(v,v1));\n-    }\n-\n-    fn remove(key: K) -> bool {\n-        do self.borrow_mut |p| {\n-            p.remove(&key)\n-        }\n-    }\n-\n-    fn clear() {\n-        do self.borrow_mut |p| {\n-            p.clear()\n-        }\n-    }\n-\n-    pure fn each(op: fn(key: K, value: V) -> bool) {\n-        unsafe {\n-            do self.borrow_imm |p| {\n-                p.each(|k, v| op(*k, *v))\n-            }\n-        }\n-    }\n-\n-    pure fn each_key(op: fn(key: K) -> bool) {\n-        unsafe {\n-            do self.borrow_imm |p| {\n-                p.each_key(|k| op(*k))\n-            }\n-        }\n-    }\n-\n-    pure fn each_value(op: fn(value: V) -> bool) {\n-        unsafe {\n-            do self.borrow_imm |p| {\n-                p.each_value(|v| op(*v))\n-            }\n-        }\n-    }\n-\n-    pure fn each_ref(op: fn(key: &K, value: &V) -> bool) {\n-        unsafe {\n-            do self.borrow_imm |p| {\n-                p.each(op)\n-            }\n-        }\n-    }\n-\n-    pure fn each_key_ref(op: fn(key: &K) -> bool) {\n-        unsafe {\n-            do self.borrow_imm |p| {\n-                p.each_key(op)\n-            }\n-        }\n-    }\n-\n-    pure fn each_value_ref(op: fn(value: &V) -> bool) {\n-        unsafe {\n-            do self.borrow_imm |p| {\n-                p.each_value(op)\n-            }\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use map;"}]}