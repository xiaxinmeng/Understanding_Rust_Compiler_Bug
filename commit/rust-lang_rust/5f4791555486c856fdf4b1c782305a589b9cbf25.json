{"sha": "5f4791555486c856fdf4b1c782305a589b9cbf25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDc5MTU1NTQ4NmM4NTZmZGY0YjFjNzgyMzA1YTU4OWI5Y2JmMjU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-17T19:23:25Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-17T23:47:12Z"}, "message": "Refactor `is_prelude` to only apply to glob imports", "tree": {"sha": "406eae51330a9305c026ee71a57a4afd1e008a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/406eae51330a9305c026ee71a57a4afd1e008a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f4791555486c856fdf4b1c782305a589b9cbf25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4791555486c856fdf4b1c782305a589b9cbf25", "html_url": "https://github.com/rust-lang/rust/commit/5f4791555486c856fdf4b1c782305a589b9cbf25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f4791555486c856fdf4b1c782305a589b9cbf25/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5888717f48444aac7a3f849b33a2f70feda1d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5888717f48444aac7a3f849b33a2f70feda1d8", "html_url": "https://github.com/rust-lang/rust/commit/aa5888717f48444aac7a3f849b33a2f70feda1d8"}], "stats": {"total": 46, "additions": 16, "deletions": 30}, "files": [{"sha": "51d00266b71919d48d46677e052dbb7971003759", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f4791555486c856fdf4b1c782305a589b9cbf25/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4791555486c856fdf4b1c782305a589b9cbf25/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=5f4791555486c856fdf4b1c782305a589b9cbf25", "patch": "@@ -177,13 +177,9 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                         }\n \n                         let subclass = ImportDirectiveSubclass::single(binding, source_name);\n+                        let span = view_path.span;\n+                        parent.add_import_directive(module_path, subclass, span, item.id, vis);\n                         self.unresolved_imports += 1;\n-                        parent.add_import_directive(module_path,\n-                                                    subclass,\n-                                                    view_path.span,\n-                                                    item.id,\n-                                                    vis,\n-                                                    is_prelude);\n                     }\n                     ViewPathList(_, ref source_items) => {\n                         // Make sure there's at most one `mod` import in the list.\n@@ -228,23 +224,16 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                                 }\n                             };\n                             let subclass = ImportDirectiveSubclass::single(rename, name);\n+                            let (span, id) = (source_item.span, source_item.node.id());\n+                            parent.add_import_directive(module_path, subclass, span, id, vis);\n                             self.unresolved_imports += 1;\n-                            parent.add_import_directive(module_path,\n-                                                        subclass,\n-                                                        source_item.span,\n-                                                        source_item.node.id(),\n-                                                        vis,\n-                                                        is_prelude);\n                         }\n                     }\n                     ViewPathGlob(_) => {\n+                        let subclass = GlobImport { is_prelude: is_prelude };\n+                        let span = view_path.span;\n+                        parent.add_import_directive(module_path, subclass, span, item.id, vis);\n                         self.unresolved_imports += 1;\n-                        parent.add_import_directive(module_path,\n-                                                    GlobImport,\n-                                                    view_path.span,\n-                                                    item.id,\n-                                                    vis,\n-                                                    is_prelude);\n                     }\n                 }\n             }"}, {"sha": "a337cb6a4c11363bcf2d4f5a774dee82e28ed00a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f4791555486c856fdf4b1c782305a589b9cbf25/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4791555486c856fdf4b1c782305a589b9cbf25/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5f4791555486c856fdf4b1c782305a589b9cbf25", "patch": "@@ -41,7 +41,7 @@ pub enum ImportDirectiveSubclass {\n         type_determined: Cell<bool>,\n         value_determined: Cell<bool>,\n     },\n-    GlobImport,\n+    GlobImport { is_prelude: bool },\n }\n \n impl ImportDirectiveSubclass {\n@@ -64,7 +64,6 @@ pub struct ImportDirective<'a> {\n     subclass: ImportDirectiveSubclass,\n     span: Span,\n     vis: ty::Visibility, // see note in ImportResolutionPerNamespace about how to use this\n-    is_prelude: bool,\n }\n \n impl<'a> ImportDirective<'a> {\n@@ -84,7 +83,7 @@ impl<'a> ImportDirective<'a> {\n     }\n \n     pub fn is_glob(&self) -> bool {\n-        match self.subclass { ImportDirectiveSubclass::GlobImport => true, _ => false }\n+        match self.subclass { ImportDirectiveSubclass::GlobImport { .. } => true, _ => false }\n     }\n }\n \n@@ -191,7 +190,7 @@ impl<'a> NameResolution<'a> {\n                 };\n                 let name = match directive.subclass {\n                     SingleImport { source, .. } => source,\n-                    GlobImport => unreachable!(),\n+                    GlobImport { .. } => unreachable!(),\n                 };\n                 match target_module.resolve_name(name, ns, false) {\n                     Failed(_) => {}\n@@ -282,16 +281,14 @@ impl<'a> ::ModuleS<'a> {\n                                 subclass: ImportDirectiveSubclass,\n                                 span: Span,\n                                 id: NodeId,\n-                                vis: ty::Visibility,\n-                                is_prelude: bool) {\n+                                vis: ty::Visibility) {\n         let directive = self.arenas.alloc_import_directive(ImportDirective {\n             module_path: module_path,\n             target_module: Cell::new(None),\n             subclass: subclass,\n             span: span,\n             id: id,\n             vis: vis,\n-            is_prelude: is_prelude,\n         });\n \n         self.unresolved_imports.borrow_mut().push(directive);\n@@ -304,8 +301,8 @@ impl<'a> ::ModuleS<'a> {\n             }\n             // We don't add prelude imports to the globs since they only affect lexical scopes,\n             // which are not relevant to import resolution.\n-            GlobImport if directive.is_prelude => {}\n-            GlobImport => self.globs.borrow_mut().push(directive),\n+            GlobImport { is_prelude: true } => {}\n+            GlobImport { .. } => self.globs.borrow_mut().push(directive),\n         }\n     }\n \n@@ -496,7 +493,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         let (source, target, value_determined, type_determined) = match directive.subclass {\n             SingleImport { source, target, ref value_determined, ref type_determined } =>\n                 (source, target, value_determined, type_determined),\n-            GlobImport => return self.resolve_glob_import(target_module, directive),\n+            GlobImport { .. } => return self.resolve_glob_import(target_module, directive),\n         };\n \n         // We need to resolve both namespaces for this to succeed.\n@@ -644,7 +641,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n         self.resolver.populate_module_if_necessary(target_module);\n \n-        if directive.is_prelude {\n+        if let GlobImport { is_prelude: true } = directive.subclass {\n             *module_.prelude.borrow_mut() = Some(target_module);\n             return Success(());\n         }\n@@ -747,7 +744,7 @@ fn import_path_to_string(names: &[Name], subclass: &ImportDirectiveSubclass) ->\n fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> String {\n     match *subclass {\n         SingleImport { source, .. } => source.to_string(),\n-        GlobImport => \"*\".to_string(),\n+        GlobImport { .. } => \"*\".to_string(),\n     }\n }\n "}]}