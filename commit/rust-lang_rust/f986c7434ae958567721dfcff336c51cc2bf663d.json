{"sha": "f986c7434ae958567721dfcff336c51cc2bf663d", "node_id": "C_kwDOAAsO6NoAKGY5ODZjNzQzNGFlOTU4NTY3NzIxZGZjZmYzMzZjNTFjYzJiZjY2M2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-16T02:34:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-16T02:34:32Z"}, "message": "Rollup merge of #94868 - dtolnay:noblock, r=Dylan-DPC\n\nFormat core and std macro rules, removing needless surrounding blocks\n\nMany of the asserting and printing macros in `core` and `std` are written with prehistoric-looking formatting, like this:\n\nhttps://github.com/rust-lang/rust/blob/335ffbfa547df94ac236f5c56130cecf99c8d82b/library/std/src/macros.rs#L96-L101\n\nIn modern Rust style this would conventionally be written as follows instead, always using braces and a trailing semicolon on the macro arms:\n\nhttps://github.com/rust-lang/rust/blob/af53809c874e0afb7be966df4d3cfcaa05277c53/library/std/src/macros.rs#L98-L105\n\nGetting rid of the unneeded braces inside the expansion reduces extraneous indentation in macro-expanded code. For example:\n\n```rust\nprintln!(\"repro {}\", true);\n```\n\n```rust\n// before:\n\n{\n    ::std::io::_print(\n        ::core::fmt::Arguments::new_v1(\n            &[\"repro \", \"\\n\"],\n            &[::core::fmt::ArgumentV1::new_display(&true)],\n        ),\n    );\n};\n```\n\n```rust\n// after:\n\n::std::io::_print(\n    ::core::fmt::Arguments::new_v1(\n        &[\"repro \", \"\\n\"],\n        &[::core::fmt::ArgumentV1::new_display(&true)],\n    ),\n);\n```", "tree": {"sha": "b0ee5c1896c7e30952382d192c204c1d31622caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ee5c1896c7e30952382d192c204c1d31622caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f986c7434ae958567721dfcff336c51cc2bf663d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMUy4CRBK7hj4Ov3rIwAAwM0IACDg0aI+DVqWqKRsFiix+p4i\nx2jrJjdmLLKrWeUEQwyVrzl/3nRYdG/mldm0Qqb0hhUeTQmSrJHrLrq7rpPHTQQ5\nmuB3z7mY8fkrUdbBWhHFj0J8rXwnqNaz+sUlVjei0xKZeFwIQAtZZnz529MlxMgB\n2S11JfrIHHo8/1D3ZVJdj/a9KJCiJX5aLDaHbmNGvxpwayZ/bIlsGNvecbOzfFgm\nGawkVyAFtVwr4kjwfYhb6LQustq9LfoqgTMMXpuU58DEI3+dHSP6g1EuTbO/sIip\neXs7DN8WnbFC13AQwYOEfzNRc+H7u4576aaxwl70d5rX9KKMIm+2gb009Jt5stM=\n=eg/R\n-----END PGP SIGNATURE-----\n", "payload": "tree b0ee5c1896c7e30952382d192c204c1d31622caa\nparent f21488a12cf819947741e9e3549f7670ada9d26a\nparent ac5c657a0801db84b29ea9b3ae322107756575b0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647398072 +0100\ncommitter GitHub <noreply@github.com> 1647398072 +0100\n\nRollup merge of #94868 - dtolnay:noblock, r=Dylan-DPC\n\nFormat core and std macro rules, removing needless surrounding blocks\n\nMany of the asserting and printing macros in `core` and `std` are written with prehistoric-looking formatting, like this:\n\nhttps://github.com/rust-lang/rust/blob/335ffbfa547df94ac236f5c56130cecf99c8d82b/library/std/src/macros.rs#L96-L101\n\nIn modern Rust style this would conventionally be written as follows instead, always using braces and a trailing semicolon on the macro arms:\n\nhttps://github.com/rust-lang/rust/blob/af53809c874e0afb7be966df4d3cfcaa05277c53/library/std/src/macros.rs#L98-L105\n\nGetting rid of the unneeded braces inside the expansion reduces extraneous indentation in macro-expanded code. For example:\n\n```rust\nprintln!(\"repro {}\", true);\n```\n\n```rust\n// before:\n\n{\n    ::std::io::_print(\n        ::core::fmt::Arguments::new_v1(\n            &[\"repro \", \"\\n\"],\n            &[::core::fmt::ArgumentV1::new_display(&true)],\n        ),\n    );\n};\n```\n\n```rust\n// after:\n\n::std::io::_print(\n    ::core::fmt::Arguments::new_v1(\n        &[\"repro \", \"\\n\"],\n        &[::core::fmt::ArgumentV1::new_display(&true)],\n    ),\n);\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f986c7434ae958567721dfcff336c51cc2bf663d", "html_url": "https://github.com/rust-lang/rust/commit/f986c7434ae958567721dfcff336c51cc2bf663d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f986c7434ae958567721dfcff336c51cc2bf663d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f21488a12cf819947741e9e3549f7670ada9d26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f21488a12cf819947741e9e3549f7670ada9d26a", "html_url": "https://github.com/rust-lang/rust/commit/f21488a12cf819947741e9e3549f7670ada9d26a"}, {"sha": "ac5c657a0801db84b29ea9b3ae322107756575b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5c657a0801db84b29ea9b3ae322107756575b0", "html_url": "https://github.com/rust-lang/rust/commit/ac5c657a0801db84b29ea9b3ae322107756575b0"}], "stats": {"total": 120, "additions": 76, "deletions": 44}, "files": [{"sha": "74c94680e47e54c82dd903b522a2e2cfed75d56e", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f986c7434ae958567721dfcff336c51cc2bf663d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f986c7434ae958567721dfcff336c51cc2bf663d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=f986c7434ae958567721dfcff336c51cc2bf663d", "patch": "@@ -34,7 +34,7 @@ macro_rules! panic {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"assert_eq_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! assert_eq {\n-    ($left:expr, $right:expr $(,)?) => ({\n+    ($left:expr, $right:expr $(,)?) => {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n@@ -46,8 +46,8 @@ macro_rules! assert_eq {\n                 }\n             }\n         }\n-    });\n-    ($left:expr, $right:expr, $($arg:tt)+) => ({\n+    };\n+    ($left:expr, $right:expr, $($arg:tt)+) => {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n@@ -59,7 +59,7 @@ macro_rules! assert_eq {\n                 }\n             }\n         }\n-    });\n+    };\n }\n \n /// Asserts that two expressions are not equal to each other (using [`PartialEq`]).\n@@ -84,7 +84,7 @@ macro_rules! assert_eq {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"assert_ne_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! assert_ne {\n-    ($left:expr, $right:expr $(,)?) => ({\n+    ($left:expr, $right:expr $(,)?) => {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n@@ -96,8 +96,8 @@ macro_rules! assert_ne {\n                 }\n             }\n         }\n-    });\n-    ($left:expr, $right:expr, $($arg:tt)+) => ({\n+    };\n+    ($left:expr, $right:expr, $($arg:tt)+) => {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n@@ -109,7 +109,7 @@ macro_rules! assert_ne {\n                 }\n             }\n         }\n-    });\n+    };\n }\n \n /// Asserts that an expression matches any of the given patterns.\n@@ -142,7 +142,7 @@ macro_rules! assert_ne {\n #[allow_internal_unstable(core_panic)]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro assert_matches {\n-    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => ({\n+    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => {\n         match $left {\n             $( $pattern )|+ $( if $guard )? => {}\n             ref left_val => {\n@@ -153,8 +153,8 @@ pub macro assert_matches {\n                 );\n             }\n         }\n-    }),\n-    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )?, $($arg:tt)+) => ({\n+    },\n+    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )?, $($arg:tt)+) => {\n         match $left {\n             $( $pattern )|+ $( if $guard )? => {}\n             ref left_val => {\n@@ -165,7 +165,7 @@ pub macro assert_matches {\n                 );\n             }\n         }\n-    }),\n+    },\n }\n \n /// Asserts that a boolean expression is `true` at runtime.\n@@ -214,7 +214,11 @@ pub macro assert_matches {\n #[rustc_diagnostic_item = \"debug_assert_macro\"]\n #[allow_internal_unstable(edition_panic)]\n macro_rules! debug_assert {\n-    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n+    ($($arg:tt)*) => {\n+        if $crate::cfg!(debug_assertions) {\n+            $crate::assert!($($arg)*);\n+        }\n+    };\n }\n \n /// Asserts that two expressions are equal to each other.\n@@ -240,7 +244,11 @@ macro_rules! debug_assert {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_eq_macro\")]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => {\n+        if $crate::cfg!(debug_assertions) {\n+            $crate::assert_eq!($($arg)*);\n+        }\n+    };\n }\n \n /// Asserts that two expressions are not equal to each other.\n@@ -266,7 +274,11 @@ macro_rules! debug_assert_eq {\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_ne_macro\")]\n macro_rules! debug_assert_ne {\n-    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n+    ($($arg:tt)*) => {\n+        if $crate::cfg!(debug_assertions) {\n+            $crate::assert_ne!($($arg)*);\n+        }\n+    };\n }\n \n /// Asserts that an expression matches any of the given patterns.\n@@ -305,7 +317,9 @@ macro_rules! debug_assert_ne {\n #[allow_internal_unstable(assert_matches)]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro debug_assert_matches($($arg:tt)*) {\n-    if $crate::cfg!(debug_assertions) { $crate::assert_matches::assert_matches!($($arg)*); }\n+    if $crate::cfg!(debug_assertions) {\n+        $crate::assert_matches::assert_matches!($($arg)*);\n+    }\n }\n \n /// Returns whether the given expression matches any of the given patterns.\n@@ -331,7 +345,7 @@ macro_rules! matches {\n             $( $pattern )|+ $( if $guard )? => true,\n             _ => false\n         }\n-    }\n+    };\n }\n \n /// Unwraps a result or propagates its error.\n@@ -482,7 +496,9 @@ macro_rules! r#try {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"write_macro\")]\n macro_rules! write {\n-    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt($crate::format_args!($($arg)*)))\n+    ($dst:expr, $($arg:tt)*) => {\n+        $dst.write_fmt($crate::format_args!($($arg)*))\n+    };\n }\n \n /// Write formatted data into a buffer, with a newline appended.\n@@ -534,12 +550,12 @@ macro_rules! write {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"writeln_macro\")]\n #[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n-    ($dst:expr $(,)?) => (\n+    ($dst:expr $(,)?) => {\n         $crate::write!($dst, \"\\n\")\n-    );\n-    ($dst:expr, $($arg:tt)*) => (\n+    };\n+    ($dst:expr, $($arg:tt)*) => {\n         $dst.write_fmt($crate::format_args_nl!($($arg)*))\n-    );\n+    };\n }\n \n /// Indicates unreachable code.\n@@ -683,8 +699,12 @@ macro_rules! unreachable {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"unimplemented_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! unimplemented {\n-    () => ($crate::panicking::panic(\"not implemented\"));\n-    ($($arg:tt)+) => ($crate::panic!(\"not implemented: {}\", $crate::format_args!($($arg)+)));\n+    () => {\n+        $crate::panicking::panic(\"not implemented\")\n+    };\n+    ($($arg:tt)+) => {\n+        $crate::panic!(\"not implemented: {}\", $crate::format_args!($($arg)+))\n+    };\n }\n \n /// Indicates unfinished code.\n@@ -746,8 +766,12 @@ macro_rules! unimplemented {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"todo_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! todo {\n-    () => ($crate::panicking::panic(\"not yet implemented\"));\n-    ($($arg:tt)+) => ($crate::panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n+    () => {\n+        $crate::panicking::panic(\"not yet implemented\")\n+    };\n+    ($($arg:tt)+) => {\n+        $crate::panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+))\n+    };\n }\n \n /// Definitions of built-in macros."}, {"sha": "c597fb5df45d28fd49af6d3a20a95b0a49997d16", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f986c7434ae958567721dfcff336c51cc2bf663d/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f986c7434ae958567721dfcff336c51cc2bf663d/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=f986c7434ae958567721dfcff336c51cc2bf663d", "patch": "@@ -60,7 +60,9 @@ macro_rules! panic {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"print_macro\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! print {\n-    ($($arg:tt)*) => ($crate::io::_print($crate::format_args!($($arg)*)));\n+    ($($arg:tt)*) => {\n+        $crate::io::_print($crate::format_args!($($arg)*))\n+    };\n }\n \n /// Prints to the standard output, with a newline.\n@@ -94,10 +96,12 @@ macro_rules! print {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"println_macro\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! println {\n-    () => ($crate::print!(\"\\n\"));\n-    ($($arg:tt)*) => ({\n-        $crate::io::_print($crate::format_args_nl!($($arg)*));\n-    })\n+    () => {\n+        $crate::print!(\"\\n\")\n+    };\n+    ($($arg:tt)*) => {\n+        $crate::io::_print($crate::format_args_nl!($($arg)*))\n+    };\n }\n \n /// Prints to the standard error.\n@@ -126,7 +130,9 @@ macro_rules! println {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"eprint_macro\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! eprint {\n-    ($($arg:tt)*) => ($crate::io::_eprint($crate::format_args!($($arg)*)));\n+    ($($arg:tt)*) => {\n+        $crate::io::_eprint($crate::format_args!($($arg)*))\n+    };\n }\n \n /// Prints to the standard error, with a newline.\n@@ -155,10 +161,12 @@ macro_rules! eprint {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"eprintln_macro\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! eprintln {\n-    () => ($crate::eprint!(\"\\n\"));\n-    ($($arg:tt)*) => ({\n-        $crate::io::_eprint($crate::format_args_nl!($($arg)*));\n-    })\n+    () => {\n+        $crate::eprint!(\"\\n\")\n+    };\n+    ($($arg:tt)*) => {\n+        $crate::io::_eprint($crate::format_args_nl!($($arg)*))\n+    };\n }\n \n /// Prints and returns the value of a given expression for quick and dirty"}, {"sha": "0c96fb593e659311008e39f56ca578e136808795", "filename": "src/test/pretty/dollar-crate.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=f986c7434ae958567721dfcff336c51cc2bf663d", "patch": "@@ -9,5 +9,5 @@\n // pp-exact:dollar-crate.pp\n \n fn main() {\n-    { ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"], &[])); };\n+    ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"], &[]));\n }"}, {"sha": "8bf9c97fddad4679ad7cec5436641d19e8001daf", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.closure.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt?ref=f986c7434ae958567721dfcff336c51cc2bf663d", "patch": "@@ -116,8 +116,8 @@\n   116|      1|\n   117|      1|    let\n   118|      1|        _unused_closure\n-  119|       |    =\n-  120|       |        |\n+  119|      1|    =\n+  120|      1|        |\n   121|       |            mut countdown\n   122|       |        |\n   123|      0|    {\n@@ -173,7 +173,7 @@\n   169|       |    ;\n   170|       |\n   171|      1|    let short_used_not_covered_closure_line_break_no_block_embedded_branch =\n-  172|       |        | _unused_arg: u8 |\n+  172|      1|        | _unused_arg: u8 |\n   173|      0|            println!(\n   174|      0|                \"not called: {}\",\n   175|      0|                if is_true { \"check\" } else { \"me\" }\n@@ -191,7 +191,7 @@\n   187|       |    ;\n   188|       |\n   189|      1|    let short_used_covered_closure_line_break_no_block_embedded_branch =\n-  190|      1|        | _unused_arg: u8 |\n+  190|       |        | _unused_arg: u8 |\n   191|      1|            println!(\n   192|      1|                \"not called: {}\",\n   193|      1|                if is_true { \"check\" } else { \"me\" }"}, {"sha": "c8a0fd684304e4bc18f6f43b26e143faee419ead", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=f986c7434ae958567721dfcff336c51cc2bf663d", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print($crate :: format_args_nl! (\"Hello, World!\")) ; }`\n+   = note: to `$crate :: io :: _print($crate :: format_args_nl! (\"Hello, World!\"))`\n "}, {"sha": "ed5e863bd9def1067059b00462a06fed76a8ec73", "filename": "src/test/ui/parser/issues/issue-62894.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr?ref=f986c7434ae958567721dfcff336c51cc2bf663d", "patch": "@@ -45,7 +45,7 @@ LL | fn main() {}\n    |\n   ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n-LL |     ($left:expr, $right:expr $(,)?) => ({\n+LL |     ($left:expr, $right:expr $(,)?) => {\n    |      ---------- while parsing argument for this `expr` macro fragment\n \n error: aborting due to 4 previous errors"}, {"sha": "e2a65ff8524040062aefcaad59b284c07e11921a", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f986c7434ae958567721dfcff336c51cc2bf663d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=f986c7434ae958567721dfcff336c51cc2bf663d", "patch": "@@ -12,7 +12,7 @@ LL | struct Foo(isize, isize);\n    = note: the matched value is of type `Foo`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo(2, b) => println!(\"{}\", b)\n+LL ~         Foo(2, b) => println!(\"{}\", b),\n LL +         Foo(_, _) => todo!()\n    |\n "}]}