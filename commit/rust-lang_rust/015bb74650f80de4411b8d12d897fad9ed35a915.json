{"sha": "015bb74650f80de4411b8d12d897fad9ed35a915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNWJiNzQ2NTBmODBkZTQ0MTFiOGQxMmQ4OTdmYWQ5ZWQzNWE5MTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-29T17:54:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T17:54:04Z"}, "message": "Rollup merge of #69582 - RalfJung:vec-parts, r=Centril\n\nimprove transmute and Vec::from_raw_parts docs\n\nI think this fixes https://github.com/rust-lang/rust/issues/64073. @Shnatsel please let me know if this is less confusing. :)", "tree": {"sha": "487b5cd77158c4d80e355943a858923451b4d496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487b5cd77158c4d80e355943a858923451b4d496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/015bb74650f80de4411b8d12d897fad9ed35a915", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWqU8CRBK7hj4Ov3rIwAAdHIIAGcSFjIhn3W7wt2dWz6iRU0/\nWm/DbwHZqSuolUbnkFeO/sRjXSoUcp1Npr+SgYASi6bSdw5JKQlkXtmPOaRohb0r\nhPCoT4FXcTcXPkykpnAdulcgrCiclmwRaz/DzAjqObvIWnEVi4nQnIdU9sJk7I3P\n5D00nAvQxJheAU6Q1Ybl9Z+iSNmVjqR9PDajVliDw36tgVtHR1yi7S8xfP1LM6bj\nYVltwiCEo1l26KCud22tEPm72wixXxeI5+ghFR858q8+7RWk1MtIFM3SEBmu5lKs\nDDNwUzeL0p7eyOUQio/Y6+yRWqriuZrvj5F8LzoW92yJhqzqPOBm0adb7DpMd8Q=\n=fcj4\n-----END PGP SIGNATURE-----\n", "payload": "tree 487b5cd77158c4d80e355943a858923451b4d496\nparent 02381db8e0cd4412bec4254fd78e140e7b036fa7\nparent b6e847cc983c3e4d4ab96b026cea6743db00a133\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582998844 +0100\ncommitter GitHub <noreply@github.com> 1582998844 +0100\n\nRollup merge of #69582 - RalfJung:vec-parts, r=Centril\n\nimprove transmute and Vec::from_raw_parts docs\n\nI think this fixes https://github.com/rust-lang/rust/issues/64073. @Shnatsel please let me know if this is less confusing. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/015bb74650f80de4411b8d12d897fad9ed35a915", "html_url": "https://github.com/rust-lang/rust/commit/015bb74650f80de4411b8d12d897fad9ed35a915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/015bb74650f80de4411b8d12d897fad9ed35a915/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02381db8e0cd4412bec4254fd78e140e7b036fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/02381db8e0cd4412bec4254fd78e140e7b036fa7", "html_url": "https://github.com/rust-lang/rust/commit/02381db8e0cd4412bec4254fd78e140e7b036fa7"}, {"sha": "b6e847cc983c3e4d4ab96b026cea6743db00a133", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e847cc983c3e4d4ab96b026cea6743db00a133", "html_url": "https://github.com/rust-lang/rust/commit/b6e847cc983c3e4d4ab96b026cea6743db00a133"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "fc50d06b33c579c062e5b44b3e48a608bb65cabf", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/015bb74650f80de4411b8d12d897fad9ed35a915/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015bb74650f80de4411b8d12d897fad9ed35a915/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=015bb74650f80de4411b8d12d897fad9ed35a915", "patch": "@@ -404,7 +404,10 @@ impl<T> Vec<T> {\n     ///\n     /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n     ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `ptr`'s `T` needs to have the same size and alignment as it was allocated with.\n+    /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n+    ///   (`T` having a less strict alignment is not sufficient, the alignment really\n+    ///   needs to be equal to satsify the [`dealloc`] requirement that memory must be\n+    ///   allocated and deallocated with the same layout.)\n     /// * `length` needs to be less than or equal to `capacity`.\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n@@ -423,6 +426,7 @@ impl<T> Vec<T> {\n     /// function.\n     ///\n     /// [`String`]: ../../std/string/struct.String.html\n+    /// [`dealloc`]: ../../alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc\n     ///\n     /// # Examples\n     ///"}, {"sha": "fca2c3d31d946e348d2969325ec861e779e6c088", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/015bb74650f80de4411b8d12d897fad9ed35a915/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015bb74650f80de4411b8d12d897fad9ed35a915/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=015bb74650f80de4411b8d12d897fad9ed35a915", "patch": "@@ -881,7 +881,8 @@ extern \"rust-intrinsic\" {\n     /// // clone the vector as we will reuse them later\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // Using transmute: this is Undefined Behavior, and a bad idea.\n+    /// // Using transmute: this relies on the unspecified data layout of `Vec`, which is a\n+    /// // bad idea and could cause Undefined Behavior.\n     /// // However, it is no-copy.\n     /// let v_transmuted = unsafe {\n     ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(v_clone)\n@@ -897,13 +898,14 @@ extern \"rust-intrinsic\" {\n     ///\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // The no-copy, unsafe way, still using transmute, but not UB.\n-    /// // This is equivalent to the original, but safer, and reuses the\n-    /// // same `Vec` internals. Therefore, the new inner type must have the\n-    /// // exact same size, and the same alignment, as the old type.\n+    /// // The no-copy, unsafe way, still using transmute, but not relying on the data layout.\n+    /// // Like the first approach, this reuses the `Vec` internals.\n+    /// // Therefore, the new inner type must have the\n+    /// // exact same size, *and the same alignment*, as the old type.\n     /// // The same caveats exist for this method as transmute, for\n     /// // the original inner type (`&i32`) to the converted inner type\n-    /// // (`Option<&i32>`), so read the nomicon pages linked above.\n+    /// // (`Option<&i32>`), so read the nomicon pages linked above and also\n+    /// // consult the [`from_raw_parts`] documentation.\n     /// let v_from_raw = unsafe {\n     // FIXME Update this when vec_into_raw_parts is stabilized\n     ///     // Ensure the original vector is not dropped.\n@@ -914,6 +916,8 @@ extern \"rust-intrinsic\" {\n     /// };\n     /// ```\n     ///\n+    /// [`from_raw_parts`]: ../../std/vec/struct.Vec.html#method.from_raw_parts\n+    ///\n     /// Implementing `split_at_mut`:\n     ///\n     /// ```"}]}