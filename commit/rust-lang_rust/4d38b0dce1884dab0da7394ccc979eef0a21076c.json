{"sha": "4d38b0dce1884dab0da7394ccc979eef0a21076c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzhiMGRjZTE4ODRkYWIwZGE3Mzk0Y2NjOTc5ZWVmMGEyMTA3NmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:18:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:27:40Z"}, "message": "Move Stmt Grammar", "tree": {"sha": "ebef2415f439b1f76291bfab2a4403ad6ffcf270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebef2415f439b1f76291bfab2a4403ad6ffcf270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d38b0dce1884dab0da7394ccc979eef0a21076c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d38b0dce1884dab0da7394ccc979eef0a21076c", "html_url": "https://github.com/rust-lang/rust/commit/4d38b0dce1884dab0da7394ccc979eef0a21076c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d38b0dce1884dab0da7394ccc979eef0a21076c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04c06c4bc06852610af9d37673b03a8c041b15c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04c06c4bc06852610af9d37673b03a8c041b15c", "html_url": "https://github.com/rust-lang/rust/commit/c04c06c4bc06852610af9d37673b03a8c041b15c"}], "stats": {"total": 191, "additions": 96, "deletions": 95}, "files": [{"sha": "286be1032b8aba8a4be89dd454ac716b60b5ad39", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 85, "deletions": 84, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/4d38b0dce1884dab0da7394ccc979eef0a21076c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d38b0dce1884dab0da7394ccc979eef0a21076c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=4d38b0dce1884dab0da7394ccc979eef0a21076c", "patch": "@@ -473,6 +473,7 @@ pub struct LifetimeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for LifetimeParam {}\n+impl ast::TypeBoundsOwner for LifetimeParam {}\n impl LifetimeParam {\n     pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![lifetime])\n@@ -503,6 +504,19 @@ impl ConstParam {\n     pub fn default_val(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct WherePred {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::TypeBoundsOwner for WherePred {}\n+impl WherePred {\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n+    pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Literal {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -520,6 +534,29 @@ impl TokenTree {\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct LetStmt {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for LetStmt {}\n+impl LetStmt {\n+    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n+    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n+    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n+    pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ExprStmt {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for ExprStmt {}\n+impl ExprStmt {\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1179,42 +1216,6 @@ impl MacroStmts {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct WherePred {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::TypeBoundsOwner for WherePred {}\n-impl WherePred {\n-    pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n-    pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ExprStmt {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for ExprStmt {}\n-impl ExprStmt {\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LetStmt {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for LetStmt {}\n-impl LetStmt {\n-    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n-    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1880,6 +1881,17 @@ impl AstNode for ConstParam {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for WherePred {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_PRED }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Literal {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1902,6 +1914,28 @@ impl AstNode for TokenTree {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for LetStmt {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_STMT }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for ExprStmt {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EXPR_STMT }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for ParenType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2672,39 +2706,6 @@ impl AstNode for MacroStmts {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for WherePred {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_PRED }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for ExprStmt {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXPR_STMT }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for LetStmt {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_STMT }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for PathSegment {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_SEGMENT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3671,6 +3672,11 @@ impl std::fmt::Display for ConstParam {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for WherePred {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Literal {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3681,6 +3687,16 @@ impl std::fmt::Display for TokenTree {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for LetStmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ExprStmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for ParenType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4031,21 +4047,6 @@ impl std::fmt::Display for MacroStmts {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for WherePred {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for ExprStmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for LetStmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for PathSegment {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "8271509cf34c1724fd7c018e840ecb5763eaab33", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d38b0dce1884dab0da7394ccc979eef0a21076c/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/4d38b0dce1884dab0da7394ccc979eef0a21076c/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=4d38b0dce1884dab0da7394ccc979eef0a21076c", "patch": "@@ -194,6 +194,17 @@ Visibility =\n Attr =\n   '#' '!'? '[' Path ('=' Literal | TokenTree)? ']'\n \n+Stmt =\n+  LetStmt\n+| ExprStmt\n+\n+LetStmt =\n+  Attr* 'let' Pat (':' Type)?\n+  '=' initializer:Expr ';'\n+\n+ExprStmt =\n+  Attr* Expr ';'?\n+\n Type =\n   ParenType\n | TupleType\n@@ -456,13 +467,6 @@ MacroStmts =\n   statements:Stmt*\n   Expr?\n \n-ExprStmt =\n-  Attr* Expr ';'\n-\n-LetStmt =\n-  Attr* 'let' Pat (':' Type)\n-  '=' initializer:Expr ';'\n-\n Path =\n   (qualifier:Path '::')? segment:PathSegment\n \n@@ -490,10 +494,6 @@ LifetimeArg =\n ConstArg =\n   Literal | BlockExpr BlockExpr\n \n-Stmt =\n-  LetStmt\n-| ExprStmt\n-\n Pat =\n   OrPat\n | ParenPat"}]}