{"sha": "f3d56b89c54110aaafab14eeaa4c803abe10b7df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZDU2Yjg5YzU0MTEwYWFhZmFiMTRlZWFhNGM4MDNhYmUxMGI3ZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-12T22:26:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-16T16:17:32Z"}, "message": "Enable offset-encoding capability", "tree": {"sha": "2425411886ff7b647cc8938d5b7c6e3105989d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2425411886ff7b647cc8938d5b7c6e3105989d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d56b89c54110aaafab14eeaa4c803abe10b7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d56b89c54110aaafab14eeaa4c803abe10b7df", "html_url": "https://github.com/rust-lang/rust/commit/f3d56b89c54110aaafab14eeaa4c803abe10b7df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d56b89c54110aaafab14eeaa4c803abe10b7df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b9ec8e62d9f560a6557496bc4b579019ccb509", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b9ec8e62d9f560a6557496bc4b579019ccb509", "html_url": "https://github.com/rust-lang/rust/commit/c8b9ec8e62d9f560a6557496bc4b579019ccb509"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "89482b95266b09c4769d50757cfc11b8d98b4576", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=f3d56b89c54110aaafab14eeaa4c803abe10b7df", "patch": "@@ -8,7 +8,7 @@ use std::{convert::TryFrom, env, fs, path::PathBuf, process};\n \n use lsp_server::Connection;\n use project_model::ProjectManifest;\n-use rust_analyzer::{cli, config::Config, from_json, Result};\n+use rust_analyzer::{cli, config::Config, from_json, lsp_ext::supports_utf8, Result};\n use vfs::AbsPathBuf;\n \n #[cfg(all(feature = \"mimalloc\"))]\n@@ -127,7 +127,11 @@ fn run_server() -> Result<()> {\n             name: String::from(\"rust-analyzer\"),\n             version: Some(String::from(env!(\"REV\"))),\n         }),\n-        offset_encoding: None,\n+        offset_encoding: if supports_utf8(&initialize_params.capabilities) {\n+            Some(\"utf-8\".to_string())\n+        } else {\n+            None\n+        },\n     };\n \n     let initialize_result = serde_json::to_value(initialize_result).unwrap();"}, {"sha": "425ef145c24ef7aa5d22eec98044bdf92f1a2527", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f3d56b89c54110aaafab14eeaa4c803abe10b7df", "patch": "@@ -23,7 +23,10 @@ use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Deserialize};\n use vfs::AbsPathBuf;\n \n-use crate::{caps::completion_item_edit_resolve, diagnostics::DiagnosticsMapConfig};\n+use crate::{\n+    caps::completion_item_edit_resolve, diagnostics::DiagnosticsMapConfig,\n+    line_endings::OffsetEncoding, lsp_ext::supports_utf8,\n+};\n \n config_data! {\n     struct ConfigData {\n@@ -415,6 +418,13 @@ impl Config {\n             false\n         )\n     }\n+    pub fn offset_encoding(&self) -> OffsetEncoding {\n+        if supports_utf8(&self.caps) {\n+            OffsetEncoding::Utf8\n+        } else {\n+            OffsetEncoding::Utf16\n+        }\n+    }\n \n     fn experimental(&self, index: &'static str) -> bool {\n         try_or!(self.caps.experimental.as_ref()?.get(index)?.as_bool()?, false)"}, {"sha": "85c87645c0c1bb4b442f0ca06161475f382a442b", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=f3d56b89c54110aaafab14eeaa4c803abe10b7df", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     diagnostics::{CheckFixes, DiagnosticCollection},\n     document::DocumentData,\n     from_proto,\n-    line_endings::{LineEndings, LineIndex, OffsetEncoding},\n+    line_endings::{LineEndings, LineIndex},\n     main_loop::Task,\n     op_queue::OpQueue,\n     reload::SourceRootConfig,\n@@ -274,7 +274,7 @@ impl GlobalStateSnapshot {\n     pub(crate) fn file_line_index(&self, file_id: FileId) -> Cancelable<LineIndex> {\n         let endings = self.vfs.read().1[&file_id];\n         let index = self.analysis.file_line_index(file_id)?;\n-        let res = LineIndex { index, endings, encoding: OffsetEncoding::Utf16 };\n+        let res = LineIndex { index, endings, encoding: self.config.offset_encoding() };\n         Ok(res)\n     }\n "}, {"sha": "dd8901152882073a10a8ab2faaf6d22acc18fe8a", "filename": "crates/rust-analyzer/src/line_endings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs?ref=f3d56b89c54110aaafab14eeaa4c803abe10b7df", "patch": "@@ -4,8 +4,7 @@\n \n use std::sync::Arc;\n \n-pub(crate) enum OffsetEncoding {\n-    #[allow(unused)]\n+pub enum OffsetEncoding {\n     Utf8,\n     Utf16,\n }"}, {"sha": "0d2c8f7ffbb23bf4ac83b04aaf17ab69d027d927", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d56b89c54110aaafab14eeaa4c803abe10b7df/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=f3d56b89c54110aaafab14eeaa4c803abe10b7df", "patch": "@@ -385,3 +385,7 @@ pub(crate) enum CodeLensResolveData {\n     Impls(lsp_types::request::GotoImplementationParams),\n     References(lsp_types::TextDocumentPositionParams),\n }\n+\n+pub fn supports_utf8(caps: &lsp_types::ClientCapabilities) -> bool {\n+    caps.offset_encoding.as_deref().unwrap_or_default().iter().any(|it| it == \"utf-8\")\n+}"}]}