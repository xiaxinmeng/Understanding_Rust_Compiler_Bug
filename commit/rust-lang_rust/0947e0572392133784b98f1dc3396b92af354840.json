{"sha": "0947e0572392133784b98f1dc3396b92af354840", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NDdlMDU3MjM5MjEzMzc4NGI5OGYxZGMzMzk2YjkyYWYzNTQ4NDA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-21T01:47:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-21T01:47:52Z"}, "message": "Rollup merge of #80250 - bugadani:resolver-cleanup, r=petrochenkov\n\nMinor cleanups in LateResolver\n\n - Avoid calculating hash twice\n - Avoid creating a closure in every iteration of a loop\n - Reserve space for path in advance\n - Some readability changes", "tree": {"sha": "2c6c34fa6c2d695d302d649d0603b2bc02a37418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6c34fa6c2d695d302d649d0603b2bc02a37418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0947e0572392133784b98f1dc3396b92af354840", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf3/7ICRBK7hj4Ov3rIwAAdHIIABw/3jzZmCfN6zaHenjgIicC\nz7/HmEM5Y8UAjcmkkiaszqvkFdBmsd6y5EFPPSqmqAWrYq3uJZKPrpvn+Gbr/LxE\nfakAvLmSLcRi7ZwgaDo29DU22tWsbECJOg8SLy956aPvrRqkLG3r/NlT5zQ6s6Tw\nnJX54ZDUI9nfUh02JWxTXg9PepbA/ezepl5wgI3qhvlRDAPaQUf6SEPwzi05HZE+\nVmK0mFDH9X11RFCoi/DhMML5Ow456zH/3hMDXIZDUeWkOZC0IC4/0DrXEGCe8tqy\nZLrhIsbDlTP7iBNCzjRDInX2jD4WlhSn3zPJu/7X4T9VB0goWSJ+yhPQIUmPUcQ=\n=xWm4\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c6c34fa6c2d695d302d649d0603b2bc02a37418\nparent 823210901d1664dee1e78e2b37b95488341c5075\nparent 6d71cc675091e2ca1080dc46ddaf3d202dd2c949\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608515272 +0100\ncommitter GitHub <noreply@github.com> 1608515272 +0100\n\nRollup merge of #80250 - bugadani:resolver-cleanup, r=petrochenkov\n\nMinor cleanups in LateResolver\n\n - Avoid calculating hash twice\n - Avoid creating a closure in every iteration of a loop\n - Reserve space for path in advance\n - Some readability changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0947e0572392133784b98f1dc3396b92af354840", "html_url": "https://github.com/rust-lang/rust/commit/0947e0572392133784b98f1dc3396b92af354840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0947e0572392133784b98f1dc3396b92af354840/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823210901d1664dee1e78e2b37b95488341c5075", "url": "https://api.github.com/repos/rust-lang/rust/commits/823210901d1664dee1e78e2b37b95488341c5075", "html_url": "https://github.com/rust-lang/rust/commit/823210901d1664dee1e78e2b37b95488341c5075"}, {"sha": "6d71cc675091e2ca1080dc46ddaf3d202dd2c949", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d71cc675091e2ca1080dc46ddaf3d202dd2c949", "html_url": "https://github.com/rust-lang/rust/commit/6d71cc675091e2ca1080dc46ddaf3d202dd2c949"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "b13462587bc618ef55762577dd16a818ebb424a1", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0947e0572392133784b98f1dc3396b92af354840/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0947e0572392133784b98f1dc3396b92af354840/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=0947e0572392133784b98f1dc3396b92af354840", "patch": "@@ -29,7 +29,7 @@ use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n \n use rustc_span::source_map::{respan, Spanned};\n-use std::collections::BTreeSet;\n+use std::collections::{hash_map::Entry, BTreeSet};\n use std::mem::{replace, take};\n use tracing::debug;\n \n@@ -953,8 +953,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             });\n                         };\n \n-                        for item in trait_items {\n-                            this.with_trait_items(trait_items, |this| {\n+                        this.with_trait_items(trait_items, |this| {\n+                            for item in trait_items {\n                                 match &item.kind {\n                                     AssocItemKind::Const(_, ty, default) => {\n                                         this.visit_ty(ty);\n@@ -983,8 +983,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                         panic!(\"unexpanded macro in resolve!\")\n                                     }\n                                 };\n-                            });\n-                        }\n+                            }\n+                        });\n                     });\n                 });\n             }\n@@ -1060,36 +1060,29 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 continue;\n             }\n \n-            let def_kind = match param.kind {\n-                GenericParamKind::Type { .. } => DefKind::TyParam,\n-                GenericParamKind::Const { .. } => DefKind::ConstParam,\n-                _ => unreachable!(),\n-            };\n-\n             let ident = param.ident.normalize_to_macros_2_0();\n             debug!(\"with_generic_param_rib: {}\", param.id);\n \n-            if seen_bindings.contains_key(&ident) {\n-                let span = seen_bindings.get(&ident).unwrap();\n-                let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, *span);\n-                self.report_error(param.ident.span, err);\n+            match seen_bindings.entry(ident) {\n+                Entry::Occupied(entry) => {\n+                    let span = *entry.get();\n+                    let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, span);\n+                    self.report_error(param.ident.span, err);\n+                }\n+                Entry::Vacant(entry) => {\n+                    entry.insert(param.ident.span);\n+                }\n             }\n-            seen_bindings.entry(ident).or_insert(param.ident.span);\n \n             // Plain insert (no renaming).\n-            let res = Res::Def(def_kind, self.r.local_def_id(param.id).to_def_id());\n-\n-            match param.kind {\n-                GenericParamKind::Type { .. } => {\n-                    function_type_rib.bindings.insert(ident, res);\n-                    self.r.record_partial_res(param.id, PartialRes::new(res));\n-                }\n-                GenericParamKind::Const { .. } => {\n-                    function_value_rib.bindings.insert(ident, res);\n-                    self.r.record_partial_res(param.id, PartialRes::new(res));\n-                }\n+            let (rib, def_kind) = match param.kind {\n+                GenericParamKind::Type { .. } => (&mut function_type_rib, DefKind::TyParam),\n+                GenericParamKind::Const { .. } => (&mut function_value_rib, DefKind::ConstParam),\n                 _ => unreachable!(),\n-            }\n+            };\n+            let res = Res::Def(def_kind, self.r.local_def_id(param.id).to_def_id());\n+            self.r.record_partial_res(param.id, PartialRes::new(res));\n+            rib.bindings.insert(ident, res);\n         }\n \n         self.ribs[ValueNS].push(function_value_rib);\n@@ -1778,7 +1771,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             path\n         );\n         let ns = source.namespace();\n-        let is_expected = &|res| source.is_expected(res);\n \n         let report_errors = |this: &mut Self, res: Option<Res>| {\n             if this.should_report_errs() {\n@@ -1881,7 +1873,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             crate_lint,\n         ) {\n             Ok(Some(partial_res)) if partial_res.unresolved_segments() == 0 => {\n-                if is_expected(partial_res.base_res()) || partial_res.base_res() == Res::Err {\n+                if source.is_expected(partial_res.base_res()) || partial_res.base_res() == Res::Err\n+                {\n                     partial_res\n                 } else {\n                     report_errors(self, Some(partial_res.base_res()))\n@@ -1898,11 +1891,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.r.trait_map.insert(id, traits);\n                 }\n \n-                let mut std_path = vec![Segment::from_ident(Ident::with_dummy_span(sym::std))];\n-\n-                std_path.extend(path);\n-\n                 if self.r.primitive_type_table.primitive_types.contains_key(&path[0].ident.name) {\n+                    let mut std_path = Vec::with_capacity(1 + path.len());\n+\n+                    std_path.push(Segment::from_ident(Ident::with_dummy_span(sym::std)));\n+                    std_path.extend(path);\n                     if let PathResult::Module(_) | PathResult::NonModule(_) =\n                         self.resolve_path(&std_path, Some(ns), false, span, CrateLint::No)\n                     {\n@@ -1983,7 +1976,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     ) -> Result<Option<PartialRes>, Spanned<ResolutionError<'a>>> {\n         let mut fin_res = None;\n \n-        for (i, ns) in [primary_ns, TypeNS, ValueNS].iter().cloned().enumerate() {\n+        for (i, &ns) in [primary_ns, TypeNS, ValueNS].iter().enumerate() {\n             if i == 0 || ns != primary_ns {\n                 match self.resolve_qpath(id, qself, path, ns, span, crate_lint)? {\n                     Some(partial_res)\n@@ -1993,7 +1986,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     }\n                     partial_res => {\n                         if fin_res.is_none() {\n-                            fin_res = partial_res\n+                            fin_res = partial_res;\n                         }\n                     }\n                 }"}]}