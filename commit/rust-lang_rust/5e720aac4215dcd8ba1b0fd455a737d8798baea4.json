{"sha": "5e720aac4215dcd8ba1b0fd455a737d8798baea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzIwYWFjNDIxNWRjZDhiYTFiMGZkNDU1YTczN2Q4Nzk4YmFlYTQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-06-17T19:51:24Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-06-21T17:59:58Z"}, "message": "Add missing attributes to indirect calls for foreign functions\n\nWhen calling a foreign function, some arguments and/or return value\nattributes are required to conform to the foreign ABI. Currently those\nattributes are only added to the declaration of foreign functions. With\ndirect calls, this is no problem, because LLVM can see that those\nattributes apply to the call. But with an indirect call, LLVM cannot do\nthat and the attribute is missing.\n\nTo fix that, we have to add those attribute to the calls to foreign\nfunctions as well.\n\nThis also allows to remove the special handling of the SRet attribute,\nwhich is ABI-dependent and will be set via the `attr` field of the\nreturn type's `ArgType`.", "tree": {"sha": "18e1cf73c604f93a36dab9c66dbefc46731dc969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e1cf73c604f93a36dab9c66dbefc46731dc969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e720aac4215dcd8ba1b0fd455a737d8798baea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e720aac4215dcd8ba1b0fd455a737d8798baea4", "html_url": "https://github.com/rust-lang/rust/commit/5e720aac4215dcd8ba1b0fd455a737d8798baea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e720aac4215dcd8ba1b0fd455a737d8798baea4/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abdbaa2e19dcf6859ae781bb9b44fed483181229", "url": "https://api.github.com/repos/rust-lang/rust/commits/abdbaa2e19dcf6859ae781bb9b44fed483181229", "html_url": "https://github.com/rust-lang/rust/commit/abdbaa2e19dcf6859ae781bb9b44fed483181229"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "fcd6c7e293ea26994f3fb183a9b54dcbd65d1612", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5e720aac4215dcd8ba1b0fd455a737d8798baea4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720aac4215dcd8ba1b0fd455a737d8798baea4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5e720aac4215dcd8ba1b0fd455a737d8798baea4", "patch": "@@ -11,7 +11,7 @@\n \n use back::{link};\n use lib::llvm::llvm;\n-use lib::llvm::{ValueRef, CallConv, StructRetAttribute, Linkage};\n+use lib::llvm::{ValueRef, CallConv, Linkage};\n use lib;\n use middle::weak_lang_items;\n use middle::trans::base::push_ctxt;\n@@ -373,18 +373,41 @@ pub fn trans_native_call<'a>(\n     };\n \n     // A function pointer is called without the declaration available, so we have to apply\n-    // any attributes with ABI implications directly to the call instruction. Right now, the\n-    // only attribute we need to worry about is `sret`.\n+    // any attributes with ABI implications directly to the call instruction.\n     let mut attrs = Vec::new();\n-    if fn_type.ret_ty.is_indirect() {\n-        attrs.push((1, lib::llvm::StructRetAttribute as u64));\n \n+    // Add attributes that are always applicable, independent of the concrete foreign ABI\n+    if fn_type.ret_ty.is_indirect() {\n         // The outptr can be noalias and nocapture because it's entirely\n         // invisible to the program. We can also mark it as nonnull\n         attrs.push((1, lib::llvm::NoAliasAttribute as u64));\n         attrs.push((1, lib::llvm::NoCaptureAttribute as u64));\n         attrs.push((1, lib::llvm::NonNullAttribute as u64));\n     };\n+\n+    // Add attributes that depend on the concrete foreign ABI\n+    let mut arg_idx = if fn_type.ret_ty.is_indirect() { 1 } else { 0 };\n+    match fn_type.ret_ty.attr {\n+        Some(attr) => attrs.push((arg_idx, attr as u64)),\n+        _ => ()\n+    }\n+\n+    arg_idx += 1;\n+    for arg_ty in fn_type.arg_tys.iter() {\n+        if arg_ty.is_ignore() {\n+            continue;\n+        }\n+        // skip padding\n+        if arg_ty.pad.is_some() { arg_idx += 1; }\n+\n+        match arg_ty.attr {\n+            Some(attr) => attrs.push((arg_idx, attr as u64)),\n+            _ => {}\n+        }\n+\n+        arg_idx += 1;\n+    }\n+\n     let llforeign_retval = CallWithConv(bcx,\n                                         llfn,\n                                         llargs_foreign.as_slice(),"}, {"sha": "c755cf67caa9f6b52dad2e8007673b6fc1bd8f94", "filename": "src/rt/rust_test_helpers.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e720aac4215dcd8ba1b0fd455a737d8798baea4/src%2Frt%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/5e720aac4215dcd8ba1b0fd455a737d8798baea4/src%2Frt%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.c?ref=5e720aac4215dcd8ba1b0fd455a737d8798baea4", "patch": "@@ -199,3 +199,21 @@ void\n rust_dbg_static_mut_check_four() {\n     assert(rust_dbg_static_mut == 4);\n }\n+\n+struct S {\n+    uint64_t x;\n+    uint64_t y;\n+    uint64_t z;\n+};\n+\n+uint64_t get_x(struct S s) {\n+    return s.x;\n+}\n+\n+uint64_t get_y(struct S s) {\n+    return s.y;\n+}\n+\n+uint64_t get_z(struct S s) {\n+    return s.z;\n+}"}, {"sha": "6a26ec44312d7abe2bbc140cb60039a6f8aba79f", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e720aac4215dcd8ba1b0fd455a737d8798baea4/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720aac4215dcd8ba1b0fd455a737d8798baea4/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=5e720aac4215dcd8ba1b0fd455a737d8798baea4", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct S {\n+    x: u64,\n+    y: u64,\n+    z: u64,\n+}\n+\n+#[link(name = \"rust_test_helpers\")]\n+extern {\n+    pub fn get_x(x: S) -> u64;\n+    pub fn get_y(x: S) -> u64;\n+    pub fn get_z(x: S) -> u64;\n+}\n+\n+#[inline(never)]\n+fn indirect_call(func: unsafe extern fn(s: S) -> u64, s: S) -> u64 {\n+    unsafe {\n+        func(s)\n+    }\n+}\n+\n+fn main() {\n+    let s = S { x: 1, y: 2, z: 3 };\n+    assert_eq!(s.x, indirect_call(get_x, s));\n+    assert_eq!(s.y, indirect_call(get_y, s));\n+    assert_eq!(s.z, indirect_call(get_z, s));\n+}"}]}