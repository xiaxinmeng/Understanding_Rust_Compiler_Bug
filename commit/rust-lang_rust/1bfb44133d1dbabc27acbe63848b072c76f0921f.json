{"sha": "1bfb44133d1dbabc27acbe63848b072c76f0921f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZmI0NDEzM2QxZGJhYmMyN2FjYmU2Mzg0OGIwNzJjNzZmMDkyMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T01:33:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T01:33:17Z"}, "message": "Auto merge of #57770 - Zoxc:no-hash-query, r=michaelwoerister\n\nAdd a query type which is always marked as red if it runs\n\nThis is useful for queries which produce results which are very likely to change if their inputs do.\n\nI also expect this to be useful for end to end queries because 1) we don't need `HashStable` impls and 2) we avoid the overhead of hashing the result of large results like the AST or the HIR map.\n\nr? @michaelwoerister", "tree": {"sha": "73481cd7a8e3817984637f386d348b43f6bf3c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73481cd7a8e3817984637f386d348b43f6bf3c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfb44133d1dbabc27acbe63848b072c76f0921f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfb44133d1dbabc27acbe63848b072c76f0921f", "html_url": "https://github.com/rust-lang/rust/commit/1bfb44133d1dbabc27acbe63848b072c76f0921f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfb44133d1dbabc27acbe63848b072c76f0921f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abcfc3b762f2c0625d9e7f4ad70670a1e53b7b1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abcfc3b762f2c0625d9e7f4ad70670a1e53b7b1d", "html_url": "https://github.com/rust-lang/rust/commit/abcfc3b762f2c0625d9e7f4ad70670a1e53b7b1d"}, {"sha": "b4a6f597934f16f89e27058a32a514c9572f148f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a6f597934f16f89e27058a32a514c9572f148f", "html_url": "https://github.com/rust-lang/rust/commit/b4a6f597934f16f89e27058a32a514c9572f148f"}], "stats": {"total": 475, "additions": 260, "deletions": 215}, "files": [{"sha": "e8c1cd36064e106874a5f0aca5344d1a7ee45368", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 54, "deletions": 35, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -79,6 +79,16 @@ struct DepGraphData {\n     loaded_from_cache: Lock<FxHashMap<DepNodeIndex, bool>>,\n }\n \n+pub fn hash_result<R>(hcx: &mut StableHashingContext<'_>, result: &R) -> Option<Fingerprint>\n+where\n+    R: for<'a> HashStable<StableHashingContext<'a>>,\n+{\n+    let mut stable_hasher = StableHasher::new();\n+    result.hash_stable(hcx, &mut stable_hasher);\n+\n+    Some(stable_hasher.finish())\n+}\n+\n impl DepGraph {\n \n     pub fn new(prev_graph: PreviousDepGraph,\n@@ -178,14 +188,16 @@ impl DepGraph {\n     ///   `arg` parameter.\n     ///\n     /// [rustc guide]: https://rust-lang.github.io/rustc-guide/incremental-compilation.html\n-    pub fn with_task<'gcx, C, A, R>(&self,\n-                                   key: DepNode,\n-                                   cx: C,\n-                                   arg: A,\n-                                   task: fn(C, A) -> R)\n-                                   -> (R, DepNodeIndex)\n-        where C: DepGraphSafe + StableHashingContextProvider<'gcx>,\n-              R: HashStable<StableHashingContext<'gcx>>,\n+    pub fn with_task<'a, C, A, R>(\n+        &self,\n+        key: DepNode,\n+        cx: C,\n+        arg: A,\n+        task: fn(C, A) -> R,\n+        hash_result: impl FnOnce(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n+    ) -> (R, DepNodeIndex)\n+    where\n+        C: DepGraphSafe + StableHashingContextProvider<'a>,\n     {\n         self.with_task_impl(key, cx, arg, false, task,\n             |_key| Some(TaskDeps {\n@@ -196,17 +208,18 @@ impl DepGraph {\n             }),\n             |data, key, fingerprint, task| {\n                 data.borrow_mut().complete_task(key, task.unwrap(), fingerprint)\n-            })\n+            },\n+            hash_result)\n     }\n \n     /// Creates a new dep-graph input with value `input`\n-    pub fn input_task<'gcx, C, R>(&self,\n+    pub fn input_task<'a, C, R>(&self,\n                                    key: DepNode,\n                                    cx: C,\n                                    input: R)\n                                    -> (R, DepNodeIndex)\n-        where C: DepGraphSafe + StableHashingContextProvider<'gcx>,\n-              R: HashStable<StableHashingContext<'gcx>>,\n+        where C: DepGraphSafe + StableHashingContextProvider<'a>,\n+              R: for<'b> HashStable<StableHashingContext<'b>>,\n     {\n         fn identity_fn<C, A>(_: C, arg: A) -> A {\n             arg\n@@ -216,10 +229,11 @@ impl DepGraph {\n             |_| None,\n             |data, key, fingerprint, _| {\n                 data.borrow_mut().alloc_node(key, SmallVec::new(), fingerprint)\n-            })\n+            },\n+            hash_result::<R>)\n     }\n \n-    fn with_task_impl<'gcx, C, A, R>(\n+    fn with_task_impl<'a, C, A, R>(\n         &self,\n         key: DepNode,\n         cx: C,\n@@ -230,11 +244,11 @@ impl DepGraph {\n         finish_task_and_alloc_depnode: fn(&Lock<CurrentDepGraph>,\n                                           DepNode,\n                                           Fingerprint,\n-                                          Option<TaskDeps>) -> DepNodeIndex\n+                                          Option<TaskDeps>) -> DepNodeIndex,\n+        hash_result: impl FnOnce(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n     ) -> (R, DepNodeIndex)\n     where\n-        C: DepGraphSafe + StableHashingContextProvider<'gcx>,\n-        R: HashStable<StableHashingContext<'gcx>>,\n+        C: DepGraphSafe + StableHashingContextProvider<'a>,\n     {\n         if let Some(ref data) = self.data {\n             let task_deps = create_task(key).map(|deps| Lock::new(deps));\n@@ -269,31 +283,33 @@ impl DepGraph {\n                 profq_msg(hcx.sess(), ProfileQueriesMsg::TaskEnd)\n             };\n \n-            let mut stable_hasher = StableHasher::new();\n-            result.hash_stable(&mut hcx, &mut stable_hasher);\n-\n-            let current_fingerprint = stable_hasher.finish();\n+            let current_fingerprint = hash_result(&mut hcx, &result);\n \n             let dep_node_index = finish_task_and_alloc_depnode(\n                 &data.current,\n                 key,\n-                current_fingerprint,\n+                current_fingerprint.unwrap_or(Fingerprint::ZERO),\n                 task_deps.map(|lock| lock.into_inner()),\n             );\n \n             // Determine the color of the new DepNode.\n             if let Some(prev_index) = data.previous.node_to_index_opt(&key) {\n                 let prev_fingerprint = data.previous.fingerprint_by_index(prev_index);\n \n-                let color = if current_fingerprint == prev_fingerprint {\n-                    DepNodeColor::Green(dep_node_index)\n+                let color = if let Some(current_fingerprint) = current_fingerprint {\n+                    if current_fingerprint == prev_fingerprint {\n+                        DepNodeColor::Green(dep_node_index)\n+                    } else {\n+                        DepNodeColor::Red\n+                    }\n                 } else {\n+                    // Mark the node as Red if we can't hash the result\n                     DepNodeColor::Red\n                 };\n \n                 debug_assert!(data.colors.get(prev_index).is_none(),\n-                              \"DepGraph::with_task() - Duplicate DepNodeColor \\\n-                               insertion for {:?}\", key);\n+                            \"DepGraph::with_task() - Duplicate DepNodeColor \\\n+                            insertion for {:?}\", key);\n \n                 data.colors.insert(prev_index, color);\n             }\n@@ -342,14 +358,16 @@ impl DepGraph {\n \n     /// Execute something within an \"eval-always\" task which is a task\n     // that runs whenever anything changes.\n-    pub fn with_eval_always_task<'gcx, C, A, R>(&self,\n-                                   key: DepNode,\n-                                   cx: C,\n-                                   arg: A,\n-                                   task: fn(C, A) -> R)\n-                                   -> (R, DepNodeIndex)\n-        where C: DepGraphSafe + StableHashingContextProvider<'gcx>,\n-              R: HashStable<StableHashingContext<'gcx>>,\n+    pub fn with_eval_always_task<'a, C, A, R>(\n+        &self,\n+        key: DepNode,\n+        cx: C,\n+        arg: A,\n+        task: fn(C, A) -> R,\n+        hash_result: impl FnOnce(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n+    ) -> (R, DepNodeIndex)\n+    where\n+        C: DepGraphSafe + StableHashingContextProvider<'a>,\n     {\n         self.with_task_impl(key, cx, arg, false, task,\n             |_| None,\n@@ -359,7 +377,8 @@ impl DepGraph {\n                     &DepNode::new_no_params(DepKind::Krate)\n                 ];\n                 current.alloc_node(key, smallvec![krate_idx], fingerprint)\n-            })\n+            },\n+            hash_result)\n     }\n \n     #[inline]"}, {"sha": "b84d2ad145889bf1fab96fc39d908e98c508a874", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -10,7 +10,7 @@ pub mod cgu_reuse_tracker;\n \n pub use self::dep_tracking_map::{DepTrackingMap, DepTrackingMapConfig};\n pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, label_strs};\n-pub use self::graph::{DepGraph, WorkProduct, DepNodeIndex, DepNodeColor, TaskDeps};\n+pub use self::graph::{DepGraph, WorkProduct, DepNodeIndex, DepNodeColor, TaskDeps, hash_result};\n pub use self::graph::WorkProductFileKind;\n pub use self::prev::PreviousDepGraph;\n pub use self::query::DepGraphQuery;"}, {"sha": "37552f18f4a08112582e146ac9ede7d4d78a50a6", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -48,14 +48,14 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     hir_body_nodes: Vec<(DefPathHash, Fingerprint)>,\n }\n \n-fn input_dep_node_and_hash<'a, I>(\n+fn input_dep_node_and_hash<I>(\n     dep_graph: &DepGraph,\n-    hcx: &mut StableHashingContext<'a>,\n+    hcx: &mut StableHashingContext<'_>,\n     dep_node: DepNode,\n     input: I,\n ) -> (DepNodeIndex, Fingerprint)\n where\n-    I: HashStable<StableHashingContext<'a>>,\n+    I: for<'a> HashStable<StableHashingContext<'a>>,\n {\n     let dep_node_index = dep_graph.input_task(dep_node, &mut *hcx, &input).1;\n \n@@ -70,15 +70,15 @@ where\n     (dep_node_index, hash)\n }\n \n-fn alloc_hir_dep_nodes<'a, I>(\n+fn alloc_hir_dep_nodes<I>(\n     dep_graph: &DepGraph,\n-    hcx: &mut StableHashingContext<'a>,\n+    hcx: &mut StableHashingContext<'_>,\n     def_path_hash: DefPathHash,\n     item_like: I,\n     hir_body_nodes: &mut Vec<(DefPathHash, Fingerprint)>,\n ) -> (DepNodeIndex, DepNodeIndex)\n where\n-    I: HashStable<StableHashingContext<'a>>,\n+    I: for<'a> HashStable<StableHashingContext<'a>>,\n {\n     let sig = dep_graph.input_task(\n         def_path_hash.to_dep_node(DepKind::Hir),\n@@ -286,7 +286,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         self.parent_node = parent_node;\n     }\n \n-    fn with_dep_node_owner<T: HashStable<StableHashingContext<'a>>,\n+    fn with_dep_node_owner<T: for<'b> HashStable<StableHashingContext<'b>>,\n                            F: FnOnce(&mut Self)>(&mut self,\n                                                  dep_node_owner: DefIndex,\n                                                  item_like: &T,"}, {"sha": "11211c91c547928cf372a1c0389f3435b5347642", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -1,7 +1,7 @@\n //! type context book-keeping\n \n use crate::dep_graph::DepGraph;\n-use crate::dep_graph::{DepNode, DepConstructor};\n+use crate::dep_graph::{self, DepNode, DepConstructor};\n use crate::errors::DiagnosticBuilder;\n use crate::session::Session;\n use crate::session::config::{BorrowckMode, OutputFilenames};\n@@ -1430,7 +1430,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.dep_graph.with_task(dep_node,\n                                      self,\n                                      crate_hash,\n-                                     |_, x| x // No transformation needed\n+                                     |_, x| x, // No transformation needed\n+                                     dep_graph::hash_result,\n             );\n         }\n     }"}, {"sha": "a3ee92f8e126361debf5c7e40cd2f5a6b77a544d", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -20,7 +20,7 @@ use std::hash::Hash;\n use std::fmt::Debug;\n use syntax_pos::symbol::InternedString;\n use rustc_data_structures::sync::Lock;\n-use rustc_data_structures::stable_hasher::HashStable;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use crate::ich::StableHashingContext;\n \n // Query configuration and description traits.\n@@ -30,7 +30,7 @@ pub trait QueryConfig<'tcx> {\n     const CATEGORY: ProfileCategory;\n \n     type Key: Eq + Hash + Clone + Debug;\n-    type Value: Clone + for<'a> HashStable<StableHashingContext<'a>>;\n+    type Value: Clone;\n }\n \n pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n@@ -44,6 +44,11 @@ pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute(tcx: TyCtxt<'_, 'tcx, '_>, key: Self::Key) -> Self::Value;\n \n+    fn hash_result(\n+        hcx: &mut StableHashingContext<'_>,\n+        result: &Self::Value\n+    ) -> Option<Fingerprint>;\n+\n     fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value;\n }\n "}, {"sha": "d002b99f385a3d12cbd7880ed1a82335588146a9", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -1,4 +1,4 @@\n-use crate::dep_graph::{DepConstructor, DepNode};\n+use crate::dep_graph::{self, DepConstructor, DepNode};\n use crate::errors::DiagnosticBuilder;\n use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n use crate::hir::def::{Def, Export};\n@@ -49,6 +49,7 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_target::spec::PanicStrategy;\n \n use std::borrow::Cow;\n@@ -233,9 +234,9 @@ define_queries! { <'tcx>\n         /// ready for const evaluation.\n         ///\n         /// See the README for the `mir` module for details.\n-        [] fn mir_const: MirConst(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n+        [no_hash] fn mir_const: MirConst(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n-        [] fn mir_validated: MirValidated(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n+        [no_hash] fn mir_validated: MirValidated(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n         /// MIR after our optimization passes have run. This is MIR that is ready\n         /// for codegen. This is also the only query that can fetch non-local MIR, at present."}, {"sha": "3dcb939d63606c64b0733c6148394fb9eb4b0e27", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -499,7 +499,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         dep_node: &DepNode,\n         dep_node_index: DepNodeIndex,\n     ) {\n-        use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n         use crate::ich::Fingerprint;\n \n         assert!(Some(self.dep_graph.fingerprint_of(dep_node_index)) ==\n@@ -509,11 +508,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"BEGIN verify_ich({:?})\", dep_node);\n         let mut hcx = self.create_stable_hashing_context();\n-        let mut hasher = StableHasher::new();\n \n-        result.hash_stable(&mut hcx, &mut hasher);\n-\n-        let new_hash: Fingerprint = hasher.finish();\n+        let new_hash = Q::hash_result(&mut hcx, result).unwrap_or(Fingerprint::ZERO);\n         debug!(\"END verify_ich({:?})\", dep_node);\n \n         let old_hash = self.dep_graph.fingerprint_of(dep_node_index);\n@@ -549,12 +545,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     tcx.dep_graph.with_eval_always_task(dep_node,\n                                                         tcx,\n                                                         key,\n-                                                        Q::compute)\n+                                                        Q::compute,\n+                                                        Q::hash_result)\n                 } else {\n                     tcx.dep_graph.with_task(dep_node,\n                                             tcx,\n                                             key,\n-                                            Q::compute)\n+                                            Q::compute,\n+                                            Q::hash_result)\n                 }\n             })\n         });\n@@ -679,6 +677,18 @@ macro_rules! handle_cycle_error {\n     };\n }\n \n+macro_rules! hash_result {\n+    ([][$hcx:expr, $result:expr]) => {{\n+        dep_graph::hash_result($hcx, &$result)\n+    }};\n+    ([no_hash$(, $modifiers:ident)*][$hcx:expr, $result:expr]) => {{\n+        None\n+    }};\n+    ([$other:ident$(, $modifiers:ident)*][$($args:tt)*]) => {\n+        hash_result!([$($modifiers),*][$($args)*])\n+    };\n+}\n+\n macro_rules! define_queries {\n     (<$tcx:tt> $($category:tt {\n         $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*\n@@ -966,6 +976,13 @@ macro_rules! define_queries_inner {\n                 })\n             }\n \n+            fn hash_result(\n+                _hcx: &mut StableHashingContext<'_>,\n+                _result: &Self::Value\n+            ) -> Option<Fingerprint> {\n+                hash_result!([$($modifiers)*][_hcx, _result])\n+            }\n+\n             fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value {\n                 handle_cycle_error!([$($modifiers)*][tcx])\n             }"}, {"sha": "d9f44ca6e45a3b973f966b80f09b6a51b9e6934b", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -20,6 +20,7 @@ use super::LlvmCodegenBackend;\n \n use llvm;\n use metadata;\n+use rustc::dep_graph;\n use rustc::mir::mono::{Linkage, Visibility, Stats};\n use rustc::middle::cstore::{EncodedMetadata};\n use rustc::ty::TyCtxt;\n@@ -145,7 +146,8 @@ pub fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let ((stats, module), _) = tcx.dep_graph.with_task(dep_node,\n                                                        tcx,\n                                                        cgu_name,\n-                                                       module_codegen);\n+                                                       module_codegen,\n+                                                       dep_graph::hash_result);\n     let time_to_codegen = start_time.elapsed();\n \n     // We assume that the cost to run LLVM on a CGU is proportional to"}, {"sha": "51f3bcdf7a51cdb3be9a2492f1152112509aa671", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -67,11 +67,11 @@ const BASE_IMPL: &[&str] = &[\n     label_strs::ImplTraitRef,\n ];\n \n-/// DepNodes for MirValidated/Optimized, which is relevant in \"executable\"\n+/// DepNodes for MirBuilt/Optimized, which is relevant in \"executable\"\n /// code, i.e., functions+methods\n const BASE_MIR: &[&str] = &[\n     label_strs::MirOptimized,\n-    label_strs::MirValidated,\n+    label_strs::MirBuilt,\n ];\n \n /// Struct, Enum and Union DepNodes"}, {"sha": "f0f1f09a8388b9d677e5e7b07bfa70a71973057f", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -25,7 +25,7 @@ pub fn change_callee_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_function() {\n     callee2(1, 2)\n@@ -40,7 +40,7 @@ pub fn change_argument_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_function() {\n     callee1(1, 3)\n@@ -81,7 +81,7 @@ pub fn change_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_method() {\n     let s = Struct;\n@@ -98,7 +98,7 @@ pub fn change_argument_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method() {\n     let s = Struct;\n@@ -115,7 +115,7 @@ pub fn change_ufcs_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n@@ -132,7 +132,7 @@ pub fn change_argument_method_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n@@ -149,7 +149,7 @@ pub fn change_to_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n // One might think this would be expanded in the HirBody/Mir, but it actually\n // results in slightly different Hir/Mir.\n@@ -171,7 +171,7 @@ pub mod change_ufcs_callee_indirectly {\n     #[cfg(not(cfail1))]\n     use super::Struct2 as Struct;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n \n "}, {"sha": "4e82729aa3be14643538a8de73990828e6b35483", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -37,7 +37,7 @@ pub fn add_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_parameter() {\n     let x = 0u32;\n@@ -53,7 +53,7 @@ pub fn change_parameter_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n     let _ = |&x: &u32| x;\n@@ -84,7 +84,7 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n@@ -101,7 +101,7 @@ pub fn change_parameter_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_type() {\n     let closure = |x: u16| (x as u64) + 1;"}, {"sha": "a74c3ab04e2af44e94575f024f108adb4c08296b", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -34,7 +34,7 @@ pub fn change_field_value_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n@@ -96,7 +96,7 @@ pub fn change_constructor_path_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n@@ -119,7 +119,7 @@ pub fn change_constructor_variant_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n@@ -139,7 +139,7 @@ pub mod change_constructor_path_indirectly_struct_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,\\\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,\\\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -161,7 +161,7 @@ pub mod change_constructor_variant_indirectly_struct_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Struct2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant {\n@@ -180,7 +180,7 @@ pub fn change_field_value_tuple_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n@@ -197,7 +197,7 @@ pub fn change_constructor_path_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"HirBody,MirOptimized,MirValidated,TypeckTables\"\n+    except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_like() {\n@@ -215,7 +215,7 @@ pub fn change_constructor_variant_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"HirBody,MirOptimized,MirValidated,TypeckTables\"\n+    except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_tuple_like() {\n@@ -232,7 +232,7 @@ pub mod change_constructor_path_indirectly_tuple_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,\\\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,\\\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -251,7 +251,7 @@ pub mod change_constructor_variant_indirectly_tuple_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Tuple2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n@@ -278,7 +278,7 @@ pub fn change_constructor_path_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n@@ -293,7 +293,7 @@ pub fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_c_like() {\n     let _ = Clike::C;\n@@ -309,7 +309,7 @@ pub mod change_constructor_path_indirectly_c_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,\\\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,\\\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -328,7 +328,7 @@ pub mod change_constructor_variant_indirectly_c_like {\n     #[cfg(not(cfail1))]\n     use super::Clike::B as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Clike {\n         Variant"}, {"sha": "c9f844f96ebd7737897f09d4f40cb14d801312a4", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -16,7 +16,7 @@ pub fn body_not_exported_to_metadata() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n     2\n@@ -35,7 +35,7 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n@@ -55,7 +55,7 @@ pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {"}, {"sha": "da093ded63566996d75f5ce102d11cfe1c0fd9fe", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_iteration_variable_name() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_name() {\n     let mut _x = 0;\n@@ -71,7 +71,7 @@ pub fn change_iteration_variable_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n@@ -94,7 +94,7 @@ pub fn change_iterable() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -187,7 +187,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -262,7 +262,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "4330b0025a251975dee6ec64cd8bff0c8dbfaa0b", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -24,7 +24,7 @@ pub fn add_parameter() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_parameter(p: i32) {}\n \n@@ -47,7 +47,7 @@ pub fn type_of_parameter(p: i32) {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter(p: i64) {}\n \n@@ -59,7 +59,7 @@ pub fn type_of_parameter_ref(p: &i32) {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter_ref(p: &mut i32) {}\n \n@@ -71,7 +71,7 @@ pub fn order_of_parameters(p1: i32, p2: i64) {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn order_of_parameters(p2: i64, p1: i32) {}\n \n@@ -83,7 +83,7 @@ pub fn make_unsafe() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub unsafe fn make_unsafe() {}\n \n@@ -94,7 +94,7 @@ pub unsafe fn make_unsafe() {}\n pub fn make_extern() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, MirBuilt, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub extern \"C\" fn make_extern() {}\n \n@@ -292,7 +292,7 @@ pub mod change_return_type_indirectly {\n     use super::ReferencedType2 as ReturnType;\n \n     #[rustc_clean(cfg = \"cfail2\",\n-                  except = \"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+                  except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_return_type() -> ReturnType {\n         ReturnType {}\n@@ -309,7 +309,7 @@ pub mod change_parameter_type_indirectly {\n     use super::ReferencedType2 as ParameterType;\n \n     #[rustc_clean(cfg = \"cfail2\",\n-                  except = \"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+                  except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_parameter_type(p: ParameterType) {}\n }"}, {"sha": "a01247ff4243c02979ce29ee491341cbf95ccdbb", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -25,7 +25,7 @@ pub fn change_condition(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition(x: bool) -> u32 {\n     if !x {\n@@ -46,7 +46,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n@@ -69,7 +69,7 @@ pub fn change_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n@@ -120,7 +120,7 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_) = x {\n@@ -143,7 +143,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -166,7 +166,7 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {"}, {"sha": "d1574aee9a9c0923986b503a3d619e91ba4cb8c9", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -42,7 +42,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n         println!(\"Hello, world!\");\n@@ -63,7 +63,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn method_body_inlined() {\n@@ -114,7 +114,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirBuilt\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfmutness(&mut self) { }\n@@ -154,7 +154,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirBuilt\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n@@ -172,7 +172,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n@@ -191,7 +191,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,MirOptimized,MirValidated,TypeckTables\")]\n+        except=\"Hir,HirBody,FnSignature,MirOptimized,MirBuilt,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_return_type(&self) -> u8 { 0 }\n }\n@@ -226,7 +226,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n@@ -245,7 +245,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirBuilt\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n@@ -263,7 +263,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,FnSignature,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,MirBuilt,FnSignature,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub extern fn make_method_extern(&self) { }\n }\n@@ -447,7 +447,7 @@ impl Bar<u32> {\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOfItem,MirOptimized,MirValidated\"\n+        except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOfItem,MirOptimized,MirBuilt\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }\n@@ -465,7 +465,7 @@ impl Bar<u32> {\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"FnSignature,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"FnSignature,MirOptimized,MirBuilt,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_impl_self_type(&self) { }\n }"}, {"sha": "c5e7f525fd0fb5fd1e7ef582878d1c6537531d00", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -33,7 +33,7 @@ pub fn change_template(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n@@ -69,7 +69,7 @@ pub fn change_output(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n@@ -105,7 +105,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n@@ -140,7 +140,7 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n@@ -175,7 +175,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n@@ -210,7 +210,7 @@ pub fn change_options(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {"}, {"sha": "a2b33fecea8657a0d8431bc97c84f24a2d2e1306", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -22,7 +22,7 @@ pub fn change_name() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized\")]\n+    except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n@@ -38,7 +38,7 @@ pub fn add_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n@@ -54,7 +54,7 @@ pub fn change_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_type() {\n     let _x: u8 = 2;\n@@ -70,7 +70,7 @@ pub fn change_mutability_of_reference_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n@@ -86,7 +86,7 @@ pub fn change_mutability_of_slot() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n@@ -102,7 +102,7 @@ pub fn change_simple_binding_to_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n@@ -118,7 +118,7 @@ pub fn change_name_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized\")]\n+    except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n@@ -134,7 +134,7 @@ pub fn add_ref_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n@@ -150,7 +150,7 @@ pub fn add_amp_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n@@ -166,7 +166,7 @@ pub fn change_mutability_of_binding_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n@@ -182,7 +182,7 @@ pub fn add_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -198,7 +198,7 @@ pub fn change_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized\")]\n+    except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "a48d150b8b0f244d82877e9e9b294441a40a6044", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -47,7 +47,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -118,7 +118,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -168,7 +168,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -193,7 +193,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "11fe84d88e9b37b274b7d161459a8827ecf098c6", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -26,7 +26,7 @@ pub fn add_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n@@ -51,7 +51,7 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized\")]\n+    except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n@@ -75,7 +75,7 @@ pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -99,7 +99,7 @@ pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -123,7 +123,7 @@ pub fn add_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n@@ -147,7 +147,7 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized\")]\n+    except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n@@ -170,7 +170,7 @@ pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -193,7 +193,7 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized\")]\n+    except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -216,7 +216,7 @@ pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -238,7 +238,7 @@ pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -260,7 +260,7 @@ pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n@@ -283,7 +283,7 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized\")]\n+    except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n@@ -307,7 +307,7 @@ pub fn add_alternative_to_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {"}, {"sha": "9a3c93147a098143ef80adaf8286e0471b4cb210", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -18,7 +18,7 @@\n \n \n // Indexing expression ---------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n     #[cfg(cfail1)]\n@@ -33,7 +33,7 @@ pub fn indexing(slice: &[u8]) -> u8 {\n \n \n // Arithmetic overflow plus ----------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -48,7 +48,7 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n \n \n // Arithmetic overflow minus ----------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -63,7 +63,7 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n \n \n // Arithmetic overflow mult ----------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -78,7 +78,7 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n \n \n // Arithmetic overflow negation ------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -93,7 +93,7 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n \n \n // Division by zero ------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -107,7 +107,7 @@ pub fn division_by_zero(val: i32) -> i32 {\n }\n \n // Division by zero ------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -122,7 +122,7 @@ pub fn mod_by_zero(val: i32) -> i32 {\n \n \n // shift left ------------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]\n@@ -137,7 +137,7 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n \n \n // shift right ------------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]"}, {"sha": "a42fda31885209ae3ab49580a42f953949842472", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -31,7 +31,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -82,7 +82,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -117,7 +117,7 @@ pub fn change_field_label_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -152,7 +152,7 @@ pub fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n@@ -173,7 +173,7 @@ pub mod change_constructor_path_indirectly_regular_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {\n@@ -196,7 +196,7 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n@@ -213,7 +213,7 @@ pub fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n@@ -230,7 +230,7 @@ pub mod change_constructor_path_indirectly_tuple_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {"}, {"sha": "ef8035a300a4313e963d3b7dfe8dcfe5040c4ece", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -21,7 +21,7 @@ pub fn const_negation() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_negation() -> i32 {\n     -1\n@@ -36,7 +36,7 @@ pub fn const_bitwise_not() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_bitwise_not() -> i32 {\n     !99\n@@ -51,7 +51,7 @@ pub fn var_negation(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n@@ -66,7 +66,7 @@ pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n@@ -81,7 +81,7 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated,TypeckTables\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n@@ -96,7 +96,7 @@ pub fn first_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_const_add() -> i32 {\n     2 + 3\n@@ -111,7 +111,7 @@ pub fn second_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_const_add() -> i32 {\n     1 + 3\n@@ -126,7 +126,7 @@ pub fn first_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 2\n@@ -141,7 +141,7 @@ pub fn second_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n@@ -156,7 +156,7 @@ pub fn plus_to_minus(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 - a\n@@ -171,7 +171,7 @@ pub fn plus_to_mult(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 * a\n@@ -186,7 +186,7 @@ pub fn plus_to_div(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 / a\n@@ -201,7 +201,7 @@ pub fn plus_to_mod(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 % a\n@@ -216,7 +216,7 @@ pub fn and_to_or(a: bool, b: bool) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a || b\n@@ -231,7 +231,7 @@ pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 | a\n@@ -246,7 +246,7 @@ pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 ^ a\n@@ -261,7 +261,7 @@ pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n     a << 1\n@@ -276,7 +276,7 @@ pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n     a >> 1\n@@ -291,7 +291,7 @@ pub fn eq_to_uneq(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a != 1\n@@ -306,7 +306,7 @@ pub fn eq_to_lt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_lt(a: i32) -> bool {\n     a < 1\n@@ -321,7 +321,7 @@ pub fn eq_to_gt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_gt(a: i32) -> bool {\n     a > 1\n@@ -336,7 +336,7 @@ pub fn eq_to_le(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_le(a: i32) -> bool {\n     a <= 1\n@@ -351,7 +351,7 @@ pub fn eq_to_ge(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_ge(a: i32) -> bool {\n     a >= 1\n@@ -368,7 +368,7 @@ pub fn type_cast(a: u8) -> u64 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated,TypeckTables\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as u32;\n@@ -385,7 +385,7 @@ pub fn value_cast(a: u32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn value_cast(a: u32) -> i32 {\n     2 as i32\n@@ -403,7 +403,7 @@ pub fn place() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn place() -> i32 {\n     let mut x = 10;\n@@ -423,7 +423,7 @@ pub fn rvalue() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n@@ -440,7 +440,7 @@ pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[j]"}, {"sha": "c708d5b969df586c4d3512a5b5621af0c03957f3", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "c7b84a120c8dfa3dde6d19dab987c15f80699759", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfb44133d1dbabc27acbe63848b072c76f0921f/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=1bfb44133d1dbabc27acbe63848b072c76f0921f", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}]}