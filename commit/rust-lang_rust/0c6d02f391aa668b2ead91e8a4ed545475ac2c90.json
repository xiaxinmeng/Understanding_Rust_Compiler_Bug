{"sha": "0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNmQwMmYzOTFhYTY2OGIyZWFkOTFlOGE0ZWQ1NDU0NzVhYzJjOTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T15:05:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T17:55:11Z"}, "message": "Correct merge errors", "tree": {"sha": "89744dbdb6a4ea49960f3f69ed3a8580fc8979ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89744dbdb6a4ea49960f3f69ed3a8580fc8979ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "html_url": "https://github.com/rust-lang/rust/commit/0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5fc4ae9189f8ffe52fd6ec7b228d803f594b48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fc4ae9189f8ffe52fd6ec7b228d803f594b48b", "html_url": "https://github.com/rust-lang/rust/commit/b5fc4ae9189f8ffe52fd6ec7b228d803f594b48b"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "d5d0cde1ee0a083b720829ede4eb194251eba227", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -1842,7 +1842,7 @@ pub fn store_arg(mut bcx: block,\n \n fn mk_binding_alloca(mut bcx: block,\n                      p_id: ast::node_id,\n-                     path: @ast::Path,\n+                     path: &ast::Path,\n                      binding_mode: IrrefutablePatternBindingMode,\n                      populate: &fn(block, ty::t, ValueRef) -> block) -> block {\n     let var_ty = node_id_type(bcx, p_id);\n@@ -1899,7 +1899,7 @@ fn bind_irrefutable_pat(bcx: block,\n     let tcx = bcx.tcx();\n     let ccx = bcx.ccx();\n     match pat.node {\n-        ast::pat_ident(pat_binding_mode, path, inner) => {\n+        ast::pat_ident(pat_binding_mode, ref path, inner) => {\n             if pat_is_binding(tcx.def_map, pat) {\n                 // Allocate the stack slot where the value of this\n                 // binding will live and place it into the appropriate\n@@ -2017,9 +2017,9 @@ fn bind_irrefutable_pat(bcx: block,\n     return bcx;\n }\n \n-fn simple_identifier(pat: @ast::pat) -> Option<@ast::Path> {\n+fn simple_identifier<'a>(pat: &'a ast::pat) -> Option<&'a ast::Path> {\n     match pat.node {\n-        ast::pat_ident(ast::bind_infer, path, None) => {\n+        ast::pat_ident(ast::bind_infer, ref path, None) => {\n             Some(path)\n         }\n         _ => {"}, {"sha": "80fc3803ae7320926e6f10d6b30dc4fae88855fc", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -1969,17 +1969,17 @@ pub fn trans_tuple_struct(ccx: @mut CrateContext,\n \n trait IdAndTy {\n     fn id(&self) -> ast::node_id;\n-    fn ty(&self) -> @ast::Ty;\n+    fn ty<'a>(&'a self) -> &'a ast::Ty;\n }\n \n impl IdAndTy for ast::variant_arg {\n     fn id(&self) -> ast::node_id { self.id }\n-    fn ty(&self) -> @ast::Ty { self.ty }\n+    fn ty<'a>(&'a self) -> &'a ast::Ty { &self.ty }\n }\n \n impl IdAndTy for @ast::struct_field {\n     fn id(&self) -> ast::node_id { self.node.id }\n-    fn ty(&self) -> @ast::Ty { self.node.ty }\n+    fn ty<'a>(&'a self) -> &'a ast::Ty { &self.node.ty }\n }\n \n pub fn trans_enum_variant_or_tuple_like_struct<A:IdAndTy>(\n@@ -1994,7 +1994,7 @@ pub fn trans_enum_variant_or_tuple_like_struct<A:IdAndTy>(\n     let fn_args = do args.map |varg| {\n         ast::arg {\n             is_mutbl: false,\n-            ty: varg.ty(),\n+            ty: copy *varg.ty(),\n             pat: ast_util::ident_to_pat(\n                 ccx.tcx.sess.next_node_id(),\n                 codemap::dummy_sp(),\n@@ -2977,8 +2977,12 @@ pub fn trans_crate(sess: session::Session,\n         do sort::quick_sort(ccx.stats.fn_stats) |&(_, _, insns_a), &(_, _, insns_b)| {\n             insns_a > insns_b\n         }\n-        for ccx.stats.fn_stats.iter().advance |&(name, ms, insns)| {\n-            io::println(fmt!(\"%u insns, %u ms, %s\", insns, ms, name));\n+        for ccx.stats.fn_stats.iter().advance |tuple| {\n+            match *tuple {\n+                (ref name, ms, insns) => {\n+                    io::println(fmt!(\"%u insns, %u ms, %s\", insns, ms, *name));\n+                }\n+            }\n         }\n     }\n     if ccx.sess.count_llvm_insns() {"}, {"sha": "7ee731d4f46b47daef8a5cb87ebf809b45f23a12", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -209,7 +209,7 @@ impl CoherenceChecker {\n                 match item.node {\n                     item_impl(_, ref opt_trait, _, _) => {\n                         let opt_trait : ~[trait_ref] = opt_trait.iter()\n-                                                                .transform(|&x| x)\n+                                                                .transform(|x| copy *x)\n                                                                 .collect();\n                         self.check_implementation(item, opt_trait);\n                     }\n@@ -270,7 +270,7 @@ impl CoherenceChecker {\n         // We only want to generate one Impl structure. When we generate one,\n         // we store it here so that we don't recreate it.\n         let mut implementation_opt = None;\n-        for associated_traits.iter().advance |&associated_trait| {\n+        for associated_traits.iter().advance |associated_trait| {\n             let trait_ref =\n                 ty::node_id_to_trait_ref(\n                     self.crate_context.tcx,"}, {"sha": "a69ffca026b86d486c919c6eeac0de08fc623a6f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -1277,7 +1277,7 @@ impl<T> OwnedVector<T> for ~[T] {\n                 let valptr = ptr::to_mut_unsafe_ptr(&mut self[ln - 1u]);\n                 unsafe {\n                     raw::set_len(self, ln - 1u);\n-                    ptr::read_ptr(valptr)\n+                    Some(ptr::read_ptr(valptr))\n                 }\n             }\n         }"}, {"sha": "3bc16477c808a389f26aed88b84d5a4c40eb7864", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -519,8 +519,8 @@ impl<'self> MethodDef<'self> {\n         // create the generics that aren't for Self\n         let fn_generics = self.generics.to_generics(cx, span, type_ident, generics);\n \n-        let args = do arg_types.map |&(id, ty)| {\n-            cx.arg(span, id, ty)\n+        let args = do arg_types.map |pair| {\n+            cx.arg(span, pair.first(), pair.second())\n         };\n \n         let ret_type = self.get_ret_ty(cx, span, generics, type_ident);\n@@ -896,8 +896,8 @@ pub fn create_subpatterns(cx: @ExtCtxt,\n                           field_paths: ~[ast::Path],\n                           mutbl: ast::mutability)\n                    -> ~[@ast::pat] {\n-    do field_paths.map |&path| {\n-        cx.pat(span, ast::pat_ident(ast::bind_by_ref(mutbl), path, None))\n+    do field_paths.map |path| {\n+        cx.pat(span, ast::pat_ident(ast::bind_by_ref(mutbl), copy *path, None))\n     }\n }\n "}, {"sha": "478c086199011424f5e10ae57a733d7d9bebff93", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -137,7 +137,7 @@ impl gen_send for message {\n                 let arg_names = vec::from_fn(tys.len(), |i| \"x_\" + i.to_str());\n \n                 let args_ast: ~[ast::arg] = arg_names.iter().zip(tys.iter())\n-                    .transform(|(&n, t)| cx.arg(span, cx.ident_of(n), copy *t)).collect();\n+                    .transform(|(n, t)| cx.arg(span, cx.ident_of(*n), copy *t)).collect();\n \n                 let args_ast = vec::append(\n                     ~[cx.arg(span,"}, {"sha": "8666c84bbefe13152da362ade3a2ac9633643e0b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -3914,7 +3914,7 @@ impl Parser {\n         };\n         let full_path = full_path.normalize();\n \n-        let maybe_i = do self.sess.included_mod_stack.iter().position |&p| { p == full_path };\n+        let maybe_i = do self.sess.included_mod_stack.iter().position |p| { *p == full_path };\n         match maybe_i {\n             Some(i) => {\n                 let stack = &self.sess.included_mod_stack;"}, {"sha": "c37108536154d87454ea80de13a67f0f2bc9d0d1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6d02f391aa668b2ead91e8a4ed545475ac2c90/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0c6d02f391aa668b2ead91e8a4ed545475ac2c90", "patch": "@@ -1526,7 +1526,7 @@ pub fn print_bounded_path(s: @ps, path: &ast::Path,\n     print_path_(s, path, false, bounds)\n }\n \n-pub fn print_pat(s: @ps, pat: @ast::pat) {\n+pub fn print_pat(s: @ps, pat: &ast::pat) {\n     maybe_print_comment(s, pat.span.lo);\n     let ann_node = node_pat(s, pat);\n     (s.ann.pre)(ann_node);"}]}