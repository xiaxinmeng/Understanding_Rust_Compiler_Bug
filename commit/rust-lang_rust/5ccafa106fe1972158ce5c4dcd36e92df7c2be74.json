{"sha": "5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjY2FmYTEwNmZlMTk3MjE1OGNlNWM0ZGNkMzZlOTJkZjdjMmJlNzQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-05T21:44:58Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-05T21:44:58Z"}, "message": "Simplified checking for non_exhaustive attribute.", "tree": {"sha": "add9c1f11a59bdd9223f1408a64d572214379691", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add9c1f11a59bdd9223f1408a64d572214379691"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAls+kVoACgkQAXYLT59T\n8VQ/XQ//YAwSDeorNxEdauuiYEv6Uni86Afg74mtoDYpldmEW3yWn831Z/PArT6Y\nDMNr9Ya1MiZsXD3WARJWR03KRlX3UIVlZ4I0xzKsXuoEvpe2Hl29U6ULmr2RfGSx\nI1B4a9+lmE1Ut5wbBwh0SAUCo7oSeUqaPgOmL2ZVH06jOpZhfpkuxWBhpIdYdU8e\nOV66257rAKLE2kOx7qG5LEykMQTUN2tRWfB3eTucIc24c3G7tg1wzFOIZ/XKLEzg\nAfXC67a4mHD35GYBur5Jp9CGztEst/n6ExjdM7E1jqFHjj2be1eRmPkSYKhBgGiI\nuFKU1fTZTG916TtbzH2dt+9EhMLUxFG2T7BKmI6hRaezanoh2keDXnAcLUABaG5r\niYq0/2EJJOgRSzj1Dq05SqAbx+5mUT5UTJl8qBe6D3PyUTzAkfWS0JXyywVUK3SQ\n3LKQ6NAy2t0Rj/x16FWpJPQCETIuH7XJ9w4F0TRzconKLwCRcC8kmRxcAVfqEbxJ\nigEhfrWFcKXQeMCB+9YGqrwbFiv32NiEE7j3OR9xdOpfPm1X9+jDbAzNo+3tNGrB\nVJ4CP85mVlJBzqFtggT7Mkx5SEN0IT57AavnK3J2e7CD54TAPnrmx9q28XDtCDgE\nuBpCUK4s3EkHIbquVVZp1vB55soHPQJgWP9Rk+8d1petFcNJ8BQ=\n=+5jf\n-----END PGP SIGNATURE-----", "payload": "tree add9c1f11a59bdd9223f1408a64d572214379691\nparent 3e59aef385ef6a418f77560458012adc179ee64a\nauthor David Wood <david@davidtw.co> 1530827098 +0100\ncommitter David Wood <david@davidtw.co> 1530827098 +0100\n\nSimplified checking for non_exhaustive attribute.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "html_url": "https://github.com/rust-lang/rust/commit/5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e59aef385ef6a418f77560458012adc179ee64a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e59aef385ef6a418f77560458012adc179ee64a", "html_url": "https://github.com/rust-lang/rust/commit/3e59aef385ef6a418f77560458012adc179ee64a"}], "stats": {"total": 49, "additions": 8, "deletions": 41}, "files": [{"sha": "272819ba2dd96940796d1978b14b8b8a055043b1", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "patch": "@@ -229,7 +229,6 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 def_id: self.next_def_id(def_id.krate),\n                 stability: None,\n                 deprecation: None,\n-                non_exhaustive: false,\n                 inner: ImplItem(Impl {\n                     unsafety: hir::Unsafety::Normal,\n                     generics: new_generics,"}, {"sha": "ad7389db729ec7f3151300a6ecc5f24c933a23e1", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "patch": "@@ -111,7 +111,6 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n         visibility: Some(clean::Public),\n         stability: cx.tcx.lookup_stability(did).clean(cx),\n         deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n-        non_exhaustive: false,\n         def_id: did,\n     });\n     Some(ret)\n@@ -413,7 +412,6 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n         visibility: Some(clean::Inherited),\n         stability: tcx.lookup_stability(did).clean(cx),\n         deprecation: tcx.lookup_deprecation(did).clean(cx),\n-        non_exhaustive: false,\n         def_id: did,\n     });\n }"}, {"sha": "a47213a62a54bb89806cfef337c795ec1e2a878e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "patch": "@@ -192,7 +192,6 @@ impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx>\n                     visibility: Some(Public),\n                     stability: get_stability(cx, def_id),\n                     deprecation: get_deprecation(cx, def_id),\n-                    non_exhaustive: false,\n                     def_id,\n                     inner: PrimitiveItem(prim),\n                 }\n@@ -205,7 +204,6 @@ impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx>\n                     visibility: Some(Public),\n                     stability: get_stability(cx, def_id),\n                     deprecation: get_deprecation(cx, def_id),\n-                    non_exhaustive: false,\n                     def_id,\n                     inner: KeywordItem(kw),\n                 }\n@@ -368,7 +366,6 @@ pub struct Item {\n     pub def_id: DefId,\n     pub stability: Option<Stability>,\n     pub deprecation: Option<Deprecation>,\n-    pub non_exhaustive: bool,\n }\n \n impl fmt::Debug for Item {\n@@ -498,6 +495,12 @@ impl Item {\n         self.stability.as_ref().map(|s| &s.since[..])\n     }\n \n+    pub fn is_non_exhaustive(&self) -> bool {\n+        self.attrs.other_attrs.iter()\n+            .filter(|a| a.name().as_str() == \"non_exhaustive\")\n+            .count() > 0\n+    }\n+\n     /// Returns a documentation-level item type from the item.\n     pub fn type_(&self) -> ItemType {\n         ItemType::from(self)\n@@ -628,7 +631,6 @@ impl Clean<Item> for doctree::Module {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n@@ -2121,7 +2123,6 @@ impl Clean<Item> for doctree::Function {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: FunctionItem(Function {\n                 decl,\n@@ -2303,7 +2304,6 @@ impl Clean<Item> for doctree::Trait {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             inner: TraitItem(Trait {\n                 auto: self.is_auto.clean(cx),\n                 unsafety: self.unsafety,\n@@ -2373,7 +2373,6 @@ impl Clean<Item> for hir::TraitItem {\n             visibility: None,\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n-            non_exhaustive: false,\n             inner,\n         }\n     }\n@@ -2402,7 +2401,6 @@ impl Clean<Item> for hir::ImplItem {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n-            non_exhaustive: false,\n             inner,\n         }\n     }\n@@ -2549,7 +2547,6 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n             visibility,\n             stability: get_stability(cx, self.def_id),\n             deprecation: get_deprecation(cx, self.def_id),\n-            non_exhaustive: false,\n             def_id: self.def_id,\n             attrs: inline::load_attrs(cx, self.def_id),\n             source: cx.tcx.def_span(self.def_id).clean(cx),\n@@ -3203,7 +3200,6 @@ impl Clean<Item> for hir::StructField {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n-            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: StructFieldItem(self.ty.clean(cx)),\n         }\n@@ -3219,7 +3215,6 @@ impl<'tcx> Clean<Item> for ty::FieldDef {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, self.did),\n             deprecation: get_deprecation(cx, self.did),\n-            non_exhaustive: false,\n             def_id: self.did,\n             inner: StructFieldItem(cx.tcx.type_of(self.did).clean(cx)),\n         }\n@@ -3284,7 +3279,6 @@ impl Clean<Vec<Item>> for doctree::Struct {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: self.non_exhaustive,\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3310,7 +3304,6 @@ impl Clean<Vec<Item>> for doctree::Union {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             inner: UnionItem(Union {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3363,7 +3356,6 @@ impl Clean<Vec<Item>> for doctree::Enum {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: self.non_exhaustive,\n             inner: EnumItem(Enum {\n                 variants: self.variants.clean(cx),\n                 generics: self.generics.clean(cx),\n@@ -3389,7 +3381,6 @@ impl Clean<Item> for doctree::Variant {\n             visibility: None,\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.def.id()),\n             inner: VariantItem(Variant {\n                 kind: self.def.clean(cx),\n@@ -3420,7 +3411,6 @@ impl<'tcx> Clean<Item> for ty::VariantDef {\n                             def_id: field.did,\n                             stability: get_stability(cx, field.did),\n                             deprecation: get_deprecation(cx, field.did),\n-                            non_exhaustive: false,\n                             inner: StructFieldItem(cx.tcx.type_of(field.did).clean(cx))\n                         }\n                     }).collect()\n@@ -3436,7 +3426,6 @@ impl<'tcx> Clean<Item> for ty::VariantDef {\n             inner: VariantItem(Variant { kind: kind }),\n             stability: get_stability(cx, self.did),\n             deprecation: get_deprecation(cx, self.did),\n-            non_exhaustive: false,\n         }\n     }\n }\n@@ -3688,7 +3677,6 @@ impl Clean<Item> for doctree::Typedef {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n                 generics: self.gen.clean(cx),\n@@ -3740,7 +3728,6 @@ impl Clean<Item> for doctree::Static {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n                 mutability: self.mutability.clean(cx),\n@@ -3766,7 +3753,6 @@ impl Clean<Item> for doctree::Constant {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n                 expr: print_const_expr(cx, self.expr),\n@@ -3855,7 +3841,6 @@ impl Clean<Vec<Item>> for doctree::Impl {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n@@ -3942,7 +3927,6 @@ impl Clean<Item> for doctree::ExternCrate {\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,\n-            non_exhaustive: false,\n             inner: ExternCrateItem(self.name.clean(cx), self.path.clone())\n         }\n     }\n@@ -3989,7 +3973,6 @@ impl Clean<Vec<Item>> for doctree::Import {\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,\n-            non_exhaustive: false,\n             inner: ImportItem(inner)\n         }]\n     }\n@@ -4058,7 +4041,6 @@ impl Clean<Item> for hir::ForeignItem {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n-            non_exhaustive: false,\n             inner,\n         }\n     }\n@@ -4233,7 +4215,6 @@ impl Clean<Item> for doctree::Macro {\n             visibility: Some(Public),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            non_exhaustive: false,\n             def_id: self.def_id,\n             inner: MacroItem(Macro {\n                 source: format!(\"macro_rules! {} {{\\n{}}}\","}, {"sha": "0807db2997626fadc34b8a4de1432792a06cf4e6", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "patch": "@@ -97,7 +97,6 @@ pub struct Struct {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub non_exhaustive: bool,\n     pub id: NodeId,\n     pub struct_type: StructType,\n     pub name: Name,\n@@ -124,7 +123,6 @@ pub struct Enum {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub non_exhaustive: bool,\n     pub variants: hir::HirVec<Variant>,\n     pub generics: hir::Generics,\n     pub attrs: hir::HirVec<ast::Attribute>,"}, {"sha": "899714a8873e3634682ce23a10493fde630d901d", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "patch": "@@ -99,7 +99,6 @@ pub trait DocFolder : Sized {\n             inner,\n             stability,\n             deprecation,\n-            non_exhaustive\n         } = item;\n \n         let inner = match inner {\n@@ -108,7 +107,7 @@ pub trait DocFolder : Sized {\n         };\n \n         Some(Item { attrs, name, source, inner, visibility,\n-                    stability, deprecation, non_exhaustive, def_id })\n+                    stability, deprecation, def_id })\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {"}, {"sha": "a13055c25e93af145d759f5e320f83724729225b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "patch": "@@ -2264,7 +2264,7 @@ fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item)\n }\n \n fn document_non_exhaustive(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n-    if item.non_exhaustive {\n+    if item.is_non_exhaustive() {\n         write!(w, \"<div class='non-exhaustive'><div class='stab non-exhaustive'>\")?;\n         write!(w, \"<details><summary><span class=microscope>\ud83d\udd2c</span>\")?;\n "}, {"sha": "6bf1931e468dece633fd29456b204a28fe24cf35", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccafa106fe1972158ce5c4dcd36e92df7c2be74/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5ccafa106fe1972158ce5c4dcd36e92df7c2be74", "patch": "@@ -89,12 +89,6 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             .and_then(|def_id| self.cx.tcx.lookup_deprecation(def_id))\n     }\n \n-    fn non_exhaustive(&self, id: ast::NodeId) -> bool {\n-        self.cx.tcx.hir.opt_local_def_id(id)\n-            .map(|def_id| self.cx.tcx.has_attr(def_id, \"non_exhaustive\"))\n-            .unwrap_or(false)\n-    }\n-\n     pub fn visit(&mut self, krate: &hir::Crate) {\n         self.attrs = krate.attrs.clone();\n \n@@ -125,7 +119,6 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             vis: item.vis.clone(),\n             stab: self.stability(item.id),\n             depr: self.deprecation(item.id),\n-            non_exhaustive: self.non_exhaustive(item.id),\n             attrs: item.attrs.clone(),\n             generics: generics.clone(),\n             fields: sd.fields().iter().cloned().collect(),\n@@ -169,7 +162,6 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             vis: it.vis.clone(),\n             stab: self.stability(it.id),\n             depr: self.deprecation(it.id),\n-            non_exhaustive: self.non_exhaustive(it.id),\n             generics: params.clone(),\n             attrs: it.attrs.clone(),\n             id: it.id,"}]}