{"sha": "fb03a49c2501c52401b3c987fd455818de1736f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMDNhNDljMjUwMWM1MjQwMWIzYzk4N2ZkNDU1ODE4ZGUxNzM2ZjI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-22T18:12:22Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T09:55:16Z"}, "message": "Replace Unique<T> with NonZero<T> in Alloc trait", "tree": {"sha": "f8837bc6ac6935858714c8ad6fd1be55398a9242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8837bc6ac6935858714c8ad6fd1be55398a9242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb03a49c2501c52401b3c987fd455818de1736f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb03a49c2501c52401b3c987fd455818de1736f2", "html_url": "https://github.com/rust-lang/rust/commit/fb03a49c2501c52401b3c987fd455818de1736f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb03a49c2501c52401b3c987fd455818de1736f2/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f19baf0977b176ba26277af479a19b71b7ee1fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f19baf0977b176ba26277af479a19b71b7ee1fdb", "html_url": "https://github.com/rust-lang/rust/commit/f19baf0977b176ba26277af479a19b71b7ee1fdb"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "55e8c0b430f52c76f6b63617d8b6a0b90bef91d3", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=fb03a49c2501c52401b3c987fd455818de1736f2", "patch": "@@ -19,7 +19,7 @@ use core::cmp;\n use core::fmt;\n use core::mem;\n use core::usize;\n-use core::ptr::{self, Unique};\n+use core::ptr::{self, NonNull};\n \n /// Represents the combination of a starting address and\n /// a total capacity of the returned block.\n@@ -895,12 +895,12 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the allocator's `oom`\n     /// method, rather than directly invoking `panic!` or similar.\n-    fn alloc_one<T>(&mut self) -> Result<Unique<T>, AllocErr>\n+    fn alloc_one<T>(&mut self) -> Result<NonNull<T>, AllocErr>\n         where Self: Sized\n     {\n         let k = Layout::new::<T>();\n         if k.size() > 0 {\n-            unsafe { self.alloc(k).map(|p| Unique::new_unchecked(p as *mut T)) }\n+            unsafe { self.alloc(k).map(|p| NonNull::new_unchecked(p as *mut T)) }\n         } else {\n             Err(AllocErr::invalid_input(\"zero-sized type invalid for alloc_one\"))\n         }\n@@ -923,7 +923,7 @@ pub unsafe trait Alloc {\n     /// * `ptr` must denote a block of memory currently allocated via this allocator\n     ///\n     /// * the layout of `T` must *fit* that block of memory.\n-    unsafe fn dealloc_one<T>(&mut self, ptr: Unique<T>)\n+    unsafe fn dealloc_one<T>(&mut self, ptr: NonNull<T>)\n         where Self: Sized\n     {\n         let raw_ptr = ptr.as_ptr() as *mut u8;\n@@ -963,15 +963,15 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the allocator's `oom`\n     /// method, rather than directly invoking `panic!` or similar.\n-    fn alloc_array<T>(&mut self, n: usize) -> Result<Unique<T>, AllocErr>\n+    fn alloc_array<T>(&mut self, n: usize) -> Result<NonNull<T>, AllocErr>\n         where Self: Sized\n     {\n         match Layout::array::<T>(n) {\n             Some(ref layout) if layout.size() > 0 => {\n                 unsafe {\n                     self.alloc(layout.clone())\n                         .map(|p| {\n-                            Unique::new_unchecked(p as *mut T)\n+                            NonNull::new_unchecked(p as *mut T)\n                         })\n                 }\n             }\n@@ -1012,15 +1012,15 @@ pub unsafe trait Alloc {\n     /// reallocation error are encouraged to call the allocator's `oom`\n     /// method, rather than directly invoking `panic!` or similar.\n     unsafe fn realloc_array<T>(&mut self,\n-                               ptr: Unique<T>,\n+                               ptr: NonNull<T>,\n                                n_old: usize,\n-                               n_new: usize) -> Result<Unique<T>, AllocErr>\n+                               n_new: usize) -> Result<NonNull<T>, AllocErr>\n         where Self: Sized\n     {\n         match (Layout::array::<T>(n_old), Layout::array::<T>(n_new), ptr.as_ptr()) {\n             (Some(ref k_old), Some(ref k_new), ptr) if k_old.size() > 0 && k_new.size() > 0 => {\n                 self.realloc(ptr as *mut u8, k_old.clone(), k_new.clone())\n-                    .map(|p|Unique::new_unchecked(p as *mut T))\n+                    .map(|p| NonNull::new_unchecked(p as *mut T))\n             }\n             _ => {\n                 Err(AllocErr::invalid_input(\"invalid layout for realloc_array\"))\n@@ -1048,7 +1048,7 @@ pub unsafe trait Alloc {\n     /// constraints.\n     ///\n     /// Always returns `Err` on arithmetic overflow.\n-    unsafe fn dealloc_array<T>(&mut self, ptr: Unique<T>, n: usize) -> Result<(), AllocErr>\n+    unsafe fn dealloc_array<T>(&mut self, ptr: NonNull<T>, n: usize) -> Result<(), AllocErr>\n         where Self: Sized\n     {\n         let raw_ptr = ptr.as_ptr() as *mut u8;"}, {"sha": "621e190696137c7fe7d792733ab0f7978acaa23f", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=fb03a49c2501c52401b3c987fd455818de1736f2", "patch": "@@ -322,7 +322,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                     // would cause overflow\n                     let new_cap = if elem_size > (!0) / 8 { 1 } else { 4 };\n                     match self.a.alloc_array::<T>(new_cap) {\n-                        Ok(ptr) => (new_cap, ptr),\n+                        Ok(ptr) => (new_cap, ptr.into()),\n                         Err(e) => self.a.oom(e),\n                     }\n                 }"}, {"sha": "89ecb3457fcb69baf43ccc94fbbaa1b50196df15", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=fb03a49c2501c52401b3c987fd455818de1736f2", "patch": "@@ -2452,6 +2452,13 @@ impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     }\n }\n \n+#[unstable(feature = \"unique\", issue = \"27730\")]\n+impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n+    fn from(p: NonNull<T>) -> Self {\n+        Unique { pointer: p.pointer, _marker: PhantomData }\n+    }\n+}\n+\n /// Previous name of `NonNull`.\n #[rustc_deprecated(since = \"1.24\", reason = \"renamed to `NonNull`\")]\n #[unstable(feature = \"shared\", issue = \"27730\")]"}, {"sha": "eaa5bc90805768e7643c8725eb6bd291b87bd78b", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb03a49c2501c52401b3c987fd455818de1736f2/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=fb03a49c2501c52401b3c987fd455818de1736f2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(allocator_api, unique)]\n+#![feature(allocator_api, nonnull)]\n \n use std::heap::{Heap, Alloc};\n "}]}