{"sha": "022720bfccd46400e69def42f4647fe4059ad951", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMjcyMGJmY2NkNDY0MDBlNjlkZWY0MmY0NjQ3ZmU0MDU5YWQ5NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T08:01:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T08:01:45Z"}, "message": "Auto merge of #86091 - JohnTitor:rollup-wceot6d, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #84262 (Fix ICE during type layout when there's a `[type error]`)\n - #85973 (Replace a `match` with an `if let`)\n - #85996 (rustbuild: take changes to the standard library into account for `download-rustc`)\n - #86016 (Unify duplicate linker_and_flavor methods in rustc_codegen_{cranelift,ssa}.)\n - #86025 (Remove the install prefix from the rpath set when using -Crpath)\n - #86081 (Use `try_into` instead of asserting manually)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "04a4e52b11f473366d5aba11f245c0caaa77b408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a4e52b11f473366d5aba11f245c0caaa77b408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/022720bfccd46400e69def42f4647fe4059ad951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/022720bfccd46400e69def42f4647fe4059ad951", "html_url": "https://github.com/rust-lang/rust/commit/022720bfccd46400e69def42f4647fe4059ad951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/022720bfccd46400e69def42f4647fe4059ad951/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9610bf5af1d5c54968db0dd899595ca12307a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9610bf5af1d5c54968db0dd899595ca12307a0", "html_url": "https://github.com/rust-lang/rust/commit/cc9610bf5af1d5c54968db0dd899595ca12307a0"}, {"sha": "7530c7d1bdae3fc511294369e10dabf259996272", "url": "https://api.github.com/repos/rust-lang/rust/commits/7530c7d1bdae3fc511294369e10dabf259996272", "html_url": "https://github.com/rust-lang/rust/commit/7530c7d1bdae3fc511294369e10dabf259996272"}], "stats": {"total": 271, "additions": 104, "deletions": 167}, "files": [{"sha": "f86236ef3eafc6eee6c6a476bb19d2fed1f13ce4", "filename": "compiler/rustc_codegen_cranelift/src/toolchain.rs", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -2,9 +2,8 @@\n \n use std::path::PathBuf;\n \n-use rustc_middle::bug;\n+use rustc_codegen_ssa::back::link::linker_and_flavor;\n use rustc_session::Session;\n-use rustc_target::spec::LinkerFlavor;\n \n /// Tries to infer the path of a binary for the target toolchain from the linker name.\n pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n@@ -30,90 +29,3 @@ pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n \n     linker\n }\n-\n-// Adapted from https://github.com/rust-lang/rust/blob/5db778affee7c6600c8e7a177c48282dab3f6292/src/librustc_codegen_ssa/back/link.rs#L848-L931\n-fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n-    fn infer_from(\n-        sess: &Session,\n-        linker: Option<PathBuf>,\n-        flavor: Option<LinkerFlavor>,\n-    ) -> Option<(PathBuf, LinkerFlavor)> {\n-        match (linker, flavor) {\n-            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n-            // only the linker flavor is known; use the default linker for the selected flavor\n-            (None, Some(flavor)) => Some((\n-                PathBuf::from(match flavor {\n-                    LinkerFlavor::Em => {\n-                        if cfg!(windows) {\n-                            \"emcc.bat\"\n-                        } else {\n-                            \"emcc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Gcc => {\n-                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n-                            // On historical Solaris systems, \"cc\" may have\n-                            // been Sun Studio, which is not flag-compatible\n-                            // with \"gcc\".  This history casts a long shadow,\n-                            // and many modern illumos distributions today\n-                            // ship GCC as \"gcc\" without also making it\n-                            // available as \"cc\".\n-                            \"gcc\"\n-                        } else {\n-                            \"cc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n-                    LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n-                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n-                }),\n-                flavor,\n-            )),\n-            (Some(linker), None) => {\n-                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n-                    sess.fatal(\"couldn't extract file stem from specified linker\")\n-                });\n-\n-                let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::Em\n-                } else if stem == \"gcc\"\n-                    || stem.ends_with(\"-gcc\")\n-                    || stem == \"clang\"\n-                    || stem.ends_with(\"-clang\")\n-                {\n-                    LinkerFlavor::Gcc\n-                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::Ld\n-                } else if stem == \"link\" || stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc\n-                } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.lld_flavor)\n-                } else {\n-                    // fall back to the value in the target spec\n-                    sess.target.linker_flavor\n-                };\n-\n-                Some((linker, flavor))\n-            }\n-            (None, None) => None,\n-        }\n-    }\n-\n-    // linker and linker flavor specified via command line have precedence over what the target\n-    // specification specifies\n-    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n-        return ret;\n-    }\n-\n-    if let Some(ret) = infer_from(\n-        sess,\n-        sess.target.linker.clone().map(PathBuf::from),\n-        Some(sess.target.linker_flavor),\n-    ) {\n-        return ret;\n-    }\n-\n-    bug!(\"Not enough information provided to determine how to invoke the linker\");\n-}"}, {"sha": "6a2005b4d23ed01bdb7d93eed3d3f25b2b835adf", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -1147,7 +1147,8 @@ pub fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool\n         && (info.compiler_builtins == Some(cnum) || info.is_no_builtins.contains(&cnum))\n }\n \n-fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n+// This functions tries to determine the appropriate linker (and corresponding LinkerFlavor) to use\n+pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n     fn infer_from(\n         sess: &Session,\n         linker: Option<PathBuf>,\n@@ -1714,24 +1715,14 @@ fn add_rpath_args(\n ) {\n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the\n-    // addl_lib_search_paths\n+    // add_lib_search_paths\n     if sess.opts.cg.rpath {\n-        let target_triple = sess.opts.target_triple.triple();\n-        let mut get_install_prefix_lib_path = || {\n-            let install_prefix = option_env!(\"CFG_PREFIX\").expect(\"CFG_PREFIX\");\n-            let tlib = rustc_target::target_rustlib_path(&sess.sysroot, target_triple).join(\"lib\");\n-            let mut path = PathBuf::from(install_prefix);\n-            path.push(&tlib);\n-\n-            path\n-        };\n         let mut rpath_config = RPathConfig {\n             used_crates: &codegen_results.crate_info.used_crates_dynamic,\n             out_filename: out_filename.to_path_buf(),\n             has_rpath: sess.target.has_rpath,\n             is_like_osx: sess.target.is_like_osx,\n             linker_is_gnu: sess.target.linker_is_gnu,\n-            get_install_prefix_lib_path: &mut get_install_prefix_lib_path,\n         };\n         cmd.args(&rpath::get_rpath_flags(&mut rpath_config));\n     }"}, {"sha": "39b0ccd120de519c747af97a88091c035d1cf4a2", "filename": "compiler/rustc_codegen_ssa/src/back/rpath.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -13,7 +13,6 @@ pub struct RPathConfig<'a> {\n     pub is_like_osx: bool,\n     pub has_rpath: bool,\n     pub linker_is_gnu: bool,\n-    pub get_install_prefix_lib_path: &'a mut dyn FnMut() -> PathBuf,\n }\n \n pub fn get_rpath_flags(config: &mut RPathConfig<'_>) -> Vec<String> {\n@@ -63,24 +62,13 @@ fn get_rpaths(config: &mut RPathConfig<'_>, libs: &[PathBuf]) -> Vec<String> {\n     // Use relative paths to the libraries. Binaries can be moved\n     // as long as they maintain the relative relationship to the\n     // crates they depend on.\n-    let rel_rpaths = get_rpaths_relative_to_output(config, libs);\n+    let rpaths = get_rpaths_relative_to_output(config, libs);\n \n-    // And a final backup rpath to the global library location.\n-    let fallback_rpaths = vec![get_install_prefix_rpath(config)];\n-\n-    fn log_rpaths(desc: &str, rpaths: &[String]) {\n-        debug!(\"{} rpaths:\", desc);\n-        for rpath in rpaths {\n-            debug!(\"    {}\", *rpath);\n-        }\n+    debug!(\"rpaths:\");\n+    for rpath in &rpaths {\n+        debug!(\"    {}\", rpath);\n     }\n \n-    log_rpaths(\"relative\", &rel_rpaths);\n-    log_rpaths(\"fallback\", &fallback_rpaths);\n-\n-    let mut rpaths = rel_rpaths;\n-    rpaths.extend_from_slice(&fallback_rpaths);\n-\n     // Remove duplicates\n     minimize_rpaths(&rpaths)\n }\n@@ -113,13 +101,6 @@ fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> {\n     diff_paths(path, base)\n }\n \n-fn get_install_prefix_rpath(config: &mut RPathConfig<'_>) -> String {\n-    let path = (config.get_install_prefix_lib_path)();\n-    let path = env::current_dir().unwrap().join(&path);\n-    // FIXME (#9639): This needs to handle non-utf8 paths\n-    path.to_str().expect(\"non-utf8 component in rpath\").to_owned()\n-}\n-\n fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n     let mut set = FxHashSet::default();\n     let mut minimized = Vec::new();"}, {"sha": "24c362db12275b103947ad2cbfcdaaecf4f9faae", "filename": "compiler/rustc_codegen_ssa/src/back/rpath/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath%2Ftests.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -40,15 +40,13 @@ fn test_rpath_relative() {\n             is_like_osx: true,\n             linker_is_gnu: false,\n             out_filename: PathBuf::from(\"bin/rustc\"),\n-            get_install_prefix_lib_path: &mut || panic!(),\n         };\n         let res = get_rpath_relative_to_output(config, Path::new(\"lib/libstd.so\"));\n         assert_eq!(res, \"@loader_path/../lib\");\n     } else {\n         let config = &mut RPathConfig {\n             used_crates: &[],\n             out_filename: PathBuf::from(\"bin/rustc\"),\n-            get_install_prefix_lib_path: &mut || panic!(),\n             has_rpath: true,\n             is_like_osx: false,\n             linker_is_gnu: true,"}, {"sha": "28a44b09de2b112ce0e8a366ca541b3ef51329d6", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -367,7 +367,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         for &i in &inverse_memory_index {\n             let field = fields[i as usize];\n             if !sized {\n-                bug!(\"univariant: field #{} of `{}` comes after unsized field\", offsets.len(), ty);\n+                self.tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    &format!(\n+                        \"univariant: field #{} of `{}` comes after unsized field\",\n+                        offsets.len(),\n+                        ty\n+                    ),\n+                );\n             }\n \n             if field.is_unsized() {"}, {"sha": "40b1a8a2da9fa80b45ebbb1cd41764564ed9a32d", "filename": "compiler/rustc_mir/src/transform/remove_zsts.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -16,32 +16,29 @@ impl<'tcx> MirPass<'tcx> for RemoveZsts {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for block in basic_blocks.iter_mut() {\n             for statement in block.statements.iter_mut() {\n-                match statement.kind {\n-                    StatementKind::Assign(box (place, _)) => {\n-                        let place_ty = place.ty(local_decls, tcx).ty;\n-                        if !maybe_zst(place_ty) {\n-                            continue;\n-                        }\n-                        let layout = match tcx.layout_of(param_env.and(place_ty)) {\n-                            Ok(layout) => layout,\n-                            Err(_) => continue,\n-                        };\n-                        if !layout.is_zst() {\n-                            continue;\n-                        }\n-                        if involves_a_union(place, local_decls, tcx) {\n-                            continue;\n-                        }\n-                        if tcx.consider_optimizing(|| {\n-                            format!(\n-                                \"RemoveZsts - Place: {:?} SourceInfo: {:?}\",\n-                                place, statement.source_info\n-                            )\n-                        }) {\n-                            statement.make_nop();\n-                        }\n+                if let StatementKind::Assign(box (place, _)) = statement.kind {\n+                    let place_ty = place.ty(local_decls, tcx).ty;\n+                    if !maybe_zst(place_ty) {\n+                        continue;\n+                    }\n+                    let layout = match tcx.layout_of(param_env.and(place_ty)) {\n+                        Ok(layout) => layout,\n+                        Err(_) => continue,\n+                    };\n+                    if !layout.is_zst() {\n+                        continue;\n+                    }\n+                    if involves_a_union(place, local_decls, tcx) {\n+                        continue;\n+                    }\n+                    if tcx.consider_optimizing(|| {\n+                        format!(\n+                            \"RemoveZsts - Place: {:?} SourceInfo: {:?}\",\n+                            place, statement.source_info\n+                        )\n+                    }) {\n+                        statement.make_nop();\n                     }\n-                    _ => {}\n                 }\n             }\n         }"}, {"sha": "8e71ded3d1de6a7dfbbc006d4d7e8525df3d4866", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -753,11 +753,7 @@ impl FieldsShape {\n         match *self {\n             FieldsShape::Primitive => 0,\n             FieldsShape::Union(count) => count.get(),\n-            FieldsShape::Array { count, .. } => {\n-                let usize_count = count as usize;\n-                assert_eq!(usize_count as u64, count);\n-                usize_count\n-            }\n+            FieldsShape::Array { count, .. } => count.try_into().unwrap(),\n             FieldsShape::Arbitrary { ref offsets, .. } => offsets.len(),\n         }\n     }\n@@ -791,11 +787,7 @@ impl FieldsShape {\n                 unreachable!(\"FieldsShape::memory_index: `Primitive`s have no fields\")\n             }\n             FieldsShape::Union(_) | FieldsShape::Array { .. } => i,\n-            FieldsShape::Arbitrary { ref memory_index, .. } => {\n-                let r = memory_index[i];\n-                assert_eq!(r as usize as u32, r);\n-                r as usize\n-            }\n+            FieldsShape::Arbitrary { ref memory_index, .. } => memory_index[i].try_into().unwrap(),\n         }\n     }\n "}, {"sha": "7c7f162b82c04b43c586df3849d552d32471764a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -648,18 +648,20 @@ def maybe_download_ci_toolchain(self):\n         rev_parse = [\"git\", \"rev-parse\", \"--show-toplevel\"]\n         top_level = subprocess.check_output(rev_parse, universal_newlines=True).strip()\n         compiler = \"{}/compiler/\".format(top_level)\n+        library = \"{}/library/\".format(top_level)\n \n         # Look for a version to compare to based on the current commit.\n         # Only commits merged by bors will have CI artifacts.\n         merge_base = [\"git\", \"log\", \"--author=bors\", \"--pretty=%H\", \"-n1\"]\n         commit = subprocess.check_output(merge_base, universal_newlines=True).strip()\n \n-        # Warn if there were changes to the compiler since the ancestor commit.\n-        status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler])\n+        # Warn if there were changes to the compiler or standard library since the ancestor commit.\n+        status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler, library])\n         if status != 0:\n             if download_rustc == \"if-unchanged\":\n                 return None\n-            print(\"warning: `download-rustc` is enabled, but there are changes to compiler/\")\n+            print(\"warning: `download-rustc` is enabled, but there are changes to \\\n+                   compiler/ or library/\")\n \n         if self.verbose:\n             print(\"using downloaded stage1 artifacts from CI (commit {})\".format(commit))"}, {"sha": "ed311e273b19c9ee91b3d87bfef0a73abf2248eb", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -636,8 +636,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     cargo\n         .env(\"CFG_RELEASE\", builder.rust_release())\n         .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n-        .env(\"CFG_VERSION\", builder.rust_version())\n-        .env(\"CFG_PREFIX\", builder.config.prefix.clone().unwrap_or_default());\n+        .env(\"CFG_VERSION\", builder.rust_version());\n \n     let libdir_relative = builder.config.libdir_relative().unwrap_or_else(|| Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);"}, {"sha": "dd025c9b443f882c14731d663726798160dfbe37", "filename": "src/test/ui/layout/issue-84108.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/src%2Ftest%2Fui%2Flayout%2Fissue-84108.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/src%2Ftest%2Fui%2Flayout%2Fissue-84108.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-84108.rs?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -0,0 +1,14 @@\n+// See issue #84108 -- this is a test to ensure we do not ICE\n+// on this invalid code.\n+\n+#![crate_type = \"lib\"]\n+\n+static FOO: (dyn AsRef<OsStr>, u8) = (\"hello\", 42);\n+//~^ ERROR cannot find type `OsStr` in this scope\n+\n+const BAR: (&Path, [u8], usize) = (\"hello\", [], 42);\n+//~^ ERROR cannot find type `Path` in this scope\n+//~| ERROR the size for values of type `[u8]` cannot be known at compilation time\n+\n+static BAZ: ([u8], usize) = ([], 0);\n+//~^ ERROR the size for values of type `[u8]` cannot be known at compilation time"}, {"sha": "36be6424110091689fb354df985c847834ec631f", "filename": "src/test/ui/layout/issue-84108.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/022720bfccd46400e69def42f4647fe4059ad951/src%2Ftest%2Fui%2Flayout%2Fissue-84108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022720bfccd46400e69def42f4647fe4059ad951/src%2Ftest%2Fui%2Flayout%2Fissue-84108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-84108.stderr?ref=022720bfccd46400e69def42f4647fe4059ad951", "patch": "@@ -0,0 +1,44 @@\n+error[E0412]: cannot find type `OsStr` in this scope\n+  --> $DIR/issue-84108.rs:6:24\n+   |\n+LL | static FOO: (dyn AsRef<OsStr>, u8) = (\"hello\", 42);\n+   |                        ^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::ffi::OsStr;\n+   |\n+\n+error[E0412]: cannot find type `Path` in this scope\n+  --> $DIR/issue-84108.rs:9:14\n+   |\n+LL | const BAR: (&Path, [u8], usize) = (\"hello\", [], 42);\n+   |              ^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::path::Path;\n+   |\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/issue-84108.rs:9:12\n+   |\n+LL | const BAR: (&Path, [u8], usize) = (\"hello\", [], 42);\n+   |            ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: only the last element of a tuple may have a dynamically sized type\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/issue-84108.rs:13:13\n+   |\n+LL | static BAZ: ([u8], usize) = ([], 0);\n+   |             ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: only the last element of a tuple may have a dynamically sized type\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0277, E0412.\n+For more information about an error, try `rustc --explain E0277`."}]}