{"sha": "733383446fc229a35d4432d14c295c5a01e5a87f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMzM4MzQ0NmZjMjI5YTM1ZDQ0MzJkMTRjMjk1YzVhMDFlNWE4N2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T14:44:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T14:44:50Z"}, "message": "move submodule computationt to module_tree", "tree": {"sha": "bffd84981df9cca1143807796dc6772ddcfe8e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bffd84981df9cca1143807796dc6772ddcfe8e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/733383446fc229a35d4432d14c295c5a01e5a87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/733383446fc229a35d4432d14c295c5a01e5a87f", "html_url": "https://github.com/rust-lang/rust/commit/733383446fc229a35d4432d14c295c5a01e5a87f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/733383446fc229a35d4432d14c295c5a01e5a87f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b2994b99394562b5e515c953a3a83c5977da76", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b2994b99394562b5e515c953a3a83c5977da76", "html_url": "https://github.com/rust-lang/rust/commit/17b2994b99394562b5e515c953a3a83c5977da76"}], "stats": {"total": 92, "additions": 39, "deletions": 53}, "files": [{"sha": "157b0c61688723f4a2b0c7b4121cea07c5fe644f", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=733383446fc229a35d4432d14c295c5a01e5a87f", "patch": "@@ -1,2 +1,2 @@\n mod krate; // `crate` is invalid ident :(\n-pub(crate) mod module;\n+mod module;"}, {"sha": "e4249de141e4180f676068e48b587d9c4aa7005a", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=733383446fc229a35d4432d14c295c5a01e5a87f", "patch": "@@ -73,7 +73,7 @@ pub trait HirDatabase: SyntaxDatabase\n \n     fn submodules(source: ModuleSource) -> Cancelable<Arc<Vec<crate::module_tree::Submodule>>> {\n         type SubmodulesQuery;\n-        use fn query_definitions::submodules;\n+        use fn crate::module_tree::Submodule::submodules_query;\n     }\n \n     fn input_module_items(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<InputModuleItems>> {"}, {"sha": "b7912ba5edb348172520a95da26bcffc63a18621", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=733383446fc229a35d4432d14c295c5a01e5a87f", "patch": "@@ -20,6 +20,40 @@ pub enum Submodule {\n }\n \n impl Submodule {\n+    pub(crate) fn submodules_query(\n+        db: &impl HirDatabase,\n+        source: ModuleSource,\n+    ) -> Cancelable<Arc<Vec<Submodule>>> {\n+        db.check_canceled()?;\n+        let file_id = source.file_id();\n+        let submodules = match source.resolve(db) {\n+            ModuleSourceNode::SourceFile(it) => collect_submodules(db, file_id, it.borrowed()),\n+            ModuleSourceNode::Module(it) => it\n+                .borrowed()\n+                .item_list()\n+                .map(|it| collect_submodules(db, file_id, it))\n+                .unwrap_or_else(Vec::new),\n+        };\n+        return Ok(Arc::new(submodules));\n+\n+        fn collect_submodules<'a>(\n+            db: &impl HirDatabase,\n+            file_id: HirFileId,\n+            root: impl ast::ModuleItemOwner<'a>,\n+        ) -> Vec<Submodule> {\n+            modules(root)\n+                .map(|(name, m)| {\n+                    if m.has_semi() {\n+                        Submodule::Declaration(name)\n+                    } else {\n+                        let src = ModuleSource::new_inline(db, file_id, m);\n+                        Submodule::Definition(name, src)\n+                    }\n+                })\n+                .collect()\n+        }\n+    }\n+\n     fn name(&self) -> &Name {\n         match self {\n             Submodule::Declaration(name) => name,"}, {"sha": "f4b380022ebc0b9d6fa9f1c32adcd9ddafe0cef3", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 3, "deletions": 51, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733383446fc229a35d4432d14c295c5a01e5a87f/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=733383446fc229a35d4432d14c295c5a01e5a87f", "patch": "@@ -6,16 +6,16 @@ use std::{\n use rustc_hash::FxHashMap;\n use ra_syntax::{\n     AstNode, SyntaxNode,\n-    ast::{self, NameOwner, ModuleItemOwner}\n+    ast::{self, ModuleItemOwner}\n };\n use ra_db::{SourceRootId, Cancelable,};\n \n use crate::{\n-    SourceFileItems, SourceItemId, DefKind, DefId, Name, AsName, HirFileId,\n+    SourceFileItems, SourceItemId, DefKind, DefId, HirFileId,\n     MacroCallLoc,\n     db::HirDatabase,\n     function::FnScopes,\n-    module_tree::{ModuleId, Submodule, ModuleSource, ModuleSourceNode},\n+    module_tree::{ModuleId, ModuleSourceNode},\n     nameres::{InputModuleItems, ItemMap, Resolver},\n     adt::{StructData, EnumData},\n };\n@@ -58,54 +58,6 @@ pub(super) fn file_item(db: &impl HirDatabase, source_item_id: SourceItemId) ->\n     }\n }\n \n-pub(crate) fn submodules(\n-    db: &impl HirDatabase,\n-    source: ModuleSource,\n-) -> Cancelable<Arc<Vec<Submodule>>> {\n-    db.check_canceled()?;\n-    let file_id = source.file_id();\n-    let submodules = match source.resolve(db) {\n-        ModuleSourceNode::SourceFile(it) => collect_submodules(db, file_id, it.borrowed()),\n-        ModuleSourceNode::Module(it) => it\n-            .borrowed()\n-            .item_list()\n-            .map(|it| collect_submodules(db, file_id, it))\n-            .unwrap_or_else(Vec::new),\n-    };\n-    return Ok(Arc::new(submodules));\n-\n-    fn collect_submodules<'a>(\n-        db: &impl HirDatabase,\n-        file_id: HirFileId,\n-        root: impl ast::ModuleItemOwner<'a>,\n-    ) -> Vec<Submodule> {\n-        modules(root)\n-            .map(|(name, m)| {\n-                if m.has_semi() {\n-                    Submodule::Declaration(name)\n-                } else {\n-                    let src = ModuleSource::new_inline(db, file_id, m);\n-                    Submodule::Definition(name, src)\n-                }\n-            })\n-            .collect()\n-    }\n-}\n-\n-pub(crate) fn modules<'a>(\n-    root: impl ast::ModuleItemOwner<'a>,\n-) -> impl Iterator<Item = (Name, ast::Module<'a>)> {\n-    root.items()\n-        .filter_map(|item| match item {\n-            ast::ModuleItem::Module(m) => Some(m),\n-            _ => None,\n-        })\n-        .filter_map(|module| {\n-            let name = module.name()?.as_name();\n-            Some((name, module))\n-        })\n-}\n-\n pub(super) fn input_module_items(\n     db: &impl HirDatabase,\n     source_root_id: SourceRootId,"}]}