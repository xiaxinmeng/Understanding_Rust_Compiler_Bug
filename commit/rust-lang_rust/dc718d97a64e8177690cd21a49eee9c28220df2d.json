{"sha": "dc718d97a64e8177690cd21a49eee9c28220df2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNzE4ZDk3YTY0ZTgxNzc2OTBjZDIxYTQ5ZWVlOWMyODIyMGRmMmQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-06T22:06:24Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-19T17:31:12Z"}, "message": "Adding a lock/condition variable to libcore.", "tree": {"sha": "b0ecdb9460a45534251629290d3e907df3783f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ecdb9460a45534251629290d3e907df3783f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc718d97a64e8177690cd21a49eee9c28220df2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc718d97a64e8177690cd21a49eee9c28220df2d", "html_url": "https://github.com/rust-lang/rust/commit/dc718d97a64e8177690cd21a49eee9c28220df2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc718d97a64e8177690cd21a49eee9c28220df2d/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee1480fd19a4a98e3c2ce6076f4dc6eff63a620", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee1480fd19a4a98e3c2ce6076f4dc6eff63a620", "html_url": "https://github.com/rust-lang/rust/commit/9ee1480fd19a4a98e3c2ce6076f4dc6eff63a620"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "afd5bc530ab3bc44169ad96ef7a47105aa8c32cc", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc718d97a64e8177690cd21a49eee9c28220df2d/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/dc718d97a64e8177690cd21a49eee9c28220df2d/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=dc718d97a64e8177690cd21a49eee9c28220df2d", "patch": "@@ -71,6 +71,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_cc.cpp \\\n               rt/rust_debug.cpp \\\n               rt/rust_box_annihilator.cpp \\\n+              rt/rust_cond_lock.cpp \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\"}, {"sha": "90ea10601ae7cc267e1408408d520c8165bb7339", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=dc718d97a64e8177690cd21a49eee9c28220df2d", "patch": "@@ -7,6 +7,7 @@ export min_align_of;\n export pref_align_of;\n export refcount;\n export log_str;\n+export lock_and_signal, condition, methods;\n \n enum type_desc = {\n     first_param: **libc::c_int,\n@@ -15,11 +16,20 @@ enum type_desc = {\n     // Remaining fields not listed\n };\n \n+type rust_cond_lock = *libc::c_void;\n+\n #[abi = \"cdecl\"]\n native mod rustrt {\n     pure fn refcount(t: *()) -> libc::intptr_t;\n     fn unsupervise();\n     pure fn shape_log_str(t: *sys::type_desc, data: *()) -> str;\n+\n+    fn rust_create_cond_lock() -> rust_cond_lock;\n+    fn rust_destroy_cond_lock(lock: rust_cond_lock);\n+    fn rust_lock_cond_lock(lock: rust_cond_lock);\n+    fn rust_unlock_cond_lock(lock: rust_cond_lock);\n+    fn rust_wait_cond_lock(lock: rust_cond_lock);\n+    fn rust_signal_cond_lock(lock: rust_cond_lock) -> bool;\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -74,8 +84,50 @@ pure fn log_str<T>(t: T) -> str {\n     }\n }\n \n+resource lock_and_signal(lock: rust_cond_lock) {\n+    rustrt::rust_destroy_cond_lock(lock);\n+}\n+\n+enum condition {\n+    condition_(rust_cond_lock)\n+}\n+\n+resource unlock(lock: rust_cond_lock) {\n+    rustrt::rust_unlock_cond_lock(lock);\n+}\n+\n+fn create_lock() -> lock_and_signal {\n+    lock_and_signal(rustrt::rust_create_cond_lock())\n+}\n+\n+impl methods for lock_and_signal {\n+    fn lock<T>(f: fn() -> T) -> T {\n+        rustrt::rust_lock_cond_lock(*self);\n+        let _r = unlock(*self);\n+        f()\n+    }\n+\n+    fn lock_cond<T>(f: fn(condition) -> T) -> T {\n+        rustrt::rust_lock_cond_lock(*self);\n+        let _r = unlock(*self);\n+        f(condition_(*self))\n+    }\n+}\n+\n+impl methods for condition {\n+    fn wait() {\n+        rustrt::rust_wait_cond_lock(*self);\n+    }\n+\n+    fn signal() -> bool {\n+        rustrt::rust_signal_cond_lock(*self)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n+    use std;\n+    import std::arc;\n \n     #[test]\n     fn size_of_basic() {\n@@ -121,6 +173,26 @@ mod tests {\n         assert pref_align_of::<uint>() == 8u;\n         assert pref_align_of::<*uint>() == 8u;\n     }\n+\n+    #[test]\n+    fn condition_variable() {\n+        let lock = arc::arc(create_lock());\n+        let lock2 = arc::clone(&lock);\n+\n+        task::spawn {|move lock2|\n+            let lock = arc::get(&lock2);\n+            (*lock).lock_cond {|c|\n+                c.wait();\n+            }\n+        }\n+\n+        let mut signaled = false;\n+        while !signaled {\n+            (*arc::get(&lock)).lock_cond {|c|\n+                signaled = c.signal()\n+            }\n+        }\n+    }\n }\n \n // Local Variables:"}, {"sha": "ece6d97bb4983d0de7b3a3663040250c72fd8980", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=dc718d97a64e8177690cd21a49eee9c28220df2d", "patch": "@@ -7,6 +7,7 @@\n #include \"sync/timer.h\"\n #include \"rust_abi.h\"\n #include \"rust_port.h\"\n+#include \"rust_cond_lock.h\"\n \n #include <time.h>\n \n@@ -861,6 +862,61 @@ rust_task_allow_kill() {\n     task->allow_kill();\n }\n \n+extern \"C\" rust_cond_lock*\n+rust_create_cond_lock() {\n+    return new rust_cond_lock();\n+}\n+\n+extern \"C\" void\n+rust_destroy_cond_lock(rust_cond_lock *lock) {\n+    delete lock;\n+}\n+\n+extern \"C\" void\n+rust_lock_cond_lock(rust_cond_lock *lock) {\n+    lock->lock.lock();\n+}\n+\n+extern \"C\" void\n+rust_unlock_cond_lock(rust_cond_lock *lock) {\n+    lock->lock.unlock();\n+}\n+\n+// The next two functions do not use the built in condition variable features\n+// because the Rust schedule is not aware of them, and they can block the\n+// scheduler thread.\n+\n+extern \"C\" void\n+rust_wait_cond_lock(rust_cond_lock *lock) {\n+    rust_task *task = rust_get_current_task();\n+#ifdef DEBUG_LOCKS\n+    assert(lock->lock.lock_held_by_current_thread());\n+#endif\n+    assert(NULL == lock->waiting);\n+    lock->waiting = task;\n+    task->block(lock, \"waiting for signal\");\n+    lock->lock.unlock();\n+    task->yield(false);\n+    lock->lock.lock();\n+}\n+\n+extern \"C\" bool\n+rust_signal_cond_lock(rust_cond_lock *lock) {\n+#ifdef DEBUG_LOCKS\n+    assert(lock->lock.lock_held_by_current_thread());\n+#endif\n+    if(NULL == lock->waiting) {\n+        return false;\n+    }\n+    else {\n+        lock->waiting->wakeup(lock);\n+        lock->waiting = NULL;\n+        return true;\n+    }\n+}\n+\n+\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "cdeccfdc26ca59e1a316a6f2f4e7e046a4c625c2", "filename": "src/rt/rust_cond_lock.cpp", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frust_cond_lock.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frust_cond_lock.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cond_lock.cpp?ref=dc718d97a64e8177690cd21a49eee9c28220df2d", "patch": "@@ -0,0 +1,6 @@\n+#include \"rust_cond_lock.h\"\n+\n+rust_cond_lock::rust_cond_lock()\n+    : waiting(NULL)\n+{\n+}"}, {"sha": "0adafd59678ec349cb4c3c851097d5c22822f4be", "filename": "src/rt/rust_cond_lock.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frust_cond_lock.h", "raw_url": "https://github.com/rust-lang/rust/raw/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frust_cond_lock.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cond_lock.h?ref=dc718d97a64e8177690cd21a49eee9c28220df2d", "patch": "@@ -0,0 +1,15 @@\n+// -*- c++ -*-\n+// A lock and condition variable pair that is useable from Rust.\n+\n+#pragma once\n+\n+#include \"sync/lock_and_signal.h\"\n+#include \"rust_globals.h\"\n+#include \"rust_task.h\"\n+\n+struct rust_cond_lock : public rust_cond {\n+    rust_cond_lock();\n+\n+    lock_and_signal lock;\n+    rust_task *waiting;\n+};"}, {"sha": "5cf6ee61773d02dcf837e06f13b32f8ca59e7d10", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/dc718d97a64e8177690cd21a49eee9c28220df2d/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=dc718d97a64e8177690cd21a49eee9c28220df2d", "patch": "@@ -163,3 +163,9 @@ rust_port_drop\n rust_port_task\n rust_task_inhibit_kill\n rust_task_allow_kill\n+rust_create_cond_lock\n+rust_destroy_cond_lock\n+rust_lock_cond_lock\n+rust_unlock_cond_lock\n+rust_wait_cond_lock\n+rust_signal_cond_lock"}]}