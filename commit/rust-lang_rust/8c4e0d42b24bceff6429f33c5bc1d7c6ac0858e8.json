{"sha": "8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8", "node_id": "C_kwDOAAsO6NoAKDhjNGUwZDQyYjI0YmNlZmY2NDI5ZjMzYzViYzFkN2M2YWMwODU4ZTg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-28T12:38:26Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-28T12:58:06Z"}, "message": "add examples to `vec::Drain{,Filter}::keep_rest` docs", "tree": {"sha": "4518adf8b2eadd60aaf5ad754fc08a35f4f5542f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4518adf8b2eadd60aaf5ad754fc08a35f4f5542f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8", "html_url": "https://github.com/rust-lang/rust/commit/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c98a8c46e7b6aa7740448645905bfac024f191", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c98a8c46e7b6aa7740448645905bfac024f191", "html_url": "https://github.com/rust-lang/rust/commit/50c98a8c46e7b6aa7740448645905bfac024f191"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "2a3f7ff6d2a1c9caa9559ada2530ae9b0de78865", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8", "patch": "@@ -67,6 +67,24 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n     }\n \n     /// Keep unyielded elements in the source `Vec`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(drain_keep_rest)]\n+    ///\n+    /// let mut vec = vec!['a', 'b', 'c'];\n+    /// let mut drain = vec.drain(..);\n+    ///\n+    /// assert_eq!(drain.next().unwrap(), 'a');\n+    ///\n+    /// // This call keeps 'b' and 'c' in the vec.\n+    /// drain.keep_rest();\n+    ///\n+    /// // If we wouldn't call `keep_rest()`,\n+    /// // `vec` would be empty.\n+    /// assert_eq!(vec, ['b', 'c']);\n+    /// ```\n     #[unstable(feature = \"drain_keep_rest\", issue = \"none\")]\n     pub fn keep_rest(self) {\n         // At this moment layout looks like this:"}, {"sha": "3130c1f1cca3112de4b873befbbe0041d5abb561", "filename": "library/alloc/src/vec/drain_filter.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs?ref=8c4e0d42b24bceff6429f33c5bc1d7c6ac0858e8", "patch": "@@ -57,6 +57,25 @@ where\n     }\n \n     /// Keep unyielded elements in the source `Vec`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(drain_filter)]\n+    /// #![feature(drain_keep_rest)]\n+    ///\n+    /// let mut vec = vec!['a', 'b', 'c'];\n+    /// let mut drain = vec.drain_filter(|_| true);\n+    ///\n+    /// assert_eq!(drain.next().unwrap(), 'a');\n+    ///\n+    /// // This call keeps 'b' and 'c' in the vec.\n+    /// drain.keep_rest();\n+    ///\n+    /// // If we wouldn't call `keep_rest()`,\n+    /// // `vec` would be empty.\n+    /// assert_eq!(vec, ['b', 'c']);\n+    /// ```\n     #[unstable(feature = \"drain_keep_rest\", issue = \"none\")]\n     pub fn keep_rest(self) {\n         // At this moment layout looks like this:"}]}