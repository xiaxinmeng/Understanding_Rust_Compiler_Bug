{"sha": "0d4d8b9b78daff70b2b251fb5f71954d69a3b204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNGQ4YjliNzhkYWZmNzBiMmIyNTFmYjVmNzE5NTRkNjlhM2IyMDQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-09T16:00:41Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:47Z"}, "message": "librustc_trans: fix fallout", "tree": {"sha": "11957b72bdee72740ecde6ccd3be35242f21636e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11957b72bdee72740ecde6ccd3be35242f21636e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d4d8b9b78daff70b2b251fb5f71954d69a3b204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4d8b9b78daff70b2b251fb5f71954d69a3b204", "html_url": "https://github.com/rust-lang/rust/commit/0d4d8b9b78daff70b2b251fb5f71954d69a3b204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d4d8b9b78daff70b2b251fb5f71954d69a3b204/comments", "author": null, "committer": null, "parents": [{"sha": "46272c18a2c69d447dc80b2cf89ea8a2e247b791", "url": "https://api.github.com/repos/rust-lang/rust/commits/46272c18a2c69d447dc80b2cf89ea8a2e247b791", "html_url": "https://github.com/rust-lang/rust/commit/46272c18a2c69d447dc80b2cf89ea8a2e247b791"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "fb4d6de5f282c20728bca4e3925a175386e2fa13", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d4d8b9b78daff70b2b251fb5f71954d69a3b204/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4d8b9b78daff70b2b251fb5f71954d69a3b204/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=0d4d8b9b78daff70b2b251fb5f71954d69a3b204", "patch": "@@ -81,8 +81,9 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n                     break;\n                 },\n             };\n-            let bc_extractor = if is_versioned_bytecode_format(bc_encoded) {\n-                |_| {\n+\n+            let bc_decoded = if is_versioned_bytecode_format(bc_encoded) {\n+                time(sess.time_passes(), format!(\"decode {}.{}.bc\", file, i).as_slice(), (), |_| {\n                     // Read the version\n                     let version = extract_bytecode_format_version(bc_encoded);\n \n@@ -104,26 +105,21 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n                         sess.fatal(format!(\"Unsupported bytecode format version {}\",\n                                            version).as_slice())\n                     }\n-                }\n+                })\n             } else {\n+                time(sess.time_passes(), format!(\"decode {}.{}.bc\", file, i).as_slice(), (), |_| {\n                 // the object must be in the old, pre-versioning format, so simply\n                 // inflate everything and let LLVM decide if it can make sense of it\n-                |_| {\n                     match flate::inflate_bytes(bc_encoded) {\n                         Some(bc) => bc,\n                         None => {\n                             sess.fatal(format!(\"failed to decompress bc of `{}`\",\n                                                name).as_slice())\n                         }\n                     }\n-                }\n+                })\n             };\n \n-            let bc_decoded = time(sess.time_passes(),\n-                                  format!(\"decode {}.{}.bc\", file, i).as_slice(),\n-                                  (),\n-                                  bc_extractor);\n-\n             let ptr = bc_decoded.as_slice().as_ptr();\n             debug!(\"linking {}, part {}\", name, i);\n             time(sess.time_passes(),"}]}