{"sha": "6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhN2ZkOGNmYTU5NTA2ZDcwYzQzYjkzMjU2YzdlZWViNzkxMzNjYTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-21T04:52:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-22T15:48:20Z"}, "message": "rustdoc: Fix fallout of removing get()", "tree": {"sha": "36fafc7c803076130a2aeb2403f47e98c1a8b233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36fafc7c803076130a2aeb2403f47e98c1a8b233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "html_url": "https://github.com/rust-lang/rust/commit/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dbb909bf7cf557e46748ddcf3cdea916f2734c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbb909bf7cf557e46748ddcf3cdea916f2734c9", "html_url": "https://github.com/rust-lang/rust/commit/0dbb909bf7cf557e46748ddcf3cdea916f2734c9"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "05f6db8cc45040a87979f603534b045ac6f4877c", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "patch": "@@ -1229,16 +1229,15 @@ fn resolve_type(path: Path, tpbs: Option<Vec<TyParamBound> >,\n         core::NotTyped(_) => return Bool\n     };\n     debug!(\"searching for {:?} in defmap\", id);\n-    let def_map = tycx.def_map.borrow();\n-    let d = match def_map.get().find(&id) {\n-        Some(k) => k,\n+    let d = match tycx.def_map.borrow().find(&id) {\n+        Some(&k) => k,\n         None => {\n             debug!(\"could not find {:?} in defmap (`{}`)\", id, tycx.map.node_to_str(id));\n             fail!(\"Unexpected failure: unresolved id not in defmap (this is a bug!)\")\n         }\n     };\n \n-    let (def_id, kind) = match *d {\n+    let (def_id, kind) = match d {\n         ast::DefFn(i, _) => (i, TypeFunction),\n         ast::DefSelfTy(i) => return Self(i),\n         ast::DefTy(i) => (i, TypeEnum),\n@@ -1285,8 +1284,7 @@ fn resolve_def(id: ast::NodeId) -> Option<ast::DefId> {\n     let cx = local_data::get(super::ctxtkey, |x| *x.unwrap());\n     match cx.maybe_typed {\n         core::Typed(ref tcx) => {\n-            let def_map = tcx.def_map.borrow();\n-            def_map.get().find(&id).map(|&d| ast_util::def_id_of_def(d))\n+            tcx.def_map.borrow().find(&id).map(|&d| ast_util::def_id_of_def(d))\n         }\n         core::NotTyped(_) => None\n     }"}, {"sha": "8be3535b3ecdac7c9fa034bcfd49a2c66a2a4bd0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a7fd8cfa59506d70c43b93256c7eeeb79133ca5/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6a7fd8cfa59506d70c43b93256c7eeeb79133ca5", "patch": "@@ -186,7 +186,7 @@ impl<'a> RustdocVisitor<'a> {\n             core::Typed(ref tcx) => tcx,\n             core::NotTyped(_) => return false\n         };\n-        let def = ast_util::def_id_of_def(*tcx.def_map.borrow().get().get(&id));\n+        let def = ast_util::def_id_of_def(*tcx.def_map.borrow().get(&id));\n         if !ast_util::is_local(def) { return false }\n         let analysis = match self.analysis {\n             Some(analysis) => analysis, None => return false"}]}