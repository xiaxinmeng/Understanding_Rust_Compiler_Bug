{"sha": "28f85c6ffad77554150e7cab4ccac38b26621bdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Zjg1YzZmZmFkNzc1NTQxNTBlN2NhYjRjY2FjMzhiMjY2MjFiZGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-09T14:41:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-09T14:41:54Z"}, "message": "bring back extra check for int_min%-1", "tree": {"sha": "832043532309caf3ae721c2b6cd129de8378281a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/832043532309caf3ae721c2b6cd129de8378281a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f85c6ffad77554150e7cab4ccac38b26621bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f85c6ffad77554150e7cab4ccac38b26621bdb", "html_url": "https://github.com/rust-lang/rust/commit/28f85c6ffad77554150e7cab4ccac38b26621bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f85c6ffad77554150e7cab4ccac38b26621bdb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "202d401c2504f17133c50505b82fe4278ab2c842", "url": "https://api.github.com/repos/rust-lang/rust/commits/202d401c2504f17133c50505b82fe4278ab2c842", "html_url": "https://github.com/rust-lang/rust/commit/202d401c2504f17133c50505b82fe4278ab2c842"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "abe437bd8d7c66f62ebac7d9b7b6df052f3b9787", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28f85c6ffad77554150e7cab4ccac38b26621bdb/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f85c6ffad77554150e7cab4ccac38b26621bdb/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=28f85c6ffad77554150e7cab4ccac38b26621bdb", "patch": "@@ -195,6 +195,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             if let Some(op) = op {\n                 let l128 = self.sign_extend(l, left_layout) as i128;\n                 let r = self.sign_extend(r, right_layout) as i128;\n+                // We need a special check for overflowing remainder:\n+                // \"int_min % -1\" overflows and returns 0, but after casting things to a larger int\n+                // type it does *not* overflow nor give an unrepresentable result!\n+                match bin_op {\n+                    Rem => {\n+                        if r == -1 && l == (1 << (size.bits() - 1)) {\n+                            return Ok((Scalar::from_int(0, size), true, left_layout.ty));\n+                        }\n+                    }\n+                    _ => {}\n+                }\n \n                 let (result, oflo) = op(l128, r);\n                 // This may be out-of-bounds for the result type, so we have to truncate ourselves."}]}