{"sha": "aff82e5ee1d587b858e7237511e611bb8cc61cf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjgyZTVlZTFkNTg3Yjg1OGU3MjM3NTExZTYxMWJiOGNjNjFjZjM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-01-28T08:07:56Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-01-28T08:07:56Z"}, "message": "Merge #16\n\n16: Proof-of-concept SyntaxKind as enum r=matklad a=CAD97\n\nThis was the one bit about the original RFC I was most confused about. Why isn't `SyntaxKind` a normal `enum`?\r\n\r\nIf it's to signify that it's non-exhaustive [`#[non_exhaustive]`](https://github.com/rust-lang/rust/issues/44109) should be used. (Or `#[doc(hidden)] __Nonexhaustive` on stable.)\r\n\r\nIf it's so that more variants can be added externally, why? There's no need for that, that I can foresee.\r\n\r\nIf it's to expose the `SyntaxKind` type but not any of its instances, why? This is the only actual benefit I can see of this pseudo-enum style.\r\n\r\nThis diff is meant to be as non-invasive as possible, and as such reexports all symbols as they existed prior to this. It's diffed on top of the assumed-good-to-merge #15 to avoid the conflict between them.\r\n\r\nDiff without #15: <https://github.com/matklad/libsyntax2/pull/16/commits/4244948c6b1a62bd0e1ef276d1f0cc22c36f6f66>\r\nJust `src/syntax_kinds.rs`: <https://github.com/matklad/libsyntax2/pull/16/commits/4244948c6b1a62bd0e1ef276d1f0cc22c36f6f66#diff-8f0d69eb4fe0148851505f787b6fd3bb>", "tree": {"sha": "83d1a4bbaa4be96f76c2d48c00ad479173f61274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d1a4bbaa4be96f76c2d48c00ad479173f61274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff82e5ee1d587b858e7237511e611bb8cc61cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff82e5ee1d587b858e7237511e611bb8cc61cf3", "html_url": "https://github.com/rust-lang/rust/commit/aff82e5ee1d587b858e7237511e611bb8cc61cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff82e5ee1d587b858e7237511e611bb8cc61cf3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "efadcf715862a2d96af0f57d2b53bfa325390779", "url": "https://api.github.com/repos/rust-lang/rust/commits/efadcf715862a2d96af0f57d2b53bfa325390779", "html_url": "https://github.com/rust-lang/rust/commit/efadcf715862a2d96af0f57d2b53bfa325390779"}, {"sha": "4244948c6b1a62bd0e1ef276d1f0cc22c36f6f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/4244948c6b1a62bd0e1ef276d1f0cc22c36f6f66", "html_url": "https://github.com/rust-lang/rust/commit/4244948c6b1a62bd0e1ef276d1f0cc22c36f6f66"}], "stats": {"total": 486, "additions": 243, "deletions": 243}, "files": [{"sha": "4b8a5afecf81ed3445667bbf7eb0ab7bd27118fd", "filename": "src/bin/gen.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fbin%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fbin%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgen.rs?ref=aff82e5ee1d587b858e7237511e611bb8cc61cf3", "patch": "@@ -29,8 +29,10 @@ impl Grammar {\n \n     fn to_syntax_kinds(&self) -> String {\n         let mut acc = String::new();\n-        acc.push_str(\"// Generated from grammar.ron\\n\");\n-        acc.push_str(\"use tree::{SyntaxKind, SyntaxInfo};\\n\");\n+        acc.push_str(\"#![allow(bad_style, missing_docs, unreachable_pub)]\\n\");\n+        acc.push_str(\"#![cfg_attr(rustfmt, rustfmt_skip)]\\n\");\n+        acc.push_str(\"//! Generated from grammar.ron\\n\");\n+        acc.push_str(\"use tree::SyntaxInfo;\\n\");\n         acc.push_str(\"\\n\");\n \n         let syntax_kinds: Vec<String> = self.keywords\n@@ -40,41 +42,49 @@ impl Grammar {\n             .chain(self.nodes.iter().cloned())\n             .collect();\n \n-        for (idx, kind) in syntax_kinds.iter().enumerate() {\n-            let sname = scream(kind);\n-            write!(\n-                acc,\n-                \"pub const {}: SyntaxKind = SyntaxKind({});\\n\",\n-                sname, idx\n-            ).unwrap();\n+        // enum SyntaxKind\n+        acc.push_str(\"/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\\n\");\n+        acc.push_str(\"#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\\n\");\n+        acc.push_str(\"#[repr(u32)]\\n\");\n+        acc.push_str(\"pub enum SyntaxKind {\\n\");\n+        for kind in syntax_kinds.iter() {\n+            write!(acc, \"    {},\\n\", scream(kind)).unwrap();\n         }\n         acc.push_str(\"\\n\");\n-        write!(\n-            acc,\n-            \"static INFOS: [SyntaxInfo; {}] = [\\n\",\n-            syntax_kinds.len()\n-        ).unwrap();\n+        acc.push_str(\"    TOMBSTONE = !0 - 1,\\n\");\n+        acc.push_str(\"    EOF = !0,\\n\");\n+        acc.push_str(\"}\\n\");\n+        acc.push_str(\"pub(crate) use self::SyntaxKind::*;\\n\");\n+        acc.push_str(\"\\n\");\n+\n+        // fn info\n+        acc.push_str(\"impl SyntaxKind {\\n\");\n+        acc.push_str(\"    pub(crate) fn info(self) -> &'static SyntaxInfo {\\n\");\n+        acc.push_str(\"        match self {\\n\");\n         for kind in syntax_kinds.iter() {\n             let sname = scream(kind);\n             write!(\n                 acc,\n-                \"    SyntaxInfo {{ name: \\\"{sname}\\\" }},\\n\",\n+                \"            {sname} => &SyntaxInfo {{ name: \\\"{sname}\\\" }},\\n\",\n                 sname = sname\n             ).unwrap();\n         }\n-        acc.push_str(\"];\\n\");\n+        acc.push_str(\"\\n\");\n+        acc.push_str(\"            TOMBSTONE => &SyntaxInfo { name: \\\"TOMBSTONE\\\" },\\n\");\n+        acc.push_str(\"            EOF => &SyntaxInfo { name: \\\"EOF\\\" },\\n\");\n+        acc.push_str(\"        }\\n\");\n+        acc.push_str(\"    }\\n\");\n+        acc.push_str(\"}\\n\");\n         acc.push_str(\"\\n\");\n \n-        acc.push_str(\"pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {\\n\");\n-        acc.push_str(\"    &INFOS[kind.0 as usize]\\n\");\n-        acc.push_str(\"}\\n\\n\");\n+        // fn ident_to_keyword\n         acc.push_str(\"pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\\n\");\n-        acc.push_str(\"   match ident {\\n\");\n+        acc.push_str(\"    match ident {\\n\");\n         for kw in self.keywords.iter() {\n-            write!(acc, \"       {:?} => Some({}),\\n\", kw, kw_token(kw)).unwrap();\n+            write!(acc, \"        {:?} => Some({}),\\n\", kw, kw_token(kw)).unwrap();\n         }\n-        acc.push_str(\"       _ => None,\\n\");\n-        acc.push_str(\"   }\\n\");\n+        acc.push_str(\"        _ => None,\\n\");\n+        acc.push_str(\"    }\\n\");\n         acc.push_str(\"}\\n\");\n         acc\n     }"}, {"sha": "ad333582cf12bcf2fff99a8bffd88471a792eaa0", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=aff82e5ee1d587b858e7237511e611bb8cc61cf3", "patch": "@@ -22,8 +22,6 @@ mod tree;\n mod lexer;\n mod parser;\n \n-#[cfg_attr(rustfmt, rustfmt_skip)]\n-#[allow(missing_docs)]\n pub mod syntax_kinds;\n pub use text::{TextRange, TextUnit};\n pub use tree::{File, FileBuilder, Node, Sink, SyntaxKind, Token};"}, {"sha": "82f8b7f3e77cc62b08b4ba151524d9cd9cbfa6b3", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=aff82e5ee1d587b858e7237511e611bb8cc61cf3", "patch": "@@ -1,6 +1,5 @@\n use super::parser::{Parser, TokenSet};\n use SyntaxKind;\n-use tree::EOF;\n use syntax_kinds::*;\n \n mod items;"}, {"sha": "573e3d73a8ecfaae9391961cd4f9a97c69524721", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=aff82e5ee1d587b858e7237511e611bb8cc61cf3", "patch": "@@ -1,8 +1,7 @@\n use {SyntaxKind, TextUnit, Token};\n use super::Event;\n use super::super::is_insignificant;\n-use syntax_kinds::{ERROR, L_CURLY, R_CURLY};\n-use tree::{EOF, TOMBSTONE};\n+use SyntaxKind::{EOF, ERROR, L_CURLY, R_CURLY, TOMBSTONE};\n \n pub(crate) struct Marker {\n     pos: u32,"}, {"sha": "c5525ff9cdcdd9ac57c9f5704b81c5f26f9db8ba", "filename": "src/parser/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=aff82e5ee1d587b858e7237511e611bb8cc61cf3", "patch": "@@ -1,7 +1,6 @@\n use {File, FileBuilder, Sink, SyntaxKind, Token};\n \n use syntax_kinds::*;\n-use tree::TOMBSTONE;\n \n mod event_parser;\n use self::event_parser::Event;"}, {"sha": "aa19c2adff172837b3c4bbd33afcd602e056c341", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 208, "deletions": 194, "changes": 402, "blob_url": "https://github.com/rust-lang/rust/blob/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=aff82e5ee1d587b858e7237511e611bb8cc61cf3", "patch": "@@ -1,201 +1,215 @@\n-// Generated from grammar.ron\n-use tree::{SyntaxKind, SyntaxInfo};\n+#![allow(bad_style, missing_docs, unreachable_pub)]\n+#![cfg_attr(rustfmt, rustfmt_skip)]\n+//! Generated from grammar.ron\n+use tree::SyntaxInfo;\n \n-pub const USE_KW: SyntaxKind = SyntaxKind(0);\n-pub const FN_KW: SyntaxKind = SyntaxKind(1);\n-pub const STRUCT_KW: SyntaxKind = SyntaxKind(2);\n-pub const ENUM_KW: SyntaxKind = SyntaxKind(3);\n-pub const TRAIT_KW: SyntaxKind = SyntaxKind(4);\n-pub const IMPL_KW: SyntaxKind = SyntaxKind(5);\n-pub const TRUE_KW: SyntaxKind = SyntaxKind(6);\n-pub const FALSE_KW: SyntaxKind = SyntaxKind(7);\n-pub const AS_KW: SyntaxKind = SyntaxKind(8);\n-pub const EXTERN_KW: SyntaxKind = SyntaxKind(9);\n-pub const CRATE_KW: SyntaxKind = SyntaxKind(10);\n-pub const MOD_KW: SyntaxKind = SyntaxKind(11);\n-pub const PUB_KW: SyntaxKind = SyntaxKind(12);\n-pub const SELF_KW: SyntaxKind = SyntaxKind(13);\n-pub const SUPER_KW: SyntaxKind = SyntaxKind(14);\n-pub const IN_KW: SyntaxKind = SyntaxKind(15);\n-pub const WHERE_KW: SyntaxKind = SyntaxKind(16);\n-pub const ERROR: SyntaxKind = SyntaxKind(17);\n-pub const IDENT: SyntaxKind = SyntaxKind(18);\n-pub const UNDERSCORE: SyntaxKind = SyntaxKind(19);\n-pub const WHITESPACE: SyntaxKind = SyntaxKind(20);\n-pub const INT_NUMBER: SyntaxKind = SyntaxKind(21);\n-pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(22);\n-pub const SEMI: SyntaxKind = SyntaxKind(23);\n-pub const COMMA: SyntaxKind = SyntaxKind(24);\n-pub const DOT: SyntaxKind = SyntaxKind(25);\n-pub const DOTDOT: SyntaxKind = SyntaxKind(26);\n-pub const DOTDOTDOT: SyntaxKind = SyntaxKind(27);\n-pub const DOTDOTEQ: SyntaxKind = SyntaxKind(28);\n-pub const L_PAREN: SyntaxKind = SyntaxKind(29);\n-pub const R_PAREN: SyntaxKind = SyntaxKind(30);\n-pub const L_CURLY: SyntaxKind = SyntaxKind(31);\n-pub const R_CURLY: SyntaxKind = SyntaxKind(32);\n-pub const L_BRACK: SyntaxKind = SyntaxKind(33);\n-pub const R_BRACK: SyntaxKind = SyntaxKind(34);\n-pub const L_ANGLE: SyntaxKind = SyntaxKind(35);\n-pub const R_ANGLE: SyntaxKind = SyntaxKind(36);\n-pub const AT: SyntaxKind = SyntaxKind(37);\n-pub const POUND: SyntaxKind = SyntaxKind(38);\n-pub const TILDE: SyntaxKind = SyntaxKind(39);\n-pub const QUESTION: SyntaxKind = SyntaxKind(40);\n-pub const COLON: SyntaxKind = SyntaxKind(41);\n-pub const COLONCOLON: SyntaxKind = SyntaxKind(42);\n-pub const DOLLAR: SyntaxKind = SyntaxKind(43);\n-pub const EQ: SyntaxKind = SyntaxKind(44);\n-pub const EQEQ: SyntaxKind = SyntaxKind(45);\n-pub const FAT_ARROW: SyntaxKind = SyntaxKind(46);\n-pub const NEQ: SyntaxKind = SyntaxKind(47);\n-pub const EXCL: SyntaxKind = SyntaxKind(48);\n-pub const LIFETIME: SyntaxKind = SyntaxKind(49);\n-pub const CHAR: SyntaxKind = SyntaxKind(50);\n-pub const BYTE: SyntaxKind = SyntaxKind(51);\n-pub const STRING: SyntaxKind = SyntaxKind(52);\n-pub const RAW_STRING: SyntaxKind = SyntaxKind(53);\n-pub const BYTE_STRING: SyntaxKind = SyntaxKind(54);\n-pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(55);\n-pub const PLUS: SyntaxKind = SyntaxKind(56);\n-pub const MINUS: SyntaxKind = SyntaxKind(57);\n-pub const STAR: SyntaxKind = SyntaxKind(58);\n-pub const SLASH: SyntaxKind = SyntaxKind(59);\n-pub const CARET: SyntaxKind = SyntaxKind(60);\n-pub const PERCENT: SyntaxKind = SyntaxKind(61);\n-pub const AMPERSAND: SyntaxKind = SyntaxKind(62);\n-pub const PIPE: SyntaxKind = SyntaxKind(63);\n-pub const THIN_ARROW: SyntaxKind = SyntaxKind(64);\n-pub const COMMENT: SyntaxKind = SyntaxKind(65);\n-pub const DOC_COMMENT: SyntaxKind = SyntaxKind(66);\n-pub const SHEBANG: SyntaxKind = SyntaxKind(67);\n-pub const FILE: SyntaxKind = SyntaxKind(68);\n-pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(69);\n-pub const NAMED_FIELD: SyntaxKind = SyntaxKind(70);\n-pub const POS_FIELD: SyntaxKind = SyntaxKind(71);\n-pub const FN_ITEM: SyntaxKind = SyntaxKind(72);\n-pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(73);\n-pub const ATTR: SyntaxKind = SyntaxKind(74);\n-pub const META_ITEM: SyntaxKind = SyntaxKind(75);\n-pub const MOD_ITEM: SyntaxKind = SyntaxKind(76);\n-pub const USE_ITEM: SyntaxKind = SyntaxKind(77);\n-pub const USE_TREE: SyntaxKind = SyntaxKind(78);\n-pub const PATH: SyntaxKind = SyntaxKind(79);\n-pub const PATH_SEGMENT: SyntaxKind = SyntaxKind(80);\n-pub const LITERAL: SyntaxKind = SyntaxKind(81);\n-pub const ALIAS: SyntaxKind = SyntaxKind(82);\n-pub const VISIBILITY: SyntaxKind = SyntaxKind(83);\n+/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[repr(u32)]\n+pub enum SyntaxKind {\n+    USE_KW,\n+    FN_KW,\n+    STRUCT_KW,\n+    ENUM_KW,\n+    TRAIT_KW,\n+    IMPL_KW,\n+    TRUE_KW,\n+    FALSE_KW,\n+    AS_KW,\n+    EXTERN_KW,\n+    CRATE_KW,\n+    MOD_KW,\n+    PUB_KW,\n+    SELF_KW,\n+    SUPER_KW,\n+    IN_KW,\n+    WHERE_KW,\n+    ERROR,\n+    IDENT,\n+    UNDERSCORE,\n+    WHITESPACE,\n+    INT_NUMBER,\n+    FLOAT_NUMBER,\n+    SEMI,\n+    COMMA,\n+    DOT,\n+    DOTDOT,\n+    DOTDOTDOT,\n+    DOTDOTEQ,\n+    L_PAREN,\n+    R_PAREN,\n+    L_CURLY,\n+    R_CURLY,\n+    L_BRACK,\n+    R_BRACK,\n+    L_ANGLE,\n+    R_ANGLE,\n+    AT,\n+    POUND,\n+    TILDE,\n+    QUESTION,\n+    COLON,\n+    COLONCOLON,\n+    DOLLAR,\n+    EQ,\n+    EQEQ,\n+    FAT_ARROW,\n+    NEQ,\n+    EXCL,\n+    LIFETIME,\n+    CHAR,\n+    BYTE,\n+    STRING,\n+    RAW_STRING,\n+    BYTE_STRING,\n+    RAW_BYTE_STRING,\n+    PLUS,\n+    MINUS,\n+    STAR,\n+    SLASH,\n+    CARET,\n+    PERCENT,\n+    AMPERSAND,\n+    PIPE,\n+    THIN_ARROW,\n+    COMMENT,\n+    DOC_COMMENT,\n+    SHEBANG,\n+    FILE,\n+    STRUCT_ITEM,\n+    NAMED_FIELD,\n+    POS_FIELD,\n+    FN_ITEM,\n+    EXTERN_CRATE_ITEM,\n+    ATTR,\n+    META_ITEM,\n+    MOD_ITEM,\n+    USE_ITEM,\n+    USE_TREE,\n+    PATH,\n+    PATH_SEGMENT,\n+    LITERAL,\n+    ALIAS,\n+    VISIBILITY,\n \n-static INFOS: [SyntaxInfo; 84] = [\n-    SyntaxInfo { name: \"USE_KW\" },\n-    SyntaxInfo { name: \"FN_KW\" },\n-    SyntaxInfo { name: \"STRUCT_KW\" },\n-    SyntaxInfo { name: \"ENUM_KW\" },\n-    SyntaxInfo { name: \"TRAIT_KW\" },\n-    SyntaxInfo { name: \"IMPL_KW\" },\n-    SyntaxInfo { name: \"TRUE_KW\" },\n-    SyntaxInfo { name: \"FALSE_KW\" },\n-    SyntaxInfo { name: \"AS_KW\" },\n-    SyntaxInfo { name: \"EXTERN_KW\" },\n-    SyntaxInfo { name: \"CRATE_KW\" },\n-    SyntaxInfo { name: \"MOD_KW\" },\n-    SyntaxInfo { name: \"PUB_KW\" },\n-    SyntaxInfo { name: \"SELF_KW\" },\n-    SyntaxInfo { name: \"SUPER_KW\" },\n-    SyntaxInfo { name: \"IN_KW\" },\n-    SyntaxInfo { name: \"WHERE_KW\" },\n-    SyntaxInfo { name: \"ERROR\" },\n-    SyntaxInfo { name: \"IDENT\" },\n-    SyntaxInfo { name: \"UNDERSCORE\" },\n-    SyntaxInfo { name: \"WHITESPACE\" },\n-    SyntaxInfo { name: \"INT_NUMBER\" },\n-    SyntaxInfo { name: \"FLOAT_NUMBER\" },\n-    SyntaxInfo { name: \"SEMI\" },\n-    SyntaxInfo { name: \"COMMA\" },\n-    SyntaxInfo { name: \"DOT\" },\n-    SyntaxInfo { name: \"DOTDOT\" },\n-    SyntaxInfo { name: \"DOTDOTDOT\" },\n-    SyntaxInfo { name: \"DOTDOTEQ\" },\n-    SyntaxInfo { name: \"L_PAREN\" },\n-    SyntaxInfo { name: \"R_PAREN\" },\n-    SyntaxInfo { name: \"L_CURLY\" },\n-    SyntaxInfo { name: \"R_CURLY\" },\n-    SyntaxInfo { name: \"L_BRACK\" },\n-    SyntaxInfo { name: \"R_BRACK\" },\n-    SyntaxInfo { name: \"L_ANGLE\" },\n-    SyntaxInfo { name: \"R_ANGLE\" },\n-    SyntaxInfo { name: \"AT\" },\n-    SyntaxInfo { name: \"POUND\" },\n-    SyntaxInfo { name: \"TILDE\" },\n-    SyntaxInfo { name: \"QUESTION\" },\n-    SyntaxInfo { name: \"COLON\" },\n-    SyntaxInfo { name: \"COLONCOLON\" },\n-    SyntaxInfo { name: \"DOLLAR\" },\n-    SyntaxInfo { name: \"EQ\" },\n-    SyntaxInfo { name: \"EQEQ\" },\n-    SyntaxInfo { name: \"FAT_ARROW\" },\n-    SyntaxInfo { name: \"NEQ\" },\n-    SyntaxInfo { name: \"EXCL\" },\n-    SyntaxInfo { name: \"LIFETIME\" },\n-    SyntaxInfo { name: \"CHAR\" },\n-    SyntaxInfo { name: \"BYTE\" },\n-    SyntaxInfo { name: \"STRING\" },\n-    SyntaxInfo { name: \"RAW_STRING\" },\n-    SyntaxInfo { name: \"BYTE_STRING\" },\n-    SyntaxInfo { name: \"RAW_BYTE_STRING\" },\n-    SyntaxInfo { name: \"PLUS\" },\n-    SyntaxInfo { name: \"MINUS\" },\n-    SyntaxInfo { name: \"STAR\" },\n-    SyntaxInfo { name: \"SLASH\" },\n-    SyntaxInfo { name: \"CARET\" },\n-    SyntaxInfo { name: \"PERCENT\" },\n-    SyntaxInfo { name: \"AMPERSAND\" },\n-    SyntaxInfo { name: \"PIPE\" },\n-    SyntaxInfo { name: \"THIN_ARROW\" },\n-    SyntaxInfo { name: \"COMMENT\" },\n-    SyntaxInfo { name: \"DOC_COMMENT\" },\n-    SyntaxInfo { name: \"SHEBANG\" },\n-    SyntaxInfo { name: \"FILE\" },\n-    SyntaxInfo { name: \"STRUCT_ITEM\" },\n-    SyntaxInfo { name: \"NAMED_FIELD\" },\n-    SyntaxInfo { name: \"POS_FIELD\" },\n-    SyntaxInfo { name: \"FN_ITEM\" },\n-    SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n-    SyntaxInfo { name: \"ATTR\" },\n-    SyntaxInfo { name: \"META_ITEM\" },\n-    SyntaxInfo { name: \"MOD_ITEM\" },\n-    SyntaxInfo { name: \"USE_ITEM\" },\n-    SyntaxInfo { name: \"USE_TREE\" },\n-    SyntaxInfo { name: \"PATH\" },\n-    SyntaxInfo { name: \"PATH_SEGMENT\" },\n-    SyntaxInfo { name: \"LITERAL\" },\n-    SyntaxInfo { name: \"ALIAS\" },\n-    SyntaxInfo { name: \"VISIBILITY\" },\n-];\n+    TOMBSTONE = !0 - 1,\n+    EOF = !0,\n+}\n+pub(crate) use self::SyntaxKind::*;\n+\n+impl SyntaxKind {\n+    pub(crate) fn info(self) -> &'static SyntaxInfo {\n+        match self {\n+            USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n+            FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n+            STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n+            ENUM_KW => &SyntaxInfo { name: \"ENUM_KW\" },\n+            TRAIT_KW => &SyntaxInfo { name: \"TRAIT_KW\" },\n+            IMPL_KW => &SyntaxInfo { name: \"IMPL_KW\" },\n+            TRUE_KW => &SyntaxInfo { name: \"TRUE_KW\" },\n+            FALSE_KW => &SyntaxInfo { name: \"FALSE_KW\" },\n+            AS_KW => &SyntaxInfo { name: \"AS_KW\" },\n+            EXTERN_KW => &SyntaxInfo { name: \"EXTERN_KW\" },\n+            CRATE_KW => &SyntaxInfo { name: \"CRATE_KW\" },\n+            MOD_KW => &SyntaxInfo { name: \"MOD_KW\" },\n+            PUB_KW => &SyntaxInfo { name: \"PUB_KW\" },\n+            SELF_KW => &SyntaxInfo { name: \"SELF_KW\" },\n+            SUPER_KW => &SyntaxInfo { name: \"SUPER_KW\" },\n+            IN_KW => &SyntaxInfo { name: \"IN_KW\" },\n+            WHERE_KW => &SyntaxInfo { name: \"WHERE_KW\" },\n+            ERROR => &SyntaxInfo { name: \"ERROR\" },\n+            IDENT => &SyntaxInfo { name: \"IDENT\" },\n+            UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n+            WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n+            INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n+            FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },\n+            SEMI => &SyntaxInfo { name: \"SEMI\" },\n+            COMMA => &SyntaxInfo { name: \"COMMA\" },\n+            DOT => &SyntaxInfo { name: \"DOT\" },\n+            DOTDOT => &SyntaxInfo { name: \"DOTDOT\" },\n+            DOTDOTDOT => &SyntaxInfo { name: \"DOTDOTDOT\" },\n+            DOTDOTEQ => &SyntaxInfo { name: \"DOTDOTEQ\" },\n+            L_PAREN => &SyntaxInfo { name: \"L_PAREN\" },\n+            R_PAREN => &SyntaxInfo { name: \"R_PAREN\" },\n+            L_CURLY => &SyntaxInfo { name: \"L_CURLY\" },\n+            R_CURLY => &SyntaxInfo { name: \"R_CURLY\" },\n+            L_BRACK => &SyntaxInfo { name: \"L_BRACK\" },\n+            R_BRACK => &SyntaxInfo { name: \"R_BRACK\" },\n+            L_ANGLE => &SyntaxInfo { name: \"L_ANGLE\" },\n+            R_ANGLE => &SyntaxInfo { name: \"R_ANGLE\" },\n+            AT => &SyntaxInfo { name: \"AT\" },\n+            POUND => &SyntaxInfo { name: \"POUND\" },\n+            TILDE => &SyntaxInfo { name: \"TILDE\" },\n+            QUESTION => &SyntaxInfo { name: \"QUESTION\" },\n+            COLON => &SyntaxInfo { name: \"COLON\" },\n+            COLONCOLON => &SyntaxInfo { name: \"COLONCOLON\" },\n+            DOLLAR => &SyntaxInfo { name: \"DOLLAR\" },\n+            EQ => &SyntaxInfo { name: \"EQ\" },\n+            EQEQ => &SyntaxInfo { name: \"EQEQ\" },\n+            FAT_ARROW => &SyntaxInfo { name: \"FAT_ARROW\" },\n+            NEQ => &SyntaxInfo { name: \"NEQ\" },\n+            EXCL => &SyntaxInfo { name: \"EXCL\" },\n+            LIFETIME => &SyntaxInfo { name: \"LIFETIME\" },\n+            CHAR => &SyntaxInfo { name: \"CHAR\" },\n+            BYTE => &SyntaxInfo { name: \"BYTE\" },\n+            STRING => &SyntaxInfo { name: \"STRING\" },\n+            RAW_STRING => &SyntaxInfo { name: \"RAW_STRING\" },\n+            BYTE_STRING => &SyntaxInfo { name: \"BYTE_STRING\" },\n+            RAW_BYTE_STRING => &SyntaxInfo { name: \"RAW_BYTE_STRING\" },\n+            PLUS => &SyntaxInfo { name: \"PLUS\" },\n+            MINUS => &SyntaxInfo { name: \"MINUS\" },\n+            STAR => &SyntaxInfo { name: \"STAR\" },\n+            SLASH => &SyntaxInfo { name: \"SLASH\" },\n+            CARET => &SyntaxInfo { name: \"CARET\" },\n+            PERCENT => &SyntaxInfo { name: \"PERCENT\" },\n+            AMPERSAND => &SyntaxInfo { name: \"AMPERSAND\" },\n+            PIPE => &SyntaxInfo { name: \"PIPE\" },\n+            THIN_ARROW => &SyntaxInfo { name: \"THIN_ARROW\" },\n+            COMMENT => &SyntaxInfo { name: \"COMMENT\" },\n+            DOC_COMMENT => &SyntaxInfo { name: \"DOC_COMMENT\" },\n+            SHEBANG => &SyntaxInfo { name: \"SHEBANG\" },\n+            FILE => &SyntaxInfo { name: \"FILE\" },\n+            STRUCT_ITEM => &SyntaxInfo { name: \"STRUCT_ITEM\" },\n+            NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n+            POS_FIELD => &SyntaxInfo { name: \"POS_FIELD\" },\n+            FN_ITEM => &SyntaxInfo { name: \"FN_ITEM\" },\n+            EXTERN_CRATE_ITEM => &SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n+            ATTR => &SyntaxInfo { name: \"ATTR\" },\n+            META_ITEM => &SyntaxInfo { name: \"META_ITEM\" },\n+            MOD_ITEM => &SyntaxInfo { name: \"MOD_ITEM\" },\n+            USE_ITEM => &SyntaxInfo { name: \"USE_ITEM\" },\n+            USE_TREE => &SyntaxInfo { name: \"USE_TREE\" },\n+            PATH => &SyntaxInfo { name: \"PATH\" },\n+            PATH_SEGMENT => &SyntaxInfo { name: \"PATH_SEGMENT\" },\n+            LITERAL => &SyntaxInfo { name: \"LITERAL\" },\n+            ALIAS => &SyntaxInfo { name: \"ALIAS\" },\n+            VISIBILITY => &SyntaxInfo { name: \"VISIBILITY\" },\n \n-pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {\n-    &INFOS[kind.0 as usize]\n+            TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n+            EOF => &SyntaxInfo { name: \"EOF\" },\n+        }\n+    }\n }\n \n pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n-   match ident {\n-       \"use\" => Some(USE_KW),\n-       \"fn\" => Some(FN_KW),\n-       \"struct\" => Some(STRUCT_KW),\n-       \"enum\" => Some(ENUM_KW),\n-       \"trait\" => Some(TRAIT_KW),\n-       \"impl\" => Some(IMPL_KW),\n-       \"true\" => Some(TRUE_KW),\n-       \"false\" => Some(FALSE_KW),\n-       \"as\" => Some(AS_KW),\n-       \"extern\" => Some(EXTERN_KW),\n-       \"crate\" => Some(CRATE_KW),\n-       \"mod\" => Some(MOD_KW),\n-       \"pub\" => Some(PUB_KW),\n-       \"self\" => Some(SELF_KW),\n-       \"super\" => Some(SUPER_KW),\n-       \"in\" => Some(IN_KW),\n-       \"where\" => Some(WHERE_KW),\n-       _ => None,\n-   }\n+    match ident {\n+        \"use\" => Some(USE_KW),\n+        \"fn\" => Some(FN_KW),\n+        \"struct\" => Some(STRUCT_KW),\n+        \"enum\" => Some(ENUM_KW),\n+        \"trait\" => Some(TRAIT_KW),\n+        \"impl\" => Some(IMPL_KW),\n+        \"true\" => Some(TRUE_KW),\n+        \"false\" => Some(FALSE_KW),\n+        \"as\" => Some(AS_KW),\n+        \"extern\" => Some(EXTERN_KW),\n+        \"crate\" => Some(CRATE_KW),\n+        \"mod\" => Some(MOD_KW),\n+        \"pub\" => Some(PUB_KW),\n+        \"self\" => Some(SELF_KW),\n+        \"super\" => Some(SUPER_KW),\n+        \"in\" => Some(IN_KW),\n+        \"where\" => Some(WHERE_KW),\n+        _ => None,\n+    }\n }"}, {"sha": "43bda480dbe0a5661183a0f8a80aa3b99e363459", "filename": "src/tree/mod.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff82e5ee1d587b858e7237511e611bb8cc61cf3/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=aff82e5ee1d587b858e7237511e611bb8cc61cf3", "patch": "@@ -1,31 +1,12 @@\n use text::{TextRange, TextUnit};\n-use syntax_kinds::syntax_info;\n \n use std::fmt;\n use std::cmp;\n \n mod file_builder;\n pub use self::file_builder::{FileBuilder, Sink};\n \n-/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct SyntaxKind(pub(crate) u32);\n-\n-pub(crate) const EOF: SyntaxKind = SyntaxKind(!0);\n-pub(crate) const EOF_INFO: SyntaxInfo = SyntaxInfo { name: \"EOF\" };\n-\n-pub(crate) const TOMBSTONE: SyntaxKind = SyntaxKind(!0 - 1);\n-pub(crate) const TOMBSTONE_INFO: SyntaxInfo = SyntaxInfo { name: \"TOMBSTONE\" };\n-\n-impl SyntaxKind {\n-    fn info(self) -> &'static SyntaxInfo {\n-        match self {\n-            EOF => &EOF_INFO,\n-            TOMBSTONE => &TOMBSTONE_INFO,\n-            _ => syntax_info(self),\n-        }\n-    }\n-}\n+pub use syntax_kinds::SyntaxKind;\n \n impl fmt::Debug for SyntaxKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}]}