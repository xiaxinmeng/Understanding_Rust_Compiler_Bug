{"sha": "58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZGE1ZGQ1MWVlYmU3MDBhMmFjOGNmNGYwYjEwZGVjNmQxYjZjYTk=", "commit": {"author": {"name": "Matt Horn", "email": "mathphreak@gmail.com", "date": "2016-07-07T17:15:25Z"}, "committer": {"name": "Matt Horn", "email": "mathphreak@gmail.com", "date": "2016-07-07T17:15:25Z"}, "message": "Add links to Ipv*Addr methods in docs\n\nper https://github.com/rust-lang/rust/pull/34694#issuecomment-231126489", "tree": {"sha": "281e8165469eb93352197797fc65e1741e6b623b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/281e8165469eb93352197797fc65e1741e6b623b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9", "html_url": "https://github.com/rust-lang/rust/commit/58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9/comments", "author": {"login": "mathphreak", "id": 360194, "node_id": "MDQ6VXNlcjM2MDE5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/360194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathphreak", "html_url": "https://github.com/mathphreak", "followers_url": "https://api.github.com/users/mathphreak/followers", "following_url": "https://api.github.com/users/mathphreak/following{/other_user}", "gists_url": "https://api.github.com/users/mathphreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathphreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathphreak/subscriptions", "organizations_url": "https://api.github.com/users/mathphreak/orgs", "repos_url": "https://api.github.com/users/mathphreak/repos", "events_url": "https://api.github.com/users/mathphreak/events{/privacy}", "received_events_url": "https://api.github.com/users/mathphreak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mathphreak", "id": 360194, "node_id": "MDQ6VXNlcjM2MDE5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/360194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathphreak", "html_url": "https://github.com/mathphreak", "followers_url": "https://api.github.com/users/mathphreak/followers", "following_url": "https://api.github.com/users/mathphreak/following{/other_user}", "gists_url": "https://api.github.com/users/mathphreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathphreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathphreak/subscriptions", "organizations_url": "https://api.github.com/users/mathphreak/orgs", "repos_url": "https://api.github.com/users/mathphreak/repos", "events_url": "https://api.github.com/users/mathphreak/events{/privacy}", "received_events_url": "https://api.github.com/users/mathphreak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee5b492fecd321b5ce507d732948943a74fbf4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee5b492fecd321b5ce507d732948943a74fbf4c", "html_url": "https://github.com/rust-lang/rust/commit/fee5b492fecd321b5ce507d732948943a74fbf4c"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "fddb237dd5f5b15dbdcb5655090848753daadf54", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=58da5dd51eebe700a2ac8cf4f0b10dec6d1b6ca9", "patch": "@@ -60,7 +60,9 @@ pub enum Ipv6MulticastScope {\n }\n \n impl IpAddr {\n-    /// Returns true for the special 'unspecified' address (0.0.0.0 in IPv4, :: in IPv6).\n+    /// Returns true for the special 'unspecified' address ([IPv4], [IPv6]).\n+    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_unspecified\n+    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_unspecified\n     #[unstable(feature=\"ip\", issue=\"27709\",\n                reason=\"recently added and depends on unstable Ipv4Addr.is_unspecified()\")]\n     pub fn is_unspecified(&self) -> bool {\n@@ -70,7 +72,9 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this is a loopback address (127.0.0.0/8 in IPv4, ::1 in IPv6).\n+    /// Returns true if this is a loopback address ([IPv4], [IPv6]).\n+    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_loopback\n+    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_loopback\n     #[unstable(feature=\"ip\", reason=\"recently added\", issue=\"27709\")]\n     pub fn is_loopback(&self) -> bool {\n         match *self {\n@@ -79,7 +83,9 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if the address appears to be globally routable.\n+    /// Returns true if the address appears to be globally routable ([IPv4], [IPv6]).\n+    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_global\n+    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_global\n     #[unstable(feature=\"ip\", issue=\"27709\",\n                reason=\"recently added and depends on unstable Ip{v4,v6}Addr.is_global()\")]\n     pub fn is_global(&self) -> bool {\n@@ -89,7 +95,9 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this is a multicast address (224.0.0.0/4 in IPv4, ff00::/8 in IPv6)\n+    /// Returns true if this is a multicast address ([IPv4], [IPv6]).\n+    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_multicast\n+    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_multicast\n     #[unstable(feature=\"ip\", reason=\"recently added\", issue=\"27709\")]\n     pub fn is_multicast(&self) -> bool {\n         match *self {\n@@ -98,7 +106,9 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns true if this address is in a range designated for documentation.\n+    /// Returns true if this address is in a range designated for documentation ([IPv4], [IPv6]).\n+    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_documentation\n+    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_documentation\n     #[unstable(feature=\"ip\", issue=\"27709\",\n                reason=\"recently added and depends on unstable Ipv6Addr.is_documentation()\")]\n     pub fn is_documentation(&self) -> bool {"}]}