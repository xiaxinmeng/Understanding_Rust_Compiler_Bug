{"sha": "346238f49740d6c98102a6a59811b1625c73a9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NjIzOGY0OTc0MGQ2Yzk4MTAyYTZhNTk4MTFiMTYyNWM3M2E5ZDc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-04T01:33:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-04T01:33:03Z"}, "message": "Merge pull request #2410 from topecongiro/skip-repeat-macro\n\nSkip rewriting macro def with repeat", "tree": {"sha": "0196749b839c232b3d0dbebf57a2d9bcfdc4468d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0196749b839c232b3d0dbebf57a2d9bcfdc4468d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346238f49740d6c98102a6a59811b1625c73a9d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJadmLPCRBK7hj4Ov3rIwAAdHIIAHYsRqlafUgWiKOo3dFap8pN\nv4gBqBtXdOi8HDMoac2F+BqhWluc7QoleP2XzWHLSFhyF+AwxTCRBI9vx2hjx2Sd\nQSYnTqJj+eFYmseD58+Y2wxRMArEBGnIV4cdUA/1GnTC35yFDMWUu/tRNXmiNV35\n/4sl3O6FSV0a5XmsADVsDzp5YHFmmlrgAZ5qRamafrpqE9cirYb4wCscYcJLtTuC\n8CxOUtKQo3CI29miLJD9tQORM74dORZZOUBgR2g902ezAKpUZ8AtWy/8TLb0WctE\n+9hhnJZwPWwnYoMaVz6RgG3qI0959ZYjQl7B+M+ql1FMRAv+brK2yDWMi6v5X4E=\n=fLDw\n-----END PGP SIGNATURE-----\n", "payload": "tree 0196749b839c232b3d0dbebf57a2d9bcfdc4468d\nparent ca09746ce90edc24ac90763e9b06b092dbc92a39\nparent 61b23a4293e643202d0e92439d9902c869259333\nauthor Nick Cameron <nrc@ncameron.org> 1517707983 +1300\ncommitter GitHub <noreply@github.com> 1517707983 +1300\n\nMerge pull request #2410 from topecongiro/skip-repeat-macro\n\nSkip rewriting macro def with repeat"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346238f49740d6c98102a6a59811b1625c73a9d7", "html_url": "https://github.com/rust-lang/rust/commit/346238f49740d6c98102a6a59811b1625c73a9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346238f49740d6c98102a6a59811b1625c73a9d7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca09746ce90edc24ac90763e9b06b092dbc92a39", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca09746ce90edc24ac90763e9b06b092dbc92a39", "html_url": "https://github.com/rust-lang/rust/commit/ca09746ce90edc24ac90763e9b06b092dbc92a39"}, {"sha": "61b23a4293e643202d0e92439d9902c869259333", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b23a4293e643202d0e92439d9902c869259333", "html_url": "https://github.com/rust-lang/rust/commit/61b23a4293e643202d0e92439d9902c869259333"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "7df793ca79d5d8ce3a1e47a3576fe290ba6704a8", "filename": "src/macros.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/346238f49740d6c98102a6a59811b1625c73a9d7/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346238f49740d6c98102a6a59811b1625c73a9d7/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=346238f49740d6c98102a6a59811b1625c73a9d7", "patch": "@@ -318,7 +318,10 @@ pub fn rewrite_macro_def(\n     // variables for new names with the same length first.\n \n     let old_body = context.snippet(branch.body).trim();\n-    let (body_str, substs) = replace_names(old_body);\n+    let (body_str, substs) = match replace_names(old_body) {\n+        Some(result) => result,\n+        None => return snippet,\n+    };\n \n     // We'll hack the indent below, take this into account when formatting,\n     let mut config = context.config.clone();\n@@ -377,7 +380,7 @@ pub fn rewrite_macro_def(\n // Replaces `$foo` with `zfoo`. We must check for name overlap to ensure we\n // aren't causing problems.\n // This should also work for escaped `$` variables, where we leave earlier `$`s.\n-fn replace_names(input: &str) -> (String, HashMap<String, String>) {\n+fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n     // Each substitution will require five or six extra bytes.\n     let mut result = String::with_capacity(input.len() + 64);\n     let mut substs = HashMap::new();\n@@ -409,6 +412,9 @@ fn replace_names(input: &str) -> (String, HashMap<String, String>) {\n \n             dollar_count = 0;\n             cur_name = String::new();\n+        } else if c == '(' && cur_name.is_empty() {\n+            // FIXME: Support macro def with repeat.\n+            return None;\n         } else if c.is_alphanumeric() {\n             cur_name.push(c);\n         }\n@@ -433,7 +439,7 @@ fn replace_names(input: &str) -> (String, HashMap<String, String>) {\n \n     debug!(\"replace_names `{}` {:?}\", result, substs);\n \n-    (result, substs)\n+    Some((result, substs))\n }\n \n // This is a bit sketchy. The token rules probably need tweaking, but it works"}, {"sha": "ffd5c19cc8c90fca0d67857334108df815d70b4d", "filename": "tests/source/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346238f49740d6c98102a6a59811b1625c73a9d7/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346238f49740d6c98102a6a59811b1625c73a9d7/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=346238f49740d6c98102a6a59811b1625c73a9d7", "patch": "@@ -332,3 +332,7 @@ macro foo() {\n   bar();\n   }\n }\n+\n+macro lex_err($kind: ident $(, $body: expr)*) {\n+    Err(QlError::LexError(LexError::$kind($($body,)*)))\n+}"}, {"sha": "a79eb8fb2941e8881f7b79e1675c0f2b8b49eadb", "filename": "tests/target/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346238f49740d6c98102a6a59811b1625c73a9d7/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346238f49740d6c98102a6a59811b1625c73a9d7/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=346238f49740d6c98102a6a59811b1625c73a9d7", "patch": "@@ -905,3 +905,7 @@ macro foo() {\n         bar();\n     }\n }\n+\n+macro lex_err($kind: ident $(, $body: expr)*) {\n+    Err(QlError::LexError(LexError::$kind($($body,)*)))\n+}"}]}