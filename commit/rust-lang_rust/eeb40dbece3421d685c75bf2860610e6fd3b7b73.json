{"sha": "eeb40dbece3421d685c75bf2860610e6fd3b7b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYjQwZGJlY2UzNDIxZDY4NWM3NWJmMjg2MDYxMGU2ZmQzYjdiNzM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-01T13:33:02Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-29T12:29:20Z"}, "message": "Add method references CodeLens", "tree": {"sha": "da6e1ad2b01dd550be8f6d7499a9fc5f432e9732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da6e1ad2b01dd550be8f6d7499a9fc5f432e9732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb40dbece3421d685c75bf2860610e6fd3b7b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb40dbece3421d685c75bf2860610e6fd3b7b73", "html_url": "https://github.com/rust-lang/rust/commit/eeb40dbece3421d685c75bf2860610e6fd3b7b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb40dbece3421d685c75bf2860610e6fd3b7b73/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e813de6cdd53e542bce8d4a554288dc2f17bbf5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e813de6cdd53e542bce8d4a554288dc2f17bbf5e", "html_url": "https://github.com/rust-lang/rust/commit/e813de6cdd53e542bce8d4a554288dc2f17bbf5e"}], "stats": {"total": 82, "additions": 74, "deletions": 8}, "files": [{"sha": "fa8472e62f74293b17189e8fb7ae90380f5ba246", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eeb40dbece3421d685c75bf2860610e6fd3b7b73/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb40dbece3421d685c75bf2860610e6fd3b7b73/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=eeb40dbece3421d685c75bf2860610e6fd3b7b73", "patch": "@@ -74,19 +74,18 @@ pub struct LensConfig {\n     pub run: bool,\n     pub debug: bool,\n     pub implementations: bool,\n+    pub method_refs: bool,\n }\n \n impl Default for LensConfig {\n     fn default() -> Self {\n-        Self { run: true, debug: true, implementations: true }\n+        Self { run: true, debug: true, implementations: true, method_refs: true }\n     }\n }\n \n impl LensConfig {\n-    pub const NO_LENS: LensConfig = Self { run: false, debug: false, implementations: false };\n-\n     pub fn any(&self) -> bool {\n-        self.implementations || self.runnable()\n+        self.implementations || self.runnable() || self.references()\n     }\n \n     pub fn none(&self) -> bool {\n@@ -96,6 +95,10 @@ impl LensConfig {\n     pub fn runnable(&self) -> bool {\n         self.run || self.debug\n     }\n+\n+    pub fn references(&self) -> bool {\n+        self.method_refs\n+    }\n }\n \n #[derive(Debug, Clone)]\n@@ -278,6 +281,7 @@ impl Config {\n             run: data.lens_enable && data.lens_run,\n             debug: data.lens_enable && data.lens_debug,\n             implementations: data.lens_enable && data.lens_implementations,\n+            method_refs: data.lens_enable && data.lens_methodReferences,\n         };\n \n         if !data.linkedProjects.is_empty() {\n@@ -459,10 +463,11 @@ config_data! {\n         inlayHints_parameterHints: bool     = true,\n         inlayHints_typeHints: bool          = true,\n \n-        lens_debug: bool           = true,\n-        lens_enable: bool          = true,\n-        lens_implementations: bool = true,\n-        lens_run: bool             = true,\n+        lens_debug: bool            = true,\n+        lens_enable: bool           = true,\n+        lens_implementations: bool  = true,\n+        lens_run: bool              = true,\n+        lens_methodReferences: bool = true,\n \n         linkedProjects: Vec<ManifestOrProjectJson> = Vec::new(),\n         lruCapacity: Option<usize>                 = None,"}, {"sha": "06afb814855a3584e139adadf64f708cc21b58ff", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/eeb40dbece3421d685c75bf2860610e6fd3b7b73/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb40dbece3421d685c75bf2860610e6fd3b7b73/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=eeb40dbece3421d685c75bf2860610e6fd3b7b73", "patch": "@@ -11,6 +11,7 @@ use ide::{\n     FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n     RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n+use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n@@ -952,6 +953,52 @@ pub(crate) fn handle_code_lens(\n                 }),\n         );\n     }\n+\n+    if snap.config.lens.references() {\n+        let ref_lenses = snap\n+            .analysis\n+            .file_structure(file_id)?\n+            .into_iter()\n+            .filter(|it| match it.kind {\n+                SyntaxKind::FN => true,\n+                _ => false,\n+            })\n+            .filter_map(|it| {\n+                let position = FilePosition { file_id, offset: it.navigation_range.start() };\n+                let scope = None; // all references\n+\n+                snap.analysis.find_all_refs(position, scope).unwrap_or(None).map(|r| {\n+                    let mut lenses = Vec::new();\n+                    if r.len() == 1 {\n+                        // Only a declaration\n+                        return lenses;\n+                    }\n+\n+                    let uri = to_proto::url(&snap, file_id);\n+                    let range = to_proto::range(&line_index, it.node_range);\n+                    let position = to_proto::position(&line_index, position.offset);\n+\n+                    if snap.config.lens.method_refs {\n+                        let all_locations: Vec<_> = r\n+                            .references()\n+                            .iter()\n+                            .filter_map(|it| to_proto::location(&snap, it.file_range).ok())\n+                            .collect();\n+                        let title = reference_title(all_locations.len());\n+                        let all_refs =\n+                            show_references_command(title, &uri, position, all_locations);\n+                        lenses.push(CodeLens { range, command: Some(all_refs), data: None });\n+                    }\n+\n+                    lenses\n+                })\n+            })\n+            .flatten()\n+            .collect_vec();\n+\n+        lenses.extend(ref_lenses);\n+    }\n+\n     Ok(Some(lenses))\n }\n \n@@ -1248,6 +1295,14 @@ fn implementation_title(count: usize) -> String {\n     }\n }\n \n+fn reference_title(count: usize) -> String {\n+    if count == 1 {\n+        \"1 reference\".into()\n+    } else {\n+        format!(\"{} references\", count)\n+    }\n+}\n+\n fn show_references_command(\n     title: String,\n     uri: &lsp_types::Url,"}, {"sha": "4414b3e662a4bbbd155672eda4ee93ee50c70f94", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eeb40dbece3421d685c75bf2860610e6fd3b7b73/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/eeb40dbece3421d685c75bf2860610e6fd3b7b73/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=eeb40dbece3421d685c75bf2860610e6fd3b7b73", "patch": "@@ -554,6 +554,11 @@\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n+                \"rust-analyzer.lens.methodReferences\": {\n+                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n                 \"rust-analyzer.hoverActions.enable\": {\n                     \"description\": \"Whether to show HoverActions in Rust files.\",\n                     \"type\": \"boolean\","}, {"sha": "848e92af991586412e522a0280cd6faaba975d98", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eeb40dbece3421d685c75bf2860610e6fd3b7b73/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/eeb40dbece3421d685c75bf2860610e6fd3b7b73/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=eeb40dbece3421d685c75bf2860610e6fd3b7b73", "patch": "@@ -138,6 +138,7 @@ export class Config {\n             run: this.get<boolean>(\"lens.run\"),\n             debug: this.get<boolean>(\"lens.debug\"),\n             implementations: this.get<boolean>(\"lens.implementations\"),\n+            methodReferences: this.get<boolean>(\"lens.methodReferences\"),\n         };\n     }\n "}]}