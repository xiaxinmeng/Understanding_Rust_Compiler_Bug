{"sha": "eea91c308f70d6715f973bdd0352723d672f3b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYTkxYzMwOGY3MGQ2NzE1Zjk3M2JkZDAzNTI3MjNkNjcyZjNiMWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-06T02:24:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-06T02:24:15Z"}, "message": "Rollup merge of #70519 - estebank:constraints-before-args-spans, r=Centril\n\nTweak output of type params and constraints in the wrong order\n\nr? @Centril @varkor", "tree": {"sha": "3937c59dc679c2aac715c53734fc4d0606c3b9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3937c59dc679c2aac715c53734fc4d0606c3b9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea91c308f70d6715f973bdd0352723d672f3b1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeipLPCRBK7hj4Ov3rIwAAdHIIAAwVUN9ru3MPtgEUJ36J/On2\nhsMih3DTv/ElnDd4CoDz7dQMts5gzAMPo/XaUiJYEbVBJQTlp5e9MidP+vDH+qHw\nJK2kq3bqItuZRMsIWk9v/X6+WO05kAuYGdIHHAE6itzrJfz7tSHgF31BOPWoR6V1\nlClS8GVd1Iif5Gl2yDAvNIccOgp271+RRVBBaXege3uZsvQegow7gNQV6q5p8bAh\n3Ku3j6NXQlbs8tvUYad1zRHJguOe/UxnO3FhUP8Ts0O5oSdN4L039JbhP9HjivX9\nXptBDBYbi3HW5f6EtkJJ7AjiBKVzemg5b0TWSETb6C3JhzPhSFWvlnW1qsp05Uo=\n=5Sj4\n-----END PGP SIGNATURE-----\n", "payload": "tree 3937c59dc679c2aac715c53734fc4d0606c3b9bc\nparent 83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f\nparent 17a95232b35766a24d2575c7fa1ef52c9fbf97de\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586139855 +0200\ncommitter GitHub <noreply@github.com> 1586139855 +0200\n\nRollup merge of #70519 - estebank:constraints-before-args-spans, r=Centril\n\nTweak output of type params and constraints in the wrong order\n\nr? @Centril @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea91c308f70d6715f973bdd0352723d672f3b1c", "html_url": "https://github.com/rust-lang/rust/commit/eea91c308f70d6715f973bdd0352723d672f3b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea91c308f70d6715f973bdd0352723d672f3b1c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "html_url": "https://github.com/rust-lang/rust/commit/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f"}, {"sha": "17a95232b35766a24d2575c7fa1ef52c9fbf97de", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a95232b35766a24d2575c7fa1ef52c9fbf97de", "html_url": "https://github.com/rust-lang/rust/commit/17a95232b35766a24d2575c7fa1ef52c9fbf97de"}], "stats": {"total": 207, "additions": 146, "deletions": 61}, "files": [{"sha": "908bfa355571ba1a33d6b01554cafbce58739d42", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -3564,6 +3564,7 @@ dependencies = [\n name = \"rustc_ast_passes\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools 0.8.0\",\n  \"log\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "f91cbe51d85d184094fdac9e63d0b363b45181c7", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -300,8 +300,8 @@ pub enum GenericBound {\n impl GenericBound {\n     pub fn span(&self) -> Span {\n         match self {\n-            &GenericBound::Trait(ref t, ..) => t.span,\n-            &GenericBound::Outlives(ref l) => l.ident.span,\n+            GenericBound::Trait(ref t, ..) => t.span,\n+            GenericBound::Outlives(ref l) => l.ident.span,\n         }\n     }\n }"}, {"sha": "e4d1d79abb2d6aecaa7834c1b19850db4417226e", "filename": "src/librustc_ast_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2FCargo.toml?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -9,6 +9,7 @@ name = \"rustc_ast_passes\"\n path = \"lib.rs\"\n \n [dependencies]\n+itertools = \"0.8\"\n log = \"0.4\"\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }"}, {"sha": "9563325fe329e8af41be1145bebb285ca0d9be20", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -6,6 +6,7 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n+use itertools::{Either, Itertools};\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::expand::is_proc_macro_attr;\n@@ -14,7 +15,7 @@ use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, struct_span_err, Applicability};\n+use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_session::lint::LintBuffer;\n@@ -640,31 +641,70 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    fn correct_generic_order_suggestion(&self, data: &AngleBracketedArgs) -> String {\n+        // Lifetimes always come first.\n+        let lt_sugg = data.args.iter().filter_map(|arg| match arg {\n+            AngleBracketedArg::Arg(lt @ GenericArg::Lifetime(_)) => {\n+                Some(pprust::to_string(|s| s.print_generic_arg(lt)))\n+            }\n+            _ => None,\n+        });\n+        let args_sugg = data.args.iter().filter_map(|a| match a {\n+            AngleBracketedArg::Arg(GenericArg::Lifetime(_)) | AngleBracketedArg::Constraint(_) => {\n+                None\n+            }\n+            AngleBracketedArg::Arg(arg) => Some(pprust::to_string(|s| s.print_generic_arg(arg))),\n+        });\n+        // Constraints always come last.\n+        let constraint_sugg = data.args.iter().filter_map(|a| match a {\n+            AngleBracketedArg::Arg(_) => None,\n+            AngleBracketedArg::Constraint(c) => {\n+                Some(pprust::to_string(|s| s.print_assoc_constraint(c)))\n+            }\n+        });\n+        format!(\n+            \"<{}>\",\n+            lt_sugg.chain(args_sugg).chain(constraint_sugg).collect::<Vec<String>>().join(\", \")\n+        )\n+    }\n+\n     /// Enforce generic args coming before constraints in `<...>` of a path segment.\n     fn check_generic_args_before_constraints(&self, data: &AngleBracketedArgs) {\n         // Early exit in case it's partitioned as it should be.\n         if data.args.iter().is_partitioned(|arg| matches!(arg, AngleBracketedArg::Arg(_))) {\n             return;\n         }\n         // Find all generic argument coming after the first constraint...\n-        let mut misplaced_args = Vec::new();\n-        let mut first = None;\n-        for arg in &data.args {\n-            match (arg, first) {\n-                (AngleBracketedArg::Arg(a), Some(_)) => misplaced_args.push(a.span()),\n-                (AngleBracketedArg::Constraint(c), None) => first = Some(c.span),\n-                (AngleBracketedArg::Arg(_), None) | (AngleBracketedArg::Constraint(_), Some(_)) => {\n-                }\n-            }\n-        }\n+        let (constraint_spans, arg_spans): (Vec<Span>, Vec<Span>) =\n+            data.args.iter().partition_map(|arg| match arg {\n+                AngleBracketedArg::Constraint(c) => Either::Left(c.span),\n+                AngleBracketedArg::Arg(a) => Either::Right(a.span()),\n+            });\n+        let args_len = arg_spans.len();\n+        let constraint_len = constraint_spans.len();\n         // ...and then error:\n         self.err_handler()\n             .struct_span_err(\n-                misplaced_args.clone(),\n+                arg_spans.clone(),\n                 \"generic arguments must come before the first constraint\",\n             )\n-            .span_label(first.unwrap(), \"the first constraint is provided here\")\n-            .span_labels(misplaced_args, \"generic argument\")\n+            .span_label(constraint_spans[0], &format!(\"constraint{}\", pluralize!(constraint_len)))\n+            .span_label(\n+                *arg_spans.iter().last().unwrap(),\n+                &format!(\"generic argument{}\", pluralize!(args_len)),\n+            )\n+            .span_labels(constraint_spans, \"\")\n+            .span_labels(arg_spans, \"\")\n+            .span_suggestion_verbose(\n+                data.span,\n+                &format!(\n+                    \"move the constraint{} after the generic argument{}\",\n+                    pluralize!(constraint_len),\n+                    pluralize!(args_len)\n+                ),\n+                self.correct_generic_order_suggestion(&data),\n+                Applicability::MachineApplicable,\n+            )\n             .emit();\n     }\n }"}, {"sha": "f68868633f148c4e8997de48a8ffc63fab3aefa3", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -869,7 +869,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    fn print_assoc_constraint(&mut self, constraint: &ast::AssocTyConstraint) {\n+    pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocTyConstraint) {\n         self.print_ident(constraint.ident);\n         self.s.space();\n         match &constraint.kind {\n@@ -883,7 +883,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_generic_arg(&mut self, generic_arg: &GenericArg) {\n+    pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.print_lifetime(*lt),\n             GenericArg::Type(ty) => self.print_type(ty),"}, {"sha": "2dbd9f4e52fad36f5633d7faf18fc224771b51d6", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -315,6 +315,20 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    pub fn span_suggestion_verbose(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.0.allow_suggestions {\n+            return self;\n+        }\n+        self.0.diagnostic.span_suggestion_verbose(sp, msg, suggestion, applicability);\n+        self\n+    }\n+\n     pub fn span_suggestion_hidden(\n         &mut self,\n         sp: Span,"}, {"sha": "bc61b3b74e2175598aadd89cfe0b4dd49688b0d1", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -4,7 +4,12 @@ error: generic arguments must come before the first constraint\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n    |                         -------  ^ generic argument\n    |                         |\n-   |                         the first constraint is provided here\n+   |                         constraint\n+   |\n+help: move the constraint after the generic argument\n+   |\n+LL | pub fn test<W, I: Trait<W, Item = ()> >() {}\n+   |                        ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3bb6fd6e4f423587337a3b60fb28cb1169da9320", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 66, "deletions": 42, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea91c308f70d6715f973bdd0352723d672f3b1c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=eea91c308f70d6715f973bdd0352723d672f3b1c", "patch": "@@ -4,79 +4,103 @@ error: generic arguments must come before the first constraint\n LL | struct A<T, M: One<A=(), T>> {\n    |                    ----  ^ generic argument\n    |                    |\n-   |                    the first constraint is provided here\n+   |                    constraint\n+   |\n+help: move the constraint after the generic argument\n+   |\n+LL | struct A<T, M: One<T, A = ()>> {\n+   |                   ^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:33:43\n    |\n LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n-   |                                     ----  ^  ^^ generic argument\n-   |                                     |     |\n-   |                                     |     generic argument\n-   |                                     the first constraint is provided here\n+   |                                     ----  ^  ^^ generic arguments\n+   |                                     |\n+   |                                     constraint\n+   |\n+help: move the constraint after the generic arguments\n+   |\n+LL | struct Al<'a, T, M: OneWithLifetime<'a, T, A = ()>> {\n+   |                                    ^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:40:46\n    |\n LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> {\n-   |                            ----              ^  ^  ^ generic argument\n-   |                            |                 |  |\n-   |                            |                 |  generic argument\n-   |                            |                 generic argument\n-   |                            the first constraint is provided here\n+   |                            ----  ----  ----  ^  ^  ^ generic arguments\n+   |                            |\n+   |                            constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct B<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:48:71\n    |\n LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n-   |                                                     ----              ^  ^  ^  ^^  ^^  ^^ generic argument\n-   |                                                     |                 |  |  |  |   |\n-   |                                                     |                 |  |  |  |   generic argument\n-   |                                                     |                 |  |  |  generic argument\n-   |                                                     |                 |  |  generic argument\n-   |                                                     |                 |  generic argument\n-   |                                                     |                 generic argument\n-   |                                                     the first constraint is provided here\n+   |                                                     ----  ----  ----  ^  ^  ^  ^^  ^^  ^^ generic arguments\n+   |                                                     |\n+   |                                                     constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:57:49\n+  --> $DIR/suggest-move-types.rs:57:28\n    |\n LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> {\n-   |                               ----              ^  ^ generic argument\n-   |                               |                 |\n-   |                               |                 generic argument\n-   |                               the first constraint is provided here\n+   |                            ^  ----  ----  ----  ^  ^ generic arguments\n+   |                               |\n+   |                               constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct C<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:65:78\n+  --> $DIR/suggest-move-types.rs:65:53\n    |\n LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n-   |                                                            ----              ^  ^^  ^  ^^ generic argument\n-   |                                                            |                 |  |   |\n-   |                                                            |                 |  |   generic argument\n-   |                                                            |                 |  generic argument\n-   |                                                            |                 generic argument\n-   |                                                            the first constraint is provided here\n+   |                                                     ^  ^^  ----  ----  ----  ^  ^^  ^  ^^ generic arguments\n+   |                                                            |\n+   |                                                            constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:74:43\n+  --> $DIR/suggest-move-types.rs:74:28\n    |\n LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> {\n-   |                               ----        ^        ^ generic argument\n-   |                               |           |\n-   |                               |           generic argument\n-   |                               the first constraint is provided here\n+   |                            ^  ----  ----  ^  ----  ^ generic arguments\n+   |                               |\n+   |                               constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct D<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:82:72\n+  --> $DIR/suggest-move-types.rs:82:53\n    |\n LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n-   |                                                            ----        ^  ^^        ^  ^^ generic argument\n-   |                                                            |           |  |         |\n-   |                                                            |           |  |         generic argument\n-   |                                                            |           |  generic argument\n-   |                                                            |           generic argument\n-   |                                                            the first constraint is provided here\n+   |                                                     ^  ^^  ----  ----  ^  ^^  ----  ^  ^^ generic arguments\n+   |                                                            |\n+   |                                                            constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0747]: type provided when a lifetime was expected\n   --> $DIR/suggest-move-types.rs:33:43"}]}