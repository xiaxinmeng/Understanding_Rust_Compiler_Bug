{"sha": "d13e8dd41d44a73664943169d5b7fe39b22c449f", "node_id": "C_kwDOAAsO6NoAKGQxM2U4ZGQ0MWQ0NGE3MzY2NDk0MzE2OWQ1YjdmZTM5YjIyYzQ0OWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-23T02:20:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-23T02:20:50Z"}, "message": "Auto merge of #93165 - eholk:disable-generator-drop-tracking, r=nikomatsakis\n\nDisable drop range tracking in generators\n\nGenerator drop tracking caused an ICE for generators involving the Never type (Issue #93161). Since this breaks a test case with miri, we temporarily disable drop tracking so miri is unblocked while we properly fix the issue.", "tree": {"sha": "25745a7dd93b78fc438febc56917e91ed506000a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25745a7dd93b78fc438febc56917e91ed506000a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d13e8dd41d44a73664943169d5b7fe39b22c449f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d13e8dd41d44a73664943169d5b7fe39b22c449f", "html_url": "https://github.com/rust-lang/rust/commit/d13e8dd41d44a73664943169d5b7fe39b22c449f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d13e8dd41d44a73664943169d5b7fe39b22c449f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c4c4afec6dfc483af6efb7019941bab9a51a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c4c4afec6dfc483af6efb7019941bab9a51a29", "html_url": "https://github.com/rust-lang/rust/commit/10c4c4afec6dfc483af6efb7019941bab9a51a29"}, {"sha": "ead84d089567eb46eb942ed377a032db921d2e6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ead84d089567eb46eb942ed377a032db921d2e6b", "html_url": "https://github.com/rust-lang/rust/commit/ead84d089567eb46eb942ed377a032db921d2e6b"}], "stats": {"total": 123, "additions": 122, "deletions": 1}, "files": [{"sha": "c6b92db88ae8a933529f7ca4fdf00ca4ace77ec6", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d13e8dd41d44a73664943169d5b7fe39b22c449f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13e8dd41d44a73664943169d5b7fe39b22c449f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=d13e8dd41d44a73664943169d5b7fe39b22c449f", "patch": "@@ -22,6 +22,11 @@ use tracing::debug;\n \n mod drop_ranges;\n \n+// FIXME(eholk): This flag is here to give a quick way to disable drop tracking in case we find\n+// unexpected breakages while it's still new. It should be removed before too long. For example,\n+// see #93161.\n+const ENABLE_DROP_TRACKING: bool = false;\n+\n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     types: FxIndexSet<ty::GeneratorInteriorTypeCause<'tcx>>,\n@@ -77,7 +82,10 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                                 yield_data.expr_and_pat_count, self.expr_count, source_span\n                             );\n \n-                            if self.drop_ranges.is_dropped_at(hir_id, yield_data.expr_and_pat_count)\n+                            if ENABLE_DROP_TRACKING\n+                                && self\n+                                    .drop_ranges\n+                                    .is_dropped_at(hir_id, yield_data.expr_and_pat_count)\n                             {\n                                 debug!(\"value is dropped at yield point; not recording\");\n                                 return false;"}, {"sha": "a1a05c0acba479318c3ef5e540d52028677a42d5", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=d13e8dd41d44a73664943169d5b7fe39b22c449f", "patch": "@@ -1,6 +1,10 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n+// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n+// (see generator_interior.rs:27)\n+// ignore-test\n+\n use std::{cell::RefCell, fmt::Debug, rc::Rc};\n \n fn non_sync() -> impl Debug {"}, {"sha": "187356ca140219c079835955146e2ecb567b6fec", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=d13e8dd41d44a73664943169d5b7fe39b22c449f", "patch": "@@ -3,6 +3,10 @@\n // (rather than give a general error message)\n // edition:2018\n \n+// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n+// (see generator_interior.rs:27)\n+// ignore-test\n+\n async fn bar<T>() -> () {}\n \n async fn foo() {"}, {"sha": "8540f7617acde619cffd4b819c56b9f2a77c0135", "filename": "src/test/ui/generator/drop-control-flow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs?ref=d13e8dd41d44a73664943169d5b7fe39b22c449f", "patch": "@@ -1,5 +1,9 @@\n // build-pass\n \n+// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n+// (see generator_interior.rs:27)\n+// ignore-test\n+\n // A test to ensure generators capture values that were conditionally dropped,\n // and also that values that are dropped along all paths to a yield do not get\n // included in the generator type."}, {"sha": "5c23ecbae32730bcc08425efc1a5986d597960a3", "filename": "src/test/ui/generator/issue-57478.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fissue-57478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fissue-57478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57478.rs?ref=d13e8dd41d44a73664943169d5b7fe39b22c449f", "patch": "@@ -1,5 +1,9 @@\n // check-pass\n \n+// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n+// (see generator_interior.rs:27)\n+// ignore-test\n+\n #![feature(negative_impls, generators)]\n \n struct Foo;"}, {"sha": "9988acbcb73e198918e324cee34336a730b42374", "filename": "src/test/ui/generator/issue-93161.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs?ref=d13e8dd41d44a73664943169d5b7fe39b22c449f", "patch": "@@ -0,0 +1,93 @@\n+// edition:2021\n+// run-pass\n+\n+#![feature(never_type)]\n+\n+use std::future::Future;\n+\n+// See if we can run a basic `async fn`\n+pub async fn foo(x: &u32, y: u32) -> u32 {\n+    let y = &y;\n+    let z = 9;\n+    let z = &z;\n+    let y = async { *y + *z }.await;\n+    let a = 10;\n+    let a = &a;\n+    *x + y + *a\n+}\n+\n+async fn add(x: u32, y: u32) -> u32 {\n+    let a = async { x + y };\n+    a.await\n+}\n+\n+async fn build_aggregate(a: u32, b: u32, c: u32, d: u32) -> u32 {\n+    let x = (add(a, b).await, add(c, d).await);\n+    x.0 + x.1\n+}\n+\n+enum Never {}\n+fn never() -> Never {\n+    panic!()\n+}\n+\n+async fn includes_never(crash: bool, x: u32) -> u32 {\n+    let mut result = async { x * x }.await;\n+    if !crash {\n+        return result;\n+    }\n+    #[allow(unused)]\n+    let bad = never();\n+    result *= async { x + x }.await;\n+    drop(bad);\n+    result\n+}\n+\n+async fn partial_init(x: u32) -> u32 {\n+    #[allow(unreachable_code)]\n+    let _x: (String, !) = (String::new(), return async { x + x }.await);\n+}\n+\n+async fn read_exact(_from: &mut &[u8], _to: &mut [u8]) -> Option<()> {\n+    Some(())\n+}\n+\n+async fn hello_world() {\n+    let data = [0u8; 1];\n+    let mut reader = &data[..];\n+\n+    let mut marker = [0u8; 1];\n+    read_exact(&mut reader, &mut marker).await.unwrap();\n+}\n+\n+fn run_fut<T>(fut: impl Future<Output = T>) -> T {\n+    use std::sync::Arc;\n+    use std::task::{Context, Poll, Wake, Waker};\n+\n+    struct MyWaker;\n+    impl Wake for MyWaker {\n+        fn wake(self: Arc<Self>) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    let waker = Waker::from(Arc::new(MyWaker));\n+    let mut context = Context::from_waker(&waker);\n+\n+    let mut pinned = Box::pin(fut);\n+    loop {\n+        match pinned.as_mut().poll(&mut context) {\n+            Poll::Pending => continue,\n+            Poll::Ready(v) => return v,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    assert_eq!(run_fut(foo(&x, 7)), 31);\n+    assert_eq!(run_fut(build_aggregate(1, 2, 3, 4)), 10);\n+    assert_eq!(run_fut(includes_never(false, 4)), 16);\n+    assert_eq!(run_fut(partial_init(4)), 8);\n+    run_fut(hello_world());\n+}"}, {"sha": "e89e4b61bbff779632fdd214c26576c834468de3", "filename": "src/test/ui/generator/partial-drop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13e8dd41d44a73664943169d5b7fe39b22c449f/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs?ref=d13e8dd41d44a73664943169d5b7fe39b22c449f", "patch": "@@ -1,3 +1,7 @@\n+// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n+// (see generator_interior.rs:27)\n+// ignore-test\n+\n #![feature(negative_impls, generators)]\n \n struct Foo;"}]}