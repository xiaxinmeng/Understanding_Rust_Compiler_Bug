{"sha": "4e47bd0464ce119a903e95b2dc20260258776d8e", "node_id": "C_kwDOAAsO6NoAKDRlNDdiZDA0NjRjZTExOWE5MDNlOTViMmRjMjAyNjAyNTg3NzZkOGU", "commit": {"author": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2023-01-05T08:45:44Z"}, "committer": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2023-01-11T09:32:13Z"}, "message": "Change `src/test` to `tests` in source files, fix tidy and tests", "tree": {"sha": "52c76c0ea157951a8882abce647baffda2ff6b0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c76c0ea157951a8882abce647baffda2ff6b0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e47bd0464ce119a903e95b2dc20260258776d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e47bd0464ce119a903e95b2dc20260258776d8e", "html_url": "https://github.com/rust-lang/rust/commit/4e47bd0464ce119a903e95b2dc20260258776d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e47bd0464ce119a903e95b2dc20260258776d8e/comments", "author": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "committer": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928d6566d70ef9ce21871b50197fb4c1a463731e", "url": "https://api.github.com/repos/rust-lang/rust/commits/928d6566d70ef9ce21871b50197fb4c1a463731e", "html_url": "https://github.com/rust-lang/rust/commit/928d6566d70ef9ce21871b50197fb4c1a463731e"}], "stats": {"total": 132, "additions": 66, "deletions": 66}, "files": [{"sha": "12ecb8cf4e17d6473d36610183c6e5224d196db9", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4e47bd0464ce119a903e95b2dc20260258776d8e/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4e47bd0464ce119a903e95b2dc20260258776d8e/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=4e47bd0464ce119a903e95b2dc20260258776d8e", "patch": "@@ -10,118 +10,118 @@ pushd rust\n \n command -v rg >/dev/null 2>&1 || cargo install ripgrep\n \n-rm -r src/test/ui/{extern/,unsized-locals/,lto/,linkage*} || true\n-for test in $(rg --files-with-matches \"lto|// needs-asm-support|// needs-unwind\" src/test/{ui,incremental}); do\n+rm -r tests/ui/{extern/,unsized-locals/,lto/,linkage*} || true\n+for test in $(rg --files-with-matches \"lto|// needs-asm-support|// needs-unwind\" tests/{ui,incremental}); do\n   rm $test\n done\n \n-for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~[^\\|]*\\s*ERR|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n+for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~[^\\|]*\\s*ERR|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" tests/ui); do\n   rm $test\n done\n \n-git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n-git checkout -- src/test/ui/proc-macro/pretty-print-hack/\n+git checkout -- tests/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n+git checkout -- tests/ui/proc-macro/pretty-print-hack/\n \n # missing features\n # ================\n \n # requires stack unwinding\n-rm src/test/incremental/change_crate_dep_kind.rs\n-rm src/test/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n+rm tests/incremental/change_crate_dep_kind.rs\n+rm tests/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n \n # requires compiling with -Cpanic=unwind\n-rm -r src/test/ui/macros/rfc-2011-nicer-assert-messages/\n-rm -r src/test/run-make/test-benches\n+rm -r tests/ui/macros/rfc-2011-nicer-assert-messages/\n+rm -r tests/run-make/test-benches\n \n # vendor intrinsics\n-rm src/test/ui/sse2.rs # cpuid not supported, so sse2 not detected\n-rm src/test/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n-rm src/test/ui/simd/array-type.rs # \"Index argument for `simd_insert` is not a constant\"\n-rm src/test/ui/simd/intrinsic/generic-bitmask-pass.rs # simd_bitmask unimplemented\n-rm src/test/ui/simd/intrinsic/generic-as.rs # simd_as unimplemented\n-rm src/test/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs # simd_saturating_add unimplemented\n-rm src/test/ui/simd/intrinsic/float-math-pass.rs # simd_fcos unimplemented\n-rm src/test/ui/simd/intrinsic/generic-gather-pass.rs # simd_gather unimplemented\n-rm src/test/ui/simd/intrinsic/generic-select-pass.rs # simd_select_bitmask unimplemented\n-rm src/test/ui/simd/issue-85915-simd-ptrs.rs # simd_gather unimplemented\n-rm src/test/ui/simd/issue-89193.rs # simd_gather unimplemented\n-rm src/test/ui/simd/simd-bitmask.rs # simd_bitmask unimplemented\n+rm tests/ui/sse2.rs # cpuid not supported, so sse2 not detected\n+rm tests/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n+rm tests/ui/simd/array-type.rs # \"Index argument for `simd_insert` is not a constant\"\n+rm tests/ui/simd/intrinsic/generic-bitmask-pass.rs # simd_bitmask unimplemented\n+rm tests/ui/simd/intrinsic/generic-as.rs # simd_as unimplemented\n+rm tests/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs # simd_saturating_add unimplemented\n+rm tests/ui/simd/intrinsic/float-math-pass.rs # simd_fcos unimplemented\n+rm tests/ui/simd/intrinsic/generic-gather-pass.rs # simd_gather unimplemented\n+rm tests/ui/simd/intrinsic/generic-select-pass.rs # simd_select_bitmask unimplemented\n+rm tests/ui/simd/issue-85915-simd-ptrs.rs # simd_gather unimplemented\n+rm tests/ui/simd/issue-89193.rs # simd_gather unimplemented\n+rm tests/ui/simd/simd-bitmask.rs # simd_bitmask unimplemented\n \n # exotic linkages\n-rm src/test/ui/issues/issue-33992.rs # unsupported linkages\n-rm src/test/incremental/hashes/function_interfaces.rs # same\n-rm src/test/incremental/hashes/statics.rs # same\n+rm tests/ui/issues/issue-33992.rs # unsupported linkages\n+rm tests/incremental/hashes/function_interfaces.rs # same\n+rm tests/incremental/hashes/statics.rs # same\n \n # variadic arguments\n-rm src/test/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n-rm src/test/ui/abi/variadic-ffi.rs # requires callee side vararg support\n+rm tests/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n+rm tests/ui/abi/variadic-ffi.rs # requires callee side vararg support\n \n # unsized locals\n-rm -r src/test/run-pass-valgrind/unsized-locals\n+rm -r tests/run-pass-valgrind/unsized-locals\n \n # misc unimplemented things\n-rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n-rm src/test/ui/target-feature/missing-plusminus.rs # error not implemented\n-rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n-rm -r src/test/run-make/emit-named-files # requires full --emit support\n-rm src/test/ui/abi/stack-probes.rs # stack probes not yet implemented\n-rm src/test/ui/simd/intrinsic/ptr-cast.rs # simd_expose_addr intrinsic unimplemented\n-rm -r src/test/run-make/repr128-dwarf # debuginfo test\n-rm src/test/codegen-units/item-collection/asm-sym.rs # requires support for sym in asm!()\n+rm tests/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n+rm tests/ui/target-feature/missing-plusminus.rs # error not implemented\n+rm tests/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n+rm -r tests/run-make/emit-named-files # requires full --emit support\n+rm tests/ui/abi/stack-probes.rs # stack probes not yet implemented\n+rm tests/ui/simd/intrinsic/ptr-cast.rs # simd_expose_addr intrinsic unimplemented\n+rm -r tests/run-make/repr128-dwarf # debuginfo test\n+rm tests/codegen-units/item-collection/asm-sym.rs # requires support for sym in asm!()\n \n # optimization tests\n # ==================\n-rm src/test/ui/codegen/issue-28950.rs # depends on stack size optimizations\n-rm src/test/ui/codegen/init-large-type.rs # same\n-rm src/test/ui/issues/issue-40883.rs # same\n-rm -r src/test/run-make/fmt-write-bloat/ # tests an optimization\n+rm tests/ui/codegen/issue-28950.rs # depends on stack size optimizations\n+rm tests/ui/codegen/init-large-type.rs # same\n+rm tests/ui/issues/issue-40883.rs # same\n+rm -r tests/run-make/fmt-write-bloat/ # tests an optimization\n \n # backend specific tests\n # ======================\n-rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n-rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n+rm tests/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+rm tests/ui/abi/stack-protector.rs # requires stack protector support\n \n # giving different but possibly correct results\n # =============================================\n-rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n-rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n-rm src/test/ui/consts/issue-33537.rs # same\n-rm src/test/ui/layout/valid_range_oob.rs # different ICE message\n+rm tests/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n+rm tests/ui/mir/mir_raw_fat_ptr.rs # same\n+rm tests/ui/consts/issue-33537.rs # same\n+rm tests/ui/layout/valid_range_oob.rs # different ICE message\n \n # doesn't work due to the way the rustc test suite is invoked.\n # should work when using ./x.py test the way it is intended\n # ============================================================\n-rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in dist/bin/\n-rm -r src/test/run-make/unstable-flag-required # same\n-rm -r src/test/run-make/rustdoc-* # same\n-rm -r src/test/run-make/issue-88756-default-output # same\n-rm -r src/test/run-make/remap-path-prefix-dwarf # requires llvm-dwarfdump\n-rm -r src/test/ui/consts/missing_span_in_backtrace.rs # expects sysroot source to be elsewhere\n+rm -r tests/run-make/emit-shared-files # requires the rustdoc executable in dist/bin/\n+rm -r tests/run-make/unstable-flag-required # same\n+rm -r tests/run-make/rustdoc-* # same\n+rm -r tests/run-make/issue-88756-default-output # same\n+rm -r tests/run-make/remap-path-prefix-dwarf # requires llvm-dwarfdump\n+rm -r tests/ui/consts/missing_span_in_backtrace.rs # expects sysroot source to be elsewhere\n \n # genuine bugs\n # ============\n-rm src/test/incremental/spike-neg1.rs # errors out for some reason\n-rm src/test/incremental/spike-neg2.rs # same\n-rm src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs # gives a stackoverflow before the backend runs\n-rm src/test/ui/mir/ssa-analysis-regression-50041.rs # produces ICE\n-rm src/test/ui/type-alias-impl-trait/assoc-projection-ice.rs # produces ICE\n+rm tests/incremental/spike-neg1.rs # errors out for some reason\n+rm tests/incremental/spike-neg2.rs # same\n+rm tests/ui/issues/issue-74564-if-expr-stack-overflow.rs # gives a stackoverflow before the backend runs\n+rm tests/ui/mir/ssa-analysis-regression-50041.rs # produces ICE\n+rm tests/ui/type-alias-impl-trait/assoc-projection-ice.rs # produces ICE\n \n-rm src/test/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n+rm tests/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n \n-rm src/test/ui/runtime/out-of-stack.rs # SIGSEGV instead of SIGABRT for some reason (#1301)\n+rm tests/ui/runtime/out-of-stack.rs # SIGSEGV instead of SIGABRT for some reason (#1301)\n \n # bugs in the test suite\n # ======================\n-rm src/test/ui/backtrace.rs # TODO warning\n-rm src/test/ui/simple_global_asm.rs # TODO add needs-asm-support\n-rm src/test/ui/test-attrs/test-type.rs # TODO panic message on stderr. correct stdout\n+rm tests/ui/backtrace.rs # TODO warning\n+rm tests/ui/simple_global_asm.rs # TODO add needs-asm-support\n+rm tests/ui/test-attrs/test-type.rs # TODO panic message on stderr. correct stdout\n # not sure if this is actually a bug in the test suite, but the symbol list shows the function without leading _ for some reason\n-rm -r src/test/run-make/native-link-modifier-bundle\n-rm src/test/ui/process/nofile-limit.rs # TODO some AArch64 linking issue\n-rm src/test/ui/dyn-star/dispatch-on-pin-mut.rs # TODO failed assertion in vtable::get_ptr_and_method_ref\n+rm -r tests/run-make/native-link-modifier-bundle\n+rm tests/ui/process/nofile-limit.rs # TODO some AArch64 linking issue\n+rm tests/ui/dyn-star/dispatch-on-pin-mut.rs # TODO failed assertion in vtable::get_ptr_and_method_ref\n \n-rm src/test/ui/stdio-is-blocking.rs # really slow with unoptimized libstd\n+rm tests/ui/stdio-is-blocking.rs # really slow with unoptimized libstd\n \n echo \"[TEST] rustc test suite\"\n-RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n+RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 tests/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n popd"}]}