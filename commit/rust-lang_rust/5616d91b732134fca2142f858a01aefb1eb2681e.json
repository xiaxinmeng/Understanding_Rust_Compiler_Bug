{"sha": "5616d91b732134fca2142f858a01aefb1eb2681e", "node_id": "C_kwDOAAsO6NoAKDU2MTZkOTFiNzMyMTM0ZmNhMjE0MmY4NThhMDFhZWZiMWViMjY4MWU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-25T22:03:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-30T10:52:28Z"}, "message": "internal: Add config to specifiy lru capacities for all queries", "tree": {"sha": "5006ee5fb0e7fc78a2db8363baf11fdbe12f02ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5006ee5fb0e7fc78a2db8363baf11fdbe12f02ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5616d91b732134fca2142f858a01aefb1eb2681e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5616d91b732134fca2142f858a01aefb1eb2681e", "html_url": "https://github.com/rust-lang/rust/commit/5616d91b732134fca2142f858a01aefb1eb2681e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5616d91b732134fca2142f858a01aefb1eb2681e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c076a36744f7f8be3b950891cbc0350dc29f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c076a36744f7f8be3b950891cbc0350dc29f6e", "html_url": "https://github.com/rust-lang/rust/commit/27c076a36744f7f8be3b950891cbc0350dc29f6e"}], "stats": {"total": 211, "additions": 202, "deletions": 9}, "files": [{"sha": "e4d3636ce5ed9445c2aff368736b1afd9ab8b60d", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -88,6 +88,7 @@ impl Attrs {\n         db: &dyn DefDatabase,\n         e: EnumId,\n     ) -> Arc<ArenaMap<LocalEnumVariantId, Attrs>> {\n+        let _p = profile::span(\"variants_attrs_query\");\n         // FIXME: There should be some proper form of mapping between item tree enum variant ids and hir enum variant ids\n         let mut res = ArenaMap::default();\n \n@@ -114,6 +115,7 @@ impl Attrs {\n         db: &dyn DefDatabase,\n         v: VariantId,\n     ) -> Arc<ArenaMap<LocalFieldId, Attrs>> {\n+        let _p = profile::span(\"fields_attrs_query\");\n         // FIXME: There should be some proper form of mapping between item tree field ids and hir field ids\n         let mut res = ArenaMap::default();\n \n@@ -253,6 +255,7 @@ impl Attrs {\n \n impl AttrsWithOwner {\n     pub(crate) fn attrs_query(db: &dyn DefDatabase, def: AttrDefId) -> Self {\n+        let _p = profile::span(\"attrs_query\");\n         // FIXME: this should use `Trace` to avoid duplication in `source_map` below\n         let raw_attrs = match def {\n             AttrDefId::ModuleId(module) => {"}, {"sha": "64f22261d21a2b90ea0150a1aa1269d4a4ade684", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 161, "deletions": 2, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -141,16 +141,175 @@ impl RootDatabase {\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_enable_proc_attr_macros(false);\n-        db.update_lru_capacity(lru_capacity);\n+        db.update_parse_query_lru_capacity(lru_capacity);\n         db\n     }\n \n-    pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n+    pub fn update_parse_query_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n         let lru_capacity = lru_capacity.unwrap_or(base_db::DEFAULT_LRU_CAP);\n         base_db::ParseQuery.in_db_mut(self).set_lru_capacity(lru_capacity);\n         hir::db::ParseMacroExpansionQuery.in_db_mut(self).set_lru_capacity(lru_capacity);\n         hir::db::MacroExpandQuery.in_db_mut(self).set_lru_capacity(lru_capacity);\n     }\n+\n+    pub fn update_lru_capacities(&mut self, lru_capacities: &FxHashMap<Box<str>, usize>) {\n+        use hir::db as hir_db;\n+\n+        base_db::ParseQuery.in_db_mut(self).set_lru_capacity(\n+            lru_capacities.get(stringify!(ParseQuery)).copied().unwrap_or(base_db::DEFAULT_LRU_CAP),\n+        );\n+        hir_db::ParseMacroExpansionQuery.in_db_mut(self).set_lru_capacity(\n+            lru_capacities\n+                .get(stringify!(ParseMacroExpansionQuery))\n+                .copied()\n+                .unwrap_or(base_db::DEFAULT_LRU_CAP),\n+        );\n+        hir_db::MacroExpandQuery.in_db_mut(self).set_lru_capacity(\n+            lru_capacities\n+                .get(stringify!(MacroExpandQuery))\n+                .copied()\n+                .unwrap_or(base_db::DEFAULT_LRU_CAP),\n+        );\n+\n+        macro_rules! update_lru_capacity_per_query {\n+            ($( $module:ident :: $query:ident )*) => {$(\n+                if let Some(&cap) = lru_capacities.get(stringify!($query)) {\n+                    $module::$query.in_db_mut(self).set_lru_capacity(cap);\n+                }\n+            )*}\n+        }\n+        update_lru_capacity_per_query![\n+            // SourceDatabase\n+            // base_db::ParseQuery\n+            // base_db::CrateGraphQuery\n+            // base_db::ProcMacrosQuery\n+\n+            // SourceDatabaseExt\n+            // base_db::FileTextQuery\n+            // base_db::FileSourceRootQuery\n+            // base_db::SourceRootQuery\n+            base_db::SourceRootCratesQuery\n+\n+            // ExpandDatabase\n+            hir_db::AstIdMapQuery\n+            // hir_db::ParseMacroExpansionQuery\n+            // hir_db::InternMacroCallQuery\n+            hir_db::MacroArgTextQuery\n+            hir_db::MacroDefQuery\n+            // hir_db::MacroExpandQuery\n+            hir_db::ExpandProcMacroQuery\n+            hir_db::MacroExpandErrorQuery\n+            hir_db::HygieneFrameQuery\n+\n+            // DefDatabase\n+            hir_db::FileItemTreeQuery\n+            hir_db::CrateDefMapQueryQuery\n+            hir_db::BlockDefMapQuery\n+            hir_db::StructDataQuery\n+            hir_db::StructDataWithDiagnosticsQuery\n+            hir_db::UnionDataQuery\n+            hir_db::UnionDataWithDiagnosticsQuery\n+            hir_db::EnumDataQuery\n+            hir_db::EnumDataWithDiagnosticsQuery\n+            hir_db::ImplDataQuery\n+            hir_db::ImplDataWithDiagnosticsQuery\n+            hir_db::TraitDataQuery\n+            hir_db::TraitDataWithDiagnosticsQuery\n+            hir_db::TraitAliasDataQuery\n+            hir_db::TypeAliasDataQuery\n+            hir_db::FunctionDataQuery\n+            hir_db::ConstDataQuery\n+            hir_db::StaticDataQuery\n+            hir_db::Macro2DataQuery\n+            hir_db::MacroRulesDataQuery\n+            hir_db::ProcMacroDataQuery\n+            hir_db::BodyWithSourceMapQuery\n+            hir_db::BodyQuery\n+            hir_db::ExprScopesQuery\n+            hir_db::GenericParamsQuery\n+            hir_db::VariantsAttrsQuery\n+            hir_db::FieldsAttrsQuery\n+            hir_db::VariantsAttrsSourceMapQuery\n+            hir_db::FieldsAttrsSourceMapQuery\n+            hir_db::AttrsQuery\n+            hir_db::CrateLangItemsQuery\n+            hir_db::LangItemQuery\n+            hir_db::ImportMapQuery\n+            hir_db::FieldVisibilitiesQuery\n+            hir_db::FunctionVisibilityQuery\n+            hir_db::ConstVisibilityQuery\n+            hir_db::CrateSupportsNoStdQuery\n+\n+            // HirDatabase\n+            hir_db::InferQueryQuery\n+            hir_db::MirBodyQuery\n+            hir_db::BorrowckQuery\n+            hir_db::TyQuery\n+            hir_db::ValueTyQuery\n+            hir_db::ImplSelfTyQuery\n+            hir_db::ConstParamTyQuery\n+            hir_db::ConstEvalQuery\n+            hir_db::ConstEvalDiscriminantQuery\n+            hir_db::ImplTraitQuery\n+            hir_db::FieldTypesQuery\n+            hir_db::LayoutOfAdtQuery\n+            hir_db::TargetDataLayoutQuery\n+            hir_db::CallableItemSignatureQuery\n+            hir_db::ReturnTypeImplTraitsQuery\n+            hir_db::GenericPredicatesForParamQuery\n+            hir_db::GenericPredicatesQuery\n+            hir_db::TraitEnvironmentQuery\n+            hir_db::GenericDefaultsQuery\n+            hir_db::InherentImplsInCrateQuery\n+            hir_db::InherentImplsInBlockQuery\n+            hir_db::IncoherentInherentImplCratesQuery\n+            hir_db::TraitImplsInCrateQuery\n+            hir_db::TraitImplsInBlockQuery\n+            hir_db::TraitImplsInDepsQuery\n+            // hir_db::InternCallableDefQuery\n+            // hir_db::InternLifetimeParamIdQuery\n+            // hir_db::InternImplTraitIdQuery\n+            // hir_db::InternTypeOrConstParamIdQuery\n+            // hir_db::InternClosureQuery\n+            // hir_db::InternGeneratorQuery\n+            hir_db::AssociatedTyDataQuery\n+            hir_db::TraitDatumQuery\n+            hir_db::StructDatumQuery\n+            hir_db::ImplDatumQuery\n+            hir_db::FnDefDatumQuery\n+            hir_db::FnDefVarianceQuery\n+            hir_db::AdtVarianceQuery\n+            hir_db::AssociatedTyValueQuery\n+            hir_db::TraitSolveQueryQuery\n+            hir_db::ProgramClausesForChalkEnvQuery\n+\n+            // SymbolsDatabase\n+            symbol_index::ModuleSymbolsQuery\n+            symbol_index::LibrarySymbolsQuery\n+            // symbol_index::LocalRootsQuery\n+            // symbol_index::LibraryRootsQuery\n+\n+            // LineIndexDatabase\n+            crate::LineIndexQuery\n+\n+            // InternDatabase\n+            // hir_db::InternFunctionQuery\n+            // hir_db::InternStructQuery\n+            // hir_db::InternUnionQuery\n+            // hir_db::InternEnumQuery\n+            // hir_db::InternConstQuery\n+            // hir_db::InternStaticQuery\n+            // hir_db::InternTraitQuery\n+            // hir_db::InternTraitAliasQuery\n+            // hir_db::InternTypeAliasQuery\n+            // hir_db::InternImplQuery\n+            // hir_db::InternExternBlockQuery\n+            // hir_db::InternBlockQuery\n+            // hir_db::InternMacro2Query\n+            // hir_db::InternProcMacroQuery\n+            // hir_db::InternMacroRulesQuery\n+        ];\n+    }\n }\n \n impl salsa::ParallelDatabase for RootDatabase {"}, {"sha": "f70496451d2209b243425a69c43b169bb05e2ee8", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -67,7 +67,7 @@ use ide_db::{\n         salsa::{self, ParallelDatabase},\n         CrateOrigin, Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n     },\n-    symbol_index, LineIndexDatabase,\n+    symbol_index, FxHashMap, LineIndexDatabase,\n };\n use syntax::SourceFile;\n \n@@ -154,7 +154,11 @@ impl AnalysisHost {\n     }\n \n     pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n-        self.db.update_lru_capacity(lru_capacity);\n+        self.db.update_parse_query_lru_capacity(lru_capacity);\n+    }\n+\n+    pub fn update_lru_capacities(&mut self, lru_capacities: &FxHashMap<Box<str>, usize>) {\n+        self.db.update_lru_capacities(lru_capacities);\n     }\n \n     /// Returns a snapshot of the current state, which you can query for"}, {"sha": "cee2ee587347847ae6e160b4d20f5b4e86a5c155", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -7,7 +7,7 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n-use std::{fmt, iter, path::PathBuf};\n+use std::{fmt, iter, ops::Not, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use ide::{\n@@ -418,6 +418,8 @@ config_data! {\n \n         /// Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n         lru_capacity: Option<usize>                 = \"null\",\n+        /// Sets the LRU capacity of the specified queries.\n+        lru_query_capacities: FxHashMap<Box<str>, usize> = \"{}\",\n \n         /// Whether to show `can't find Cargo.toml` error message.\n         notifications_cargoTomlNotFound: bool      = \"true\",\n@@ -1085,10 +1087,14 @@ impl Config {\n         extra_env\n     }\n \n-    pub fn lru_capacity(&self) -> Option<usize> {\n+    pub fn lru_parse_query_capacity(&self) -> Option<usize> {\n         self.data.lru_capacity\n     }\n \n+    pub fn lru_query_capacities(&self) -> Option<&FxHashMap<Box<str>, usize>> {\n+        self.data.lru_query_capacities.is_empty().not().then(|| &self.data.lru_query_capacities)\n+    }\n+\n     pub fn proc_macro_srv(&self) -> Option<(AbsPathBuf, /* is path explicitly set */ bool)> {\n         if !self.data.procMacro_enable {\n             return None;\n@@ -2020,6 +2026,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n         \"FxHashMap<String, String>\" => set! {\n             \"type\": \"object\",\n         },\n+        \"FxHashMap<Box<str>, usize>\" => set! {\n+            \"type\": \"object\",\n+        },\n         \"Option<usize>\" => set! {\n             \"type\": [\"null\", \"integer\"],\n             \"minimum\": 0,"}, {"sha": "05b98e655969bc98eb5ebbcaefa1f590626e13f6", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -139,7 +139,10 @@ impl GlobalState {\n             Handle { handle, receiver }\n         };\n \n-        let analysis_host = AnalysisHost::new(config.lru_capacity());\n+        let mut analysis_host = AnalysisHost::new(config.lru_parse_query_capacity());\n+        if let Some(capacities) = config.lru_query_capacities() {\n+            analysis_host.update_lru_capacities(capacities);\n+        }\n         let (flycheck_sender, flycheck_receiver) = unbounded();\n         let mut this = GlobalState {\n             sender,"}, {"sha": "2349675f62d9e9cd883d3e0f6c89f2b890aa8f5b", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -73,8 +73,13 @@ impl GlobalState {\n     pub(crate) fn update_configuration(&mut self, config: Config) {\n         let _p = profile::span(\"GlobalState::update_configuration\");\n         let old_config = mem::replace(&mut self.config, Arc::new(config));\n-        if self.config.lru_capacity() != old_config.lru_capacity() {\n-            self.analysis_host.update_lru_capacity(self.config.lru_capacity());\n+        if self.config.lru_parse_query_capacity() != old_config.lru_parse_query_capacity() {\n+            self.analysis_host.update_lru_capacity(self.config.lru_parse_query_capacity());\n+        }\n+        if self.config.lru_query_capacities() != old_config.lru_query_capacities() {\n+            self.analysis_host.update_lru_capacities(\n+                &self.config.lru_query_capacities().cloned().unwrap_or_default(),\n+            );\n         }\n         if self.config.linked_projects() != old_config.linked_projects() {\n             self.fetch_workspaces_queue.request_op(\"linked projects changed\".to_string())"}, {"sha": "12dfe394f1d5bdb659a870ecec78e1954ee94796", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -639,6 +639,11 @@ Elements must be paths pointing to `Cargo.toml`,\n --\n Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n --\n+[[rust-analyzer.lru.query.capacities]]rust-analyzer.lru.query.capacities (default: `{}`)::\n++\n+--\n+Sets the LRU capacity of the specified queries.\n+--\n [[rust-analyzer.notifications.cargoTomlNotFound]]rust-analyzer.notifications.cargoTomlNotFound (default: `true`)::\n +\n --"}, {"sha": "59ac9c8d17f5b6389e1a0fd804928d25066654c5", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5616d91b732134fca2142f858a01aefb1eb2681e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/5616d91b732134fca2142f858a01aefb1eb2681e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=5616d91b732134fca2142f858a01aefb1eb2681e", "patch": "@@ -1247,6 +1247,11 @@\n                     ],\n                     \"minimum\": 0\n                 },\n+                \"rust-analyzer.lru.query.capacities\": {\n+                    \"markdownDescription\": \"Sets the LRU capacity of the specified queries.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.notifications.cargoTomlNotFound\": {\n                     \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message.\",\n                     \"default\": true,"}]}