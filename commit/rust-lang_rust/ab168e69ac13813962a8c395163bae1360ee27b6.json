{"sha": "ab168e69ac13813962a8c395163bae1360ee27b6", "node_id": "C_kwDOAAsO6NoAKGFiMTY4ZTY5YWMxMzgxMzk2MmE4YzM5NTE2M2JhZTEzNjBlZTI3YjY", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-14T16:13:17Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-23T18:38:53Z"}, "message": "Some cleanup", "tree": {"sha": "f4eabd81d1a3dc390ba9a9df44691e93e7dfe733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4eabd81d1a3dc390ba9a9df44691e93e7dfe733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab168e69ac13813962a8c395163bae1360ee27b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHEwj0ACgkQtAh+UQ6Y\nsWR+uA//cum/8VLhO4A89y0eLUb+tQRJNve5oyL1zTQr4kl61zJkcHbqFHU5tWzd\nI59yFAW71++6ZwlSO7KtjuOtDcjfvh0/7HhTmCG40b8QQ7Y9yb/Pf3gfW1o0LLUN\nZ93mw/1qk5Ehiu7QsVC6WqGSMwq48zDlNXdek3sasMS41iznmQ2WqNhV1Zj7d2wr\n5ZQpMlIHeKds5aH7ytKqcnF2bATipvGq2S2jc6lL4HErroUINSxnA0SR9ico+R7N\n4G0i7Y2ofMHNM5LzUWewmFdDoRcex8Ns86Zl1Dx5sDMY+NZa5c8HaeyQbm2d4RF9\n1OubS7+yzFTqYLLb9l8k1xQFH8D5K36I8+0hCAUhY0C+2sPaXT5FqRsYZOTbHT8G\n8jdRzUhuUXtL87lwFPk6DKhMs5KMJ1H6TqMaG07Uf9oPGDTT9KmYb6Es8f+jQps/\nXQLXt0EuaIgzvshQxhYQ6khl0EvbF4piy7pZLpURlzpKFrkwJWdYN9V2pFANNJjS\nRRwDllULaeTmECkaklausEDqmbaGsFZ5FU5agvzYV2sBkVSbTzkhCXBa/zGwklNL\n4f47VJWW0X4aYF9AI8rJ7q98u/84GN1DSlGXZ17CpaK+0keGPUG1LqXzCBV1f1hq\nwj4WRLVzfr/BTbO9Q9kDSkIp+cqjeSd2MxWXH+zZVtOhdmURrBs=\n=4M77\n-----END PGP SIGNATURE-----", "payload": "tree f4eabd81d1a3dc390ba9a9df44691e93e7dfe733\nparent 49560e9c4933cbec077156b4645888211893339f\nauthor Aaron Hill <aa1ronham@gmail.com> 1639498397 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1640284733 -0500\n\nSome cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab168e69ac13813962a8c395163bae1360ee27b6", "html_url": "https://github.com/rust-lang/rust/commit/ab168e69ac13813962a8c395163bae1360ee27b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab168e69ac13813962a8c395163bae1360ee27b6/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49560e9c4933cbec077156b4645888211893339f", "url": "https://api.github.com/repos/rust-lang/rust/commits/49560e9c4933cbec077156b4645888211893339f", "html_url": "https://github.com/rust-lang/rust/commit/49560e9c4933cbec077156b4645888211893339f"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "6d76d09f6190e21d5fa56fe8c17be3c3299df2ab", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab168e69ac13813962a8c395163bae1360ee27b6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab168e69ac13813962a8c395163bae1360ee27b6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=ab168e69ac13813962a8c395163bae1360ee27b6", "patch": "@@ -83,17 +83,12 @@ impl QueryContext for QueryCtxt<'_> {\n         &self,\n         token: QueryJobId<Self::DepKind>,\n         diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n-        read_allowed: bool,\n         compute: impl FnOnce() -> R,\n     ) -> R {\n         // The `TyCtxt` stored in TLS has the same global interner lifetime\n         // as `self`, so we use `with_related_context` to relate the 'tcx lifetimes\n         // when accessing the `ImplicitCtxt`.\n         tls::with_related_context(**self, move |current_icx| {\n-            let mut old_read_allowed = false;\n-            if let Some(task_deps) = current_icx.task_deps {\n-                old_read_allowed = std::mem::replace(&mut task_deps.lock().read_allowed, read_allowed);\n-            }\n             // Update the `ImplicitCtxt` to point to our new query job.\n             let new_icx = ImplicitCtxt {\n                 tcx: **self,\n@@ -104,14 +99,9 @@ impl QueryContext for QueryCtxt<'_> {\n             };\n \n             // Use the `ImplicitCtxt` while we execute the query.\n-            let res = tls::enter_context(&new_icx, |_| {\n+            tls::enter_context(&new_icx, |_| {\n                 rustc_data_structures::stack::ensure_sufficient_stack(compute)\n-            });\n-\n-            if let Some(task_deps) = new_icx.task_deps {\n-                task_deps.lock().read_allowed = old_read_allowed;\n-            }\n-            res\n+            })\n         })\n     }\n }"}, {"sha": "a2f7843baaa680b2c1b52cf679646d470102f0ae", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab168e69ac13813962a8c395163bae1360ee27b6/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab168e69ac13813962a8c395163bae1360ee27b6/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=ab168e69ac13813962a8c395163bae1360ee27b6", "patch": "@@ -142,7 +142,6 @@ pub trait QueryContext: HasDepContext {\n         &self,\n         token: QueryJobId<Self::DepKind>,\n         diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n-        read_allowed: bool,\n         compute: impl FnOnce() -> R,\n     ) -> R;\n }"}, {"sha": "cd31c5b3f0870b44e67cab0fc3cceee8f425e367", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab168e69ac13813962a8c395163bae1360ee27b6/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab168e69ac13813962a8c395163bae1360ee27b6/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=ab168e69ac13813962a8c395163bae1360ee27b6", "patch": "@@ -2,14 +2,14 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n+use crate::dep_graph::DepKind;\n use crate::dep_graph::{DepContext, DepNode, DepNodeIndex, DepNodeParams, TaskDeps};\n use crate::query::caches::QueryCache;\n use crate::query::config::{QueryDescription, QueryVtable};\n use crate::query::job::{\n     report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId,\n };\n use crate::query::{QueryContext, QueryMap, QuerySideEffects, QueryStackFrame};\n-use crate::dep_graph::DepKind;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHasher};\n #[cfg(parallel_compiler)]\n@@ -440,7 +440,7 @@ where\n     // Fast path for when incr. comp. is off.\n     if !dep_graph.is_fully_enabled() {\n         let prof_timer = tcx.dep_context().profiler().query_provider();\n-        let result = tcx.start_query(job_id, None, true, || query.compute(*tcx.dep_context(), key));\n+        let result = tcx.start_query(job_id, None, || query.compute(*tcx.dep_context(), key));\n         let dep_node_index = dep_graph.next_virtual_depnode_index();\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n         return (result, dep_node_index);\n@@ -453,7 +453,7 @@ where\n \n         // The diagnostics for this query will be promoted to the current session during\n         // `try_mark_green()`, so we can ignore them here.\n-        if let Some(ret) = tcx.start_query(job_id, None, false, || {\n+        if let Some(ret) = tcx.start_query(job_id, None, || {\n             try_load_from_disk_and_cache_in_memory(tcx, &key, &dep_node, query)\n         }) {\n             return ret;\n@@ -463,7 +463,7 @@ where\n     let prof_timer = tcx.dep_context().profiler().query_provider();\n     let diagnostics = Lock::new(ThinVec::new());\n \n-    let (result, dep_node_index) = tcx.start_query(job_id, Some(&diagnostics), true, || {\n+    let (result, dep_node_index) = tcx.start_query(job_id, Some(&diagnostics), || {\n         if query.anon {\n             return dep_graph.with_anon_task(*tcx.dep_context(), query.dep_kind, || {\n                 query.compute(*tcx.dep_context(), key)"}]}