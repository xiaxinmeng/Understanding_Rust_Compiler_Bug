{"sha": "ed46a777c8f2fdd54811f8af1660fd55f7869d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNDZhNzc3YzhmMmZkZDU0ODExZjhhZjE2NjBmZDU1Zjc4NjlkMDU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-01T07:20:46Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-01T13:29:26Z"}, "message": "Use str::repeat", "tree": {"sha": "cb9fa6485239a44507805c36ac58997d630a884f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb9fa6485239a44507805c36ac58997d630a884f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed46a777c8f2fdd54811f8af1660fd55f7869d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed46a777c8f2fdd54811f8af1660fd55f7869d05", "html_url": "https://github.com/rust-lang/rust/commit/ed46a777c8f2fdd54811f8af1660fd55f7869d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed46a777c8f2fdd54811f8af1660fd55f7869d05/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6423cf4b15afe31e982fb217e7cb8ef11a39348", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6423cf4b15afe31e982fb217e7cb8ef11a39348", "html_url": "https://github.com/rust-lang/rust/commit/e6423cf4b15afe31e982fb217e7cb8ef11a39348"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "0e674f771087470746d74478e3dbdeed5a04e067", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed46a777c8f2fdd54811f8af1660fd55f7869d05/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed46a777c8f2fdd54811f8af1660fd55f7869d05/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=ed46a777c8f2fdd54811f8af1660fd55f7869d05", "patch": "@@ -104,7 +104,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     };\n     let parent_rewrite = parent\n         .rewrite(context, parent_shape)\n-        .map(|parent_rw| parent_rw + &repeat_try(prefix_try_num))?;\n+        .map(|parent_rw| parent_rw + &\"?\".repeat(prefix_try_num))?;\n     let parent_rewrite_contains_newline = parent_rewrite.contains('\\n');\n     let is_small_parent = parent_rewrite.len() <= context.config.tab_spaces();\n \n@@ -297,7 +297,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n             join_rewrites(&rewrites, &connector)\n         )\n     };\n-    let result = format!(\"{}{}\", result, repeat_try(suffix_try_num));\n+    let result = format!(\"{}{}\", result, \"?\".repeat(suffix_try_num));\n     if context.config.indent_style() == IndentStyle::Visual {\n         wrap_str(result, context.config.max_width(), shape)\n     } else {\n@@ -318,18 +318,14 @@ fn chain_only_try(exprs: &[ast::Expr]) -> bool {\n \n // Try to rewrite and replace the last non-try child. Return `true` if\n // replacing succeeds.\n-fn repeat_try(try_count: usize) -> String {\n-    iter::repeat(\"?\").take(try_count).collect::<String>()\n-}\n-\n fn rewrite_try(\n     expr: &ast::Expr,\n     try_count: usize,\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n     let sub_expr = expr.rewrite(context, shape.sub_width(try_count)?)?;\n-    Some(format!(\"{}{}\", sub_expr, repeat_try(try_count)))\n+    Some(format!(\"{}{}\", sub_expr, \"?\".repeat(try_count)))\n }\n \n fn join_rewrites(rewrites: &[String], connector: &str) -> String {"}, {"sha": "151b3acada27e312154b4edd6cc8043e066a5d2f", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed46a777c8f2fdd54811f8af1660fd55f7869d05/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed46a777c8f2fdd54811f8af1660fd55f7869d05/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ed46a777c8f2fdd54811f8af1660fd55f7869d05", "patch": "@@ -34,7 +34,6 @@ extern crate unicode_segmentation;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, BufRead, Write};\n-use std::iter::repeat;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -200,7 +199,7 @@ impl FormatReport {\n         for (file, errors) in &self.file_error_map {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n-                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+                let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n \n                 // First line: the overview of error\n                 t.fg(term::color::RED)?;\n@@ -259,8 +258,8 @@ impl FormatReport {\n }\n \n fn target_str(space_len: usize, target_len: usize) -> String {\n-    let empty_line: String = repeat(\" \").take(space_len).collect();\n-    let overflowed: String = repeat(\"^\").take(target_len).collect();\n+    let empty_line = \" \".repeat(space_len);\n+    let overflowed = \"^\".repeat(target_len);\n     empty_line + &overflowed\n }\n \n@@ -270,7 +269,7 @@ impl fmt::Display for FormatReport {\n         for (file, errors) in &self.file_error_map {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n-                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+                let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n \n                 let error_line_buffer = if error.line_buffer.is_empty() {\n                     String::from(\" \")"}, {"sha": "5140ac35be997e7417470a255014a973e9415f98", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed46a777c8f2fdd54811f8af1660fd55f7869d05/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed46a777c8f2fdd54811f8af1660fd55f7869d05/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=ed46a777c8f2fdd54811f8af1660fd55f7869d05", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n-use std::iter::repeat;\n \n use syntax::codemap::{BytePos, FileName, Pos, Span};\n \n@@ -122,7 +121,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n-        let blank_lines: String = repeat('\\n').take(newline_count).collect();\n+        let blank_lines = \"\\n\".repeat(newline_count);\n         self.push_str(&blank_lines);\n     }\n "}]}