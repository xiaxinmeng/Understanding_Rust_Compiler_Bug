{"sha": "8d7274b31efe248322f9b0d6a3082a92317f1dfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzI3NGIzMWVmZTI0ODMyMmY5YjBkNmEzMDgyYTkyMzE3ZjFkZmE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-02T07:29:39Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-02T19:13:34Z"}, "message": "alloc: fix reallocate_inplace implementation\n\nThe returned size is the new real size of the allocation.", "tree": {"sha": "bce4971b689a99799728e08b415602a97785da7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce4971b689a99799728e08b415602a97785da7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d7274b31efe248322f9b0d6a3082a92317f1dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7274b31efe248322f9b0d6a3082a92317f1dfa", "html_url": "https://github.com/rust-lang/rust/commit/8d7274b31efe248322f9b0d6a3082a92317f1dfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d7274b31efe248322f9b0d6a3082a92317f1dfa/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53874eccf0657d5d9c0a9ed9f84380d27d1c423", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53874eccf0657d5d9c0a9ed9f84380d27d1c423", "html_url": "https://github.com/rust-lang/rust/commit/d53874eccf0657d5d9c0a9ed9f84380d27d1c423"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "72384e25c3bee21df381bd6acf1ee45d5d81c194", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8d7274b31efe248322f9b0d6a3082a92317f1dfa/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7274b31efe248322f9b0d6a3082a92317f1dfa/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=8d7274b31efe248322f9b0d6a3082a92317f1dfa", "patch": "@@ -182,9 +182,15 @@ mod imp {\n \n     #[inline]\n     pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint,\n-                                     _old_size: uint) -> bool {\n+                                     old_size: uint) -> bool {\n         let flags = align_to_flags(align);\n-        je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) == size as size_t\n+        let new_size = je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) as uint;\n+        // checking for failure to shrink is tricky\n+        if size < old_size {\n+            usable_size(size, align) == new_size as uint\n+        } else {\n+            new_size >= size\n+        }\n     }\n \n     #[inline]\n@@ -250,9 +256,9 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, _size: uint, _align: uint,\n-                                     _old_size: uint) -> bool {\n-        false\n+    pub unsafe fn reallocate_inplace(_ptr: *mut u8, size: uint, _align: uint,\n+                                     old_size: uint) -> bool {\n+        size == old_size\n     }\n \n     #[inline]\n@@ -312,9 +318,9 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, _size: uint, _align: uint,\n-                                     _old_size: uint) -> bool {\n-        false\n+    pub unsafe fn reallocate_inplace(_ptr: *mut u8, size: uint, _align: uint,\n+                                     old_size: uint) -> bool {\n+        size == old_size\n     }\n \n     #[inline]\n@@ -335,10 +341,21 @@ mod imp {\n }\n \n #[cfg(test)]\n-mod bench {\n+mod test {\n     extern crate test;\n     use self::test::Bencher;\n \n+    #[test]\n+    fn basic_reallocate_inplace_noop() {\n+        unsafe {\n+            let size = 4000;\n+            let ptr = heap::allocate(size, 8);\n+            let ret = heap::reallocate_inplace(ptr, size, 8, size);\n+            heap::deallocate(ptr, size, 8);\n+            assert!(ret);\n+        }\n+    }\n+\n     #[bench]\n     fn alloc_owned_small(b: &mut Bencher) {\n         b.iter(|| {"}]}