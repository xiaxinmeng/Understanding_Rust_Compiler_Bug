{"sha": "35e6c0252422b178cc3b21f7f1510c80bcd064c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTZjMDI1MjQyMmIxNzhjYzNiMjFmN2YxNTEwYzgwYmNkMDY0Yzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-11-02T01:02:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-11-19T00:19:46Z"}, "message": "Use '..' as multi-field wildcard in enums and structs.", "tree": {"sha": "d4d861f5c53c260281728fdd11e6a8b6d6ed29bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4d861f5c53c260281728fdd11e6a8b6d6ed29bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e6c0252422b178cc3b21f7f1510c80bcd064c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e6c0252422b178cc3b21f7f1510c80bcd064c8", "html_url": "https://github.com/rust-lang/rust/commit/35e6c0252422b178cc3b21f7f1510c80bcd064c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e6c0252422b178cc3b21f7f1510c80bcd064c8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff", "html_url": "https://github.com/rust-lang/rust/commit/3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "8fb96a3e07ae97da1e8362840c80140c8541408c", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35e6c0252422b178cc3b21f7f1510c80bcd064c8/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e6c0252422b178cc3b21f7f1510c80bcd064c8/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=35e6c0252422b178cc3b21f7f1510c80bcd064c8", "patch": "@@ -39,6 +39,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteConstPointer,\n     ObsoleteEmptyImpl,\n     ObsoleteLoopAsContinue,\n+    ObsoleteEnumWildcard,\n+    ObsoleteStructWildcard\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -113,6 +115,14 @@ impl ParserObsoleteMethods for Parser {\n                 \"`loop` is now only used for loops and `continue` is used for \\\n                  skipping iterations\"\n             ),\n+            ObsoleteEnumWildcard => (\n+                \"enum wildcard\",\n+                \"use `..` instead of `*` for matching all enum fields\"\n+            ),\n+            ObsoleteStructWildcard => (\n+                \"struct wildcard\",\n+                \"use `..` instead of `_` for matching trailing struct fields\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "ea861305d9fcc3dca233c5f39e4e33e69a16a44b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35e6c0252422b178cc3b21f7f1510c80bcd064c8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e6c0252422b178cc3b21f7f1510c80bcd064c8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=35e6c0252422b178cc3b21f7f1510c80bcd064c8", "patch": "@@ -2755,7 +2755,12 @@ impl Parser {\n             if first { first = false; }\n             else { self.expect(&token::COMMA); }\n \n+            etc = *self.token == token::UNDERSCORE || *self.token == token::DOTDOT;\n             if *self.token == token::UNDERSCORE {\n+                // FIXME #5830 activate after snapshot\n+                // self.obsolete(*self.span, ObsoleteStructWildcard);\n+            }\n+            if etc {\n                 self.bump();\n                 if *self.token != token::RBRACE {\n                     self.fatal(\n@@ -3016,9 +3021,19 @@ impl Parser {\n                                     _ => false,\n                                 }\n                             };\n-                            if is_star {\n+                            let is_dotdot = do self.look_ahead(1) |t| {\n+                                match *t {\n+                                    token::DOTDOT => true,\n+                                    _ => false,\n+                                }\n+                            };\n+                            if is_star | is_dotdot {\n                                 // This is a \"top constructor only\" pat\n                                 self.bump();\n+                                if is_star {\n+                                    // FIXME #5830 activate after snapshot\n+                                    // self.obsolete(*self.span, ObsoleteEnumWildcard);\n+                                }\n                                 self.bump();\n                                 self.expect(&token::RPAREN);\n                                 pat = PatEnum(enum_path, None);"}, {"sha": "b71f139c684a91a13c63c59427f06f5701199075", "filename": "src/test/run-pass/ignore-all-the-things.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/35e6c0252422b178cc3b21f7f1510c80bcd064c8/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e6c0252422b178cc3b21f7f1510c80bcd064c8/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs?ref=35e6c0252422b178cc3b21f7f1510c80bcd064c8", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo(int, int, int, int);\n+struct Bar{a: int, b: int, c: int, d: int}\n+\n+pub fn main() {\n+    let Foo(..) = Foo(5, 5, 5, 5);\n+    let Foo(*) = Foo(5, 5, 5, 5);\n+    let Bar{..} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    let Bar{_} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    //let (..) = (5, 5, 5, 5);\n+    //let Foo(a, b, ..) = Foo(5, 5, 5, 5);\n+    //let Foo(.., d) = Foo(5, 5, 5, 5);\n+    //let (a, b, ..) = (5, 5, 5, 5);\n+    //let (.., c, d) = (5, 5, 5, 5);\n+    let Bar{b: b, ..} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    let Bar{b: b, _} = Bar{a: 5, b: 5, c: 5, d: 5};\n+    /*match [5, 5, 5, 5] {\n+        [a, ..] => { }\n+    }*/\n+    /*match [5, 5, 5, 5] {\n+        [.., b] => { }\n+    }*/\n+    /*match [5, 5, 5, 5] {\n+        [a, .., b] => { }\n+    }*/\n+    match [5, 5, 5] {\n+        [a, .._] => { }\n+    }\n+    match [5, 5, 5] {\n+        [.._, a] => { }\n+    }\n+    match [5, 5, 5] {\n+        [a, .._, b] => { }\n+    }\n+}"}]}