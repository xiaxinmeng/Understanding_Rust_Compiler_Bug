{"sha": "ddd119b2fed57eb6b19c44c18108de95c564a48d", "node_id": "C_kwDOAAsO6NoAKGRkZDExOWIyZmVkNTdlYjZiMTljNDRjMTgxMDhkZTk1YzU2NGE0OGQ", "commit": {"author": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-10-12T21:34:13Z"}, "committer": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-10-12T21:34:13Z"}, "message": "expand documentation on type conversion w.r.t. `UnsafeCell`", "tree": {"sha": "dda0f5715e7abf9ca8ffcdd52f5cd7b6815b275c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda0f5715e7abf9ca8ffcdd52f5cd7b6815b275c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd119b2fed57eb6b19c44c18108de95c564a48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd119b2fed57eb6b19c44c18108de95c564a48d", "html_url": "https://github.com/rust-lang/rust/commit/ddd119b2fed57eb6b19c44c18108de95c564a48d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd119b2fed57eb6b19c44c18108de95c564a48d/comments", "author": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c37c801ad737006c494f6b3bd97ff59764573ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c37c801ad737006c494f6b3bd97ff59764573ae", "html_url": "https://github.com/rust-lang/rust/commit/9c37c801ad737006c494f6b3bd97ff59764573ae"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "4dee386f8879e32eba881776289f18e0bd96cd6f", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddd119b2fed57eb6b19c44c18108de95c564a48d/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd119b2fed57eb6b19c44c18108de95c564a48d/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=ddd119b2fed57eb6b19c44c18108de95c564a48d", "patch": "@@ -1811,14 +1811,19 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// [`.get_mut()`]: `UnsafeCell::get_mut`\n ///\n-/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T` if and only if\n-/// the type `T` does not contain a [niche] (e.g. the type `Option<NonNull<u8>>` is typically\n-/// 8 bytes large on 64-bit platforms, but the type `Option<UnsafeCell<NonNull<u8>>>` takes\n-/// up 16 bytes of space). A consequence of this guarantee is that it is possible to convert\n-/// between `T` and `UnsafeCell<T>` when `T` has no niches. However, it is only valid to obtain\n-/// a `*mut T` pointer to the contents of a _shared_ `UnsafeCell<T>` through [`.get()`] or\n-/// [`.raw_get()`]. A `&mut T` reference can be obtained by either dereferencing this pointer\n-/// or by calling [`.get_mut()`] on an _exclusive_ `UnsafeCell<T>`, e.g.:\n+/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T`. A consequence\n+/// of this guarantee is that it is possible to convert between `T` and `UnsafeCell<T>`.\n+/// Special care has to be taken when converting a nested `T` inside of an `Outer<T>` type\n+/// to an `Outer<UnsafeCell<T>>` type: this is not sound when the `Outer<T>` type enables [niche]\n+/// optimizations. For example, the type `Option<NonNull<u8>>` is typically 8 bytes large on\n+/// 64-bit platforms, but the type `Option<UnsafeCell<NonNull<u8>>>` takes up 16 bytes of space.\n+/// Therefore this is not a valid conversion, despite `NonNull<u8>` and `UnsafeCell<NonNull<u8>>>`\n+/// having the same memory layout. This is because `UnsafeCell` disables niche optimizations in\n+/// order to avoid its interior mutability property from spreading from `T` into the `Outer` type,\n+/// thus this can cause distortions in the type size in these cases. Furthermore, it is only valid\n+/// to obtain a `*mut T` pointer to the contents of a _shared_ `UnsafeCell<T>` through [`.get()`]\n+/// or [`.raw_get()`]. A `&mut T` reference can be obtained by either dereferencing this pointer or\n+/// by calling [`.get_mut()`] on an _exclusive_ `UnsafeCell<T>`, e.g.:\n ///\n /// ```rust\n /// use std::cell::UnsafeCell;"}]}