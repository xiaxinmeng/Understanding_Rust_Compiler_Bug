{"sha": "04906061d8ec787757d27a94894d8674485e76e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OTA2MDYxZDhlYzc4Nzc1N2QyN2E5NDg5NGQ4Njc0NDg1ZTc2ZTM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "github@kazlauskas.me", "date": "2016-01-11T19:17:52Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "github@kazlauskas.me", "date": "2016-01-11T19:17:52Z"}, "message": "Rollup merge of #30761 - nagisa:mir-fix-destination, r=michaelwoerister\n\nPreviously it was returning a clone, mostly for the two reasons:\n\n* Cloning Lvalue is very cheap most of the time (i.e. when Lvalue is not a Projection);\n* There\u2019s users who want &mut lvalue and there\u2019s users who want &lvalue. Returning a value allows\n  to make either one easier when pattern matching (i.e. Some(ref dest) or Some(ref mut dest)).\n\nHowever, I\u2019m now convinced this is an invalid approach. Namely the users which want a mutable\nreference may modify the Lvalue in-place, but the changes won\u2019t be reflected in the final MIR,\nsince the Lvalue modified is merely a clone.\n\nInstead, we have two accessors `destination` and `destination_mut` which return a reference to the\ndestination in desired mode.\n\nr? @nikomatsakis", "tree": {"sha": "8044ea395ce3a1c5815c313001a8fd91b33c406f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8044ea395ce3a1c5815c313001a8fd91b33c406f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04906061d8ec787757d27a94894d8674485e76e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04906061d8ec787757d27a94894d8674485e76e3", "html_url": "https://github.com/rust-lang/rust/commit/04906061d8ec787757d27a94894d8674485e76e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04906061d8ec787757d27a94894d8674485e76e3/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf6095fcfed3f57688fc64308e151ae35638c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf6095fcfed3f57688fc64308e151ae35638c81", "html_url": "https://github.com/rust-lang/rust/commit/caf6095fcfed3f57688fc64308e151ae35638c81"}, {"sha": "2f86c1605c3a82d0c82c36f1dc84441237a9f5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f86c1605c3a82d0c82c36f1dc84441237a9f5c1", "html_url": "https://github.com/rust-lang/rust/commit/2f86c1605c3a82d0c82c36f1dc84441237a9f5c1"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "1b0dfc73229613a56babad1cd099123edd233fe2", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04906061d8ec787757d27a94894d8674485e76e3/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04906061d8ec787757d27a94894d8674485e76e3/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=04906061d8ec787757d27a94894d8674485e76e3", "patch": "@@ -314,10 +314,19 @@ impl<'tcx> CallKind<'tcx> {\n         }\n     }\n \n-    pub fn destination(&self) -> Option<Lvalue<'tcx>> {\n+    pub fn destination(&self) -> Option<&Lvalue<'tcx>> {\n         match *self {\n             CallKind::Converging { ref destination, .. } |\n-            CallKind::ConvergingCleanup { ref destination, .. } => Some(destination.clone()),\n+            CallKind::ConvergingCleanup { ref destination, .. } => Some(destination),\n+            CallKind::Diverging |\n+            CallKind::DivergingCleanup(_) => None\n+        }\n+    }\n+\n+    pub fn destination_mut(&mut self) -> Option<&mut Lvalue<'tcx>> {\n+        match *self {\n+            CallKind::Converging { ref mut destination, .. } |\n+            CallKind::ConvergingCleanup { ref mut destination, .. } => Some(destination),\n             CallKind::Diverging |\n             CallKind::DivergingCleanup(_) => None\n         }"}, {"sha": "9679654d958e9a24e202443a272f5a52e762a9f8", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04906061d8ec787757d27a94894d8674485e76e3/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04906061d8ec787757d27a94894d8674485e76e3/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=04906061d8ec787757d27a94894d8674485e76e3", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n                 *switch_ty = self.tcx.erase_regions(switch_ty);\n             },\n             Terminator::Call { ref mut func, ref mut args, ref mut kind } => {\n-                if let Some(ref mut destination) = kind.destination() {\n+                if let Some(destination) = kind.destination_mut() {\n                     self.erase_regions_lvalue(destination);\n                 }\n                 self.erase_regions_operand(func);"}, {"sha": "18a9aad0e915d1a885ea49c439ae64183f4b4e94", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04906061d8ec787757d27a94894d8674485e76e3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04906061d8ec787757d27a94894d8674485e76e3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=04906061d8ec787757d27a94894d8674485e76e3", "patch": "@@ -100,7 +100,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let mut llargs = Vec::with_capacity(args.len() + 1);\n \n                 // Prepare the return value destination\n-                let (ret_dest_ty, must_copy_dest) = if let Some(ref d) = kind.destination() {\n+                let (ret_dest_ty, must_copy_dest) = if let Some(d) = kind.destination() {\n                     let dest = self.trans_lvalue(bcx, d);\n                     let ret_ty = dest.ty.to_ty(bcx.tcx());\n                     if type_of::return_uses_outptr(bcx.ccx(), ret_ty) {"}]}