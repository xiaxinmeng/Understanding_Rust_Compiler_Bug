{"sha": "a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "node_id": "C_kwDOAAsO6NoAKGE1YzY4ZDc0N2UxYmM3ODdkZGIzOGY5NWQ3ZTlmYWM5ZTY4YzMzY2E", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-31T14:52:47Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-31T15:14:42Z"}, "message": "remove unused field from `infcx`", "tree": {"sha": "037707078873c1fa8041b1490bdd85ede683b5fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037707078873c1fa8041b1490bdd85ede683b5fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "html_url": "https://github.com/rust-lang/rust/commit/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e730969b0d433d66d4f1c0bbd9ff70050c274ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e730969b0d433d66d4f1c0bbd9ff70050c274ad5", "html_url": "https://github.com/rust-lang/rust/commit/e730969b0d433d66d4f1c0bbd9ff70050c274ad5"}], "stats": {"total": 37, "additions": 3, "deletions": 34}, "files": [{"sha": "09b02ba74a8de0d079cdaebe2533497025d95745", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "patch": "@@ -65,7 +65,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         Self {\n             tcx: self.tcx.clone(),\n             defining_use_anchor: self.defining_use_anchor.clone(),\n-            reveal_defining_opaque_types: self.reveal_defining_opaque_types.clone(),\n             in_progress_typeck_results: self.in_progress_typeck_results.clone(),\n             inner: self.inner.clone(),\n             skip_leak_check: self.skip_leak_check.clone(),"}, {"sha": "bd59bf4dea8837c552f9225b433a59dfc94b2e6c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "patch": "@@ -290,10 +290,6 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// to the outside until the end up in an `InferCtxt` for typeck or borrowck.\n     pub defining_use_anchor: Option<LocalDefId>,\n \n-    /// Used by WF-checking to not have to figure out hidden types itself, but\n-    /// to just invoke type_of to get the already computed hidden type from typeck.\n-    pub reveal_defining_opaque_types: bool,\n-\n     /// During type-checking/inference of a body, `in_progress_typeck_results`\n     /// contains a reference to the typeck results being built up, which are\n     /// used for reading closure kinds/signatures as they are inferred,\n@@ -569,7 +565,6 @@ pub struct InferCtxtBuilder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     fresh_typeck_results: Option<RefCell<ty::TypeckResults<'tcx>>>,\n     defining_use_anchor: Option<LocalDefId>,\n-    reveal_defining_opaque_types: bool,\n }\n \n pub trait TyCtxtInferExt<'tcx> {\n@@ -578,12 +573,7 @@ pub trait TyCtxtInferExt<'tcx> {\n \n impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n     fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {\n-        InferCtxtBuilder {\n-            tcx: self,\n-            defining_use_anchor: None,\n-            fresh_typeck_results: None,\n-            reveal_defining_opaque_types: false,\n-        }\n+        InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }\n     }\n }\n \n@@ -607,13 +597,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         self\n     }\n \n-    /// WF-checking doesn't need to recompute opaque types and can instead use\n-    /// the type_of query to get them from typeck.\n-    pub fn reveal_defining_opaque_types(mut self) -> Self {\n-        self.reveal_defining_opaque_types = true;\n-        self\n-    }\n-\n     /// Given a canonical value `C` as a starting point, create an\n     /// inference context that contains each of the bound values\n     /// within instantiated as a fresh variable. The `f` closure is\n@@ -638,17 +621,11 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     }\n \n     pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {\n-        let InferCtxtBuilder {\n-            tcx,\n-            defining_use_anchor,\n-            reveal_defining_opaque_types,\n-            ref fresh_typeck_results,\n-        } = *self;\n+        let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;\n         let in_progress_typeck_results = fresh_typeck_results.as_ref();\n         f(InferCtxt {\n             tcx,\n             defining_use_anchor,\n-            reveal_defining_opaque_types,\n             in_progress_typeck_results,\n             inner: RefCell::new(InferCtxtInner::new()),\n             lexical_region_resolutions: RefCell::new(None),"}, {"sha": "e7cfa3a7c14939fde344f4f93b00856280f65730", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "patch": "@@ -95,13 +95,6 @@ impl<'tcx> InheritedBuilder<'tcx> {\n         let def_id = self.def_id;\n         self.infcx.enter(|infcx| f(Inherited::new(infcx, def_id)))\n     }\n-\n-    /// WF-checking doesn't need to recompute opaque types and can instead use\n-    /// the type_of query to get them from typeck.\n-    pub fn reveal_defining_opaque_types(mut self) -> Self {\n-        self.infcx = self.infcx.reveal_defining_opaque_types();\n-        self\n-    }\n }\n \n impl<'a, 'tcx> Inherited<'a, 'tcx> {"}, {"sha": "bd08da9529a5f89635ffa47d5a3b1cf74eedef7a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a5c68d747e1bc787ddb38f95d7e9fac9e68c33ca", "patch": "@@ -968,7 +968,7 @@ fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>) -> CheckWfFcxBuilder<\n \n fn for_id(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> CheckWfFcxBuilder<'_> {\n     CheckWfFcxBuilder {\n-        inherited: Inherited::build(tcx, def_id).reveal_defining_opaque_types(),\n+        inherited: Inherited::build(tcx, def_id),\n         id: hir::HirId::make_owner(def_id),\n         span,\n         param_env: tcx.param_env(def_id),"}]}