{"sha": "c8e93edf55d3913212922864034fae8443f92f2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTkzZWRmNTVkMzkxMzIxMjkyMjg2NDAzNGZhZTg0NDNmOTJmMmE=", "commit": {"author": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-08T13:02:21Z"}, "committer": {"name": "Youngsoo Son", "email": "ysoo.son@samsung.com", "date": "2013-05-10T02:42:45Z"}, "message": "Move core::task::local_data to core::local_data", "tree": {"sha": "e066f69861d4ead6be26583897163987d2a23528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e066f69861d4ead6be26583897163987d2a23528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e93edf55d3913212922864034fae8443f92f2a", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e93edf55d3913212922864034fae8443f92f2a", "html_url": "https://github.com/rust-lang/rust/commit/c8e93edf55d3913212922864034fae8443f92f2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e93edf55d3913212922864034fae8443f92f2a/comments", "author": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sonwow", "id": 2674659, "node_id": "MDQ6VXNlcjI2NzQ2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2674659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonwow", "html_url": "https://github.com/sonwow", "followers_url": "https://api.github.com/users/sonwow/followers", "following_url": "https://api.github.com/users/sonwow/following{/other_user}", "gists_url": "https://api.github.com/users/sonwow/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonwow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonwow/subscriptions", "organizations_url": "https://api.github.com/users/sonwow/orgs", "repos_url": "https://api.github.com/users/sonwow/repos", "events_url": "https://api.github.com/users/sonwow/events{/privacy}", "received_events_url": "https://api.github.com/users/sonwow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "html_url": "https://github.com/rust-lang/rust/commit/ad8e236f32fccf6ec99025e2ba77f79b4c98d399"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "75c6cf0e969a3c947fad497014f8b37b40261095", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -12,7 +12,7 @@\n \n use prelude::*;\n use task;\n-use task::local_data::{local_data_pop, local_data_set};\n+use local_data::{local_data_pop, local_data_set};\n \n // helper for transmutation, shown below.\n type RustClosure = (int, int);\n@@ -24,14 +24,14 @@ pub struct Handler<T, U> {\n \n pub struct Condition<'self, T, U> {\n     name: &'static str,\n-    key: task::local_data::LocalDataKey<'self, Handler<T, U>>\n+    key: local_data::LocalDataKey<'self, Handler<T, U>>\n }\n \n pub impl<'self, T, U> Condition<'self, T, U> {\n     fn trap(&'self self, h: &'self fn(T) -> U) -> Trap<'self, T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n-            let prev = task::local_data::local_data_get(self.key);\n+            let prev = local_data::local_data_get(self.key);\n             let h = @Handler { handle: *p, prev: prev };\n             Trap { cond: self, handler: h }\n         }"}, {"sha": "3cc95e5a175ea35d2e6368a681af9d35dc32696b", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -215,6 +215,7 @@ pub mod trie;\n pub mod task;\n pub mod comm;\n pub mod pipes;\n+pub mod local_data;\n \n \n /* Runtime and platform support */"}, {"sha": "d4b02a0ad9bbfde11a442e8c13305a66c9d0fcd2", "filename": "src/libcore/local_data.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flocal_data.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "previous_filename": "src/libcore/task/local_data.rs"}, {"sha": "26d4790705ab9e4120ba73fbedc0d5055b4d7680", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -1208,7 +1208,7 @@ fn overridden_arg_key(_v: @OverriddenArgs) {}\n \n pub fn args() -> ~[~str] {\n     unsafe {\n-        match task::local_data::local_data_get(overridden_arg_key) {\n+        match local_data::local_data_get(overridden_arg_key) {\n             None => real_args(),\n             Some(args) => copy args.val\n         }\n@@ -1218,7 +1218,7 @@ pub fn args() -> ~[~str] {\n pub fn set_args(new_args: ~[~str]) {\n     unsafe {\n         let overridden_args = @OverriddenArgs { val: copy new_args };\n-        task::local_data::local_data_set(overridden_arg_key, overridden_args);\n+        local_data::local_data_set(overridden_arg_key, overridden_args);\n     }\n }\n "}, {"sha": "22172db930223aa2491208b2c131d28ededc2122", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -81,6 +81,7 @@ pub use io;\n pub use iter;\n pub use old_iter;\n pub use libc;\n+pub use local_data;\n pub use num;\n pub use ops;\n pub use option;"}, {"sha": "2eb429a5e9cb0b0b7b4be45b29e7e4c10cd9cc77", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -836,13 +836,13 @@ fn tls_rng_state(_v: @@mut IsaacRng) {}\n pub fn task_rng() -> @@mut IsaacRng {\n     let r : Option<@@mut IsaacRng>;\n     unsafe {\n-        r = task::local_data::local_data_get(tls_rng_state);\n+        r = local_data::local_data_get(tls_rng_state);\n     }\n     match r {\n         None => {\n             unsafe {\n                 let rng = @@mut IsaacRng::new_seeded(seed());\n-                task::local_data::local_data_set(tls_rng_state, rng);\n+                local_data::local_data_set(tls_rng_state, rng);\n                 rng\n             }\n         }"}, {"sha": "01bef5e2458886182337deaab7c3b0649bed6d75", "filename": "src/libcore/rt/local_services.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Frt%2Flocal_services.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Frt%2Flocal_services.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_services.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -198,7 +198,7 @@ mod test {\n \n     #[test]\n     fn tls() {\n-        use task::local_data::*;\n+        use local_data::*;\n         do run_in_newsched_task() {\n             unsafe {\n                 fn key(_x: @~str) { }"}, {"sha": "a30db039f30d7e2270a7d8b80e732c1b1b3adde8", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -15,7 +15,7 @@ use cmp::Eq;\n use libc;\n use prelude::*;\n use task::rt;\n-use task::local_data::LocalDataKey;\n+use local_data::LocalDataKey;\n \n use super::rt::rust_task;\n use rt::local_services::LocalStorage;"}, {"sha": "2484d8c5feda42899bd894173c74fabb97e10100", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -47,7 +47,6 @@ use unstable::finally::Finally;\n #[cfg(test)] use comm::SharedChan;\n \n mod local_data_priv;\n-pub mod local_data;\n pub mod rt;\n pub mod spawn;\n "}, {"sha": "0c49d457ad809b28f0ab3720bcc65223b8968567", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -14,7 +14,7 @@ use astsrv;\n use doc::ItemUtils;\n use doc;\n \n-use core::task::local_data::local_data_get;\n+use core::local_data::local_data_get;\n use syntax::ast;\n use syntax;\n "}, {"sha": "81152430e784b94ce6d6bad9555716f61eb401cb", "filename": "src/libstd/rl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibstd%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibstd%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frl.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -69,11 +69,11 @@ fn complete_key(_v: @CompletionCb) {}\n \n /// Bind to the main completion callback\n pub unsafe fn complete(cb: CompletionCb) {\n-    task::local_data::local_data_set(complete_key, @(cb));\n+    local_data::local_data_set(complete_key, @(cb));\n \n     extern fn callback(line: *c_char, completions: *()) {\n         unsafe {\n-            let cb = *task::local_data::local_data_get(complete_key)\n+            let cb = *local_data::local_data_get(complete_key)\n                 .get();\n \n             do cb(str::raw::from_c_str(line)) |suggestion| {"}, {"sha": "fdc74be133544df5d12a150ecf5be9aeace63d80", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -1211,11 +1211,11 @@ mod big_tests {\n     #[unsafe_destructor]\n     impl<'self> Drop for LVal<'self> {\n         fn finalize(&self) {\n-            let x = unsafe { task::local_data::local_data_get(self.key) };\n+            let x = unsafe { local_data::local_data_get(self.key) };\n             match x {\n                 Some(@y) => {\n                     unsafe {\n-                        task::local_data::local_data_set(self.key, @(y+1));\n+                        local_data::local_data_set(self.key, @(y+1));\n                     }\n                 }\n                 _ => fail!(~\"Expected key to work\"),"}, {"sha": "2379e4617aae8e9b319abd0a9af6407ac64e6ca4", "filename": "src/libstd/sort_stage0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibstd%2Fsort_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibstd%2Fsort_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort_stage0.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -1202,11 +1202,11 @@ mod big_tests {\n     #[unsafe_destructor]\n     impl<'self> Drop for LVal<'self> {\n         fn finalize(&self) {\n-            let x = unsafe { task::local_data::local_data_get(self.key) };\n+            let x = unsafe { local_data::local_data_get(self.key) };\n             match x {\n                 Some(@y) => {\n                     unsafe {\n-                        task::local_data::local_data_set(self.key, @(y+1));\n+                        local_data::local_data_set(self.key, @(y+1));\n                     }\n                 }\n                 _ => fail!(~\"Expected key to work\"),"}, {"sha": "6a576df3507c5d315d383c376e4611b716f8ccfd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -74,7 +74,7 @@ impl<S:Encoder> Encodable<S> for ident {\n     fn encode(&self, s: &mut S) {\n         unsafe {\n             let intr =\n-                match task::local_data::local_data_get(interner_key!()) {\n+                match local_data::local_data_get(interner_key!()) {\n                     None => fail!(~\"encode: TLS interner not set up\"),\n                     Some(intr) => intr\n                 };\n@@ -87,7 +87,7 @@ impl<S:Encoder> Encodable<S> for ident {\n impl<D:Decoder> Decodable<D> for ident {\n     fn decode(d: &mut D) -> ident {\n         let intr = match unsafe {\n-            task::local_data::local_data_get(interner_key!())\n+            local_data::local_data_get(interner_key!())\n         } {\n             None => fail!(~\"decode: TLS interner not set up\"),\n             Some(intr) => intr"}, {"sha": "0fcfae294d47d35363c8fe0626e98928e2631f19", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e93edf55d3913212922864034fae8443f92f2a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c8e93edf55d3913212922864034fae8443f92f2a", "patch": "@@ -462,7 +462,7 @@ pub fn mk_fresh_ident_interner() -> @ident_interner {\n         interner: interner::Interner::prefill(init_vec)\n     };\n     unsafe {\n-        task::local_data::local_data_set(interner_key!(), @rv);\n+        local_data::local_data_set(interner_key!(), @rv);\n     }\n     rv\n }\n@@ -471,7 +471,7 @@ pub fn mk_fresh_ident_interner() -> @ident_interner {\n // fresh one.\n pub fn mk_ident_interner() -> @ident_interner {\n     unsafe {\n-        match task::local_data::local_data_get(interner_key!()) {\n+        match local_data::local_data_get(interner_key!()) {\n             Some(interner) => *interner,\n             None => {\n                 mk_fresh_ident_interner()"}]}