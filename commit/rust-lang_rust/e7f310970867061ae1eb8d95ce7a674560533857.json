{"sha": "e7f310970867061ae1eb8d95ce7a674560533857", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjMxMDk3MDg2NzA2MWFlMWViOGQ5NWNlN2E2NzQ1NjA1MzM4NTc=", "commit": {"author": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-11-03T23:48:03Z"}, "committer": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-11-03T23:48:03Z"}, "message": "Fix for bitshift errors lint on cross compilation #18587", "tree": {"sha": "2fb26fb1c76cf695db38334f1a35fd929d9abc31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb26fb1c76cf695db38334f1a35fd929d9abc31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f310970867061ae1eb8d95ce7a674560533857", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f310970867061ae1eb8d95ce7a674560533857", "html_url": "https://github.com/rust-lang/rust/commit/e7f310970867061ae1eb8d95ce7a674560533857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f310970867061ae1eb8d95ce7a674560533857/comments", "author": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2790505c19b158a5494139dba084b6af82810b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/2790505c19b158a5494139dba084b6af82810b96", "html_url": "https://github.com/rust-lang/rust/commit/2790505c19b158a5494139dba084b6af82810b96"}], "stats": {"total": 103, "additions": 58, "deletions": 45}, "files": [{"sha": "1f39cb0132c89d57be1f5bbd4d3594b7c42ad9b2", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7f310970867061ae1eb8d95ce7a674560533857/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f310970867061ae1eb8d95ce7a674560533857/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e7f310970867061ae1eb8d95ce7a674560533857", "patch": "@@ -39,7 +39,7 @@ use std::cmp;\n use std::collections::HashMap;\n use std::collections::hashmap::{Occupied, Vacant};\n use std::slice;\n-use std::{int, i8, i16, i32, i64, uint, u8, u16, u32, u64, f32, f64};\n+use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::abi;\n use syntax::ast_map;\n use syntax::ast_util::is_shift_binop;\n@@ -180,8 +180,8 @@ impl LintPass for TypeLimits {\n \n                 if is_shift_binop(binop) {\n                     let opt_ty_bits = match ty::get(ty::expr_ty(cx.tcx, &**l)).sty {\n-                        ty::ty_int(t) => Some(int_ty_bits(t)),\n-                        ty::ty_uint(t) => Some(uint_ty_bits(t)),\n+                        ty::ty_int(t) => Some(int_ty_bits(t, cx.sess().targ_cfg.int_type)),\n+                        ty::ty_uint(t) => Some(uint_ty_bits(t, cx.sess().targ_cfg.uint_type)),\n                         _ => None\n                     };\n \n@@ -312,19 +312,19 @@ impl LintPass for TypeLimits {\n             }\n         }\n \n-        fn int_ty_bits(int_ty: ast::IntTy) -> u64 {\n+        fn int_ty_bits(int_ty: ast::IntTy, target_int_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::TyI =>    int::BITS as u64,\n+                ast::TyI =>    int_ty_bits(target_int_ty, target_int_ty),\n                 ast::TyI8 =>   i8::BITS  as u64,\n                 ast::TyI16 =>  i16::BITS as u64,\n                 ast::TyI32 =>  i32::BITS as u64,\n                 ast::TyI64 =>  i64::BITS as u64\n             }\n         }\n \n-        fn uint_ty_bits(uint_ty: ast::UintTy) -> u64 {\n+        fn uint_ty_bits(uint_ty: ast::UintTy, target_uint_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::TyU =>    uint::BITS as u64,\n+                ast::TyU =>    uint_ty_bits(target_uint_ty, target_uint_ty),\n                 ast::TyU8 =>   u8::BITS  as u64,\n                 ast::TyU16 =>  u16::BITS as u64,\n                 ast::TyU32 =>  u32::BITS as u64,"}, {"sha": "6de2ad8a0f3dc4db72d5865e6ece218101b8d245", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 51, "deletions": 38, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e7f310970867061ae1eb8d95ce7a674560533857/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f310970867061ae1eb8d95ce7a674560533857/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=e7f310970867061ae1eb8d95ce7a674560533857", "patch": "@@ -10,49 +10,62 @@\n \n #![deny(exceeding_bitshifts)]\n #![allow(unused_variables)]\n+#![allow(dead_code)]\n \n fn main() {\n-      let n = 1u8 << 8;\n-      let n = 1u8 << 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u16 << 16;\n-      let n = 1u16 << 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u32 << 32;\n-      let n = 1u32 << 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u64 << 64;\n-      let n = 1u64 << 65; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i8 << 8;\n-      let n = 1i8 << 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i16 << 16;\n-      let n = 1i16 << 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i32 << 32;\n-      let n = 1i32 << 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i64 << 64;\n-      let n = 1i64 << 65; //~ ERROR: bitshift exceeds the type's number of bits\n-\n-      let n = 1u8 >> 8;\n-      let n = 1u8 >> 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u16 >> 16;\n-      let n = 1u16 >> 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u32 >> 32;\n-      let n = 1u32 >> 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u64 >> 64;\n-      let n = 1u64 >> 65; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i8 >> 8;\n-      let n = 1i8 >> 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i16 >> 16;\n-      let n = 1i16 >> 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i32 >> 32;\n-      let n = 1i32 >> 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i64 >> 64;\n-      let n = 1i64 >> 65; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 << 7;\n+      let n = 1u8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 << 15;\n+      let n = 1u16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 << 31;\n+      let n = 1u32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 << 63;\n+      let n = 1u64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 << 7;\n+      let n = 1i8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 << 15;\n+      let n = 1i16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 << 31;\n+      let n = 1i32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 << 63;\n+      let n = 1i64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+\n+      let n = 1u8 >> 7;\n+      let n = 1u8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 >> 15;\n+      let n = 1u16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 >> 31;\n+      let n = 1u32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 >> 63;\n+      let n = 1u64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 >> 7;\n+      let n = 1i8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 >> 15;\n+      let n = 1i16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 >> 31;\n+      let n = 1i32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 >> 63;\n+      let n = 1i64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n \n       let n = 1u8;\n-      let n = n << 8;\n-      let n = n << 9; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = n << 7;\n+      let n = n << 8; //~ ERROR: bitshift exceeds the type's number of bits\n+\n+      let n = 1u8 << -8; //~ ERROR: bitshift exceeds the type's number of bits\n+\n+      let n = 1u8 << (4+3);\n+      let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1u8 << -9; //~ ERROR: bitshift exceeds the type's number of bits\n+      #[cfg(target_word_size = \"32\")]\n+      fn dead_but_still_linted() {\n+        let n = 1i << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+        let n = 1u << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      }\n \n-      let n = 1u8 << (4+4);\n-      let n = 1u8 << (4+5); //~ ERROR: bitshift exceeds the type's number of bits\n+      #[cfg(target_word_size = \"64\")]\n+      fn dead_but_still_still_linted() {\n+        let n = 1i << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+        let n = 1u << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      }\n }\n "}]}