{"sha": "eefea28dea51fe55ebfb436743d60cd84c891c66", "node_id": "C_kwDOAAsO6NoAKGVlZmVhMjhkZWE1MWZlNTVlYmZiNDM2NzQzZDYwY2Q4NGM4OTFjNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-13T16:37:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-13T16:37:37Z"}, "message": "Rollup merge of #104320 - fee1-dead-contrib:use-derive-const-in-std, r=oli-obk\n\nUse `derive_const` and rm manual StructuralEq impl\n\nThis does not change any semantics of the impl except for the const stability. It should be fine because trait methods and const bounds can never be used in stable without enabling `const_trait_impl`.\n\ncc `@oli-obk`", "tree": {"sha": "014e977e306c97a0c389f2997901ab354cf43ce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/014e977e306c97a0c389f2997901ab354cf43ce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eefea28dea51fe55ebfb436743d60cd84c891c66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcR1RCRBK7hj4Ov3rIwAAhlgIACA3xGFdz4XEZE2pQWNqlolR\nskt8mxXh6vjmzkZLWgv72NOPGGtyweq78YrZu76PmmtES58CIBGb8uyh3aOJ9SPY\nyrbUBf9rCjHK+2bT/7qd/kbb/HnxpFb5aP+6zr2Pi7W1bfUTAN0F7opLyTnuC1Iw\nW5r5Ft9bQfdfOGRahEra28j1B5yocobxO09DYuGzu0yQCb3KwbLM9BHkbFzRtS7e\nSexxQjpz/04EFYSwHjFx7/LF1H0h+bl1ADQR1ply94zFv1JQ+WMET55i9JyNyqGO\nIULoGkkY6vyZsxb2Cttu+heLSay2HeF0d5lOQyCUgClzTYVZNubvcVNKNz+I9as=\n=Gway\n-----END PGP SIGNATURE-----\n", "payload": "tree 014e977e306c97a0c389f2997901ab354cf43ce6\nparent 5c764da9b05cd78d0b89d5b4f7b6b401fc773571\nparent 4b217e462401a73466cc645cd30f3f9e7d3c218e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668357457 +0100\ncommitter GitHub <noreply@github.com> 1668357457 +0100\n\nRollup merge of #104320 - fee1-dead-contrib:use-derive-const-in-std, r=oli-obk\n\nUse `derive_const` and rm manual StructuralEq impl\n\nThis does not change any semantics of the impl except for the const stability. It should be fine because trait methods and const bounds can never be used in stable without enabling `const_trait_impl`.\n\ncc `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eefea28dea51fe55ebfb436743d60cd84c891c66", "html_url": "https://github.com/rust-lang/rust/commit/eefea28dea51fe55ebfb436743d60cd84c891c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eefea28dea51fe55ebfb436743d60cd84c891c66/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c764da9b05cd78d0b89d5b4f7b6b401fc773571", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c764da9b05cd78d0b89d5b4f7b6b401fc773571", "html_url": "https://github.com/rust-lang/rust/commit/5c764da9b05cd78d0b89d5b4f7b6b401fc773571"}, {"sha": "4b217e462401a73466cc645cd30f3f9e7d3c218e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b217e462401a73466cc645cd30f3f9e7d3c218e", "html_url": "https://github.com/rust-lang/rust/commit/4b217e462401a73466cc645cd30f3f9e7d3c218e"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "af49d438a22cb7918e9fde85d1f9b42dca2dfe6f", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eefea28dea51fe55ebfb436743d60cd84c891c66/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefea28dea51fe55ebfb436743d60cd84c891c66/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=eefea28dea51fe55ebfb436743d60cd84c891c66", "patch": "@@ -536,6 +536,14 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n             return;\n         }\n \n+        // if the const impl is derived using the `derive_const` attribute,\n+        // then it would be \"stable\" at least for the impl.\n+        // We gate usages of it using `feature(const_trait_impl)` anyways\n+        // so there is no unstable leakage\n+        if self.tcx.is_builtin_derive(def_id.to_def_id()) {\n+            return;\n+        }\n+\n         let is_const = self.tcx.is_const_fn(def_id.to_def_id())\n             || self.tcx.is_const_trait_impl_raw(def_id.to_def_id());\n         let is_stable = self"}, {"sha": "5db5cbfc3dfdde2c6349e3fc145c05f29f4d6fdb", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eefea28dea51fe55ebfb436743d60cd84c891c66/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefea28dea51fe55ebfb436743d60cd84c891c66/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=eefea28dea51fe55ebfb436743d60cd84c891c66", "patch": "@@ -24,6 +24,7 @@\n \n use crate::const_closure::ConstFnMutClosure;\n use crate::marker::Destruct;\n+#[cfg(bootstrap)]\n use crate::marker::StructuralPartialEq;\n \n use self::Ordering::*;\n@@ -331,6 +332,7 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// assert_eq!(Ordering::Greater, result);\n /// ```\n #[derive(Clone, Copy, Eq, Debug, Hash)]\n+#[cfg_attr(not(bootstrap), derive_const(PartialOrd, Ord, PartialEq))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(i8)]\n pub enum Ordering {\n@@ -877,10 +879,12 @@ pub macro Ord($item:item) {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(bootstrap)]\n impl StructuralPartialEq for Ordering {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+#[cfg(bootstrap)]\n impl const PartialEq for Ordering {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n@@ -890,6 +894,7 @@ impl const PartialEq for Ordering {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+#[cfg(bootstrap)]\n impl const Ord for Ordering {\n     #[inline]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n@@ -899,6 +904,7 @@ impl const Ord for Ordering {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+#[cfg(bootstrap)]\n impl const PartialOrd for Ordering {\n     #[inline]\n     fn partial_cmp(&self, other: &Ordering) -> Option<Ordering> {"}, {"sha": "8425354837841608c002775d7651bd4d3f72443f", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eefea28dea51fe55ebfb436743d60cd84c891c66/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefea28dea51fe55ebfb436743d60cd84c891c66/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=eefea28dea51fe55ebfb436743d60cd84c891c66", "patch": "@@ -185,6 +185,7 @@\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(deprecated_suggestion)]\n+#![cfg_attr(not(bootstrap), feature(derive_const))]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(rustdoc_internals)]"}]}