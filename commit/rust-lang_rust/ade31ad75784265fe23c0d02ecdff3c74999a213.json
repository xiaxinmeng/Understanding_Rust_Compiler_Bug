{"sha": "ade31ad75784265fe23c0d02ecdff3c74999a213", "node_id": "C_kwDOAAsO6NoAKGFkZTMxYWQ3NTc4NDI2NWZlMjNjMGQwMmVjZGZmM2M3NDk5OWEyMTM", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T13:40:23Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T13:40:23Z"}, "message": "Rename proc macro server from 'Rustc' to 'RustAnalyzer'", "tree": {"sha": "cf470d82a72044ee6ca510b52b68560067d5d2e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf470d82a72044ee6ca510b52b68560067d5d2e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ade31ad75784265fe23c0d02ecdff3c74999a213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ade31ad75784265fe23c0d02ecdff3c74999a213", "html_url": "https://github.com/rust-lang/rust/commit/ade31ad75784265fe23c0d02ecdff3c74999a213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ade31ad75784265fe23c0d02ecdff3c74999a213/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28bab681e935b850cf31c17b5082c6e82fd74463", "url": "https://api.github.com/repos/rust-lang/rust/commits/28bab681e935b850cf31c17b5082c6e82fd74463", "html_url": "https://github.com/rust-lang/rust/commit/28bab681e935b850cf31c17b5082c6e82fd74463"}], "stats": {"total": 156, "additions": 78, "deletions": 78}, "files": [{"sha": "75802a5eb4db83810cf88cc18cf6f5cb3f1e5d6f", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=ade31ad75784265fe23c0d02ecdff3c74999a213", "patch": "@@ -2430,29 +2430,29 @@ macro_rules! declare_server_traits {\n with_api!(Self, self_, declare_server_traits);\n struct G {}\n struct T {}\n-struct Rustc;\n-impl Types for Rustc {\n+struct RustAnalyzer;\n+impl Types for RustAnalyzer {\n     type TokenStream = T;\n     type Group = G;\n }\n \n fn make<T>() -> T { loop {} }\n-impl TokenStream for Rustc {\n+impl TokenStream for RustAnalyzer {\n     fn new() -> Self::TokenStream {\n         let group: Self::Group = make();\n         make()\n     }\n }\"#,\n         expect![[r#\"\n-            1061..1072 '{ loop {} }': T\n-            1063..1070 'loop {}': !\n-            1068..1070 '{}': ()\n-            1136..1199 '{     ...     }': T\n-            1150..1155 'group': G\n-            1171..1175 'make': fn make<G>() -> G\n-            1171..1177 'make()': G\n-            1187..1191 'make': fn make<T>() -> T\n-            1187..1193 'make()': T\n+            1075..1086 '{ loop {} }': T\n+            1077..1084 'loop {}': !\n+            1082..1084 '{}': ()\n+            1157..1220 '{     ...     }': T\n+            1171..1176 'group': G\n+            1192..1196 'make': fn make<G>() -> G\n+            1192..1198 'make()': G\n+            1208..1212 'make': fn make<T>() -> T\n+            1208..1214 'make()': T\n         \"#]],\n     );\n }"}, {"sha": "1c91ac0fa1b8fb66d821b166bc52de075a2ed4fb", "filename": "crates/proc-macro-srv/src/abis/abi_1_58/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs?ref=ade31ad75784265fe23c0d02ecdff3c74999a213", "patch": "@@ -6,7 +6,7 @@ mod proc_macro;\n \n #[allow(dead_code)]\n #[doc(hidden)]\n-mod rustc_server;\n+mod ra_server;\n \n use libloading::Library;\n use proc_macro_api::ProcMacroKind;\n@@ -36,10 +36,10 @@ impl Abi {\n         macro_body: &tt::Subtree,\n         attributes: Option<&tt::Subtree>,\n     ) -> Result<tt::Subtree, PanicMessage> {\n-        let parsed_body = rustc_server::TokenStream::with_subtree(macro_body.clone());\n+        let parsed_body = ra_server::TokenStream::with_subtree(macro_body.clone());\n \n-        let parsed_attributes = attributes.map_or(rustc_server::TokenStream::new(), |attr| {\n-            rustc_server::TokenStream::with_subtree(attr.clone())\n+        let parsed_attributes = attributes.map_or(ra_server::TokenStream::new(), |attr| {\n+            ra_server::TokenStream::with_subtree(attr.clone())\n         });\n \n         for proc_macro in &self.exported_macros {\n@@ -49,7 +49,7 @@ impl Abi {\n                 } if *trait_name == macro_name => {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_body,\n                         true,\n                     );\n@@ -60,7 +60,7 @@ impl Abi {\n                 {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_body,\n                         true,\n                     );\n@@ -71,7 +71,7 @@ impl Abi {\n                 {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_attributes,\n                         parsed_body,\n                         true,"}, {"sha": "ebdfca00d735d14da1057fbc0fa4605f52aad5f2", "filename": "crates/proc-macro-srv/src/abis/abi_1_58/ra_server.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fra_server.rs?ref=ade31ad75784265fe23c0d02ecdff3c74999a213", "patch": "@@ -268,12 +268,12 @@ pub struct TokenStreamIter {\n }\n \n #[derive(Default)]\n-pub struct Rustc {\n+pub struct RustAnalyzer {\n     ident_interner: IdentInterner,\n     // FIXME: store span information here.\n }\n \n-impl server::Types for Rustc {\n+impl server::Types for RustAnalyzer {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type TokenStreamBuilder = TokenStreamBuilder;\n@@ -288,15 +288,15 @@ impl server::Types for Rustc {\n     type MultiSpan = Vec<Span>;\n }\n \n-impl server::FreeFunctions for Rustc {\n+impl server::FreeFunctions for RustAnalyzer {\n     fn track_env_var(&mut self, _var: &str, _value: Option<&str>) {\n         // FIXME: track env var accesses\n         // https://github.com/rust-lang/rust/pull/71858\n     }\n     fn track_path(&mut self, _path: &str) {}\n }\n \n-impl server::TokenStream for Rustc {\n+impl server::TokenStream for RustAnalyzer {\n     fn new(&mut self) -> Self::TokenStream {\n         Self::TokenStream::new()\n     }\n@@ -354,7 +354,7 @@ impl server::TokenStream for Rustc {\n     }\n }\n \n-impl server::TokenStreamBuilder for Rustc {\n+impl server::TokenStreamBuilder for RustAnalyzer {\n     fn new(&mut self) -> Self::TokenStreamBuilder {\n         Self::TokenStreamBuilder::new()\n     }\n@@ -366,7 +366,7 @@ impl server::TokenStreamBuilder for Rustc {\n     }\n }\n \n-impl server::TokenStreamIter for Rustc {\n+impl server::TokenStreamIter for RustAnalyzer {\n     fn next(\n         &mut self,\n         iter: &mut Self::TokenStreamIter,\n@@ -415,7 +415,7 @@ fn spacing_to_external(spacing: Spacing) -> bridge::Spacing {\n     }\n }\n \n-impl server::Group for Rustc {\n+impl server::Group for RustAnalyzer {\n     fn new(&mut self, delimiter: bridge::Delimiter, stream: Self::TokenStream) -> Self::Group {\n         Self::Group { delimiter: delim_to_internal(delimiter), token_trees: stream.token_trees }\n     }\n@@ -449,7 +449,7 @@ impl server::Group for Rustc {\n     }\n }\n \n-impl server::Punct for Rustc {\n+impl server::Punct for RustAnalyzer {\n     fn new(&mut self, ch: char, spacing: bridge::Spacing) -> Self::Punct {\n         tt::Punct {\n             char: ch,\n@@ -471,7 +471,7 @@ impl server::Punct for Rustc {\n     }\n }\n \n-impl server::Ident for Rustc {\n+impl server::Ident for RustAnalyzer {\n     fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n         IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n@@ -486,7 +486,7 @@ impl server::Ident for Rustc {\n     }\n }\n \n-impl server::Literal for Rustc {\n+impl server::Literal for RustAnalyzer {\n     fn debug_kind(&mut self, _literal: &Self::Literal) -> String {\n         // r-a: debug_kind and suffix are unsupported; corresponding client code has been changed to not call these.\n         // They must still be present to be ABI-compatible and work with upstream proc_macro.\n@@ -597,7 +597,7 @@ impl server::Literal for Rustc {\n     }\n }\n \n-impl server::SourceFile for Rustc {\n+impl server::SourceFile for RustAnalyzer {\n     // FIXME these are all stubs\n     fn eq(&mut self, _file1: &Self::SourceFile, _file2: &Self::SourceFile) -> bool {\n         true\n@@ -610,7 +610,7 @@ impl server::SourceFile for Rustc {\n     }\n }\n \n-impl server::Diagnostic for Rustc {\n+impl server::Diagnostic for RustAnalyzer {\n     fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n         let mut diag = Diagnostic::new(level, msg);\n         diag.spans = spans;\n@@ -634,7 +634,7 @@ impl server::Diagnostic for Rustc {\n     }\n }\n \n-impl server::Span for Rustc {\n+impl server::Span for RustAnalyzer {\n     fn debug(&mut self, span: Self::Span) -> String {\n         format!(\"{:?}\", span.0)\n     }\n@@ -706,7 +706,7 @@ impl server::Span for Rustc {\n     }\n }\n \n-impl server::MultiSpan for Rustc {\n+impl server::MultiSpan for RustAnalyzer {\n     fn new(&mut self) -> Self::MultiSpan {\n         // FIXME handle span\n         vec![]\n@@ -724,8 +724,8 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_rustc_server_literals() {\n-        let mut srv = Rustc { ident_interner: IdentInterner::default() };\n+    fn test_ra_server_literals() {\n+        let mut srv = RustAnalyzer { ident_interner: IdentInterner::default() };\n         assert_eq!(srv.integer(\"1234\").text, \"1234\");\n \n         assert_eq!(srv.typed_integer(\"12\", \"u8\").text, \"12u8\");\n@@ -761,7 +761,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rustc_server_to_string() {\n+    fn test_ra_server_to_string() {\n         let s = TokenStream {\n             token_trees: vec![\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n@@ -786,7 +786,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rustc_server_from_str() {\n+    fn test_ra_server_from_str() {\n         use std::str::FromStr;\n         let subtree_paren_a = tt::TokenTree::Subtree(tt::Subtree {\n             delimiter: Some(tt::Delimiter {", "previous_filename": "crates/proc-macro-srv/src/abis/abi_1_58/rustc_server.rs"}, {"sha": "76e89e3191a67230c3e9c34e67d72d7208dfdd92", "filename": "crates/proc-macro-srv/src/abis/abi_1_63/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fmod.rs?ref=ade31ad75784265fe23c0d02ecdff3c74999a213", "patch": "@@ -6,14 +6,14 @@ mod proc_macro;\n \n #[allow(dead_code)]\n #[doc(hidden)]\n-mod rustc_server;\n+mod ra_server;\n \n use libloading::Library;\n use proc_macro_api::ProcMacroKind;\n \n use super::PanicMessage;\n \n-pub use rustc_server::TokenStream;\n+pub use ra_server::TokenStream;\n \n pub(crate) struct Abi {\n     exported_macros: Vec<proc_macro::bridge::client::ProcMacro>,\n@@ -50,7 +50,7 @@ impl Abi {\n                 } if *trait_name == macro_name => {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_body,\n                         true,\n                     );\n@@ -61,7 +61,7 @@ impl Abi {\n                 {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_body,\n                         true,\n                     );\n@@ -72,7 +72,7 @@ impl Abi {\n                 {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_attributes,\n                         parsed_body,\n                         true,"}, {"sha": "05a565fbf343ec03f689d92f2f1c07d71f75a399", "filename": "crates/proc-macro-srv/src/abis/abi_1_63/ra_server.rs", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fra_server.rs?ref=ade31ad75784265fe23c0d02ecdff3c74999a213", "patch": "@@ -268,12 +268,12 @@ pub struct TokenStreamIter {\n }\n \n #[derive(Default)]\n-pub struct Rustc {\n+pub struct RustAnalyzer {\n     ident_interner: IdentInterner,\n     // FIXME: store span information here.\n }\n \n-impl server::Types for Rustc {\n+impl server::Types for RustAnalyzer {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type Group = Group;\n@@ -286,15 +286,15 @@ impl server::Types for Rustc {\n     type MultiSpan = Vec<Span>;\n }\n \n-impl server::FreeFunctions for Rustc {\n+impl server::FreeFunctions for RustAnalyzer {\n     fn track_env_var(&mut self, _var: &str, _value: Option<&str>) {\n         // FIXME: track env var accesses\n         // https://github.com/rust-lang/rust/pull/71858\n     }\n     fn track_path(&mut self, _path: &str) {}\n }\n \n-impl server::TokenStream for Rustc {\n+impl server::TokenStream for RustAnalyzer {\n     fn is_empty(&mut self, stream: &Self::TokenStream) -> bool {\n         stream.is_empty()\n     }\n@@ -423,7 +423,7 @@ fn spacing_to_external(spacing: Spacing) -> bridge::Spacing {\n     }\n }\n \n-impl server::Group for Rustc {\n+impl server::Group for RustAnalyzer {\n     fn new(\n         &mut self,\n         delimiter: bridge::Delimiter,\n@@ -464,7 +464,7 @@ impl server::Group for Rustc {\n     }\n }\n \n-impl server::Punct for Rustc {\n+impl server::Punct for RustAnalyzer {\n     fn new(&mut self, ch: char, spacing: bridge::Spacing) -> Self::Punct {\n         tt::Punct {\n             char: ch,\n@@ -486,7 +486,7 @@ impl server::Punct for Rustc {\n     }\n }\n \n-impl server::Ident for Rustc {\n+impl server::Ident for RustAnalyzer {\n     fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n         IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n@@ -501,7 +501,7 @@ impl server::Ident for Rustc {\n     }\n }\n \n-impl server::Literal for Rustc {\n+impl server::Literal for RustAnalyzer {\n     fn debug_kind(&mut self, _literal: &Self::Literal) -> String {\n         // r-a: debug_kind and suffix are unsupported; corresponding client code has been changed to not call these.\n         // They must still be present to be ABI-compatible and work with upstream proc_macro.\n@@ -612,7 +612,7 @@ impl server::Literal for Rustc {\n     }\n }\n \n-impl server::SourceFile for Rustc {\n+impl server::SourceFile for RustAnalyzer {\n     // FIXME these are all stubs\n     fn eq(&mut self, _file1: &Self::SourceFile, _file2: &Self::SourceFile) -> bool {\n         true\n@@ -625,7 +625,7 @@ impl server::SourceFile for Rustc {\n     }\n }\n \n-impl server::Diagnostic for Rustc {\n+impl server::Diagnostic for RustAnalyzer {\n     fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n         let mut diag = Diagnostic::new(level, msg);\n         diag.spans = spans;\n@@ -649,7 +649,7 @@ impl server::Diagnostic for Rustc {\n     }\n }\n \n-impl server::Span for Rustc {\n+impl server::Span for RustAnalyzer {\n     fn debug(&mut self, span: Self::Span) -> String {\n         format!(\"{:?}\", span.0)\n     }\n@@ -721,7 +721,7 @@ impl server::Span for Rustc {\n     }\n }\n \n-impl server::MultiSpan for Rustc {\n+impl server::MultiSpan for RustAnalyzer {\n     fn new(&mut self) -> Self::MultiSpan {\n         // FIXME handle span\n         vec![]\n@@ -739,8 +739,8 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_rustc_server_literals() {\n-        let mut srv = Rustc { ident_interner: IdentInterner::default() };\n+    fn test_ra_server_literals() {\n+        let mut srv = RustAnalyzer { ident_interner: IdentInterner::default() };\n         assert_eq!(srv.integer(\"1234\").text, \"1234\");\n \n         assert_eq!(srv.typed_integer(\"12\", \"u8\").text, \"12u8\");\n@@ -776,7 +776,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rustc_server_to_string() {\n+    fn test_ra_server_to_string() {\n         let s = TokenStream {\n             token_trees: vec![\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n@@ -801,7 +801,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rustc_server_from_str() {\n+    fn test_ra_server_from_str() {\n         use std::str::FromStr;\n         let subtree_paren_a = tt::TokenTree::Subtree(tt::Subtree {\n             delimiter: Some(tt::Delimiter {", "previous_filename": "crates/proc-macro-srv/src/abis/abi_1_63/rustc_server.rs"}, {"sha": "9d56f0eaf888f74403e1051c3c026ab357bbff2d", "filename": "crates/proc-macro-srv/src/abis/abi_1_64/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_64%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_64%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_64%2Fmod.rs?ref=ade31ad75784265fe23c0d02ecdff3c74999a213", "patch": "@@ -6,14 +6,14 @@ mod proc_macro;\n \n #[allow(dead_code)]\n #[doc(hidden)]\n-mod rustc_server;\n+mod ra_server;\n \n use libloading::Library;\n use proc_macro_api::ProcMacroKind;\n \n use super::PanicMessage;\n \n-pub use rustc_server::TokenStream;\n+pub use ra_server::TokenStream;\n \n pub(crate) struct Abi {\n     exported_macros: Vec<proc_macro::bridge::client::ProcMacro>,\n@@ -50,7 +50,7 @@ impl Abi {\n                 } if *trait_name == macro_name => {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_body,\n                         true,\n                     );\n@@ -61,7 +61,7 @@ impl Abi {\n                 {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_body,\n                         true,\n                     );\n@@ -72,7 +72,7 @@ impl Abi {\n                 {\n                     let res = client.run(\n                         &proc_macro::bridge::server::SameThread,\n-                        rustc_server::Rustc::default(),\n+                        ra_server::RustAnalyzer::default(),\n                         parsed_attributes,\n                         parsed_body,\n                         true,"}, {"sha": "7e8e67856e9fdfe23c68b39a63a28559a3b44633", "filename": "crates/proc-macro-srv/src/abis/abi_1_64/ra_server.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_64%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade31ad75784265fe23c0d02ecdff3c74999a213/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_64%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_64%2Fra_server.rs?ref=ade31ad75784265fe23c0d02ecdff3c74999a213", "patch": "@@ -268,12 +268,12 @@ pub struct TokenStreamIter {\n }\n \n #[derive(Default)]\n-pub struct Rustc {\n+pub struct RustAnalyzer {\n     ident_interner: IdentInterner,\n     // FIXME: store span information here.\n }\n \n-impl server::Types for Rustc {\n+impl server::Types for RustAnalyzer {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type Ident = IdentId;\n@@ -284,15 +284,15 @@ impl server::Types for Rustc {\n     type MultiSpan = Vec<Span>;\n }\n \n-impl server::FreeFunctions for Rustc {\n+impl server::FreeFunctions for RustAnalyzer {\n     fn track_env_var(&mut self, _var: &str, _value: Option<&str>) {\n         // FIXME: track env var accesses\n         // https://github.com/rust-lang/rust/pull/71858\n     }\n     fn track_path(&mut self, _path: &str) {}\n }\n \n-impl server::TokenStream for Rustc {\n+impl server::TokenStream for RustAnalyzer {\n     fn is_empty(&mut self, stream: &Self::TokenStream) -> bool {\n         stream.is_empty()\n     }\n@@ -449,7 +449,7 @@ fn spacing_to_external(spacing: Spacing) -> bridge::Spacing {\n     }\n }\n \n-impl server::Ident for Rustc {\n+impl server::Ident for RustAnalyzer {\n     fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n         IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n@@ -464,7 +464,7 @@ impl server::Ident for Rustc {\n     }\n }\n \n-impl server::Literal for Rustc {\n+impl server::Literal for RustAnalyzer {\n     fn debug_kind(&mut self, _literal: &Self::Literal) -> String {\n         // r-a: debug_kind and suffix are unsupported; corresponding client code has been changed to not call these.\n         // They must still be present to be ABI-compatible and work with upstream proc_macro.\n@@ -575,7 +575,7 @@ impl server::Literal for Rustc {\n     }\n }\n \n-impl server::SourceFile for Rustc {\n+impl server::SourceFile for RustAnalyzer {\n     // FIXME these are all stubs\n     fn eq(&mut self, _file1: &Self::SourceFile, _file2: &Self::SourceFile) -> bool {\n         true\n@@ -588,7 +588,7 @@ impl server::SourceFile for Rustc {\n     }\n }\n \n-impl server::Diagnostic for Rustc {\n+impl server::Diagnostic for RustAnalyzer {\n     fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n         let mut diag = Diagnostic::new(level, msg);\n         diag.spans = spans;\n@@ -612,7 +612,7 @@ impl server::Diagnostic for Rustc {\n     }\n }\n \n-impl server::Span for Rustc {\n+impl server::Span for RustAnalyzer {\n     fn debug(&mut self, span: Self::Span) -> String {\n         format!(\"{:?}\", span.0)\n     }\n@@ -669,7 +669,7 @@ impl server::Span for Rustc {\n     }\n }\n \n-impl server::MultiSpan for Rustc {\n+impl server::MultiSpan for RustAnalyzer {\n     fn new(&mut self) -> Self::MultiSpan {\n         // FIXME handle span\n         vec![]\n@@ -681,7 +681,7 @@ impl server::MultiSpan for Rustc {\n     }\n }\n \n-impl server::Server for Rustc {\n+impl server::Server for RustAnalyzer {\n     fn globals(&mut self) -> bridge::ExpnGlobals<Self::Span> {\n         bridge::ExpnGlobals {\n             def_site: Span::unspecified(),\n@@ -697,8 +697,8 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_rustc_server_literals() {\n-        let mut srv = Rustc { ident_interner: IdentInterner::default() };\n+    fn test_ra_server_literals() {\n+        let mut srv = RustAnalyzer { ident_interner: IdentInterner::default() };\n         assert_eq!(srv.integer(\"1234\").text, \"1234\");\n \n         assert_eq!(srv.typed_integer(\"12\", \"u8\").text, \"12u8\");\n@@ -734,7 +734,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rustc_server_to_string() {\n+    fn test_ra_server_to_string() {\n         let s = TokenStream {\n             token_trees: vec![\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n@@ -759,7 +759,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rustc_server_from_str() {\n+    fn test_ra_server_from_str() {\n         use std::str::FromStr;\n         let subtree_paren_a = tt::TokenTree::Subtree(tt::Subtree {\n             delimiter: Some(tt::Delimiter {", "previous_filename": "crates/proc-macro-srv/src/abis/abi_1_64/rustc_server.rs"}]}