{"sha": "0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNjY1YWFjZWJkNWIyYjRmYTU3OWM0OWZiYjE2ZGJiNjdlOTM0N2U=", "commit": {"author": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-15T20:08:12Z"}, "committer": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-15T20:08:12Z"}, "message": "Fixed nitpicks\nRemoved unneeded comment\nCommented line wrapping conditions\nRemoved prefix param on `rewrite_associated_type`\nMerged `rewrite_associated_static` into `rewrite_static`\nAdded extra tests", "tree": {"sha": "23a6524dc79dbd6ad44286fc83159aa16ae35719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23a6524dc79dbd6ad44286fc83159aa16ae35719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "html_url": "https://github.com/rust-lang/rust/commit/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/comments", "author": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0a53356341b9bd71e994713c266746b64105a74", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a53356341b9bd71e994713c266746b64105a74", "html_url": "https://github.com/rust-lang/rust/commit/a0a53356341b9bd71e994713c266746b64105a74"}], "stats": {"total": 159, "additions": 91, "deletions": 68}, "files": [{"sha": "8435de621475fb4934de9f464cffb44de00ed72a", "filename": "src/items.rs", "status": "modified", "additions": 45, "deletions": 50, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "patch": "@@ -618,10 +618,6 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         result.push_str(&header);\n \n-        // TODO: Add max_width checking\n-        // let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n-        // let indent = offset + result.len();\n-\n         let body_lo = context.codemap.span_after(item.span, \"{\");\n \n         let generics_str = try_opt!(rewrite_generics(context,\n@@ -636,28 +632,50 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n                                                             type_param_bounds,\n                                                             offset,\n                                                             context.config.max_width));\n-\n-        if offset.width() + result.len() + trait_bound_str.len() > context.config.max_width {\n+        // If the trait, generics, and trait bound cannot fit on the same line,\n+        // put the trait bounds on an indented new line\n+        if offset.width() + last_line_width(&result) + trait_bound_str.len() >\n+           context.config.ideal_width {\n             result.push('\\n');\n             let width = context.block_indent.width() + context.config.tab_spaces;\n             let trait_indent = Indent::new(0, width);\n             result.push_str(&trait_indent.to_string(context.config));\n         }\n         result.push_str(&trait_bound_str);\n \n-        let where_budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n+        let has_body = !trait_items.is_empty();\n+\n+        let where_density = if (context.config.where_density == Density::Compressed &&\n+                                (!result.contains('\\n') ||\n+                                 context.config.fn_args_layout == StructLitStyle::Block)) ||\n+                               (context.config.fn_args_layout == StructLitStyle::Block &&\n+                                result.is_empty()) ||\n+                               (context.config.where_density == Density::CompressedIfEmpty &&\n+                                !has_body &&\n+                                !result.contains('\\n')) {\n+            Density::Compressed\n+        } else {\n+            Density::Tall\n+        };\n+\n+        let where_budget = try_opt!(context.config\n+                                           .max_width\n+                                           .checked_sub(last_line_width(&result)));\n         let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                              &generics.where_clause,\n                                                              context.config,\n                                                              context.config.item_brace_style,\n                                                              context.block_indent,\n                                                              where_budget,\n-                                                             context.config.where_density,\n+                                                             where_density,\n                                                              \"{\",\n-                                                             context.config.where_trailing_comma,\n+                                                             has_body,\n                                                              None));\n+        // If the where clause cannot fit on the same line,\n+        // put the where clause on a new line\n         if !where_clause_str.contains('\\n') &&\n-           result.len() + where_clause_str.len() + offset.width() > context.config.max_width {\n+           last_line_width(&result) + where_clause_str.len() + offset.width() >\n+           context.config.ideal_width {\n             result.push('\\n');\n             let width = context.block_indent.width() + context.config.tab_spaces - 1;\n             let where_indent = Indent::new(0, width);\n@@ -672,7 +690,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             }\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n-                if !where_clause_str.is_empty() {\n+                if !where_clause_str.is_empty() &&\n+                   (trait_items.len() > 0 || result.contains('\\n')) {\n                     result.push('\\n');\n                     result.push_str(&offset.to_string(context.config));\n                 } else {\n@@ -704,6 +723,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             result.push_str(&trim_newlines(&visitor.buffer.to_string().trim()));\n             result.push('\\n');\n             result.push_str(&outer_indent_str);\n+        } else if result.contains('\\n') {\n+            result.push('\\n');\n         }\n \n         result.push('}');\n@@ -1000,7 +1021,7 @@ pub fn rewrite_static(prefix: &str,\n                       ident: ast::Ident,\n                       ty: &ast::Ty,\n                       mutability: ast::Mutability,\n-                      expr: &ast::Expr,\n+                      expr_opt: Option<&ptr::P<ast::Expr>>,\n                       context: &RewriteContext)\n                       -> Option<String> {\n     let prefix = format!(\"{}{} {}{}: \",\n@@ -1013,21 +1034,26 @@ pub fn rewrite_static(prefix: &str,\n                                      context.config.max_width - context.block_indent.width() -\n                                      prefix.len() - 2,\n                                      context.block_indent));\n-    let lhs = format!(\"{}{} =\", prefix, ty_str);\n \n-    // 1 = ;\n-    let remaining_width = context.config.max_width - context.block_indent.width() - 1;\n-    rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent).map(|s| s + \";\")\n+    if let Some(ref expr) = expr_opt {\n+        let lhs = format!(\"{}{} =\", prefix, ty_str);\n+        // 1 = ;\n+        let remaining_width = context.config.max_width - context.block_indent.width() - 1;\n+        rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent)\n+            .map(|s| s + \";\")\n+    } else {\n+        let lhs = format!(\"{}{};\", prefix, ty_str);\n+        Some(lhs)\n+    }\n }\n \n-pub fn rewrite_associated_type(prefix: &str,\n-                               ident: ast::Ident,\n+pub fn rewrite_associated_type(ident: ast::Ident,\n                                ty_opt: Option<&ptr::P<ast::Ty>>,\n                                ty_param_bounds_opt: Option<&ast::TyParamBounds>,\n                                context: &RewriteContext,\n                                indent: Indent)\n                                -> Option<String> {\n-    let prefix = format!(\"{} {}\", prefix, ident);\n+    let prefix = format!(\"type {}\", ident);\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n         let bounds: &[_] = &ty_param_bounds.as_slice();\n@@ -1058,37 +1084,6 @@ pub fn rewrite_associated_type(prefix: &str,\n     }\n }\n \n-pub fn rewrite_associated_static(prefix: &str,\n-                                 vis: ast::Visibility,\n-                                 ident: ast::Ident,\n-                                 ty: &ast::Ty,\n-                                 mutability: ast::Mutability,\n-                                 expr_opt: &Option<ptr::P<ast::Expr>>,\n-                                 context: &RewriteContext)\n-                                 -> Option<String> {\n-    let prefix = format!(\"{}{} {}{}: \",\n-                         format_visibility(vis),\n-                         prefix,\n-                         format_mutability(mutability),\n-                         ident);\n-    // 2 = \" =\".len()\n-    let ty_str = try_opt!(ty.rewrite(context,\n-                                     context.config.max_width - context.block_indent.width() -\n-                                     prefix.len() - 2,\n-                                     context.block_indent));\n-\n-    if let &Some(ref expr) = expr_opt {\n-        let lhs = format!(\"{}{} =\", prefix, ty_str);\n-        // 1 = ;\n-        let remaining_width = context.config.max_width - context.block_indent.width() - 1;\n-        rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent)\n-            .map(|s| s + \";\")\n-    } else {\n-        let lhs = format!(\"{}{};\", prefix, ty_str);\n-        Some(lhs)\n-    }\n-}\n-\n impl Rewrite for ast::FunctionRetTy {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match *self {"}, {"sha": "62fbfd7613fa316acce7c0b892ab315f651a9712", "filename": "src/visitor.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "patch": "@@ -21,8 +21,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::{rewrite_static, rewrite_associated_static, rewrite_associated_type,\n-            rewrite_type_alias, format_impl, format_trait};\n+use items::{rewrite_static, rewrite_associated_type, rewrite_type_alias, format_impl, format_trait};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -267,7 +266,7 @@ impl<'a> FmtVisitor<'a> {\n                                              item.ident,\n                                              ty,\n                                              mutability,\n-                                             expr,\n+                                             Some(expr),\n                                              &self.get_context());\n                 self.push_rewrite(item.span, rewrite);\n             }\n@@ -277,7 +276,7 @@ impl<'a> FmtVisitor<'a> {\n                                              item.ident,\n                                              ty,\n                                              ast::Mutability::Immutable,\n-                                             expr,\n+                                             Some(expr),\n                                              &self.get_context());\n                 self.push_rewrite(item.span, rewrite);\n             }\n@@ -315,14 +314,14 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         match ti.node {\n-            ast::TraitItemKind::Const(ref ty, ref expr) => {\n-                let rewrite = rewrite_associated_static(\"const\",\n-                                                        ast::Visibility::Inherited,\n-                                                        ti.ident,\n-                                                        ty,\n-                                                        ast::Mutability::Immutable,\n-                                                        expr,\n-                                                        &self.get_context());\n+            ast::TraitItemKind::Const(ref ty, ref expr_opt) => {\n+                let rewrite = rewrite_static(\"const\",\n+                                             ast::Visibility::Inherited,\n+                                             ti.ident,\n+                                             ty,\n+                                             ast::Mutability::Immutable,\n+                                             expr_opt.as_ref(),\n+                                             &self.get_context());\n                 self.push_rewrite(ti.span, rewrite);\n             }\n             ast::TraitItemKind::Method(ref sig, None) => {\n@@ -338,8 +337,7 @@ impl<'a> FmtVisitor<'a> {\n                               ti.id);\n             }\n             ast::TraitItemKind::Type(ref type_param_bounds, _) => {\n-                let rewrite = rewrite_associated_type(\"type\",\n-                                                      ti.ident,\n+                let rewrite = rewrite_associated_type(ti.ident,\n                                                       None,\n                                                       Some(type_param_bounds),\n                                                       &self.get_context(),\n@@ -368,13 +366,12 @@ impl<'a> FmtVisitor<'a> {\n                                              ii.ident,\n                                              ty,\n                                              ast::Mutability::Immutable,\n-                                             &expr,\n+                                             Some(expr),\n                                              &self.get_context());\n                 self.push_rewrite(ii.span, rewrite);\n             }\n             ast::ImplItemKind::Type(ref ty) => {\n-                let rewrite = rewrite_associated_type(\"type\",\n-                                                      ii.ident,\n+                let rewrite = rewrite_associated_type(ii.ident,\n                                                       Some(ty),\n                                                       None,\n                                                       &self.get_context(),"}, {"sha": "faac57179c202560d2807a6beae527ac8aa86f1a", "filename": "tests/source/trait.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/tests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/tests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrait.rs?ref=0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "patch": "@@ -43,3 +43,13 @@ trait Foo { type Bar: Baz;}\n trait ConstCheck<T>:Foo   where   T: Baz { \n         const   J:   i32;\n }\n+\n+trait Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt<T> \n+    where T: Foo {}\n+\n+trait Ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt<T> where T: Foo {}\n+\n+trait FooBar<T> : Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt where J: Bar { fn test(); }\n+\n+trait WhereList<T, J> where T: Foo, J: Bar {}\n+"}, {"sha": "d8acc1ba229b12fed6192b73ae1758409c0bd786", "filename": "tests/target/trait.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a665aacebd5b2b4fa579c49fbb16dbb67e9347e/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=0a665aacebd5b2b4fa579c49fbb16dbb67e9347e", "patch": "@@ -41,7 +41,28 @@ trait Foo {\n     type Bar: Baz;\n }\n \n-trait ConstCheck<T>: Foo where T: Baz\n+trait ConstCheck<T>: Foo\n+    where T: Baz\n {\n     const J: i32;\n }\n+\n+trait Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt<T> where T: Foo {}\n+\n+trait Ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt<T>\n+    where T: Foo\n+{\n+}\n+\n+trait FooBar<T>\n+    : Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\n+    where J: Bar\n+{\n+    fn test();\n+}\n+\n+trait WhereList<T, J>\n+    where T: Foo,\n+          J: Bar\n+{\n+}"}]}