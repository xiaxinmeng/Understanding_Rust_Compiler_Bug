{"sha": "d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2JmNTc2ZGFlMzJiYmMwZmRhY2ZmNmM4OGY5NTg2ZDZlMGIwOGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T17:17:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T17:17:11Z"}, "message": "Rollup merge of #65347 - RalfJung:unwind-abort-rust, r=varkor\n\nFix #[unwind(abort)] with Rust ABI\n\nFixes #63883.", "tree": {"sha": "e5e74aec2b914c820317309130adeb2f5f87d073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e74aec2b914c820317309130adeb2f5f87d073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdo1wXCRBK7hj4Ov3rIwAAdHIIAHH1mlbPL6GWe7MIVD8b0NhJ\nG+dUW7a8Cgw0/hUIL4vMm0YWN024IujimXtOdgWnh4iG4P8KLFJgi3lVid77BvQQ\njtPJr4zqiWzQDzEhmR8ANjg9llpGr/mi1o1abeVEI6Zb5NrQa2iIbiUKV3evyI86\ns+eTYkfGJKqR0llof9M13yey+YGUk0mBPy8F4kh5mPmA/GLSNHZ3ULMlrebIFPVG\nSVgukNXPg3dwSXS0h1j68nMPquUckbD2BmPC++q4uN0sSdKQXwPG4dtLjLugUMwh\n9VQHxa0G4rkPNeb4pWNAAvXxV9EQS8+skd2eK+8qAU+F1nLygcCt2NZ52Zieuhg=\n=3iXA\n-----END PGP SIGNATURE-----\n", "payload": "tree e5e74aec2b914c820317309130adeb2f5f87d073\nparent 4f8214cf2fc4022be06b2fe6ceb6daa190563b4f\nparent df9335120b2bc2ad4c5f619b3173f20958dcd406\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570987031 +0200\ncommitter GitHub <noreply@github.com> 1570987031 +0200\n\nRollup merge of #65347 - RalfJung:unwind-abort-rust, r=varkor\n\nFix #[unwind(abort)] with Rust ABI\n\nFixes #63883.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f", "html_url": "https://github.com/rust-lang/rust/commit/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "html_url": "https://github.com/rust-lang/rust/commit/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f"}, {"sha": "df9335120b2bc2ad4c5f619b3173f20958dcd406", "url": "https://api.github.com/repos/rust-lang/rust/commits/df9335120b2bc2ad4c5f619b3173f20958dcd406", "html_url": "https://github.com/rust-lang/rust/commit/df9335120b2bc2ad4c5f619b3173f20958dcd406"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "ffb70180bbb4b7676f1c88098e7fcf21071a756c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f", "patch": "@@ -502,24 +502,21 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: DefId, abi: Abi) -> bool {\n-    // Not callable from C, so we can safely unwind through these\n-    if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n-\n-    // Validate `#[unwind]` syntax regardless of platform-specific panic strategy\n+fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: DefId, _abi: Abi) -> bool {\n+    // Validate `#[unwind]` syntax regardless of platform-specific panic strategy.\n     let attrs = &tcx.get_attrs(fn_def_id);\n     let unwind_attr = attr::find_unwind_attr(Some(tcx.sess.diagnostic()), attrs);\n \n-    // We never unwind, so it's not relevant to stop an unwind\n+    // We never unwind, so it's not relevant to stop an unwind.\n     if tcx.sess.panic_strategy() != PanicStrategy::Unwind { return false; }\n \n-    // We cannot add landing pads, so don't add one\n+    // We cannot add landing pads, so don't add one.\n     if tcx.sess.no_landing_pads() { return false; }\n \n     // This is a special case: some functions have a C abi but are meant to\n     // unwind anyway. Don't stop them.\n     match unwind_attr {\n-        None => false, // FIXME(#58794)\n+        None => false, // FIXME(#58794); should be `!(abi == Abi::Rust || abi == Abi::RustCall)`\n         Some(UnwindAttr::Allowed) => false,\n         Some(UnwindAttr::Aborts) => true,\n     }"}, {"sha": "c6e8dbf012cf3d42d6443ba7435e9f6cb80eb81a", "filename": "src/test/ui/panics/abort-on-panic.rs", "status": "renamed", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f/src%2Ftest%2Fui%2Fpanics%2Fabort-on-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f/src%2Ftest%2Fui%2Fpanics%2Fabort-on-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fabort-on-panic.rs?ref=d3cbf576dae32bbc0fdacff6c88f9586d6e0b08f", "patch": "@@ -14,27 +14,51 @@ use std::io::prelude::*;\n use std::io;\n use std::process::{Command, Stdio};\n \n-#[unwind(aborts)] // FIXME(#58794)\n+#[unwind(aborts)] // FIXME(#58794) should work even without the attribute\n extern \"C\" fn panic_in_ffi() {\n     panic!(\"Test\");\n }\n \n+#[unwind(aborts)]\n+extern \"Rust\" fn panic_in_rust_abi() {\n+    panic!(\"TestRust\");\n+}\n+\n fn test() {\n     let _ = panic::catch_unwind(|| { panic_in_ffi(); });\n     // The process should have aborted by now.\n     io::stdout().write(b\"This should never be printed.\\n\");\n     let _ = io::stdout().flush();\n }\n \n+fn testrust() {\n+    let _ = panic::catch_unwind(|| { panic_in_rust_abi(); });\n+    // The process should have aborted by now.\n+    io::stdout().write(b\"This should never be printed.\\n\");\n+    let _ = io::stdout().flush();\n+}\n+\n fn main() {\n     let args: Vec<String> = env::args().collect();\n-    if args.len() > 1 && args[1] == \"test\" {\n-        return test();\n+    if args.len() > 1 {\n+        // This is inside the self-executed command.\n+        match &*args[1] {\n+            \"test\" => return test(),\n+            \"testrust\" => return testrust(),\n+            _ => panic!(\"bad test\"),\n+        }\n     }\n \n+    // These end up calling the self-execution branches above.\n     let mut p = Command::new(&args[0])\n                         .stdout(Stdio::piped())\n                         .stdin(Stdio::piped())\n                         .arg(\"test\").spawn().unwrap();\n     assert!(!p.wait().unwrap().success());\n+\n+    let mut p = Command::new(&args[0])\n+                        .stdout(Stdio::piped())\n+                        .stdin(Stdio::piped())\n+                        .arg(\"testrust\").spawn().unwrap();\n+    assert!(!p.wait().unwrap().success());\n }", "previous_filename": "src/test/ui/abi/abort-on-c-abi.rs"}]}