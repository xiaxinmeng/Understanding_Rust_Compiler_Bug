{"sha": "e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13", "node_id": "C_kwDOAAsO6NoAKGU3ZGYwYTRiNTQ5ZTVkM2I0YWVjMGNjNzljNDI2MmM1YTJkZmVmMTM", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-05-05T01:53:22Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-05-05T01:53:22Z"}, "message": "Simplify get() after contains()", "tree": {"sha": "e93c40ab6de00a0e2c53f57db41bf59dcfd31ded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93c40ab6de00a0e2c53f57db41bf59dcfd31ded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13", "html_url": "https://github.com/rust-lang/rust/commit/e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603d342e00719fdba6691d6bed65e66ae817d46e", "url": "https://api.github.com/repos/rust-lang/rust/commits/603d342e00719fdba6691d6bed65e66ae817d46e", "html_url": "https://github.com/rust-lang/rust/commit/603d342e00719fdba6691d6bed65e66ae817d46e"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "a619e2f77125243a062ca7617c098f7a2ca562c7", "filename": "src/declare.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13/src%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13/src%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeclare.rs?ref=e7df0a4b549e5d3b4aec0cc79c4262c5a2dfef13", "patch": "@@ -11,8 +11,7 @@ use crate::intrinsic::llvm;\n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     pub fn get_or_insert_global(&self, name: &str, ty: Type<'gcc>, is_tls: bool, link_section: Option<Symbol>) -> LValue<'gcc> {\n         if self.globals.borrow().contains_key(name) {\n-            // TODO: use [] instead of .get().expect()?\n-            let typ = self.globals.borrow().get(name).expect(\"global\").get_type();\n+            let typ = self.globals.borrow()[name].get_type();\n             let global = self.context.new_global(None, GlobalKind::Imported, typ, name);\n             if is_tls {\n                 global.set_tls_model(self.tls_model);\n@@ -110,7 +109,7 @@ fn declare_raw_fn<'gcc>(cx: &CodegenCx<'gcc, '_>, name: &str, _callconv: () /*ll\n     }\n     let func =\n         if cx.functions.borrow().contains_key(name) {\n-            *cx.functions.borrow().get(name).expect(\"function\")\n+            cx.functions.borrow()[name]\n         }\n         else {\n             let params: Vec<_> = param_types.into_iter().enumerate()"}]}