{"sha": "dd626b48c495cbcfdbac7319641bd74d2ec0b370", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNjI2YjQ4YzQ5NWNiY2ZkYmFjNzMxOTY0MWJkNzRkMmVjMGIzNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-08T02:36:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-08T02:36:15Z"}, "message": "auto merge of #16933 : nick29581/rust/dst-rvalue, r=nikomatsakis\n\nCloses #16813 \r\n\r\nr? @nikomatsakis I feel like I should be checking more things in check_rvalues, but not sure what - I don't properly understand expr_use_visitor", "tree": {"sha": "0f9d477e8e6919d1be4f809629c750f45cc9dbc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f9d477e8e6919d1be4f809629c750f45cc9dbc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd626b48c495cbcfdbac7319641bd74d2ec0b370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd626b48c495cbcfdbac7319641bd74d2ec0b370", "html_url": "https://github.com/rust-lang/rust/commit/dd626b48c495cbcfdbac7319641bd74d2ec0b370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd626b48c495cbcfdbac7319641bd74d2ec0b370/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf141d399097d0ea84288b9ad1dc842a6158a5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf141d399097d0ea84288b9ad1dc842a6158a5c", "html_url": "https://github.com/rust-lang/rust/commit/aaf141d399097d0ea84288b9ad1dc842a6158a5c"}, {"sha": "742f49c961426be422c479c7e47957c45e560ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/742f49c961426be422c479c7e47957c45e560ba6", "html_url": "https://github.com/rust-lang/rust/commit/742f49c961426be422c479c7e47957c45e560ba6"}], "stats": {"total": 127, "additions": 123, "deletions": 4}, "files": [{"sha": "079e01c6ed65bf7a070c54941bbecc129011e859", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -169,5 +169,6 @@ register_diagnostics!(\n     E0157,\n     E0158,\n     E0159,\n-    E0160\n+    E0160,\n+    E0161\n )"}, {"sha": "d46eecc1d63d2de440d7b09b7255709c36b9bf3b", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -404,6 +404,9 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n     time(time_passes, \"borrow checking\", (), |_|\n          middle::borrowck::check_crate(&ty_cx, krate));\n \n+    time(time_passes, \"rvalue checking\", (), |_|\n+         middle::check_rvalues::check_crate(&ty_cx, krate));\n+\n     time(time_passes, \"kind checking\", (), |_|\n          kind::check_crate(&ty_cx, krate));\n "}, {"sha": "75a48fdd596ea7dc821a4edc711585154c6ba838", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -80,6 +80,7 @@ pub mod middle {\n     pub mod check_const;\n     pub mod check_loop;\n     pub mod check_match;\n+    pub mod check_rvalues;\n     pub mod check_static;\n     pub mod const_eval;\n     pub mod dataflow;"}, {"sha": "0ac6f21dc1f98abd3ced4f7b9a5ea1b45087bf8f", "filename": "src/librustc/middle/check_rvalues.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that all rvalues in a crate have statically known size. check_crate\n+// is the public starting point.\n+\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n+use middle::ty;\n+use util::ppaux::ty_to_string;\n+\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::visit;\n+\n+pub fn check_crate(tcx: &ty::ctxt,\n+                   krate: &ast::Crate) {\n+    let mut rvcx = RvalueContext { tcx: tcx };\n+    visit::walk_crate(&mut rvcx, krate, ());\n+}\n+\n+struct RvalueContext<'a> {\n+    tcx: &'a ty::ctxt\n+}\n+\n+impl<'a> visit::Visitor<()> for RvalueContext<'a> {\n+    fn visit_fn(&mut self,\n+                _: &visit::FnKind,\n+                fd: &ast::FnDecl,\n+                b: &ast::Block,\n+                _: Span,\n+                _: ast::NodeId,\n+                _: ()) {\n+        let mut euv = euv::ExprUseVisitor::new(self, self.tcx);\n+        euv.walk_fn(fd, b);\n+    }\n+}\n+\n+impl<'a> euv::Delegate for RvalueContext<'a> {\n+    fn consume(&mut self,\n+               _: ast::NodeId,\n+               span: Span,\n+               cmt: mc::cmt,\n+               _: euv::ConsumeMode) {\n+        debug!(\"consume; cmt: {:?}; type: {}\", *cmt, ty_to_string(self.tcx, cmt.ty));\n+        if !ty::type_is_sized(self.tcx, cmt.ty) {\n+            span_err!(self.tcx.sess, span, E0161,\n+                \"cannot move a value of type {0}: the size of {0} cannot be statically determined\",\n+                ty_to_string(self.tcx, cmt.ty));\n+        }\n+    }\n+\n+    fn consume_pat(&mut self,\n+                   _consume_pat: &ast::Pat,\n+                   _cmt: mc::cmt,\n+                   _mode: euv::ConsumeMode) {\n+    }\n+\n+    fn borrow(&mut self,\n+              _borrow_id: ast::NodeId,\n+              _borrow_span: Span,\n+              _cmt: mc::cmt,\n+              _loan_region: ty::Region,\n+              _bk: ty::BorrowKind,\n+              _loan_cause: euv::LoanCause) {\n+    }\n+\n+    fn decl_without_init(&mut self,\n+                         _id: ast::NodeId,\n+                         _span: Span) {\n+    }\n+\n+    fn mutate(&mut self,\n+              _assignment_id: ast::NodeId,\n+              _assignment_span: Span,\n+              _assignee_cmt: mc::cmt,\n+              _mode: euv::MutateMode) {\n+    }\n+}"}, {"sha": "56e501388f1e894b30d7b4ca73e8bd7984177c8f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -150,7 +150,7 @@ pub enum MutabilityCategory {\n // like `*x`, the type of this deref node is the deref'd type (`T`),\n // but in a pattern like `@x`, the `@x` pattern is again a\n // dereference, but its type is the type *before* the dereference\n-// (`@T`). So use `cmt.type` to find the type of the value in a consistent\n+// (`@T`). So use `cmt.ty` to find the type of the value in a consistent\n // fashion. For more details, see the method `cat_pattern`\n #[deriving(Clone, PartialEq)]\n pub struct cmt_ {"}, {"sha": "76becdc855dcd86a2b0f99c4eb510e9cdb78dfd4", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -43,4 +43,5 @@ pub fn main() {\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = box Bar1 {f: 36};\n     f5.ptr = *z;  //~ ERROR dynamically sized type on lhs of assignment\n+    //~^ ERROR E0161\n }"}, {"sha": "e2e387e1a48f41a3cf4bb6e8d3731af5975e1b31", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -22,4 +22,5 @@ pub fn main() {\n     let g: &Fat<[int]> = &f;\n     let h: &Fat<Fat<[int]>> = &Fat { ptr: *g };\n     //~^ ERROR trying to initialise a dynamically sized struct\n+    //~^^ ERROR E0161\n }"}, {"sha": "52b7ea9efa5ed546c2e106fdadfa70803a9a716a", "filename": "src/test/compile-fail/dst-rvalue.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that dynamically sized rvalues are forbidden\n+\n+pub fn main() {\n+    let _x: Box<str> = box *\"hello world\";\n+    //~^ ERROR E0161\n+\n+    let array: &[int] = &[1, 2, 3];\n+    let _x: Box<[int]> = box *array;\n+    //~^ ERROR E0161\n+}"}, {"sha": "7ea282c599f51a1a7435fbef03c3fe6cf6cf521b", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -17,6 +17,8 @@ struct Struct {\n fn new_struct(r: A+'static) -> Struct {\n     //~^ ERROR variable `r` has dynamically sized type\n     Struct { r: r } //~ ERROR trying to initialise a dynamically sized struct\n+    //~^ ERROR E0161\n+    //~^^ ERROR E0161\n }\n \n trait Curve {}"}, {"sha": "cf42e79b3941e23bd0c614854d3fb7d55b8c00ae", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -51,8 +51,10 @@ fn f8<Sized? X>(x1: &S<X>, x2: &S<X>) {\n \n // Test some tuples.\n fn f9<Sized? X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(*x1, 34i)); //~ERROR instantiating a type parameter with an incompatible type `(S<X>,int)`,\n-    f5(&(32i, *x2)); //~ERROR instantiating a type parameter with an incompatible type `(int,E<X>)`,\n+    f5(&(*x1, 34i)); //~ERROR E0161\n+    //~^ ERROR instantiating a type parameter with an incompatible type\n+    f5(&(32i, *x2)); //~ERROR E0161\n+    //~^ ERROR instantiating a type parameter with an incompatible type\n }\n \n // I would like these to fail eventually."}, {"sha": "6618cce0214f4373e2ed0ccdc16b421dbdf2418d", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd626b48c495cbcfdbac7319641bd74d2ec0b370/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=dd626b48c495cbcfdbac7319641bd74d2ec0b370", "patch": "@@ -30,11 +30,13 @@ fn f3<Sized? X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1; //~ERROR variable `y` has dynamically sized type `X`\n     let y = *x2; //~ERROR variable `y` has dynamically sized type `X`\n     let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n+    //~^ ERROR E0161\n }\n fn f4<Sized? X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;         //~ERROR variable `y` has dynamically sized type `X`\n     let y = *x2;            //~ERROR variable `y` has dynamically sized type `X`\n     let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n+    //~^ ERROR E0161\n }\n \n fn g1<Sized? X>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`"}]}