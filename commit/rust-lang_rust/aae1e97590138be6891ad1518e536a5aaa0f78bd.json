{"sha": "aae1e97590138be6891ad1518e536a5aaa0f78bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZTFlOTc1OTAxMzhiZTY4OTFhZDE1MThlNTM2YTVhYWEwZjc4YmQ=", "commit": {"author": {"name": "Dorian Peake", "email": "dozzman@hotmail.co.uk", "date": "2021-09-05T15:32:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-05T15:32:05Z"}, "message": "Add rust-project.json + cargo check info to docs\n\nAdd information about how to configure compilation errors/checks when using rust-project.json.", "tree": {"sha": "c7177e73beb323554dd2f56eb2043a3848ea1d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7177e73beb323554dd2f56eb2043a3848ea1d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aae1e97590138be6891ad1518e536a5aaa0f78bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhNOL1CRBK7hj4Ov3rIwAAJDEIAFOjZlkNwlSvPzlUzvPbKkBE\nA57aP7MWlGZa/v6w6/iNwnY2YUMwwR+1qxtDE/gvklgUBMiUrqIdD00Z2Bxu3VHc\nKKglg9eO0BEzHbVHVwlAs5yYDtJRTUM3y/M0z6GwnGyL/l3onlxHy19aGu5fyDH3\nu7QMX45O71dlmOeuBduqiR8j6KqpYxRrBjHlSJ8OX0d7s5AZWM9YK2dH064bYOjp\nAJKLtuZveAeozB3To9dxqc5ey9QDXpnyBUov5mY1zYL9b2ExjrJLmUR72Gg3TBOw\n5a6PK+MKVfWUpVWr97lienICJsd885ll2rhBIwPRe2F3BuGej7GhUrBcqbgFrCU=\n=zolo\n-----END PGP SIGNATURE-----\n", "payload": "tree c7177e73beb323554dd2f56eb2043a3848ea1d96\nparent c16e6474f9e4d11d967e5309735b0e673f4c24da\nauthor Dorian Peake <dozzman@hotmail.co.uk> 1630855925 +0100\ncommitter GitHub <noreply@github.com> 1630855925 +0100\n\nAdd rust-project.json + cargo check info to docs\n\nAdd information about how to configure compilation errors/checks when using rust-project.json."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aae1e97590138be6891ad1518e536a5aaa0f78bd", "html_url": "https://github.com/rust-lang/rust/commit/aae1e97590138be6891ad1518e536a5aaa0f78bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aae1e97590138be6891ad1518e536a5aaa0f78bd/comments", "author": {"login": "dozzman", "id": 1062440, "node_id": "MDQ6VXNlcjEwNjI0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1062440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dozzman", "html_url": "https://github.com/dozzman", "followers_url": "https://api.github.com/users/dozzman/followers", "following_url": "https://api.github.com/users/dozzman/following{/other_user}", "gists_url": "https://api.github.com/users/dozzman/gists{/gist_id}", "starred_url": "https://api.github.com/users/dozzman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dozzman/subscriptions", "organizations_url": "https://api.github.com/users/dozzman/orgs", "repos_url": "https://api.github.com/users/dozzman/repos", "events_url": "https://api.github.com/users/dozzman/events{/privacy}", "received_events_url": "https://api.github.com/users/dozzman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c16e6474f9e4d11d967e5309735b0e673f4c24da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16e6474f9e4d11d967e5309735b0e673f4c24da", "html_url": "https://github.com/rust-lang/rust/commit/c16e6474f9e4d11d967e5309735b0e673f4c24da"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "b74e498f6474f6aa6572d1d0ae923854365e893e", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aae1e97590138be6891ad1518e536a5aaa0f78bd/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/aae1e97590138be6891ad1518e536a5aaa0f78bd/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=aae1e97590138be6891ad1518e536a5aaa0f78bd", "patch": "@@ -616,6 +616,27 @@ See https://github.com/rust-analyzer/rust-project.json-example for a small examp\n \n You can set `RA_LOG` environmental variable to `rust_analyzer=info` to inspect how rust-analyzer handles config and project loading.\n \n+Note that calls to `cargo check` are disabled when using `rust-project.json` by default, so compilation errors and warnings will no longer be sent to your LSP client. To enable these compilation errors you will need to specify explicitly what command rust-analyzer should run to perform the checks using the `checkOnSave.overrideCommand` configuration. The following example, explicitly enables calls to `cargo check` in neovim's configuration:\n+\n+[source,vim]\n+----\n+lua << EOF\n+nvim_lsp['rust_analyzer'].setup {\n+  on_attach = on_attach,\n+  settings = {\n+    [\"rust-analyzer\"] = {\n+      checkOnSave = {\n+        overrideCommand = {\"cargo\", \"check\", \"--message-format=json\"},\n+        enable = true,\n+      }\n+    }\n+  }\n+}\n+EOF\n+----\n+\n+The `checkOnSave.overrideCommand` requires the command specified to output json error messages for rust-analyzer to consume. The `--message-format=json` flag does this for `cargo check` so whichever command you use must also output errors in this format. See the <<Configuration>> section for more information. \n+\n == Security\n \n At the moment, rust-analyzer assumes that all code is trusted."}]}