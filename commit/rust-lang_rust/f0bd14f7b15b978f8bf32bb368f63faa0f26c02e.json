{"sha": "f0bd14f7b15b978f8bf32bb368f63faa0f26c02e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYmQxNGY3YjE1Yjk3OGY4YmYzMmJiMzY4ZjYzZmFhMGYyNmMwMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-30T04:44:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-30T04:44:47Z"}, "message": "Auto merge of #24960 - tynopex:patch-doc, r=alexcrichton\n\n- Removed misleading comments about now-defunct CreatePipe\r\n- Actually use std::process::Child in it's example\r\n- Minor cleanups", "tree": {"sha": "272630ec9d08013c757835415bef31375609db7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/272630ec9d08013c757835415bef31375609db7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0bd14f7b15b978f8bf32bb368f63faa0f26c02e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bd14f7b15b978f8bf32bb368f63faa0f26c02e", "html_url": "https://github.com/rust-lang/rust/commit/f0bd14f7b15b978f8bf32bb368f63faa0f26c02e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0bd14f7b15b978f8bf32bb368f63faa0f26c02e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac5f595d0a863b41790442a5ae3d65528dda6ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5f595d0a863b41790442a5ae3d65528dda6ecb", "html_url": "https://github.com/rust-lang/rust/commit/ac5f595d0a863b41790442a5ae3d65528dda6ecb"}, {"sha": "3abba10e4f01e317614e4d4b25682a87dac3a23e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3abba10e4f01e317614e4d4b25682a87dac3a23e", "html_url": "https://github.com/rust-lang/rust/commit/3abba10e4f01e317614e4d4b25682a87dac3a23e"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "8f8699f4b9fea9f29f48a3530286ca1a8059a50f", "filename": "src/libstd/process.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f0bd14f7b15b978f8bf32bb368f63faa0f26c02e/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bd14f7b15b978f8bf32bb368f63faa0f26c02e/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=f0bd14f7b15b978f8bf32bb368f63faa0f26c02e", "patch": "@@ -40,11 +40,15 @@ use thread;\n /// ```should_panic\n /// use std::process::Command;\n ///\n-/// let output = Command::new(\"/bin/cat\").arg(\"file.txt\").output().unwrap_or_else(|e| {\n-///     panic!(\"failed to execute child: {}\", e)\n-/// });\n-/// let contents = output.stdout;\n-/// assert!(output.status.success());\n+/// let mut child = Command::new(\"/bin/cat\")\n+///                         .arg(\"file.txt\")\n+///                         .spawn()\n+///                         .unwrap_or_else(|e| { panic!(\"failed to execute child: {}\", e) });\n+///\n+/// let ecode = child.wait()\n+///                  .unwrap_or_else(|e| { panic!(\"failed to wait on child: {}\", e) });\n+///\n+/// assert!(ecode.success());\n /// ```\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Child {\n@@ -118,9 +122,11 @@ impl Read for ChildStderr {\n /// ```\n /// use std::process::Command;\n ///\n-/// let output = Command::new(\"sh\").arg(\"-c\").arg(\"echo hello\").output().unwrap_or_else(|e| {\n-///   panic!(\"failed to execute process: {}\", e)\n-/// });\n+/// let output = Command::new(\"sh\")\n+///                      .arg(\"-c\")\n+///                      .arg(\"echo hello\")\n+///                      .output()\n+///                      .unwrap_or_else(|e| { panic!(\"failed to execute process: {}\", e) });\n /// let hello = output.stdout;\n /// ```\n #[stable(feature = \"process\", since = \"1.0.0\")]\n@@ -140,7 +146,7 @@ impl Command {\n     /// * No arguments to the program\n     /// * Inherit the current process's environment\n     /// * Inherit the current process's working directory\n-    /// * Inherit stdin/stdout/stderr for `run` or `status`, but create pipes for `output`\n+    /// * Inherit stdin/stdout/stderr for `spawn` or `status`, but create pipes for `output`\n     ///\n     /// Builder methods are provided to change these defaults and\n     /// otherwise configure the process.\n@@ -202,23 +208,20 @@ impl Command {\n     }\n \n     /// Configuration for the child process's stdin handle (file descriptor 0).\n-    /// Defaults to `CreatePipe(true, false)` so the input can be written to.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn stdin(&mut self, cfg: Stdio) -> &mut Command {\n         self.stdin = Some(cfg.0);\n         self\n     }\n \n     /// Configuration for the child process's stdout handle (file descriptor 1).\n-    /// Defaults to `CreatePipe(false, true)` so the output can be collected.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn stdout(&mut self, cfg: Stdio) -> &mut Command {\n         self.stdout = Some(cfg.0);\n         self\n     }\n \n     /// Configuration for the child process's stderr handle (file descriptor 2).\n-    /// Defaults to `CreatePipe(false, true)` so the output can be collected.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn stderr(&mut self, cfg: Stdio) -> &mut Command {\n         self.stderr = Some(cfg.0);\n@@ -356,7 +359,7 @@ pub struct Output {\n     pub stderr: Vec<u8>,\n }\n \n-/// Describes what to do with a standard io stream for a child process.\n+/// Describes what to do with a standard I/O stream for a child process.\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(StdioImp);\n "}]}