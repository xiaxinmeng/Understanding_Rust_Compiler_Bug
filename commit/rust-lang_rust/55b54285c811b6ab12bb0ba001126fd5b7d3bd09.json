{"sha": "55b54285c811b6ab12bb0ba001126fd5b7d3bd09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YjU0Mjg1YzgxMWI2YWIxMmJiMGJhMDAxMTI2ZmQ1YjdkM2JkMDk=", "commit": {"author": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2019-09-30T22:08:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-30T22:08:51Z"}, "message": "Simplify a conditional in `collect_annotations`\n\nAlso avoid excessive cloning", "tree": {"sha": "bc3af9f193ad0c1daf122a45427f3e95fd3614d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc3af9f193ad0c1daf122a45427f3e95fd3614d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55b54285c811b6ab12bb0ba001126fd5b7d3bd09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdknzzCRBK7hj4Ov3rIwAAdHIIAIYBfCMaZWNign6FEE8+ygKR\nYILC6iO6QMu9eVNLswIQnVq3ctOJzl/8QlVoWGoT0bUXD/pNHA7GPNJ+cDkDaQ5c\n4sEBKj2WXVuvdvPeRhQpo33y8nMdS3rgXRg2HFFR39mxvzL/TDCtMQCxiyVOvCx4\nQrqMG02c4/yrR9zSCA5vEB6SI7LVaUzKfH0Rse3x9ahT+sF7iDYiVGQtgoSrj4kr\nQcHKlpggCJxEwdg5hhkW5qSoMHjnDY7zaGQ1pf1lpb8iKUolGwc8zSEKNOBihiNL\nATIUDStXQo/Et8JLk9WvTtYQGVkipeH6N0iMbaI9x7hP+tonX/UODNhY1eKCADk=\n=UoWV\n-----END PGP SIGNATURE-----\n", "payload": "tree bc3af9f193ad0c1daf122a45427f3e95fd3614d8\nparent 9d73176978c1eece320fe7786d7f66db2bbb6838\nauthor AnthonyMikh <anthony.mikh@yandex.ru> 1569881331 +0300\ncommitter GitHub <noreply@github.com> 1569881331 +0300\n\nSimplify a conditional in `collect_annotations`\n\nAlso avoid excessive cloning"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55b54285c811b6ab12bb0ba001126fd5b7d3bd09", "html_url": "https://github.com/rust-lang/rust/commit/55b54285c811b6ab12bb0ba001126fd5b7d3bd09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55b54285c811b6ab12bb0ba001126fd5b7d3bd09/comments", "author": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d73176978c1eece320fe7786d7f66db2bbb6838", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d73176978c1eece320fe7786d7f66db2bbb6838", "html_url": "https://github.com/rust-lang/rust/commit/9d73176978c1eece320fe7786d7f66db2bbb6838"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "d5e9d7184300ed1a48ea7bd9a4223fda011b734e", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/55b54285c811b6ab12bb0ba001126fd5b7d3bd09/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b54285c811b6ab12bb0ba001126fd5b7d3bd09/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=55b54285c811b6ab12bb0ba001126fd5b7d3bd09", "patch": "@@ -1707,33 +1707,28 @@ impl FileWithAnnotatedLines {\n                     hi.col_display += 1;\n                 }\n \n-                let ann_type = if lo.line != hi.line {\n+                if lo.line != hi.line {\n                     let ml = MultilineAnnotation {\n                         depth: 1,\n                         line_start: lo.line,\n                         line_end: hi.line,\n                         start_col: lo.col_display,\n                         end_col: hi.col_display,\n                         is_primary: span_label.is_primary,\n-                        label: span_label.label.clone(),\n+                        label: span_label.label,\n                         overlaps_exactly: false,\n                     };\n-                    multiline_annotations.push((lo.file.clone(), ml.clone()));\n-                    AnnotationType::Multiline(ml)\n+                    multiline_annotations.push((lo.file, ml));\n                 } else {\n-                    AnnotationType::Singleline\n-                };\n-                let ann = Annotation {\n-                    start_col: lo.col_display,\n-                    end_col: hi.col_display,\n-                    is_primary: span_label.is_primary,\n-                    label: span_label.label.clone(),\n-                    annotation_type: ann_type,\n-                };\n-\n-                if !ann.is_multiline() {\n+                    let ann = Annotation {\n+                        start_col: lo.col_display,\n+                        end_col: hi.col_display,\n+                        is_primary: span_label.is_primary,\n+                        label: span_label.label,\n+                        annotation_type: AnnotationType::Singleline,\n+                    };\n                     add_annotation_to_file(&mut output, lo.file, lo.line, ann);\n-                }\n+                };\n             }\n         }\n "}]}