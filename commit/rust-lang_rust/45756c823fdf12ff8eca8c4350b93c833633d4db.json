{"sha": "45756c823fdf12ff8eca8c4350b93c833633d4db", "node_id": "C_kwDOAAsO6NoAKDQ1NzU2YzgyM2ZkZjEyZmY4ZWNhOGM0MzUwYjkzYzgzMzYzM2Q0ZGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-19T17:11:56Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-19T17:11:56Z"}, "message": "Use numbers for lifetimes by default, add setting to prefer using parameter names", "tree": {"sha": "91868e310261ac7c1140ea2b9a3ce5c1579c1489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91868e310261ac7c1140ea2b9a3ce5c1579c1489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45756c823fdf12ff8eca8c4350b93c833633d4db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45756c823fdf12ff8eca8c4350b93c833633d4db", "html_url": "https://github.com/rust-lang/rust/commit/45756c823fdf12ff8eca8c4350b93c833633d4db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45756c823fdf12ff8eca8c4350b93c833633d4db/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22fed895e1debfa820f366ee21cdeaddfebb015", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22fed895e1debfa820f366ee21cdeaddfebb015", "html_url": "https://github.com/rust-lang/rust/commit/c22fed895e1debfa820f366ee21cdeaddfebb015"}], "stats": {"total": 153, "additions": 94, "deletions": 59}, "files": [{"sha": "ebafdf8052b2ead40f7575dd219afbea6c14fe29", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 80, "deletions": 51, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/45756c823fdf12ff8eca8c4350b93c833633d4db/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45756c823fdf12ff8eca8c4350b93c833633d4db/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=45756c823fdf12ff8eca8c4350b93c833633d4db", "patch": "@@ -1,7 +1,10 @@\n use either::Either;\n use hir::{known, Callable, HasVisibility, HirDisplay, Semantics, TypeInfo};\n-use ide_db::{base_db::FileRange, famous_defs::FamousDefs, RootDatabase};\n+use ide_db::{\n+    base_db::FileRange, famous_defs::FamousDefs, syntax_helpers::node_ext::walk_ty, RootDatabase,\n+};\n use itertools::Itertools;\n+use rustc_hash::FxHashSet;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, AstNode, HasArgList, HasGenericParams, HasName, UnaryOp},\n@@ -19,6 +22,7 @@ pub struct InlayHintsConfig {\n     pub closure_return_type_hints: bool,\n     // FIXME: ternary option here, on off non-noisy\n     pub lifetime_elision_hints: bool,\n+    pub param_names_for_lifetime_elision_hints: bool,\n     pub hide_named_constructor_hints: bool,\n     pub max_length: Option<usize>,\n }\n@@ -136,31 +140,37 @@ fn lifetime_hints(\n     let ret_type = func.ret_type();\n     let self_param = param_list.self_param().filter(|it| it.amp_token().is_some());\n \n-    // FIXME: don't use already used lifetimenames\n+    let used_names: FxHashSet<SmolStr> = generic_param_list\n+        .iter()\n+        .filter(|_| !config.param_names_for_lifetime_elision_hints)\n+        .flat_map(|gpl| gpl.lifetime_params())\n+        .filter_map(|param| param.lifetime())\n+        .map(|lt| SmolStr::from(lt.text().as_str()))\n+        .collect();\n \n     let mut allocated_lifetimes = vec![];\n     let mut gen_name = {\n-        let mut gen = ('a'..).map(|it| SmolStr::from_iter(['\\'', it]));\n-        move || gen.next().unwrap_or_else(SmolStr::default)\n+        let mut gen = (0u8..).map(|idx| match idx {\n+            idx if idx < 10 => SmolStr::from_iter(['\\'', (idx + 48) as char]),\n+            idx => format!(\"'{idx}\").into(),\n+        });\n+        move || gen.next().unwrap_or_default()\n     };\n \n-    let potential_lt_refs: Vec<_> = param_list\n-        .params()\n-        .filter_map(|it| {\n-            let ty = it.ty()?;\n-            // FIXME: look into the nested types here and check path types\n-            match ty {\n-                ast::Type::RefType(r) => Some((\n-                    it.pat().and_then(|it| match it {\n-                        ast::Pat::IdentPat(p) => p.name(),\n-                        _ => None,\n-                    }),\n-                    r,\n-                )),\n-                _ => None,\n-            }\n+    let mut potential_lt_refs: Vec<_> = vec![];\n+    param_list.params().filter_map(|it| Some((it.pat(), it.ty()?))).for_each(|(pat, ty)| {\n+        // FIXME: check path types\n+        walk_ty(&ty, &mut |ty| match ty {\n+            ast::Type::RefType(r) => potential_lt_refs.push((\n+                pat.as_ref().and_then(|it| match it {\n+                    ast::Pat::IdentPat(p) => p.name(),\n+                    _ => None,\n+                }),\n+                r,\n+            )),\n+            _ => (),\n         })\n-        .collect();\n+    });\n \n     enum LifetimeKind {\n         Elided,\n@@ -184,15 +194,25 @@ fn lifetime_hints(\n     // allocate names\n     if let Some(self_param) = &self_param {\n         if is_elided(self_param.lifetime()) {\n-            allocated_lifetimes.push(SmolStr::new_inline(\"'self\"));\n+            allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {\n+                \"'self\".into()\n+            } else {\n+                gen_name()\n+            });\n         }\n     }\n     potential_lt_refs.iter().for_each(|(name, it)| {\n-        // FIXME: look into the nested types here and check path types\n         if is_elided(it.lifetime()) {\n             allocated_lifetimes.push(\n                 name.as_ref()\n-                    .map_or_else(|| gen_name(), |it| SmolStr::from_iter([\"'\", it.text().as_str()])),\n+                    .filter(|it| {\n+                        config.param_names_for_lifetime_elision_hints\n+                            && !used_names.contains(it.text().as_str())\n+                    })\n+                    .map_or_else(\n+                        || gen_name(),\n+                        |it| SmolStr::from_iter([\"\\'\", it.text().as_str()]),\n+                    ),\n             );\n         }\n     });\n@@ -221,22 +241,26 @@ fn lifetime_hints(\n     // apply output if required\n     match (&output, ret_type) {\n         (Some(output_lt), Some(r)) => {\n-            if let Some(ast::Type::RefType(t)) = r.ty() {\n-                if t.lifetime().is_none() {\n-                    let amp = t.amp_token()?;\n-                    acc.push(InlayHint {\n-                        range: amp.text_range(),\n-                        kind: InlayKind::LifetimeHint,\n-                        label: output_lt.clone(),\n-                    });\n-                }\n+            if let Some(ty) = r.ty() {\n+                walk_ty(&ty, &mut |ty| match ty {\n+                    ast::Type::RefType(ty) if ty.lifetime().is_none() => {\n+                        if let Some(amp) = ty.amp_token() {\n+                            acc.push(InlayHint {\n+                                range: amp.text_range(),\n+                                kind: InlayKind::LifetimeHint,\n+                                label: output_lt.clone(),\n+                            });\n+                        }\n+                    }\n+                    _ => (),\n+                })\n             }\n         }\n         _ => (),\n     }\n \n-    let mut idx = if let Some(self_param) = &self_param {\n-        if is_elided(self_param.lifetime()) {\n+    let mut idx = match &self_param {\n+        Some(self_param) if is_elided(self_param.lifetime()) => {\n             if let Some(amp) = self_param.amp_token() {\n                 let lt = allocated_lifetimes[0].clone();\n                 acc.push(InlayHint {\n@@ -246,11 +270,8 @@ fn lifetime_hints(\n                 });\n             }\n             1\n-        } else {\n-            0\n         }\n-    } else {\n-        0\n+        _ => 0,\n     };\n \n     for (_, p) in potential_lt_refs.iter() {\n@@ -789,6 +810,7 @@ mod tests {\n         lifetime_elision_hints: false,\n         hide_named_constructor_hints: false,\n         closure_return_type_hints: false,\n+        param_names_for_lifetime_elision_hints: false,\n         max_length: None,\n     };\n     const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n@@ -1981,32 +2003,39 @@ fn main() {\n fn empty() {}\n \n fn no_gpl(a: &()) {}\n- //^^^^^^<'a>\n-          // ^'a\n+ //^^^^^^<'0>\n+          // ^'0\n fn empty_gpl<>(a: &()) {}\n-      //    ^'a   ^'a\n+      //    ^'0   ^'0\n fn partial<'b>(a: &(), b: &'b ()) {}\n-//        ^'a, $  ^'a\n+//        ^'0, $  ^'0\n fn partial<'a>(a: &'a (), b: &()) {}\n-//        ^'b, $             ^'b\n+//        ^'0, $             ^'0\n \n fn single_ret(a: &()) -> &() {}\n-// ^^^^^^^^^^<'a>\n-              // ^'a     ^'a\n+// ^^^^^^^^^^<'0>\n+              // ^'0     ^'0\n fn full_mul(a: &(), b: &()) {}\n-// ^^^^^^^^<'a, 'b>\n-            // ^'a     ^'b\n+// ^^^^^^^^<'0, '1>\n+            // ^'0     ^'1\n \n fn foo<'c>(a: &'c ()) -> &() {}\n                       // ^'c\n \n+fn nested_in(a: &   &X< &()>) {}\n+// ^^^^^^^^^<'0, '1, '2>\n+              //^'0 ^'1 ^'2\n+fn nested_out(a: &()) -> &   &X< &()>{}\n+// ^^^^^^^^^^<'0>\n+               //^'0     ^'0 ^'0 ^'0\n+\n impl () {\n     fn foo(&self) -> &() {}\n-    // ^^^<'self>\n-        // ^'self    ^'self\n+    // ^^^<'0>\n+        // ^'0       ^'0\n     fn foo(&self, a: &()) -> &() {}\n-    // ^^^<'self, 'a>\n-        // ^'self    ^'a     ^'self$\n+    // ^^^<'0, '1>\n+        // ^'0       ^'1     ^'0\n }\n \"#,\n         );"}, {"sha": "0ae330be47bd70ee457cabb5b9a2432dbec9b6c2", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45756c823fdf12ff8eca8c4350b93c833633d4db/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45756c823fdf12ff8eca8c4350b93c833633d4db/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=45756c823fdf12ff8eca8c4350b93c833633d4db", "patch": "@@ -112,6 +112,7 @@ impl StaticIndex<'_> {\n                     closure_return_type_hints: true,\n                     lifetime_elision_hints: false,\n                     hide_named_constructor_hints: false,\n+                    param_names_for_lifetime_elision_hints: false,\n                     max_length: Some(25),\n                 },\n                 file_id,"}, {"sha": "75d8733e915f1a619967ee373bb6033bb90ca67c", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45756c823fdf12ff8eca8c4350b93c833633d4db/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45756c823fdf12ff8eca8c4350b93c833633d4db/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=45756c823fdf12ff8eca8c4350b93c833633d4db", "patch": "@@ -243,22 +243,24 @@ config_data! {\n         hoverActions_run: bool             = \"true\",\n \n         /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n-        inlayHints_renderColons: bool               = \"true\",\n+        inlayHints_renderColons: bool                      = \"true\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n-        inlayHints_maxLength: Option<usize>         = \"25\",\n+        inlayHints_maxLength: Option<usize>                = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n-        inlayHints_parameterHints: bool             = \"true\",\n+        inlayHints_parameterHints: bool                    = \"true\",\n         /// Whether to show inlay type hints for variables.\n-        inlayHints_typeHints: bool                  = \"true\",\n+        inlayHints_typeHints: bool                         = \"true\",\n         /// Whether to show inlay type hints for method chains.\n-        inlayHints_chainingHints: bool              = \"true\",\n+        inlayHints_chainingHints: bool                     = \"true\",\n         /// Whether to show inlay type hints for return types of closures with blocks.\n-        inlayHints_closureReturnTypeHints: bool     = \"false\",\n+        inlayHints_closureReturnTypeHints: bool            = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n-        inlayHints_lifetimeElisionHints: bool       = \"false\",\n+        inlayHints_lifetimeElisionHints: bool              = \"false\",\n+        /// Whether to show prefer using parameter names as the name for elided lifetime hints.\n+        inlayHints_paramNamesForLifetimeElisionHints: bool = \"false\",\n         /// Whether to hide inlay hints for constructors.\n-        inlayHints_hideNamedConstructorHints: bool  = \"false\",\n+        inlayHints_hideNamedConstructorHints: bool         = \"false\",\n \n         /// Join lines inserts else between consecutive ifs.\n         joinLines_joinElseIf: bool = \"true\",\n@@ -859,6 +861,9 @@ impl Config {\n             closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints,\n             lifetime_elision_hints: self.data.inlayHints_lifetimeElisionHints,\n             hide_named_constructor_hints: self.data.inlayHints_hideNamedConstructorHints,\n+            param_names_for_lifetime_elision_hints: self\n+                .data\n+                .inlayHints_paramNamesForLifetimeElisionHints,\n             max_length: self.data.inlayHints_maxLength,\n         }\n     }"}]}