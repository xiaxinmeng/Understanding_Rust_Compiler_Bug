{"sha": "21d9b85c0da1b639f8d8b3585e08759f96d1c286", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZDliODVjMGRhMWI2MzlmOGQ4YjM1ODVlMDg3NTlmOTZkMWMyODY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-18T15:11:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:32:48Z"}, "message": "parser: extract `maybe_recover_unexpected_comma`.", "tree": {"sha": "0df9f64f5a0a9fc57495711cf6e15f68b3299bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df9f64f5a0a9fc57495711cf6e15f68b3299bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d9b85c0da1b639f8d8b3585e08759f96d1c286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d9b85c0da1b639f8d8b3585e08759f96d1c286", "html_url": "https://github.com/rust-lang/rust/commit/21d9b85c0da1b639f8d8b3585e08759f96d1c286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d9b85c0da1b639f8d8b3585e08759f96d1c286/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f852c7ce1c6f55bc816d90c6e7f8e9205bb6c6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f852c7ce1c6f55bc816d90c6e7f8e9205bb6c6f2", "html_url": "https://github.com/rust-lang/rust/commit/f852c7ce1c6f55bc816d90c6e7f8e9205bb6c6f2"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "588e5aef8a2f47ec25bd2922a56f828dba531dd5", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/21d9b85c0da1b639f8d8b3585e08759f96d1c286/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d9b85c0da1b639f8d8b3585e08759f96d1c286/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=21d9b85c0da1b639f8d8b3585e08759f96d1c286", "patch": "@@ -57,40 +57,45 @@ impl<'a> Parser<'a> {\n     /// to subpatterns within such).\n     pub(super) fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n         let pat = self.parse_pat(None)?;\n-        if self.token == token::Comma {\n-            // An unexpected comma after a top-level pattern is a clue that the\n-            // user (perhaps more accustomed to some other language) forgot the\n-            // parentheses in what should have been a tuple pattern; return a\n-            // suggestion-enhanced error here rather than choking on the comma\n-            // later.\n-            let comma_span = self.token.span;\n-            self.bump();\n-            if let Err(mut err) = self.skip_pat_list() {\n-                // We didn't expect this to work anyway; we just wanted\n-                // to advance to the end of the comma-sequence so we know\n-                // the span to suggest parenthesizing\n-                err.cancel();\n-            }\n-            let seq_span = pat.span.to(self.prev_span);\n-            let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n-            if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n-                err.span_suggestion(\n-                    seq_span,\n-                    \"try adding parentheses to match on a tuple..\",\n-                    format!(\"({})\", seq_snippet),\n-                    Applicability::MachineApplicable\n-                ).span_suggestion(\n-                    seq_span,\n-                    \"..or a vertical bar to match on multiple alternatives\",\n-                    format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n-                    Applicability::MachineApplicable\n-                );\n-            }\n-            return Err(err);\n-        }\n+        self.maybe_recover_unexpected_comma(pat.span)?;\n         Ok(pat)\n     }\n \n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span) -> PResult<'a, ()> {\n+        if self.token != token::Comma {\n+            return Ok(());\n+        }\n+\n+        // An unexpected comma after a top-level pattern is a clue that the\n+        // user (perhaps more accustomed to some other language) forgot the\n+        // parentheses in what should have been a tuple pattern; return a\n+        // suggestion-enhanced error here rather than choking on the comma later.\n+        let comma_span = self.token.span;\n+        self.bump();\n+        if let Err(mut err) = self.skip_pat_list() {\n+            // We didn't expect this to work anyway; we just wanted to advance to the\n+            // end of the comma-sequence so we know the span to suggest parenthesizing.\n+            err.cancel();\n+        }\n+        let seq_span = lo.to(self.prev_span);\n+        let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n+        if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n+            err.span_suggestion(\n+                seq_span,\n+                \"try adding parentheses to match on a tuple..\",\n+                format!(\"({})\", seq_snippet),\n+                Applicability::MachineApplicable\n+            )\n+            .span_suggestion(\n+                seq_span,\n+                \"..or a vertical bar to match on multiple alternatives\",\n+                format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n+                Applicability::MachineApplicable\n+            );\n+        }\n+        Err(err)\n+    }\n+\n     /// Parse and throw away a parentesized comma separated\n     /// sequence of patterns until `)` is reached.\n     fn skip_pat_list(&mut self) -> PResult<'a, ()> {"}]}