{"sha": "5d17b6a6873d530eda89d271807dcb70a811a200", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMTdiNmE2ODczZDUzMGVkYTg5ZDI3MTgwN2RjYjcwYTgxMWEyMDA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T15:03:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T15:03:18Z"}, "message": "Implement hover for lints", "tree": {"sha": "88b06d926b9311a214d937641990395c5af896de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b06d926b9311a214d937641990395c5af896de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d17b6a6873d530eda89d271807dcb70a811a200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d17b6a6873d530eda89d271807dcb70a811a200", "html_url": "https://github.com/rust-lang/rust/commit/5d17b6a6873d530eda89d271807dcb70a811a200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d17b6a6873d530eda89d271807dcb70a811a200/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd46255d7e8bb59b93a32d5cb50581f418ca5f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b", "html_url": "https://github.com/rust-lang/rust/commit/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b"}], "stats": {"total": 6941, "additions": 3566, "deletions": 3375}, "files": [{"sha": "4d91c5c4fc8caea20526525e402bf095692c6e98", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=5d17b6a6873d530eda89d271807dcb70a811a200", "patch": "@@ -3,6 +3,7 @@ use hir::{\n     AsAssocItem, AssocItemContainer, GenericParam, HasAttrs, HasSource, HirDisplay, InFile, Module,\n     ModuleDef, Semantics,\n };\n+use ide_completion::generated_lint_completions::{CLIPPY_LINTS, FEATURES};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::{Definition, NameClass, NameRefClass},\n@@ -11,7 +12,10 @@ use ide_db::{\n };\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::{ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+use syntax::{\n+    algo, ast, match_ast, AstNode, AstToken, Direction, SyntaxKind::*, SyntaxToken, TokenAtOffset,\n+    T,\n+};\n \n use crate::{\n     display::{macro_label, TryToNav},\n@@ -115,8 +119,8 @@ pub(crate) fn hover(\n                 |d| d.defined(db),\n             ),\n \n-            _ => ast::Comment::cast(token.clone())\n-                .and_then(|_| {\n+            _ => {\n+                if ast::Comment::cast(token.clone()).is_some() {\n                     let (attributes, def) = doc_attributes(&sema, &node)?;\n                     let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n                     let (idl_range, link, ns) =\n@@ -129,9 +133,11 @@ pub(crate) fn hover(\n                             }\n                         })?;\n                     range = Some(idl_range);\n-                    resolve_doc_path_for_def(db, def, &link, ns)\n-                })\n-                .map(Definition::ModuleDef),\n+                    resolve_doc_path_for_def(db, def, &link, ns).map(Definition::ModuleDef)\n+                } else {\n+                    return try_hover_for_attribute(&token);\n+                }\n+            },\n         }\n     };\n \n@@ -194,6 +200,40 @@ pub(crate) fn hover(\n     Some(RangeInfo::new(range, res))\n }\n \n+fn try_hover_for_attribute(token: &SyntaxToken) -> Option<RangeInfo<HoverResult>> {\n+    let attr = token.ancestors().nth(1).and_then(ast::Attr::cast)?;\n+    let (path, tt) = attr.as_simple_call()?;\n+    if !tt.syntax().text_range().contains(token.text_range().start()) {\n+        return None;\n+    }\n+    let lints = match &*path {\n+        \"feature\" => FEATURES,\n+        \"allow\" | \"warn\" | \"forbid\" | \"error\" => {\n+            let is_clippy = algo::skip_trivia_token(token.clone(), Direction::Prev)\n+                .filter(|t| t.kind() == T![::])\n+                .and_then(|t| algo::skip_trivia_token(t, Direction::Prev))\n+                .map_or(false, |t| t.kind() == T![ident] && t.text() == \"clippy\");\n+            if is_clippy {\n+                CLIPPY_LINTS\n+            } else {\n+                &[]\n+            }\n+        }\n+        _ => return None,\n+    };\n+    let lint = lints\n+        .binary_search_by_key(&token.text(), |lint| lint.label)\n+        .ok()\n+        .map(|idx| &FEATURES[idx])?;\n+    Some(RangeInfo::new(\n+        token.text_range(),\n+        HoverResult {\n+            markup: Markup::from(format!(\"```\\n{}\\n```\\n___\\n\\n{}\", lint.label, lint.description)),\n+            ..Default::default()\n+        },\n+    ))\n+}\n+\n fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     fn to_action(nav_target: NavigationTarget) -> HoverAction {\n         HoverAction::Implementation(FilePosition {\n@@ -3977,4 +4017,42 @@ pub fn foo() {}\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn hover_feature() {\n+        check(\n+            r#\"#![feature(box_syntax$0)]\"#,\n+            expect![[r##\"\n+                *box_syntax*\n+                ```\n+                box_syntax\n+                ```\n+                ___\n+\n+                # `box_syntax`\n+\n+                The tracking issue for this feature is: [#49733]\n+\n+                [#49733]: https://github.com/rust-lang/rust/issues/49733\n+\n+                See also [`box_patterns`](box-patterns.md)\n+\n+                ------------------------\n+\n+                Currently the only stable way to create a `Box` is via the `Box::new` method.\n+                Also it is not possible in stable Rust to destructure a `Box` in a match\n+                pattern. The unstable `box` keyword can be used to create a `Box`. An example\n+                usage would be:\n+\n+                ```rust\n+                #![feature(box_syntax)]\n+\n+                fn main() {\n+                    let b = box 5;\n+                }\n+                ```\n+\n+            \"##]],\n+        )\n+    }\n }"}, {"sha": "608e71cecf0297ac7f753b0a67868b7a0b977c20", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=5d17b6a6873d530eda89d271807dcb70a811a200", "patch": "@@ -29,128 +29,128 @@ pub(super) fn complete_lint(\n     }\n }\n \n-pub(crate) struct LintCompletion {\n-    pub(crate) label: &'static str,\n-    pub(crate) description: &'static str,\n+pub struct LintCompletion {\n+    pub label: &'static str,\n+    pub description: &'static str,\n }\n \n #[rustfmt::skip]\n-pub(super) const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n+pub const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n     LintCompletion { label: \"absolute_paths_not_starting_with_crate\", description: r#\"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\"# },\n+    LintCompletion { label: \"ambiguous_associated_items\", description: r#\"ambiguous associated items\"# },\n     LintCompletion { label: \"anonymous_parameters\", description: r#\"detects anonymous parameters\"# },\n-    LintCompletion { label: \"box_pointers\", description: r#\"use of owned (Box type) heap memory\"# },\n-    LintCompletion { label: \"deprecated_in_future\", description: r#\"detects use of items that will be deprecated in a future version\"# },\n-    LintCompletion { label: \"elided_lifetimes_in_paths\", description: r#\"hidden lifetime parameters in types are deprecated\"# },\n-    LintCompletion { label: \"explicit_outlives_requirements\", description: r#\"outlives requirements can be inferred\"# },\n-    LintCompletion { label: \"indirect_structural_match\", description: r#\"pattern with const indirectly referencing non-structural-match type\"# },\n-    LintCompletion { label: \"keyword_idents\", description: r#\"detects edition keywords being used as an identifier\"# },\n-    LintCompletion { label: \"macro_use_extern_crate\", description: r#\"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\"# },\n-    LintCompletion { label: \"meta_variable_misuse\", description: r#\"possible meta-variable misuse at macro definition\"# },\n-    LintCompletion { label: \"missing_copy_implementations\", description: r#\"detects potentially-forgotten implementations of `Copy`\"# },\n-    LintCompletion { label: \"missing_crate_level_docs\", description: r#\"detects crates with no crate-level documentation\"# },\n-    LintCompletion { label: \"missing_debug_implementations\", description: r#\"detects missing implementations of Debug\"# },\n-    LintCompletion { label: \"missing_docs\", description: r#\"detects missing documentation for public members\"# },\n-    LintCompletion { label: \"missing_doc_code_examples\", description: r#\"detects publicly-exported items without code samples in their documentation\"# },\n-    LintCompletion { label: \"non_ascii_idents\", description: r#\"detects non-ASCII identifiers\"# },\n-    LintCompletion { label: \"private_doc_tests\", description: r#\"detects code samples in docs of private items not documented by rustdoc\"# },\n-    LintCompletion { label: \"single_use_lifetimes\", description: r#\"detects lifetime parameters that are only used once\"# },\n-    LintCompletion { label: \"trivial_casts\", description: r#\"detects trivial casts which could be removed\"# },\n-    LintCompletion { label: \"trivial_numeric_casts\", description: r#\"detects trivial casts of numeric types which could be removed\"# },\n-    LintCompletion { label: \"unaligned_references\", description: r#\"detects unaligned references to fields of packed structs\"# },\n-    LintCompletion { label: \"unreachable_pub\", description: r#\"`pub` items not reachable from crate root\"# },\n-    LintCompletion { label: \"unsafe_code\", description: r#\"usage of `unsafe` code\"# },\n-    LintCompletion { label: \"unsafe_op_in_unsafe_fn\", description: r#\"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\"# },\n-    LintCompletion { label: \"unstable_features\", description: r#\"enabling unstable features (deprecated. do not use)\"# },\n-    LintCompletion { label: \"unused_crate_dependencies\", description: r#\"crate dependencies that are never used\"# },\n-    LintCompletion { label: \"unused_extern_crates\", description: r#\"extern crates that are never used\"# },\n-    LintCompletion { label: \"unused_import_braces\", description: r#\"unnecessary braces around an imported item\"# },\n-    LintCompletion { label: \"unused_lifetimes\", description: r#\"detects lifetime parameters that are never used\"# },\n-    LintCompletion { label: \"unused_qualifications\", description: r#\"detects unnecessarily qualified names\"# },\n-    LintCompletion { label: \"unused_results\", description: r#\"unused result of an expression in a statement\"# },\n-    LintCompletion { label: \"variant_size_differences\", description: r#\"detects enums with widely varying variant sizes\"# },\n+    LintCompletion { label: \"arithmetic_overflow\", description: r#\"arithmetic operation overflows\"# },\n     LintCompletion { label: \"array_into_iter\", description: r#\"detects calling `into_iter` on arrays\"# },\n     LintCompletion { label: \"asm_sub_register\", description: r#\"using only a subset of a register for inline asm inputs\"# },\n     LintCompletion { label: \"bare_trait_objects\", description: r#\"suggest using `dyn Trait` for trait objects\"# },\n     LintCompletion { label: \"bindings_with_variant_name\", description: r#\"detects pattern bindings with the same name as one of the matched variants\"# },\n+    LintCompletion { label: \"box_pointers\", description: r#\"use of owned (Box type) heap memory\"# },\n     LintCompletion { label: \"cenum_impl_drop_cast\", description: r#\"a C-like enum implementing Drop is cast\"# },\n     LintCompletion { label: \"clashing_extern_declarations\", description: r#\"detects when an extern fn has been declared with the same name but different types\"# },\n     LintCompletion { label: \"coherence_leak_check\", description: r#\"distinct impls distinguished only by the leak-check code\"# },\n+    LintCompletion { label: \"conflicting_repr_hints\", description: r#\"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\"# },\n     LintCompletion { label: \"confusable_idents\", description: r#\"detects visually confusable pairs between identifiers\"# },\n+    LintCompletion { label: \"const_err\", description: r#\"constant evaluation detected erroneous expression\"# },\n     LintCompletion { label: \"dead_code\", description: r#\"detect unused, unexported items\"# },\n+    LintCompletion { label: \"deprecated_in_future\", description: r#\"detects use of items that will be deprecated in a future version\"# },\n     LintCompletion { label: \"deprecated\", description: r#\"detects use of deprecated items\"# },\n+    LintCompletion { label: \"elided_lifetimes_in_paths\", description: r#\"hidden lifetime parameters in types are deprecated\"# },\n     LintCompletion { label: \"ellipsis_inclusive_range_patterns\", description: r#\"`...` range patterns are deprecated\"# },\n+    LintCompletion { label: \"explicit_outlives_requirements\", description: r#\"outlives requirements can be inferred\"# },\n     LintCompletion { label: \"exported_private_dependencies\", description: r#\"public interface leaks type from a private dependency\"# },\n+    LintCompletion { label: \"ill_formed_attribute_input\", description: r#\"ill-formed attribute inputs that were previously accepted and used in practice\"# },\n     LintCompletion { label: \"illegal_floating_point_literal_pattern\", description: r#\"floating-point literals cannot be used in patterns\"# },\n-    LintCompletion { label: \"improper_ctypes\", description: r#\"proper use of libc types in foreign modules\"# },\n     LintCompletion { label: \"improper_ctypes_definitions\", description: r#\"proper use of libc types in foreign item definitions\"# },\n+    LintCompletion { label: \"improper_ctypes\", description: r#\"proper use of libc types in foreign modules\"# },\n     LintCompletion { label: \"incomplete_features\", description: r#\"incomplete features that may function improperly in some or all cases\"# },\n+    LintCompletion { label: \"incomplete_include\", description: r#\"trailing content in included file\"# },\n+    LintCompletion { label: \"indirect_structural_match\", description: r#\"pattern with const indirectly referencing non-structural-match type\"# },\n     LintCompletion { label: \"inline_no_sanitize\", description: r#\"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\"# },\n     LintCompletion { label: \"intra_doc_link_resolution_failure\", description: r#\"failures in resolving intra-doc link targets\"# },\n     LintCompletion { label: \"invalid_codeblock_attributes\", description: r#\"codeblock attribute looks a lot like a known one\"# },\n+    LintCompletion { label: \"invalid_type_param_default\", description: r#\"type parameter default erroneously allowed in invalid location\"# },\n     LintCompletion { label: \"invalid_value\", description: r#\"an invalid value is being created (such as a NULL reference)\"# },\n     LintCompletion { label: \"irrefutable_let_patterns\", description: r#\"detects irrefutable patterns in if-let and while-let statements\"# },\n+    LintCompletion { label: \"keyword_idents\", description: r#\"detects edition keywords being used as an identifier\"# },\n     LintCompletion { label: \"late_bound_lifetime_arguments\", description: r#\"detects generic lifetime arguments in path segments with late bound lifetime parameters\"# },\n+    LintCompletion { label: \"macro_expanded_macro_exports_accessed_by_absolute_paths\", description: r#\"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\"# },\n+    LintCompletion { label: \"macro_use_extern_crate\", description: r#\"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\"# },\n+    LintCompletion { label: \"meta_variable_misuse\", description: r#\"possible meta-variable misuse at macro definition\"# },\n+    LintCompletion { label: \"missing_copy_implementations\", description: r#\"detects potentially-forgotten implementations of `Copy`\"# },\n+    LintCompletion { label: \"missing_crate_level_docs\", description: r#\"detects crates with no crate-level documentation\"# },\n+    LintCompletion { label: \"missing_debug_implementations\", description: r#\"detects missing implementations of Debug\"# },\n+    LintCompletion { label: \"missing_doc_code_examples\", description: r#\"detects publicly-exported items without code samples in their documentation\"# },\n+    LintCompletion { label: \"missing_docs\", description: r#\"detects missing documentation for public members\"# },\n+    LintCompletion { label: \"missing_fragment_specifier\", description: r#\"detects missing fragment specifiers in unused `macro_rules!` patterns\"# },\n     LintCompletion { label: \"mixed_script_confusables\", description: r#\"detects Unicode scripts whose mixed script confusables codepoints are solely used\"# },\n     LintCompletion { label: \"mutable_borrow_reservation_conflict\", description: r#\"reservation of a two-phased borrow conflicts with other shared borrows\"# },\n+    LintCompletion { label: \"mutable_transmutes\", description: r#\"mutating transmuted &mut T from &T may cause undefined behavior\"# },\n+    LintCompletion { label: \"no_mangle_const_items\", description: r#\"const items will not have their symbols exported\"# },\n+    LintCompletion { label: \"no_mangle_generic_items\", description: r#\"generic items must be mangled\"# },\n+    LintCompletion { label: \"non_ascii_idents\", description: r#\"detects non-ASCII identifiers\"# },\n     LintCompletion { label: \"non_camel_case_types\", description: r#\"types, variants, traits and type parameters should have camel case names\"# },\n     LintCompletion { label: \"non_shorthand_field_patterns\", description: r#\"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"# },\n     LintCompletion { label: \"non_snake_case\", description: r#\"variables, methods, functions, lifetime parameters and modules should have snake case names\"# },\n     LintCompletion { label: \"non_upper_case_globals\", description: r#\"static constants should have uppercase identifiers\"# },\n-    LintCompletion { label: \"no_mangle_generic_items\", description: r#\"generic items must be mangled\"# },\n+    LintCompletion { label: \"order_dependent_trait_objects\", description: r#\"trait-object types were treated as different depending on marker-trait order\"# },\n+    LintCompletion { label: \"overflowing_literals\", description: r#\"literal out of range for its type\"# },\n     LintCompletion { label: \"overlapping_patterns\", description: r#\"detects overlapping patterns\"# },\n     LintCompletion { label: \"path_statements\", description: r#\"path statements with no effect\"# },\n+    LintCompletion { label: \"patterns_in_fns_without_body\", description: r#\"patterns in functions without body were erroneously allowed\"# },\n+    LintCompletion { label: \"private_doc_tests\", description: r#\"detects code samples in docs of private items not documented by rustdoc\"# },\n     LintCompletion { label: \"private_in_public\", description: r#\"detect private items in public interfaces not caught by the old implementation\"# },\n     LintCompletion { label: \"proc_macro_derive_resolution_fallback\", description: r#\"detects proc macro derives using inaccessible names from parent modules\"# },\n+    LintCompletion { label: \"pub_use_of_private_extern_crate\", description: r#\"detect public re-exports of private extern crates\"# },\n     LintCompletion { label: \"redundant_semicolons\", description: r#\"detects unnecessary trailing semicolons\"# },\n     LintCompletion { label: \"renamed_and_removed_lints\", description: r#\"lints that have been renamed or removed\"# },\n     LintCompletion { label: \"safe_packed_borrows\", description: r#\"safe borrows of fields of packed structs were erroneously allowed\"# },\n+    LintCompletion { label: \"single_use_lifetimes\", description: r#\"detects lifetime parameters that are only used once\"# },\n+    LintCompletion { label: \"soft_unstable\", description: r#\"a feature gate that doesn't break dependent crates\"# },\n     LintCompletion { label: \"stable_features\", description: r#\"stable features found in `#[feature]` directive\"# },\n     LintCompletion { label: \"trivial_bounds\", description: r#\"these bounds don't depend on an type parameters\"# },\n+    LintCompletion { label: \"trivial_casts\", description: r#\"detects trivial casts which could be removed\"# },\n+    LintCompletion { label: \"trivial_numeric_casts\", description: r#\"detects trivial casts of numeric types which could be removed\"# },\n     LintCompletion { label: \"type_alias_bounds\", description: r#\"bounds in type aliases are not enforced\"# },\n     LintCompletion { label: \"tyvar_behind_raw_pointer\", description: r#\"raw pointer to an inference variable\"# },\n+    LintCompletion { label: \"unaligned_references\", description: r#\"detects unaligned references to fields of packed structs\"# },\n     LintCompletion { label: \"uncommon_codepoints\", description: r#\"detects uncommon Unicode codepoints in identifiers\"# },\n+    LintCompletion { label: \"unconditional_panic\", description: r#\"operation will cause a panic at runtime\"# },\n     LintCompletion { label: \"unconditional_recursion\", description: r#\"functions that cannot return without calling themselves\"# },\n+    LintCompletion { label: \"unknown_crate_types\", description: r#\"unknown crate type found in `#[crate_type]` directive\"# },\n     LintCompletion { label: \"unknown_lints\", description: r#\"unrecognized lint attribute\"# },\n     LintCompletion { label: \"unnameable_test_items\", description: r#\"detects an item that cannot be named being marked as `#[test_case]`\"# },\n     LintCompletion { label: \"unreachable_code\", description: r#\"detects unreachable code paths\"# },\n     LintCompletion { label: \"unreachable_patterns\", description: r#\"detects unreachable patterns\"# },\n+    LintCompletion { label: \"unreachable_pub\", description: r#\"`pub` items not reachable from crate root\"# },\n+    LintCompletion { label: \"unsafe_code\", description: r#\"usage of `unsafe` code\"# },\n+    LintCompletion { label: \"unsafe_op_in_unsafe_fn\", description: r#\"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\"# },\n+    LintCompletion { label: \"unstable_features\", description: r#\"enabling unstable features (deprecated. do not use)\"# },\n     LintCompletion { label: \"unstable_name_collisions\", description: r#\"detects name collision with an existing but unstable method\"# },\n     LintCompletion { label: \"unused_allocation\", description: r#\"detects unnecessary allocations that can be eliminated\"# },\n     LintCompletion { label: \"unused_assignments\", description: r#\"detect assignments that will never be read\"# },\n     LintCompletion { label: \"unused_attributes\", description: r#\"detects attributes that were not used by the compiler\"# },\n     LintCompletion { label: \"unused_braces\", description: r#\"unnecessary braces around an expression\"# },\n     LintCompletion { label: \"unused_comparisons\", description: r#\"comparisons made useless by limits of the types involved\"# },\n+    LintCompletion { label: \"unused_crate_dependencies\", description: r#\"crate dependencies that are never used\"# },\n     LintCompletion { label: \"unused_doc_comments\", description: r#\"detects doc comments that aren't used by rustdoc\"# },\n+    LintCompletion { label: \"unused_extern_crates\", description: r#\"extern crates that are never used\"# },\n     LintCompletion { label: \"unused_features\", description: r#\"unused features found in crate-level `#[feature]` directives\"# },\n+    LintCompletion { label: \"unused_import_braces\", description: r#\"unnecessary braces around an imported item\"# },\n     LintCompletion { label: \"unused_imports\", description: r#\"imports that are never used\"# },\n     LintCompletion { label: \"unused_labels\", description: r#\"detects labels that are never used\"# },\n+    LintCompletion { label: \"unused_lifetimes\", description: r#\"detects lifetime parameters that are never used\"# },\n     LintCompletion { label: \"unused_macros\", description: r#\"detects macros that were not used\"# },\n     LintCompletion { label: \"unused_must_use\", description: r#\"unused result of a type flagged as `#[must_use]`\"# },\n     LintCompletion { label: \"unused_mut\", description: r#\"detect mut variables which don't need to be mutable\"# },\n     LintCompletion { label: \"unused_parens\", description: r#\"`if`, `match`, `while` and `return` do not need parentheses\"# },\n+    LintCompletion { label: \"unused_qualifications\", description: r#\"detects unnecessarily qualified names\"# },\n+    LintCompletion { label: \"unused_results\", description: r#\"unused result of an expression in a statement\"# },\n     LintCompletion { label: \"unused_unsafe\", description: r#\"unnecessary use of an `unsafe` block\"# },\n     LintCompletion { label: \"unused_variables\", description: r#\"detect variables which are not used in any way\"# },\n+    LintCompletion { label: \"variant_size_differences\", description: r#\"detects enums with widely varying variant sizes\"# },\n     LintCompletion { label: \"warnings\", description: r#\"mass-change the level for lints which produce warnings\"# },\n     LintCompletion { label: \"where_clauses_object_safety\", description: r#\"checks the object safety of where clauses\"# },\n     LintCompletion { label: \"while_true\", description: r#\"suggest using `loop { }` instead of `while true { }`\"# },\n-    LintCompletion { label: \"ambiguous_associated_items\", description: r#\"ambiguous associated items\"# },\n-    LintCompletion { label: \"arithmetic_overflow\", description: r#\"arithmetic operation overflows\"# },\n-    LintCompletion { label: \"conflicting_repr_hints\", description: r#\"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\"# },\n-    LintCompletion { label: \"const_err\", description: r#\"constant evaluation detected erroneous expression\"# },\n-    LintCompletion { label: \"ill_formed_attribute_input\", description: r#\"ill-formed attribute inputs that were previously accepted and used in practice\"# },\n-    LintCompletion { label: \"incomplete_include\", description: r#\"trailing content in included file\"# },\n-    LintCompletion { label: \"invalid_type_param_default\", description: r#\"type parameter default erroneously allowed in invalid location\"# },\n-    LintCompletion { label: \"macro_expanded_macro_exports_accessed_by_absolute_paths\", description: r#\"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\"# },\n-    LintCompletion { label: \"missing_fragment_specifier\", description: r#\"detects missing fragment specifiers in unused `macro_rules!` patterns\"# },\n-    LintCompletion { label: \"mutable_transmutes\", description: r#\"mutating transmuted &mut T from &T may cause undefined behavior\"# },\n-    LintCompletion { label: \"no_mangle_const_items\", description: r#\"const items will not have their symbols exported\"# },\n-    LintCompletion { label: \"order_dependent_trait_objects\", description: r#\"trait-object types were treated as different depending on marker-trait order\"# },\n-    LintCompletion { label: \"overflowing_literals\", description: r#\"literal out of range for its type\"# },\n-    LintCompletion { label: \"patterns_in_fns_without_body\", description: r#\"patterns in functions without body were erroneously allowed\"# },\n-    LintCompletion { label: \"pub_use_of_private_extern_crate\", description: r#\"detect public re-exports of private extern crates\"# },\n-    LintCompletion { label: \"soft_unstable\", description: r#\"a feature gate that doesn't break dependent crates\"# },\n-    LintCompletion { label: \"unconditional_panic\", description: r#\"operation will cause a panic at runtime\"# },\n-    LintCompletion { label: \"unknown_crate_types\", description: r#\"unknown crate type found in `#[crate_type]` directive\"# },\n ];\n \n #[cfg(test)]"}, {"sha": "fe9554526ccc12ce92a40f423173467ac7f244df", "filename": "crates/ide_completion/src/generated_lint_completions.rs", "status": "modified", "additions": 3414, "deletions": 3306, "changes": 6720, "blob_url": "https://github.com/rust-lang/rust/blob/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide_completion%2Fsrc%2Fgenerated_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide_completion%2Fsrc%2Fgenerated_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fgenerated_lint_completions.rs?ref=5d17b6a6873d530eda89d271807dcb70a811a200"}, {"sha": "1f015874510d9516270a51de65708f70008b6eb8", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d17b6a6873d530eda89d271807dcb70a811a200/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=5d17b6a6873d530eda89d271807dcb70a811a200", "patch": "@@ -4,13 +4,14 @@ mod config;\n mod item;\n mod context;\n mod patterns;\n-mod generated_lint_completions;\n #[cfg(test)]\n mod test_utils;\n mod render;\n \n mod completions;\n \n+pub mod generated_lint_completions;\n+\n use completions::flyimport::position_for_import;\n use ide_db::{\n     base_db::FilePosition,"}, {"sha": "f5736d1b5a0bc605bc61b01c1b8b5a86d1db3e89", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d17b6a6873d530eda89d271807dcb70a811a200/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d17b6a6873d530eda89d271807dcb70a811a200/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=5d17b6a6873d530eda89d271807dcb70a811a200", "patch": "@@ -28,23 +28,27 @@ pub(crate) fn generate_lint_completions() -> Result<()> {\n }\n \n fn generate_descriptor(buf: &mut String, src_dir: PathBuf) -> Result<()> {\n-    buf.push_str(r#\"pub(super) const FEATURES: &[LintCompletion] = &[\"#);\n+    buf.push_str(r#\"pub const FEATURES: &[LintCompletion] = &[\"#);\n     buf.push('\\n');\n-    [\"language-features\", \"library-features\"]\n+    let mut vec = [\"language-features\", \"library-features\"]\n         .iter()\n         .flat_map(|it| WalkDir::new(src_dir.join(it)))\n         .filter_map(|e| e.ok())\n         .filter(|entry| {\n             // Get all `.md ` files\n             entry.file_type().is_file() && entry.path().extension().unwrap_or_default() == \"md\"\n         })\n-        .for_each(|entry| {\n+        .map(|entry| {\n             let path = entry.path();\n             let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n             let doc = read_file(path).unwrap();\n-\n-            push_lint_completion(buf, &feature_ident, &doc);\n-        });\n+            (feature_ident, doc)\n+        })\n+        .collect::<Vec<_>>();\n+    vec.sort_by(|(feature_ident, _), (feature_ident2, _)| feature_ident.cmp(feature_ident2));\n+    vec.into_iter().for_each(|(feature_ident, doc)| {\n+        push_lint_completion(buf, &feature_ident, &doc);\n+    });\n     buf.push_str(\"];\\n\");\n     Ok(())\n }\n@@ -85,8 +89,8 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) -> Result<()> {\n                 .into();\n         }\n     }\n-\n-    buf.push_str(r#\"pub(super) const CLIPPY_LINTS: &[LintCompletion] = &[\"#);\n+    clippy_lints.sort_by(|lint, lint2| lint.id.cmp(&lint2.id));\n+    buf.push_str(r#\"pub const CLIPPY_LINTS: &[LintCompletion] = &[\"#);\n     buf.push('\\n');\n     clippy_lints.into_iter().for_each(|clippy_lint| {\n         let lint_ident = format!(\"clippy::{}\", clippy_lint.id);"}]}