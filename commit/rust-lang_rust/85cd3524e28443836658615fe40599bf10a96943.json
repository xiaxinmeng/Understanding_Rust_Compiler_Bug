{"sha": "85cd3524e28443836658615fe40599bf10a96943", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1Y2QzNTI0ZTI4NDQzODM2NjU4NjE1ZmU0MDU5OWJmMTBhOTY5NDM=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2021-01-13T15:01:50Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2021-01-15T14:35:17Z"}, "message": "Add support for yiled keyword", "tree": {"sha": "31403287f3393813cc82aa2e0437d523cfce7250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31403287f3393813cc82aa2e0437d523cfce7250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85cd3524e28443836658615fe40599bf10a96943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85cd3524e28443836658615fe40599bf10a96943", "html_url": "https://github.com/rust-lang/rust/commit/85cd3524e28443836658615fe40599bf10a96943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85cd3524e28443836658615fe40599bf10a96943/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b1fa6da30dc6f576e5f76dd72767dbfa12812e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b1fa6da30dc6f576e5f76dd72767dbfa12812e", "html_url": "https://github.com/rust-lang/rust/commit/d9b1fa6da30dc6f576e5f76dd72767dbfa12812e"}], "stats": {"total": 122, "additions": 95, "deletions": 27}, "files": [{"sha": "0e63a60e8ad3d72c3b6c92a7eed39d1dbf9ea1cb", "filename": "crates/assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -79,29 +79,30 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n                 None => return Ok(false),\n             };\n \n-            Ok(!matches!((&initializer_expr, usage_parent),\n+            Ok(!matches!(\n+                (&initializer_expr, usage_parent),\n                 (ast::Expr::CallExpr(_), _)\n-                | (ast::Expr::IndexExpr(_), _)\n-                | (ast::Expr::MethodCallExpr(_), _)\n-                | (ast::Expr::FieldExpr(_), _)\n-                | (ast::Expr::TryExpr(_), _)\n-                | (ast::Expr::RefExpr(_), _)\n-                | (ast::Expr::Literal(_), _)\n-                | (ast::Expr::TupleExpr(_), _)\n-                | (ast::Expr::ArrayExpr(_), _)\n-                | (ast::Expr::ParenExpr(_), _)\n-                | (ast::Expr::PathExpr(_), _)\n-                | (ast::Expr::BlockExpr(_), _)\n-                | (ast::Expr::EffectExpr(_), _)\n-                | (_, ast::Expr::CallExpr(_))\n-                | (_, ast::Expr::TupleExpr(_))\n-                | (_, ast::Expr::ArrayExpr(_))\n-                | (_, ast::Expr::ParenExpr(_))\n-                | (_, ast::Expr::ForExpr(_))\n-                | (_, ast::Expr::WhileExpr(_))\n-                | (_, ast::Expr::BreakExpr(_))\n-                | (_, ast::Expr::ReturnExpr(_))\n-                | (_, ast::Expr::MatchExpr(_))\n+                    | (ast::Expr::IndexExpr(_), _)\n+                    | (ast::Expr::MethodCallExpr(_), _)\n+                    | (ast::Expr::FieldExpr(_), _)\n+                    | (ast::Expr::TryExpr(_), _)\n+                    | (ast::Expr::RefExpr(_), _)\n+                    | (ast::Expr::Literal(_), _)\n+                    | (ast::Expr::TupleExpr(_), _)\n+                    | (ast::Expr::ArrayExpr(_), _)\n+                    | (ast::Expr::ParenExpr(_), _)\n+                    | (ast::Expr::PathExpr(_), _)\n+                    | (ast::Expr::BlockExpr(_), _)\n+                    | (ast::Expr::EffectExpr(_), _)\n+                    | (_, ast::Expr::CallExpr(_))\n+                    | (_, ast::Expr::TupleExpr(_))\n+                    | (_, ast::Expr::ArrayExpr(_))\n+                    | (_, ast::Expr::ParenExpr(_))\n+                    | (_, ast::Expr::ForExpr(_))\n+                    | (_, ast::Expr::WhileExpr(_))\n+                    | (_, ast::Expr::BreakExpr(_))\n+                    | (_, ast::Expr::ReturnExpr(_))\n+                    | (_, ast::Expr::MatchExpr(_))\n             ))\n         })\n         .collect::<Result<Vec<_>, _>>()?;"}, {"sha": "4ce5e5b72c319b9db9d1f35c8a49f501ebfeec5c", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -386,6 +386,10 @@ impl ExprCollector<'_> {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n+            ast::Expr::YieldExpr(e) => {\n+                let expr = e.expr().map(|e| self.collect_expr(e));\n+                self.alloc_expr(Expr::Yield { expr }, syntax_ptr)\n+            }\n             ast::Expr::RecordExpr(e) => {\n                 let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();"}, {"sha": "a293df9f1c949beede6c6d9a586362e4f5b9c311", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -99,6 +99,9 @@ pub enum Expr {\n     Return {\n         expr: Option<ExprId>,\n     },\n+    Yield {\n+        expr: Option<ExprId>,\n+    },\n     RecordLit {\n         path: Option<Path>,\n         fields: Vec<RecordLitField>,\n@@ -294,7 +297,7 @@ impl Expr {\n                 }\n             }\n             Expr::Continue { .. } => {}\n-            Expr::Break { expr, .. } | Expr::Return { expr } => {\n+            Expr::Break { expr, .. } | Expr::Return { expr } | Expr::Yield { expr } => {\n                 if let Some(expr) = expr {\n                     f(*expr);\n                 }"}, {"sha": "9bf3b51b0056e0e2ba4540570fab7fba69bf0299", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -367,6 +367,13 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 Ty::simple(TypeCtor::Never)\n             }\n+            Expr::Yield { expr } => {\n+                // FIXME: track yield type for coercion\n+                if let Some(expr) = expr {\n+                    self.infer_expr(*expr, &Expectation::none());\n+                }\n+                Ty::simple(TypeCtor::Never)\n+            }\n             Expr::RecordLit { path, fields, spread } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_ref());\n                 if let Some(variant) = def_id {"}, {"sha": "093a9890d3641ebacaed62f0d40fcafed26ed17d", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -50,6 +50,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T![match],\n         T![unsafe],\n         T![return],\n+        T![yield],\n         T![break],\n         T![continue],\n         T![async],\n@@ -142,6 +143,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             block_expr_unchecked(p)\n         }\n         T![return] => return_expr(p),\n+        T![yield] => yield_expr(p),\n         T![continue] => continue_expr(p),\n         T![break] => break_expr(p, r),\n         _ => {\n@@ -508,6 +510,20 @@ fn return_expr(p: &mut Parser) -> CompletedMarker {\n     }\n     m.complete(p, RETURN_EXPR)\n }\n+// test yield_expr\n+// fn foo() {\n+//     yield;\n+//     yield 1;\n+// }\n+fn yield_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(T![yield]));\n+    let m = p.start();\n+    p.bump(T![yield]);\n+    if p.at_ts(EXPR_FIRST) {\n+        expr(p);\n+    }\n+    m.complete(p, YIELD_EXPR)\n+}\n \n // test continue_expr\n // fn foo() {"}, {"sha": "7d53cc4cdc3a1a6c10a959881cab20035a1354a2", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -101,6 +101,7 @@ pub enum SyntaxKind {\n     USE_KW,\n     WHERE_KW,\n     WHILE_KW,\n+    YIELD_KW,\n     AUTO_KW,\n     DEFAULT_KW,\n     EXISTENTIAL_KW,\n@@ -186,6 +187,7 @@ pub enum SyntaxKind {\n     LABEL,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n+    YIELD_EXPR,\n     MATCH_EXPR,\n     MATCH_ARM_LIST,\n     MATCH_ARM,\n@@ -263,7 +265,8 @@ impl SyntaxKind {\n             | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n             | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | STATIC_KW | STRUCT_KW | SUPER_KW\n             | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW | WHERE_KW | WHILE_KW\n-            | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW | MACRO_RULES_KW => true,\n+            | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW\n+            | MACRO_RULES_KW => true,\n             _ => false,\n         }\n     }\n@@ -326,6 +329,7 @@ impl SyntaxKind {\n             \"use\" => USE_KW,\n             \"where\" => WHERE_KW,\n             \"while\" => WHILE_KW,\n+            \"yield\" => YIELD_KW,\n             _ => return None,\n         };\n         Some(kw)\n@@ -366,4 +370,4 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }"}, {"sha": "9c96d3d07354aa681864bbcafb41f34460f4f17e", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -931,6 +931,15 @@ impl WhileExpr {\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct YieldExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for YieldExpr {}\n+impl YieldExpr {\n+    pub fn yield_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![yield]) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Label {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1334,6 +1343,7 @@ pub enum Expr {\n     TryExpr(TryExpr),\n     TupleExpr(TupleExpr),\n     WhileExpr(WhileExpr),\n+    YieldExpr(YieldExpr),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Item {\n@@ -2386,6 +2396,17 @@ impl AstNode for WhileExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for YieldExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == YIELD_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Label {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LABEL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3028,14 +3049,18 @@ impl From<TupleExpr> for Expr {\n impl From<WhileExpr> for Expr {\n     fn from(node: WhileExpr) -> Expr { Expr::WhileExpr(node) }\n }\n+impl From<YieldExpr> for Expr {\n+    fn from(node: YieldExpr) -> Expr { Expr::YieldExpr(node) }\n+}\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n             | CAST_EXPR | CLOSURE_EXPR | CONTINUE_EXPR | EFFECT_EXPR | FIELD_EXPR | FOR_EXPR\n             | IF_EXPR | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n             | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n-            | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR => true,\n+            | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR\n+            | YIELD_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3071,6 +3096,7 @@ impl AstNode for Expr {\n             TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n             TUPLE_EXPR => Expr::TupleExpr(TupleExpr { syntax }),\n             WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n+            YIELD_EXPR => Expr::YieldExpr(YieldExpr { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3107,6 +3133,7 @@ impl AstNode for Expr {\n             Expr::TryExpr(it) => &it.syntax,\n             Expr::TupleExpr(it) => &it.syntax,\n             Expr::WhileExpr(it) => &it.syntax,\n+            Expr::YieldExpr(it) => &it.syntax,\n         }\n     }\n }\n@@ -3983,6 +4010,11 @@ impl std::fmt::Display for WhileExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for YieldExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Label {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "046d68f526ff549d165591cb09ecbc1a2546bba3", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85cd3524e28443836658615fe40599bf10a96943/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cd3524e28443836658615fe40599bf10a96943/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=85cd3524e28443836658615fe40599bf10a96943", "patch": "@@ -68,7 +68,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"dyn\", \"else\",\n         \"enum\", \"extern\", \"false\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\",\n         \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"static\", \"struct\", \"super\",\n-        \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\",\n+        \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n     literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n@@ -149,6 +149,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"LABEL\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\",\n+        \"YIELD_EXPR\",\n         \"MATCH_EXPR\",\n         \"MATCH_ARM_LIST\",\n         \"MATCH_ARM\","}]}