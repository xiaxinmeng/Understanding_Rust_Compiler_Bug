{"sha": "2a042d61055263e404d9588d39046ed51e96a560", "node_id": "C_kwDOAAsO6NoAKDJhMDQyZDYxMDU1MjYzZTQwNGQ5NTg4ZDM5MDQ2ZWQ1MWU5NmE1NjA", "commit": {"author": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-09-18T20:52:43Z"}, "committer": {"name": "Devin Ragotzy", "email": "d6ragotzy@wmich.edu", "date": "2021-10-12T12:22:25Z"}, "message": "Filter unstable and doc hidden variants in usefulness checking\n\nAdd test cases for unstable variants\nAdd test cases for doc hidden variants\nMove is_doc_hidden to method on TyCtxt\nAdd unstable variants test to reachable-patterns ui test\nRename reachable-patterns -> omitted-patterns", "tree": {"sha": "80ab8750faee9088db48578f5a26b24d575edae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ab8750faee9088db48578f5a26b24d575edae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a042d61055263e404d9588d39046ed51e96a560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a042d61055263e404d9588d39046ed51e96a560", "html_url": "https://github.com/rust-lang/rust/commit/2a042d61055263e404d9588d39046ed51e96a560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a042d61055263e404d9588d39046ed51e96a560/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f2b31e61390b09c1012379c70b7d0bc0f65df9", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f2b31e61390b09c1012379c70b7d0bc0f65df9", "html_url": "https://github.com/rust-lang/rust/commit/02f2b31e61390b09c1012379c70b7d0bc0f65df9"}], "stats": {"total": 520, "additions": 428, "deletions": 92}, "files": [{"sha": "0eacedc09ee6dce2332db5d6938a9cfdd43f4144", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -38,7 +38,7 @@ use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::CrateStoreDyn;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use rustc_target::abi::Align;\n \n use std::cmp::Ordering;\n@@ -1900,6 +1900,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.sess.contains_name(&self.get_attrs(did), attr)\n     }\n \n+    /// Determines whether an item is annotated with `doc(hidden)`.\n+    pub fn is_doc_hidden(self, did: DefId) -> bool {\n+        self.get_attrs(did)\n+            .iter()\n+            .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })\n+            .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))\n+    }\n+\n     /// Returns `true` if this is an `auto trait`.\n     pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {\n         self.trait_def(trait_def_id).has_auto_impl"}, {"sha": "368e3957dd0d99b55fab5f827f07d1e0ccd5683d", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 56, "deletions": 29, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -52,11 +52,11 @@ use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n \n use rustc_hir::{HirId, RangeEnd};\n-use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::Field;\n use rustc_middle::thir::{FieldPat, Pat, PatKind, PatRange};\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt, VariantDef};\n+use rustc_middle::{middle::stability::EvalResult, mir::interpret::ConstValue};\n use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Integer, Size, VariantIdx};\n@@ -675,6 +675,36 @@ impl<'tcx> Constructor<'tcx> {\n         }\n     }\n \n+    /// Checks if the `Constructor` is a variant and `TyCtxt::eval_stability` returns\n+    /// `EvalResult::Deny { .. }`.\n+    ///\n+    /// This means that the variant has a stdlib unstable feature marking it.\n+    pub(super) fn is_unstable_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n+        if let Constructor::Variant(idx) = self {\n+            if let ty::Adt(adt, _) = pcx.ty.kind() {\n+                let variant_def_id = adt.variants[*idx].def_id;\n+                // Filter variants that depend on a disabled unstable feature.\n+                return matches!(\n+                    pcx.cx.tcx.eval_stability(variant_def_id, None, DUMMY_SP, None),\n+                    EvalResult::Deny { .. }\n+                );\n+            }\n+        }\n+        false\n+    }\n+\n+    /// Checks if the `Constructor` is a `Constructor::Variant` with a `#[doc(hidden)]`\n+    /// attribute.\n+    pub(super) fn is_doc_hidden_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n+        if let Constructor::Variant(idx) = self {\n+            if let ty::Adt(adt, _) = pcx.ty.kind() {\n+                let variant_def_id = adt.variants[*idx].def_id;\n+                return pcx.cx.tcx.is_doc_hidden(variant_def_id);\n+            }\n+        }\n+        false\n+    }\n+\n     fn variant_index_for_adt(&self, adt: &'tcx ty::AdtDef) -> VariantIdx {\n         match *self {\n             Variant(idx) => idx,\n@@ -929,36 +959,33 @@ impl<'tcx> SplitWildcard<'tcx> {\n                 // witness.\n                 let is_declared_nonexhaustive = cx.is_foreign_non_exhaustive_enum(pcx.ty);\n \n+                let is_exhaustive_pat_feature = cx.tcx.features().exhaustive_patterns;\n+\n                 // If `exhaustive_patterns` is disabled and our scrutinee is an empty enum, we treat it\n                 // as though it had an \"unknown\" constructor to avoid exposing its emptiness. The\n                 // exception is if the pattern is at the top level, because we want empty matches to be\n                 // considered exhaustive.\n-                let is_secretly_empty = def.variants.is_empty()\n-                    && !cx.tcx.features().exhaustive_patterns\n-                    && !pcx.is_top_level;\n-\n-                if is_secretly_empty {\n-                    smallvec![NonExhaustive]\n-                } else if is_declared_nonexhaustive {\n-                    def.variants\n-                        .indices()\n-                        .map(|idx| Variant(idx))\n-                        .chain(Some(NonExhaustive))\n-                        .collect()\n-                } else if cx.tcx.features().exhaustive_patterns {\n-                    // If `exhaustive_patterns` is enabled, we exclude variants known to be\n-                    // uninhabited.\n-                    def.variants\n-                        .iter_enumerated()\n-                        .filter(|(_, v)| {\n-                            !v.uninhabited_from(cx.tcx, substs, def.adt_kind(), cx.param_env)\n-                                .contains(cx.tcx, cx.module)\n-                        })\n-                        .map(|(idx, _)| Variant(idx))\n-                        .collect()\n-                } else {\n-                    def.variants.indices().map(|idx| Variant(idx)).collect()\n+                let is_secretly_empty =\n+                    def.variants.is_empty() && !is_exhaustive_pat_feature && !pcx.is_top_level;\n+\n+                let mut ctors: SmallVec<[_; 1]> = def\n+                    .variants\n+                    .iter_enumerated()\n+                    .filter(|(_, v)| {\n+                        // If `exhaustive_patterns` is enabled, we exclude variants known to be\n+                        // uninhabited.\n+                        let is_uninhabited = is_exhaustive_pat_feature\n+                            && v.uninhabited_from(cx.tcx, substs, def.adt_kind(), cx.param_env)\n+                                .contains(cx.tcx, cx.module);\n+                        !is_uninhabited\n+                    })\n+                    .map(|(idx, _)| Variant(idx))\n+                    .collect();\n+\n+                if is_secretly_empty || is_declared_nonexhaustive {\n+                    ctors.push(NonExhaustive);\n                 }\n+                ctors\n             }\n             ty::Char => {\n                 smallvec![\n@@ -1068,7 +1095,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n                     Missing {\n                         nonexhaustive_enum_missing_real_variants: self\n                             .iter_missing(pcx)\n-                            .any(|c| !c.is_non_exhaustive()),\n+                            .any(|c| !(c.is_non_exhaustive() || c.is_unstable_variant(pcx))),\n                     }\n                 } else {\n                     Missing { nonexhaustive_enum_missing_real_variants: false }\n@@ -1222,9 +1249,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n \n /// Values and patterns can be represented as a constructor applied to some fields. This represents\n /// a pattern in this form.\n-/// This also keeps track of whether the pattern has been foundreachable during analysis. For this\n+/// This also keeps track of whether the pattern has been found reachable during analysis. For this\n /// reason we should be careful not to clone patterns for which we care about that. Use\n-/// `clone_and_forget_reachability` is you're sure.\n+/// `clone_and_forget_reachability` if you're sure.\n pub(crate) struct DeconstructedPat<'p, 'tcx> {\n     ctor: Constructor<'tcx>,\n     fields: Fields<'p, 'tcx>,"}, {"sha": "d959d2f7f6f3f9ca292c8cd072b0799bf5c06486", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -585,15 +585,33 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n                     } else {\n                         let mut split_wildcard = SplitWildcard::new(pcx);\n                         split_wildcard.split(pcx, matrix.heads().map(DeconstructedPat::ctor));\n+\n+                        // This lets us know if we skipped any variants because they are marked\n+                        // `doc(hidden)` or they are unstable feature gate (only stdlib types).\n+                        let mut hide_variant_show_wild = false;\n                         // Construct for each missing constructor a \"wild\" version of this\n                         // constructor, that matches everything that can be built with\n                         // it. For example, if `ctor` is a `Constructor::Variant` for\n                         // `Option::Some`, we get the pattern `Some(_)`.\n-                        split_wildcard\n+                        let mut new: Vec<DeconstructedPat<'_, '_>> = split_wildcard\n                             .iter_missing(pcx)\n-                            .cloned()\n-                            .map(|missing_ctor| DeconstructedPat::wild_from_ctor(pcx, missing_ctor))\n-                            .collect()\n+                            .filter_map(|missing_ctor| {\n+                                // Check if this variant is marked `doc(hidden)`\n+                                if missing_ctor.is_doc_hidden_variant(pcx)\n+                                    || missing_ctor.is_unstable_variant(pcx)\n+                                {\n+                                    hide_variant_show_wild = true;\n+                                    return None;\n+                                }\n+                                Some(DeconstructedPat::wild_from_ctor(pcx, missing_ctor.clone()))\n+                            })\n+                            .collect();\n+\n+                        if hide_variant_show_wild {\n+                            new.push(DeconstructedPat::wildcard(pcx.ty));\n+                        }\n+\n+                        new\n                     };\n \n                     witnesses\n@@ -851,8 +869,10 @@ fn is_useful<'p, 'tcx>(\n                     split_wildcard\n                         .iter_missing(pcx)\n                         // Filter out the `NonExhaustive` because we want to list only real\n-                        // variants.\n-                        .filter(|c| !c.is_non_exhaustive())\n+                        // variants. Also remove any unstable feature gated variants.\n+                        // Because of how we computed `nonexhaustive_enum_missing_real_variants`,\n+                        // this will not return an empty `Vec`.\n+                        .filter(|c| !(c.is_non_exhaustive() || c.is_unstable_variant(pcx)))\n                         .cloned()\n                         .map(|missing_ctor| DeconstructedPat::wild_from_ctor(pcx, missing_ctor))\n                         .collect::<Vec<_>>()"}, {"sha": "742b7e82c16b076339b377ff8cabefdd48c18ffe", "filename": "src/test/ui/pattern/usefulness/auxiliary/hidden.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fhidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fhidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fhidden.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,6 @@\n+pub enum Foo {\n+    A,\n+    B,\n+    #[doc(hidden)]\n+    C,\n+}"}, {"sha": "3142489c86103bc7f17656b0ca76ca411b420ad8", "filename": "src/test/ui/pattern/usefulness/auxiliary/unstable.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Funstable.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,12 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub enum Foo {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Stable,\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Stable2,\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    Unstable,\n+}"}, {"sha": "a1dcab093142335b9cc8dfe8d7153f36b324fa28", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,30 @@\n+// aux-build:hidden.rs\n+\n+extern crate hidden;\n+\n+use hidden::Foo;\n+\n+fn main() {\n+    match Foo::A {\n+        Foo::A => {}\n+        Foo::B => {}\n+    }\n+    //~^^^^ non-exhaustive patterns: `_` not covered\n+\n+    match Foo::A {\n+        Foo::A => {}\n+        Foo::C => {}\n+    }\n+    //~^^^^ non-exhaustive patterns: `B` not covered\n+\n+    match Foo::A {\n+        Foo::A => {}\n+    }\n+    //~^^^ non-exhaustive patterns: `B` and `_` not covered\n+\n+    match None {\n+        None => {}\n+        Some(Foo::A) => {}\n+    }\n+    //~^^^^ non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n+}"}, {"sha": "6c9539822b3dd6de105fb42ec08fa81a134e3339", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,54 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/doc-hidden-non-exhaustive.rs:8:11\n+   |\n+LL |     match Foo::A {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n+\n+error[E0004]: non-exhaustive patterns: `B` not covered\n+  --> $DIR/doc-hidden-non-exhaustive.rs:14:11\n+   |\n+LL |     match Foo::A {\n+   |           ^^^^^^ pattern `B` not covered\n+   |\n+  ::: $DIR/auxiliary/hidden.rs:3:5\n+   |\n+LL |     B,\n+   |     - not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n+\n+error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n+  --> $DIR/doc-hidden-non-exhaustive.rs:20:11\n+   |\n+LL |     match Foo::A {\n+   |           ^^^^^^ patterns `B` and `_` not covered\n+   |\n+  ::: $DIR/auxiliary/hidden.rs:3:5\n+   |\n+LL |     B,\n+   |     - not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n+\n+error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n+  --> $DIR/doc-hidden-non-exhaustive.rs:25:11\n+   |\n+LL |     match None {\n+   |           ^^^^ patterns `Some(B)` and `Some(_)` not covered\n+   |\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ---- not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Option<Foo>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "2e023a3be4a5ea5f25529a3947d43e0bb611e752", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,18 @@\n+// aux-build:unstable.rs\n+\n+extern crate unstable;\n+\n+use unstable::Foo;\n+\n+fn main() {\n+    match Foo::Stable {\n+        Foo::Stable => {}\n+    }\n+    //~^^^ non-exhaustive patterns: `Stable2` and `_` not covered\n+\n+    match Foo::Stable {\n+        Foo::Stable => {}\n+        Foo::Stable2 => {}\n+    }\n+    //~^^^^ non-exhaustive patterns: `_` not covered\n+}"}, {"sha": "9b42565ac7342b96512ae368cd6315325b59a3c3", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,26 @@\n+error[E0004]: non-exhaustive patterns: `Stable2` and `_` not covered\n+  --> $DIR/stable-gated-patterns.rs:8:11\n+   |\n+LL |     match Foo::Stable {\n+   |           ^^^^^^^^^^^ patterns `Stable2` and `_` not covered\n+   |\n+  ::: $DIR/auxiliary/unstable.rs:9:5\n+   |\n+LL |     Stable2,\n+   |     ------- not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/stable-gated-patterns.rs:13:11\n+   |\n+LL |     match Foo::Stable {\n+   |           ^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "b9804b0ffe77ade22fbb91ea2d57da1e71cabd99", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,22 @@\n+#![feature(unstable_test_feature)]\n+\n+// aux-build:unstable.rs\n+\n+extern crate unstable;\n+\n+use unstable::Foo;\n+\n+fn main() {\n+    match Foo::Stable {\n+        Foo::Stable => {}\n+        Foo::Stable2 => {}\n+    }\n+    //~^^^^ non-exhaustive patterns: `Unstable` not covered\n+\n+    // Ok: all variants are explicitly matched\n+    match Foo::Stable {\n+        Foo::Stable => {}\n+        Foo::Stable2 => {}\n+        Foo::Unstable => {}\n+    }\n+}"}, {"sha": "f9c0196b76598163c84e49234590bc0b09ff27c4", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,17 @@\n+error[E0004]: non-exhaustive patterns: `Unstable` not covered\n+  --> $DIR/unstable-gated-patterns.rs:10:11\n+   |\n+LL |     match Foo::Stable {\n+   |           ^^^^^^^^^^^ pattern `Unstable` not covered\n+   |\n+  ::: $DIR/auxiliary/unstable.rs:11:5\n+   |\n+LL |     Unstable,\n+   |     -------- not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "de9d6f65945cd375334d32f6ba65c1aef9cc6f6b", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/unstable.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funstable.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,29 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+#[non_exhaustive]\n+pub enum UnstableEnum {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Stable,\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Stable2,\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    Unstable,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+#[non_exhaustive]\n+pub enum OnlyUnstableEnum {\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    Unstable,\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    Unstable2,\n+}\n+\n+impl OnlyUnstableEnum {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub fn new() -> Self {\n+        Self::Unstable\n+    }\n+}"}, {"sha": "fe9734fdc08f66e28943703316c39333df6d5007", "filename": "src/test/ui/rfc-2008-non-exhaustive/omitted-patterns.rs", "status": "renamed", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -1,17 +1,19 @@\n // Test that the `non_exhaustive_omitted_patterns` lint is triggered correctly.\n \n-#![feature(non_exhaustive_omitted_patterns_lint)]\n+#![feature(non_exhaustive_omitted_patterns_lint, unstable_test_feature)]\n \n // aux-build:enums.rs\n extern crate enums;\n-\n+// aux-build:unstable.rs\n+extern crate unstable;\n // aux-build:structs.rs\n extern crate structs;\n \n use enums::{\n     EmptyNonExhaustiveEnum, NestedNonExhaustive, NonExhaustiveEnum, NonExhaustiveSingleVariant,\n     VariantNonExhaustive,\n };\n+use unstable::{UnstableEnum, OnlyUnstableEnum};\n use structs::{FunctionalRecord, MixedVisFields, NestedStruct, NormalStruct};\n \n #[non_exhaustive]\n@@ -94,35 +96,6 @@ fn main() {\n     //~^^ some variants are not matched explicitly\n     //~^^^^^ some variants are not matched explicitly\n \n-    // The io::ErrorKind has many `unstable` fields how do they interact with this\n-    // lint\n-    #[deny(non_exhaustive_omitted_patterns)]\n-    match std::io::ErrorKind::Other {\n-        std::io::ErrorKind::NotFound => {}\n-        std::io::ErrorKind::PermissionDenied => {}\n-        std::io::ErrorKind::ConnectionRefused => {}\n-        std::io::ErrorKind::ConnectionReset => {}\n-        std::io::ErrorKind::ConnectionAborted => {}\n-        std::io::ErrorKind::NotConnected => {}\n-        std::io::ErrorKind::AddrInUse => {}\n-        std::io::ErrorKind::AddrNotAvailable => {}\n-        std::io::ErrorKind::BrokenPipe => {}\n-        std::io::ErrorKind::AlreadyExists => {}\n-        std::io::ErrorKind::WouldBlock => {}\n-        std::io::ErrorKind::InvalidInput => {}\n-        std::io::ErrorKind::InvalidData => {}\n-        std::io::ErrorKind::TimedOut => {}\n-        std::io::ErrorKind::WriteZero => {}\n-        std::io::ErrorKind::Interrupted => {}\n-        std::io::ErrorKind::Other => {}\n-        std::io::ErrorKind::UnexpectedEof => {}\n-        std::io::ErrorKind::Unsupported => {}\n-        std::io::ErrorKind::OutOfMemory => {}\n-        // All stable variants are above and unstable in `_`\n-        _ => {}\n-    }\n-    //~^^ some variants are not matched explicitly\n-\n     #[warn(non_exhaustive_omitted_patterns)]\n     match VariantNonExhaustive::Baz(1, 2) {\n         VariantNonExhaustive::Baz(_, _) => {}\n@@ -163,4 +136,35 @@ fn main() {\n     // Ok: we don't lint on `if let` expressions\n     #[deny(non_exhaustive_omitted_patterns)]\n     if let NonExhaustiveEnum::Tuple(_) = non_enum {}\n+\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n+        UnstableEnum::Stable2 => {}\n+        #[deny(non_exhaustive_omitted_patterns)]\n+        _ => {}\n+    }\n+    //~^^ some variants are not matched explicitly\n+\n+    #[deny(non_exhaustive_omitted_patterns)]\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n+        UnstableEnum::Stable2 => {}\n+        UnstableEnum::Unstable => {}\n+        _ => {}\n+    }\n+\n+    // Ok: the feature is on and both variants are matched\n+    #[deny(non_exhaustive_omitted_patterns)]\n+    match OnlyUnstableEnum::Unstable {\n+        OnlyUnstableEnum::Unstable => {}\n+        OnlyUnstableEnum::Unstable2 => {}\n+        _ => {}\n+    }\n+\n+    #[deny(non_exhaustive_omitted_patterns)]\n+    match OnlyUnstableEnum::Unstable {\n+        OnlyUnstableEnum::Unstable => {}\n+        _ => {}\n+    }\n+    //~^^ some variants are not matched explicitly\n }", "previous_filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.rs"}, {"sha": "30f3f88ad9161b31fac24ea7dcd7023ac876c596", "filename": "src/test/ui/rfc-2008-non-exhaustive/omitted-patterns.stderr", "status": "renamed", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -1,47 +1,47 @@\n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:129:9\n+  --> $DIR/omitted-patterns.rs:102:9\n    |\n LL |         VariantNonExhaustive::Bar { x, .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `y` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:126:12\n+  --> $DIR/omitted-patterns.rs:99:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `VariantNonExhaustive` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:134:9\n+  --> $DIR/omitted-patterns.rs:107:9\n    |\n LL |     let FunctionalRecord { first_field, second_field, .. } = FunctionalRecord::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `third_field` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:133:12\n+  --> $DIR/omitted-patterns.rs:106:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `FunctionalRecord` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:142:29\n+  --> $DIR/omitted-patterns.rs:115:29\n    |\n LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = NestedStruct::default();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `second_field` not listed\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:141:12\n+  --> $DIR/omitted-patterns.rs:114:12\n    |\n LL |     #[warn(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `NormalStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n \n warning: some fields are not explicitly listed\n-  --> $DIR/reachable-patterns.rs:142:9\n+  --> $DIR/omitted-patterns.rs:115:9\n    |\n LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = NestedStruct::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `foo` not listed\n@@ -50,63 +50,63 @@ LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = Nested\n    = note: the pattern is of type `NestedStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:56:9\n+  --> $DIR/omitted-patterns.rs:58:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Struct { .. }` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:55:16\n+  --> $DIR/omitted-patterns.rs:57:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:63:9\n+  --> $DIR/omitted-patterns.rs:65:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Tuple(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:62:16\n+  --> $DIR/omitted-patterns.rs:64:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:73:9\n+  --> $DIR/omitted-patterns.rs:75:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Unit` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:72:16\n+  --> $DIR/omitted-patterns.rs:74:16\n    |\n LL |         #[deny(non_exhaustive_omitted_patterns)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:90:32\n+  --> $DIR/omitted-patterns.rs:92:32\n    |\n LL |         NestedNonExhaustive::A(_) => {}\n    |                                ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:87:12\n+  --> $DIR/omitted-patterns.rs:89:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NonExhaustiveEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:92:9\n+  --> $DIR/omitted-patterns.rs:94:9\n    |\n LL |         _ => {}\n    |         ^ pattern `C` not covered\n@@ -115,32 +115,46 @@ LL |         _ => {}\n    = note: the matched value is of type `NestedNonExhaustive` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:122:9\n+  --> $DIR/omitted-patterns.rs:132:9\n    |\n LL |         _ => {}\n-   |         ^ patterns `HostUnreachable`, `NetworkUnreachable`, `NetworkDown` and 18 more not covered\n+   |         ^ pattern `A(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:99:12\n+  --> $DIR/omitted-patterns.rs:130:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n-   = note: the matched value is of type `ErrorKind` and the `non_exhaustive_omitted_patterns` attribute was found\n+   = note: the matched value is of type `NonExhaustiveSingleVariant` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:159:9\n+  --> $DIR/omitted-patterns.rs:144:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `A(_)` not covered\n+   |         ^ pattern `Unstable` not covered\n+   |\n+note: the lint level is defined here\n+  --> $DIR/omitted-patterns.rs:143:16\n+   |\n+LL |         #[deny(non_exhaustive_omitted_patterns)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: ensure that all variants are matched explicitly by adding the suggested match arms\n+   = note: the matched value is of type `UnstableEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n+\n+error: some variants are not matched explicitly\n+  --> $DIR/omitted-patterns.rs:167:9\n+   |\n+LL |         _ => {}\n+   |         ^ pattern `Unstable2` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:157:12\n+  --> $DIR/omitted-patterns.rs:164:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n-   = note: the matched value is of type `NonExhaustiveSingleVariant` and the `non_exhaustive_omitted_patterns` attribute was found\n+   = note: the matched value is of type `OnlyUnstableEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n-error: aborting due to 7 previous errors; 4 warnings emitted\n+error: aborting due to 8 previous errors; 4 warnings emitted\n ", "previous_filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.stderr"}, {"sha": "9621d28f8e22bf68e1af52c09ef6355af557fb11", "filename": "src/test/ui/rfc-2008-non-exhaustive/stable-omitted-patterns.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.rs?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,33 @@\n+// Test that the `non_exhaustive_omitted_patterns` lint is triggered correctly with variants\n+// marked stable and unstable.\n+\n+#![feature(non_exhaustive_omitted_patterns_lint)]\n+\n+// aux-build:unstable.rs\n+extern crate unstable;\n+\n+use unstable::{UnstableEnum, OnlyUnstableEnum};\n+\n+fn main() {\n+    // OK: this matches all the stable variants\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n+        UnstableEnum::Stable2 => {}\n+        #[deny(non_exhaustive_omitted_patterns)]\n+        _ => {}\n+    }\n+\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n+        #[deny(non_exhaustive_omitted_patterns)]\n+        _ => {}\n+    }\n+    //~^^ some variants are not matched explicitly\n+\n+    // Ok: although this is a bit odd, we don't have anything to report\n+    // since there is no stable variants and the feature is off\n+    #[deny(non_exhaustive_omitted_patterns)]\n+    match OnlyUnstableEnum::new() {\n+        _ => {}\n+    }\n+}"}, {"sha": "b9a281974faf4ad52ea383156974ed3eed93184e", "filename": "src/test/ui/rfc-2008-non-exhaustive/stable-omitted-patterns.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a042d61055263e404d9588d39046ed51e96a560/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr?ref=2a042d61055263e404d9588d39046ed51e96a560", "patch": "@@ -0,0 +1,16 @@\n+error: some variants are not matched explicitly\n+  --> $DIR/stable-omitted-patterns.rs:23:9\n+   |\n+LL |         _ => {}\n+   |         ^ pattern `Stable2` not covered\n+   |\n+note: the lint level is defined here\n+  --> $DIR/stable-omitted-patterns.rs:22:16\n+   |\n+LL |         #[deny(non_exhaustive_omitted_patterns)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: ensure that all variants are matched explicitly by adding the suggested match arms\n+   = note: the matched value is of type `UnstableEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n+\n+error: aborting due to previous error\n+"}]}