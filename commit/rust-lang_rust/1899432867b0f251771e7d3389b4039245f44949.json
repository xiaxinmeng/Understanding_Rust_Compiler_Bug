{"sha": "1899432867b0f251771e7d3389b4039245f44949", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OTk0MzI4NjdiMGYyNTE3NzFlN2QzMzg5YjQwMzkyNDVmNDQ5NDk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T20:51:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T20:51:18Z"}, "message": "lowering: don't rely on parser directly.", "tree": {"sha": "3ce83286725a8cc86a697b4a41503935506c107d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce83286725a8cc86a697b4a41503935506c107d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1899432867b0f251771e7d3389b4039245f44949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1899432867b0f251771e7d3389b4039245f44949", "html_url": "https://github.com/rust-lang/rust/commit/1899432867b0f251771e7d3389b4039245f44949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1899432867b0f251771e7d3389b4039245f44949/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f32f06d63b9947db63f0c739483e0294f588b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f32f06d63b9947db63f0c739483e0294f588b2", "html_url": "https://github.com/rust-lang/rust/commit/42f32f06d63b9947db63f0c739483e0294f588b2"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "062533f3d097254072627aa26b22a76d3a3fb14a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1899432867b0f251771e7d3389b4039245f44949/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1899432867b0f251771e7d3389b4039245f44949/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1899432867b0f251771e7d3389b4039245f44949", "patch": "@@ -70,8 +70,8 @@ use syntax::print::pprust;\n use syntax::source_map::{respan, ExpnData, ExpnKind, DesugaringKind, Spanned};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax::parse;\n-use syntax::parse::token::{self, Token};\n+use syntax::parse::token::{self, Nonterminal, Token};\n+use syntax::parse::ParseSess;\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n \n@@ -87,6 +87,8 @@ pub struct LoweringContext<'a> {\n \n     resolver: &'a mut dyn Resolver,\n \n+    parser: &'static dyn Parser,\n+\n     /// The items being lowered are collected here.\n     items: BTreeMap<hir::HirId, hir::Item>,\n \n@@ -181,6 +183,13 @@ pub trait Resolver {\n     fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool;\n }\n \n+/// HACK(Centril): there is a cyclic dependency between the parser and lowering\n+/// if we don't have this trait. To avoid that dependency so that librustc is\n+/// independent of the parser, we use type erasure here.\n+pub trait Parser {\n+    fn nt_to_tokenstream(&self, nt: &Nonterminal, sess: &ParseSess, span: Span) -> TokenStream;\n+}\n+\n /// Context of `impl Trait` in code, which determines whether it is allowed in an HIR subtree,\n /// and if so, what meaning it has.\n #[derive(Debug)]\n@@ -237,6 +246,7 @@ pub fn lower_crate(\n     dep_graph: &DepGraph,\n     krate: &Crate,\n     resolver: &mut dyn Resolver,\n+    parser: &'static dyn Parser,\n ) -> hir::Crate {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n@@ -250,6 +260,7 @@ pub fn lower_crate(\n         sess,\n         cstore,\n         resolver,\n+        parser,\n         items: BTreeMap::new(),\n         trait_items: BTreeMap::new(),\n         impl_items: BTreeMap::new(),\n@@ -1023,10 +1034,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_token(&mut self, token: Token) -> TokenStream {\n         match token.kind {\n             token::Interpolated(nt) => {\n-                // FIXME(Centril): Consider indirection `(parse_sess.nt_to_tokenstream)(...)`\n-                // to hack around the current hack that requires `nt_to_tokenstream` to live\n-                // in the parser.\n-                let tts = parse::nt_to_tokenstream(&nt, &self.sess.parse_sess, token.span);\n+                let tts = self.parser.nt_to_tokenstream(&nt, &self.sess.parse_sess, token.span);\n                 self.lower_token_stream(tts)\n             }\n             _ => TokenTree::Token(token).into(),"}, {"sha": "5078379e920538b2ea8900c0ac3e198c02fd34e1", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1899432867b0f251771e7d3389b4039245f44949/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1899432867b0f251771e7d3389b4039245f44949/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=1899432867b0f251771e7d3389b4039245f44949", "patch": "@@ -5,7 +5,7 @@ use crate::proc_macro_decls;\n use log::{info, warn, log_enabled};\n use rustc::dep_graph::DepGraph;\n use rustc::hir;\n-use rustc::hir::lowering::lower_crate;\n+use rustc::hir::lowering::{lower_crate, Parser};\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n@@ -38,9 +38,12 @@ use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::ext::base::{NamedSyntaxExtension, ExtCtxt};\n use syntax::mut_visit::MutVisitor;\n use syntax::parse::{self, PResult};\n+use syntax::parse::token::Nonterminal;\n+use syntax::parse::ParseSess;\n+use syntax::tokenstream::TokenStream;\n use syntax::util::node_count::NodeCounter;\n use syntax::symbol::Symbol;\n-use syntax_pos::FileName;\n+use syntax_pos::{FileName, Span};\n use syntax_ext;\n \n use rustc_serialize::json;\n@@ -532,6 +535,16 @@ fn configure_and_expand_inner<'a>(\n     Ok((krate, resolver))\n }\n \n+fn parser() -> &'static dyn Parser {\n+    struct Parse;\n+    impl Parser for Parse {\n+        fn nt_to_tokenstream(&self, nt: &Nonterminal, sess: &ParseSess, span: Span) -> TokenStream {\n+            syntax::parse::nt_to_tokenstream(nt, sess, span)\n+        }\n+    }\n+    &Parse\n+}\n+\n pub fn lower_to_hir(\n     sess: &Session,\n     cstore: &CStore,\n@@ -541,7 +554,7 @@ pub fn lower_to_hir(\n ) -> Result<hir::map::Forest> {\n     // Lower AST to HIR.\n     let hir_forest = time(sess, \"lowering AST -> HIR\", || {\n-        let hir_crate = lower_crate(sess, cstore, &dep_graph, &krate, resolver);\n+        let hir_crate = lower_crate(sess, cstore, &dep_graph, &krate, resolver, parser());\n \n         if sess.opts.debugging_opts.hir_stats {\n             hir_stats::print_hir_stats(&hir_crate);"}]}