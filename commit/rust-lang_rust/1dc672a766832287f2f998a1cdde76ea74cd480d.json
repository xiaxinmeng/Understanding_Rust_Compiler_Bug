{"sha": "1dc672a766832287f2f998a1cdde76ea74cd480d", "node_id": "C_kwDOAAsO6NoAKDFkYzY3MmE3NjY4MzIyODdmMmY5OThhMWNkZGU3NmVhNzRjZDQ4MGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T17:42:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T17:42:03Z"}, "message": "Rollup merge of #95426 - b-naber:valtrees-slice, r=RalfJung,oli-obk\n\nInclude Refs in Valtree Creation\n\nThis adds references to `const_to_valtree`, which isn't used in the compiler yet, but after the previous changes we made to the thir and mir representations and this change we should be able to finally introduce them in the next PR.\n\nI wasn't able to properly test this code, except indirectly by including a call of `const_to_valtree` in the code that currently creates constants (`turn_into_const_value`).\n\nr? `@lcnr`\n\ncc `@oli-obk` `@RalfJung`", "tree": {"sha": "2022a3f97f940e941e72e5f233ae70cbd9273a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2022a3f97f940e941e72e5f233ae70cbd9273a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc672a766832287f2f998a1cdde76ea74cd480d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWv/sCRBK7hj4Ov3rIwAAjfIIAHo2KtpzkBAEfEyIOzMisYR+\nEB7GcEPa93sSH3GRmSIFGJ50PSIosxR12nLauh7yF6dfdD9+T+A1NO1Zxlud8MMU\nT7k4LpMh+gMn3PyQPpA3dVsrc1MqjlPJtCqkDaq6O4CQHfnc2utn7Dv0BRUcVIwT\ndVAG/fciUdZVQlPPsMlcfpuiDqJMMhSEcl+D541vXFaKWO7yTUUHt3Ret4gunsaO\nk0piRenX0AzyskdMXq5BiScMn7ZuSqF2iliDDr6RUMv+HerX64dDa8WRtWR1SHV9\nVhi4oqxYaQJ8exh/sOJgRoBEm3/YH3RVSOXinJ7j2seXuZL9ee93EuNE3bZUAQ8=\n=z2wP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2022a3f97f940e941e72e5f233ae70cbd9273a13\nparent 3dced8029843ac9cfdeaa11400dec99d331a2779\nparent d8205cd3fe3cda6ebbcff40c8d173f8e05a375be\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650130923 +0200\ncommitter GitHub <noreply@github.com> 1650130923 +0200\n\nRollup merge of #95426 - b-naber:valtrees-slice, r=RalfJung,oli-obk\n\nInclude Refs in Valtree Creation\n\nThis adds references to `const_to_valtree`, which isn't used in the compiler yet, but after the previous changes we made to the thir and mir representations and this change we should be able to finally introduce them in the next PR.\n\nI wasn't able to properly test this code, except indirectly by including a call of `const_to_valtree` in the code that currently creates constants (`turn_into_const_value`).\n\nr? `@lcnr`\n\ncc `@oli-obk` `@RalfJung`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc672a766832287f2f998a1cdde76ea74cd480d", "html_url": "https://github.com/rust-lang/rust/commit/1dc672a766832287f2f998a1cdde76ea74cd480d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc672a766832287f2f998a1cdde76ea74cd480d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dced8029843ac9cfdeaa11400dec99d331a2779", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dced8029843ac9cfdeaa11400dec99d331a2779", "html_url": "https://github.com/rust-lang/rust/commit/3dced8029843ac9cfdeaa11400dec99d331a2779"}, {"sha": "d8205cd3fe3cda6ebbcff40c8d173f8e05a375be", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be", "html_url": "https://github.com/rust-lang/rust/commit/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "7cca6178ab25727c989962d841deec9e17267bda", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=1dc672a766832287f2f998a1cdde76ea74cd480d", "patch": "@@ -188,6 +188,7 @@ pub(super) fn op_to_const<'tcx>(\n     }\n }\n \n+#[instrument(skip(tcx), level = \"debug\")]\n fn turn_into_const_value<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     constant: ConstAlloc<'tcx>,\n@@ -206,6 +207,7 @@ fn turn_into_const_value<'tcx>(\n         !is_static || cid.promoted.is_some(),\n         \"the `eval_to_const_value_raw` query should not be used for statics, use `eval_to_allocation` instead\"\n     );\n+\n     // Turn this into a proper constant.\n     op_to_const(&ecx, &mplace.into())\n }"}, {"sha": "80270f825630f079c58ec55ea4b8560b1de8ccd7", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=1dc672a766832287f2f998a1cdde76ea74cd480d", "patch": "@@ -3,12 +3,14 @@\n use std::convert::TryFrom;\n \n use rustc_hir::Mutability;\n+use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_middle::{\n     mir::{self, interpret::ConstAlloc},\n     ty::ScalarInt,\n };\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n+use rustc_target::abi::VariantIdx;\n \n use crate::interpret::{\n     intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MPlaceTy,\n@@ -55,28 +57,48 @@ pub(crate) fn const_to_valtree<'tcx>(\n     const_to_valtree_inner(&ecx, &place)\n }\n \n-fn const_to_valtree_inner<'tcx>(\n+#[instrument(skip(ecx), level = \"debug\")]\n+fn branches<'tcx>(\n     ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n     place: &MPlaceTy<'tcx>,\n+    n: usize,\n+    variant: Option<VariantIdx>,\n ) -> Option<ty::ValTree<'tcx>> {\n-    let branches = |n, variant| {\n-        let place = match variant {\n-            Some(variant) => ecx.mplace_downcast(&place, variant).unwrap(),\n-            None => *place,\n-        };\n-        let variant =\n-            variant.map(|variant| Some(ty::ValTree::Leaf(ScalarInt::from(variant.as_u32()))));\n-        let fields = (0..n).map(|i| {\n-            let field = ecx.mplace_field(&place, i).unwrap();\n-            const_to_valtree_inner(ecx, &field)\n-        });\n-        // For enums, we preped their variant index before the variant's fields so we can figure out\n-        // the variant again when just seeing a valtree.\n-        let branches = variant.into_iter().chain(fields);\n-        Some(ty::ValTree::Branch(\n-            ecx.tcx.arena.alloc_from_iter(branches.collect::<Option<Vec<_>>>()?),\n-        ))\n+    let place = match variant {\n+        Some(variant) => ecx.mplace_downcast(&place, variant).unwrap(),\n+        None => *place,\n     };\n+    let variant = variant.map(|variant| Some(ty::ValTree::Leaf(ScalarInt::from(variant.as_u32()))));\n+    debug!(?place, ?variant);\n+\n+    let fields = (0..n).map(|i| {\n+        let field = ecx.mplace_field(&place, i).unwrap();\n+        const_to_valtree_inner(ecx, &field)\n+    });\n+    // For enums, we prepend their variant index before the variant's fields so we can figure out\n+    // the variant again when just seeing a valtree.\n+    let branches = variant.into_iter().chain(fields);\n+    Some(ty::ValTree::Branch(ecx.tcx.arena.alloc_from_iter(branches.collect::<Option<Vec<_>>>()?)))\n+}\n+\n+fn slice_branches<'tcx>(\n+    ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n+    place: &MPlaceTy<'tcx>,\n+) -> Option<ty::ValTree<'tcx>> {\n+    let n = place.len(&ecx.tcx()).expect(&format!(\"expected to use len of place {:?}\", place));\n+    let branches = (0..n).map(|i| {\n+        let place_elem = ecx.mplace_index(place, i).unwrap();\n+        const_to_valtree_inner(ecx, &place_elem)\n+    });\n+\n+    Some(ty::ValTree::Branch(ecx.tcx.arena.alloc_from_iter(branches.collect::<Option<Vec<_>>>()?)))\n+}\n+\n+#[instrument(skip(ecx), level = \"debug\")]\n+fn const_to_valtree_inner<'tcx>(\n+    ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n+    place: &MPlaceTy<'tcx>,\n+) -> Option<ty::ValTree<'tcx>> {\n     match place.layout.ty.kind() {\n         ty::FnDef(..) => Some(ty::ValTree::zst()),\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => {\n@@ -90,19 +112,27 @@ fn const_to_valtree_inner<'tcx>(\n         // Technically we could allow function pointers (represented as `ty::Instance`), but this is not guaranteed to\n         // agree with runtime equality tests.\n         ty::FnPtr(_) | ty::RawPtr(_) => None,\n-        ty::Ref(..) => unimplemented!(\"need to use deref_const\"),\n \n+        ty::Ref(_, _, _)  => {\n+            let derefd_place = ecx.deref_operand(&place.into()).unwrap_or_else(|e| bug!(\"couldn't deref {:?}, error: {:?}\", place, e));\n+            debug!(?derefd_place);\n+\n+            const_to_valtree_inner(ecx, &derefd_place)\n+        }\n+\n+        ty::Str | ty::Slice(_) | ty::Array(_, _) => {\n+            let valtree = slice_branches(ecx, place);\n+            debug!(?valtree);\n+\n+            valtree\n+        }\n         // Trait objects are not allowed in type level constants, as we have no concept for\n         // resolving their backing type, even if we can do that at const eval time. We may\n         // hypothetically be able to allow `dyn StructuralEq` trait objects in the future,\n         // but it is unclear if this is useful.\n         ty::Dynamic(..) => None,\n \n-        ty::Slice(_) | ty::Str => {\n-            unimplemented!(\"need to find the backing data of the slice/str and recurse on that\")\n-        }\n-        ty::Tuple(substs) => branches(substs.len(), None),\n-        ty::Array(_, len) => branches(usize::try_from(len.eval_usize(ecx.tcx.tcx, ecx.param_env)).unwrap(), None),\n+        ty::Tuple(substs) => branches(ecx, place, substs.len(), None),\n \n         ty::Adt(def, _) => {\n             if def.variants().is_empty() {\n@@ -111,7 +141,7 @@ fn const_to_valtree_inner<'tcx>(\n \n             let variant = ecx.read_discriminant(&place.into()).unwrap().1;\n \n-            branches(def.variant(variant).fields.len(), def.is_enum().then_some(variant))\n+            branches(ecx, place, def.variant(variant).fields.len(), def.is_enum().then_some(variant))\n         }\n \n         ty::Never"}, {"sha": "31da4522a1fda38ff0554920315fa39c5111e597", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=1dc672a766832287f2f998a1cdde76ea74cd480d", "patch": "@@ -191,7 +191,7 @@ impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {\n     }\n \n     #[inline]\n-    pub(super) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n+    pub(crate) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n         if self.layout.is_unsized() {\n             // We need to consult `meta` metadata\n             match self.layout.ty.kind() {"}, {"sha": "195760c059081bf607e54c26a33dfec44e4dbb77", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc672a766832287f2f998a1cdde76ea74cd480d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=1dc672a766832287f2f998a1cdde76ea74cd480d", "patch": "@@ -1,5 +1,5 @@\n use super::ScalarInt;\n-use rustc_macros::HashStable;\n+use rustc_macros::{HashStable, TyDecodable, TyEncodable};\n \n #[derive(Copy, Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]\n #[derive(HashStable)]"}]}