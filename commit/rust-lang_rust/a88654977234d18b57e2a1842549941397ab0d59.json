{"sha": "a88654977234d18b57e2a1842549941397ab0d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ODY1NDk3NzIzNGQxOGI1N2UyYTE4NDI1NDk5NDEzOTdhYjBkNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-18T18:16:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-18T18:16:48Z"}, "message": "auto merge of #12336 : kballard/rust/mutexarc-no-freeze, r=alexcrichton\n\nWith Rc no longer trying to statically prevent cycles (and thus no\r\nlonger using the Freeze bound), it seems appropriate to remove that\r\nrestriction from MutexArc as well.\r\n\r\nCloses #9251.", "tree": {"sha": "0b0d209facc3d669d643bf0f386c4a3ea142e58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b0d209facc3d669d643bf0f386c4a3ea142e58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a88654977234d18b57e2a1842549941397ab0d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a88654977234d18b57e2a1842549941397ab0d59", "html_url": "https://github.com/rust-lang/rust/commit/a88654977234d18b57e2a1842549941397ab0d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a88654977234d18b57e2a1842549941397ab0d59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bccc5862512340870d0fed89458b29f3a3fcc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bccc5862512340870d0fed89458b29f3a3fcc0", "html_url": "https://github.com/rust-lang/rust/commit/54bccc5862512340870d0fed89458b29f3a3fcc0"}, {"sha": "449c34a0e50a3b5f961d5240eb5a4ba94a74c31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/449c34a0e50a3b5f961d5240eb5a4ba94a74c31c", "html_url": "https://github.com/rust-lang/rust/commit/449c34a0e50a3b5f961d5240eb5a4ba94a74c31c"}], "stats": {"total": 131, "additions": 33, "deletions": 98}, "files": [{"sha": "db4260a30ee113886ae7f9274520746eb590f524", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 33, "deletions": 72, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/a88654977234d18b57e2a1842549941397ab0d59/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88654977234d18b57e2a1842549941397ab0d59/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=a88654977234d18b57e2a1842549941397ab0d59", "patch": "@@ -192,12 +192,6 @@ impl<T:Send> MutexArc<T> {\n      * other tasks wishing to access the data will block until the closure\n      * finishes running.\n      *\n-     * The reason this function is 'unsafe' is because it is possible to\n-     * construct a circular reference among multiple Arcs by mutating the\n-     * underlying data. This creates potential for deadlock, but worse, this\n-     * will guarantee a memory leak of all involved Arcs. Using MutexArcs\n-     * inside of other Arcs is safe in absence of circular references.\n-     *\n      * If you wish to nest MutexArcs, one strategy for ensuring safety at\n      * runtime is to add a \"nesting level counter\" inside the stored data, and\n      * when traversing the arcs, assert that they monotonically decrease.\n@@ -210,63 +204,33 @@ impl<T:Send> MutexArc<T> {\n      * blocked on the mutex) will also fail immediately.\n      */\n     #[inline]\n-    pub unsafe fn unsafe_access<U>(&self, blk: |x: &mut T| -> U) -> U {\n+    pub fn access<U>(&self, blk: |x: &mut T| -> U) -> U {\n         let state = self.x.get();\n-        // Borrowck would complain about this if the function were\n-        // not already unsafe. See borrow_rwlock, far below.\n-        (&(*state).lock).lock(|| {\n-            check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail::new(&mut (*state).failed);\n-            blk(&mut (*state).data)\n-        })\n+        unsafe {\n+            // Borrowck would complain about this if the code were\n+            // not already unsafe. See borrow_rwlock, far below.\n+            (&(*state).lock).lock(|| {\n+                check_poison(true, (*state).failed);\n+                let _z = PoisonOnFail::new(&mut (*state).failed);\n+                blk(&mut (*state).data)\n+            })\n+        }\n     }\n \n-    /// As unsafe_access(), but with a condvar, as sync::mutex.lock_cond().\n+    /// As access(), but with a condvar, as sync::mutex.lock_cond().\n     #[inline]\n-    pub unsafe fn unsafe_access_cond<U>(&self,\n-                                        blk: |x: &mut T, c: &Condvar| -> U)\n-                                        -> U {\n+    pub fn access_cond<U>(&self, blk: |x: &mut T, c: &Condvar| -> U) -> U {\n         let state = self.x.get();\n-        (&(*state).lock).lock_cond(|cond| {\n-            check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail::new(&mut (*state).failed);\n-            blk(&mut (*state).data,\n-                &Condvar {is_mutex: true,\n-                          failed: &(*state).failed,\n-                          cond: cond })\n-        })\n-    }\n-}\n-\n-impl<T:Freeze + Send> MutexArc<T> {\n-\n-    /**\n-     * As unsafe_access.\n-     *\n-     * The difference between access and unsafe_access is that the former\n-     * forbids mutexes to be nested. While unsafe_access can be used on\n-     * MutexArcs without freezable interiors, this safe version of access\n-     * requires the Freeze bound, which prohibits access on MutexArcs which\n-     * might contain nested MutexArcs inside.\n-     *\n-     * The purpose of this is to offer a safe implementation of MutexArc to be\n-     * used instead of RWArc in cases where no readers are needed and slightly\n-     * better performance is required.\n-     *\n-     * Both methods have the same failure behaviour as unsafe_access and\n-     * unsafe_access_cond.\n-     */\n-    #[inline]\n-    pub fn access<U>(&self, blk: |x: &mut T| -> U) -> U {\n-        unsafe { self.unsafe_access(blk) }\n-    }\n-\n-    /// As unsafe_access_cond but safe and Freeze.\n-    #[inline]\n-    pub fn access_cond<U>(&self,\n-                          blk: |x: &mut T, c: &Condvar| -> U)\n-                          -> U {\n-        unsafe { self.unsafe_access_cond(blk) }\n+        unsafe {\n+            (&(*state).lock).lock_cond(|cond| {\n+                check_poison(true, (*state).failed);\n+                let _z = PoisonOnFail::new(&mut (*state).failed);\n+                blk(&mut (*state).data,\n+                    &Condvar {is_mutex: true,\n+                            failed: &(*state).failed,\n+                            cond: cond })\n+            })\n+        }\n     }\n }\n \n@@ -590,7 +554,6 @@ impl<T:Clone+Send+Freeze> CowArc<T> {\n \n impl<T:Clone+Send+Freeze> Clone for CowArc<T> {\n     /// Duplicate a Copy-on-write Arc. See arc::clone for more details.\n-    #[inline]\n     fn clone(&self) -> CowArc<T> {\n         CowArc { x: self.x.clone() }\n     }\n@@ -692,20 +655,18 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_unsafe_mutex_arc_nested() {\n-        unsafe {\n-            // Tests nested mutexes and access\n-            // to underlaying data.\n-            let arc = ~MutexArc::new(1);\n-            let arc2 = ~MutexArc::new(*arc);\n-            task::spawn(proc() {\n-                (*arc2).unsafe_access(|mutex| {\n-                    (*mutex).access(|one| {\n-                        assert!(*one == 1);\n-                    })\n+    fn test_mutex_arc_nested() {\n+        // Tests nested mutexes and access\n+        // to underlaying data.\n+        let arc = ~MutexArc::new(1);\n+        let arc2 = ~MutexArc::new(*arc);\n+        task::spawn(proc() {\n+            (*arc2).access(|mutex| {\n+                (*mutex).access(|one| {\n+                    assert!(*one == 1);\n                 })\n-            });\n-        }\n+            })\n+        });\n     }\n \n     #[test]"}, {"sha": "34c56f98404d31aed246fb4777aae49886d0e0e3", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/54bccc5862512340870d0fed89458b29f3a3fcc0/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54bccc5862512340870d0fed89458b29f3a3fcc0/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=54bccc5862512340870d0fed89458b29f3a3fcc0", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern crate sync;\n-\n-use std::task;\n-use sync::MutexArc;\n-\n-fn test_mutex_arc_nested() {\n-    let arc = ~MutexArc::new(1);\n-    let arc2 = ~MutexArc::new(*arc);\n-\n-    task::spawn(proc() {\n-        (*arc2).access(|mutex| { //~ ERROR instantiating a type parameter with an incompatible type\n-        })\n-    });\n-}\n-\n-fn main() {}"}]}