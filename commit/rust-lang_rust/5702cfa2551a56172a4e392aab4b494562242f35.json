{"sha": "5702cfa2551a56172a4e392aab4b494562242f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MDJjZmEyNTUxYTU2MTcyYTRlMzkyYWFiNGI0OTQ1NjIyNDJmMzU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-16T17:29:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-16T17:29:56Z"}, "message": "Rollup merge of #80764 - CAD97:weak-unsized-as-ptr-again, r=RalfJung\n\nRe-stabilize Weak::as_ptr and friends for unsized T\n\nAs per [T-lang consensus](https://hackmd.io/7r3_is6uTz-163fsOV8Vfg), this uses a branch to handle the dangling case. The discussed optimization of only doing the branch in the T: ?Sized case is left for a followup patch, as doing so is not trivial (as it requires specialization) and not _obviously_ better (as it requires using `wrapping_offset` rather than `offset` more).\n\n<details><summary>Basically said optimization</summary>\n\nSpecialize on `T: Sized`:\n\n```rust\nfn as_ptr(&self) -> *const T {\n    if [ T is Sized ] || !is_dangling(ptr) {\n        (ptr as *mut T).set_ptr_value( (ptr as *mut u8).wrapping_offset(data_offset) )\n    } else {\n        ptr::null()\n    }\n}\n\nfn from_raw(*const T) -> Self {\n    if [ T is Sized ] || !ptr.is_null() {\n        let ptr = (ptr as *mut RcBox).set_ptr_value( (ptr as *mut u8).wrapping_offset(-data_offset) );\n        Weak { ptr }\n    } else {\n        Weak::new()\n    }\n}\n```\n\n(but with more `set_ptr_value` to avoid `Sized` restrictions and maintain metadata.)\n\nWritten in this fashion, this is not a correctness-critical specialization (i.e. so long as `[ T is Sized ]` is false for unsized `T`, it can be `rand()` for sized `T` without breaking correctness), but it's still touchy, so I'd rather do it in another PR with separate review.\n\n---\n</details>\n\nThis effectively reverts #80422 and re-establishes #74160. T-libs [previously signed off](https://github.com/rust-lang/rust/pull/74160#issuecomment-660539373) on this stable API change in #74160.", "tree": {"sha": "ae4ea8cb340bf092311100a0ec0f1d3ff2a68516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4ea8cb340bf092311100a0ec0f1d3ff2a68516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5702cfa2551a56172a4e392aab4b494562242f35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAyKUCRBK7hj4Ov3rIwAAdHIIAArtfDcPbD1pi5pnslrvcdhn\nIM7+CQE5Er26io04zQjukB7mxwDb8KTNQdnRNA5E/jZ6kDh4WlGiTikg5IzKtPtt\n3ntVWuLuSzIzD8g0gjbS+mF2wqBuMr58MnSsvQDa50cIlpnj+xrR/oSYgAtzU3CI\nF5s26fi/MEo/lS+nFIyA0Z29sOevbzSClSEetF6d+6hK9swFeQ5VgQDg9puuSsXB\n2hi6Ik8+UpyDmPF268gElp3u/sZVc/9kqdrLmGwAFSy47ygWV4jFSJQ89YSLgT3I\nNbg2wGhw4i2qNDSjqP13/MjxQkFNYAOaAn526X1KYHRKGoEmnocEa7mYwMqj/RI=\n=v+FV\n-----END PGP SIGNATURE-----\n", "payload": "tree ae4ea8cb340bf092311100a0ec0f1d3ff2a68516\nparent 40d2506cab20cfd7df17f390ec662b22f166f0a6\nparent c14e919f1e221dd0629bd88db6db77c52e03604e\nauthor Mara Bos <m-ou.se@m-ou.se> 1610818196 +0000\ncommitter GitHub <noreply@github.com> 1610818196 +0000\n\nRollup merge of #80764 - CAD97:weak-unsized-as-ptr-again, r=RalfJung\n\nRe-stabilize Weak::as_ptr and friends for unsized T\n\nAs per [T-lang consensus](https://hackmd.io/7r3_is6uTz-163fsOV8Vfg), this uses a branch to handle the dangling case. The discussed optimization of only doing the branch in the T: ?Sized case is left for a followup patch, as doing so is not trivial (as it requires specialization) and not _obviously_ better (as it requires using `wrapping_offset` rather than `offset` more).\n\n<details><summary>Basically said optimization</summary>\n\nSpecialize on `T: Sized`:\n\n```rust\nfn as_ptr(&self) -> *const T {\n    if [ T is Sized ] || !is_dangling(ptr) {\n        (ptr as *mut T).set_ptr_value( (ptr as *mut u8).wrapping_offset(data_offset) )\n    } else {\n        ptr::null()\n    }\n}\n\nfn from_raw(*const T) -> Self {\n    if [ T is Sized ] || !ptr.is_null() {\n        let ptr = (ptr as *mut RcBox).set_ptr_value( (ptr as *mut u8).wrapping_offset(-data_offset) );\n        Weak { ptr }\n    } else {\n        Weak::new()\n    }\n}\n```\n\n(but with more `set_ptr_value` to avoid `Sized` restrictions and maintain metadata.)\n\nWritten in this fashion, this is not a correctness-critical specialization (i.e. so long as `[ T is Sized ]` is false for unsized `T`, it can be `rand()` for sized `T` without breaking correctness), but it's still touchy, so I'd rather do it in another PR with separate review.\n\n---\n</details>\n\nThis effectively reverts #80422 and re-establishes #74160. T-libs [previously signed off](https://github.com/rust-lang/rust/pull/74160#issuecomment-660539373) on this stable API change in #74160.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5702cfa2551a56172a4e392aab4b494562242f35", "html_url": "https://github.com/rust-lang/rust/commit/5702cfa2551a56172a4e392aab4b494562242f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5702cfa2551a56172a4e392aab4b494562242f35/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d2506cab20cfd7df17f390ec662b22f166f0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d2506cab20cfd7df17f390ec662b22f166f0a6", "html_url": "https://github.com/rust-lang/rust/commit/40d2506cab20cfd7df17f390ec662b22f166f0a6"}, {"sha": "c14e919f1e221dd0629bd88db6db77c52e03604e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14e919f1e221dd0629bd88db6db77c52e03604e", "html_url": "https://github.com/rust-lang/rust/commit/c14e919f1e221dd0629bd88db6db77c52e03604e"}], "stats": {"total": 248, "additions": 153, "deletions": 95}, "files": [{"sha": "d0bfa038aa13dd412e7717b6c61eb5912e714c62", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5702cfa2551a56172a4e392aab4b494562242f35", "patch": "@@ -120,6 +120,7 @@\n #![feature(receiver_trait)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n+#![feature(set_ptr_value)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n #![feature(staged_api)]"}, {"sha": "0e3bab6b20a0a7c9219ed3a2c7a5d0d6a5156b44", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 36, "deletions": 49, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=5702cfa2551a56172a4e392aab4b494562242f35", "patch": "@@ -829,8 +829,8 @@ impl<T: ?Sized> Rc<T> {\n         let offset = unsafe { data_offset(ptr) };\n \n         // Reverse the offset to find the original RcBox.\n-        let fake_ptr = ptr as *mut RcBox<T>;\n-        let rc_ptr = unsafe { set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset)) };\n+        let rc_ptr =\n+            unsafe { (ptr as *mut RcBox<T>).set_ptr_value((ptr as *mut u8).offset(-offset)) };\n \n         unsafe { Self::from_ptr(rc_ptr) }\n     }\n@@ -850,7 +850,7 @@ impl<T: ?Sized> Rc<T> {\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         this.inner().inc_weak();\n         // Make sure we do not create a dangling Weak\n-        debug_assert!(!is_dangling(this.ptr));\n+        debug_assert!(!is_dangling(this.ptr.as_ptr()));\n         Weak { ptr: this.ptr }\n     }\n \n@@ -1164,7 +1164,7 @@ impl<T: ?Sized> Rc<T> {\n             Self::allocate_for_layout(\n                 Layout::for_value(&*ptr),\n                 |layout| Global.allocate(layout),\n-                |mem| set_data_ptr(ptr as *mut T, mem) as *mut RcBox<T>,\n+                |mem| (ptr as *mut RcBox<T>).set_ptr_value(mem),\n             )\n         }\n     }\n@@ -1203,20 +1203,7 @@ impl<T> Rc<[T]> {\n             )\n         }\n     }\n-}\n-\n-/// Sets the data pointer of a `?Sized` raw pointer.\n-///\n-/// For a slice/trait object, this sets the `data` field and leaves the rest\n-/// unchanged. For a sized raw pointer, this simply sets the pointer.\n-unsafe fn set_data_ptr<T: ?Sized, U>(mut ptr: *mut T, data: *mut U) -> *mut T {\n-    unsafe {\n-        ptr::write(&mut ptr as *mut _ as *mut *mut u8, data as *mut u8);\n-    }\n-    ptr\n-}\n \n-impl<T> Rc<[T]> {\n     /// Copy elements from slice into newly allocated Rc<\\[T\\]>\n     ///\n     /// Unsafe because the caller must either take ownership or bind `T: Copy`\n@@ -1860,8 +1847,8 @@ impl<T> Weak<T> {\n     }\n }\n \n-pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n-    let address = ptr.as_ptr() as *mut () as usize;\n+pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {\n+    let address = ptr as *mut () as usize;\n     address == usize::MAX\n }\n \n@@ -1872,7 +1859,7 @@ struct WeakInner<'a> {\n     strong: &'a Cell<usize>,\n }\n \n-impl<T> Weak<T> {\n+impl<T: ?Sized> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1902,15 +1889,15 @@ impl<T> Weak<T> {\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n \n-        // SAFETY: we must offset the pointer manually, and said pointer may be\n-        // a dangling weak (usize::MAX) if T is sized. data_offset is safe to call,\n-        // because we know that a pointer to unsized T was derived from a real\n-        // unsized T, as dangling weaks are only created for sized T. wrapping_offset\n-        // is used so that we can use the same code path for the non-dangling\n-        // unsized case and the potentially dangling sized case.\n-        unsafe {\n-            let offset = data_offset(ptr as *mut T);\n-            set_data_ptr(ptr as *mut T, (ptr as *mut u8).wrapping_offset(offset))\n+        if is_dangling(ptr) {\n+            // If the pointer is dangling, we return the sentinel directly. This cannot be\n+            // a valid payload address, as the payload is at least as aligned as RcBox (usize).\n+            ptr as *const T\n+        } else {\n+            // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n+            // The payload may be dropped at this point, and we have to maintain provenance,\n+            // so use raw pointer manipulation.\n+            unsafe { &raw const (*ptr).value }\n         }\n     }\n \n@@ -1992,22 +1979,24 @@ impl<T> Weak<T> {\n     /// [`new`]: Weak::new\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n-        // SAFETY: data_offset is safe to call, because this pointer originates from a Weak.\n         // See Weak::as_ptr for context on how the input pointer is derived.\n-        let offset = unsafe { data_offset(ptr) };\n \n-        // Reverse the offset to find the original RcBox.\n-        // SAFETY: we use wrapping_offset here because the pointer may be dangling (but only if T: Sized).\n-        let ptr = unsafe {\n-            set_data_ptr(ptr as *mut RcBox<T>, (ptr as *mut u8).wrapping_offset(-offset))\n+        let ptr = if is_dangling(ptr as *mut T) {\n+            // This is a dangling Weak.\n+            ptr as *mut RcBox<T>\n+        } else {\n+            // Otherwise, we're guaranteed the pointer came from a nondangling Weak.\n+            // SAFETY: data_offset is safe to call, as ptr references a real (potentially dropped) T.\n+            let offset = unsafe { data_offset(ptr) };\n+            // Thus, we reverse the offset to get the whole RcBox.\n+            // SAFETY: the pointer originated from a Weak, so this offset is safe.\n+            unsafe { (ptr as *mut RcBox<T>).set_ptr_value((ptr as *mut u8).offset(-offset)) }\n         };\n \n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n         Weak { ptr: unsafe { NonNull::new_unchecked(ptr) } }\n     }\n-}\n \n-impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\n     /// dropping of the inner value if successful.\n     ///\n@@ -2070,7 +2059,7 @@ impl<T: ?Sized> Weak<T> {\n     /// (i.e., when this `Weak` was created by `Weak::new`).\n     #[inline]\n     fn inner(&self) -> Option<WeakInner<'_>> {\n-        if is_dangling(self.ptr) {\n+        if is_dangling(self.ptr.as_ptr()) {\n             None\n         } else {\n             // We are careful to *not* create a reference covering the \"data\" field, as\n@@ -2325,21 +2314,19 @@ impl<T: ?Sized> AsRef<T> for Rc<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Rc<T> {}\n \n-/// Get the offset within an `RcBox` for\n-/// a payload of type described by a pointer.\n+/// Get the offset within an `RcBox` for the payload behind a pointer.\n ///\n /// # Safety\n ///\n-/// This has the same safety requirements as `align_of_val_raw`. In effect:\n-///\n-/// - This function is safe for any argument if `T` is sized, and\n-/// - if `T` is unsized, the pointer must have appropriate pointer metadata\n-///   acquired from the real instance that you are getting this offset for.\n+/// The pointer must point to (and have valid metadata for) a previously\n+/// valid instance of T, but the T is allowed to be dropped.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n-    // Align the unsized value to the end of the `RcBox`.\n-    // Because it is ?Sized, it will always be the last field in memory.\n-    // Note: This is a detail of the current implementation of the compiler,\n-    // and is not a guaranteed language detail. Do not rely on it outside of std.\n+    // Align the unsized value to the end of the RcBox.\n+    // Because RcBox is repr(C), it will always be the last field in memory.\n+    // SAFETY: since the only unsized types possible are slices, trait objects,\n+    // and extern types, the input safety requirement is currently enough to\n+    // satisfy the requirements of align_of_val_raw; this is an implementation\n+    // detail of the language that may not be relied upon outside of std.\n     unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n "}, {"sha": "843a9b07fa93448ef99c84197b25718d82a95db2", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=5702cfa2551a56172a4e392aab4b494562242f35", "patch": "@@ -208,6 +208,30 @@ fn into_from_weak_raw() {\n     }\n }\n \n+#[test]\n+fn test_into_from_weak_raw_unsized() {\n+    use std::fmt::Display;\n+    use std::string::ToString;\n+\n+    let arc: Rc<str> = Rc::from(\"foo\");\n+    let weak: Weak<str> = Rc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }, \"foo\");\n+    assert!(weak.ptr_eq(&weak2));\n+\n+    let arc: Rc<dyn Display> = Rc::new(123);\n+    let weak: Weak<dyn Display> = Rc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+    assert!(weak.ptr_eq(&weak2));\n+}\n+\n #[test]\n fn get_mut() {\n     let mut x = Rc::new(3);\n@@ -294,6 +318,23 @@ fn test_unsized() {\n     assert_eq!(foo, foo.clone());\n }\n \n+#[test]\n+fn test_maybe_thin_unsized() {\n+    // If/when custom thin DSTs exist, this test should be updated to use one\n+    use std::ffi::{CStr, CString};\n+\n+    let x: Rc<CStr> = Rc::from(CString::new(\"swordfish\").unwrap().into_boxed_c_str());\n+    assert_eq!(format!(\"{:?}\", x), \"\\\"swordfish\\\"\");\n+    let y: Weak<CStr> = Rc::downgrade(&x);\n+    drop(x);\n+\n+    // At this point, the weak points to a dropped DST\n+    assert!(y.upgrade().is_none());\n+    // But we still need to be able to get the alloc layout to drop.\n+    // CStr has no drop glue, but custom DSTs might, and need to work.\n+    drop(y);\n+}\n+\n #[test]\n fn test_from_owned() {\n     let foo = 123;"}, {"sha": "c0d684fbb45730a0e307f944e48f7a0999c83e45", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=5702cfa2551a56172a4e392aab4b494562242f35", "patch": "@@ -846,8 +846,7 @@ impl<T: ?Sized> Arc<T> {\n             let offset = data_offset(ptr);\n \n             // Reverse the offset to find the original ArcInner.\n-            let fake_ptr = ptr as *mut ArcInner<T>;\n-            let arc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n+            let arc_ptr = (ptr as *mut ArcInner<T>).set_ptr_value((ptr as *mut u8).offset(-offset));\n \n             Self::from_ptr(arc_ptr)\n         }\n@@ -888,7 +887,7 @@ impl<T: ?Sized> Arc<T> {\n             match this.inner().weak.compare_exchange_weak(cur, cur + 1, Acquire, Relaxed) {\n                 Ok(_) => {\n                     // Make sure we do not create a dangling Weak\n-                    debug_assert!(!is_dangling(this.ptr));\n+                    debug_assert!(!is_dangling(this.ptr.as_ptr()));\n                     return Weak { ptr: this.ptr };\n                 }\n                 Err(old) => cur = old,\n@@ -1131,7 +1130,7 @@ impl<T: ?Sized> Arc<T> {\n             Self::allocate_for_layout(\n                 Layout::for_value(&*ptr),\n                 |layout| Global.allocate(layout),\n-                |mem| set_data_ptr(ptr as *mut T, mem) as *mut ArcInner<T>,\n+                |mem| (ptr as *mut ArcInner<T>).set_ptr_value(mem) as *mut ArcInner<T>,\n             )\n         }\n     }\n@@ -1170,20 +1169,7 @@ impl<T> Arc<[T]> {\n             )\n         }\n     }\n-}\n-\n-/// Sets the data pointer of a `?Sized` raw pointer.\n-///\n-/// For a slice/trait object, this sets the `data` field and leaves the rest\n-/// unchanged. For a sized raw pointer, this simply sets the pointer.\n-unsafe fn set_data_ptr<T: ?Sized, U>(mut ptr: *mut T, data: *mut U) -> *mut T {\n-    unsafe {\n-        ptr::write(&mut ptr as *mut _ as *mut *mut u8, data as *mut u8);\n-    }\n-    ptr\n-}\n \n-impl<T> Arc<[T]> {\n     /// Copy elements from slice into newly allocated Arc<\\[T\\]>\n     ///\n     /// Unsafe because the caller must either take ownership or bind `T: Copy`.\n@@ -1653,7 +1639,7 @@ struct WeakInner<'a> {\n     strong: &'a atomic::AtomicUsize,\n }\n \n-impl<T> Weak<T> {\n+impl<T: ?Sized> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1683,15 +1669,15 @@ impl<T> Weak<T> {\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);\n \n-        // SAFETY: we must offset the pointer manually, and said pointer may be\n-        // a dangling weak (usize::MAX) if T is sized. data_offset is safe to call,\n-        // because we know that a pointer to unsized T was derived from a real\n-        // unsized T, as dangling weaks are only created for sized T. wrapping_offset\n-        // is used so that we can use the same code path for the non-dangling\n-        // unsized case and the potentially dangling sized case.\n-        unsafe {\n-            let offset = data_offset(ptr as *mut T);\n-            set_data_ptr(ptr as *mut T, (ptr as *mut u8).wrapping_offset(offset))\n+        if is_dangling(ptr) {\n+            // If the pointer is dangling, we return the sentinel directly. This cannot be\n+            // a valid payload address, as the payload is at least as aligned as ArcInner (usize).\n+            ptr as *const T\n+        } else {\n+            // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n+            // The payload may be dropped at this point, and we have to maintain provenance,\n+            // so use raw pointer manipulation.\n+            unsafe { &raw mut (*ptr).data }\n         }\n     }\n \n@@ -1773,18 +1759,22 @@ impl<T> Weak<T> {\n     /// [`forget`]: std::mem::forget\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n-        // SAFETY: data_offset is safe to call, because this pointer originates from a Weak.\n         // See Weak::as_ptr for context on how the input pointer is derived.\n-        let offset = unsafe { data_offset(ptr) };\n \n-        // Reverse the offset to find the original ArcInner.\n-        // SAFETY: we use wrapping_offset here because the pointer may be dangling (but only if T: Sized)\n-        let ptr = unsafe {\n-            set_data_ptr(ptr as *mut ArcInner<T>, (ptr as *mut u8).wrapping_offset(-offset))\n+        let ptr = if is_dangling(ptr as *mut T) {\n+            // This is a dangling Weak.\n+            ptr as *mut ArcInner<T>\n+        } else {\n+            // Otherwise, we're guaranteed the pointer came from a nondangling Weak.\n+            // SAFETY: data_offset is safe to call, as ptr references a real (potentially dropped) T.\n+            let offset = unsafe { data_offset(ptr) };\n+            // Thus, we reverse the offset to get the whole RcBox.\n+            // SAFETY: the pointer originated from a Weak, so this offset is safe.\n+            unsafe { (ptr as *mut ArcInner<T>).set_ptr_value((ptr as *mut u8).offset(-offset)) }\n         };\n \n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n-        unsafe { Weak { ptr: NonNull::new_unchecked(ptr) } }\n+        Weak { ptr: unsafe { NonNull::new_unchecked(ptr) } }\n     }\n }\n \n@@ -1889,7 +1879,7 @@ impl<T: ?Sized> Weak<T> {\n     /// (i.e., when this `Weak` was created by `Weak::new`).\n     #[inline]\n     fn inner(&self) -> Option<WeakInner<'_>> {\n-        if is_dangling(self.ptr) {\n+        if is_dangling(self.ptr.as_ptr()) {\n             None\n         } else {\n             // We are careful to *not* create a reference covering the \"data\" field, as\n@@ -2469,21 +2459,19 @@ impl<T: ?Sized> AsRef<T> for Arc<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Arc<T> {}\n \n-/// Get the offset within an `ArcInner` for\n-/// a payload of type described by a pointer.\n+/// Get the offset within an `ArcInner` for the payload behind a pointer.\n ///\n /// # Safety\n ///\n-/// This has the same safety requirements as `align_of_val_raw`. In effect:\n-///\n-/// - This function is safe for any argument if `T` is sized, and\n-/// - if `T` is unsized, the pointer must have appropriate pointer metadata\n-///   acquired from the real instance that you are getting this offset for.\n+/// The pointer must point to (and have valid metadata for) a previously\n+/// valid instance of T, but the T is allowed to be dropped.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n-    // Align the unsized value to the end of the `ArcInner`.\n-    // Because it is `?Sized`, it will always be the last field in memory.\n-    // Note: This is a detail of the current implementation of the compiler,\n-    // and is not a guaranteed language detail. Do not rely on it outside of std.\n+    // Align the unsized value to the end of the ArcInner.\n+    // Because RcBox is repr(C), it will always be the last field in memory.\n+    // SAFETY: since the only unsized types possible are slices, trait objects,\n+    // and extern types, the input safety requirement is currently enough to\n+    // satisfy the requirements of align_of_val_raw; this is an implementation\n+    // detail of the language that may not be relied upon outside of std.\n     unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n "}, {"sha": "4ccb32fbbf63d3e5f131b304196834a36a29f2eb", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5702cfa2551a56172a4e392aab4b494562242f35/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=5702cfa2551a56172a4e392aab4b494562242f35", "patch": "@@ -158,6 +158,30 @@ fn into_from_weak_raw() {\n     }\n }\n \n+#[test]\n+fn test_into_from_weak_raw_unsized() {\n+    use std::fmt::Display;\n+    use std::string::ToString;\n+\n+    let arc: Arc<str> = Arc::from(\"foo\");\n+    let weak: Weak<str> = Arc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }, \"foo\");\n+    assert!(weak.ptr_eq(&weak2));\n+\n+    let arc: Arc<dyn Display> = Arc::new(123);\n+    let weak: Weak<dyn Display> = Arc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+    assert!(weak.ptr_eq(&weak2));\n+}\n+\n #[test]\n fn test_cowarc_clone_make_mut() {\n     let mut cow0 = Arc::new(75);\n@@ -329,6 +353,23 @@ fn test_unsized() {\n     assert!(y.upgrade().is_none());\n }\n \n+#[test]\n+fn test_maybe_thin_unsized() {\n+    // If/when custom thin DSTs exist, this test should be updated to use one\n+    use std::ffi::{CStr, CString};\n+\n+    let x: Arc<CStr> = Arc::from(CString::new(\"swordfish\").unwrap().into_boxed_c_str());\n+    assert_eq!(format!(\"{:?}\", x), \"\\\"swordfish\\\"\");\n+    let y: Weak<CStr> = Arc::downgrade(&x);\n+    drop(x);\n+\n+    // At this point, the weak points to a dropped DST\n+    assert!(y.upgrade().is_none());\n+    // But we still need to be able to get the alloc layout to drop.\n+    // CStr has no drop glue, but custom DSTs might, and need to work.\n+    drop(y);\n+}\n+\n #[test]\n fn test_from_owned() {\n     let foo = 123;"}]}