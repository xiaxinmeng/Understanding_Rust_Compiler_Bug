{"sha": "f280a126b291bf7f6040db1214cdad5877811b6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODBhMTI2YjI5MWJmN2Y2MDQwZGIxMjE0Y2RhZDU4Nzc4MTFiNmQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-04T12:15:05Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-04T12:15:05Z"}, "message": "Re-use std::sealed::Sealed in os/linux/process.", "tree": {"sha": "12a70877e8d833be008b28798067a0d3af438b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12a70877e8d833be008b28798067a0d3af438b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f280a126b291bf7f6040db1214cdad5877811b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f280a126b291bf7f6040db1214cdad5877811b6d", "html_url": "https://github.com/rust-lang/rust/commit/f280a126b291bf7f6040db1214cdad5877811b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f280a126b291bf7f6040db1214cdad5877811b6d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08460e70cd77945ecfa6f4826c82ed4ba29fb76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08460e70cd77945ecfa6f4826c82ed4ba29fb76", "html_url": "https://github.com/rust-lang/rust/commit/d08460e70cd77945ecfa6f4826c82ed4ba29fb76"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "6daff0f003c8fb03cff4667e8f09868baadfcec3", "filename": "library/std/src/os/linux/process.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f280a126b291bf7f6040db1214cdad5877811b6d/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f280a126b291bf7f6040db1214cdad5877811b6d/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs?ref=f280a126b291bf7f6040db1214cdad5877811b6d", "patch": "@@ -5,6 +5,7 @@\n use crate::io::Result;\n use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::process;\n+use crate::sealed::Sealed;\n #[cfg(not(doc))]\n use crate::sys::fd::FileDesc;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n@@ -84,15 +85,10 @@ impl IntoRawFd for PidFd {\n     }\n }\n \n-mod private_child_ext {\n-    pub trait Sealed {}\n-    impl Sealed for crate::process::Child {}\n-}\n-\n /// Os-specific extensions for [`Child`]\n ///\n /// [`Child`]: process::Child\n-pub trait ChildExt: private_child_ext::Sealed {\n+pub trait ChildExt: Sealed {\n     /// Obtains a reference to the [`PidFd`] created for this [`Child`], if available.\n     ///\n     /// A pidfd will only be available if its creation was requested with\n@@ -120,15 +116,10 @@ pub trait ChildExt: private_child_ext::Sealed {\n     fn take_pidfd(&mut self) -> Result<PidFd>;\n }\n \n-mod private_command_ext {\n-    pub trait Sealed {}\n-    impl Sealed for crate::process::Command {}\n-}\n-\n /// Os-specific extensions for [`Command`]\n ///\n /// [`Command`]: process::Command\n-pub trait CommandExt: private_command_ext::Sealed {\n+pub trait CommandExt: Sealed {\n     /// Sets whether a [`PidFd`](struct@PidFd) should be created for the [`Child`]\n     /// spawned by this [`Command`].\n     /// By default, no pidfd will be created."}, {"sha": "d3e271df8d8ccc1835ccca4137413075e5561257", "filename": "library/std/src/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f280a126b291bf7f6040db1214cdad5877811b6d/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f280a126b291bf7f6040db1214cdad5877811b6d/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=f280a126b291bf7f6040db1214cdad5877811b6d", "patch": "@@ -205,6 +205,10 @@ pub struct Child {\n     pub stderr: Option<ChildStderr>,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for Child {}\n+\n impl AsInner<imp::Process> for Child {\n     fn as_inner(&self) -> &imp::Process {\n         &self.handle"}]}