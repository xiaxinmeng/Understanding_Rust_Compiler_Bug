{"sha": "803b37597edf4d4dee88124c24aca54cc9b7a475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwM2IzNzU5N2VkZjRkNGRlZTg4MTI0YzI0YWNhNTRjYzliN2E0NzU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-28T19:09:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-28T19:09:25Z"}, "message": "Rollup merge of #80402 - camelid:inferty-docs, r=matthewjasper\n\nDocument `InferTy` & co.\n\nI finally figured out what `TyVid` means! The name is quite opaque, so I\ndecided to document it and related types.\n\nI don't know that much about `InferTy` & co., but I was able to *infer*\n( :) ) from the names and what I know generally about type inference to\nadd some basic documentation.", "tree": {"sha": "f5b155ef20fecdd004723e0e61fbfc1b95cb3c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b155ef20fecdd004723e0e61fbfc1b95cb3c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/803b37597edf4d4dee88124c24aca54cc9b7a475", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6i1mCRBK7hj4Ov3rIwAAdHIIACOxU26fQ1684GFV3Cm3URjD\nDegriTAsKsbOBg1nGqUTlQVisgHLyCOEeqjsgMR5qgcFKiHZEa0D8pFTzR3AVo/e\nlbXfQat0AnA9oc44XHMpiW/GxkbWKec9yH7kQ/fVIfweBXvLt/BEIOxrXW5WQVLz\n+totD7KNTs5AdGST/oCLNF4adOuzMg1MsA2EyxucfYF5I/lvEfzTQVlIAZ6Flhvf\ny8TWFM1j3GxDmSGUsOemP1wI5vRB5aRXN41jyDdIEs5bLKhi1xT048gPvc+G6GWd\nAH7kg5AzB1yDpADENPTUjDydWJQVZq1THUtH68g2IS4bXp4y+g44v3NCVg/IfcY=\n=2mLt\n-----END PGP SIGNATURE-----\n", "payload": "tree f5b155ef20fecdd004723e0e61fbfc1b95cb3c69\nparent 7003537df681fe150b4bfaa8cd02011ac1614370\nparent cdad0c80ef93dc64dd9ab8ec2410ec08f60b4120\nauthor Mara Bos <m-ou.se@m-ou.se> 1609182565 +0000\ncommitter GitHub <noreply@github.com> 1609182565 +0000\n\nRollup merge of #80402 - camelid:inferty-docs, r=matthewjasper\n\nDocument `InferTy` & co.\n\nI finally figured out what `TyVid` means! The name is quite opaque, so I\ndecided to document it and related types.\n\nI don't know that much about `InferTy` & co., but I was able to *infer*\n( :) ) from the names and what I know generally about type inference to\nadd some basic documentation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/803b37597edf4d4dee88124c24aca54cc9b7a475", "html_url": "https://github.com/rust-lang/rust/commit/803b37597edf4d4dee88124c24aca54cc9b7a475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/803b37597edf4d4dee88124c24aca54cc9b7a475/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7003537df681fe150b4bfaa8cd02011ac1614370", "url": "https://api.github.com/repos/rust-lang/rust/commits/7003537df681fe150b4bfaa8cd02011ac1614370", "html_url": "https://github.com/rust-lang/rust/commit/7003537df681fe150b4bfaa8cd02011ac1614370"}, {"sha": "cdad0c80ef93dc64dd9ab8ec2410ec08f60b4120", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdad0c80ef93dc64dd9ab8ec2410ec08f60b4120", "html_url": "https://github.com/rust-lang/rust/commit/cdad0c80ef93dc64dd9ab8ec2410ec08f60b4120"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "744c7a541a53c58e2abcb802be2bc1012aea351f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/803b37597edf4d4dee88124c24aca54cc9b7a475/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803b37597edf4d4dee88124c24aca54cc9b7a475/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=803b37597edf4d4dee88124c24aca54cc9b7a475", "patch": "@@ -1424,28 +1424,33 @@ pub struct EarlyBoundRegion {\n     pub name: Symbol,\n }\n \n+/// A **ty**pe **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct TyVid {\n     pub index: u32,\n }\n \n+/// A **`const`** **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct ConstVid<'tcx> {\n     pub index: u32,\n     pub phantom: PhantomData<&'tcx ()>,\n }\n \n+/// An **int**egral (`u32`, `i32`, `usize`, etc.) type **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct IntVid {\n     pub index: u32,\n }\n \n+/// An **float**ing-point (`f32` or `f64`) type **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct FloatVid {\n     pub index: u32,\n }\n \n rustc_index::newtype_index! {\n+    /// A **region** (lifetime) **v**ariable **ID**.\n     pub struct RegionVid {\n         DEBUG_FORMAT = custom,\n     }\n@@ -1457,18 +1462,40 @@ impl Atom for RegionVid {\n     }\n }\n \n+/// A placeholder for a type that hasn't been inferred yet.\n+///\n+/// E.g., if we have an empty array (`[]`), then we create a fresh\n+/// type variable for the element type since we won't know until it's\n+/// used what the element type is supposed to be.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum InferTy {\n+    /// A type variable.\n     TyVar(TyVid),\n+    /// An integral type variable (`{integer}`).\n+    ///\n+    /// These are created when the compiler sees an integer literal like\n+    /// `1` that could be several different types (`u8`, `i32`, `u32`, etc.).\n+    /// We don't know until it's used what type it's supposed to be, so\n+    /// we create a fresh type variable.\n     IntVar(IntVid),\n+    /// A floating-point type variable (`{float}`).\n+    ///\n+    /// These are created when the compiler sees an float literal like\n+    /// `1.0` that could be either an `f32` or an `f64`.\n+    /// We don't know until it's used what type it's supposed to be, so\n+    /// we create a fresh type variable.\n     FloatVar(FloatVid),\n \n-    /// A `FreshTy` is one that is generated as a replacement for an\n-    /// unbound type variable. This is convenient for caching etc. See\n-    /// `infer::freshen` for more details.\n+    /// A [`FreshTy`][Self::FreshTy] is one that is generated as a replacement\n+    /// for an unbound type variable. This is convenient for caching etc. See\n+    /// `rustc_infer::infer::freshen` for more details.\n+    ///\n+    /// Compare with [`TyVar`][Self::TyVar].\n     FreshTy(u32),\n+    /// Like [`FreshTy`][Self::FreshTy], but as a replacement for [`IntVar`][Self::IntVar].\n     FreshIntTy(u32),\n+    /// Like [`FreshTy`][Self::FreshTy], but as a replacement for [`FloatVar`][Self::FloatVar].\n     FreshFloatTy(u32),\n }\n "}]}