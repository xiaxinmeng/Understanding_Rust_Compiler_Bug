{"sha": "69f11fff33f68701d222639a1a5ae991605ec3ab", "node_id": "C_kwDOAAsO6NoAKDY5ZjExZmZmMzNmNjg3MDFkMjIyNjM5YTFhNWFlOTkxNjA1ZWMzYWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-05T00:15:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-05T00:15:54Z"}, "message": "Auto merge of #94628 - Dylan-DPC:rollup-v2slupe, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #94362 (Add well known values to `--check-cfg` implementation)\n - #94577 (only disable SIMD for doctests in Miri (not for the stdlib build itself))\n - #94595 (Fix invalid `unresolved imports` errors for a single-segment import)\n - #94596 (Delay bug in expr adjustment when check_expr is called multiple times)\n - #94618 (Don't round stack size up for created threads in Windows)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9f90e94bc681e3abcc718d25a7d0f09b15ad8b12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f90e94bc681e3abcc718d25a7d0f09b15ad8b12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f11fff33f68701d222639a1a5ae991605ec3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f11fff33f68701d222639a1a5ae991605ec3ab", "html_url": "https://github.com/rust-lang/rust/commit/69f11fff33f68701d222639a1a5ae991605ec3ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f11fff33f68701d222639a1a5ae991605ec3ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f", "html_url": "https://github.com/rust-lang/rust/commit/5a7e4c6b5aa8f42bd56365fecf93cd1b6bf1d22f"}, {"sha": "629e7aa71803ea3300559e65a4abc17dba984837", "url": "https://api.github.com/repos/rust-lang/rust/commits/629e7aa71803ea3300559e65a4abc17dba984837", "html_url": "https://github.com/rust-lang/rust/commit/629e7aa71803ea3300559e65a4abc17dba984837"}], "stats": {"total": 330, "additions": 296, "deletions": 34}, "files": [{"sha": "e7563933c88ac97a19480dab3aca8b9b875f4624", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -207,6 +207,9 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                                             \"`values()` first argument must be a simple identifer\"\n                                         );\n                                     }\n+                                } else if args.is_empty() {\n+                                    cfg.well_known_values = true;\n+                                    continue 'specs;\n                                 }\n                             }\n                         }"}, {"sha": "70ade7a5600ba9dffbf9cf7f41b9e24b6d27c019", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -720,7 +720,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     note: Vec::new(),\n                     suggestion: None,\n                 };\n-                errors.push((path, err));\n+                if path.contains(\"::\") {\n+                    errors.push((path, err))\n+                }\n             }\n         }\n "}, {"sha": "5f8aec80bccc7a46d5c09dbffa84d93b0798dd85", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 110, "deletions": 6, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n+use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n \n use rustc_serialize::json;\n \n@@ -1025,13 +1026,19 @@ pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig\n pub struct CheckCfg<T = String> {\n     /// The set of all `names()`, if None no name checking is performed\n     pub names_valid: Option<FxHashSet<T>>,\n+    /// Is well known values activated\n+    pub well_known_values: bool,\n     /// The set of all `values()`\n     pub values_valid: FxHashMap<T, FxHashSet<T>>,\n }\n \n impl<T> Default for CheckCfg<T> {\n     fn default() -> Self {\n-        CheckCfg { names_valid: Default::default(), values_valid: Default::default() }\n+        CheckCfg {\n+            names_valid: Default::default(),\n+            values_valid: Default::default(),\n+            well_known_values: false,\n+        }\n     }\n }\n \n@@ -1047,6 +1054,7 @@ impl<T> CheckCfg<T> {\n                 .iter()\n                 .map(|(a, b)| (f(a), b.iter().map(|b| f(b)).collect()))\n                 .collect(),\n+            well_known_values: self.well_known_values,\n         }\n     }\n }\n@@ -1060,8 +1068,9 @@ pub fn to_crate_check_config(cfg: CheckCfg) -> CrateCheckConfig {\n \n impl CrateCheckConfig {\n     /// Fills a `CrateCheckConfig` with well-known configuration names.\n-    pub fn fill_well_known(&mut self) {\n-        // NOTE: This should be kept in sync with `default_configuration`\n+    fn fill_well_known_names(&mut self) {\n+        // NOTE: This should be kept in sync with `default_configuration` and\n+        // `fill_well_known_values`\n         const WELL_KNOWN_NAMES: &[Symbol] = &[\n             sym::unix,\n             sym::windows,\n@@ -1086,11 +1095,106 @@ impl CrateCheckConfig {\n             sym::doctest,\n             sym::feature,\n         ];\n+\n+        // We only insert well-known names if `names()` was activated\n         if let Some(names_valid) = &mut self.names_valid {\n-            for &name in WELL_KNOWN_NAMES {\n-                names_valid.insert(name);\n-            }\n+            names_valid.extend(WELL_KNOWN_NAMES);\n+        }\n+    }\n+\n+    /// Fills a `CrateCheckConfig` with well-known configuration values.\n+    fn fill_well_known_values(&mut self) {\n+        if !self.well_known_values {\n+            return;\n         }\n+\n+        // NOTE: This should be kept in sync with `default_configuration` and\n+        // `fill_well_known_names`\n+\n+        let panic_values = &PanicStrategy::all();\n+\n+        let atomic_values = &[\n+            sym::ptr,\n+            sym::integer(8usize),\n+            sym::integer(16usize),\n+            sym::integer(32usize),\n+            sym::integer(64usize),\n+            sym::integer(128usize),\n+        ];\n+\n+        let sanitize_values = SanitizerSet::all()\n+            .into_iter()\n+            .map(|sanitizer| Symbol::intern(sanitizer.as_str().unwrap()));\n+\n+        // No-values\n+        for name in [\n+            sym::unix,\n+            sym::windows,\n+            sym::debug_assertions,\n+            sym::proc_macro,\n+            sym::test,\n+            sym::doc,\n+            sym::doctest,\n+            sym::target_thread_local,\n+        ] {\n+            self.values_valid.entry(name).or_default();\n+        }\n+\n+        // Pre-defined values\n+        self.values_valid.entry(sym::panic).or_default().extend(panic_values);\n+        self.values_valid.entry(sym::sanitize).or_default().extend(sanitize_values);\n+        self.values_valid.entry(sym::target_has_atomic).or_default().extend(atomic_values);\n+        self.values_valid\n+            .entry(sym::target_has_atomic_load_store)\n+            .or_default()\n+            .extend(atomic_values);\n+        self.values_valid\n+            .entry(sym::target_has_atomic_equal_alignment)\n+            .or_default()\n+            .extend(atomic_values);\n+\n+        // Target specific values\n+        for target in\n+            TARGETS.iter().map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n+        {\n+            self.values_valid\n+                .entry(sym::target_os)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.os));\n+            self.values_valid\n+                .entry(sym::target_family)\n+                .or_default()\n+                .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n+            self.values_valid\n+                .entry(sym::target_arch)\n+                .or_default()\n+                .insert(Symbol::intern(&target.arch));\n+            self.values_valid\n+                .entry(sym::target_endian)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.endian.as_str()));\n+            self.values_valid\n+                .entry(sym::target_env)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.env));\n+            self.values_valid\n+                .entry(sym::target_abi)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.abi));\n+            self.values_valid\n+                .entry(sym::target_vendor)\n+                .or_default()\n+                .insert(Symbol::intern(&target.options.vendor));\n+            self.values_valid\n+                .entry(sym::target_pointer_width)\n+                .or_default()\n+                .insert(sym::integer(target.pointer_width));\n+        }\n+    }\n+\n+    pub fn fill_well_known(&mut self) {\n+        self.fill_well_known_names();\n+        self.fill_well_known_values();\n     }\n \n     /// Fills a `CrateCheckConfig` with configuration names and values that are actually active."}, {"sha": "3f44292e03425ad301d7806ef215ceea12088ef0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -1063,6 +1063,7 @@ symbols! {\n         proc_macro_path_invoc,\n         profiler_builtins,\n         profiler_runtime,\n+        ptr,\n         ptr_guaranteed_eq,\n         ptr_guaranteed_ne,\n         ptr_null,"}, {"sha": "ca5f2b4af8a97a0860d438bcec65a3af1b400932", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -186,12 +186,16 @@ impl PanicStrategy {\n         }\n     }\n \n-    pub fn desc_symbol(&self) -> Symbol {\n+    pub const fn desc_symbol(&self) -> Symbol {\n         match *self {\n             PanicStrategy::Unwind => sym::unwind,\n             PanicStrategy::Abort => sym::abort,\n         }\n     }\n+\n+    pub const fn all() -> [Symbol; 2] {\n+        [Self::Abort.desc_symbol(), Self::Unwind.desc_symbol()]\n+    }\n }\n \n impl ToJson for PanicStrategy {\n@@ -614,7 +618,7 @@ impl SanitizerSet {\n     /// Return sanitizer's name\n     ///\n     /// Returns none if the flags is a set of sanitizers numbering not exactly one.\n-    fn as_str(self) -> Option<&'static str> {\n+    pub fn as_str(self) -> Option<&'static str> {\n         Some(match self {\n             SanitizerSet::ADDRESS => \"address\",\n             SanitizerSet::CFI => \"cfi\",\n@@ -2137,6 +2141,18 @@ impl Target {\n         ))\n     }\n \n+    /// Load a built-in target\n+    pub fn expect_builtin(target_triple: &TargetTriple) -> Target {\n+        match *target_triple {\n+            TargetTriple::TargetTriple(ref target_triple) => {\n+                load_builtin(target_triple).expect(\"built-in target\")\n+            }\n+            TargetTriple::TargetPath(..) => {\n+                panic!(\"built-in targets doens't support target-paths\")\n+            }\n+        }\n+    }\n+\n     /// Search for a JSON file specifying the given target triple.\n     ///\n     /// If none is found in `$RUST_TARGET_PATH`, look for a file called `target.json` inside the"}, {"sha": "e46eccd61b14c40d4b009e7a86c851448bb9093e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -315,11 +315,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n-                    _ => bug!(\n-                        \"while adjusting {:?}, can't compose {:?} and {:?}\",\n-                        expr,\n-                        entry.get(),\n-                        adj\n+                    _ => self.tcx.sess.delay_span_bug(\n+                        expr.span,\n+                        &format!(\n+                            \"while adjusting {:?}, can't compose {:?} and {:?}\",\n+                            expr,\n+                            entry.get(),\n+                            adj\n+                        ),\n                     ),\n                 };\n                 *entry.get_mut() = adj;"}, {"sha": "3f6247facd1a2b2d13e3d3d0468eb13b9430ce27", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -234,11 +234,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is more complicated than just checking type equality, as arguments could be coerced\n         // This version writes those types back so further type checking uses the narrowed types\n         let demand_compatible = |idx, final_arg_types: &mut Vec<Option<(Ty<'tcx>, Ty<'tcx>)>>| {\n-            // Do not check argument compatibility if the number of args do not match\n-            if arg_count_error.is_some() {\n-                return;\n-            }\n-\n             let formal_input_ty: Ty<'tcx> = formal_input_tys[idx];\n             let expected_input_ty: Ty<'tcx> = expected_input_tys[idx];\n             let provided_arg = &provided_args[idx];"}, {"sha": "45fbcf44b350cbe5a40acedcc53d0546b731c438", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -408,12 +408,12 @@ pub mod arch {\n #[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n #[allow(rustdoc::bare_urls)]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+#[cfg(not(all(miri, doctest)))] // Skip SIMD doctests in Miri\n mod core_simd;\n \n #[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+#[cfg(not(all(miri, doctest)))] // Skip SIMD doctests in Miri\n pub mod simd {\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n     pub use crate::core_simd::simd::*;"}, {"sha": "9467c7f54bac7d56d5062017675b0ef520da4d27", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -16,7 +16,7 @@ use crate::option::Option::{None, Some};\n use crate::ptr;\n use crate::result::Result;\n use crate::result::Result::{Err, Ok};\n-#[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n+#[cfg(not(all(miri, doctest)))] // Miri skips SIMD doctests\n use crate::simd::{self, Simd};\n use crate::slice;\n \n@@ -3540,7 +3540,7 @@ impl<T> [T] {\n     /// assert_eq!(basic_simd_sum(&numbers[1..99]), 4949.0);\n     /// ```\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n+    #[cfg(not(all(miri, doctest)))] // Miri skips SIMD doctests\n     pub fn as_simd<const LANES: usize>(&self) -> (&[T], &[Simd<T, LANES>], &[T])\n     where\n         Simd<T, LANES>: AsRef<[T; LANES]>,\n@@ -3584,7 +3584,7 @@ impl<T> [T] {\n     /// be lifted in a way that would make it possible to see panics from this\n     /// method for something like `LANES == 3`.\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n+    #[cfg(not(all(miri, doctest)))] // Miri skips SIMD doctests\n     pub fn as_simd_mut<const LANES: usize>(&mut self) -> (&mut [T], &mut [Simd<T, LANES>], &mut [T])\n     where\n         Simd<T, LANES>: AsMut<[T; LANES]>,"}, {"sha": "5b516a72360aa008d2ff233d70e87f11f84f2eda", "filename": "library/core/tests/simd.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Ftests%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Ftests%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fsimd.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))] // Miri does not support all SIMD intrinsics\n-\n use core::simd::f32x4;\n \n #[test]"}, {"sha": "7c4d2f266f958753839fedb347b1696a2c496438", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -2457,9 +2457,11 @@ take_tests! {\n     (take_last_mut_empty, (), None, &mut []),\n }\n \n+#[cfg(not(miri))] // unused in Miri\n const EMPTY_MAX: &'static [()] = &[(); usize::MAX];\n \n // can't be a constant due to const mutability rules\n+#[cfg(not(miri))] // unused in Miri\n macro_rules! empty_max_mut {\n     () => {\n         &mut [(); usize::MAX] as _"}, {"sha": "2f469513eb4fd63ac50c2b9f022ea1eab90ec30e", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -30,12 +30,9 @@ impl Thread {\n         // PTHREAD_STACK_MIN bytes big.  Windows has no such lower limit, it's\n         // just that below a certain threshold you can't do anything useful.\n         // That threshold is application and architecture-specific, however.\n-        // Round up to the next 64 kB because that's what the NT kernel does,\n-        // might as well make it explicit.\n-        let stack_size = (stack + 0xfffe) & (!0xfffe);\n         let ret = c::CreateThread(\n             ptr::null_mut(),\n-            stack_size,\n+            stack,\n             thread_start,\n             p as *mut _,\n             c::STACK_SIZE_PARAM_IS_A_RESERVATION,"}, {"sha": "9bda42e5d15fe703fe68d26872b51d8f1e624ce2", "filename": "src/test/ui/check-cfg/empty-values.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -1,6 +1,10 @@\n-// Check that a an empty values() is rejected\n+// Check warning for unexpected cfg value\n //\n-// check-fail\n+// check-pass\n // compile-flags: --check-cfg=values() -Z unstable-options\n \n+#[cfg(test = \"value\")]\n+//~^ WARNING unexpected `cfg` condition value\n+pub fn f() {}\n+\n fn main() {}"}, {"sha": "834b28f1244cbc221ad523f6d381f6b7959ee1ec", "filename": "src/test/ui/check-cfg/empty-values.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -1,2 +1,11 @@\n-error: invalid `--check-cfg` argument: `values()` (expected `names(name1, name2, ... nameN)` or `values(name, \"value1\", \"value2\", ... \"valueN\")`)\n+warning: unexpected `cfg` condition value\n+  --> $DIR/empty-values.rs:6:7\n+   |\n+LL | #[cfg(test = \"value\")]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: no expected value for `test`\n+\n+warning: 1 warning emitted\n "}, {"sha": "46004be43d812291fe0215e38ed99730e33cfc10", "filename": "src/test/ui/check-cfg/well-known-values.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,28 @@\n+// This test check that we lint on non well known values and that we don't lint on well known\n+// values\n+//\n+// check-pass\n+// compile-flags: --check-cfg=values() -Z unstable-options\n+\n+#[cfg(target_os = \"linuz\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn target_os_linux_misspell() {}\n+\n+#[cfg(target_os = \"linux\")]\n+fn target_os_linux() {}\n+\n+#[cfg(target_has_atomic = \"0\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn target_has_atomic_invalid() {}\n+\n+#[cfg(target_has_atomic = \"8\")]\n+fn target_has_atomic() {}\n+\n+#[cfg(unix = \"aa\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn unix_with_value() {}\n+\n+#[cfg(unix)]\n+fn unix() {}\n+\n+fn main() {}"}, {"sha": "05b2a8af0eec0fca46f92e14a53b612ec0439f49", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,31 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/well-known-values.rs:7:7\n+   |\n+LL | #[cfg(target_os = \"linuz\")]\n+   |       ^^^^^^^^^^^^-------\n+   |                   |\n+   |                   help: did you mean: `\"linux\"`\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, windows\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/well-known-values.rs:14:7\n+   |\n+LL | #[cfg(target_has_atomic = \"0\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           help: did you mean: `\"8\"`\n+   |\n+   = note: expected values for `target_has_atomic` are: 128, 16, 32, 64, 8, ptr\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/well-known-values.rs:21:7\n+   |\n+LL | #[cfg(unix = \"aa\")]\n+   |       ^^^^^^^^^^^\n+   |\n+   = note: no expected value for `unix`\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "d62625faaaa083b1bf6a907ecfb645c72768c263", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -30,4 +30,5 @@ fn main() {\n     //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~| ERROR mismatched types\n }"}, {"sha": "9ae9c474162d94c4c221b4b312260253a781af40", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -18,6 +18,12 @@ note: associated function defined here\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n \n+error[E0308]: mismatched types\n+  --> $DIR/overloaded-calls-bad.rs:31:17\n+   |\n+LL |     let ans = s(\"burma\", \"shave\");\n+   |                 ^^^^^^^ expected `isize`, found `&str`\n+\n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:31:15\n    |\n@@ -32,7 +38,7 @@ note: associated function defined here\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0057, E0308.\n For more information about an error, try `rustc --explain E0057`."}, {"sha": "ad1064570c77b2bfec319cc4261ea694d392bd8a", "filename": "src/test/ui/rust-2018/unresolved-asterisk-imports.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Frust-2018%2Funresolved-asterisk-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Frust-2018%2Funresolved-asterisk-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funresolved-asterisk-imports.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,6 @@\n+// edition:2018\n+\n+use not_existing_crate::*; //~ ERROR unresolved import `not_existing_crate\n+use std as foo;\n+\n+fn main() {}"}, {"sha": "09e9edc638d1d3e6207fae19836ae2780d1fcc2b", "filename": "src/test/ui/rust-2018/unresolved-asterisk-imports.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Frust-2018%2Funresolved-asterisk-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Frust-2018%2Funresolved-asterisk-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funresolved-asterisk-imports.stderr?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,9 @@\n+error[E0432]: unresolved import `not_existing_crate`\n+  --> $DIR/unresolved-asterisk-imports.rs:3:5\n+   |\n+LL | use not_existing_crate::*;\n+   |     ^^^^^^^^^^^^^^^^^^ use of undeclared crate or module `not_existing_crate`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "951687c37596ac77578f1aa5c24eb21a91b51d3c", "filename": "src/test/ui/tuple/wrong_argument_ice-3.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,17 @@\n+struct Process;\n+\n+pub type Group = (Vec<String>, Vec<Process>);\n+\n+fn test(process: &Process, groups: Vec<Group>) -> Vec<Group> {\n+    let new_group = vec![String::new()];\n+\n+    if groups.capacity() == 0 {\n+        groups.push(new_group, vec![process]);\n+        //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+        return groups;\n+    }\n+\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "f0d64d2a4e18db63f927ed26293637e408c4534e", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,17 @@\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/wrong_argument_ice-3.rs:9:16\n+   |\n+LL |         groups.push(new_group, vec![process]);\n+   |                ^^^^ ---------  ------------- supplied 2 arguments\n+   |                |\n+   |                expected 1 argument\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL |     pub fn push(&mut self, value: T) {\n+   |            ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "2d853a66c8d06039f917cbffb3d4f32d8cb8e244", "filename": "src/test/ui/unresolved/unresolved-asterisk-imports.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Funresolved%2Funresolved-asterisk-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Funresolved%2Funresolved-asterisk-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-asterisk-imports.rs?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,4 @@\n+use not_existing_crate::*; //~ ERROR unresolved import `not_existing_crate\n+use std as foo;\n+\n+fn main() {}"}, {"sha": "a789179db65bd68603e093834e3b7663700796a7", "filename": "src/test/ui/unresolved/unresolved-asterisk-imports.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Funresolved%2Funresolved-asterisk-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69f11fff33f68701d222639a1a5ae991605ec3ab/src%2Ftest%2Fui%2Funresolved%2Funresolved-asterisk-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-asterisk-imports.stderr?ref=69f11fff33f68701d222639a1a5ae991605ec3ab", "patch": "@@ -0,0 +1,9 @@\n+error[E0432]: unresolved import `not_existing_crate`\n+  --> $DIR/unresolved-asterisk-imports.rs:1:5\n+   |\n+LL | use not_existing_crate::*;\n+   |     ^^^^^^^^^^^^^^^^^^ maybe a missing crate `not_existing_crate`?\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}]}