{"sha": "e296ed321e37dc5ba21536a1f4b277b5536f6838", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOTZlZDMyMWUzN2RjNWJhMjE1MzZhMWY0YjI3N2I1NTM2ZjY4Mzg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-05-06T22:14:40Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-08-30T10:34:20Z"}, "message": "Move librustc panic handler into the new one", "tree": {"sha": "0bbbf5a16cda9d4d0edba7552548fe9e52bb27e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bbbf5a16cda9d4d0edba7552548fe9e52bb27e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e296ed321e37dc5ba21536a1f4b277b5536f6838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e296ed321e37dc5ba21536a1f4b277b5536f6838", "html_url": "https://github.com/rust-lang/rust/commit/e296ed321e37dc5ba21536a1f4b277b5536f6838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e296ed321e37dc5ba21536a1f4b277b5536f6838/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "html_url": "https://github.com/rust-lang/rust/commit/a8926a5e9c5becdf18acede5f7e114cd5f8655b6"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "4ab982f6f91f59d311c56b0255bc01e02262753b", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=e296ed321e37dc5ba21536a1f4b277b5536f6838", "patch": "@@ -15,7 +15,6 @@ bitflags = \"1.0\"\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n jobserver = \"0.1\"\n-lazy_static = \"1.0.0\"\n num_cpus = \"1.0\"\n scoped-tls = \"1.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }"}, {"sha": "c2befabcb69b38ea21e3f66b9020fe0b1692d817", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e296ed321e37dc5ba21536a1f4b277b5536f6838", "patch": "@@ -68,7 +68,6 @@\n \n #[macro_use] extern crate bitflags;\n extern crate getopts;\n-#[macro_use] extern crate lazy_static;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;"}, {"sha": "2475b93d95f32af84ee0ded0da2e2cc39f199347", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=e296ed321e37dc5ba21536a1f4b277b5536f6838", "patch": "@@ -5,17 +5,13 @@ use rustc_data_structures::{fx::FxHashMap, sync::Lock};\n use std::cell::{RefCell, Cell};\n use std::fmt::Debug;\n use std::hash::Hash;\n-use std::panic;\n-use std::env;\n use std::time::{Duration, Instant};\n \n use std::sync::mpsc::{Sender};\n use syntax_pos::{SpanData};\n use syntax::symbol::{Symbol, sym};\n use rustc_macros::HashStable;\n-use crate::ty::TyCtxt;\n use crate::dep_graph::{DepNode};\n-use lazy_static;\n use crate::session::Session;\n \n #[cfg(test)]\n@@ -31,39 +27,6 @@ pub struct ErrorReported;\n \n thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));\n \n-lazy_static! {\n-    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n-        let hook = panic::take_hook();\n-        panic::set_hook(Box::new(panic_hook));\n-        hook\n-    };\n-}\n-\n-fn panic_hook(info: &panic::PanicInfo<'_>) {\n-    (*DEFAULT_HOOK)(info);\n-\n-    let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n-\n-    if backtrace {\n-        TyCtxt::try_print_query_stack();\n-    }\n-\n-    #[cfg(windows)]\n-    unsafe {\n-        if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n-            extern \"system\" {\n-                fn DebugBreak();\n-            }\n-            // Trigger a debugger if we crashed during bootstrap.\n-            DebugBreak();\n-        }\n-    }\n-}\n-\n-pub fn install_panic_hook() {\n-    lazy_static::initialize(&DEFAULT_HOOK);\n-}\n-\n /// Parameters to the `Dump` variant of type `ProfileQueriesMsg`.\n #[derive(Clone,Debug)]\n pub struct ProfQDumpParams {"}, {"sha": "ece82233e995191c7456c1cbfa87dd8f549e8d5f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e296ed321e37dc5ba21536a1f4b277b5536f6838/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e296ed321e37dc5ba21536a1f4b277b5536f6838", "patch": "@@ -38,8 +38,8 @@ use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::util::common::{ErrorReported, install_panic_hook, print_time_passes_entry};\n-use rustc::util::common::{set_time_depth, time};\n+use rustc::ty::TyCtxt;\n+use rustc::util::common::{set_time_depth, time, print_time_passes_entry, ErrorReported};\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -164,8 +164,6 @@ pub fn run_compiler(\n         None => return Ok(()),\n     };\n \n-    install_panic_hook();\n-\n     let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n     let mut dummy_config = |sopts, cfg, diagnostic_output| {\n@@ -1169,9 +1167,10 @@ lazy_static! {\n }\n \n pub fn report_ice(info: &panic::PanicInfo<'_>) {\n+    // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n     (*DEFAULT_HOOK)(info);\n \n-    // Thread panicked without emitting a fatal diagnostic\n+    // Print the infamous ICE message\n     eprintln!();\n \n     let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n@@ -1212,6 +1211,24 @@ pub fn report_ice(info: &panic::PanicInfo<'_>) {\n                      note,\n                      errors::Level::Note);\n     }\n+\n+    // If backtraces are enabled, also print the query stack\n+    let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n+\n+    if backtrace {\n+        TyCtxt::try_print_query_stack();\n+    }\n+\n+    #[cfg(windows)]\n+    unsafe {\n+        if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n+            extern \"system\" {\n+                fn DebugBreak();\n+            }\n+            // Trigger a debugger if we crashed during bootstrap\n+            DebugBreak();\n+        }\n+    }\n }\n \n pub fn install_ice_hook() {"}]}