{"sha": "d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZTEyNGIwM2E5M2E2ZmEwYTcyYWI3OWQ3M2Y4M2Q5NmU5ZTBjMWU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-10T07:52:07Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-10T07:52:07Z"}, "message": "Fix up rewriting match arm pattern", "tree": {"sha": "3a29c930168f77e5656a83705ebecac65098ee69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a29c930168f77e5656a83705ebecac65098ee69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e", "html_url": "https://github.com/rust-lang/rust/commit/d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b681e06fddf1c12541ca0bf9704dcbd4f129408", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b681e06fddf1c12541ca0bf9704dcbd4f129408", "html_url": "https://github.com/rust-lang/rust/commit/8b681e06fddf1c12541ca0bf9704dcbd4f129408"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "9fc4df80cff95314464801df704d665184bea980", "filename": "src/expr.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d1e124b03a93a6fa0a72ab79d73f83d96e9e0c1e", "patch": "@@ -1701,19 +1701,14 @@ impl Rewrite for ast::Arm {\n         };\n         let pats_str = try_opt!(write_list(&items, &fmt));\n \n-        let guard_shape = if pats_str.contains('\\n') {\n-            shape.with_max_width(context.config)\n-        } else {\n-            shape\n-        };\n-\n         let guard_str = try_opt!(rewrite_guard(\n             context,\n             guard,\n-            guard_shape,\n+            shape,\n             trimmed_last_line_width(&pats_str),\n         ));\n \n+        let pats_len = pats_str.len();\n         let pats_str = format!(\"{}{}\", pats_str, guard_str);\n \n         let (mut extend, body) = match body.node {\n@@ -1766,6 +1761,9 @@ impl Rewrite for ast::Arm {\n                            is_block => {\n                     let block_sep = match context.config.control_brace_style() {\n                         ControlBraceStyle::AlwaysNextLine if is_block => alt_block_sep.as_str(),\n+                        _ if guard.is_some() && pats_str.contains('\\n') && is_block &&\n+                            body_str != \"{}\" &&\n+                            pats_len > context.config.tab_spaces() => alt_block_sep.as_str(),\n                         _ => \" \",\n                     };\n \n@@ -1848,33 +1846,30 @@ fn rewrite_guard(\n         // First try to fit the guard string on the same line as the pattern.\n         // 4 = ` if `, 5 = ` => {`\n         if let Some(cond_shape) = shape\n-            .shrink_left(pattern_width + 4)\n+            .offset_left(pattern_width + 4)\n             .and_then(|s| s.sub_width(5))\n         {\n             if let Some(cond_str) = guard\n                 .rewrite(context, cond_shape)\n                 .and_then(|s| s.rewrite(context, cond_shape))\n             {\n-                if !cond_str.contains('\\n') {\n+                if !cond_str.contains('\\n') || pattern_width <= context.config.tab_spaces() {\n                     return Some(format!(\" if {}\", cond_str));\n                 }\n             }\n         }\n \n         // Not enough space to put the guard after the pattern, try a newline.\n-        // 3 == `if `\n-        if let Some(cond_shape) = Shape::indented(\n-            shape.indent.block_indent(context.config) + 3,\n-            context.config,\n-        ).sub_width(3)\n+        // 3 = `if `, 5 = ` => {`\n+        if let Some(cond_shape) =\n+            Shape::indented(shape.indent.block_indent(context.config), context.config)\n+                .offset_left(3)\n+                .and_then(|s| s.sub_width(5))\n         {\n             if let Some(cond_str) = guard.rewrite(context, cond_shape) {\n                 return Some(format!(\n                     \"\\n{}if {}\",\n-                    shape\n-                        .indent\n-                        .block_indent(context.config)\n-                        .to_string(context.config),\n+                    cond_shape.indent.to_string(context.config),\n                     cond_str\n                 ));\n             }\n@@ -1920,7 +1915,6 @@ fn rewrite_pat_expr(\n \n     // The expression won't fit on the current line, jump to next.\n     let nested_shape = shape\n-        .block()\n         .block_indent(context.config.tab_spaces())\n         .with_max_width(context.config);\n     let nested_indent_str = nested_shape.indent.to_string(context.config);"}]}