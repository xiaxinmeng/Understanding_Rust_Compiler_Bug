{"sha": "78a7a816bf3a913cc978a08f3a02426ac0d29703", "node_id": "C_kwDOAAsO6NoAKDc4YTdhODE2YmYzYTkxM2NjOTc4YTA4ZjNhMDI0MjZhYzBkMjk3MDM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-26T17:40:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-26T17:40:01Z"}, "message": "minor: Simplify", "tree": {"sha": "6e1cb5ea3fb1247d141b85b872b8860291f73ca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e1cb5ea3fb1247d141b85b872b8860291f73ca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a7a816bf3a913cc978a08f3a02426ac0d29703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a7a816bf3a913cc978a08f3a02426ac0d29703", "html_url": "https://github.com/rust-lang/rust/commit/78a7a816bf3a913cc978a08f3a02426ac0d29703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a7a816bf3a913cc978a08f3a02426ac0d29703/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55bf51df41dd2791b3abbbe8dde34f50a68a51b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/55bf51df41dd2791b3abbbe8dde34f50a68a51b8", "html_url": "https://github.com/rust-lang/rust/commit/55bf51df41dd2791b3abbbe8dde34f50a68a51b8"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "3f6d0844e9c1f27afc10ece6dde6b3414c169937", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/78a7a816bf3a913cc978a08f3a02426ac0d29703/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a7a816bf3a913cc978a08f3a02426ac0d29703/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=78a7a816bf3a913cc978a08f3a02426ac0d29703", "patch": "@@ -6,7 +6,7 @@\n //!\n //! This usually involves resolving names, collecting generic arguments etc.\n use std::{\n-    cell::{Cell, RefCell},\n+    cell::{Cell, RefCell, RefMut},\n     iter,\n     sync::Arc,\n };\n@@ -330,26 +330,26 @@ impl<'a> TyLoweringContext<'a> {\n                 }\n             }\n             TypeRef::Macro(macro_call) => {\n-                let (expander, recursion_start) = {\n-                    let mut expander = self.expander.borrow_mut();\n-                    if expander.is_some() {\n-                        (Some(expander), false)\n-                    } else {\n-                        *expander = Some(Expander::new(\n-                            self.db.upcast(),\n-                            macro_call.file_id,\n-                            self.resolver.module(),\n-                        ));\n-                        (Some(expander), true)\n+                let (mut expander, recursion_start) = {\n+                    match RefMut::filter_map(self.expander.borrow_mut(), Option::as_mut) {\n+                        Ok(expander) => (expander, false),\n+                        Err(expander) => (\n+                            RefMut::map(expander, |it| {\n+                                it.insert(Expander::new(\n+                                    self.db.upcast(),\n+                                    macro_call.file_id,\n+                                    self.resolver.module(),\n+                                ))\n+                            }),\n+                            true,\n+                        ),\n                     }\n                 };\n-                let ty = if let Some(mut expander) = expander {\n-                    let expander_mut = expander.as_mut().unwrap();\n+                let ty = {\n                     let macro_call = macro_call.to_node(self.db.upcast());\n-                    match expander_mut.enter_expand::<ast::Type>(self.db.upcast(), macro_call) {\n+                    match expander.enter_expand::<ast::Type>(self.db.upcast(), macro_call) {\n                         Ok(ExpandResult { value: Some((mark, expanded)), .. }) => {\n-                            let ctx =\n-                                LowerCtx::new(self.db.upcast(), expander_mut.current_file_id());\n+                            let ctx = LowerCtx::new(self.db.upcast(), expander.current_file_id());\n                             let type_ref = TypeRef::from_ast(&ctx, expanded);\n \n                             drop(expander);\n@@ -364,8 +364,6 @@ impl<'a> TyLoweringContext<'a> {\n                         }\n                         _ => None,\n                     }\n-                } else {\n-                    None\n                 };\n                 if recursion_start {\n                     *self.expander.borrow_mut() = None;"}]}