{"sha": "10910020ecc56373336f294c827e6f1f62616d03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOTEwMDIwZWNjNTYzNzMzMzZmMjk0YzgyN2U2ZjFmNjI2MTZkMDM=", "commit": {"author": {"name": "lyj", "email": "sjtu5140809011@gmail.com", "date": "2021-07-14T03:29:39Z"}, "committer": {"name": "lyj", "email": "sjtu5140809011@gmail.com", "date": "2021-07-14T05:46:33Z"}, "message": "rename possible_borrowed to possible_origin; pass dogfood", "tree": {"sha": "6ac8856bfcea4a8689b6a50fb1b9cff1091d5e65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac8856bfcea4a8689b6a50fb1b9cff1091d5e65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10910020ecc56373336f294c827e6f1f62616d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10910020ecc56373336f294c827e6f1f62616d03", "html_url": "https://github.com/rust-lang/rust/commit/10910020ecc56373336f294c827e6f1f62616d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10910020ecc56373336f294c827e6f1f62616d03/comments", "author": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251c3b64dab8982be5d0d002fe695f693ec4a5ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/251c3b64dab8982be5d0d002fe695f693ec4a5ab", "html_url": "https://github.com/rust-lang/rust/commit/251c3b64dab8982be5d0d002fe695f693ec4a5ab"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "56ef95a88c88081da4b83fbc44da66b8759df5cf", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/10910020ecc56373336f294c827e6f1f62616d03/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10910020ecc56373336f294c827e6f1f62616d03/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=10910020ecc56373336f294c827e6f1f62616d03", "patch": "@@ -88,8 +88,8 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n \n         let mir = cx.tcx.optimized_mir(def_id.to_def_id());\n \n-        let possible_borrowed = {\n-            let mut vis = PossibleBorrowedVisitor::new(mir);\n+        let possible_origin = {\n+            let mut vis = PossibleOriginVisitor::new(mir);\n             vis.visit_body(mir);\n             vis.into_map(cx)\n         };\n@@ -99,7 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n         let mut possible_borrower = {\n-            let mut vis = PossibleBorrowerVisitor::new(cx, mir, possible_borrowed);\n+            let mut vis = PossibleBorrowerVisitor::new(cx, mir, possible_origin);\n             vis.visit_body(mir);\n             vis.into_map(cx, maybe_storage_live_result)\n         };\n@@ -515,20 +515,20 @@ struct PossibleBorrowerVisitor<'a, 'tcx> {\n     possible_borrower: TransitiveRelation<mir::Local>,\n     body: &'a mir::Body<'tcx>,\n     cx: &'a LateContext<'tcx>,\n-    possible_borrowed: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n+    possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n }\n \n impl<'a, 'tcx> PossibleBorrowerVisitor<'a, 'tcx> {\n     fn new(\n         cx: &'a LateContext<'tcx>,\n         body: &'a mir::Body<'tcx>,\n-        possible_borrowed: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n+        possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n     ) -> Self {\n         Self {\n             possible_borrower: TransitiveRelation::default(),\n             cx,\n             body,\n-            possible_borrowed,\n+            possible_origin,\n         }\n     }\n \n@@ -620,8 +620,8 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n \n             let mut mutable_variables: Vec<mir::Local> = mutable_borrowers\n                 .iter()\n-                .filter_map(|r| self.possible_borrowed.get(r))\n-                .flat_map(|r| r.iter())\n+                .filter_map(|r| self.possible_origin.get(r))\n+                .flat_map(HybridBitSet::iter)\n                 .collect();\n \n             if ContainsRegion.visit_ty(self.body.local_decls[*dest].ty).is_break() {\n@@ -643,15 +643,15 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n /// Collect possible borrowed for every `&mut` local.\n /// For exampel, `_1 = &mut _2` generate _1: {_2,...}\n /// Known Problems: not sure all borrowed are tracked\n-struct PossibleBorrowedVisitor<'a, 'tcx> {\n-    possible_borrowed: TransitiveRelation<mir::Local>,\n+struct PossibleOriginVisitor<'a, 'tcx> {\n+    possible_origin: TransitiveRelation<mir::Local>,\n     body: &'a mir::Body<'tcx>,\n }\n \n-impl<'a, 'tcx> PossibleBorrowedVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> PossibleOriginVisitor<'a, 'tcx> {\n     fn new(body: &'a mir::Body<'tcx>) -> Self {\n         Self {\n-            possible_borrowed: TransitiveRelation::default(),\n+            possible_origin: TransitiveRelation::default(),\n             body,\n         }\n     }\n@@ -663,7 +663,7 @@ impl<'a, 'tcx> PossibleBorrowedVisitor<'a, 'tcx> {\n                 continue;\n             }\n \n-            let borrowers = self.possible_borrowed.reachable_from(&row);\n+            let borrowers = self.possible_origin.reachable_from(&row);\n             if !borrowers.is_empty() {\n                 let mut bs = HybridBitSet::new_empty(self.body.local_decls.len());\n                 for &c in borrowers {\n@@ -681,22 +681,19 @@ impl<'a, 'tcx> PossibleBorrowedVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowedVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleOriginVisitor<'a, 'tcx> {\n     fn visit_assign(&mut self, place: &mir::Place<'tcx>, rvalue: &mir::Rvalue<'_>, _location: mir::Location) {\n         let lhs = place.local;\n         match rvalue {\n             // Only consider `&mut`, which can modify origin place\n-            mir::Rvalue::Ref(_, rustc_middle::mir::BorrowKind::Mut { .. }, borrowed) => {\n-                self.possible_borrowed.add(lhs, borrowed.local);\n-            },\n+            mir::Rvalue::Ref(_, rustc_middle::mir::BorrowKind::Mut { .. }, borrowed) |\n             // _2: &mut _;\n             // _3 = move _2\n-            mir::Rvalue::Use(mir::Operand::Move(borrowed)) => {\n-                self.possible_borrowed.add(lhs, borrowed.local);\n-            },\n+            mir::Rvalue::Use(mir::Operand::Move(borrowed))  |\n             // _3 = move _2 as &mut _;\n-            mir::Rvalue::Cast(_, mir::Operand::Move(borrowed), _) => {\n-                self.possible_borrowed.add(lhs, borrowed.local);\n+            mir::Rvalue::Cast(_, mir::Operand::Move(borrowed), _)\n+                => {\n+                self.possible_origin.add(lhs, borrowed.local);\n             },\n             _ => {},\n         }"}]}