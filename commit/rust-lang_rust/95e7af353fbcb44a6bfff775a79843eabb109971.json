{"sha": "95e7af353fbcb44a6bfff775a79843eabb109971", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZTdhZjM1M2ZiY2I0NGE2YmZmZjc3NWE3OTg0M2VhYmIxMDk5NzE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-24T12:17:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-24T12:17:49Z"}, "message": "Rollup merge of #79367 - Dirbaio:trap-unreachable, r=jonas-schievink\n\nAllow disabling TrapUnreachable via -Ztrap-unreachable=no\n\nCurrently this is only possible by defining a custom target, which is quite unwieldy.\n\nThis is useful for embedded targets where small code size is desired. For example, on my project (thumbv7em-none-eabi) this yields a 0.6% code size reduction: 132892 bytes -> 132122 bytes (770 bytes down).", "tree": {"sha": "32071bf7aad476b73f0a11e4db2161a821b5f393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32071bf7aad476b73f0a11e4db2161a821b5f393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95e7af353fbcb44a6bfff775a79843eabb109971", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfvPntCRBK7hj4Ov3rIwAAdHIIACJMEi4iXqVP8bwP0cP+CTeG\n0GaoLUWzLfhuvMuxERe3qtWTd7owzgbtEnuYjKJSk/yVqYYoKrI+wYsrW6P6UOXM\njS5ZAxJWVHvNjtxoPyl/c+cc49s3xESPMac6DXjR/AHU9fO+rIKcHUpfIt5oWvfG\n1snZZlKPGJN6hQ0aiH6OuCHQT9AAXFcZJroVzEVqD/zdMW2eGTdBqbZziZejP3eJ\n747aiUO1ZmGJYG9rnCbHZTH00BEm3nvTRGQIAX+HFsGUuiH9mxcc4N7Dt0oqBir3\nkyq9jS8WRkJOd4vq2hVS567xcHXD2FaoqZORB2qAFpkeaFuO60zmhEGAHiKsPfc=\n=GWJ/\n-----END PGP SIGNATURE-----\n", "payload": "tree 32071bf7aad476b73f0a11e4db2161a821b5f393\nparent ce197961ac4b7ead828bd7ed556d250157a3d1fa\nparent 7b62e09b0333e268e5546d52f2072eb340cec7ea\nauthor Jonas Schievink <jonasschievink@gmail.com> 1606220269 +0100\ncommitter GitHub <noreply@github.com> 1606220269 +0100\n\nRollup merge of #79367 - Dirbaio:trap-unreachable, r=jonas-schievink\n\nAllow disabling TrapUnreachable via -Ztrap-unreachable=no\n\nCurrently this is only possible by defining a custom target, which is quite unwieldy.\n\nThis is useful for embedded targets where small code size is desired. For example, on my project (thumbv7em-none-eabi) this yields a 0.6% code size reduction: 132892 bytes -> 132122 bytes (770 bytes down).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95e7af353fbcb44a6bfff775a79843eabb109971", "html_url": "https://github.com/rust-lang/rust/commit/95e7af353fbcb44a6bfff775a79843eabb109971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95e7af353fbcb44a6bfff775a79843eabb109971/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce197961ac4b7ead828bd7ed556d250157a3d1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce197961ac4b7ead828bd7ed556d250157a3d1fa", "html_url": "https://github.com/rust-lang/rust/commit/ce197961ac4b7ead828bd7ed556d250157a3d1fa"}, {"sha": "7b62e09b0333e268e5546d52f2072eb340cec7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b62e09b0333e268e5546d52f2072eb340cec7ea", "html_url": "https://github.com/rust-lang/rust/commit/7b62e09b0333e268e5546d52f2072eb340cec7ea"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "7407dfc455d84b5c19f28c3abd2aa1d24ccf58de", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95e7af353fbcb44a6bfff775a79843eabb109971/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e7af353fbcb44a6bfff775a79843eabb109971/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=95e7af353fbcb44a6bfff775a79843eabb109971", "patch": "@@ -152,7 +152,8 @@ pub fn target_machine_factory(\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n     let abi = SmallCStr::new(&sess.target.llvm_abiname);\n-    let trap_unreachable = sess.target.trap_unreachable;\n+    let trap_unreachable =\n+        sess.opts.debugging_opts.trap_unreachable.unwrap_or(sess.target.trap_unreachable);\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n     let asm_comments = sess.asm_comments();"}, {"sha": "92262050b8c1b14004a24a29f63768ce244d9c36", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95e7af353fbcb44a6bfff775a79843eabb109971/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e7af353fbcb44a6bfff775a79843eabb109971/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=95e7af353fbcb44a6bfff775a79843eabb109971", "patch": "@@ -592,6 +592,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(thinlto, Some(true));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n+    tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, Some(1));\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(use_ctors_section, Some(true));"}, {"sha": "731bbf029fa3146482a7fd5b12548a09927a1820", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e7af353fbcb44a6bfff775a79843eabb109971/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e7af353fbcb44a6bfff775a79843eabb109971/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=95e7af353fbcb44a6bfff775a79843eabb109971", "patch": "@@ -1113,6 +1113,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n+    trap_unreachable: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\"),\n     treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat error number `val` that occurs as bug\"),\n     trim_diagnostic_paths: bool = (true, parse_bool, [UNTRACKED],"}]}