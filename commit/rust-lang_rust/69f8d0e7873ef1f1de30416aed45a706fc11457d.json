{"sha": "69f8d0e7873ef1f1de30416aed45a706fc11457d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZjhkMGU3ODczZWYxZjFkZTMwNDE2YWVkNDVhNzA2ZmMxMTQ1N2Q=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-26T22:37:05Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-26T22:41:42Z"}, "message": "Handle hardbreaks at bol slightly better, including break_offset calls (tuck offset into previous hardbreak).", "tree": {"sha": "77ab14236bc6f9721b36ad134180863d7b3124d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ab14236bc6f9721b36ad134180863d7b3124d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f8d0e7873ef1f1de30416aed45a706fc11457d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f8d0e7873ef1f1de30416aed45a706fc11457d", "html_url": "https://github.com/rust-lang/rust/commit/69f8d0e7873ef1f1de30416aed45a706fc11457d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f8d0e7873ef1f1de30416aed45a706fc11457d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a69196ef36ecff0c5faed4cbff5ab0c43f43e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a69196ef36ecff0c5faed4cbff5ab0c43f43e96", "html_url": "https://github.com/rust-lang/rust/commit/0a69196ef36ecff0c5faed4cbff5ab0c43f43e96"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "96875bf9f3d6a000076591bccc9a52f7213acbcd", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69f8d0e7873ef1f1de30416aed45a706fc11457d/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f8d0e7873ef1f1de30416aed45a706fc11457d/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=69f8d0e7873ef1f1de30416aed45a706fc11457d", "patch": "@@ -239,6 +239,11 @@ obj printer(ioivec::writer out,\n         ret token.(right);\n     }\n \n+    // be very careful with this!\n+    fn replace_last_token(token t) {\n+        token.(right) = t;\n+    }\n+\n     fn pretty_print(token t) {\n         log #fmt(\"pp [%u,%u]\", left, right);\n         alt (t) {\n@@ -516,10 +521,15 @@ fn space(printer p) { spaces(p, 1u); }\n \n fn hardbreak(printer p) { spaces(p, size_infinity as uint); }\n \n+fn hardbreak_tok_offset(int off) -> token {\n+    ret BREAK(rec(offset=off, blank_space=size_infinity));\n+}\n+\n fn hardbreak_tok() -> token {\n-    ret BREAK(rec(offset=0, blank_space=size_infinity));\n+    ret hardbreak_tok_offset(0);\n }\n \n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "2001646b20b7a7bccbf913169d51c7254a9e764a", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/69f8d0e7873ef1f1de30416aed45a706fc11457d/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f8d0e7873ef1f1de30416aed45a706fc11457d/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=69f8d0e7873ef1f1de30416aed45a706fc11457d", "patch": "@@ -172,24 +172,32 @@ fn bopen(&ps s) {\n \n fn bclose_(&ps s, codemap::span span, uint indented) {\n     maybe_print_comment(s, span.hi);\n-    break_offset(s.s, 1u, -(indented as int));\n+    break_offset_if_not_bol(s, 1u, -(indented as int));\n     word(s.s, \"}\");\n     end(s); // close the outer-box\n }\n fn bclose(&ps s, codemap::span span) {\n     bclose_(s, span, indent_unit);\n }\n \n-fn hardbreak_if_not_bol(&ps s) {\n-    if (s.s.last_token() != pp::EOF &&\n-        s.s.last_token() != pp::hardbreak_tok()) {\n-        hardbreak(s.s);\n-    }\n+fn is_bol(&ps s) -> bool {\n+    ret (s.s.last_token() == pp::EOF ||\n+         s.s.last_token() == pp::hardbreak_tok());\n }\n \n-fn space_if_not_hardbreak(&ps s) {\n-    if (s.s.last_token() != pp::hardbreak_tok()) {\n-        space(s.s);\n+fn hardbreak_if_not_bol(&ps s) { if ! is_bol(s) { hardbreak(s.s); } }\n+fn space_if_not_bol(&ps s) { if ! is_bol(s) { space(s.s); } }\n+fn break_offset_if_not_bol(&ps s, uint n, int off) {\n+    if ! is_bol(s) {\n+        break_offset(s.s, n, off);\n+    } else {\n+        if off != 0 && \n+            s.s.last_token() == pp::hardbreak_tok() {\n+            // We do something pretty sketchy here: tuck the nonzero\n+            // offset-adjustment we were going to deposit along with the\n+            // break into the previous hardbreak.\n+            s.s.replace_last_token(pp::hardbreak_tok_offset(off));\n+        }\n     }\n }\n \n@@ -227,7 +235,7 @@ fn commasep_cmnt[IN](&ps s, breaks b, &IN[] elts, fn(&ps, &IN)  op,\n             word(s.s, \",\");\n             maybe_print_trailing_comment(s, get_span(elt),\n                                          some(get_span(elts.(i)).hi));\n-            space_if_not_hardbreak(s);\n+            space_if_not_bol(s);\n         }\n     }\n     end(s);\n@@ -430,8 +438,6 @@ fn print_item(&ps s, &@ast::item item) {\n             print_type(s, *ty);\n             word(s.s, \";\");\n             end(s); // end the outer ibox\n-\n-            break_offset(s.s, 0u, 0);\n         }\n         case (ast::item_tag(?variants, ?params)) {\n             auto newtype = ivec::len(variants) == 1u &&\n@@ -564,7 +570,7 @@ fn print_stmt(&ps s, &ast::stmt st) {\n     alt (st.node) {\n         case (ast::stmt_decl(?decl, _)) { print_decl(s, decl); }\n         case (ast::stmt_expr(?expr, _)) {\n-            space_if_not_hardbreak(s);\n+            space_if_not_bol(s);\n             print_expr(s, expr);\n         }\n     }\n@@ -589,7 +595,7 @@ fn print_possibly_embedded_block(&ps s, &ast::blk blk, bool embedded,\n     for (@ast::stmt st in blk.node.stmts) { print_stmt(s, *st) }\n     alt (blk.node.expr) {\n         case (some(?expr)) {\n-            space_if_not_hardbreak(s);\n+            space_if_not_bol(s);\n             print_expr(s, expr);\n             maybe_print_trailing_comment(s, expr.span, some(blk.span.hi));\n         }\n@@ -1030,7 +1036,7 @@ fn print_decl(&ps s, &@ast::decl decl) {\n     maybe_print_comment(s, decl.span.lo);\n     alt (decl.node) {\n         case (ast::decl_local(?locs)) {\n-            space_if_not_hardbreak(s);\n+            space_if_not_bol(s);\n             ibox(s, indent_unit);\n             word_nbsp(s, \"let\");\n             fn print_local(&ps s, &@ast::local loc) {\n@@ -1155,7 +1161,7 @@ fn print_fn_args_and_ret(&ps s, &ast::fn_decl decl) {\n     pclose(s);\n     maybe_print_comment(s, decl.output.span.lo);\n     if (decl.output.node != ast::ty_nil) {\n-        space_if_not_hardbreak(s);\n+        space_if_not_bol(s);\n         word_space(s, \"->\");\n         print_type(s, *decl.output);\n     }\n@@ -1306,7 +1312,7 @@ fn print_ty_fn(&ps s, &ast::proto proto, &option::t[str] id,\n     pclose(s);\n     maybe_print_comment(s, output.span.lo);\n     if (output.node != ast::ty_nil) {\n-        space_if_not_hardbreak(s);\n+        space_if_not_bol(s);\n         ibox(s, indent_unit);\n         word_space(s, \"->\");\n         alt (cf) {"}]}