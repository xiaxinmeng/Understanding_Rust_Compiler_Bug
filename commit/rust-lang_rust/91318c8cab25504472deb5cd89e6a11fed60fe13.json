{"sha": "91318c8cab25504472deb5cd89e6a11fed60fe13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzE4YzhjYWIyNTUwNDQ3MmRlYjVjZDg5ZTZhMTFmZWQ2MGZlMTM=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2017-09-18T19:19:58Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2017-09-18T19:55:38Z"}, "message": "core: Add DoubleEndedIterator::rfold\n\nrfold is the reverse version of fold.\n\nFold allows iterators to implement a different (non-resumable) internal\niteration when it is more efficient than the external iteration\nimplemented through the next method. (Common examples are VecDeque and\n.chain()).\n\nIntroduce rfold() so that the same customization is available for\nreverse iteration. This is achieved by both adding the method, and by\nhaving the Rev<I> adaptor connect Rev::rfold -> I::fold, Rev::fold -> I::rfold.", "tree": {"sha": "c5af544a26fe94956b236a4e7c56047c71fe4aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5af544a26fe94956b236a4e7c56047c71fe4aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91318c8cab25504472deb5cd89e6a11fed60fe13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91318c8cab25504472deb5cd89e6a11fed60fe13", "html_url": "https://github.com/rust-lang/rust/commit/91318c8cab25504472deb5cd89e6a11fed60fe13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91318c8cab25504472deb5cd89e6a11fed60fe13/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd171e47f6cdd5b05e377cbcf088070720f31bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd171e47f6cdd5b05e377cbcf088070720f31bc", "html_url": "https://github.com/rust-lang/rust/commit/ffd171e47f6cdd5b05e377cbcf088070720f31bc"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "85df8a669d141ba22a019c05d5b0e379d118a13a", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/91318c8cab25504472deb5cd89e6a11fed60fe13/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91318c8cab25504472deb5cd89e6a11fed60fe13/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=91318c8cab25504472deb5cd89e6a11fed60fe13", "patch": "@@ -398,6 +398,68 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n+    /// An iterator method that reduces the iterator's elements to a single,\n+    /// final value, starting from the back.\n+    ///\n+    /// This is the reverse version of [`fold()`]: it takes elements starting from\n+    /// the back of the iterator.\n+    ///\n+    /// `rfold()` takes two arguments: an initial value, and a closure with two\n+    /// arguments: an 'accumulator', and an element. The closure returns the value that\n+    /// the accumulator should have for the next iteration.\n+    ///\n+    /// The initial value is the value the accumulator will have on the first\n+    /// call.\n+    ///\n+    /// After applying this closure to every element of the iterator, `rfold()`\n+    /// returns the accumulator.\n+    ///\n+    /// This operation is sometimes called 'reduce' or 'inject'.\n+    ///\n+    /// Folding is useful whenever you have a collection of something, and want\n+    /// to produce a single value from it.\n+    ///\n+    /// [`fold()`]: trait.Iterator.html#method.fold\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// // the sum of all of the elements of a\n+    /// let sum = a.iter()\n+    ///            .rfold(0, |acc, &x| acc + x);\n+    ///\n+    /// assert_eq!(sum, 6);\n+    /// ```\n+    ///\n+    /// This example builds a string, starting with an initial value\n+    /// and continuing with each element from the back until the front:\n+    ///\n+    /// ```\n+    /// let numbers = [1, 2, 3, 4, 5];\n+    ///\n+    /// let zero = \"0\".to_string();\n+    ///\n+    /// let result = numbers.iter().rfold(zero, |acc, &x| {\n+    ///     format!(\"({} + {})\", x, acc)\n+    /// });\n+    ///\n+    /// assert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_rfold\", issue = \"0\")]\n+    fn rfold<B, F>(mut self, mut accum: B, mut f: F) -> B where\n+        Self: Sized, F: FnMut(B, Self::Item) -> B,\n+    {\n+        while let Some(x) = self.next_back() {\n+            accum = f(accum, x);\n+        }\n+        accum\n+    }\n+\n     /// Searches for an element of an iterator from the right that satisfies a predicate.\n     ///\n     /// `rfind()` takes a closure that returns `true` or `false`. It applies"}]}