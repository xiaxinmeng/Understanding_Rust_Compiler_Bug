{"sha": "80e0ebaa86869b6c7063dde8316f98aa5f365316", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTBlYmFhODY4NjliNmM3MDYzZGRlODMxNmY5OGFhNWYzNjUzMTY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-03T03:29:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T23:41:46Z"}, "message": "Parse port and chan types, constructors, send statements", "tree": {"sha": "ada14e658f06d124d638f9a223fa8ef664adde0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada14e658f06d124d638f9a223fa8ef664adde0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e0ebaa86869b6c7063dde8316f98aa5f365316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e0ebaa86869b6c7063dde8316f98aa5f365316", "html_url": "https://github.com/rust-lang/rust/commit/80e0ebaa86869b6c7063dde8316f98aa5f365316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e0ebaa86869b6c7063dde8316f98aa5f365316/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f79552614e135821f1c64ff9f9b4a303d4aab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f79552614e135821f1c64ff9f9b4a303d4aab6", "html_url": "https://github.com/rust-lang/rust/commit/45f79552614e135821f1c64ff9f9b4a303d4aab6"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "694ff44857bd3f207b6c9317320eedce7216c6b9", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80e0ebaa86869b6c7063dde8316f98aa5f365316/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e0ebaa86869b6c7063dde8316f98aa5f365316/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=80e0ebaa86869b6c7063dde8316f98aa5f365316", "patch": "@@ -242,6 +242,9 @@ tag expr_ {\n     expr_be(@expr);\n     expr_log(@expr);\n     expr_check_expr(@expr);\n+    expr_port(ann);\n+    expr_chan(@expr, ann);\n+    expr_send(@expr /* TODO: @expr|is_lval */, @expr, ann);\n }\n \n type lit = spanned[lit_];\n@@ -278,6 +281,8 @@ tag ty_ {\n     ty_rec(vec[ty_field]);\n     ty_fn(proto, vec[ty_arg], @ty);        // TODO: effect\n     ty_obj(vec[ty_method]);\n+    ty_chan(@ty);\n+    ty_port(@ty);\n     ty_path(path, option.t[def]);\n     ty_mutable(@ty);\n     ty_type;"}, {"sha": "1f7d4686df455c3a1cceecfd82829b47d2a57561", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/80e0ebaa86869b6c7063dde8316f98aa5f365316/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e0ebaa86869b6c7063dde8316f98aa5f365316/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=80e0ebaa86869b6c7063dde8316f98aa5f365316", "patch": "@@ -429,6 +429,22 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             t = parse_ty_obj(p, hi);\n         }\n \n+        case (token.PORT) {\n+            p.bump();\n+            expect(p, token.LBRACKET);\n+            t = ast.ty_port(parse_ty(p));\n+            hi = p.get_span();\n+            expect(p, token.RBRACKET);\n+        }\n+\n+        case (token.CHAN) {\n+            p.bump();\n+            expect(p, token.LBRACKET);\n+            t = ast.ty_chan(parse_ty(p));\n+            hi = p.get_span();\n+            expect(p, token.RBRACKET);\n+        }\n+\n         case (token.IDENT(_)) {\n             t = ast.ty_path(parse_path(p, GREEDY), none[ast.def]);\n         }\n@@ -799,6 +815,23 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n             }\n         }\n \n+        case (token.PORT) {\n+            p.bump();\n+            expect(p, token.LPAREN);\n+            expect(p, token.RPAREN);\n+            hi = p.get_span();\n+            ex = ast.expr_port(ast.ann_none);\n+        }\n+\n+        case (token.CHAN) {\n+            p.bump();\n+            expect(p, token.LPAREN);\n+            auto e = parse_expr(p);\n+            hi = e.span;\n+            expect(p, token.RPAREN);\n+            ex = ast.expr_chan(e, ast.ann_none);\n+        }\n+\n         case (_) {\n             auto lit = parse_lit(p);\n             hi = lit.span;\n@@ -1080,6 +1113,12 @@ impure fn parse_assign_expr(parser p) -> @ast.expr {\n             ret @spanned(lo, rhs.span,\n                          ast.expr_assign_op(aop, lhs, rhs, ast.ann_none));\n         }\n+        case (token.SEND) {\n+            p.bump();\n+            auto rhs = parse_expr(p);\n+            ret @spanned(lo, rhs.span,\n+                         ast.expr_send(lhs, rhs, ast.ann_none));\n+        }\n         case (_) { /* fall through */ }\n     }\n     ret lhs;"}]}