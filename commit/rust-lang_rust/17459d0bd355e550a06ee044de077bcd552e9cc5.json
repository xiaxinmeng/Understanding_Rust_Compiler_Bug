{"sha": "17459d0bd355e550a06ee044de077bcd552e9cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDU5ZDBiZDM1NWU1NTBhMDZlZTA0NGRlMDc3YmNkNTUyZTljYzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-23T22:55:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-26T23:21:04Z"}, "message": "rustc: Purge of HashMap, fixing segfaulting cases\n\nVarious FIXME comments added around to denote copies which when removed cause\nthe compiler to segfault at some point before stage2. None of these copies\nshould even be necessary.", "tree": {"sha": "55477a6d16d44b526402075082cc051e5ae59e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55477a6d16d44b526402075082cc051e5ae59e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17459d0bd355e550a06ee044de077bcd552e9cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17459d0bd355e550a06ee044de077bcd552e9cc5", "html_url": "https://github.com/rust-lang/rust/commit/17459d0bd355e550a06ee044de077bcd552e9cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17459d0bd355e550a06ee044de077bcd552e9cc5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f812fef1bde4a23ccfd7e1526a4c5087cc9e31b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f812fef1bde4a23ccfd7e1526a4c5087cc9e31b", "html_url": "https://github.com/rust-lang/rust/commit/6f812fef1bde4a23ccfd7e1526a4c5087cc9e31b"}], "stats": {"total": 144, "additions": 83, "deletions": 61}, "files": [{"sha": "6734abb7e8075b08b797b7c4e8157309dc176b29", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -61,7 +61,7 @@ pub fn enc_ty(w: @io::Writer, cx: @ctxt, t: ty::t) {\n     match cx.abbrevs {\n       ac_no_abbrevs => {\n         let result_str = match cx.tcx.short_names_cache.find(&t) {\n-            Some(s) => /*bad*/copy *s,\n+            Some(&s) => /*bad*/copy *s,\n             None => {\n                 let s = do io::with_str_writer |wr| {\n                     enc_sty(wr, cx, /*bad*/copy ty::get(t).sty);"}, {"sha": "1e1dde3303788710bdd5a1d67cab4726016c4faa", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -856,7 +856,9 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         do ebml_w.tag(c::tag_table_node_type_subst) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                ebml_w.emit_tys(ecx, /*bad*/copy *tys)\n+                // FIXME(#5562): removing this copy causes a segfault\n+                //               before stage2\n+                ebml_w.emit_tys(ecx, /*bad*/copy **tys)\n             }\n         }\n     }\n@@ -922,7 +924,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    for maps.method_map.find(&id).each |mme| {\n+    for maps.method_map.find(&id).each |&mme| {\n         do ebml_w.tag(c::tag_table_method_map) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {"}, {"sha": "a6c954b385190fa9256c3219be1d54b0d5b1986e", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -17,7 +17,6 @@ use middle;\n \n use core::float;\n use core::vec;\n-use std::oldmap::HashMap;\n use syntax::{ast, ast_map, ast_util, visit};\n use syntax::ast::*;\n \n@@ -194,7 +193,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n             mutbl_map: @mut LinearSet::new(),\n             root_map: @mut LinearMap::new(),\n             last_use_map: @mut LinearMap::new(),\n-            method_map: HashMap(),\n+            method_map: @mut LinearMap::new(),\n             vtable_map: @mut LinearMap::new(),\n             write_guard_map: @mut LinearSet::new(),\n             moves_map: @mut LinearSet::new(),"}, {"sha": "ca301182e6f32e6ade2904c4313d1edde63ccb00", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -274,6 +274,8 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n         _ => e.id\n     };\n     for cx.tcx.node_type_substs.find(&type_parameter_id).each |ts| {\n+        // FIXME(#5562): removing this copy causes a segfault before stage2\n+        let ts = /*bad*/ copy **ts;\n         let bounds = match e.node {\n           expr_path(_) => {\n             let did = ast_util::def_id_of_def(*cx.tcx.def_map.get(&e.id));\n@@ -289,15 +291,15 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n                 ~\"non path/method call expr has type substs??\")\n           }\n         };\n-        if vec::len(*ts) != vec::len(*bounds) {\n+        if ts.len() != bounds.len() {\n             // Fail earlier to make debugging easier\n             fail!(fmt!(\"internal error: in kind::check_expr, length \\\n                        mismatch between actual and declared bounds: actual = \\\n                         %s (%u tys), declared = %? (%u tys)\",\n-                      tys_to_str(cx.tcx, *ts), ts.len(),\n-                      *bounds, (*bounds).len()));\n+                      tys_to_str(cx.tcx, ts), ts.len(),\n+                      *bounds, bounds.len()));\n         }\n-        for vec::each2(*ts, *bounds) |ty, bound| {\n+        for vec::each2(ts, *bounds) |ty, bound| {\n             check_bounds(cx, type_parameter_id, e.span, *ty, *bound)\n         }\n     }\n@@ -335,9 +337,11 @@ fn check_ty(aty: @Ty, cx: Context, v: visit::vt<Context>) {\n     match aty.node {\n       ty_path(_, id) => {\n         for cx.tcx.node_type_substs.find(&id).each |ts| {\n+            // FIXME(#5562): removing this copy causes a segfault before stage2\n+            let ts = /*bad*/ copy **ts;\n             let did = ast_util::def_id_of_def(*cx.tcx.def_map.get(&id));\n             let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n-            for vec::each2(*ts, *bounds) |ty, bound| {\n+            for vec::each2(ts, *bounds) |ty, bound| {\n                 check_bounds(cx, aty.id, aty.span, *ty, *bound)\n             }\n         }"}, {"sha": "680e9c7053dcfa3092d43eef71228e252526d323", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -72,8 +72,7 @@ use core::int;\n use core::io;\n use core::libc::{c_uint, c_ulonglong};\n use core::uint;\n-use std::oldmap::HashMap;\n-use std::{oldmap, time, list};\n+use std::{time, list};\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n@@ -170,16 +169,22 @@ pub fn get_extern_fn(externs: ExternMap,\n                      name: @str,\n                      cc: lib::llvm::CallConv,\n                      ty: TypeRef) -> ValueRef {\n-    if externs.contains_key(&name) { return externs.get(&name); }\n+    match externs.find(&name) {\n+        Some(n) => return copy *n,\n+        None => ()\n+    }\n     let f = decl_fn(llmod, name, cc, ty);\n     externs.insert(name, f);\n     return f;\n }\n \n pub fn get_extern_const(externs: ExternMap, llmod: ModuleRef,\n                         name: @str, ty: TypeRef) -> ValueRef {\n+    match externs.find(&name) {\n+        Some(n) => return copy *n,\n+        None => ()\n+    }\n     unsafe {\n-        if externs.contains_key(&name) { return externs.get(&name); }\n         let c = str::as_c_str(name, |buf| {\n             llvm::LLVMAddGlobal(llmod, ty, buf)\n         });\n@@ -3061,7 +3066,7 @@ pub fn trans_crate(sess: session::Session,\n               llmod: llmod,\n               td: td,\n               tn: tn,\n-              externs: HashMap(),\n+              externs: @mut LinearMap::new(),\n               intrinsics: intrinsics,\n               item_vals: @mut LinearMap::new(),\n               exp_map2: emap2,\n@@ -3082,8 +3087,8 @@ pub fn trans_crate(sess: session::Session,\n               const_globals: @mut LinearMap::new(),\n               const_values: @mut LinearMap::new(),\n               module_data: @mut LinearMap::new(),\n-              lltypes: ty::new_ty_hash(),\n-              llsizingtypes: ty::new_ty_hash(),\n+              lltypes: @mut LinearMap::new(),\n+              llsizingtypes: @mut LinearMap::new(),\n               adt_reprs: @mut LinearMap::new(),\n               names: new_namegen(sess.parse_sess.interner),\n               next_addrspace: new_addrspace_gen(),"}, {"sha": "dd882087d384cd5b9f673521674938fff16d0afe", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -82,9 +82,12 @@ pub fn trans(bcx: block, expr: @ast::expr) -> Callee {\n         }\n         ast::expr_field(base, _, _) => {\n             match bcx.ccx().maps.method_map.find(&expr.id) {\n-                Some(ref origin) => { // An impl method\n+                Some(origin) => { // An impl method\n+                    // FIXME(#5562): removing this copy causes a segfault\n+                    //               before stage2\n+                    let origin = /*bad*/ copy *origin;\n                     return meth::trans_method_callee(bcx, expr.id,\n-                                                     base, (*origin));\n+                                                     base, origin);\n                 }\n                 None => {} // not a method, just a field\n             }\n@@ -343,11 +346,14 @@ pub fn trans_method_call(in_cx: block,\n         expr_ty(in_cx, call_ex),\n         |cx| {\n             match cx.ccx().maps.method_map.find(&call_ex.id) {\n-                Some(ref origin) => {\n+                Some(origin) => {\n+                    // FIXME(#5562): removing this copy causes a segfault\n+                    //               before stage2\n+                    let origin = /*bad*/ copy *origin;\n                     meth::trans_method_callee(cx,\n                                               call_ex.callee_id,\n                                               rcvr,\n-                                              (*origin))\n+                                              origin)\n                 }\n                 None => {\n                     cx.tcx().sess.span_bug(call_ex.span,"}, {"sha": "5805f7fbe3a064fdb06efc35dbf411e4e919f3e6", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -52,7 +52,6 @@ use core::str;\n use core::to_bytes;\n use core::vec::raw::to_ptr;\n use core::vec;\n-use std::oldmap::{HashMap, Set};\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt};\n use syntax::codemap::span;\n@@ -156,7 +155,7 @@ pub fn BuilderRef_res(B: BuilderRef) -> BuilderRef_res {\n     }\n }\n \n-pub type ExternMap = HashMap<@str, ValueRef>;\n+pub type ExternMap = @mut LinearMap<@str, ValueRef>;\n \n // Crate context.  Every crate we compile has one of these.\n pub struct CrateContext {\n@@ -203,8 +202,8 @@ pub struct CrateContext {\n      // Cache of emitted const values\n      const_values: @mut LinearMap<ast::node_id, ValueRef>,\n      module_data: @mut LinearMap<~str, ValueRef>,\n-     lltypes: HashMap<ty::t, TypeRef>,\n-     llsizingtypes: HashMap<ty::t, TypeRef>,\n+     lltypes: @mut LinearMap<ty::t, TypeRef>,\n+     llsizingtypes: @mut LinearMap<ty::t, TypeRef>,\n      adt_reprs: @mut LinearMap<ty::t, @adt::Repr>,\n      names: namegen,\n      next_addrspace: addrspace_gen,"}, {"sha": "33576a682a7f1c5e7bbd1b33178313fd35b5048f", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -1647,7 +1647,7 @@ fn trans_overloaded_op(bcx: block,\n                        dest: Dest,\n                        +autoref_arg: AutorefArg) -> block\n {\n-    let origin = bcx.ccx().maps.method_map.get(&expr.id);\n+    let origin = *bcx.ccx().maps.method_map.get(&expr.id);\n     let fty = node_id_type(bcx, expr.callee_id);\n     return callee::trans_call_inner(\n         bcx, expr.info(), fty,"}, {"sha": "1639c6b414d19c84d39af776f6130bfd3367ec75", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -402,7 +402,7 @@ pub fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n     let mut bcx = bcx;\n     let ty_visitor_name = special_idents::ty_visitor;\n     fail_unless!(bcx.ccx().tcx.intrinsic_defs.contains_key(&ty_visitor_name));\n-    let (trait_id, ty) = bcx.ccx().tcx.intrinsic_defs.get(&ty_visitor_name);\n+    let (trait_id, ty) = *bcx.ccx().tcx.intrinsic_defs.get(&ty_visitor_name);\n     let v = PointerCast(bcx, v, T_ptr(type_of::type_of(bcx.ccx(), ty)));\n     bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, trait_id);\n     build_return(bcx);"}, {"sha": "026a27dce2c7d634ced812b0b2e425b5c76e280f", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -193,7 +193,7 @@ fn traverse_inline_body(cx: ctx, body: &blk) {\n           }\n           expr_field(_, _, _) => {\n             match cx.method_map.find(&e.id) {\n-              Some(typeck::method_map_entry {\n+              Some(&typeck::method_map_entry {\n                   origin: typeck::method_static(did),\n                   _\n                 }) => {\n@@ -204,7 +204,7 @@ fn traverse_inline_body(cx: ctx, body: &blk) {\n           }\n           expr_method_call(*) => {\n             match cx.method_map.find(&e.id) {\n-              Some(typeck::method_map_entry {\n+              Some(&typeck::method_map_entry {\n                   origin: typeck::method_static(did),\n                   _\n                 }) => {"}, {"sha": "b8145e6532602626ea165d8fd7d60c328617ada5", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -337,7 +337,7 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n     use syntax::parse::token::special_idents::tydesc;\n     let final = sub_block(bcx, ~\"final\");\n     fail_unless!(bcx.ccx().tcx.intrinsic_defs.contains_key(&tydesc));\n-    let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(&tydesc);\n+    let (_, tydesc_ty) = *bcx.ccx().tcx.intrinsic_defs.get(&tydesc);\n     let tydesc_ty = type_of(bcx.ccx(), tydesc_ty);\n     let mut r = Reflector {\n         visitor_val: visitor_val,"}, {"sha": "8e4719d2ccc7d98e7a7c388944e4c39133b58ae7", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -101,8 +101,10 @@ pub fn type_of_non_gc_box(cx: @CrateContext, t: ty::t) -> TypeRef {\n //     behavior.\n \n pub fn sizing_type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n-    if cx.llsizingtypes.contains_key(&t) {\n-        return cx.llsizingtypes.get(&t);\n+    match cx.llsizingtypes.find(&t) {\n+        // FIXME(#5562): removing this copy causes a segfault in stage1 core\n+        Some(t) => return /*bad*/ copy *t,\n+        None => ()\n     }\n \n     let llsizingty = match ty::get(t).sty {\n@@ -161,7 +163,11 @@ pub fn type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n     debug!(\"type_of %?: %?\", t, ty::get(t));\n \n     // Check the cache.\n-    if cx.lltypes.contains_key(&t) { return cx.lltypes.get(&t); }\n+    match cx.lltypes.find(&t) {\n+        // FIXME(#5562): removing this copy causes a segfault in stage1 core\n+        Some(t) => return /*bad*/ copy *t,\n+        None => ()\n+    }\n \n     // Replace any typedef'd types with their equivalent non-typedef\n     // type. This ensures that all LLVM nominal types that contain"}, {"sha": "62cde5999e8d4c3e132ae27bfb5a6ba33985e83a", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -250,8 +250,11 @@ pub fn mark_for_method_call(cx: Context, e_id: node_id, callee_id: node_id) {\n         match mth.origin {\n           typeck::method_static(did) => {\n             for cx.ccx.tcx.node_type_substs.find(&callee_id).each |ts| {\n+                // FIXME(#5562): removing this copy causes a segfault\n+                //               before stage2\n+                let ts = /*bad*/ copy **ts;\n                 let type_uses = type_uses_for(cx.ccx, did, ts.len());\n-                for vec::each2(type_uses, *ts) |uses, subst| {\n+                for vec::each2(type_uses, ts) |uses, subst| {\n                     type_needs(cx, *uses, *subst)\n                 }\n             }\n@@ -296,9 +299,11 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n       }\n       expr_path(_) => {\n         for cx.ccx.tcx.node_type_substs.find(&e.id).each |ts| {\n+            // FIXME(#5562): removing this copy causes a segfault before stage2\n+            let ts = copy **ts;\n             let id = ast_util::def_id_of_def(*cx.ccx.tcx.def_map.get(&e.id));\n             let uses_for_ts = type_uses_for(cx.ccx, id, ts.len());\n-            for vec::each2(uses_for_ts, *ts) |uses, subst| {\n+            for vec::each2(uses_for_ts, ts) |uses, subst| {\n                 type_needs(cx, *uses, *subst)\n             }\n         }"}, {"sha": "74146e56da29e543c5d5ff70ad20dcbad991e9e9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -38,8 +38,6 @@ use core::to_bytes;\n use core::uint;\n use core::vec;\n use core::hashmap::linear::{LinearMap, LinearSet};\n-use std::oldmap::HashMap;\n-use std::oldmap;\n use std::smallintmap::SmallIntMap;\n use syntax::ast::*;\n use syntax::ast_util::{is_local, local_def};\n@@ -265,24 +263,24 @@ struct ctxt_ {\n     // of this node.  This only applies to nodes that refer to entities\n     // parameterized by type parameters, such as generic fns, types, or\n     // other items.\n-    node_type_substs: HashMap<node_id, ~[t]>,\n+    node_type_substs: @mut LinearMap<node_id, ~[t]>,\n \n     items: ast_map::map,\n-    intrinsic_defs: HashMap<ast::ident, (ast::def_id, t)>,\n+    intrinsic_defs: @mut LinearMap<ast::ident, (ast::def_id, t)>,\n     freevars: freevars::freevar_map,\n     tcache: type_cache,\n     rcache: creader_cache,\n     ccache: constness_cache,\n-    short_names_cache: HashMap<t, @~str>,\n-    needs_unwind_cleanup_cache: HashMap<t, bool>,\n+    short_names_cache: @mut LinearMap<t, @~str>,\n+    needs_unwind_cleanup_cache: @mut LinearMap<t, bool>,\n     tc_cache: @mut LinearMap<uint, TypeContents>,\n     ast_ty_to_ty_cache: @mut LinearMap<node_id, ast_ty_to_ty_cache_entry>,\n     enum_var_cache: @mut LinearMap<def_id, @~[VariantInfo]>,\n     trait_method_cache: @mut LinearMap<def_id, @~[method]>,\n     ty_param_bounds: @mut LinearMap<ast::node_id, param_bounds>,\n     inferred_modes: @mut LinearMap<ast::node_id, ast::mode>,\n     adjustments: @mut LinearMap<ast::node_id, @AutoAdjustment>,\n-    normalized_cache: HashMap<t, t>,\n+    normalized_cache: @mut LinearMap<t, t>,\n     lang_items: middle::lang_items::LanguageItems,\n     // A mapping from an implementation ID to the method info and trait\n     // method ID of the provided (a.k.a. default) methods in the traits that\n@@ -788,8 +786,8 @@ fn mk_rcache() -> creader_cache {\n     return @mut LinearMap::new();\n }\n \n-pub fn new_ty_hash<V:Copy>() -> oldmap::HashMap<t, V> {\n-    oldmap::HashMap()\n+pub fn new_ty_hash<V:Copy>() -> @mut LinearMap<t, V> {\n+    @mut LinearMap::new()\n }\n \n pub fn mk_ctxt(s: session::Session,\n@@ -826,9 +824,9 @@ pub fn mk_ctxt(s: session::Session,\n         region_map: region_map,\n         region_paramd_items: region_paramd_items,\n         node_types: @mut SmallIntMap::new(),\n-        node_type_substs: oldmap::HashMap(),\n+        node_type_substs: @mut LinearMap::new(),\n         items: amap,\n-        intrinsic_defs: oldmap::HashMap(),\n+        intrinsic_defs: @mut LinearMap::new(),\n         freevars: freevars,\n         tcache: @mut LinearMap::new(),\n         rcache: mk_rcache(),\n@@ -1621,25 +1619,24 @@ pub fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n // cleanups.\n pub fn type_needs_unwind_cleanup(cx: ctxt, ty: t) -> bool {\n     match cx.needs_unwind_cleanup_cache.find(&ty) {\n-      Some(result) => return result,\n+      Some(&result) => return result,\n       None => ()\n     }\n \n-    let tycache = new_ty_hash();\n+    let mut tycache = LinearSet::new();\n     let needs_unwind_cleanup =\n-        type_needs_unwind_cleanup_(cx, ty, tycache, false);\n+        type_needs_unwind_cleanup_(cx, ty, &mut tycache, false);\n     cx.needs_unwind_cleanup_cache.insert(ty, needs_unwind_cleanup);\n     return needs_unwind_cleanup;\n }\n \n fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n-                              tycache: oldmap::HashMap<t, ()>,\n+                              tycache: &mut LinearSet<t>,\n                               encountered_box: bool) -> bool {\n \n     // Prevent infinite recursion\n-    match tycache.find(&ty) {\n-      Some(_) => return false,\n-      None => { tycache.insert(ty, ()); }\n+    if !tycache.insert(ty) {\n+        return false;\n     }\n \n     let mut encountered_box = encountered_box;\n@@ -2724,7 +2721,7 @@ pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n pub fn node_id_to_type_params(cx: ctxt, id: ast::node_id) -> ~[t] {\n     match cx.node_type_substs.find(&id) {\n       None => return ~[],\n-      Some(ts) => return ts\n+      Some(ts) => return /*bad*/ copy *ts\n     }\n }\n \n@@ -4164,7 +4161,7 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n     }\n \n     match cx.normalized_cache.find(&t) {\n-      Some(t) => return t,\n+      Some(&t) => return t,\n       None => ()\n     }\n "}, {"sha": "3af23bb20ac7de58162d61448a320cab4ce982c5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -3453,8 +3453,8 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n           let ty_visitor_name = tcx.sess.ident_of(~\"TyVisitor\");\n           fail_unless!(tcx.intrinsic_defs.contains_key(&tydesc_name));\n           fail_unless!(ccx.tcx.intrinsic_defs.contains_key(&ty_visitor_name));\n-          let (_, tydesc_ty) = tcx.intrinsic_defs.get(&tydesc_name);\n-          let (_, visitor_trait) = tcx.intrinsic_defs.get(&ty_visitor_name);\n+          let (_, tydesc_ty) = *tcx.intrinsic_defs.get(&tydesc_name);\n+          let (_, visitor_trait) = *tcx.intrinsic_defs.get(&ty_visitor_name);\n \n           let visitor_trait = match ty::get(visitor_trait).sty {\n             ty::ty_trait(trait_def_id, ref trait_substs, _) => {"}, {"sha": "9ba98a4d27f10a5ec6fd8064e670ad40aa7aecb8", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -66,7 +66,7 @@ fn resolve_method_map_entry(fcx: @mut FnCtxt, sp: span, id: ast::node_id) {\n     // Resolve any method map entry\n     match fcx.inh.method_map.find(&id) {\n         None => {}\n-        Some(ref mme) => {\n+        Some(mme) => {\n             for resolve_type_vars_in_type(fcx, sp, mme.self_arg.ty).each |t| {\n                 let method_map = fcx.ccx.method_map;\n                 let new_entry = method_map_entry {"}, {"sha": "b783a099e160fb44745a9c70635abf52f73386f5", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17459d0bd355e550a06ee044de077bcd552e9cc5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=17459d0bd355e550a06ee044de077bcd552e9cc5", "patch": "@@ -60,7 +60,6 @@ use core::result;\n use core::vec;\n use std::list::{List, Nil, Cons};\n use std::list;\n-use std::oldmap::HashMap;\n use syntax::codemap::{span, spanned, respan};\n use syntax::print::pprust::*;\n use syntax::{ast, ast_util, ast_map};\n@@ -130,7 +129,7 @@ pub struct method_map_entry {\n \n // maps from an expression id that corresponds to a method call to the details\n // of the method to be invoked\n-pub type method_map = HashMap<ast::node_id, method_map_entry>;\n+pub type method_map = @mut LinearMap<ast::node_id, method_map_entry>;\n \n // Resolutions for bounds of all parameters, left to right, for a given path.\n pub type vtable_res = @~[vtable_origin];\n@@ -343,7 +342,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     let time_passes = tcx.sess.time_passes();\n     let ccx = @mut CrateCtxt {\n         trait_map: trait_map,\n-        method_map: HashMap(),\n+        method_map: @mut LinearMap::new(),\n         vtable_map: @mut LinearMap::new(),\n         coherence_info: @coherence::CoherenceInfo(),\n         tcx: tcx"}]}