{"sha": "c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjFjZGZkZjY4NmNhZWMyYjkzZmU5ZTQxZWZhYTc5YjdhNWMyOTI=", "commit": {"author": {"name": "Ivan Molodetskikh", "email": "yalterz@gmail.com", "date": "2016-12-21T18:42:10Z"}, "committer": {"name": "Ivan Molodetskikh", "email": "yalterz@gmail.com", "date": "2016-12-21T18:44:40Z"}, "message": "Fixed fastcall not applying inreg attributes to arguments like the C/C++ fastcall.", "tree": {"sha": "fe11548bfadb41480ec69130bdd86393e515905a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe11548bfadb41480ec69130bdd86393e515905a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYWs2YAAoJEALOONpH6daRIp8P/2MB22rUibtzh1rKBN5jHgHT\n5NW72TtHmuJDGm2mbt6pnHgSenkjyjyu/l8Gd3C6g+XIr20YBqpWEm7Py0qmT0aM\n9pHtRlVVxrodAvyBdSeTolPpqPyCJ2+OUAfwgGIkMgdjQrBX0h7fftDSA2JWVg15\n4mpk6B77wezWr21hYQiiRE6Dkd7a8pX+ODpSbLGumqFn5JT8xMo7rlkIYYKh3qZp\nt23+lOdxbmAw+aCNXVvu3Rir3n7hq3QNFGyMFn1Wim4BRdFPtIZOJjR9NaiwrLkj\nKNIO9SxKeCpsOcgkcvbqseP6B9lsMxAKYf1yA1SD9Yu2RENl9Kr4ssGDtOtKJ5E4\nDO+zGGAyy1uKzGIXdyXweaJgHU/Umx5onCIRjTv3CLI97FAmI/KWZOLjjKr6P7tY\nYtsByl1tleUtqChkNXKcn4ag99mXGLipxFMvOSrrAFI8J5T2ti8ty8bOVvv8BJxJ\n/y8YVyRvId2xY/YQaFJnr8O0a8ofI3cxlnMS9LXXiNRtZr5AKZ9eg4Gp6xugabv8\nPjWY6NPWDAta5tzx3qlXfuv89g75seLhe181FApUcg2kJw1vadPSWqNzlgk238Nt\nx2YW0vG9ZP3U8HyWUP+HtJjdiMAATwzKmU/WBVPPo5F8du7Q1DLtafhHAbsyT/IT\n6yA1bTOguT25qt3ZSBvS\n=pbUc\n-----END PGP SIGNATURE-----", "payload": "tree fe11548bfadb41480ec69130bdd86393e515905a\nparent 1b38776c1f68c6fd47c1b2f7b7974efc7dd64901\nauthor Ivan Molodetskikh <yalterz@gmail.com> 1482345730 +0300\ncommitter Ivan Molodetskikh <yalterz@gmail.com> 1482345880 +0300\n\nFixed fastcall not applying inreg attributes to arguments like the C/C++ fastcall.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "html_url": "https://github.com/rust-lang/rust/commit/c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/comments", "author": {"login": "YaLTeR", "id": 1794388, "node_id": "MDQ6VXNlcjE3OTQzODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1794388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YaLTeR", "html_url": "https://github.com/YaLTeR", "followers_url": "https://api.github.com/users/YaLTeR/followers", "following_url": "https://api.github.com/users/YaLTeR/following{/other_user}", "gists_url": "https://api.github.com/users/YaLTeR/gists{/gist_id}", "starred_url": "https://api.github.com/users/YaLTeR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YaLTeR/subscriptions", "organizations_url": "https://api.github.com/users/YaLTeR/orgs", "repos_url": "https://api.github.com/users/YaLTeR/repos", "events_url": "https://api.github.com/users/YaLTeR/events{/privacy}", "received_events_url": "https://api.github.com/users/YaLTeR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "YaLTeR", "id": 1794388, "node_id": "MDQ6VXNlcjE3OTQzODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1794388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YaLTeR", "html_url": "https://github.com/YaLTeR", "followers_url": "https://api.github.com/users/YaLTeR/followers", "following_url": "https://api.github.com/users/YaLTeR/following{/other_user}", "gists_url": "https://api.github.com/users/YaLTeR/gists{/gist_id}", "starred_url": "https://api.github.com/users/YaLTeR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YaLTeR/subscriptions", "organizations_url": "https://api.github.com/users/YaLTeR/orgs", "repos_url": "https://api.github.com/users/YaLTeR/repos", "events_url": "https://api.github.com/users/YaLTeR/events{/privacy}", "received_events_url": "https://api.github.com/users/YaLTeR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "html_url": "https://github.com/rust-lang/rust/commit/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "f3dbac7ce682eed8078ecd0fab5c9437f3693b93", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "patch": "@@ -117,6 +117,7 @@ pub enum Attribute {\n     StructRet       = 16,\n     UWTable         = 17,\n     ZExt            = 18,\n+    InReg           = 19,\n }\n \n /// LLVMIntPredicate"}, {"sha": "f0f2511899066d45084c9cc19649aae8194c0ed8", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "patch": "@@ -58,7 +58,7 @@ mod attr_impl {\n     // The subset of llvm::Attribute needed for arguments, packed into a bitfield.\n     bitflags! {\n         #[derive(Default, Debug)]\n-        flags ArgAttribute : u8 {\n+        flags ArgAttribute : u16 {\n             const ByVal     = 1 << 0,\n             const NoAlias   = 1 << 1,\n             const NoCapture = 1 << 2,\n@@ -67,6 +67,7 @@ mod attr_impl {\n             const SExt      = 1 << 5,\n             const StructRet = 1 << 6,\n             const ZExt      = 1 << 7,\n+            const InReg     = 1 << 8,\n         }\n     }\n }\n@@ -80,7 +81,7 @@ macro_rules! for_each_kind {\n impl ArgAttribute {\n     fn for_each_kind<F>(&self, mut f: F) where F: FnMut(llvm::Attribute) {\n         for_each_kind!(self, f,\n-                       ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt)\n+                       ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n     }\n }\n \n@@ -573,7 +574,14 @@ impl FnType {\n         }\n \n         match &ccx.sess().target.target.arch[..] {\n-            \"x86\" => cabi_x86::compute_abi_info(ccx, self),\n+            \"x86\" => {\n+                let flavor = if abi == Abi::Fastcall {\n+                    cabi_x86::Flavor::Fastcall\n+                } else {\n+                    cabi_x86::Flavor::General\n+                };\n+                cabi_x86::compute_abi_info(ccx, self, flavor);\n+            },\n             \"x86_64\" => if abi == Abi::SysV64 {\n                 cabi_x86_64::compute_abi_info(ccx, self);\n             } else if abi == Abi::Win64 || ccx.sess().target.target.options.is_like_windows {"}, {"sha": "ae8b610882bb0bf43f8b6005f1d1a6e9216b1bc1", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "patch": "@@ -14,7 +14,13 @@ use type_::Type;\n use super::common::*;\n use super::machine::*;\n \n-pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+#[derive(PartialEq)]\n+pub enum Flavor {\n+    General,\n+    Fastcall\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType, flavor: Flavor) {\n     if !fty.ret.is_ignore() {\n         if fty.ret.ty.kind() == Struct {\n             // Returning a structure. Most often, this will use\n@@ -51,4 +57,51 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n             arg.extend_integer_width_to(32);\n         }\n     }\n+\n+    if flavor == Flavor::Fastcall {\n+        // Mark arguments as InReg like clang does it,\n+        // so our fastcall is compatible with C/C++ fastcall.\n+        // Clang reference: ib/CodeGen/TargetInfo.cpp\n+        let is_mcu_abi = ccx.sess().target.target.target_os.eq(\"elfiamcu\");\n+        let is_soft_float_abi = ccx.sess().target.target.options.features.contains(\"+soft-float\");\n+\n+        let mut free_regs = 2;\n+\n+        for arg in &mut fty.args {\n+            if !arg.is_ignore() && !arg.is_indirect() {\n+                if !is_soft_float_abi {\n+                    if arg.ty.kind() == Float {\n+                        continue;\n+                    }\n+                }\n+\n+                let size = llbitsize_of_real(ccx, arg.ty);\n+                let size_in_regs = (size + 31) / 32;\n+\n+                if size_in_regs == 0 {\n+                    continue;\n+                }\n+\n+                if !is_mcu_abi {\n+                    if size_in_regs > free_regs {\n+                        break;\n+                    }\n+                } else {\n+                    if size_in_regs > free_regs || size_in_regs > 2 {\n+                        continue;\n+                    }\n+                }\n+\n+                free_regs -= size_in_regs;\n+\n+                if !is_mcu_abi && size <= 32 && (arg.ty.kind() == Pointer || arg.ty.kind() == Integer) {\n+                    arg.attrs.set(ArgAttribute::InReg);\n+                }\n+\n+                if free_regs == 0 {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "5d5845213e2301a7add72251249e2967416f9309", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "patch": "@@ -150,6 +150,8 @@ from_rust(LLVMRustAttribute kind) {\n       return Attribute::UWTable;\n     case ZExt:\n       return Attribute::ZExt;\n+    case InReg:\n+      return Attribute::InReg;\n     default:\n       llvm_unreachable(\"bad AttributeKind\");\n   }"}, {"sha": "8f7e0e3d918758281100c7ee17bf33dc2299084e", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/c461cdfdf686caec2b93fe9e41efaa79b7a5c292/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "patch": "@@ -98,6 +98,7 @@ enum LLVMRustAttribute {\n     StructRet       = 16,\n     UWTable         = 17,\n     ZExt            = 18,\n+    InReg           = 19,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}]}