{"sha": "572c0d553f2bd1b934b08fe240310112369a5c76", "node_id": "C_kwDOAAsO6NoAKDU3MmMwZDU1M2YyYmQxYjkzNGIwOGZlMjQwMzEwMTEyMzY5YTVjNzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-29T02:29:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-29T02:29:14Z"}, "message": "Auto merge of #110643 - pietroalbini:pa-bump-stage0, r=Mark-Simulacrum\n\n[master] Bump stage0\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "bac4908eec32a9083cfd771ec972953d0ba90747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bac4908eec32a9083cfd771ec972953d0ba90747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572c0d553f2bd1b934b08fe240310112369a5c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572c0d553f2bd1b934b08fe240310112369a5c76", "html_url": "https://github.com/rust-lang/rust/commit/572c0d553f2bd1b934b08fe240310112369a5c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572c0d553f2bd1b934b08fe240310112369a5c76/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a96158b53529c2dd03bb4a637d8589ac6f5376f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a96158b53529c2dd03bb4a637d8589ac6f5376f", "html_url": "https://github.com/rust-lang/rust/commit/7a96158b53529c2dd03bb4a637d8589ac6f5376f"}, {"sha": "a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "html_url": "https://github.com/rust-lang/rust/commit/a7bb8c78517102e375d4d04e5b2cac4f121c56e5"}], "stats": {"total": 1626, "additions": 606, "deletions": 1020}, "files": [{"sha": "3b9fc5e9a513cb19a0742b7c8b33e38400f461e5", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -239,7 +239,7 @@ declare_features! (\n     /// Allows using `Self` and associated types in struct expressions and patterns.\n     (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n     /// Allows using the MOVBE target feature.\n-    (accepted, movbe_target_feature, \"CURRENT_RUSTC_VERSION\", Some(44839), None),\n+    (accepted, movbe_target_feature, \"1.70.0\", Some(44839), None),\n     /// Allows patterns with concurrent by-move and by-ref bindings.\n     /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n     (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),"}, {"sha": "052d312d9a0d5bea7a06d5b396c927905147aa4b", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -417,7 +417,7 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n     /// Allows `impl Trait` to be used inside associated types (RFC 2515).\n-    (active, impl_trait_in_assoc_type, \"CURRENT_RUSTC_VERSION\", Some(63063), None),\n+    (active, impl_trait_in_assoc_type, \"1.70.0\", Some(63063), None),\n     /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n     (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n     /// Allows referencing `Self` and projections in impl-trait.\n@@ -498,7 +498,7 @@ declare_features! (\n     /// Allows return-position `impl Trait` in traits.\n     (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n     /// Allows bounding the return type of AFIT/RPITIT.\n-    (incomplete, return_type_notation, \"CURRENT_RUSTC_VERSION\", Some(109417), None),\n+    (incomplete, return_type_notation, \"1.70.0\", Some(109417), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks.\n@@ -521,7 +521,7 @@ declare_features! (\n     /// Dyn upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n     (active, trait_upcasting, \"1.56.0\", Some(65991), None),\n     /// Allows for transmuting between arrays with sizes that contain generic consts.\n-    (active, transmute_generic_consts, \"CURRENT_RUSTC_VERSION\", Some(109929), None),\n+    (active, transmute_generic_consts, \"1.70.0\", Some(109929), None),\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n     /// Allows inconsistent bounds in where clauses."}, {"sha": "8bca24b2bf01e1bd016fcbeb3deaa171d9c15705", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -53,7 +53,7 @@ declare_features! (\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n     /// Allows using the `box $expr` syntax.\n-    (removed, box_syntax, \"CURRENT_RUSTC_VERSION\", Some(49733), None, Some(\"replaced with `#[rustc_box]`\")),\n+    (removed, box_syntax, \"1.70.0\", Some(49733), None, Some(\"replaced with `#[rustc_box]`\")),\n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n     (removed, capture_disjoint_fields, \"1.49.0\", Some(53488), None, Some(\"stabilized in Rust 2021\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "2c089bb31490050cfc9f83b7ece52bd9efd8178b", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -853,7 +853,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.into_sorted_vec(), [-10, 2, 4])\n     /// ```\n-    #[stable(feature = \"binary_heap_retain\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"binary_heap_retain\", since = \"1.70.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         F: FnMut(&T) -> bool,\n@@ -1463,7 +1463,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for IntoIter<T> {\n     /// Creates an empty `binary_heap::IntoIter`.\n     ///"}, {"sha": "afdc998172d3509c5a3efbd6e5384ae005a54a17", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -362,7 +362,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<'a, K: 'a, V: 'a> Default for Iter<'a, K, V> {\n     /// Creates an empty `btree_map::Iter`.\n     ///\n@@ -400,7 +400,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<'a, K: 'a, V: 'a> Default for IterMut<'a, K, V> {\n     /// Creates an empty `btree_map::IterMut`.\n     ///\n@@ -448,7 +448,7 @@ impl<K: Debug, V: Debug, A: Allocator + Clone> Debug for IntoIter<K, V, A> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V, A> Default for IntoIter<K, V, A>\n where\n     A: Allocator + Default + Clone,\n@@ -1812,7 +1812,7 @@ impl<K, V> Clone for Keys<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V> Default for Keys<'_, K, V> {\n     /// Creates an empty `btree_map::Keys`.\n     ///\n@@ -1867,7 +1867,7 @@ impl<K, V> Clone for Values<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V> Default for Values<'_, K, V> {\n     /// Creates an empty `btree_map::Values`.\n     ///\n@@ -2017,7 +2017,7 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V> Default for Range<'_, K, V> {\n     /// Creates an empty `btree_map::Range`.\n     ///\n@@ -2107,7 +2107,7 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoKeys<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoKeys<K, V, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V, A> Default for IntoKeys<K, V, A>\n where\n     A: Allocator + Default + Clone,\n@@ -2158,7 +2158,7 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoValues<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoValues<K, V, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V, A> Default for IntoValues<K, V, A>\n where\n     A: Allocator + Default + Clone,"}, {"sha": "da952a13f1e91d59492157ba0e8d57cc5eb36a75", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1538,7 +1538,7 @@ impl<T, A: Allocator + Clone> Iterator for IntoIter<T, A> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for Iter<'_, T> {\n     /// Creates an empty `btree_set::Iter`.\n     ///\n@@ -1568,7 +1568,7 @@ impl<T, A: Allocator + Clone> ExactSizeIterator for IntoIter<T, A> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T, A: Allocator + Clone> FusedIterator for IntoIter<T, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T, A> Default for IntoIter<T, A>\n where\n     A: Allocator + Default + Clone,\n@@ -1623,7 +1623,7 @@ impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Range<'_, T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for Range<'_, T> {\n     /// Creates an empty `btree_set::Range`.\n     ///"}, {"sha": "4cd34ac2fa74f1549fb510a99bc4442156d787fc", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1137,7 +1137,7 @@ impl<T> ExactSizeIterator for Iter<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Iter<'_, T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for Iter<'_, T> {\n     /// Creates an empty `linked_list::Iter`.\n     ///\n@@ -1205,7 +1205,7 @@ impl<T> ExactSizeIterator for IterMut<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IterMut<'_, T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for IterMut<'_, T> {\n     fn default() -> Self {\n         IterMut { head: None, tail: None, len: 0, marker: Default::default() }\n@@ -1915,7 +1915,7 @@ impl<T, A: Allocator> ExactSizeIterator for IntoIter<T, A> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for IntoIter<T> {\n     /// Creates an empty `linked_list::IntoIter`.\n     ///"}, {"sha": "ba035fb062ab1ec2c009cc9eebe75c5dca7e0e1e", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -693,7 +693,7 @@ impl<T> Rc<T> {\n     /// This is equivalent to `Rc::try_unwrap(this).ok()`. (Note that these are not equivalent for\n     /// [`Arc`](crate::sync::Arc), due to race conditions that do not apply to `Rc`.)\n     #[inline]\n-    #[stable(feature = \"rc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"rc_into_inner\", since = \"1.70.0\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         Rc::try_unwrap(this).ok()\n     }"}, {"sha": "24849d52dbbc7b7a6b7b14adff56eb190f68b34a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -793,7 +793,7 @@ impl<T> Arc<T> {\n     /// y_thread.join().unwrap();\n     /// ```\n     #[inline]\n-    #[stable(feature = \"arc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"arc_into_inner\", since = \"1.70.0\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         // Make sure that the ordinary `Drop` implementation isn\u2019t called as well\n         let mut this = mem::ManuallyDrop::new(this);"}, {"sha": "b2db2fdfd18f10345e9926365798589fb4d5179c", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -342,7 +342,7 @@ impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T, A> Default for IntoIter<T, A>\n where\n     A: Allocator + Default,"}, {"sha": "f69a1f94e8f743a96e7198e9709f17b1ad19fd89", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -247,7 +247,7 @@ mod once;\n \n #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub use lazy::LazyCell;\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub use once::OnceCell;\n \n /// A mutable memory location."}, {"sha": "5f06a7b07953d683ecc69bb9c2874827c07d5469", "filename": "library/core/src/cell/once.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -29,7 +29,7 @@ use crate::mem;\n /// assert_eq!(value, \"Hello, World!\");\n /// assert!(cell.get().is_some());\n /// ```\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub struct OnceCell<T> {\n     // Invariant: written to at most once.\n     inner: UnsafeCell<Option<T>>,\n@@ -39,8 +39,8 @@ impl<T> OnceCell<T> {\n     /// Creates a new empty cell.\n     #[inline]\n     #[must_use]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub const fn new() -> OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(None) }\n     }\n@@ -49,7 +49,7 @@ impl<T> OnceCell<T> {\n     ///\n     /// Returns `None` if the cell is empty.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get(&self) -> Option<&T> {\n         // SAFETY: Safe due to `inner`'s invariant\n         unsafe { &*self.inner.get() }.as_ref()\n@@ -59,7 +59,7 @@ impl<T> OnceCell<T> {\n     ///\n     /// Returns `None` if the cell is empty.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         self.inner.get_mut().as_mut()\n     }\n@@ -85,7 +85,7 @@ impl<T> OnceCell<T> {\n     /// assert!(cell.get().is_some());\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         // SAFETY: Safe because we cannot have overlapping mutable borrows\n         let slot = unsafe { &*self.inner.get() };\n@@ -125,7 +125,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(value, &92);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n         F: FnOnce() -> T,\n@@ -206,7 +206,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn into_inner(self) -> Option<T> {\n         // Because `into_inner` takes `self` by value, the compiler statically verifies\n         // that it is not currently borrowed. So it is safe to move out `Option<T>`.\n@@ -233,21 +233,21 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(cell.get(), None);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn take(&mut self) -> Option<T> {\n         mem::take(self).into_inner()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> Default for OnceCell<T> {\n     #[inline]\n     fn default() -> Self {\n         Self::new()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get() {\n@@ -257,7 +257,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Clone> Clone for OnceCell<T> {\n     #[inline]\n     fn clone(&self) -> OnceCell<T> {\n@@ -272,18 +272,18 @@ impl<T: Clone> Clone for OnceCell<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: PartialEq> PartialEq for OnceCell<T> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.get() == other.get()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Eq> Eq for OnceCell<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> From<T> for OnceCell<T> {\n     /// Creates a new `OnceCell<T>` which already contains the given `value`.\n     #[inline]\n@@ -293,5 +293,5 @@ impl<T> From<T> for OnceCell<T> {\n }\n \n // Just like for `Cell<T>` this isn't needed, but results in nicer error messages.\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> !Sync for OnceCell<T> {}"}, {"sha": "e193332f155be3ff1e9691ea73ea7ad18e540d7a", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -303,7 +303,6 @@ impl<'a> Arguments<'a> {\n \n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n-    #[cfg(not(bootstrap))]\n     #[inline]\n     pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {\n         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n@@ -312,16 +311,6 @@ impl<'a> Arguments<'a> {\n         Arguments { pieces, fmt: None, args }\n     }\n \n-    #[cfg(bootstrap)]\n-    #[inline]\n-    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n-    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {\n-        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n-            panic!(\"invalid args\");\n-        }\n-        Arguments { pieces, fmt: None, args }\n-    }\n-\n     /// This function is used to specify nonstandard formatting parameters.\n     ///\n     /// An `rt::UnsafeArg` is required because the following invariants must be held"}, {"sha": "7a8d0cacdece5e83de80b9001b463186375b26a5", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -70,7 +70,6 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]\n-#[cfg_attr(bootstrap, lang = \"identity_future\")]\n pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n     f\n }"}, {"sha": "79bd0bbb0c19dcbe4c2b4b21f7e144a3dc628038", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1823,14 +1823,12 @@ extern \"rust-intrinsic\" {\n     /// with an even least significant digit.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[cfg(not(bootstrap))]\n     #[rustc_nounwind]\n     pub fn roundevenf32(x: f32) -> f32;\n     /// Returns the nearest integer to an `f64`. Rounds half-way cases to the number\n     /// with an even least significant digit.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[cfg(not(bootstrap))]\n     #[rustc_nounwind]\n     pub fn roundevenf64(x: f64) -> f64;\n \n@@ -2262,7 +2260,6 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the argument is a local without\n     /// projections (`read_via_copy(p)`, not `read_via_copy(*p)`) so that it\n     /// trivially obeys runtime-MIR rules about derefs in operands.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[rustc_nounwind]\n     pub fn read_via_copy<T>(p: *const T) -> T;\n@@ -2470,7 +2467,6 @@ extern \"rust-intrinsic\" {\n     /// This method creates a pointer to any `Some` value. If the argument is\n     /// `None`, an invalid within-bounds pointer (that is still acceptable for\n     /// constructing an empty slice) is returned.\n-    #[cfg(not(bootstrap))]\n     #[rustc_nounwind]\n     pub fn option_payload_ptr<T>(arg: *const Option<T>) -> *const T;\n }"}, {"sha": "75727c3a24020b7fd4b2e8ae383c7451874ecc41", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -273,7 +273,7 @@ where\n {\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<A: Default, B: Default> Default for Chain<A, B> {\n     /// Creates a `Chain` from the default values for `A` and `B`.\n     ///"}, {"sha": "d3cceb8d4ad5445350183e19f289134520e7b74f", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -154,7 +154,7 @@ where\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Cloned<I> {\n     /// Creates a `Cloned` iterator from the default value of `I`\n     /// ```"}, {"sha": "8f6b2904eae4246a2fe60b647ce3f3058dadb7a3", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -242,7 +242,7 @@ where\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Copied<I> {\n     /// Creates a `Copied` iterator from the default value of `I`\n     /// ```"}, {"sha": "00c1c377bf9c2173fa50f55c4309c88effe19385", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -263,7 +263,7 @@ where\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Enumerate<I> {\n     /// Creates an `Enumerate` iterator from the default value of `I`\n     /// ```"}, {"sha": "520ec9abcf0dcbb675756adedc40043535c8e91d", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -289,7 +289,7 @@ where\n {\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I> Default for Flatten<I>\n where\n     I: Default + Iterator<Item: IntoIterator>,"}, {"sha": "b1fa4f92117b157acab5085f96ed374d01ff2728", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -181,7 +181,7 @@ where\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Fuse<I> {\n     /// Creates a `Fuse` iterator from the default value of `I`.\n     ///"}, {"sha": "4aaf7c61f50d6b60c14c449dcb5508835d202bd8", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -137,7 +137,7 @@ impl<I> FusedIterator for Rev<I> where I: FusedIterator + DoubleEndedIterator {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I> TrustedLen for Rev<I> where I: TrustedLen + DoubleEndedIterator {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Rev<I> {\n     /// Creates a `Rev` iterator from the default value of `I`\n     /// ```"}, {"sha": "40789cb3049de37d375f66531c7e79237817c091", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -929,7 +929,6 @@ mod copy_impls {\n     reason = \"internal trait for implementing various traits for all function pointers\"\n )]\n #[lang = \"fn_ptr_trait\"]\n-#[cfg(not(bootstrap))]\n #[rustc_deny_explicit_impl]\n pub trait FnPtr: Copy + Clone {\n     /// Returns the address of the function pointer."}, {"sha": "b80bfe1c92df1d5190c7fd51e9a9548ad8b96cc3", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1162,7 +1162,7 @@ macro_rules! nonzero_min_max_unsigned {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), 1\", stringify!($Int), \");\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MIN: Self = Self::new(1).unwrap();\n \n                 /// The largest value that can be represented by this non-zero\n@@ -1175,7 +1175,7 @@ macro_rules! nonzero_min_max_unsigned {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n             }\n         )+\n@@ -1200,7 +1200,7 @@ macro_rules! nonzero_min_max_signed {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), \", stringify!($Int), \"::MIN);\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MIN: Self = Self::new(<$Int>::MIN).unwrap();\n \n                 /// The largest value that can be represented by this non-zero\n@@ -1217,7 +1217,7 @@ macro_rules! nonzero_min_max_signed {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n             }\n         )+"}, {"sha": "73ffc3f36ca75e50116eebca03384cb515e59b5f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -558,7 +558,7 @@ use crate::{\n /// The `Option` type. See [the module level documentation](self) for more.\n #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]\n #[rustc_diagnostic_item = \"Option\"]\n-#[cfg_attr(not(bootstrap), lang = \"Option\")]\n+#[lang = \"Option\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value.\n@@ -615,7 +615,7 @@ impl<T> Option<T> {\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[stable(feature = \"is_some_and\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n     pub fn is_some_and(self, f: impl FnOnce(T) -> bool) -> bool {\n         match self {\n             None => false,\n@@ -765,13 +765,6 @@ impl<T> Option<T> {\n     #[must_use]\n     #[unstable(feature = \"option_as_slice\", issue = \"108545\")]\n     pub fn as_slice(&self) -> &[T] {\n-        #[cfg(bootstrap)]\n-        match self {\n-            Some(value) => slice::from_ref(value),\n-            None => &[],\n-        }\n-\n-        #[cfg(not(bootstrap))]\n         // SAFETY: When the `Option` is `Some`, we're using the actual pointer\n         // to the payload, with a length of 1, so this is equivalent to\n         // `slice::from_ref`, and thus is safe.\n@@ -832,13 +825,6 @@ impl<T> Option<T> {\n     #[must_use]\n     #[unstable(feature = \"option_as_slice\", issue = \"108545\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n-        #[cfg(bootstrap)]\n-        match self {\n-            Some(value) => slice::from_mut(value),\n-            None => &mut [],\n-        }\n-\n-        #[cfg(not(bootstrap))]\n         // SAFETY: When the `Option` is `Some`, we're using the actual pointer\n         // to the payload, with a length of 1, so this is equivalent to\n         // `slice::from_mut`, and thus is safe."}, {"sha": "81be3fb22eec4c642821cecfd1d37f1e11db5b88", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -165,7 +165,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[track_caller]\n-#[cfg_attr(not(bootstrap), lang = \"panic_misaligned_pointer_dereference\")] // needed by codegen for panic on misaligned pointer deref\n+#[lang = \"panic_misaligned_pointer_dereference\"] // needed by codegen for panic on misaligned pointer deref\n fn panic_misaligned_pointer_dereference(required: usize, found: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()"}, {"sha": "08ffc407eadb1e0e4a6531004ab67592208b2f34", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 25, "deletions": 50, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1,8 +1,7 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -64,8 +63,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n+#[rustc_doc_primitive = \"never\"]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -276,8 +274,7 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -401,8 +398,7 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -464,8 +460,7 @@ impl Copy for () {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -581,8 +576,7 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n+#[rustc_doc_primitive = \"array\"]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -783,8 +777,7 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n+#[rustc_doc_primitive = \"slice\"]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -876,8 +869,7 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n+#[rustc_doc_primitive = \"str\"]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -944,8 +936,7 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n+#[rustc_doc_primitive = \"tuple\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1088,8 +1079,7 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n+#[rustc_doc_primitive = \"f32\"]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1155,8 +1145,7 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n+#[rustc_doc_primitive = \"f64\"]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1171,78 +1160,67 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n+#[rustc_doc_primitive = \"i8\"]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n+#[rustc_doc_primitive = \"i16\"]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n+#[rustc_doc_primitive = \"i64\"]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n+#[rustc_doc_primitive = \"i128\"]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n+#[rustc_doc_primitive = \"u16\"]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n+#[rustc_doc_primitive = \"u32\"]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n+#[rustc_doc_primitive = \"u64\"]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n+#[rustc_doc_primitive = \"u128\"]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n+#[rustc_doc_primitive = \"isize\"]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1252,8 +1230,7 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1263,8 +1240,7 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1396,8 +1372,7 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n+#[rustc_doc_primitive = \"fn\"]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "13e546497f27d649a8f1fb749f1e09eda7f931ae", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 36, "deletions": 207, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -374,6 +374,7 @@ use crate::hash;\n use crate::intrinsics::{\n     self, assert_unsafe_precondition, is_aligned_and_not_null, is_nonoverlapping,\n };\n+use crate::marker::FnPtr;\n \n use crate::mem::{self, MaybeUninit};\n \n@@ -1167,26 +1168,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n             \"ptr::read requires that the pointer argument is aligned and non-null\",\n             [T](src: *const T) => is_aligned_and_not_null(src)\n         );\n-\n-        #[cfg(bootstrap)]\n-        {\n-            // We are calling the intrinsics directly to avoid function calls in the\n-            // generated code as `intrinsics::copy_nonoverlapping` is a wrapper function.\n-            extern \"rust-intrinsic\" {\n-                #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n-                fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n-            }\n-\n-            // `src` cannot overlap `tmp` because `tmp` was just allocated on\n-            // the stack as a separate allocated object.\n-            let mut tmp = MaybeUninit::<T>::uninit();\n-            copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-            tmp.assume_init()\n-        }\n-        #[cfg(not(bootstrap))]\n-        {\n-            crate::intrinsics::read_via_copy(src)\n-        }\n+        crate::intrinsics::read_via_copy(src)\n     }\n }\n \n@@ -1897,205 +1879,52 @@ pub fn hash<T: ?Sized, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n     hashee.hash(into);\n }\n \n-#[cfg(bootstrap)]\n-mod old_fn_ptr_impl {\n-    use super::*;\n-    // If this is a unary fn pointer, it adds a doc comment.\n-    // Otherwise, it hides the docs entirely.\n-    macro_rules! maybe_fnptr_doc {\n-        (@ #[$meta:meta] $item:item) => {\n-            #[doc(hidden)]\n-            #[$meta]\n-            $item\n-        };\n-        ($a:ident @ #[$meta:meta] $item:item) => {\n-            #[doc(fake_variadic)]\n-            #[doc = \"This trait is implemented for function pointers with up to twelve arguments.\"]\n-            #[$meta]\n-            $item\n-        };\n-        ($a:ident $($rest_a:ident)+ @ #[$meta:meta] $item:item) => {\n-            #[doc(hidden)]\n-            #[$meta]\n-            $item\n-        };\n-    }\n-\n-    // FIXME(strict_provenance_magic): function pointers have buggy codegen that\n-    // necessitates casting to a usize to get the backend to do the right thing.\n-    // for now I will break AVR to silence *a billion* lints. We should probably\n-    // have a proper \"opaque function pointer type\" to handle this kind of thing.\n-\n-    // Impls for function pointers\n-    macro_rules! fnptr_impls_safety_abi {\n-        ($FnTy: ty, $($Arg: ident),*) => {\n-        fnptr_impls_safety_abi! { #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")] $FnTy, $($Arg),* }\n-    };\n-    (@c_unwind $FnTy: ty, $($Arg: ident),*) => {\n-        fnptr_impls_safety_abi! { #[unstable(feature = \"c_unwind\", issue = \"74990\")] $FnTy, $($Arg),* }\n-    };\n-    (#[$meta:meta] $FnTy: ty, $($Arg: ident),*) => {\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> PartialEq for $FnTy {\n-                    #[inline]\n-                    fn eq(&self, other: &Self) -> bool {\n-                        *self as usize == *other as usize\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> Eq for $FnTy {}\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> PartialOrd for $FnTy {\n-                    #[inline]\n-                    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-                        (*self as usize).partial_cmp(&(*other as usize))\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> Ord for $FnTy {\n-                    #[inline]\n-                    fn cmp(&self, other: &Self) -> Ordering {\n-                        (*self as usize).cmp(&(*other as usize))\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> hash::Hash for $FnTy {\n-                    fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n-                        state.write_usize(*self as usize)\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n-                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                        fmt::pointer_fmt_inner(*self as usize, f)\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n-                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                        fmt::pointer_fmt_inner(*self as usize, f)\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    macro_rules! fnptr_impls_args {\n-        ($($Arg: ident),+) => {\n-            fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        };\n-        () => {\n-            // No variadic functions with 0 parameters\n-            fnptr_impls_safety_abi! { extern \"Rust\" fn() -> Ret, }\n-            fnptr_impls_safety_abi! { extern \"C\" fn() -> Ret, }\n-        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn() -> Ret, }\n-            fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn() -> Ret, }\n-            fnptr_impls_safety_abi! { unsafe extern \"C\" fn() -> Ret, }\n-        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn() -> Ret, }\n-        };\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> PartialEq for F {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.addr() == other.addr()\n     }\n-\n-    fnptr_impls_args! {}\n-    fnptr_impls_args! { T }\n-    fnptr_impls_args! { A, B }\n-    fnptr_impls_args! { A, B, C }\n-    fnptr_impls_args! { A, B, C, D }\n-    fnptr_impls_args! { A, B, C, D, E }\n-    fnptr_impls_args! { A, B, C, D, E, F }\n-    fnptr_impls_args! { A, B, C, D, E, F, G }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> Eq for F {}\n \n-#[cfg(not(bootstrap))]\n-mod new_fn_ptr_impl {\n-    use super::*;\n-    use crate::marker::FnPtr;\n-\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> PartialEq for F {\n-        #[inline]\n-        fn eq(&self, other: &Self) -> bool {\n-            self.addr() == other.addr()\n-        }\n-    }\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> Eq for F {}\n-\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> PartialOrd for F {\n-        #[inline]\n-        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-            self.addr().partial_cmp(&other.addr())\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> PartialOrd for F {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        self.addr().partial_cmp(&other.addr())\n     }\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> Ord for F {\n-        #[inline]\n-        fn cmp(&self, other: &Self) -> Ordering {\n-            self.addr().cmp(&other.addr())\n-        }\n+}\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> Ord for F {\n+    #[inline]\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        self.addr().cmp(&other.addr())\n     }\n+}\n \n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> hash::Hash for F {\n-        fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n-            state.write_usize(self.addr() as _)\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> hash::Hash for F {\n+    fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n+        state.write_usize(self.addr() as _)\n     }\n+}\n \n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> fmt::Pointer for F {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            fmt::pointer_fmt_inner(self.addr() as _, f)\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> fmt::Pointer for F {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::pointer_fmt_inner(self.addr() as _, f)\n     }\n+}\n \n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> fmt::Debug for F {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            fmt::pointer_fmt_inner(self.addr() as _, f)\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> fmt::Debug for F {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::pointer_fmt_inner(self.addr() as _, f)\n     }\n }\n+\n /// Create a `const` raw pointer to a place, without creating an intermediate reference.\n ///\n /// Creating a reference with `&`/`&mut` is only allowed if the pointer is properly aligned"}, {"sha": "61fcdf58b4fcbae9af5383e0df443ce0a82fe492", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -473,7 +473,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// (Note that this example artificially demonstrates a use of this method,\n     /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)\n-    #[stable(feature = \"nonnull_slice_from_raw_parts\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"nonnull_slice_from_raw_parts\", since = \"1.70.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_from_raw_parts_mut\", issue = \"67456\")]\n     #[must_use]\n     #[inline]"}, {"sha": "1ee270f4c039863136e4e1a18091d1db752b0290", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -555,7 +555,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[stable(feature = \"is_some_and\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n     pub fn is_ok_and(self, f: impl FnOnce(T) -> bool) -> bool {\n         match self {\n             Err(_) => false,\n@@ -600,7 +600,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[stable(feature = \"is_some_and\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n     pub fn is_err_and(self, f: impl FnOnce(E) -> bool) -> bool {\n         match self {\n             Ok(_) => false,"}, {"sha": "0a30033778b3835810f24fb2031d202b0dc6aa1a", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -394,7 +394,7 @@ macro_rules! iterator {\n             }\n         }\n \n-        #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"default_iters\", since = \"1.70.0\")]\n         impl<T> Default for $name<'_, T> {\n             /// Creates an empty slice iterator.\n             ///"}, {"sha": "236b7f423d6be68dd881635d2d89f319ac2e3196", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -970,8 +970,8 @@ impl AtomicBool {\n     /// # }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n     pub const fn as_ptr(&self) -> *mut bool {\n         self.v.get().cast()\n     }\n@@ -1905,8 +1905,8 @@ impl<T> AtomicPtr<T> {\n     /// }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n     pub const fn as_ptr(&self) -> *mut *mut T {\n         self.p.get()\n     }\n@@ -2854,8 +2854,8 @@ macro_rules! atomic_int {\n             /// # }\n             /// ```\n             #[inline]\n-            #[stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n-            #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n+            #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n+            #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n             pub const fn as_ptr(&self) -> *mut $int_type {\n                 self.v.get()\n             }"}, {"sha": "9e09ce337bc0ec31c3194f865c030fee2e307f16", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -268,7 +268,7 @@ pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::set_output_capture;\n-#[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n pub use self::stdio::IsTerminal;\n #[unstable(feature = \"print_internals\", issue = \"none\")]\n pub use self::stdio::{_eprint, _print};"}, {"sha": "9098d36ee5381b42f8268e3ebfe134843b62bb55", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1047,7 +1047,7 @@ pub(crate) fn attempt_print_to_stderr(args: fmt::Arguments<'_>) {\n }\n \n /// Trait to determine if a descriptor/handle refers to a terminal/tty.\n-#[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n pub trait IsTerminal: crate::sealed::Sealed {\n     /// Returns `true` if the descriptor/handle refers to a terminal/tty.\n     ///\n@@ -1063,7 +1063,7 @@ pub trait IsTerminal: crate::sealed::Sealed {\n     /// Note that this [may change in the future][changes].\n     ///\n     /// [changes]: io#platform-specific-behavior\n-    #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n     fn is_terminal(&self) -> bool;\n }\n \n@@ -1072,7 +1072,7 @@ macro_rules! impl_is_terminal {\n         #[unstable(feature = \"sealed\", issue = \"none\")]\n         impl crate::sealed::Sealed for $t {}\n \n-        #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n         impl IsTerminal for $t {\n             #[inline]\n             fn is_terminal(&self) -> bool {"}, {"sha": "fe40d6319c2ff4a5274a015f625e98c88faec15c", "filename": "library/std/src/os/android/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1,8 +1,8 @@\n //! Android-specific networking functionality.\n \n-#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "2180d2974d5ae9447a34a011951b36061e938ba7", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -201,7 +201,7 @@ macro_rules! impl_is_terminal {\n         #[unstable(feature = \"sealed\", issue = \"none\")]\n         impl crate::sealed::Sealed for $t {}\n \n-        #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n         impl crate::io::IsTerminal for $t {\n             #[inline]\n             fn is_terminal(&self) -> bool {"}, {"sha": "c8e734d740b68eac4eea7ad5329f1773d4764055", "filename": "library/std/src/os/linux/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1,8 +1,8 @@\n //! Linux-specific networking functionality.\n \n-#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "aed772056e1b3593225ae1a55ca1c0450c4b4374", "filename": "library/std/src/os/net/linux_ext/addr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -4,7 +4,7 @@ use crate::os::unix::net::SocketAddr;\n use crate::sealed::Sealed;\n \n /// Platform-specific extensions to [`SocketAddr`].\n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub trait SocketAddrExt: Sealed {\n     /// Creates a Unix socket address in the abstract namespace.\n     ///\n@@ -37,7 +37,7 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     fn from_abstract_name<N>(name: N) -> crate::io::Result<SocketAddr>\n     where\n         N: AsRef<[u8]>;\n@@ -59,6 +59,6 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     fn as_abstract_name(&self) -> Option<&[u8]>;\n }"}, {"sha": "62e78cc50d4ab374b75ce03ec695965cbcec6219", "filename": "library/std/src/os/net/linux_ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -2,7 +2,7 @@\n \n #![doc(cfg(any(target_os = \"linux\", target_os = \"android\")))]\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub(crate) mod addr;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "6c99e8c36203ab01e4d0eb24f8c93817d6882ef2", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -245,12 +245,12 @@ impl SocketAddr {\n     }\n }\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n impl Sealed for SocketAddr {}\n \n #[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n impl linux_ext::addr::SocketAddrExt for SocketAddr {\n     fn as_abstract_name(&self) -> Option<&[u8]> {\n         if let AddressKind::Abstract(name) = self.address() { Some(name) } else { None }"}, {"sha": "34db54235f1c23aee9c65a35376f1259f0c61f8f", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -118,7 +118,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixDatagram> {\n         unsafe {\n             let socket = UnixDatagram::unbound()?;\n@@ -233,7 +233,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn connect_addr(&self, socket_addr: &SocketAddr) -> io::Result<()> {\n         unsafe {\n             cvt(libc::connect(\n@@ -532,7 +532,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn send_to_addr(&self, buf: &[u8], socket_addr: &SocketAddr) -> io::Result<usize> {\n         unsafe {\n             let count = cvt(libc::sendto("}, {"sha": "5be8aebc70fd5e736c5774db2d884c0f1c7d747b", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -106,7 +106,7 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixListener> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "bf2a51b5edb8890d15304a21c8372931f18d7423", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -122,7 +122,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ````\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn connect_addr(socket_addr: &SocketAddr) -> io::Result<UnixStream> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "9b77cd8321be7a6e152ba092e7f64c2682501400", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -389,7 +389,7 @@ macro_rules! impl_is_terminal {\n         #[unstable(feature = \"sealed\", issue = \"none\")]\n         impl crate::sealed::Sealed for $t {}\n \n-        #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n         impl crate::io::IsTerminal for $t {\n             #[inline]\n             fn is_terminal(&self) -> bool {"}, {"sha": "5b22333cc354f9bdfd5d180c92a03d4f8c688369", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1509,7 +1509,7 @@ impl PathBuf {\n     /// path.as_mut_os_string().push(\"baz\");\n     /// assert_eq!(path, Path::new(\"/foo/barbaz\"));\n     /// ```\n-    #[stable(feature = \"path_as_mut_os_str\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"path_as_mut_os_str\", since = \"1.70.0\")]\n     #[must_use]\n     #[inline]\n     pub fn as_mut_os_string(&mut self) -> &mut OsString {\n@@ -2074,7 +2074,7 @@ impl Path {\n     /// path.as_mut_os_str().make_ascii_lowercase();\n     /// assert_eq!(path, Path::new(\"foo.txt\"));\n     /// ```\n-    #[stable(feature = \"path_as_mut_os_str\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"path_as_mut_os_str\", since = \"1.70.0\")]\n     #[must_use]\n     #[inline]\n     pub fn as_mut_os_str(&mut self) -> &mut OsStr {"}, {"sha": "08ffc407eadb1e0e4a6531004ab67592208b2f34", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 25, "deletions": 50, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1,8 +1,7 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -64,8 +63,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n+#[rustc_doc_primitive = \"never\"]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -276,8 +274,7 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -401,8 +398,7 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -464,8 +460,7 @@ impl Copy for () {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -581,8 +576,7 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n+#[rustc_doc_primitive = \"array\"]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -783,8 +777,7 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n+#[rustc_doc_primitive = \"slice\"]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -876,8 +869,7 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n+#[rustc_doc_primitive = \"str\"]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -944,8 +936,7 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n+#[rustc_doc_primitive = \"tuple\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1088,8 +1079,7 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n+#[rustc_doc_primitive = \"f32\"]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1155,8 +1145,7 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n+#[rustc_doc_primitive = \"f64\"]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1171,78 +1160,67 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n+#[rustc_doc_primitive = \"i8\"]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n+#[rustc_doc_primitive = \"i16\"]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n+#[rustc_doc_primitive = \"i64\"]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n+#[rustc_doc_primitive = \"i128\"]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n+#[rustc_doc_primitive = \"u16\"]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n+#[rustc_doc_primitive = \"u32\"]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n+#[rustc_doc_primitive = \"u64\"]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n+#[rustc_doc_primitive = \"u128\"]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n+#[rustc_doc_primitive = \"isize\"]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1252,8 +1230,7 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1263,8 +1240,7 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1396,8 +1372,7 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n+#[rustc_doc_primitive = \"fn\"]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "f6a7c0a9f75494ef59b5d856a255d9341a2da4a8", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -177,7 +177,7 @@ pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n \n #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub use self::lazy_lock::LazyLock;\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub use self::once_lock::OnceLock;\n \n pub(crate) use self::remutex::{ReentrantMutex, ReentrantMutexGuard};"}, {"sha": "e83bc35ee9846b5a9f31355cc7e8161c307d82f5", "filename": "library/std/src/sync/once_lock.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -30,7 +30,7 @@ use crate::sync::Once;\n /// assert!(value.is_some());\n /// assert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n /// ```\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub struct OnceLock<T> {\n     once: Once,\n     // Whether or not the value is initialized is tracked by `once.is_completed()`.\n@@ -59,8 +59,8 @@ impl<T> OnceLock<T> {\n     /// Creates a new empty cell.\n     #[inline]\n     #[must_use]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub const fn new() -> OnceLock<T> {\n         OnceLock {\n             once: Once::new(),\n@@ -74,7 +74,7 @@ impl<T> OnceLock<T> {\n     /// Returns `None` if the cell is empty, or being initialized. This\n     /// method never blocks.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get(&self) -> Option<&T> {\n         if self.is_initialized() {\n             // Safe b/c checked is_initialized\n@@ -88,7 +88,7 @@ impl<T> OnceLock<T> {\n     ///\n     /// Returns `None` if the cell is empty. This method never blocks.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         if self.is_initialized() {\n             // Safe b/c checked is_initialized and we have a unique access\n@@ -124,7 +124,7 @@ impl<T> OnceLock<T> {\n     /// }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         let mut value = Some(value);\n         self.get_or_init(|| value.take().unwrap());\n@@ -162,7 +162,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(value, &92);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n         F: FnOnce() -> T,\n@@ -239,7 +239,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn into_inner(mut self) -> Option<T> {\n         self.take()\n     }\n@@ -264,7 +264,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.get(), None);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn take(&mut self) -> Option<T> {\n         if self.is_initialized() {\n             self.once = Once::new();\n@@ -333,17 +333,17 @@ impl<T> OnceLock<T> {\n // scoped thread B, which fills the cell, which is\n // then destroyed by A. That is, destructor observes\n // a sent value.\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n unsafe impl<T: Sync + Send> Sync for OnceLock<T> {}\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n unsafe impl<T: Send> Send for OnceLock<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: RefUnwindSafe + UnwindSafe> RefUnwindSafe for OnceLock<T> {}\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: UnwindSafe> UnwindSafe for OnceLock<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> Default for OnceLock<T> {\n     /// Creates a new empty cell.\n     ///\n@@ -362,7 +362,7 @@ impl<T> Default for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: fmt::Debug> fmt::Debug for OnceLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get() {\n@@ -372,7 +372,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Clone> Clone for OnceLock<T> {\n     #[inline]\n     fn clone(&self) -> OnceLock<T> {\n@@ -387,7 +387,7 @@ impl<T: Clone> Clone for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> From<T> for OnceLock<T> {\n     /// Create a new cell with its contents set to `value`.\n     ///\n@@ -414,18 +414,18 @@ impl<T> From<T> for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: PartialEq> PartialEq for OnceLock<T> {\n     #[inline]\n     fn eq(&self, other: &OnceLock<T>) -> bool {\n         self.get() == other.get()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Eq> Eq for OnceLock<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n unsafe impl<#[may_dangle] T> Drop for OnceLock<T> {\n     #[inline]\n     fn drop(&mut self) {"}, {"sha": "447044a798ba61c46f2ed525e86840aa0b5a71d7", "filename": "library/std/src/sys/common/thread_local/fast_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -11,7 +11,7 @@ use crate::{fmt, mem, panic};\n pub macro thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(bootstrap), inline)]\n+        #[inline]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -78,7 +78,7 @@ pub macro thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n-            #[cfg_attr(not(bootstrap), inline)]\n+            #[inline]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}, {"sha": "d004897df281a9e46b42f18b04d0c9c421aa416d", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -11,7 +11,7 @@ use crate::{fmt, marker, panic, ptr};\n pub macro thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(bootstrap), inline)]\n+        #[inline]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,"}, {"sha": "8572d1c20ce7e3c0cc3ddbbb66d076f0daad09dd", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -69,30 +69,14 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n             name,\n             ignore,\n             ignore_message,\n-            #[cfg(not(bootstrap))]\n             source_file,\n-            #[cfg(not(bootstrap))]\n             start_line,\n-            #[cfg(not(bootstrap))]\n             start_col,\n-            #[cfg(not(bootstrap))]\n             end_line,\n-            #[cfg(not(bootstrap))]\n             end_col,\n             ..\n         } = desc;\n \n-        #[cfg(bootstrap)]\n-        let source_file = \"\";\n-        #[cfg(bootstrap)]\n-        let start_line = 0;\n-        #[cfg(bootstrap)]\n-        let start_col = 0;\n-        #[cfg(bootstrap)]\n-        let end_line = 0;\n-        #[cfg(bootstrap)]\n-        let end_col = 0;\n-\n         self.writeln_message(&format!(\n             r#\"{{ \"type\": \"{test_type}\", \"event\": \"discovered\", \"name\": \"{}\", \"ignore\": {ignore}, \"ignore_message\": \"{}\", \"source_path\": \"{}\", \"start_line\": {start_line}, \"start_col\": {start_col}, \"end_line\": {end_line}, \"end_col\": {end_col} }}\"#,\n             EscapedString(name.as_slice()),"}, {"sha": "c34583e69597445cb0f6f3b770797aa8c12489fc", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -63,15 +63,10 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"1\"),\n                 ignore: true,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -85,15 +80,10 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"2\"),\n                 ignore: false,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -115,15 +105,10 @@ pub fn do_not_run_ignored_tests() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -148,15 +133,10 @@ pub fn ignored_tests_result_in_ignored() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -183,15 +163,10 @@ fn test_should_panic() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n@@ -218,15 +193,10 @@ fn test_should_panic_good_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             compile_fail: false,\n@@ -258,15 +228,10 @@ fn test_should_panic_bad_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n@@ -302,15 +267,10 @@ fn test_should_panic_non_string_message_type() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n@@ -340,15 +300,10 @@ fn test_should_panic_but_succeeds() {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic,\n                 compile_fail: false,\n@@ -378,15 +333,10 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -425,15 +375,10 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -474,15 +419,10 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         name: StaticTestName(\"whatever\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -596,15 +536,10 @@ pub fn exclude_should_panic_option() {\n             name: StaticTestName(\"3\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n@@ -630,15 +565,10 @@ pub fn exact_filter_match() {\n                     name: StaticTestName(name),\n                     ignore: false,\n                     ignore_message: None,\n-                    #[cfg(not(bootstrap))]\n                     source_file: \"\",\n-                    #[cfg(not(bootstrap))]\n                     start_line: 0,\n-                    #[cfg(not(bootstrap))]\n                     start_col: 0,\n-                    #[cfg(not(bootstrap))]\n                     end_line: 0,\n-                    #[cfg(not(bootstrap))]\n                     end_col: 0,\n                     should_panic: ShouldPanic::No,\n                     compile_fail: false,\n@@ -731,15 +661,10 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n                 name: DynTestName((*name).clone()),\n                 ignore: false,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -870,15 +795,10 @@ pub fn test_bench_no_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -903,15 +823,10 @@ pub fn test_bench_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -929,15 +844,10 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -949,15 +859,10 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -1006,15 +911,10 @@ fn test_dyn_bench_returning_err_fails_when_run_as_test() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,"}, {"sha": "e79914dbf4b213bebf87bc7f6c1b933e30c6fc42", "filename": "library/test/src/types.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -119,15 +119,10 @@ pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n     pub ignore_message: Option<&'static str>,\n-    #[cfg(not(bootstrap))]\n     pub source_file: &'static str,\n-    #[cfg(not(bootstrap))]\n     pub start_line: usize,\n-    #[cfg(not(bootstrap))]\n     pub start_col: usize,\n-    #[cfg(not(bootstrap))]\n     pub end_line: usize,\n-    #[cfg(not(bootstrap))]\n     pub end_col: usize,\n     pub should_panic: options::ShouldPanic,\n     pub compile_fail: bool,"}, {"sha": "14e1328171b9a5aa9506dc1455951578aea7839a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -131,8 +131,7 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     /* Extra values not defined in the built-in targets yet, but used in std */\n     (Some(Mode::Std), \"target_env\", Some(&[\"libnx\"])),\n     // (Some(Mode::Std), \"target_os\", Some(&[])),\n-    // #[cfg(bootstrap)] loongarch64\n-    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\", \"loongarch64\"])),\n+    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\"])),\n     /* Extra names used by dependencies */\n     // FIXME: Used by serde_json, but we should not be triggering on external dependencies.\n     (Some(Mode::Rustc), \"no_btreemap_remove_entry\", None),\n@@ -152,8 +151,6 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     // Needed to avoid the need to copy windows.lib into the sysroot.\n     (Some(Mode::Rustc), \"windows_raw_dylib\", None),\n     (Some(Mode::ToolRustc), \"windows_raw_dylib\", None),\n-    // #[cfg(bootstrap)] ohos\n-    (Some(Mode::Std), \"target_env\", Some(&[\"ohos\"])),\n ];\n \n /// A structure representing a Rust compiler."}, {"sha": "575d8ee65b7ba6e76ae3fd2941013c8b671e182b", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -1063,15 +1063,10 @@ impl Tester for Collector {\n                     Ignore::Some(ref ignores) => ignores.iter().any(|s| target_str.contains(s)),\n                 },\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 // compiler failures are test failures\n                 should_panic: test::ShouldPanic::No,"}, {"sha": "c15afca22611bd466e38604bc9f0858718a564ea", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -14,7 +14,7 @@\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]\n-#![cfg_attr(not(bootstrap), feature(impl_trait_in_assoc_type))]\n+#![feature(impl_trait_in_assoc_type)]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}, {"sha": "7a8bf0a80ab76462f127d1af3bc5dcf05e45f0f5", "filename": "src/stage0.json", "status": "modified", "additions": 398, "deletions": 398, "changes": 796, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=572c0d553f2bd1b934b08fe240310112369a5c76"}, {"sha": "9059a145b43450a02b5c9dfef101af2555d86ca4", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -422,19 +422,11 @@ pub struct TargetCfgs {\n \n impl TargetCfgs {\n     fn new(config: &Config) -> TargetCfgs {\n-        let targets: HashMap<String, TargetCfg> = if config.stage_id.starts_with(\"stage0-\")\n-            || (config.suite == \"ui-fulldeps\" && config.stage_id.starts_with(\"stage1-\"))\n-        {\n-            // #[cfg(bootstrap)]\n-            // Needed only for one cycle, remove during the bootstrap bump.\n-            Self::collect_all_slow(config)\n-        } else {\n-            serde_json::from_str(&rustc_output(\n-                config,\n-                &[\"--print=all-target-specs-json\", \"-Zunstable-options\"],\n-            ))\n-            .unwrap()\n-        };\n+        let targets: HashMap<String, TargetCfg> = serde_json::from_str(&rustc_output(\n+            config,\n+            &[\"--print=all-target-specs-json\", \"-Zunstable-options\"],\n+        ))\n+        .unwrap();\n \n         let mut current = None;\n         let mut all_targets = HashSet::new();\n@@ -475,25 +467,6 @@ impl TargetCfgs {\n             all_pointer_widths,\n         }\n     }\n-\n-    // #[cfg(bootstrap)]\n-    // Needed only for one cycle, remove during the bootstrap bump.\n-    fn collect_all_slow(config: &Config) -> HashMap<String, TargetCfg> {\n-        let mut result = HashMap::new();\n-        for target in rustc_output(config, &[\"--print=target-list\"]).trim().lines() {\n-            let json = rustc_output(\n-                config,\n-                &[\"--print=target-spec-json\", \"-Zunstable-options\", \"--target\", target],\n-            );\n-            match serde_json::from_str(&json) {\n-                Ok(res) => {\n-                    result.insert(target.into(), res);\n-                }\n-                Err(err) => panic!(\"failed to parse target spec for {target}: {err}\"),\n-            }\n-        }\n-        result\n-    }\n }\n \n #[derive(Clone, Debug, serde::Deserialize)]"}, {"sha": "01da5981015f97bc7499003d9a1ec9b97bed3cd7", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -943,15 +943,10 @@ pub fn make_test_description<R: Read>(\n         name,\n         ignore,\n         ignore_message,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic,\n         compile_fail: false,"}, {"sha": "93863fca344a6599a84c253c6893b609e3eca900", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -24,7 +24,7 @@\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n -         _3 = option_payload_ptr::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:132:18: 132:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n +         _3 = &raw const (((*_4) as Some).0: usize); // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n@@ -37,7 +37,7 @@\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n -         _5 = option_payload_ptr::<String>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:134:18: 134:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }\n +         _5 = &raw const (((*_6) as Some).0: std::string::String); // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n +         goto -> bb2;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57"}, {"sha": "37f1995a53a9d5945e1a01d328533cba3589eb3c", "filename": "tests/mir-opt/lower_intrinsics.ptr_offset.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -15,7 +15,7 @@\n           _4 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n -         _0 = offset::<*const i32, isize>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:140:5: 140:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:139:5: 139:29\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<*const i32, isize>}, val: Value(<ZST>) }\n +         _0 = Offset(move _3, move _4);   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35"}, {"sha": "2b1e67be2a9675096af6949287589a98d997119c", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/572c0d553f2bd1b934b08fe240310112369a5c76/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572c0d553f2bd1b934b08fe240310112369a5c76/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=572c0d553f2bd1b934b08fe240310112369a5c76", "patch": "@@ -127,7 +127,6 @@ pub fn read_via_copy_uninhabited(r: &Never) -> Never {\n pub enum Never {}\n \n // EMIT_MIR lower_intrinsics.option_payload.LowerIntrinsics.diff\n-#[cfg(not(bootstrap))]\n pub fn option_payload(o: &Option<usize>, p: &Option<String>) {\n     unsafe {\n         let _x = core::intrinsics::option_payload_ptr(o);"}]}