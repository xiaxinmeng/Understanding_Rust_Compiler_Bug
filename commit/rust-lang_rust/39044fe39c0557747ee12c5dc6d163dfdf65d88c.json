{"sha": "39044fe39c0557747ee12c5dc6d163dfdf65d88c", "node_id": "C_kwDOAAsO6NoAKDM5MDQ0ZmUzOWMwNTU3NzQ3ZWUxMmM1ZGM2ZDE2M2RmZGY2NWQ4OGM", "commit": {"author": {"name": "rainy-me", "email": "github@rainy.me", "date": "2021-10-03T02:58:10Z"}, "committer": {"name": "rainy-me", "email": "github@rainy.me", "date": "2021-10-03T02:58:10Z"}, "message": "Allow locate parent module action in cargo toml", "tree": {"sha": "ee7bd0d221ade1d9a884549d9d6477bd6d63e8a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7bd0d221ade1d9a884549d9d6477bd6d63e8a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39044fe39c0557747ee12c5dc6d163dfdf65d88c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39044fe39c0557747ee12c5dc6d163dfdf65d88c", "html_url": "https://github.com/rust-lang/rust/commit/39044fe39c0557747ee12c5dc6d163dfdf65d88c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39044fe39c0557747ee12c5dc6d163dfdf65d88c/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c5449120659fdef1b716c9e584356accf5e5e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c5449120659fdef1b716c9e584356accf5e5e3", "html_url": "https://github.com/rust-lang/rust/commit/60c5449120659fdef1b716c9e584356accf5e5e3"}], "stats": {"total": 91, "additions": 83, "deletions": 8}, "files": [{"sha": "a7ca5a7a3466d67200252dc8df9250f1eb0f6c5e", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 75, "deletions": 5, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/39044fe39c0557747ee12c5dc6d163dfdf65d88c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39044fe39c0557747ee12c5dc6d163dfdf65d88c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=39044fe39c0557747ee12c5dc6d163dfdf65d88c", "patch": "@@ -20,15 +20,17 @@ use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n     CodeLens, CompletionItem, Diagnostic, DiagnosticTag, DocumentFormattingParams, FoldingRange,\n-    FoldingRangeParams, HoverContents, Location, NumberOrString, Position, PrepareRenameResponse,\n-    Range, RenameParams, SemanticTokensDeltaParams, SemanticTokensFullDeltaResult,\n-    SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n-    SemanticTokensResult, SymbolInformation, SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n+    FoldingRangeParams, HoverContents, Location, LocationLink, NumberOrString, Position,\n+    PrepareRenameResponse, Range, RenameParams, SemanticTokensDeltaParams,\n+    SemanticTokensFullDeltaResult, SemanticTokensParams, SemanticTokensRangeParams,\n+    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, SymbolTag,\n+    TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n-use project_model::TargetKind;\n+use project_model::{ProjectWorkspace, TargetKind};\n use serde_json::json;\n use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize, T};\n+use vfs::AbsPath;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -603,6 +605,74 @@ pub(crate) fn handle_parent_module(\n     params: lsp_types::TextDocumentPositionParams,\n ) -> Result<Option<lsp_types::GotoDefinitionResponse>> {\n     let _p = profile::span(\"handle_parent_module\");\n+    if let Ok(file_path) = &params.text_document.uri.to_file_path() {\n+        if file_path.file_name().unwrap_or_default() == \"Cargo.toml\" {\n+            // search parent workspace and collect a list of `LocationLink`path,\n+            // since cargo.toml doesn't have file_id\n+            let links: Vec<LocationLink> = snap\n+                .workspaces\n+                .iter()\n+                .filter_map(|ws| match ws {\n+                    ProjectWorkspace::Cargo { cargo, .. } => cargo\n+                        .packages()\n+                        .find(|&pkg| {\n+                            cargo[pkg]\n+                                .targets\n+                                .iter()\n+                                .find_map(|&it| {\n+                                    let pkg_parent_path = cargo[it].root.parent()?;\n+                                    let file_parent_path = AbsPath::assert(file_path.parent()?);\n+                                    if pkg_parent_path == file_parent_path {\n+                                        Some(())\n+                                    } else {\n+                                        None\n+                                    }\n+                                })\n+                                .is_some()\n+                        })\n+                        .and_then(|_| Some(cargo)),\n+                    _ => None,\n+                })\n+                .map(|ws| {\n+                    let target_cargo_toml_path = ws.workspace_root().join(\"Cargo.toml\");\n+                    let target_cargo_toml_url =\n+                        to_proto::url_from_abs_path(&target_cargo_toml_path);\n+                    LocationLink {\n+                        origin_selection_range: None,\n+                        target_uri: target_cargo_toml_url,\n+                        target_range: Range::default(),\n+                        target_selection_range: Range::default(),\n+                    }\n+                })\n+                .collect::<_>();\n+            return Ok(Some(links.into()));\n+        }\n+\n+        // check if invoked at the crate root\n+        let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n+        let crate_id = match snap.analysis.crate_for(file_id)?.first() {\n+            Some(&crate_id) => crate_id,\n+            None => return Ok(None),\n+        };\n+        let cargo_spec = match CargoTargetSpec::for_file(&snap, file_id)? {\n+            Some(it) => it,\n+            None => return Ok(None),\n+        };\n+\n+        if snap.analysis.crate_root(crate_id)? == file_id {\n+            let cargo_toml_url = to_proto::url_from_abs_path(&cargo_spec.cargo_toml);\n+            let res = vec![LocationLink {\n+                origin_selection_range: None,\n+                target_uri: cargo_toml_url,\n+                target_range: Range::default(),\n+                target_selection_range: Range::default(),\n+            }]\n+            .into();\n+            return Ok(Some(res));\n+        }\n+    }\n+\n+    // locate parent module by semantics\n     let position = from_proto::file_position(&snap, params)?;\n     let navs = snap.analysis.parent_module(position)?;\n     let res = to_proto::goto_definition_response(&snap, None, navs)?;"}, {"sha": "623e33c7efb2064a2bc8b905c83b90474c954195", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39044fe39c0557747ee12c5dc6d163dfdf65d88c/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39044fe39c0557747ee12c5dc6d163dfdf65d88c/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=39044fe39c0557747ee12c5dc6d163dfdf65d88c", "patch": "@@ -8,7 +8,7 @@ import { applySnippetWorkspaceEdit, applySnippetTextEdits } from './snippets';\n import { spawnSync } from 'child_process';\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from './run';\n import { AstInspector } from './ast_inspector';\n-import { isRustDocument, sleep, isRustEditor } from './util';\n+import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor } from './util';\n import { startDebugSession, makeDebugConfig } from './debug';\n import { LanguageClient } from 'vscode-languageclient/node';\n \n@@ -185,10 +185,10 @@ export function onEnter(ctx: Ctx): Cmd {\n \n export function parentModule(ctx: Ctx): Cmd {\n     return async () => {\n-        const editor = ctx.activeRustEditor;\n+        const editor = vscode.window.activeTextEditor;\n         const client = ctx.client;\n         if (!editor || !client) return;\n-\n+        if (!(isRustDocument(editor.document) || isCargoTomlDocument(editor.document))) return;\n         const locations = await client.sendRequest(ra.parentModule, {\n             textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             position: client.code2ProtocolConverter.asPosition("}, {"sha": "057a3d2e1949b566e6596232056e77fce7b973cb", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39044fe39c0557747ee12c5dc6d163dfdf65d88c/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39044fe39c0557747ee12c5dc6d163dfdf65d88c/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=39044fe39c0557747ee12c5dc6d163dfdf65d88c", "patch": "@@ -104,6 +104,11 @@ export function isRustDocument(document: vscode.TextDocument): document is RustD\n     return document.languageId === 'rust' && document.uri.scheme === 'file';\n }\n \n+export function isCargoTomlDocument(document: vscode.TextDocument): document is RustDocument {\n+    // ideally `document.languageId` should be 'toml' but user maybe not have toml extension installed\n+    return document.uri.scheme === 'file' && document.fileName.endsWith('Cargo.toml');\n+}\n+\n export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n     return isRustDocument(editor.document);\n }"}]}