{"sha": "e47d222a94d0d89128b16b09adbb96fccab2f7c8", "node_id": "C_kwDOAAsO6NoAKGU0N2QyMjJhOTRkMGQ4OTEyOGIxNmIwOWFkYmI5NmZjY2FiMmY3Yzg", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-10-24T23:01:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-24T23:01:27Z"}, "message": "Rollup merge of #103350 - clubby789:refer-to-assoc-method, r=wesleywiser\n\nChange terminology for assoc method suggestions when they are not called\n\nFixes #103325\n\n```@rustbot``` label +A-diagnostics", "tree": {"sha": "f7fb2bafb3bc86e387b10241c88483f3d713a8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fb2bafb3bc86e387b10241c88483f3d713a8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47d222a94d0d89128b16b09adbb96fccab2f7c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVxlHCRBK7hj4Ov3rIwAArZcIAFMbPylJzoGnTa0fuxa3kaIt\nfwgzY4KEvDNReD0XiVD0mj2utLq2zA7K3OuAlh/8+1nlvgTWAipKUsDIBs75zw6p\nbaj8mEj9bbdF9I9Wlbr4isiCx0F8a0dEBnCUMq+C7Rx6JwZaUjUBUDePXi/lJ/kK\noMwKYqsyzp67WFnaFQiiaDpwRC+YDZNjAREYDsLexuL/5pzyQcI2NYySfmotUYJE\nJM7ZrGRi3+HyVGkhnGk3H9zvqwppFd0jGtLSbUuQU2pq5zYDnGSCVndry7Te2Tvz\n++GkLhkfQvTLjTsrjwX6XZquRFUOky5HAGijnaXrU+8qRGh4EMRNB4EW5MzfaQ0=\n=DXrf\n-----END PGP SIGNATURE-----\n", "payload": "tree f7fb2bafb3bc86e387b10241c88483f3d713a8e5\nparent 11d11e3415a31b587b3cb8a3349e728cb30ada2a\nparent 3f1e99936a821976fec469dd503ad1bdcad423e7\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1666652487 +0900\ncommitter GitHub <noreply@github.com> 1666652487 +0900\n\nRollup merge of #103350 - clubby789:refer-to-assoc-method, r=wesleywiser\n\nChange terminology for assoc method suggestions when they are not called\n\nFixes #103325\n\n```@rustbot``` label +A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47d222a94d0d89128b16b09adbb96fccab2f7c8", "html_url": "https://github.com/rust-lang/rust/commit/e47d222a94d0d89128b16b09adbb96fccab2f7c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47d222a94d0d89128b16b09adbb96fccab2f7c8/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d11e3415a31b587b3cb8a3349e728cb30ada2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d11e3415a31b587b3cb8a3349e728cb30ada2a", "html_url": "https://github.com/rust-lang/rust/commit/11d11e3415a31b587b3cb8a3349e728cb30ada2a"}, {"sha": "3f1e99936a821976fec469dd503ad1bdcad423e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1e99936a821976fec469dd503ad1bdcad423e7", "html_url": "https://github.com/rust-lang/rust/commit/3f1e99936a821976fec469dd503ad1bdcad423e7"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "850f023b1c16b4c2b101b9e4771307faa518c79b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e47d222a94d0d89128b16b09adbb96fccab2f7c8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47d222a94d0d89128b16b09adbb96fccab2f7c8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e47d222a94d0d89128b16b09adbb96fccab2f7c8", "patch": "@@ -38,8 +38,8 @@ type Res = def::Res<ast::NodeId>;\n /// A field or associated item from self type suggested in case of resolution failure.\n enum AssocSuggestion {\n     Field,\n-    MethodWithSelf,\n-    AssocFn,\n+    MethodWithSelf { called: bool },\n+    AssocFn { called: bool },\n     AssocType,\n     AssocConst,\n }\n@@ -48,8 +48,14 @@ impl AssocSuggestion {\n     fn action(&self) -> &'static str {\n         match self {\n             AssocSuggestion::Field => \"use the available field\",\n-            AssocSuggestion::MethodWithSelf => \"call the method with the fully-qualified path\",\n-            AssocSuggestion::AssocFn => \"call the associated function\",\n+            AssocSuggestion::MethodWithSelf { called: true } => {\n+                \"call the method with the fully-qualified path\"\n+            }\n+            AssocSuggestion::MethodWithSelf { called: false } => {\n+                \"refer to the method with the fully-qualified path\"\n+            }\n+            AssocSuggestion::AssocFn { called: true } => \"call the associated function\",\n+            AssocSuggestion::AssocFn { called: false } => \"refer to the associated function\",\n             AssocSuggestion::AssocConst => \"use the associated `const`\",\n             AssocSuggestion::AssocType => \"use the associated type\",\n         }\n@@ -516,7 +522,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let typo_sugg =\n             self.lookup_typo_candidate(path, source.namespace(), is_expected).to_opt_suggestion();\n         if path.len() == 1 && self.self_type_is_available() {\n-            if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n+            if let Some(candidate) =\n+                self.lookup_assoc_candidate(ident, ns, is_expected, source.is_call())\n+            {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n                 match candidate {\n                     AssocSuggestion::Field => {\n@@ -531,16 +539,21 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             err.span_label(span, \"a field by this name exists in `Self`\");\n                         }\n                     }\n-                    AssocSuggestion::MethodWithSelf if self_is_available => {\n+                    AssocSuggestion::MethodWithSelf { called } if self_is_available => {\n+                        let msg = if called {\n+                            \"you might have meant to call the method\"\n+                        } else {\n+                            \"you might have meant to refer to the method\"\n+                        };\n                         err.span_suggestion(\n                             span,\n-                            \"you might have meant to call the method\",\n+                            msg,\n                             format!(\"self.{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n-                    AssocSuggestion::MethodWithSelf\n-                    | AssocSuggestion::AssocFn\n+                    AssocSuggestion::MethodWithSelf { .. }\n+                    | AssocSuggestion::AssocFn { .. }\n                     | AssocSuggestion::AssocConst\n                     | AssocSuggestion::AssocType => {\n                         err.span_suggestion(\n@@ -1498,6 +1511,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ident: Ident,\n         ns: Namespace,\n         filter_fn: FilterFn,\n+        called: bool,\n     ) -> Option<AssocSuggestion>\n     where\n         FilterFn: Fn(Res) -> bool,\n@@ -1539,9 +1553,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     return Some(match &assoc_item.kind {\n                         ast::AssocItemKind::Const(..) => AssocSuggestion::AssocConst,\n                         ast::AssocItemKind::Fn(box ast::Fn { sig, .. }) if sig.decl.has_self() => {\n-                            AssocSuggestion::MethodWithSelf\n+                            AssocSuggestion::MethodWithSelf { called }\n                         }\n-                        ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn,\n+                        ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn { called },\n                         ast::AssocItemKind::Type(..) => AssocSuggestion::AssocType,\n                         ast::AssocItemKind::MacCall(_) => continue,\n                     });\n@@ -1560,10 +1574,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 let res = binding.res();\n                 if filter_fn(res) {\n                     if self.r.has_self.contains(&res.def_id()) {\n-                        return Some(AssocSuggestion::MethodWithSelf);\n+                        return Some(AssocSuggestion::MethodWithSelf { called });\n                     } else {\n                         match res {\n-                            Res::Def(DefKind::AssocFn, _) => return Some(AssocSuggestion::AssocFn),\n+                            Res::Def(DefKind::AssocFn, _) => {\n+                                return Some(AssocSuggestion::AssocFn { called });\n+                            }\n                             Res::Def(DefKind::AssocConst, _) => {\n                                 return Some(AssocSuggestion::AssocConst);\n                             }"}, {"sha": "690a40f7edd77c9e681e538fda6b0713fd89cf12", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e47d222a94d0d89128b16b09adbb96fccab2f7c8/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e47d222a94d0d89128b16b09adbb96fccab2f7c8/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=e47d222a94d0d89128b16b09adbb96fccab2f7c8", "patch": "@@ -26,7 +26,12 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:36:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:38:9\n@@ -56,7 +61,12 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:53:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:55:9\n@@ -68,31 +78,56 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:64:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:73:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:82:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:91:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:100:9\n    |\n LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+   |         ^^^\n+   |\n+help: you might have meant to refer to the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:19:9"}, {"sha": "8def9aa20253b98d8d0cfc59a1a92d4dc0aecde4", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47d222a94d0d89128b16b09adbb96fccab2f7c8/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e47d222a94d0d89128b16b09adbb96fccab2f7c8/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=e47d222a94d0d89128b16b09adbb96fccab2f7c8", "patch": "@@ -50,7 +50,7 @@ error[E0425]: cannot find value `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:34:9\n    |\n LL |         method;\n-   |         ^^^^^^ help: you might have meant to call the method: `self.method`\n+   |         ^^^^^^ help: you might have meant to refer to the method: `self.method`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "f32e0404e46cba9b0912e246d8516320aab733f5", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47d222a94d0d89128b16b09adbb96fccab2f7c8/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e47d222a94d0d89128b16b09adbb96fccab2f7c8/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr?ref=e47d222a94d0d89128b16b09adbb96fccab2f7c8", "patch": "@@ -40,7 +40,7 @@ LL |         bah;\n LL | fn ba() {}\n    | ------- similarly named function `ba` defined here\n    |\n-help: you might have meant to call the associated function\n+help: you might have meant to refer to the associated function\n    |\n LL |         Self::bah;\n    |         ~~~~~~~~~"}]}