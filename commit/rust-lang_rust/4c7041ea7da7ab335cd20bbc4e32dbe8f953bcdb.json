{"sha": "4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzA0MWVhN2RhN2FiMzM1Y2QyMGJiYzRlMzJkYmU4Zjk1M2JjZGI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-18T23:25:37Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:33Z"}, "message": "Don't special case abort/unreachable intrinsics", "tree": {"sha": "e5b0881703d64d3c66e1b06e0b9783f7773c85d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b0881703d64d3c66e1b06e0b9783f7773c85d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb", "html_url": "https://github.com/rust-lang/rust/commit/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a71b3880397b89b04e2a4b25b0528df41d39c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a71b3880397b89b04e2a4b25b0528df41d39c70", "html_url": "https://github.com/rust-lang/rust/commit/0a71b3880397b89b04e2a4b25b0528df41d39c70"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "e646f61bddbbef2cd9cd7fafd95eb05752b2208e", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb", "patch": "@@ -76,6 +76,7 @@ fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n         \"roundf32\" => \"llvm.round.f32\",\n         \"roundf64\" => \"llvm.round.f64\",\n         \"assume\" => \"llvm.assume\",\n+        \"abort\" => \"llvm.trap\",\n         _ => return None\n     };\n     Some(ccx.get_intrinsic(&llvm_name))\n@@ -90,8 +91,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n                                       llargs: &[ValueRef],\n                                       llresult: ValueRef,\n                                       span: Span) {\n-    let fcx = bcx.fcx();\n-    let ccx = fcx.ccx;\n+    let ccx = bcx.ccx();\n     let tcx = bcx.tcx();\n \n     let (def_id, substs, fty) = match callee_ty.sty {\n@@ -104,22 +104,16 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n     let ret_ty = sig.output();\n     let name = &*tcx.item_name(def_id).as_str();\n \n-    // These are the only intrinsic functions that diverge.\n-    if name == \"abort\" {\n-        let llfn = ccx.get_intrinsic(&(\"llvm.trap\"));\n-        bcx.call(llfn, &[], None);\n-        return;\n-    } else if name == \"unreachable\" {\n-        return;\n-    }\n-\n     let llret_ty = type_of::type_of(ccx, ret_ty);\n \n     let simple = get_simple_intrinsic(ccx, name);\n     let llval = match name {\n         _ if simple.is_some() => {\n             bcx.call(simple.unwrap(), &llargs, None)\n         }\n+        \"unreachable\" => {\n+            return;\n+        },\n         \"likely\" => {\n             let expect = ccx.get_intrinsic(&(\"llvm.expect.i1\"));\n             bcx.call(expect, &[llargs[0], C_bool(ccx, true)], None)\n@@ -628,8 +622,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n         }\n     };\n \n-    if val_ty(llval) != Type::void(ccx) &&\n-       machine::llsize_of_alloc(ccx, val_ty(llval)) != 0 {\n+    if val_ty(llval) != Type::void(ccx) && machine::llsize_of_alloc(ccx, val_ty(llval)) != 0 {\n         if let Some(ty) = fn_ty.ret.cast {\n             let ptr = bcx.pointercast(llresult, ty.ptr_to());\n             let store = bcx.store(llval, ptr);"}]}