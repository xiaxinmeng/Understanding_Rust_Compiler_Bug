{"sha": "5877db28b499eb023aeddf9ceba0edc95b9d73a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NzdkYjI4YjQ5OWViMDIzYWVkZGY5Y2ViYTBlZGM5NWI5ZDczYTM=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-01-08T14:41:46Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-01-09T14:41:29Z"}, "message": "Fixed typos in private type names", "tree": {"sha": "3c7657e0b7db23e94d1ce5f4554033cdac1a941c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c7657e0b7db23e94d1ce5f4554033cdac1a941c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5877db28b499eb023aeddf9ceba0edc95b9d73a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5877db28b499eb023aeddf9ceba0edc95b9d73a3", "html_url": "https://github.com/rust-lang/rust/commit/5877db28b499eb023aeddf9ceba0edc95b9d73a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5877db28b499eb023aeddf9ceba0edc95b9d73a3/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c2bd097a8cb47b3105d32d9d22c6f2c7fbd590", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c2bd097a8cb47b3105d32d9d22c6f2c7fbd590", "html_url": "https://github.com/rust-lang/rust/commit/c8c2bd097a8cb47b3105d32d9d22c6f2c7fbd590"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e648519f9b922c658250a0cb6b043eeb48c3df53", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5877db28b499eb023aeddf9ceba0edc95b9d73a3/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5877db28b499eb023aeddf9ceba0edc95b9d73a3/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=5877db28b499eb023aeddf9ceba0edc95b9d73a3", "patch": "@@ -476,14 +476,14 @@ impl Convertor {\n \n #[derive(Debug)]\n enum SynToken {\n-    Ordiniary(SyntaxToken),\n+    Ordinary(SyntaxToken),\n     Punch(SyntaxToken, TextSize),\n }\n \n impl SynToken {\n     fn token(&self) -> &SyntaxToken {\n         match self {\n-            SynToken::Ordiniary(it) => it,\n+            SynToken::Ordinary(it) => it,\n             SynToken::Punch(it, _) => it,\n         }\n     }\n@@ -495,7 +495,7 @@ impl SrcToken for SynToken {\n     }\n     fn to_char(&self) -> Option<char> {\n         match self {\n-            SynToken::Ordiniary(_) => None,\n+            SynToken::Ordinary(_) => None,\n             SynToken::Punch(it, i) => it.text().chars().nth((*i).into()),\n         }\n     }\n@@ -535,7 +535,7 @@ impl TokenConvertor for Convertor {\n         } else {\n             self.punct_offset = None;\n             let range = curr.text_range();\n-            (SynToken::Ordiniary(curr), range)\n+            (SynToken::Ordinary(curr), range)\n         };\n \n         Some(token)\n@@ -557,7 +557,7 @@ impl TokenConvertor for Convertor {\n         let token = if curr.kind().is_punct() {\n             SynToken::Punch(curr, 0.into())\n         } else {\n-            SynToken::Ordiniary(curr)\n+            SynToken::Ordinary(curr)\n         };\n         Some(token)\n     }"}]}