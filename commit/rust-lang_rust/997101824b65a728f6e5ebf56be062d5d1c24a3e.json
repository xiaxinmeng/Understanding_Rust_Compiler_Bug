{"sha": "997101824b65a728f6e5ebf56be062d5d1c24a3e", "node_id": "C_kwDOAAsO6NoAKDk5NzEwMTgyNGI2NWE3MjhmNmU1ZWJmNTZiZTA2MmQ1ZDFjMjRhM2U", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-01-09T15:08:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-01-09T15:08:26Z"}, "message": "std test: better type name, clarifying comment", "tree": {"sha": "d726c243c1718b81eed7669304ea687361e152c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d726c243c1718b81eed7669304ea687361e152c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/997101824b65a728f6e5ebf56be062d5d1c24a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/997101824b65a728f6e5ebf56be062d5d1c24a3e", "html_url": "https://github.com/rust-lang/rust/commit/997101824b65a728f6e5ebf56be062d5d1c24a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/997101824b65a728f6e5ebf56be062d5d1c24a3e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "html_url": "https://github.com/rust-lang/rust/commit/c54c8cbac882e149e04a9e1f2d146fd548ae30ae"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "1786a3c09ffb547e149a86a079d0d2bdb78576a3", "filename": "library/std/src/sync/mutex/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997101824b65a728f6e5ebf56be062d5d1c24a3e/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997101824b65a728f6e5ebf56be062d5d1c24a3e/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs?ref=997101824b65a728f6e5ebf56be062d5d1c24a3e", "patch": "@@ -181,7 +181,7 @@ fn test_mutex_arc_poison() {\n     let arc2 = arc.clone();\n     let _ = thread::spawn(move || {\n         let lock = arc2.lock().unwrap();\n-        assert_eq!(*lock, 2);\n+        assert_eq!(*lock, 2); // deliberate assertion failure to poison the mutex\n     })\n     .join();\n     assert!(arc.lock().is_err());"}, {"sha": "964c7fc5b0ca25cabed0fedbbd124283a42258a2", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/997101824b65a728f6e5ebf56be062d5d1c24a3e/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997101824b65a728f6e5ebf56be062d5d1c24a3e/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=997101824b65a728f6e5ebf56be062d5d1c24a3e", "patch": "@@ -23,11 +23,11 @@ impl Signal {\n     }\n }\n \n-struct Foo(Signal);\n+struct NotifyOnDrop(Signal);\n \n-impl Drop for Foo {\n+impl Drop for NotifyOnDrop {\n     fn drop(&mut self) {\n-        let Foo(ref f) = *self;\n+        let NotifyOnDrop(ref f) = *self;\n         f.notify();\n     }\n }\n@@ -82,18 +82,18 @@ fn states() {\n \n #[test]\n fn smoke_dtor() {\n-    thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));\n+    thread_local!(static FOO: UnsafeCell<Option<NotifyOnDrop>> = UnsafeCell::new(None));\n     run(&FOO);\n-    thread_local!(static FOO2: UnsafeCell<Option<Foo>> = const { UnsafeCell::new(None) });\n+    thread_local!(static FOO2: UnsafeCell<Option<NotifyOnDrop>> = const { UnsafeCell::new(None) });\n     run(&FOO2);\n \n-    fn run(key: &'static LocalKey<UnsafeCell<Option<Foo>>>) {\n+    fn run(key: &'static LocalKey<UnsafeCell<Option<NotifyOnDrop>>>) {\n         let signal = Signal::default();\n         let signal2 = signal.clone();\n         let t = thread::spawn(move || unsafe {\n             let mut signal = Some(signal2);\n             key.with(|f| {\n-                *f.get() = Some(Foo(signal.take().unwrap()));\n+                *f.get() = Some(NotifyOnDrop(signal.take().unwrap()));\n             });\n         });\n         signal.wait();\n@@ -187,13 +187,13 @@ fn self_referential() {\n fn dtors_in_dtors_in_dtors() {\n     struct S1(Signal);\n     thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));\n-    thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));\n+    thread_local!(static K2: UnsafeCell<Option<NotifyOnDrop>> = UnsafeCell::new(None));\n \n     impl Drop for S1 {\n         fn drop(&mut self) {\n             let S1(ref signal) = *self;\n             unsafe {\n-                let _ = K2.try_with(|s| *s.get() = Some(Foo(signal.clone())));\n+                let _ = K2.try_with(|s| *s.get() = Some(NotifyOnDrop(signal.clone())));\n             }\n         }\n     }\n@@ -211,13 +211,13 @@ fn dtors_in_dtors_in_dtors() {\n fn dtors_in_dtors_in_dtors_const_init() {\n     struct S1(Signal);\n     thread_local!(static K1: UnsafeCell<Option<S1>> = const { UnsafeCell::new(None) });\n-    thread_local!(static K2: UnsafeCell<Option<Foo>> = const { UnsafeCell::new(None) });\n+    thread_local!(static K2: UnsafeCell<Option<NotifyOnDrop>> = const { UnsafeCell::new(None) });\n \n     impl Drop for S1 {\n         fn drop(&mut self) {\n             let S1(ref signal) = *self;\n             unsafe {\n-                let _ = K2.try_with(|s| *s.get() = Some(Foo(signal.clone())));\n+                let _ = K2.try_with(|s| *s.get() = Some(NotifyOnDrop(signal.clone())));\n             }\n         }\n     }"}]}