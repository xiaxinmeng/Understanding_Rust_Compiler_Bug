{"sha": "27ed52c0a2e05d459a25d077d2eec584cb98a591", "node_id": "C_kwDOAAsO6NoAKDI3ZWQ1MmMwYTJlMDVkNDU5YTI1ZDA3N2QyZWVjNTg0Y2I5OGE1OTE", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-23T18:44:04Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-23T18:44:04Z"}, "message": "Adjust wording of comment", "tree": {"sha": "4f58e6889dfefa0e6f59068b3631dc64cf2c6ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f58e6889dfefa0e6f59068b3631dc64cf2c6ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27ed52c0a2e05d459a25d077d2eec584cb98a591", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHEw3QACgkQtAh+UQ6Y\nsWS1RxAAhLOnpm1lLm2ZEV+xPfVFApzysugflM25LoF2JHl4qH2fwtQoBFZGPiuV\nh0cwEqKszPpKKn33HLr8u/UYnuCJprWZnHQf0GwpvRH939Ow3QN7oRDHJff5bHG9\nQr20ZvxxP2PJKS2yBLVs3VtNevsma4Zdd/PBCGE8cEU9U5vnNfLgluhbJ4oSKJxX\nor0CsMbmQU9WLOjurAPgZot+dtpfiECOacR9nz3tjFDvxp1JFzCD3qfKZ/vnnb2+\nU9mPqaA85F4Bdck/BzzSP8NltGdY+ZJjie/5vP/Z+nHu3G93YoghZLdhjfihxiXW\nvx1lSPRGR3RiEThLRHE4Uzu9wnNjhnpiCzYrFPgZCfycuaYu3y078I83CyzBkLNF\ncJTYTLoLg1krSqyMSf3AUNCuOAOIPtH5YxbnQlEWXprrRFdr30U3KSU/36NywkZV\nQsmz4ETtK7piel9lFsMTPC3wdNWRaK1cXBxmvb9ctibN7MrqZ8ZBuV6wW8M/0QB1\nxju4AlcyWV1t7YaE1VpFCM/WT+0BAk9rW25I+dKh9cbOqw1vJF1+GGaYnI2TJai5\nLqfM7cwaNdqYLrn/3T0+3S9dJwfxYxUv4OHy1NPNe1rt/AoGRJoTIrYdZZrAsVQT\nRKIf93Zm9Ob9LHriLWHP6AcRoc2VYA8z7tpB/QuLKcFwsXPoKLM=\n=Vvky\n-----END PGP SIGNATURE-----", "payload": "tree 4f58e6889dfefa0e6f59068b3631dc64cf2c6ce0\nparent 28f19f62c7990704cf1f5ed5ef92599730393278\nauthor Aaron Hill <aa1ronham@gmail.com> 1640285044 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1640285044 -0500\n\nAdjust wording of comment\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27ed52c0a2e05d459a25d077d2eec584cb98a591", "html_url": "https://github.com/rust-lang/rust/commit/27ed52c0a2e05d459a25d077d2eec584cb98a591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27ed52c0a2e05d459a25d077d2eec584cb98a591/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f19f62c7990704cf1f5ed5ef92599730393278", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f19f62c7990704cf1f5ed5ef92599730393278", "html_url": "https://github.com/rust-lang/rust/commit/28f19f62c7990704cf1f5ed5ef92599730393278"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "19788a979adf09c99eb81048e7fff0170fd89e4b", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27ed52c0a2e05d459a25d077d2eec584cb98a591/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ed52c0a2e05d459a25d077d2eec584cb98a591/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=27ed52c0a2e05d459a25d077d2eec584cb98a591", "patch": "@@ -185,20 +185,20 @@ impl<K: DepKind> DepGraph<K> {\n     ///\n     /// `A -> B -> C`\n     ///\n-    /// Suppose that decoding the result of query `B` required invoking\n-    /// a query `D`. If we did not create a fresh `TaskDeps` when\n-    /// decoding `B`, we might would still be using the `TaskDeps` for query `A`\n+    /// Suppose that decoding the result of query `B` required re-computing\n+    /// the query `C`. If we did not create a fresh `TaskDeps` when\n+    /// decoding `B`, we would still be using the `TaskDeps` for query `A`\n     /// (if we needed to re-execute `A`). This would cause us to create\n-    /// a new edge `A -> D`. If this edge did not previously\n+    /// a new edge `A -> C`. If this edge did not previously\n     /// exist in the `DepGraph`, then we could end up with a different\n     /// `DepGraph` at the end of compilation, even if there were no\n     /// meaningful changes to the overall program (e.g. a newline was added).\n     /// In addition, this edge might cause a subsequent compilation run\n-    /// to try to force `D` before marking other necessary nodes green. If\n-    /// `D` did not exist in the new compilation session, then we might\n+    /// to try to force `C` before marking other necessary nodes green. If\n+    /// `C` did not exist in the new compilation session, then we could\n     /// get an ICE. Normally, we would have tried (and failed) to mark\n     /// some other query green (e.g. `item_children`) which was used\n-    /// to obtain `D`, which would prevent us from ever trying to force\n+    /// to obtain `C`, which would prevent us from ever trying to force\n     /// a non-existent `D`.\n     ///\n     /// It might be possible to enforce that all `DepNode`s read during\n@@ -208,7 +208,12 @@ impl<K: DepKind> DepGraph<K> {\n     /// of `B`, this would result in an edge `B -> D`. If that edge already\n     /// existed (with the same `DepPathHash`es), then it should be correct\n     /// to allow the invocation of the query to proceed during deserialization\n-    /// of a query result. However, this would require additional complexity\n+    /// of a query result. We would merely assert that the dep-graph fragment\n+    /// that would have been added by invoking `C` while decoding `B`\n+    /// is equivalent to the dep-graph fragment that we already instantiated for B\n+    /// (at the point where we successfully marked B as green).\n+    ///\n+    /// However, this would require additional complexity\n     /// in the query infrastructure, and is not currently needed by the\n     /// decoding of any query results. Should the need arise in the future,\n     /// we should consider extending the query system with this functionality."}]}