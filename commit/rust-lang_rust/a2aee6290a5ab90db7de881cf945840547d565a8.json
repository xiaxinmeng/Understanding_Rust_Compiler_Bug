{"sha": "a2aee6290a5ab90db7de881cf945840547d565a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYWVlNjI5MGE1YWI5MGRiN2RlODgxY2Y5NDU4NDA1NDdkNTY1YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-01T04:21:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-01T04:21:09Z"}, "message": "Auto merge of #21768 - Gankro:hash-send, r=alexcrichton\n\nFixes #21763 \r\n\r\n(untested)", "tree": {"sha": "cc74d4111e8a14fc056344c8835c351fe8c0b66b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc74d4111e8a14fc056344c8835c351fe8c0b66b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2aee6290a5ab90db7de881cf945840547d565a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2aee6290a5ab90db7de881cf945840547d565a8", "html_url": "https://github.com/rust-lang/rust/commit/a2aee6290a5ab90db7de881cf945840547d565a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2aee6290a5ab90db7de881cf945840547d565a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8489d3cc7a44dc31030b17ec0faad795d3895df", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8489d3cc7a44dc31030b17ec0faad795d3895df", "html_url": "https://github.com/rust-lang/rust/commit/e8489d3cc7a44dc31030b17ec0faad795d3895df"}, {"sha": "998599187fa0d1341ffd051e8d54b7ba7fea0be5", "url": "https://api.github.com/repos/rust-lang/rust/commits/998599187fa0d1341ffd051e8d54b7ba7fea0be5", "html_url": "https://github.com/rust-lang/rust/commit/998599187fa0d1341ffd051e8d54b7ba7fea0be5"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "8952b81690186545d3abae3318e0d75de7def7fa", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a2aee6290a5ab90db7de881cf945840547d565a8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2aee6290a5ab90db7de881cf945840547d565a8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=a2aee6290a5ab90db7de881cf945840547d565a8", "patch": "@@ -16,15 +16,14 @@ use clone::Clone;\n use cmp;\n use hash::{Hash, Hasher};\n use iter::{Iterator, IteratorExt, ExactSizeIterator, count};\n-use marker::{Copy, Sized, self};\n+use marker::{Copy, Send, Sync, Sized, self};\n use mem::{min_align_of, size_of};\n use mem;\n use num::{Int, UnsignedInt};\n use ops::{Deref, DerefMut, Drop};\n use option::Option;\n use option::Option::{Some, None};\n-use ptr::{Unique, PtrExt, copy_nonoverlapping_memory, zero_memory};\n-use ptr;\n+use ptr::{self, PtrExt, copy_nonoverlapping_memory, zero_memory};\n use rt::heap::{allocate, deallocate};\n use collections::hash_state::HashState;\n \n@@ -70,12 +69,15 @@ const EMPTY_BUCKET: u64 = 0u64;\n pub struct RawTable<K, V> {\n     capacity: uint,\n     size:     uint,\n-    hashes:   Unique<u64>,\n+    hashes:   *mut u64,\n     // Because K/V do not appear directly in any of the types in the struct,\n     // inform rustc that in fact instances of K and V are reachable from here.\n     marker:   marker::CovariantType<(K,V)>,\n }\n \n+unsafe impl<K: Send, V: Send> Send for RawTable<K, V> {}\n+unsafe impl<K: Sync, V: Sync> Sync for RawTable<K, V> {}\n+\n struct RawBucket<K, V> {\n     hash: *mut u64,\n     key:  *mut K,\n@@ -565,7 +567,7 @@ impl<K, V> RawTable<K, V> {\n             return RawTable {\n                 size: 0,\n                 capacity: 0,\n-                hashes: Unique::null(),\n+                hashes: ptr::null_mut(),\n                 marker: marker::CovariantType,\n             };\n         }\n@@ -604,7 +606,7 @@ impl<K, V> RawTable<K, V> {\n         RawTable {\n             capacity: capacity,\n             size:     0,\n-            hashes:   Unique(hashes),\n+            hashes:   hashes,\n             marker:   marker::CovariantType,\n         }\n     }\n@@ -613,14 +615,14 @@ impl<K, V> RawTable<K, V> {\n         let hashes_size = self.capacity * size_of::<u64>();\n         let keys_size = self.capacity * size_of::<K>();\n \n-        let buffer = self.hashes.0 as *mut u8;\n+        let buffer = self.hashes as *mut u8;\n         let (keys_offset, vals_offset) = calculate_offsets(hashes_size,\n                                                            keys_size, min_align_of::<K>(),\n                                                            min_align_of::<V>());\n \n         unsafe {\n             RawBucket {\n-                hash: self.hashes.0,\n+                hash: self.hashes,\n                 key:  buffer.offset(keys_offset as int) as *mut K,\n                 val:  buffer.offset(vals_offset as int) as *mut V\n             }\n@@ -632,7 +634,7 @@ impl<K, V> RawTable<K, V> {\n     pub fn new(capacity: uint) -> RawTable<K, V> {\n         unsafe {\n             let ret = RawTable::new_uninitialized(capacity);\n-            zero_memory(ret.hashes.0, capacity);\n+            zero_memory(ret.hashes, capacity);\n             ret\n         }\n     }\n@@ -652,7 +654,7 @@ impl<K, V> RawTable<K, V> {\n         RawBuckets {\n             raw: self.first_bucket_raw(),\n             hashes_end: unsafe {\n-                self.hashes.0.offset(self.capacity as int)\n+                self.hashes.offset(self.capacity as int)\n             },\n             marker: marker::ContravariantLifetime,\n         }\n@@ -964,7 +966,7 @@ impl<K: Clone, V: Clone> Clone for RawTable<K, V> {\n #[unsafe_destructor]\n impl<K, V> Drop for RawTable<K, V> {\n     fn drop(&mut self) {\n-        if self.hashes.0.is_null() {\n+        if self.hashes.is_null() {\n             return;\n         }\n         // This is done in reverse because we've likely partially taken\n@@ -984,7 +986,7 @@ impl<K, V> Drop for RawTable<K, V> {\n                                                     vals_size, min_align_of::<V>());\n \n         unsafe {\n-            deallocate(self.hashes.0 as *mut u8, size, align);\n+            deallocate(self.hashes as *mut u8, size, align);\n             // Remember how everything was allocated out of one buffer\n             // during initialization? We only need one call to free here.\n         }"}, {"sha": "bcf3a0a9ac62b08bc0d70ebad4ed34216dce5215", "filename": "src/test/compile-fail/issue-21763.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a2aee6290a5ab90db7de881cf945840547d565a8/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2aee6290a5ab90db7de881cf945840547d565a8/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs?ref=a2aee6290a5ab90db7de881cf945840547d565a8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for HashMap only impl'ing Send/Sync if its contents do\n+\n+use std::collections::HashMap;\n+use std::rc::Rc;\n+\n+fn foo<T: Send>() {}\n+\n+fn main() {\n+    foo::<HashMap<Rc<()>, Rc<()>>>();\n+    //~^ ERROR: the trait `core::marker::Send` is not implemented for the type `alloc::rc::Rc<()>`\n+}"}]}