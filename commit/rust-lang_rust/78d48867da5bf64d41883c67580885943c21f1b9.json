{"sha": "78d48867da5bf64d41883c67580885943c21f1b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDQ4ODY3ZGE1YmY2NGQ0MTg4M2M2NzU4MDg4NTk0M2MyMWYxYjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-03T01:01:06Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-05T18:49:47Z"}, "message": "Properly report transitive errors", "tree": {"sha": "0d953b9e161dc4c0cbd59b98dfb15e4a6b3e53d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d953b9e161dc4c0cbd59b98dfb15e4a6b3e53d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d48867da5bf64d41883c67580885943c21f1b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d48867da5bf64d41883c67580885943c21f1b9", "html_url": "https://github.com/rust-lang/rust/commit/78d48867da5bf64d41883c67580885943c21f1b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d48867da5bf64d41883c67580885943c21f1b9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb47de81337482b226cde3a2f59594ed78412d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb47de81337482b226cde3a2f59594ed78412d1", "html_url": "https://github.com/rust-lang/rust/commit/9cb47de81337482b226cde3a2f59594ed78412d1"}], "stats": {"total": 374, "additions": 270, "deletions": 104}, "files": [{"sha": "592ada83c8525e269f02e679d5454d82e877931f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -526,19 +526,14 @@ for ::middle::const_val::ErrKind<'gcx> {\n         match *self {\n             NonConstPath |\n             TypeckError |\n+            CouldNotResolve |\n             CheckMatchError => {\n                 // nothing to do\n             }\n-            UnimplementedConstVal(s) => {\n-                s.hash_stable(hcx, hasher);\n-            }\n             IndexOutOfBounds { len, index } => {\n                 len.hash_stable(hcx, hasher);\n                 index.hash_stable(hcx, hasher);\n             }\n-            LayoutError(ref layout_error) => {\n-                layout_error.hash_stable(hcx, hasher);\n-            }\n             Miri(ref err, ref trace) => {\n                 err.hash_stable(hcx, hasher);\n                 trace.hash_stable(hcx, hasher);\n@@ -609,8 +604,8 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             RemainderByZero |\n             DivisionByZero |\n             GeneratorResumedAfterReturn |\n-            GeneratorResumedAfterPanic |\n-            ReferencedConstant => {}\n+            GeneratorResumedAfterPanic => {}\n+            ReferencedConstant(ref err) => err.hash_stable(hcx, hasher),\n             MachineError(ref err) => err.hash_stable(hcx, hasher),\n             FunctionPointerTyMismatch(a, b) => {\n                 a.hash_stable(hcx, hasher);"}, {"sha": "d2c6bb289485549abaaf8c4bd7ddb4b277c70cf2", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::{self, layout};\n+use ty;\n use ty::subst::Substs;\n use ty::maps::TyCtxtAt;\n use mir::interpret::ConstValue;\n@@ -30,27 +30,25 @@ pub enum ConstVal<'tcx> {\n     Value(ConstValue<'tcx>),\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n     pub kind: Lrc<ErrKind<'tcx>>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum ErrKind<'tcx> {\n \n     NonConstPath,\n-    UnimplementedConstVal(&'static str),\n+    CouldNotResolve,\n     IndexOutOfBounds { len: u64, index: u64 },\n \n-    LayoutError(layout::LayoutError<'tcx>),\n-\n     TypeckError,\n     CheckMatchError,\n     Miri(::mir::interpret::EvalError<'tcx>, Vec<FrameInfo>),\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct FrameInfo {\n     pub span: Span,\n     pub location: String,\n@@ -87,15 +85,12 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n \n         match *self.kind {\n             NonConstPath        => simple!(\"non-constant path in constant expression\"),\n-            UnimplementedConstVal(what) =>\n-                simple!(\"unimplemented constant expression: {}\", what),\n+            CouldNotResolve => simple!(\"could not resolve\"),\n             IndexOutOfBounds { len, index } => {\n                 simple!(\"index out of bounds: the len is {} but the index is {}\",\n                         len, index)\n             }\n \n-            LayoutError(ref err) => Simple(err.to_string().into_cow()),\n-\n             TypeckError => simple!(\"type-checking failed\"),\n             CheckMatchError => simple!(\"match-checking failed\"),\n             Miri(ref err, ref trace) => Backtrace(err, trace),\n@@ -149,6 +144,10 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n                 match miri.kind {\n                     ::mir::interpret::EvalErrorKind::TypeckError |\n                     ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n+                    ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n+                        inner.struct_generic(tcx, \"referenced constant\", lint_root, as_err)?.emit();\n+                        (miri.to_string(), frames)\n+                    },\n                     _ => (miri.to_string(), frames),\n                 }\n             }"}, {"sha": "bf5bae6b20c429ef15aaf6abf518c9f59fbea389", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -1,6 +1,7 @@\n use std::{fmt, env};\n \n use mir;\n+use middle::const_val::ConstEvalErr;\n use ty::{FnSig, Ty, layout};\n use ty::layout::{Size, Align};\n \n@@ -10,57 +11,50 @@ use super::{\n \n use backtrace::Backtrace;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]\n pub struct EvalError<'tcx> {\n     pub kind: EvalErrorKind<'tcx, u64>,\n-    pub backtrace: Option<Backtrace>,\n }\n \n-impl<'tcx> EvalError<'tcx> {\n-    pub fn print_backtrace(&mut self) {\n-        if let Some(ref mut backtrace) = self.backtrace {\n-            use std::fmt::Write;\n-            let mut trace_text = \"\\n\\nAn error occurred in miri:\\n\".to_string();\n-            backtrace.resolve();\n-            write!(trace_text, \"backtrace frames: {}\\n\", backtrace.frames().len()).unwrap();\n-            'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n-                if frame.symbols().is_empty() {\n-                    write!(trace_text, \"{}: no symbols\\n\", i).unwrap();\n-                }\n-                for symbol in frame.symbols() {\n-                    write!(trace_text, \"{}: \", i).unwrap();\n-                    if let Some(name) = symbol.name() {\n-                        write!(trace_text, \"{}\\n\", name).unwrap();\n-                    } else {\n-                        write!(trace_text, \"<unknown>\\n\").unwrap();\n-                    }\n-                    write!(trace_text, \"\\tat \").unwrap();\n-                    if let Some(file_path) = symbol.filename() {\n-                        write!(trace_text, \"{}\", file_path.display()).unwrap();\n-                    } else {\n-                        write!(trace_text, \"<unknown_file>\").unwrap();\n+impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n+    fn from(kind: EvalErrorKind<'tcx, u64>) -> Self {\n+        match env::var(\"MIRI_BACKTRACE\") {\n+            Ok(ref val) if !val.is_empty() => {\n+                let backtrace = Backtrace::new();\n+\n+                use std::fmt::Write;\n+                let mut trace_text = \"\\n\\nAn error occurred in miri:\\n\".to_string();\n+                write!(trace_text, \"backtrace frames: {}\\n\", backtrace.frames().len()).unwrap();\n+                'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n+                    if frame.symbols().is_empty() {\n+                        write!(trace_text, \"{}: no symbols\\n\", i).unwrap();\n                     }\n-                    if let Some(line) = symbol.lineno() {\n-                        write!(trace_text, \":{}\\n\", line).unwrap();\n-                    } else {\n-                        write!(trace_text, \"\\n\").unwrap();\n+                    for symbol in frame.symbols() {\n+                        write!(trace_text, \"{}: \", i).unwrap();\n+                        if let Some(name) = symbol.name() {\n+                            write!(trace_text, \"{}\\n\", name).unwrap();\n+                        } else {\n+                            write!(trace_text, \"<unknown>\\n\").unwrap();\n+                        }\n+                        write!(trace_text, \"\\tat \").unwrap();\n+                        if let Some(file_path) = symbol.filename() {\n+                            write!(trace_text, \"{}\", file_path.display()).unwrap();\n+                        } else {\n+                            write!(trace_text, \"<unknown_file>\").unwrap();\n+                        }\n+                        if let Some(line) = symbol.lineno() {\n+                            write!(trace_text, \":{}\\n\", line).unwrap();\n+                        } else {\n+                            write!(trace_text, \"\\n\").unwrap();\n+                        }\n                     }\n                 }\n-            }\n-            error!(\"{}\", trace_text);\n+                error!(\"{}\", trace_text);\n+            },\n+            _ => {},\n         }\n-    }\n-}\n-\n-impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n-    fn from(kind: EvalErrorKind<'tcx, u64>) -> Self {\n-        let backtrace = match env::var(\"MIRI_BACKTRACE\") {\n-            Ok(ref val) if !val.is_empty() => Some(Backtrace::new_unresolved()),\n-            _ => None\n-        };\n         EvalError {\n             kind,\n-            backtrace,\n         }\n     }\n }\n@@ -158,7 +152,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     TypeckError,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n-    ReferencedConstant,\n+    ReferencedConstant(ConstEvalErr<'tcx>),\n     GeneratorResumedAfterReturn,\n     GeneratorResumedAfterPanic,\n }\n@@ -274,7 +268,7 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"there were unresolved type arguments during trait selection\",\n             TypeckError =>\n                 \"encountered constants with type errors, stopping evaluation\",\n-            ReferencedConstant =>\n+            ReferencedConstant(_) =>\n                 \"referenced constant has errors\",\n             Overflow(mir::BinOp::Add) => \"attempt to add with overflow\",\n             Overflow(mir::BinOp::Sub) => \"attempt to subtract with overflow\","}, {"sha": "dff89f3c888a73d54e5fcb17348b625d943347a2", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -534,8 +534,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                             } else {\n                                 Err(CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n                                     span: obligation.cause.span,\n-                                    kind: ErrKind::UnimplementedConstVal(\"could not resolve\")\n-                                        .into(),\n+                                    kind: ErrKind::CouldNotResolve.into(),\n                                 })))\n                             }\n                         },"}, {"sha": "537efcd9b59dd6936fd629700259730340ec4928", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -476,7 +476,6 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         Some(interpret::EvalError {\n             kind: tcx.lift(&self.kind)?,\n-            backtrace: self.backtrace.clone(),\n         })\n     }\n }\n@@ -578,7 +577,7 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             PathNotFound(ref v) => PathNotFound(v.clone()),\n             UnimplementedTraitSelection => UnimplementedTraitSelection,\n             TypeckError => TypeckError,\n-            ReferencedConstant => ReferencedConstant,\n+            ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(err)?),\n             OverflowNeg => OverflowNeg,\n             Overflow(op) => Overflow(op),\n             DivisionByZero => DivisionByZero,\n@@ -596,13 +595,9 @@ impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n \n         Some(match *self {\n             NonConstPath => NonConstPath,\n-            UnimplementedConstVal(s) => UnimplementedConstVal(s),\n+            CouldNotResolve => CouldNotResolve,\n             IndexOutOfBounds { len, index } => IndexOutOfBounds { len, index },\n \n-            LayoutError(ref e) => {\n-                return tcx.lift(e).map(LayoutError)\n-            }\n-\n             TypeckError => TypeckError,\n             CheckMatchError => CheckMatchError,\n             Miri(ref e, ref frames) => return tcx.lift(e).map(|e| Miri(e, frames.clone())),"}, {"sha": "3fcf1b5c8ed599e84d4b442cbf67ed7e63536f06", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -564,8 +564,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n             val = ecx.try_read_by_ref(val, miri_ty)?;\n         }\n         Ok(value_to_const_value(&ecx, val, miri_ty))\n-    }).map_err(|mut err| {\n-        err.print_backtrace();\n+    }).map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n         let err = ErrKind::Miri(err, trace);\n         let err = ConstEvalErr {"}, {"sha": "3e91fa72cae58c0903f7b4f90c283a260c98ee61", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::hir::map::definitions::DefPathData;\n-use rustc::middle::const_val::{ConstVal, ErrKind};\n+use rustc::middle::const_val::ConstVal;\n use rustc::mir;\n use rustc::ty::layout::{self, Size, Align, HasDataLayout, IntegerExt, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n@@ -1056,15 +1056,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         } else {\n             self.param_env\n         };\n-        self.tcx.const_eval(param_env.and(gid)).map_err(|err| match *err.kind {\n-            ErrKind::Miri(ref err, _) => match err.kind {\n-                EvalErrorKind::TypeckError |\n-                EvalErrorKind::Layout(_) => EvalErrorKind::TypeckError.into(),\n-                _ => EvalErrorKind::ReferencedConstant.into(),\n-            },\n-            ErrKind::TypeckError => EvalErrorKind::TypeckError.into(),\n-            ref other => bug!(\"const eval returned {:?}\", other),\n-        })\n+        self.tcx.const_eval(param_env.and(gid)).map_err(|err| EvalErrorKind::ReferencedConstant(err).into())\n     }\n \n     pub fn force_allocation(&mut self, place: Place) -> EvalResult<'tcx, Place> {"}, {"sha": "ec308c2193d567bcecc937af5a7f3fd24084850a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::ParamEnv;\n use rustc::ty::maps::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size};\n use syntax::ast::Mutability;\n-use rustc::middle::const_val::{ConstVal, ErrKind};\n+use rustc::middle::const_val::ConstVal;\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::{Pointer, AllocId, Allocation, AccessKind, Value,\n@@ -285,16 +285,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             instance,\n             promoted: None,\n         };\n-        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|err| {\n-            match *err.kind {\n-                ErrKind::Miri(ref err, _) => match err.kind {\n-                    EvalErrorKind::TypeckError |\n-                    EvalErrorKind::Layout(_) => EvalErrorKind::TypeckError.into(),\n-                    _ => EvalErrorKind::ReferencedConstant.into(),\n-                },\n-                ErrKind::TypeckError => EvalErrorKind::TypeckError.into(),\n-                ref other => bug!(\"const eval returned {:?}\", other),\n-            }\n+        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|_| {\n+            // no need to report anything, the const_eval call takes care of that for statics\n+            assert!(self.tcx.is_static(def_id).is_some());\n+            EvalErrorKind::TypeckError.into()\n         }).map(|val| {\n             let const_val = match val.val {\n                 ConstVal::Value(val) => val,"}, {"sha": "a8a50c50f592e844ca5468bba3bd7d6e179bed00", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -1201,7 +1201,7 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 use rustc::middle::const_val::ErrKind;\n                 use rustc::mir::interpret::EvalErrorKind;\n                 if let ErrKind::Miri(ref miri, ..) = *err.kind {\n-                    if let EvalErrorKind::ReferencedConstant = miri.kind {\n+                    if let EvalErrorKind::ReferencedConstant(_) = miri.kind {\n                         err.report_as_error(\n                             tcx.at(mir.promoted[i].span),\n                             \"erroneous constant used\","}, {"sha": "4a5e78b381ed049bdace21dc842ded1f758f6ed9", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -17,10 +17,13 @@ pub const A: i8 = -std::i8::MIN;\n //~| ERROR this constant cannot be used\n pub const B: i8 = A;\n //~^ ERROR const_err\n+//~| ERROR const_err\n pub const C: u8 = A as u8;\n //~^ ERROR const_err\n+//~| ERROR const_err\n pub const D: i8 = 50 - A;\n //~^ ERROR const_err\n+//~| ERROR const_err\n \n fn main() {\n     let _ = (A, B, C, D);"}, {"sha": "3580950854dc7f087b90990b6719d34d07a28cb4", "filename": "src/test/ui/const-eval/conditional_array_execution.nll.stderr", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -18,12 +18,32 @@ LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   |\n    |                   attempt to subtract with overflow\n \n+warning: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n warning: this expression will panic at runtime\n   --> $DIR/conditional_array_execution.rs:20:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:5\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0080]: erroneous constant used\n   --> $DIR/conditional_array_execution.rs:20:5\n    |\n@@ -34,12 +54,21 @@ LL |     println!(\"{}\", FOO);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error[E0080]: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/conditional_array_execution.rs:20:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ac555b25afdcd60647c1ec6200190777c544fa0a", "filename": "src/test/ui/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -19,5 +19,7 @@ const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n fn main() {\n     println!(\"{}\", FOO);\n     //~^ WARN this expression will panic at runtime\n+    //~| WARN referenced constant\n     //~| ERROR erroneous constant used\n+    //~| E0080\n }"}, {"sha": "64010c946a7f1de863670d6d429a076f2b1f8846", "filename": "src/test/ui/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -18,18 +18,36 @@ LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   |\n    |                   attempt to subtract with overflow\n \n+warning: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n warning: this expression will panic at runtime\n   --> $DIR/conditional_array_execution.rs:20:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/conditional_array_execution.rs:20:20\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   |                   ----- attempt to subtract with overflow\n+...\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/conditional_array_execution.rs:20:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "3bde12ade90c3c2ff7ca8ccb95cd1c0b77963e95", "filename": "src/test/ui/const-eval/issue-43197.nll.stderr", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -32,18 +32,47 @@ LL |     const Y: u32 = foo(0-1);\n    |                        |\n    |                        attempt to subtract with overflow\n \n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n warning: this expression will panic at runtime\n   --> $DIR/issue-43197.rs:26:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n warning: this expression will panic at runtime\n   --> $DIR/issue-43197.rs:26:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:5\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-43197.rs:26:5\n    |\n@@ -54,18 +83,36 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-43197.rs:26:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-43197.rs:26:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "03aa65eb274671716088717e03ab1db03b76693e", "filename": "src/test/ui/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -28,4 +28,8 @@ fn main() {\n     //~| WARN this expression will panic at runtime\n     //~| ERROR erroneous constant used\n     //~| ERROR erroneous constant used\n+    //~| ERROR E0080\n+    //~| ERROR E0080\n+    //~| WARN referenced constant\n+    //~| WARN referenced constant\n }"}, {"sha": "071d878730744b409a2b47cb32040ef5ab4a91eb", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -32,30 +32,66 @@ LL |     const Y: u32 = foo(0-1);\n    |                        |\n    |                        attempt to subtract with overflow\n \n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n warning: this expression will panic at runtime\n   --> $DIR/issue-43197.rs:26:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n+warning: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n warning: this expression will panic at runtime\n   --> $DIR/issue-43197.rs:26:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:26\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |                        --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-43197.rs:26:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n+error[E0080]: referenced constant\n+  --> $DIR/issue-43197.rs:26:23\n+   |\n+LL |     const X: u32 = 0-1;\n+   |                    --- attempt to subtract with overflow\n+...\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-43197.rs:26:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ad4f08966c01220560ac2b8cbdcac60a82d9436f", "filename": "src/test/ui/const-eval/issue-44578.nll.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -1,3 +1,14 @@\n+error[E0080]: referenced constant\n+  --> $DIR/issue-44578.rs:35:5\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n+...\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-44578.rs:35:5\n    |\n@@ -8,12 +19,21 @@ LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error[E0080]: referenced constant\n+  --> $DIR/issue-44578.rs:35:20\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n+...\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-44578.rs:35:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "59ac4ab311c6cc19163ab10ae70a3b86d00b5517", "filename": "src/test/ui/const-eval/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -34,4 +34,5 @@ impl Foo for u16 {\n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n     //~^ ERROR erroneous constant used\n+    //~| ERROR E0080\n }"}, {"sha": "28a723a069edf5eda39331c0c3c14158d6198571", "filename": "src/test/ui/const-eval/issue-44578.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -1,9 +1,18 @@\n+error[E0080]: referenced constant\n+  --> $DIR/issue-44578.rs:35:20\n+   |\n+LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n+   |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n+...\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-44578.rs:35:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "60405da1eb66f19345c42d9f88693ab8d8b43f66", "filename": "src/test/ui/const-eval/issue-50814-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -24,6 +24,7 @@ impl<T: C> Foo<T> for A<T> {\n \n fn foo<T: C>() -> &'static usize {\n     &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n+//~| ERROR E0080\n }\n \n impl C for () {"}, {"sha": "3c59cb0e2bc727c03145f5f639a2755fc189f7fd", "filename": "src/test/ui/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814-2.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -1,3 +1,12 @@\n+error[E0080]: referenced constant\n+  --> $DIR/issue-50814-2.rs:26:5\n+   |\n+LL |     const BAR: usize = [5, 6, 7][T::BOO];\n+   |                        ----------------- index out of bounds: the len is 3 but the index is 42\n+...\n+LL |     &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-50814-2.rs:26:5\n    |\n@@ -6,6 +15,6 @@ LL |     &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n    |      |\n    |      referenced constant has errors\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "c71406303990775784bef3e8036ad4f8e1de21ef", "filename": "src/test/ui/const-eval/issue-50814.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -25,6 +25,7 @@ impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n \n fn foo<T>(_: T) -> &'static u8 {\n     &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n+//~| ERROR E0080\n }\n \n fn main() {"}, {"sha": "145279ccc033d71d77f70f9513d9ca8eb0a57b5f", "filename": "src/test/ui/const-eval/issue-50814.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-50814.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -1,3 +1,12 @@\n+error[E0080]: referenced constant\n+  --> $DIR/issue-50814.rs:27:5\n+   |\n+LL |     const MAX: u8 = A::MAX + B::MAX;\n+   |                     --------------- attempt to add with overflow\n+...\n+LL |     &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n error[E0080]: erroneous constant used\n   --> $DIR/issue-50814.rs:27:5\n    |\n@@ -6,6 +15,6 @@ LL |     &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n    |      |\n    |      referenced constant has errors\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "20b8865767459793351b132fe896878a2543496c", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -21,4 +21,5 @@ const LEN: usize = ONE - TWO;\n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n //~^ ERROR E0080\n+//~| ERROR E0080\n }"}, {"sha": "630828ef8f5178adbacc2bc7a9b4d55c4069e824", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d48867da5bf64d41883c67580885943c21f1b9/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=78d48867da5bf64d41883c67580885943c21f1b9", "patch": "@@ -12,6 +12,15 @@ error[E0080]: constant evaluation error\n LL | const LEN: usize = ONE - TWO;\n    |                    ^^^^^^^^^ attempt to subtract with overflow\n \n+error[E0080]: referenced constant\n+  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+   |\n+LL | const LEN: usize = ONE - TWO;\n+   |                    --------- attempt to subtract with overflow\n+...\n+LL |     let a: [i8; LEN] = unimplemented!();\n+   |            ^^^^^^^^^\n+\n error[E0080]: could not evaluate constant expression\n   --> $DIR/const-len-underflow-separate-spans.rs:22:12\n    |\n@@ -20,6 +29,6 @@ LL |     let a: [i8; LEN] = unimplemented!();\n    |                 |\n    |                 referenced constant has errors\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}