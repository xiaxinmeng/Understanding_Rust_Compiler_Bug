{"sha": "cc18556ae550089bf79fb57013dc83ae5873336b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMTg1NTZhZTU1MDA4OWJmNzlmYjU3MDEzZGM4M2FlNTg3MzMzNmI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-02T15:24:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-02T15:31:22Z"}, "message": "Use `utils::sugg` in swap lints", "tree": {"sha": "468fec6899abcfa023a666dd338bdeb04b3e2c58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/468fec6899abcfa023a666dd338bdeb04b3e2c58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc18556ae550089bf79fb57013dc83ae5873336b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXd95SAAoJEF5CfHlMukXoOUMP/inCEwzjo9IQ8zvKr6WHk6ZU\niXYKZPirVFZIw5IL0CH3s9YZ1u8rLiAc/BGffIvAwXf0WmHeRwX7h7xw/6ln4lbO\nQzBMSfGYTVrEn3CtDpvVNCKpIMV4g6lvNlEmnWYiZNdvRbN2lJoBrooNkN23H7Ot\nDxCGXp6b0w91axlBqfdd16BX6GbS4dXV083fPOBXSQ58GDBMIuxCDfvN4i04eVT6\nqEYPB2j4oBlmXTCB3+l3T8jpgaHv5bWJFOhILvHfFrDRCoK0NUEeRXyqcX1oedz/\neW7G5KOfQi3MN0dTYwFTOI+opbLLQZD+Bj09oIycctcftUWrGfM9a0HpXlo//K0X\ncygliC2v8uggld/riDlq1fPFqdMP31Z9g6qQfqjHp6MjcY0H276bnx3qILj2q5ji\nj2rfoSzzoAgD16Km621y7HTj4ZXPUxOz1kV8QqgZsZbNVfVFMsoyYJNcpoS/yrXC\nkA6jbhVtxnPVOhmjflUMylsyR2J3z2FsmCceUdDBbbwoOqs8VuqIxrpP2Jr1D0yU\ndbvC3cuaGnwbTb1jO46pLY9BQ0FGVz74HLcjgX3CNpLAan1UowuVr7ZU44x1YYkv\n/d8sMCyVZUviI6ibi08IiOcWbLiwd6uA6tHNwpXJJobII561Bw/Ahl/XqOku5ocG\nSWtOAAkPHRR75i0UAh1o\n=HvM+\n-----END PGP SIGNATURE-----", "payload": "tree 468fec6899abcfa023a666dd338bdeb04b3e2c58\nparent 139b977d9d64d67cddabbfee8536b0a7d7ed6de4\nauthor mcarton <cartonmartin+git@gmail.com> 1467473064 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467473482 +0200\n\nUse `utils::sugg` in swap lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc18556ae550089bf79fb57013dc83ae5873336b", "html_url": "https://github.com/rust-lang/rust/commit/cc18556ae550089bf79fb57013dc83ae5873336b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc18556ae550089bf79fb57013dc83ae5873336b/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "139b977d9d64d67cddabbfee8536b0a7d7ed6de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/139b977d9d64d67cddabbfee8536b0a7d7ed6de4", "html_url": "https://github.com/rust-lang/rust/commit/139b977d9d64d67cddabbfee8536b0a7d7ed6de4"}], "stats": {"total": 97, "additions": 54, "deletions": 43}, "files": [{"sha": "667c450e66979140967a0a0342ab0c8639e413f9", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc18556ae550089bf79fb57013dc83ae5873336b/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc18556ae550089bf79fb57013dc83ae5873336b/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=cc18556ae550089bf79fb57013dc83ae5873336b", "patch": "@@ -2,7 +2,8 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::codemap::mk_sp;\n-use utils::{differing_macro_contexts, match_type, paths, snippet, snippet_opt, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n+use utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n+use utils::sugg::Sugg;\n \n /// **What it does:** This lints manual swapping.\n ///\n@@ -100,17 +101,17 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n             }\n \n             let (replace, what, sugg) = if let Some((slice, idx1, idx2)) = check_for_slice(cx, lhs1, lhs2) {\n-                if let Some(slice) = snippet_opt(cx, slice.span) {\n+                if let Some(slice) = Sugg::hir_opt(cx, slice) {\n                     (false,\n                      format!(\" elements of `{}`\", slice),\n-                     format!(\"{}.swap({}, {})\",slice,  snippet(cx, idx1.span, \"..\"), snippet(cx, idx2.span, \"..\")))\n+                     format!(\"{}.swap({}, {})\", slice.maybe_par(), snippet(cx, idx1.span, \"..\"), snippet(cx, idx2.span, \"..\")))\n                 } else {\n                     (false, \"\".to_owned(), \"\".to_owned())\n                 }\n             } else {\n-                 if let (Some(first), Some(second)) = (snippet_opt(cx, lhs1.span), snippet_opt(cx, rhs1.span)) {\n+                 if let (Some(first), Some(second)) = (Sugg::hir_opt(cx, lhs1), Sugg::hir_opt(cx, rhs1)) {\n                     (true, format!(\" `{}` and `{}`\", first, second),\n-                     format!(\"std::mem::swap(&mut {}, &mut {})\", first, second))\n+                     format!(\"std::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()))\n                 } else {\n                     (true, \"\".to_owned(), \"\".to_owned())\n                 }\n@@ -147,8 +148,8 @@ fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n             SpanlessEq::new(cx).ignore_fn().eq_expr(lhs0, rhs1),\n             SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, rhs0)\n         ], {\n-            let (what, lhs, rhs) = if let (Some(first), Some(second)) = (snippet_opt(cx, lhs0.span), snippet_opt(cx, rhs0.span)) {\n-                (format!(\" `{}` and `{}`\", first, second), first, second)\n+            let (what, lhs, rhs) = if let (Some(first), Some(second)) = (Sugg::hir_opt(cx, lhs0), Sugg::hir_opt(cx, rhs0)) {\n+                (format!(\" `{}` and `{}`\", first, second), first.mut_addr().to_string(), second.mut_addr().to_string())\n             } else {\n                 (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n             };\n@@ -162,7 +163,7 @@ fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n                                |db| {\n                                    if !what.is_empty() {\n                                        db.span_suggestion(span, \"try\",\n-                                                          format!(\"std::mem::swap(&mut {}, &mut {})\", lhs, rhs));\n+                                                          format!(\"std::mem::swap({}, {})\", lhs, rhs));\n                                        db.note(\"or maybe you should use `std::mem::replace`?\");\n                                    }\n                                });"}, {"sha": "bbfa8648c531dbc62ef2827c56a26860dcd208c5", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 45, "deletions": 35, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/cc18556ae550089bf79fb57013dc83ae5873336b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc18556ae550089bf79fb57013dc83ae5873336b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=cc18556ae550089bf79fb57013dc83ae5873336b", "patch": "@@ -4,7 +4,7 @@ use std::borrow::Cow;\n use std;\n use syntax::ast;\n use syntax::util::parser::AssocOp;\n-use utils::{higher, snippet};\n+use utils::{higher, snippet, snippet_opt};\n use syntax::print::pprust::binop_to_string;\n \n /// A helper type to build suggestion correctly handling parenthesis.\n@@ -31,43 +31,48 @@ impl<'a> std::fmt::Display for Sugg<'a> {\n }\n \n impl<'a> Sugg<'a> {\n-    pub fn hir(cx: &LateContext, expr: &'a hir::Expr, default: &'a str) -> Sugg<'a> {\n-        let snippet = snippet(cx, expr.span, default);\n+    pub fn hir_opt(cx: &LateContext, expr: &hir::Expr) -> Option<Sugg<'a>> {\n+        snippet_opt(cx, expr.span).map(|snippet| {\n+            let snippet = Cow::Owned(snippet);\n+            match expr.node {\n+                hir::ExprAddrOf(..) |\n+                hir::ExprBox(..) |\n+                hir::ExprClosure(..) |\n+                hir::ExprIf(..) |\n+                hir::ExprUnary(..) |\n+                hir::ExprMatch(..) => Sugg::MaybeParen(snippet),\n+                hir::ExprAgain(..) |\n+                hir::ExprBlock(..) |\n+                hir::ExprBreak(..) |\n+                hir::ExprCall(..) |\n+                hir::ExprField(..) |\n+                hir::ExprIndex(..) |\n+                hir::ExprInlineAsm(..) |\n+                hir::ExprLit(..) |\n+                hir::ExprLoop(..) |\n+                hir::ExprMethodCall(..) |\n+                hir::ExprPath(..) |\n+                hir::ExprRepeat(..) |\n+                hir::ExprRet(..) |\n+                hir::ExprStruct(..) |\n+                hir::ExprTup(..) |\n+                hir::ExprTupField(..) |\n+                hir::ExprVec(..) |\n+                hir::ExprWhile(..) => Sugg::NonParen(snippet),\n+                hir::ExprAssign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n+                hir::ExprAssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),\n+                hir::ExprBinary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(higher::binop(op.node)), snippet),\n+                hir::ExprCast(..) => Sugg::BinOp(AssocOp::As, snippet),\n+                hir::ExprType(..) => Sugg::BinOp(AssocOp::Colon, snippet),\n+            }\n+        })\n+    }\n \n-        match expr.node {\n-            hir::ExprAddrOf(..) |\n-            hir::ExprBox(..) |\n-            hir::ExprClosure(..) |\n-            hir::ExprIf(..) |\n-            hir::ExprUnary(..) |\n-            hir::ExprMatch(..) => Sugg::MaybeParen(snippet),\n-            hir::ExprAgain(..) |\n-            hir::ExprBlock(..) |\n-            hir::ExprBreak(..) |\n-            hir::ExprCall(..) |\n-            hir::ExprField(..) |\n-            hir::ExprIndex(..) |\n-            hir::ExprInlineAsm(..) |\n-            hir::ExprLit(..) |\n-            hir::ExprLoop(..) |\n-            hir::ExprMethodCall(..) |\n-            hir::ExprPath(..) |\n-            hir::ExprRepeat(..) |\n-            hir::ExprRet(..) |\n-            hir::ExprStruct(..) |\n-            hir::ExprTup(..) |\n-            hir::ExprTupField(..) |\n-            hir::ExprVec(..) |\n-            hir::ExprWhile(..) => Sugg::NonParen(snippet),\n-            hir::ExprAssign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n-            hir::ExprAssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),\n-            hir::ExprBinary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(higher::binop(op.node)), snippet),\n-            hir::ExprCast(..) => Sugg::BinOp(AssocOp::As, snippet),\n-            hir::ExprType(..) => Sugg::BinOp(AssocOp::Colon, snippet),\n-        }\n+    pub fn hir(cx: &LateContext, expr: &hir::Expr, default: &'a str) -> Sugg<'a> {\n+        Self::hir_opt(cx, expr).unwrap_or_else(|| Sugg::NonParen(Cow::Borrowed(default)))\n     }\n \n-    pub fn ast(cx: &EarlyContext, expr: &'a ast::Expr, default: &'a str) -> Sugg<'a> {\n+    pub fn ast(cx: &EarlyContext, expr: &ast::Expr, default: &'a str) -> Sugg<'a> {\n         use syntax::ast::RangeLimits;\n \n         let snippet = snippet(cx, expr.span, default);\n@@ -124,6 +129,11 @@ impl<'a> Sugg<'a> {\n         make_unop(\"&\", self)\n     }\n \n+    /// Convenience method to create the `&mut <expr>` suggestion.\n+    pub fn mut_addr(self) -> Sugg<'static> {\n+        make_unop(\"&mut \", self)\n+    }\n+\n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>` suggestion.\n     pub fn range(self, end: Self, limit: ast::RangeLimits) -> Sugg<'static> {\n         match limit {"}]}