{"sha": "8932aebfdfc8e4be18ed5213ba24f72954c7ba47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MzJhZWJmZGZjOGU0YmUxOGVkNTIxM2JhMjRmNzI5NTRjN2JhNDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T08:52:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T16:17:50Z"}, "message": "remove unused error variant", "tree": {"sha": "71218a7b6cf2b3211cc6ad619aa11712e982662d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71218a7b6cf2b3211cc6ad619aa11712e982662d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8932aebfdfc8e4be18ed5213ba24f72954c7ba47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8932aebfdfc8e4be18ed5213ba24f72954c7ba47", "html_url": "https://github.com/rust-lang/rust/commit/8932aebfdfc8e4be18ed5213ba24f72954c7ba47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8932aebfdfc8e4be18ed5213ba24f72954c7ba47/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f21ab114ee441d89a1a1f02f63bba638c0af01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f21ab114ee441d89a1a1f02f63bba638c0af01d", "html_url": "https://github.com/rust-lang/rust/commit/1f21ab114ee441d89a1a1f02f63bba638c0af01d"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "842412382766263abf244fd6cae88e03065f3301", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8932aebfdfc8e4be18ed5213ba24f72954c7ba47/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8932aebfdfc8e4be18ed5213ba24f72954c7ba47/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=8932aebfdfc8e4be18ed5213ba24f72954c7ba47", "patch": "@@ -397,8 +397,6 @@ pub enum UnsupportedOpInfo {\n     //\n     // The variants below are only reachable from CTFE/const prop, miri will never emit them.\n     //\n-    /// Encountered raw bytes where we needed a pointer.\n-    ReadBytesAsPointer,\n     /// Accessing thread local statics\n     ThreadLocalStatic(DefId),\n     /// Accessing an unsupported extern static.\n@@ -413,7 +411,6 @@ impl fmt::Display for UnsupportedOpInfo {\n             ReadExternStatic(did) => write!(f, \"cannot read from extern static ({:?})\", did),\n             NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n-            ReadBytesAsPointer => write!(f, \"unable to turn bytes into a pointer\"),\n             ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n         }\n     }"}, {"sha": "2d4eb0b823854c38d692d717dc4c28be74b9d3f2", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8932aebfdfc8e4be18ed5213ba24f72954c7ba47/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8932aebfdfc8e4be18ed5213ba24f72954c7ba47/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=8932aebfdfc8e4be18ed5213ba24f72954c7ba47", "patch": "@@ -335,8 +335,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     ),\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n-                    err_ub!(PointerUseAfterFree(..)) |\n-                    err_unsup!(ReadBytesAsPointer) =>\n+                    err_ub!(PointerUseAfterFree(..)) =>\n                         { \"dangling vtable pointer in wide pointer\" },\n                     err_ub!(AlignmentCheckFailed { .. }) =>\n                         { \"unaligned vtable pointer in wide pointer\" },\n@@ -347,8 +346,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     self.ecx.read_drop_type_from_vtable(vtable),\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n-                    err_ub!(InvalidFunctionPointer(..)) |\n-                    err_unsup!(ReadBytesAsPointer) =>\n+                    err_ub!(InvalidFunctionPointer(..)) =>\n                         { \"invalid drop function pointer in vtable (not pointing to a function)\" },\n                     err_ub!(InvalidVtableDropFn(..)) =>\n                         { \"invalid drop function pointer in vtable (function has incompatible signature)\" },\n@@ -437,8 +435,6 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 { \"a dangling {} (address 0x{:x} is unallocated)\", kind, i },\n             err_ub!(PointerOutOfBounds { .. }) =>\n                 { \"a dangling {} (going beyond the bounds of its allocation)\", kind },\n-            err_unsup!(ReadBytesAsPointer) =>\n-                { \"a dangling {} (created from integer)\", kind },\n             // This cannot happen during const-eval (because interning already detects\n             // dangling pointers), but it can happen in Miri.\n             err_ub!(PointerUseAfterFree(..)) =>\n@@ -598,8 +594,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n-                    err_ub!(InvalidUninitBytes(None)) |\n-                    err_unsup!(ReadBytesAsPointer) =>\n+                    err_ub!(InvalidUninitBytes(None)) =>\n                         { \"{}\", value } expected { \"a function pointer\" },\n                 );\n                 // FIXME: Check if the signature matches"}]}