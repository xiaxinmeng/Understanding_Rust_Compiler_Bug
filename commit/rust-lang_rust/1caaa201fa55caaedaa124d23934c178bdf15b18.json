{"sha": "1caaa201fa55caaedaa124d23934c178bdf15b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYWFhMjAxZmE1NWNhYWVkYWExMjRkMjM5MzRjMTc4YmRmMTViMTg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-07T17:49:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-07T18:58:17Z"}, "message": "Remove hir_def/docs.rs module", "tree": {"sha": "2b4dcb3c1df22ad3bd05034e314ad0a35ca0d2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4dcb3c1df22ad3bd05034e314ad0a35ca0d2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1caaa201fa55caaedaa124d23934c178bdf15b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1caaa201fa55caaedaa124d23934c178bdf15b18", "html_url": "https://github.com/rust-lang/rust/commit/1caaa201fa55caaedaa124d23934c178bdf15b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1caaa201fa55caaedaa124d23934c178bdf15b18/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "html_url": "https://github.com/rust-lang/rust/commit/b3652ef2886e01f772559aa90df4c45e7c7fb1fd"}], "stats": {"total": 177, "additions": 63, "deletions": 114}, "files": [{"sha": "1f2ee2580018565036ffdd4aa5f72a634faeeb89", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=1caaa201fa55caaedaa124d23934c178bdf15b18", "patch": "@@ -1,6 +1,9 @@\n //! Attributes & documentation for hir types.\n use hir_def::{\n-    attr::Attrs, docs::Documentation, path::ModPath, resolver::HasResolver, AttrDefId, ModuleDefId,\n+    attr::{Attrs, Documentation},\n+    path::ModPath,\n+    resolver::HasResolver,\n+    AttrDefId, ModuleDefId,\n };\n use hir_expand::hygiene::Hygiene;\n use hir_ty::db::HirDatabase;"}, {"sha": "c7c7377d73f258149882f3e60f0ca759c8f08708", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1caaa201fa55caaedaa124d23934c178bdf15b18", "patch": "@@ -44,10 +44,9 @@ pub use crate::{\n \n pub use hir_def::{\n     adt::StructKind,\n-    attr::Attrs,\n+    attr::{Attrs, Documentation},\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n-    docs::Documentation,\n     find_path::PrefixKind,\n     import_map,\n     item_scope::ItemInNs,"}, {"sha": "98293aad3d0b56ad187a3f1f614d6779b8ebf558", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=1caaa201fa55caaedaa124d23934c178bdf15b18", "patch": "@@ -15,14 +15,29 @@ use tt::Subtree;\n \n use crate::{\n     db::DefDatabase,\n-    docs::Documentation,\n     item_tree::{ItemTreeId, ItemTreeNode},\n     nameres::ModuleSource,\n     path::ModPath,\n     src::HasChildSource,\n     AdtId, AttrDefId, Lookup,\n };\n \n+/// Holds documentation\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct Documentation(Arc<str>);\n+\n+impl Documentation {\n+    pub fn as_str(&self) -> &str {\n+        &self.0\n+    }\n+}\n+\n+impl Into<String> for Documentation {\n+    fn into(self) -> String {\n+        self.as_str().to_owned()\n+    }\n+}\n+\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct Attrs {\n     entries: Option<Arc<[Attr]>>,\n@@ -102,7 +117,7 @@ impl Attrs {\n             },\n         );\n         let mut attrs = owner.attrs().peekable();\n-        let entries = if attrs.peek().is_none() {\n+        let entries = if attrs.peek().is_none() && docs.is_none() {\n             // Avoid heap allocation\n             None\n         } else {\n@@ -154,7 +169,11 @@ impl Attrs {\n             .intersperse(&SmolStr::new_inline(\"\\n\"))\n             // No FromIterator<SmolStr> for String\n             .for_each(|s| docs.push_str(s.as_str()));\n-        if docs.is_empty() { None } else { Some(docs) }.map(|it| Documentation::new(&it))\n+        if docs.is_empty() {\n+            None\n+        } else {\n+            Some(Documentation(docs.into()))\n+        }\n     }\n }\n "}, {"sha": "6a27effefa6e0c6f708fccdbaa933fc47c5b3006", "filename": "crates/hir_def/src/docs.rs", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdocs.rs?ref=b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "patch": "@@ -1,79 +0,0 @@\n-//! Defines hir documentation.\n-//!\n-//! This really shouldn't exist, instead, we should deshugar doc comments into attributes, see\n-//! https://github.com/rust-analyzer/rust-analyzer/issues/2148#issuecomment-550519102\n-\n-use std::sync::Arc;\n-\n-use itertools::Itertools;\n-use syntax::{ast, SmolStr};\n-\n-/// Holds documentation\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct Documentation(Arc<str>);\n-\n-impl Into<String> for Documentation {\n-    fn into(self) -> String {\n-        self.as_str().to_owned()\n-    }\n-}\n-\n-impl Documentation {\n-    pub fn new(s: &str) -> Documentation {\n-        Documentation(s.into())\n-    }\n-\n-    pub fn from_ast<N>(node: &N) -> Option<Documentation>\n-    where\n-        N: ast::DocCommentsOwner + ast::AttrsOwner,\n-    {\n-        docs_from_ast(node)\n-    }\n-\n-    pub fn as_str(&self) -> &str {\n-        &*self.0\n-    }\n-}\n-\n-pub(crate) fn docs_from_ast<N>(node: &N) -> Option<Documentation>\n-where\n-    N: ast::DocCommentsOwner + ast::AttrsOwner,\n-{\n-    let doc_comment_text = node.doc_comment_text();\n-    let doc_attr_text = expand_doc_attrs(node);\n-    let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n-    docs.map(|it| Documentation::new(&it))\n-}\n-\n-fn merge_doc_comments_and_attrs(\n-    doc_comment_text: Option<String>,\n-    doc_attr_text: Option<String>,\n-) -> Option<String> {\n-    match (doc_comment_text, doc_attr_text) {\n-        (Some(mut comment_text), Some(attr_text)) => {\n-            comment_text.reserve(attr_text.len() + 1);\n-            comment_text.push('\\n');\n-            comment_text.push_str(&attr_text);\n-            Some(comment_text)\n-        }\n-        (Some(comment_text), None) => Some(comment_text),\n-        (None, Some(attr_text)) => Some(attr_text),\n-        (None, None) => None,\n-    }\n-}\n-\n-fn expand_doc_attrs(owner: &dyn ast::AttrsOwner) -> Option<String> {\n-    let mut docs = String::new();\n-    owner\n-        .attrs()\n-        .filter_map(|attr| attr.as_simple_key_value().filter(|(key, _)| key == \"doc\"))\n-        .map(|(_, value)| value)\n-        .intersperse(SmolStr::new_inline(\"\\n\"))\n-        // No FromIterator<SmolStr> for String\n-        .for_each(|s| docs.push_str(s.as_str()));\n-    if docs.is_empty() {\n-        None\n-    } else {\n-        Some(docs)\n-    }\n-}"}, {"sha": "02ed30e4d62468a21285c1ec099197c30e68dd68", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=1caaa201fa55caaedaa124d23934c178bdf15b18", "patch": "@@ -31,7 +31,6 @@ pub mod adt;\n pub mod data;\n pub mod generics;\n pub mod lang_item;\n-pub mod docs;\n \n pub mod expr;\n pub mod body;"}, {"sha": "1b6ff6d2109f3f0ad3f848ec47dc0521fdcdc7d9", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa201fa55caaedaa124d23934c178bdf15b18/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=1caaa201fa55caaedaa124d23934c178bdf15b18", "patch": "@@ -1,6 +1,6 @@\n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n-    Module, ModuleDef, ModuleSource, Semantics,\n+    Adt, AsAssocItem, AssocItemContainer, FieldSource, HasAttrs, HasSource, HirDisplay, Module,\n+    ModuleDef, ModuleSource, Semantics,\n };\n use ide_db::base_db::SourceDatabase;\n use ide_db::{\n@@ -319,31 +319,27 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {\n-            let src = it.source(db);\n-            let docs = Documentation::from_ast(&src.value).map(Into::into);\n-            hover_markup(docs, Some(macro_label(&src.value)), mod_path)\n+            let label = macro_label(&it.source(db).value);\n+            from_def_source_labeled(db, it, Some(label), mod_path)\n         }\n-        Definition::Field(it) => {\n-            let src = it.source(db);\n-            match src.value {\n-                FieldSource::Named(it) => {\n-                    let docs = Documentation::from_ast(&it).map(Into::into);\n-                    hover_markup(docs, it.short_label(), mod_path)\n-                }\n-                _ => None,\n+        Definition::Field(def) => {\n+            let src = def.source(db).value;\n+            if let FieldSource::Named(it) = src {\n+                from_def_source_labeled(db, def, it.short_label(), mod_path)\n+            } else {\n+                None\n             }\n         }\n         Definition::ModuleDef(it) => match it {\n-            ModuleDef::Module(it) => match it.definition_source(db).value {\n-                ModuleSource::Module(it) => {\n-                    let docs = Documentation::from_ast(&it).map(Into::into);\n-                    hover_markup(docs, it.short_label(), mod_path)\n-                }\n-                ModuleSource::SourceFile(it) => {\n-                    let docs = Documentation::from_ast(&it).map(Into::into);\n-                    hover_markup(docs, it.short_label(), mod_path)\n-                }\n-            },\n+            ModuleDef::Module(it) => from_def_source_labeled(\n+                db,\n+                it,\n+                match it.definition_source(db).value {\n+                    ModuleSource::Module(it) => it.short_label(),\n+                    ModuleSource::SourceFile(it) => it.short_label(),\n+                },\n+                mod_path,\n+            ),\n             ModuleDef::Function(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it, mod_path),\n             ModuleDef::Adt(Adt::Union(it)) => from_def_source(db, it, mod_path),\n@@ -371,12 +367,24 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n \n     fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<Markup>\n     where\n-        D: HasSource<Ast = A>,\n-        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel + ast::AttrsOwner,\n+        D: HasSource<Ast = A> + HasAttrs + Copy,\n+        A: ShortLabel,\n+    {\n+        let short_label = def.source(db).value.short_label();\n+        from_def_source_labeled(db, def, short_label, mod_path)\n+    }\n+\n+    fn from_def_source_labeled<D>(\n+        db: &RootDatabase,\n+        def: D,\n+        short_label: Option<String>,\n+        mod_path: Option<String>,\n+    ) -> Option<Markup>\n+    where\n+        D: HasAttrs,\n     {\n-        let src = def.source(db);\n-        let docs = Documentation::from_ast(&src.value).map(Into::into);\n-        hover_markup(docs, src.value.short_label(), mod_path)\n+        let docs = def.attrs(db).docs().map(Into::into);\n+        hover_markup(docs, short_label, mod_path)\n     }\n }\n "}]}