{"sha": "204bd6e2156c01ba183532294b6dd9366e0c0a04", "node_id": "C_kwDOAAsO6NoAKDIwNGJkNmUyMTU2YzAxYmExODM1MzIyOTRiNmRkOTM2NmUwYzBhMDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-13T20:51:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-13T20:51:03Z"}, "message": "Rollup merge of #89759 - jyn514:x-build-assemble, r=Mark-Simulacrum\n\nAssemble the compiler when running `x.py build`\n\nPreviously, there was no way to actually get binaries in\n`build/$TARGET/stage1/bin` without building the standard library. This\nmakes it possible to build just the compiler. This can be useful when\nthe standard library isn't actually necessary for trying out your tests\n(e.g. a bug that can be reproduced with only a `no_core` crate).\n\nCloses https://github.com/rust-lang/rust/issues/73519.", "tree": {"sha": "fd4b7b790235d85a84ea97fce50fc5dac04a3a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd4b7b790235d85a84ea97fce50fc5dac04a3a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204bd6e2156c01ba183532294b6dd9366e0c0a04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZ0a3CRBK7hj4Ov3rIwAAS1UIAIH8bAzXXYt9D5t8PnfJcwTR\nlMk37+YjiSXxTUckkNNTJ5BS2cAiAjU0ArwRoCUMCCAIN/Eb28YarjH1ok64cFUL\naPTf3wNnHaE57nq9Ym+mNcQbNz45HDoXp0qtzmzS0h6IF6G/daeSs212onLtWUK0\np0TfFK2lUYRQeRQ2eo+ccDHJ1jZfnbRpWHwoI3oFX4iManMhO41KJ3UwXWQrv4nb\nHHpxyMWXeC3pmLzi8+qeVIeMtS1NJLrhY0O5IJzFlcrqpNiac3G238zQh+5tFXD9\nC2qFt4LNihj9mR+w2T6asBBZqV3tLqA4dHVGmc9D9mibzAUW37PSwQ5B/6WXkMA=\n=PUlD\n-----END PGP SIGNATURE-----\n", "payload": "tree fd4b7b790235d85a84ea97fce50fc5dac04a3a17\nparent 9f0ef184b815318bf044194e150f612a3d898105\nparent 31265c6ca3a2d404b7dbda0e3529f0be7c38cde7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634158263 +0200\ncommitter GitHub <noreply@github.com> 1634158263 +0200\n\nRollup merge of #89759 - jyn514:x-build-assemble, r=Mark-Simulacrum\n\nAssemble the compiler when running `x.py build`\n\nPreviously, there was no way to actually get binaries in\n`build/$TARGET/stage1/bin` without building the standard library. This\nmakes it possible to build just the compiler. This can be useful when\nthe standard library isn't actually necessary for trying out your tests\n(e.g. a bug that can be reproduced with only a `no_core` crate).\n\nCloses https://github.com/rust-lang/rust/issues/73519.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204bd6e2156c01ba183532294b6dd9366e0c0a04", "html_url": "https://github.com/rust-lang/rust/commit/204bd6e2156c01ba183532294b6dd9366e0c0a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204bd6e2156c01ba183532294b6dd9366e0c0a04/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0ef184b815318bf044194e150f612a3d898105", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0ef184b815318bf044194e150f612a3d898105", "html_url": "https://github.com/rust-lang/rust/commit/9f0ef184b815318bf044194e150f612a3d898105"}, {"sha": "31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "url": "https://api.github.com/repos/rust-lang/rust/commits/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "html_url": "https://github.com/rust-lang/rust/commit/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "6750f7a549dd6d338b027f223d87ff39f5eea916", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/204bd6e2156c01ba183532294b6dd9366e0c0a04/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204bd6e2156c01ba183532294b6dd9366e0c0a04/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=204bd6e2156c01ba183532294b6dd9366e0c0a04", "patch": "@@ -370,7 +370,7 @@ impl<'a> Builder<'a> {\n         match kind {\n             Kind::Build => describe!(\n                 compile::Std,\n-                compile::Rustc,\n+                compile::Assemble,\n                 compile::CodegenBackend,\n                 compile::StartupObjects,\n                 tool::BuildManifest,"}, {"sha": "e9cc7662e6397a9b8bd9c5b2a0392cd4f9115194", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/204bd6e2156c01ba183532294b6dd9366e0c0a04/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204bd6e2156c01ba183532294b6dd9366e0c0a04/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=204bd6e2156c01ba183532294b6dd9366e0c0a04", "patch": "@@ -528,7 +528,7 @@ impl Step for Rustc {\n     const DEFAULT: bool = false;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"compiler/rustc\")\n+        run.never()\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1023,9 +1023,16 @@ pub struct Assemble {\n \n impl Step for Assemble {\n     type Output = Compiler;\n+    const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.never()\n+        run.path(\"compiler/rustc\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Assemble {\n+            target_compiler: run.builder.compiler(run.builder.top_stage + 1, run.target),\n+        });\n     }\n \n     /// Prepare a new compiler from the artifacts in `stage`"}]}