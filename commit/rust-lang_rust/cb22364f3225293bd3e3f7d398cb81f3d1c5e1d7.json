{"sha": "cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjIzNjRmMzIyNTI5M2JkM2UzZjdkMzk4Y2I4MWYzZDFjNWUxZDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-02T13:45:06Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-02T13:45:06Z"}, "message": "Merge E0002 into E0004", "tree": {"sha": "866fe631829052fe1ae56f5082d8bb958e54f804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866fe631829052fe1ae56f5082d8bb958e54f804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7", "html_url": "https://github.com/rust-lang/rust/commit/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe36876ce144e6f30fa6d0d5647e54ade812b169", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe36876ce144e6f30fa6d0d5647e54ade812b169", "html_url": "https://github.com/rust-lang/rust/commit/fe36876ce144e6f30fa6d0d5647e54ade812b169"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "dd1f313f9af0085ff90e858879f088a3ad37f239", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7", "patch": "@@ -25,8 +25,10 @@ use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization::{cmt};\n use rustc::hir::pat_util::*;\n+use rustc::session::Session;\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_errors::DiagnosticBuilder;\n use std::cmp::Ordering;\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator, repeat};\n@@ -163,6 +165,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.sess.abort_if_errors();\n }\n \n+fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {\n+    struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n+}\n+\n fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n     intravisit::walk_expr(cx, ex);\n     match ex.node {\n@@ -215,9 +221,10 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n             if inlined_arms.is_empty() {\n                 if !pat_ty.is_uninhabited(cx.tcx) {\n                     // We know the type is inhabited, so this must be wrong\n-                    let mut err = struct_span_err!(cx.tcx.sess, ex.span, E0002,\n-                                                   \"non-exhaustive patterns: type {} is non-empty\",\n-                                                   pat_ty);\n+                    let mut err = create_e0004(cx.tcx.sess, ex.span,\n+                                               format!(\"non-exhaustive patterns: type {} \\\n+                                                        is non-empty\",\n+                                                       pat_ty));\n                     span_help!(&mut err, ex.span,\n                         \"Please ensure that all possible cases are being handled; \\\n                          possibly adding wildcards or more match arms.\");\n@@ -438,10 +445,11 @@ fn check_exhaustive<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,\n                         1 => format!(\"pattern {} not covered\", joined_patterns),\n                         _ => format!(\"patterns {} not covered\", joined_patterns)\n                     };\n-                    struct_span_err!(cx.tcx.sess, sp, E0004,\n-                        \"non-exhaustive patterns: {} not covered\",\n-                        joined_patterns\n-                    ).span_label(sp, &label_text).emit();\n+                    create_e0004(cx.tcx.sess, sp,\n+                                 format!(\"non-exhaustive patterns: {} not covered\",\n+                                         joined_patterns))\n+                        .span_label(sp, &label_text)\n+                        .emit();\n                 },\n             }\n         }"}, {"sha": "824b86cfa83120755de6f06f93e39c93178b27ed", "filename": "src/test/compile-fail/E0004-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7/src%2Ftest%2Fcompile-fail%2FE0004-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7/src%2Ftest%2Fcompile-fail%2FE0004-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0004-2.rs?ref=cb22364f3225293bd3e3f7d398cb81f3d1c5e1d7", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let x = Some(1);\n \n-    match x { } //~ ERROR E0002\n+    match x { } //~ ERROR E0004\n }", "previous_filename": "src/test/compile-fail/E0002.rs"}]}