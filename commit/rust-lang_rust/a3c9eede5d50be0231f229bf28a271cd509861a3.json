{"sha": "a3c9eede5d50be0231f229bf28a271cd509861a3", "node_id": "C_kwDOAAsO6NoAKGEzYzllZWRlNWQ1MGJlMDIzMWYyMjliZjI4YTI3MWNkNTA5ODYxYTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T16:50:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T16:50:33Z"}, "message": "Auto merge of #107924 - eggyal:move_fold_visit_traits_to_type_lib_with_trait_alias, r=oli-obk\n\nMove folding & visiting traits into type library\n\nThis is a rework of #107712, following feedback on that PR.\n\nIn particular, this version uses trait aliases to reduce the API churn for trait consumers.  Doing so requires a workaround for #107747 until its fix in #107803 is merged into the stage0 compiler; this workaround, which uses conditional compilation based on the `bootstrap` configuration predicate, sits in dedicated commit b409329c for ease of reversion.\n\nThe possibility of the `rustc_middle` crate retaining its own distinct versions of each folding/visiting trait, blanket-implemented on all types that implement the respective trait in the type library, was also explored: however since this would necessitate making each `rustc_middle` trait a subtrait of the respective type library trait (so that such blanket implementations can delegate their generic methods), no benefit would be gained.\n\nr? types", "tree": {"sha": "0ced7792612b8bce84396c87f1e78e3e54ab6800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ced7792612b8bce84396c87f1e78e3e54ab6800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c9eede5d50be0231f229bf28a271cd509861a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c9eede5d50be0231f229bf28a271cd509861a3", "html_url": "https://github.com/rust-lang/rust/commit/a3c9eede5d50be0231f229bf28a271cd509861a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c9eede5d50be0231f229bf28a271cd509861a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b439b119b8d49450bddbbea317afeb0d4166f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b439b119b8d49450bddbbea317afeb0d4166f70", "html_url": "https://github.com/rust-lang/rust/commit/0b439b119b8d49450bddbbea317afeb0d4166f70"}, {"sha": "63ad5d0522053d7eb345eee404954ec24759f956", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ad5d0522053d7eb345eee404954ec24759f956", "html_url": "https://github.com/rust-lang/rust/commit/63ad5d0522053d7eb345eee404954ec24759f956"}], "stats": {"total": 2181, "additions": 1182, "deletions": 999}, "files": [{"sha": "70124dba80951620bb8e300c6260a08869f51497", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n \n use crate::{"}, {"sha": "c7fe382bac4e3be45f55bf4daea2888bf6a9c80c", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n     pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n-        TypeFoldable, TypeVisitable, UintTy,\n+        TypeFoldable, UintTy,\n     };\n     pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n "}, {"sha": "de1734332d448f01cadfcbf99bc230182fa0189f", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -3,7 +3,7 @@ use crate::traits::*;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n-use rustc_middle::ty::{self, Instance, Ty, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_target::abi::call::{FnAbi, PassMode};\n \n use std::iter;"}, {"sha": "581cb6421f734a804d294d17f1e8ad7ca33ee431", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::mir::interpret::InterpResult;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use std::ops::ControlFlow;\n \n /// Checks whether a type contains generic parameters which require substitution.\n@@ -21,7 +21,7 @@ where\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = FoundParam;\n \n         fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "15a66ccc0f41206fd25c05e5349265e5620d7d3e", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -261,7 +261,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         selftys: Vec<(Span, Option<String>)>,\n     }\n \n-    impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1447,7 +1447,7 @@ fn opaque_type_cycle_error(\n                     opaques: Vec<DefId>,\n                     closures: Vec<DefId>,\n                 }\n-                impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypeCollector {\n+                impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {"}, {"sha": "a926deb2393ded2c94a9f5528bba23c90f328259", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -16,7 +16,7 @@ use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::util::ExplicitSelf;\n use rustc_middle::ty::{\n-    self, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeSuperFoldable,\n };\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n@@ -464,8 +464,8 @@ struct RemapLateBound<'a, 'tcx> {\n     mapping: &'a FxHashMap<ty::BoundRegionKind, ty::BoundRegionKind>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for RemapLateBound<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RemapLateBound<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -829,14 +829,14 @@ impl<'a, 'tcx> ImplTraitInTraitCollector<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.ocx.infcx.tcx\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Alias(ty::Projection, proj) = ty.kind()\n-            && self.tcx().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+            && self.interner().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n         {\n             if let Some((ty, _)) = self.types.get(&proj.def_id) {\n                 return *ty;\n@@ -852,7 +852,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.tcx(), proj.substs) {\n+            for (pred, pred_span) in self.interner().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     &ObligationCause::misc(self.span, self.body_id),\n@@ -861,7 +861,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n                 );\n \n                 self.ocx.register_obligation(traits::Obligation::new(\n-                    self.tcx(),\n+                    self.interner(),\n                     ObligationCause::new(\n                         self.span,\n                         self.body_id,"}, {"sha": "16e7dcd0060da3edf4ca129dae518432cf294e5f", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -16,8 +16,8 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n-    TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n use rustc_session::parse::feature_err;\n@@ -772,7 +772,7 @@ impl<'tcx> GATSubstCollector<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1435,7 +1435,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             struct CountParams {\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::visit::TypeVisitor<'tcx> for CountParams {\n+            impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for CountParams {\n                 type BreakTy = ();\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "d0db8cabfddb27f8c7db1e584ca10da005f51691", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -8,7 +8,7 @@ use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{\n-    self, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};\n@@ -552,7 +552,7 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n         seen: FxHashSet<DefId>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for DisableAutoTraitVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for DisableAutoTraitVisitor<'tcx> {\n         type BreakTy = ();\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             let tcx = self.tcx;"}, {"sha": "3f8d620fe6934f4ed57f84d988dbe0f02a30380b", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeNa\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, DefIdTree, TyCtxt, TypeSuperVisitable};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -1752,7 +1752,7 @@ fn is_late_bound_map(\n \n     use std::ops::ControlFlow;\n     use ty::Ty;\n-    impl<'tcx> TypeVisitor<'tcx> for ConstrainedCollectorPostAstConv {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ConstrainedCollectorPostAstConv {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<!> {\n             match t.kind() {\n                 ty::Param(param_ty) => {"}, {"sha": "54fcccb0c11e4e507ff365e7e5ba403b6c742696", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{\n-    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n@@ -850,8 +850,8 @@ fn infer_placeholder_type<'a>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> TypeFolder<'tcx> for MakeNameable<'tcx> {\n-        fn tcx(&self) -> TyCtxt<'tcx> {\n+    impl<'tcx> TypeFolder<TyCtxt<'tcx>> for MakeNameable<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "072676c400d4ea6da11f8fb46194e709749f2e41", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::Span;\n use std::ops::ControlFlow;\n@@ -56,7 +56,7 @@ struct ParameterCollector {\n     include_nonconstraining: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ParameterCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Alias(ty::Projection, ..) if !self.include_nonconstraining => {"}, {"sha": "8fc4610ae85677057b8568b18b2aca35e3eb07d0", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{ForeignItem, ForeignItemKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, ir::TypeFolder, Region, TyCtxt, TypeFoldable};\n use rustc_span::def_id::LocalDefId;\n use rustc_trait_selection::traits;\n \n@@ -189,8 +189,8 @@ struct EraseAllBoundRegions<'tcx> {\n // us an inaccurate span for an error message, but cannot\n // lead to unsoundness (we call `delay_span_bug` at the start\n // of `diagnostic_hir_wf_check`).\n-impl<'tcx> TypeFolder<'tcx> for EraseAllBoundRegions<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseAllBoundRegions<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {"}, {"sha": "fb63bf224741a6cdbb87e8f268b9b30fa9da5fa2", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -7,8 +7,10 @@ use rustc_arena::DroplessArena;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n+#[cfg(not(bootstrap))]\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, CrateVariancesMap, SubstsRef, Ty, TyCtxt};\n-use rustc_middle::ty::{DefIdTree, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{DefIdTree, TypeSuperVisitable};\n use std::ops::ControlFlow;\n \n /// Defines the `TermsContext` basically houses an arena where we can\n@@ -99,7 +101,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         }\n     }\n \n-    impl<'tcx> ty::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector<'tcx> {\n+    impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeLifetimeCollector<'tcx> {\n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {"}, {"sha": "b1268c5f7923e6445821b892c9fe9bee30073a71", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::{InferOk, InferResult};\n use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, Ty, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -232,7 +232,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 struct MentionsTy<'tcx> {\n                     expected_ty: Ty<'tcx>,\n                 }\n-                impl<'tcx> TypeVisitor<'tcx> for MentionsTy<'tcx> {\n+                impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for MentionsTy<'tcx> {\n                     type BreakTy = ();\n \n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "f434fb922893dad1ffac8c87c8d407d5071b6371", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -3,7 +3,9 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, ir::TypeVisitor, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+};\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits;\n \n@@ -247,7 +249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         t: T,\n     ) -> Option<ty::GenericArg<'tcx>> {\n         struct FindAmbiguousParameter<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, DefId);\n-        impl<'tcx> TypeVisitor<'tcx> for FindAmbiguousParameter<'_, 'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for FindAmbiguousParameter<'_, 'tcx> {\n             type BreakTy = ty::GenericArg<'tcx>;\n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n                 if let Some(origin) = self.0.type_var_origin(ty)"}, {"sha": "60e0ce3494d4383b0d3d096352a356a48d51abf4", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -51,7 +51,6 @@\n use rustc_middle::hir::place::*;\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxIndexMap;"}, {"sha": "b5e6727bfbadf7c8b05ba0209a46ecaca7f59f25", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::ToPredicate;\n-use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;"}, {"sha": "c8256e7ec08e61fbf015699c5380257775cc8227", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n-    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n@@ -963,8 +963,8 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n \n struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n \n-impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for TypeParamEraser<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.0.tcx\n     }\n "}, {"sha": "b6c9a88c82dadd610839033f9f99964cff5d3642", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -13,8 +13,8 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::visit::TypeSuperVisitable;\n use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -561,7 +561,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             struct RecursionChecker {\n                 def_id: LocalDefId,\n             }\n-            impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n+            impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *t.kind() {\n@@ -763,8 +763,8 @@ struct EraseEarlyRegions<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseEarlyRegions<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n@@ -779,8 +779,8 @@ impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -797,7 +797,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 let e = self.report_error(t);\n                 self.replaced_with_error = Some(e);\n-                self.tcx().ty_error_with_guaranteed(e)\n+                self.interner().ty_error_with_guaranteed(e)\n             }\n         }\n     }\n@@ -814,7 +814,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 let e = self.report_error(ct);\n                 self.replaced_with_error = Some(e);\n-                self.tcx().const_error_with_guaranteed(ct.ty(), e)\n+                self.interner().const_error_with_guaranteed(ct.ty(), e)\n             }\n         }\n     }"}, {"sha": "6bfdeda3a246087c3f02a2687983bdc4a6be01ae", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -10,7 +10,7 @@ use crate::infer::canonical::{\n };\n use crate::infer::InferCtxt;\n use rustc_middle::ty::flags::FlagComputation;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags};\n use std::sync::atomic::Ordering;\n@@ -326,8 +326,8 @@ struct Canonicalizer<'cx, 'tcx> {\n     binder_index: ty::DebruijnIndex,\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -738,7 +738,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         let var = self.canonical_var(info, r.into());\n         let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32(), None) };\n         let region = ty::ReLateBound(self.binder_index, br);\n-        self.tcx().mk_region(region)\n+        self.interner().mk_region(region)\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check\n@@ -752,7 +752,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_ty(bound_to)\n         } else {\n             let var = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_bound(self.binder_index, var.into())\n+            self.interner().mk_bound(self.binder_index, var.into())\n         }\n     }\n \n@@ -771,7 +771,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_const(bound_to)\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n-            self.tcx().mk_const(\n+            self.interner().mk_const(\n                 ty::ConstKind::Bound(self.binder_index, var),\n                 self.fold_ty(const_var.ty()),\n             )"}, {"sha": "c2bf075444f882ceac300226de9193c3a45a43ea", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -38,8 +38,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, AliasKind, FallibleTypeFolder, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable, TypeVisitable,\n+    self, ir::FallibleTypeFolder, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n@@ -844,10 +844,10 @@ struct ConstInferUnifier<'cx, 'tcx> {\n     target_vid: ty::ConstVid<'tcx>,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n     type Error = TypeError<'tcx>;\n \n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -875,7 +875,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                             .borrow_mut()\n                             .type_variables()\n                             .new_var(self.for_universe, origin);\n-                        Ok(self.tcx().mk_ty_var(new_var_id))\n+                        Ok(self.interner().mk_ty_var(new_var_id))\n                     }\n                 }\n             }\n@@ -953,7 +953,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                                         },\n                                     },\n                                 );\n-                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n+                            Ok(self.interner().mk_const(new_var_id, c.ty()))\n                         }\n                     }\n                 }"}, {"sha": "9841c3141c9d8d729780a280b85a36986a22893c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1491,7 +1491,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);"}, {"sha": "641477e907dfaa2e8b3d74cbaebcbffd2ce4bc8e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -17,7 +17,8 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_middle::ty::{\n-    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt,\n+    TypeSuperVisitable,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -539,7 +540,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n /// Collect all the trait objects in a type that could have received an implicit `'static` lifetime.\n pub struct TraitObjectVisitor(pub FxIndexSet<DefId>);\n \n-impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Dynamic(preds, re, _) if re.is_static() => {"}, {"sha": "d295881d5d7a0b6bf758a2ed792e95cead57e7d2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for HighlightBuilder<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);"}, {"sha": "41bffdc684da43650edc660159b42bc150a86b81", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -33,8 +33,8 @@\n use super::InferCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::infer::unify_key::ToType;\n-use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable};\n+use rustc_middle::ty::fold::ir::TypeFolder;\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use std::collections::hash_map::Entry;\n \n pub struct TypeFreshener<'a, 'tcx> {\n@@ -105,8 +105,8 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for TypeFreshener<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -124,13 +124,13 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::ReError(_)\n             | ty::ReErased => {\n                 // replace all free regions with 'erased\n-                self.tcx().lifetimes.re_erased\n+                self.interner().lifetimes.re_erased\n             }\n             ty::ReStatic => {\n                 if self.keep_static {\n                     r\n                 } else {\n-                    self.tcx().lifetimes.re_erased\n+                    self.interner().lifetimes.re_erased\n                 }\n             }\n         }"}, {"sha": "cc2f19a5704900bd4f95c4746a44cc73168675aa", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::{self, ConstVid, FloatVid, IntVid, RegionVid, Ty, TyCtxt, TyVid};\n \n use super::type_variable::TypeVariableOrigin;\n@@ -175,8 +175,8 @@ pub struct InferenceFudger<'a, 'tcx> {\n     const_vars: (Range<ConstVid<'tcx>>, Vec<ConstVariableOrigin>),\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for InferenceFudger<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceFudger<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "b5a10ea659037eb611a7035c095271667f9935b3", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BoundVarReplacerDelegate;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::visit::TypeVisitable;\n@@ -1852,8 +1852,8 @@ struct InferenceLiteralEraser<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for InferenceLiteralEraser<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceLiteralEraser<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1870,8 +1870,8 @@ struct ShallowResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for ShallowResolver<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -2064,8 +2064,8 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n         idx: u32,\n     }\n \n-    impl<'tcx> TypeFolder<'tcx> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n-        fn tcx(&self) -> TyCtxt<'tcx> {\n+    impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "644774c93c2a46aa8f1d0630ec856f27fc2607c9", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -29,7 +29,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::Span;\n use std::fmt::Debug;\n@@ -792,7 +792,7 @@ struct ScopeInstantiator<'me, 'tcx> {\n     bound_region_scope: &'me mut BoundRegionScope<'tcx>,\n }\n \n-impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n+impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "5635e8adf34f8df74f1208270e98d7008cb02532", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -12,8 +12,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::GenericArgKind;\n use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n-    TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable, TypeVisitable,\n };\n use rustc_span::Span;\n \n@@ -431,7 +431,7 @@ pub struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP: FnMut(ty::Region<'tcx>)> {\n     pub op: OP,\n }\n \n-impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n+impl<'tcx, OP> TypeVisitor<TyCtxt<'tcx>> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {"}, {"sha": "008bf1e9c5dc4841a4cc86b95a57fae91e37207b", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,9 +1,12 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitor};\n-use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::fold::{\n+    ir::{FallibleTypeFolder, TypeFolder},\n+    TypeSuperFoldable,\n+};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable};\n+use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n use std::ops::ControlFlow;\n \n@@ -28,9 +31,9 @@ impl<'a, 'tcx> OpportunisticVarResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-        TypeFolder::tcx(&self.shallow_resolver)\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticVarResolver<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n+        TypeFolder::interner(&self.shallow_resolver)\n     }\n \n     #[inline]\n@@ -70,8 +73,8 @@ impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -92,7 +95,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n                     .opportunistic_resolve_var(rid);\n-                TypeFolder::tcx(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n+                TypeFolder::interner(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n             }\n             _ => r,\n         }\n@@ -124,7 +127,7 @@ impl<'a, 'tcx> UnresolvedTypeOrConstFinder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n+impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n     type BreakTy = (ty::Term<'tcx>, Option<Span>);\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);\n@@ -208,10 +211,10 @@ struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for FullTypeResolver<'a, 'tcx> {\n     type Error = FixupError<'tcx>;\n \n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "95df6cd62b90bd59888a2812fa5fc0e5f888dc1e", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,8 +1,8 @@\n use crate::traits;\n use crate::traits::project::Normalized;\n-use rustc_middle::ty;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use rustc_middle::ty::visit::{TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir, TyCtxt};\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -61,7 +61,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n \n-impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(traits::Obligation {\n             cause: self.cause,\n@@ -72,7 +72,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n     }\n }\n \n-impl<'tcx, O: TypeVisitable<'tcx>> TypeVisitable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)"}, {"sha": "88c6ea7efb28195bbb4577b66361f25fc17d48a9", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1144,7 +1144,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes;\n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueTypes {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "95bb27ef4f423102d4699e43ecdb9365e180bbee", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -17,13 +17,13 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n         vi.construct(|_, index| {\n             let bind = &bindings[index];\n             quote! {\n-                ::rustc_middle::ty::fold::TypeFoldable::try_fold_with(#bind, __folder)?\n+                ::rustc_middle::ty::fold::ir::TypeFoldable::try_fold_with(#bind, __folder)?\n             }\n         })\n     });\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::fold::TypeFoldable<'tcx>),\n+        quote!(::rustc_middle::ty::fold::ir::TypeFoldable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n             fn try_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n                 self,"}, {"sha": "67057e1a97cc169c25a2fee2fbaebe555ed0623c", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -13,13 +13,13 @@ pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2:\n     s.add_bounds(synstructure::AddBounds::Generics);\n     let body_visit = s.each(|bind| {\n         quote! {\n-            ::rustc_middle::ty::visit::TypeVisitable::visit_with(#bind, __visitor)?;\n+            ::rustc_middle::ty::visit::ir::TypeVisitable::visit_with(#bind, __visitor)?;\n         }\n     });\n     s.bind_with(|_| synstructure::BindStyle::Move);\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::visit::TypeVisitable<'tcx>),\n+        quote!(::rustc_middle::ty::visit::ir::TypeVisitable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n             fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<'tcx>>(\n                 &self,"}, {"sha": "ada516aa0329d2cb47987fc90cc54cbb1c07a5cb", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -42,7 +42,7 @@ pub struct Canonical<'tcx, V> {\n \n pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n-impl<'tcx> ty::TypeFoldable<'tcx> for CanonicalVarInfos<'tcx> {\n+impl<'tcx> ty::ir::TypeFoldable<TyCtxt<'tcx>> for CanonicalVarInfos<'tcx> {\n     fn try_fold_with<F: ty::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,"}, {"sha": "e6cd38c0f1584661073539e572ec350bed32fb89", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -48,18 +48,17 @@\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(control_flow_enum)]\n-#![feature(associated_type_defaults)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]\n-#![feature(unwrap_infallible)]\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(intra_doc_pointers)]\n #![feature(yeet_expr)]\n #![feature(result_option_inspect)]\n #![feature(const_option)]\n+#![feature(trait_alias)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "57d66ac6a039e27cb79af4e543264ec56c89f103", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 3, "deletions": 145, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -69,7 +69,7 @@ macro_rules! CloneLiftImpls {\n macro_rules! TrivialTypeTraversalImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n-            impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::fold::ir::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $ty {\n                 fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                     self,\n                     _: &mut F,\n@@ -86,7 +86,7 @@ macro_rules! TrivialTypeTraversalImpls {\n                 }\n             }\n \n-            impl<$tcx> $crate::ty::visit::TypeVisitable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::visit::ir::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $ty {\n                 #[inline]\n                 fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n                     &self,\n@@ -101,7 +101,7 @@ macro_rules! TrivialTypeTraversalImpls {\n \n     ($($ty:ty,)+) => {\n         TrivialTypeTraversalImpls! {\n-            for <'tcx> {\n+            for<'tcx> {\n                 $($ty,)+\n             }\n         }\n@@ -115,145 +115,3 @@ macro_rules! TrivialTypeTraversalAndLiftImpls {\n         CloneLiftImpls! { $($t)* }\n     }\n }\n-\n-#[macro_export]\n-macro_rules! EnumTypeTraversalImpl {\n-    (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn try_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n-                self,\n-                folder: &mut V,\n-            ) -> ::std::result::Result<Self, V::Error> {\n-                EnumTypeTraversalImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::visit::TypeVisitable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn visit_with<V: $crate::ty::visit::TypeVisitor<$tcx>>(\n-                &self,\n-                visitor: &mut V,\n-            ) -> ::std::ops::ControlFlow<V::BreakTy> {\n-                EnumTypeTraversalImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr) input() output($($output:tt)*)) => {\n-        Ok(match $this {\n-            $($output)*\n-        })\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $variant (\n-                            $($crate::ty::fold::TypeFoldable::try_fold_with($variant_arg, $folder)?),*\n-                        )\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $variant {\n-                            $($variant_arg: $crate::ty::fold::TypeFoldable::fold_with(\n-                                $variant_arg, $folder\n-                            )?),* }\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant => { $variant }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr) input() output($($output:tt)*)) => {\n-        match $this {\n-            $($output)*\n-        }\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $($crate::ty::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $($crate::ty::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant => { ::std::ops::ControlFlow::Continue(()) }\n-                    $($output)*\n-                )\n-        )\n-    };\n-}"}, {"sha": "6f42b69633c84b54767cf3155e49be000b8aac98", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -7,10 +7,10 @@ use crate::mir::interpret::{\n };\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n+use crate::ty::fold::{ir::TypeFoldable, FallibleTypeFolder};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, DefIdTree, List, Ty, TyCtxt};\n+use crate::ty::{self, ir, DefIdTree, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n \n@@ -705,7 +705,11 @@ pub enum BindingForm<'tcx> {\n     RefForGuard,\n }\n \n-TrivialTypeTraversalAndLiftImpls! { BindingForm<'tcx>, }\n+TrivialTypeTraversalAndLiftImpls! {\n+    for<'tcx> {\n+        BindingForm<'tcx>,\n+    }\n+}\n \n mod binding_form_impl {\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -2742,7 +2746,7 @@ impl UserTypeProjection {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for UserTypeProjection {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(UserTypeProjection {\n             base: self.base.try_fold_with(folder)?,\n@@ -2751,7 +2755,7 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for UserTypeProjection {\n     fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit."}, {"sha": "006085c0ef51c92b520dbe293663a812d94b7869", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -30,25 +30,25 @@ TrivialTypeTraversalImpls! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx [InlineAsmTemplatePiece] {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [InlineAsmTemplatePiece] {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx [Span] {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [Span] {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<PlaceElem<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n }\n \n-impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n+impl<'tcx, R: Idx, C: Idx> TypeFoldable<TyCtxt<'tcx>> for BitMatrix<R, C> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }"}, {"sha": "e7c5d44b22ed6213267c39f454534d65371cd5a9", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -2,7 +2,7 @@\n \n use super::*;\n \n-impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n+impl<'tcx, R: Idx, C: Idx> ir::TypeVisitable<TyCtxt<'tcx>> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }"}, {"sha": "bddf84880d297368f995f05a5932691c4dfa2a5b", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -2,7 +2,10 @@ use std::ops::ControlFlow;\n \n use rustc_data_structures::intern::Interned;\n \n-use crate::ty::{FallibleTypeFolder, Ty, TypeFoldable, TypeFolder, TypeVisitable, TypeVisitor};\n+use crate::ty::{\n+    ir::{self, TypeFoldable, TypeVisitable},\n+    FallibleTypeFolder, Ty, TyCtxt, TypeFolder, TypeVisitor,\n+};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub struct ExternalConstraints<'tcx>(pub(crate) Interned<'tcx, ExternalConstraintsData<'tcx>>);\n@@ -23,27 +26,29 @@ pub struct ExternalConstraintsData<'tcx> {\n     pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ExternalConstraints<'tcx> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(FallibleTypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n-            regions: (),\n-            opaque_types: self\n-                .opaque_types\n-                .iter()\n-                .map(|opaque| opaque.try_fold_with(folder))\n-                .collect::<Result<_, F::Error>>()?,\n-        }))\n+        Ok(ir::FallibleTypeFolder::interner(folder).intern_external_constraints(\n+            ExternalConstraintsData {\n+                regions: (),\n+                opaque_types: self\n+                    .opaque_types\n+                    .iter()\n+                    .map(|opaque| opaque.try_fold_with(folder))\n+                    .collect::<Result<_, F::Error>>()?,\n+            },\n+        ))\n     }\n \n     fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        TypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+        ir::TypeFolder::interner(folder).intern_external_constraints(ExternalConstraintsData {\n             regions: (),\n             opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n         })\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ExternalConstraints<'tcx> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(\n         &self,\n         visitor: &mut V,"}, {"sha": "b7f0a0be75ee2c104b714341719b66bafc09744a", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,7 +1,6 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::ty::{\n-    self, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, ir::TypeFolder, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n };\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n@@ -53,8 +52,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             tcx: TyCtxt<'tcx>,\n         }\n \n-        impl<'tcx> TypeFolder<'tcx> for Expander<'tcx> {\n-            fn tcx(&self) -> TyCtxt<'tcx> {\n+        impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Expander<'tcx> {\n+            fn interner(&self) -> TyCtxt<'tcx> {\n                 self.tcx\n             }\n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "02088fffeb6c31b79d9eb2586415f2470104caed", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -100,9 +100,11 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type AdtDef = ty::AdtDef<'tcx>;\n     type SubstsRef = ty::SubstsRef<'tcx>;\n     type DefId = DefId;\n+    type Binder<T> = Binder<'tcx, T>;\n     type Ty = Ty<'tcx>;\n     type Const = ty::Const<'tcx>;\n     type Region = Region<'tcx>;\n+    type Predicate = Predicate<'tcx>;\n     type TypeAndMut = TypeAndMut<'tcx>;\n     type Mutability = hir::Mutability;\n     type Movability = hir::Movability;"}, {"sha": "fc529f5d1d0993e938e48624f58d0e49bdf96ab4", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -3,9 +3,10 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, FallibleTypeFolder, InferConst,\n-    InferTy, Opaque, PolyTraitPredicate, Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n-    TypeSuperVisitable, TypeVisitor,\n+    ir::{FallibleTypeFolder, TypeVisitor},\n+    visit::TypeVisitable,\n+    AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque, PolyTraitPredicate,\n+    Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeSuperVisitable,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -460,7 +461,7 @@ pub struct IsSuggestableVisitor<'tcx> {\n     infer_suggestable: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for IsSuggestableVisitor<'tcx> {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -535,10 +536,10 @@ pub struct MakeSuggestableFolder<'tcx> {\n     infer_suggestable: bool,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for MakeSuggestableFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for MakeSuggestableFolder<'tcx> {\n     type Error = ();\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "d3b031bf8755c80dec327444df1f92be883146b9", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,5 +1,4 @@\n-use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n-use crate::ty::visit::TypeVisitable;\n+use crate::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n pub(super) fn provide(providers: &mut ty::query::Providers) {\n@@ -35,8 +34,8 @@ struct RegionEraserVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RegionEraserVisitor<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "352daa8fc298889e73afab1fc6c33a793983ff48", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 16, "deletions": 207, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,209 +1,18 @@\n-//! A folding traversal mechanism for complex data structures that contain type\n-//! information.\n-//!\n-//! This is a modifying traversal. It consumes the data structure, producing a\n-//! (possibly) modified version of it. Both fallible and infallible versions are\n-//! available. The name is potentially confusing, because this traversal is more\n-//! like `Iterator::map` than `Iterator::fold`.\n-//!\n-//! This traversal has limited flexibility. Only a small number of \"types of\n-//! interest\" within the complex data structures can receive custom\n-//! modification. These are the ones containing the most important type-related\n-//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n-//!\n-//! There are three groups of traits involved in each traversal.\n-//! - `TypeFoldable`. This is implemented once for many types, including:\n-//!   - Types of interest, for which the methods delegate to the folder.\n-//!   - All other types, including generic containers like `Vec` and `Option`.\n-//!     It defines a \"skeleton\" of how they should be folded.\n-//! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n-//!   and defines the folding \"skeleton\" for these types.\n-//! - `TypeFolder`/`FallibleTypeFolder. One of these is implemented for each\n-//!   folder. This defines how types of interest are folded.\n-//!\n-//! This means each fold is a mixture of (a) generic folding operations, and (b)\n-//! custom fold operations that are specific to the folder.\n-//! - The `TypeFoldable` impls handle most of the traversal, and call into\n-//!   `TypeFolder`/`FallibleTypeFolder` when they encounter a type of interest.\n-//! - A `TypeFolder`/`FallibleTypeFolder` may call into another `TypeFoldable`\n-//!   impl, because some of the types of interest are recursive and can contain\n-//!   other types of interest.\n-//! - A `TypeFolder`/`FallibleTypeFolder` may also call into a `TypeSuperFoldable`\n-//!   impl, because each folder might provide custom handling only for some types\n-//!   of interest, or only for some variants of each type of interest, and then\n-//!   use default traversal for the remaining cases.\n-//!\n-//! For example, if you have `struct S(Ty, U)` where `S: TypeFoldable` and `U:\n-//! TypeFoldable`, and an instance `s = S(ty, u)`, it would be folded like so:\n-//! ```text\n-//! s.fold_with(folder) calls\n-//! - ty.fold_with(folder) calls\n-//!   - folder.fold_ty(ty) may call\n-//!     - ty.super_fold_with(folder)\n-//! - u.fold_with(folder)\n-//! ```\n use crate::ty::{self, Binder, BoundTy, Ty, TyCtxt, TypeVisitable};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n \n use std::collections::BTreeMap;\n \n-/// This trait is implemented for every type that can be folded,\n-/// providing the skeleton of the traversal.\n-///\n-/// To implement this conveniently, use the derive macro located in\n-/// `rustc_macros`.\n-pub trait TypeFoldable<'tcx>: TypeVisitable<'tcx> {\n-    /// The entry point for folding. To fold a value `t` with a folder `f`\n-    /// call: `t.try_fold_with(f)`.\n-    ///\n-    /// For most types, this just traverses the value, calling `try_fold_with`\n-    /// on each field/element.\n-    ///\n-    /// For types of interest (such as `Ty`), the implementation of method\n-    /// calls a folder method specifically for that type (such as\n-    /// `F::try_fold_ty`). This is where control transfers from `TypeFoldable`\n-    /// to `TypeFolder`.\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error>;\n-\n-    /// A convenient alternative to `try_fold_with` for use with infallible\n-    /// folders. Do not override this method, to ensure coherence with\n-    /// `try_fold_with`.\n-    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        self.try_fold_with(folder).into_ok()\n-    }\n-}\n-\n-// This trait is implemented for types of interest.\n-pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n-    /// Provides a default fold for a type of interest. This should only be\n-    /// called within `TypeFolder` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n-    /// For example, in `MyFolder::try_fold_ty(ty)`, it is valid to call\n-    /// `ty.try_super_fold_with(self)`, but any other folding should be done\n-    /// with `xyz.try_fold_with(self)`.\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error>;\n-\n-    /// A convenient alternative to `try_super_fold_with` for use with\n-    /// infallible folders. Do not override this method, to ensure coherence\n-    /// with `try_super_fold_with`.\n-    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        self.try_super_fold_with(folder).into_ok()\n-    }\n-}\n-\n-/// This trait is implemented for every infallible folding traversal. There is\n-/// a fold method defined for every type of interest. Each such method has a\n-/// default that does an \"identity\" fold. Implementations of these methods\n-/// often fall back to a `super_fold_with` method if the primary argument\n-/// doesn't satisfy a particular condition.\n-///\n-/// A blanket implementation of [`FallibleTypeFolder`] will defer to\n-/// the infallible methods of this trait to ensure that the two APIs\n-/// are coherent.\n-pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n-    fn tcx(&self) -> TyCtxt<'tcx>;\n-\n-    fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        t.super_fold_with(self)\n-    }\n-\n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        t.super_fold_with(self)\n-    }\n-\n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        r.super_fold_with(self)\n-    }\n-\n-    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        c.super_fold_with(self)\n-    }\n-\n-    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n-        p.super_fold_with(self)\n-    }\n-}\n-\n-/// This trait is implemented for every folding traversal. There is a fold\n-/// method defined for every type of interest. Each such method has a default\n-/// that does an \"identity\" fold.\n-///\n-/// A blanket implementation of this trait (that defers to the relevant\n-/// method of [`TypeFolder`]) is provided for all infallible folders in\n-/// order to ensure the two APIs are coherent.\n-pub trait FallibleTypeFolder<'tcx>: Sized {\n-    type Error;\n-\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n+pub trait TypeFoldable<'tcx> = ir::TypeFoldable<TyCtxt<'tcx>> + TypeVisitable<'tcx>;\n+pub trait TypeSuperFoldable<'tcx> = ir::TypeSuperFoldable<TyCtxt<'tcx>>;\n+pub trait TypeFolder<'tcx> = ir::TypeFolder<TyCtxt<'tcx>>;\n+pub trait FallibleTypeFolder<'tcx> = ir::FallibleTypeFolder<TyCtxt<'tcx>>;\n \n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        t.try_super_fold_with(self)\n-    }\n-\n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n-        t.try_super_fold_with(self)\n-    }\n-\n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n-        r.try_super_fold_with(self)\n-    }\n-\n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n-        c.try_super_fold_with(self)\n-    }\n-\n-    fn try_fold_predicate(\n-        &mut self,\n-        p: ty::Predicate<'tcx>,\n-    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n-        p.try_super_fold_with(self)\n-    }\n-}\n-\n-// This blanket implementation of the fallible trait for infallible folders\n-// delegates to infallible methods to ensure coherence.\n-impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n-where\n-    F: TypeFolder<'tcx>,\n-{\n-    type Error = !;\n-\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n-        TypeFolder::tcx(self)\n-    }\n-\n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, !>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        Ok(self.fold_binder(t))\n-    }\n-\n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, !> {\n-        Ok(self.fold_ty(t))\n-    }\n-\n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, !> {\n-        Ok(self.fold_region(r))\n-    }\n-\n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, !> {\n-        Ok(self.fold_const(c))\n-    }\n-\n-    fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n-        Ok(self.fold_predicate(p))\n-    }\n+pub mod ir {\n+    pub use rustc_type_ir::fold::{\n+        FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    };\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -221,13 +30,13 @@ where\n     pub ct_op: H,\n }\n \n-impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>\n+impl<'tcx, F, G, H> ir::TypeFolder<TyCtxt<'tcx>> for BottomUpFolder<'tcx, F, G, H>\n where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n     H: FnMut(ty::Const<'tcx>) -> ty::Const<'tcx>,\n {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -311,8 +120,8 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -385,11 +194,11 @@ impl<'tcx, D: BoundVarReplacerDelegate<'tcx>> BoundVarReplacer<'tcx, D> {\n     }\n }\n \n-impl<'tcx, D> TypeFolder<'tcx> for BoundVarReplacer<'tcx, D>\n+impl<'tcx, D> ir::TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'tcx, D>\n where\n     D: BoundVarReplacerDelegate<'tcx>,\n {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -651,8 +460,8 @@ impl<'tcx> Shifter<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> ir::TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "55f2395e531a5240582629df3a1fce9f9d94707e", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,6 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use crate::ty::{EarlyBinder, InternalSubsts, SubstsRef};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n@@ -674,8 +674,8 @@ fn polymorphize<'tcx>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n-        fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for PolymorphizationFolder<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "1d76f435e26d951a0211145c591acdcbd10c97a7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1120,6 +1120,13 @@ impl From<call::AdjustForForeignAbiError> for FnAbiError<'_> {\n \n impl<'tcx> fmt::Display for FnAbiError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        #[cfg(bootstrap)]\n+        match self {\n+            Self::Layout(err) => fmt::Display::fmt(err, f),\n+            Self::AdjustForForeignAbi(err) => fmt::Display::fmt(err, f),\n+        }\n+\n+        #[cfg(not(bootstrap))]\n         match self {\n             Self::Layout(err) => err.fmt(f),\n             Self::AdjustForForeignAbi(err) => err.fmt(f),"}, {"sha": "4ed0484438f2ed52ae20e1e0ecf963fb7181bbd1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -146,6 +146,10 @@ mod structural_impls;\n mod sty;\n mod typeck_results;\n \n+pub mod ir {\n+    pub use super::{fold::ir::*, visit::ir::*};\n+}\n+\n // Data types\n \n pub type RegisteredTools = FxHashSet<Ident>;\n@@ -913,13 +917,13 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Term<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Term<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self.unpack().try_fold_with(folder)?.pack())\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Term<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.unpack().visit_with(visitor)\n     }\n@@ -1615,7 +1619,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n     fn try_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -1628,7 +1632,7 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)"}, {"sha": "825e5fbe232fc82a543491d31c2f16ce6e33e707", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -9,7 +9,10 @@\n \n use crate::mir;\n use crate::traits::query::NoSolution;\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n+use crate::ty::fold::{\n+    ir::{FallibleTypeFolder, TypeFolder},\n+    TypeFoldable,\n+};\n use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt};\n \n #[derive(Debug, Copy, Clone, HashStable, TyEncodable, TyDecodable)]\n@@ -202,8 +205,8 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for NormalizeAfterErasingRegionsFolder<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -238,10 +241,10 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "66c878c8b6358a013ebc5eeea06187bb6433765f", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,7 +1,9 @@\n use crate::error::ConstNotUsedTraitAlias;\n-use crate::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+#[cfg(not(bootstrap))]\n+use crate::ty::TypeFoldable;\n+use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n@@ -91,8 +93,8 @@ impl<'tcx> ReverseMapper<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -141,7 +143,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.tcx().re_error(e)\n+                self.interner().re_error(e)\n             }\n         }\n     }\n@@ -186,7 +188,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                                 .emit();\n                         }\n \n-                        self.tcx().ty_error()\n+                        self.interner().ty_error()\n                     }\n                 }\n             }\n@@ -214,7 +216,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                             });\n                         }\n \n-                        self.tcx().const_error(ct.ty())\n+                        self.interner().const_error(ct.ty())\n                     }\n                 }\n             }"}, {"sha": "f50a5d89d3d1ec8c91944684e510f201c9f6d359", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -2221,8 +2221,8 @@ struct RegionFolder<'a, 'tcx> {\n             ),\n }\n \n-impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -2493,7 +2493,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for RegionNameCollector<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for RegionNameCollector<'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "97ee2b1fc5dd1b1781c5df2ad7ea7d8a1e7713fa", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 54, "deletions": 269, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,20 +1,19 @@\n-//! This module contains implements of the `Lift` and `TypeFoldable`\n-//! traits for various types in the Rust compiler. Most are written by\n-//! hand, though we've recently added some macros and proc-macros to help with the tedium.\n+//! This module contains implementations of the `Lift`, `TypeFoldable` and\n+//! `TypeVisitable` traits for various types in the Rust compiler. Most are\n+//! written by hand, though we've recently added some macros and proc-macros\n+//! to help with the tedium.\n \n use crate::mir::interpret;\n use crate::mir::{Field, ProjectionKind};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeSuperFoldable, FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n-use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use crate::ty::{self, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n-use rustc_data_structures::functor::IdFunctor;\n+use crate::ty::visit::{ir::TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use crate::ty::{self, ir, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_hir::def::Namespace;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::abi::TyAndLayout;\n \n use std::fmt;\n-use std::mem::ManuallyDrop;\n use std::ops::ControlFlow;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -195,17 +194,27 @@ impl<'tcx> fmt::Debug for AliasTy<'tcx> {\n // Atomic structs\n //\n // For things that don't carry any arena-allocated data (and are\n-// copy...), just add them to this list.\n+// copy...), just add them to one of these lists as appropriat.\n \n-TrivialTypeTraversalAndLiftImpls! {\n+// For things for which the type library provides traversal implementations\n+// for all Interners, we only need to provide a Lift implementation:\n+CloneLiftImpls! {\n     (),\n     bool,\n     usize,\n-    ::rustc_target::abi::VariantIdx,\n     u16,\n     u32,\n     u64,\n     String,\n+    rustc_type_ir::DebruijnIndex,\n+}\n+\n+// For things about which the type library does not know, or does not\n+// provide any traversal implementations, we need to provide both a Lift\n+// implementation and traversal implementations (the latter only for\n+// TyCtxt<'_> interners).\n+TrivialTypeTraversalAndLiftImpls! {\n+    ::rustc_target::abi::VariantIdx,\n     crate::middle::region::Scope,\n     crate::ty::FloatTy,\n     ::rustc_ast::InlineAsmOptions,\n@@ -257,7 +266,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n-    rustc_type_ir::DebruijnIndex,\n     ty::BoundVar,\n     ty::Placeholder<ty::BoundVar>,\n }\n@@ -360,235 +368,34 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// TypeFoldable implementations.\n+// Traversal implementations.\n \n /// AdtDefs are basically the same as a DefId.\n-impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<(T, U), F::Error> {\n-        Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> TypeVisitable<'tcx> for (T, U) {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.0.visit_with(visitor)?;\n-        self.1.visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>\n-    for (A, B, C)\n-{\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<(A, B, C), F::Error> {\n-        Ok((\n-            self.0.try_fold_with(folder)?,\n-            self.1.try_fold_with(folder)?,\n-            self.2.try_fold_with(folder)?,\n-        ))\n-    }\n-}\n-\n-impl<'tcx, A: TypeVisitable<'tcx>, B: TypeVisitable<'tcx>, C: TypeVisitable<'tcx>>\n-    TypeVisitable<'tcx> for (A, B, C)\n-{\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.0.visit_with(visitor)?;\n-        self.1.visit_with(visitor)?;\n-        self.2.visit_with(visitor)\n-    }\n-}\n-\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where T: TypeFoldable<'tcx>\n-}\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T> TypeVisitable<'tcx> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where T: TypeVisitable<'tcx>\n-}\n-\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T, E> TypeFoldable<'tcx> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where T: TypeFoldable<'tcx>, E: TypeFoldable<'tcx>,\n-}\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T, E> TypeVisitable<'tcx> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where T: TypeVisitable<'tcx>, E: TypeVisitable<'tcx>,\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        mut self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        // We merely want to replace the contained `T`, if at all possible,\n-        // so that we don't needlessly allocate a new `Rc` or indeed clone\n-        // the contained type.\n-        unsafe {\n-            // First step is to ensure that we have a unique reference to\n-            // the contained type, which `Rc::make_mut` will accomplish (by\n-            // allocating a new `Rc` and cloning the `T` only if required).\n-            // This is done *before* casting to `Rc<ManuallyDrop<T>>` so that\n-            // panicking during `make_mut` does not leak the `T`.\n-            Rc::make_mut(&mut self);\n-\n-            // Casting to `Rc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n-            // is `repr(transparent)`.\n-            let ptr = Rc::into_raw(self).cast::<ManuallyDrop<T>>();\n-            let mut unique = Rc::from_raw(ptr);\n-\n-            // Call to `Rc::make_mut` above guarantees that `unique` is the\n-            // sole reference to the contained value, so we can avoid doing\n-            // a checked `get_mut` here.\n-            let slot = Rc::get_mut_unchecked(&mut unique);\n-\n-            // Semantically move the contained type out from `unique`, fold\n-            // it, then move the folded value back into `unique`. Should\n-            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n-            // value is not re-dropped.\n-            let owned = ManuallyDrop::take(slot);\n-            let folded = owned.try_fold_with(folder)?;\n-            *slot = ManuallyDrop::new(folded);\n-\n-            // Cast back to `Rc<T>`.\n-            Ok(Rc::from_raw(Rc::into_raw(unique).cast()))\n-        }\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Rc<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        (**self).visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        mut self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        // We merely want to replace the contained `T`, if at all possible,\n-        // so that we don't needlessly allocate a new `Arc` or indeed clone\n-        // the contained type.\n-        unsafe {\n-            // First step is to ensure that we have a unique reference to\n-            // the contained type, which `Arc::make_mut` will accomplish (by\n-            // allocating a new `Arc` and cloning the `T` only if required).\n-            // This is done *before* casting to `Arc<ManuallyDrop<T>>` so that\n-            // panicking during `make_mut` does not leak the `T`.\n-            Arc::make_mut(&mut self);\n-\n-            // Casting to `Arc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n-            // is `repr(transparent)`.\n-            let ptr = Arc::into_raw(self).cast::<ManuallyDrop<T>>();\n-            let mut unique = Arc::from_raw(ptr);\n-\n-            // Call to `Arc::make_mut` above guarantees that `unique` is the\n-            // sole reference to the contained value, so we can avoid doing\n-            // a checked `get_mut` here.\n-            let slot = Arc::get_mut_unchecked(&mut unique);\n-\n-            // Semantically move the contained type out from `unique`, fold\n-            // it, then move the folded value back into `unique`. Should\n-            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n-            // value is not re-dropped.\n-            let owned = ManuallyDrop::take(slot);\n-            let folded = owned.try_fold_with(folder)?;\n-            *slot = ManuallyDrop::new(folded);\n-\n-            // Cast back to `Arc<T>`.\n-            Ok(Arc::from_raw(Arc::into_raw(unique).cast()))\n-        }\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Arc<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        (**self).visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|value| value.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        (**self).visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|t| t.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Vec<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &[T] {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|t| t.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<[T]> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -597,43 +404,43 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Const<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.mk_const_list(v.iter()))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ProjectionKind> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(*self)\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -679,11 +486,11 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n             | ty::Foreign(..) => return Ok(self),\n         };\n \n-        Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })\n+        Ok(if *self.kind() == kind { self } else { folder.interner().mk_ty(kind) })\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n@@ -727,19 +534,19 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         _folder: &mut F,\n@@ -748,121 +555,99 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n-\n-    #[inline]\n-    fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n-        self.outer_exclusive_binder() > binder\n-    }\n-\n-    #[inline]\n-    fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {\n-        self.flags().intersects(flags)\n-    }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         let new = self.kind().try_fold_with(folder)?;\n-        Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n+        Ok(folder.interner().reuse_or_mk_predicate(self, new))\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.kind().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|x| x.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> TypeVisitable<'tcx> for IndexVec<I, T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(*self)\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         let ty = self.ty().try_fold_with(folder)?;\n         let kind = self.kind().try_fold_with(folder)?;\n         if ty != self.ty() || kind != self.kind() {\n-            Ok(folder.tcx().mk_const(kind, ty))\n+            Ok(folder.interner().mk_const(kind, ty))\n         } else {\n             Ok(self)\n         }\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n         self.kind().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for InferConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::UnevaluatedConst<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for TyAndLayout<'tcx, Ty<'tcx>> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for TyAndLayout<'tcx, Ty<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(self.ty)\n     }"}, {"sha": "abde81236e21a902ba183431ee1db35d63d4f39c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -7,8 +7,10 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self, AdtDef, DefIdTree, Discr, FallibleTypeFolder, Term, Ty, TyCtxt, TypeFlags, TypeFoldable,\n-    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self,\n+    ir::{FallibleTypeFolder, TypeVisitor},\n+    AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitable,\n };\n use crate::ty::{List, ParamEnv};\n use hir::def::DefKind;\n@@ -1147,10 +1149,10 @@ struct SkipBindersAt<'tcx> {\n     index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n     type Error = ();\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1171,7 +1173,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_bound(index.shifted_out(1), bv))\n+                Ok(self.interner().mk_bound(index.shifted_out(1), bv))\n             }\n         } else {\n             ty.try_super_fold_with(self)\n@@ -1185,7 +1187,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n+                Ok(self.interner().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n             }\n         } else {\n             r.try_super_fold_with(self)\n@@ -1199,7 +1201,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_const(\n+                Ok(self.interner().mk_const(\n                     ty::ConstKind::Bound(index.shifted_out(1), bv),\n                     ct.ty().try_fold_with(self)?,\n                 ))\n@@ -2038,7 +2040,7 @@ impl<'tcx> Ty<'tcx> {\n     pub fn contains(self, other: Ty<'tcx>) -> bool {\n         struct ContainsTyVisitor<'tcx>(Ty<'tcx>);\n \n-        impl<'tcx> TypeVisitor<'tcx> for ContainsTyVisitor<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTyVisitor<'tcx> {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -2056,7 +2058,7 @@ impl<'tcx> Ty<'tcx> {\n     pub fn contains_closure(self) -> bool {\n         struct ContainsClosureVisitor;\n \n-        impl<'tcx> TypeVisitor<'tcx> for ContainsClosureVisitor {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsClosureVisitor {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "a6ab7440c8e667e9eb97428c35538ec079240e9f", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,10 +1,10 @@\n // Type substitutions.\n \n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeFolder, FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n+use crate::ty::{self, ir, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::Interned;\n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),\n@@ -237,7 +237,7 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n@@ -475,7 +475,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n@@ -486,15 +486,19 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n         match self.len() {\n             1 => {\n                 let param0 = self[0].try_fold_with(folder)?;\n-                if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }\n+                if param0 == self[0] {\n+                    Ok(self)\n+                } else {\n+                    Ok(folder.interner().intern_substs(&[param0]))\n+                }\n             }\n             2 => {\n                 let param0 = self[0].try_fold_with(folder)?;\n                 let param1 = self[1].try_fold_with(folder)?;\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.tcx().intern_substs(&[param0, param1]))\n+                    Ok(folder.interner().intern_substs(&[param0, param1]))\n                 }\n             }\n             0 => Ok(self),\n@@ -503,7 +507,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is fairly hot, though not as hot as `SubstsRef`.\n         //\n@@ -527,15 +531,15 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.tcx().intern_type_list(&[param0, param1]))\n+                    Ok(folder.interner().intern_type_list(&[param0, param1]))\n                 }\n             }\n             _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v)),\n         }\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &'tcx ty::List<T> {\n     #[inline]\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n@@ -553,8 +557,8 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n pub struct EarlyBinder<T>(pub T);\n \n /// For early binders, you should first call `subst` before using any visitors.\n-impl<'tcx, T> !TypeFoldable<'tcx> for ty::EarlyBinder<T> {}\n-impl<'tcx, T> !TypeVisitable<'tcx> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n     pub fn as_ref(&self) -> EarlyBinder<&T> {\n@@ -776,9 +780,9 @@ struct SubstFolder<'a, 'tcx> {\n     binders_passed: u32,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for SubstFolder<'a, 'tcx> {\n     #[inline]\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -987,7 +991,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n             return val;\n         }\n \n-        let result = ty::fold::shift_vars(TypeFolder::tcx(self), val, self.binders_passed);\n+        let result = ty::fold::shift_vars(TypeFolder::interner(self), val, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result"}, {"sha": "e907ce46c86fb14d770a3b6b5ee6c67565fce070", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -4,8 +4,8 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n@@ -842,8 +842,8 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for OpaqueTypeExpander<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1343,7 +1343,7 @@ where\n             for t in iter {\n                 new_list.push(t.try_fold_with(folder)?)\n             }\n-            Ok(intern(folder.tcx(), &new_list))\n+            Ok(intern(folder.interner(), &new_list))\n         }\n         Some((_, Err(err))) => {\n             return Err(err);"}, {"sha": "8a93b59900e15e267a6507613907c96ca1774fa2", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 15, "deletions": 103, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,69 +1,19 @@\n-//! A visiting traversal mechanism for complex data structures that contain type\n-//! information.\n-//!\n-//! This is a read-only traversal of the data structure.\n-//!\n-//! This traversal has limited flexibility. Only a small number of \"types of\n-//! interest\" within the complex data structures can receive custom\n-//! visitation. These are the ones containing the most important type-related\n-//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n-//!\n-//! There are three groups of traits involved in each traversal.\n-//! - `TypeVisitable`. This is implemented once for many types, including:\n-//!   - Types of interest, for which the methods delegate to the visitor.\n-//!   - All other types, including generic containers like `Vec` and `Option`.\n-//!     It defines a \"skeleton\" of how they should be visited.\n-//! - `TypeSuperVisitable`. This is implemented only for each type of interest,\n-//!   and defines the visiting \"skeleton\" for these types.\n-//! - `TypeVisitor`. This is implemented for each visitor. This defines how\n-//!   types of interest are visited.\n-//!\n-//! This means each visit is a mixture of (a) generic visiting operations, and (b)\n-//! custom visit operations that are specific to the visitor.\n-//! - The `TypeVisitable` impls handle most of the traversal, and call into\n-//!   `TypeVisitor` when they encounter a type of interest.\n-//! - A `TypeVisitor` may call into another `TypeVisitable` impl, because some of\n-//!   the types of interest are recursive and can contain other types of interest.\n-//! - A `TypeVisitor` may also call into a `TypeSuperVisitable` impl, because each\n-//!   visitor might provide custom handling only for some types of interest, or\n-//!   only for some variants of each type of interest, and then use default\n-//!   traversal for the remaining cases.\n-//!\n-//! For example, if you have `struct S(Ty, U)` where `S: TypeVisitable` and `U:\n-//! TypeVisitable`, and an instance `s = S(ty, u)`, it would be visited like so:\n-//! ```text\n-//! s.visit_with(visitor) calls\n-//! - ty.visit_with(visitor) calls\n-//!   - visitor.visit_ty(ty) may call\n-//!     - ty.super_visit_with(visitor)\n-//! - u.visit_with(visitor)\n-//! ```\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n use rustc_errors::ErrorGuaranteed;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n-use std::fmt;\n use std::ops::ControlFlow;\n \n-/// This trait is implemented for every type that can be visited,\n-/// providing the skeleton of the traversal.\n-///\n-/// To implement this conveniently, use the derive macro located in\n-/// `rustc_macros`.\n-pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n-    /// The entry point for visiting. To visit a value `t` with a visitor `v`\n-    /// call: `t.visit_with(v)`.\n-    ///\n-    /// For most types, this just traverses the value, calling `visit_with` on\n-    /// each field/element.\n-    ///\n-    /// For types of interest (such as `Ty`), the implementation of this method\n-    /// that calls a visitor method specifically for that type (such as\n-    /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n-    /// `TypeVisitor`.\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+pub trait TypeVisitable<'tcx> = ir::TypeVisitable<TyCtxt<'tcx>> + TypeVisitableExt<'tcx>;\n+pub trait TypeSuperVisitable<'tcx> = ir::TypeSuperVisitable<TyCtxt<'tcx>>;\n+pub trait TypeVisitor<'tcx> = ir::TypeVisitor<TyCtxt<'tcx>>;\n+\n+pub mod ir {\n+    pub use rustc_type_ir::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+}\n \n+pub trait TypeVisitableExt<'tcx>: ir::TypeVisitable<TyCtxt<'tcx>> {\n     /// Returns `true` if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n     /// If `binder` is `ty::INNERMOST`, this indicates whether\n@@ -185,45 +135,7 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n-pub trait TypeSuperVisitable<'tcx>: TypeVisitable<'tcx> {\n-    /// Provides a default visit for a type of interest. This should only be\n-    /// called within `TypeVisitor` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n-    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n-    /// `ty.super_visit_with(self)`, but any other visiting should be done\n-    /// with `xyz.visit_with(self)`.\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n-}\n-\n-/// This trait is implemented for every visiting traversal. There is a visit\n-/// method defined for every type of interest. Each such method has a default\n-/// that recurses into the type's fields in a non-custom fashion.\n-pub trait TypeVisitor<'tcx>: Sized {\n-    type BreakTy = !;\n-\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        r.super_visit_with(self)\n-    }\n-\n-    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        c.super_visit_with(self)\n-    }\n-\n-    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        p.super_visit_with(self)\n-    }\n-}\n+impl<'tcx, T: ir::TypeVisitable<TyCtxt<'tcx>>> TypeVisitableExt<'tcx> for T {}\n \n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n@@ -278,7 +190,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             callback: F,\n         }\n \n-        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n+        impl<'tcx, F> ir::TypeVisitor<TyCtxt<'tcx>> for RegionVisitor<F>\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n@@ -380,7 +292,7 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -492,7 +404,7 @@ struct HasEscapingVarsVisitor {\n     outer_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -569,7 +481,7 @@ impl std::fmt::Debug for HasTypeFlagsVisitor {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n     #[inline]\n@@ -639,7 +551,7 @@ impl LateBoundRegionsCollector {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for LateBoundRegionsCollector {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -701,7 +613,7 @@ impl MaxUniverse {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for MaxUniverse {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Placeholder(placeholder) = t.kind() {\n             self.max_universe = ty::UniverseIndex::from_u32("}, {"sha": "83b8988cecaf88dc5cd8e2fb4d4b68ddae875e5d", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -189,9 +189,7 @@ use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::{\n-    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n-};\n+use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, VtblEntry};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;"}, {"sha": "aba842817ef7a596c8d14a30b05b118ab330c014", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self,\n     query::Providers,\n     subst::SubstsRef,\n-    visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor},\n+    visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable},\n     Const, Ty, TyCtxt, UnusedGenericParams,\n };\n use rustc_span::symbol::sym;\n@@ -296,7 +296,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_non_region_param() {"}, {"sha": "9cff62e85146ee20dba36f84c2630fc798a704bc", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n-use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{ir::TypeVisitor, TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -174,7 +174,7 @@ where\n     }\n }\n \n-impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n+impl<'tcx, V> TypeVisitor<TyCtxt<'tcx>> for DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {"}, {"sha": "c0bfe152a1e8c4784c18198fdea606624fc33e31", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n-use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_middle::ty::{GenericArg, ToPredicate};\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "b52200e066f69b8dd0fa170a2bf6bcb74159074b", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::traits::specialization_graph::LeafDef;\n use rustc_infer::traits::Reveal;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{ProjectionPredicate, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{ir::TypeVisitor, ProjectionPredicate, TypeSuperVisitable};\n use rustc_middle::ty::{ToPredicate, TypeVisitable};\n use rustc_span::{sym, DUMMY_SP};\n use std::iter;\n@@ -98,7 +98,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         struct ContainsTerm<'tcx> {\n             term: ty::Term<'tcx>,\n         }\n-        impl<'tcx> TypeVisitor<'tcx> for ContainsTerm<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'tcx> {\n             type BreakTy = ();\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if t.needs_infer() {"}, {"sha": "3adb15cb44123544aec96b18c485ab9308d0e0d6", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -8,7 +8,8 @@ use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::mir::interpret::ErrorHandled;\n-use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n+#[cfg(not(bootstrap))]\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{ImplPolarity, Region, RegionVid};\n \n@@ -858,8 +859,8 @@ pub struct RegionReplacer<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "a95694e514468e6ada6997f71c7fe949effc3264", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -22,7 +22,7 @@ use rustc_infer::traits::util;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, ImplSubject, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use std::fmt::Debug;\n@@ -627,7 +627,7 @@ enum OrphanCheckEarlyExit<'tcx> {\n     LocalTy(Ty<'tcx>),\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for OrphanChecker<'tcx> {\n     type BreakTy = OrphanCheckEarlyExit<'tcx>;\n     fn visit_region(&mut self, _r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::Continue(())"}, {"sha": "dd9b5b534d7e2a491fe40186a8f17c4061f559e6", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n \n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::{self, TyCtxt, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, TyCtxt, TypeVisitable};\n \n use rustc_span::Span;\n use std::ops::ControlFlow;\n@@ -171,7 +171,7 @@ fn satisfied_from_param_env<'tcx>(\n         single_match: Option<Result<ty::Const<'tcx>, ()>>,\n     }\n \n-    impl<'a, 'tcx> TypeVisitor<'tcx> for Visitor<'a, 'tcx> {\n+    impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for Visitor<'a, 'tcx> {\n         type BreakTy = ();\n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"is_const_evaluatable: candidate={:?}\", c);"}, {"sha": "c2565b7a3aa3e5ea1bc88b792d80ee5e4da01dbb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -34,11 +34,10 @@ use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::print::{with_forced_trimmed_paths, FmtPrinter, Print};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n-    TypeVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_session::Limit;\n@@ -2675,8 +2674,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             var_map: FxHashMap<Ty<'tcx>, Ty<'tcx>>,\n         }\n \n-        impl<'a, 'tcx> TypeFolder<'tcx> for ParamToVarFolder<'a, 'tcx> {\n-            fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for ParamToVarFolder<'a, 'tcx> {\n+            fn interner(&self) -> TyCtxt<'tcx> {\n                 self.infcx.tcx\n             }\n \n@@ -2964,7 +2963,7 @@ impl ArgKind {\n \n struct HasNumericInferVisitor;\n \n-impl<'tcx> ty::TypeVisitor<'tcx> for HasNumericInferVisitor {\n+impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for HasNumericInferVisitor {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "0a1dfa7925b0fce87b31ef39a221b9e1efc2c165", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -30,10 +30,10 @@ use rustc_middle::hir::map;\n use rustc_middle::ty::error::TypeError::{self, Sorts};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{\n-    self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n-    GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, InternalSubsts,\n-    IsSuggestable, ToPredicate, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeFolder,\n-    TypeSuperFoldable, TypeVisitable, TypeckResults,\n+    self, ir::TypeFolder, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind,\n+    DefIdTree, GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, InternalSubsts,\n+    IsSuggestable, ToPredicate, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeSuperFoldable,\n+    TypeckResults,\n };\n use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -4081,7 +4081,7 @@ struct ReplaceImplTraitFolder<'tcx> {\n     replace_ty: Ty<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ReplaceImplTraitFolder<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceImplTraitFolder<'tcx> {\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Param(ty::ParamTy { index, .. }) = t.kind() {\n             if self.param.index == *index {\n@@ -4091,7 +4091,7 @@ impl<'tcx> TypeFolder<'tcx> for ReplaceImplTraitFolder<'tcx> {\n         t.super_fold_with(self)\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "067e63de911dc11b67c752daa452287dad7960e0", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -481,7 +481,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n         generics: &'tcx ty::Generics,\n         trait_item_def_id: DefId,\n     }\n-    impl<'tcx> ty::TypeVisitor<'tcx> for ReferencesOnlyParentGenerics<'tcx> {\n+    impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for ReferencesOnlyParentGenerics<'tcx> {\n         type BreakTy = ();\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // If this is a parameter from the trait item's own generics, then bail"}, {"sha": "c12ba103c340c93c6826eb4b8a11b9c13c7141e1", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{\n-    self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -836,7 +836,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n         supertraits: Option<Vec<DefId>>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for IllegalSelfTypeVisitor<'tcx> {\n         type BreakTy = ();\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "a380d4697ea267ac252b1f121039fd3f96ca0dcc", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -30,7 +30,7 @@ use rustc_infer::infer::at::At;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_infer::traits::ImplSourceBuiltinData;\n use rustc_middle::traits::select::OverflowError;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable};\n use rustc_middle::ty::DefIdTree;\n use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n@@ -448,8 +448,8 @@ impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n+impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.selcx.tcx()\n     }\n \n@@ -503,7 +503,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     Reveal::UserFacing => ty.super_fold_with(self),\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().recursion_limit();\n+                        let recursion_limit = self.interner().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n                             self.selcx.infcx.err_ctxt().report_overflow_error(\n                                 &ty,\n@@ -514,8 +514,8 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                         }\n \n                         let substs = substs.fold_with(self);\n-                        let generic_ty = self.tcx().bound_type_of(def_id);\n-                        let concrete_ty = generic_ty.subst(self.tcx(), substs);\n+                        let generic_ty = self.interner().bound_type_of(def_id);\n+                        let concrete_ty = generic_ty.subst(self.interner(), substs);\n                         self.depth += 1;\n                         let folded_ty = self.fold_ty(concrete_ty);\n                         self.depth -= 1;\n@@ -740,8 +740,8 @@ impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -846,8 +846,8 @@ impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -888,7 +888,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                         let db = ty::DebruijnIndex::from_usize(\n                             self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                         );\n-                        self.tcx().mk_region(ty::ReLateBound(db, *replace_var))\n+                        self.interner().mk_region(ty::ReLateBound(db, *replace_var))\n                     }\n                     None => r1,\n                 }\n@@ -915,7 +915,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                         let db = ty::DebruijnIndex::from_usize(\n                             self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                         );\n-                        self.tcx().mk_bound(db, *replace_var)\n+                        self.interner().mk_bound(db, *replace_var)\n                     }\n                     None => ty,\n                 }\n@@ -939,7 +939,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                     let db = ty::DebruijnIndex::from_usize(\n                         self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                     );\n-                    self.tcx().mk_const(ty::ConstKind::Bound(db, *replace_var), ct.ty())\n+                    self.interner().mk_const(ty::ConstKind::Bound(db, *replace_var), ct.ty())\n                 }\n                 None => ct,\n             }"}, {"sha": "e7282a450f67b2e1ef84409de484874e75b5193b", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -11,9 +11,9 @@ use crate::traits::{ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt};\n use rustc_span::DUMMY_SP;\n \n use std::ops::ControlFlow;\n@@ -115,7 +115,7 @@ struct MaxEscapingBoundVarVisitor {\n     escaping: usize,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for MaxEscapingBoundVarVisitor {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n@@ -170,10 +170,10 @@ struct QueryNormalizer<'cx, 'tcx> {\n     universes: Vec<Option<ty::UniverseIndex>>,\n }\n \n-impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx> {\n     type Error = NoSolution;\n \n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -214,7 +214,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n \n                     Reveal::All => {\n                         let substs = substs.try_fold_with(self)?;\n-                        let recursion_limit = self.tcx().recursion_limit();\n+                        let recursion_limit = self.interner().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             // A closure or generator may have itself as in its upvars.\n                             // This should be checked handled by the recursion check for opaque\n@@ -228,8 +228,8 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                             return ty.try_super_fold_with(self);\n                         }\n \n-                        let generic_ty = self.tcx().bound_type_of(def_id);\n-                        let concrete_ty = generic_ty.subst(self.tcx(), substs);\n+                        let generic_ty = self.interner().bound_type_of(def_id);\n+                        let concrete_ty = generic_ty.subst(self.interner(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n                             bug!("}, {"sha": "302adb797668939ee27715c8a475b7976a02ecbb", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -48,7 +48,7 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n-use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n "}, {"sha": "8402499b296d7db2db827ead0c90487c121208f2", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,6 +1,8 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+#[cfg(not(bootstrap))]\n+use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable};\n use rustc_span::Span;\n use std::ops::ControlFlow;\n \n@@ -78,7 +80,7 @@ impl<'tcx> Search<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for Search<'tcx> {\n     type BreakTy = Ty<'tcx>;\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "20725c656de626c52fe3913f93a0024e6db89814", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -769,8 +769,8 @@ struct ReplaceOpaqueTyFolder<'tcx> {\n     binder_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for ReplaceOpaqueTyFolder<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "2978fc4ed8c4666492d76bee4a6bf132b5c5d1f8", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -35,8 +35,9 @@ use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self,\n+    ir::{TypeFolder, TypeVisitor},\n+    Binder, Region, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_span::def_id::DefId;\n \n@@ -925,7 +926,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for BoundVarsCollector<'tcx> {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -1006,8 +1007,8 @@ impl<'a, 'tcx> NamedBoundVarSubstitutor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for NamedBoundVarSubstitutor<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1062,8 +1063,8 @@ impl<'tcx> ParamsSubstitutor<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1138,8 +1139,8 @@ impl<'tcx> ReverseParamsSubstitutor<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ReverseParamsSubstitutor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseParamsSubstitutor<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1174,7 +1175,7 @@ impl PlaceholdersCollector {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {"}, {"sha": "f33f9edd6279edd84c1a2a3e9632b64b47d58c89", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -9,7 +9,7 @@ pub(crate) mod lowering;\n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n use rustc_middle::traits::ChalkRustInterner;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n \n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,"}, {"sha": "ee4ef57c38f110c311011c827467bd348e2003c3", "filename": "compiler/rustc_type_ir/src/fold.rs", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -0,0 +1,239 @@\n+//! A folding traversal mechanism for complex data structures that contain type\n+//! information.\n+//!\n+//! This is a modifying traversal. It consumes the data structure, producing a\n+//! (possibly) modified version of it. Both fallible and infallible versions are\n+//! available. The name is potentially confusing, because this traversal is more\n+//! like `Iterator::map` than `Iterator::fold`.\n+//!\n+//! This traversal has limited flexibility. Only a small number of \"types of\n+//! interest\" within the complex data structures can receive custom\n+//! modification. These are the ones containing the most important type-related\n+//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n+//!\n+//! There are three groups of traits involved in each traversal.\n+//! - `TypeFoldable`. This is implemented once for many types, including:\n+//!   - Types of interest, for which the methods delegate to the folder.\n+//!   - All other types, including generic containers like `Vec` and `Option`.\n+//!     It defines a \"skeleton\" of how they should be folded.\n+//! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n+//!   and defines the folding \"skeleton\" for these types.\n+//! - `TypeFolder`/`FallibleTypeFolder. One of these is implemented for each\n+//!   folder. This defines how types of interest are folded.\n+//!\n+//! This means each fold is a mixture of (a) generic folding operations, and (b)\n+//! custom fold operations that are specific to the folder.\n+//! - The `TypeFoldable` impls handle most of the traversal, and call into\n+//!   `TypeFolder`/`FallibleTypeFolder` when they encounter a type of interest.\n+//! - A `TypeFolder`/`FallibleTypeFolder` may call into another `TypeFoldable`\n+//!   impl, because some of the types of interest are recursive and can contain\n+//!   other types of interest.\n+//! - A `TypeFolder`/`FallibleTypeFolder` may also call into a `TypeSuperFoldable`\n+//!   impl, because each folder might provide custom handling only for some types\n+//!   of interest, or only for some variants of each type of interest, and then\n+//!   use default traversal for the remaining cases.\n+//!\n+//! For example, if you have `struct S(Ty, U)` where `S: TypeFoldable` and `U:\n+//! TypeFoldable`, and an instance `s = S(ty, u)`, it would be folded like so:\n+//! ```text\n+//! s.fold_with(folder) calls\n+//! - ty.fold_with(folder) calls\n+//!   - folder.fold_ty(ty) may call\n+//!     - ty.super_fold_with(folder)\n+//! - u.fold_with(folder)\n+//! ```\n+use crate::{visit::TypeVisitable, Interner};\n+\n+/// This trait is implemented for every type that can be folded,\n+/// providing the skeleton of the traversal.\n+///\n+/// To implement this conveniently, use the derive macro located in\n+/// `rustc_macros`.\n+pub trait TypeFoldable<I: Interner>: TypeVisitable<I> {\n+    /// The entry point for folding. To fold a value `t` with a folder `f`\n+    /// call: `t.try_fold_with(f)`.\n+    ///\n+    /// For most types, this just traverses the value, calling `try_fold_with`\n+    /// on each field/element.\n+    ///\n+    /// For types of interest (such as `Ty`), the implementation of method\n+    /// calls a folder method specifically for that type (such as\n+    /// `F::try_fold_ty`). This is where control transfers from `TypeFoldable`\n+    /// to `TypeFolder`.\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error>;\n+\n+    /// A convenient alternative to `try_fold_with` for use with infallible\n+    /// folders. Do not override this method, to ensure coherence with\n+    /// `try_fold_with`.\n+    fn fold_with<F: TypeFolder<I>>(self, folder: &mut F) -> Self {\n+        self.try_fold_with(folder).into_ok()\n+    }\n+}\n+\n+// This trait is implemented for types of interest.\n+pub trait TypeSuperFoldable<I: Interner>: TypeFoldable<I> {\n+    /// Provides a default fold for a type of interest. This should only be\n+    /// called within `TypeFolder` methods, when a non-custom traversal is\n+    /// desired for the value of the type of interest passed to that method.\n+    /// For example, in `MyFolder::try_fold_ty(ty)`, it is valid to call\n+    /// `ty.try_super_fold_with(self)`, but any other folding should be done\n+    /// with `xyz.try_fold_with(self)`.\n+    fn try_super_fold_with<F: FallibleTypeFolder<I>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error>;\n+\n+    /// A convenient alternative to `try_super_fold_with` for use with\n+    /// infallible folders. Do not override this method, to ensure coherence\n+    /// with `try_super_fold_with`.\n+    fn super_fold_with<F: TypeFolder<I>>(self, folder: &mut F) -> Self {\n+        self.try_super_fold_with(folder).into_ok()\n+    }\n+}\n+\n+/// This trait is implemented for every infallible folding traversal. There is\n+/// a fold method defined for every type of interest. Each such method has a\n+/// default that does an \"identity\" fold. Implementations of these methods\n+/// often fall back to a `super_fold_with` method if the primary argument\n+/// doesn't satisfy a particular condition.\n+///\n+/// A blanket implementation of [`FallibleTypeFolder`] will defer to\n+/// the infallible methods of this trait to ensure that the two APIs\n+/// are coherent.\n+pub trait TypeFolder<I: Interner>: FallibleTypeFolder<I, Error = !> {\n+    fn interner(&self) -> I;\n+\n+    fn fold_binder<T>(&mut self, t: I::Binder<T>) -> I::Binder<T>\n+    where\n+        T: TypeFoldable<I>,\n+        I::Binder<T>: TypeSuperFoldable<I>,\n+    {\n+        t.super_fold_with(self)\n+    }\n+\n+    fn fold_ty(&mut self, t: I::Ty) -> I::Ty\n+    where\n+        I::Ty: TypeSuperFoldable<I>,\n+    {\n+        t.super_fold_with(self)\n+    }\n+\n+    fn fold_region(&mut self, r: I::Region) -> I::Region\n+    where\n+        I::Region: TypeSuperFoldable<I>,\n+    {\n+        r.super_fold_with(self)\n+    }\n+\n+    fn fold_const(&mut self, c: I::Const) -> I::Const\n+    where\n+        I::Const: TypeSuperFoldable<I>,\n+    {\n+        c.super_fold_with(self)\n+    }\n+\n+    fn fold_predicate(&mut self, p: I::Predicate) -> I::Predicate\n+    where\n+        I::Predicate: TypeSuperFoldable<I>,\n+    {\n+        p.super_fold_with(self)\n+    }\n+}\n+\n+/// This trait is implemented for every folding traversal. There is a fold\n+/// method defined for every type of interest. Each such method has a default\n+/// that does an \"identity\" fold.\n+///\n+/// A blanket implementation of this trait (that defers to the relevant\n+/// method of [`TypeFolder`]) is provided for all infallible folders in\n+/// order to ensure the two APIs are coherent.\n+pub trait FallibleTypeFolder<I: Interner>: Sized {\n+    type Error;\n+\n+    fn interner(&self) -> I;\n+\n+    fn try_fold_binder<T>(&mut self, t: I::Binder<T>) -> Result<I::Binder<T>, Self::Error>\n+    where\n+        T: TypeFoldable<I>,\n+        I::Binder<T>: TypeSuperFoldable<I>,\n+    {\n+        t.try_super_fold_with(self)\n+    }\n+\n+    fn try_fold_ty(&mut self, t: I::Ty) -> Result<I::Ty, Self::Error>\n+    where\n+        I::Ty: TypeSuperFoldable<I>,\n+    {\n+        t.try_super_fold_with(self)\n+    }\n+\n+    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, Self::Error>\n+    where\n+        I::Region: TypeSuperFoldable<I>,\n+    {\n+        r.try_super_fold_with(self)\n+    }\n+\n+    fn try_fold_const(&mut self, c: I::Const) -> Result<I::Const, Self::Error>\n+    where\n+        I::Const: TypeSuperFoldable<I>,\n+    {\n+        c.try_super_fold_with(self)\n+    }\n+\n+    fn try_fold_predicate(&mut self, p: I::Predicate) -> Result<I::Predicate, Self::Error>\n+    where\n+        I::Predicate: TypeSuperFoldable<I>,\n+    {\n+        p.try_super_fold_with(self)\n+    }\n+}\n+\n+// This blanket implementation of the fallible trait for infallible folders\n+// delegates to infallible methods to ensure coherence.\n+impl<I: Interner, F> FallibleTypeFolder<I> for F\n+where\n+    F: TypeFolder<I>,\n+{\n+    type Error = !;\n+\n+    fn interner(&self) -> I {\n+        TypeFolder::interner(self)\n+    }\n+\n+    fn try_fold_binder<T>(&mut self, t: I::Binder<T>) -> Result<I::Binder<T>, !>\n+    where\n+        T: TypeFoldable<I>,\n+        I::Binder<T>: TypeSuperFoldable<I>,\n+    {\n+        Ok(self.fold_binder(t))\n+    }\n+\n+    fn try_fold_ty(&mut self, t: I::Ty) -> Result<I::Ty, !>\n+    where\n+        I::Ty: TypeSuperFoldable<I>,\n+    {\n+        Ok(self.fold_ty(t))\n+    }\n+\n+    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, !>\n+    where\n+        I::Region: TypeSuperFoldable<I>,\n+    {\n+        Ok(self.fold_region(r))\n+    }\n+\n+    fn try_fold_const(&mut self, c: I::Const) -> Result<I::Const, !>\n+    where\n+        I::Const: TypeSuperFoldable<I>,\n+    {\n+        Ok(self.fold_const(c))\n+    }\n+\n+    fn try_fold_predicate(&mut self, p: I::Predicate) -> Result<I::Predicate, !>\n+    where\n+        I::Predicate: TypeSuperFoldable<I>,\n+    {\n+        Ok(self.fold_predicate(p))\n+    }\n+}"}, {"sha": "29d261fda8d9c3c8cd3f203ba959e8ac58adbe42", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,6 +1,10 @@\n+#![feature(associated_type_defaults)]\n #![feature(fmt_helpers_for_derive)]\n+#![feature(get_mut_unchecked)]\n #![feature(min_specialization)]\n+#![feature(never_type)]\n #![feature(rustc_attrs)]\n+#![feature(unwrap_infallible)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n@@ -18,8 +22,14 @@ use std::hash::Hash;\n use std::mem::discriminant;\n \n pub mod codec;\n+pub mod fold;\n pub mod sty;\n pub mod ty_info;\n+pub mod visit;\n+\n+#[macro_use]\n+mod macros;\n+mod structural_impls;\n \n pub use codec::*;\n pub use sty::*;\n@@ -28,13 +38,15 @@ pub use ty_info::*;\n /// Needed so we can use #[derive(HashStable_Generic)]\n pub trait HashStableContext {}\n \n-pub trait Interner {\n+pub trait Interner: Sized {\n     type AdtDef: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type SubstsRef: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type DefId: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n+    type Binder<T>;\n     type Ty: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type Const: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type Region: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n+    type Predicate;\n     type TypeAndMut: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type Mutability: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type Movability: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;"}, {"sha": "6c181039730b7a5e6574a008665c4c29c3f9e445", "filename": "compiler/rustc_type_ir/src/macros.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -0,0 +1,176 @@\n+/// Used for types that are `Copy` and which **do not care arena\n+/// allocated data** (i.e., don't need to be folded).\n+macro_rules! TrivialTypeTraversalImpls {\n+    ($($ty:ty,)+) => {\n+        $(\n+            impl<I: $crate::Interner> $crate::fold::TypeFoldable<I> for $ty {\n+                fn try_fold_with<F: $crate::fold::FallibleTypeFolder<I>>(\n+                    self,\n+                    _: &mut F,\n+                ) -> ::std::result::Result<Self, F::Error> {\n+                    Ok(self)\n+                }\n+\n+                #[inline]\n+                fn fold_with<F: $crate::fold::TypeFolder<I>>(\n+                    self,\n+                    _: &mut F,\n+                ) -> Self {\n+                    self\n+                }\n+            }\n+\n+            impl<I: $crate::Interner> $crate::visit::TypeVisitable<I> for $ty {\n+                #[inline]\n+                fn visit_with<F: $crate::visit::TypeVisitor<I>>(\n+                    &self,\n+                    _: &mut F)\n+                    -> ::std::ops::ControlFlow<F::BreakTy>\n+                {\n+                    ::std::ops::ControlFlow::Continue(())\n+                }\n+            }\n+        )+\n+    };\n+}\n+\n+macro_rules! EnumTypeTraversalImpl {\n+    (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n+        $($variants:tt)*\n+    } $(where $($wc:tt)*)*) => {\n+        impl<$($p),*> $crate::fold::TypeFoldable<$tcx> for $s\n+            $(where $($wc)*)*\n+        {\n+            fn try_fold_with<V: $crate::fold::FallibleTypeFolder<$tcx>>(\n+                self,\n+                folder: &mut V,\n+            ) -> ::std::result::Result<Self, V::Error> {\n+                EnumTypeTraversalImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n+            }\n+        }\n+    };\n+\n+    (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n+        $($variants:tt)*\n+    } $(where $($wc:tt)*)*) => {\n+        impl<$($p),*> $crate::visit::TypeVisitable<$tcx> for $s\n+            $(where $($wc)*)*\n+        {\n+            fn visit_with<V: $crate::visit::TypeVisitor<$tcx>>(\n+                &self,\n+                visitor: &mut V,\n+            ) -> ::std::ops::ControlFlow<V::BreakTy> {\n+                EnumTypeTraversalImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n+            }\n+        }\n+    };\n+\n+    (@FoldVariants($this:expr, $folder:expr) input() output($($output:tt)*)) => {\n+        Ok(match $this {\n+            $($output)*\n+        })\n+    };\n+\n+    (@FoldVariants($this:expr, $folder:expr)\n+     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n+     output( $($output:tt)*) ) => {\n+        EnumTypeTraversalImpl!(\n+            @FoldVariants($this, $folder)\n+                input($($input)*)\n+                output(\n+                    $variant ( $($variant_arg),* ) => {\n+                        $variant (\n+                            $($crate::fold::TypeFoldable::try_fold_with($variant_arg, $folder)?),*\n+                        )\n+                    }\n+                    $($output)*\n+                )\n+        )\n+    };\n+\n+    (@FoldVariants($this:expr, $folder:expr)\n+     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n+     output( $($output:tt)*) ) => {\n+        EnumTypeTraversalImpl!(\n+            @FoldVariants($this, $folder)\n+                input($($input)*)\n+                output(\n+                    $variant { $($variant_arg),* } => {\n+                        $variant {\n+                            $($variant_arg: $crate::fold::TypeFoldable::fold_with(\n+                                $variant_arg, $folder\n+                            )?),* }\n+                    }\n+                    $($output)*\n+                )\n+        )\n+    };\n+\n+    (@FoldVariants($this:expr, $folder:expr)\n+     input( ($variant:path), $($input:tt)*)\n+     output( $($output:tt)*) ) => {\n+        EnumTypeTraversalImpl!(\n+            @FoldVariants($this, $folder)\n+                input($($input)*)\n+                output(\n+                    $variant => { $variant }\n+                    $($output)*\n+                )\n+        )\n+    };\n+\n+    (@VisitVariants($this:expr, $visitor:expr) input() output($($output:tt)*)) => {\n+        match $this {\n+            $($output)*\n+        }\n+    };\n+\n+    (@VisitVariants($this:expr, $visitor:expr)\n+     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n+     output( $($output:tt)*) ) => {\n+        EnumTypeTraversalImpl!(\n+            @VisitVariants($this, $visitor)\n+                input($($input)*)\n+                output(\n+                    $variant ( $($variant_arg),* ) => {\n+                        $($crate::visit::TypeVisitable::visit_with(\n+                            $variant_arg, $visitor\n+                        )?;)*\n+                        ::std::ops::ControlFlow::Continue(())\n+                    }\n+                    $($output)*\n+                )\n+        )\n+    };\n+\n+    (@VisitVariants($this:expr, $visitor:expr)\n+     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n+     output( $($output:tt)*) ) => {\n+        EnumTypeTraversalImpl!(\n+            @VisitVariants($this, $visitor)\n+                input($($input)*)\n+                output(\n+                    $variant { $($variant_arg),* } => {\n+                        $($crate::visit::TypeVisitable::visit_with(\n+                            $variant_arg, $visitor\n+                        )?;)*\n+                        ::std::ops::ControlFlow::Continue(())\n+                    }\n+                    $($output)*\n+                )\n+        )\n+    };\n+\n+    (@VisitVariants($this:expr, $visitor:expr)\n+     input( ($variant:path), $($input:tt)*)\n+     output( $($output:tt)*) ) => {\n+        EnumTypeTraversalImpl!(\n+            @VisitVariants($this, $visitor)\n+                input($($input)*)\n+                output(\n+                    $variant => { ::std::ops::ControlFlow::Continue(()) }\n+                    $($output)*\n+                )\n+        )\n+    };\n+}"}, {"sha": "b6abe9a7357339cb9df80c87c55fa097090676fb", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -0,0 +1,238 @@\n+//! This module contains implementations of the `TypeFoldable` and `TypeVisitable`\n+//! traits for various types in the Rust compiler. Most are written by hand, though\n+//! we've recently added some macros and proc-macros to help with the tedium.\n+\n+use crate::fold::{FallibleTypeFolder, TypeFoldable};\n+use crate::visit::{TypeVisitable, TypeVisitor};\n+use crate::Interner;\n+use rustc_data_structures::functor::IdFunctor;\n+use rustc_index::vec::{Idx, IndexVec};\n+\n+use std::mem::ManuallyDrop;\n+use std::ops::ControlFlow;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+///////////////////////////////////////////////////////////////////////////\n+// Atomic structs\n+//\n+// For things that don't carry any arena-allocated data (and are\n+// copy...), just add them to this list.\n+\n+TrivialTypeTraversalImpls! {\n+    (),\n+    bool,\n+    usize,\n+    u16,\n+    u32,\n+    u64,\n+    String,\n+    crate::DebruijnIndex,\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+// Traversal implementations.\n+\n+impl<I: Interner, T: TypeFoldable<I>, U: TypeFoldable<I>> TypeFoldable<I> for (T, U) {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<(T, U), F::Error> {\n+        Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>, U: TypeVisitable<I>> TypeVisitable<I> for (T, U) {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.0.visit_with(visitor)?;\n+        self.1.visit_with(visitor)\n+    }\n+}\n+\n+impl<I: Interner, A: TypeFoldable<I>, B: TypeFoldable<I>, C: TypeFoldable<I>> TypeFoldable<I>\n+    for (A, B, C)\n+{\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<(A, B, C), F::Error> {\n+        Ok((\n+            self.0.try_fold_with(folder)?,\n+            self.1.try_fold_with(folder)?,\n+            self.2.try_fold_with(folder)?,\n+        ))\n+    }\n+}\n+\n+impl<I: Interner, A: TypeVisitable<I>, B: TypeVisitable<I>, C: TypeVisitable<I>> TypeVisitable<I>\n+    for (A, B, C)\n+{\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.0.visit_with(visitor)?;\n+        self.1.visit_with(visitor)?;\n+        self.2.visit_with(visitor)\n+    }\n+}\n+\n+EnumTypeTraversalImpl! {\n+    impl<I, T> TypeFoldable<I> for Option<T> {\n+        (Some)(a),\n+        (None),\n+    } where I: Interner, T: TypeFoldable<I>\n+}\n+EnumTypeTraversalImpl! {\n+    impl<I, T> TypeVisitable<I> for Option<T> {\n+        (Some)(a),\n+        (None),\n+    } where I: Interner, T: TypeVisitable<I>\n+}\n+\n+EnumTypeTraversalImpl! {\n+    impl<I, T, E> TypeFoldable<I> for Result<T, E> {\n+        (Ok)(a),\n+        (Err)(a),\n+    } where I: Interner, T: TypeFoldable<I>, E: TypeFoldable<I>,\n+}\n+EnumTypeTraversalImpl! {\n+    impl<I, T, E> TypeVisitable<I> for Result<T, E> {\n+        (Ok)(a),\n+        (Err)(a),\n+    } where I: Interner, T: TypeVisitable<I>, E: TypeVisitable<I>,\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Rc<T> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(mut self, folder: &mut F) -> Result<Self, F::Error> {\n+        // We merely want to replace the contained `T`, if at all possible,\n+        // so that we don't needlessly allocate a new `Rc` or indeed clone\n+        // the contained type.\n+        unsafe {\n+            // First step is to ensure that we have a unique reference to\n+            // the contained type, which `Rc::make_mut` will accomplish (by\n+            // allocating a new `Rc` and cloning the `T` only if required).\n+            // This is done *before* casting to `Rc<ManuallyDrop<T>>` so that\n+            // panicking during `make_mut` does not leak the `T`.\n+            Rc::make_mut(&mut self);\n+\n+            // Casting to `Rc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n+            // is `repr(transparent)`.\n+            let ptr = Rc::into_raw(self).cast::<ManuallyDrop<T>>();\n+            let mut unique = Rc::from_raw(ptr);\n+\n+            // Call to `Rc::make_mut` above guarantees that `unique` is the\n+            // sole reference to the contained value, so we can avoid doing\n+            // a checked `get_mut` here.\n+            let slot = Rc::get_mut_unchecked(&mut unique);\n+\n+            // Semantically move the contained type out from `unique`, fold\n+            // it, then move the folded value back into `unique`. Should\n+            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n+            // value is not re-dropped.\n+            let owned = ManuallyDrop::take(slot);\n+            let folded = owned.try_fold_with(folder)?;\n+            *slot = ManuallyDrop::new(folded);\n+\n+            // Cast back to `Rc<T>`.\n+            Ok(Rc::from_raw(Rc::into_raw(unique).cast()))\n+        }\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Rc<T> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        (**self).visit_with(visitor)\n+    }\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Arc<T> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(mut self, folder: &mut F) -> Result<Self, F::Error> {\n+        // We merely want to replace the contained `T`, if at all possible,\n+        // so that we don't needlessly allocate a new `Arc` or indeed clone\n+        // the contained type.\n+        unsafe {\n+            // First step is to ensure that we have a unique reference to\n+            // the contained type, which `Arc::make_mut` will accomplish (by\n+            // allocating a new `Arc` and cloning the `T` only if required).\n+            // This is done *before* casting to `Arc<ManuallyDrop<T>>` so that\n+            // panicking during `make_mut` does not leak the `T`.\n+            Arc::make_mut(&mut self);\n+\n+            // Casting to `Arc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n+            // is `repr(transparent)`.\n+            let ptr = Arc::into_raw(self).cast::<ManuallyDrop<T>>();\n+            let mut unique = Arc::from_raw(ptr);\n+\n+            // Call to `Arc::make_mut` above guarantees that `unique` is the\n+            // sole reference to the contained value, so we can avoid doing\n+            // a checked `get_mut` here.\n+            let slot = Arc::get_mut_unchecked(&mut unique);\n+\n+            // Semantically move the contained type out from `unique`, fold\n+            // it, then move the folded value back into `unique`. Should\n+            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n+            // value is not re-dropped.\n+            let owned = ManuallyDrop::take(slot);\n+            let folded = owned.try_fold_with(folder)?;\n+            *slot = ManuallyDrop::new(folded);\n+\n+            // Cast back to `Arc<T>`.\n+            Ok(Arc::from_raw(Arc::into_raw(unique).cast()))\n+        }\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Arc<T> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        (**self).visit_with(visitor)\n+    }\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Box<T> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        self.try_map_id(|value| value.try_fold_with(folder))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Box<T> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        (**self).visit_with(visitor)\n+    }\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Vec<T> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        self.try_map_id(|t| t.try_fold_with(folder))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Vec<T> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for &[T] {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Box<[T]> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        self.try_map_id(|t| t.try_fold_with(folder))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Box<[T]> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>, Ix: Idx> TypeFoldable<I> for IndexVec<Ix, T> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        self.try_map_id(|x| x.try_fold_with(folder))\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>, Ix: Idx> TypeVisitable<I> for IndexVec<Ix, T> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}"}, {"sha": "62239fd20066a8ea727ce3a792b68f8b6306cdde", "filename": "compiler/rustc_type_ir/src/visit.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -0,0 +1,115 @@\n+//! A visiting traversal mechanism for complex data structures that contain type\n+//! information.\n+//!\n+//! This is a read-only traversal of the data structure.\n+//!\n+//! This traversal has limited flexibility. Only a small number of \"types of\n+//! interest\" within the complex data structures can receive custom\n+//! visitation. These are the ones containing the most important type-related\n+//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n+//!\n+//! There are three groups of traits involved in each traversal.\n+//! - `TypeVisitable`. This is implemented once for many types, including:\n+//!   - Types of interest, for which the methods delegate to the visitor.\n+//!   - All other types, including generic containers like `Vec` and `Option`.\n+//!     It defines a \"skeleton\" of how they should be visited.\n+//! - `TypeSuperVisitable`. This is implemented only for each type of interest,\n+//!   and defines the visiting \"skeleton\" for these types.\n+//! - `TypeVisitor`. This is implemented for each visitor. This defines how\n+//!   types of interest are visited.\n+//!\n+//! This means each visit is a mixture of (a) generic visiting operations, and (b)\n+//! custom visit operations that are specific to the visitor.\n+//! - The `TypeVisitable` impls handle most of the traversal, and call into\n+//!   `TypeVisitor` when they encounter a type of interest.\n+//! - A `TypeVisitor` may call into another `TypeVisitable` impl, because some of\n+//!   the types of interest are recursive and can contain other types of interest.\n+//! - A `TypeVisitor` may also call into a `TypeSuperVisitable` impl, because each\n+//!   visitor might provide custom handling only for some types of interest, or\n+//!   only for some variants of each type of interest, and then use default\n+//!   traversal for the remaining cases.\n+//!\n+//! For example, if you have `struct S(Ty, U)` where `S: TypeVisitable` and `U:\n+//! TypeVisitable`, and an instance `s = S(ty, u)`, it would be visited like so:\n+//! ```text\n+//! s.visit_with(visitor) calls\n+//! - ty.visit_with(visitor) calls\n+//!   - visitor.visit_ty(ty) may call\n+//!     - ty.super_visit_with(visitor)\n+//! - u.visit_with(visitor)\n+//! ```\n+use crate::Interner;\n+\n+use std::fmt;\n+use std::ops::ControlFlow;\n+\n+/// This trait is implemented for every type that can be visited,\n+/// providing the skeleton of the traversal.\n+///\n+/// To implement this conveniently, use the derive macro located in\n+/// `rustc_macros`.\n+pub trait TypeVisitable<I: Interner>: fmt::Debug + Clone {\n+    /// The entry point for visiting. To visit a value `t` with a visitor `v`\n+    /// call: `t.visit_with(v)`.\n+    ///\n+    /// For most types, this just traverses the value, calling `visit_with` on\n+    /// each field/element.\n+    ///\n+    /// For types of interest (such as `Ty`), the implementation of this method\n+    /// that calls a visitor method specifically for that type (such as\n+    /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n+    /// `TypeVisitor`.\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+}\n+\n+pub trait TypeSuperVisitable<I: Interner>: TypeVisitable<I> {\n+    /// Provides a default visit for a type of interest. This should only be\n+    /// called within `TypeVisitor` methods, when a non-custom traversal is\n+    /// desired for the value of the type of interest passed to that method.\n+    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n+    /// `ty.super_visit_with(self)`, but any other visiting should be done\n+    /// with `xyz.visit_with(self)`.\n+    fn super_visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+}\n+\n+/// This trait is implemented for every visiting traversal. There is a visit\n+/// method defined for every type of interest. Each such method has a default\n+/// that recurses into the type's fields in a non-custom fashion.\n+pub trait TypeVisitor<I: Interner>: Sized {\n+    type BreakTy = !;\n+\n+    fn visit_binder<T: TypeVisitable<I>>(&mut self, t: &I::Binder<T>) -> ControlFlow<Self::BreakTy>\n+    where\n+        I::Binder<T>: TypeSuperVisitable<I>,\n+    {\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_ty(&mut self, t: I::Ty) -> ControlFlow<Self::BreakTy>\n+    where\n+        I::Ty: TypeSuperVisitable<I>,\n+    {\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: I::Region) -> ControlFlow<Self::BreakTy>\n+    where\n+        I::Region: TypeSuperVisitable<I>,\n+    {\n+        r.super_visit_with(self)\n+    }\n+\n+    fn visit_const(&mut self, c: I::Const) -> ControlFlow<Self::BreakTy>\n+    where\n+        I::Const: TypeSuperVisitable<I>,\n+    {\n+        c.super_visit_with(self)\n+    }\n+\n+    fn visit_predicate(&mut self, p: I::Predicate) -> ControlFlow<Self::BreakTy>\n+    where\n+        I::Predicate: TypeSuperVisitable<I>,\n+    {\n+        p.super_visit_with(self)\n+    }\n+}"}, {"sha": "6c15eac2c1922b3d1d7c5762f25f720bdc3f4cea", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -734,8 +734,8 @@ struct RegionReplacer<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "bf3bbeb2dd13361342a7047535172f4d536890ca", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::PredicateOrigin;\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n-use rustc_middle::ty::fold::TypeFolder;\n+use rustc_middle::ty::fold::ir::TypeFolder;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Ty, TyCtxt};"}, {"sha": "e9dc7351b58ef317b3047b81adfcb0d1effc60f8", "filename": "src/tools/clippy/clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::TypeVisitor};\n+use rustc_middle::ty::{self, visit::ir::TypeVisitor, TyCtxt};\n use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::borrow::Cow;\n use std::ops::ControlFlow;\n@@ -136,7 +136,7 @@ impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b,\n \n struct ContainsRegion;\n \n-impl TypeVisitor<'_> for ContainsRegion {\n+impl TypeVisitor<TyCtxt<'_>> for ContainsRegion {\n     type BreakTy = ();\n \n     fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "c785d89e28012f880709f266a8e577759aad6945", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -17,7 +17,7 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, ir::TypeVisitor, UintTy,\n     VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n@@ -838,7 +838,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n         index: u32,\n         f: F,\n     }\n-    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<'tcx> for V<F> {\n+    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<TyCtxt<'tcx>> for V<F> {\n         type BreakTy = B;\n         fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let RegionKind::ReLateBound(idx, bound) = r.kind() && idx.as_u32() == self.index {"}, {"sha": "99eed29207b4aae563341d38da650bf6cd7080d3", "filename": "tests/ui/impl-trait/normalize-tait-in-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c9eede5d50be0231f229bf28a271cd509861a3/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3c9eede5d50be0231f229bf28a271cd509861a3/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr?ref=a3c9eede5d50be0231f229bf28a271cd509861a3", "patch": "@@ -1,4 +1,4 @@\n-error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:198:90: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n+error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:201:90: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n \n query stack during panic:\n #0 [eval_to_allocation_raw] const-evaluating + checking `BAR`"}]}