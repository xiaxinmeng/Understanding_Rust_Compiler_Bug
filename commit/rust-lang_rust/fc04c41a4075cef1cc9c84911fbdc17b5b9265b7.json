{"sha": "fc04c41a4075cef1cc9c84911fbdc17b5b9265b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDRjNDFhNDA3NWNlZjFjYzljODQ5MTFmYmRjMTdiNWI5MjY1Yjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-09T21:44:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:22:08Z"}, "message": "add a debug assertion that only outlives-oblig. result from norm.", "tree": {"sha": "b0131d95aabec7240a85295f211eec8d44715cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0131d95aabec7240a85295f211eec8d44715cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7", "html_url": "https://github.com/rust-lang/rust/commit/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "url": "https://api.github.com/repos/rust-lang/rust/commits/6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "html_url": "https://github.com/rust-lang/rust/commit/6288faa3a31844a38b703b2a20a7f3cb9e15ed31"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "14f8694dbf72a0a2e9acf82681f3bb2e2e210cc2", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=fc04c41a4075cef1cc9c84911fbdc17b5b9265b7", "patch": "@@ -10,23 +10,35 @@\n \n use rustc::traits::{Normalized, ObligationCause};\n use rustc::traits::query::NoSolution;\n-use rustc::ty::{ParamEnvAnd, Ty, TyCtxt};\n+use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::util::common::CellUsizeExt;\n \n crate fn normalize_ty_after_erasing_regions<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Ty<'tcx> {\n     let ParamEnvAnd { param_env, value } = goal;\n-    tcx.sess.perf_stats.normalize_ty_after_erasing_regions.increment();\n+    tcx.sess\n+        .perf_stats\n+        .normalize_ty_after_erasing_regions\n+        .increment();\n     tcx.infer_ctxt().enter(|infcx| {\n         let cause = ObligationCause::dummy();\n         match infcx.at(&cause, param_env).normalize(&value) {\n-            Ok(Normalized { value: normalized_value, obligations: _ }) => {\n-                //                                   ^^^^^^^^^^^\n-                //                   We don't care about the `obligations`,\n-                //                   they are always only region relations,\n-                //                   and we are about to erase those anyway.\n+            Ok(Normalized {\n+                value: normalized_value,\n+                obligations: normalized_obligations,\n+            }) => {\n+                // We don't care about the `obligations`; they are\n+                // always only region relations, and we are about to\n+                // erase those anyway:\n+                debug_assert_eq!(\n+                    normalized_obligations\n+                        .iter()\n+                        .find(|p| not_outlives_predicate(&p.predicate)),\n+                    None,\n+                );\n+\n                 let normalized_value = infcx.resolve_type_vars_if_possible(&normalized_value);\n                 let normalized_value = infcx.tcx.erase_regions(&normalized_value);\n                 tcx.lift_to_global(&normalized_value).unwrap()\n@@ -35,3 +47,16 @@ crate fn normalize_ty_after_erasing_regions<'tcx>(\n         }\n     })\n }\n+\n+fn not_outlives_predicate(p: &ty::Predicate<'_>) -> bool {\n+    match p {\n+        ty::Predicate::RegionOutlives(..) | ty::Predicate::TypeOutlives(..) => false,\n+        ty::Predicate::Trait(..)\n+        | ty::Predicate::Projection(..)\n+        | ty::Predicate::WellFormed(..)\n+        | ty::Predicate::ObjectSafe(..)\n+        | ty::Predicate::ClosureKind(..)\n+        | ty::Predicate::Subtype(..)\n+        | ty::Predicate::ConstEvaluatable(..) => true,\n+    }\n+}"}]}