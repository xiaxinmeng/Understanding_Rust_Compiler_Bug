{"sha": "547c0142f3ec25917743a932dafd0e4027b1321d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0N2MwMTQyZjNlYzI1OTE3NzQzYTkzMmRhZmQwZTQwMjdiMTMyMWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-01T23:33:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-01T23:33:53Z"}, "message": "Merge pull request #1474 from regexident/configs-guide\n\nAdded visual configurations guide.", "tree": {"sha": "aec2434c7b153d6d6a6c97b1930332425e041707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec2434c7b153d6d6a6c97b1930332425e041707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547c0142f3ec25917743a932dafd0e4027b1321d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547c0142f3ec25917743a932dafd0e4027b1321d", "html_url": "https://github.com/rust-lang/rust/commit/547c0142f3ec25917743a932dafd0e4027b1321d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547c0142f3ec25917743a932dafd0e4027b1321d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "674d15e057f65bd39c8b6aa5ef5574270f572f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/674d15e057f65bd39c8b6aa5ef5574270f572f61", "html_url": "https://github.com/rust-lang/rust/commit/674d15e057f65bd39c8b6aa5ef5574270f572f61"}, {"sha": "c994d4e9d7703ce8fa6111a295eaa7db41479841", "url": "https://api.github.com/repos/rust-lang/rust/commits/c994d4e9d7703ce8fa6111a295eaa7db41479841", "html_url": "https://github.com/rust-lang/rust/commit/c994d4e9d7703ce8fa6111a295eaa7db41479841"}], "stats": {"total": 1774, "additions": 1772, "deletions": 2}, "files": [{"sha": "d415047f7eb7ebbaa382566bfa21caa4c4f6d0e7", "filename": "Configurations.md", "status": "added", "additions": 1770, "deletions": 0, "changes": 1770, "blob_url": "https://github.com/rust-lang/rust/blob/547c0142f3ec25917743a932dafd0e4027b1321d/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/547c0142f3ec25917743a932dafd0e4027b1321d/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=547c0142f3ec25917743a932dafd0e4027b1321d", "patch": "@@ -0,0 +1,1770 @@\n+# Configuring Rustfmt\n+\n+Rustfmt is designed to be very configurable. You can create a TOML file called `rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent directory and it will apply the options in that file.\n+\n+A possible content of `rustfmt.toml` or `.rustfmt.toml` might look like this:\n+\n+```toml\n+array_layout = \"Block\"\n+array_width = 80\n+reorder_imported_names = true\n+```\n+\n+# Configuration Options\n+\n+Below you find a detailed visual guide on all the supported configuration options of rustfmt:\n+\n+## `array_layout`\n+\n+Indent on arrays\n+\n+- **Default value**: `\"Visual\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`:\n+\n+```rust\n+let lorem = vec![\n+    \"ipsum\",\n+    \"dolor\",\n+    \"sit\",\n+    \"amet\",\n+    \"consectetur\",\n+    \"adipiscing\",\n+    \"elit\",\n+];\n+```\n+\n+#### `\"Visual\"`:\n+\n+```rust\n+let lorem = vec![\"ipsum\",\n+                 \"dolor\",\n+                 \"sit\",\n+                 \"amet\",\n+                 \"consectetur\",\n+                 \"adipiscing\",\n+                 \"elit\"];\n+```\n+\n+## `array_width`\n+\n+Maximum width of an array literal before falling back to vertical formatting\n+\n+- **Default value**: `60`\n+- **Possible values**: any positive integer\n+\n+**Note:** A value of `0` results in [`array_layout`](#array_layout) being applied regardless of a line's width.\n+\n+#### Lines shorter than `array_width`:\n+```rust\n+let lorem =\n+    vec![\"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\", \"elit\"];\n+```\n+\n+#### Lines longer than `array_width`:\n+See [`array_layout`](#array_layout).\n+\n+## `chain_indent`\n+\n+Indentation of chain\n+\n+- **Default value**: `\"Block\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`:\n+\n+```rust\n+let lorem = ipsum\n+    .dolor()\n+    .sit()\n+    .amet()\n+    .consectetur()\n+    .adipiscing()\n+    .elit();\n+```\n+\n+#### `\"Visual\"`:\n+\n+```rust\n+let lorem = ipsum.dolor()\n+                 .sit()\n+                 .amet()\n+                 .consectetur()\n+                 .adipiscing()\n+                 .elit();\n+```\n+\n+See also [`chain_one_line_max`](#chain_one_line_max).\n+\n+## `chain_one_line_max`\n+\n+Maximum length of a chain to fit on a single line\n+\n+- **Default value**: `60`\n+- **Possible values**: any positive integer\n+\n+#### Lines shorter than `chain_one_line_max`:\n+```rust\n+let lorem = ipsum.dolor().sit().amet().consectetur().adipiscing().elit();\n+```\n+\n+#### Lines longer than `chain_one_line_max`:\n+See [`chain_indent`](#chain_indent).\n+\n+## `closure_block_indent_threshold`\n+\n+How many lines a closure must have before it is block indented. -1 means never use block indent.\n+\n+- **Default value**: `7`\n+- **Possible values**: `-1`, or any positive integer\n+\n+#### Closures shorter than `closure_block_indent_threshold`:\n+```rust\n+lorem_ipsum(|| {\n+                println!(\"lorem\");\n+                println!(\"ipsum\");\n+                println!(\"dolor\");\n+                println!(\"sit\");\n+                println!(\"amet\");\n+            });\n+```\n+\n+#### Closures longer than `closure_block_indent_threshold`:\n+```rust\n+lorem_ipsum(|| {\n+    println!(\"lorem\");\n+    println!(\"ipsum\");\n+    println!(\"dolor\");\n+    println!(\"sit\");\n+    println!(\"amet\");\n+    println!(\"consectetur\");\n+    println!(\"adipiscing\");\n+    println!(\"elit\");\n+});\n+```\n+\n+## `comment_width`\n+\n+Maximum length of comments. No effect unless`wrap_comments = true`.\n+\n+- **Default value**: `80`\n+- **Possible values**: any positive integer\n+\n+**Note:** A value of `0` results in [`wrap_comments`](#wrap_comments) being applied regardless of a line's width.\n+\n+#### Comments shorter than `comment_width`:\n+```rust\n+// Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n+```\n+\n+#### Comments longer than `comment_width`:\n+```rust\n+// Lorem ipsum dolor sit amet,\n+// consectetur adipiscing elit.\n+```\n+\n+See also [`wrap_comments`](#wrap_comments).\n+\n+## `condense_wildcard_suffices`\n+\n+Replace strings of _ wildcards by a single .. in tuple patterns\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n+```\n+\n+#### `true`:\n+\n+```rust\n+let (lorem, ipsum, ..) = (1, 2, 3, 4);\n+```\n+\n+## `control_brace_style`\n+\n+Brace style for control flow constructs\n+\n+- **Default value**: `\"AlwaysSameLine\"`\n+- **Possible values**: `\"AlwaysNextLine\"`, `\"AlwaysSameLine\"`, `\"ClosingNextLine\"`\n+\n+#### `\"AlwaysNextLine\"`:\n+\n+```rust\n+if lorem\n+{\n+    println!(\"ipsum!\");\n+}\n+else\n+{\n+    println!(\"dolor!\");\n+}\n+```\n+\n+#### `\"AlwaysSameLine\"`:\n+\n+```rust\n+if lorem {\n+    println!(\"ipsum!\");\n+} else {\n+    println!(\"dolor!\");\n+}\n+```\n+\n+#### `\"ClosingNextLine\"`:\n+\n+```rust\n+if lorem {\n+    println!(\"ipsum!\");\n+}\n+else {\n+    println!(\"dolor!\");\n+}\n+```\n+\n+## `disable_all_formatting`\n+\n+Don't reformat anything\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+## `error_on_line_overflow`\n+\n+Error if unable to get all lines within max_width\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+See also [`max_width`](#max_width).\n+\n+## `fn_args_density`\n+\n+Argument density in functions\n+\n+- **Default value**: `\"Tall\"`\n+- **Possible values**: `\"Compressed\"`, `\"CompressedIfEmpty\"`, `\"Tall\"`, `\"Vertical\"`\n+\n+#### `\"Compressed\"`:\n+\n+```rust\n+trait Lorem {\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n+        // body\n+    }\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n+             adipiscing: Adipiscing, elit: Elit);\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n+             adipiscing: Adipiscing, elit: Elit) {\n+        // body\n+    }\n+}\n+```\n+\n+#### `\"CompressedIfEmpty\"`:\n+\n+```rust\n+trait Lorem {\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n+        // body\n+    }\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n+             adipiscing: Adipiscing, elit: Elit);\n+\n+    fn lorem(ipsum: Ipsum,\n+             dolor: Dolor,\n+             sit: Sit,\n+             amet: Amet,\n+             consectetur: onsectetur,\n+             adipiscing: Adipiscing,\n+             elit: Elit) {\n+        // body\n+    }\n+}\n+```\n+\n+#### `\"Tall\"`:\n+\n+```rust\n+trait Lorem {\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n+        // body\n+    }\n+\n+    fn lorem(ipsum: Ipsum,\n+             dolor: Dolor,\n+             sit: Sit,\n+             amet: Amet,\n+             consectetur: onsectetur,\n+             adipiscing: Adipiscing,\n+             elit: Elit);\n+\n+    fn lorem(ipsum: Ipsum,\n+             dolor: Dolor,\n+             sit: Sit,\n+             amet: Amet,\n+             consectetur: onsectetur,\n+             adipiscing: Adipiscing,\n+             elit: Elit) {\n+        // body\n+    }\n+}\n+```\n+\n+#### `\"Vertical\"`:\n+\n+```rust\n+trait Lorem {\n+    fn lorem(ipsum: Ipsum,\n+             dolor: Dolor,\n+             sit: Sit,\n+             amet: Amet);\n+\n+    fn lorem(ipsum: Ipsum,\n+             dolor: Dolor,\n+             sit: Sit,\n+             amet: Amet) {\n+        // body\n+    }\n+\n+    fn lorem(ipsum: Ipsum,\n+             dolor: Dolor,\n+             sit: Sit,\n+             amet: Amet,\n+             consectetur: onsectetur,\n+             adipiscing: Adipiscing,\n+             elit: Elit);\n+\n+    fn lorem(ipsum: Ipsum,\n+             dolor: Dolor,\n+             sit: Sit,\n+             amet: Amet,\n+             consectetur: onsectetur,\n+             adipiscing: Adipiscing,\n+             elit: Elit) {\n+        // body\n+    }\n+}\n+```\n+\n+## `fn_args_layout`\n+\n+Layout of function arguments and tuple structs\n+\n+- **Default value**: `\"Visual\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`:\n+\n+```rust\n+fn lorem() {}\n+\n+fn lorem(ipsum: usize) {}\n+\n+fn lorem(\n+    ipsum: usize,\n+    dolor: usize,\n+    sit: usize,\n+    amet: usize,\n+    consectetur: usize,\n+    adipiscing: usize,\n+    elit: usize,\n+) {\n+    // body\n+}\n+```\n+\n+#### `\"Visual\"`:\n+\n+```rust\n+fn lorem() {}\n+\n+fn lorem(ipsum: usize) {}\n+\n+fn lorem(ipsum: usize,\n+         dolor: usize,\n+         sit: usize,\n+         amet: usize,\n+         consectetur: usize,\n+         adipiscing: usize,\n+         elit: usize) {\n+    // body\n+}\n+```\n+\n+## `fn_args_paren_newline`\n+\n+If function argument parenthesis goes on a newline\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem(\n+    ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet)\n+    -> DolorSitAmetConsecteturAdipiscingElitLoremIpsumDolorSitAmetConsecteturAdipiscingElit {\n+    // body\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem\n+    (ipsum: Ipsum,\n+     dolor: Dolor,\n+     sit: Sit,\n+     amet: Amet)\n+     -> DolorSitAmetConsecteturAdipiscingElitLoremIpsumDolorSitAmetConsecteturAdipiscingElit {\n+    // body\n+}\n+```\n+\n+## `fn_brace_style`\n+\n+Brace style for functions\n+\n+- **Default value**: `\"SameLineWhere\"`\n+- **Possible values**: `\"AlwaysNextLine\"`, `\"PreferSameLine\"`, `\"SameLineWhere\"`\n+\n+#### `\"AlwaysNextLine\"`:\n+\n+```rust\n+fn lorem()\n+{\n+    // body\n+}\n+\n+fn lorem(ipsum: usize)\n+{\n+    // body\n+}\n+\n+fn lorem<T>(ipsum: T)\n+    where T: Add + Sub + Mul + Div\n+{\n+    // body\n+}\n+```\n+\n+#### `\"PreferSameLine\"`:\n+\n+```rust\n+fn lorem() {\n+    // body\n+}\n+\n+fn lorem(ipsum: usize) {\n+    // body\n+}\n+\n+fn lorem<T>(ipsum: T)\n+    where T: Add + Sub + Mul + Div {\n+    // body\n+}\n+```\n+\n+#### `\"SameLineWhere\"`:\n+\n+```rust\n+fn lorem() {\n+    // body\n+}\n+\n+fn lorem(ipsum: usize) {\n+    // body\n+}\n+\n+fn lorem<T>(ipsum: T)\n+    where T: Add + Sub + Mul + Div\n+{\n+    // body\n+}\n+```\n+\n+## `fn_call_style`\n+\n+Indentation for function calls, etc.\n+\n+- **Default value**: `\"Visual\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`:\n+\n+```rust\n+lorem(\n+    \"lorem\",\n+    \"ipsum\",\n+    \"dolor\",\n+    \"sit\",\n+    \"amet\",\n+    \"consectetur\",\n+    \"adipiscing\",\n+    \"elit\",\n+);\n+```\n+\n+#### `\"Visual\"`:\n+\n+```rust\n+lorem(\"lorem\",\n+      \"ipsum\",\n+      \"dolor\",\n+      \"sit\",\n+      \"amet\",\n+      \"consectetur\",\n+      \"adipiscing\",\n+      \"elit\");\n+```\n+\n+## `fn_call_width`\n+\n+Maximum width of the args of a function call before falling back to vertical formatting\n+\n+- **Default value**: `60`\n+- **Possible values**: any positive integer\n+\n+**Note:** A value of `0` results in vertical formatting being applied regardless of a line's width.\n+\n+#### Function call shorter than `fn_call_width`:\n+```rust\n+lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\", \"elit\");\n+```\n+\n+#### Function call longer than `fn_call_width`:\n+\n+See [`fn_call_style`](#fn_call_style).\n+\n+## `fn_empty_single_line`\n+\n+Put empty-body functions on a single line\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem() {\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem() {}\n+```\n+\n+See also [`control_brace_style`](#control_brace_style).\n+\n+## `fn_return_indent`\n+\n+Location of return type in function declaration\n+\n+- **Default value**: `\"WithArgs\"`\n+- **Possible values**: `\"WithArgs\"`, `\"WithWhereClause\"`\n+\n+#### `\"WithArgs\"`:\n+\n+```rust\n+fn lorem(ipsum: Ipsum,\n+         dolor: Dolor,\n+         sit: Sit,\n+         amet: Amet,\n+         consectetur: Consectetur,\n+         adipiscing: Adipiscing)\n+         -> Elit\n+    where Ipsum: Eq\n+{\n+    // body\n+}\n+\n+```\n+\n+#### `\"WithWhereClause\"`:\n+\n+```rust\n+fn lorem(ipsum: Ipsum,\n+         dolor: Dolor,\n+         sit: Sit,\n+         amet: Amet,\n+         consectetur: Consectetur,\n+         adipiscing: Adipiscing)\n+    -> Elit\n+    where Ipsum: Eq\n+{\n+    // body\n+}\n+\n+```\n+\n+## `fn_single_line`\n+\n+Put single-expression functions on a single line\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem() -> usize {\n+    42\n+}\n+\n+fn lorem() -> usize {\n+    let ipsum = 42;\n+    ipsum\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem() -> usize { 42 }\n+\n+fn lorem() -> usize {\n+    let ipsum = 42;\n+    ipsum\n+}\n+```\n+\n+See also [`control_brace_style`](#control_brace_style).\n+\n+## `force_explicit_abi`\n+\n+Always print the abi for extern items\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+**Note:** Non-\"C\" ABIs are always printed. If `false` then \"C\" is removed.\n+\n+#### `false`:\n+\n+```rust\n+extern {\n+    pub static lorem: c_int;\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+extern \"C\" {\n+    pub static lorem: c_int;\n+}\n+```\n+\n+## `force_format_strings`\n+\n+Always format string literals\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+See [`format_strings`](#format_strings).\n+\n+See also [`max_width`](#max_width).\n+\n+## `format_strings`\n+\n+Format string literals where necessary\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n+```\n+\n+#### `true`:\n+\n+```rust\n+let lorem =\n+    \"ipsum dolor sit amet consectetur \\\n+     adipiscing elit lorem ipsum dolor sit\";\n+```\n+\n+See also [`force_format_strings`](#force_format_strings), [`max_width`](#max_width).\n+\n+## `generics_indent`\n+\n+Indentation of generics\n+\n+- **Default value**: `\"Visual\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`:\n+\n+```rust\n+fn lorem<\n+    Ipsum: Eq = usize,\n+    Dolor: Eq = usize,\n+    Sit: Eq = usize,\n+    Amet: Eq = usize,\n+    Adipiscing: Eq = usize,\n+    Consectetur: Eq = usize,\n+    Elit: Eq = usize\n+>(ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet,\n+    adipiscing: Adipiscing,\n+    consectetur: Consectetur,\n+    elit: Elit)\n+    -> T {\n+    // body\n+}\n+```\n+\n+#### `\"Visual\"`:\n+\n+```rust\n+fn lorem<Ipsum: Eq = usize,\n+         Dolor: Eq = usize,\n+         Sit: Eq = usize,\n+         Amet: Eq = usize,\n+         Adipiscing: Eq = usize,\n+         Consectetur: Eq = usize,\n+         Elit: Eq = usize>\n+    (ipsum: Ipsum,\n+     dolor: Dolor,\n+     sit: Sit,\n+     amet: Amet,\n+     adipiscing: Adipiscing,\n+     consectetur: Consectetur,\n+     elit: Elit)\n+     -> T {\n+    // body\n+}\n+```\n+\n+## `hard_tabs`\n+\n+Use tab characters for indentation, spaces for alignment\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem() -> usize {\n+    42 // spaces before 42\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem() -> usize {\n+\t42 // tabs before 42\n+}\n+```\n+\n+See also: [`tab_spaces`](#tab_spaces).\n+\n+## `impl_empty_single_line`\n+\n+Put empty-body implementations on a single line\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+impl Lorem {\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+impl Lorem {}\n+```\n+\n+See also [`item_brace_style`](#item_brace_style).\n+\n+## `indent_match_arms`\n+\n+Indent match arms instead of keeping them at the same indentation level as the match keyword\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+match lorem {\n+Lorem::Ipsum => (),\n+Lorem::Dolor => (),\n+Lorem::Sit => (),\n+Lorem::Amet => (),\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+match lorem {\n+    Lorem::Ipsum => (),\n+    Lorem::Dolor => (),\n+    Lorem::Sit => (),\n+    Lorem::Amet => (),\n+}\n+```\n+\n+See also: [`match_block_trailing_comma`](#match_block_trailing_comma), [`wrap_match_arms`](#wrap_match_arms).\n+\n+## `item_brace_style`\n+\n+Brace style for structs and enums\n+\n+- **Default value**: `\"SameLineWhere\"`\n+- **Possible values**: `\"AlwaysNextLine\"`, `\"PreferSameLine\"`, `\"SameLineWhere\"`\n+\n+#### `\"AlwaysNextLine\"`:\n+\n+```rust\n+struct Lorem\n+{\n+    ipsum: bool,\n+}\n+\n+struct Dolor<T>\n+    where T: Eq\n+{\n+    sit: T,\n+}\n+```\n+\n+#### `\"PreferSameLine\"`:\n+\n+```rust\n+struct Lorem {\n+    ipsum: bool,\n+}\n+\n+struct Dolor<T>\n+    where T: Eq {\n+    sit: T,\n+}\n+```\n+\n+#### `\"SameLineWhere\"`:\n+\n+```rust\n+struct Lorem {\n+    ipsum: bool,\n+}\n+\n+struct Dolor<T>\n+    where T: Eq\n+{\n+    sit: T,\n+}\n+```\n+\n+## `match_block_trailing_comma`\n+\n+Put a trailing comma after a block based match arm (non-block arms are not affected)\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+match lorem {\n+    Lorem::Ipsum => {\n+        println!(\"ipsum\");\n+    }\n+    Lorem::Dolor => println!(\"dolor\"),\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+match lorem {\n+    Lorem::Ipsum => {\n+        println!(\"ipsum\");\n+    },\n+    Lorem::Dolor => println!(\"dolor\"),\n+}\n+```\n+\n+See also: [`indent_match_arms`](#indent_match_arms), [`trailing_comma`](#trailing_comma), [`wrap_match_arms`](#wrap_match_arms).\n+\n+## `max_width`\n+\n+Maximum width of each line\n+\n+- **Default value**: `100`\n+- **Possible values**: any positive integer\n+\n+See also [`error_on_line_overflow`](#error_on_line_overflow).\n+\n+## `newline_style`\n+\n+Unix or Windows line endings\n+\n+- **Default value**: `\"Unix\"`\n+- **Possible values**: `\"Native\"`, `\"Unix\"`, `\"Windows\"`\n+\n+## `normalize_comments`\n+\n+Convert /* */ comments to // comments where possible\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+// Lorem ipsum:\n+fn dolor() -> usize {}\n+\n+/* sit amet: */\n+fn adipiscing() -> usize {}\n+```\n+\n+#### `true`:\n+\n+```rust\n+// Lorem ipsum:\n+fn dolor() -> usize {}\n+\n+// sit amet:\n+fn adipiscing() -> usize {}\n+```\n+\n+## `reorder_imported_names`\n+\n+Reorder lists of names in import statements alphabetically\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+use super::{lorem, ipsum, dolor, sit};\n+```\n+\n+#### `true`:\n+\n+```rust\n+use super::{dolor, ipsum, lorem, sit};\n+```\n+\n+See also [`reorder_imports`](#reorder_imports).\n+\n+## `reorder_imports`\n+\n+Reorder import statements alphabetically\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+use lorem;\n+use ipsum;\n+use dolor;\n+use sit;\n+```\n+\n+#### `true`:\n+\n+```rust\n+use dolor;\n+use ipsum;\n+use lorem;\n+use sit;\n+```\n+\n+See also [`reorder_imported_names`](#reorder_imported_names).\n+\n+## `single_line_if_else_max_width`\n+\n+Maximum line length for single line if-else expressions.\n+\n+- **Default value**: `50`\n+- **Possible values**: any positive integer\n+\n+**Note:** A value of `0` results in if-else expressions being broken regardless of their line's width.\n+\n+#### Lines shorter than `single_line_if_else_max_width`:\n+```rust\n+let lorem = if ipsum { dolor } else { sit };\n+```\n+\n+#### Lines longer than `single_line_if_else_max_width`:\n+```rust\n+let lorem = if ipsum {\n+    dolor\n+} else {\n+    sit\n+};\n+```\n+\n+See also: [`control_brace_style`](#control_brace_style).\n+\n+## `skip_children`\n+\n+Don't reformat out of line modules\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+## `space_after_bound_colon`\n+\n+Leave a space after the colon in a trait or lifetime bound\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem<T:Eq>(t: T) {\n+    // body\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem<T: Eq>(t: T) {\n+    // body\n+}\n+```\n+\n+See also: [`space_before_bound`](#space_before_bound).\n+\n+## `space_after_type_annotation_colon`\n+\n+Leave a space after the colon in a type annotation\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem<T: Eq>(t:T) {\n+    let ipsum:Dolor = sit;\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem<T: Eq>(t: T) {\n+    let ipsum: Dolor = sit;\n+}\n+```\n+\n+See also: [`space_before_type_annotation`](#space_before_type_annotation).\n+\n+## `space_before_bound`\n+\n+Leave a space before the colon in a trait or lifetime bound\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem<T: Eq>(t: T) {\n+    let ipsum: Dolor = sit;\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem<T : Eq>(t: T) {\n+    let ipsum: Dolor = sit;\n+}\n+```\n+\n+See also: [`space_after_bound_colon`](#space_after_bound_colon).\n+\n+## `space_before_type_annotation`\n+\n+Leave a space before the colon in a type annotation\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem<T: Eq>(t: T) {\n+    let ipsum: Dolor = sit;\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem<T: Eq>(t : T) {\n+    let ipsum : Dolor = sit;\n+}\n+```\n+\n+See also: [`space_after_type_annotation_colon`](#space_after_type_annotation_colon).\n+\n+## `spaces_around_ranges`\n+\n+Put spaces around the .. and ... range operators\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+let lorem = 0..10;\n+```\n+\n+#### `true`:\n+\n+```rust\n+let lorem = 0 .. 10;\n+```\n+\n+## `spaces_within_angle_brackets`\n+\n+Put spaces within non-empty generic arguments\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem<T: Eq>(t: T) {\n+    // body\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem< T: Eq >(t: T) {\n+    // body\n+}\n+```\n+\n+See also: [`spaces_within_parens`](#spaces_within_parens), [`spaces_within_square_brackets`](#spaces_within_square_brackets).\n+\n+## `spaces_within_parens`\n+\n+Put spaces within non-empty parentheses\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+fn lorem<T: Eq>(t: T) {\n+    let lorem = (ipsum, dolor);\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn lorem<T: Eq>( t: T ) {\n+    let lorem = ( ipsum, dolor );\n+}\n+```\n+\n+See also: [`spaces_within_angle_brackets`](#spaces_within_angle_brackets), [`spaces_within_square_brackets`](#spaces_within_square_brackets).\n+\n+## `spaces_within_square_brackets`\n+\n+Put spaces within non-empty square brackets\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+let lorem: [usize; 2] = [ipsum, dolor];\n+```\n+\n+#### `true`:\n+\n+```rust\n+let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+```\n+\n+See also: [`spaces_within_parens`](#spaces_within_parens), [`spaces_within_angle_brackets`](#spaces_within_angle_brackets).\n+\n+## `struct_lit_multiline_style`\n+\n+Multiline style on literal structs\n+\n+- **Default value**: `\"PreferSingle\"`\n+- **Possible values**: `\"ForceMulti\"`, `\"PreferSingle\"`\n+\n+#### `\"ForceMulti\"`:\n+\n+```rust\n+let lorem = Lorem {\n+    ipsum: dolor,\n+    sit: amet,\n+};\n+```\n+\n+#### `\"PreferSingle\"`:\n+\n+```rust\n+let lorem = Lorem { ipsum: dolor, sit: amet };\n+```\n+\n+See also: [`struct_lit_style`](#struct_lit_style), [`struct_lit_width`](#struct_lit_width).\n+\n+## `struct_lit_style`\n+\n+Style of struct definition\n+\n+- **Default value**: `\"Block\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`:\n+\n+```rust\n+let lorem = Lorem {\n+    ipsum: dolor,\n+    sit: amet,\n+};\n+```\n+\n+#### `\"Visual\"`:\n+\n+```rust\n+let lorem = Lorem { ipsum: dolor,\n+        sit: amet, };\n+```\n+\n+See also: [`struct_lit_multiline_style`](#struct_lit_multiline_style), [`struct_lit_style`](#struct_lit_style).\n+\n+## `struct_lit_width`\n+\n+Maximum width in the body of a struct lit before falling back to vertical formatting\n+\n+- **Default value**: `18`\n+- **Possible values**: any positive integer\n+\n+**Note:** A value of `0` results in vertical formatting being applied regardless of a line's width.\n+\n+#### Lines shorter than `struct_lit_width`:\n+```rust\n+let lorem = Lorem { ipsum: dolor, sit: amet };\n+```\n+\n+#### Lines longer than `struct_lit_width`:\n+See [`struct_lit_style`](#struct_lit_style).\n+\n+See also: [`struct_lit_multiline_style`](#struct_lit_multiline_style), [`struct_lit_style`](#struct_lit_style).\n+\n+## `struct_variant_width`\n+\n+Maximum width in the body of a struct variant before falling back to vertical formatting\n+\n+- **Default value**: `35`\n+- **Possible values**: any positive integer\n+\n+**Note:** A value of `0` results in vertical formatting being applied regardless of a line's width.\n+\n+#### Struct variants shorter than `struct_variant_width`:\n+```rust\n+enum Lorem {\n+    Ipsum,\n+    Dolor(bool),\n+    Sit { amet: Consectetur, adipiscing: Elit },\n+}\n+```\n+\n+#### Struct variants longer than `struct_variant_width`:\n+```rust\n+enum Lorem {\n+    Ipsum,\n+    Dolor(bool),\n+    Sit {\n+        amet: Consectetur,\n+        adipiscing: Elit,\n+    },\n+}\n+```\n+\n+## `tab_spaces`\n+\n+Number of spaces per tab\n+\n+- **Default value**: `4`\n+- **Possible values**: any positive integer\n+\n+#### `2`:\n+\n+```rust\n+fn lorem() {\n+  let ipsum = dolor();\n+  let sit = vec![\n+    \"amet consectetur adipiscing elit.\"\n+  ];\n+}\n+```\n+\n+#### `4`:\n+\n+```rust\n+fn lorem() {\n+    let ipsum = dolor();\n+    let sit = vec![\n+        \"amet consectetur adipiscing elit.\"\n+    ];\n+}\n+```\n+\n+See also: [`hard_tabs`](#hard_tabs).\n+\n+## `take_source_hints`\n+\n+Retain some formatting characteristics from the source code\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+lorem\n+    .ipsum()\n+    .dolor(|| { sit.amet().consectetur().adipiscing().elit(); });\n+```\n+\n+#### `true`:\n+\n+```rust\n+lorem\n+    .ipsum()\n+    .dolor(|| {\n+               sit.amet()\n+                   .consectetur()\n+                   .adipiscing()\n+                   .elit();\n+           });\n+```\n+\n+Note: This only applies if the call chain within the inner closure had already been formatted on separate lines before running rustfmt.\n+\n+## `trailing_comma`\n+\n+How to handle trailing commas for lists\n+\n+- **Default value**: `\"Vertical\"`\n+- **Possible values**: `\"Always\"`, `\"Never\"`, `\"Vertical\"`\n+\n+#### `\"Always\"`:\n+\n+```rust\n+let Lorem { ipsum, dolor, sit, } = amet;\n+let Lorem {\n+    ipsum,\n+    dolor,\n+    sit,\n+    amet,\n+    consectetur,\n+    adipiscing,\n+} = elit;\n+```\n+\n+#### `\"Never\"`:\n+\n+```rust\n+let Lorem { ipsum, dolor, sit } = amet;\n+let Lorem {\n+    ipsum,\n+    dolor,\n+    sit,\n+    amet,\n+    consectetur,\n+    adipiscing\n+} = elit;\n+```\n+\n+#### `\"Vertical\"`:\n+\n+```rust\n+let Lorem { ipsum, dolor, sit } = amet;\n+let Lorem {\n+    ipsum,\n+    dolor,\n+    sit,\n+    amet,\n+    consectetur,\n+    adipiscing,\n+} = elit;\n+```\n+\n+See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n+\n+## `type_punctuation_density`\n+\n+Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n+\n+- **Default value**: `\"Wide\"`\n+- **Possible values**: `\"Compressed\"`, `\"Wide\"`\n+\n+#### `\"Compressed\"`:\n+\n+```rust\n+fn lorem<Ipsum: Dolor+Sit=Amet>() {\n+\t// body\n+}\n+```\n+\n+#### `\"Wide\"`:\n+\n+```rust\n+fn lorem<Ipsum: Dolor + Sit = Amet>() {\n+\t// body\n+}\n+```\n+\n+## `use_try_shorthand`\n+\n+Replace uses of the try! macro by the ? shorthand\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+let lorem = try!(ipsum.map(|dolor|dolor.sit()));\n+```\n+\n+#### `true`:\n+\n+```rust\n+let lorem = ipsum.map(|dolor| dolor.sit())?;\n+```\n+\n+## `where_density`\n+\n+Density of a where clause\n+\n+- **Default value**: `\"CompressedIfEmpty\"`\n+- **Possible values**: `\"Compressed\"`, `\"CompressedIfEmpty\"`, `\"Tall\"`, `\"Vertical\"`\n+\n+#### `\"Compressed\"`:\n+\n+```rust\n+trait Lorem {\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit where Dolor: Eq;\n+\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit where Dolor: Eq {\n+        // body\n+    }\n+}\n+```\n+\n+#### `\"CompressedIfEmpty\"`:\n+\n+```rust\n+trait Lorem {\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit where Dolor: Eq;\n+\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+        where Dolor: Eq\n+    {\n+        // body\n+    }\n+}\n+```\n+\n+#### `\"Tall\"`:\n+\n+```rust\n+trait Lorem {\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+        where Dolor: Eq;\n+\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+        where Dolor: Eq\n+    {\n+        // body\n+    }\n+}\n+```\n+\n+**Note:** `where_density = \"Tall\"` currently produces the same output as `where_density = \"Vertical\"`.\n+\n+#### `\"Vertical\"`:\n+\n+```rust\n+trait Lorem {\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+        where Dolor: Eq;\n+\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+        where Dolor: Eq\n+    {\n+        // body\n+    }\n+}\n+```\n+\n+**Note:** `where_density = \"Vertical\"` currently produces the same output as `where_density = \"Tall\"`.\n+\n+See also: [`where_layout`](#where_layout), [`where_pred_indent`](#where_pred_indent), [`where_style`](#where_style).\n+\n+## `where_layout`\n+\n+Element layout inside a where clause\n+\n+- **Default value**: `\"Vertical\"`\n+- **Possible values**: `\"Horizontal\"`, `\"HorizontalVertical\"`, `\"Mixed\"`, `\"Vertical\"`\n+\n+#### `\"Horizontal\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n+{\n+    // body\n+}\n+\n+fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur, Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n+{\n+    // body\n+}\n+```\n+\n+#### `\"HorizontalVertical\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n+{\n+    // body\n+}\n+\n+fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n+    where Ipsum: IpsumDolorSitAmet,\n+          Dolor: DolorSitAmetConsectetur,\n+          Sit: SitAmetConsecteturAdipiscing,\n+          Amet: AmetConsecteturAdipiscingElit\n+{\n+    // body\n+}\n+```\n+\n+#### `\"Mixed\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n+{\n+    // body\n+}\n+\n+fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur,\n+          Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n+{\n+    // body\n+}\n+```\n+\n+#### `\"Vertical\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n+    where Ipsum: IpsumDolorSitAmet,\n+          Dolor: DolorSitAmetConsectetur\n+{\n+    // body\n+}\n+\n+fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n+    where Ipsum: IpsumDolorSitAmet,\n+          Dolor: DolorSitAmetConsectetur,\n+          Sit: SitAmetConsecteturAdipiscing,\n+          Amet: AmetConsecteturAdipiscingElit\n+{\n+    // body\n+}\n+```\n+\n+See also: [`where_density`](#where_density), [`where_pred_indent`](#where_pred_indent), [`where_style`](#where_style).\n+\n+## `where_pred_indent`\n+\n+Indentation style of a where predicate\n+\n+- **Default value**: `\"Visual\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n+    where Ipsum: Eq,\n+        Dolor: Eq,\n+        Sit: Eq,\n+        Amet: Eq\n+{\n+    // body\n+}\n+```\n+\n+#### `\"Visual\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n+    where Ipsum: Eq,\n+          Dolor: Eq,\n+          Sit: Eq,\n+          Amet: Eq\n+{\n+    // body\n+}\n+```\n+\n+See also: [`where_density`](#where_density), [`where_layout`](#where_layout), [`where_style`](#where_style).\n+\n+## `where_style`\n+\n+Overall strategy for where clauses\n+\n+- **Default value**: `\"Default\"`\n+- **Possible values**: `\"Default\"`, `\"Rfc\"`\n+\n+#### `\"Default\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n+    where Ipsum: Eq,\n+          Dolor: Eq,\n+          Sit: Eq,\n+          Amet: Eq\n+{\n+    // body\n+}\n+```\n+\n+#### `\"Rfc\"`:\n+\n+```rust\n+fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n+where\n+    Ipsum: Eq,\n+    Dolor: Eq,\n+    Sit: Eq,\n+    Amet: Eq,\n+{\n+    // body\n+}\n+```\n+\n+See also: [`where_density`](#where_density), [`where_layout`](#where_layout), [`where_pred_indent`](#where_pred_indent).\n+\n+## `wrap_comments`\n+\n+Break comments to fit on the line\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n+```\n+\n+#### `true`:\n+\n+```rust\n+// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n+// sed do eiusmod tempor incididunt ut labore et dolore\n+// magna aliqua. Ut enim ad minim veniam, quis nostrud\n+// exercitation ullamco laboris nisi ut aliquip ex ea\n+// commodo consequat.\n+```\n+\n+## `wrap_match_arms`\n+\n+Wrap multiline match arms in blocks\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `false`:\n+\n+```rust\n+match lorem {\n+    true => {\n+        let ipsum = dolor;\n+        println!(\"{}\", ipsum);\n+    }\n+    false => {\n+        println!(\"{}\", sit)\n+    }\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+match lorem {\n+    true => {\n+        let ipsum = dolor;\n+        println!(\"{}\", ipsum);\n+    }\n+    false => println!(\"{}\", sit),\n+}\n+```\n+\n+See also: [`indent_match_arms`](#indent_match_arms), [`match_block_trailing_comma`](#match_block_trailing_comma).\n+\n+## `write_mode`\n+\n+What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\n+\n+- **Default value**: `\"Replace\"`\n+- **Possible values**: `\"Checkstyle\"`, `\"Coverage\"`, `\"Diff\"`, `\"Display\"`, `\"Overwrite\"`, `\"Plain\"`, `\"Replace\"`"}, {"sha": "4e4b14f473c853e6e74ac249e05b150a06384514", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/547c0142f3ec25917743a932dafd0e4027b1321d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/547c0142f3ec25917743a932dafd0e4027b1321d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=547c0142f3ec25917743a932dafd0e4027b1321d", "patch": "@@ -46,7 +46,7 @@ To install from source, first checkout to the tag or branch you want to install,\n ```\n cargo install --path  .\n ```\n-This will install `rustfmt` in your `~/.cargo/bin`. Make sure to add `~/.cargo/bin` directory to \n+This will install `rustfmt` in your `~/.cargo/bin`. Make sure to add `~/.cargo/bin` directory to\n your PATH variable.\n \n ## Running\n@@ -151,7 +151,7 @@ Rustfmt is designed to be very configurable. You can create a TOML file called\n `rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent\n directory and it will apply the options in that file. See `rustfmt\n --config-help` for the options which are available, or if you prefer to see\n-source code, [src/config.rs](src/config.rs).\n+visual style previews, [Configurations.md](Configurations.md).\n \n By default, Rustfmt uses a style which (mostly) conforms to the\n [Rust style guidelines](https://doc.rust-lang.org/1.12.0/style/README.html)."}]}