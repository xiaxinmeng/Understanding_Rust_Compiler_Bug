{"sha": "6e2e17d1152d46314b332ecaf11b80786386b919", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMmUxN2QxMTUyZDQ2MzE0YjMzMmVjYWYxMWI4MDc4NjM4NmI5MTk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-18T00:46:40Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-25T17:28:09Z"}, "message": "Make generator object debuginfo easier to read", "tree": {"sha": "e2d0e8f13cc4b8ad9d7e5df4fb3db1d95cc8283f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d0e8f13cc4b8ad9d7e5df4fb3db1d95cc8283f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e2e17d1152d46314b332ecaf11b80786386b919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2e17d1152d46314b332ecaf11b80786386b919", "html_url": "https://github.com/rust-lang/rust/commit/6e2e17d1152d46314b332ecaf11b80786386b919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e2e17d1152d46314b332ecaf11b80786386b919/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961ba95e5a89a101db38e120468be6224af3f8cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/961ba95e5a89a101db38e120468be6224af3f8cc", "html_url": "https://github.com/rust-lang/rust/commit/961ba95e5a89a101db38e120468be6224af3f8cc"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "85f38912d3d76f756b8b992fa3c5995d1cbf9876", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e2e17d1152d46314b332ecaf11b80786386b919/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2e17d1152d46314b332ecaf11b80786386b919/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=6e2e17d1152d46314b332ecaf11b80786386b919", "patch": "@@ -1333,7 +1333,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         name: if fallback {\n                             String::new()\n                         } else {\n-                            variant_info.name_as_string()\n+                            variant_info.variant_name()\n                         },\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n@@ -1388,7 +1388,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         name: if fallback {\n                             String::new()\n                         } else {\n-                            variant_info.name_as_string()\n+                            variant_info.variant_name()\n                         },\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n@@ -1455,7 +1455,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                        self.layout,\n                                        self.layout.fields.offset(discr_index),\n                                        self.layout.field(cx, discr_index).size);\n-                    variant_info_for(*niche_variants.start()).map_name(|variant_name| {\n+                    variant_info_for(*niche_variants.start()).map_struct_name(|variant_name| {\n                         name.push_str(variant_name);\n                     });\n \n@@ -1506,7 +1506,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         };\n \n                         MemberDescription {\n-                            name: variant_info.name_as_string(),\n+                            name: variant_info.variant_name(),\n                             type_metadata: variant_type_metadata,\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n@@ -1571,16 +1571,25 @@ enum VariantInfo<'tcx> {\n }\n \n impl<'tcx> VariantInfo<'tcx> {\n-    fn map_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n+    fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n             VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n             VariantInfo::Generator(substs, variant_index) =>\n                 substs.map_variant_name(*variant_index, f),\n         }\n     }\n \n-    fn name_as_string(&self) -> String {\n-        self.map_name(|name| name.to_string())\n+    fn variant_name(&self) -> String {\n+        match self {\n+            VariantInfo::Adt(variant) => variant.ident.to_string(),\n+            VariantInfo::Generator(_, variant_index) => {\n+                // Since GDB currently prints out the raw discriminant along\n+                // with every variant, make each variant name be just the value\n+                // of the discriminant. The struct name for the variant includes\n+                // the actual variant description.\n+                format!(\"{}\", variant_index.as_usize()).to_string()\n+            }\n+        }\n     }\n \n     fn field_name(&self, i: usize) -> String {\n@@ -1604,7 +1613,7 @@ fn describe_enum_variant(\n     containing_scope: &'ll DIScope,\n     span: Span,\n ) -> (&'ll DICompositeType, MemberDescriptionFactory<'ll, 'tcx>) {\n-    let metadata_stub = variant.map_name(|variant_name| {\n+    let metadata_stub = variant.map_struct_name(|variant_name| {\n         let unique_type_id = debug_context(cx).type_map\n                                               .borrow_mut()\n                                               .get_unique_type_id_of_enum_variant("}, {"sha": "b2837f42f94c749ade80adf0c11b994412216234", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e2e17d1152d46314b332ecaf11b80786386b919/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2e17d1152d46314b332ecaf11b80786386b919/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=6e2e17d1152d46314b332ecaf11b80786386b919", "patch": "@@ -10,16 +10,16 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 0, Unresumed: generator_objects::main::generator::Unresumed, Returned: generator_objects::main::generator::Returned, Panicked: generator_objects::main::generator::Panicked, variant#3: generator_objects::main::generator::variant#3 ([...]), variant#4: generator_objects::main::generator::variant#4 ([...])}}\n+// gdb-check:$1 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 ([...]), 4: generator_objects::main::generator::variant#4 ([...])}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 3, Unresumed: generator_objects::main::generator::Unresumed, Returned: generator_objects::main::generator::Returned, Panicked: generator_objects::main::generator::Panicked, variant#3: generator_objects::main::generator::variant#3 (6, 7), variant#4: generator_objects::main::generator::variant#4 ([...])}}\n+// gdb-check:$2 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 (6, 7), 4: generator_objects::main::generator::variant#4 ([...])}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 4, Unresumed: generator_objects::main::generator::Unresumed, Returned: generator_objects::main::generator::Returned, Panicked: generator_objects::main::generator::Panicked, variant#3: generator_objects::main::generator::variant#3 ([...]), variant#4: generator_objects::main::generator::variant#4 (7, 8)}}\n+// gdb-check:$3 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 ([...]), 4: generator_objects::main::generator::variant#4 (7, 8)}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 1, Unresumed: generator_objects::main::generator::Unresumed, Returned: generator_objects::main::generator::Returned, Panicked: generator_objects::main::generator::Panicked, variant#3: generator_objects::main::generator::variant#3 ([...]), variant#4: generator_objects::main::generator::variant#4 ([...])}}\n+// gdb-check:$4 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 ([...]), 4: generator_objects::main::generator::variant#4 ([...])}}\n \n // === LLDB TESTS ==================================================================================\n "}]}