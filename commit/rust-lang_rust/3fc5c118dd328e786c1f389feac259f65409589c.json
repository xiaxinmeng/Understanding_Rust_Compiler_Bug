{"sha": "3fc5c118dd328e786c1f389feac259f65409589c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzVjMTE4ZGQzMjhlNzg2YzFmMzg5ZmVhYzI1OWY2NTQwOTU4OWM=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-05T12:56:01Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-05T15:39:12Z"}, "message": "Use righthand '&' instead of lefthand \"ref\". (clippy::toplevel_ref_arg)", "tree": {"sha": "013786460e4b34fc8e196933329eb85cbdc37866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013786460e4b34fc8e196933329eb85cbdc37866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc5c118dd328e786c1f389feac259f65409589c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc5c118dd328e786c1f389feac259f65409589c", "html_url": "https://github.com/rust-lang/rust/commit/3fc5c118dd328e786c1f389feac259f65409589c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc5c118dd328e786c1f389feac259f65409589c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e70c8ec2ffb17ad55d57032a9d47fe7463f2d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e70c8ec2ffb17ad55d57032a9d47fe7463f2d6d", "html_url": "https://github.com/rust-lang/rust/commit/3e70c8ec2ffb17ad55d57032a9d47fe7463f2d6d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "81c97bcea05014ad7dd39d963799916629ef4d59", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=3fc5c118dd328e786c1f389feac259f65409589c", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 match ty {\n                     Placeholder(_) => {\n                         // record every (position, type) combination only once\n-                        let ref mut seen_ty = self.arg_unique_types[arg];\n+                        let seen_ty = &mut self.arg_unique_types[arg];\n                         let i = seen_ty.iter().position(|x| *x == ty).unwrap_or_else(|| {\n                             let i = seen_ty.len();\n                             seen_ty.push(ty);\n@@ -526,7 +526,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // Map the arguments\n         for i in 0..args_len {\n-            let ref arg_types = self.arg_types[i];\n+            let arg_types = &self.arg_types[i];\n             let arg_offsets = arg_types.iter().map(|offset| sofar + *offset).collect::<Vec<_>>();\n             self.arg_index_map.push(arg_offsets);\n             sofar += self.arg_unique_types[i].len();\n@@ -597,7 +597,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                             let arg_idx = match arg_index_consumed.get_mut(i) {\n                                 None => 0, // error already emitted elsewhere\n                                 Some(offset) => {\n-                                    let ref idx_map = self.arg_index_map[i];\n+                                    let idx_map = &self.arg_index_map[i];\n                                     // unwrap_or branch: error already emitted elsewhere\n                                     let arg_idx = *idx_map.get(*offset).unwrap_or(&0);\n                                     *offset += 1;\n@@ -721,7 +721,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             let name = names_pos[i];\n             let span = self.ecx.with_def_site_ctxt(e.span);\n             pats.push(self.ecx.pat_ident(span, name));\n-            for ref arg_ty in self.arg_unique_types[i].iter() {\n+            for arg_ty in self.arg_unique_types[i].iter() {\n                 locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, name));\n             }\n             heads.push(self.ecx.expr_addr_of(e.span, e));"}, {"sha": "5d16be3206aaafe8ae22a116110156e69168c73f", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=3fc5c118dd328e786c1f389feac259f65409589c", "patch": "@@ -57,12 +57,12 @@ impl AllocFnFactory<'_, '_> {\n     fn allocator_fn(&self, method: &AllocatorMethod) -> Stmt {\n         let mut abi_args = Vec::new();\n         let mut i = 0;\n-        let ref mut mk = || {\n+        let mut mk = || {\n             let name = self.cx.ident_of(&format!(\"arg{}\", i), self.span);\n             i += 1;\n             name\n         };\n-        let args = method.inputs.iter().map(|ty| self.arg_ty(ty, &mut abi_args, mk)).collect();\n+        let args = method.inputs.iter().map(|ty| self.arg_ty(ty, &mut abi_args, &mut mk)).collect();\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n         let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));"}, {"sha": "bc194a3eec4c34684cb085d89307c97662ffae9f", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=3fc5c118dd328e786c1f389feac259f65409589c", "patch": "@@ -313,7 +313,7 @@ fn should_fail(i: &ast::Item) -> bool {\n fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n     match attr::find_by_name(&i.attrs, sym::should_panic) {\n         Some(attr) => {\n-            let ref sd = cx.parse_sess.span_diagnostic;\n+            let sd = &cx.parse_sess.span_diagnostic;\n \n             match attr.meta_item_list() {\n                 // Handle #[should_panic(expected = \"foo\")]\n@@ -378,7 +378,7 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n \n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n-    let ref sd = cx.parse_sess.span_diagnostic;\n+    let sd = &cx.parse_sess.span_diagnostic;\n     if let ast::ItemKind::Fn(_, ref sig, ref generics, _) = i.kind {\n         if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n             sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")"}, {"sha": "e7e1ad8eda78477293b878b6e20792a7b412e032", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=3fc5c118dd328e786c1f389feac259f65409589c", "patch": "@@ -326,7 +326,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n /// &[&test1, &test2]\n fn mk_tests_slice(cx: &TestCtxt<'_>, sp: Span) -> P<ast::Expr> {\n     debug!(\"building test vector from {} tests\", cx.test_cases.len());\n-    let ref ecx = cx.ext_cx;\n+    let ecx = &cx.ext_cx;\n \n     ecx.expr_vec_slice(\n         sp,"}, {"sha": "fd94e3b69940c8d2c587b3e60cf31abdd3eb4c5c", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=3fc5c118dd328e786c1f389feac259f65409589c", "patch": "@@ -1341,7 +1341,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         stack: &TraitObligationStack<'o, 'tcx>,\n     ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {\n         let TraitObligationStack { obligation, .. } = *stack;\n-        let ref obligation = Obligation {\n+        let obligation = &Obligation {\n             param_env: obligation.param_env,\n             cause: obligation.cause.clone(),\n             recursion_depth: obligation.recursion_depth,"}, {"sha": "9fe21964b98882c96b5d8713a34dad05a699f8be", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=3fc5c118dd328e786c1f389feac259f65409589c", "patch": "@@ -920,7 +920,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n             match candidate {\n                 Candidate::Ref(loc) => {\n-                    let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n+                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n                         StatementKind::Assign(box (\n                             _,\n@@ -971,7 +971,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     }\n                 }\n                 Candidate::Repeat(loc) => {\n-                    let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n+                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n                         StatementKind::Assign(box (_, Rvalue::Repeat(ref mut operand, _))) => {\n                             let ty = operand.ty(local_decls, self.tcx);"}, {"sha": "5b054c04522439c9a96b934e70d1a6a13c53e9b9", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc5c118dd328e786c1f389feac259f65409589c/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=3fc5c118dd328e786c1f389feac259f65409589c", "patch": "@@ -2331,7 +2331,7 @@ fn specialize_one_pattern<'p, 'tcx>(\n         PatKind::Binding { .. } | PatKind::Wild => Some(ctor_wild_subpatterns.iter().collect()),\n \n         PatKind::Variant { adt_def, variant_index, ref subpatterns, .. } => {\n-            let ref variant = adt_def.variants[variant_index];\n+            let variant = &adt_def.variants[variant_index];\n             let is_non_exhaustive = cx.is_foreign_non_exhaustive_variant(pat.ty, variant);\n             Some(Variant(variant.def_id))\n                 .filter(|variant_constructor| variant_constructor == constructor)"}]}