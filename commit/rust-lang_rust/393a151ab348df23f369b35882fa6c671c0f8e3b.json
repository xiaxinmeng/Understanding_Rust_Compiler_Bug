{"sha": "393a151ab348df23f369b35882fa6c671c0f8e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5M2ExNTFhYjM0OGRmMjNmMzY5YjM1ODgyZmE2YzY3MWMwZjhlM2I=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-08-25T20:55:10Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-08-25T20:55:10Z"}, "message": "Merge pull request #196 from marcusklaas/if-else-single-line\n\nImplement single line if-else formatting", "tree": {"sha": "3d92114dda6df9ebc457cc2d3dab603cb71b100a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d92114dda6df9ebc457cc2d3dab603cb71b100a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393a151ab348df23f369b35882fa6c671c0f8e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393a151ab348df23f369b35882fa6c671c0f8e3b", "html_url": "https://github.com/rust-lang/rust/commit/393a151ab348df23f369b35882fa6c671c0f8e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393a151ab348df23f369b35882fa6c671c0f8e3b/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff87a4a66aed1a113f8bbad52ce6bafddd4c395", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff87a4a66aed1a113f8bbad52ce6bafddd4c395", "html_url": "https://github.com/rust-lang/rust/commit/eff87a4a66aed1a113f8bbad52ce6bafddd4c395"}, {"sha": "d92dd3d915c0936f78fb0cf80c830dbd7fda211e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92dd3d915c0936f78fb0cf80c830dbd7fda211e", "html_url": "https://github.com/rust-lang/rust/commit/d92dd3d915c0936f78fb0cf80c830dbd7fda211e"}], "stats": {"total": 216, "additions": 206, "deletions": 10}, "files": [{"sha": "1af346265ded3fb1baeadc1f37f251591eaf9524", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -79,4 +79,5 @@ create_config! {\n     reorder_imports: bool, // Alphabetically, case sensitive.\n     expr_indent_style: BlockIndentStyle,\n     closure_indent_style: BlockIndentStyle,\n+    single_line_if_else: bool,\n }"}, {"sha": "0af42981522be743c06fa834bccdda162a20dde2", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -15,3 +15,4 @@ report_fixme = \"Never\"\n reorder_imports = false\n expr_indent_style = \"Tabbed\"\n closure_indent_style = \"Visual\"\n+single_line_if_else = false"}, {"sha": "14659815d7294e4e2143ddd7bc7e561bfaed3f36", "filename": "src/expr.rs", "status": "modified", "additions": 93, "deletions": 10, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -20,7 +20,7 @@ use types::rewrite_path;\n use items::{span_lo_for_arg, span_hi_for_arg, rewrite_fn_input};\n \n use syntax::{ast, ptr};\n-use syntax::codemap::{Pos, Span, BytePos, mk_sp};\n+use syntax::codemap::{CodeMap, Pos, Span, BytePos, mk_sp};\n use syntax::visit::Visitor;\n \n impl Rewrite for ast::Expr {\n@@ -80,7 +80,8 @@ impl Rewrite for ast::Expr {\n                                 else_block.as_ref().map(|e| &**e),\n                                 None,\n                                 width,\n-                                offset)\n+                                offset,\n+                                true)\n             }\n             ast::Expr_::ExprIfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n                 rewrite_if_else(context,\n@@ -89,7 +90,8 @@ impl Rewrite for ast::Expr {\n                                 else_block.as_ref().map(|e| &**e),\n                                 Some(pat),\n                                 width,\n-                                offset)\n+                                offset,\n+                                true)\n             }\n             // We reformat it ourselves because rustc gives us a bad span\n             // for ranges, see rust#27162\n@@ -412,33 +414,114 @@ fn rewrite_range(context: &RewriteContext,\n fn rewrite_if_else(context: &RewriteContext,\n                    cond: &ast::Expr,\n                    if_block: &ast::Block,\n-                   else_block: Option<&ast::Expr>,\n+                   else_block_opt: Option<&ast::Expr>,\n                    pat: Option<&ast::Pat>,\n                    width: usize,\n-                   offset: usize)\n+                   offset: usize,\n+                   allow_single_line: bool)\n                    -> Option<String> {\n     // 3 = \"if \", 2 = \" {\"\n     let pat_expr_string = try_opt!(rewrite_pat_expr(context,\n                                                     pat,\n                                                     cond,\n                                                     \"let \",\n                                                     \" =\",\n-                                                    width - 3 - 2,\n+                                                    try_opt!(width.checked_sub(3 + 2)),\n                                                     offset + 3));\n \n+    // Try to format if-else on single line.\n+    if allow_single_line && context.config.single_line_if_else {\n+        let trial = single_line_if_else(context, &pat_expr_string, if_block, else_block_opt, width);\n+\n+        if trial.is_some() {\n+            return trial;\n+        }\n+    }\n+\n     let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n     let mut result = format!(\"if {} {}\", pat_expr_string, if_block_string);\n \n-    if let Some(else_block) = else_block {\n-        let else_block_string = try_opt!(else_block.rewrite(context, width, offset));\n+    if let Some(else_block) = else_block_opt {\n+        let rewrite = match else_block.node {\n+            // If the else expression is another if-else expression, prevent it\n+            // from being formatted on a single line.\n+            ast::Expr_::ExprIfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n+                rewrite_if_else(context,\n+                                cond,\n+                                if_block,\n+                                else_block.as_ref().map(|e| &**e),\n+                                Some(pat),\n+                                width,\n+                                offset,\n+                                false)\n+            }\n+            ast::Expr_::ExprIf(ref cond, ref if_block, ref else_block) => {\n+                rewrite_if_else(context,\n+                                cond,\n+                                if_block,\n+                                else_block.as_ref().map(|e| &**e),\n+                                None,\n+                                width,\n+                                offset,\n+                                false)\n+            }\n+            _ => else_block.rewrite(context, width, offset),\n+        };\n \n         result.push_str(\" else \");\n-        result.push_str(&else_block_string);\n+        result.push_str(&&try_opt!(rewrite));\n     }\n \n     Some(result)\n }\n \n+fn single_line_if_else(context: &RewriteContext,\n+                       pat_expr_str: &str,\n+                       if_node: &ast::Block,\n+                       else_block_opt: Option<&ast::Expr>,\n+                       width: usize)\n+                       -> Option<String> {\n+    let else_block = try_opt!(else_block_opt);\n+    let fixed_cost = \"if  {  } else {  }\".len();\n+\n+    if let ast::ExprBlock(ref else_node) = else_block.node {\n+        if !is_simple_block(if_node, context.codemap) ||\n+           !is_simple_block(else_node, context.codemap) || pat_expr_str.contains('\\n') {\n+            return None;\n+        }\n+\n+        let new_width = try_opt!(width.checked_sub(pat_expr_str.len() + fixed_cost));\n+        let if_expr = if_node.expr.as_ref().unwrap();\n+        let if_str = try_opt!(if_expr.rewrite(context, new_width, 0));\n+\n+        let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n+        let else_expr = else_node.expr.as_ref().unwrap();\n+        let else_str = try_opt!(else_expr.rewrite(context, new_width, 0));\n+\n+        // FIXME: this check shouldn't be necessary. Rewrites should either fail\n+        // or wrap to a newline when the object does not fit the width.\n+        let fits_line = fixed_cost + pat_expr_str.len() + if_str.len() + else_str.len() <= width;\n+\n+        if fits_line && !if_str.contains('\\n') && !else_str.contains('\\n') {\n+            return Some(format!(\"if {} {{ {} }} else {{ {} }}\", pat_expr_str, if_str, else_str));\n+        }\n+    }\n+\n+    None\n+}\n+\n+// Checks that a block contains no statements, an expression and no comments.\n+fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n+    if !block.stmts.is_empty() || block.expr.is_none() {\n+        return false;\n+    }\n+\n+    let snippet = codemap.span_to_snippet(block.span).unwrap();\n+\n+    // FIXME: fails when either // or /* is contained in a string literal.\n+    !snippet.contains(\"//\") && !snippet.contains(\"/*\")\n+}\n+\n fn rewrite_match(context: &RewriteContext,\n                  cond: &ast::Expr,\n                  arms: &[ast::Arm],\n@@ -830,7 +913,7 @@ fn rewrite_paren(context: &RewriteContext,\n     debug!(\"rewrite_paren, width: {}, offset: {}\", width, offset);\n     // 1 is for opening paren, 2 is for opening+closing, we want to keep the closing\n     // paren on the same line as the subexpr.\n-    let subexpr_str = subexpr.rewrite(context, width-2, offset+1);\n+    let subexpr_str = subexpr.rewrite(context, try_opt!(width.checked_sub(2)), offset + 1);\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n     subexpr_str.map(|s| format!(\"({})\", s))\n }"}, {"sha": "1b4ab5cb7e9e315aa18799459fdb4e1cbe00dd49", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -15,3 +15,4 @@ report_fixme = \"Never\"\n reorder_imports = false\n expr_indent_style = \"Tabbed\"\n closure_indent_style = \"Visual\"\n+single_line_if_else = false"}, {"sha": "85ee772745191055b5da2376d6d2663acf5b7a25", "filename": "tests/source/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -43,6 +43,8 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n  + 2 + 3 {\n     }\n \n+    let test = if true { 5 } else { 3 };\n+\n     if cond() {\n         something();\n     } else  if different_cond() {"}, {"sha": "42629ab8e37f3f23fecff129ae5dbccfdb641726", "filename": "tests/source/single-line-if-else.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Fsource%2Fsingle-line-if-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Fsource%2Fsingle-line-if-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fsingle-line-if-else.rs?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -0,0 +1,50 @@\n+// rustfmt-single_line_if_else: true\n+\n+// Format if-else expressions on a single line, when possible.\n+\n+fn main() {\n+    let a = if 1 > 2 {\n+        unreachable!()\n+    } else {\n+        10\n+    };\n+\n+    let a = if x { 1 } else if y { 2 } else { 3 };\n+\n+    let b = if cond() {\n+        5\n+    } else {\n+        // Brief comment.\n+        10\n+    };\n+\n+    let c = if cond() {\n+        statement();\n+\n+        5\n+    } else {\n+        10\n+    };\n+\n+    let d   = if  let  Some(val)  =  turbo \n+    { \"cool\" } else {\n+     \"beans\" };\n+\n+    if cond() { statement(); } else { other_statement(); }\n+\n+    if true  {\n+        do_something()\n+    }\n+\n+    let x = if veeeeeeeeery_loooooong_condition() { aaaaaaaaaaaaaaaaaaaaaaaaaaa } else { bbbbbbbbbb };\n+  \n+    let x = if veeeeeeeeery_loooooong_condition()     {    aaaaaaaaaaaaaaaaaaaaaaaaa }   else  {\n+        bbbbbbbbbb };\n+\n+    funk(if test() {\n+             1\n+         } else {\n+             2\n+         },\n+         arg2);\n+}"}, {"sha": "45c654b738fb5f775da9d71e04fab85bdd5eccd7", "filename": "tests/target/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -61,6 +61,12 @@ fn foo() -> bool {\n            1 + 2 + 3 {\n     }\n \n+    let test = if true {\n+        5\n+    } else {\n+        3\n+    };\n+\n     if cond() {\n         something();\n     } else if different_cond() {"}, {"sha": "27b6d773da5ff848a067ecfbecce07ad8ea4f5aa", "filename": "tests/target/single-line-if-else.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Ftarget%2Fsingle-line-if-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393a151ab348df23f369b35882fa6c671c0f8e3b/tests%2Ftarget%2Fsingle-line-if-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fsingle-line-if-else.rs?ref=393a151ab348df23f369b35882fa6c671c0f8e3b", "patch": "@@ -0,0 +1,52 @@\n+// rustfmt-single_line_if_else: true\n+\n+// Format if-else expressions on a single line, when possible.\n+\n+fn main() {\n+    let a = if 1 > 2 { unreachable!() } else { 10 };\n+\n+    let a = if x {\n+        1\n+    } else if y {\n+        2\n+    } else {\n+        3\n+    };\n+\n+    let b = if cond() {\n+        5\n+    } else {\n+        // Brief comment.\n+        10\n+    };\n+\n+    let c = if cond() {\n+        statement();\n+\n+        5\n+    } else {\n+        10\n+    };\n+\n+    let d = if let Some(val) = turbo { \"cool\" } else { \"beans\" };\n+\n+    if cond() {\n+        statement();\n+    } else {\n+        other_statement();\n+    }\n+\n+    if true {\n+        do_something()\n+    }\n+\n+    let x = if veeeeeeeeery_loooooong_condition() {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    } else {\n+        bbbbbbbbbb\n+    };\n+\n+    let x = if veeeeeeeeery_loooooong_condition() { aaaaaaaaaaaaaaaaaaaaaaaaa } else { bbbbbbbbbb };\n+\n+    funk(if test() { 1 } else { 2 }, arg2);\n+}"}]}