{"sha": "532e178f8e1fd3e20d1a22256d93cad2ba9954a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMmUxNzhmOGUxZmQzZTIwZDFhMjIyNTZkOTNjYWQyYmE5OTU0YTk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-22T11:52:14Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-22T11:52:14Z"}, "message": "Add find_node_at_offset_with_descend", "tree": {"sha": "d93f08a6c66fe8e5c39e8873b4d01c903e8beff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93f08a6c66fe8e5c39e8873b4d01c903e8beff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/532e178f8e1fd3e20d1a22256d93cad2ba9954a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/532e178f8e1fd3e20d1a22256d93cad2ba9954a9", "html_url": "https://github.com/rust-lang/rust/commit/532e178f8e1fd3e20d1a22256d93cad2ba9954a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/532e178f8e1fd3e20d1a22256d93cad2ba9954a9/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe956420fc63609a84dd005b8190b1f19fff280", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe956420fc63609a84dd005b8190b1f19fff280", "html_url": "https://github.com/rust-lang/rust/commit/6fe956420fc63609a84dd005b8190b1f19fff280"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "caece91c13dbead39bbbb25651dd441f96a0eb91", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/532e178f8e1fd3e20d1a22256d93cad2ba9954a9/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532e178f8e1fd3e20d1a22256d93cad2ba9954a9/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=532e178f8e1fd3e20d1a22256d93cad2ba9954a9", "patch": "@@ -12,7 +12,8 @@ use hir_expand::ExpansionInfo;\n use ra_db::{FileId, FileRange};\n use ra_prof::profile;\n use ra_syntax::{\n-    algo::skip_trivia_token, ast, AstNode, Direction, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n+    algo::{find_node_at_offset, skip_trivia_token},\n+    ast, AstNode, Direction, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n \n@@ -108,6 +109,17 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         token.value\n     }\n \n+    pub fn descend_node_at_offset<N: ast::AstNode>(\n+        &self,\n+        node: &SyntaxNode,\n+        offset: TextUnit,\n+    ) -> Option<N> {\n+        // Handle macro token cases\n+        node.token_at_offset(offset)\n+            .map(|token| self.descend_into_macros(token))\n+            .find_map(|it| self.ancestors_with_macros(it.parent()).find_map(N::cast))\n+    }\n+\n     pub fn original_range(&self, node: &SyntaxNode) -> FileRange {\n         let node = self.find_file(node.clone());\n         original_range(self.db, node.as_ref())\n@@ -129,6 +141,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n             .kmerge_by(|node1, node2| node1.text_range().len() < node2.text_range().len())\n     }\n \n+    /// Find a AstNode by offset inside SyntaxNode, if it is inside *Macrofile*,\n+    /// search up until it is target AstNode type\n     pub fn find_node_at_offset_with_macros<N: AstNode>(\n         &self,\n         node: &SyntaxNode,\n@@ -137,6 +151,19 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.ancestors_at_offset_with_macros(node, offset).find_map(N::cast)\n     }\n \n+    /// Find a AstNode by offset inside SyntaxNode, if it is inside *MacroCall*,\n+    /// descend it and find again\n+    pub fn find_node_at_offset_with_descend<N: AstNode>(\n+        &self,\n+        node: &SyntaxNode,\n+        offset: TextUnit,\n+    ) -> Option<N> {\n+        if let Some(it) = find_node_at_offset(&node, offset) {\n+            return Some(it);\n+        }\n+        self.descend_node_at_offset(&node, offset)\n+    }\n+\n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n         self.analyze(expr.syntax()).type_of(self.db, &expr)\n     }"}]}