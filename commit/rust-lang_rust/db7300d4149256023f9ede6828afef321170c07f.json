{"sha": "db7300d4149256023f9ede6828afef321170c07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNzMwMGQ0MTQ5MjU2MDIzZjllZGU2ODI4YWZlZjMyMTE3MGMwN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-16T17:13:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-16T17:13:18Z"}, "message": "Auto merge of #35637 - japaric:no-builtins-lto, r=alexcrichton\n\nexclude `#![no_builtins]` crates from LTO\n\nthis prevents intrinsics like `memcpy` from being mis-optimized to\ninfinite recursive calls when LTO is used.\n\nfixes #31544\ncloses #35540\n\n---\n\nr? @alexcrichton\ncc @Amanieu", "tree": {"sha": "98cdaf68499b853bd8c97bb8a2d9fac918e69400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98cdaf68499b853bd8c97bb8a2d9fac918e69400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7300d4149256023f9ede6828afef321170c07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7300d4149256023f9ede6828afef321170c07f", "html_url": "https://github.com/rust-lang/rust/commit/db7300d4149256023f9ede6828afef321170c07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7300d4149256023f9ede6828afef321170c07f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1de5b7e8c2cc276c0a55c5b9f387185e7d48522e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1de5b7e8c2cc276c0a55c5b9f387185e7d48522e", "html_url": "https://github.com/rust-lang/rust/commit/1de5b7e8c2cc276c0a55c5b9f387185e7d48522e"}, {"sha": "e9964056964706fa3746c7e1135c34a45f2f467f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9964056964706fa3746c7e1135c34a45f2f467f", "html_url": "https://github.com/rust-lang/rust/commit/e9964056964706fa3746c7e1135c34a45f2f467f"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "481fd332404bab68217d019d66da3b1b584e27fd", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=db7300d4149256023f9ede6828afef321170c07f", "patch": "@@ -227,6 +227,7 @@ pub trait CrateStore<'tcx> {\n     fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>;\n     fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>;\n     fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>;\n+    fn is_no_builtins(&self, cnum: ast::CrateNum) -> bool;\n \n     // resolve\n     fn def_index_for_def_key(&self,\n@@ -428,6 +429,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>\n         { bug!(\"native_libraries\") }\n     fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId> { bug!(\"reachable_ids\") }\n+    fn is_no_builtins(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_no_builtins\") }\n \n     // resolve\n     fn def_key(&self, def: DefId) -> hir_map::DefKey { bug!(\"def_key\") }"}, {"sha": "2cdbd1b86012dd293734b01eb74ee1c4ce092048", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=db7300d4149256023f9ede6828afef321170c07f", "patch": "@@ -409,6 +409,10 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_reachable_ids(&cdata)\n     }\n \n+    fn is_no_builtins(&self, cnum: ast::CrateNum) -> bool {\n+        attr::contains_name(&self.crate_attrs(cnum), \"no_builtins\")\n+    }\n+\n     fn def_index_for_def_key(&self,\n                              cnum: ast::CrateNum,\n                              def: DefKey)"}, {"sha": "68a176a378172eef8251ba9c1365b83520241f03", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=db7300d4149256023f9ede6828afef321170c07f", "patch": "@@ -940,7 +940,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n             Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n                 add_static_crate(cmd, sess, tmpdir, crate_type,\n-                                 &src.rlib.unwrap().0)\n+                                 &src.rlib.unwrap().0, sess.cstore.is_no_builtins(cnum))\n             }\n             Linkage::Dynamic => {\n                 add_dynamic_crate(cmd, sess, &src.dylib.unwrap().0)\n@@ -964,12 +964,16 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     // * For LTO, we remove upstream object files.\n     // * For dylibs we remove metadata and bytecode from upstream rlibs\n     //\n-    // When performing LTO, all of the bytecode from the upstream libraries has\n-    // already been included in our object file output. As a result we need to\n-    // remove the object files in the upstream libraries so the linker doesn't\n-    // try to include them twice (or whine about duplicate symbols). We must\n-    // continue to include the rest of the rlib, however, as it may contain\n-    // static native libraries which must be linked in.\n+    // When performing LTO, almost(*) all of the bytecode from the upstream\n+    // libraries has already been included in our object file output. As a\n+    // result we need to remove the object files in the upstream libraries so\n+    // the linker doesn't try to include them twice (or whine about duplicate\n+    // symbols). We must continue to include the rest of the rlib, however, as\n+    // it may contain static native libraries which must be linked in.\n+    //\n+    // (*) Crates marked with `#![no_builtins]` don't participate in LTO and\n+    // their bytecode wasn't included. The object files in those libraries must\n+    // still be passed to the linker.\n     //\n     // When making a dynamic library, linkers by default don't include any\n     // object files in an archive if they're not necessary to resolve the link.\n@@ -989,7 +993,8 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                         sess: &Session,\n                         tmpdir: &Path,\n                         crate_type: config::CrateType,\n-                        cratepath: &Path) {\n+                        cratepath: &Path,\n+                        is_a_no_builtins_crate: bool) {\n         if !sess.lto() && crate_type != config::CrateTypeDylib {\n             cmd.link_rlib(&fix_windows_verbatim_for_gcc(cratepath));\n             return\n@@ -1013,7 +1018,8 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                 }\n                 let canonical = f.replace(\"-\", \"_\");\n                 let canonical_name = name.replace(\"-\", \"_\");\n-                if sess.lto() && canonical.starts_with(&canonical_name) &&\n+                if sess.lto() && !is_a_no_builtins_crate &&\n+                   canonical.starts_with(&canonical_name) &&\n                    canonical.ends_with(\".o\") {\n                     let num = &f[name.len()..f.len() - 2];\n                     if num.len() > 0 && num[1..].parse::<u32>().is_ok() {"}, {"sha": "522864c6ec3a4c12601a9fd77d97ff639d546f88", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7300d4149256023f9ede6828afef321170c07f/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=db7300d4149256023f9ede6828afef321170c07f", "patch": "@@ -52,7 +52,12 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n     // For each of our upstream dependencies, find the corresponding rlib and\n     // load the bitcode from the archive. Then merge it into the current LLVM\n     // module that we've got.\n-    link::each_linked_rlib(sess, &mut |_, path| {\n+    link::each_linked_rlib(sess, &mut |cnum, path| {\n+        // `#![no_builtins]` crates don't participate in LTO.\n+        if sess.cstore.is_no_builtins(cnum) {\n+            return;\n+        }\n+\n         let archive = ArchiveRO::open(&path).expect(\"wanted an rlib\");\n         let bytecodes = archive.iter().filter_map(|child| {\n             child.ok().and_then(|c| c.name().map(|name| (name, c)))"}, {"sha": "3f70de5f76c3bec9e3d6f2e299c6d4c5284b1e2d", "filename": "src/test/run-make/no-builtins-lto/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/db7300d4149256023f9ede6828afef321170c07f/src%2Ftest%2Frun-make%2Fno-builtins-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/db7300d4149256023f9ede6828afef321170c07f/src%2Ftest%2Frun-make%2Fno-builtins-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-builtins-lto%2FMakefile?ref=db7300d4149256023f9ede6828afef321170c07f", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+\t# Compile a `#![no_builtins]` rlib crate\n+\t$(RUSTC) no_builtins.rs\n+\t# Build an executable that depends on that crate using LTO. The no_builtins crate doesn't\n+\t# participate in LTO, so its rlib must be explicitly linked into the final binary. Verify this by\n+\t# grepping the linker arguments.\n+\t$(RUSTC) main.rs -C lto -Z print-link-args | grep 'libno_builtins.rlib'"}, {"sha": "e960c726a98cc040aadc7d4a0e236ea047f0bad0", "filename": "src/test/run-make/no-builtins-lto/main.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/db7300d4149256023f9ede6828afef321170c07f/src%2Ftest%2Frun-make%2Fno-builtins-lto%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7300d4149256023f9ede6828afef321170c07f/src%2Ftest%2Frun-make%2Fno-builtins-lto%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-builtins-lto%2Fmain.rs?ref=db7300d4149256023f9ede6828afef321170c07f", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate no_builtins;\n+\n+fn main() {}"}, {"sha": "be95e7c5521eed9434fa6b66b9a5709569595efa", "filename": "src/test/run-make/no-builtins-lto/no_builtins.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db7300d4149256023f9ede6828afef321170c07f/src%2Ftest%2Frun-make%2Fno-builtins-lto%2Fno_builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7300d4149256023f9ede6828afef321170c07f/src%2Ftest%2Frun-make%2Fno-builtins-lto%2Fno_builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-builtins-lto%2Fno_builtins.rs?ref=db7300d4149256023f9ede6828afef321170c07f", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+#![no_builtins]"}]}