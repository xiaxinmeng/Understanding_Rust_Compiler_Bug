{"sha": "31c84e50772e1ebdd5ace0f4211d050e193e1e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYzg0ZTUwNzcyZTFlYmRkNWFjZTBmNDIxMWQwNTBlMTkzZTFlOTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-08T11:57:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-08T11:57:01Z"}, "message": "Fix clippy.", "tree": {"sha": "95139d253fac773f09884c9bfb2578f8dcf3bbc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95139d253fac773f09884c9bfb2578f8dcf3bbc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31c84e50772e1ebdd5ace0f4211d050e193e1e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31c84e50772e1ebdd5ace0f4211d050e193e1e90", "html_url": "https://github.com/rust-lang/rust/commit/31c84e50772e1ebdd5ace0f4211d050e193e1e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31c84e50772e1ebdd5ace0f4211d050e193e1e90/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41fe5c1ca73589fe9f63f2191fd0c869e5de34d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/41fe5c1ca73589fe9f63f2191fd0c869e5de34d0", "html_url": "https://github.com/rust-lang/rust/commit/41fe5c1ca73589fe9f63f2191fd0c869e5de34d0"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "278d043732f4942631731dda65e2f96873ee47e6", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -3,12 +3,13 @@ use crate::utils::{\n     span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::{Name, UintTy};\n+use rustc_ast::ast::{UintTy};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for naive byte counts\n@@ -95,11 +96,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n     }\n }\n \n-fn check_arg(name: Name, arg: Name, needle: &Expr<'_>) -> bool {\n+fn check_arg(name: Symbol, arg: Symbol, needle: &Expr<'_>) -> bool {\n     name == arg && !contains_name(name, needle)\n }\n \n-fn get_path_name(expr: &Expr<'_>) -> Option<Name> {\n+fn get_path_name(expr: &Expr<'_>) -> Option<Symbol> {\n     match expr.kind {\n         ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => {\n             get_path_name(e)"}, {"sha": "475610dda47535ee60e11b840234ca44ed2f49e6", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -2,11 +2,12 @@\n \n use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n-use rustc_ast::ast::{Attribute, Name};\n+use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::{TraitFn, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `#[inline]` on trait methods without bodies\n@@ -38,7 +39,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InlineFnWithoutBody {\n     }\n }\n \n-fn check_attrs(cx: &LateContext<'_, '_>, name: Name, attrs: &[Attribute]) {\n+fn check_attrs(cx: &LateContext<'_, '_>, name: Symbol, attrs: &[Attribute]) {\n     for attr in attrs {\n         if !attr.check_name(sym!(inline)) {\n             continue;"}, {"sha": "2ec0b5a8d6fb4ef6d5cec2a209fa276ddd11ffbb", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n-use rustc_ast::ast::{LitKind, Name};\n+use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, TraitItemRef};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::{Span, Spanned};\n+use rustc_span::source_map::{Span, Spanned, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for getting the length of something via `.len()`\n@@ -226,7 +226,7 @@ fn check_cmp(cx: &LateContext<'_, '_>, span: Span, method: &Expr<'_>, lit: &Expr\n fn check_len(\n     cx: &LateContext<'_, '_>,\n     span: Span,\n-    method_name: Name,\n+    method_name: Symbol,\n     args: &[Expr<'_>],\n     lit: &LitKind,\n     op: &str,"}, {"sha": "1f135cba6e4ee97156715db034622b65f803f779", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -333,7 +333,7 @@ mod zero_div_zero;\n pub use crate::utils::conf::Conf;\n \n mod reexport {\n-    pub use rustc_ast::ast::Name;\n+    pub use rustc_span::Symbol as Name;\n }\n \n /// Register all pre expansion lints"}, {"sha": "0163b3f8dbc8e58898bef2762a244583c2dd57ee", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -3,14 +3,14 @@ use crate::utils::{\n     is_copy, is_type_diagnostic_item, match_trait_method, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::Ident;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n+use rustc_span::Span;\n+use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `iterator.map(|x| x.clone())` and suggests"}, {"sha": "2b51b73207585fe978725d17d1ceb31cfc7ed535", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Ident, Item, ItemKind, Local, MacCall, Pat, PatKind,\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, MacCall, Pat, PatKind,\n };\n use rustc_ast::attr;\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::{Ident, SymbolStr};\n use std::cmp::Ordering;\n \n declare_clippy_lint! {"}, {"sha": "735800e7e74160ee079aefcdaf3a20b65189122a", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::span_lint;\n-use rustc_ast::ast::{Ident, Item, ItemKind, UseTree, UseTreeKind};\n+use rustc_ast::ast::{Item, ItemKind, UseTree, UseTreeKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::{Ident, SymbolStr};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for imports that remove \"unsafe\" from an item's"}, {"sha": "bd7da57c665dc4d82b32cf626a5887e7b8cb618f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -1,6 +1,5 @@\n use crate::consts::{constant_context, constant_simple};\n use crate::utils::differing_macro_contexts;\n-use rustc_ast::ast::Name;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::{\n     BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, Field, FnRetTy, GenericArg,\n@@ -10,6 +9,7 @@ use rustc_hir::{\n use rustc_lint::LateContext;\n use rustc_middle::ich::StableHashingContextProvider;\n use rustc_middle::ty::TypeckTables;\n+use rustc_span::Symbol;\n use std::hash::Hash;\n \n /// Type used to check whether two ast are the same. This is different from the\n@@ -544,7 +544,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_name(&mut self, n: Name) {\n+    pub fn hash_name(&mut self, n: Symbol) {\n         n.as_str().hash(&mut self.s);\n     }\n "}, {"sha": "8e1b047f6f80aa4a645947c9a80812569da9d766", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{\n     span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n+use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n@@ -17,7 +17,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::{Symbol, SymbolStr};\n \n use std::borrow::{Borrow, Cow};\n \n@@ -245,8 +245,8 @@ impl EarlyLintPass for ClippyLintsInternal {\n \n #[derive(Clone, Debug, Default)]\n pub struct LintWithoutLintPass {\n-    declared_lints: FxHashMap<Name, Span>,\n-    registered_lints: FxHashSet<Name>,\n+    declared_lints: FxHashMap<Symbol, Span>,\n+    registered_lints: FxHashSet<Symbol>,\n }\n \n impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n@@ -357,7 +357,7 @@ fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty<'_>) -> bool {\n }\n \n struct LintCollector<'a, 'tcx> {\n-    output: &'a mut FxHashSet<Name>,\n+    output: &'a mut FxHashSet<Symbol>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n "}, {"sha": "2fd080e9ef0f848b67f6e00427f5149e83cee0d9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -1069,7 +1069,7 @@ pub fn is_allowed(cx: &LateContext<'_, '_>, lint: &'static Lint, id: HirId) -> b\n     cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n }\n \n-pub fn get_arg_name(pat: &Pat<'_>) -> Option<ast::Name> {\n+pub fn get_arg_name(pat: &Pat<'_>) -> Option<Name> {\n     match pat.kind {\n         PatKind::Binding(.., ident, None) => Some(ident.name),\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),"}, {"sha": "fb6bd5e81585952fc3cce822970710686566cf8a", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -1,10 +1,9 @@\n use crate::utils::{get_pat_name, match_var, snippet};\n-use rustc_ast::ast::Name;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, BodyId, Expr, ExprKind, Param};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-use rustc_span::source_map::Span;\n+use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n pub fn get_spans(\n@@ -25,7 +24,7 @@ pub fn get_spans(\n \n fn extract_clone_suggestions<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    name: Name,\n+    name: Symbol,\n     replace: &[(&'static str, &'static str)],\n     body: &'tcx Body<'_>,\n ) -> Option<Vec<(Span, Cow<'static, str>)>> {\n@@ -46,7 +45,7 @@ fn extract_clone_suggestions<'a, 'tcx>(\n \n struct PtrCloneVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    name: Name,\n+    name: Symbol,\n     replace: &'a [(&'static str, &'static str)],\n     spans: Vec<(Span, Cow<'static, str>)>,\n     abort: bool,\n@@ -83,6 +82,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n     }\n }\n \n-fn get_binding_name(arg: &Param<'_>) -> Option<Name> {\n+fn get_binding_name(arg: &Param<'_>) -> Option<Symbol> {\n     get_pat_name(&arg.pat)\n }"}, {"sha": "e85356779877cbfdb62abae5e5cb71929264a706", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c84e50772e1ebdd5ace0f4211d050e193e1e90/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=31c84e50772e1ebdd5ace0f4211d050e193e1e90", "patch": "@@ -1,5 +1,4 @@\n use crate::utils::match_var;\n-use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -8,7 +7,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n@@ -78,7 +77,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n }\n \n pub struct UsedVisitor {\n-    pub var: ast::Name, // var to look for\n+    pub var: Symbol,    // var to look for\n     pub used: bool,     // has the var been used otherwise?\n }\n "}]}