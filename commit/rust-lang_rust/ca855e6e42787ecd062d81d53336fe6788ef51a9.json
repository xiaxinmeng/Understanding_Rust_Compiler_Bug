{"sha": "ca855e6e42787ecd062d81d53336fe6788ef51a9", "node_id": "C_kwDOAAsO6NoAKGNhODU1ZTZlNDI3ODdlY2QwNjJkODFkNTMzMzZmZTY3ODhlZjUxYTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T05:19:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T05:19:55Z"}, "message": "Auto merge of #106708 - JohnTitor:rollup-xcmg5yv, r=JohnTitor\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #105194 (Add comment to cleanup_kinds)\n - #106521 (remove E0280)\n - #106628 (Remove unneeded ItemId::Primitive variant)\n - #106635 (std sync tests: better type name, clarifying comment)\n - #106642 (Add test for #106062)\n - #106645 ([RFC 2397] Initial implementation)\n - #106653 (Fix help docs for -Zallow-features)\n - #106657 (Remove myself from rust-lang/rust reviewers)\n - #106662 (specialize impl of `ToString` on `bool`)\n - #106669 (create helper function for `rustc_lint_defs::Level` and remove it's duplicated code)\n - #106671 (Change flags with a fixed default value from Option<bool> to bool)\n - #106689 (Fix invalid files array re-creation in rustdoc-gui tester)\n - #106690 (Fix scrolling for item declaration block)\n - #106698 (Add compiler-errors to some trait system notification groups)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "15df3ac5fd47f5122bdbea20f4ed7d31ed0bd920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15df3ac5fd47f5122bdbea20f4ed7d31ed0bd920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca855e6e42787ecd062d81d53336fe6788ef51a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca855e6e42787ecd062d81d53336fe6788ef51a9", "html_url": "https://github.com/rust-lang/rust/commit/ca855e6e42787ecd062d81d53336fe6788ef51a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca855e6e42787ecd062d81d53336fe6788ef51a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7ea0d11b07d84cfbd18feac0ed59e6d1da87ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7ea0d11b07d84cfbd18feac0ed59e6d1da87ab", "html_url": "https://github.com/rust-lang/rust/commit/bf7ea0d11b07d84cfbd18feac0ed59e6d1da87ab"}, {"sha": "a80498091307d8ed43f168579f1ae6aa8692bc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80498091307d8ed43f168579f1ae6aa8692bc86", "html_url": "https://github.com/rust-lang/rust/commit/a80498091307d8ed43f168579f1ae6aa8692bc86"}], "stats": {"total": 589, "additions": 455, "deletions": 134}, "files": [{"sha": "dd1ac2c74aed4fe2d628ffc17958f407a3a0a461", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -261,6 +261,9 @@ impl CleanupKind {\n     }\n }\n \n+/// MSVC requires unwinding code to be split to a tree of *funclets*, where each funclet can only\n+/// branch to itself or to its parent. Luckily, the code we generates matches this pattern.\n+/// Recover that structure in an analyze pass.\n pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n     fn discover_masters<'tcx>(\n         result: &mut IndexVec<mir::BasicBlock, CleanupKind>,"}, {"sha": "a132a8146e9bd9a13de3b9b26a2b97ffc16e0a29", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -574,7 +574,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0274, // on_unimplemented #2\n //  E0278, // requirement is not satisfied\n //  E0279,\n-    E0280, // requirement is not satisfied\n+//  E0280, // changed to ICE\n //  E0285, // overflow evaluation builtin bounds\n //  E0296, // replaced with a generic attribute input check\n //  E0298, // cannot compare constants"}, {"sha": "dad5e98aac021b250e9ee1c48f32d937666a9e54", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -179,16 +179,7 @@ impl IntoDiagnosticArg for type_ir::FloatTy {\n \n impl IntoDiagnosticArg for Level {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n-            Level::Allow => \"-A\",\n-            Level::Warn => \"-W\",\n-            Level::ForceWarn(_) => \"--force-warn\",\n-            Level::Deny => \"-D\",\n-            Level::Forbid => \"-F\",\n-            Level::Expect(_) => {\n-                unreachable!(\"lints with the level of `expect` should not run this code\");\n-            }\n-        }))\n+        DiagnosticArgValue::Str(Cow::Borrowed(self.to_cmd_flag()))\n     }\n }\n "}, {"sha": "691c0955cad7d056f7ed0ef9c18c0c50f04aabf8", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -374,6 +374,8 @@ declare_features! (\n     (active, deprecated_safe, \"1.61.0\", Some(94978), None),\n     /// Allows having using `suggestion` in the `#[deprecated]` attribute.\n     (active, deprecated_suggestion, \"1.61.0\", Some(94785), None),\n+    /// Controls errors in trait implementations.\n+    (active, do_not_recommend, \"1.67.0\", Some(51992), None),\n     /// Tells rustdoc to automatically generate `#[doc(cfg(...))]`.\n     (active, doc_auto_cfg, \"1.58.0\", Some(43781), None),\n     /// Allows `#[doc(cfg(...))]`."}, {"sha": "af56a0b245987059426e27e8919856d7b2e36563", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -487,6 +487,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         experimental!(collapse_debuginfo)\n     ),\n \n+    // RFC 2397\n+    gated!(do_not_recommend, Normal, template!(Word), WarnFollowing, experimental!(do_not_recommend)),\n+\n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // =========================================================================="}, {"sha": "a3b9891ee64e90a5f6c7f323a2d172b6c2b6c403", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -715,7 +715,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(asm_comments, true);\n     tracked!(assume_incomplete_release, true);\n     tracked!(binary_dep_depinfo, true);\n-    tracked!(box_noalias, Some(false));\n+    tracked!(box_noalias, false);\n     tracked!(\n         branch_protection,\n         Some(BranchProtection {\n@@ -754,7 +754,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(mir_enable_passes, vec![(\"DestProp\".to_string(), false)]);\n     tracked!(mir_opt_level, Some(4));\n     tracked!(move_size_limit, Some(4096));\n-    tracked!(mutable_noalias, Some(true));\n+    tracked!(mutable_noalias, false);\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_jump_tables, true);\n     tracked!(no_link, true);"}, {"sha": "f4b4c5168bfd6c392b2c6c0b4cf3f53fcf2e9d09", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -253,6 +253,19 @@ impl Level {\n         }\n     }\n \n+    pub fn to_cmd_flag(self) -> &'static str {\n+        match self {\n+            Level::Warn => \"-W\",\n+            Level::Deny => \"-D\",\n+            Level::Forbid => \"-F\",\n+            Level::Allow => \"-A\",\n+            Level::ForceWarn(_) => \"--force-warn\",\n+            Level::Expect(_) => {\n+                unreachable!(\"the expect level does not have a commandline flag\")\n+            }\n+        }\n+    }\n+\n     pub fn is_error(self) -> bool {\n         match self {\n             Level::Allow | Level::Expect(_) | Level::Warn | Level::ForceWarn(_) => false,"}, {"sha": "c61de97d53271320e7cbf5e138a3b284413626ef", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -234,16 +234,7 @@ pub fn explain_lint_level_source(\n             err.note_once(&format!(\"`#[{}({})]` on by default\", level.as_str(), name));\n         }\n         LintLevelSource::CommandLine(lint_flag_val, orig_level) => {\n-            let flag = match orig_level {\n-                Level::Warn => \"-W\",\n-                Level::Deny => \"-D\",\n-                Level::Forbid => \"-F\",\n-                Level::Allow => \"-A\",\n-                Level::ForceWarn(_) => \"--force-warn\",\n-                Level::Expect(_) => {\n-                    unreachable!(\"the expect level does not have a commandline flag\")\n-                }\n-            };\n+            let flag = orig_level.to_cmd_flag();\n             let hyphen_case_lint_name = name.replace('_', \"-\");\n             if lint_flag_val.as_str() == name {\n                 err.note_once(&format!("}, {"sha": "4c2360676881938dacba9c2388f17acf68259389", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -1241,7 +1241,7 @@ options! {\n \n     // tidy-alphabetical-start\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n-        \"only allow the listed language features to be enabled in code (space separated)\"),\n+        \"only allow the listed language features to be enabled in code (comma separated)\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata (default: no)\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n@@ -1255,7 +1255,7 @@ options! {\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n         \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n         (default: no)\"),\n-    box_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+    box_noalias: bool = (true, parse_bool, [TRACKED],\n         \"emit noalias metadata for box (default: yes)\"),\n     branch_protection: Option<BranchProtection> = (None, parse_branch_protection, [TRACKED],\n         \"set options for branch target identification and pointer authentication on AArch64\"),\n@@ -1437,7 +1437,7 @@ options! {\n         \"use line numbers relative to the function in mir pretty printing\"),\n     move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"the size at which the `large_assignments` lint starts to be emitted\"),\n-    mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+    mutable_noalias: bool = (true, parse_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: yes)\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],\n         \"dump facts from NLL analysis into side files (default: no)\"),"}, {"sha": "fbb12701d96ab05b7a9d8e22b8ef873de6ffe4d5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -613,6 +613,7 @@ symbols! {\n         dispatch_from_dyn,\n         div,\n         div_assign,\n+        do_not_recommend,\n         doc,\n         doc_alias,\n         doc_auto_cfg,"}, {"sha": "5f06c4d82828ec8e392b23e177b11ec38fa7c88b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -1102,15 +1102,19 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-                    | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..)) => {\n-                        let predicate = self.resolve_vars_if_possible(obligation.predicate);\n-                        struct_span_err!(\n-                            self.tcx.sess,\n+                        span_bug!(\n                             span,\n-                            E0280,\n-                            \"the requirement `{}` is not satisfied\",\n-                            predicate\n+                            \"outlives clauses should not error outside borrowck. obligation: `{:?}`\",\n+                            obligation\n+                        )\n+                    }\n+\n+                    ty::PredicateKind::Clause(ty::Clause::Projection(..)) => {\n+                        span_bug!(\n+                            span,\n+                            \"projection clauses should be implied from elsewhere. obligation: `{:?}`\",\n+                            obligation\n                         )\n                     }\n "}, {"sha": "d1197774fe96cfedb369061d15c5053ffbbff23e", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -254,12 +254,12 @@ fn adjust_for_rust_scalar<'tcx>(\n             // The aliasing rules for `Box<T>` are still not decided, but currently we emit\n             // `noalias` for it. This can be turned off using an unstable flag.\n             // See https://github.com/rust-lang/unsafe-code-guidelines/issues/326\n-            let noalias_for_box = cx.tcx.sess.opts.unstable_opts.box_noalias.unwrap_or(true);\n+            let noalias_for_box = cx.tcx.sess.opts.unstable_opts.box_noalias;\n \n             // LLVM prior to version 12 had known miscompiles in the presence of noalias attributes\n             // (see #54878), so it was conditionally disabled, but we don't support earlier\n             // versions at all anymore. We still support turning it off using -Zmutable-noalias.\n-            let noalias_mut_ref = cx.tcx.sess.opts.unstable_opts.mutable_noalias.unwrap_or(true);\n+            let noalias_mut_ref = cx.tcx.sess.opts.unstable_opts.mutable_noalias;\n \n             // `&mut` pointer parameters never alias other parameters,\n             // or mutable global data"}, {"sha": "3118c7189a5ed2ec68bbc502be2ed9e97783d08b", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -2548,6 +2548,15 @@ impl ToString for char {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"bool_to_string_specialization\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl ToString for bool {\n+    #[inline]\n+    fn to_string(&self) -> String {\n+        String::from(if *self { \"true\" } else { \"false\" })\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"u8_to_string_specialization\", since = \"1.54.0\")]\n impl ToString for u8 {"}, {"sha": "1786a3c09ffb547e149a86a079d0d2bdb78576a3", "filename": "library/std/src/sync/mutex/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -181,7 +181,7 @@ fn test_mutex_arc_poison() {\n     let arc2 = arc.clone();\n     let _ = thread::spawn(move || {\n         let lock = arc2.lock().unwrap();\n-        assert_eq!(*lock, 2);\n+        assert_eq!(*lock, 2); // deliberate assertion failure to poison the mutex\n     })\n     .join();\n     assert!(arc.lock().is_err());"}, {"sha": "964c7fc5b0ca25cabed0fedbbd124283a42258a2", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -23,11 +23,11 @@ impl Signal {\n     }\n }\n \n-struct Foo(Signal);\n+struct NotifyOnDrop(Signal);\n \n-impl Drop for Foo {\n+impl Drop for NotifyOnDrop {\n     fn drop(&mut self) {\n-        let Foo(ref f) = *self;\n+        let NotifyOnDrop(ref f) = *self;\n         f.notify();\n     }\n }\n@@ -82,18 +82,18 @@ fn states() {\n \n #[test]\n fn smoke_dtor() {\n-    thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));\n+    thread_local!(static FOO: UnsafeCell<Option<NotifyOnDrop>> = UnsafeCell::new(None));\n     run(&FOO);\n-    thread_local!(static FOO2: UnsafeCell<Option<Foo>> = const { UnsafeCell::new(None) });\n+    thread_local!(static FOO2: UnsafeCell<Option<NotifyOnDrop>> = const { UnsafeCell::new(None) });\n     run(&FOO2);\n \n-    fn run(key: &'static LocalKey<UnsafeCell<Option<Foo>>>) {\n+    fn run(key: &'static LocalKey<UnsafeCell<Option<NotifyOnDrop>>>) {\n         let signal = Signal::default();\n         let signal2 = signal.clone();\n         let t = thread::spawn(move || unsafe {\n             let mut signal = Some(signal2);\n             key.with(|f| {\n-                *f.get() = Some(Foo(signal.take().unwrap()));\n+                *f.get() = Some(NotifyOnDrop(signal.take().unwrap()));\n             });\n         });\n         signal.wait();\n@@ -187,13 +187,13 @@ fn self_referential() {\n fn dtors_in_dtors_in_dtors() {\n     struct S1(Signal);\n     thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));\n-    thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));\n+    thread_local!(static K2: UnsafeCell<Option<NotifyOnDrop>> = UnsafeCell::new(None));\n \n     impl Drop for S1 {\n         fn drop(&mut self) {\n             let S1(ref signal) = *self;\n             unsafe {\n-                let _ = K2.try_with(|s| *s.get() = Some(Foo(signal.clone())));\n+                let _ = K2.try_with(|s| *s.get() = Some(NotifyOnDrop(signal.clone())));\n             }\n         }\n     }\n@@ -211,13 +211,13 @@ fn dtors_in_dtors_in_dtors() {\n fn dtors_in_dtors_in_dtors_const_init() {\n     struct S1(Signal);\n     thread_local!(static K1: UnsafeCell<Option<S1>> = const { UnsafeCell::new(None) });\n-    thread_local!(static K2: UnsafeCell<Option<Foo>> = const { UnsafeCell::new(None) });\n+    thread_local!(static K2: UnsafeCell<Option<NotifyOnDrop>> = const { UnsafeCell::new(None) });\n \n     impl Drop for S1 {\n         fn drop(&mut self) {\n             let S1(ref signal) = *self;\n             unsafe {\n-                let _ = K2.try_with(|s| *s.get() = Some(Foo(signal.clone())));\n+                let _ = K2.try_with(|s| *s.get() = Some(NotifyOnDrop(signal.clone())));\n             }\n         }\n     }"}, {"sha": "aad24b4a074927c7d081e9d8fc738bab667d9689", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -600,7 +600,9 @@ fn build_module_items(\n                 items.push(clean::Item {\n                     name: None,\n                     attrs: Box::new(clean::Attributes::default()),\n-                    item_id: ItemId::Primitive(prim_ty, did.krate),\n+                    // We can use the item's `DefId` directly since the only information ever used\n+                    // from it is `DefId.krate`.\n+                    item_id: ItemId::DefId(did),\n                     kind: Box::new(clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,\n                         clean::ImportSource {"}, {"sha": "5c63efef717d13d2082838a8106c0fc8c6f1d904", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -62,8 +62,6 @@ pub(crate) enum ItemId {\n     Auto { trait_: DefId, for_: DefId },\n     /// Identifier that is used for blanket implementations.\n     Blanket { impl_id: DefId, for_: DefId },\n-    /// Identifier for primitive types.\n-    Primitive(PrimitiveType, CrateNum),\n }\n \n impl ItemId {\n@@ -73,7 +71,6 @@ impl ItemId {\n             ItemId::Auto { for_: id, .. }\n             | ItemId::Blanket { for_: id, .. }\n             | ItemId::DefId(id) => id.is_local(),\n-            ItemId::Primitive(_, krate) => krate == LOCAL_CRATE,\n         }\n     }\n \n@@ -98,7 +95,6 @@ impl ItemId {\n             ItemId::Auto { for_: id, .. }\n             | ItemId::Blanket { for_: id, .. }\n             | ItemId::DefId(id) => id.krate,\n-            ItemId::Primitive(_, krate) => krate,\n         }\n     }\n }\n@@ -707,15 +703,13 @@ impl Item {\n         let def_id = match self.item_id {\n             // Anything but DefId *shouldn't* matter, but return a reasonable value anyway.\n             ItemId::Auto { .. } | ItemId::Blanket { .. } => return None,\n-            // Primitives and Keywords are written in the source code as private modules.\n-            // The modules need to be private so that nobody actually uses them, but the\n-            // keywords and primitives that they are documenting are public.\n-            ItemId::Primitive(..) => return Some(Visibility::Public),\n             ItemId::DefId(def_id) => def_id,\n         };\n \n         match *self.kind {\n-            // Explication on `ItemId::Primitive` just above.\n+            // Primitives and Keywords are written in the source code as private modules.\n+            // The modules need to be private so that nobody actually uses them, but the\n+            // keywords and primitives that they are documenting are public.\n             ItemKind::KeywordItem | ItemKind::PrimitiveItem(_) => return Some(Visibility::Public),\n             // Variant fields inherit their enum's visibility.\n             StructFieldItem(..) if is_field_vis_inherited(tcx, def_id) => {"}, {"sha": "e607a16ad5457016d7f698c7e382932154c7f70d", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -53,12 +53,6 @@ impl Impl {\n             ItemId::Blanket { impl_id, .. } => impl_id,\n             ItemId::Auto { trait_, .. } => trait_,\n             ItemId::DefId(def_id) => def_id,\n-            ItemId::Primitive(_, _) => {\n-                panic!(\n-                    \"Unexpected ItemId::Primitive in expect_def_id: {:?}\",\n-                    self.impl_item.item_id\n-                )\n-            }\n         }\n     }\n "}, {"sha": "bc74d9cf969741eb56e3ba7cb91c007ab2900ea3", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 55, "deletions": 20, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -3,7 +3,6 @@ use std::collections::BTreeMap;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n@@ -24,6 +23,7 @@ pub(crate) fn build_index<'tcx>(\n     tcx: TyCtxt<'tcx>,\n ) -> String {\n     let mut itemid_to_pathid = FxHashMap::default();\n+    let mut primitives = FxHashMap::default();\n     let mut crate_paths = vec![];\n \n     // Attach all orphan items to the type's definition if the type\n@@ -78,50 +78,83 @@ pub(crate) fn build_index<'tcx>(\n     // First, on function signatures\n     let mut search_index = std::mem::replace(&mut cache.search_index, Vec::new());\n     for item in search_index.iter_mut() {\n+        fn insert_into_map<F: std::hash::Hash + Eq>(\n+            ty: &mut RenderType,\n+            map: &mut FxHashMap<F, usize>,\n+            itemid: F,\n+            lastpathid: &mut usize,\n+            crate_paths: &mut Vec<(ItemType, Symbol)>,\n+            item_type: ItemType,\n+            path: Symbol,\n+        ) {\n+            match map.entry(itemid) {\n+                Entry::Occupied(entry) => ty.id = Some(RenderTypeId::Index(*entry.get())),\n+                Entry::Vacant(entry) => {\n+                    let pathid = *lastpathid;\n+                    entry.insert(pathid);\n+                    *lastpathid += 1;\n+                    crate_paths.push((item_type, path));\n+                    ty.id = Some(RenderTypeId::Index(pathid));\n+                }\n+            }\n+        }\n+\n         fn convert_render_type(\n             ty: &mut RenderType,\n             cache: &mut Cache,\n             itemid_to_pathid: &mut FxHashMap<ItemId, usize>,\n+            primitives: &mut FxHashMap<Symbol, usize>,\n             lastpathid: &mut usize,\n             crate_paths: &mut Vec<(ItemType, Symbol)>,\n         ) {\n             if let Some(generics) = &mut ty.generics {\n                 for item in generics {\n-                    convert_render_type(item, cache, itemid_to_pathid, lastpathid, crate_paths);\n+                    convert_render_type(\n+                        item,\n+                        cache,\n+                        itemid_to_pathid,\n+                        primitives,\n+                        lastpathid,\n+                        crate_paths,\n+                    );\n                 }\n             }\n             let Cache { ref paths, ref external_paths, .. } = *cache;\n             let Some(id) = ty.id.clone() else {\n                 assert!(ty.generics.is_some());\n                 return;\n             };\n-            let (itemid, path, item_type) = match id {\n+            match id {\n                 RenderTypeId::DefId(defid) => {\n                     if let Some(&(ref fqp, item_type)) =\n                         paths.get(&defid).or_else(|| external_paths.get(&defid))\n                     {\n-                        (ItemId::DefId(defid), *fqp.last().unwrap(), item_type)\n+                        insert_into_map(\n+                            ty,\n+                            itemid_to_pathid,\n+                            ItemId::DefId(defid),\n+                            lastpathid,\n+                            crate_paths,\n+                            item_type,\n+                            *fqp.last().unwrap(),\n+                        );\n                     } else {\n                         ty.id = None;\n-                        return;\n                     }\n                 }\n-                RenderTypeId::Primitive(primitive) => (\n-                    ItemId::Primitive(primitive, LOCAL_CRATE),\n-                    primitive.as_sym(),\n-                    ItemType::Primitive,\n-                ),\n-                RenderTypeId::Index(_) => return,\n-            };\n-            match itemid_to_pathid.entry(itemid) {\n-                Entry::Occupied(entry) => ty.id = Some(RenderTypeId::Index(*entry.get())),\n-                Entry::Vacant(entry) => {\n-                    let pathid = *lastpathid;\n-                    entry.insert(pathid);\n-                    *lastpathid += 1;\n-                    crate_paths.push((item_type, path));\n-                    ty.id = Some(RenderTypeId::Index(pathid));\n+                RenderTypeId::Primitive(primitive) => {\n+                    let sym = primitive.as_sym();\n+                    insert_into_map(\n+                        ty,\n+                        primitives,\n+                        sym,\n+                        lastpathid,\n+                        crate_paths,\n+                        ItemType::Primitive,\n+                        sym,\n+                    );\n                 }\n+                RenderTypeId::Index(_) => {}\n             }\n         }\n         if let Some(search_type) = &mut item.search_type {\n@@ -130,6 +163,7 @@ pub(crate) fn build_index<'tcx>(\n                     item,\n                     cache,\n                     &mut itemid_to_pathid,\n+                    &mut primitives,\n                     &mut lastpathid,\n                     &mut crate_paths,\n                 );\n@@ -139,6 +173,7 @@ pub(crate) fn build_index<'tcx>(\n                     item,\n                     cache,\n                     &mut itemid_to_pathid,\n+                    &mut primitives,\n                     &mut lastpathid,\n                     &mut crate_paths,\n                 );"}, {"sha": "91bc63f83b624bf5c0935faa4af7dedaa3d3c657", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -338,6 +338,10 @@ pre {\n .item-decl pre {\n \toverflow-x: auto;\n }\n+/* This rule allows to have scrolling on the X axis. */\n+.item-decl .type-contents-toggle {\n+\tcontain: initial;\n+}\n \n .source .content pre {\n \tpadding: 20px;"}, {"sha": "bd95ec18650b3c399c1884c8fd759dc7988cbb18", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -252,7 +252,6 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n         ItemId::Auto { for_, trait_ } => {\n             Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n-        ItemId::Primitive(_, _) => unreachable!(),\n     }\n }\n "}, {"sha": "34e67d9d25438ce8105eea37111308f1bebfa6f6", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -183,3 +183,161 @@ impl ItemInfoAlignmentTest {\n     #[deprecated]\n     pub fn bar() {}\n }\n+\n+pub mod scroll_traits {\n+    use std::iter::*;\n+\n+    /// Shamelessly (partially) copied from `std::iter::Iterator`.\n+    /// It allows us to check that the scroll is working as expected on \"hidden\" items.\n+    pub trait Iterator {\n+        type Item;\n+\n+        fn next(&mut self) -> Option<Self::Item>;\n+        fn size_hint(&self) -> (usize, Option<usize>);\n+        fn count(self) -> usize\n+        where\n+            Self: Sized;\n+        fn last(self) -> Option<Self::Item>\n+        where\n+            Self: Sized;\n+        fn advance_by(&mut self, n: usize) -> Result<(), usize>;\n+        fn nth(&mut self, n: usize) -> Option<Self::Item>;\n+        fn step_by(self, step: usize) -> StepBy<Self>\n+        where\n+            Self: Sized;\n+        fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>\n+        where\n+            Self: Sized,\n+            U: IntoIterator<Item = Self::Item>;\n+        fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n+        where\n+            Self: Sized,\n+            U: IntoIterator;\n+        fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n+        where\n+            Self: Sized,\n+            Self::Item: Clone;\n+        fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>\n+        where\n+            Self: Sized,\n+            G: FnMut() -> Self::Item;\n+        fn map<B, F>(self, f: F) -> Map<Self, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> B;\n+        fn for_each<F>(self, f: F)\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item);\n+        fn filter<P>(self, predicate: P) -> Filter<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> Option<B>;\n+        fn enumerate(self) -> Enumerate<Self>\n+        where\n+            Self: Sized;\n+        fn peekable(self) -> Peekable<Self>\n+        where\n+            Self: Sized;\n+        fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(Self::Item) -> Option<B>;\n+        fn skip(self, n: usize) -> Skip<Self>\n+        where\n+            Self: Sized;\n+        fn take(self, n: usize) -> Take<Self>\n+        where\n+            Self: Sized;\n+        fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(&mut St, Self::Item) -> Option<B>;\n+        fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n+        where\n+            Self: Sized,\n+            U: IntoIterator,\n+            F: FnMut(Self::Item) -> U;\n+        fn flatten(self) -> Flatten<Self>\n+        where\n+            Self: Sized,\n+            Self::Item: IntoIterator;\n+        fn fuse(self) -> Fuse<Self>\n+        where\n+            Self: Sized;\n+        fn inspect<F>(self, f: F) -> Inspect<Self, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(&Self::Item);\n+        fn by_ref(&mut self) -> &mut Self\n+        where\n+            Self: Sized;\n+        fn collect<B: FromIterator<Self::Item>>(self) -> B\n+        where\n+            Self: Sized;\n+        fn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n+        where\n+            Self: Sized;\n+        fn partition<B, F>(self, f: F) -> (B, B)\n+        where\n+            Self: Sized,\n+            B: Default + Extend<Self::Item>,\n+            F: FnMut(&Self::Item) -> bool;\n+        fn partition_in_place<'a, T: 'a, P>(mut self, predicate: P) -> usize\n+        where\n+            Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n+            P: FnMut(&T) -> bool;\n+        fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n+        where\n+            Self: Sized,\n+            P: FnMut(Self::Item) -> bool;\n+        fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+        where\n+            Self: Sized,\n+            F: FnMut(B, Self::Item) -> B;\n+        fn reduce<F>(mut self, f: F) -> Option<Self::Item>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item, Self::Item) -> Self::Item;\n+        fn all<F>(&mut self, f: F) -> bool\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> bool;\n+        fn any<F>(&mut self, f: F) -> bool\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> bool;\n+        fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn find_map<B, F>(&mut self, f: F) -> Option<B>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> Option<B>;\n+        fn position<P>(&mut self, predicate: P) -> Option<usize>\n+        where\n+            Self: Sized,\n+            P: FnMut(Self::Item) -> bool;\n+        /// We will scroll to \"string\" to ensure it scrolls as expected.\n+        fn this_is_a_method_with_a_long_name_returning_something() -> String;\n+    }\n+\n+    /// This one doesn't have hidden items (because there are too many) so we can also confirm that it\n+    /// scrolls as expected.\n+    pub trait TraitWithLongItemsName {\n+        fn this_is_a_method_with_a_long_name_returning_something() -> String;\n+    }\n+}"}, {"sha": "644429c014c1801c9dedefe6c35ae6a3eedded92", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -59,3 +59,18 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/struct.SuperIncrediblyLongLongLon\n compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))\n goto: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))\n+\n+// Now we will check that the scrolling is working.\n+// First on an item with \"hidden methods\".\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.Iterator.html\"\n+\n+click: \".item-decl .type-contents-toggle\"\n+assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='item-decl']//details/a[text()='String']\"\n+assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+\n+// Then on an item without \"hidden methods\".\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.TraitWithLongItemsName.html\"\n+assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='item-decl']//code/a[text()='String']\"\n+assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})"}, {"sha": "43f30f3d6e80088c23f0c87b125dbad4c8a4dce4", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -1,4 +1,4 @@\n-    -Z                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -Z                          allow-features=val -- only allow the listed language features to be enabled in code (comma separated)\n     -Z                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n     -Z                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n     -Z                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`."}, {"sha": "86ce42631b4324110414f06909e70cf62145d9a8", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -1,6 +1,13 @@\n // check-fail\n-// known-bug: unknown\n-// compile-flags: -Z trait-solver=chalk --edition=2021\n+// known-bug\n+// unset-rustc-env:RUST_BACKTRACE\n+// compile-flags:-Z trait-solver=chalk --edition=2021\n+// error-pattern:stack backtrace:\n+// failure-status:101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \"  .*\\n\" -> \"\"\n+// normalize-stderr-test \"DefId([^)]*)\" -> \"...\"\n \n fn main() -> () {}\n "}, {"sha": "7e2466dece43899fefba5b1f7384bd09ffeb11bb", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -1,48 +1,40 @@\n-error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-  --> $DIR/async.rs:7:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________-\n-LL | |     x\n-LL | | }\n-   | | ^\n-   | | |\n-   | |_`[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-   |   required by a bound introduced by this call\n-   |\n-   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n-   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n-error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output` cannot be known at compilation time\n-  --> $DIR/async.rs:7:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________^\n-LL | |     x\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output`\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n-error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-  --> $DIR/async.rs:7:25\n-   |\n+error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n+LL |LL | |LL | | }\n+\n+\n+error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:14:29: 16:2] as Future>::Output` cannot be known at compilation time\n+LL |LL | |LL | | }\n+\n+\n+error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^ `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n-   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n-\n-error[E0280]: the requirement `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output == u32` is not satisfied\n-  --> $DIR/async.rs:7:25\n-   |\n+\n+error: internal compiler error: compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:1114:25: projection clauses should be implied from elsewhere. obligation: `Obligation(predicate=Binder(ProjectionPredicate(AliasTy { substs: [[async fn body@$DIR/async.rs:14:29: 16:2]], def_id: ...), _use_mk_alias_ty_instead: () }, Term::Ty(u32)), []), depth=0)`\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^\n \n+\n+stack backtrace:\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+query stack during panic:\n+#0 [typeck] type-checking `foo`\n+#1 [thir_body] building THIR for `foo`\n+#2 [mir_built] building MIR for `foo`\n+#3 [unsafety_check_result] unsafety-checking `foo`\n+#4 [mir_const] preparing `foo` for borrow checking\n+#5 [mir_promoted] processing MIR for `foo`\n+#6 [mir_borrowck] borrow-checking `foo`\n+#7 [type_of] computing type of `foo::{opaque#0}`\n+#8 [check_mod_item_types] checking item types in top-level module\n+#9 [analysis] running analysis passes on this crate\n+end of query stack\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "621ba566ee38a5facf6c858d9c1f5b1411d513e8", "filename": "src/test/ui/mir/issue-106062.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fmir%2Fissue-106062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fmir%2Fissue-106062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-106062.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -0,0 +1,26 @@\n+// edition:2018\n+\n+use std::{future::Future, marker::PhantomData};\n+\n+fn spawn<T>(future: T) -> PhantomData<T::Output>\n+where\n+    T: Future,\n+{\n+    loop {}\n+}\n+\n+#[derive(Debug)]\n+struct IncomingServer {}\n+impl IncomingServer {\n+    async fn connection_handler(handler: impl Sized) -> Result<Ok, std::io::Error> {\n+        //~^ ERROR expected type, found variant `Ok` [E0573]\n+        loop {}\n+    }\n+    async fn spawn(&self, request_handler: impl Sized) {\n+        async move {\n+            spawn(Self::connection_handler(&request_handler));\n+        };\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2f6524d03e00d734416360a12faf566b898937d9", "filename": "src/test/ui/mir/issue-106062.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fmir%2Fissue-106062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Fmir%2Fissue-106062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-106062.stderr?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -0,0 +1,16 @@\n+error[E0573]: expected type, found variant `Ok`\n+  --> $DIR/issue-106062.rs:15:64\n+   |\n+LL |     async fn connection_handler(handler: impl Sized) -> Result<Ok, std::io::Error> {\n+   |                                                                ^^ not a type\n+   |\n+help: try using the variant's enum\n+   |\n+LL |     async fn connection_handler(handler: impl Sized) -> Result<core::result::Result, std::io::Error> {\n+   |                                                                ~~~~~~~~~~~~~~~~~~~~\n+LL |     async fn connection_handler(handler: impl Sized) -> Result<std::result::Result, std::io::Error> {\n+   |                                                                ~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}, {"sha": "5053c115b45377e7ed748399508f3d6f3dab54e9", "filename": "src/test/ui/rfc-2397-do-not-recommend/feature-gate-do_not_recommend.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -0,0 +1,21 @@\n+#![feature(do_not_recommend)]\n+\n+pub trait Foo {\n+}\n+\n+impl Foo for i32 {\n+}\n+\n+pub trait Bar {\n+}\n+\n+#[do_not_recommend]\n+impl<T: Foo> Bar for T {\n+}\n+\n+fn stuff<T: Bar>(_: T) {}\n+\n+fn main() {\n+    stuff(1u8);\n+    //~^ the trait bound `u8: Foo` is not satisfied\n+}"}, {"sha": "2749add82ac0ce36989b27949c6d13c0d7f212d7", "filename": "src/test/ui/rfc-2397-do-not-recommend/feature-gate-do_not_recommend.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.stderr?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: the trait bound `u8: Foo` is not satisfied\n+  --> $DIR/feature-gate-do_not_recommend.rs:19:11\n+   |\n+LL |     stuff(1u8);\n+   |     ----- ^^^ the trait `Foo` is not implemented for `u8`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Foo` is implemented for `i32`\n+note: required for `u8` to implement `Bar`\n+  --> $DIR/feature-gate-do_not_recommend.rs:13:14\n+   |\n+LL | impl<T: Foo> Bar for T {\n+   |              ^^^     ^\n+note: required by a bound in `stuff`\n+  --> $DIR/feature-gate-do_not_recommend.rs:16:13\n+   |\n+LL | fn stuff<T: Bar>(_: T) {}\n+   |             ^^^ required by this bound in `stuff`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b816c4a19da1dce877332070843e4a5c9cf637c3", "filename": "src/test/ui/rfc-2397-do-not-recommend/unstable-feature.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.rs?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -0,0 +1,7 @@\n+#[do_not_recommend]\n+//~^ ERROR the `#[do_not_recommend]` attribute is an experimental feature\n+trait Foo {\n+}\n+\n+fn main() {\n+}"}, {"sha": "425d7e4bca0bd138370c46533f4b29fcac894968", "filename": "src/test/ui/rfc-2397-do-not-recommend/unstable-feature.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.stderr?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[do_not_recommend]` attribute is an experimental feature\n+  --> $DIR/unstable-feature.rs:1:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51992 <https://github.com/rust-lang/rust/issues/51992> for more information\n+   = help: add `#![feature(do_not_recommend)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "554b2f81fa3bbfa5a748edc7860c98d225fb61a9", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -278,7 +278,8 @@ async function main(argv) {\n         await runTests(opts, framework_options, files, new_results, status_bar, it + 1 >= NB_RETRY);\n         Array.prototype.push.apply(results.successful, new_results.successful);\n         // We generate the new list of files with the previously failing tests.\n-        files = Array.prototype.concat(new_results.failed, new_results.errored);\n+        files = Array.prototype.concat(new_results.failed, new_results.errored).map(\n+            f => f['file_name']);\n         if (files.length > originalFilesLen / 2) {\n             // If we have too many failing tests, it's very likely not flaky failures anymore so\n             // no need to retry."}, {"sha": "bee0371d36ef31577f6ba77b9d33ac4c44077e0a", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca855e6e42787ecd062d81d53336fe6788ef51a9/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca855e6e42787ecd062d81d53336fe6788ef51a9/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=ca855e6e42787ecd062d81d53336fe6788ef51a9", "patch": "@@ -344,14 +344,14 @@ cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/solve/\"]\n message = \"Some changes occurred to the core trait solver\"\n-cc = [\"@lcnr\"]\n+cc = [\"@lcnr\", \"@compiler-errors\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/traits/engine.rs\"]\n message = \"\"\"\n Some changes occurred in engine.rs, potentially modifying the public API \\\n of `ObligationCtxt`.\n \"\"\"\n-cc = [\"@lcnr\"]\n+cc = [\"@lcnr\", \"@compiler-errors\"]\n \n [mentions.\"compiler/rustc_error_codes/src/error_codes.rs\"]\n message = \"Some changes occurred in diagnostic error codes\"\n@@ -487,12 +487,10 @@ libs = [\n ]\n bootstrap = [\n     \"@Mark-Simulacrum\",\n-    \"@jyn514\",\n ]\n infra-ci = [\n     \"@Mark-Simulacrum\",\n     \"@pietroalbini\",\n-    \"@jyn514\",\n ]\n rustdoc = [\n     \"@jsha\","}]}