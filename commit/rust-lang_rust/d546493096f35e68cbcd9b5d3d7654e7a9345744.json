{"sha": "d546493096f35e68cbcd9b5d3d7654e7a9345744", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDY0OTMwOTZmMzVlNjhjYmNkOWI1ZDNkNzY1NGU3YTkzNDU3NDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-10T20:10:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-10T20:10:54Z"}, "message": "auto merge of #6380 : pcwalton/rust/core-text-ice, r=pcwalton", "tree": {"sha": "1b2818b15b2d6358faf62730b1711f2c35aacfe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2818b15b2d6358faf62730b1711f2c35aacfe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d546493096f35e68cbcd9b5d3d7654e7a9345744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d546493096f35e68cbcd9b5d3d7654e7a9345744", "html_url": "https://github.com/rust-lang/rust/commit/d546493096f35e68cbcd9b5d3d7654e7a9345744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d546493096f35e68cbcd9b5d3d7654e7a9345744/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dba9337a48e9cb50f4323a605960c3b31df1706b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dba9337a48e9cb50f4323a605960c3b31df1706b", "html_url": "https://github.com/rust-lang/rust/commit/dba9337a48e9cb50f4323a605960c3b31df1706b"}, {"sha": "923450d00c142f4f9baed042eedbe88e7004b661", "url": "https://api.github.com/repos/rust-lang/rust/commits/923450d00c142f4f9baed042eedbe88e7004b661", "html_url": "https://github.com/rust-lang/rust/commit/923450d00c142f4f9baed042eedbe88e7004b661"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "1b7cdf3ac8059aefd2d176f4e42e6cc88b83692d", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d546493096f35e68cbcd9b5d3d7654e7a9345744/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d546493096f35e68cbcd9b5d3d7654e7a9345744/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d546493096f35e68cbcd9b5d3d7654e7a9345744", "patch": "@@ -968,7 +968,10 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                 }\n \n                 fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n-                    -> ValueRef {\n+                           -> ValueRef {\n+                    // For external constants, we don't inline.\n+                    let extern_const_values =\n+                        &mut *bcx.ccx().extern_const_values;\n                     if did.crate == ast::local_crate {\n                         // The LLVM global has the type of its initializer,\n                         // which may not be equal to the enum's type for\n@@ -977,25 +980,24 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                                     base::get_item_val(bcx.ccx(), did.node),\n                                     T_ptr(type_of(bcx.ccx(), const_ty)))\n                     } else {\n-                        // For external constants, we don't inline.\n-                        match bcx.ccx().extern_const_values.find(&did) {\n-                            None => {\n-                                unsafe {\n-                                    let llty = type_of(bcx.ccx(), const_ty);\n-                                    let symbol = csearch::get_symbol(\n-                                        bcx.ccx().sess.cstore,\n-                                        did);\n-                                    let llval = llvm::LLVMAddGlobal(\n-                                        bcx.ccx().llmod,\n-                                        llty,\n-                                        transmute::<&u8,*i8>(&symbol[0]));\n-                                    bcx.ccx().extern_const_values.insert(\n-                                        did,\n-                                        llval);\n-                                    llval\n-                                }\n+                        match extern_const_values.find(&did) {\n+                            None => {}  // Continue.\n+                            Some(llval) => {\n+                                return *llval;\n                             }\n-                            Some(llval) => *llval\n+                        }\n+\n+                        unsafe {\n+                            let llty = type_of(bcx.ccx(), const_ty);\n+                            let symbol = csearch::get_symbol(\n+                                bcx.ccx().sess.cstore,\n+                                did);\n+                            let llval = llvm::LLVMAddGlobal(\n+                                bcx.ccx().llmod,\n+                                llty,\n+                                transmute::<&u8,*i8>(&symbol[0]));\n+                            extern_const_values.insert(did, llval);\n+                            llval\n                         }\n                     }\n                 }"}]}