{"sha": "71ed31f24054863b807f68f244c6828ce6d2e516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZWQzMWYyNDA1NDg2M2I4MDdmNjhmMjQ0YzY4MjhjZTZkMmU1MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-27T10:19:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-27T10:19:43Z"}, "message": "Auto merge of #47007 - eddyb:issue-46897, r=arielb1\n\nrustc: don't use union layouts for tagged union enums.\n\nFixes #46897, fixes #43517 (AFAICT from the testcases).\nThis PR doesn't add any testcases, we should try to at least get perf ones (cc @Mark-Simulacrum).\nI couldn't find an example in those issues where the choice of LLVM array vs struct (with N identical fields) for padding filler types is still needed, *on top of* this change, to prevent excessive LLVM sinking.\n\nr? @arielb1", "tree": {"sha": "398510c60a4095ce0f185401880fa51e9ae173f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/398510c60a4095ce0f185401880fa51e9ae173f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ed31f24054863b807f68f244c6828ce6d2e516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ed31f24054863b807f68f244c6828ce6d2e516", "html_url": "https://github.com/rust-lang/rust/commit/71ed31f24054863b807f68f244c6828ce6d2e516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ed31f24054863b807f68f244c6828ce6d2e516/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd27b2718438ceec6243869cde3edde7e5a904e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd27b2718438ceec6243869cde3edde7e5a904e", "html_url": "https://github.com/rust-lang/rust/commit/3fd27b2718438ceec6243869cde3edde7e5a904e"}, {"sha": "97228f5e7b0d6a0dc5c97fa73fa7ab096e4eb58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97228f5e7b0d6a0dc5c97fa73fa7ab096e4eb58d", "html_url": "https://github.com/rust-lang/rust/commit/97228f5e7b0d6a0dc5c97fa73fa7ab096e4eb58d"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "017b16e4126659dd2f4f7b8cfd1f2c2de07f57d0", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71ed31f24054863b807f68f244c6828ce6d2e516/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ed31f24054863b807f68f244c6828ce6d2e516/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=71ed31f24054863b807f68f244c6828ce6d2e516", "patch": "@@ -1655,10 +1655,10 @@ impl<'a, 'tcx> LayoutDetails {\n                         discr,\n                         variants\n                     },\n-                    // FIXME(eddyb): using `FieldPlacement::Arbitrary` here results\n-                    // in lost optimizations, specifically around allocations, see\n-                    // `test/codegen/{alloc-optimisation,vec-optimizes-away}.rs`.\n-                    fields: FieldPlacement::Union(1),\n+                    fields: FieldPlacement::Arbitrary {\n+                        offsets: vec![Size::from_bytes(0)],\n+                        memory_index: vec![0]\n+                    },\n                     abi,\n                     align,\n                     size"}, {"sha": "ab9f5dda3a1b729b0d986dcc7c5c26dfd0c3eefa", "filename": "src/test/codegen/align-struct.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ed31f24054863b807f68f244c6828ce6d2e516/src%2Ftest%2Fcodegen%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ed31f24054863b807f68f244c6828ce6d2e516/src%2Ftest%2Fcodegen%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-struct.rs?ref=71ed31f24054863b807f68f244c6828ce6d2e516", "patch": "@@ -32,13 +32,14 @@ pub enum Enum4 {\n     A(i32),\n     B(i32),\n }\n-// CHECK: %Enum4 = type { [2 x i32] }\n+// CHECK: %Enum4 = type { [0 x i32], i32, [1 x i32] }\n+// CHECK: %\"Enum4::A\" = type { [1 x i32], i32, [0 x i32] }\n \n pub enum Enum64 {\n     A(Align64),\n     B(i32),\n }\n-// CHECK: %Enum64 = type { [16 x i64] }\n+// CHECK: %Enum64 = type { [0 x i32], i32, [31 x i32] }\n // CHECK: %\"Enum64::A\" = type { [8 x i64], %Align64, [0 x i64] }\n \n // CHECK-LABEL: @align64"}]}