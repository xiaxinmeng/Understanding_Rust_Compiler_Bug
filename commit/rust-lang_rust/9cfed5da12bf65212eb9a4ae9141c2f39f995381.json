{"sha": "9cfed5da12bf65212eb9a4ae9141c2f39f995381", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZmVkNWRhMTJiZjY1MjEyZWI5YTRhZTkxNDFjMmYzOWY5OTUzODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-02T08:40:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-02T08:40:14Z"}, "message": "Auto merge of #58077 - Nemo157:generator-state-debug-info, r=Zoxc\n\nAdd debug-info to access variables from generator state", "tree": {"sha": "b9826ff6f20dc5d997320efbeb31895d74c84202", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9826ff6f20dc5d997320efbeb31895d74c84202"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cfed5da12bf65212eb9a4ae9141c2f39f995381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfed5da12bf65212eb9a4ae9141c2f39f995381", "html_url": "https://github.com/rust-lang/rust/commit/9cfed5da12bf65212eb9a4ae9141c2f39f995381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cfed5da12bf65212eb9a4ae9141c2f39f995381/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a21d82438b72a0394a670b6bfe95e3e62ee08802", "url": "https://api.github.com/repos/rust-lang/rust/commits/a21d82438b72a0394a670b6bfe95e3e62ee08802", "html_url": "https://github.com/rust-lang/rust/commit/a21d82438b72a0394a670b6bfe95e3e62ee08802"}, {"sha": "61097bce0dd4d394129ba15d2bbd41ec2dc526ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/61097bce0dd4d394129ba15d2bbd41ec2dc526ef", "html_url": "https://github.com/rust-lang/rust/commit/61097bce0dd4d394129ba15d2bbd41ec2dc526ef"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "870b97401f47a2af708f7d15fdac9ec764a85bee", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9cfed5da12bf65212eb9a4ae9141c2f39f995381/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cfed5da12bf65212eb9a4ae9141c2f39f995381/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=9cfed5da12bf65212eb9a4ae9141c2f39f995381", "patch": "@@ -659,15 +659,42 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             };\n             let upvar_tys = upvar_substs.upvar_tys(def_id, tcx);\n \n-            for (i, (decl, ty)) in mir.upvar_decls.iter().zip(upvar_tys).enumerate() {\n-                let byte_offset_of_var_in_env = closure_layout.fields.offset(i).bytes();\n+            let extra_locals = {\n+                let upvars = mir.upvar_decls\n+                    .iter()\n+                    .zip(upvar_tys)\n+                    .enumerate()\n+                    .map(|(i, (decl, ty))| (i, decl.debug_name, decl.by_ref, ty));\n+\n+                let generator_fields = mir.generator_layout.as_ref().map(|generator_layout| {\n+                    let (def_id, gen_substs) = match closure_layout.ty.sty {\n+                        ty::Generator(def_id, substs, _) => (def_id, substs),\n+                        _ => bug!(\"generator layout without generator substs\"),\n+                    };\n+                    let state_tys = gen_substs.state_tys(def_id, tcx);\n+\n+                    let upvar_count = mir.upvar_decls.len();\n+                    generator_layout.fields\n+                        .iter()\n+                        .zip(state_tys)\n+                        .enumerate()\n+                        .filter_map(move |(i, (decl, ty))| {\n+                            decl.name.map(|name| (i + upvar_count + 1, name, false, ty))\n+                        })\n+                }).into_iter().flatten();\n+\n+                upvars.chain(generator_fields)\n+            };\n+\n+            for (field, name, by_ref, ty) in extra_locals {\n+                let byte_offset_of_var_in_env = closure_layout.fields.offset(field).bytes();\n \n                 let ops = bx.debuginfo_upvar_decls_ops_sequence(byte_offset_of_var_in_env);\n \n                 // The environment and the capture can each be indirect.\n                 let mut ops = if env_ref { &ops[..] } else { &ops[1..] };\n \n-                let ty = if let (true, &ty::Ref(_, ty, _)) = (decl.by_ref, &ty.sty) {\n+                let ty = if let (true, &ty::Ref(_, ty, _)) = (by_ref, &ty.sty) {\n                     ty\n                 } else {\n                     ops = &ops[..ops.len() - 1];\n@@ -680,7 +707,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 };\n                 bx.declare_local(\n                     &fx.debug_context,\n-                    decl.debug_name,\n+                    name,\n                     ty,\n                     scope,\n                     variable_access,"}, {"sha": "35a67217f16718c45dd897c4b00ceaa647b8d5d8", "filename": "src/test/debuginfo/generators.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cfed5da12bf65212eb9a4ae9141c2f39f995381/src%2Ftest%2Fdebuginfo%2Fgenerators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cfed5da12bf65212eb9a4ae9141c2f39f995381/src%2Ftest%2Fdebuginfo%2Fgenerators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerators.rs?ref=9cfed5da12bf65212eb9a4ae9141c2f39f995381", "patch": "@@ -7,15 +7,20 @@\n // gdb-command:run\n // gdb-command:print a\n // gdb-check:$1 = 5\n+// gdb-command:print d\n+// gdb-check:$2 = 6\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print a\n // lldbg-check:(int) $0 = 5\n // lldbr-check:(int) a = 5\n+// lldb-command:print d\n+// lldbg-check:(int) $1 = 6\n+// lldbr-check:(int) d = 6\n \n-#![feature(omit_gdb_pretty_printer_section, generators, generator_trait, pin)]\n+#![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]\n \n use std::ops::Generator;\n@@ -24,9 +29,10 @@ use std::pin::Pin;\n fn main() {\n     let mut a = 5;\n     let mut b = || {\n+        let d = 6;\n         yield;\n         _zzz(); // #break\n-        a = 6;\n+        a = d;\n     };\n     Pin::new(&mut b).resume();\n     Pin::new(&mut b).resume();"}]}