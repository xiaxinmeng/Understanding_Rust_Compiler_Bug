{"sha": "eb8fb5342528907222edbf6fcb06dd624a395ce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOGZiNTM0MjUyODkwNzIyMmVkYmY2ZmNiMDZkZDYyNGEzOTVjZTE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-26T11:19:03Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-29T20:10:34Z"}, "message": "Use an ItemLikeVisitor for CheckTypeWellFormedVisitor", "tree": {"sha": "d2c0ada875e7ab0bbebd1c63d7fd648f3cddb2c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c0ada875e7ab0bbebd1c63d7fd648f3cddb2c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb8fb5342528907222edbf6fcb06dd624a395ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8fb5342528907222edbf6fcb06dd624a395ce1", "html_url": "https://github.com/rust-lang/rust/commit/eb8fb5342528907222edbf6fcb06dd624a395ce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb8fb5342528907222edbf6fcb06dd624a395ce1/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4eeba70f6c9017cf34936f9a49e05c31b575b5", "html_url": "https://github.com/rust-lang/rust/commit/2a4eeba70f6c9017cf34936f9a49e05c31b575b5"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "48475b3dcb802b0af0786dacd1a09d8f06df87e2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fb5342528907222edbf6fcb06dd624a395ce1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fb5342528907222edbf6fcb06dd624a395ce1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eb8fb5342528907222edbf6fcb06dd624a395ce1", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.hir().krate().visit_all_item_likes(&mut visit.as_deep_visitor());\n+        tcx.hir().krate().visit_all_item_likes(&mut visit);\n     })\n }\n "}, {"sha": "97881708b0a076233ce1aa0e93121ba0fd384f1c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fb5342528907222edbf6fcb06dd624a395ce1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fb5342528907222edbf6fcb06dd624a395ce1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=eb8fb5342528907222edbf6fcb06dd624a395ce1", "patch": "@@ -14,7 +14,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax_pos::Span;\n use errors::{DiagnosticBuilder, DiagnosticId};\n \n-use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n /// Helper type of a temporary returned by `.for_item(...)`.\n@@ -1015,30 +1015,23 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_item(&mut self, i: &hir::Item) {\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, i: &'tcx hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n         let def_id = self.tcx.hir().local_def_id(i.id);\n-        ty::query::queries::check_item_well_formed::ensure(self.tcx, def_id);\n-        intravisit::walk_item(self, i);\n+        self.tcx.ensure().check_item_well_formed(def_id);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         let def_id = self.tcx.hir().local_def_id(trait_item.id);\n-        ty::query::queries::check_trait_item_well_formed::ensure(self.tcx, def_id);\n-        intravisit::walk_trait_item(self, trait_item)\n+        self.tcx.ensure().check_trait_item_well_formed(def_id);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'v hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n         let def_id = self.tcx.hir().local_def_id(impl_item.id);\n-        ty::query::queries::check_impl_item_well_formed::ensure(self.tcx, def_id);\n-        intravisit::walk_impl_item(self, impl_item)\n+        self.tcx.ensure().check_impl_item_well_formed(def_id);\n     }\n }\n "}]}