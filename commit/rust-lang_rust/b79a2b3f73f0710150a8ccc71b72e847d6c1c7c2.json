{"sha": "b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "node_id": "C_kwDOAAsO6NoAKGI3OWEyYjNmNzNmMDcxMDE1MGE4Y2NjNzFiNzJlODQ3ZDZjMWM3YzI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-08T13:10:49Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-08T14:50:44Z"}, "message": "update `ParamKindOrd`", "tree": {"sha": "57ab97fc71fdec238854341601453bdd5c3d0b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57ab97fc71fdec238854341601453bdd5c3d0b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "html_url": "https://github.com/rust-lang/rust/commit/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb5595df2ed412eda6444edc7eaf06f709fa79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5595df2ed412eda6444edc7eaf06f709fa79d", "html_url": "https://github.com/rust-lang/rust/commit/ccb5595df2ed412eda6444edc7eaf06f709fa79d"}], "stats": {"total": 55, "additions": 13, "deletions": 42}, "files": [{"sha": "6c7670378fd4fb645f85c9b1cf3b99bba14e2e52", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "patch": "@@ -33,7 +33,6 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use std::cmp::Ordering;\n use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n@@ -324,46 +323,17 @@ pub type GenericBounds = Vec<GenericBound>;\n /// Specifies the enforced ordering for generic parameters. In the future,\n /// if we wanted to relax this order, we could override `PartialEq` and\n /// `PartialOrd`, to allow the kinds to be unordered.\n-#[derive(Hash, Clone, Copy)]\n+#[derive(Hash, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub enum ParamKindOrd {\n     Lifetime,\n-    Type,\n-    Const,\n-    // `Infer` is not actually constructed directly from the AST, but is implicitly constructed\n-    // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.\n-    Infer,\n-}\n-\n-impl Ord for ParamKindOrd {\n-    fn cmp(&self, other: &Self) -> Ordering {\n-        use ParamKindOrd::*;\n-        let to_int = |v| match v {\n-            Lifetime => 0,\n-            Infer | Type | Const => 1,\n-        };\n-\n-        to_int(*self).cmp(&to_int(*other))\n-    }\n-}\n-impl PartialOrd for ParamKindOrd {\n-    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        Some(self.cmp(other))\n-    }\n-}\n-impl PartialEq for ParamKindOrd {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.cmp(other) == Ordering::Equal\n-    }\n+    TypeOrConst,\n }\n-impl Eq for ParamKindOrd {}\n \n impl fmt::Display for ParamKindOrd {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ParamKindOrd::Lifetime => \"lifetime\".fmt(f),\n-            ParamKindOrd::Type => \"type\".fmt(f),\n-            ParamKindOrd::Const { .. } => \"const\".fmt(f),\n-            ParamKindOrd::Infer => \"infer\".fmt(f),\n+            ParamKindOrd::TypeOrConst => \"type or const\".fmt(f),\n         }\n     }\n }"}, {"sha": "26813f2c19c71d7d2e064eca49cb81829edd4187", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "patch": "@@ -845,10 +845,10 @@ fn validate_generic_param_order(\n         let (kind, bounds, span) = (&param.kind, &param.bounds, ident.span);\n         let (ord_kind, ident) = match &param.kind {\n             GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident.to_string()),\n-            GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident.to_string()),\n+            GenericParamKind::Type { default: _ } => (ParamKindOrd::TypeOrConst, ident.to_string()),\n             GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n-                (ParamKindOrd::Const, format!(\"const {}: {}\", ident, ty))\n+                (ParamKindOrd::TypeOrConst, format!(\"const {}: {}\", ident, ty))\n             }\n         };\n         param_idents.push((kind, ord_kind, bounds, idx, ident));"}, {"sha": "ce60bab9e0275a422faa795d123e6806c8e0c448", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "patch": "@@ -300,9 +300,9 @@ impl GenericArg<'_> {\n     pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n-            GenericArg::Type(_) => ast::ParamKindOrd::Type,\n-            GenericArg::Const(_) => ast::ParamKindOrd::Const,\n-            GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n+            GenericArg::Type(_) | GenericArg::Const(_) | GenericArg::Infer(_) => {\n+                ast::ParamKindOrd::TypeOrConst\n+            }\n         }\n     }\n "}, {"sha": "0c8bdde9c8bceefcd8a32490da48aaa5f1f1b948", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "patch": "@@ -27,8 +27,9 @@ impl GenericParamDefKind {\n     pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n-            GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n-            GenericParamDefKind::Const { .. } => ast::ParamKindOrd::Const,\n+            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n+                ast::ParamKindOrd::TypeOrConst\n+            }\n         }\n     }\n "}, {"sha": "dd894dc709bd627663205ae84c9c559cf6f804a0", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b79a2b3f73f0710150a8ccc71b72e847d6c1c7c2", "patch": "@@ -65,8 +65,8 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n \n             // Iterate through the generics of the projection to find the one that corresponds to\n-            // the def_id that this query was called with. We filter to only const args here as a\n-            // precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n+            // the def_id that this query was called with. We filter to only type and const args here\n+            // as a precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n             // but it can't hurt to be safe ^^\n             if let ty::Projection(projection) = ty.kind() {\n                 let generics = tcx.generics_of(projection.item_def_id);"}]}