{"sha": "81ceda8c5b93df524fca5f2a14f93d044c0dc6da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxY2VkYThjNWI5M2RmNTI0ZmNhNWYyYTE0ZjkzZDA0NGMwZGM2ZGE=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-22T01:04:39Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-22T01:18:50Z"}, "message": "Add SimdArray::scatter{,_select}", "tree": {"sha": "89714658f0395e99d8166ea0c8e9a6595c764c77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89714658f0395e99d8166ea0c8e9a6595c764c77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ceda8c5b93df524fca5f2a14f93d044c0dc6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ceda8c5b93df524fca5f2a14f93d044c0dc6da", "html_url": "https://github.com/rust-lang/rust/commit/81ceda8c5b93df524fca5f2a14f93d044c0dc6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ceda8c5b93df524fca5f2a14f93d044c0dc6da/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "128b6f5e22db1aad085627322f1deb7fb71b07ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/128b6f5e22db1aad085627322f1deb7fb71b07ae", "html_url": "https://github.com/rust-lang/rust/commit/128b6f5e22db1aad085627322f1deb7fb71b07ae"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "202a44f41184ac4a28ad6f189d76e827ac912727", "filename": "crates/core_simd/src/array.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/81ceda8c5b93df524fca5f2a14f93d044c0dc6da/crates%2Fcore_simd%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ceda8c5b93df524fca5f2a14f93d044c0dc6da/crates%2Fcore_simd%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Farray.rs?ref=81ceda8c5b93df524fca5f2a14f93d044c0dc6da", "patch": "@@ -1,6 +1,6 @@\n use crate::intrinsics;\n use crate::masks::*;\n-use crate::vector::ptr::SimdConstPtr;\n+use crate::vector::ptr::{SimdConstPtr, SimdMutPtr};\n use crate::vector::*;\n \n /// A representation of a vector as an \"array\" with indices, implementing\n@@ -83,6 +83,64 @@ where\n         // SAFETY: The ptrs have been bounds-masked to prevent memory-unsafe reads insha'allah\n         unsafe { intrinsics::simd_gather(or, ptrs, mask) }\n     }\n+\n+    /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds indices are not written.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    /// let vals = SimdI32::from_array([-5, -4, -3, -2]);\n+    ///\n+    /// vals.scatter(&mut vec, idxs);\n+    /// assert_eq!(vec, vec![-3, 11, 12, -4, 14, -2, 16, 17, 18]);\n+    /// ```\n+    #[inline]\n+    fn scatter(self, slice: &mut [Self::Scalar], idxs: SimdUsize<LANES>) {\n+        self.scatter_select(slice, MaskSize::splat(true), idxs)\n+    }\n+\n+    /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds or masked indices are not written.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    /// let vals = SimdI32::from_array([-5, -4, -3, -2]);\n+    /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n+    ///\n+    /// vals.scatter_select(&mut vec, mask, idxs);\n+    /// assert_eq!(vec, vec![-3, 11, 12, -4, 14, 15, 16, 17, 18]);\n+    /// ```\n+    #[inline]\n+    fn scatter_select(\n+        self,\n+        slice: &mut [Self::Scalar],\n+        mask: MaskSize<LANES>,\n+        idxs: SimdUsize<LANES>,\n+    ) {\n+        // We must construct our scatter mask before we derive a pointer!\n+        let mask = (mask & idxs.lanes_lt(SimdUsize::splat(slice.len()))).to_int();\n+        // SAFETY: This block works with *mut T derived from &mut 'a [T],\n+        // which means it is delicate in Rust's borrowing model, circa 2021:\n+        // &mut 'a [T] asserts uniqueness, so deriving &'a [T] invalidates live *mut Ts!\n+        // Even though this block is largely safe methods, it must be almost exactly this way\n+        // to prevent invalidating the raw ptrs while they're live.\n+        // Thus, entering this block requires all values to use being already ready:\n+        // 0. idxs we want to write to, which are used to construct the mask.\n+        // 1. mask, which depends on an initial &'a [T] and the idxs.\n+        // 2. actual values to scatter (self).\n+        // 3. &mut [T] which will become our base ptr.\n+        unsafe {\n+            // Now Entering \u2622\ufe0f *mut T Zone\n+            let base_ptr = SimdMutPtr::splat(slice.as_mut_ptr());\n+            // Ferris forgive me, I have done pointer arithmetic here.\n+            let ptrs = base_ptr.wrapping_add(idxs);\n+            // The ptrs have been bounds-masked to prevent memory-unsafe writes insha'allah\n+            intrinsics::simd_scatter(self, ptrs, mask)\n+            // Cleared \u2622\ufe0f *mut T Zone\n+        }\n+    }\n }\n \n macro_rules! impl_simdarray_for {"}, {"sha": "ee9726e0fec4e2fa1e24e42432279ff3523a126d", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ceda8c5b93df524fca5f2a14f93d044c0dc6da/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ceda8c5b93df524fca5f2a14f93d044c0dc6da/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=81ceda8c5b93df524fca5f2a14f93d044c0dc6da", "patch": "@@ -64,6 +64,7 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n \n     pub(crate) fn simd_gather<T, U, V>(val: T, ptr: U, mask: V) -> T;\n+    pub(crate) fn simd_scatter<T, U, V>(val: T, ptr: U, mask: V);\n \n     // {s,u}add.sat\n     pub(crate) fn simd_saturating_add<T>(x: T, y: T) -> T;"}]}