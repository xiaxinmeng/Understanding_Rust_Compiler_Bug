{"sha": "ab8fff20d2053012eead9af6c2fb95f28a7d4406", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOGZmZjIwZDIwNTMwMTJlZWFkOWFmNmMyZmI5NWYyOGE3ZDQ0MDY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-04T15:01:27Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-04T15:01:27Z"}, "message": "trans: Collect drop-glue translation item for closure env in fn-once-adapters.", "tree": {"sha": "9e4051b0617b071f31c1d62db6f79d05bd271094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4051b0617b071f31c1d62db6f79d05bd271094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8fff20d2053012eead9af6c2fb95f28a7d4406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8fff20d2053012eead9af6c2fb95f28a7d4406", "html_url": "https://github.com/rust-lang/rust/commit/ab8fff20d2053012eead9af6c2fb95f28a7d4406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8fff20d2053012eead9af6c2fb95f28a7d4406/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07191e2b11b4f9f0328470b5af13d4765085ff6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/07191e2b11b4f9f0328470b5af13d4765085ff6a", "html_url": "https://github.com/rust-lang/rust/commit/07191e2b11b4f9f0328470b5af13d4765085ff6a"}], "stats": {"total": 130, "additions": 110, "deletions": 20}, "files": [{"sha": "a4b08c8cc4a587806a3a550830a504434d1c099d", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ab8fff20d2053012eead9af6c2fb95f28a7d4406/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8fff20d2053012eead9af6c2fb95f28a7d4406/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=ab8fff20d2053012eead9af6c2fb95f28a7d4406", "patch": "@@ -235,18 +235,37 @@ fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n            trait_closure_kind={:?}, llfn={:?})\",\n            llfn_closure_kind, trait_closure_kind, Value(llfn));\n \n-    match (llfn_closure_kind, trait_closure_kind) {\n+    match needs_fn_once_adapter_shim(llfn_closure_kind, trait_closure_kind) {\n+        Ok(true) => trans_fn_once_adapter_shim(ccx,\n+                                               def_id,\n+                                               substs,\n+                                               method_instance,\n+                                               llfn),\n+        Ok(false) => llfn,\n+        Err(()) => {\n+            bug!(\"trans_closure_adapter_shim: cannot convert {:?} to {:?}\",\n+                 llfn_closure_kind,\n+                 trait_closure_kind);\n+        }\n+    }\n+}\n+\n+pub fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,\n+                                  trait_closure_kind: ty::ClosureKind)\n+                                  -> Result<bool, ()>\n+{\n+    match (actual_closure_kind, trait_closure_kind) {\n         (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n         (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n         (ty::ClosureKind::FnOnce, ty::ClosureKind::FnOnce) => {\n             // No adapter needed.\n-            llfn\n+           Ok(false)\n         }\n         (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) => {\n             // The closure fn `llfn` is a `fn(&self, ...)`.  We want a\n             // `fn(&mut self, ...)`. In fact, at trans time, these are\n             // basically the same thing, so we can just return llfn.\n-            llfn\n+            Ok(false)\n         }\n         (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n         (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n@@ -258,13 +277,9 @@ fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n             //     fn call_once(mut self, ...) { call_mut(&mut self, ...) }\n             //\n             // These are both the same at trans time.\n-            trans_fn_once_adapter_shim(ccx, def_id, substs, method_instance, llfn)\n-        }\n-        _ => {\n-            bug!(\"trans_closure_adapter_shim: cannot convert {:?} to {:?}\",\n-                 llfn_closure_kind,\n-                 trait_closure_kind);\n+            Ok(true)\n         }\n+        _ => Err(()),\n     }\n }\n "}, {"sha": "1abc62c932682b6a1d8c288e86a273779331218a", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 86, "deletions": 11, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ab8fff20d2053012eead9af6c2fb95f28a7d4406/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8fff20d2053012eead9af6c2fb95f28a7d4406/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=ab8fff20d2053012eead9af6c2fb95f28a7d4406", "patch": "@@ -205,6 +205,7 @@ use rustc::mir::visit::Visitor as MirVisitor;\n use syntax::abi::Abi;\n use syntax_pos::DUMMY_SP;\n use base::custom_coerce_unsize_info;\n+use callee::needs_fn_once_adapter_shim;\n use context::SharedCrateContext;\n use common::fulfill_obligation;\n use glue::{self, DropGlueKind};\n@@ -568,7 +569,11 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                 callee_substs,\n                                                 self.param_substs);\n \n-            if let Some((callee_def_id, callee_substs)) = dispatched {\n+            if let StaticDispatchResult::Dispatched {\n+                    def_id: callee_def_id,\n+                    substs: callee_substs,\n+                    fn_once_adjustment,\n+                } = dispatched {\n                 // if we have a concrete impl (which we might not have\n                 // in the case of something compiler generated like an\n                 // object shim or a closure that is handled differently),\n@@ -581,6 +586,17 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                           callee_substs,\n                                                           self.param_substs);\n                     self.output.push(trans_item);\n+\n+                    // This call will instantiate an FnOnce adapter, which drops\n+                    // the closure environment. Therefore we need to make sure\n+                    // that we collect the drop-glue for the environment type.\n+                    if let Some(env_ty) = fn_once_adjustment {\n+                        let env_ty = glue::get_drop_glue_type(self.scx, env_ty);\n+                        if self.scx.type_needs_drop(env_ty) {\n+                            let dg = DropGlueKind::Ty(env_ty);\n+                            self.output.push(TransItem::DropGlue(dg));\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -793,15 +809,13 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n             bug!(\"encountered unexpected type\");\n         }\n     }\n-\n-\n }\n \n fn do_static_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                 fn_def_id: DefId,\n                                 fn_substs: &'tcx Substs<'tcx>,\n                                 param_substs: &'tcx Substs<'tcx>)\n-                                -> Option<(DefId, &'tcx Substs<'tcx>)> {\n+                                -> StaticDispatchResult<'tcx> {\n     debug!(\"do_static_dispatch(fn_def_id={}, fn_substs={:?}, param_substs={:?})\",\n            def_id_to_string(scx.tcx(), fn_def_id),\n            fn_substs,\n@@ -818,18 +832,38 @@ fn do_static_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         debug!(\" => regular function\");\n         // The function is not part of an impl or trait, no dispatching\n         // to be done\n-        Some((fn_def_id, fn_substs))\n+        StaticDispatchResult::Dispatched {\n+            def_id: fn_def_id,\n+            substs: fn_substs,\n+            fn_once_adjustment: None,\n+        }\n     }\n }\n \n+enum StaticDispatchResult<'tcx> {\n+    // The call could be resolved statically as going to the method with\n+    // `def_id` and `substs`.\n+    Dispatched {\n+        def_id: DefId,\n+        substs: &'tcx Substs<'tcx>,\n+\n+        // If this is a call to a closure that needs an FnOnce adjustment,\n+        // this contains the new self type of the call (= type of the closure\n+        // environment)\n+        fn_once_adjustment: Option<ty::Ty<'tcx>>,\n+    },\n+    // This goes to somewhere that we don't know at compile-time\n+    Unknown\n+}\n+\n // Given a trait-method and substitution information, find out the actual\n // implementation of the trait method.\n fn do_static_trait_method_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                              trait_method: &ty::AssociatedItem,\n                                              trait_id: DefId,\n                                              callee_substs: &'tcx Substs<'tcx>,\n                                              param_substs: &'tcx Substs<'tcx>)\n-                                             -> Option<(DefId, &'tcx Substs<'tcx>)> {\n+                                             -> StaticDispatchResult<'tcx> {\n     let tcx = scx.tcx();\n     debug!(\"do_static_trait_method_dispatch(trait_method={}, \\\n                                             trait_id={}, \\\n@@ -850,17 +884,47 @@ fn do_static_trait_method_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n     // the actual function:\n     match vtbl {\n         traits::VtableImpl(impl_data) => {\n-            Some(traits::find_method(tcx, trait_method.name, rcvr_substs, &impl_data))\n+            let (def_id, substs) = traits::find_method(tcx,\n+                                                       trait_method.name,\n+                                                       rcvr_substs,\n+                                                       &impl_data);\n+            StaticDispatchResult::Dispatched {\n+                def_id: def_id,\n+                substs: substs,\n+                fn_once_adjustment: None,\n+            }\n         }\n         traits::VtableClosure(closure_data) => {\n-            Some((closure_data.closure_def_id, closure_data.substs.substs))\n+            let closure_def_id = closure_data.closure_def_id;\n+            let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n+            let actual_closure_kind = tcx.closure_kind(closure_def_id);\n+\n+            let needs_fn_once_adapter_shim =\n+                match needs_fn_once_adapter_shim(actual_closure_kind,\n+                                                 trait_closure_kind) {\n+                Ok(true) => true,\n+                _ => false,\n+            };\n+\n+            let fn_once_adjustment = if needs_fn_once_adapter_shim {\n+                Some(tcx.mk_closure_from_closure_substs(closure_def_id,\n+                                                        closure_data.substs))\n+            } else {\n+                None\n+            };\n+\n+            StaticDispatchResult::Dispatched {\n+                def_id: closure_def_id,\n+                substs: closure_data.substs.substs,\n+                fn_once_adjustment: fn_once_adjustment,\n+            }\n         }\n         // Trait object and function pointer shims are always\n         // instantiated in-place, and as they are just an ABI-adjusting\n         // indirect call they do not have any dependencies.\n         traits::VtableFnPointer(..) |\n         traits::VtableObject(..) => {\n-            None\n+            StaticDispatchResult::Unknown\n         }\n         _ => {\n             bug!(\"static call to invalid vtable: {:?}\", vtbl)\n@@ -994,8 +1058,19 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a,\n             // Walk all methods of the trait, including those of its supertraits\n             let methods = traits::get_vtable_methods(scx.tcx(), poly_trait_ref);\n             let methods = methods.filter_map(|method| method)\n-                .filter_map(|(def_id, substs)| do_static_dispatch(scx, def_id, substs,\n-                                                                  param_substs))\n+                .filter_map(|(def_id, substs)| {\n+                    if let StaticDispatchResult::Dispatched {\n+                        def_id,\n+                        substs,\n+                        // We already add the drop-glue for the closure env\n+                        // unconditionally below.\n+                        fn_once_adjustment: _ ,\n+                    } = do_static_dispatch(scx, def_id, substs, param_substs) {\n+                        Some((def_id, substs))\n+                    } else {\n+                        None\n+                    }\n+                })\n                 .filter(|&(def_id, _)| can_have_local_instance(scx.tcx(), def_id))\n                 .map(|(def_id, substs)| create_fn_trans_item(scx, def_id, substs, param_substs));\n             output.extend(methods);"}]}