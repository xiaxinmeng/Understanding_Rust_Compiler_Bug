{"sha": "142c52f4a3f7db42613239953d4615ab5a0ac3c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MmM1MmY0YTNmN2RiNDI2MTMyMzk5NTNkNDYxNWFiNWEwYWMzYzY=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-06T19:18:16Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-09T18:04:58Z"}, "message": "fix tests", "tree": {"sha": "cb5f0aa5a41d51674339099921751070df6a2dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb5f0aa5a41d51674339099921751070df6a2dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/142c52f4a3f7db42613239953d4615ab5a0ac3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/142c52f4a3f7db42613239953d4615ab5a0ac3c6", "html_url": "https://github.com/rust-lang/rust/commit/142c52f4a3f7db42613239953d4615ab5a0ac3c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/142c52f4a3f7db42613239953d4615ab5a0ac3c6/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758a77d46c684fc646e8ec08065d23eb53c6444d", "url": "https://api.github.com/repos/rust-lang/rust/commits/758a77d46c684fc646e8ec08065d23eb53c6444d", "html_url": "https://github.com/rust-lang/rust/commit/758a77d46c684fc646e8ec08065d23eb53c6444d"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "bf345a24389d2bebc9d62b6777e64cf53a231e01", "filename": "src/doc/rustc/src/lints/index.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md?ref=142c52f4a3f7db42613239953d4615ab5a0ac3c6", "patch": "@@ -7,7 +7,7 @@ depending on how you've configured things.\n \n Here's a small example:\n \n-```rust\n+```bash\n $ cat main.rs\n fn main() {\n     let x = 5;\n@@ -25,4 +25,4 @@ warning: unused variable: `x`\n \n This is the `unused_variables` lint, and it tells you that you've introduced\n a variable that you don't use in your code. That's not *wrong*, so it's not\n-an error, but it might be a bug, so you get a warning.\n\\ No newline at end of file\n+an error, but it might be a bug, so you get a warning."}, {"sha": "83b65cd648e0f0a59eca596952862bf170ff0bff", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=142c52f4a3f7db42613239953d4615ab5a0ac3c6", "patch": "@@ -22,7 +22,7 @@ pub fn foo() {}\n \n Compiling this file produces no warnings:\n \n-```rust\n+```bash\n $ rustc lib.rs --crate-type=lib\n $\n ```\n@@ -62,7 +62,7 @@ warning: unused variable: `x`\n A 'deny' lint produces an error if you violate it. For example, this code\n runs into the `exceeding_bitshifts` lint.\n \n-```rust\n+```rust,ignore\n fn main() {\n     100u8 << 10;\n }\n@@ -215,7 +215,7 @@ pub fn foo() {}\n This is the maximum level for all lints. So for example, if we take our\n code sample from the \"deny\" lint level above:\n \n-```rust\n+```rust,ignore\n fn main() {\n     100u8 << 10;\n }\n@@ -249,4 +249,4 @@ $\n \n This feature is used heavily by Cargo; it will pass `--cap-lints allow` when\n compiling your dependencies, so that if they have any warnings, they do not\n-pollute the output of your build.\n\\ No newline at end of file\n+pollute the output of your build."}, {"sha": "e1a3f96a6fe6e320c3001a12b8a9d579f45a8d14", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=142c52f4a3f7db42613239953d4615ab5a0ac3c6", "patch": "@@ -336,7 +336,7 @@ This lint is deprecated and no longer used.\n This lint guards against `extern crate` items that are never used. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n extern crate semver;\n ```\n \n@@ -359,9 +359,10 @@ code that triggers this lint:\n ```rust\n use test::{A};\n \n-mod test {\n-    struct A;\n+pub mod test {\n+    pub struct A;\n }\n+# fn main() {}\n ```\n \n When set to 'deny', this will produce:\n@@ -410,7 +411,7 @@ You can call `bar()` directly, without the `foo::`.\n This lint checks for the unused result of an expression in a statement. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,no_run\n fn foo<T>() -> T { panic!() }\n \n fn main() {\n@@ -449,4 +450,4 @@ error: enum variant is more than three times larger (1024 bytes) than the next l\n 5 |     VBig([u8; 1024]),   //~ ERROR variant is more than three times larger\n   |     ^^^^^^^^^^^^^^^^\n   |\n-```\n\\ No newline at end of file\n+```"}, {"sha": "0c49f2f7b36ebdf33b07dc8be8bc46e18610af7d", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=142c52f4a3f7db42613239953d4615ab5a0ac3c6", "patch": "@@ -7,7 +7,7 @@ These lints are all set to the 'deny' level by default.\n This lint detects that a shift exceeds the type's number of bits. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n 1_i32 << 32;\n ```\n \n@@ -27,7 +27,7 @@ error: bitshift exceeds the type's number of bits\n This lint detects type parameter default erroneously allowed in invalid location. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n fn foo<T=i32>(t: T) {}\n ```\n \n@@ -51,7 +51,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n visibility rules, and changed the visibility of struct constructors. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n mod m {\n     pub struct S(u8);\n     \n@@ -96,7 +96,7 @@ it into its own directory if appropriate.\n This lint detects names that resolve to ambiguous glob imports. Some example\n code that triggers this lint:\n \n-```rust\n+```rust,ignore\n pub struct Foo;\n \n mod bar {\n@@ -143,7 +143,7 @@ This warning can always be fixed by removing the unused pattern in the\n This lint catches transmuting from `&T` to `&mut T` becuase it is undefined\n behavior. Some example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n unsafe {\n     let y = std::mem::transmute::<&i32, &mut i32>(&5);\n }\n@@ -168,7 +168,7 @@ Constants do not have their symbols exported, and therefore, this probably\n means you meant to use a `static`, not a `const. Some example code that\n triggers this lint:\n \n-```rust\n+```rust,ignore\n #[no_mangle]\n const FOO: i32 = 5;\n ```\n@@ -191,7 +191,7 @@ error: const items should never be #[no_mangle]\n This lint detects incorrect parentheses. Some example code that triggers this\n lint:\n \n-```rust\n+```rust,ignore\n let x = 5 as usize();\n ```\n \n@@ -225,7 +225,7 @@ to be accessed in safe code. This lint now catches and denies this kind of code.\n This lint detects an unknown crate type found in a `#[crate_type]` directive. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n #![crate_type=\"lol\"]\n ```\n \n@@ -238,4 +238,4 @@ error: invalid `crate_type` value\n 1 | #![crate_type=\"lol\"]\n   | ^^^^^^^^^^^^^^^^^^^^\n   |\n-```\n\\ No newline at end of file\n+```"}, {"sha": "1171f75caa1fdf69ac32e2c02ee562a85df2f7a4", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/142c52f4a3f7db42613239953d4615ab5a0ac3c6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=142c52f4a3f7db42613239953d4615ab5a0ac3c6", "patch": "@@ -7,7 +7,7 @@ These lints are all set to the 'warn' level by default.\n This lint detects an erroneous expression while doing constant evaluation. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n let b = 200u8 + 200u8;\n ```\n \n@@ -413,7 +413,7 @@ impl Trait for i32 {\n This lint detects when compiler plugins are used as ordinary library in\n non-plugin crate. Some example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n #![feature(plugin)]\n #![plugin(macro_crate_test)]\n \n@@ -425,7 +425,7 @@ extern crate macro_crate_test;\n This lint detects detect private items in public interfaces not caught by the old implementation. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n pub trait Trait {\n     type A;\n }\n@@ -439,6 +439,7 @@ mod foo {\n         type A = Z;\n     }\n }\n+# fn main() {}\n ```\n \n This will produce:\n@@ -682,7 +683,7 @@ warning: union contains a field with possibly non-trivial drop code, drop code o\n This lint detects unrecognized lint attribute. Some\n example code that triggers this lint:\n \n-```rust\n+```rust,ignore\n #[allow(not_a_real_lint)]\n ```\n \n@@ -702,7 +703,7 @@ warning: unknown lint: `not_a_real_lint`\n This lint detects detects unreachable code paths. Some example code that\n triggers this lint:\n \n-```rust\n+```rust,no_run\n panic!(\"we never go past here!\");\n \n let x = 5;\n@@ -1020,7 +1021,7 @@ As such, you won't ever trigger this lint in your code directly.\n This lint detects `while true { }`. Some example code that triggers this\n lint:\n \n-```rust\n+```rust,no_run\n while true {\n \n }\n@@ -1035,4 +1036,4 @@ warning: denote infinite loops with `loop { ... }`\n 2 |     while true {\n   |     ^^^^^^^^^^ help: use `loop`\n   |\n-```\n\\ No newline at end of file\n+```"}]}