{"sha": "c0ba79eefd82d0a5614e295659b18f7b31e542a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYmE3OWVlZmQ4MmQwYTU2MTRlMjk1NjU5YjE4ZjdiMzFlNTQyYTM=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-02-10T23:15:13Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-02-10T23:15:13Z"}, "message": "less noisy format", "tree": {"sha": "7d07cb51faa53e34c261eeca499646b730518023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d07cb51faa53e34c261eeca499646b730518023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ba79eefd82d0a5614e295659b18f7b31e542a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ba79eefd82d0a5614e295659b18f7b31e542a3", "html_url": "https://github.com/rust-lang/rust/commit/c0ba79eefd82d0a5614e295659b18f7b31e542a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ba79eefd82d0a5614e295659b18f7b31e542a3/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49204563e13f57917cc22ac8f8b608927a432038", "url": "https://api.github.com/repos/rust-lang/rust/commits/49204563e13f57917cc22ac8f8b608927a432038", "html_url": "https://github.com/rust-lang/rust/commit/49204563e13f57917cc22ac8f8b608927a432038"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "87e6eafe479774c6999532473180989f6b1eebaa", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c0ba79eefd82d0a5614e295659b18f7b31e542a3/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ba79eefd82d0a5614e295659b18f7b31e542a3/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=c0ba79eefd82d0a5614e295659b18f7b31e542a3", "patch": "@@ -106,7 +106,6 @@ use backtrace_rs as backtrace;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n-#[derive(Debug)]\n pub struct Backtrace {\n     inner: Inner,\n }\n@@ -146,7 +145,6 @@ fn _assert_send_sync() {\n     _assert::<Backtrace>();\n }\n \n-#[derive(Debug)]\n struct BacktraceFrame {\n     frame: backtrace::Frame,\n     symbols: Vec<BacktraceSymbol>,\n@@ -163,13 +161,45 @@ enum BytesOrWide {\n     Wide(Vec<u16>),\n }\n \n+impl fmt::Debug for Backtrace {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut capture = match &self.inner {\n+            Inner::Unsupported => return fmt.write_str(\"unsupported backtrace\"),\n+            Inner::Disabled => return fmt.write_str(\"disabled backtrace\"),\n+            Inner::Captured(c) => c.lock().unwrap(),\n+        };\n+        capture.resolve();\n+\n+        let mut dbg = fmt.debug_list();\n+\n+        for frame in &capture.frames {\n+            dbg.entries(&frame.symbols);\n+        }\n+\n+        dbg.finish()\n+    }\n+}\n+\n+impl fmt::Debug for BacktraceFrame {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt.debug_list().entries(&self.symbols).finish()\n+    }\n+}\n+\n impl fmt::Debug for BacktraceSymbol {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt.debug_struct(\"BacktraceSymbol\")\n-            .field(\"name\", &self.name.as_ref().map(|b| backtrace::SymbolName::new(b)))\n-            .field(\"filename\", &self.filename)\n-            .field(\"lineno\", &self.lineno)\n-            .finish()\n+        let mut dbg = fmt.debug_struct(\"\");\n+        dbg.field(\"fn\", &self.name.as_ref().map(|b| backtrace::SymbolName::new(b)));\n+\n+        if let Some(fname) = self.filename.as_ref() {\n+            dbg.field(\"file\", fname);\n+        }\n+\n+        if let Some(line) = self.lineno.as_ref() {\n+            dbg.field(\"line\", &self.lineno);\n+        }\n+\n+        dbg.finish()\n     }\n }\n "}]}