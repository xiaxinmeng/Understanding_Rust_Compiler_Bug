{"sha": "da3802b2ce4796461a9fff22f4e9c6fd890879b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMzgwMmIyY2U0Nzk2NDYxYTlmZmYyMmY0ZTljNmZkODkwODc5YjI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-02T08:20:50Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-02T08:20:50Z"}, "message": "Merge #725\n\n725: Implement `use as` r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "b3df38ae7b749178d854be9f2e6b16070a373216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3df38ae7b749178d854be9f2e6b16070a373216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3802b2ce4796461a9fff22f4e9c6fd890879b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3802b2ce4796461a9fff22f4e9c6fd890879b2", "html_url": "https://github.com/rust-lang/rust/commit/da3802b2ce4796461a9fff22f4e9c6fd890879b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3802b2ce4796461a9fff22f4e9c6fd890879b2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4447019f4b5f24728bb7b91b161755ddb373c74c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4447019f4b5f24728bb7b91b161755ddb373c74c", "html_url": "https://github.com/rust-lang/rust/commit/4447019f4b5f24728bb7b91b161755ddb373c74c"}, {"sha": "d8ef8acb47b1be92da97a2d5cd4334bceed5b919", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ef8acb47b1be92da97a2d5cd4334bceed5b919", "html_url": "https://github.com/rust-lang/rust/commit/d8ef8acb47b1be92da97a2d5cd4334bceed5b919"}], "stats": {"total": 100, "additions": 83, "deletions": 17}, "files": [{"sha": "04cc693b37727926709beabe0e8a9bc60c70d7ec", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=da3802b2ce4796461a9fff22f4e9c6fd890879b2", "patch": "@@ -251,10 +251,14 @@ where\n             };\n         }\n         for (import_id, import_data) in input.imports.iter() {\n-            if let Some(segment) = import_data.path.segments.iter().last() {\n+            if let Some(last_segment) = import_data.path.segments.iter().last() {\n                 if !import_data.is_glob {\n+                    let name = import_data\n+                        .alias\n+                        .clone()\n+                        .unwrap_or_else(|| last_segment.name.clone());\n                     module_items.items.insert(\n-                        segment.name.clone(),\n+                        name,\n                         Resolution {\n                             def: PerNs::none(),\n                             import: Some(import_id),\n@@ -319,19 +323,18 @@ where\n \n         if reached_fixedpoint == ReachedFixedPoint::Yes {\n             let last_segment = import.path.segments.last().unwrap();\n+            let name = import\n+                .alias\n+                .clone()\n+                .unwrap_or_else(|| last_segment.name.clone());\n+            log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def,);\n             self.update(module_id, |items| {\n                 let res = Resolution {\n                     def,\n                     import: Some(import_id),\n                 };\n-                items.items.insert(last_segment.name.clone(), res);\n+                items.items.insert(name, res);\n             });\n-            log::debug!(\n-                \"resolved import {:?} ({:?}) cross-source root to {:?}\",\n-                last_segment.name,\n-                import,\n-                def,\n-            );\n         }\n         reached_fixedpoint\n     }"}, {"sha": "df87f520fab42f8a67de2d83fe1f10347364c8a0", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=da3802b2ce4796461a9fff22f4e9c6fd890879b2", "patch": "@@ -21,6 +21,7 @@ impl_arena_id!(ImportId);\n #[derive(Debug, PartialEq, Eq)]\n pub(super) struct ImportData {\n     pub(super) path: Path,\n+    pub(super) alias: Option<Name>,\n     pub(super) is_glob: bool,\n }\n \n@@ -209,9 +210,10 @@ impl LoweredModule {\n     }\n \n     fn add_use_item(&mut self, source_map: &mut ImportSourceMap, item: &ast::UseItem) {\n-        Path::expand_use_item(item, |path, segment| {\n+        Path::expand_use_item(item, |path, segment, alias| {\n             let import = self.imports.alloc(ImportData {\n                 path,\n+                alias,\n                 is_glob: segment.is_none(),\n             });\n             if let Some(segment) = segment {"}, {"sha": "81c8a4f12d781aaba16af2fde2bf7366d7a55351", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=da3802b2ce4796461a9fff22f4e9c6fd890879b2", "patch": "@@ -90,6 +90,30 @@ fn item_map_smoke_test() {\n     );\n }\n \n+#[test]\n+fn use_as() {\n+    let (item_map, module_id) = item_map(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+\n+        use crate::foo::Baz as Foo;\n+        <|>\n+\n+        //- /foo/mod.rs\n+        pub struct Baz;\n+    \",\n+    );\n+    check_module_item_map(\n+        &item_map,\n+        module_id,\n+        \"\n+            Foo: t v\n+            foo: t\n+        \",\n+    );\n+}\n+\n #[test]\n fn use_trees() {\n     let (item_map, module_id) = item_map("}, {"sha": "cb0a045004bdc7aa19e2db6967ec3e05f567b23c", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=da3802b2ce4796461a9fff22f4e9c6fd890879b2", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_syntax::{ast, AstNode};\n+use ra_syntax::{ast::{self, NameOwner}, AstNode};\n \n use crate::{Name, AsName, type_ref::TypeRef};\n \n@@ -46,7 +46,7 @@ impl Path {\n     /// Calls `cb` with all paths, represented by this use item.\n     pub fn expand_use_item<'a>(\n         item: &'a ast::UseItem,\n-        mut cb: impl FnMut(Path, Option<&'a ast::PathSegment>),\n+        mut cb: impl FnMut(Path, Option<&'a ast::PathSegment>, Option<Name>),\n     ) {\n         if let Some(tree) = item.use_tree() {\n             expand_use_tree(None, tree, &mut cb);\n@@ -164,7 +164,7 @@ impl From<Name> for Path {\n fn expand_use_tree<'a>(\n     prefix: Option<Path>,\n     tree: &'a ast::UseTree,\n-    cb: &mut impl FnMut(Path, Option<&'a ast::PathSegment>),\n+    cb: &mut impl FnMut(Path, Option<&'a ast::PathSegment>, Option<Name>),\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n@@ -181,24 +181,25 @@ fn expand_use_tree<'a>(\n             expand_use_tree(prefix.clone(), child_tree, cb);\n         }\n     } else {\n+        let alias = tree.alias().and_then(|a| a.name()).map(|a| a.as_name());\n         if let Some(ast_path) = tree.path() {\n             // Handle self in a path.\n             // E.g. `use something::{self, <...>}`\n             if ast_path.qualifier().is_none() {\n                 if let Some(segment) = ast_path.segment() {\n                     if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n                         if let Some(prefix) = prefix {\n-                            cb(prefix, Some(segment));\n+                            cb(prefix, Some(segment), alias);\n                             return;\n                         }\n                     }\n                 }\n             }\n             if let Some(path) = convert_path(prefix, ast_path) {\n                 if tree.has_star() {\n-                    cb(path, None)\n+                    cb(path, None, alias)\n                 } else if let Some(segment) = ast_path.segment() {\n-                    cb(path, Some(segment))\n+                    cb(path, Some(segment), alias)\n                 };\n             }\n             // TODO: report errors somewhere"}, {"sha": "60480c69998e23f6301ef9703fd53524a6891be5", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=da3802b2ce4796461a9fff22f4e9c6fd890879b2", "patch": "@@ -17,6 +17,35 @@ use crate::{\n     ast::{self, AstNode},\n };\n \n+// Alias\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct Alias {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for Alias {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for Alias {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            ALIAS => Some(Alias::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Alias {\n+    type Owned = TreeArc<Alias>;\n+    fn to_owned(&self) -> TreeArc<Alias> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl ast::NameOwner for Alias {}\n+impl Alias {}\n+\n // ArgList\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]\n@@ -4176,6 +4205,10 @@ impl UseTree {\n     pub fn use_tree_list(&self) -> Option<&UseTreeList> {\n         super::child_opt(self)\n     }\n+\n+    pub fn alias(&self) -> Option<&Alias> {\n+        super::child_opt(self)\n+    }\n }\n \n // UseTreeList"}, {"sha": "a2ccd7cb9466f5489ee3874fdffb746ce92dbb4e", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/da3802b2ce4796461a9fff22f4e9c6fd890879b2/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=da3802b2ce4796461a9fff22f4e9c6fd890879b2", "patch": "@@ -593,7 +593,10 @@ Grammar(\n             options: [ \"UseTree\" ]\n         ),\n         \"UseTree\": (\n-            options: [ \"Path\", \"UseTreeList\" ]\n+            options: [ \"Path\", \"UseTreeList\", \"Alias\" ]\n+        ),\n+        \"Alias\": (\n+            traits: [\"NameOwner\"],\n         ),\n         \"UseTreeList\": (\n             collections: [[\"use_trees\", \"UseTree\"]]"}]}