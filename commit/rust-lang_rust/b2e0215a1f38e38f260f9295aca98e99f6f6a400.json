{"sha": "b2e0215a1f38e38f260f9295aca98e99f6f6a400", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTAyMTVhMWYzOGUzOGYyNjBmOTI5NWFjYTk4ZTk5ZjZmNmE0MDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-12T21:48:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "apply `process_registered_region_obligations` at the end of regionck\n\nWe used to apply it repeatedly as we went, relying on the current\nvalue of the `region_bound_pairs_accum` vector. But now we save those\nvalues into a map, so we can just process all the registered region\nobligations at the end.", "tree": {"sha": "477de3452d01a095f10ca494e84506602212eb70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477de3452d01a095f10ca494e84506602212eb70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e0215a1f38e38f260f9295aca98e99f6f6a400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e0215a1f38e38f260f9295aca98e99f6f6a400", "html_url": "https://github.com/rust-lang/rust/commit/b2e0215a1f38e38f260f9295aca98e99f6f6a400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e0215a1f38e38f260f9295aca98e99f6f6a400/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e305a8a23dc6f8e71dadc2670448ed14bf5962d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e305a8a23dc6f8e71dadc2670448ed14bf5962d", "html_url": "https://github.com/rust-lang/rust/commit/9e305a8a23dc6f8e71dadc2670448ed14bf5962d"}], "stats": {"total": 110, "additions": 49, "deletions": 61}, "files": [{"sha": "631ff58d3e37e3e87e0574c3d925ad0b5966612b", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -97,8 +97,8 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n     }\n \n     /// Borrows current value of the `region_bound_pairs`.\n-    pub fn region_bound_pairs(&self) -> &RegionBoundPairs<'tcx> {\n-        &self.region_bound_pairs_accum\n+    pub fn region_bound_pairs_map(&self) -> &FxHashMap<ast::NodeId, RegionBoundPairs<'tcx>> {\n+        &self.region_bound_pairs_map\n     }\n \n     /// Returns ownership of the `free_region_map`."}, {"sha": "899699d1113d36a04f5595400f8e67f069eeeb4e", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -70,8 +70,9 @@\n //! imply that `'b: 'a`.\n \n use hir::def_id::DefId;\n-use infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n use infer::outlives::env::RegionBoundPairs;\n+use infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n+use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n use traits::{self, ObligationCause};\n use ty::outlives::Component;\n@@ -159,10 +160,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// processed.\n     pub fn process_registered_region_obligations(\n         &self,\n-        region_bound_pairs: &RegionBoundPairs<'tcx>,\n+        region_bound_pairs_map: &FxHashMap<ast::NodeId, RegionBoundPairs<'tcx>>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n-        body_id: ast::NodeId,\n     ) {\n         assert!(\n             !self.in_snapshot.get(),\n@@ -171,36 +171,39 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         debug!(\"process_registered_region_obligations()\");\n \n-        // pull out the region obligations with the given `body_id` (leaving the rest)\n-        let mut my_region_obligations = Vec::with_capacity(self.region_obligations.borrow().len());\n-        {\n-            let mut r_o = self.region_obligations.borrow_mut();\n-            my_region_obligations.extend(r_o.drain_filter(|(ro_body_id, _)| {\n-                *ro_body_id == body_id\n-            }).map(|(_, obligation)| obligation));\n-        }\n+        let my_region_obligations = self.take_registered_region_obligations();\n \n-        let outlives = &mut TypeOutlives::new(\n-            self,\n-            self.tcx,\n-            region_bound_pairs,\n-            implicit_region_bound,\n-            param_env,\n-        );\n-\n-        for RegionObligation {\n-            sup_type,\n-            sub_region,\n-            origin,\n-        } in my_region_obligations\n+        for (\n+            body_id,\n+            RegionObligation {\n+                sup_type,\n+                sub_region,\n+                origin,\n+            },\n+        ) in my_region_obligations\n         {\n             debug!(\n                 \"process_registered_region_obligations: sup_type={:?} sub_region={:?} origin={:?}\",\n                 sup_type, sub_region, origin\n             );\n \n             let sup_type = self.resolve_type_vars_if_possible(&sup_type);\n-            outlives.type_must_outlive(origin, sup_type, sub_region);\n+\n+            if let Some(region_bound_pairs) = region_bound_pairs_map.get(&body_id) {\n+                let outlives = &mut TypeOutlives::new(\n+                    self,\n+                    self.tcx,\n+                    &region_bound_pairs,\n+                    implicit_region_bound,\n+                    param_env,\n+                );\n+                outlives.type_must_outlive(origin, sup_type, sub_region);\n+            } else {\n+                self.tcx.sess.delay_span_bug(\n+                    origin.span(),\n+                    &format!(\"no region-bound-pairs for {:?}\", body_id),\n+                )\n+            }\n         }\n     }\n "}, {"sha": "8f106a08125386a56ee32998d2b3cbe0eeb554eb", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -16,10 +16,9 @@ use super::*;\n use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-\n use infer::region_constraints::{Constraint, RegionConstraintData};\n use infer::InferCtxt;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use ty::fold::TypeFolder;\n use ty::{Region, RegionVid};\n@@ -231,16 +230,14 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 })\n                 .collect();\n \n-            let body_ids: FxHashSet<_> = infcx\n+            let body_id_map: FxHashMap<_, _> = infcx\n                 .region_obligations\n                 .borrow()\n                 .iter()\n-                .map(|&(id, _)| id)\n+                .map(|&(id, _)| (id, vec![]))\n                 .collect();\n \n-            for id in body_ids {\n-                infcx.process_registered_region_obligations(&vec![], None, full_env.clone(), id);\n-            }\n+            infcx.process_registered_region_obligations(&body_id_map, None, full_env.clone());\n \n             let region_data = infcx\n                 .borrow_region_constraints()"}, {"sha": "bc3525adad562a4ab3c6d0f0722cd2edc74629da", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -88,7 +88,7 @@ use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n use middle::region;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::{self, UnlessNll};\n+use rustc::infer::{self, RegionObligation, UnlessNll};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::ty::adjustment;\n use rustc::ty::subst::Substs;\n@@ -390,16 +390,15 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         // which, when processed, might generate new region\n         // obligations. So make sure we process those.\n         self.select_all_obligations_or_error();\n+    }\n \n+    fn resolve_regions_and_report_errors(&self, unless_nll: UnlessNll) {\n         self.infcx.process_registered_region_obligations(\n-            self.outlives_environment.region_bound_pairs(),\n+            self.outlives_environment.region_bound_pairs_map(),\n             self.implicit_region_bound,\n             self.param_env,\n-            self.body_id,\n         );\n-    }\n \n-    fn resolve_regions_and_report_errors(&self, unless_nll: UnlessNll) {\n         self.fcx.resolve_regions_and_report_errors(\n             self.subject_def_id,\n             &self.region_scope_tree,\n@@ -1042,13 +1041,13 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,\n     ) {\n-        self.infcx.type_must_outlive(\n-            self.outlives_environment.region_bound_pairs(),\n-            self.implicit_region_bound,\n-            self.param_env,\n-            origin,\n-            ty,\n-            region,\n+        self.infcx.register_region_obligation(\n+            self.body_id,\n+            RegionObligation {\n+                sub_region: region,\n+                sup_type: ty,\n+                origin,\n+            },\n         );\n     }\n "}, {"sha": "3406d534896600aac3fc7ddd15e8047e17577c9d", "filename": "src/test/ui/issues/issue-16922.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e305a8a23dc6f8e71dadc2670448ed14bf5962d/src%2Ftest%2Fui%2Fissues%2Fissue-16922.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e305a8a23dc6f8e71dadc2670448ed14bf5962d/src%2Ftest%2Fui%2Fissues%2Fissue-16922.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.nll.stderr?ref=9e305a8a23dc6f8e71dadc2670448ed14bf5962d", "patch": "@@ -1,11 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `value`\n-  --> $DIR/issue-16922.rs:14:5\n-   |\n-LL | fn foo<T: Any>(value: &T) -> Box<Any> {\n-   |                       -- help: add explicit lifetime `'static` to the type of `value`: `&'static T`\n-LL |     Box::new(value) as Box<Any>\n-   |     ^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "3406d534896600aac3fc7ddd15e8047e17577c9d", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -4,7 +4,7 @@ error[E0621]: explicit lifetime required in the type of `value`\n LL | fn foo<T: Any>(value: &T) -> Box<Any> {\n    |                       -- help: add explicit lifetime `'static` to the type of `value`: `&'static T`\n LL |     Box::new(value) as Box<Any>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+   |     ^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error: aborting due to previous error\n "}, {"sha": "b8c22583ff8d35314da5506430e407a63bfbef83", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -9,7 +9,7 @@ note: first, the lifetime cannot outlive the lifetime 'a as defined on the funct\n    |\n LL | fn load3<'a,'b>(ss: &'a SomeTrait) -> &'b SomeTrait {\n    |          ^^\n-note: ...so that the type `(dyn SomeTrait + 'a)` is not borrowed for too long\n+note: ...so that reference does not outlive borrowed content\n   --> $DIR/object-lifetime-default-elision.rs:81:5\n    |\n LL |     ss"}, {"sha": "314f43585fedbbe158fc9c42be8ae28847bd6586", "filename": "src/test/ui/regions/region-object-lifetime-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -9,7 +9,7 @@ note: first, the lifetime cannot outlive the lifetime 'a as defined on the funct\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a Foo) -> &'b () {\n    |                                          ^^\n-note: ...so that the type `(dyn Foo + 'a)` is not borrowed for too long\n+note: ...so that reference does not outlive borrowed content\n   --> $DIR/region-object-lifetime-2.rs:20:5\n    |\n LL |     x.borrowed() //~ ERROR cannot infer"}, {"sha": "a281b36946bfda687553b28fba46d7b73b0ee04a", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e0215a1f38e38f260f9295aca98e99f6f6a400/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=b2e0215a1f38e38f260f9295aca98e99f6f6a400", "patch": "@@ -26,7 +26,7 @@ note: first, the lifetime cannot outlive the lifetime 'a as defined on the funct\n    |\n LL | fn foo3<'a,'b>(x: &'a mut Dummy) -> &'b mut Dummy {\n    |         ^^\n-note: ...so that the type `(dyn Dummy + 'a)` is not borrowed for too long\n+note: ...so that reference does not outlive borrowed content\n   --> $DIR/regions-trait-object-subtyping.rs:25:5\n    |\n LL |     x //~ ERROR lifetime bound not satisfied"}]}