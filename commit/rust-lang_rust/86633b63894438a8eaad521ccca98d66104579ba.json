{"sha": "86633b63894438a8eaad521ccca98d66104579ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjMzYjYzODk0NDM4YThlYWFkNTIxY2NjYTk4ZDY2MTA0NTc5YmE=", "commit": {"author": {"name": "Bruce Mitchener", "email": "bruce.mitchener@gmail.com", "date": "2019-08-01T08:13:31Z"}, "committer": {"name": "Bruce Mitchener", "email": "bruce.mitchener@gmail.com", "date": "2019-08-01T18:36:36Z"}, "message": "Fix typos in doc comments.", "tree": {"sha": "8405dea880524e66847a1739d86f48f34f3de166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8405dea880524e66847a1739d86f48f34f3de166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86633b63894438a8eaad521ccca98d66104579ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86633b63894438a8eaad521ccca98d66104579ba", "html_url": "https://github.com/rust-lang/rust/commit/86633b63894438a8eaad521ccca98d66104579ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86633b63894438a8eaad521ccca98d66104579ba/comments", "author": {"login": "waywardmonkeys", "id": 178582, "node_id": "MDQ6VXNlcjE3ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/178582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waywardmonkeys", "html_url": "https://github.com/waywardmonkeys", "followers_url": "https://api.github.com/users/waywardmonkeys/followers", "following_url": "https://api.github.com/users/waywardmonkeys/following{/other_user}", "gists_url": "https://api.github.com/users/waywardmonkeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/waywardmonkeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waywardmonkeys/subscriptions", "organizations_url": "https://api.github.com/users/waywardmonkeys/orgs", "repos_url": "https://api.github.com/users/waywardmonkeys/repos", "events_url": "https://api.github.com/users/waywardmonkeys/events{/privacy}", "received_events_url": "https://api.github.com/users/waywardmonkeys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "waywardmonkeys", "id": 178582, "node_id": "MDQ6VXNlcjE3ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/178582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waywardmonkeys", "html_url": "https://github.com/waywardmonkeys", "followers_url": "https://api.github.com/users/waywardmonkeys/followers", "following_url": "https://api.github.com/users/waywardmonkeys/following{/other_user}", "gists_url": "https://api.github.com/users/waywardmonkeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/waywardmonkeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waywardmonkeys/subscriptions", "organizations_url": "https://api.github.com/users/waywardmonkeys/orgs", "repos_url": "https://api.github.com/users/waywardmonkeys/repos", "events_url": "https://api.github.com/users/waywardmonkeys/events{/privacy}", "received_events_url": "https://api.github.com/users/waywardmonkeys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c04e6d9e9063a0479fcfb125b0f03385d43332", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c04e6d9e9063a0479fcfb125b0f03385d43332", "html_url": "https://github.com/rust-lang/rust/commit/b5c04e6d9e9063a0479fcfb125b0f03385d43332"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "624b13d96472cfe1dad9ded9f9a134576666fba6", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=86633b63894438a8eaad521ccca98d66104579ba", "patch": "@@ -427,7 +427,7 @@ pub trait TryInto<T>: Sized {\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n /// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n-/// When the [`!`] type is stablized [`Infallible`] and [`!`] will be\n+/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n /// equivalent.\n ///\n /// `TryFrom<T>` can be implemented as follows:"}, {"sha": "64fdf504369f2a555335c87a837377e253b2e1ac", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=86633b63894438a8eaad521ccca98d66104579ba", "patch": "@@ -434,7 +434,7 @@ impl<T> MaybeUninit<T> {\n     /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject\n     /// to the usual drop handling.\n     ///\n-    /// Whenever possible, it is preferrable to use [`assume_init`] instead, which\n+    /// Whenever possible, it is preferable to use [`assume_init`] instead, which\n     /// prevents duplicating the content of the `MaybeUninit<T>`.\n     ///\n     /// # Safety"}, {"sha": "0ec4dd47b1ff017f8b0aaba6640caa9aceb2c95b", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=86633b63894438a8eaad521ccca98d66104579ba", "patch": "@@ -1611,7 +1611,7 @@ impl<T: ?Sized> *const T {\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be\n     /// used with the `add` method.\n     ///\n-    /// There are no guarantees whatsover that offsetting the pointer will not overflow or go\n+    /// There are no guarantees whatsoever that offsetting the pointer will not overflow or go\n     /// beyond the allocation that the pointer points into. It is up to the caller to ensure that\n     /// the returned offset is correct in all terms other than alignment.\n     ///\n@@ -2412,7 +2412,7 @@ impl<T: ?Sized> *mut T {\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be\n     /// used with the `add` method.\n     ///\n-    /// There are no guarantees whatsover that offsetting the pointer will not overflow or go\n+    /// There are no guarantees whatsoever that offsetting the pointer will not overflow or go\n     /// beyond the allocation that the pointer points into. It is up to the caller to ensure that\n     /// the returned offset is correct in all terms other than alignment.\n     ///"}, {"sha": "2486f29ab0f222606d5814d299ecff8df1468a48", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=86633b63894438a8eaad521ccca98d66104579ba", "patch": "@@ -167,7 +167,7 @@ struct TraitObligationStack<'prev, 'tcx> {\n     /// ok on the premise that if `A: AutoTrait` held, but we indeed\n     /// encountered a problem (later on) with `A: AutoTrait. So we\n     /// currently set a flag on the stack node for `B: AutoTrait` (as\n-    /// well as the second instance of `A: AutoTrait`) to supress\n+    /// well as the second instance of `A: AutoTrait`) to suppress\n     /// caching.\n     ///\n     /// This is a simple, targeted fix. A more-performant fix requires\n@@ -1105,7 +1105,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///\n     /// - is a defaulted trait,\n     /// - it also appears in the backtrace at some position `X`,\n-    /// - all the predicates at positions `X..` between `X` an the top are\n+    /// - all the predicates at positions `X..` between `X` and the top are\n     ///   also defaulted traits.\n     pub fn coinductive_match<I>(&mut self, cycle: I) -> bool\n     where"}, {"sha": "002aa2f891e4b599d6e23a76ac28c888e5e61a14", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86633b63894438a8eaad521ccca98d66104579ba/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=86633b63894438a8eaad521ccca98d66104579ba", "patch": "@@ -368,7 +368,7 @@ pub fn stream_to_parser_with_base_dir<'a>(\n \n /// A sequence separator.\n pub struct SeqSep {\n-    /// The seperator token.\n+    /// The separator token.\n     pub sep: Option<TokenKind>,\n     /// `true` if a trailing separator is allowed.\n     pub trailing_sep_allowed: bool,"}]}