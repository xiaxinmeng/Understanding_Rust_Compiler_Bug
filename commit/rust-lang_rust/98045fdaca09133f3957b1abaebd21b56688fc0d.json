{"sha": "98045fdaca09133f3957b1abaebd21b56688fc0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MDQ1ZmRhY2EwOTEzM2YzOTU3YjFhYmFlYmQyMWI1NjY4OGZjMGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-05T21:20:58Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-05T21:20:58Z"}, "message": "Add missing links for AtomicBool", "tree": {"sha": "30e23fb7438860a9474ecd6d35d4aa1420f00aed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e23fb7438860a9474ecd6d35d4aa1420f00aed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98045fdaca09133f3957b1abaebd21b56688fc0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98045fdaca09133f3957b1abaebd21b56688fc0d", "html_url": "https://github.com/rust-lang/rust/commit/98045fdaca09133f3957b1abaebd21b56688fc0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98045fdaca09133f3957b1abaebd21b56688fc0d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f0f5db465de96b6c12e71f0c7d3e475f618b104", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0f5db465de96b6c12e71f0c7d3e475f618b104", "html_url": "https://github.com/rust-lang/rust/commit/0f0f5db465de96b6c12e71f0c7d3e475f618b104"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "524f4508c9b1a8e4c8a532f16912c951d64dc81b", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98045fdaca09133f3957b1abaebd21b56688fc0d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98045fdaca09133f3957b1abaebd21b56688fc0d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=98045fdaca09133f3957b1abaebd21b56688fc0d", "patch": "@@ -119,7 +119,9 @@ pub fn hint_core_should_pause()\n \n /// A boolean type which can be safely shared between threads.\n ///\n-/// This type has the same in-memory representation as a `bool`.\n+/// This type has the same in-memory representation as a [`bool`].\n+///\n+/// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct AtomicBool {\n@@ -246,11 +248,13 @@ impl AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n \n-    /// Returns a mutable reference to the underlying `bool`.\n+    /// Returns a mutable reference to the underlying [`bool`].\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n     /// concurrently accessing the atomic data.\n     ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -369,7 +373,7 @@ impl AtomicBool {\n         unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }\n     }\n \n-    /// Stores a value into the `bool` if the current value is the same as the `current` value.\n+    /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n     /// The return value is always the previous value. If it is equal to `current`, then the value\n     /// was updated.\n@@ -378,6 +382,7 @@ impl AtomicBool {\n     /// ordering of this operation.\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`bool`]: ../../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -401,7 +406,7 @@ impl AtomicBool {\n         }\n     }\n \n-    /// Stores a value into the `bool` if the current value is the same as the `current` value.\n+    /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n     /// The return value is a result indicating whether the new value was written and containing\n     /// the previous value. On success this value is guaranteed to be equal to `current`.\n@@ -412,6 +417,7 @@ impl AtomicBool {\n     /// operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and must\n     /// be equivalent or weaker than the success ordering.\n     ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Release`]: enum.Ordering.html#variant.Release\n     /// [`AcqRel`]: enum.Ordering.html#variant.Release\n@@ -452,7 +458,7 @@ impl AtomicBool {\n         }\n     }\n \n-    /// Stores a value into the `bool` if the current value is the same as the `current` value.\n+    /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n     /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n@@ -465,6 +471,7 @@ impl AtomicBool {\n     /// failure ordering can't be [`Release`] or [`AcqRel`] and must be equivalent or\n     /// weaker than the success ordering.\n     ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Release`]: enum.Ordering.html#variant.Release"}]}