{"sha": "abdb69392296233c81a6ffb4247e785f76547706", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZGI2OTM5MjI5NjIzM2M4MWE2ZmZiNDI0N2U3ODVmNzY1NDc3MDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-21T12:10:59Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-21T12:18:35Z"}, "message": "Handle comments in match better (fixes #344)", "tree": {"sha": "6adfe48bc171f803b04596e8bbc6f350a91f7c08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6adfe48bc171f803b04596e8bbc6f350a91f7c08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abdb69392296233c81a6ffb4247e785f76547706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abdb69392296233c81a6ffb4247e785f76547706", "html_url": "https://github.com/rust-lang/rust/commit/abdb69392296233c81a6ffb4247e785f76547706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abdb69392296233c81a6ffb4247e785f76547706/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7866d0e53bd13deefea434473beb61b234df6c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7866d0e53bd13deefea434473beb61b234df6c4", "html_url": "https://github.com/rust-lang/rust/commit/b7866d0e53bd13deefea434473beb61b234df6c4"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "2c57bb5b64de49392b3f192414f6fa5841ab2585", "filename": "src/expr.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/abdb69392296233c81a6ffb4247e785f76547706/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdb69392296233c81a6ffb4247e785f76547706/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=abdb69392296233c81a6ffb4247e785f76547706", "patch": "@@ -117,7 +117,7 @@ impl Rewrite for ast::Expr {\n                               offset)\n             }\n             ast::Expr_::ExprMatch(ref cond, ref arms, _) => {\n-                rewrite_match(context, cond, arms, width, offset)\n+                rewrite_match(context, cond, arms, width, offset, self.span)\n             }\n             ast::Expr_::ExprPath(ref qself, ref path) => {\n                 rewrite_path(context, qself.as_ref(), path, width, offset)\n@@ -624,7 +624,8 @@ fn rewrite_match(context: &RewriteContext,\n                  cond: &ast::Expr,\n                  arms: &[ast::Arm],\n                  width: usize,\n-                 offset: Indent)\n+                 offset: Indent,\n+                 span: Span)\n                  -> Option<String> {\n     if arms.is_empty() {\n         return None;\n@@ -666,7 +667,8 @@ fn rewrite_match(context: &RewriteContext,\n         if !missed_str.is_empty() {\n             result.push('\\n');\n             result.push_str(&arm_indent_str);\n-            result.push_str(missed_str);\n+            result.push_str(&rewrite_comment(&missed_str, false,\n+                                             width, arm_indent, context.config));\n         }\n         result.push('\\n');\n         result.push_str(&arm_indent_str);\n@@ -682,11 +684,23 @@ fn rewrite_match(context: &RewriteContext,\n             result.push_str(&snippet);\n         }\n     }\n-\n-    // We'll miss any comments etc. between the last arm and the end of the\n-    // match expression, but meh.\n+    let last_comment = context.snippet(mk_sp(arm_end_pos(&arms[arms.len() - 1]), span.hi));\n+    let last_comment = match last_comment.find_uncommented(\",\") {\n+        Some(n) => &last_comment[n+1..],\n+        None => &last_comment[..],\n+    };\n+    let last_comment = match last_comment.find_uncommented(\"}\") {\n+        Some(n) => &last_comment[..n-1],\n+        None => &last_comment[..],\n+    };\n+    let last_comment = last_comment.trim();\n \n     result.push('\\n');\n+    if last_comment.len() > 0 {\n+        result.push_str(&arm_indent_str);\n+        result.push_str(&rewrite_comment(&last_comment, false, width, arm_indent, context.config));\n+        result.push('\\n');\n+    }\n     result.push_str(&(context.block_indent + context.overflow_indent).to_string(context.config));\n     result.push('}');\n     Some(result)"}]}