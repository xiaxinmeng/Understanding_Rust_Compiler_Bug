{"sha": "e97686d048141d8a514337531f72f9471bc7c424", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NzY4NmQwNDgxNDFkOGE1MTQzMzc1MzFmNzJmOTQ3MWJjN2M0MjQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-15T07:37:10Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-20T12:36:30Z"}, "message": "Move `MetaItemKind`'s `Name` to a field of `MetaItem`.", "tree": {"sha": "ab28bcc9e28be5186cf898f7bfade44fc4e500cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab28bcc9e28be5186cf898f7bfade44fc4e500cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97686d048141d8a514337531f72f9471bc7c424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97686d048141d8a514337531f72f9471bc7c424", "html_url": "https://github.com/rust-lang/rust/commit/e97686d048141d8a514337531f72f9471bc7c424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97686d048141d8a514337531f72f9471bc7c424/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9b0d3474ec64133fe797d8fcf8a03c803bac8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b0d3474ec64133fe797d8fcf8a03c803bac8a", "html_url": "https://github.com/rust-lang/rust/commit/4b9b0d3474ec64133fe797d8fcf8a03c803bac8a"}], "stats": {"total": 141, "additions": 70, "deletions": 71}, "files": [{"sha": "a0863e0d29422b7dbbf214e0f3372f3f8f1053d9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -615,7 +615,8 @@ impl RustcDefaultCalls {\n                     let mut cfgs = Vec::new();\n                     for &(name, ref value) in sess.parse_sess.config.iter() {\n                         let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            node: ast::MetaItemKind::Word(name),\n+                            name: name,\n+                            node: ast::MetaItemKind::Word,\n                             span: DUMMY_SP,\n                         });\n                         if !allow_unstable_cfg && gated_cfg.is_some() {"}, {"sha": "71738b2a7d3d0e48ff5cf478c9cc0af3b8e979c8", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -874,22 +874,20 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n \n         // ignoring span information, it doesn't matter here\n         self.hash_discriminant(&meta_item.node);\n+        let name = &*meta_item.name.as_str();\n         match meta_item.node {\n-            ast::MetaItemKind::Word(s) => {\n-                let s = &*s.as_str();\n-                s.len().hash(self.st);\n-                s.hash(self.st);\n+            ast::MetaItemKind::Word => {\n+                name.len().hash(self.st);\n+                name.hash(self.st);\n             }\n-            ast::MetaItemKind::NameValue(s, ref lit) => {\n-                let s = &*s.as_str();\n-                s.len().hash(self.st);\n-                s.hash(self.st);\n+            ast::MetaItemKind::NameValue(ref lit) => {\n+                name.len().hash(self.st);\n+                name.hash(self.st);\n                 lit.node.hash(self.st);\n             }\n-            ast::MetaItemKind::List(s, ref items) => {\n-                let s = &*s.as_str();\n-                s.len().hash(self.st);\n-                s.hash(self.st);\n+            ast::MetaItemKind::List(ref items) => {\n+                name.len().hash(self.st);\n+                name.hash(self.st);\n                 // Sort subitems so the hash does not depend on their order\n                 let indices = self.indices_sorted_by(&items, |p| {\n                     (p.name(), fnv::hash(&p.literal().map(|i| &i.node)))"}, {"sha": "15bcdde058f8dc46bb2961bc9d7cc7c2e8205a40", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -515,7 +515,12 @@ pub enum NestedMetaItemKind {\n /// A spanned compile-time attribute item.\n ///\n /// E.g. `#[test]`, `#[derive(..)]` or `#[feature = \"foo\"]`\n-pub type MetaItem = Spanned<MetaItemKind>;\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct MetaItem {\n+    pub name: Name,\n+    pub node: MetaItemKind,\n+    pub span: Span,\n+}\n \n /// A compile-time attribute item.\n ///\n@@ -525,15 +530,15 @@ pub enum MetaItemKind {\n     /// Word meta item.\n     ///\n     /// E.g. `test` as in `#[test]`\n-    Word(Name),\n+    Word,\n     /// List meta item.\n     ///\n     /// E.g. `derive(..)` as in `#[derive(..)]`\n-    List(Name, Vec<NestedMetaItem>),\n+    List(Vec<NestedMetaItem>),\n     /// Name value meta item.\n     ///\n     /// E.g. `feature = \"foo\"` as in `#[feature = \"foo\"]`\n-    NameValue(Name, Lit),\n+    NameValue(Lit)\n }\n \n /// A Block (`{ .. }`)."}, {"sha": "db43bb0285738d5d7c26c4a0e66ad9b1875ef060", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -18,7 +18,7 @@ use ast;\n use ast::{AttrId, Attribute, Name};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, Expr, Item, Local, Stmt, StmtKind};\n-use codemap::{respan, spanned, dummy_spanned, mk_sp};\n+use codemap::{spanned, dummy_spanned, mk_sp};\n use syntax_pos::{Span, BytePos, DUMMY_SP};\n use errors::Handler;\n use feature_gate::{Features, GatedCfg};\n@@ -219,16 +219,12 @@ impl Attribute {\n \n impl MetaItem {\n     pub fn name(&self) -> Name {\n-        match self.node {\n-            MetaItemKind::Word(n) => n,\n-            MetaItemKind::NameValue(n, _) => n,\n-            MetaItemKind::List(n, _) => n,\n-        }\n+        self.name\n     }\n \n     pub fn value_str(&self) -> Option<InternedString> {\n         match self.node {\n-            MetaItemKind::NameValue(_, ref v) => {\n+            MetaItemKind::NameValue(ref v) => {\n                 match v.node {\n                     ast::LitKind::Str(ref s, _) => Some((*s).clone()),\n                     _ => None,\n@@ -240,14 +236,14 @@ impl MetaItem {\n \n     pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n         match self.node {\n-            MetaItemKind::List(_, ref l) => Some(&l[..]),\n+            MetaItemKind::List(ref l) => Some(&l[..]),\n             _ => None\n         }\n     }\n \n     pub fn is_word(&self) -> bool {\n         match self.node {\n-            MetaItemKind::Word(_) => true,\n+            MetaItemKind::Word => true,\n             _ => false,\n         }\n     }\n@@ -320,15 +316,15 @@ pub fn mk_word_item(name: Name) -> P<MetaItem> {\n }\n \n pub fn mk_spanned_name_value_item(sp: Span, name: Name, value: ast::Lit) -> P<MetaItem> {\n-    P(respan(sp, MetaItemKind::NameValue(name, value)))\n+    P(MetaItem { span: sp, name: name, node: MetaItemKind::NameValue(value) })\n }\n \n pub fn mk_spanned_list_item(sp: Span, name: Name, items: Vec<NestedMetaItem>) -> P<MetaItem> {\n-    P(respan(sp, MetaItemKind::List(name, items)))\n+    P(MetaItem { span: sp, name: name, node: MetaItemKind::List(items) })\n }\n \n pub fn mk_spanned_word_item(sp: Span, name: Name) -> P<MetaItem> {\n-    P(respan(sp, MetaItemKind::Word(name)))\n+    P(MetaItem { span: sp, name: name, node: MetaItemKind::Word })\n }\n \n \n@@ -394,7 +390,11 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos, hi: By\n     Attribute {\n         id: id,\n         style: style,\n-        value: P(spanned(lo, hi, MetaItemKind::NameValue(token::intern(\"doc\"), lit))),\n+        value: P(MetaItem {\n+            span: mk_sp(lo, hi),\n+            name: token::intern(\"doc\"),\n+            node: MetaItemKind::NameValue(lit),\n+        }),\n         is_sugared_doc: true,\n         span: mk_sp(lo, hi),\n     }\n@@ -472,13 +472,14 @@ pub enum InlineAttr {\n \n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n pub fn find_inline_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> InlineAttr {\n-    attrs.iter().fold(InlineAttr::None, |ia,attr| {\n+    attrs.iter().fold(InlineAttr::None, |ia, attr| {\n         match attr.value.node {\n-            MetaItemKind::Word(n) if n == \"inline\" => {\n+            _ if attr.value.name != \"inline\" => ia,\n+            MetaItemKind::Word => {\n                 mark_used(attr);\n                 InlineAttr::Hint\n             }\n-            MetaItemKind::List(n, ref items) if n == \"inline\" => {\n+            MetaItemKind::List(ref items) => {\n                 mark_used(attr);\n                 if items.len() != 1 {\n                     diagnostic.map(|d|{ span_err!(d, attr.span, E0534, \"expected one argument\"); });\n@@ -511,7 +512,7 @@ pub fn requests_inline(attrs: &[Attribute]) -> bool {\n /// Tests if a cfg-pattern matches the cfg set\n pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) -> bool {\n     match cfg.node {\n-        ast::MetaItemKind::List(ref pred, ref mis) => {\n+        ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {\n                 if !mi.is_meta_item() {\n                     handle_errors(&sess.span_diagnostic, mi.span, AttrError::UnsupportedLiteral);\n@@ -521,7 +522,7 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n \n             // The unwraps below may look dangerous, but we've already asserted\n             // that they won't fail with the loop above.\n-            match &*pred.as_str() {\n+            match &*cfg.name.as_str() {\n                 \"any\" => mis.iter().any(|mi| {\n                     cfg_matches(mi.meta_item().unwrap(), sess, features)\n                 }),\n@@ -542,7 +543,7 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                 }\n             }\n         },\n-        ast::MetaItemKind::Word(_) | ast::MetaItemKind::NameValue(..) => {\n+        ast::MetaItemKind::Word | ast::MetaItemKind::NameValue(..) => {\n             if let (Some(feats), Some(gated_cfg)) = (features, GatedCfg::gate(cfg)) {\n                 gated_cfg.check_and_emit(sess, feats);\n             }\n@@ -880,7 +881,7 @@ pub fn require_unique_names(diagnostic: &Handler, metas: &[P<MetaItem>]) {\n pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr> {\n     let mut acc = Vec::new();\n     match attr.value.node {\n-        ast::MetaItemKind::List(s, ref items) if s == \"repr\" => {\n+        ast::MetaItemKind::List(ref items) if attr.value.name == \"repr\" => {\n             mark_used(attr);\n             for item in items {\n                 if !item.is_meta_item() {"}, {"sha": "89eea3f6f8b288790ed0648bc293db97f15f9228", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -133,7 +133,7 @@ impl<'a> StripUnconfigured<'a> {\n             }\n \n             let mis = match attr.value.node {\n-                ast::MetaItemKind::List(_, ref mis) if is_cfg(&attr) => mis,\n+                ast::MetaItemKind::List(ref mis) if is_cfg(&attr) => mis,\n                 _ => return true\n             };\n "}, {"sha": "68562e02f9a834e48f9fc7ef82f89e128a190057", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -991,9 +991,9 @@ fn contains_novel_literal(item: &ast::MetaItem) -> bool {\n     use ast::NestedMetaItemKind::*;\n \n     match item.node {\n-        Word(..) => false,\n-        NameValue(_, ref lit) => !lit.node.is_str(),\n-        List(_, ref list) => list.iter().any(|li| {\n+        Word => false,\n+        NameValue(ref lit) => !lit.node.is_str(),\n+        List(ref list) => list.iter().any(|li| {\n             match li.node {\n                 MetaItem(ref mi) => contains_novel_literal(&**mi),\n                 Literal(_) => true,"}, {"sha": "2a544eee0045076ffd54f4723a2589c4f5b52039", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -520,13 +520,14 @@ pub fn noop_fold_meta_list_item<T: Folder>(li: NestedMetaItem, fld: &mut T)\n }\n \n pub fn noop_fold_meta_item<T: Folder>(mi: P<MetaItem>, fld: &mut T) -> P<MetaItem> {\n-    mi.map(|Spanned {node, span}| Spanned {\n+    mi.map(|MetaItem { name, node, span }| MetaItem {\n+        name: name,\n         node: match node {\n-            MetaItemKind::Word(id) => MetaItemKind::Word(id),\n-            MetaItemKind::List(id, mis) => {\n-                MetaItemKind::List(id, mis.move_map(|e| fld.fold_meta_list_item(e)))\n-            }\n-            MetaItemKind::NameValue(id, s) => MetaItemKind::NameValue(id, s)\n+            MetaItemKind::Word => MetaItemKind::Word,\n+            MetaItemKind::List(mis) => {\n+                MetaItemKind::List(mis.move_map(|e| fld.fold_meta_list_item(e)))\n+            },\n+            MetaItemKind::NameValue(s) => MetaItemKind::NameValue(s),\n         },\n         span: fld.new_span(span)\n     })"}, {"sha": "f6405807a2531edec63b70117678a0c2af6f33ee", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -227,23 +227,15 @@ impl<'a> Parser<'a> {\n \n         let lo = self.span.lo;\n         let ident = self.parse_ident()?;\n-        match self.token {\n-            token::Eq => {\n-                self.bump();\n-                let lit = self.parse_unsuffixed_lit()?;\n-                let hi = self.prev_span.hi;\n-                Ok(P(spanned(lo, hi, ast::MetaItemKind::NameValue(ident.name, lit))))\n-            }\n-            token::OpenDelim(token::Paren) => {\n-                let inner_items = self.parse_meta_seq()?;\n-                let hi = self.prev_span.hi;\n-                Ok(P(spanned(lo, hi, ast::MetaItemKind::List(ident.name, inner_items))))\n-            }\n-            _ => {\n-                let hi = self.prev_span.hi;\n-                Ok(P(spanned(lo, hi, ast::MetaItemKind::Word(ident.name))))\n-            }\n-        }\n+        let node = if self.eat(&token::Eq) {\n+            ast::MetaItemKind::NameValue(self.parse_unsuffixed_lit()?)\n+        } else if self.token == token::OpenDelim(token::Paren) {\n+            ast::MetaItemKind::List(self.parse_meta_seq()?)\n+        } else {\n+            ast::MetaItemKind::Word\n+        };\n+        let hi = self.prev_span.hi;\n+        Ok(P(ast::MetaItem { name: ident.name, node: node, span: mk_sp(lo, hi) }))\n     }\n \n     /// matches meta_item_inner : (meta_item | UNSUFFIXED_LIT) ;"}, {"sha": "da766d176728b6b90723270b379a84db30849238", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -777,16 +777,16 @@ pub trait PrintState<'a> {\n     fn print_meta_item(&mut self, item: &ast::MetaItem) -> io::Result<()> {\n         try!(self.ibox(INDENT_UNIT));\n         match item.node {\n-            ast::MetaItemKind::Word(ref name) => {\n-                try!(word(self.writer(), &name.as_str()));\n+            ast::MetaItemKind::Word => {\n+                try!(word(self.writer(), &item.name.as_str()));\n             }\n-            ast::MetaItemKind::NameValue(ref name, ref value) => {\n-                try!(self.word_space(&name.as_str()));\n+            ast::MetaItemKind::NameValue(ref value) => {\n+                try!(self.word_space(&item.name.as_str()));\n                 try!(self.word_space(\"=\"));\n                 try!(self.print_literal(value));\n             }\n-            ast::MetaItemKind::List(ref name, ref items) => {\n-                try!(word(self.writer(), &name.as_str()));\n+            ast::MetaItemKind::List(ref items) => {\n+                try!(word(self.writer(), &item.name.as_str()));\n                 try!(self.popen());\n                 try!(self.commasep(Consistent,\n                               &items[..],"}, {"sha": "e999af29079185ab4c991f617b28970a739c92f2", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97686d048141d8a514337531f72f9471bc7c424/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=e97686d048141d8a514337531f72f9471bc7c424", "patch": "@@ -70,7 +70,8 @@ pub fn maybe_inject_crates_ref(sess: &ParseSess,\n         attrs: vec![ast::Attribute {\n             style: ast::AttrStyle::Outer,\n             value: P(ast::MetaItem {\n-                node: ast::MetaItemKind::Word(token::intern(\"prelude_import\")),\n+                name: token::intern(\"prelude_import\"),\n+                node: ast::MetaItemKind::Word,\n                 span: span,\n             }),\n             id: attr::mk_attr_id(),"}]}