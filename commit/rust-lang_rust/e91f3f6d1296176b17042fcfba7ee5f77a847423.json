{"sha": "e91f3f6d1296176b17042fcfba7ee5f77a847423", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MWYzZjZkMTI5NjE3NmIxNzA0MmZjZmJhN2VlNWY3N2E4NDc0MjM=", "commit": {"author": {"name": "Antti Ker\u00e4nen", "email": "detegr@gmail.com", "date": "2016-08-07T07:40:38Z"}, "committer": {"name": "Antti Ker\u00e4nen", "email": "detegr@gmail.com", "date": "2016-08-07T07:40:38Z"}, "message": "Update error E0118 to new format\n\nFixes #35251\nAlso changes the span of the error to the span of the type\nas suggested in the bonus section of #35251", "tree": {"sha": "45aecef3469e166aa1f480fdf33e46387a864726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45aecef3469e166aa1f480fdf33e46387a864726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e91f3f6d1296176b17042fcfba7ee5f77a847423", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJXpuawAAoJEHfoyZdWypfErdMIAMWYJpSrQqxa+lHNSrS15YaB\nT7vx1W8P7b+l6EvDhIASl1wVGDsRXt+HgHdOifN/8s3H0CDcxVlmtkao3C8jIFsZ\nglcS20RRpOu33c8B+tvEEmlOObuXFZqUzUsbojQqmVQIGDJwm/mxbnHI2QmY47wu\nhxiZ5sUWPg1Qb2aORyGe6zNAKaOF2NwV0K7rhJk3LNFkP0uDdLmWRucY95IeYi8m\nKUeeJcn50UzmziGcjvbfKbQREax2wBOTsbLq4JSluMR4o/kMreHMMJwU97ICAof0\nxqv3wP6djuSYVRbMUaFPs/DP0aBO9Kny0QZUxc6hplPavsPHMIKGrl4TVh3WnHQ=\n=n67I\n-----END PGP SIGNATURE-----", "payload": "tree 45aecef3469e166aa1f480fdf33e46387a864726\nparent ac10b5f127f634a1d9a45ddf6d0f2904a2cabe42\nauthor Antti Ker\u00e4nen <detegr@gmail.com> 1470555638 +0300\ncommitter Antti Ker\u00e4nen <detegr@gmail.com> 1470555638 +0300\n\nUpdate error E0118 to new format\n\nFixes #35251\nAlso changes the span of the error to the span of the type\nas suggested in the bonus section of #35251\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e91f3f6d1296176b17042fcfba7ee5f77a847423", "html_url": "https://github.com/rust-lang/rust/commit/e91f3f6d1296176b17042fcfba7ee5f77a847423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e91f3f6d1296176b17042fcfba7ee5f77a847423/comments", "author": {"login": "Detegr", "id": 724433, "node_id": "MDQ6VXNlcjcyNDQzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/724433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Detegr", "html_url": "https://github.com/Detegr", "followers_url": "https://api.github.com/users/Detegr/followers", "following_url": "https://api.github.com/users/Detegr/following{/other_user}", "gists_url": "https://api.github.com/users/Detegr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Detegr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Detegr/subscriptions", "organizations_url": "https://api.github.com/users/Detegr/orgs", "repos_url": "https://api.github.com/users/Detegr/repos", "events_url": "https://api.github.com/users/Detegr/events{/privacy}", "received_events_url": "https://api.github.com/users/Detegr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Detegr", "id": 724433, "node_id": "MDQ6VXNlcjcyNDQzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/724433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Detegr", "html_url": "https://github.com/Detegr", "followers_url": "https://api.github.com/users/Detegr/followers", "following_url": "https://api.github.com/users/Detegr/following{/other_user}", "gists_url": "https://api.github.com/users/Detegr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Detegr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Detegr/subscriptions", "organizations_url": "https://api.github.com/users/Detegr/orgs", "repos_url": "https://api.github.com/users/Detegr/repos", "events_url": "https://api.github.com/users/Detegr/events{/privacy}", "received_events_url": "https://api.github.com/users/Detegr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac10b5f127f634a1d9a45ddf6d0f2904a2cabe42", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac10b5f127f634a1d9a45ddf6d0f2904a2cabe42", "html_url": "https://github.com/rust-lang/rust/commit/ac10b5f127f634a1d9a45ddf6d0f2904a2cabe42"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "2f2668e9645bf32d6216dddaaf30762b130354d3", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e91f3f6d1296176b17042fcfba7ee5f77a847423/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91f3f6d1296176b17042fcfba7ee5f77a847423/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=e91f3f6d1296176b17042fcfba7ee5f77a847423", "patch": "@@ -66,7 +66,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_item(&self, item: &hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         match item.node {\n-            hir::ItemImpl(_, _, _, None, _, _) => {\n+            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\",\n@@ -209,11 +209,11 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                         return;\n                     }\n                     _ => {\n-                        struct_span_err!(self.tcx.sess, item.span, E0118,\n+                        struct_span_err!(self.tcx.sess, ty.span, E0118,\n                                          \"no base type found for inherent implementation\")\n-                        .span_help(item.span,\n-                                   \"either implement a trait on it or create a newtype to wrap it \\\n-                                    instead\")\n+                        .span_label(ty.span, &format!(\"impl requires a base type\"))\n+                        .note(&format!(\"either implement a trait on it or create a newtype \\\n+                                        to wrap it instead\"))\n                         .emit();\n                         return;\n                     }"}, {"sha": "3fc478f1e403e3adf57ed00c48e547b1c1f1dfbb", "filename": "src/test/compile-fail/E0118.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91f3f6d1296176b17042fcfba7ee5f77a847423/src%2Ftest%2Fcompile-fail%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91f3f6d1296176b17042fcfba7ee5f77a847423/src%2Ftest%2Fcompile-fail%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0118.rs?ref=e91f3f6d1296176b17042fcfba7ee5f77a847423", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n impl (u8, u8) { //~ ERROR E0118\n+//~^ NOTE impl requires a base type\n+//~| NOTE either implement a trait on it or create a newtype to wrap it instead\n     fn get_state(&self) -> String {\n         String::new()\n     }"}]}