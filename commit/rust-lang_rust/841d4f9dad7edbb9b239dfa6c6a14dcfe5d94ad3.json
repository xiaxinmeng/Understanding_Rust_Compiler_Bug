{"sha": "841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "node_id": "C_kwDOAAsO6NoAKDg0MWQ0ZjlkYWQ3ZWRiYjliMjM5ZGZhNmM2YTE0ZGNmZTVkOTRhZDM", "commit": {"author": {"name": "Brendan Cully", "email": "brendan@cully.org", "date": "2021-10-10T02:49:34Z"}, "committer": {"name": "Brendan Cully", "email": "brendan@cully.org", "date": "2021-10-12T01:28:05Z"}, "message": "Only include targets of packages that are workspace members\n\nCargoWorkspace's package list includes packages that are path\ndependencies, even if those packages aren't actually members of the\ncargo workspace. As a result, rust-analyzer's runnable finder, which\nreturns the target from the first workspace that has a matching package,\nmay select the wrong working directory, causing runnables to fail, e.g.,\n```\nerror: package `root` cannot be tested because it requires dev-dependencies and is not a member of the workspace\n```\n\nTo fix this, we filter out packages that aren't members of the workspace\nwhen searching for targets.\n\nFixes #7764", "tree": {"sha": "247878e18525a6fe8cb750827c466b7e9e67b188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247878e18525a6fe8cb750827c466b7e9e67b188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "html_url": "https://github.com/rust-lang/rust/commit/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3/comments", "author": {"login": "bcully", "id": 206236, "node_id": "MDQ6VXNlcjIwNjIzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/206236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcully", "html_url": "https://github.com/bcully", "followers_url": "https://api.github.com/users/bcully/followers", "following_url": "https://api.github.com/users/bcully/following{/other_user}", "gists_url": "https://api.github.com/users/bcully/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcully/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcully/subscriptions", "organizations_url": "https://api.github.com/users/bcully/orgs", "repos_url": "https://api.github.com/users/bcully/repos", "events_url": "https://api.github.com/users/bcully/events{/privacy}", "received_events_url": "https://api.github.com/users/bcully/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bcully", "id": 206236, "node_id": "MDQ6VXNlcjIwNjIzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/206236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcully", "html_url": "https://github.com/bcully", "followers_url": "https://api.github.com/users/bcully/followers", "following_url": "https://api.github.com/users/bcully/following{/other_user}", "gists_url": "https://api.github.com/users/bcully/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcully/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcully/subscriptions", "organizations_url": "https://api.github.com/users/bcully/orgs", "repos_url": "https://api.github.com/users/bcully/repos", "events_url": "https://api.github.com/users/bcully/events{/privacy}", "received_events_url": "https://api.github.com/users/bcully/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098284aec8c8282e77682deace6c61603a88ee01", "url": "https://api.github.com/repos/rust-lang/rust/commits/098284aec8c8282e77682deace6c61603a88ee01", "html_url": "https://github.com/rust-lang/rust/commit/098284aec8c8282e77682deace6c61603a88ee01"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "dccdf1d431a3bb6ddcea63bcdac6524ae91796a9", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "patch": "@@ -137,6 +137,8 @@ pub struct PackageData {\n     pub targets: Vec<Target>,\n     /// Does this package come from the local filesystem (and is editable)?\n     pub is_local: bool,\n+    // Whether this package is a member of the workspace\n+    pub is_member: bool,\n     /// List of packages this package depends on\n     pub dependencies: Vec<PackageDependency>,\n     /// Rust edition for this package\n@@ -296,6 +298,8 @@ impl CargoWorkspace {\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();\n \n+        let ws_members = &meta.workspace_members;\n+\n         meta.packages.sort_by(|a, b| a.id.cmp(&b.id));\n         for meta_pkg in &meta.packages {\n             let cargo_metadata::Package {\n@@ -309,6 +313,7 @@ impl CargoWorkspace {\n             // We treat packages without source as \"local\" packages. That includes all members of\n             // the current workspace, as well as any path dependency outside the workspace.\n             let is_local = meta_pkg.source.is_none();\n+            let is_member = ws_members.contains(id);\n \n             let pkg = packages.alloc(PackageData {\n                 id: id.repr.clone(),\n@@ -317,6 +322,7 @@ impl CargoWorkspace {\n                 manifest: AbsPathBuf::assert(PathBuf::from(&manifest_path)).try_into().unwrap(),\n                 targets: Vec::new(),\n                 is_local,\n+                is_member,\n                 edition,\n                 dependencies: Vec::new(),\n                 features: meta_pkg.features.clone().into_iter().collect(),\n@@ -383,8 +389,8 @@ impl CargoWorkspace {\n \n     pub fn target_by_root(&self, root: &AbsPath) -> Option<Target> {\n         self.packages()\n-            .filter_map(|pkg| self[pkg].targets.iter().find(|&&it| &self[it].root == root))\n-            .next()\n+            .filter(|&pkg| self[pkg].is_member)\n+            .find_map(|pkg| self[pkg].targets.iter().find(|&&it| &self[it].root == root))\n             .copied()\n     }\n "}, {"sha": "9eb8ad1b720f4374d61d438c7a4cad6f20b45f72", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=841d4f9dad7edbb9b239dfa6c6a14dcfe5d94ad3", "patch": "@@ -202,6 +202,93 @@ fn main() {}\n     );\n }\n \n+// Each package in these workspaces should be run from its own root\n+#[test]\n+fn test_path_dependency_runnables() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let server = Project::with_fixture(\n+        r#\"\n+//- /consumer/Cargo.toml\n+[package]\n+name = \"consumer\"\n+version = \"0.1.0\"\n+[dependencies]\n+dependency = { path = \"../dependency\" }\n+\n+//- /consumer/src/lib.rs\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn consumer() {}\n+}\n+\n+//- /dependency/Cargo.toml\n+[package]\n+name = \"dependency\"\n+version = \"0.1.0\"\n+[dev-dependencies]\n+devdependency = { path = \"../devdependency\" }\n+\n+//- /dependency/src/lib.rs\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn dependency() {}\n+}\n+\n+//- /devdependency/Cargo.toml\n+[package]\n+name = \"devdependency\"\n+version = \"0.1.0\"\n+\n+//- /devdependency/src/lib.rs\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn devdependency() {}\n+}\n+        \"#,\n+    )\n+    .root(\"consumer\")\n+    .root(\"dependency\")\n+    .root(\"devdependency\")\n+    .server()\n+    .wait_until_workspace_is_loaded();\n+\n+    for runnable in [\"consumer\", \"dependency\", \"devdependency\"] {\n+        server.request::<Runnables>(\n+            RunnablesParams {\n+                text_document: server.doc_id(&format!(\"{}/src/lib.rs\", runnable)),\n+                position: None,\n+            },\n+            json!([\n+                \"{...}\",\n+                {\n+                    \"label\": \"cargo test -p [..] --all-targets\",\n+                    \"kind\": \"cargo\",\n+                    \"args\": {\n+                        \"overrideCargo\": null,\n+                        \"workspaceRoot\": server.path().join(runnable),\n+                        \"cargoArgs\": [\n+                            \"test\",\n+                            \"--package\",\n+                            runnable,\n+                            \"--all-targets\"\n+                        ],\n+                        \"cargoExtraArgs\": [],\n+                        \"executableArgs\": []\n+                    },\n+                },\n+                \"{...}\",\n+                \"{...}\"\n+            ]),\n+        );\n+    }\n+}\n+\n #[test]\n fn test_format_document() {\n     if skip_slow_tests() {"}]}