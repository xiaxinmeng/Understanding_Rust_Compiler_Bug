{"sha": "cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZGJmMmUxYzVlYWQ0NTdjYWY3ZmU5OTQ4NmRhMWNjMmYyZDA0ZjA=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-04-15T10:57:45Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-04-15T10:57:45Z"}, "message": "Finish GenericParamsOwnerEdit impls", "tree": {"sha": "13c3c22e8827b183b9d55121602b90d72488566a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13c3c22e8827b183b9d55121602b90d72488566a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0", "html_url": "https://github.com/rust-lang/rust/commit/cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144afa55a6031bb633c515c1cd20b110c123c5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/144afa55a6031bb633c515c1cd20b110c123c5e5", "html_url": "https://github.com/rust-lang/rust/commit/144afa55a6031bb633c515c1cd20b110c123c5e5"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "04f97f3682f12e3e089daa518be7f2cd9d9485da", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 94, "deletions": 5, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=cedbf2e1c5ead457caf7fe99486da1cc2f2d04f0", "patch": "@@ -23,7 +23,15 @@ impl GenericParamsOwnerEdit for ast::Fn {\n         match self.generic_param_list() {\n             Some(it) => it,\n             None => {\n-                let position = Position::after(self.name().unwrap().syntax);\n+                let position = if let Some(name) = self.name() {\n+                    Position::after(name.syntax)\n+                } else if let Some(fn_token) = self.fn_token() {\n+                    Position::after(fn_token)\n+                } else if let Some(param_list) = self.param_list() {\n+                    Position::before(param_list.syntax)\n+                } else {\n+                    Position::last_child_of(self.syntax())\n+                };\n                 create_generic_param_list(position)\n             }\n         }\n@@ -49,7 +57,11 @@ impl GenericParamsOwnerEdit for ast::Impl {\n         match self.generic_param_list() {\n             Some(it) => it,\n             None => {\n-                let position = Position::after(self.impl_token().unwrap());\n+                let position = if let Some(imp_token) = self.impl_token() {\n+                    Position::after(imp_token)\n+                } else {\n+                    Position::last_child_of(self.syntax())\n+                };\n                 create_generic_param_list(position)\n             }\n         }\n@@ -70,7 +82,19 @@ impl GenericParamsOwnerEdit for ast::Impl {\n \n impl GenericParamsOwnerEdit for ast::Trait {\n     fn get_or_create_generic_param_list(&self) -> ast::GenericParamList {\n-        todo!()\n+        match self.generic_param_list() {\n+            Some(it) => it,\n+            None => {\n+                let position = if let Some(name) = self.name() {\n+                    Position::after(name.syntax)\n+                } else if let Some(trait_token) = self.trait_token() {\n+                    Position::after(trait_token)\n+                } else {\n+                    Position::last_child_of(self.syntax())\n+                };\n+                create_generic_param_list(position)\n+            }\n+        }\n     }\n \n     fn get_or_create_where_clause(&self) -> WhereClause {\n@@ -88,7 +112,19 @@ impl GenericParamsOwnerEdit for ast::Trait {\n \n impl GenericParamsOwnerEdit for ast::Struct {\n     fn get_or_create_generic_param_list(&self) -> ast::GenericParamList {\n-        todo!()\n+        match self.generic_param_list() {\n+            Some(it) => it,\n+            None => {\n+                let position = if let Some(name) = self.name() {\n+                    Position::after(name.syntax)\n+                } else if let Some(struct_token) = self.struct_token() {\n+                    Position::after(struct_token)\n+                } else {\n+                    Position::last_child_of(self.syntax())\n+                };\n+                create_generic_param_list(position)\n+            }\n+        }\n     }\n \n     fn get_or_create_where_clause(&self) -> WhereClause {\n@@ -114,7 +150,19 @@ impl GenericParamsOwnerEdit for ast::Struct {\n \n impl GenericParamsOwnerEdit for ast::Enum {\n     fn get_or_create_generic_param_list(&self) -> ast::GenericParamList {\n-        todo!()\n+        match self.generic_param_list() {\n+            Some(it) => it,\n+            None => {\n+                let position = if let Some(name) = self.name() {\n+                    Position::after(name.syntax)\n+                } else if let Some(enum_token) = self.enum_token() {\n+                    Position::after(enum_token)\n+                } else {\n+                    Position::last_child_of(self.syntax())\n+                };\n+                create_generic_param_list(position)\n+            }\n+        }\n     }\n \n     fn get_or_create_where_clause(&self) -> WhereClause {\n@@ -228,3 +276,44 @@ impl ast::Use {\n         ted::remove(self.syntax())\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use std::fmt;\n+\n+    use crate::SourceFile;\n+\n+    use super::*;\n+\n+    fn ast_mut_from_text<N: AstNode>(text: &str) -> N {\n+        let parse = SourceFile::parse(text);\n+        parse.tree().syntax().descendants().find_map(N::cast).unwrap().clone_for_update()\n+    }\n+\n+    #[test]\n+    fn test_create_generic_param_list() {\n+        fn check_create_gpl<N: GenericParamsOwnerEdit + fmt::Display>(before: &str, after: &str) {\n+            let gpl_owner = ast_mut_from_text::<N>(before);\n+            gpl_owner.get_or_create_generic_param_list();\n+            assert_eq!(gpl_owner.to_string(), after);\n+        }\n+\n+        check_create_gpl::<ast::Fn>(\"fn foo\", \"fn foo<>\");\n+        check_create_gpl::<ast::Fn>(\"fn foo() {}\", \"fn foo<>() {}\");\n+\n+        check_create_gpl::<ast::Impl>(\"impl\", \"impl<>\");\n+        check_create_gpl::<ast::Impl>(\"impl Struct {}\", \"impl<> Struct {}\");\n+        check_create_gpl::<ast::Impl>(\"impl Trait for Struct {}\", \"impl<> Trait for Struct {}\");\n+\n+        check_create_gpl::<ast::Trait>(\"trait Trait<>\", \"trait Trait<>\");\n+        check_create_gpl::<ast::Trait>(\"trait Trait<> {}\", \"trait Trait<> {}\");\n+\n+        check_create_gpl::<ast::Struct>(\"struct A\", \"struct A<>\");\n+        check_create_gpl::<ast::Struct>(\"struct A;\", \"struct A<>;\");\n+        check_create_gpl::<ast::Struct>(\"struct A();\", \"struct A<>();\");\n+        check_create_gpl::<ast::Struct>(\"struct A {}\", \"struct A<> {}\");\n+\n+        check_create_gpl::<ast::Enum>(\"enum E\", \"enum E<>\");\n+        check_create_gpl::<ast::Enum>(\"enum E {\", \"enum E<> {\");\n+    }\n+}"}]}