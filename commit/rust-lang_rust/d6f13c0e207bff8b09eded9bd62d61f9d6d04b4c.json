{"sha": "d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZjEzYzBlMjA3YmZmOGIwOWVkZWQ5YmQ2MmQ2MWY5ZDZkMDRiNGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-12T18:49:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-12T18:49:17Z"}, "message": "update wording, do not change parser", "tree": {"sha": "f51f344b5e76fe2ef1c6ad5e9181da40038ad0d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51f344b5e76fe2ef1c6ad5e9181da40038ad0d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c", "html_url": "https://github.com/rust-lang/rust/commit/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d4ae2be2e9428c9ab523f04f917a41ac0f760e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92d4ae2be2e9428c9ab523f04f917a41ac0f760e", "html_url": "https://github.com/rust-lang/rust/commit/92d4ae2be2e9428c9ab523f04f917a41ac0f760e"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "716deaba01e106b4c44a3820a1085d5dd58baf59", "filename": "src/doc/unstable-book/src/language-features/irrefutable-let-patterns.md", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md?ref=d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c", "patch": "@@ -6,18 +6,23 @@ The tracking issue for this feature is: [#44495]\n \n ------------------------\n \n-This feature changes the way that the irrefutable pattern is handled\n-in the `if let` and `while let` forms. The old way was to always error\n-but now with a tag the error-by-default lint can be switched off.\n+This feature changes the way that \"irrefutable patterns\" are handled\n+in the `if let` and `while let` forms. An *irrefutable pattern* is one\n+that cannot fail to match -- for example, the `_` pattern matches any\n+value, and hence it is \"irrefutable\". Without this feature, using an\n+irrefutable pattern in an `if let` gives a hard error (since often\n+this indicates programmer error). But when the feature is enabled, the\n+error becomes a lint (since in some cases irrefutable patterns are\n+expected). This means you can use `#[allow]` to silence the lint:\n \n ```rust\n #![feature(irrefutable_let_patterns)]\n \n+#[allow(irrefutable_let_patterns)]\n fn main() {\n-    #[allow(irrefutable_let_patterns)]\n+    // These two examples used to be errors, but now they\n+    // trigger a lint (that is allowed):\n     if let _ = 5 {}\n-\n-    #[allow(irrefutable_let_patterns)]\n     while let _ = 5 {}\n }\n ```"}, {"sha": "95d519eae5851f570b58e489789f3224b910367a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d6f13c0e207bff8b09eded9bd62d61f9d6d04b4c", "patch": "@@ -2597,7 +2597,7 @@ impl<'a> Parser<'a> {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n                 match expr.node {\n-                    ExprKind::If(..) => {\n+                    ExprKind::If(..) | ExprKind::IfLet(..) => {\n                         if !expr.attrs.is_empty() {\n                             // Just point to the first attribute in there...\n                             let span = expr.attrs[0].span;"}]}