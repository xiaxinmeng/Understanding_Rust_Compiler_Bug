{"sha": "5c9e5df3a097e094641f16dab501ab1c4da10e9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOWU1ZGYzYTA5N2UwOTQ2NDFmMTZkYWI1MDFhYjFjNGRhMTBlOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-16T19:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-16T19:01:48Z"}, "message": "Auto merge of #74408 - Manishearth:rollup-9gxn4od, r=Manishearth\n\nRollup of 21 pull requests\n\nSuccessful merges:\n\n - #73566 (Don't run `everybody_loops` for rustdoc; instead ignore resolution errors)\n - #73771 (Don't pollute docs/suggestions with libstd deps)\n - #73794 (Small cleanup for E0705 explanation)\n - #73807 (rustdoc: glue tokens before highlighting)\n - #73835 (Clean up E0710 explanation)\n - #73926 (Ignoring test case: [codegen] repr-transparent-aggregates-1.rs for aarch64)\n - #73981 (Remove some `ignore-stage1` annotations.)\n - #73998 (add regression test for #61216)\n - #74140 (Make hir ProjectionKind more precise)\n - #74148 (Move #[doc(alias)] check in rustc)\n - #74159 (forbid generic params in the type of const params)\n - #74171 (Fix 44056 test with debug on macos.)\n - #74221 (Don't panic if the lhs of a div by zero is not statically known)\n - #74325 (Focus on the current file in the source file sidebar)\n - #74359 (rustdoc: Rename internal API fns to `into_string`)\n - #74370 (Reintroduce spotlight / \"important traits\" feature)\n - #74390 (Fix typo in std::mem::transmute documentation)\n - #74391 (BtreeMap: superficially refactor root access)\n - #74392 (const generics triage)\n - #74397 (Fix typo in the latest release note)\n - #74406 (Set shell for github actions CI)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "efbe559cc0c2e00c0bb7b690975388002d00f06f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efbe559cc0c2e00c0bb7b690975388002d00f06f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c9e5df3a097e094641f16dab501ab1c4da10e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9e5df3a097e094641f16dab501ab1c4da10e9f", "html_url": "https://github.com/rust-lang/rust/commit/5c9e5df3a097e094641f16dab501ab1c4da10e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c9e5df3a097e094641f16dab501ab1c4da10e9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee1b62c811a6eb68d6db6dfb91f66a49956749b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1b62c811a6eb68d6db6dfb91f66a49956749b", "html_url": "https://github.com/rust-lang/rust/commit/6ee1b62c811a6eb68d6db6dfb91f66a49956749b"}, {"sha": "ff685f51f4f130d4080ef800e5e041ddbca903dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff685f51f4f130d4080ef800e5e041ddbca903dc", "html_url": "https://github.com/rust-lang/rust/commit/ff685f51f4f130d4080ef800e5e041ddbca903dc"}], "stats": {"total": 2240, "additions": 1953, "deletions": 287}, "files": [{"sha": "99140bec1702983fe497edf07013e0e0accb8d58", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -66,66 +66,85 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n+        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n@@ -166,66 +185,85 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n+        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n@@ -484,66 +522,85 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n+        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n@@ -610,66 +667,85 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n+        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n+        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n@@ -694,6 +770,7 @@ jobs:\n           fetch-depth: 2\n       - name: publish toolstate\n         run: src/ci/publish_toolstate.sh\n+        shell: bash\n         env:\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB"}, {"sha": "f36cdee0975a0394a0e866418fb3c894be2bcc01", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -47,7 +47,7 @@ Libraries\n   // Prints \"abcdefghijklmnopqrstuvwxyz\"\n   ```\n - [`OsString` now implements `FromStr`.][71662]\n-- [The `saturating_neg` method as been added to all signed integer primitive\n+- [The `saturating_neg` method has been added to all signed integer primitive\n   types, and the `saturating_abs` method has been added for all integer\n   primitive types.][71886]\n - [`Arc<T>`, `Rc<T>` now implement  `From<Cow<'_, T>>`, and `Box` now"}, {"sha": "0b3b77f217dbd6095ae04613c500ee3cfa0913c9", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -95,6 +95,7 @@ x--expand-yaml-anchors--remove:\n \n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n+        shell: bash\n         env:\n           # Since it's not possible to merge `${{ matrix.env }}` with the other\n           # variables in `job.<name>.env`, the variables defined in the matrix\n@@ -105,54 +106,67 @@ x--expand-yaml-anchors--remove:\n \n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n+        shell: bash\n         <<: *step\n \n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: bash\n         <<: *step\n \n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n+        shell: bash\n         <<: *step\n \n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n+        shell: bash\n         <<: *step\n \n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n+        shell: bash\n         <<: *step\n \n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n+        shell: bash\n         <<: *step\n \n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n+        shell: bash\n         <<: *step\n \n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n+        shell: bash\n         <<: *step\n \n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         <<: *step\n \n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n+        shell: bash\n         <<: *step\n \n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n+        shell: bash\n         <<: *step\n \n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n+        shell: bash\n         <<: *step\n \n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: bash\n         <<: *step\n \n       # Disable automatic line ending conversion (again). On Windows, when we're\n@@ -162,18 +176,22 @@ x--expand-yaml-anchors--remove:\n       # appropriate line endings.\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: bash\n         <<: *step\n \n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n+        shell: bash\n         <<: *step\n \n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n+        shell: bash\n         <<: *step\n \n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: ${{ env.CACHES_AWS_ACCESS_KEY_ID }}\n           AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\n@@ -182,6 +200,7 @@ x--expand-yaml-anchors--remove:\n \n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n+        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: ${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\n           AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\n@@ -620,6 +639,7 @@ jobs:\n \n       - name: publish toolstate\n         run: src/ci/publish_toolstate.sh\n+        shell: bash\n         env:\n           TOOLSTATE_REPO_ACCESS_TOKEN: ${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\n         <<: *step"}, {"sha": "d16c2a9d0342c71f4512a02c4db1a1dab0d5abea", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -150,6 +150,27 @@ Book][unstable-doc-cfg] and [its tracking issue][issue-doc-cfg].\n [unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html\n [issue-doc-cfg]: https://github.com/rust-lang/rust/issues/43781\n \n+### Adding your trait to the \"Important Traits\" dialog\n+\n+Rustdoc keeps a list of a few traits that are believed to be \"fundamental\" to a given type when\n+implemented on it. These traits are intended to be the primary interface for their types, and are\n+often the only thing available to be documented on their types. For this reason, Rustdoc will track\n+when a given type implements one of these traits and call special attention to it when a function\n+returns one of these types. This is the \"Important Traits\" dialog, visible as a circle-i button next\n+to the function, which, when clicked, shows the dialog.\n+\n+In the standard library, the traits that qualify for inclusion are `Iterator`, `io::Read`, and\n+`io::Write`. However, rather than being implemented as a hard-coded list, these traits have a\n+special marker attribute on them: `#[doc(spotlight)]`. This means that you could apply this\n+attribute to your own trait to include it in the \"Important Traits\" dialog in documentation.\n+\n+The `#[doc(spotlight)]` attribute currently requires the `#![feature(doc_spotlight)]` feature gate.\n+For more information, see [its chapter in the Unstable Book][unstable-spotlight] and [its tracking\n+issue][issue-spotlight].\n+\n+[unstable-spotlight]: ../unstable-book/language-features/doc-spotlight.html\n+[issue-spotlight]: https://github.com/rust-lang/rust/issues/45040\n+\n ### Exclude certain dependencies from documentation\n \n The standard library uses several dependencies which, in turn, use several types and traits from the"}, {"sha": "8117755fef1c8741f45648c178c98d37f4e3928d", "filename": "src/doc/unstable-book/src/language-features/doc-spotlight.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,30 @@\n+# `doc_spotlight`\n+\n+The tracking issue for this feature is: [#45040]\n+\n+The `doc_spotlight` feature allows the use of the `spotlight` parameter to the `#[doc]` attribute,\n+to \"spotlight\" a specific trait on the return values of functions. Adding a `#[doc(spotlight)]`\n+attribute to a trait definition will make rustdoc print extra information for functions which return\n+a type that implements that trait. This attribute is applied to the `Iterator`, `io::Read`, and\n+`io::Write` traits in the standard library.\n+\n+You can do this on your own traits, like this:\n+\n+```\n+#![feature(doc_spotlight)]\n+\n+#[doc(spotlight)]\n+pub trait MyTrait {}\n+\n+pub struct MyStruct;\n+impl MyTrait for MyStruct {}\n+\n+/// The docs for this function will have an extra line about `MyStruct` implementing `MyTrait`,\n+/// without having to write that yourself!\n+pub fn my_fn() -> MyStruct { MyStruct }\n+```\n+\n+This feature was originally implemented in PR [#45039].\n+\n+[#45040]: https://github.com/rust-lang/rust/issues/45040\n+[#45039]: https://github.com/rust-lang/rust/pull/45039"}, {"sha": "bf5748739d470422e0d110770812baf6bc9a1bbc", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 83, "deletions": 92, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -151,7 +151,7 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n                     let mut out_tree = BTreeMap { root: Some(node::Root::new_leaf()), length: 0 };\n \n                     {\n-                        let root = out_tree.root.as_mut().unwrap();\n+                        let root = out_tree.root.as_mut().unwrap(); // unwrap succeeds because we just wrapped\n                         let mut out_node = match root.as_mut().force() {\n                             Leaf(leaf) => leaf,\n                             Internal(_) => unreachable!(),\n@@ -171,14 +171,10 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n                 }\n                 Internal(internal) => {\n                     let mut out_tree = clone_subtree(internal.first_edge().descend());\n-                    out_tree.ensure_root_is_owned();\n \n                     {\n-                        // Ideally we'd use the return of ensure_root_is_owned\n-                        // instead of re-unwrapping here but unfortunately that\n-                        // borrows all of out_tree and we need access to the\n-                        // length below.\n-                        let mut out_node = out_tree.root.as_mut().unwrap().push_level();\n+                        let out_root = BTreeMap::ensure_is_owned(&mut out_tree.root);\n+                        let mut out_node = out_root.push_level();\n                         let mut in_edge = internal.first_edge();\n                         while let Ok(kv) = in_edge.right_kv() {\n                             let (k, v) = kv.into_kv();\n@@ -212,7 +208,7 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n             // Ord` constraint, which this method lacks.\n             BTreeMap { root: None, length: 0 }\n         } else {\n-            clone_subtree(self.root.as_ref().unwrap().as_ref())\n+            clone_subtree(self.root.as_ref().unwrap().as_ref()) // unwrap succeeds because not empty\n         }\n     }\n }\n@@ -243,8 +239,8 @@ where\n     }\n \n     fn replace(&mut self, key: K) -> Option<K> {\n-        self.ensure_root_is_owned();\n-        match search::search_tree::<marker::Mut<'_>, K, (), K>(self.root.as_mut()?.as_mut(), &key) {\n+        let root = Self::ensure_is_owned(&mut self.root);\n+        match search::search_tree::<marker::Mut<'_>, K, (), K>(root.as_mut(), &key) {\n             Found(handle) => Some(mem::replace(handle.into_kv_mut().0, key)),\n             GoDown(handle) => {\n                 VacantEntry { key, handle, length: &mut self.length, _marker: PhantomData }\n@@ -943,7 +939,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n         // Second, we build a tree from the sorted sequence in linear time.\n         self.from_sorted_iter(iter);\n-        self.fix_right_edge();\n     }\n \n     /// Constructs a double-ended iterator over a sub-range of elements in the map.\n@@ -1058,8 +1053,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {\n         // FIXME(@porglezomp) Avoid allocating if we don't insert\n-        self.ensure_root_is_owned();\n-        match search::search_tree(self.root.as_mut().unwrap().as_mut(), &key) {\n+        let root = Self::ensure_is_owned(&mut self.root);\n+        match search::search_tree(root.as_mut(), &key) {\n             Found(handle) => {\n                 Occupied(OccupiedEntry { handle, length: &mut self.length, _marker: PhantomData })\n             }\n@@ -1070,8 +1065,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     fn from_sorted_iter<I: Iterator<Item = (K, V)>>(&mut self, iter: I) {\n-        self.ensure_root_is_owned();\n-        let mut cur_node = self.root.as_mut().unwrap().as_mut().last_leaf_edge().into_node();\n+        let root = Self::ensure_is_owned(&mut self.root);\n+        let mut cur_node = root.as_mut().last_leaf_edge().into_node();\n         // Iterate through all key-value pairs, pushing them into nodes at the right level.\n         for (key, value) in iter {\n             // Try to push key-value pair into the current leaf node.\n@@ -1116,11 +1111,12 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n             self.length += 1;\n         }\n+        Self::fix_right_edge(root)\n     }\n \n-    fn fix_right_edge(&mut self) {\n+    fn fix_right_edge(root: &mut node::Root<K, V>) {\n         // Handle underfull nodes, start from the top.\n-        let mut cur_node = self.root.as_mut().unwrap().as_mut();\n+        let mut cur_node = root.as_mut();\n         while let Internal(internal) = cur_node.force() {\n             // Check if right-most child is underfull.\n             let mut last_edge = internal.last_edge();\n@@ -1179,16 +1175,17 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n \n         let total_num = self.len();\n+        let left_root = self.root.as_mut().unwrap(); // unwrap succeeds because not empty\n \n         let mut right = Self::new();\n-        let right_root = right.ensure_root_is_owned();\n-        for _ in 0..(self.root.as_ref().unwrap().as_ref().height()) {\n+        let right_root = Self::ensure_is_owned(&mut right.root);\n+        for _ in 0..left_root.height() {\n             right_root.push_level();\n         }\n \n         {\n-            let mut left_node = self.root.as_mut().unwrap().as_mut();\n-            let mut right_node = right.root.as_mut().unwrap().as_mut();\n+            let mut left_node = left_root.as_mut();\n+            let mut right_node = right_root.as_mut();\n \n             loop {\n                 let mut split_edge = match search::search_node(left_node, key) {\n@@ -1214,12 +1211,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n             }\n         }\n \n-        self.fix_right_border();\n-        right.fix_left_border();\n+        left_root.fix_right_border();\n+        right_root.fix_left_border();\n \n-        if self.root.as_ref().unwrap().as_ref().height()\n-            < right.root.as_ref().unwrap().as_ref().height()\n-        {\n+        if left_root.height() < right_root.height() {\n             self.recalc_length();\n             right.length = total_num - self.len();\n         } else {\n@@ -1301,69 +1296,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n         self.length = dfs(self.root.as_ref().unwrap().as_ref());\n     }\n-\n-    /// Removes empty levels on the top.\n-    fn fix_top(&mut self) {\n-        loop {\n-            {\n-                let node = self.root.as_ref().unwrap().as_ref();\n-                if node.height() == 0 || node.len() > 0 {\n-                    break;\n-                }\n-            }\n-            self.root.as_mut().unwrap().pop_level();\n-        }\n-    }\n-\n-    fn fix_right_border(&mut self) {\n-        self.fix_top();\n-\n-        {\n-            let mut cur_node = self.root.as_mut().unwrap().as_mut();\n-\n-            while let Internal(node) = cur_node.force() {\n-                let mut last_kv = node.last_kv();\n-\n-                if last_kv.can_merge() {\n-                    cur_node = last_kv.merge().descend();\n-                } else {\n-                    let right_len = last_kv.reborrow().right_edge().descend().len();\n-                    // `MINLEN + 1` to avoid readjust if merge happens on the next level.\n-                    if right_len < node::MIN_LEN + 1 {\n-                        last_kv.bulk_steal_left(node::MIN_LEN + 1 - right_len);\n-                    }\n-                    cur_node = last_kv.right_edge().descend();\n-                }\n-            }\n-        }\n-\n-        self.fix_top();\n-    }\n-\n-    /// The symmetric clone of `fix_right_border`.\n-    fn fix_left_border(&mut self) {\n-        self.fix_top();\n-\n-        {\n-            let mut cur_node = self.root.as_mut().unwrap().as_mut();\n-\n-            while let Internal(node) = cur_node.force() {\n-                let mut first_kv = node.first_kv();\n-\n-                if first_kv.can_merge() {\n-                    cur_node = first_kv.merge().descend();\n-                } else {\n-                    let left_len = first_kv.reborrow().left_edge().descend().len();\n-                    if left_len < node::MIN_LEN + 1 {\n-                        first_kv.bulk_steal_right(node::MIN_LEN + 1 - left_len);\n-                    }\n-                    cur_node = first_kv.left_edge().descend();\n-                }\n-            }\n-        }\n-\n-        self.fix_top();\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2321,9 +2253,9 @@ impl<K, V> BTreeMap<K, V> {\n     }\n \n     /// If the root node is the empty (non-allocated) root node, allocate our\n-    /// own node.\n-    fn ensure_root_is_owned(&mut self) -> &mut node::Root<K, V> {\n-        self.root.get_or_insert_with(node::Root::new_leaf)\n+    /// own node. Is an associated function to avoid borrowing the entire BTreeMap.\n+    fn ensure_is_owned(root: &mut Option<node::Root<K, V>>) -> &mut node::Root<K, V> {\n+        root.get_or_insert_with(node::Root::new_leaf)\n     }\n }\n \n@@ -2825,6 +2757,65 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInter\n     }\n }\n \n+impl<K, V> node::Root<K, V> {\n+    /// Removes empty levels on the top, but keep an empty leaf if the entire tree is empty.\n+    fn fix_top(&mut self) {\n+        while self.height() > 0 && self.as_ref().len() == 0 {\n+            self.pop_level();\n+        }\n+    }\n+\n+    fn fix_right_border(&mut self) {\n+        self.fix_top();\n+\n+        {\n+            let mut cur_node = self.as_mut();\n+\n+            while let Internal(node) = cur_node.force() {\n+                let mut last_kv = node.last_kv();\n+\n+                if last_kv.can_merge() {\n+                    cur_node = last_kv.merge().descend();\n+                } else {\n+                    let right_len = last_kv.reborrow().right_edge().descend().len();\n+                    // `MINLEN + 1` to avoid readjust if merge happens on the next level.\n+                    if right_len < node::MIN_LEN + 1 {\n+                        last_kv.bulk_steal_left(node::MIN_LEN + 1 - right_len);\n+                    }\n+                    cur_node = last_kv.right_edge().descend();\n+                }\n+            }\n+        }\n+\n+        self.fix_top();\n+    }\n+\n+    /// The symmetric clone of `fix_right_border`.\n+    fn fix_left_border(&mut self) {\n+        self.fix_top();\n+\n+        {\n+            let mut cur_node = self.as_mut();\n+\n+            while let Internal(node) = cur_node.force() {\n+                let mut first_kv = node.first_kv();\n+\n+                if first_kv.can_merge() {\n+                    cur_node = first_kv.merge().descend();\n+                } else {\n+                    let left_len = first_kv.reborrow().left_edge().descend().len();\n+                    if left_len < node::MIN_LEN + 1 {\n+                        first_kv.bulk_steal_right(node::MIN_LEN + 1 - left_len);\n+                    }\n+                    cur_node = first_kv.left_edge().descend();\n+                }\n+            }\n+        }\n+\n+        self.fix_top();\n+    }\n+}\n+\n enum UnderflowResult<'a, K, V> {\n     AtRoot,\n     Merged(Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge>, bool, usize),"}, {"sha": "f7bd64608d63cd40205364fa604979009f141b21", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -153,6 +153,11 @@ unsafe impl<K: Sync, V: Sync> Sync for Root<K, V> {}\n unsafe impl<K: Send, V: Send> Send for Root<K, V> {}\n \n impl<K, V> Root<K, V> {\n+    /// Returns the number of levels below the root.\n+    pub fn height(&self) -> usize {\n+        self.height\n+    }\n+\n     /// Returns a new owned tree, with its own root node that is initially empty.\n     pub fn new_leaf() -> Self {\n         Root { node: BoxedNode::from_leaf(Box::new(unsafe { LeafNode::new() })), height: 0 }"}, {"sha": "733ebdc0e97f236e3c88120c51431696e0df9aca", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -24,6 +24,7 @@ use crate::task::{Context, Poll};\n /// `.await` the value.\n ///\n /// [`Waker`]: ../task/struct.Waker.html\n+#[doc(spotlight)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[lang = \"future_trait\"]"}, {"sha": "45b636b0089b21aca59eefc603dc378cb7e101f8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1126,7 +1126,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// // use `u32::from_ne_bytes` instead\n     /// let num = u32::from_ne_bytes(raw_bytes);\n-    /// // or use `u32::from_le_bytes` or `u32::from_ge_bytes` to specify the endianness\n+    /// // or use `u32::from_le_bytes` or `u32::from_be_bytes` to specify the endianness\n     /// let num = u32::from_le_bytes(raw_bytes);\n     /// assert_eq!(num, 0x12345678);\n     /// let num = u32::from_be_bytes(raw_bytes);"}, {"sha": "692eed80c0252b32eca4fd2317966fe9f6e0d980", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -92,6 +92,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n     label = \"`{Self}` is not an iterator\",\n     message = \"`{Self}` is not an iterator\"\n )]\n+#[doc(spotlight)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub trait Iterator {\n     /// The type of the elements being iterated over."}, {"sha": "c2dc3e5985f3435fe8bddc9280d86a1dd5d1d4e8", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -96,6 +96,7 @@\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n+#![cfg_attr(not(bootstrap), feature(doc_spotlight))]\n #![feature(duration_consts_2)]\n #![feature(extern_types)]\n #![feature(fundamental)]"}, {"sha": "b424c8afb34717121efaf16fbbe025e3c33bb6c5", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -253,6 +253,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     include => external_doc\n                     cfg => doc_cfg\n                     masked => doc_masked\n+                    spotlight => doc_spotlight\n                     alias => doc_alias\n                     keyword => doc_keyword\n                 );"}, {"sha": "6160450d766769fe4f0169b7317ed528d33f12f7", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -452,6 +452,7 @@ E0766: include_str!(\"./error_codes/E0766.md\"),\n E0767: include_str!(\"./error_codes/E0767.md\"),\n E0768: include_str!(\"./error_codes/E0768.md\"),\n E0769: include_str!(\"./error_codes/E0769.md\"),\n+E0770: include_str!(\"./error_codes/E0770.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "a993ce826a737e0cfada3310469bf4b408bffefa", "filename": "src/librustc_error_codes/error_codes/E0671.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -3,7 +3,7 @@\n Const parameters cannot depend on type parameters.\n The following is therefore invalid:\n \n-```compile_fail,E0741\n+```compile_fail,E0770\n #![feature(const_generics)]\n \n fn const_id<T, const N: T>() -> T { // error"}, {"sha": "1edd47de4cbbd0d0b6238b5dd85cf8afe9586707", "filename": "src/librustc_error_codes/error_codes/E0705.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0705.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0705.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0705.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,5 +1,5 @@\n-A `#![feature]` attribute was declared for a feature that is stable in\n-the current edition, but not in all editions.\n+A `#![feature]` attribute was declared for a feature that is stable in the\n+current edition, but not in all editions.\n \n Erroneous code example:\n "}, {"sha": "b7037ea611ba2685659aa5bd0d045b81399c201c", "filename": "src/librustc_error_codes/error_codes/E0710.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0710.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0710.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0710.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,4 +1,4 @@\n-An unknown tool name found in scoped lint\n+An unknown tool name was found in a scoped lint.\n \n Erroneous code examples:\n "}, {"sha": "278bf9b907b240358802d40bf5c53a59f6238035", "filename": "src/librustc_error_codes/error_codes/E0770.md", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,15 @@\n+The type of a const parameter references other generic parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0770\n+#![feature(const_generics)]\n+fn foo<T, const N: T>() {} // error!\n+```\n+\n+To fix this error, use a concrete type for the const parameter:\n+\n+```\n+#![feature(const_generics)]\n+fn foo<T, const N: usize>() {}\n+```"}, {"sha": "d7c310a8b4c8b2111e3a77f3e6564ac100fae3bb", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -368,6 +368,9 @@ declare_features! (\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n \n+    /// Allows `#[doc(spotlight)]`.\n+    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n+\n     /// Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n "}, {"sha": "9204f778a24b965e101fa467970df8188e956abe", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -2687,7 +2687,7 @@ pub enum Node<'hir> {\n     Crate(&'hir CrateItem<'hir>),\n }\n \n-impl Node<'_> {\n+impl<'hir> Node<'hir> {\n     pub fn ident(&self) -> Option<Ident> {\n         match self {\n             Node::TraitItem(TraitItem { ident, .. })\n@@ -2698,7 +2698,7 @@ impl Node<'_> {\n         }\n     }\n \n-    pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n+    pub fn fn_decl(&self) -> Option<&FnDecl<'hir>> {\n         match self {\n             Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n@@ -2722,7 +2722,7 @@ impl Node<'_> {\n         }\n     }\n \n-    pub fn generics(&self) -> Option<&Generics<'_>> {\n+    pub fn generics(&self) -> Option<&'hir Generics<'hir>> {\n         match self {\n             Node::TraitItem(TraitItem { generics, .. })\n             | Node::ImplItem(ImplItem { generics, .. }) => Some(generics),"}, {"sha": "f1b9fafc78158ae98dd6e913861ba883f5e8237c", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -354,13 +354,7 @@ fn configure_and_expand_inner<'a>(\n         )\n     });\n \n-    // If we're actually rustdoc then there's no need to actually compile\n-    // anything, so switch everything to just looping\n-    let mut should_loop = sess.opts.actually_rustdoc;\n     if let Some(PpMode::PpmSource(PpSourceMode::PpmEveryBodyLoops)) = sess.opts.pretty {\n-        should_loop |= true;\n-    }\n-    if should_loop {\n         log::debug!(\"replacing bodies with loop {{}}\");\n         util::ReplaceBodyWithLoop::new(&mut resolver).visit_crate(&mut krate);\n     }"}, {"sha": "237a5a64f8bf851cc600a24ff2f782d48c3dd6b8", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -484,7 +484,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         lint: &'static lint::Lint,\n         source_info: SourceInfo,\n         message: &'static str,\n-        panic: AssertKind<ConstInt>,\n+        panic: AssertKind<impl std::fmt::Debug>,\n     ) -> Option<()> {\n         let lint_root = self.lint_root(source_info)?;\n         self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n@@ -1004,11 +1004,27 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     let expected = ScalarMaybeUninit::from(Scalar::from_bool(*expected));\n                     let value_const = self.ecx.read_scalar(value).unwrap();\n                     if expected != value_const {\n+                        enum DbgVal<T> {\n+                            Val(T),\n+                            Underscore,\n+                        }\n+                        impl<T: std::fmt::Debug> std::fmt::Debug for DbgVal<T> {\n+                            fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+                                match self {\n+                                    Self::Val(val) => val.fmt(fmt),\n+                                    Self::Underscore => fmt.write_str(\"_\"),\n+                                }\n+                            }\n+                        }\n                         let mut eval_to_int = |op| {\n-                            let op = self\n-                                .eval_operand(op, source_info)\n-                                .expect(\"if we got here, it must be const\");\n-                            self.ecx.read_immediate(op).unwrap().to_const_int()\n+                            // This can be `None` if the lhs wasn't const propagated and we just\n+                            // triggered the assert on the value of the rhs.\n+                            match self.eval_operand(op, source_info) {\n+                                Some(op) => {\n+                                    DbgVal::Val(self.ecx.read_immediate(op).unwrap().to_const_int())\n+                                }\n+                                None => DbgVal::Underscore,\n+                            }\n                         };\n                         let msg = match msg {\n                             AssertKind::DivisionByZero(op) => {"}, {"sha": "3e63a63d9d0f950cc7ad903a2c456a7cf417b1df", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -70,6 +70,8 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_target_feature(attr, span, target)\n             } else if attr.check_name(sym::track_caller) {\n                 self.check_track_caller(&attr.span, attrs, span, target)\n+            } else if attr.check_name(sym::doc) {\n+                self.check_doc_alias(attr)\n             } else {\n                 true\n             };\n@@ -216,6 +218,34 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    fn check_doc_alias(&self, attr: &Attribute) -> bool {\n+        if let Some(mi) = attr.meta() {\n+            if let Some(list) = mi.meta_item_list() {\n+                for meta in list {\n+                    if meta.check_name(sym::alias) {\n+                        if !meta.is_value_str()\n+                            || meta\n+                                .value_str()\n+                                .map(|s| s.to_string())\n+                                .unwrap_or_else(String::new)\n+                                .is_empty()\n+                        {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    meta.span(),\n+                                    \"doc alias attribute expects a string: #[doc(alias = \\\"0\\\")]\",\n+                                )\n+                                .emit();\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        true\n+    }\n+\n     /// Checks if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(\n         &self,"}, {"sha": "575049c6bac2fa52ba7f1aba2abb7e78420568f0", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -442,6 +442,19 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n+            ResolutionError::ParamInTyOfConstArg(name) => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0770,\n+                    \"the type of const parameters must not depend on other generic parameters\"\n+                );\n+                err.span_label(\n+                    span,\n+                    format!(\"the type must not depend on the parameter `{}`\", name),\n+                );\n+                err\n+            }\n             ResolutionError::SelfInTyParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "ed88e5496921596a15f783c79c84a648f7a617f8", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 86, "deletions": 27, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -123,6 +123,10 @@ crate enum RibKind<'a> {\n     /// from the default of a type parameter because they're not declared\n     /// before said type parameter. Also see the `visit_generics` override.\n     ForwardTyParamBanRibKind,\n+\n+    /// We are inside of the type of a const parameter. Can't refer to any\n+    /// parameters.\n+    ConstParamTyRibKind,\n }\n \n impl RibKind<'_> {\n@@ -135,7 +139,8 @@ impl RibKind<'_> {\n             | FnItemRibKind\n             | ConstantItemRibKind\n             | ModuleRibKind(_)\n-            | MacroDefinition(_) => false,\n+            | MacroDefinition(_)\n+            | ConstParamTyRibKind => false,\n             AssocItemRibKind | ItemRibKind(_) | ForwardTyParamBanRibKind => true,\n         }\n     }\n@@ -394,13 +399,23 @@ struct LateResolutionVisitor<'a, 'b, 'ast> {\n \n     /// Fields used to add information to diagnostic errors.\n     diagnostic_metadata: DiagnosticMetadata<'ast>,\n+\n+    /// State used to know whether to ignore resolution errors for function bodies.\n+    ///\n+    /// In particular, rustdoc uses this to avoid giving errors for `cfg()` items.\n+    /// In most cases this will be `None`, in which case errors will always be reported.\n+    /// If it is `Some(_)`, then it will be updated when entering a nested function or trait body.\n+    in_func_body: bool,\n }\n \n /// Walks the whole crate in DFS order, visiting each item, resolving names as it goes.\n impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     fn visit_item(&mut self, item: &'ast Item) {\n         let prev = replace(&mut self.diagnostic_metadata.current_item, Some(item));\n+        // Always report errors in items we just entered.\n+        let old_ignore = replace(&mut self.in_func_body, false);\n         self.resolve_item(item);\n+        self.in_func_body = old_ignore;\n         self.diagnostic_metadata.current_item = prev;\n     }\n     fn visit_arm(&mut self, arm: &'ast Arm) {\n@@ -497,13 +512,17 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n                 visit::walk_fn_ret_ty(this, &declaration.output);\n \n+                // Ignore errors in function bodies if this is rustdoc\n+                // Be sure not to set this until the function signature has been resolved.\n+                let previous_state = replace(&mut this.in_func_body, true);\n                 // Resolve the function body, potentially inside the body of an async closure\n                 match fn_kind {\n                     FnKind::Fn(.., body) => walk_list!(this, visit_block, body),\n                     FnKind::Closure(_, body) => this.visit_expr(body),\n                 };\n \n                 debug!(\"(resolving function) leaving function\");\n+                this.in_func_body = previous_state;\n             })\n         });\n         self.diagnostic_metadata.current_function = previous_value;\n@@ -562,7 +581,11 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n+                    self.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n+                    self.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n                     self.visit_ty(ty);\n+                    self.ribs[TypeNS].pop().unwrap();\n+                    self.ribs[ValueNS].pop().unwrap();\n                 }\n             }\n         }\n@@ -644,6 +667,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             label_ribs: Vec::new(),\n             current_trait_ref: None,\n             diagnostic_metadata: DiagnosticMetadata::default(),\n+            // errors at module scope should always be reported\n+            in_func_body: false,\n         }\n     }\n \n@@ -757,7 +782,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 return if self.is_label_valid_from_rib(i) {\n                     Some(*id)\n                 } else {\n-                    self.r.report_error(\n+                    self.report_error(\n                         original_span,\n                         ResolutionError::UnreachableLabel {\n                             name: label.name,\n@@ -775,7 +800,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             suggestion = suggestion.or_else(|| self.suggestion_for_label_in_rib(i, label));\n         }\n \n-        self.r.report_error(\n+        self.report_error(\n             original_span,\n             ResolutionError::UndeclaredLabel { name: label.name, suggestion },\n         );\n@@ -798,7 +823,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ItemRibKind(..)\n                 | ConstantItemRibKind\n                 | ModuleRibKind(..)\n-                | ForwardTyParamBanRibKind => {\n+                | ForwardTyParamBanRibKind\n+                | ConstParamTyRibKind => {\n                     return false;\n                 }\n             }\n@@ -833,7 +859,11 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             };\n             let report_error = |this: &Self, ns| {\n                 let what = if ns == TypeNS { \"type parameters\" } else { \"local variables\" };\n-                this.r.session.span_err(ident.span, &format!(\"imports cannot refer to {}\", what));\n+                if this.should_report_errs() {\n+                    this.r\n+                        .session\n+                        .span_err(ident.span, &format!(\"imports cannot refer to {}\", what));\n+                }\n             };\n \n             for &ns in nss {\n@@ -1008,7 +1038,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             if seen_bindings.contains_key(&ident) {\n                 let span = seen_bindings.get(&ident).unwrap();\n                 let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, *span);\n-                self.r.report_error(param.ident.span, err);\n+                self.report_error(param.ident.span, err);\n             }\n             seen_bindings.entry(ident).or_insert(param.ident.span);\n \n@@ -1274,7 +1304,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 .is_err()\n             {\n                 let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n-                self.r.report_error(span, err(ident.name, &path_names_to_string(path)));\n+                self.report_error(span, err(ident.name, &path_names_to_string(path)));\n             }\n         }\n     }\n@@ -1289,6 +1319,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n \n     fn resolve_local(&mut self, local: &'ast Local) {\n+        debug!(\"resolving local ({:?})\", local);\n         // Resolve the type.\n         walk_list!(self, visit_ty, &local.ty);\n \n@@ -1390,7 +1421,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             if inconsistent_vars.contains_key(name) {\n                 v.could_be_path = false;\n             }\n-            self.r.report_error(\n+            self.report_error(\n                 *v.origin.iter().next().unwrap(),\n                 ResolutionError::VariableNotBoundInPattern(v),\n             );\n@@ -1400,7 +1431,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let mut inconsistent_vars = inconsistent_vars.iter().collect::<Vec<_>>();\n         inconsistent_vars.sort();\n         for (name, v) in inconsistent_vars {\n-            self.r.report_error(v.0, ResolutionError::VariableBoundWithDifferentMode(*name, v.1));\n+            self.report_error(v.0, ResolutionError::VariableBoundWithDifferentMode(*name, v.1));\n         }\n \n         // 5) Finally bubble up all the binding maps.\n@@ -1550,7 +1581,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // `Variant(a, a)`:\n                 _ => IdentifierBoundMoreThanOnceInSamePattern,\n             };\n-            self.r.report_error(ident.span, error(ident.name));\n+            self.report_error(ident.span, error(ident.name));\n         }\n \n         // Record as bound if it's valid:\n@@ -1624,7 +1655,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // to something unusable as a pattern (e.g., constructor function),\n                 // but we still conservatively report an error, see\n                 // issues/33118#issuecomment-233962221 for one reason why.\n-                self.r.report_error(\n+                self.report_error(\n                     ident.span,\n                     ResolutionError::BindingShadowsSomethingUnacceptable(\n                         pat_src.descr(),\n@@ -1677,18 +1708,27 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         source: PathSource<'ast>,\n         crate_lint: CrateLint,\n     ) -> PartialRes {\n+        log::debug!(\"smart_resolve_path_fragment(id={:?},qself={:?},path={:?}\", id, qself, path);\n         let ns = source.namespace();\n         let is_expected = &|res| source.is_expected(res);\n \n         let report_errors = |this: &mut Self, res: Option<Res>| {\n-            let (err, candidates) = this.smart_resolve_report_errors(path, span, source, res);\n-\n-            let def_id = this.parent_scope.module.normal_ancestor_id;\n-            let instead = res.is_some();\n-            let suggestion =\n-                if res.is_none() { this.report_missing_type_error(path) } else { None };\n-\n-            this.r.use_injections.push(UseError { err, candidates, def_id, instead, suggestion });\n+            if this.should_report_errs() {\n+                let (err, candidates) = this.smart_resolve_report_errors(path, span, source, res);\n+\n+                let def_id = this.parent_scope.module.normal_ancestor_id;\n+                let instead = res.is_some();\n+                let suggestion =\n+                    if res.is_none() { this.report_missing_type_error(path) } else { None };\n+\n+                this.r.use_injections.push(UseError {\n+                    err,\n+                    candidates,\n+                    def_id,\n+                    instead,\n+                    suggestion,\n+                });\n+            }\n \n             PartialRes::new(Res::Err)\n         };\n@@ -1746,13 +1786,17 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             let def_id = this.parent_scope.module.normal_ancestor_id;\n \n-            this.r.use_injections.push(UseError {\n-                err,\n-                candidates,\n-                def_id,\n-                instead: false,\n-                suggestion: None,\n-            });\n+            if this.should_report_errs() {\n+                this.r.use_injections.push(UseError {\n+                    err,\n+                    candidates,\n+                    def_id,\n+                    instead: false,\n+                    suggestion: None,\n+                });\n+            } else {\n+                err.cancel();\n+            }\n \n             // We don't return `Some(parent_err)` here, because the error will\n             // be already printed as part of the `use` injections\n@@ -1809,7 +1853,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             Err(err) => {\n                 if let Some(err) = report_errors_for_call(self, err) {\n-                    self.r.report_error(err.span, err.node);\n+                    self.report_error(err.span, err.node);\n                 }\n \n                 PartialRes::new(Res::Err)\n@@ -1843,6 +1887,21 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         if let Some(LexicalScopeBinding::Res(res)) = binding { res != Res::Err } else { false }\n     }\n \n+    /// A wrapper around [`Resolver::report_error`].\n+    ///\n+    /// This doesn't emit errors for function bodies if this is rustdoc.\n+    fn report_error(&self, span: Span, resolution_error: ResolutionError<'_>) {\n+        if self.should_report_errs() {\n+            self.r.report_error(span, resolution_error);\n+        }\n+    }\n+\n+    #[inline]\n+    /// If we're actually rustdoc then avoid giving a name resolution error for `cfg()` items.\n+    fn should_report_errs(&self) -> bool {\n+        !(self.r.session.opts.actually_rustdoc && self.in_func_body)\n+    }\n+\n     // Resolve in alternative namespaces if resolution in the primary namespace fails.\n     fn resolve_qpath_anywhere(\n         &mut self,"}, {"sha": "c3686ca4899bcee8db67fde1ee51902820a539e3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -214,6 +214,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n+    ParamInTyOfConstArg(Symbol),\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2480,6 +2482,12 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Res::Err;\n                         }\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(span, ParamInTyOfConstArg(rib_ident.name));\n+                            }\n+                            return Res::Err;\n+                        }\n                     }\n                 }\n                 if let Some(res_err) = res_err {\n@@ -2503,6 +2511,15 @@ impl<'a> Resolver<'a> {\n                         // This was an attempt to use a type parameter outside its scope.\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(\n+                                    span,\n+                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                );\n+                            }\n+                            return Res::Err;\n+                        }\n                     };\n \n                     if record_used {\n@@ -2527,9 +2544,24 @@ impl<'a> Resolver<'a> {\n                 }\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n+                        NormalRibKind\n+                        | ClosureOrAsyncRibKind\n+                        | AssocItemRibKind\n+                        | ModuleRibKind(..)\n+                        | MacroDefinition(..)\n+                        | ForwardTyParamBanRibKind\n+                        | ConstantItemRibKind => continue,\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n-                        _ => continue,\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(\n+                                    span,\n+                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                );\n+                            }\n+                            return Res::Err;\n+                        }\n                     };\n \n                     // This was an attempt to use a const parameter outside its scope."}, {"sha": "ccb6ccb57fa404c8538e62f5d43b2056d7347a98", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -400,6 +400,7 @@ symbols! {\n         doc_cfg,\n         doc_keyword,\n         doc_masked,\n+        doc_spotlight,\n         doctest,\n         document_private_items,\n         dotdot_in_tuple_patterns,\n@@ -968,6 +969,7 @@ symbols! {\n         soft,\n         specialization,\n         speed,\n+        spotlight,\n         sqrtf32,\n         sqrtf64,\n         sse4a_target_feature,"}, {"sha": "f6ebf8b56bd4cb1ce286131fcdb3434818551ae5", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -937,6 +937,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // legal to implement.\n         let mut candidates = all_traits(self.tcx)\n             .into_iter()\n+            // Don't issue suggestions for unstable traits since they're\n+            // unlikely to be implementable anyway\n+            .filter(|info| match self.tcx.lookup_stability(info.def_id) {\n+                Some(attr) => attr.level.is_stable(),\n+                None => true,\n+            })\n             .filter(|info| {\n                 // We approximate the coherence rules to only suggest\n                 // traits that are legal to implement by requiring that"}, {"sha": "17212187e6a01816ea08b0d00002d24cc2dc47b5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node};\n+use rustc_hir::{GenericParamKind, HirId, Node};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -1155,6 +1155,35 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n+struct AnonConstInParamListDetector {\n+    in_param_list: bool,\n+    found_anon_const_in_list: bool,\n+    ct: HirId,\n+}\n+\n+impl<'v> Visitor<'v> for AnonConstInParamListDetector {\n+    type Map = intravisit::ErasedMap<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n+        let prev = self.in_param_list;\n+        self.in_param_list = true;\n+        intravisit::walk_generic_param(self, p);\n+        self.in_param_list = prev;\n+    }\n+\n+    fn visit_anon_const(&mut self, c: &'v hir::AnonConst) {\n+        if self.in_param_list && self.ct == c.hir_id {\n+            self.found_anon_const_in_list = true;\n+        } else {\n+            intravisit::walk_anon_const(self, c)\n+        }\n+    }\n+}\n+\n fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     use rustc_hir::*;\n \n@@ -1176,10 +1205,32 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             let parent_def_id = tcx.hir().local_def_id(parent_id);\n \n-            // HACK(eddyb) this provides the correct generics when\n-            // `feature(const_generics)` is enabled, so that const expressions\n-            // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-            if tcx.lazy_normalization() {\n+            let mut in_param_list = false;\n+            for (_parent, node) in tcx.hir().parent_iter(hir_id) {\n+                if let Some(generics) = node.generics() {\n+                    let mut visitor = AnonConstInParamListDetector {\n+                        in_param_list: false,\n+                        found_anon_const_in_list: false,\n+                        ct: hir_id,\n+                    };\n+\n+                    visitor.visit_generics(generics);\n+                    in_param_list = visitor.found_anon_const_in_list;\n+                    break;\n+                }\n+            }\n+\n+            if in_param_list {\n+                // We do not allow generic parameters in anon consts if we are inside\n+                // of a param list.\n+                //\n+                // This affects both default type bindings, e.g. `struct<T, U = [u8; std::mem::size_of::<T>()]>(T, U)`,\n+                // and the types of const parameters, e.g. `struct V<const N: usize, const M: [u8; N]>();`.\n+                None\n+            } else if tcx.lazy_normalization() {\n+                // HACK(eddyb) this provides the correct generics when\n+                // `feature(const_generics)` is enabled, so that const expressions\n+                // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}, {"sha": "1be32729b1ee57bc3bb63ee9b84564e0b0100210", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -11,8 +11,10 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::PatKind;\n+use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, adjustment, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n \n use crate::mem_categorization as mc;\n use rustc_span::Span;\n@@ -396,6 +398,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             &*with_expr,\n                             with_place.clone(),\n                             with_field.ty(self.tcx(), substs),\n+                            mc::ProjectionKind::Field(f_index as u32, VariantIdx::new(0)),\n                         );\n                         self.delegate_consume(&field_place);\n                     }"}, {"sha": "70fe2c2cda5122e2f95dd7667f3df91224a50633", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 156, "deletions": 14, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -54,11 +54,14 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::PatKind;\n+use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_span::Span;\n+use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::infer::InferCtxtExt;\n \n #[derive(Clone, Debug)]\n@@ -77,8 +80,20 @@ pub enum PlaceBase {\n pub enum ProjectionKind {\n     /// A dereference of a pointer, reference or `Box<T>` of the given type\n     Deref,\n-    /// An index or a field\n-    Other,\n+\n+    /// `B.F` where `B` is the base expression and `F` is\n+    /// the field. The field is identified by which variant\n+    /// it appears in along with a field index. The variant\n+    /// is used for enums.\n+    Field(u32, VariantIdx),\n+\n+    /// Some index like `B[x]`, where `B` is the base\n+    /// expression. We don't preserve the index `x` because\n+    /// we won't need it.\n+    Index,\n+\n+    /// A subslice covering a range of values like `B[x..y]`.\n+    Subslice,\n }\n \n #[derive(Clone, Debug)]\n@@ -406,7 +421,20 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             hir::ExprKind::Field(ref base, _) => {\n                 let base = self.cat_expr(&base)?;\n                 debug!(\"cat_expr(cat_field): id={} expr={:?} base={:?}\", expr.hir_id, expr, base);\n-                Ok(self.cat_projection(expr, base, expr_ty))\n+\n+                let field_idx = self\n+                    .tables\n+                    .field_indices()\n+                    .get(expr.hir_id)\n+                    .cloned()\n+                    .expect(\"Field index not found\");\n+\n+                Ok(self.cat_projection(\n+                    expr,\n+                    base,\n+                    expr_ty,\n+                    ProjectionKind::Field(field_idx as u32, VariantIdx::new(0)),\n+                ))\n             }\n \n             hir::ExprKind::Index(ref base, _) => {\n@@ -419,7 +447,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                     self.cat_overloaded_place(expr, base)\n                 } else {\n                     let base = self.cat_expr(&base)?;\n-                    Ok(self.cat_projection(expr, base, expr_ty))\n+                    Ok(self.cat_projection(expr, base, expr_ty, ProjectionKind::Index))\n                 }\n             }\n \n@@ -533,9 +561,10 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         node: &N,\n         base_place: PlaceWithHirId<'tcx>,\n         ty: Ty<'tcx>,\n+        kind: ProjectionKind,\n     ) -> PlaceWithHirId<'tcx> {\n         let mut projections = base_place.place.projections;\n-        projections.push(Projection { kind: ProjectionKind::Other, ty: ty });\n+        projections.push(Projection { kind: kind, ty: ty });\n         let ret = PlaceWithHirId::new(\n             node.hir_id(),\n             base_place.place.base_ty,\n@@ -609,6 +638,75 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         self.cat_pattern_(place, pat, &mut op)\n     }\n \n+    /// Returns the variant index for an ADT used within a Struct or TupleStruct pattern\n+    /// Here `pat_hir_id` is the HirId of the pattern itself.\n+    fn variant_index_for_adt(\n+        &self,\n+        qpath: &hir::QPath<'_>,\n+        pat_hir_id: hir::HirId,\n+        span: Span,\n+    ) -> McResult<VariantIdx> {\n+        let res = self.tables.qpath_res(qpath, pat_hir_id);\n+        let ty = self.tables.node_type(pat_hir_id);\n+        let adt_def = match ty.kind {\n+            ty::Adt(adt_def, _) => adt_def,\n+            _ => {\n+                self.tcx()\n+                    .sess\n+                    .delay_span_bug(span, \"struct or tuple struct pattern not applied to an ADT\");\n+                return Err(());\n+            }\n+        };\n+\n+        match res {\n+            Res::Def(DefKind::Variant, variant_id) => Ok(adt_def.variant_index_with_id(variant_id)),\n+            Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_id) => {\n+                Ok(adt_def.variant_index_with_ctor_id(variant_ctor_id))\n+            }\n+            Res::Def(DefKind::Ctor(CtorOf::Struct, ..), _)\n+            | Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n+            | Res::SelfCtor(..)\n+            | Res::SelfTy(..) => {\n+                // Structs and Unions have only have one variant.\n+                Ok(VariantIdx::new(0))\n+            }\n+            _ => bug!(\"expected ADT path, found={:?}\", res),\n+        }\n+    }\n+\n+    /// Returns the total number of fields in an ADT variant used within a pattern.\n+    /// Here `pat_hir_id` is the HirId of the pattern itself.\n+    fn total_fields_in_adt_variant(\n+        &self,\n+        pat_hir_id: hir::HirId,\n+        variant_index: VariantIdx,\n+        span: Span,\n+    ) -> McResult<usize> {\n+        let ty = self.tables.node_type(pat_hir_id);\n+        match ty.kind {\n+            ty::Adt(adt_def, _) => Ok(adt_def.variants[variant_index].fields.len()),\n+            _ => {\n+                self.tcx()\n+                    .sess\n+                    .delay_span_bug(span, \"struct or tuple struct pattern not applied to an ADT\");\n+                return Err(());\n+            }\n+        }\n+    }\n+\n+    /// Returns the total number of fields in a tuple used within a Tuple pattern.\n+    /// Here `pat_hir_id` is the HirId of the pattern itself.\n+    fn total_fields_in_tuple(&self, pat_hir_id: hir::HirId, span: Span) -> McResult<usize> {\n+        let ty = self.tables.node_type(pat_hir_id);\n+        match ty.kind {\n+            ty::Tuple(substs) => Ok(substs.len()),\n+            _ => {\n+                self.tcx().sess.delay_span_bug(span, \"tuple pattern not applied to a tuple\");\n+                return Err(());\n+            }\n+        }\n+    }\n+\n     // FIXME(#19596) This is a workaround, but there should be a better way to do this\n     fn cat_pattern_<F>(\n         &self,\n@@ -679,20 +777,54 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         op(&place_with_id, pat);\n \n         match pat.kind {\n-            PatKind::TupleStruct(_, ref subpats, _) | PatKind::Tuple(ref subpats, _) => {\n-                // S(p1, ..., pN) or (p1, ..., pN)\n-                for subpat in subpats.iter() {\n+            PatKind::Tuple(ref subpats, dots_pos) => {\n+                // (p1, ..., pN)\n+                let total_fields = self.total_fields_in_tuple(pat.hir_id, pat.span)?;\n+\n+                for (i, subpat) in subpats.iter().enumerate_and_adjust(total_fields, dots_pos) {\n                     let subpat_ty = self.pat_ty_adjusted(&subpat)?;\n-                    let sub_place = self.cat_projection(pat, place_with_id.clone(), subpat_ty);\n+                    let projection_kind = ProjectionKind::Field(i as u32, VariantIdx::new(0));\n+                    let sub_place =\n+                        self.cat_projection(pat, place_with_id.clone(), subpat_ty, projection_kind);\n                     self.cat_pattern_(sub_place, &subpat, op)?;\n                 }\n             }\n \n-            PatKind::Struct(_, field_pats, _) => {\n+            PatKind::TupleStruct(ref qpath, ref subpats, dots_pos) => {\n+                // S(p1, ..., pN)\n+                let variant_index = self.variant_index_for_adt(qpath, pat.hir_id, pat.span)?;\n+                let total_fields =\n+                    self.total_fields_in_adt_variant(pat.hir_id, variant_index, pat.span)?;\n+\n+                for (i, subpat) in subpats.iter().enumerate_and_adjust(total_fields, dots_pos) {\n+                    let subpat_ty = self.pat_ty_adjusted(&subpat)?;\n+                    let projection_kind = ProjectionKind::Field(i as u32, variant_index);\n+                    let sub_place =\n+                        self.cat_projection(pat, place_with_id.clone(), subpat_ty, projection_kind);\n+                    self.cat_pattern_(sub_place, &subpat, op)?;\n+                }\n+            }\n+\n+            PatKind::Struct(ref qpath, field_pats, _) => {\n                 // S { f1: p1, ..., fN: pN }\n+\n+                let variant_index = self.variant_index_for_adt(qpath, pat.hir_id, pat.span)?;\n+\n                 for fp in field_pats {\n                     let field_ty = self.pat_ty_adjusted(&fp.pat)?;\n-                    let field_place = self.cat_projection(pat, place_with_id.clone(), field_ty);\n+                    let field_index = self\n+                        .tables\n+                        .field_indices()\n+                        .get(fp.hir_id)\n+                        .cloned()\n+                        .expect(\"no index for a field\");\n+\n+                    let field_place = self.cat_projection(\n+                        pat,\n+                        place_with_id.clone(),\n+                        field_ty,\n+                        ProjectionKind::Field(field_index as u32, variant_index),\n+                    );\n                     self.cat_pattern_(field_place, &fp.pat, op)?;\n                 }\n             }\n@@ -723,13 +855,23 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                         return Err(());\n                     }\n                 };\n-                let elt_place = self.cat_projection(pat, place_with_id.clone(), element_ty);\n+                let elt_place = self.cat_projection(\n+                    pat,\n+                    place_with_id.clone(),\n+                    element_ty,\n+                    ProjectionKind::Index,\n+                );\n                 for before_pat in before {\n                     self.cat_pattern_(elt_place.clone(), &before_pat, op)?;\n                 }\n                 if let Some(ref slice_pat) = *slice {\n                     let slice_pat_ty = self.pat_ty_adjusted(&slice_pat)?;\n-                    let slice_place = self.cat_projection(pat, place_with_id, slice_pat_ty);\n+                    let slice_place = self.cat_projection(\n+                        pat,\n+                        place_with_id,\n+                        slice_pat_ty,\n+                        ProjectionKind::Subslice,\n+                    );\n                     self.cat_pattern_(slice_place, &slice_pat, op)?;\n                 }\n                 for after_pat in after {"}, {"sha": "491daa80e5c859ddd0f8692fe4cf0e99c85f9a11", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -12,7 +12,7 @@ use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty;\n use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n use crate::clean::{self, GetDefId, ToSource, TypeKind};\n@@ -194,13 +194,15 @@ pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n+    let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n     let is_auto = cx.tcx.trait_is_auto(did);\n     clean::Trait {\n         auto: auto_trait,\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n+        is_spotlight,\n         is_auto,\n     }\n }\n@@ -339,6 +341,16 @@ pub fn build_impl(\n                 return;\n             }\n         }\n+\n+        // Skip foreign unstable traits from lists of trait implementations and\n+        // such. This helps prevent dependencies of the standard library, for\n+        // example, from getting documented as \"traits `u32` implements\" which\n+        // isn't really too helpful.\n+        if let Some(stab) = cx.tcx.lookup_stability(did) {\n+            if stab.level.is_unstable() {\n+                return;\n+            }\n+        }\n     }\n \n     let for_ = if let Some(did) = did.as_local() {"}, {"sha": "8a4ee91df405fcb8b033ec6911e8916b71154aaf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1007,6 +1007,7 @@ impl Clean<FnRetTy> for hir::FnRetTy<'_> {\n impl Clean<Item> for doctree::Trait<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let attrs = self.attrs.clean(cx);\n+        let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n@@ -1021,6 +1022,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n                 items: self.items.iter().map(|ti| ti.clean(cx)).collect(),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n+                is_spotlight,\n                 is_auto: self.is_auto.clean(cx),\n             }),\n         }"}, {"sha": "6a03722cd0802786f31710bb146e981c3fecf13e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -486,33 +486,6 @@ impl Attributes {\n         })\n     }\n \n-    /// Enforce the format of attributes inside `#[doc(...)]`.\n-    pub fn check_doc_attributes(\n-        diagnostic: &::rustc_errors::Handler,\n-        mi: &ast::MetaItem,\n-    ) -> Option<(String, String)> {\n-        mi.meta_item_list().and_then(|list| {\n-            for meta in list {\n-                if meta.check_name(sym::alias) {\n-                    if !meta.is_value_str()\n-                        || meta\n-                            .value_str()\n-                            .map(|s| s.to_string())\n-                            .unwrap_or_else(String::new)\n-                            .is_empty()\n-                    {\n-                        diagnostic.span_err(\n-                            meta.span(),\n-                            \"doc alias attribute expects a string: #[doc(alias = \\\"0\\\")]\",\n-                        );\n-                    }\n-                }\n-            }\n-\n-            None\n-        })\n-    }\n-\n     pub fn has_doc_flag(&self, flag: Symbol) -> bool {\n         for attr in &self.other_attrs {\n             if !attr.check_name(sym::doc) {\n@@ -556,7 +529,6 @@ impl Attributes {\n                 } else {\n                     if attr.check_name(sym::doc) {\n                         if let Some(mi) = attr.meta() {\n-                            Attributes::check_doc_attributes(&diagnostic, &mi);\n                             if let Some(cfg_mi) = Attributes::extract_cfg(&mi) {\n                                 // Extracted #[doc(cfg(...))]\n                                 match Cfg::parse(cfg_mi) {\n@@ -995,6 +967,7 @@ pub struct Trait {\n     pub items: Vec<Item>,\n     pub generics: Generics,\n     pub bounds: Vec<GenericBound>,\n+    pub is_spotlight: bool,\n     pub is_auto: bool,\n }\n "}, {"sha": "00315675fafe3e61137cbf69523680f168d6fbd5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 102, "deletions": 6, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -5,10 +5,15 @@ use rustc_driver::abort_on_err;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n-use rustc_hir::def::Namespace::TypeNS;\n+use rustc_hir::def::{Namespace::TypeNS, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::HirId;\n+use rustc_hir::{\n+    intravisit::{self, NestedVisitorMap, Visitor},\n+    Path,\n+};\n use rustc_interface::interface;\n+use rustc_middle::hir::map::Map;\n use rustc_middle::middle::cstore::CrateStore;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{Ty, TyCtxt};\n@@ -372,7 +377,35 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         crate_name,\n         lint_caps,\n         register_lints: None,\n-        override_queries: None,\n+        override_queries: Some(|_sess, providers, _external_providers| {\n+            // Most lints will require typechecking, so just don't run them.\n+            providers.lint_mod = |_, _| {};\n+            // Prevent `rustc_typeck::check_crate` from calling `typeck_tables_of` on all bodies.\n+            providers.typeck_item_bodies = |_, _| {};\n+            // hack so that `used_trait_imports` won't try to call typeck_tables_of\n+            providers.used_trait_imports = |_, _| {\n+                lazy_static! {\n+                    static ref EMPTY_SET: FxHashSet<LocalDefId> = FxHashSet::default();\n+                }\n+                &EMPTY_SET\n+            };\n+            // In case typeck does end up being called, don't ICE in case there were name resolution errors\n+            providers.typeck_tables_of = move |tcx, def_id| {\n+                // Closures' tables come from their outermost function,\n+                // as they are part of the same \"inference environment\".\n+                // This avoids emitting errors for the parent twice (see similar code in `typeck_tables_of_with_fallback`)\n+                let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id()).expect_local();\n+                if outer_def_id != def_id {\n+                    return tcx.typeck_tables_of(outer_def_id);\n+                }\n+\n+                let hir = tcx.hir();\n+                let body = hir.body(hir.body_owned_by(hir.as_local_hir_id(def_id)));\n+                debug!(\"visiting body for {:?}\", def_id);\n+                EmitIgnoredResolutionErrors::new(tcx).visit_body(body);\n+                (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck_tables_of)(tcx, def_id)\n+            };\n+        }),\n         registry: rustc_driver::diagnostics_registry(),\n     };\n \n@@ -416,10 +449,17 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n \n             global_ctxt.enter(|tcx| {\n-                tcx.analysis(LOCAL_CRATE).ok();\n-\n-                // Abort if there were any errors so far\n-                sess.abort_if_errors();\n+                // Certain queries assume that some checks were run elsewhere\n+                // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n+                // so type-check everything other than function bodies in this crate before running lints.\n+                // NOTE: this does not call `tcx.analysis()` so that we won't\n+                // typeck function bodies or run the default rustc lints.\n+                // (see `override_queries` in the `config`)\n+                let _ = rustc_typeck::check_crate(tcx);\n+                tcx.sess.abort_if_errors();\n+                sess.time(\"missing_docs\", || {\n+                    rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);\n+                });\n \n                 let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n                 // Convert from a HirId set to a DefId set since we don't always have easy access\n@@ -570,6 +610,62 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     })\n }\n \n+/// Due to https://github.com/rust-lang/rust/pull/73566,\n+/// the name resolution pass may find errors that are never emitted.\n+/// If typeck is called after this happens, then we'll get an ICE:\n+/// 'Res::Error found but not reported'. To avoid this, emit the errors now.\n+struct EmitIgnoredResolutionErrors<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> EmitIgnoredResolutionErrors<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        Self { tcx }\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for EmitIgnoredResolutionErrors<'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        // We need to recurse into nested closures,\n+        // since those will fallback to the parent for type checking.\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    }\n+\n+    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+        debug!(\"visiting path {:?}\", path);\n+        if path.res == Res::Err {\n+            // We have less context here than in rustc_resolve,\n+            // so we can only emit the name and span.\n+            // However we can give a hint that rustc_resolve will have more info.\n+            let label = format!(\n+                \"could not resolve path `{}`\",\n+                path.segments\n+                    .iter()\n+                    .map(|segment| segment.ident.as_str().to_string())\n+                    .collect::<Vec<_>>()\n+                    .join(\"::\")\n+            );\n+            let mut err = rustc_errors::struct_span_err!(\n+                self.tcx.sess,\n+                path.span,\n+                E0433,\n+                \"failed to resolve: {}\",\n+                label\n+            );\n+            err.span_label(path.span, label);\n+            err.note(\"this error was originally ignored because you are running `rustdoc`\");\n+            err.note(\"try running again with `rustc` or `cargo check` and you may get a more detailed error\");\n+            err.emit();\n+        }\n+        // We could have an outer resolution that succeeded,\n+        // but with generic parameters that failed.\n+        // Recurse into the segments so we catch those too.\n+        intravisit::walk_path(self, path);\n+    }\n+}\n+\n /// `DefId` or parameter index (`ty::ParamTy.index`) of a synthetic type parameter\n /// for `impl Trait` in argument position.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]"}, {"sha": "c8121d39d0f8f5dc67c1bfaf4bae3f6da587ddd2", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -37,14 +37,14 @@ impl ExternalHtml {\n         let bc = format!(\n             \"{}{}\",\n             bc,\n-            Markdown(&m_bc, &[], id_map, codes, edition, playground).to_string()\n+            Markdown(&m_bc, &[], id_map, codes, edition, playground).into_string()\n         );\n         let ac = load_external_files(after_content, diag)?;\n         let m_ac = load_external_files(md_after_content, diag)?;\n         let ac = format!(\n             \"{}{}\",\n             ac,\n-            Markdown(&m_ac, &[], id_map, codes, edition, playground).to_string()\n+            Markdown(&m_ac, &[], id_map, codes, edition, playground).into_string()\n         );\n         Some(ExternalHtml { in_header: ih, before_content: bc, after_content: ac })\n     }"}, {"sha": "0d8284029afc72f87143d5367a6a8fd84e6bab08", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -63,10 +63,22 @@ impl Buffer {\n         Buffer { for_html: false, buffer: String::new() }\n     }\n \n+    crate fn is_empty(&self) -> bool {\n+        self.buffer.is_empty()\n+    }\n+\n     crate fn into_inner(self) -> String {\n         self.buffer\n     }\n \n+    crate fn insert_str(&mut self, idx: usize, s: &str) {\n+        self.buffer.insert_str(idx, s);\n+    }\n+\n+    crate fn push_str(&mut self, s: &str) {\n+        self.buffer.push_str(s);\n+    }\n+\n     // Intended for consumption by write! and writeln! (std::fmt) but without\n     // the fmt::Result return type imposed by fmt::Write (and avoiding the trait\n     // import)."}, {"sha": "d4302d0cb546b8bf49ac5ca4e45e7c707d54ad32", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -12,15 +12,17 @@ use std::io;\n use std::io::prelude::*;\n \n use rustc_ast::token::{self, Token};\n+use rustc_data_structures::sync::Lrc;\n use rustc_parse::lexer;\n use rustc_session::parse::ParseSess;\n+use rustc_span::hygiene::SyntaxContext;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::{FileName, Span};\n+use rustc_span::{BytePos, FileName, SourceFile, Span};\n \n /// Highlights `src`, returning the HTML output.\n pub fn render_with_highlighting(\n-    src: &str,\n+    src: String,\n     class: Option<&str>,\n     playground_button: Option<&str>,\n     tooltip: Option<(&str, &str)>,\n@@ -38,12 +40,13 @@ pub fn render_with_highlighting(\n     }\n \n     let sess = ParseSess::with_silent_emitter();\n-    let sf = sess\n+    let source_file = sess\n         .source_map()\n-        .new_source_file(FileName::Custom(String::from(\"rustdoc-highlighting\")), src.to_owned());\n+        .new_source_file(FileName::Custom(String::from(\"rustdoc-highlighting\")), src);\n+\n+    let classifier_source_file = Lrc::clone(&source_file);\n     let highlight_result = rustc_driver::catch_fatal_errors(|| {\n-        let lexer = lexer::StringReader::new(&sess, sf, None);\n-        let mut classifier = Classifier::new(lexer, sess.source_map());\n+        let mut classifier = Classifier::new(&sess, classifier_source_file);\n \n         let mut highlighted_source = vec![];\n         if classifier.write_source(&mut highlighted_source).is_err() {\n@@ -61,9 +64,17 @@ pub fn render_with_highlighting(\n             write_footer(&mut out, playground_button).unwrap();\n         }\n         Err(()) => {\n+            // Get the source back out of the source map to avoid a copy in the happy path.\n+            let span =\n+                Span::new(BytePos(0), BytePos(source_file.byte_length()), SyntaxContext::root());\n+            let src = sess\n+                .source_map()\n+                .span_to_snippet(span)\n+                .expect(\"could not retrieve snippet from artificial source file\");\n+\n             // If errors are encountered while trying to highlight, just emit\n             // the unhighlighted source.\n-            write!(out, \"<pre><code>{}</code></pre>\", Escape(src)).unwrap();\n+            write!(out, \"<pre><code>{}</code></pre>\", Escape(&src)).unwrap();\n         }\n     }\n \n@@ -73,10 +84,10 @@ pub fn render_with_highlighting(\n /// Processes a program (nested in the internal `lexer`), classifying strings of\n /// text by highlighting category (`Class`). Calls out to a `Writer` to write\n /// each span of text in sequence.\n-struct Classifier<'a> {\n-    lexer: lexer::StringReader<'a>,\n+struct Classifier<'sess> {\n+    lexer: lexer::StringReader<'sess>,\n     peek_token: Option<Token>,\n-    source_map: &'a SourceMap,\n+    source_map: &'sess SourceMap,\n \n     // State of the classifier.\n     in_attribute: bool,\n@@ -154,6 +165,7 @@ impl<U: Write> Writer for U {\n     }\n }\n \n+#[derive(Debug)]\n enum HighlightError {\n     LexError,\n     IoError(io::Error),\n@@ -165,12 +177,14 @@ impl From<io::Error> for HighlightError {\n     }\n }\n \n-impl<'a> Classifier<'a> {\n-    fn new(lexer: lexer::StringReader<'a>, source_map: &'a SourceMap) -> Classifier<'a> {\n+impl<'sess> Classifier<'sess> {\n+    fn new(sess: &ParseSess, source_file: Lrc<SourceFile>) -> Classifier<'_> {\n+        let lexer = lexer::StringReader::new(sess, source_file, None);\n+\n         Classifier {\n             lexer,\n             peek_token: None,\n-            source_map,\n+            source_map: sess.source_map(),\n             in_attribute: false,\n             in_macro: false,\n             in_macro_nonterminal: false,\n@@ -209,11 +223,17 @@ impl<'a> Classifier<'a> {\n     /// source.\n     fn write_source<W: Writer>(&mut self, out: &mut W) -> Result<(), HighlightError> {\n         loop {\n-            let next = self.try_next_token()?;\n+            let mut next = self.try_next_token()?;\n             if next == token::Eof {\n                 break;\n             }\n \n+            // Glue any tokens that need to be glued.\n+            if let Some(joint) = next.glue(self.peek()?) {\n+                next = joint;\n+                let _ = self.try_next_token()?;\n+            }\n+\n             self.write_token(out, next)?;\n         }\n \n@@ -429,3 +449,6 @@ fn write_header(class: Option<&str>, out: &mut dyn Write) -> io::Result<()> {\n fn write_footer(out: &mut dyn Write, playground_button: Option<&str>) -> io::Result<()> {\n     write!(out, \"</pre>{}</div>\\n\", if let Some(button) = playground_button { button } else { \"\" })\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "01b25fd6be4ac9bce04084b695ef2423dd9cfd96", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,82 @@\n+use rustc_ast::attr::with_session_globals;\n+use rustc_session::parse::ParseSess;\n+use rustc_span::edition::Edition;\n+use rustc_span::FileName;\n+\n+use super::Classifier;\n+\n+fn highlight(src: &str) -> String {\n+    let mut out = vec![];\n+\n+    with_session_globals(Edition::Edition2018, || {\n+        let sess = ParseSess::with_silent_emitter();\n+        let source_file = sess.source_map().new_source_file(\n+            FileName::Custom(String::from(\"rustdoc-highlighting\")),\n+            src.to_owned(),\n+        );\n+\n+        let mut classifier = Classifier::new(&sess, source_file);\n+        classifier.write_source(&mut out).unwrap();\n+    });\n+\n+    String::from_utf8(out).unwrap()\n+}\n+\n+#[test]\n+fn function() {\n+    assert_eq!(\n+        highlight(\"fn main() {}\"),\n+        r#\"<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {}\"#,\n+    );\n+}\n+\n+#[test]\n+fn statement() {\n+    assert_eq!(\n+        highlight(\"let foo = true;\"),\n+        concat!(\n+            r#\"<span class=\"kw\">let</span> <span class=\"ident\">foo</span> \"#,\n+            r#\"<span class=\"op\">=</span> <span class=\"bool-val\">true</span>;\"#,\n+        ),\n+    );\n+}\n+\n+#[test]\n+fn inner_attr() {\n+    assert_eq!(\n+        highlight(r##\"#![crate_type = \"lib\"]\"##),\n+        concat!(\n+            r##\"<span class=\"attribute\">#![<span class=\"ident\">crate_type</span> \"##,\n+            r##\"<span class=\"op\">=</span> <span class=\"string\">&quot;lib&quot;</span>]</span>\"##,\n+        ),\n+    );\n+}\n+\n+#[test]\n+fn outer_attr() {\n+    assert_eq!(\n+        highlight(r##\"#[cfg(target_os = \"linux\")]\"##),\n+        concat!(\n+            r##\"<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(\"##,\n+            r##\"<span class=\"ident\">target_os</span> <span class=\"op\">=</span> \"##,\n+            r##\"<span class=\"string\">&quot;linux&quot;</span>)]</span>\"##,\n+        ),\n+    );\n+}\n+\n+#[test]\n+fn mac() {\n+    assert_eq!(\n+        highlight(\"mac!(foo bar)\"),\n+        concat!(\n+            r#\"<span class=\"macro\">mac</span><span class=\"macro\">!</span>(\"#,\n+            r#\"<span class=\"ident\">foo</span> <span class=\"ident\">bar</span>)\"#,\n+        ),\n+    );\n+}\n+\n+// Regression test for #72684\n+#[test]\n+fn andand() {\n+    assert_eq!(highlight(\"&&\"), r#\"<span class=\"op\">&amp;&amp;</span>\"#);\n+}"}, {"sha": "4cfd81ffbce9da6423f61167ecb6da85394241de", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -13,7 +13,7 @@\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n //! let md = Markdown(s, &[], &mut id_map, ErrorCodes::Yes, Edition::Edition2015, &None);\n-//! let html = md.to_string();\n+//! let html = md.into_string();\n //! // ... something using html\n //! ```\n \n@@ -292,7 +292,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n \n         if let Some((s1, s2)) = tooltip {\n             s.push_str(&highlight::render_with_highlighting(\n-                &text,\n+                text,\n                 Some(&format!(\n                     \"rust-example-rendered{}\",\n                     if ignore != Ignore::None {\n@@ -313,7 +313,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             Some(Event::Html(s.into()))\n         } else {\n             s.push_str(&highlight::render_with_highlighting(\n-                &text,\n+                text,\n                 Some(&format!(\n                     \"rust-example-rendered{}\",\n                     if ignore != Ignore::None {\n@@ -848,7 +848,7 @@ impl LangString {\n }\n \n impl Markdown<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let Markdown(md, links, mut ids, codes, edition, playground) = self;\n \n         // This is actually common enough to special-case\n@@ -878,7 +878,7 @@ impl Markdown<'_> {\n }\n \n impl MarkdownWithToc<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let MarkdownWithToc(md, mut ids, codes, edition, playground) = self;\n \n         let p = Parser::new_ext(md, opts());\n@@ -899,7 +899,7 @@ impl MarkdownWithToc<'_> {\n }\n \n impl MarkdownHtml<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let MarkdownHtml(md, mut ids, codes, edition, playground) = self;\n \n         // This is actually common enough to special-case\n@@ -926,7 +926,7 @@ impl MarkdownHtml<'_> {\n }\n \n impl MarkdownSummaryLine<'_> {\n-    pub fn to_string(self) -> String {\n+    pub fn into_string(self) -> String {\n         let MarkdownSummaryLine(md, links) = self;\n         // This is actually common enough to special-case\n         if md.is_empty() {"}, {"sha": "783977d285dc466d0c9007b36a9f95330a25dbf4", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -134,7 +134,7 @@ fn test_header() {\n     fn t(input: &str, expect: &str) {\n         let mut map = IdMap::new();\n         let output =\n-            Markdown(input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n+            Markdown(input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -166,7 +166,8 @@ fn test_header() {\n fn test_header_ids_multiple_blocks() {\n     let mut map = IdMap::new();\n     fn t(map: &mut IdMap, input: &str, expect: &str) {\n-        let output = Markdown(input, &[], map, ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n+        let output =\n+            Markdown(input, &[], map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -228,7 +229,7 @@ fn test_markdown_html_escape() {\n     fn t(input: &str, expect: &str) {\n         let mut idmap = IdMap::new();\n         let output =\n-            MarkdownHtml(input, &mut idmap, ErrorCodes::Yes, DEFAULT_EDITION, &None).to_string();\n+            MarkdownHtml(input, &mut idmap, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n "}, {"sha": "31e35125dac57ba548cd3d4aafda7fc134c07ca2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 75, "deletions": 11, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1895,7 +1895,7 @@ fn render_markdown(\n             cx.shared.edition,\n             &cx.shared.playground\n         )\n-        .to_string()\n+        .into_string()\n     )\n }\n \n@@ -2185,7 +2185,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                        </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n                     stab_tags = stability_tags(myitem),\n-                    docs = MarkdownSummaryLine(doc_value, &myitem.links()).to_string(),\n+                    docs = MarkdownSummaryLine(doc_value, &myitem.links()).into_string(),\n                     class = myitem.type_(),\n                     add = add,\n                     stab = stab.unwrap_or_else(String::new),\n@@ -2278,7 +2278,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                 cx.shared.edition,\n                 &cx.shared.playground,\n             );\n-            message.push_str(&format!(\": {}\", html.to_string()));\n+            message.push_str(&format!(\": {}\", html.into_string()));\n         }\n         stability.push(format!(\n             \"<div class='stab deprecated'><span class='emoji'>\ud83d\udc4e</span> {}</div>\",\n@@ -2332,7 +2332,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                     cx.shared.edition,\n                     &cx.shared.playground,\n                 )\n-                .to_string()\n+                .into_string()\n             );\n         }\n \n@@ -2415,7 +2415,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-           {name}{generics}{decl}{where_clause}</pre>\",\n+           {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n@@ -2425,7 +2425,8 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         generics = f.generics.print(),\n         where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n         decl = Function { decl: &f.decl, header_len, indent: 0, asyncness: f.header.asyncness }\n-            .print()\n+            .print(),\n+        spotlight = spotlight_decl(&f.decl),\n     );\n     document(w, cx, it)\n }\n@@ -2612,7 +2613,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let name = m.name.as_ref().unwrap();\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id);\n+        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id,);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -2926,7 +2927,7 @@ fn render_assoc_item(\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n-                   {generics}{decl}{where_clause}\",\n+                   {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             meth.visibility.print_with_space(),\n             header.constness.print_with_space(),\n@@ -2938,6 +2939,7 @@ fn render_assoc_item(\n             name = name,\n             generics = g.print(),\n             decl = Function { decl: d, header_len, indent, asyncness: header.asyncness }.print(),\n+            spotlight = spotlight_decl(&d),\n             where_clause = WhereClause { gens: g, indent, end_newline }\n         )\n     }\n@@ -3559,6 +3561,62 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     }\n }\n \n+fn spotlight_decl(decl: &clean::FnDecl) -> String {\n+    let mut out = Buffer::html();\n+    let mut trait_ = String::new();\n+\n+    if let Some(did) = decl.output.def_id() {\n+        let c = cache();\n+        if let Some(impls) = c.impls.get(&did) {\n+            for i in impls {\n+                let impl_ = i.inner_impl();\n+                if impl_.trait_.def_id().map_or(false, |d| c.traits[&d].is_spotlight) {\n+                    if out.is_empty() {\n+                        out.push_str(&format!(\n+                            \"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n+                                      <code class=\\\"content\\\">\",\n+                            impl_.for_.print()\n+                        ));\n+                        trait_.push_str(&impl_.for_.print().to_string());\n+                    }\n+\n+                    //use the \"where\" class here to make it small\n+                    out.push_str(&format!(\n+                        \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n+                        impl_.print()\n+                    ));\n+                    let t_did = impl_.trait_.def_id().unwrap();\n+                    for it in &impl_.items {\n+                        if let clean::TypedefItem(ref tydef, _) = it.inner {\n+                            out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n+                            assoc_type(\n+                                &mut out,\n+                                it,\n+                                &[],\n+                                Some(&tydef.type_),\n+                                AssocItemLink::GotoSource(t_did, &FxHashSet::default()),\n+                                \"\",\n+                            );\n+                            out.push_str(\";</span>\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    if !out.is_empty() {\n+        out.insert_str(\n+            0,\n+            \"<span class=\\\"important-traits\\\"><span class=\\\"important-traits-tooltip\\\">\u24d8<div class='important-traits-tooltiptext'><span class=\\\"docblock\\\">\"\n+\n+        );\n+        out.push_str(\"</code></span></div></span></span>\");\n+    }\n+\n+    out.into_inner()\n+}\n+\n fn render_impl(\n     w: &mut Buffer,\n     cx: &Context,\n@@ -3632,7 +3690,7 @@ fn render_impl(\n                     cx.shared.edition,\n                     &cx.shared.playground\n                 )\n-                .to_string()\n+                .into_string()\n             );\n         }\n     }\n@@ -3670,7 +3728,8 @@ fn render_impl(\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n+                    write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since(), outer_version);\n@@ -4526,7 +4585,12 @@ fn sidebar_foreign_type(buf: &mut Buffer, it: &clean::Item) {\n \n fn item_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Macro) {\n     wrap_into_docblock(w, |w| {\n-        w.write_str(&highlight::render_with_highlighting(&t.source, Some(\"macro\"), None, None))\n+        w.write_str(&highlight::render_with_highlighting(\n+            t.source.clone(),\n+            Some(\"macro\"),\n+            None,\n+            None,\n+        ))\n     });\n     document(w, cx, it)\n }"}, {"sha": "e3215921f125c7bfe1b313c776ee1dac19b07e23", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -75,16 +75,17 @@ impl<'a> SourceCollector<'a> {\n             return Ok(());\n         }\n \n-        let contents = match fs::read_to_string(&p) {\n+        let mut contents = match fs::read_to_string(&p) {\n             Ok(contents) => contents,\n             Err(e) => {\n                 return Err(Error::new(e, &p));\n             }\n         };\n \n         // Remove the utf-8 BOM if any\n-        let contents =\n-            if contents.starts_with(\"\\u{feff}\") { &contents[3..] } else { &contents[..] };\n+        if contents.starts_with(\"\\u{feff}\") {\n+            contents.drain(..3);\n+        }\n \n         // Create the intermediate directories\n         let mut cur = self.dst.clone();\n@@ -122,7 +123,7 @@ impl<'a> SourceCollector<'a> {\n             &self.scx.layout,\n             &page,\n             \"\",\n-            |buf: &mut _| print_src(buf, &contents),\n+            |buf: &mut _| print_src(buf, contents),\n             &self.scx.style_files,\n         );\n         self.scx.fs.write(&cur, v.as_bytes())?;\n@@ -160,7 +161,7 @@ where\n \n /// Wrapper struct to render the source code of a file. This will do things like\n /// adding line numbers to the left-hand side.\n-fn print_src(buf: &mut Buffer, s: &str) {\n+fn print_src(buf: &mut Buffer, s: String) {\n     let lines = s.lines().count();\n     let mut cols = 0;\n     let mut tmp = lines;"}, {"sha": "082f9cca064f133560460d5496d472223a2c2bcd", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -2636,6 +2636,13 @@ function defocusSearchBar() {\n         });\n     }());\n \n+    onEachLazy(document.getElementsByClassName(\"important-traits\"), function(e) {\n+        e.onclick = function() {\n+            this.getElementsByClassName('important-traits-tooltiptext')[0]\n+                .classList.toggle(\"force-tooltip\");\n+        };\n+    });\n+\n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {\n         if (nb === 0 || nb === 1 || nb === 2) {"}, {"sha": "f5551446bf22029089965344477262486614084f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -146,9 +146,12 @@ code, pre, a.test-arrow {\n \tborder-radius: 3px;\n \tpadding: 0 0.1em;\n }\n-.docblock pre code, .docblock-short pre code {\n+.docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n \tpadding: 0;\n }\n+.docblock code.spotlight :last-child {\n+\tpadding-bottom: 0.6em;\n+}\n pre {\n \tpadding: 14px;\n }\n@@ -523,7 +526,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div {\n+.content .methods > div:not(.important-traits) {\n \tmargin-left: 40px;\n \tmargin-bottom: 15px;\n }\n@@ -1079,10 +1082,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tfont-size: 16px;\n }\n \n-.tooltip:hover .tooltiptext {\n-\tdisplay: inline;\n-}\n-\n .tooltip .tooltiptext::after {\n \tcontent: \" \";\n \tposition: absolute;\n@@ -1098,13 +1097,52 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tfont-size: 20px;\n }\n \n-.tooltip .tooltiptext {\n+.important-traits-tooltip {\n+\tdisplay: inline-block;\n+\tcursor: pointer;\n+}\n+\n+.important-traits:hover .important-traits-tooltiptext,\n+.important-traits .important-traits-tooltiptext.force-tooltip {\n+\tdisplay: inline-block;\n+}\n+\n+.important-traits .important-traits-tooltiptext {\n+\tdisplay: none;\n+\tpadding: 5px 3px 3px 3px;\n+\tborder-radius: 6px;\n+\tmargin-left: 5px;\n+\tz-index: 10;\n+\tfont-size: 16px;\n+\tcursor: default;\n+\tposition: absolute;\n \tborder: 1px solid;\n-\tfont-weight: normal;\n }\n \n-pre.rust {\n+.important-traits-tooltip::after {\n+\t/* The margin on the tooltip does not capture hover events,\n+\t   this extends the area of hover enough so that mouse hover is not\n+\t   lost when moving the mouse to the tooltip */\n+    content: \"\\00a0\\00a0\\00a0\";\n+}\n+\n+.important-traits .important, .important-traits .docblock {\n+\tmargin: 0;\n+}\n+\n+.important-traits .docblock code.content{\n+    margin: 0;\n+    padding: 0;\n+    font-size: 20px;\n+}\n+\n+/* Example code has the \"Run\" button that\n+   needs to be positioned relative to the pre */\n+pre.rust.rust-example-rendered {\n \tposition: relative;\n+}\n+\n+pre.rust {\n \ttab-size: 4;\n \t-moz-tab-size: 4;\n }\n@@ -1144,6 +1182,18 @@ pre.rust {\n \tfont-size: 16px;\n }\n \n+.important-traits {\n+\tcursor: pointer;\n+\tz-index: 2;\n+\tmargin-left: 5px;\n+}\n+\n+h4 > .important-traits {\n+\tposition: absolute;\n+\tleft: -44px;\n+\ttop: 2px;\n+}\n+\n #all-types {\n \ttext-align: center;\n \tborder: 1px solid;\n@@ -1370,6 +1420,12 @@ pre.rust {\n \t\tz-index: 1;\n \t}\n \n+\th4 > .important-traits {\n+\t\tposition: absolute;\n+\t\tleft: -22px;\n+\t\ttop: 24px;\n+\t}\n+\n \t#titles > div > div.count {\n \t\tfloat: left;\n \t\twidth: 100%;"}, {"sha": "6805f2a266f0942e5e2e07a0ca58bbd499a295d7", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -140,4 +140,9 @@ function createSourceSidebar() {\n     });\n \n     main.insertBefore(sidebar, main.firstChild);\n+    // Focus on the current file in the source files sidebar.\n+    var selected_elem = sidebar.getElementsByClassName(\"selected\")[0];\n+    if (typeof selected_elem !== \"undefined\") {\n+        selected_elem.focus();\n+    }\n }"}, {"sha": "b436997da5816f72f140f0dc29cf2d9346b6f214", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -394,6 +394,11 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent #314559 transparent transparent;\n }\n \n+.important-traits-tooltiptext {\n+    background-color: #314559;\n+    border-color: #5c6773;\n+}\n+\n #titles > div.selected {\n     background-color: #141920 !important;\n \tborder-bottom: 1px solid #ffb44c !important;"}, {"sha": "f4ca67f8540a9cff5158b467af2e065f165e834d", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -337,6 +337,11 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n+.important-traits-tooltiptext {\n+\tbackground-color: #111;\n+\tborder-color: #777;\n+}\n+\n #titles > div:not(.selected) {\n \tbackground-color: #252525;\n \tborder-top-color: #252525;"}, {"sha": "b5a0ba4775c2454355d1c4483d58d6ac4843f7d0", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -331,6 +331,11 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n+.important-traits-tooltiptext {\n+\tbackground-color: #eee;\n+\tborder-color: #999;\n+}\n+\n #titles > div:not(.selected) {\n \tbackground-color: #e6e6e6;\n \tborder-top-color: #e6e6e6;"}, {"sha": "cbf53d52ef009d13661cbb2a681c6be5357a4955", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -15,6 +15,8 @@\n #![recursion_limit = \"256\"]\n \n extern crate env_logger;\n+#[macro_use]\n+extern crate lazy_static;\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n@@ -94,6 +96,7 @@ pub fn main() {\n         32_000_000 // 32MB on other platforms\n     };\n     rustc_driver::set_sigpipe_handler();\n+    rustc_driver::install_ice_hook();\n     env_logger::init_from_env(\"RUSTDOC_LOG\");\n     let res = std::thread::Builder::new()\n         .stack_size(thread_stack_size)"}, {"sha": "89d184e35cb064a177c3a81a3961a97add895e12", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -68,9 +68,9 @@ pub fn render<P: AsRef<Path>>(\n     let mut ids = IdMap::new();\n     let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let text = if !options.markdown_no_toc {\n-        MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).to_string()\n+        MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).into_string()\n     } else {\n-        Markdown(text, &[], &mut ids, error_codes, edition, &playground).to_string()\n+        Markdown(text, &[], &mut ids, error_codes, edition, &playground).into_string()\n     };\n \n     let err = write!("}, {"sha": "d5af4f25102d1de3c31bb63f3105a49278d36dc9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -499,6 +499,7 @@ where\n /// [`&str`]: ../../std/primitive.str.html\n /// [slice]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning\n     /// how many bytes were read.\n@@ -1261,6 +1262,7 @@ impl Initializer {\n ///\n /// [`write_all`]: #method.write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Write {\n     /// Write a buffer into this writer, returning how many bytes were written.\n     ///"}, {"sha": "cbc24009a949ade70a68b8116101e4c66969dd66", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -261,6 +261,7 @@\n #![feature(doc_cfg)]\n #![feature(doc_keyword)]\n #![feature(doc_masked)]\n+#![cfg_attr(not(bootstrap), feature(doc_spotlight))]\n #![feature(dropck_eyepatch)]\n #![feature(duration_constants)]\n #![feature(exact_size_is_empty)]"}, {"sha": "2270eca5014286a68b82537b059052b9b31c2d90", "filename": "src/test/codegen/issue-44056-macos-tls-align.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -6,12 +6,13 @@\n #![crate_type = \"rlib\"]\n #![feature(thread_local)]\n \n-// CHECK: @STATIC_VAR_1 = thread_local local_unnamed_addr global <{ [32 x i8] }> zeroinitializer, section \"__DATA,__thread_bss\", align 4\n+// local_unnamed_addr does not appear when std is built with debug assertions.\n+// CHECK: @STATIC_VAR_1 = thread_local {{(local_unnamed_addr )?}}global <{ [32 x i8] }> zeroinitializer, section \"__DATA,__thread_bss\", align 4\n #[no_mangle]\n #[thread_local]\n static mut STATIC_VAR_1: [u32; 8] = [0; 8];\n \n-// CHECK: @STATIC_VAR_2 = thread_local local_unnamed_addr global <{ [32 x i8] }> <{{[^>]*}}>, section \"__DATA,__thread_data\", align 4\n+// CHECK: @STATIC_VAR_2 = thread_local {{(local_unnamed_addr )?}}global <{ [32 x i8] }> <{{[^>]*}}>, section \"__DATA,__thread_data\", align 4\n #[no_mangle]\n #[thread_local]\n static mut STATIC_VAR_2: [u32; 8] = [4; 8];"}, {"sha": "59f29e756fc9a1541058925b3cd269d198968a4c", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -3,6 +3,7 @@\n \n // min-system-llvm-version: 9.0\n // ignore-arm\n+// ignore-aarch64\n // ignore-mips\n // ignore-mips64\n // ignore-powerpc"}, {"sha": "5b8690c3b98ce8fb00524f802fa76998a0400ee6", "filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,5 +1,3 @@\n-// WONTFIX(#20184) Needs landing pads (not present in stage1) or the compiler hangs.\n-// ignore-stage1\n // compile-flags: -C codegen-units=2\n // ignore-emscripten\n "}, {"sha": "f17ce537fb813dacf340d0cc9762262076421924", "filename": "src/test/run-make-fulldeps/issue-37839/Makefile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Fissue-37839%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Fissue-37839%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-37839%2FMakefile?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,7 +1,5 @@\n -include ../tools.mk\n \n-# ignore-stage1\n-\n all:\n \t$(RUSTC) a.rs && $(RUSTC) b.rs\n \t$(BARE_RUSTC) c.rs -L dependency=$(TMPDIR) --extern b=$(TMPDIR)/libb.rlib \\"}, {"sha": "27b69baf97787b794b246d27c0df5c4e4db99f50", "filename": "src/test/run-make-fulldeps/issue-37893/Makefile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Fissue-37893%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Fissue-37893%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-37893%2FMakefile?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,6 +1,4 @@\n -include ../tools.mk\n \n-# ignore-stage1\n-\n all:\n \t$(RUSTC) a.rs && $(RUSTC) b.rs && $(RUSTC) c.rs"}, {"sha": "0534c2c383145ebea684bdb636cb36935d14001a", "filename": "src/test/run-make-fulldeps/rustdoc-determinism/Makefile", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2FMakefile?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,16 @@\n+-include ../tools.mk\n+\n+# Assert that the search index is generated deterministically, regardless of the\n+# order that crates are documented in.\n+\n+# ignore-windows\n+# Uses `diff`.\n+\n+all:\n+\t$(RUSTDOC) foo.rs -o $(TMPDIR)/foo_first\n+\t$(RUSTDOC) bar.rs -o $(TMPDIR)/foo_first\n+\n+\t$(RUSTDOC) bar.rs -o $(TMPDIR)/bar_first\n+\t$(RUSTDOC) foo.rs -o $(TMPDIR)/bar_first\n+\n+\tdiff $(TMPDIR)/foo_first/search-index.js $(TMPDIR)/bar_first/search-index.js"}, {"sha": "ca05a6a9076c217012b462b2b4e9459096f3384b", "filename": "src/test/run-make-fulldeps/rustdoc-determinism/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2Fbar.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1 @@\n+pub struct Bar;"}, {"sha": "4a835673a596bcd05404f43d34082bf2785f2a9d", "filename": "src/test/run-make-fulldeps/rustdoc-determinism/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-determinism%2Ffoo.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1 @@\n+pub struct Foo;"}, {"sha": "1176a4a8c4cf830fd7672535e55fc4f1d1d4bf13", "filename": "src/test/rustdoc-ui/error-in-impl-trait/README.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2FREADME.md?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,7 @@\n+Each of these needs to be in a separate file,\n+because the `delay_span_bug` ICE in rustdoc won't be triggerred\n+if even a single other error was emitted.\n+\n+However, conceptually they are all testing basically the same thing.\n+See https://github.com/rust-lang/rust/pull/73566#issuecomment-653689128\n+for more details."}, {"sha": "112a2c494a5c2a090a7b7b8660509ccdbf15de55", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+\n+/// This used to work with ResolveBodyWithLoop.\n+/// However now that we ignore type checking instead of modifying the function body,\n+/// the return type is seen as `impl Future<Output = u32>`, not a `u32`.\n+/// So it no longer allows errors in the function body.\n+pub async fn a() -> u32 {\n+    error::_in::async_fn()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "086db1be722742a717b076c2a2f957f0460e4942", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::async_fn`\n+  --> $DIR/async.rs:8:5\n+   |\n+LL |     error::_in::async_fn()\n+   |     ^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::async_fn`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "df40c121d579efeb0a8a591f2620845ea6f351d6", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,5 @@\n+// manually desugared version of an `async fn` (but with a closure instead of a generator)\n+pub fn a() -> impl Fn() -> u32 {\n+    || content::doesnt::matter()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "4ee9c4d1f438dd2f931ca0691249567d5af19f87", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `content::doesnt::matter`\n+  --> $DIR/closure.rs:3:8\n+   |\n+LL |     || content::doesnt::matter()\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `content::doesnt::matter`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "0ccf2e3866fc910a864e5bd010331631a3b5154d", "filename": "src/test/rustdoc-ui/error-in-impl-trait/generic-argument.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,7 @@\n+trait ValidTrait {}\n+\n+/// This has docs\n+pub fn f() -> impl ValidTrait {\n+    Vec::<DoesNotExist>::new()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "72716c258dc1ee42d0ba715688d689b94651a9a7", "filename": "src/test/rustdoc-ui/error-in-impl-trait/generic-argument.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `DoesNotExist`\n+  --> $DIR/generic-argument.rs:5:11\n+   |\n+LL |     Vec::<DoesNotExist>::new()\n+   |           ^^^^^^^^^^^^ could not resolve path `DoesNotExist`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "399fb827517fac2354525ac41fb4c8b60f03cb89", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,6 @@\n+pub trait ValidTrait {}\n+/// This returns impl trait\n+pub fn g() -> impl ValidTrait {\n+    (|| error::_in::impl_trait::alias::nested::closure())()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "55f9b609a1105183d015e75c9481305703b7fd6c", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+  --> $DIR/impl-keyword-closure.rs:4:9\n+   |\n+LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "24b5734dbd0bf5eca19ef6f8375a238c9a70501f", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,6 @@\n+pub trait ValidTrait {}\n+/// This returns impl trait\n+pub fn g() -> impl ValidTrait {\n+    error::_in::impl_trait()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "3257079f94219f2c602bdc09f3559cc90f54cdf0", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait`\n+  --> $DIR/impl-keyword.rs:4:5\n+   |\n+LL |     error::_in::impl_trait()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "1498fa4f890d0d8b8e4ce9393bee74dccc7baed0", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait ValidTrait {}\n+type ImplTrait = impl ValidTrait;\n+\n+/// This returns impl trait, but using a type alias\n+pub fn h() -> ImplTrait {\n+    (|| error::_in::impl_trait::alias::nested::closure())()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "84b28139dbcd53cb69c7dbae7d8b48ccd6a9a2b6", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+  --> $DIR/trait-alias-closure.rs:8:9\n+   |\n+LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "cf9bc48c7f8727cde28cc6c4fa82a19353300130", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait ValidTrait {}\n+type ImplTrait = impl ValidTrait;\n+\n+/// This returns impl trait, but using a type alias\n+pub fn h() -> ImplTrait {\n+    error::_in::impl_trait::alias()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "9be6a3d8d6bba7c69cbe6565ca1aa4c2f344d648", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias`\n+  --> $DIR/trait-alias.rs:8:5\n+   |\n+LL |     error::_in::impl_trait::alias()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "a927f6bd79976eb85755f242e27e6e4127feb410", "filename": "src/test/rustdoc-ui/impl-fn-nesting.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,49 @@\n+// Ensure that rustdoc gives errors for trait impls inside function bodies that don't resolve.\n+// See https://github.com/rust-lang/rust/pull/73566\n+pub struct ValidType;\n+pub trait ValidTrait {}\n+pub trait NeedsBody {\n+    type Item;\n+    fn f();\n+}\n+\n+/// This function has docs\n+pub fn f<B: UnknownBound>(a: UnknownType, b: B) {\n+//~^ ERROR cannot find trait `UnknownBound` in this scope\n+//~| ERROR cannot find type `UnknownType` in this scope\n+    impl UnknownTrait for ValidType {} //~ ERROR cannot find trait `UnknownTrait`\n+    impl<T: UnknownBound> UnknownTrait for T {}\n+    //~^ ERROR cannot find trait `UnknownBound` in this scope\n+    //~| ERROR cannot find trait `UnknownTrait` in this scope\n+    impl ValidTrait for UnknownType {}\n+    //~^ ERROR cannot find type `UnknownType` in this scope\n+    impl ValidTrait for ValidType where ValidTrait: UnknownBound {}\n+    //~^ ERROR cannot find trait `UnknownBound` in this scope\n+\n+    /// This impl has documentation\n+    impl NeedsBody for ValidType {\n+        type Item = UnknownType;\n+        //~^ ERROR cannot find type `UnknownType` in this scope\n+\n+        /// This function has documentation\n+        fn f() {\n+            <UnknownTypeShouldBeIgnored>::a();\n+            content::shouldnt::matter();\n+            unknown_macro!();\n+            //~^ ERROR cannot find macro `unknown_macro` in this scope\n+\n+            /// This is documentation for a macro\n+            macro_rules! can_define_macros_here_too {\n+                () => {\n+                    this::content::should::also::be::ignored()\n+                }\n+            }\n+            can_define_macros_here_too!();\n+\n+            /// This also is documented.\n+            pub fn doubly_nested(c: UnknownType) {\n+            //~^ ERROR cannot find type `UnknownType` in this scope\n+            }\n+        }\n+    }\n+}"}, {"sha": "608749af895edbd699a2119eacc9fc010991be47", "filename": "src/test/rustdoc-ui/impl-fn-nesting.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,66 @@\n+error: cannot find macro `unknown_macro` in this scope\n+  --> $DIR/impl-fn-nesting.rs:32:13\n+   |\n+LL |             unknown_macro!();\n+   |             ^^^^^^^^^^^^^\n+\n+error[E0405]: cannot find trait `UnknownBound` in this scope\n+  --> $DIR/impl-fn-nesting.rs:11:13\n+   |\n+LL | pub fn f<B: UnknownBound>(a: UnknownType, b: B) {\n+   |             ^^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `UnknownType` in this scope\n+  --> $DIR/impl-fn-nesting.rs:11:30\n+   |\n+LL | pub fn f<B: UnknownBound>(a: UnknownType, b: B) {\n+   |                              ^^^^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `UnknownTrait` in this scope\n+  --> $DIR/impl-fn-nesting.rs:14:10\n+   |\n+LL |     impl UnknownTrait for ValidType {}\n+   |          ^^^^^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `UnknownTrait` in this scope\n+  --> $DIR/impl-fn-nesting.rs:15:27\n+   |\n+LL |     impl<T: UnknownBound> UnknownTrait for T {}\n+   |                           ^^^^^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `UnknownBound` in this scope\n+  --> $DIR/impl-fn-nesting.rs:15:13\n+   |\n+LL |     impl<T: UnknownBound> UnknownTrait for T {}\n+   |             ^^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `UnknownType` in this scope\n+  --> $DIR/impl-fn-nesting.rs:18:25\n+   |\n+LL |     impl ValidTrait for UnknownType {}\n+   |                         ^^^^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `UnknownBound` in this scope\n+  --> $DIR/impl-fn-nesting.rs:20:53\n+   |\n+LL |     impl ValidTrait for ValidType where ValidTrait: UnknownBound {}\n+   |                                                     ^^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `UnknownType` in this scope\n+  --> $DIR/impl-fn-nesting.rs:25:21\n+   |\n+LL |         type Item = UnknownType;\n+   |                     ^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `UnknownType` in this scope\n+  --> $DIR/impl-fn-nesting.rs:44:37\n+   |\n+LL |             pub fn doubly_nested(c: UnknownType) {\n+   |                                     ^^^^^^^^^^^ not found in this scope\n+\n+error: Compilation failed, aborting rustdoc\n+\n+error: aborting due to 11 previous errors\n+\n+Some errors have detailed explanations: E0405, E0412.\n+For more information about an error, try `rustc --explain E0405`."}, {"sha": "32793fc4f76c05c6236611db6ba3cf829ae37611", "filename": "src/test/rustdoc-ui/infinite-recursive-type.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,4 @@\n+enum E {\n+//~^ ERROR recursive type `E` has infinite size\n+    V(E),\n+}"}, {"sha": "897445f200cb701d57d6a70e45454e1aa09179b8", "filename": "src/test/rustdoc-ui/infinite-recursive-type.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,17 @@\n+error[E0072]: recursive type `E` has infinite size\n+  --> $DIR/infinite-recursive-type.rs:1:1\n+   |\n+LL | enum E {\n+   | ^^^^^^ recursive type has infinite size\n+LL |\n+LL |     V(E),\n+   |       - recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `E` representable\n+   |\n+LL |     V(Box<E>),\n+   |       ^^^^ ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "ddd46c3c2155f8b74a55aa30144381499c3498d3", "filename": "src/test/rustdoc/doc-spotlight.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,36 @@\n+#![feature(doc_spotlight)]\n+\n+pub struct Wrapper<T> {\n+    inner: T,\n+}\n+\n+impl<T: SomeTrait> SomeTrait for Wrapper<T> {}\n+\n+#[doc(spotlight)]\n+pub trait SomeTrait {\n+    // @has doc_spotlight/trait.SomeTrait.html\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    fn wrap_me(self) -> Wrapper<Self> where Self: Sized {\n+        Wrapper {\n+            inner: self,\n+        }\n+    }\n+}\n+\n+pub struct SomeStruct;\n+impl SomeTrait for SomeStruct {}\n+\n+impl SomeStruct {\n+    // @has doc_spotlight/struct.SomeStruct.html\n+    // @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    pub fn new() -> SomeStruct {\n+        SomeStruct\n+    }\n+}\n+\n+// @has doc_spotlight/fn.bare_fn.html\n+// @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+pub fn bare_fn() -> SomeStruct {\n+    SomeStruct\n+}"}, {"sha": "54c3f856ddb3c0ad8a2f901c2e8a3e3ae9a5d0c7", "filename": "src/test/rustdoc/impl-trait-alias.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,14 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait MyTrait {}\n+impl MyTrait for i32 {}\n+\n+// @has impl_trait_alias/type.Foo.html 'Foo'\n+/// debug type\n+pub type Foo = impl MyTrait;\n+\n+// @has impl_trait_alias/fn.foo.html 'foo'\n+/// debug function\n+pub fn foo() -> Foo {\n+    1\n+}"}, {"sha": "b4aaacf7b3d40ebf7a373ebd3dfe20507a5a9af1", "filename": "src/test/rustdoc/macro-in-async-block.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fmacro-in-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fmacro-in-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-in-async-block.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,9 @@\n+// Regression issue for rustdoc ICE encountered in PR #72088.\n+// edition:2018\n+#![feature(decl_macro)]\n+\n+fn main() {\n+    async {\n+        macro m() {}\n+    };\n+}"}, {"sha": "b4411d927e271077c64570f21bd1beba0eb83c53", "filename": "src/test/rustdoc/macro-in-closure.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -6,4 +6,11 @@ fn main() {\n     || {\n         macro m() {}\n     };\n+\n+    let _ = || {\n+        macro n() {}\n+    };\n+\n+    let cond = true;\n+    let _ = || if cond { macro n() {} } else { panic!() };\n }"}, {"sha": "1ccf5ac46119adcf609cb37ab7809e468ac787ba", "filename": "src/test/rustdoc/return-impl-trait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,15 @@\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait Backend {}\n+\n+impl Backend for () {}\n+\n+pub struct Module<T>(T);\n+\n+pub type BackendImpl = impl Backend;\n+\n+// @has return_impl_trait/fn.make_module.html\n+/// Documentation\n+pub fn make_module() -> Module<BackendImpl> {\n+    Module(())\n+}"}, {"sha": "b02cc1a4545b12b31e919576835afdef0062b445", "filename": "src/test/ui/check-doc-alias-attr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,3 +1,4 @@\n+#![crate_type = \"lib\"]\n #![feature(doc_alias)]\n \n #[doc(alias = \"foo\")] // ok!", "previous_filename": "src/test/rustdoc-ui/check-doc-alias-attr.rs"}, {"sha": "268230ab44a0ac5d5efcc02c330960773f6fa5c9", "filename": "src/test/ui/check-doc-alias-attr.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,17 +1,17 @@\n error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n-  --> $DIR/check-doc-alias-attr.rs:6:7\n+  --> $DIR/check-doc-alias-attr.rs:7:7\n    |\n LL | #[doc(alias)]\n    |       ^^^^^\n \n error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n-  --> $DIR/check-doc-alias-attr.rs:7:7\n+  --> $DIR/check-doc-alias-attr.rs:8:7\n    |\n LL | #[doc(alias = 0)]\n    |       ^^^^^^^^^\n \n error: doc alias attribute expects a string: #[doc(alias = \"0\")]\n-  --> $DIR/check-doc-alias-attr.rs:8:7\n+  --> $DIR/check-doc-alias-attr.rs:9:7\n    |\n LL | #[doc(alias(\"bar\"))]\n    |       ^^^^^^^^^^^^", "previous_filename": "src/test/rustdoc-ui/check-doc-alias-attr.stderr"}, {"sha": "5aa3617d1d7e03cfad9bca418e47bda023a0edb4", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+// Currently, const parameters cannot depend on other generic parameters,\n+// as our current implementation can't really support this.\n+//\n+// We may want to lift this restriction in the future.\n+\n+pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+\n+pub struct SelfDependent<const N: [u8; N]>;\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+\n+fn main() {}"}, {"sha": "f6606aea726adc776b7706c977e3ab292bf6fbcc", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,24 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:9:52\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   |                                                    ^ the type must not depend on the parameter `N`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:12:40\n+   |\n+LL | pub struct SelfDependent<const N: [u8; N]>;\n+   |                                        ^ the type must not depend on the parameter `N`\n+\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-param-type-depends-on-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "db15ececfa436e26f7d67d12b7b0eb988485a24c", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n-//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n+//~^ ERROR the type of const parameters must not depend on other generic parameters\n \n fn main() {}"}, {"sha": "35996e833610ddd11e0b4498d54c7783b99607a8", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,3 +1,9 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n+   |\n+LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n+   |                      ^ the type must not depend on the parameter `T`\n+\n error[E0658]: const generics are unstable\n   --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:19\n    |\n@@ -7,15 +13,7 @@ LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n-  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n-   |\n-LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                      ^ `T` may not derive both `PartialEq` and `Eq`\n-   |\n-   = note: it is not currently possible to use a type parameter as the type of a const parameter\n-\n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0658, E0741.\n+Some errors have detailed explanations: E0658, E0770.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "7fe04a43412a1edd26c4f33e141083bc7525e168", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,12 +1,13 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n-// Currently, const parameters cannot depend on type parameters, because there is no way to\n-// enforce the structural-match property on an arbitrary type parameter. This restriction\n-// may be relaxed in the future. See https://github.com/rust-lang/rfcs/pull/2000 for more\n-// details.\n+// Currently, const parameters cannot depend on other generic parameters,\n+// as our current implementation can't really support this.\n+//\n+// We may want to lift this restriction in the future.\n \n pub struct Dependent<T, const X: T>([(); X]);\n-//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+//~| ERROR: parameter `T` is never used\n \n fn main() {}"}, {"sha": "d081dcbbc7a4e90db6360cea80dfe9286a3802d1", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,3 +1,9 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                                  ^ the type must not depend on the parameter `T`\n+\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n    |\n@@ -7,14 +13,15 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:22\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ `T` may not derive both `PartialEq` and `Eq`\n+   |                      ^ unused parameter\n    |\n-   = note: it is not currently possible to use a type parameter as the type of a const parameter\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0741`.\n+Some errors have detailed explanations: E0392, E0770.\n+For more information about an error, try `rustc --explain E0392`."}, {"sha": "59a4d345cbccb51a137035442f08a9ac09023771", "filename": "src/test/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_generics)]\n+\n+// All of these three items must be in `lib2` to reproduce the error\n+\n+pub trait TypeFn {\n+    type Output;\n+}\n+\n+pub struct GenericType<const B: i8>;\n+\n+// Removing the braces around `42` resolves the crash\n+impl TypeFn for GenericType<{ 42 }> {\n+    type Output = ();\n+}"}, {"sha": "1f96e7d3b410aeef91f8209b2259dff220c78fa3", "filename": "src/test/ui/const-generics/issues/issue-68596.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+pub struct S(u8);\n+\n+impl S {\n+    pub fn get<const A: u8>(&self) -> &u8 {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    const A: u8 = 5;\n+    let s = S(0);\n+\n+    s.get::<A>();\n+}"}, {"sha": "943a16cfcd6a7fb2ed02ea5ec08d53411f34e779", "filename": "src/test/ui/const-generics/issues/issue-71169.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+//~^ ERROR the type of const parameters must not\n+fn main() {\n+    const DATA: [u8; 4] = *b\"ABCD\";\n+    foo::<4, DATA>();\n+    //~^ ERROR constant expression depends on\n+}"}, {"sha": "6d4cf4027c1466bfe59bb960bc8f38311fac2a8c", "filename": "src/test/ui/const-generics/issues/issue-71169.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,17 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71169.rs:4:43\n+   |\n+LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+   |                                           ^^^ the type must not depend on the parameter `LEN`\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-71169.rs:8:14\n+   |\n+LL |     foo::<4, DATA>();\n+   |              ^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "08f948239421879811e1f2ee28c42dbfc936b91e", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -12,6 +12,7 @@ unsafe extern \"C\" fn pass(args: PassArg) {\n impl Test {\n     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n         //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n         self.0 = Self::trampiline::<Args, IDX, FN> as _\n     }\n \n@@ -20,6 +21,7 @@ impl Test {\n         const IDX: usize,\n         const FN: unsafe extern \"C\" fn(Args),\n         //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n     >(\n         args: Args,\n     ) {"}, {"sha": "fd4ebe3dead81e8d52ff256acfa45a89fea337a5", "filename": "src/test/ui/const-generics/issues/issue-71381.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,14 +1,27 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:13:82\n+   |\n+LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n+   |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:22:40\n+   |\n+LL |         const FN: unsafe extern \"C\" fn(Args),\n+   |                                        ^^^^ the type must not depend on the parameter `Args`\n+\n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:13:61\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:21:19\n+  --> $DIR/issue-71381.rs:22:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "06ff38dec66c74e8c157568fc04c4abb3d23c2cc", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -3,6 +3,7 @@\n \n fn func<A, const F: fn(inner: A)>(outer: A) {\n     //~^ ERROR: using function pointers as const generic parameters is forbidden\n+    //~| ERROR: the type of const parameters must not depend on other generic parameters\n     F(outer);\n }\n "}, {"sha": "e2c9f22361ebe5c5c622a21121f6b3b88c9e5e80", "filename": "src/test/ui/const-generics/issues/issue-71611.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,8 +1,15 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71611.rs:4:31\n+   |\n+LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n+   |                               ^ the type must not depend on the parameter `A`\n+\n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:4:21\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                     ^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "aea4de39f79ce9bd4d6d5370b56da795bb8964da", "filename": "src/test/ui/const-generics/issues/issue-73120.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+// aux-build:const_generic_issues_lib.rs\n+extern crate const_generic_issues_lib as lib2;\n+fn unused_function(\n+    _: <lib2::GenericType<42> as lib2::TypeFn>::Output\n+) {}\n+\n+fn main() {}"}, {"sha": "05e1513bb75df36a25ea5158d7eaef98ebbfc82f", "filename": "src/test/ui/const-generics/issues/issue-73491.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+const LEN: usize = 1024;\n+\n+fn hoge<const IN: [u32; LEN]>() {}\n+\n+fn main() {}"}, {"sha": "ba2e2a38e7470f5b199858d37d21722afe5041ae", "filename": "src/test/ui/const-generics/issues/issue-73508.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,6 @@\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+pub const fn func_name<const X: *const u32>() {}\n+//~^ ERROR using raw pointers\n+\n+fn main() {}"}, {"sha": "23ad1818b6f37305dfb1e10bf9fb0b393b1ff209", "filename": "src/test/ui/const-generics/issues/issue-73508.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-73508.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/issue-73508.rs:3:33\n+   |\n+LL | pub const fn func_name<const X: *const u32>() {}\n+   |                                 ^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "2f427ef3a27dcc76f3ea56952eb86ed496c41a87", "filename": "src/test/ui/const-generics/issues/issue-74101.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn test<const N: [u8; 1 + 2]>() {}\n+\n+struct Foo<const N: [u8; 1 + 2]>;\n+\n+fn main() {}"}, {"sha": "55ccf57dc99c303ac6bac109ec85d4541b8737f4", "filename": "src/test/ui/const-generics/issues/issue-74255.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(dead_code, incomplete_features)]\n+\n+#[derive(PartialEq, Eq)]\n+enum IceEnum {\n+    Variant\n+}\n+\n+struct IceStruct;\n+\n+impl IceStruct {\n+    fn ice_struct_fn<const I: IceEnum>() {}\n+}\n+\n+fn main() {\n+    IceStruct::ice_struct_fn::<{IceEnum::Variant}>();\n+}"}, {"sha": "a3d059591987c4fb2b90722c778197ade5320f26", "filename": "src/test/ui/const-generics/type-dependent/issue-67144-1.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct X;\n+\n+impl X {\n+    pub fn getn<const N: usize>(&self) -> [u8; N] {\n+        getn::<N>()\n+    }\n+}\n+\n+fn getn<const N: usize>() -> [u8; N] {\n+    unsafe {\n+        std::mem::zeroed()\n+    }\n+}\n+\n+fn main() {\n+    // works\n+    let [a,b,c] = getn::<3>();\n+\n+    // cannot pattern-match on an array without a fixed length\n+    let [a,b,c] = X.getn::<3>();\n+\n+    // mismatched types, expected array `[u8; 3]` found array `[u8; _]`\n+    let arr: [u8; 3] = X.getn::<3>();\n+}"}, {"sha": "c53a149fa8d46432b5e47649aeef29341134d67b", "filename": "src/test/ui/const-generics/type-dependent/issue-67144-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct A<const N: usize>;\n+\n+struct X;\n+\n+impl X {\n+    fn inner<const N: usize>() -> A<N> {\n+        outer::<N>()\n+    }\n+}\n+\n+fn outer<const N: usize>() -> A<N> {\n+    A\n+}\n+\n+fn main() {\n+    let i: A<3usize> = outer::<3usize>();\n+    let o: A<3usize> = X::inner::<3usize>();\n+}"}, {"sha": "caa611cbd797f1b5be1a938c1e945e39e8ef4ff9", "filename": "src/test/ui/const-generics/type-dependent/issue-70217.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Struct<const N: usize>;\n+\n+impl<const N: usize> Struct<N> {\n+    fn method<const M: usize>(&self) {}\n+}\n+\n+fn test<const N: usize, const M: usize>(x: Struct<N>) {\n+    Struct::<N>::method::<M>(&x);\n+    x.method::<N>();\n+}\n+\n+fn main() {}"}, {"sha": "5a0888506eb1ef9021f41aa35b70d6dbbf2c6398", "filename": "src/test/ui/const-generics/type-dependent/issue-70586.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+use std::marker::PhantomData;\n+\n+// This namespace is necessary for the ICE to trigger\n+struct Namespace;\n+\n+impl Namespace {\n+    pub fn const_chunks_exact<T, const N: usize>() -> ConstChunksExact<'static, T, N> {\n+        ConstChunksExact { inner: PhantomData }\n+    }\n+}\n+\n+\n+#[derive(Debug)]\n+pub struct ConstChunksExact<'a, T, const N: usize> {\n+    inner:  PhantomData<&'a T>\n+}\n+\n+impl <'a, T, const N: usize> Iterator for ConstChunksExact<'a, T, { N }> {\n+    type Item = &'a [T; N];\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        unreachable!()\n+    }\n+}\n+\n+fn main() {\n+    let mut chunks = Namespace::const_chunks_exact::<i32, 3usize>();\n+    let _next: &[i32; 3] = chunks.next().unwrap();\n+}"}, {"sha": "ec22dcdf60b466b64f0d4ee9d6588acefa3c490a", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo {\n+    i: i32,\n+}\n+\n+trait Get<'a, const N: &'static str> {\n+    type Target: 'a;\n+\n+    fn get(&'a self) -> &'a Self::Target;\n+}\n+\n+impl Foo {\n+    fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Target\n+    where\n+        Self: Get<'a, N>,\n+    {\n+        self.get()\n+    }\n+}\n+\n+impl<'a> Get<'a, \"int\"> for Foo {\n+    type Target = i32;\n+\n+    fn get(&'a self) -> &'a Self::Target {\n+        &self.i\n+    }\n+}\n+\n+fn main() {\n+    let foo = Foo { i: 123 };\n+    assert_eq!(foo.ask::<\"int\">(), &123);\n+}"}, {"sha": "6823d780aefa9caa318feff93489593b78fee527", "filename": "src/test/ui/const-generics/type-dependent/issue-71805.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+use std::mem::MaybeUninit;\n+\n+trait CollectSlice<'a>: Iterator {\n+    fn inner_array<const N: usize>(&mut self) -> [Self::Item; N];\n+\n+    fn collect_array<const N: usize>(&mut self) -> [Self::Item; N] {\n+        let result = self.inner_array();\n+        assert!(self.next().is_none());\n+        result\n+    }\n+}\n+\n+impl<'a, I: ?Sized> CollectSlice<'a> for I\n+where\n+    I: Iterator,\n+{\n+    fn inner_array<const N: usize>(&mut self) -> [Self::Item; N] {\n+        let mut result: [MaybeUninit<Self::Item>; N] =\n+            unsafe { MaybeUninit::uninit().assume_init() };\n+\n+        let mut count = 0;\n+        for (dest, item) in result.iter_mut().zip(self) {\n+            *dest = MaybeUninit::new(item);\n+            count += 1;\n+        }\n+\n+        assert_eq!(N, count);\n+\n+        let temp_ptr: *const [MaybeUninit<Self::Item>; N] = &result;\n+        unsafe { std::ptr::read(temp_ptr as *const [Self::Item; N]) }\n+    }\n+}\n+\n+fn main() {\n+    let mut foos = [0u64; 9].iter().cloned();\n+    let _bar: [u64; 9] = foos.collect_array::<9_usize>();\n+}"}, {"sha": "d90cc50ddc44718c10ba036ddd2264f1e8fefd95", "filename": "src/test/ui/const-generics/type-dependent/issue-73730.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<'a, A>: Iterator<Item=A> {\n+    fn bar<const N: usize>(&mut self) -> *const [A; N];\n+}\n+\n+impl<'a, A, I: ?Sized> Foo<'a, A> for I where I: Iterator<Item=A>  {\n+    fn bar<const N: usize>(&mut self) -> *const [A; N] {\n+        std::ptr::null()\n+    }\n+}\n+\n+fn main() {\n+    (0_u8 .. 10).bar::<10_usize>();\n+}"}, {"sha": "d19cf00eb9ce4e71ac35985fd6c14a9d99fdd47f", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -1,9 +1,12 @@\n // check-pass\n \n+// compile-flags: --crate-type lib\n+\n+#![warn(unconditional_panic)]\n+\n pub struct Fixed64(i64);\n \n-pub fn div(f: Fixed64) {\n-    f.0 / 0;\n+// HACK: this test passes only because this is a const fn that is written to metadata\n+pub const fn div(f: Fixed64) {\n+    f.0 / 0; //~ WARN will panic at runtime\n }\n-\n-fn main() {}"}, {"sha": "e2a3e4db8abd109edcc5e791a9c2bd2f0a456d84", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,14 @@\n+warning: this operation will panic at runtime\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:11:5\n+   |\n+LL |     f.0 / 0;\n+   |     ^^^^^^^ attempt to divide _ by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:5:9\n+   |\n+LL | #![warn(unconditional_panic)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "452b45b34456bbb37771e3bbe31eefc1602cfa39", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,4 @@\n+#[doc(spotlight)] //~ ERROR: `#[doc(spotlight)]` is experimental\n+trait SomeTrait {}\n+\n+fn main() {}"}, {"sha": "010d74054a4120fa3b687afc2e8e9f21a0405164", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[doc(spotlight)]` is experimental\n+  --> $DIR/feature-gate-doc_spotlight.rs:1:1\n+   |\n+LL | #[doc(spotlight)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #45040 <https://github.com/rust-lang/rust/issues/45040> for more information\n+   = help: add `#![feature(doc_spotlight)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c4292d041d0511db7711167e0185196e0b42a9b1", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9e5df3a097e094641f16dab501ab1c4da10e9f/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=5c9e5df3a097e094641f16dab501ab1c4da10e9f", "patch": "@@ -127,7 +127,7 @@ impl Formatter for HTMLFormatter {\n                         DEFAULT_EDITION,\n                         &Some(playground)\n                     )\n-                    .to_string()\n+                    .into_string()\n                 )?\n             }\n             None => write!(output, \"<p>No description.</p>\\n\")?,"}]}