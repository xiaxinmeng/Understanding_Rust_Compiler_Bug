{"sha": "b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTA1OGRhYTYyZmE1MWUwYjA0Y2QzOWY5YTJiZGYxMWFiOWYxYTk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-07-03T09:31:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-03T09:31:10Z"}, "message": "Rollup merge of #51982 - michaelwoerister:hash-modules-properly, r=nikomatsakis\n\nincr.comp.: Take names of children into account when computing the ICH of a module's HIR.\n\nFixes #40876. Red-green tracking does not make this a problem anymore. We should verify this via a perf-run though.\n\nr? @nikomatsakis", "tree": {"sha": "aab17523235195348d3788faf73e2d8e4836f578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aab17523235195348d3788faf73e2d8e4836f578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbO0JeCRBK7hj4Ov3rIwAAdHIIABn6cuOa7qX6fgZTN0/08qeW\npqIZ4Efnye7fYGrS33Qdh2xf+9zefJIK6xKlO+fujPECZluGN8PCxLKrvGUT84Ab\nuNWtJuCM01pWbpVnSBKdv+sNzBCo4oEa+5koCaFJcmUa/FqCJ6dpt+b1QrNiC4zd\n3j0n0iHlRdEMrulzjG2bysKtRAAbWu4+fCnqgUKevyEaaXsKiocNn+86oO/eh9cT\nrLKiNIvoLst0i9mvODGKqmfs1FKG9CgiHygUKlLGqurjkVtRxHTRKRRT/TwJJKAd\nnm4+vo8cd2xRnaLj7BAwOzNsEOQVesqSHSCYvu6RItaMwSXvEFYgXvN1kfwQrDk=\n=RPF/\n-----END PGP SIGNATURE-----\n", "payload": "tree aab17523235195348d3788faf73e2d8e4836f578\nparent 45cd78a4cd3f336ca0b00e97ce65363db340eacc\nparent 447f1f3f5cca20c15d2ed023310b07218aabe7fa\nauthor Pietro Albini <pietro@pietroalbini.org> 1530610270 +0200\ncommitter GitHub <noreply@github.com> 1530610270 +0200\n\nRollup merge of #51982 - michaelwoerister:hash-modules-properly, r=nikomatsakis\n\nincr.comp.: Take names of children into account when computing the ICH of a module's HIR.\n\nFixes #40876. Red-green tracking does not make this a problem anymore. We should verify this via a perf-run though.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "html_url": "https://github.com/rust-lang/rust/commit/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45cd78a4cd3f336ca0b00e97ce65363db340eacc", "url": "https://api.github.com/repos/rust-lang/rust/commits/45cd78a4cd3f336ca0b00e97ce65363db340eacc", "html_url": "https://github.com/rust-lang/rust/commit/45cd78a4cd3f336ca0b00e97ce65363db340eacc"}, {"sha": "447f1f3f5cca20c15d2ed023310b07218aabe7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/447f1f3f5cca20c15d2ed023310b07218aabe7fa", "html_url": "https://github.com/rust-lang/rust/commit/447f1f3f5cca20c15d2ed023310b07218aabe7fa"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "328cb8225478bdc159c503a1b678203e580d6aaa", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "patch": "@@ -23,6 +23,7 @@ use rustc_data_structures::indexed_vec::{IndexVec};\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use session::CrateDisambiguator;\n+use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n@@ -389,6 +390,13 @@ pub struct DefPathHash(pub Fingerprint);\n \n impl_stable_hash_for!(tuple_struct DefPathHash { fingerprint });\n \n+impl Borrow<Fingerprint> for DefPathHash {\n+    #[inline]\n+    fn borrow(&self) -> &Fingerprint {\n+        &self.0\n+    }\n+}\n+\n impl Definitions {\n     /// Create new empty definition map.\n     pub fn new() -> Definitions {"}, {"sha": "a6e35d78dcb5aaef76b09a3ed1cb7c9f03cd4b76", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "patch": "@@ -45,6 +45,18 @@ impl Fingerprint {\n         )\n     }\n \n+    // Combines two hashes in an order independent way. Make sure this is what\n+    // you want.\n+    #[inline]\n+    pub fn combine_commutative(self, other: Fingerprint) -> Fingerprint {\n+        let a = (self.1 as u128) << 64 | self.0 as u128;\n+        let b = (other.1 as u128) << 64 | other.0 as u128;\n+\n+        let c = a.wrapping_add(b);\n+\n+        Fingerprint((c >> 64) as u64, c as u64)\n+    }\n+\n     pub fn to_hex(&self) -> String {\n         format!(\"{:x}{:x}\", self.0, self.1)\n     }"}, {"sha": "8b62ba119ebb8feadb334100d8b5006a773856f6", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "patch": "@@ -14,7 +14,7 @@\n use hir;\n use hir::map::DefPathHash;\n use hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n-use ich::{StableHashingContext, NodeIdHashingMode};\n+use ich::{StableHashingContext, NodeIdHashingMode, Fingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n use std::mem;\n@@ -755,13 +755,34 @@ impl_stable_hash_for!(enum hir::ImplPolarity {\n     Negative\n });\n \n-impl_stable_hash_for!(struct hir::Mod {\n-    inner,\n-    // We are not hashing the IDs of the items contained in the module.\n-    // This is harmless and matches the current behavior but it's not\n-    // actually correct. See issue #40876.\n-    item_ids -> _,\n-});\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let hir::Mod {\n+            inner: ref inner_span,\n+            ref item_ids,\n+        } = *self;\n+\n+        inner_span.hash_stable(hcx, hasher);\n+\n+        // Combining the DefPathHashes directly is faster than feeding them\n+        // into the hasher. Because we use a commutative combine, we also don't\n+        // have to sort the array.\n+        let item_ids_hash = item_ids\n+            .iter()\n+            .map(|id| {\n+                let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n+                debug_assert_eq!(local_id, hir::ItemLocalId(0));\n+                def_path_hash.0\n+            }).fold(Fingerprint::ZERO, |a, b| {\n+                a.combine_commutative(b)\n+            });\n+\n+        item_ids.len().hash_stable(hcx, hasher);\n+        item_ids_hash.hash_stable(hcx, hasher);\n+    }\n+}\n \n impl_stable_hash_for!(struct hir::ForeignMod {\n     abi,"}, {"sha": "c4a23ac653ca009a57c8458ce009f7f2b0426352", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=b69058daa62fa51e0b04cd39f9a2bdf11ab9f1a9", "patch": "@@ -25,11 +25,10 @@ use monomorphize::Instance;\n use type_of::LayoutLlvmExt;\n use rustc::hir;\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::TypeFoldable;\n use rustc::ty::layout::LayoutOf;\n-use syntax::attr;\n use std::fmt;\n \n pub use rustc::mir::mono::MonoItem;\n@@ -173,7 +172,7 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     // visibility as we're going to link this object all over the place but\n     // don't want the symbols to get exported.\n     if linkage != Linkage::Internal && linkage != Linkage::Private &&\n-       attr::contains_name(cx.tcx.hir.krate_attrs(), \"compiler_builtins\") {\n+       cx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n         unsafe {\n             llvm::LLVMRustSetVisibility(lldecl, llvm::Visibility::Hidden);\n         }"}]}