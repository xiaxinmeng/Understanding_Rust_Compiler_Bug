{"sha": "34bb13e293e757bb7267eb76884caacb4b94b48b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmIxM2UyOTNlNzU3YmI3MjY3ZWI3Njg4NGNhYWNiNGI5NGI0OGI=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T18:28:26Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T18:28:26Z"}, "message": "hir_ty: introduce visible_from_module param into method resolution", "tree": {"sha": "f60bad4d993844e02fc154f2860f17be35b5c737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60bad4d993844e02fc154f2860f17be35b5c737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34bb13e293e757bb7267eb76884caacb4b94b48b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34bb13e293e757bb7267eb76884caacb4b94b48b", "html_url": "https://github.com/rust-lang/rust/commit/34bb13e293e757bb7267eb76884caacb4b94b48b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34bb13e293e757bb7267eb76884caacb4b94b48b/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b456c64254e82c4edf065c9cc526bf8e734d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b456c64254e82c4edf065c9cc526bf8e734d68", "html_url": "https://github.com/rust-lang/rust/commit/b1b456c64254e82c4edf065c9cc526bf8e734d68"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "1a65a5cad317d519f0e8c1ed6b95c7bd5cab56f7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=34bb13e293e757bb7267eb76884caacb4b94b48b", "patch": "@@ -1967,12 +1967,18 @@ impl Type {\n         let env = self.ty.environment.clone();\n         let krate = krate.id;\n \n+        let from_module = match self.as_adt() {\n+            Some(adt) => Some(adt.module(db).id),\n+            None => None,\n+        };\n+\n         method_resolution::iterate_method_candidates(\n             &canonical,\n             db,\n             env,\n             krate,\n             traits_in_scope,\n+            from_module,\n             name,\n             method_resolution::LookupMode::MethodCall,\n             |ty, it| match it {\n@@ -2004,6 +2010,7 @@ impl Type {\n             env,\n             krate,\n             traits_in_scope,\n+            None,\n             name,\n             method_resolution::LookupMode::Path,\n             |ty, it| callback(ty, it.into()),"}, {"sha": "b08880cdf07851155e4f6a9b770c3439eae67688", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=34bb13e293e757bb7267eb76884caacb4b94b48b", "patch": "@@ -849,6 +849,7 @@ impl<'a> InferenceContext<'a> {\n                 self.trait_env.clone(),\n                 krate,\n                 &traits_in_scope,\n+                self.resolver.module(),\n                 method_name,\n             )\n         });"}, {"sha": "cefa385094865db16c239d3257c1e821db7b751d", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=34bb13e293e757bb7267eb76884caacb4b94b48b", "patch": "@@ -230,6 +230,7 @@ impl<'a> InferenceContext<'a> {\n             self.trait_env.clone(),\n             krate,\n             &traits_in_scope,\n+            None,\n             Some(name),\n             method_resolution::LookupMode::Path,\n             move |_ty, item| {"}, {"sha": "6c34982a1892d70b55fcb53452e0dcec108f5b9d", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bb13e293e757bb7267eb76884caacb4b94b48b/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=34bb13e293e757bb7267eb76884caacb4b94b48b", "patch": "@@ -295,6 +295,7 @@ pub(crate) fn lookup_method(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n+    visible_from_module: Option<ModuleId>,\n     name: &Name,\n ) -> Option<(Ty, FunctionId)> {\n     iterate_method_candidates(\n@@ -303,6 +304,7 @@ pub(crate) fn lookup_method(\n         env,\n         krate,\n         &traits_in_scope,\n+        visible_from_module,\n         Some(name),\n         LookupMode::MethodCall,\n         |ty, f| match f {\n@@ -333,6 +335,7 @@ pub fn iterate_method_candidates<T>(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n+    visible_from_module: Option<ModuleId>,\n     name: Option<&Name>,\n     mode: LookupMode,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n@@ -344,6 +347,7 @@ pub fn iterate_method_candidates<T>(\n         env,\n         krate,\n         traits_in_scope,\n+        visible_from_module,\n         name,\n         mode,\n         &mut |ty, item| {\n@@ -361,6 +365,7 @@ fn iterate_method_candidates_impl(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n+    visible_from_module: Option<ModuleId>,\n     name: Option<&Name>,\n     mode: LookupMode,\n     callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n@@ -398,6 +403,7 @@ fn iterate_method_candidates_impl(\n                     env.clone(),\n                     krate,\n                     traits_in_scope,\n+                    visible_from_module,\n                     name,\n                     callback,\n                 ) {\n@@ -427,6 +433,7 @@ fn iterate_method_candidates_with_autoref(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n+    visible_from_module: Option<ModuleId>,\n     name: Option<&Name>,\n     mut callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n ) -> bool {\n@@ -437,6 +444,7 @@ fn iterate_method_candidates_with_autoref(\n         env.clone(),\n         krate,\n         &traits_in_scope,\n+        visible_from_module,\n         name,\n         &mut callback,\n     ) {\n@@ -453,6 +461,7 @@ fn iterate_method_candidates_with_autoref(\n         env.clone(),\n         krate,\n         &traits_in_scope,\n+        visible_from_module,\n         name,\n         &mut callback,\n     ) {\n@@ -469,6 +478,7 @@ fn iterate_method_candidates_with_autoref(\n         env,\n         krate,\n         &traits_in_scope,\n+        visible_from_module,\n         name,\n         &mut callback,\n     ) {\n@@ -484,14 +494,23 @@ fn iterate_method_candidates_by_receiver(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n+    visible_from_module: Option<ModuleId>,\n     name: Option<&Name>,\n     mut callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n ) -> bool {\n     // We're looking for methods with *receiver* type receiver_ty. These could\n     // be found in any of the derefs of receiver_ty, so we have to go through\n     // that.\n     for self_ty in std::iter::once(receiver_ty).chain(rest_of_deref_chain) {\n-        if iterate_inherent_methods(self_ty, db, name, Some(receiver_ty), krate, &mut callback) {\n+        if iterate_inherent_methods(\n+            self_ty,\n+            db,\n+            name,\n+            Some(receiver_ty),\n+            krate,\n+            visible_from_module,\n+            &mut callback,\n+        ) {\n             return true;\n         }\n     }\n@@ -521,7 +540,7 @@ fn iterate_method_candidates_for_self_ty(\n     name: Option<&Name>,\n     mut callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n ) -> bool {\n-    if iterate_inherent_methods(self_ty, db, name, None, krate, &mut callback) {\n+    if iterate_inherent_methods(self_ty, db, name, None, krate, None, &mut callback) {\n         return true;\n     }\n     iterate_trait_method_candidates(self_ty, db, env, krate, traits_in_scope, name, None, callback)\n@@ -558,7 +577,7 @@ fn iterate_trait_method_candidates(\n         // iteration\n         let mut known_implemented = false;\n         for (_name, item) in data.items.iter() {\n-            if !is_valid_candidate(db, name, receiver_ty, *item, self_ty) {\n+            if !is_valid_candidate(db, name, receiver_ty, *item, self_ty, None) {\n                 continue;\n             }\n             if !known_implemented {\n@@ -582,6 +601,7 @@ fn iterate_inherent_methods(\n     name: Option<&Name>,\n     receiver_ty: Option<&Canonical<Ty>>,\n     krate: CrateId,\n+    visible_from_module: Option<ModuleId>,\n     callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n ) -> bool {\n     let def_crates = match self_ty.value.def_crates(db, krate) {\n@@ -593,7 +613,7 @@ fn iterate_inherent_methods(\n \n         for &impl_def in impls.for_self_ty(&self_ty.value) {\n             for &item in db.impl_data(impl_def).items.iter() {\n-                if !is_valid_candidate(db, name, receiver_ty, item, self_ty) {\n+                if !is_valid_candidate(db, name, receiver_ty, item, self_ty, visible_from_module) {\n                     continue;\n                 }\n                 // we have to check whether the self type unifies with the type\n@@ -638,6 +658,7 @@ fn is_valid_candidate(\n     receiver_ty: Option<&Canonical<Ty>>,\n     item: AssocItemId,\n     self_ty: &Canonical<Ty>,\n+    visible_from_module: Option<ModuleId>,\n ) -> bool {\n     match item {\n         AssocItemId::FunctionId(m) => {\n@@ -659,6 +680,12 @@ fn is_valid_candidate(\n                     return false;\n                 }\n             }\n+            if let Some(from_module) = visible_from_module {\n+                if !db.fn_visibility(m).is_visible_from(db.upcast(), from_module) {\n+                    return false;\n+                }\n+            }\n+\n             true\n         }\n         AssocItemId::ConstId(c) => {"}]}