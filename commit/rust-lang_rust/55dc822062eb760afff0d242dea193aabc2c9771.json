{"sha": "55dc822062eb760afff0d242dea193aabc2c9771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZGM4MjIwNjJlYjc2MGFmZmYwZDI0MmRlYTE5M2FhYmMyYzk3NzE=", "commit": {"author": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-10-17T21:28:00Z"}, "committer": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-11-11T06:18:47Z"}, "message": "Ran `tests/ui/update-all-references.sh\" and `cargo dev fmt`", "tree": {"sha": "abb22ca4e8401eee0d11758dfc74da5fe235d526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb22ca4e8401eee0d11758dfc74da5fe235d526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55dc822062eb760afff0d242dea193aabc2c9771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55dc822062eb760afff0d242dea193aabc2c9771", "html_url": "https://github.com/rust-lang/rust/commit/55dc822062eb760afff0d242dea193aabc2c9771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55dc822062eb760afff0d242dea193aabc2c9771/comments", "author": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431fcbcc00eb4634178406c1afdf955e5b3be07a", "url": "https://api.github.com/repos/rust-lang/rust/commits/431fcbcc00eb4634178406c1afdf955e5b3be07a", "html_url": "https://github.com/rust-lang/rust/commit/431fcbcc00eb4634178406c1afdf955e5b3be07a"}], "stats": {"total": 248, "additions": 175, "deletions": 73}, "files": [{"sha": "bf4675966df088e92a6ba8c301a98c9b355a70f4", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=55dc822062eb760afff0d242dea193aabc2c9771", "patch": "@@ -20,71 +20,3 @@ LL | |                    ).next();\n    |\n    = note: `-D clippy::filter-next` implied by `-D warnings`\n \n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:143:22\n-   |\n-LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n-   |\n-   = note: `-D clippy::search-is-some` implied by `-D warnings`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:144:20\n-   |\n-LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:145:20\n-   |\n-LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:146:22\n-   |\n-LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:149:13\n-   |\n-LL |       let _ = v.iter().find(|&x| {\n-   |  _____________^\n-LL | |                               *x < 0\n-LL | |                           }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:155:22\n-   |\n-LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:158:13\n-   |\n-LL |       let _ = v.iter().position(|&x| {\n-   |  _____________^\n-LL | |                                   x < 0\n-LL | |                               }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:164:22\n-   |\n-LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:167:13\n-   |\n-LL |       let _ = v.iter().rposition(|&x| {\n-   |  _____________^\n-LL | |                                    x < 0\n-LL | |                                }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-"}, {"sha": "1399138a0d27bf43dc868d539b9880a5a0f887fe", "filename": "tests/ui/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.rs?ref=55dc822062eb760afff0d242dea193aabc2c9771", "patch": "@@ -1,4 +1,4 @@\n-#[macro_use]\n+// aux-build:option_helpers.rs\n extern crate option_helpers;\n use option_helpers::IteratorFalsePositives;\n \n@@ -36,4 +36,3 @@ fn main() {\n     // `Pattern` that is not a string\n     let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_some();\n }\n-    "}, {"sha": "a124ab1dfd44e40401f32be4ce4b1ef150718a9c", "filename": "tests/ui/search_is_some.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.stderr?ref=55dc822062eb760afff0d242dea193aabc2c9771", "patch": "@@ -0,0 +1,42 @@\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some.rs:13:13\n+   |\n+LL |       let _ = v.iter().find(|&x| {\n+   |  _____________^\n+LL | |                               *x < 0\n+LL | |                           }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some.rs:19:13\n+   |\n+LL |       let _ = v.iter().position(|&x| {\n+   |  _____________^\n+LL | |                                   x < 0\n+LL | |                               }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+\n+error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some.rs:25:13\n+   |\n+LL |       let _ = v.iter().rposition(|&x| {\n+   |  _____________^\n+LL | |                                    x < 0\n+LL | |                                }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+\n+error: use of a blacklisted/placeholder name `foo`\n+  --> $DIR/search_is_some.rs:31:9\n+   |\n+LL |     let foo = IteratorFalsePositives { foo: 0 };\n+   |         ^^^\n+   |\n+   = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dc3f290e56246d14890ae48db869f6de311c4b1b", "filename": "tests/ui/search_is_some_fixable.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.fixed?ref=55dc822062eb760afff0d242dea193aabc2c9771", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().any(|x| *x < 0);\n+    let _ = (0..1).any(|x| **y == x); // one dereference less\n+    let _ = (0..1).any(|x| x == 0);\n+    let _ = v.iter().any(|x| *x == 0);\n+\n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".contains(\"world\");\n+    let _ = \"hello world\".contains(&s2);\n+    let _ = \"hello world\".contains(&s2[2..]);\n+    // caller of `find()` is a `String`\n+    let _ = s1.contains(\"world\");\n+    let _ = s1.contains(&s2);\n+    let _ = s1.contains(&s2[2..]);\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].contains(\"world\");\n+    let _ = s1[2..].contains(&s2);\n+    let _ = s1[2..].contains(&s2[2..]);\n+}"}, {"sha": "146cf5adf1b0f97fc0e7d6536416c0192d06733f", "filename": "tests/ui/search_is_some_fixable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.rs?ref=55dc822062eb760afff0d242dea193aabc2c9771", "patch": "@@ -5,16 +5,16 @@\n fn main() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n     let y = &&42;\n-    \n+\n     // Check `find().is_some()`, single-line case.\n     let _ = v.iter().find(|&x| *x < 0).is_some();\n     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n     let _ = (0..1).find(|x| *x == 0).is_some();\n     let _ = v.iter().find(|x| **x == 0).is_some();\n-    \n+\n     // Check `position().is_some()`, single-line case.\n     let _ = v.iter().position(|&x| x < 0).is_some();\n-    \n+\n     // Check `rposition().is_some()`, single-line case.\n     let _ = v.iter().rposition(|&x| x < 0).is_some();\n "}, {"sha": "7a2c063fee82cdc323a676af89cdb2cb2fb12fd8", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55dc822062eb760afff0d242dea193aabc2c9771/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=55dc822062eb760afff0d242dea193aabc2c9771", "patch": "@@ -0,0 +1,94 @@\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some_fixable.rs:10:22\n+   |\n+LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some_fixable.rs:11:20\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some_fixable.rs:12:20\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some_fixable.rs:13:22\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some_fixable.rs:16:22\n+   |\n+LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/search_is_some_fixable.rs:19:22\n+   |\n+LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:24:27\n+   |\n+LL |     let _ = \"hello world\".find(\"world\").is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:25:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:26:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2[2..]).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:28:16\n+   |\n+LL |     let _ = s1.find(\"world\").is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:29:16\n+   |\n+LL |     let _ = s1.find(&s2).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:30:16\n+   |\n+LL |     let _ = s1.find(&s2[2..]).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:32:21\n+   |\n+LL |     let _ = s1[2..].find(\"world\").is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:33:21\n+   |\n+LL |     let _ = s1[2..].find(&s2).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+  --> $DIR/search_is_some_fixable.rs:34:21\n+   |\n+LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2[2..])`\n+\n+error: aborting due to 15 previous errors\n+"}]}