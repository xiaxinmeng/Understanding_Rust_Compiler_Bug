{"sha": "a40a99d849b11f8580163d5d161221ae6f53f8d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGE5OWQ4NDliMTFmODU4MDE2M2Q1ZDE2MTIyMWFlNmY1M2Y4ZDg=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-30T22:26:17Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-30T22:26:17Z"}, "message": "avoid double negation", "tree": {"sha": "542670f3b55f7552c194ea4d673afc31cdc5406a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/542670f3b55f7552c194ea4d673afc31cdc5406a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40a99d849b11f8580163d5d161221ae6f53f8d8", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXgp5iRgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClAAAQD+J41pMiOpSKJBh6TMOj5ioK/A\n+vryOzy+4TnKcZpHXEABAKqMd41ZsBe619gC83NMr8ezWvxWNZwnGqDkqUUy1RgH\n=Nc3c\n-----END PGP SIGNATURE-----", "payload": "tree 542670f3b55f7552c194ea4d673afc31cdc5406a\nparent ce4e1f9fe71234a38319c5c900f7e9b69ff8178e\nauthor Christian Poveda <git@christianpoveda.xyz> 1577744777 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577744777 -0500\n\navoid double negation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40a99d849b11f8580163d5d161221ae6f53f8d8", "html_url": "https://github.com/rust-lang/rust/commit/a40a99d849b11f8580163d5d161221ae6f53f8d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40a99d849b11f8580163d5d161221ae6f53f8d8/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4e1f9fe71234a38319c5c900f7e9b69ff8178e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4e1f9fe71234a38319c5c900f7e9b69ff8178e", "html_url": "https://github.com/rust-lang/rust/commit/ce4e1f9fe71234a38319c5c900f7e9b69ff8178e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "1403d2867383091a84252e28393aebe8f4d1064c", "filename": "src/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a40a99d849b11f8580163d5d161221ae6f53f8d8/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40a99d849b11f8580163d5d161221ae6f53f8d8/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=a40a99d849b11f8580163d5d161221ae6f53f8d8", "patch": "@@ -15,7 +15,7 @@ use shims::time::system_time_to_duration;\n #[derive(Debug)]\n pub struct FileHandle {\n     file: File,\n-    read_only: bool,\n+    writable: bool,\n }\n \n pub struct FileHandler {\n@@ -57,13 +57,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if (o_rdonly | o_wronly | o_rdwr) & !0b11 != 0 {\n             throw_unsup_format!(\"Access mode flags on this platform are unsupported\");\n         }\n-        let mut read_only = false;\n+        let mut writable = true;\n \n         // Now we check the access mode\n         let access_mode = flag & 0b11;\n \n         if access_mode == o_rdonly {\n-            read_only = true;\n+            writable = false;\n             options.read(true);\n         } else if access_mode == o_wronly {\n             options.write(true);\n@@ -109,7 +109,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = options.open(&path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;\n             fh.low += 1;\n-            fh.handles.insert(fh.low, FileHandle { file, read_only }).unwrap_none();\n+            fh.handles.insert(fh.low, FileHandle { file, writable }).unwrap_none();\n             fh.low\n         });\n \n@@ -153,7 +153,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let Some(handle) = this.machine.file_handler.handles.remove(&fd) {\n             // We sync the file if it was opened in a mode different than read-only.\n-            if !handle.read_only {\n+            if handle.writable {\n                 // `File::sync_all` does the checks that are done when closing a file. We do this to\n                 // to handle possible errors correctly.\n                 let result = this.try_unwrap_io_result(handle.file.sync_all().map(|_| 0i32));\n@@ -164,7 +164,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             } else {\n                 // We drop the file, this closes it but ignores any errors produced when closing\n                 // it. This is done because `File::sync_call` cannot be done over files like\n-                // `/dev/urandom`. Check\n+                // `/dev/urandom` which are read-only. Check\n                 // https://github.com/rust-lang/miri/issues/999#issuecomment-568920439 for a deeper\n                 // discussion.\n                 drop(handle);"}]}