{"sha": "e820a866bc2545aa2012248d760fe08d9c705dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjBhODY2YmMyNTQ1YWEyMDEyMjQ4ZDc2MGZlMDhkOWM3MDVkZDM=", "commit": {"author": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-16T10:18:22Z"}, "committer": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-25T16:29:22Z"}, "message": "run rustfmt on libcollectionstest", "tree": {"sha": "03ddd573f673508e894404897e301d860b51358b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ddd573f673508e894404897e301d860b51358b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e820a866bc2545aa2012248d760fe08d9c705dd3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYD4hiAAoJEAkcWPS/w2VxEKAP/AoTM9Y5w1iNghmu1RkvNIoV\nUR+cdG++t/90fxFagui9NASTsrEOKgiOY5XnAJMVi0pWkgNB6IEdvY95d/RlQgm8\n2ur9EVB2cnCVFjytyVGTyYre1GtnuNGLC9VpIzUP06Ovzi266ST9nMyLBkZ4aEPV\nvLATnnQp++t2y/fNhNpAi8w78n9AqFLEqSvDp+HIsSgom1IjU5ZlEAY9+e9n46CX\n2xIl/XpCRln/cQvxeD/QMo53bGQoRWChmfGXUkoLq8r5FPfQB0caXrDe+LgklKO8\nb3E+0CGc1eLRQ9bFzSes06TYLSk8qcGXOog/dWpgPGaGc2kXHjKEpNnZy3yzq0Ke\npziknANnPnQY8jDppegNM/YxAvqE0Ic6GYTeUqY0Qu3yvFwIPzKceZ02qI+07BjL\nBZ9mvmzkm53iEtRoaFiuj1kKAyYPFEdpFpv+nCnpAcZsdcRAT761MvekYZS4ijqe\nrlOB6RVECsGi+vjRQbcVSD69VKmJTYujlbp4Pu0lccTMCfhVSsY2I0mCcWNZp6fQ\nb8mBtdynGTvoPGpVhmvOb85hVthKMtYvU+Z9BuAkcyN2l4qXYWlh01KC++aTWK+h\nyU+7C4zpKqbOvWQecDgzSNDx6e5vHN30lBYSmn3ip8GeE/I60BWvrHwQLqBaqOIO\nhpjyBii5VONtXbW5/jMx\n=ysN2\n-----END PGP SIGNATURE-----", "payload": "tree 03ddd573f673508e894404897e301d860b51358b\nparent 6dc035ed911672c6a1f7afc9eed15fb08e574e5b\nauthor Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476613102 +0530\ncommitter Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1477412962 +0530\n\nrun rustfmt on libcollectionstest\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e820a866bc2545aa2012248d760fe08d9c705dd3", "html_url": "https://github.com/rust-lang/rust/commit/e820a866bc2545aa2012248d760fe08d9c705dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e820a866bc2545aa2012248d760fe08d9c705dd3/comments", "author": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "html_url": "https://github.com/rust-lang/rust/commit/6dc035ed911672c6a1f7afc9eed15fb08e574e5b"}], "stats": {"total": 142, "additions": 80, "deletions": 62}, "files": [{"sha": "9cd63d87931842caf06b546bdbca546c54d40fe0", "filename": "src/libcollectionstest/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbinary_heap.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -299,5 +299,7 @@ fn test_extend_specialization() {\n \n #[allow(dead_code)]\n fn assert_covariance() {\n-    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }\n+    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> {\n+        d\n+    }\n }"}, {"sha": "8222da105ccad767bc1e3c51e0a97ff8dfbd859d", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -533,9 +533,7 @@ create_append_test!(test_append_1700, 1700);\n \n fn rand_data(len: usize) -> Vec<(u32, u32)> {\n     let mut rng = DeterministicRng::new();\n-    Vec::from_iter(\n-        (0..len).map(|_| (rng.next(), rng.next()))\n-    )\n+    Vec::from_iter((0..len).map(|_| (rng.next(), rng.next())))\n }\n \n #[test]"}, {"sha": "ae8b18d0c9fd92203fef9cc2bfd826aad5883bcc", "filename": "src/libcollectionstest/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmod.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -25,7 +25,7 @@ impl DeterministicRng {\n             x: 0x193a6754,\n             y: 0xa8a7d469,\n             z: 0x97830e05,\n-            w: 0x113ba7bb\n+            w: 0x113ba7bb,\n         }\n     }\n "}, {"sha": "6171b8ba624cd5581b505d3eb47cfc43d8e81c7c", "filename": "src/libcollectionstest/btree/set.rs", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fset.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -15,45 +15,51 @@ use super::DeterministicRng;\n \n #[test]\n fn test_clone_eq() {\n-  let mut m = BTreeSet::new();\n+    let mut m = BTreeSet::new();\n \n-  m.insert(1);\n-  m.insert(2);\n+    m.insert(1);\n+    m.insert(2);\n \n-  assert!(m.clone() == m);\n+    assert!(m.clone() == m);\n }\n \n #[test]\n fn test_hash() {\n-  let mut x = BTreeSet::new();\n-  let mut y = BTreeSet::new();\n+    let mut x = BTreeSet::new();\n+    let mut y = BTreeSet::new();\n \n-  x.insert(1);\n-  x.insert(2);\n-  x.insert(3);\n+    x.insert(1);\n+    x.insert(2);\n+    x.insert(3);\n \n-  y.insert(3);\n-  y.insert(2);\n-  y.insert(1);\n+    y.insert(3);\n+    y.insert(2);\n+    y.insert(1);\n \n-  assert!(::hash(&x) == ::hash(&y));\n+    assert!(::hash(&x) == ::hash(&y));\n }\n \n-fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F) where\n-    F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut FnMut(&i32) -> bool) -> bool,\n+fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)\n+    where F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut FnMut(&i32) -> bool) -> bool\n {\n     let mut set_a = BTreeSet::new();\n     let mut set_b = BTreeSet::new();\n \n-    for x in a { assert!(set_a.insert(*x)) }\n-    for y in b { assert!(set_b.insert(*y)) }\n+    for x in a {\n+        assert!(set_a.insert(*x))\n+    }\n+    for y in b {\n+        assert!(set_b.insert(*y))\n+    }\n \n     let mut i = 0;\n-    f(&set_a, &set_b, &mut |&x| {\n-        assert_eq!(x, expected[i]);\n-        i += 1;\n-        true\n-    });\n+    f(&set_a,\n+      &set_b,\n+      &mut |&x| {\n+          assert_eq!(x, expected[i]);\n+          i += 1;\n+          true\n+      });\n     assert_eq!(i, expected.len());\n }\n \n@@ -82,9 +88,7 @@ fn test_difference() {\n     check_difference(&[], &[], &[]);\n     check_difference(&[1, 12], &[], &[1, 12]);\n     check_difference(&[], &[1, 2, 3, 9], &[]);\n-    check_difference(&[1, 3, 5, 9, 11],\n-                     &[3, 9],\n-                     &[1, 5, 11]);\n+    check_difference(&[1, 3, 5, 9, 11], &[3, 9], &[1, 5, 11]);\n     check_difference(&[-5, 11, 22, 33, 40, 42],\n                      &[-12, -5, 14, 23, 34, 38, 39, 50],\n                      &[11, 22, 33, 40, 42]);\n@@ -245,10 +249,18 @@ fn test_recovery() {\n fn test_variance() {\n     use std::collections::btree_set::{IntoIter, Iter, Range};\n \n-    fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> { v }\n-    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> { v }\n-    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> { v }\n-    fn range<'a, 'new>(v: Range<'a, &'static str>) -> Range<'a, &'new str> { v }\n+    fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> {\n+        v\n+    }\n+    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> {\n+        v\n+    }\n+    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> {\n+        v\n+    }\n+    fn range<'a, 'new>(v: Range<'a, &'static str>) -> Range<'a, &'new str> {\n+        v\n+    }\n }\n \n #[test]\n@@ -277,9 +289,7 @@ fn test_append() {\n \n fn rand_data(len: usize) -> Vec<u32> {\n     let mut rng = DeterministicRng::new();\n-    Vec::from_iter(\n-        (0..len).map(|_| rng.next())\n-    )\n+    Vec::from_iter((0..len).map(|_| rng.next()))\n }\n \n #[test]"}, {"sha": "5d3e03c2dee3691f21612ead902b7d6509c4c762", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -36,7 +36,9 @@ extern crate rustc_unicode;\n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;\n \n-#[cfg(test)] #[macro_use] mod bench;\n+#[cfg(test)]\n+#[macro_use]\n+mod bench;\n \n mod binary_heap;\n mod btree;"}, {"sha": "a6230ef471cec0f69f9cb197ae8f9cd24a16c9c0", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -420,12 +420,12 @@ fn test_sort_stability() {\n             // number this element is, i.e. the second elements\n             // will occur in sorted order.\n             let mut v: Vec<_> = (0..len)\n-                                    .map(|_| {\n-                                        let n = thread_rng().gen::<usize>() % 10;\n-                                        counts[n] += 1;\n-                                        (n, counts[n])\n-                                    })\n-                                    .collect();\n+                .map(|_| {\n+                    let n = thread_rng().gen::<usize>() % 10;\n+                    counts[n] += 1;\n+                    (n, counts[n])\n+                })\n+                .collect();\n \n             // only sort on the first element, so an unstable sort\n             // may mix up the counts.\n@@ -1116,13 +1116,13 @@ fn test_box_slice_clone_panics() {\n     };\n \n     spawn(move || {\n-        // When xs is dropped, +5.\n-        let xs = vec![canary.clone(), canary.clone(), canary.clone(), panic, canary]\n-                     .into_boxed_slice();\n+            // When xs is dropped, +5.\n+            let xs = vec![canary.clone(), canary.clone(), canary.clone(), panic, canary]\n+                .into_boxed_slice();\n \n-        // When panic is cloned, +3.\n-        xs.clone();\n-    })\n+            // When panic is cloned, +3.\n+            xs.clone();\n+        })\n         .join()\n         .unwrap_err();\n \n@@ -1374,8 +1374,8 @@ mod bench {\n         let mut rng = thread_rng();\n         b.iter(|| {\n             let mut v = rng.gen_iter::<BigSortable>()\n-                           .take(5)\n-                           .collect::<Vec<BigSortable>>();\n+                .take(5)\n+                .collect::<Vec<BigSortable>>();\n             v.sort();\n         });\n         b.bytes = 5 * mem::size_of::<BigSortable>() as u64;\n@@ -1386,8 +1386,8 @@ mod bench {\n         let mut rng = thread_rng();\n         b.iter(|| {\n             let mut v = rng.gen_iter::<BigSortable>()\n-                           .take(100)\n-                           .collect::<Vec<BigSortable>>();\n+                .take(100)\n+                .collect::<Vec<BigSortable>>();\n             v.sort();\n         });\n         b.bytes = 100 * mem::size_of::<BigSortable>() as u64;\n@@ -1398,8 +1398,8 @@ mod bench {\n         let mut rng = thread_rng();\n         b.iter(|| {\n             let mut v = rng.gen_iter::<BigSortable>()\n-                           .take(10000)\n-                           .collect::<Vec<BigSortable>>();\n+                .take(10000)\n+                .collect::<Vec<BigSortable>>();\n             v.sort();\n         });\n         b.bytes = 10000 * mem::size_of::<BigSortable>() as u64;"}, {"sha": "51b7a71c0742adff23d941cfb9b669a6f519265c", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -599,8 +599,12 @@ fn test_cow_from() {\n \n #[allow(dead_code)]\n fn assert_covariance() {\n-    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }\n-    fn into_iter<'new>(i: IntoIter<&'static str>) -> IntoIter<&'new str> { i }\n+    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> {\n+        d\n+    }\n+    fn into_iter<'new>(i: IntoIter<&'static str>) -> IntoIter<&'new str> {\n+        i\n+    }\n }\n \n #[bench]"}, {"sha": "b760ca4eb96661fbeb677cb5c98e0bee81f387e5", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e820a866bc2545aa2012248d760fe08d9c705dd3/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=e820a866bc2545aa2012248d760fe08d9c705dd3", "patch": "@@ -686,9 +686,9 @@ fn test_show() {\n     assert_eq!(format!(\"{:?}\", ringbuf), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n     let ringbuf: VecDeque<_> = vec![\"just\", \"one\", \"test\", \"more\"]\n-                                   .iter()\n-                                   .cloned()\n-                                   .collect();\n+        .iter()\n+        .cloned()\n+        .collect();\n     assert_eq!(format!(\"{:?}\", ringbuf),\n                \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n }\n@@ -1003,5 +1003,7 @@ fn test_contains() {\n \n #[allow(dead_code)]\n fn assert_covariance() {\n-    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }\n+    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> {\n+        d\n+    }\n }"}]}