{"sha": "eb99ea51421a142099f0670156f4ee5353013da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOTllYTUxNDIxYTE0MjA5OWYwNjcwMTU2ZjRlZTUzNTMwMTNkYTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-26T12:38:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-26T12:38:59Z"}, "message": "Revert \"Wasm-bindgen abi compat using cast_to\"\n\nThis reverts commit 903c553f4a2fc8344edac0da565e6c1a7fad4b39.", "tree": {"sha": "8f0e190a1dd178971317e5cab80cc9ea453d6dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0e190a1dd178971317e5cab80cc9ea453d6dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb99ea51421a142099f0670156f4ee5353013da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb99ea51421a142099f0670156f4ee5353013da9", "html_url": "https://github.com/rust-lang/rust/commit/eb99ea51421a142099f0670156f4ee5353013da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb99ea51421a142099f0670156f4ee5353013da9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903c553f4a2fc8344edac0da565e6c1a7fad4b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/903c553f4a2fc8344edac0da565e6c1a7fad4b39", "html_url": "https://github.com/rust-lang/rust/commit/903c553f4a2fc8344edac0da565e6c1a7fad4b39"}], "stats": {"total": 58, "additions": 9, "deletions": 49}, "files": [{"sha": "ef467ed6514549a834bf8872ee11ce06c891a478", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb99ea51421a142099f0670156f4ee5353013da9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb99ea51421a142099f0670156f4ee5353013da9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=eb99ea51421a142099f0670156f4ee5353013da9", "patch": "@@ -2860,7 +2860,7 @@ where\n             return;\n         }\n \n-        if let Err(msg) = self.adjust_for_cabi(cx, &cx.tcx().sess.target_features, abi) {\n+        if let Err(msg) = self.adjust_for_cabi(cx, abi) {\n             cx.tcx().sess.fatal(&msg);\n         }\n     }"}, {"sha": "2cbd52bf3e9a7b84061ba41cdd506df0a256ff7e", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb99ea51421a142099f0670156f4ee5353013da9/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb99ea51421a142099f0670156f4ee5353013da9/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=eb99ea51421a142099f0670156f4ee5353013da9", "patch": "@@ -53,8 +53,6 @@ pub enum PassMode {\n // Hack to disable non_upper_case_globals only for the bitflags! and not for the rest\n // of this module\n pub use attr_impl::ArgAttribute;\n-use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_span::Symbol;\n \n #[allow(non_upper_case_globals)]\n #[allow(unused)]\n@@ -594,12 +592,7 @@ pub struct FnAbi<'a, Ty> {\n }\n \n impl<'a, Ty> FnAbi<'a, Ty> {\n-    pub fn adjust_for_cabi<C>(\n-        &mut self,\n-        cx: &C,\n-        target_features: &FxHashSet<Symbol>,\n-        abi: spec::abi::Abi,\n-    ) -> Result<(), String>\n+    pub fn adjust_for_cabi<C>(&mut self, cx: &C, abi: spec::abi::Abi) -> Result<(), String>\n     where\n         Ty: TyAndLayoutMethods<'a, C> + Copy,\n         C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n@@ -640,7 +633,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n             \"wasm32\" => match cx.target_spec().os.as_str() {\n                 \"emscripten\" | \"wasi\" => wasm32::compute_abi_info(cx, self),\n-                _ => wasm32_bindgen_compat::compute_abi_info(cx, target_features, self),\n+                _ => wasm32_bindgen_compat::compute_abi_info(self),\n             },\n             \"asmjs\" => wasm32::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),"}, {"sha": "59571fd9d482106e950745a17d94da8f6187b3cb", "filename": "compiler/rustc_target/src/abi/call/wasm32_bindgen_compat.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/eb99ea51421a142099f0670156f4ee5353013da9/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb99ea51421a142099f0670156f4ee5353013da9/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs?ref=eb99ea51421a142099f0670156f4ee5353013da9", "patch": "@@ -5,58 +5,25 @@\n // can be fixed to work with the correct ABI. See #63649 for further\n // discussion.\n \n-use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_span::Symbol;\n+use crate::abi::call::{ArgAbi, FnAbi};\n \n-use crate::abi::call::{ArgAbi, FnAbi, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n-\n-fn classify_ret<'a, Ty, C>(cx: &C, target_features: &FxHashSet<Symbol>, ret: &mut ArgAbi<'a, Ty>)\n-where\n-    Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n-{\n-    if ret.layout.is_aggregate() {\n-        if let Some(unit) = ret.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()) {\n-            let size = ret.layout.size;\n-            if unit.size == size || target_features.contains(&Symbol::intern(\"multivalue\")) {\n-                ret.cast_to(Uniform { unit, total: size });\n-            }\n-        }\n-    }\n+fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n     ret.extend_integer_width_to(32);\n }\n \n-fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n-where\n-    Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n-{\n-    if arg.layout.is_aggregate() {\n-        if let Some(unit) = arg.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()) {\n-            let size = arg.layout.size;\n-            arg.cast_to(Uniform { unit, total: size });\n-        }\n-    }\n+fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n     arg.extend_integer_width_to(32);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(\n-    cx: &C,\n-    target_features: &FxHashSet<Symbol>,\n-    fn_abi: &mut FnAbi<'a, Ty>,\n-) where\n-    Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n-{\n+pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n     if !fn_abi.ret.is_ignore() {\n-        classify_ret(cx, target_features, &mut fn_abi.ret);\n+        classify_ret(&mut fn_abi.ret);\n     }\n \n     for arg in &mut fn_abi.args {\n         if arg.is_ignore() {\n             continue;\n         }\n-        classify_arg(cx, arg);\n+        classify_arg(arg);\n     }\n }"}]}