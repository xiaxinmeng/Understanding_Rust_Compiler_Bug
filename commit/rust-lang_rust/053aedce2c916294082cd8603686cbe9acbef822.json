{"sha": "053aedce2c916294082cd8603686cbe9acbef822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1M2FlZGNlMmM5MTYyOTQwODJjZDg2MDM2ODZjYmU5YWNiZWY4MjI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-21T19:53:45Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-25T10:26:03Z"}, "message": "clippy::filter_map_identity", "tree": {"sha": "bd2b54801f7d9dbfb95903a86208cf8e4810a8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2b54801f7d9dbfb95903a86208cf8e4810a8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053aedce2c916294082cd8603686cbe9acbef822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053aedce2c916294082cd8603686cbe9acbef822", "html_url": "https://github.com/rust-lang/rust/commit/053aedce2c916294082cd8603686cbe9acbef822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053aedce2c916294082cd8603686cbe9acbef822/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "066eb6ab5d516259a330eaab3a2254990ad33593", "url": "https://api.github.com/repos/rust-lang/rust/commits/066eb6ab5d516259a330eaab3a2254990ad33593", "html_url": "https://github.com/rust-lang/rust/commit/066eb6ab5d516259a330eaab3a2254990ad33593"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "3816888db1062d7e4a1012f8d952d08391803fc1", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053aedce2c916294082cd8603686cbe9acbef822/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053aedce2c916294082cd8603686cbe9acbef822/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=053aedce2c916294082cd8603686cbe9acbef822", "patch": "@@ -476,7 +476,7 @@ impl<T> PerNS<Option<T>> {\n \n     /// Returns an iterator over the items which are `Some`.\n     pub fn present_items(self) -> impl Iterator<Item = T> {\n-        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).filter_map(|it| it)\n+        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).flatten()\n     }\n }\n "}, {"sha": "f77f9bc454b84ad7cb53f6b9ea7fb4635cbb5dc9", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/053aedce2c916294082cd8603686cbe9acbef822/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053aedce2c916294082cd8603686cbe9acbef822/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=053aedce2c916294082cd8603686cbe9acbef822", "patch": "@@ -1107,8 +1107,7 @@ impl<'a> Parser<'a> {\n                 e\n             })?;\n \n-        let enum_definition =\n-            EnumDef { variants: variants.into_iter().filter_map(|v| v).collect() };\n+        let enum_definition = EnumDef { variants: variants.into_iter().flatten().collect() };\n         Ok((id, ItemKind::Enum(enum_definition, generics)))\n     }\n "}, {"sha": "ae6de3b7a0cee855af34200fea9d6928cf983b2c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053aedce2c916294082cd8603686cbe9acbef822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053aedce2c916294082cd8603686cbe9acbef822/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=053aedce2c916294082cd8603686cbe9acbef822", "patch": "@@ -791,7 +791,7 @@ fn fn_sig_suggestion<'tcx>(\n             })\n         })\n         .chain(std::iter::once(if sig.c_variadic { Some(\"...\".to_string()) } else { None }))\n-        .filter_map(|arg| arg)\n+        .flatten()\n         .collect::<Vec<String>>()\n         .join(\", \");\n     let output = sig.output();"}]}