{"sha": "019040d5b7dbea6d68019881bc43ffe57a6c37d0", "node_id": "C_kwDOAAsO6NoAKDAxOTA0MGQ1YjdkYmVhNmQ2ODAxOTg4MWJjNDNmZmU1N2E2YzM3ZDA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-13T14:19:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-13T14:19:00Z"}, "message": "Merge pull request #1291 from bjorn3/build_system_rework2\n\nMove downloaded test project to downloads/", "tree": {"sha": "ef529b10d469cc8032a900a5308f845ae744de04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef529b10d469cc8032a900a5308f845ae744de04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/019040d5b7dbea6d68019881bc43ffe57a6c37d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSB5UCRBK7hj4Ov3rIwAAhrgIAFKlsfFb5M08iwUsWlTmMlHR\nbjE+B6LjX47nSG+ZyCWNyWzseRDLef42Y5P2MFnZ1AhMN+QiAYEEnmg+WnPkvwuW\n10ef5URRT8pAbO60SjKtkFfSNxhwfvKtvJqzlYI6tx5e1QRIuC5kHuUtWi9HHRul\nnEbJ4MgVybf9BH97NaxILnsJP73yy+JFuSiprYdCyNibxV23P0RtWEZhs1lqZqk8\nKVRPfzbSfQmlvNc1SP4yYg/nkFEy5XNYFi8x2k54JqH761QlEw9+pBSvvOrHBu+H\nxptcOMIRveb2Ako8CzSgV8LtZpt0jTTQ55DqJpHYQxDm8gl+F4fFBbYBUSXjflQ=\n=iKBR\n-----END PGP SIGNATURE-----\n", "payload": "tree ef529b10d469cc8032a900a5308f845ae744de04\nparent e1a7791fcb8f5f0f257f3c95241e723ea6abbdbc\nparent 24198ce6b4937b52203f2b54e31c66b9932ee645\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1665670740 +0200\ncommitter GitHub <noreply@github.com> 1665670740 +0200\n\nMerge pull request #1291 from bjorn3/build_system_rework2\n\nMove downloaded test project to downloads/"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/019040d5b7dbea6d68019881bc43ffe57a6c37d0", "html_url": "https://github.com/rust-lang/rust/commit/019040d5b7dbea6d68019881bc43ffe57a6c37d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/019040d5b7dbea6d68019881bc43ffe57a6c37d0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a7791fcb8f5f0f257f3c95241e723ea6abbdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a7791fcb8f5f0f257f3c95241e723ea6abbdbc", "html_url": "https://github.com/rust-lang/rust/commit/e1a7791fcb8f5f0f257f3c95241e723ea6abbdbc"}, {"sha": "24198ce6b4937b52203f2b54e31c66b9932ee645", "url": "https://api.github.com/repos/rust-lang/rust/commits/24198ce6b4937b52203f2b54e31c66b9932ee645", "html_url": "https://github.com/rust-lang/rust/commit/24198ce6b4937b52203f2b54e31c66b9932ee645"}], "stats": {"total": 222, "additions": 136, "deletions": 86}, "files": [{"sha": "fae09592c6ac0dc91be2641093896c0adc9559d8", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/019040d5b7dbea6d68019881bc43ffe57a6c37d0/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/019040d5b7dbea6d68019881bc43ffe57a6c37d0/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=019040d5b7dbea6d68019881bc43ffe57a6c37d0", "patch": "@@ -15,9 +15,4 @@ perf.data.old\n /build_sysroot/compiler-builtins\n /build_sysroot/rustc_version\n /rust\n-/rand\n-/regex\n-/simple-raytracer\n-/portable-simd\n-/abi-cafe\n-/abi-checker\n+/download"}, {"sha": "fae5b27163680badc511023892f92fe462ddfbaf", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/019040d5b7dbea6d68019881bc43ffe57a6c37d0/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019040d5b7dbea6d68019881bc43ffe57a6c37d0/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=019040d5b7dbea6d68019881bc43ffe57a6c37d0", "patch": "@@ -3,6 +3,7 @@ use std::path::Path;\n \n use super::build_sysroot;\n use super::config;\n+use super::prepare;\n use super::utils::{cargo_command, spawn_and_wait};\n use super::SysrootKind;\n \n@@ -35,9 +36,8 @@ pub(crate) fn run(\n     );\n \n     eprintln!(\"Running abi-cafe\");\n-    let mut abi_cafe_path = env::current_dir().unwrap();\n-    abi_cafe_path.push(\"abi-cafe\");\n-    env::set_current_dir(&abi_cafe_path.clone()).unwrap();\n+    let abi_cafe_path = prepare::ABI_CAFE.source_dir();\n+    env::set_current_dir(abi_cafe_path.clone()).unwrap();\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n "}, {"sha": "f9ab8ae70412b0ec2d909767557777f268755cc3", "filename": "build_system/prepare.rs", "status": "modified", "additions": 103, "deletions": 54, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/019040d5b7dbea6d68019881bc43ffe57a6c37d0/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019040d5b7dbea6d68019881bc43ffe57a6c37d0/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=019040d5b7dbea6d68019881bc43ffe57a6c37d0", "patch": "@@ -7,56 +7,61 @@ use std::process::Command;\n use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n use super::utils::{cargo_command, copy_dir_recursively, spawn_and_wait};\n \n+pub(crate) const ABI_CAFE: GitRepo = GitRepo::github(\n+    \"Gankra\",\n+    \"abi-cafe\",\n+    \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\",\n+    \"abi-cafe\",\n+);\n+\n+pub(crate) const RAND: GitRepo =\n+    GitRepo::github(\"rust-random\", \"rand\", \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\", \"rand\");\n+\n+pub(crate) const REGEX: GitRepo =\n+    GitRepo::github(\"rust-lang\", \"regex\", \"341f207c1071f7290e3f228c710817c280c8dca1\", \"regex\");\n+\n+pub(crate) const PORTABLE_SIMD: GitRepo = GitRepo::github(\n+    \"rust-lang\",\n+    \"portable-simd\",\n+    \"d5cd4a8112d958bd3a252327e0d069a6363249bd\",\n+    \"portable-simd\",\n+);\n+\n+pub(crate) const SIMPLE_RAYTRACER: GitRepo = GitRepo::github(\n+    \"ebobby\",\n+    \"simple-raytracer\",\n+    \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    \"<none>\",\n+);\n+\n pub(crate) fn prepare() {\n+    if Path::new(\"download\").exists() {\n+        std::fs::remove_dir_all(Path::new(\"download\")).unwrap();\n+    }\n+    std::fs::create_dir_all(Path::new(\"download\")).unwrap();\n+\n     prepare_sysroot();\n \n+    // FIXME maybe install this only locally?\n     eprintln!(\"[INSTALL] hyperfine\");\n     Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n \n-    clone_repo_shallow_github(\n-        \"abi-cafe\",\n-        \"Gankra\",\n-        \"abi-cafe\",\n-        \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\",\n-    );\n-    apply_patches(\"abi-cafe\", Path::new(\"abi-cafe\"));\n-\n-    clone_repo_shallow_github(\n-        \"rand\",\n-        \"rust-random\",\n-        \"rand\",\n-        \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\",\n-    );\n-    apply_patches(\"rand\", Path::new(\"rand\"));\n-\n-    clone_repo_shallow_github(\n-        \"regex\",\n-        \"rust-lang\",\n-        \"regex\",\n-        \"341f207c1071f7290e3f228c710817c280c8dca1\",\n-    );\n-\n-    clone_repo_shallow_github(\n-        \"portable-simd\",\n-        \"rust-lang\",\n-        \"portable-simd\",\n-        \"d5cd4a8112d958bd3a252327e0d069a6363249bd\",\n-    );\n-    apply_patches(\"portable-simd\", Path::new(\"portable-simd\"));\n-\n-    clone_repo_shallow_github(\n-        \"simple-raytracer\",\n-        \"ebobby\",\n-        \"simple-raytracer\",\n-        \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n-    );\n+    ABI_CAFE.fetch();\n+    RAND.fetch();\n+    REGEX.fetch();\n+    PORTABLE_SIMD.fetch();\n+    SIMPLE_RAYTRACER.fetch();\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let build_cmd = cargo_command(\"cargo\", \"build\", None, Path::new(\"simple-raytracer\"));\n+    let build_cmd = cargo_command(\"cargo\", \"build\", None, &SIMPLE_RAYTRACER.source_dir());\n     spawn_and_wait(build_cmd);\n     fs::copy(\n-        Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n-        Path::new(\"simple-raytracer\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n+        SIMPLE_RAYTRACER\n+            .source_dir()\n+            .join(\"target\")\n+            .join(\"debug\")\n+            .join(get_file_name(\"main\", \"bin\")),\n+        SIMPLE_RAYTRACER.source_dir().join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n     )\n     .unwrap();\n }\n@@ -88,38 +93,78 @@ fn prepare_sysroot() {\n     apply_patches(\"sysroot\", &sysroot_src);\n }\n \n+pub(crate) struct GitRepo {\n+    url: GitRepoUrl,\n+    rev: &'static str,\n+    patch_name: &'static str,\n+}\n+\n+enum GitRepoUrl {\n+    Github { user: &'static str, repo: &'static str },\n+}\n+\n+impl GitRepo {\n+    const fn github(\n+        user: &'static str,\n+        repo: &'static str,\n+        rev: &'static str,\n+        patch_name: &'static str,\n+    ) -> GitRepo {\n+        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, patch_name }\n+    }\n+\n+    pub(crate) fn source_dir(&self) -> PathBuf {\n+        match self.url {\n+            GitRepoUrl::Github { user: _, repo } => {\n+                std::env::current_dir().unwrap().join(\"download\").join(repo)\n+            }\n+        }\n+    }\n+\n+    fn fetch(&self) {\n+        match self.url {\n+            GitRepoUrl::Github { user, repo } => {\n+                clone_repo_shallow_github(&self.source_dir(), user, repo, self.rev);\n+            }\n+        }\n+        apply_patches(self.patch_name, &self.source_dir());\n+    }\n+}\n+\n #[allow(dead_code)]\n-fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n+fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     eprintln!(\"[CLONE] {}\", repo);\n     // Ignore exit code as the repo may already have been checked out\n-    Command::new(\"git\").arg(\"clone\").arg(repo).arg(target_dir).spawn().unwrap().wait().unwrap();\n+    Command::new(\"git\").arg(\"clone\").arg(repo).arg(&download_dir).spawn().unwrap().wait().unwrap();\n \n     let mut clean_cmd = Command::new(\"git\");\n-    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(target_dir);\n+    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(&download_dir);\n     spawn_and_wait(clean_cmd);\n \n     let mut checkout_cmd = Command::new(\"git\");\n-    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(target_dir);\n+    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(download_dir);\n     spawn_and_wait(checkout_cmd);\n }\n \n-fn clone_repo_shallow_github(target_dir: &str, username: &str, repo: &str, rev: &str) {\n+fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &str) {\n     if cfg!(windows) {\n         // Older windows doesn't have tar or curl by default. Fall back to using git.\n-        clone_repo(target_dir, &format!(\"https://github.com/{}/{}.git\", username, repo), rev);\n+        clone_repo(download_dir, &format!(\"https://github.com/{}/{}.git\", user, repo), rev);\n         return;\n     }\n \n-    let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", username, repo, rev);\n-    let archive_file = format!(\"{}.tar.gz\", rev);\n-    let archive_dir = format!(\"{}-{}\", repo, rev);\n+    let downloads_dir = std::env::current_dir().unwrap().join(\"download\");\n \n-    eprintln!(\"[DOWNLOAD] {}/{} from {}\", username, repo, archive_url);\n+    let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", user, repo, rev);\n+    let archive_file = downloads_dir.join(format!(\"{}.tar.gz\", rev));\n+    let archive_dir = downloads_dir.join(format!(\"{}-{}\", repo, rev));\n+\n+    eprintln!(\"[DOWNLOAD] {}/{} from {}\", user, repo, archive_url);\n \n     // Remove previous results if they exists\n     let _ = std::fs::remove_file(&archive_file);\n     let _ = std::fs::remove_dir_all(&archive_dir);\n-    let _ = std::fs::remove_dir_all(target_dir);\n+    let _ = std::fs::remove_dir_all(&download_dir);\n \n     // Download zip archive\n     let mut download_cmd = Command::new(\"curl\");\n@@ -128,13 +173,13 @@ fn clone_repo_shallow_github(target_dir: &str, username: &str, repo: &str, rev:\n \n     // Unpack tar archive\n     let mut unpack_cmd = Command::new(\"tar\");\n-    unpack_cmd.arg(\"xf\").arg(&archive_file);\n+    unpack_cmd.arg(\"xf\").arg(&archive_file).current_dir(downloads_dir);\n     spawn_and_wait(unpack_cmd);\n \n     // Rename unpacked dir to the expected name\n-    std::fs::rename(archive_dir, target_dir).unwrap();\n+    std::fs::rename(archive_dir, &download_dir).unwrap();\n \n-    init_git_repo(Path::new(target_dir));\n+    init_git_repo(&download_dir);\n \n     // Cleanup\n     std::fs::remove_file(archive_file).unwrap();\n@@ -175,6 +220,10 @@ fn get_patches(source_dir: &Path, crate_name: &str) -> Vec<PathBuf> {\n }\n \n fn apply_patches(crate_name: &str, target_dir: &Path) {\n+    if crate_name == \"<none>\" {\n+        return;\n+    }\n+\n     for patch in get_patches(&std::env::current_dir().unwrap(), crate_name) {\n         eprintln!(\n             \"[PATCH] {:?} <- {:?}\","}, {"sha": "a414b60f4e06b2b79dccc1ee64bc233f32ae6ba1", "filename": "build_system/tests.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/019040d5b7dbea6d68019881bc43ffe57a6c37d0/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019040d5b7dbea6d68019881bc43ffe57a6c37d0/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=019040d5b7dbea6d68019881bc43ffe57a6c37d0", "patch": "@@ -1,5 +1,6 @@\n use super::build_sysroot;\n use super::config;\n+use super::prepare;\n use super::rustc_info::get_wrapper_file_name;\n use super::utils::{cargo_command, hyperfine_command, spawn_and_wait, spawn_and_wait_with_input};\n use build_system::SysrootKind;\n@@ -217,7 +218,7 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n-        runner.in_dir([\"rand\"], |runner| {\n+        runner.in_dir(prepare::RAND.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n \n             if runner.host_triple == runner.target_triple {\n@@ -230,7 +231,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"bench.simple-raytracer\", &|runner| {\n-        runner.in_dir([\"simple-raytracer\"], |runner| {\n+        runner.in_dir(prepare::SIMPLE_RAYTRACER.source_dir(), |runner| {\n             let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string()).parse().unwrap();\n \n             if runner.host_triple == runner.target_triple {\n@@ -273,19 +274,28 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"test.libcore\", &|runner| {\n-        runner.in_dir([\"build_sysroot\", \"sysroot_src\", \"library\", \"core\", \"tests\"], |runner| {\n-            runner.run_cargo(\"clean\", []);\n+        runner.in_dir(\n+            std::env::current_dir()\n+                .unwrap()\n+                .join(\"build_sysroot\")\n+                .join(\"sysroot_src\")\n+                .join(\"library\")\n+                .join(\"core\")\n+                .join(\"tests\"),\n+            |runner| {\n+                runner.run_cargo(\"clean\", []);\n \n-            if runner.host_triple == runner.target_triple {\n-                runner.run_cargo(\"test\", []);\n-            } else {\n-                eprintln!(\"Cross-Compiling: Not running tests\");\n-                runner.run_cargo(\"build\", [\"--tests\"]);\n-            }\n-        });\n+                if runner.host_triple == runner.target_triple {\n+                    runner.run_cargo(\"test\", []);\n+                } else {\n+                    eprintln!(\"Cross-Compiling: Not running tests\");\n+                    runner.run_cargo(\"build\", [\"--tests\"]);\n+                }\n+            },\n+        );\n     }),\n     TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n-        runner.in_dir([\"regex\"], |runner| {\n+        runner.in_dir(prepare::REGEX.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n@@ -336,7 +346,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"test.regex\", &|runner| {\n-        runner.in_dir([\"regex\"], |runner| {\n+        runner.in_dir(prepare::REGEX.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n@@ -367,7 +377,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"test.portable-simd\", &|runner| {\n-        runner.in_dir([\"portable-simd\"], |runner| {\n+        runner.in_dir(prepare::PORTABLE_SIMD.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n             runner.run_cargo(\"build\", [\"--all-targets\", \"--target\", &runner.target_triple]);\n \n@@ -506,16 +516,8 @@ impl TestRunner {\n         }\n     }\n \n-    fn in_dir<'a, I, F>(&self, dir: I, callback: F)\n-    where\n-        I: IntoIterator<Item = &'a str>,\n-        F: FnOnce(&TestRunner),\n-    {\n+    fn in_dir(&self, new: impl AsRef<Path>, callback: impl FnOnce(&TestRunner)) {\n         let current = env::current_dir().unwrap();\n-        let mut new = current.clone();\n-        for d in dir {\n-            new.push(d);\n-        }\n \n         env::set_current_dir(new).unwrap();\n         callback(self);"}, {"sha": "fedab2433aa05f66f33949f35ea62cd88ec3f4ed", "filename": "clean_all.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/019040d5b7dbea6d68019881bc43ffe57a6c37d0/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/019040d5b7dbea6d68019881bc43ffe57a6c37d0/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=019040d5b7dbea6d68019881bc43ffe57a6c37d0", "patch": "@@ -3,4 +3,8 @@ set -e\n \n rm -rf build_sysroot/{sysroot_src/,target/,compiler-builtins/,rustc_version}\n rm -rf target/ build/ perf.data{,.old} y.bin\n+rm -rf download/\n+\n+# Kept for now in case someone updates their checkout of cg_clif before running clean_all.sh\n+# FIXME remove at some point in the future\n rm -rf rand/ regex/ simple-raytracer/ portable-simd/ abi-checker/ abi-cafe/"}]}