{"sha": "19bd72e62390740afd8d6afd5fd57c04e8469b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YmQ3MmU2MjM5MDc0MGFmZDhkNmFmZDVmZDU3YzA0ZTg0NjliNGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-06T07:22:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-06T07:22:52Z"}, "message": "convert remaining try_validation to new macro", "tree": {"sha": "23e89fa3dba07c696238f56c8b3b52fc3cc5504b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e89fa3dba07c696238f56c8b3b52fc3cc5504b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19bd72e62390740afd8d6afd5fd57c04e8469b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19bd72e62390740afd8d6afd5fd57c04e8469b4f", "html_url": "https://github.com/rust-lang/rust/commit/19bd72e62390740afd8d6afd5fd57c04e8469b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19bd72e62390740afd8d6afd5fd57c04e8469b4f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa2eaca443e47c6e10c4e15f9aee5c995dda5272", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2eaca443e47c6e10c4e15f9aee5c995dda5272", "html_url": "https://github.com/rust-lang/rust/commit/aa2eaca443e47c6e10c4e15f9aee5c995dda5272"}], "stats": {"total": 92, "additions": 60, "deletions": 32}, "files": [{"sha": "2e1138d1d0708c96ae7063d64a4121389a92a18a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/19bd72e62390740afd8d6afd5fd57c04e8469b4f/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd72e62390740afd8d6afd5fd57c04e8469b4f/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=19bd72e62390740afd8d6afd5fd57c04e8469b4f", "patch": "@@ -37,25 +37,16 @@ macro_rules! throw_validation_failure {\n     }};\n }\n \n-/// Returns a validation failure for any Err value of $e.\n-// FIXME: Replace all usages of try_validation_catchall! with try_validation!.\n-macro_rules! try_validation_catchall {\n-    ($e:expr, $what:expr, $where:expr $(, $expected:expr )?) => {{\n-        try_validation!($e, $where,\n-            _ => { \"{}\", $what } $( expected { \"{}\", $expected } )?,\n-        )\n-    }};\n-}\n-/// Like try_validation, but will throw a validation error if any of the patterns in $p are\n-/// matched. Other errors are passed back to the caller, unchanged. This lets you use the patterns\n-/// as a kind of validation blacklist:\n+/// If $e throws an error matching the pattern, throw a validation failure.\n+/// Other errors are passed back to the caller, unchanged -- and if they reach the root of\n+/// the visitor, we make sure only validation errors and `InvalidProgram` errors are left.\n+/// This lets you use the patterns as a kind of validation whitelist, asserting which errors\n+/// can possibly happen:\n ///\n /// ```\n /// let v = try_validation!(some_fn(), some_path, {\n ///     Foo | Bar | Baz => { \"some failure\" },\n /// });\n-/// // Failures that match $p are thrown up as validation errors, but other errors are passed back\n-/// // unchanged.\n /// ```\n ///\n /// An additional expected parameter can also be added to the failure message:\n@@ -316,19 +307,21 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     err_ub!(PointerOutOfBounds { .. }) |\n                     err_ub!(AlignmentCheckFailed { .. }) |\n                     err_ub!(DanglingIntPointer(..)) |\n-                    err_unsup!(ReadBytesAsPointer) => {\n-                        \"dangling or unaligned vtable pointer in wide pointer or too small vtable\"\n-                    },\n+                    err_unsup!(ReadBytesAsPointer) =>\n+                        { \"dangling or unaligned vtable pointer in wide pointer or too small vtable\" },\n                 );\n-                try_validation_catchall!(\n+                try_validation!(\n                     self.ecx.read_drop_type_from_vtable(vtable),\n-                    \"invalid drop fn in vtable\",\n-                    self.path\n+                    self.path,\n+                    err_ub!(DanglingIntPointer(..)) |\n+                    err_ub!(InvalidFunctionPointer(..)) |\n+                    err_unsup!(ReadBytesAsPointer) =>\n+                        { \"invalid drop fn in vtable\" },\n                 );\n-                try_validation_catchall!(\n+                try_validation!(\n                     self.ecx.read_size_and_align_from_vtable(vtable),\n-                    \"invalid size or align in vtable\",\n-                    self.path\n+                    self.path,\n+                    err_unsup!(ReadPointerAsBytes) => { \"invalid size or align in vtable\" },\n                 );\n                 // FIXME: More checks for the vtable.\n             }\n@@ -558,11 +551,13 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             }\n             ty::FnPtr(_sig) => {\n                 let value = self.ecx.read_scalar(value)?;\n-                let _fn = try_validation_catchall!(\n+                let _fn = try_validation!(\n                     value.not_undef().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n-                    value,\n                     self.path,\n-                    \"a function pointer\"\n+                    err_ub!(DanglingIntPointer(..)) |\n+                    err_ub!(InvalidFunctionPointer(..)) |\n+                    err_unsup!(ReadBytesAsPointer) =>\n+                        { \"{}\", value } expected { \"a function pointer\" },\n                 );\n                 // FIXME: Check if the signature matches\n                 Ok(true)\n@@ -895,7 +890,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // validate and each caller will know best what to do with them.\n             Err(err) if matches!(err.kind, InterpError::InvalidProgram(_)) => Err(err),\n             // Avoid other errors as those do not show *where* in the value the issue lies.\n-            Err(err) => bug!(\"Unexpected error during validation: {}\", err),\n+            Err(err) => {\n+                err.print_backtrace();\n+                bug!(\"Unexpected error during validation: {}\", err);\n+            }\n         }\n     }\n "}, {"sha": "29ac32fcf2204765e7fe0f2a5ee9f914887f3b05", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19bd72e62390740afd8d6afd5fd57c04e8469b4f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd72e62390740afd8d6afd5fd57c04e8469b4f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=19bd72e62390740afd8d6afd5fd57c04e8469b4f", "patch": "@@ -106,6 +106,12 @@ const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, 4usize)\n //~^ ERROR it is undefined behavior to use this value\n const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n //~^ ERROR it is undefined behavior to use this value\n+const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n+//~^ ERROR it is undefined behavior to use this value\n+const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n+//~^ ERROR it is undefined behavior to use this value\n+const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n+//~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the trait object\n const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };"}, {"sha": "bfeaac88ab190c89f2cda1c52f7d141d1c5100d1", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/19bd72e62390740afd8d6afd5fd57c04e8469b4f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19bd72e62390740afd8d6afd5fd57c04e8469b4f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=19bd72e62390740afd8d6afd5fd57c04e8469b4f", "patch": "@@ -166,42 +166,66 @@ LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:109:1\n+   |\n+LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:111:1\n    |\n+LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:113:1\n+   |\n+LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:117:1\n+   |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.<dyn-downcast>, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:115:1\n+  --> $DIR/ub-wide-ptr.rs:121:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:117:1\n+  --> $DIR/ub-wide-ptr.rs:123:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:123:5\n+  --> $DIR/ub-wide-ptr.rs:129:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:127:5\n+  --> $DIR/ub-wide-ptr.rs:133:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 28 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}