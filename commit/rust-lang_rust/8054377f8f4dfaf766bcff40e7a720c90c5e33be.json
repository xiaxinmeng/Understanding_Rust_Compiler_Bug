{"sha": "8054377f8f4dfaf766bcff40e7a720c90c5e33be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNTQzNzdmOGY0ZGZhZjc2NmJjZmY0MGU3YTcyMGM5MGM1ZTMzYmU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-19T12:16:19Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-23T08:11:57Z"}, "message": "rustc_const_eval: support all unit enum variants.", "tree": {"sha": "9b91c1c746a4f520ae69502e0dde070ba23fd9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b91c1c746a4f520ae69502e0dde070ba23fd9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8054377f8f4dfaf766bcff40e7a720c90c5e33be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8054377f8f4dfaf766bcff40e7a720c90c5e33be", "html_url": "https://github.com/rust-lang/rust/commit/8054377f8f4dfaf766bcff40e7a720c90c5e33be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8054377f8f4dfaf766bcff40e7a720c90c5e33be/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff828baa06504c91e38dfda53ead61cc44ad171", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff828baa06504c91e38dfda53ead61cc44ad171", "html_url": "https://github.com/rust-lang/rust/commit/0ff828baa06504c91e38dfda53ead61cc44ad171"}], "stats": {"total": 247, "additions": 180, "deletions": 67}, "files": [{"sha": "16af98c2035480ef382ab55f7dbed9a5b521fb9a", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -273,6 +273,12 @@ for ::middle::const_val::ConstVal<'tcx> {\n             ConstVal::Bool(value) => {\n                 value.hash_stable(hcx, hasher);\n             }\n+            ConstVal::Char(value) => {\n+                value.hash_stable(hcx, hasher);\n+            }\n+            ConstVal::Variant(def_id) => {\n+                def_id.hash_stable(hcx, hasher);\n+            }\n             ConstVal::Function(def_id, substs) => {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n@@ -296,9 +302,6 @@ for ::middle::const_val::ConstVal<'tcx> {\n                 value.hash_stable(hcx, hasher);\n                 times.hash_stable(hcx, hasher);\n             }\n-            ConstVal::Char(value) => {\n-                value.hash_stable(hcx, hasher);\n-            }\n         }\n     }\n }"}, {"sha": "ec7b3c4dd8dffd4514205789364611c8a89a4a26", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -38,12 +38,13 @@ pub enum ConstVal<'tcx> {\n     Str(InternedString),\n     ByteStr(Rc<Vec<u8>>),\n     Bool(bool),\n+    Char(char),\n+    Variant(DefId),\n     Function(DefId, &'tcx Substs<'tcx>),\n     Struct(BTreeMap<ast::Name, ConstVal<'tcx>>),\n     Tuple(Vec<ConstVal<'tcx>>),\n     Array(Vec<ConstVal<'tcx>>),\n     Repeat(Box<ConstVal<'tcx>>, u64),\n-    Char(char),\n }\n \n impl<'tcx> ConstVal<'tcx> {\n@@ -54,12 +55,13 @@ impl<'tcx> ConstVal<'tcx> {\n             Str(_) => \"string literal\",\n             ByteStr(_) => \"byte string literal\",\n             Bool(_) => \"boolean\",\n+            Char(..) => \"char\",\n+            Variant(_) => \"enum variant\",\n             Struct(_) => \"struct\",\n             Tuple(_) => \"tuple\",\n             Function(..) => \"function definition\",\n             Array(..) => \"array\",\n             Repeat(..) => \"repeat\",\n-            Char(..) => \"char\",\n         }\n     }\n "}, {"sha": "bfb72b5df7b2e7143d9dc058490c12f2444f375b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -1307,10 +1307,11 @@ fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n             write!(fmt, \"b\\\"{}\\\"\", escaped)\n         }\n         Bool(b) => write!(fmt, \"{:?}\", b),\n+        Char(c) => write!(fmt, \"{:?}\", c),\n+        Variant(def_id) |\n         Function(def_id, _) => write!(fmt, \"{}\", item_path_str(def_id)),\n         Struct(_) | Tuple(_) | Array(_) | Repeat(..) =>\n             bug!(\"ConstVal `{:?}` should not be in MIR\", const_val),\n-        Char(c) => write!(fmt, \"{:?}\", c),\n     }\n }\n "}, {"sha": "cc5eb768d9b3254e923dbe0c52a1586394d84359", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -1693,6 +1693,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         }\n     }\n \n+    #[inline]\n     pub fn discriminants(&'a self, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                          -> impl Iterator<Item=ConstInt> + 'a {\n         let repr_type = self.repr.discr_type();\n@@ -1706,7 +1707,13 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     Ok(ConstVal::Integral(v)) => {\n                         discr = v;\n                     }\n-                    _ => {}\n+                    err => {\n+                        if !expr_did.is_local() {\n+                            span_bug!(tcx.def_span(expr_did),\n+                                \"variant discriminant evaluation succeeded \\\n+                                 in its crate but failed locally: {:?}\", err);\n+                        }\n+                    }\n                 }\n             }\n             prev_discr = Some(discr);\n@@ -1740,7 +1747,15 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                             explicit_value = v;\n                             break;\n                         }\n-                        _ => {\n+                        err => {\n+                            if !expr_did.is_local() {\n+                                span_bug!(tcx.def_span(expr_did),\n+                                    \"variant discriminant evaluation succeeded \\\n+                                     in its crate but failed locally: {:?}\", err);\n+                            }\n+                            if explicit_index == 0 {\n+                                break;\n+                            }\n                             explicit_index -= 1;\n                         }\n                     }"}, {"sha": "e9352f53c92d68c724d5934465cc9ebe202a2abc", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -15,7 +15,7 @@ use rustc::middle::const_val::{ConstVal, ConstEvalErr, EvalResult, ErrKind};\n use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::traits;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n@@ -48,28 +48,6 @@ macro_rules! math {\n     }\n }\n \n-fn lookup_variant_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                  variant_def: DefId)\n-                                  -> Option<(&'tcx Expr, &'a ty::TypeckTables<'tcx>)> {\n-    if let Some(variant_node_id) = tcx.hir.as_local_node_id(variant_def) {\n-        let enum_node_id = tcx.hir.get_parent(variant_node_id);\n-        if let Some(hir_map::NodeItem(it)) = tcx.hir.find(enum_node_id) {\n-            if let hir::ItemEnum(ref edef, _) = it.node {\n-                for variant in &edef.variants {\n-                    if variant.node.data.id() == variant_node_id {\n-                        return variant.node.disr_expr.map(|e| {\n-                            let def_id = tcx.hir.body_owner_def_id(e);\n-                            (&tcx.hir.body(e).value,\n-                             tcx.item_tables(def_id))\n-                        });\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    None\n-}\n-\n /// * `def_id` is the id of the constant.\n /// * `substs` is the monomorphized substitutions for the expression.\n ///\n@@ -289,9 +267,22 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n         }\n       }\n       hir::ExprCast(ref base, _) => {\n-        match cast_const(tcx, cx.eval(base)?, ety) {\n-            Ok(val) => val,\n-            Err(kind) => return Err(ConstEvalErr { span: e.span, kind: kind }),\n+        let base_val = cx.eval(base)?;\n+        let base_ty = cx.tables.expr_ty(base);\n+\n+        // Avoid applying substitutions if they're empty, that'd ICE.\n+        let base_ty = if cx.substs.is_empty() {\n+            base_ty\n+        } else {\n+            base_ty.subst(tcx, cx.substs)\n+        };\n+        if ety == base_ty {\n+            base_val\n+        } else {\n+            match cast_const(tcx, base_val, ety) {\n+                Ok(val) => val,\n+                Err(kind) => signal!(e, kind),\n+            }\n         }\n       }\n       hir::ExprPath(ref qpath) => {\n@@ -317,27 +308,20 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                             debug!(\"bad reference: {:?}, {:?}\", err.description(), err.span);\n                             signal!(e, ErroneousReferencedConstant(box err))\n                         },\n+                    }\n               },\n-              Def::VariantCtor(variant_def, ..) => {\n-                  if let Some((expr, tables)) = lookup_variant_by_id(tcx, variant_def) {\n-                      let cx = ConstContext::with_tables(tcx, tables);\n-                      match cx.eval(expr) {\n-                          Ok(val) => val,\n-                          Err(ConstEvalErr { kind: TypeckError, .. }) => {\n-                              signal!(e, TypeckError);\n-                          }\n-                          Err(err) => {\n-                              debug!(\"bad reference: {:?}, {:?}\", err.description(), err.span);\n-                              signal!(e, ErroneousReferencedConstant(box err))\n-                          },\n-                      }\n-                  } else {\n-                      signal!(e, UnimplementedConstVal(\"enum variants\"));\n-                  }\n+              Def::VariantCtor(variant_def, CtorKind::Const) => {\n+                Variant(variant_def)\n+              }\n+              Def::VariantCtor(_, CtorKind::Fn) => {\n+                  signal!(e, UnimplementedConstVal(\"enum variants\"));\n               }\n-              Def::StructCtor(..) => {\n+              Def::StructCtor(_, CtorKind::Const) => {\n                   ConstVal::Struct(Default::default())\n               }\n+              Def::StructCtor(_, CtorKind::Fn) => {\n+                  signal!(e, UnimplementedConstVal(\"tuple struct constructors\"))\n+              }\n               Def::Local(def_id) => {\n                   debug!(\"Def::Local({:?}): {:?}\", def_id, cx.fn_args);\n                   if let Some(val) = cx.fn_args.as_ref().and_then(|args| args.get(&def_id)) {\n@@ -578,7 +562,7 @@ fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             U8(u) => Ok(Char(u as char)),\n             _ => bug!(),\n         },\n-        _ => bug!(),\n+        _ => Err(CannotCast),\n     }\n }\n \n@@ -622,6 +606,11 @@ fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         Bool(b) => cast_const_int(tcx, U8(b as u8), ty),\n         Float(f) => cast_const_float(tcx, f, ty),\n         Char(c) => cast_const_int(tcx, U32(c as u32), ty),\n+        Variant(v) => {\n+            let adt = tcx.lookup_adt_def(tcx.parent_def_id(v).unwrap());\n+            let idx = adt.variant_index_with_id(v);\n+            cast_const_int(tcx, adt.discriminant_for_variant(tcx, idx), ty)\n+        }\n         Function(..) => Err(UnimplementedConstVal(\"casting fn pointers\")),\n         ByteStr(b) => match ty.sty {\n             ty::TyRawPtr(_) => {"}, {"sha": "0dfafeb6fb8362b95c7f8af1fc0953307e12e18e", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -116,6 +116,7 @@ fn print_const_val(value: &ConstVal, f: &mut fmt::Formatter) -> fmt::Result {\n         ConstVal::ByteStr(ref b) => write!(f, \"{:?}\", &b[..]),\n         ConstVal::Bool(b) => write!(f, \"{:?}\", b),\n         ConstVal::Char(c) => write!(f, \"{:?}\", c),\n+        ConstVal::Variant(_) |\n         ConstVal::Struct(_) |\n         ConstVal::Tuple(_) |\n         ConstVal::Function(..) |\n@@ -620,7 +621,12 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n         let const_cx = eval::ConstContext::with_tables(self.tcx.global_tcx(), self.tables);\n         match const_cx.eval(expr) {\n             Ok(value) => {\n-                PatternKind::Constant { value: value }\n+                if let ConstVal::Variant(def_id) = value {\n+                    let ty = self.tables.expr_ty(expr);\n+                    self.lower_variant_or_leaf(Def::Variant(def_id), ty, vec![])\n+                } else {\n+                    PatternKind::Constant { value: value }\n+                }\n             }\n             Err(e) => {\n                 self.errors.push(PatternError::ConstEval(e));"}, {"sha": "040194e63d07e0ec6f549244ec495d3f3951abae", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -100,15 +100,13 @@ impl<'tcx> Const<'tcx> {\n             ConstVal::Integral(ref i) => return Const::from_constint(ccx, i),\n             ConstVal::Str(ref v) => C_str_slice(ccx, v.clone()),\n             ConstVal::ByteStr(ref v) => consts::addr_of(ccx, C_bytes(ccx, v), 1, \"byte_str\"),\n+            ConstVal::Char(c) => C_integral(Type::char(ccx), c as u64, false),\n+            ConstVal::Function(..) => C_null(type_of::type_of(ccx, ty)),\n+            ConstVal::Variant(_) |\n             ConstVal::Struct(_) | ConstVal::Tuple(_) |\n             ConstVal::Array(..) | ConstVal::Repeat(..) => {\n                 bug!(\"MIR must not use `{:?}` (aggregates are expanded to MIR rvalues)\", cv)\n             }\n-            ConstVal::Function(..) => {\n-                let llty = type_of::type_of(ccx, ty);\n-                return Const::new(C_null(llty), ty);\n-            }\n-            ConstVal::Char(c) => C_integral(Type::char(ccx), c as u64, false),\n         };\n \n         assert!(!ty.has_erasable_regions());"}, {"sha": "71cac3edbc188beb9542952db26707d3d81c05d0", "filename": "src/test/compile-fail/const-pattern-not-const-evaluable.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -10,21 +10,22 @@\n \n #![feature(const_fn)]\n \n+#[derive(PartialEq, Eq)]\n enum Cake {\n     BlackForest,\n     Marmor,\n }\n use Cake::*;\n \n-const BOO: (Cake, Cake) = (Marmor, BlackForest);\n+struct Pair<A, B>(A, B);\n+\n+const BOO: Pair<Cake, Cake> = Pair(Marmor, BlackForest);\n //~^ ERROR: constant evaluation error [E0080]\n-//~| unimplemented constant expression: enum variants\n+//~| unimplemented constant expression: tuple struct constructors\n const FOO: Cake = BOO.1;\n \n const fn foo() -> Cake {\n     Marmor\n-        //~^ ERROR: constant evaluation error [E0080]\n-        //~| unimplemented constant expression: enum variants\n }\n \n const WORKS: Cake = Marmor;\n@@ -34,7 +35,7 @@ const GOO: Cake = foo();\n fn main() {\n     match BlackForest {\n         FOO => println!(\"hi\"), //~ NOTE: for pattern here\n-        GOO => println!(\"meh\"), //~ NOTE: for pattern here\n+        GOO => println!(\"meh\"),\n         WORKS => println!(\"m\u00f6p\"),\n         _ => println!(\"bye\"),\n     }"}, {"sha": "1fb3b7c4ee120011142d88e045e36e8611977e6f", "filename": "src/test/compile-fail/issue-41394.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Fcompile-fail%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Fcompile-fail%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41394.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    A = \"\" + 1\n+    //~^ ERROR binary operation `+` cannot be applied to type `&'static str`\n+}\n+\n+enum Bar {\n+    A = Foo::A as isize\n+}\n+\n+fn main() {}"}, {"sha": "f06b81279ac4135658dc7f343dbb087279aec110", "filename": "src/test/run-pass/auxiliary/issue-41394.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-41394.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+#[repr(u32)]\n+pub enum Foo {\n+    Foo = Private::Variant as u32\n+}\n+\n+#[repr(u8)]\n+enum Private {\n+    Variant = 42\n+}\n+\n+#[inline(always)]\n+pub fn foo() -> Foo {\n+    Foo::Foo\n+}"}, {"sha": "104ab6e19db672db5e51b2bf8001b9a4b821cdf8", "filename": "src/test/run-pass/const-pattern-variant.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fconst-pattern-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fconst-pattern-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-pattern-variant.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+#[derive(PartialEq, Eq)]\n+enum Cake {\n+    BlackForest,\n+    Marmor,\n+}\n+use Cake::*;\n+\n+const BOO: (Cake, Cake) = (Marmor, BlackForest);\n+const FOO: Cake = BOO.1;\n+\n+const fn foo() -> Cake {\n+    Marmor\n+}\n+\n+const WORKS: Cake = Marmor;\n+\n+const GOO: Cake = foo();\n+\n+fn main() {\n+    match BlackForest {\n+        FOO => println!(\"hi\"),\n+        GOO => println!(\"meh\"),\n+        WORKS => println!(\"m\u00f6p\"),\n+        _ => println!(\"bye\"),\n+    }\n+}"}, {"sha": "3f5546ce83ddf49a79c3daf69dc7b9f7f31b352a", "filename": "src/test/run-pass/issue-23898.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fissue-23898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fissue-23898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23898.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Note: This test is checking that we forbid a coding pattern that\n-// Issue #5873 explicitly wants to allow.\n+// Note: This test was used to demonstrate #5873 (now #23898).\n \n enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n     [State::ST_NULL; (State::ST_WHITESPACE as usize)];\n-    //~^ ERROR constant evaluation error\n-    //~| unimplemented constant expression: enum variants\n }", "previous_filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs"}, {"sha": "798905599a852f73b364863c22aec70e6d3701bd", "filename": "src/test/run-pass/issue-41394.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8054377f8f4dfaf766bcff40e7a720c90c5e33be/src%2Ftest%2Frun-pass%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41394.rs?ref=8054377f8f4dfaf766bcff40e7a720c90c5e33be", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-41394.rs\n+\n+extern crate issue_41394 as lib;\n+\n+fn main() {\n+    assert_eq!(lib::foo() as u32, 42);\n+}"}]}