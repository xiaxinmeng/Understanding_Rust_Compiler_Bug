{"sha": "04126398c227d3ba9994bbb303e6c2a26d9198b2", "node_id": "C_kwDOAAsO6NoAKDA0MTI2Mzk4YzIyN2QzYmE5OTk0YmJiMzAzZTZjMmEyNmQ5MTk4YjI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-05T08:44:20Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-06T09:08:07Z"}, "message": "Ignore many tests on wasm32", "tree": {"sha": "89a41db6f214f8e09a9902994ab830da61bda230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a41db6f214f8e09a9902994ab830da61bda230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04126398c227d3ba9994bbb303e6c2a26d9198b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04126398c227d3ba9994bbb303e6c2a26d9198b2", "html_url": "https://github.com/rust-lang/rust/commit/04126398c227d3ba9994bbb303e6c2a26d9198b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04126398c227d3ba9994bbb303e6c2a26d9198b2/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e06de16a8242ce55b84ad273de25c8d8696a9e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e06de16a8242ce55b84ad273de25c8d8696a9e4d", "html_url": "https://github.com/rust-lang/rust/commit/e06de16a8242ce55b84ad273de25c8d8696a9e4d"}], "stats": {"total": 482, "additions": 279, "deletions": 203}, "files": [{"sha": "4be382fac8c32cf671c6fb99cdc4cd5d99773ab1", "filename": "tests/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _6 = _3;                         // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n         _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array_index_is_temporary.rs:+4:21: +4:27\n                                          // mir::Constant\n-                                         // + span: $DIR/array_index_is_temporary.rs:16:21: 16:24\n+                                         // + span: $DIR/array_index_is_temporary.rs:17:21: 17:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n     }\n "}, {"sha": "702b9c70e592a9bb760834af8d1bee49e8305062", "filename": "tests/mir-opt/array_index_is_temporary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Farray_index_is_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Farray_index_is_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Retagging (from Stacked Borrows) relies on the array index being a fresh\n // temporary, so that side-effects cannot change it.\n // Test that this is indeed the case."}, {"sha": "08c5f1a1fc553fdceef9b7935903836a2e873fc9", "filename": "tests/mir-opt/combine_array_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: InstCombine\n // EMIT_MIR combine_array_len.norm2.InstCombine.diff\n "}, {"sha": "0411972661eb745648a5bf42f499beb97909f4d0", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -29,7 +29,7 @@\n +         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n           _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n                                            // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                           // + span: $DIR/aggregate.rs:9:5: 9:8\n                                            // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "05d4bf8b52e79ddf15301f48345f31defb8c854c", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n         _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n                                          // mir::Constant\n-                                         // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                         // + span: $DIR/aggregate.rs:9:5: 9:8\n                                          // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n     }\n "}, {"sha": "ed5a4ab594d5c6e40f66c8daaa79f65924b66bb2", "filename": "tests/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -O\n "}, {"sha": "f36cf221348665decc7b98e3b993295ea1d3a9a3", "filename": "tests/mir-opt/const_prop/array_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n "}, {"sha": "38f1a993dc03af7c0746cb7b0cc692df5459f9c6", "filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // EMIT_MIR bad_op_div_by_zero.main.ConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "a1078472cbf81a2bbe64ca98ea912d88a13142f1", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR bad_op_mod_by_zero.main.ConstProp.diff\n #[allow(unconditional_panic)]\n fn main() {"}, {"sha": "e711babf03573c994cc4bdc2cc23f78bdd48b5d4", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35"}, {"sha": "e711babf03573c994cc4bdc2cc23f78bdd48b5d4", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35"}, {"sha": "3d252f2d221b7d69ceaa3a0bda8a71097e14caec", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR bad_op_unsafe_oob_for_slices.main.ConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "007defd10379cb9558004abf224533444a8f2dc1", "filename": "tests/mir-opt/const_prop/checked_add.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "d75fae30b5386395f8a725b6256b3cc19cb094d6", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -18,7 +18,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n           _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n                                            // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:8:13: 8:16\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:13: 9:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n           _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n@@ -29,7 +29,7 @@\n           _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n           _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n                                            // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:5: 9:9\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:10:5: 10:9\n                                            // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "44d4878424dd81c66bd929048eaf79c021e0398f", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n #[inline(never)]\n fn read(_: usize) { }"}, {"sha": "b2ca045e89f984d1c85f0683e56c6775cdd4168e", "filename": "tests/mir-opt/const_prop/control_flow_simplification.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Zmir-opt-level=1\n "}, {"sha": "46fd8082d308ca0f8ed6c7f14d9c069a58009582", "filename": "tests/mir-opt/const_prop/indirect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "0ac7fa43d5b45c8c8156790d54d5d8399fd26a5f", "filename": "tests/mir-opt/const_prop/inherit_overflow.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -8,7 +8,7 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:8:13: 8:47\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n           debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL"}, {"sha": "4e905d00d4d92339a53affb0728c2a153d414a2a", "filename": "tests/mir-opt/const_prop/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Zmir-enable-passes=+Inline\n "}, {"sha": "2652694097c4f2847fbf5171bebaf5f61403b09f", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -11,7 +11,7 @@\n           _2 = (const (), const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n           _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_66971.rs:17:5: 17:11\n+                                           // + span: $DIR/issue_66971.rs:18:5: 18:11\n                                            // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "af95c9ca2838961583b20544400d73fe7fdcdde5", "filename": "tests/mir-opt/const_prop/issue_66971.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Z mir-opt-level=3\n "}, {"sha": "54c9200d6721e194c935e22b5e1a345af0c809dd", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -16,7 +16,7 @@\n           StorageDead(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:18: +1:19\n           _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_67019.rs:12:5: 12:9\n+                                           // + span: $DIR/issue_67019.rs:13:5: 13:9\n                                            // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "08c7d4805d61522946aaf58ca4a7cb806cd1f20e", "filename": "tests/mir-opt/const_prop/issue_67019.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Z mir-opt-level=3\n "}, {"sha": "073f984956899e0f28e2d040ff4f12b43eec1a0c", "filename": "tests/mir-opt/const_prop/large_array_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n // EMIT_MIR large_array_index.main.ConstProp.diff"}, {"sha": "75f6ebc58c751161f123eac09d82740cc30891fa", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:29: 7:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "70a287cf381eac90ace1136976cd920ea62ff5e0", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test\n // compile-flags: -O\n "}, {"sha": "9582504b25e812eb5527ba9bea295df86e34386f", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -26,7 +26,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:7:13: 7:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "fabd04e9bd27cbb81e26b6989b5e14c131317663", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test\n // compile-flags: -O\n "}, {"sha": "5ffa153476d9cb3ce12af22c5c9912ebacdc4cbf", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "2f3b7d2c502163bb8f2ea9e83ffe0e84ccd36b87", "filename": "tests/mir-opt/const_prop/repeat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -O\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH"}, {"sha": "ae119df8518ec881b96a265202f4c32283f0eb37", "filename": "tests/mir-opt/const_prop/return_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -C overflow-checks=on\n \n // EMIT_MIR return_place.add.ConstProp.diff"}, {"sha": "a091b4ace20cc1c471e44d8328aed980136067a4", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -15,7 +15,7 @@\n -         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n +         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n+                                           // + span: $DIR/scalar_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "e13e352f8a1d69a88dfbddc1063ef5a87319f181", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR scalar_literal_propagation.main.ConstProp.diff\n fn main() {\n     let x = 1;"}, {"sha": "8bd2b48d6d6af884ea4a167ffdc9834a62ee1120", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -20,7 +20,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:7:6: 7:19\n+                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19"}, {"sha": "8bd2b48d6d6af884ea4a167ffdc9834a62ee1120", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -20,7 +20,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:7:6: 7:19\n+                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19"}, {"sha": "4499c54f264b99da85e44676d772a580b14a23fa", "filename": "tests/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n // compile-flags: -Zmir-enable-passes=+InstCombine\n // EMIT_MIR_FOR_EACH_BIT_WIDTH"}, {"sha": "85704c48a2c3745782546db18a9540aca8b3b39c", "filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -15,14 +15,14 @@\n       bb1: {\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + span: $DIR/switch_int.rs:10:14: 10:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "0864db22523ff70dd6b73ffac2e32dc02b72e24e", "filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -15,14 +15,14 @@\n       bb1: {\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + span: $DIR/switch_int.rs:10:14: 10:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2a2322e43a9701bf63db03f8ac3b10af24c8f0a1", "filename": "tests/mir-opt/const_prop/switch_int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #[inline(never)]\n fn foo(_: i32) { }\n "}, {"sha": "12313b6c58d7cdc61c35f11f0dd04ebc27b1208b", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -15,7 +15,7 @@\n +         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n           _2 = consume(_1) -> bb1;         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n+                                           // + span: $DIR/tuple_literal_propagation.rs:6:5: 6:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "edd748d00ab3e26182faa1f1cbe8c406ed176d06", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR tuple_literal_propagation.main.ConstProp.diff\n fn main() {\n     let x = (1, 2);"}, {"sha": "2a0bff57db9cfdd05bbbad7cdf464efd8f57ccfd", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -15,15 +15,15 @@\n           _4 = &_3;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = cmp_ref(_2, _4) -> bb1;     // scope 0 at $DIR/borrowed_local.rs:+8:13: +8:45\n                                            // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:23:29: 23:36\n+                                           // + span: $DIR/borrowed_local.rs:24:29: 24:36\n                                            // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> bool {cmp_ref}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n -         _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n +         _0 = opaque::<u8>(_1) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n                                            // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:27:28: 27:34\n+                                           // + span: $DIR/borrowed_local.rs:28:28: 28:34\n                                            // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "9186da5af4845282c6a5ed416bba21b3acaa5311", "filename": "tests/mir-opt/copy-prop/borrowed_local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "b78c19d78d045b295f9fd519a0f2fca536b14aa6", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -18,7 +18,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n           _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:13:13: 13:16\n+                                           // + span: $DIR/branch.rs:14:13: 14:16\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -27,7 +27,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n           _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:15:16: 15:20\n+                                           // + span: $DIR/branch.rs:16:16: 16:20\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n@@ -44,7 +44,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n           _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:18:9: 18:12\n+                                           // + span: $DIR/branch.rs:19:9: 19:12\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "0a2e16946345a7222bfad6c8aeab000e6a88d055", "filename": "tests/mir-opt/copy-prop/branch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that we bail out when there are multiple assignments to the same local.\n // unit-test: CopyProp\n fn val() -> i32 {"}, {"sha": "24bca32207fa91031526f943c094aa5fe62aa3ec", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -13,7 +13,7 @@\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n           _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n+                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "87708f340054383a3e484c3b94ca3eeeaefaa162", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -13,7 +13,7 @@\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n           _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n+                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "1b65dcb01ed369fa04f425291726efc87d0c7918", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that CopyProp does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n // unit-test: CopyProp"}, {"sha": "160f47bdd8f7eb62e71f1f696a8b94c1aeea7c70", "filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -11,7 +11,7 @@\n -         _0 = opaque::<NotCopy>(move _1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n +         _0 = opaque::<NotCopy>(_1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n                                            // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:15:24: 15:30\n+                                           // + span: $DIR/custom_move_arg.rs:16:24: 16:30\n                                            // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n       }\n   \n@@ -20,7 +20,7 @@\n -         _0 = opaque::<NotCopy>(_3) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n +         _0 = opaque::<NotCopy>(_1) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n                                            // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:19:24: 19:30\n+                                           // + span: $DIR/custom_move_arg.rs:20:24: 20:30\n                                            // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "29c368df82d8a0181f0b414f9b3ca7423bb71ab6", "filename": "tests/mir-opt/copy-prop/custom_move_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "23d92ed1ac5b9e5b9eb026d2bd64b1bd510e242c", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -24,7 +24,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n           _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:9:17: 9:20\n+                                           // + span: $DIR/cycle.rs:10:17: 10:20\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -43,7 +43,7 @@\n           _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n           _5 = std::mem::drop::<i32>(move _6) -> bb2; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:14:5: 14:9\n+                                           // + span: $DIR/cycle.rs:15:5: 15:9\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "da70f6bec2ebf9c5573175f32ab67df7ae6e120f", "filename": "tests/mir-opt/copy-prop/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that cyclic assignments don't hang CopyProp, and result in reasonable code.\n // unit-test: CopyProp\n fn val() -> i32 {"}, {"sha": "c56418d8893f2125ca4004d14a2f35fc2e2b8c33", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -18,7 +18,7 @@ fn f(_1: usize) -> usize {\n         _4 = _1;                         // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n         _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_79191.rs:12:5: 12:7\n+                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "84453c55e3ef48a738d518a80c3b45dcd612abe4", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n fn id<T>(x: T) -> T {"}, {"sha": "f355421732e45d72852d36657eb99b7201d788b1", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -18,7 +18,7 @@ fn f(_1: usize) -> usize {\n         _4 = _1;                         // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n         _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_better.rs:16:5: 16:7\n+                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "87b916fd3ff84a984644b24eaae3571aed5bd918", "filename": "tests/mir-opt/copy-prop/dead_stores_better.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n // that that pass enables this one to do more optimizations.\n "}, {"sha": "e09ccb831199898efd7943175feca3f4c2ccfead", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -51,7 +51,7 @@\n           StorageDead(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:18\n           _5 = core::slice::<impl [i32]>::len(move _6) -> bb1; // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:10:19: 10:22\n+                                           // + span: $DIR/issue_107511.rs:11:19: 11:22\n                                            // + literal: Const { ty: for<'a> fn(&'a [i32]) -> usize {core::slice::<impl [i32]>::len}, val: Value(<ZST>) }\n       }\n   \n@@ -61,7 +61,7 @@\n           StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n           _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb2; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n                                            // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n@@ -81,7 +81,7 @@\n           _12 = &mut (*_13);               // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n           _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> bb4; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n                                            // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2b00ff15581f1a541c6a1dcb3167834d83e0e32e", "filename": "tests/mir-opt/copy-prop/issue_107511.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n // EMIT_MIR issue_107511.main.CopyProp.diff"}, {"sha": "650bd66a7d73eeea88340abfe8bc942a28dc4f11", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -24,7 +24,7 @@\n -         _3 = g::<T>(move _4, move _5) -> bb1; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n +         _3 = g::<T>(_1, _1) -> bb1;      // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n                                            // mir::Constant\n-                                           // + span: $DIR/move_arg.rs:7:5: 7:6\n+                                           // + span: $DIR/move_arg.rs:8:5: 8:6\n                                            // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "f88d9a9e74bbfa28bfe93151ee74470520ff6aa2", "filename": "tests/mir-opt/copy-prop/move_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Test that we do not move multiple times from the same local.\n // unit-test: CopyProp\n "}, {"sha": "beb85d68a660c33c0abc059e2612e0cdd905ee5d", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -13,14 +13,14 @@\n +         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n +         _0 = opaque::<Foo>(_1) -> bb1;   // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n                                            // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:19:28: 19:34\n+                                           // + span: $DIR/move_projection.rs:20:28: 20:34\n                                            // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           _0 = opaque::<u8>(move _3) -> bb2; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n                                            // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:22:28: 22:34\n+                                           // + span: $DIR/move_projection.rs:23:28: 23:34\n                                            // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c158c69e0cf8bd2b40b347ee2d2fc1289b86fca1", "filename": "tests/mir-opt/copy-prop/move_projection.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "b4a2482456636ae4d4dc16844c7d70d4fac4b81d", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -39,7 +39,7 @@\n -         _6 = opaque::<*mut u8>(move _7) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n +         _6 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:38:5: 38:11\n+                                           // + span: $DIR/reborrow.rs:39:5: 39:11\n                                            // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "a6a6c05b24ae9c4163cc0261979eb4c30b92e003", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -35,7 +35,7 @@\n -         _5 = opaque::<*mut u8>(move _6) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n +         _5 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:30:5: 30:11\n+                                           // + span: $DIR/reborrow.rs:31:5: 31:11\n                                            // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "f3d26cc6e2bfee0ad2b550e7062d16d48b9be018", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -33,7 +33,7 @@\n -         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n +         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:14:5: 14:11\n+                                           // + span: $DIR/reborrow.rs:15:5: 15:11\n                                            // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "63e42b4dc7711460accc18d22f621b52d3f8cf4a", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -33,7 +33,7 @@\n -         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n +         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n                                            // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:22:5: 22:11\n+                                           // + span: $DIR/reborrow.rs:23:5: 23:11\n                                            // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "91b77966ba84587f8ff27da614196dd46f5fcd47", "filename": "tests/mir-opt/copy-prop/reborrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that CopyProp considers reborrows as not mutating the pointer.\n // unit-test: CopyProp\n "}, {"sha": "0f9f5a97faca2d2addae93b0cbed58ec66daadb3", "filename": "tests/mir-opt/dataflow-const-prop/checked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n // compile-flags: -Coverflow-checks=on\n "}, {"sha": "1edcc28e68c150d84cdaad7eaf105d497971537b", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -8,7 +8,7 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:8:13: 8:47\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n           debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL"}, {"sha": "90349d5270cc8acba43d86f9381286cf5023801a", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n // compile-flags: -Zmir-enable-passes=+Inline\n "}, {"sha": "70ef17afd659ce57a1d30f233a15f16160d631ea", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -26,7 +26,7 @@\n           _3 = &(*_4);                     // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n           _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:12:5: 12:11\n+                                           // + span: $DIR/ref_without_sb.rs:13:5: 13:11\n                                            // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n       }\n   \n@@ -38,7 +38,7 @@\n           StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n           _5 = some_function() -> bb2;     // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:14:5: 14:18\n+                                           // + span: $DIR/ref_without_sb.rs:15:5: 15:18\n                                            // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "f53de3cf2d4cf6ddf96c1d09705a444fe12b0d41", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n \n #[inline(never)]"}, {"sha": "6ca569f3d8e5b79230caca4cba562d8c5394da54", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -32,7 +32,7 @@\n           _5 = _3;                         // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n           _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> bb1; // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n                                            // mir::Constant\n-                                           // + span: $DIR/sibling_ptr.rs:15:12: 15:15\n+                                           // + span: $DIR/sibling_ptr.rs:16:12: 16:15\n                                            // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "81fc3c2f49c7ce323c2cac61c41e69073ba652fb", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This attempts to modify `x.1` via a pointer derived from `addr_of_mut!(x.0)`.\n // According to Miri, that is UB. However, T-opsem has not finalized that\n // decision and as such we cannot rely on it in optimizations. Consequently,"}, {"sha": "9854beaeb217cfb35da56d25182f6d2b90383c64", "filename": "tests/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -25,7 +25,7 @@\n -         _2 = foo(move _3) -> bb1;        // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n +         _2 = foo(const 2_i32) -> bb1;    // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n                                            // mir::Constant\n-                                           // + span: $DIR/terminator.rs:9:5: 9:8\n+                                           // + span: $DIR/terminator.rs:10:5: 10:8\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "4f001df35f14d475187af0dfa2032d22dc458fb1", "filename": "tests/mir-opt/dataflow-const-prop/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DataflowConstProp\n \n fn foo(n: i32) {}"}, {"sha": "2776ff51d85a12a25fc64f9470e83d50f77962b4", "filename": "tests/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -32,7 +32,7 @@\n +         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n +         _4 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:12:11: 12:15\n+                                           // + span: $DIR/cycle.rs:13:11: 13:15\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "570bfe84d1064ccdfad1cee22b5f52932da7ccc6", "filename": "tests/mir-opt/dead-store-elimination/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DeadStoreElimination\n \n #[inline(never)]"}, {"sha": "c4ebf1ca834f9574096abb15fbbaf6ff14cdff4b", "filename": "tests/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -19,7 +19,7 @@\n           _3 = &(*_1);                     // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n           _2 = core::str::<impl str>::as_bytes(move _3) -> bb1; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n                                            // mir::Constant\n-                                           // + span: $DIR/deduplicate_blocks.rs:5:13: 5:21\n+                                           // + span: $DIR/deduplicate_blocks.rs:6:13: 6:21\n                                            // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "46012e19aa4bf447595295c6a9f9bb4e8aaeba92", "filename": "tests/mir-opt/deduplicate_blocks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DeduplicateBlocks\n \n // EMIT_MIR deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff"}, {"sha": "b7416d389ef7b7c15c2038eaf057f5592977aafd", "filename": "tests/mir-opt/dest-prop/branch.foo.DestinationPropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -22,7 +22,7 @@\n +         nop;                             // scope 0 at $DIR/branch.rs:+1:9: +1:10\n +         _0 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:13:13: 13:16\n+                                           // + span: $DIR/branch.rs:14:13: 14:16\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -32,7 +32,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n           _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:15:16: 15:20\n+                                           // + span: $DIR/branch.rs:16:16: 16:20\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n@@ -50,7 +50,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n           _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n                                            // mir::Constant\n-                                           // + span: $DIR/branch.rs:18:9: 18:12\n+                                           // + span: $DIR/branch.rs:19:9: 19:12\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "7e4276e66922f712a8aeffa27b388fc3d3f242c3", "filename": "tests/mir-opt/dest-prop/branch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that assignment in both branches of an `if` are eliminated.\n // unit-test: DestinationPropagation\n fn val() -> i32 {"}, {"sha": "a61e741f73dcdebc29644ffdbfc6c6f5deeb0501", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -16,7 +16,7 @@\n +         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n +         _2 = dummy(move _1) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n+                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c7fbecac5c47f2f30b67b3d01e99b5dee30006f5", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -15,7 +15,7 @@\n -         _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n +         _1 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n                                            // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n+                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "57cb328c231b3f239d3f414d4bec0cc4079af897", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that DestinationPropagation does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n // unit-test: DestinationPropagation"}, {"sha": "b06f069a2e4ff492b4576ef8593053f4f3b2d9b3", "filename": "tests/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -28,7 +28,7 @@\n +         nop;                             // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n +         _6 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:9:17: 9:20\n+                                           // + span: $DIR/cycle.rs:10:17: 10:20\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n@@ -56,7 +56,7 @@\n +         nop;                             // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n           _5 = std::mem::drop::<i32>(move _6) -> bb2; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n                                            // mir::Constant\n-                                           // + span: $DIR/cycle.rs:14:5: 14:9\n+                                           // + span: $DIR/cycle.rs:15:5: 15:9\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "3aea19d80dc7a82f00ebac826eb4a979a29b14d4", "filename": "tests/mir-opt/dest-prop/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that cyclic assignments don't hang DestinationPropagation, and result in reasonable code.\n // unit-test: DestinationPropagation\n fn val() -> i32 {"}, {"sha": "b9d4b59d2f7a1cfe27a25523850a93f307910f70", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.f.DestinationPropagation.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -22,7 +22,7 @@ fn f(_1: usize) -> usize {\n         nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n         _0 = id::<usize>(move _1) -> bb1; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_79191.rs:12:5: 12:7\n+                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "9d4814838d4eaa99ff1ed1108911f43a4d84721c", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: DestinationPropagation\n \n fn id<T>(x: T) -> T {"}, {"sha": "9eb0e09bf1b212e92c18b356395dacd4ffb36e3f", "filename": "tests/mir-opt/dest-prop/dead_stores_better.f.DestinationPropagation.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -21,7 +21,7 @@ fn f(_1: usize) -> usize {\n         nop;                             // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n         _0 = id::<usize>(move _1) -> bb1; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n                                          // mir::Constant\n-                                         // + span: $DIR/dead_stores_better.rs:16:5: 16:7\n+                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n                                          // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "72d406bfd40ada90a804e735ccce80acb9ef54e3", "filename": "tests/mir-opt/dest-prop/dead_stores_better.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n // that that pass enables this one to do more optimizations.\n "}, {"sha": "3a4aec34e8cc43fd54158155834c2d7bab95150c", "filename": "tests/mir-opt/dest-prop/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Copy of `nrvo-simple.rs`, to ensure that full dest-prop handles it too.\n // unit-test: DestinationPropagation\n // EMIT_MIR simple.nrvo.DestinationPropagation.diff"}, {"sha": "457fc830874dad2bf2e1bf2caf0066745f41d2d7", "filename": "tests/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -10,7 +10,7 @@\n           debug un => _1;                  // in scope 1 at $DIR/union.rs:+5:9: +5:11\n           scope 2 {\n           }\n-          scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:15:5: 15:27\n+          scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:16:5: 16:27\n               debug _x => _3;              // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           }\n       }\n@@ -20,7 +20,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/union.rs:+5:23: +5:28\n           _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:+5:23: +5:28\n                                            // mir::Constant\n-                                           // + span: $DIR/union.rs:13:23: 13:26\n+                                           // + span: $DIR/union.rs:14:23: 14:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "062d02d067311f1ea7b0b83d76ebec784c1963ca", "filename": "tests/mir-opt/dest-prop/union.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n //! Tests that we can propagate into places that are projections into unions\n // compile-flags: -Zunsound-mir-opts\n fn val() -> u32 {"}, {"sha": "ae63d724d0a51bfc6f205e4254e6209aa10b58c6", "filename": "tests/mir-opt/dest-prop/unreachable.f.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -36,7 +36,7 @@\n -         _6 = _2;                         // scope 1 at $DIR/unreachable.rs:+3:14: +3:15\n -         _4 = g::<T>(move _5, move _6) -> bb2; // scope 1 at $DIR/unreachable.rs:+3:9: +3:16\n -                                          // mir::Constant\n--                                          // + span: $DIR/unreachable.rs:11:9: 11:10\n+-                                          // + span: $DIR/unreachable.rs:12:9: 12:10\n -                                          // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n -     }\n - \n@@ -60,7 +60,7 @@\n +         _9 = _1;                         // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n +         _7 = g::<T>(move _1, move _9) -> bb2; // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable.rs:13:9: 13:10\n+                                           // + span: $DIR/unreachable.rs:14:9: 14:10\n                                            // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c73d11ae3bafc36bffe8aff7d7924c92b947001a", "filename": "tests/mir-opt/dest-prop/unreachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that unreachable code is removed after the destination propagation.\n // Regression test for issue #105428.\n //"}, {"sha": "fe34a865b93f0bb41f82e19d204d37d290db1396", "filename": "tests/mir-opt/div_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdiv_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fdiv_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Copt-level=0 -Coverflow-checks=yes\n \n // Tests that division with a const does not emit a panicking branch for overflow"}, {"sha": "8a4a16825195c83a4ac97a72005aa5a5b29ab34b", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -40,7 +40,7 @@\n           _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n           _4 = Formatter::<'_>::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:15:26: 15:35\n+                                           // + span: $DIR/funky_arms.rs:16:26: 16:35\n                                            // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> bool {Formatter::<'_>::sign_plus}, val: Value(<ZST>) }\n       }\n   \n@@ -74,7 +74,7 @@\n           _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n           _7 = Formatter::<'_>::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:24:34: 24:43\n+                                           // + span: $DIR/funky_arms.rs:25:34: 25:43\n                                            // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> Option<usize> {Formatter::<'_>::precision}, val: Value(<ZST>) }\n       }\n   \n@@ -95,7 +95,7 @@\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79\n           _0 = float_to_exponential_common_exact::<T>(_1, _2, move _13, move _14, _3) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:26:9: 26:42\n+                                           // + span: $DIR/funky_arms.rs:27:9: 27:42\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n       }\n   \n@@ -110,7 +110,7 @@\n           _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n           _0 = float_to_exponential_common_shortest::<T>(_1, _2, move _20, _3) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n                                            // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:28:9: 28:45\n+                                           // + span: $DIR/funky_arms.rs:29:9: 29:45\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "c4f75b5df6d8a07f6f1e3de6dc1ee7613e0fd97d", "filename": "tests/mir-opt/funky_arms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Ffunky_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Ffunky_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: --crate-type lib -Cdebug-assertions=no\n \n #![feature(flt2dec)]"}, {"sha": "75d9bd54d5ba927db5c3a219c7f9a718bd06f709", "filename": "tests/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -9,11 +9,11 @@\n       let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn_trait.rs:+2:23: +2:24\n       scope 1 {\n           debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:+1:9: +1:10\n-+         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn_trait.rs:34:5: 34:25\n-+             debug c => _4;               // in scope 2 at $DIR/dyn_trait.rs:26:36: 26:37\n-+             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn_trait.rs:27:5: 27:16\n-+                 debug c => _5;           // in scope 3 at $DIR/dyn_trait.rs:20:27: 20:28\n++         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn_trait.rs:35:5: 35:25\n++             debug c => _4;               // in scope 2 at $DIR/dyn_trait.rs:27:36: 27:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn_trait.rs:28:5: 28:16\n++                 debug c => _5;           // in scope 3 at $DIR/dyn_trait.rs:21:27: 21:28\n +             }\n +         }\n       }\n@@ -24,7 +24,7 @@\n           _3 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n           _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:13: +1:24\n                                            // mir::Constant\n-                                           // + span: $DIR/dyn_trait.rs:33:13: 33:21\n+                                           // + span: $DIR/dyn_trait.rs:34:13: 34:21\n                                            // + user_ty: UserType(0)\n                                            // + literal: Const { ty: for<'a> fn(&'a T) -> &'a <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n       }\n@@ -34,18 +34,18 @@\n           StorageLive(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n           _4 = &(*_2);                     // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n -         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn_trait.rs:+2:5: +2:25\n-+         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _5 = _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(_5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++         _5 = _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(_5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:22:5: 22:22\n                                            // mir::Constant\n--                                          // + span: $DIR/dyn_trait.rs:34:5: 34:22\n+-                                          // + span: $DIR/dyn_trait.rs:35:5: 35:22\n -                                          // + literal: Const { ty: for<'a> fn(&'a <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/dyn_trait.rs:21:7: 21:20\n++                                          // + span: $DIR/dyn_trait.rs:22:7: 22:20\n +                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-+         StorageDead(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:15: 27:16\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn_trait.rs:28:15: 28:16\n           StorageDead(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:24: +2:25\n           StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/dyn_trait.rs:+3:2: +3:2"}, {"sha": "925c95988b795e0b67540407a61fa24ae1da47b3", "filename": "tests/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -11,7 +11,7 @@\n           _2 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n           _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/dyn_trait.rs:21:7: 21:20\n+                                           // + span: $DIR/dyn_trait.rs:22:7: 22:20\n                                            // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2af81f825705390ffefea20ca33218b9b337f51f", "filename": "tests/mir-opt/inline/dyn_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #![crate_type = \"lib\"]\n \n use std::fmt::Debug;"}, {"sha": "f4e5272abfc8a16a16707ef2b631dae33efe958e", "filename": "tests/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -6,8 +6,8 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:43: +0:43\n       let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n       let mut _3: &C;                      // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n-+     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn_trait.rs:27:5: 27:16\n-+         debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:20:27: 20:28\n++     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn_trait.rs:28:5: 28:16\n++         debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:21:27: 21:28\n +     }\n   \n       bb0: {\n@@ -17,11 +17,11 @@\n           _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n           StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n -         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:16\n-+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(_2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(_2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:22:5: 22:22\n                                            // mir::Constant\n--                                          // + span: $DIR/dyn_trait.rs:27:5: 27:13\n+-                                          // + span: $DIR/dyn_trait.rs:28:5: 28:13\n -                                          // + literal: Const { ty: for<'a> fn(&'a (dyn Cache<V = <C as Cache>::V> + 'a)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/dyn_trait.rs:21:7: 21:20\n++                                          // + span: $DIR/dyn_trait.rs:22:7: 22:20\n +                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "30af8661dec73bfc513521a676327de417ef1b03", "filename": "tests/mir-opt/inline/exponential_runtime.main.Inline.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -4,14 +4,14 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/exponential_runtime.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n-+     scope 1 (inlined <() as G>::call) {  // at $DIR/exponential_runtime.rs:86:5: 86:22\n-+         let _2: ();                      // in scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         let _3: ();                      // in scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n-+         let _4: ();                      // in scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n-+         scope 2 (inlined <() as F>::call) { // at $DIR/exponential_runtime.rs:73:9: 73:25\n-+             let _5: ();                  // in scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n-+             let _6: ();                  // in scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n-+             let _7: ();                  // in scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++     scope 1 (inlined <() as G>::call) {  // at $DIR/exponential_runtime.rs:87:5: 87:22\n++         let _2: ();                      // in scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         let _3: ();                      // in scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         let _4: ();                      // in scope 1 at $DIR/exponential_runtime.rs:76:9: 76:25\n++         scope 2 (inlined <() as F>::call) { // at $DIR/exponential_runtime.rs:74:9: 74:25\n++             let _5: ();                  // in scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++             let _6: ();                  // in scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++             let _7: ();                  // in scope 2 at $DIR/exponential_runtime.rs:64:9: 64:25\n +         }\n +     }\n   \n@@ -21,14 +21,14 @@\n +         StorageLive(_2);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n +         StorageLive(_3);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n +         StorageLive(_4);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n-+         StorageLive(_5);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageLive(_6);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageLive(_7);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         _5 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n++         StorageLive(_5);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageLive(_6);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageLive(_7);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _5 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n                                            // mir::Constant\n--                                          // + span: $DIR/exponential_runtime.rs:86:5: 86:20\n+-                                          // + span: $DIR/exponential_runtime.rs:87:5: 87:20\n -                                          // + literal: Const { ty: fn() {<() as G>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/exponential_runtime.rs:61:9: 61:23\n++                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n       }\n   \n@@ -42,33 +42,33 @@\n +     }\n + \n +     bb2: {\n-+         StorageDead(_7);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageDead(_6);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageDead(_5);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         _3 = <() as F>::call() -> bb3;   // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_7);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_6);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_5);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _3 = <() as F>::call() -> bb3;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:74:9: 74:23\n++                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n +                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb3: {\n-+         _4 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         _4 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:76:9: 76:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n++                                          // + span: $DIR/exponential_runtime.rs:76:9: 76:23\n +                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb4: {\n-+         _6 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         _6 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n++                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb5: {\n-+         _7 = <() as E>::call() -> bb2;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++         _7 = <() as E>::call() -> bb2;   // scope 2 at $DIR/exponential_runtime.rs:64:9: 64:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n++                                          // + span: $DIR/exponential_runtime.rs:64:9: 64:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n       }\n   }"}, {"sha": "39985528f462ab439fa552670e81b574a9d1c905", "filename": "tests/mir-opt/inline/exponential_runtime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Checks that code with exponential runtime does not have exponential behavior in inlining.\n \n trait A {"}, {"sha": "f6ba69a1d294072736b4e0bd24fe7d87749e4a09", "filename": "tests/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -4,20 +4,20 @@\n   fn one() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:14:5: 14:24\n-+         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:43:9: 43:23\n-+             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:28:9: 28:31\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:15:5: 15:24\n++         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:44:9: 44:23\n++             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:29:9: 29:31\n +             }\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:36:9: 36:28\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:37:9: 37:28\n                                            // mir::Constant\n--                                          // + span: $DIR/inline_cycle.rs:14:5: 14:22\n-+                                          // + span: $DIR/inline_cycle.rs:36:9: 36:26\n+-                                          // + span: $DIR/inline_cycle.rs:15:5: 15:22\n++                                          // + span: $DIR/inline_cycle.rs:37:9: 37:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "2f81696cf03e9b480521bd47ddcaaf9587bd35ab", "filename": "tests/mir-opt/inline/inline_cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that inliner handles various forms of recursion and doesn't fall into\n // an infinite inlining cycle. The particular outcome of inlining is not\n // crucial otherwise."}, {"sha": "c8f58111da7da1eca3db30dd73e82cdffbd69df9", "filename": "tests/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {f};                // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n-+     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:54:5: 54:8\n-+     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:49:5: 49:12\n-+         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:53:22: 53:23\n-+         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:54:5: 54:8\n++     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:55:5: 55:8\n++     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:50:5: 50:12\n++         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:54:22: 54:23\n++         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8\n +         }\n +     }\n   \n@@ -19,19 +19,19 @@\n +         StorageLive(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         _2 = f;                          // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n                                            // mir::Constant\n--                                          // + span: $DIR/inline_cycle.rs:49:5: 49:9\n+-                                          // + span: $DIR/inline_cycle.rs:50:5: 50:9\n -                                          // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n-                                           // + span: $DIR/inline_cycle.rs:49:10: 49:11\n+                                           // + span: $DIR/inline_cycle.rs:50:10: 50:11\n                                            // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n +         _3 = move _2() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n +         StorageDead(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n           StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:12: +1:13"}, {"sha": "9429ca593646eb05d57fd1d35fc3043fdc5fb9fb", "filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -4,19 +4,19 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle_generic.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:9:5: 9:24\n-+         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:38:9: 38:31\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:10:5: 10:24\n++         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:39:9: 39:31\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:32:9: 32:28\n                                            // mir::Constant\n--                                          // + span: $DIR/inline_cycle_generic.rs:9:5: 9:22\n+-                                          // + span: $DIR/inline_cycle_generic.rs:10:5: 10:22\n -                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/inline_cycle_generic.rs:31:9: 31:26\n++                                          // + span: $DIR/inline_cycle_generic.rs:32:9: 32:26\n +                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "84e6e4005a6e7579f7dcaa11fc7f195c0083fec5", "filename": "tests/mir-opt/inline/inline_cycle_generic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Check that inliner handles various forms of recursion and doesn't fall into\n // an infinite inlining cycle. The particular outcome of inlining is not\n // crucial otherwise."}, {"sha": "a2938ead0dc141b4fd2d70815edf4b0041c97b49", "filename": "tests/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -4,17 +4,17 @@ fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/inline_options.rs:+0:11: +0:11\n     let _1: ();                          // in scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n     let _2: ();                          // in scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n-    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline_options.rs:10:5: 10:21\n-        let _3: ();                      // in scope 1 at $DIR/inline_options.rs:16:23: 16:26\n-        let _4: ();                      // in scope 1 at $DIR/inline_options.rs:16:28: 16:31\n-        let _5: ();                      // in scope 1 at $DIR/inline_options.rs:16:33: 16:36\n+    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline_options.rs:11:5: 11:21\n+        let _3: ();                      // in scope 1 at $DIR/inline_options.rs:17:23: 17:26\n+        let _4: ();                      // in scope 1 at $DIR/inline_options.rs:17:28: 17:31\n+        let _5: ();                      // in scope 1 at $DIR/inline_options.rs:17:33: 17:36\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n         _1 = not_inlined() -> bb1;       // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:9:5: 9:16\n+                                         // + span: $DIR/inline_options.rs:10:5: 10:16\n                                          // + literal: Const { ty: fn() {not_inlined}, val: Value(<ZST>) }\n     }\n \n@@ -24,9 +24,9 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n         StorageLive(_4);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n         StorageLive(_5);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n-        _3 = g() -> bb3;                 // scope 1 at $DIR/inline_options.rs:16:23: 16:26\n+        _3 = g() -> bb3;                 // scope 1 at $DIR/inline_options.rs:17:23: 17:26\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:23: 16:24\n+                                         // + span: $DIR/inline_options.rs:17:23: 17:24\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n@@ -40,16 +40,16 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        _4 = g() -> bb4;                 // scope 1 at $DIR/inline_options.rs:16:28: 16:31\n+        _4 = g() -> bb4;                 // scope 1 at $DIR/inline_options.rs:17:28: 17:31\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:28: 16:29\n+                                         // + span: $DIR/inline_options.rs:17:28: 17:29\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        _5 = g() -> bb2;                 // scope 1 at $DIR/inline_options.rs:16:33: 16:36\n+        _5 = g() -> bb2;                 // scope 1 at $DIR/inline_options.rs:17:33: 17:36\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:33: 16:34\n+                                         // + span: $DIR/inline_options.rs:17:33: 17:34\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n }"}, {"sha": "f0a898832392b73a5326b26c544c43f3005bf3e6", "filename": "tests/mir-opt/inline/inline_options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Checks that inlining threshold can be controlled with\n // inline-mir-threshold and inline-hint-threshold options.\n //"}, {"sha": "9dde9994d1d1ffae9dc23e221579b3df8168552e", "filename": "tests/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -7,19 +7,19 @@\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/inline_specialization.rs:+1:9: +1:10\n       }\n-+     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline_specialization.rs:5:13: 5:38\n++     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline_specialization.rs:6:13: 6:38\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_specialization.rs:+1:9: +1:10\n -         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline_specialization.rs:+1:13: +1:38\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_specialization.rs:5:13: 5:36\n+-                                          // + span: $DIR/inline_specialization.rs:6:13: 6:36\n -                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-+         _1 = const 123_u32;              // scope 2 at $DIR/inline_specialization.rs:14:31: 14:34\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline_specialization.rs:15:31: 15:34\n           _0 = const ();                   // scope 0 at $DIR/inline_specialization.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/inline_specialization.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/inline_specialization.rs:+2:2: +2:2"}, {"sha": "c24795e05c6dc41048f28d98ffd45c2fdcf64113", "filename": "tests/mir-opt/inline/inline_specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_specialization.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #![feature(specialization)]\n \n // EMIT_MIR inline_specialization.main.Inline.diff"}, {"sha": "6aa957eb5349f7c3a0b877b0a030afceb369658c", "filename": "tests/mir-opt/inline/inline_trait_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Z span_free_formats\n \n fn main() {"}, {"sha": "a9020a5bbb7c4ab68235313cd9a18199e420bd9e", "filename": "tests/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -10,7 +10,7 @@ fn test(_1: &dyn X) -> u32 {\n         _2 = &(*_1);                     // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n         _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_trait_method.rs:9:7: 9:8\n+                                         // + span: $DIR/inline_trait_method.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n "}, {"sha": "07a60190801888931afbc7c09ff9274c61ff6bca", "filename": "tests/mir-opt/inline/inline_trait_method_2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Z span_free_formats -Z mir-opt-level=4\n \n // EMIT_MIR inline_trait_method_2.test2.Inline.after.mir"}, {"sha": "a4bbecf3b876e14980e6552ecb3b1a861b6fe818", "filename": "tests/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -5,8 +5,8 @@ fn test2(_1: &dyn X) -> bool {\n     let mut _0: bool;                    // return place in scope 0 at $DIR/inline_trait_method_2.rs:+0:24: +0:28\n     let mut _2: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n     let mut _3: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n-    scope 1 (inlined test) {             // at $DIR/inline_trait_method_2.rs:5:5: 5:12\n-        debug x => _2;                   // in scope 1 at $DIR/inline_trait_method_2.rs:9:9: 9:10\n+    scope 1 (inlined test) {             // at $DIR/inline_trait_method_2.rs:6:5: 6:12\n+        debug x => _2;                   // in scope 1 at $DIR/inline_trait_method_2.rs:10:9: 10:10\n     }\n \n     bb0: {\n@@ -15,9 +15,9 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n-        _0 = <dyn X as X>::y(_2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n+        _0 = <dyn X as X>::y(_2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:11:5: 11:10\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_trait_method_2.rs:10:7: 10:8\n+                                         // + span: $DIR/inline_trait_method_2.rs:11:7: 11:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n "}, {"sha": "18df6f9af5faebfaea73770c293887c32983b423", "filename": "tests/mir-opt/inline/issue_106141.outer.Inline.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -3,51 +3,51 @@\n   \n   fn outer() -> usize {\n       let mut _0: usize;                   // return place in scope 0 at $DIR/issue_106141.rs:+0:19: +0:24\n-+     scope 1 (inlined inner) {            // at $DIR/issue_106141.rs:2:5: 2:12\n-+         let mut _1: bool;                // in scope 1 at $DIR/issue_106141.rs:13:8: 13:21\n-+         let mut _2: bool;                // in scope 1 at $DIR/issue_106141.rs:13:8: 13:21\n-+         let mut _3: &[bool; 1];          // in scope 1 at $DIR/issue_106141.rs:11:18: 11:25\n++     scope 1 (inlined inner) {            // at $DIR/issue_106141.rs:3:5: 3:12\n++         let mut _1: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n++         let mut _2: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n++         let mut _3: &[bool; 1];          // in scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n +         scope 2 {\n-+             debug buffer => _3;          // in scope 2 at $DIR/issue_106141.rs:11:9: 11:15\n++             debug buffer => _3;          // in scope 2 at $DIR/issue_106141.rs:12:9: 12:15\n +             scope 3 {\n-+                 debug index => _0;       // in scope 3 at $DIR/issue_106141.rs:12:9: 12:14\n++                 debug index => _0;       // in scope 3 at $DIR/issue_106141.rs:13:9: 13:14\n +             }\n +         }\n +     }\n   \n       bb0: {\n -         _0 = inner() -> bb1;             // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n +         StorageLive(_3);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n-+         _3 = const _;                    // scope 1 at $DIR/issue_106141.rs:11:18: 11:25\n++         _3 = const _;                    // scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n                                            // mir::Constant\n--                                          // + span: $DIR/issue_106141.rs:2:5: 2:10\n+-                                          // + span: $DIR/issue_106141.rs:3:5: 3:10\n -                                          // + literal: Const { ty: fn() -> usize {inner}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/issue_106141.rs:11:18: 11:25\n++                                          // + span: $DIR/issue_106141.rs:12:18: 12:25\n +                                          // + literal: Const { ty: &[bool; 1], val: Unevaluated(inner, [], Some(promoted[0])) }\n-+         _0 = index() -> bb1;             // scope 2 at $DIR/issue_106141.rs:12:17: 12:24\n++         _0 = index() -> bb1;             // scope 2 at $DIR/issue_106141.rs:13:17: 13:24\n +                                          // mir::Constant\n-+                                          // + span: $DIR/issue_106141.rs:12:17: 12:22\n++                                          // + span: $DIR/issue_106141.rs:13:17: 13:22\n +                                          // + literal: Const { ty: fn() -> usize {index}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageLive(_1);                 // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n-+         _2 = Lt(_0, const 1_usize);      // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n-+         assert(move _2, \"index out of bounds: the length is {} but the index is {}\", const 1_usize, _0) -> bb2; // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n++         StorageLive(_1);                 // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         _2 = Lt(_0, const 1_usize);      // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         assert(move _2, \"index out of bounds: the length is {} but the index is {}\", const 1_usize, _0) -> bb2; // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +     }\n + \n +     bb2: {\n-+         _1 = (*_3)[_0];                  // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n-+         switchInt(move _1) -> [0: bb3, otherwise: bb4]; // scope 3 at $DIR/issue_106141.rs:13:8: 13:21\n++         _1 = (*_3)[_0];                  // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         switchInt(move _1) -> [0: bb3, otherwise: bb4]; // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +     }\n + \n +     bb3: {\n-+         _0 = const 0_usize;              // scope 3 at $DIR/issue_106141.rs:16:9: 16:10\n-+         goto -> bb4;                     // scope 3 at $DIR/issue_106141.rs:13:5: 17:6\n++         _0 = const 0_usize;              // scope 3 at $DIR/issue_106141.rs:17:9: 17:10\n++         goto -> bb4;                     // scope 3 at $DIR/issue_106141.rs:14:5: 18:6\n +     }\n + \n +     bb4: {\n-+         StorageDead(_1);                 // scope 3 at $DIR/issue_106141.rs:17:5: 17:6\n++         StorageDead(_1);                 // scope 3 at $DIR/issue_106141.rs:18:5: 18:6\n +         StorageDead(_3);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n           return;                          // scope 0 at $DIR/issue_106141.rs:+2:2: +2:2\n       }"}, {"sha": "b6bd806e6fce57e09ea14ff6c324189745275253", "filename": "tests/mir-opt/inline/issue_106141.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fissue_106141.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Fissue_106141.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_106141.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n pub fn outer() -> usize {\n     inner()\n }"}, {"sha": "17724530d657566259e3637e6670fef86596ead7", "filename": "tests/mir-opt/inline/unchecked_shifts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #![crate_type = \"lib\"]\n #![feature(unchecked_math)]\n "}, {"sha": "bf05ed4171810499c134a46a23e7b54cf006cf33", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -7,7 +7,7 @@\n       let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n       let mut _3: u16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n       let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n-+     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n++     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:11:7: 11:23\n +         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         let mut _5: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n@@ -60,7 +60,7 @@\n +         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         _7 = <u32 as TryInto<u16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:10:7: 10:20\n+-                                          // + span: $DIR/unchecked_shifts.rs:11:7: 11:20\n -                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n +                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }"}, {"sha": "7f6e974f66b1d8adff0cadfc8b06b6e072e36a48", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -4,7 +4,7 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n     debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:46: +0:47\n     debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:54: +0:55\n     let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n-    scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n+    scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:11:7: 11:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL"}, {"sha": "5c4fb5ba8ba24ecc676c754fc1a0bd90356cc7da", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -7,7 +7,7 @@\n       let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n       let mut _3: i16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n       let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n-+     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n++     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:17:7: 17:23\n +         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         let mut _5: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n@@ -60,7 +60,7 @@\n +         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         _7 = <u32 as TryInto<i16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                            // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:16:7: 16:20\n+-                                          // + span: $DIR/unchecked_shifts.rs:17:7: 17:20\n -                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n +                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }"}, {"sha": "698a3c6565500c2885f1a19555929e167d4c58aa", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -4,7 +4,7 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n     debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:44: +0:45\n     debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:52: +0:53\n     let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n-    scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n+    scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:17:7: 17:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL"}, {"sha": "d048b9e65130f8aec28400f17af7e93179656e3d", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -16,15 +16,15 @@\n       let mut _11: bool;                   // in scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       let mut _12: u32;                    // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n       let mut _13: bool;                   // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n-      scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:14:5: 14:17\n-          debug x => _1;                   // in scope 1 at $DIR/issue_101973.rs:5:13: 5:14\n-          let mut _14: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:27\n-          let mut _15: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n+      scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:15:5: 15:17\n+          debug x => _1;                   // in scope 1 at $DIR/issue_101973.rs:6:13: 6:14\n+          let mut _14: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:27\n+          let mut _15: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:20\n           scope 2 {\n-              debug out => _4;             // in scope 2 at $DIR/issue_101973.rs:6:9: 6:16\n+              debug out => _4;             // in scope 2 at $DIR/issue_101973.rs:7:9: 7:16\n           }\n       }\n-      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:14:18: 14:58\n+      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:15:18: 15:58\n           debug self => _4;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           debug n => _6;                   // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n       }\n@@ -33,13 +33,13 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n           StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n-          StorageLive(_14);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n-          StorageLive(_15);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n-          _15 = Shr(_1, const 0_i32);      // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n-          _14 = BitAnd(move _15, const 255_u32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n-          StorageDead(_15);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n-          _4 = BitOr(const 0_u32, move _14); // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n-          StorageDead(_14);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n+          StorageLive(_14);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n+          StorageLive(_15);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n+          _15 = Shr(_1, const 0_i32);      // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n+          _14 = BitAnd(move _15, const 255_u32); // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n+          StorageDead(_15);                // scope 2 at $DIR/issue_101973.rs:8:26: 8:27\n+          _4 = BitOr(const 0_u32, move _14); // scope 2 at $DIR/issue_101973.rs:8:5: 8:27\n+          StorageDead(_14);                // scope 2 at $DIR/issue_101973.rs:8:26: 8:27\n           StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45"}, {"sha": "da388f14918f75781602b7358898caf4e1ece022", "filename": "tests/mir-opt/issue_101973.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissue_101973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissue_101973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -O -C debug-assertions=on\n // This needs inlining followed by ConstProp to reproduce, so we cannot use \"unit-test\".\n "}, {"sha": "76bb11aae3d7468a4a72a410df3aa7ffe135d523", "filename": "tests/mir-opt/issue_76432.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissue_76432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissue_76432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Zmir-enable-passes=-NormalizeArrayLen\n // Check that we do not insert StorageDead at each target if StorageDead was never seen\n "}, {"sha": "42b605326908eaaf7ff42b27bb1ff85f16977c67", "filename": "tests/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -5,7 +5,7 @@ fn num_to_digit(_1: char) -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38\n     let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n     let mut _3: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n-    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:14:12: 14:23\n+    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:15:12: 15:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         debug radix => _3;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         let mut _4: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n@@ -15,7 +15,7 @@ fn num_to_digit(_1: char) -> u32 {\n             let mut _6: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n-    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:14:42: 14:50\n+    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:15:42: 15:50\n         debug self => _2;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _7: isize;               // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _8: !;                   // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -38,7 +38,7 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageLive(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n         _2 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb2; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n                                          // mir::Constant\n-                                         // + span: $DIR/issue_59352.rs:14:30: 14:38\n+                                         // + span: $DIR/issue_59352.rs:15:30: 15:38\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n "}, {"sha": "92011bd65887c377e939e4f4b0f9867fe62c7233", "filename": "tests/mir-opt/issues/issue_59352.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissues%2Fissue_59352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fissues%2Fissue_59352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // This test is a mirror of codegen/issue-59352.rs.\n // The LLVM inliner doesn't inline `char::method::is_digit()` and so it doesn't recognize this case\n // as effectively `if x.is_some() { x.unwrap() } else { 0 }`."}, {"sha": "e1bb51f2d1d9c7d156e89b23f5e6c405e87aadbd", "filename": "tests/mir-opt/lower_array_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Flower_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Flower_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: NormalizeArrayLen\n // compile-flags: -Zmir-enable-passes=+LowerSliceLenCalls\n "}, {"sha": "67918e62b9c22b28e840a5a572affd4ea0650eaa", "filename": "tests/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -22,7 +22,7 @@\n           _6 = &(*_2);                     // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n -         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25\n+-                                          // + span: $DIR/lower_slice_len.rs:6:22: 6:25\n -                                          // + literal: Const { ty: for<'a> fn(&'a [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(<ZST>) }\n +         _5 = Len((*_6));                 // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27\n +         goto -> bb1;                     // scope 0 at $DIR/lower_slice_len.rs:+1:16: +1:27"}, {"sha": "9c39c29fc4e4d61ea164fac582c87e868981808d", "filename": "tests/mir-opt/lower_slice_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_slice_len.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: LowerSliceLenCalls\n \n // EMIT_MIR lower_slice_len.bound.LowerSliceLenCalls.diff"}, {"sha": "525dfe4262a467211eeadb4403d52224b5775ab6", "filename": "tests/mir-opt/nrvo_simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fnrvo_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fnrvo_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnrvo_simple.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: RenameReturnPlace\n \n // EMIT_MIR nrvo_simple.nrvo.RenameReturnPlace.diff"}, {"sha": "0e8309532c2faa5d51b0fcbb2ac543e27e8b9bb3", "filename": "tests/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -34,7 +34,7 @@\n           _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n-                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + span: $DIR/remove_storage_markers.rs:11:14: 11:19\n                                            // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n@@ -54,7 +54,7 @@\n           _8 = &mut (*_9);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> bb3; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n-                                           // + span: $DIR/remove_storage_markers.rs:10:14: 10:19\n+                                           // + span: $DIR/remove_storage_markers.rs:11:14: 11:19\n                                            // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "480db8ac155b5d4c06a44e86c38716fb22c4ebe4", "filename": "tests/mir-opt/remove_storage_markers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_storage_markers.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: RemoveStorageMarkers\n \n // Checks that storage markers are removed at opt-level=0."}, {"sha": "b473d0fdecd097cacabf304dec6934cedabbabcd", "filename": "tests/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -16,7 +16,7 @@\n       bb1: {\n           _2 = noop() -> bb2;              // scope 0 at $DIR/simplify_if.rs:+2:9: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_if.rs:7:9: 7:13\n+                                           // + span: $DIR/simplify_if.rs:8:9: 8:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "b86f80a8038bfc2dc623e1aa10bba27e090b99f6", "filename": "tests/mir-opt/simplify_if.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_if.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #[inline(never)]\n fn noop() {}\n "}, {"sha": "7c41e8b7c20eebb0916ce31237b3efc7e534f741", "filename": "tests/mir-opt/simplify_locals_fixedpoint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -Zmir-opt-level=1\n \n fn foo<T>() {"}, {"sha": "ae2c774f29dc683f5c1bfafdaa730fe14e001745", "filename": "tests/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -56,7 +56,7 @@\n +         StorageDead(_3);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n +         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:15:5: 15:12\n+                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:16:5: 16:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(<ZST>) }\n       }\n   \n@@ -84,7 +84,7 @@\n +         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:33: +4:34\n +         _5 = use_u8(move _6) -> bb2;     // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:17:5: 17:11\n+                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:18:5: 18:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "983d8004e2ed4db9016ad5d9d76a7e93f920aa5f", "filename": "tests/mir-opt/simplify_locals_removes_unused_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // unit-test: SimplifyLocals-before-const-prop\n // compile-flags: -C overflow-checks=no\n "}, {"sha": "d2b9ac3cc0b966474feecb9d15bebb78c3d10d96", "filename": "tests/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -22,7 +22,7 @@\n       bb2: {\n           _0 = noop() -> bb3;              // scope 0 at $DIR/simplify_match.rs:+2:17: +2:23\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify_match.rs:7:17: 7:21\n+                                           // + span: $DIR/simplify_match.rs:8:17: 8:21\n                                            // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "6a2a6f2171967b2355513e60880654da41481761", "filename": "tests/mir-opt/simplify_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fsimplify_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n #[inline(never)]\n fn noop() {}\n "}, {"sha": "323b61346c004354773bed128f069a58d6e5436f", "filename": "tests/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -21,7 +21,7 @@\n           StorageLive(_1);                 // scope 1 at $DIR/unreachable.rs:+1:23: +1:30\n           _1 = empty() -> bb1;             // scope 1 at $DIR/unreachable.rs:+1:23: +1:30\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable.rs:9:23: 9:28\n+                                           // + span: $DIR/unreachable.rs:10:23: 10:28\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "97093729dd137b2d9b0d1fb8aeaa14f4ead6fa01", "filename": "tests/mir-opt/unreachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n enum Empty {}\n \n fn empty() -> Option<Empty> {"}, {"sha": "94bc633613b7f35ad638ec82008ee7542de9d944", "filename": "tests/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -23,7 +23,7 @@\n           StorageLive(_2);                 // scope 2 at $DIR/unreachable_diverging.rs:+2:25: +2:32\n           _2 = empty() -> bb1;             // scope 2 at $DIR/unreachable_diverging.rs:+2:25: +2:32\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n+                                           // + span: $DIR/unreachable_diverging.rs:15:25: 15:30\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(<ZST>) }\n       }\n   \n@@ -44,7 +44,7 @@\n       bb3: {\n           _5 = loop_forever() -> bb5;      // scope 2 at $DIR/unreachable_diverging.rs:+4:13: +4:27\n                                            // mir::Constant\n-                                           // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n+                                           // + span: $DIR/unreachable_diverging.rs:17:13: 17:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "24e776148c123fa9549844e0c212547be33077de", "filename": "tests/mir-opt/unreachable_diverging.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Funreachable_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funreachable_diverging.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n pub enum Empty {}\n \n fn empty() -> Option<Empty> {"}, {"sha": "d10048dd908ae429a8a69dcd4117b88311909d0a", "filename": "tests/mir-opt/while_storage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fwhile_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fwhile_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_storage.rs?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -1,3 +1,4 @@\n+// ignore-wasm32 compiled with panic=abort by default\n // Test that we correctly generate StorageDead statements for while loop\n // conditions on all branches\n "}, {"sha": "811789a60c3eb25d52bd4a56a16cd7c686583799", "filename": "tests/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04126398c227d3ba9994bbb303e6c2a26d9198b2/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=04126398c227d3ba9994bbb303e6c2a26d9198b2", "patch": "@@ -14,7 +14,7 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n         _2 = get_bool(_1) -> bb2;        // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n                                          // mir::Constant\n-                                         // + span: $DIR/while_storage.rs:10:11: 10:19\n+                                         // + span: $DIR/while_storage.rs:11:11: 11:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n@@ -26,7 +26,7 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n         _3 = get_bool(_1) -> bb4;        // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n                                          // mir::Constant\n-                                         // + span: $DIR/while_storage.rs:11:12: 11:20\n+                                         // + span: $DIR/while_storage.rs:12:12: 12:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n "}]}