{"sha": "83e106a3039da0ce094f1788dcad824c42b1c104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTEwNmEzMDM5ZGEwY2UwOTRmMTc4OGRjYWQ4MjRjNDJiMWMxMDQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-06-03T16:18:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-03T16:18:32Z"}, "message": "Better docs for librustc/hir/def.rs", "tree": {"sha": "cd75e05578b969efed29cbfdcee65ef1140e1dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd75e05578b969efed29cbfdcee65ef1140e1dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e106a3039da0ce094f1788dcad824c42b1c104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e106a3039da0ce094f1788dcad824c42b1c104", "html_url": "https://github.com/rust-lang/rust/commit/83e106a3039da0ce094f1788dcad824c42b1c104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e106a3039da0ce094f1788dcad824c42b1c104/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4225019750f437c8c247a2682f01abe5ada69c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4225019750f437c8c247a2682f01abe5ada69c46", "html_url": "https://github.com/rust-lang/rust/commit/4225019750f437c8c247a2682f01abe5ada69c46"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "0ebfebd10f7ece2b676de1fceb3c938d35bd3fbf", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/83e106a3039da0ce094f1788dcad824c42b1c104/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e106a3039da0ce094f1788dcad824c42b1c104/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=83e106a3039da0ce094f1788dcad824c42b1c104", "patch": "@@ -17,11 +17,11 @@ use hir;\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum CtorKind {\n-    // Constructor function automatically created by a tuple struct/variant.\n+    /// Constructor function automatically created by a tuple struct/variant.\n     Fn,\n-    // Constructor constant automatically created by a unit struct/variant.\n+    /// Constructor constant automatically created by a unit struct/variant.\n     Const,\n-    // Unusable name in value namespace created by a struct variant.\n+    /// Unusable name in value namespace created by a struct variant.\n     Fictive,\n }\n \n@@ -109,17 +109,21 @@ impl PathResolution {\n     }\n }\n \n-// Definition mapping\n+/// Definition mapping\n pub type DefMap = NodeMap<PathResolution>;\n-// This is the replacement export map. It maps a module to all of the exports\n-// within.\n+\n+/// This is the replacement export map. It maps a module to all of the exports\n+/// within.\n pub type ExportMap = NodeMap<Vec<Export>>;\n \n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct Export {\n-    pub ident: ast::Ident, // The name of the target.\n-    pub def: Def, // The definition of the target.\n-    pub span: Span, // The span of the target definition.\n+    /// The name of the target.\n+    pub ident: ast::Ident,\n+    /// The definition of the target.\n+    pub def: Def,\n+    /// The span of the target definition.\n+    pub span: Span,\n }\n \n impl CtorKind {\n@@ -159,7 +163,8 @@ impl Def {\n             }\n         }\n     }\n-\n+    \n+    /// A human readable kind name\n     pub fn kind_name(&self) -> &'static str {\n         match *self {\n             Def::Fn(..) => \"function\","}]}