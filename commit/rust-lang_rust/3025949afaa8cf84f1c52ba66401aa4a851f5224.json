{"sha": "3025949afaa8cf84f1c52ba66401aa4a851f5224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjU5NDlhZmFhOGNmODRmMWM1MmJhNjY0MDFhYTRhODUxZjUyMjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-24T17:25:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-24T17:25:47Z"}, "message": "Rollup merge of #57860 - jethrogb:jb/sgx-os-ffi, r=joshtriplett\n\nAdd os::fortanix_sgx::ffi module\n\nThis uses the same byte slice accessors that Unix has. The [ABI specifies](https://docs.rs/fortanix-sgx-abi/0.3.2/fortanix_sgx_abi/struct.ByteBuffer.html) byte slices.", "tree": {"sha": "b8678d6d15bb10ddd5d429a4ce72e02fa71eeeeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8678d6d15bb10ddd5d429a4ce72e02fa71eeeeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3025949afaa8cf84f1c52ba66401aa4a851f5224", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSfUbCRBK7hj4Ov3rIwAAdHIIAHMfGZZriTUq4V8uzi17qdGc\nYFojTbB13R3EbBwS1OC0jGCLu2lIvbmTK/7lZE4rPefCtACauTUV9bgv12qaSJJ9\n9nf3pCy1BMYjVDB7BDulVUW/BGyROppbHjXHL8zQXj1uktYq0SCCzE5fYpFxX2YZ\nok1QSkT0CdphOPJvOIwvKFPiznPtfpqhqsFDLCoyvGt3S5fxyrv4YydBb9VBRzZu\n0iSbsfavyu8i7GjF8ph/l+HYIQrffU63iDp3cwlJFZ5qG+o5x+VBY+H1HRBe++M1\nH7kEGch2lvtYCepKigY3whB0D0wFHUCGmgASbvlO4f2XAXUnzZ8NCFVx3XlLxZM=\n=ImUC\n-----END PGP SIGNATURE-----\n", "payload": "tree b8678d6d15bb10ddd5d429a4ce72e02fa71eeeeb\nparent e576c8c06c36f2602b9f3912dd24432e1624c99d\nparent 8db59d49f3364c26f424518d99631ca008b9b4f5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548350747 +0100\ncommitter GitHub <noreply@github.com> 1548350747 +0100\n\nRollup merge of #57860 - jethrogb:jb/sgx-os-ffi, r=joshtriplett\n\nAdd os::fortanix_sgx::ffi module\n\nThis uses the same byte slice accessors that Unix has. The [ABI specifies](https://docs.rs/fortanix-sgx-abi/0.3.2/fortanix_sgx_abi/struct.ByteBuffer.html) byte slices.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3025949afaa8cf84f1c52ba66401aa4a851f5224", "html_url": "https://github.com/rust-lang/rust/commit/3025949afaa8cf84f1c52ba66401aa4a851f5224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3025949afaa8cf84f1c52ba66401aa4a851f5224/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e576c8c06c36f2602b9f3912dd24432e1624c99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e576c8c06c36f2602b9f3912dd24432e1624c99d", "html_url": "https://github.com/rust-lang/rust/commit/e576c8c06c36f2602b9f3912dd24432e1624c99d"}, {"sha": "8db59d49f3364c26f424518d99631ca008b9b4f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db59d49f3364c26f424518d99631ca008b9b4f5", "html_url": "https://github.com/rust-lang/rust/commit/8db59d49f3364c26f424518d99631ca008b9b4f5"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "810965fc1b85af02892ba3126eb8db80ccaed161", "filename": "src/libstd/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3025949afaa8cf84f1c52ba66401aa4a851f5224/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3025949afaa8cf84f1c52ba66401aa4a851f5224/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=3025949afaa8cf84f1c52ba66401aa4a851f5224", "patch": "@@ -56,4 +56,4 @@ pub mod mem {\n     pub use sys::abi::mem::*;\n }\n \n-pub use sys::ext::{io, arch};\n+pub use sys::ext::{io, arch, ffi};"}, {"sha": "7b0ffea49ae7caaf7c9af35ea0cf203a60c2bf98", "filename": "src/libstd/sys/sgx/ext/ffi.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/3025949afaa8cf84f1c52ba66401aa4a851f5224/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3025949afaa8cf84f1c52ba66401aa4a851f5224/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs?ref=3025949afaa8cf84f1c52ba66401aa4a851f5224", "patch": "@@ -0,0 +1,109 @@\n+//! SGX-specific extension to the primitives in the `std::ffi` module\n+\n+#![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+\n+use ffi::{OsStr, OsString};\n+use mem;\n+use sys::os_str::Buf;\n+use sys_common::{FromInner, IntoInner, AsInner};\n+\n+/// SGX-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait OsStringExt {\n+    /// Creates an [`OsString`] from a byte vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let bytes = b\"foo\".to_vec();\n+    /// let os_string = OsString::from_vec(bytes);\n+    /// assert_eq!(os_string.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    fn from_vec(vec: Vec<u8>) -> Self;\n+\n+    /// Yields the underlying byte vector of this [`OsString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let mut os_string = OsString::new();\n+    /// os_string.push(\"foo\");\n+    /// let bytes = os_string.into_vec();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    fn into_vec(self) -> Vec<u8>;\n+}\n+\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+impl OsStringExt for OsString {\n+    fn from_vec(vec: Vec<u8>) -> OsString {\n+        FromInner::from_inner(Buf { inner: vec })\n+    }\n+    fn into_vec(self) -> Vec<u8> {\n+        self.into_inner().inner\n+    }\n+}\n+\n+/// SGX-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait OsStrExt {\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    /// Creates an [`OsStr`] from a byte slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let bytes = b\"foo\";\n+    /// let os_str = OsStr::from_bytes(bytes);\n+    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    fn from_bytes(slice: &[u8]) -> &Self;\n+\n+    /// Gets the underlying byte view of the [`OsStr`] slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let mut os_str = OsStr::new(\"foo\");\n+    /// let bytes = os_str.as_bytes();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    fn as_bytes(&self) -> &[u8];\n+}\n+\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+impl OsStrExt for OsStr {\n+    fn from_bytes(slice: &[u8]) -> &OsStr {\n+        unsafe { mem::transmute(slice) }\n+    }\n+    fn as_bytes(&self) -> &[u8] {\n+        &self.as_inner().inner\n+    }\n+}"}, {"sha": "51b2659da83e369f7e3ec1aa19aa37c2e64b63df", "filename": "src/libstd/sys/sgx/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3025949afaa8cf84f1c52ba66401aa4a851f5224/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3025949afaa8cf84f1c52ba66401aa4a851f5224/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fmod.rs?ref=3025949afaa8cf84f1c52ba66401aa4a851f5224", "patch": "@@ -2,3 +2,4 @@\n \n pub mod arch;\n pub mod io;\n+pub mod ffi;"}]}