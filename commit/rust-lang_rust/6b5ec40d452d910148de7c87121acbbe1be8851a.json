{"sha": "6b5ec40d452d910148de7c87121acbbe1be8851a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNWVjNDBkNDUyZDkxMDE0OGRlN2M4NzEyMWFjYmJlMWJlODg1MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-15T00:46:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-15T00:46:19Z"}, "message": "auto merge of #16435 : vadimcn/rust/windows, r=pcwalton\n\nUsing \"win32\" to mean \"Windows\" is confusing, especially now, that Rust supports win64 builds.\r\nLet's call spade a spade.", "tree": {"sha": "a82605896ad61ef0337221819005e9d19c16c902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a82605896ad61ef0337221819005e9d19c16c902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b5ec40d452d910148de7c87121acbbe1be8851a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5ec40d452d910148de7c87121acbbe1be8851a", "html_url": "https://github.com/rust-lang/rust/commit/6b5ec40d452d910148de7c87121acbbe1be8851a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b5ec40d452d910148de7c87121acbbe1be8851a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb0cee682cdff796561cd6cca9bb6925a7b1ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2", "html_url": "https://github.com/rust-lang/rust/commit/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2"}, {"sha": "88c27e099f94b26d19f9e266e728269d6a23c811", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c27e099f94b26d19f9e266e728269d6a23c811", "html_url": "https://github.com/rust-lang/rust/commit/88c27e099f94b26d19f9e266e728269d6a23c811"}], "stats": {"total": 229, "additions": 132, "deletions": 97}, "files": [{"sha": "94b6ea0d7b44981d9524cdde38d4a7dba980b45f", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -16,7 +16,8 @@ use header::TestProps;\n use header;\n use procsrv;\n use util::logv;\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n use util;\n \n use std::io::File;\n@@ -817,7 +818,8 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         format!(\"{}:{}:\", testfile.display(), ee.line)\n     }).collect::<Vec<String> >();\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     fn to_lower( s : &str ) -> String {\n         let i = s.chars();\n         let c : Vec<char> = i.map( |c| {\n@@ -830,7 +832,8 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         String::from_chars(c.as_slice())\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     fn prefix_matches( line : &str, prefix : &str ) -> bool {\n         to_lower(line).as_slice().starts_with(to_lower(prefix).as_slice())\n     }\n@@ -1247,14 +1250,16 @@ fn make_cmdline(_libpath: &str, prog: &str, args: &[String]) -> String {\n     format!(\"{} {}\", prog, args.connect(\" \"))\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn make_cmdline(libpath: &str, prog: &str, args: &[String]) -> String {\n     format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.connect(\" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n // for diagnostic purposes\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn lib_path_cmd_prefix(path: &str) -> String {\n     format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n }"}, {"sha": "8947856e332a7c748a0bf8ae35a44ac242516f14", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -10,13 +10,15 @@\n \n use common::Config;\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n use std::os::getenv;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n static OS_TABLE: &'static [(&'static str, &'static str)] = &[\n-    (\"mingw32\", \"win32\"),\n-    (\"win32\", \"win32\"),\n+    (\"mingw32\", \"windows\"),\n+    (\"win32\", \"windows\"),\n+    (\"windows\", \"windows\"),\n     (\"darwin\", \"macos\"),\n     (\"android\", \"android\"),\n     (\"linux\", \"linux\"),\n@@ -33,7 +35,8 @@ pub fn get_os(triple: &str) -> &'static str {\n     fail!(\"Cannot determine OS from triple\");\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn make_new_path(path: &str) -> String {\n \n     // Windows just uses PATH as the library search path, so we have to\n@@ -46,10 +49,12 @@ pub fn make_new_path(path: &str) -> String {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn lib_path_env_var() -> &'static str { \"PATH\" }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn path_div() -> &'static str { \";\" }\n \n pub fn logv(config: &Config, s: String) {"}, {"sha": "5d0f35fbd6064811f28e6e1459f3b629b86c8978", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -61,13 +61,15 @@ def run(args):\n     elif 'android' in os:\n         os = 'android'\n     elif 'win' in os or 'mingw' in os:\n-        os = 'win32'\n+        os = 'windows'\n     cfg = [\n         \"target_arch = \\\"\" + arch + \"\\\"\",\n         \"target_os = \\\"\" + os + \"\\\"\",\n     ]\n \n     f.write(\"#[cfg(\" + ', '.join(cfg) + \")]\\n\")\n+    if os == \"windows\": # NOTE: Remove after snapshot\n+        f.write(\"#[cfg(stage0, target_arch = \\\"%s\\\", target_os = \\\"win32\\\")]\\n\" % (arch,))\n \n     version = run([llconfig, '--version']).strip()\n "}, {"sha": "c005ae71480517c94b75eedc21169a4b142b1f7a", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -1138,7 +1138,8 @@ pub mod types {\n         }\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n@@ -1803,7 +1804,8 @@ pub mod consts {\n     // Consts tend to vary per OS so we pull their definitions out\n     // into this module.\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -3887,7 +3889,8 @@ pub mod funcs {\n     // so be careful when trying to write portable code; it won't always work\n     // with the same POSIX functions and types as other platforms.\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::common::posix01::{stat, utimbuf};\n@@ -4316,7 +4319,8 @@ pub mod funcs {\n         }\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod posix01 {\n         pub mod stat_ {\n         }\n@@ -4332,7 +4336,8 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     #[cfg(target_os = \"macos\")]\n@@ -4470,7 +4475,8 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod bsd44 {\n     }\n \n@@ -4496,7 +4502,8 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod extra {\n \n         pub mod kernel32 {"}, {"sha": "afd818bd7d7e7d23a8e82ed8623c1771ef33d20c", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -58,7 +58,8 @@ pub mod file;\n #[path = \"timer_unix.rs\"]\n pub mod timer;\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[path = \"timer_win32.rs\"]\n pub mod timer;\n "}, {"sha": "f3e130cf768604773e621744d0806c08218e77af", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -200,7 +200,7 @@ pub mod write {\n             // OSX has -dead_strip, which doesn't rely on ffunction_sections\n             // FIXME(#13846) this should be enabled for windows\n             let ffunction_sections = sess.targ_cfg.os != abi::OsMacos &&\n-                                     sess.targ_cfg.os != abi::OsWin32;\n+                                     sess.targ_cfg.os != abi::OsWindows;\n             let fdata_sections = ffunction_sections;\n \n             let reloc_model = match sess.opts.cg.relocation_model.as_slice() {\n@@ -858,7 +858,7 @@ pub fn get_cc_prog(sess: &Session) -> String {\n     // instead of hard-coded gcc.\n     // For win32, there is no cc command, so we add a condition to make it use gcc.\n     match sess.targ_cfg.os {\n-        abi::OsWin32 => \"gcc\",\n+        abi::OsWindows => \"gcc\",\n         _ => \"cc\",\n     }.to_string()\n }\n@@ -954,7 +954,7 @@ pub fn filename_for_input(sess: &Session,\n         }\n         config::CrateTypeDylib => {\n             let (prefix, suffix) = match sess.targ_cfg.os {\n-                abi::OsWin32 => (loader::WIN32_DLL_PREFIX, loader::WIN32_DLL_SUFFIX),\n+                abi::OsWindows => (loader::WIN32_DLL_PREFIX, loader::WIN32_DLL_SUFFIX),\n                 abi::OsMacos => (loader::MACOS_DLL_PREFIX, loader::MACOS_DLL_SUFFIX),\n                 abi::OsLinux => (loader::LINUX_DLL_PREFIX, loader::LINUX_DLL_SUFFIX),\n                 abi::OsAndroid => (loader::ANDROID_DLL_PREFIX, loader::ANDROID_DLL_SUFFIX),\n@@ -972,7 +972,7 @@ pub fn filename_for_input(sess: &Session,\n         }\n         config::CrateTypeExecutable => {\n             match sess.targ_cfg.os {\n-                abi::OsWin32 => out_filename.with_extension(\"exe\"),\n+                abi::OsWindows => out_filename.with_extension(\"exe\"),\n                 abi::OsMacos |\n                 abi::OsLinux |\n                 abi::OsAndroid |\n@@ -1388,7 +1388,7 @@ fn link_args(cmd: &mut Command,\n     // subset we wanted.\n     //\n     // FIXME(#11937) we should invoke the system linker directly\n-    if sess.targ_cfg.os != abi::OsWin32 {\n+    if sess.targ_cfg.os != abi::OsWindows {\n         cmd.arg(\"-nodefaultlibs\");\n     }\n \n@@ -1440,7 +1440,7 @@ fn link_args(cmd: &mut Command,\n         cmd.arg(\"-Wl,-dead_strip\");\n     }\n \n-    if sess.targ_cfg.os == abi::OsWin32 {\n+    if sess.targ_cfg.os == abi::OsWindows {\n         // Make sure that we link to the dynamic libgcc, otherwise cross-module\n         // DWARF stack unwinding will not work.\n         // This behavior may be overridden by --link-args \"-static-libgcc\"\n@@ -1715,7 +1715,7 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n \n     // Converts a library file-stem into a cc -l argument\n     fn unlib<'a>(config: &config::Config, stem: &'a [u8]) -> &'a [u8] {\n-        if stem.starts_with(\"lib\".as_bytes()) && config.os != abi::OsWin32 {\n+        if stem.starts_with(\"lib\".as_bytes()) && config.os != abi::OsWindows {\n             stem.tailn(3)\n         } else {\n             stem"}, {"sha": "c402c256a37196b692f2a45b9805fb6c1a0997e3", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -390,7 +390,7 @@ pub fn default_lib_output() -> CrateType {\n \n pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let tos = match sess.targ_cfg.os {\n-        abi::OsWin32 =>     InternedString::new(\"win32\"),\n+        abi::OsWindows =>   InternedString::new(\"windows\"),\n         abi::OsMacos =>     InternedString::new(\"macos\"),\n         abi::OsLinux =>     InternedString::new(\"linux\"),\n         abi::OsAndroid =>   InternedString::new(\"android\"),\n@@ -410,7 +410,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     };\n \n     let fam = match sess.targ_cfg.os {\n-        abi::OsWin32 => InternedString::new(\"windows\"),\n+        abi::OsWindows => InternedString::new(\"windows\"),\n         _ => InternedString::new(\"unix\")\n     };\n \n@@ -452,8 +452,9 @@ pub fn get_os(triple: &str) -> Option<abi::Os> {\n     None\n }\n static os_names : &'static [(&'static str, abi::Os)] = &[\n-    (\"mingw32\",   abi::OsWin32),\n-    (\"win32\",     abi::OsWin32),\n+    (\"mingw32\",   abi::OsWindows),\n+    (\"win32\",     abi::OsWindows),\n+    (\"windows\",   abi::OsWindows),\n     (\"darwin\",    abi::OsMacos),\n     (\"android\",   abi::OsAndroid),\n     (\"linux\",     abi::OsLinux),"}, {"sha": "cd8ebf5081ba72533dcf6aca8308063ec93f2750", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -615,7 +615,7 @@ impl<'a> Context<'a> {\n     // dynamic libraries\n     fn dylibname(&self) -> Option<(&'static str, &'static str)> {\n         match self.os {\n-            abi::OsWin32 => Some((WIN32_DLL_PREFIX, WIN32_DLL_SUFFIX)),\n+            abi::OsWindows => Some((WIN32_DLL_PREFIX, WIN32_DLL_SUFFIX)),\n             abi::OsMacos => Some((MACOS_DLL_PREFIX, MACOS_DLL_SUFFIX)),\n             abi::OsLinux => Some((LINUX_DLL_PREFIX, LINUX_DLL_SUFFIX)),\n             abi::OsAndroid => Some((ANDROID_DLL_PREFIX, ANDROID_DLL_SUFFIX)),\n@@ -824,7 +824,7 @@ pub fn meta_section_name(os: abi::Os) -> Option<&'static str> {\n     match os {\n         abi::OsMacos => Some(\"__DATA,__note.rustc\"),\n         abi::OsiOS => Some(\"__DATA,__note.rustc\"),\n-        abi::OsWin32 => Some(\".note.rustc\"),\n+        abi::OsWindows => Some(\".note.rustc\"),\n         abi::OsLinux => Some(\".note.rustc\"),\n         abi::OsAndroid => Some(\".note.rustc\"),\n         abi::OsFreebsd => Some(\".note.rustc\"),\n@@ -836,7 +836,7 @@ pub fn read_meta_section_name(os: abi::Os) -> &'static str {\n     match os {\n         abi::OsMacos => \"__note.rustc\",\n         abi::OsiOS => unreachable!(),\n-        abi::OsWin32 => \".note.rustc\",\n+        abi::OsWindows => \".note.rustc\",\n         abi::OsLinux => \".note.rustc\",\n         abi::OsAndroid => \".note.rustc\",\n         abi::OsFreebsd => \".note.rustc\","}, {"sha": "d419a56ec148e3f7f27d0890bf30068692667c4a", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -18,7 +18,7 @@ use middle::trans::cabi_arm;\n use middle::trans::cabi_mips;\n use middle::trans::type_::Type;\n use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n-use syntax::abi::{OsWin32};\n+use syntax::abi::{OsWindows};\n \n #[deriving(Clone, PartialEq)]\n pub enum ArgKind {\n@@ -110,7 +110,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n     match ccx.sess().targ_cfg.arch {\n         X86 => cabi_x86::compute_abi_info(ccx, atys, rty, ret_def),\n         X86_64 =>\n-            if ccx.sess().targ_cfg.os == OsWin32 {\n+            if ccx.sess().targ_cfg.os == OsWindows {\n                 cabi_x86_win64::compute_abi_info(ccx, atys, rty, ret_def)\n             } else {\n                 cabi_x86_64::compute_abi_info(ccx, atys, rty, ret_def)"}, {"sha": "d9812677d64cbec0975b429be362c21f171b723e", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use syntax::abi::{OsWin32, OsMacos, OsiOS};\n+use syntax::abi::{OsWindows, OsMacos, OsiOS};\n use llvm::*;\n use super::cabi::*;\n use super::common::*;\n@@ -36,7 +36,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n \n         enum Strategy { RetValue(Type), RetPointer }\n         let strategy = match ccx.sess().targ_cfg.os {\n-            OsWin32 | OsMacos | OsiOS => {\n+            OsWindows | OsMacos | OsiOS => {\n                 match llsize_of_alloc(ccx, rty) {\n                     1 => RetValue(Type::i8(ccx)),\n                     2 => RetValue(Type::i16(ccx)),"}, {"sha": "6e606f3336180380a6c2a08761cbff9f36de06c4", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -98,7 +98,7 @@ fn run_ar(handler: &ErrorHandler, maybe_ar_prog: &Option<String>,\n pub fn find_library(name: &str, os: abi::Os, search_paths: &[Path],\n                     handler: &ErrorHandler) -> Path {\n     let (osprefix, osext) = match os {\n-        abi::OsWin32 => (\"\", \"lib\"), _ => (\"lib\", \"a\"),\n+        abi::OsWindows => (\"\", \"lib\"), _ => (\"lib\", \"a\"),\n     };\n     // On Windows, static libraries sometimes show up as libfoo.a and other\n     // times show up as foo.lib"}, {"sha": "134f7105ea76eddfc0726814eeaac726d66061a5", "filename": "src/librustc_back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -37,7 +37,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "322f001c31e1b9dfb3df084f459f11153147c642", "filename": "src/librustc_back/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -32,7 +32,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"E-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "e7ce5b0a429bc4023ad1143647af8c19c15cc69a", "filename": "src/librustc_back/mipsel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -32,7 +32,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "98fdd5a7fd7db4dcebe2f0f7e2d72bc1d4b8961f", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -26,7 +26,7 @@ pub struct RPathConfig<'a> {\n pub fn get_rpath_flags(config: RPathConfig) -> Vec<String> {\n \n     // No rpath on windows\n-    if config.os == abi::OsWin32 {\n+    if config.os == abi::OsWindows {\n         return Vec::new();\n     }\n \n@@ -107,14 +107,14 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig,\n                                 lib: &Path) -> String {\n     use std::os;\n \n-    assert!(config.os != abi::OsWin32);\n+    assert!(config.os != abi::OsWindows);\n \n     // Mac doesn't appear to support $ORIGIN\n     let prefix = match config.os {\n         abi::OsAndroid | abi::OsLinux | abi::OsFreebsd | abi::OsDragonfly\n                           => \"$ORIGIN\",\n         abi::OsMacos => \"@loader_path\",\n-        abi::OsWin32 | abi::OsiOS => unreachable!()\n+        abi::OsWindows | abi::OsiOS => unreachable!()\n     };\n \n     let mut lib = (config.realpath)(&os::make_absolute(lib)).unwrap();"}, {"sha": "21c4fd424748f2f21dfc0b08ebd158708e573d01", "filename": "src/librustc_back/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -34,7 +34,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n                 -n8:16:32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string()\n           }\n "}, {"sha": "43c4d646ec940c76425c8c3c58990cea90784292", "filename": "src/librustc_back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -29,7 +29,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 s0:64:64-f80:128:128-n8:16:32:64\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             // FIXME: Test this. Copied from linux (#2398)\n             \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n                 f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\"}, {"sha": "c5ac9416fa06d9d2ca8413e48f7a5247e2553160", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -73,7 +73,8 @@ impl PluginManager {\n     }\n }\n \n-#[cfg(target_os=\"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn libname(mut n: String) -> String {\n     n.push_str(\".dll\");\n     n\n@@ -85,7 +86,8 @@ fn libname(mut n: String) -> String {\n     n\n }\n \n-#[cfg(not(target_os=\"win32\"), not(target_os=\"macos\"))]\n+#[cfg(not(stage0), not(target_os=\"windows\"), not(target_os=\"macos\"))]\n+#[cfg(stage0, not(target_os=\"win32\"), not(target_os=\"macos\"))] // NOTE: Remove after snapshot\n fn libname(n: String) -> String {\n     let mut i = String::from_str(\"lib\");\n     i.push_str(n.as_slice());"}, {"sha": "453a9307579d4681aa6abeb53ee9e6a26e224731", "filename": "src/librustrt/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustrt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustrt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fargs.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -147,7 +147,8 @@ mod imp {\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n mod imp {\n     use core::prelude::*;\n     use collections::vec::Vec;"}, {"sha": "72d78d84aa3e69bcdf079ab2d63f629e184b5b49", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -86,7 +86,8 @@ pub type _Unwind_Exception_Cleanup_Fn =\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[link(name = \"gcc_s\")]\n extern {}\n "}, {"sha": "772b5da8cd5b809c12b28d235673d3c6ac71f44a", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -199,7 +199,8 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:112\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86_64\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_record_sp_limit(limit: uint) {\n         // see: http://en.wikipedia.org/wiki/Win32_Thread_Information_Block\n         // store this inside of the \"arbitrary data slot\", but double the size\n@@ -227,7 +228,8 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movl $0, %gs:48\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_record_sp_limit(limit: uint) {\n         // see: http://en.wikipedia.org/wiki/Win32_Thread_Information_Block\n         // store this inside of the \"arbitrary data slot\"\n@@ -280,7 +282,8 @@ pub unsafe fn get_sp_limit() -> uint {\n         asm!(\"movq %fs:112, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86_64\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq %gs:0x28, $0\" : \"=r\"(limit) ::: \"volatile\");\n@@ -316,7 +319,8 @@ pub unsafe fn get_sp_limit() -> uint {\n         asm!(\"movl %gs:48, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movl %fs:0x14, $0\" : \"=r\"(limit) ::: \"volatile\");"}, {"sha": "b06065659bda1b7bb1544960cfa77749ae108801", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -727,7 +727,8 @@ extern {}\n #[link(name = \"rt\")]\n extern {}\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[link(name = \"ws2_32\")]\n #[link(name = \"psapi\")]\n #[link(name = \"iphlpapi\")]"}, {"sha": "fb951d45c42112aa849891c750884dcd10a2b608", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -278,7 +278,8 @@ pub mod dl {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub mod dl {\n     use c_str::ToCStr;\n     use iter::Iterator;"}, {"sha": "d8eb0979190d447baf11d44d3b8f120c82bcde30", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -1842,15 +1842,16 @@ pub mod consts {\n     pub static EXE_EXTENSION: &'static str = \"\";\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"windows\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `win32`.\n-    pub static SYSNAME: &'static str = \"win32\";\n+    pub static SYSNAME: &'static str = \"windows\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, the empty string."}, {"sha": "3280829f958352d781785ea693d72a0d7ee8427f", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -11,7 +11,7 @@\n use std::fmt;\n \n #[deriving(PartialEq)]\n-pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, OsiOS,\n+pub enum Os { OsWindows, OsMacos, OsLinux, OsAndroid, OsFreebsd, OsiOS,\n               OsDragonfly }\n \n #[deriving(PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n@@ -124,7 +124,7 @@ impl Abi {\n         // Transform this ABI as appropriate for the requested os/arch\n         // combination.\n         Some(match (*self, os, arch) {\n-            (System, OsWin32, X86) => Stdcall,\n+            (System, OsWindows, X86) => Stdcall,\n             (System, _, _) => C,\n             (me, _, _) => me,\n         })\n@@ -147,7 +147,7 @@ impl fmt::Show for Os {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             OsLinux => \"linux\".fmt(f),\n-            OsWin32 => \"win32\".fmt(f),\n+            OsWindows => \"windows\".fmt(f),\n             OsMacos => \"macos\".fmt(f),\n             OsiOS => \"ios\".fmt(f),\n             OsAndroid => \"android\".fmt(f),\n@@ -195,9 +195,9 @@ fn pick_uniplatform() {\n     assert_eq!(Stdcall.for_target(OsLinux, X86), Some(Stdcall));\n     assert_eq!(Stdcall.for_target(OsLinux, Arm), None);\n     assert_eq!(System.for_target(OsLinux, X86), Some(C));\n-    assert_eq!(System.for_target(OsWin32, X86), Some(Stdcall));\n-    assert_eq!(System.for_target(OsWin32, X86_64), Some(C));\n-    assert_eq!(System.for_target(OsWin32, Arm), Some(C));\n-    assert_eq!(Stdcall.for_target(OsWin32, X86), Some(Stdcall));\n-    assert_eq!(Stdcall.for_target(OsWin32, X86_64), Some(Stdcall));\n+    assert_eq!(System.for_target(OsWindows, X86), Some(Stdcall));\n+    assert_eq!(System.for_target(OsWindows, X86_64), Some(C));\n+    assert_eq!(System.for_target(OsWindows, Arm), Some(C));\n+    assert_eq!(Stdcall.for_target(OsWindows, X86), Some(Stdcall));\n+    assert_eq!(Stdcall.for_target(OsWindows, X86_64), Some(Stdcall));\n }"}, {"sha": "606f075d96db4d96c56588250bf24b9737175711", "filename": "src/test/bench/shootout-regex-dna.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -39,7 +39,7 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n // FIXME(#13725) windows needs fixing.\n-// ignore-win32\n+// ignore-windows\n // ignore-stage1\n // ignore-cross-compile #12102\n "}, {"sha": "64ef1abe7de90f019321ff05f4574942d159db09", "filename": "src/test/compile-fail-fulldeps/syntax-extension-regex-invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-invalid.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // FIXME(#13725) windows needs fixing.\n-// ignore-win32\n+// ignore-windows\n // ignore-stage1\n \n #![feature(phase)]"}, {"sha": "8d859c3f7ba2e866bdbcf5733a2f6b34f1280db2", "filename": "src/test/compile-fail-fulldeps/syntax-extension-regex-unused-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // FIXME(#13725) windows needs fixing.\n-// ignore-win32\n+// ignore-windows\n // ignore-stage1\n \n #![feature(phase)]"}, {"sha": "304ad7423b1b25ce39206397b8c4a20cf56aaf8c", "filename": "src/test/compile-fail-fulldeps/syntax-extension-regex-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // FIXME(#13725) windows needs fixing.\n-// ignore-win32\n+// ignore-windows\n // ignore-stage1\n \n #![feature(phase)]"}, {"sha": "8621ce2a47ecb330d8b242be435cce6935cc212b", "filename": "src/test/debuginfo/basic-types-globals-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "c7e43ae2d98ac4049a3eeaeb9b270e3476e791e6", "filename": "src/test/debuginfo/basic-types-globals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -14,7 +14,7 @@\n // about UTF-32 character encoding and will print a rust char as only\n // its numerical value.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "392963b216caffe5b8531e560e8be36ece87c304", "filename": "src/test/debuginfo/basic-types-mut-globals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -14,7 +14,7 @@\n // about UTF-32 character encoding and will print a rust char as only\n // its numerical value.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "a81d42106f9e19f8738615b74b84d8e270ff2223", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "c36642b3069d0f6492b4d33471c74de9186932ff", "filename": "src/test/debuginfo/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "dddd00dfbc5a86d20451c05721057e5de4d4c5ca", "filename": "src/test/debuginfo/simple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "47b4f2cd2a2f4352a8d62cc5db074b542bf4c16f", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "ba8c4d249ce7f4d381354677f543c6ffd0fc79ed", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "00a4cb543097890d5c0fe34abe9f2212a9cdfb64", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13256\n+// ignore-windows: FIXME #13256\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g"}, {"sha": "f487a1c6be5ced06433e50904c9ace67f23442a9", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // no-pretty-expanded FIXME #15189\n-// ignore-win32 FIXME #13259\n+// ignore-windows FIXME #13259\n extern crate native;\n \n use std::os;"}, {"sha": "f987446c6ad4348512130a63b0d38fbca1c9c953", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -17,7 +17,8 @@ mod hello;\n #[cfg(target_os = \"macos\")]\n mod hello;\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+/* NOTE: Remove after snapshot */#[cfg(stage0, target_os = \"win32\")]\n mod hello;\n \n #[cfg(target_os = \"freebsd\")]"}, {"sha": "2ed6b82cad2326a9e5ba6563b63d9c807e56be29", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32 TempDir may cause IoError on windows: #10462\n+// ignore-windows TempDir may cause IoError on windows: #10462\n \n #![feature(macro_rules)]\n "}, {"sha": "5d0a3c085b4f037a411341c66bf0e79afec48388", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -42,7 +42,8 @@ mod m {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+/* NOTE: Remove after snapshot */#[cfg(stage0, target_os = \"win32\")]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "99af544e7865bd8f1087f1ca0c4fa74ce29815b0", "filename": "src/test/run-pass/issue-14393.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fissue-14393.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fissue-14393.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14393.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32: FIXME #13793\n+// ignore-windows: FIXME #13793\n \n fn main() {\n     match (\"\", 1u) {"}, {"sha": "cc5db0af88bea3a162cb662617e9251a7e52e210", "filename": "src/test/run-pass/issue-15487.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fissue-15487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fissue-15487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15487.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32\n+// ignore-windows\n \n #![feature(link_args)]\n "}, {"sha": "f12c66ae7db326b70353a36c4775d2880f35a555", "filename": "src/test/run-pass/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flang-item-public.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:lang-item-public.rs\n // ignore-android\n-// ignore-win32 #13361\n+// ignore-windows #13361\n \n #![no_std]\n "}, {"sha": "5e9e252cefa5158d75280b0fd554944218eead41", "filename": "src/test/run-pass/linkage-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:linkage-visibility.rs\n // ignore-android: FIXME(#10379)\n-// ignore-win32: std::dynamic_lib does not work on win32 well\n+// ignore-windows: std::dynamic_lib does not work on win32 well\n \n extern crate foo = \"linkage-visibility\";\n "}, {"sha": "6d750ac1913541918d6d675f0519785e083a12c2", "filename": "src/test/run-pass/linkage1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage1.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32\n+// ignore-windows\n // ignore-android\n // ignore-macos\n // aux-build:linkage1.rs"}, {"sha": "c1f7e569feb40d575ff2b4e55520531ade37b1ef", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32\n+// ignore-windows\n // exec-env:RUST_LOG=debug\n \n use std::cell::Cell;"}, {"sha": "ebbe7fa65cdf84dfc9d6a9e369b773dbfaf5d145", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-android\n-// ignore-win32\n+// ignore-windows\n // exec-env:RUST_LOG=debug\n \n #![feature(phase)]"}, {"sha": "9d6cab42b5c907e331a7ac2ef888408e17daef79", "filename": "src/test/run-pass/process-detach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-detach.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32\n+// ignore-windows\n // ignore-android\n \n // This test ensures that the 'detach' field on processes does the right thing."}, {"sha": "3a4f877012278daf24eaecae3449483cfb4a3c93", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -55,7 +55,8 @@ mod m {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+/* NOTE: Remove after snapshot */#[cfg(stage0, target_os = \"win32\")]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "ed7145412b0a09ed162d58aa611775bfa562dc73", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32\n+// ignore-windows\n \n extern crate debug;\n "}, {"sha": "264662d7d8bb2b387d35fa67bf8b9b06a6eddd96", "filename": "src/test/run-pass/spawning-with-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32\n+// ignore-windows\n // exec-env:RUST_LOG=debug\n \n // regression test for issue #10405, make sure we don't call println! too soon."}, {"sha": "9ecf5c3940a72a394b141ff159b804a5441a7ef9", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32 TempDir may cause IoError on windows: #10463\n+// ignore-windows TempDir may cause IoError on windows: #10463\n \n // These tests are here to exercise the functionality of the `tempfile` module.\n // One might expect these tests to be located in that module, but sadly they"}, {"sha": "64b914a7438cd02bdcd58ecd591407b29837da46", "filename": "src/test/run-pass/test-runner-hides-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5ec40d452d910148de7c87121acbbe1be8851a/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs?ref=6b5ec40d452d910148de7c87121acbbe1be8851a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:--test\n-// ignore-win32 #10872\n+// ignore-windows #10872\n // ignore-pretty: does not work well with `--test`\n \n // Building as a test runner means that a synthetic main will be run,"}]}