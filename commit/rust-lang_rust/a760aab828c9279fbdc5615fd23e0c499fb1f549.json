{"sha": "a760aab828c9279fbdc5615fd23e0c499fb1f549", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NjBhYWI4MjhjOTI3OWZiZGM1NjE1ZmQyM2UwYzQ5OWZiMWY1NDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-07T08:07:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-07T08:09:42Z"}, "message": "mention 'cargo miri test filter' in README", "tree": {"sha": "7e27323589fe24ac73758ac243820b5699899d84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e27323589fe24ac73758ac243820b5699899d84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a760aab828c9279fbdc5615fd23e0c499fb1f549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a760aab828c9279fbdc5615fd23e0c499fb1f549", "html_url": "https://github.com/rust-lang/rust/commit/a760aab828c9279fbdc5615fd23e0c499fb1f549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a760aab828c9279fbdc5615fd23e0c499fb1f549/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685ad70647c867944128f6c6bacf9483995eff71", "url": "https://api.github.com/repos/rust-lang/rust/commits/685ad70647c867944128f6c6bacf9483995eff71", "html_url": "https://github.com/rust-lang/rust/commit/685ad70647c867944128f6c6bacf9483995eff71"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "fd6110aafa78107d6ba11c312a605979e99a9311", "filename": "README.md", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a760aab828c9279fbdc5615fd23e0c499fb1f549/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a760aab828c9279fbdc5615fd23e0c499fb1f549/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a760aab828c9279fbdc5615fd23e0c499fb1f549", "patch": "@@ -83,31 +83,32 @@ determine a nightly version that comes with Miri and install that using\n \n Now you can run your project in Miri:\n \n-1. Run `cargo clean` to eliminate any cached dependencies.  Miri needs your\n+1. Run `cargo clean` to eliminate any cached dependencies. Miri needs your\n    dependencies to be compiled the right way, that would not happen if they have\n    previously already been compiled.\n 2. To run all tests in your project through Miri, use `cargo miri test`.\n 3. If you have a binary project, you can run it through Miri using `cargo miri run`.\n \n The first time you run Miri, it will perform some extra setup and install some\n-dependencies.  It will ask you for confirmation before installing anything.\n+dependencies. It will ask you for confirmation before installing anything.\n \n-`cargo miri run/test` supports the exact same flags as `cargo run/test`.  You\n-can pass arguments to Miri via `MIRIFLAGS`. For example,\n+`cargo miri run/test` supports the exact same flags as `cargo run/test`. For\n+example, `cargo miri test filter` only runs the tests containing `filter` in\n+their name.\n+\n+You can pass arguments to Miri via `MIRIFLAGS`. For example,\n `MIRIFLAGS=\"-Zmiri-disable-stacked-borrows\" cargo miri run` runs the program\n without checking the aliasing of references.\n \n-When compiling code via `cargo miri`, the `cfg(miri)` config flag is set.  You\n+When compiling code via `cargo miri`, the `cfg(miri)` config flag is set. You\n can use this to ignore test cases that fail under Miri because they do things\n Miri does not support:\n \n ```rust\n #[test]\n #[cfg_attr(miri, ignore)]\n fn does_not_work_on_miri() {\n-    std::thread::spawn(|| println!(\"Hello Thread!\"))\n-        .join()\n-        .unwrap();\n+    tokio::run(futures::future::ok::<_, ()>(()));\n }\n ```\n \n@@ -126,11 +127,11 @@ error: unsupported operation: can't call foreign function: bind\n Miri can not only run a binary or test suite for your host target, it can also\n perform cross-interpretation for arbitrary foreign targets: `cargo miri run\n --target x86_64-unknown-linux-gnu` will run your program as if it was a Linux\n-program, no matter your host OS.  This is particularly useful if you are using\n+program, no matter your host OS. This is particularly useful if you are using\n Windows, as the Linux target is much better supported than Windows targets.\n \n You can also use this to test platforms with different properties than your host\n-platform.  For example `cargo miri test --target mips64-unknown-linux-gnuabi64`\n+platform. For example `cargo miri test --target mips64-unknown-linux-gnuabi64`\n will run your test suite on a big-endian target, which is useful for testing\n endian-sensitive code.\n "}]}