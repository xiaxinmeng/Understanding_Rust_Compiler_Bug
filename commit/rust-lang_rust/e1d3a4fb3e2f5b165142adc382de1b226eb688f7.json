{"sha": "e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZDNhNGZiM2UyZjViMTY1MTQyYWRjMzgyZGUxYjIyNmViNjg4Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T20:45:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T20:45:49Z"}, "message": "auto merge of #5156 : pcwalton/rust/method-privacy, r=pcwalton\n\nr? @brson", "tree": {"sha": "6fe22be7c7b742fc4de6aee8c45cbc011efb181b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fe22be7c7b742fc4de6aee8c45cbc011efb181b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "html_url": "https://github.com/rust-lang/rust/commit/e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b171d0ef7b68fed961597d38e6a474d748243987", "url": "https://api.github.com/repos/rust-lang/rust/commits/b171d0ef7b68fed961597d38e6a474d748243987", "html_url": "https://github.com/rust-lang/rust/commit/b171d0ef7b68fed961597d38e6a474d748243987"}, {"sha": "2859c1ac6d760876282471ae57fee2e5731f85d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2859c1ac6d760876282471ae57fee2e5731f85d5", "html_url": "https://github.com/rust-lang/rust/commit/2859c1ac6d760876282471ae57fee2e5731f85d5"}], "stats": {"total": 563, "additions": 349, "deletions": 214}, "files": [{"sha": "d31fbbb0c07a15079bf3141a95b770b52c914767", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -2304,11 +2304,10 @@ mod farm {\n         farmer: Human\n     }\n \n-    // Note - visibility modifiers on impls currently have no effect\n     impl Farm {\n         priv fn feed_chickens(&self) { ... }\n         priv fn feed_cows(&self) { ... }\n-        fn add_chicken(&self, c: Chicken) { ... }\n+        pub fn add_chicken(&self, c: Chicken) { ... }\n     }\n \n     pub fn feed_animals(farm: &Farm) {"}, {"sha": "6c35c62c3a7050aeba43782de025ed423065dfc4", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -28,7 +28,7 @@ pub pure fn empty_cell<T>() -> Cell<T> {\n     Cell { value: None }\n }\n \n-impl<T> Cell<T> {\n+pub impl<T> Cell<T> {\n     /// Yields the value, failing if the cell is empty.\n     fn take() -> T {\n         if self.is_empty() {"}, {"sha": "da69cd984cd6fc7812552a2241fa29a45976ba38", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -190,7 +190,7 @@ pub fn PortSet<T: Owned>() -> PortSet<T>{\n     }\n }\n \n-impl<T: Owned> PortSet<T> {\n+pub impl<T: Owned> PortSet<T> {\n \n     fn add(port: Port<T>) {\n         self.ports.push(port)\n@@ -323,12 +323,12 @@ pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n     (port, chan)\n }\n \n-impl<T: Owned> PortOne<T> {\n+pub impl<T: Owned> PortOne<T> {\n     fn recv(self) -> T { recv_one(self) }\n     fn try_recv(self) -> Option<T> { try_recv_one(self) }\n }\n \n-impl<T: Owned> ChanOne<T> {\n+pub impl<T: Owned> ChanOne<T> {\n     fn send(self, data: T) { send_one(self, data) }\n     fn try_send(self, data: T) -> bool { try_send_one(self, data) }\n }"}, {"sha": "00048beae5acb831b01f959c49fc0682d370a73f", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -25,7 +25,7 @@ pub struct Condition<T, U> {\n     key: task::local_data::LocalDataKey<Handler<T, U>>\n }\n \n-impl<T, U> Condition<T, U> {\n+pub impl<T, U> Condition<T, U> {\n     fn trap(&self, h: &self/fn(T) -> U) -> Trap/&self<T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n@@ -69,7 +69,7 @@ struct Trap<T, U> {\n     handler: @Handler<T, U>\n }\n \n-impl<T, U> Trap<T, U> {\n+pub impl<T, U> Trap<T, U> {\n     fn in<V>(&self, inner: &self/fn() -> V) -> V {\n         unsafe {\n             let _g = Guard { cond: self.cond };"}, {"sha": "f1f4e55866101b05284475fc77cc6d2505690d25", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -62,7 +62,7 @@ priv impl<T> DListNode<T> {\n     }\n }\n \n-impl<T> DListNode<T> {\n+pub impl<T> DListNode<T> {\n     /// Get the next node in the list, if there is one.\n     pure fn next_link(@mut self) -> DListLink<T> {\n         self.assert_links();\n@@ -208,7 +208,7 @@ priv impl<T> DList<T> {\n     }\n }\n \n-impl<T> DList<T> {\n+pub impl<T> DList<T> {\n     /// Get the size of the list. O(1).\n     pure fn len(@mut self) -> uint { self.size }\n     /// Returns true if the list is empty. O(1).\n@@ -457,7 +457,7 @@ impl<T> DList<T> {\n     }\n }\n \n-impl<T:Copy> DList<T> {\n+pub impl<T:Copy> DList<T> {\n     /// Remove data from the head of the list. O(1).\n     fn pop(@mut self) -> Option<T> {\n         self.pop_n().map(|nobe| nobe.data)"}, {"sha": "1fef4ad42f1de83ab1e2ae4381a3eea2cf3cfbe6", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -92,17 +92,6 @@ priv impl<A> DVec<A> {\n         }\n     }\n \n-    #[inline(always)]\n-    fn check_out<B>(f: &fn(v: ~[A]) -> B) -> B {\n-        unsafe {\n-            let mut data = cast::reinterpret_cast(&null::<()>());\n-            data <-> self.data;\n-            let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n-            return f(data);\n-        }\n-    }\n-\n     #[inline(always)]\n     fn give_back(data: ~[A]) {\n         unsafe {\n@@ -117,7 +106,19 @@ priv impl<A> DVec<A> {\n // In theory, most everything should work with any A, but in practice\n // almost nothing works without the copy bound due to limitations\n // around closures.\n-impl<A> DVec<A> {\n+pub impl<A> DVec<A> {\n+    // FIXME (#3758): This should not need to be public.\n+    #[inline(always)]\n+    fn check_out<B>(f: &fn(v: ~[A]) -> B) -> B {\n+        unsafe {\n+            let mut data = cast::reinterpret_cast(&null::<()>());\n+            data <-> self.data;\n+            let data_ptr: *() = cast::reinterpret_cast(&data);\n+            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n+            return f(data);\n+        }\n+    }\n+\n     /// Reserves space for N elements\n     fn reserve(count: uint) {\n         vec::reserve(&mut self.data, count)\n@@ -215,7 +216,7 @@ impl<A> DVec<A> {\n     }\n }\n \n-impl<A:Copy> DVec<A> {\n+pub impl<A:Copy> DVec<A> {\n     /**\n      * Append all elements of a vector to the end of the list\n      *"}, {"sha": "f888fbdb40cc6421e1bf33a16db0ea4828fd5191", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -43,7 +43,7 @@ pub fn unwrap<T>(m: Mut<T>) -> T {\n     value\n }\n \n-impl<T> Data<T> {\n+pub impl<T> Data<T> {\n     fn borrow_mut<R>(op: &fn(t: &mut T) -> R) -> R {\n         match self.mode {\n             Immutable => fail!(fmt!(\"%? currently immutable\","}, {"sha": "53944c4c2c8252f378f1e13ffad85682075b53cb", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -281,7 +281,7 @@ pub pure fn expect<T>(opt: Option<T>, reason: &str) -> T {\n     }\n }\n \n-impl<T> Option<T> {\n+pub impl<T> Option<T> {\n     /// Returns true if the option equals `none`\n     #[inline(always)]\n     pure fn is_none(&self) -> bool { is_none(self) }\n@@ -393,7 +393,7 @@ impl<T> Option<T> {\n     pure fn expect(self, reason: &str) -> T { expect(self, reason) }\n }\n \n-impl<T:Copy> Option<T> {\n+pub impl<T:Copy> Option<T> {\n     /**\n     Gets the value out of an option\n \n@@ -421,7 +421,7 @@ impl<T:Copy> Option<T> {\n     }\n }\n \n-impl<T:Copy + Zero> Option<T> {\n+pub impl<T:Copy + Zero> Option<T> {\n     #[inline(always)]\n     pure fn get_or_zero(self) -> T { get_or_zero(self) }\n }"}, {"sha": "4e0e4e93cf5ae29a01f88b814c9dd95de1853d8a", "filename": "src/libcore/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -241,7 +241,7 @@ mod stat {\n }\n \n \n-impl Path {\n+pub impl Path {\n     fn stat(&self) -> Option<libc::stat> {\n         unsafe {\n              do str::as_c_str(self.to_str()) |buf| {\n@@ -290,7 +290,7 @@ impl Path {\n #[cfg(target_os = \"freebsd\")]\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n-impl Path {\n+pub impl Path {\n     fn get_atime(&self) -> Option<(i64, int)> {\n         match self.stat() {\n             None => None,\n@@ -324,7 +324,7 @@ impl Path {\n \n #[cfg(target_os = \"freebsd\")]\n #[cfg(target_os = \"macos\")]\n-impl Path {\n+pub impl Path {\n     fn get_birthtime(&self) -> Option<(i64, int)> {\n         match self.stat() {\n             None => None,\n@@ -337,7 +337,7 @@ impl Path {\n }\n \n #[cfg(target_os = \"win32\")]\n-impl Path {\n+pub impl Path {\n     fn get_atime(&self) -> Option<(i64, int)> {\n         match self.stat() {\n             None => None,"}, {"sha": "6389ec086159502778374c31e629d3e82d2c0148", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -800,7 +800,7 @@ pub fn SendPacketBuffered<T,Tbuffer>(p: *Packet<T>)\n     }\n }\n \n-impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n+pub impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;\n@@ -857,7 +857,7 @@ impl<T:Owned,Tbuffer:Owned> ::ops::Drop for RecvPacketBuffered<T,Tbuffer> {\n     }\n }\n \n-impl<T:Owned,Tbuffer:Owned> RecvPacketBuffered<T, Tbuffer> {\n+pub impl<T:Owned,Tbuffer:Owned> RecvPacketBuffered<T, Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;"}, {"sha": "7968fdce46e7a88df2084ffb1c73bd59efbe12a3", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -335,7 +335,7 @@ fn LittleLock() -> LittleLock {\n     }\n }\n \n-impl LittleLock {\n+pub impl LittleLock {\n     #[inline(always)]\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n         struct Unlock {\n@@ -381,7 +381,7 @@ impl<T:Owned> Clone for Exclusive<T> {\n     }\n }\n \n-impl<T:Owned> Exclusive<T> {\n+pub impl<T:Owned> Exclusive<T> {\n     // Exactly like std::arc::mutex_arc,access(), but with the little_lock\n     // instead of a proper mutex. Same reason for being unsafe.\n     //"}, {"sha": "616d37a133a9f18af4e6b5fba03105a5754c3cc0", "filename": "src/libcore/private/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fprivate%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fprivate%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fextfmt.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -142,7 +142,7 @@ pub mod ct {\n         next: uint\n     }\n \n-    impl<T> Parsed<T> {\n+    pub impl<T> Parsed<T> {\n         static pure fn new(val: T, next: uint) -> Parsed<T> {\n             Parsed {val: val, next: next}\n         }"}, {"sha": "04a551740a80fb88a476ea87f1c9ba2d349a2050", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -141,7 +141,7 @@ pub struct Weighted<T> {\n }\n \n /// Extension methods for random number generators\n-impl Rng {\n+pub impl Rng {\n     /// Return a random value for a Rand type\n     fn gen<T:Rand>() -> T {\n         Rand::rand(self)"}, {"sha": "2a688482f6186f8e2bf84387b165fd513605d04a", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -45,7 +45,7 @@ pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n     MovePtrAdaptor { inner: v }\n }\n \n-impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n+pub impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n     #[inline(always)]\n     fn bump(sz: uint) {\n       do self.inner.move_ptr() |p| {"}, {"sha": "ab4bdec266cbf8850258be75f0b45112a126db97", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -167,7 +167,7 @@ impl MovePtr for ReprVisitor {\n     }\n }\n \n-impl ReprVisitor {\n+pub impl ReprVisitor {\n \n     // Various helpers for the TyVisitor impl\n "}, {"sha": "ddcd1547841db5ae882b1735bde47563cfc28c6c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -228,7 +228,7 @@ pub pure fn map_err<T:Copy,E,F:Copy>(res: &Result<T, E>, op: fn(&E) -> F)\n     }\n }\n \n-impl<T, E> Result<T, E> {\n+pub impl<T, E> Result<T, E> {\n     #[inline(always)]\n     pure fn get_ref(&self) -> &self/T { get_ref(self) }\n \n@@ -261,7 +261,7 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n-impl<T:Copy,E> Result<T, E> {\n+pub impl<T:Copy,E> Result<T, E> {\n     #[inline(always)]\n     pure fn get(&self) -> T { get(self) }\n \n@@ -271,7 +271,7 @@ impl<T:Copy,E> Result<T, E> {\n     }\n }\n \n-impl<T, E: Copy> Result<T, E> {\n+pub impl<T, E: Copy> Result<T, E> {\n     #[inline(always)]\n     pure fn get_err(&self) -> E { get_err(self) }\n "}, {"sha": "49507897392de428f9dd0ecdb80dd36d9f40a883", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -232,7 +232,7 @@ priv impl TaskBuilder {\n     }\n }\n \n-impl TaskBuilder {\n+pub impl TaskBuilder {\n     /**\n      * Decouple the child task's failure from the parent's. If either fails,\n      * the other will not be killed."}, {"sha": "90d8dcdc235436bc1efe966bcad2416bd5c70ab4", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -155,6 +155,7 @@ pub const tag_lang_items_item_node_id: uint = 0x75;\n \n pub const tag_item_unnamed_field: uint = 0x76;\n pub const tag_items_data_item_struct_ctor: uint = 0x77;\n+pub const tag_items_data_item_visibility: uint = 0x78;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "ae4a223c1ae75a3e98b5ff376844967cfb364af4", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -234,6 +234,14 @@ pub fn struct_dtor(cstore: @mut cstore::CStore, def: ast::def_id)\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::struct_dtor(cdata, def.node)\n }\n+\n+pub fn get_method_visibility(cstore: @mut cstore::CStore,\n+                             def_id: ast::def_id)\n+                          -> ast::visibility {\n+    let cdata = cstore::get_crate_data(cstore, def_id.crate);\n+    decoder::get_method_visibility(cdata, def_id.node)\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "5963d87806093ff05f5633ef03e394401ec96efd", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -151,6 +151,16 @@ fn item_family(item: ebml::Doc) -> Family {\n     }\n }\n \n+fn item_visibility(item: ebml::Doc) -> ast::visibility {\n+    let visibility = reader::get_doc(item, tag_items_data_item_visibility);\n+    match reader::doc_as_u8(visibility) as char {\n+        'y' => ast::public,\n+        'n' => ast::private,\n+        'i' => ast::inherited,\n+        _ => fail!(~\"unknown visibility character\"),\n+    }\n+}\n+\n fn item_method_sort(item: ebml::Doc) -> char {\n     for reader::tagged_docs(item, tag_item_trait_method_sort) |doc| {\n         return str::from_bytes(reader::doc_data(doc))[0] as char;\n@@ -860,7 +870,7 @@ pub fn get_item_attrs(cdata: cmd,\n     }\n }\n \n-pure fn family_to_visibility(family: Family) -> ast::visibility {\n+pure fn struct_field_family_to_visibility(family: Family) -> ast::visibility {\n     match family {\n       PublicField => ast::public,\n       PrivateField => ast::private,\n@@ -883,7 +893,7 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n             result.push(ty::field_ty {\n                 ident: name,\n                 id: did, vis:\n-                family_to_visibility(f),\n+                struct_field_family_to_visibility(f),\n                 mutability: mt,\n             });\n         }\n@@ -900,6 +910,11 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     result\n }\n \n+pub fn get_method_visibility(cdata: cmd, id: ast::node_id)\n+                          -> ast::visibility {\n+    item_visibility(lookup_item(id, cdata.data))\n+}\n+\n fn family_has_type_params(fam: Family) -> bool {\n     match fam {\n       Const | ForeignType | Mod | ForeignMod | PublicField | PrivateField"}, {"sha": "a950cd04d6771407bac2bcf2831d96d949ccda32", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -383,14 +383,26 @@ fn encode_info_for_mod(ecx: @EncodeContext, ebml_w: writer::Encoder,\n     ebml_w.end_tag();\n }\n \n-fn encode_visibility(ebml_w: writer::Encoder, visibility: visibility) {\n+fn encode_struct_field_family(ebml_w: writer::Encoder,\n+                              visibility: visibility) {\n     encode_family(ebml_w, match visibility {\n         public => 'g',\n         private => 'j',\n         inherited => 'N'\n     });\n }\n \n+fn encode_visibility(ebml_w: writer::Encoder, visibility: visibility) {\n+    ebml_w.start_tag(tag_items_data_item_visibility);\n+    let ch = match visibility {\n+        public => 'y',\n+        private => 'n',\n+        inherited => 'i',\n+    };\n+    ebml_w.wr_str(str::from_char(ch));\n+    ebml_w.end_tag();\n+}\n+\n fn encode_self_type(ebml_w: writer::Encoder, self_type: ast::self_ty_) {\n     ebml_w.start_tag(tag_item_trait_method_self_ty);\n \n@@ -456,7 +468,7 @@ fn encode_info_for_struct(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         ebml_w.start_tag(tag_items_data_item);\n         debug!(\"encode_info_for_struct: doing %s %d\",\n                *tcx.sess.str_of(nm), id);\n-        encode_visibility(ebml_w, vis);\n+        encode_struct_field_family(ebml_w, vis);\n         encode_name(ecx, ebml_w, nm);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n@@ -525,6 +537,7 @@ fn encode_info_for_method(ecx: @EncodeContext,\n                           should_inline: bool,\n                           parent_id: node_id,\n                           m: @method,\n+                          parent_visibility: ast::visibility,\n                           owner_generics: &ast::Generics,\n                           method_generics: &ast::Generics) {\n     debug!(\"encode_info_for_method: %d %s %u %u\", m.id,\n@@ -533,6 +546,7 @@ fn encode_info_for_method(ecx: @EncodeContext,\n            method_generics.ty_params.len());\n     ebml_w.start_tag(tag_items_data_item);\n     encode_def_id(ebml_w, local_def(m.id));\n+\n     match m.self_ty.node {\n         ast::sty_static => {\n             encode_family(ebml_w, purity_static_method_family(m.purity));\n@@ -550,6 +564,14 @@ fn encode_info_for_method(ecx: @EncodeContext,\n     encode_name(ecx, ebml_w, m.ident);\n     encode_path(ecx, ebml_w, impl_path, ast_map::path_name(m.ident));\n     encode_self_type(ebml_w, m.self_ty.node);\n+\n+    // Combine parent visibility and this visibility.\n+    let visibility = match m.vis {\n+        ast::inherited => parent_visibility,\n+        vis => vis,\n+    };\n+    encode_visibility(ebml_w, visibility);\n+\n     if len > 0u || should_inline {\n         (ecx.encode_inlined_item)(\n            ecx, ebml_w, impl_path,\n@@ -568,6 +590,7 @@ fn purity_fn_family(p: purity) -> char {\n       extern_fn => 'e'\n     }\n }\n+\n fn purity_static_method_family(p: purity) -> char {\n     match p {\n       unsafe_fn => 'U',\n@@ -757,7 +780,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             match f.node.kind {\n                 named_field(ident, _, vis) => {\n                    ebml_w.start_tag(tag_item_field);\n-                   encode_visibility(ebml_w, vis);\n+                   encode_struct_field_family(ebml_w, vis);\n                    encode_name(ecx, ebml_w, ident);\n                    encode_def_id(ebml_w, local_def(f.node.id));\n                    ebml_w.end_tag();\n@@ -808,12 +831,28 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         let mut impl_path = vec::append(~[], path);\n         impl_path += ~[ast_map::path_name(item.ident)];\n \n+        // If there is a trait reference, treat the methods as always public.\n+        // This is to work around some incorrect behavior in privacy checking:\n+        // when the method belongs to a trait, it should acquire the privacy\n+        // from the trait, not the impl. Forcing the visibility to be public\n+        // makes things sorta work.\n+        let parent_visibility = if opt_trait.is_some() {\n+            ast::public\n+        } else {\n+            item.vis\n+        };\n+\n         for methods.each |m| {\n             index.push(entry {val: m.id, pos: ebml_w.writer.tell()});\n-            encode_info_for_method(ecx, ebml_w, impl_path,\n+            encode_info_for_method(ecx,\n+                                   ebml_w,\n+                                   impl_path,\n                                    should_inline(m.attrs),\n-                                   item.id, *m,\n-                                   generics, &m.generics);\n+                                   item.id,\n+                                   *m,\n+                                   parent_visibility,\n+                                   generics,\n+                                   &m.generics);\n         }\n       }\n       item_trait(ref generics, ref traits, ref ms) => {\n@@ -902,9 +941,15 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             // of provided methods.  I am not sure why this is. -ndm\n             let owner_generics = ast_util::empty_generics();\n \n-            encode_info_for_method(ecx, ebml_w, /*bad*/copy path,\n-                                   true, item.id, *m,\n-                                   &owner_generics, &m.generics);\n+            encode_info_for_method(ecx,\n+                                   ebml_w,\n+                                   /*bad*/copy path,\n+                                   true,\n+                                   item.id,\n+                                   *m,\n+                                   item.vis,\n+                                   &owner_generics,\n+                                   &m.generics);\n         }\n       }\n       item_mac(*) => fail!(~\"item macros unimplemented\")"}, {"sha": "d6af3873999202be3085c15f9fa0941335962baf", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -167,7 +167,7 @@ fn reserve_id_range(sess: Session,\n     ast_util::id_range { min: to_id_min, max: to_id_min }\n }\n \n-impl ExtendedDecodeContext {\n+pub impl ExtendedDecodeContext {\n     fn tr_id(&self, id: ast::node_id) -> ast::node_id {\n         /*!\n          *"}, {"sha": "f1e52d00beed95119ea79b1b4c22b7b6a974748d", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -89,7 +89,7 @@ enum assignment_type {\n     at_swap\n }\n \n-impl assignment_type {\n+pub impl assignment_type {\n     fn checked_by_liveness(&self) -> bool {\n         // the liveness pass guarantees that immutable local variables\n         // are only assigned once; but it doesn't consider &mut\n@@ -106,7 +106,7 @@ impl assignment_type {\n     }\n }\n \n-impl CheckLoanCtxt {\n+pub impl CheckLoanCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.bccx.tcx }\n \n     fn purity(@mut self, scope_id: ast::node_id) -> Option<purity_cause> {"}, {"sha": "c997b4a6b5f43e665c8361e3b5e88a06573479f1", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -289,7 +289,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n     self.root_ub = old_root_ub;\n }\n \n-impl GatherLoanCtxt {\n+pub impl GatherLoanCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.bccx.tcx }\n \n     fn guarantee_adjustments(@mut self,"}, {"sha": "e095c970931316c40cc67e9ee61436eed31c2fe6", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -87,7 +87,7 @@ struct LoanContext {\n     loans: ~[Loan]\n }\n \n-impl LoanContext {\n+pub impl LoanContext {\n     fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n \n     fn loan(&mut self,"}, {"sha": "b432d5a399adbba94e019d07e09d20ed7961d9fb", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -433,7 +433,7 @@ pub fn save_and_restore_managed<T:Copy,U>(save_and_restore_t: @mut T,\n     u\n }\n \n-impl LoanKind {\n+pub impl LoanKind {\n     fn is_freeze(&self) -> bool {\n         match *self {\n             TotalFreeze | PartialFreeze => true,"}, {"sha": "aabcd7a2fe5b153ff0b9df0330241abf5c4fc61b", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -35,7 +35,7 @@ pub enum PreserveCondition {\n     PcIfPure(bckerr)\n }\n \n-impl PreserveCondition {\n+pub impl PreserveCondition {\n     // combines two preservation conditions such that if either of\n     // them requires purity, the result requires purity\n     fn combine(&self, pc: PreserveCondition) -> PreserveCondition {\n@@ -46,7 +46,7 @@ impl PreserveCondition {\n     }\n }\n \n-impl BorrowckCtxt {\n+pub impl BorrowckCtxt {\n     fn preserve(&self,\n                 cmt: cmt,\n                 scope_region: ty::Region,\n@@ -80,7 +80,7 @@ struct PreserveCtxt {\n     root_managed_data: bool\n }\n \n-impl PreserveCtxt {\n+pub impl PreserveCtxt {\n     fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n \n     fn preserve(&self, cmt: cmt) -> bckres<PreserveCondition> {"}, {"sha": "16f1d36e05c7c406e5cb8073170c53d63cd3bd45", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -322,7 +322,7 @@ struct LanguageItemCollector {\n     item_refs: HashMap<@~str, uint>,\n }\n \n-impl LanguageItemCollector {\n+pub impl LanguageItemCollector {\n     fn match_and_collect_meta_item(&self, item_def_id: def_id,\n                                    meta_item: meta_item) {\n         match meta_item.node {"}, {"sha": "b14245afa9a19bac97a4a814f37d622c4f326d9e", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -331,7 +331,7 @@ struct Context {\n     sess: Session\n }\n \n-impl Context {\n+pub impl Context {\n     fn get_level(&self, lint: lint) -> level {\n         get_lint_level(self.curr, lint)\n     }"}, {"sha": "3753c93f13ade1aa30670404854333927d5ca79f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -254,7 +254,7 @@ impl to_str::ToStr for Variable {\n // variable must not be assigned if there is some successor\n // assignment.  And so forth.\n \n-impl LiveNode {\n+pub impl LiveNode {\n     pure fn is_valid(&self) -> bool { **self != uint::max_value }\n }\n \n@@ -334,7 +334,7 @@ fn IrMaps(tcx: ty::ctxt,\n     }\n }\n \n-impl IrMaps {\n+pub impl IrMaps {\n     fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode {\n         let ln = LiveNode(self.num_live_nodes);\n         self.lnks.push(lnk);\n@@ -693,7 +693,7 @@ fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n     }\n }\n \n-impl Liveness {\n+pub impl Liveness {\n     fn live_node(&self, node_id: node_id, span: span) -> LiveNode {\n         match self.ir.live_node_map.find(&node_id) {\n           Some(ln) => ln,\n@@ -1649,7 +1649,7 @@ enum ReadKind {\n     PartiallyMovedValue\n }\n \n-impl @Liveness {\n+pub impl @Liveness {\n     fn check_ret(&self, id: node_id, sp: span, _fk: visit::fn_kind,\n                  entry_ln: LiveNode) {\n         if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {"}, {"sha": "227d262a79e1673b6f7d2647c89c2f57871d0c45", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -312,7 +312,7 @@ impl ToStr for MutabilityCategory {\n     }\n }\n \n-impl MutabilityCategory {\n+pub impl MutabilityCategory {\n     static fn from_mutbl(&self, m: ast::mutability) -> MutabilityCategory {\n         match m {\n             m_imm => McImmutable,"}, {"sha": "d5adfee65af9f64d50e7b58272cb07af8f838230", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -301,7 +301,7 @@ fn compute_modes_for_expr(expr: @expr,\n     cx.consume_expr(expr, v);\n }\n \n-impl UseMode {\n+pub impl UseMode {\n     fn component_mode(&self, expr: @expr) -> UseMode {\n         /*!\n          *\n@@ -316,7 +316,7 @@ impl UseMode {\n     }\n }\n \n-impl VisitContext {\n+pub impl VisitContext {\n     fn consume_exprs(&self,\n                      exprs: &[@expr],\n                      visitor: vt<VisitContext>)"}, {"sha": "e60069e05da81119d0442318bb3610bd9ec5e297", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 61, "deletions": 10, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,18 +14,19 @@\n \n use core::prelude::*;\n \n+use metadata::csearch;\n use middle::ty::{ty_struct, ty_enum};\n use middle::ty;\n-use middle::typeck::{method_map, method_origin, method_param, method_self,\n-                     method_super};\n+use middle::typeck::{method_map, method_origin, method_param, method_self};\n+use middle::typeck::{method_super};\n use middle::typeck::{method_static, method_trait};\n \n use core::dvec::DVec;\n use core::util::ignore;\n use syntax::ast::{def_variant, expr_field, expr_method_call, expr_struct};\n use syntax::ast::{expr_unary, ident, item_struct, item_enum, item_impl};\n use syntax::ast::{item_trait, local_crate, node_id, pat_struct, private};\n-use syntax::ast::{provided, required};\n+use syntax::ast::{provided, public, required};\n use syntax::ast;\n use syntax::ast_map::{node_item, node_method};\n use syntax::ast_map;\n@@ -100,14 +101,52 @@ pub fn check_crate(tcx: ty::ctxt,\n     };\n \n     // Checks that a private method is in scope.\n-    let check_method: @fn(span: span, origin: &method_origin) =\n-            |span, origin| {\n+    let check_method: @fn(span: span,\n+                          origin: &method_origin,\n+                          ident: ast::ident) =\n+            |span, origin, ident| {\n         match *origin {\n             method_static(method_id) => {\n                 if method_id.crate == local_crate {\n                     match tcx.items.find(&method_id.node) {\n                         Some(node_method(method, impl_id, _)) => {\n-                            if method.vis == private &&\n+                            let mut is_private = false;\n+                            if method.vis == private {\n+                                is_private = true;\n+                            } else if method.vis == public {\n+                                is_private = false;\n+                            } else {\n+                                // Look up the enclosing impl.\n+                                if impl_id.crate != local_crate {\n+                                    tcx.sess.span_bug(span,\n+                                                      ~\"local method isn't \\\n+                                                        in local impl?!\");\n+                                }\n+\n+                                match tcx.items.find(&impl_id.node) {\n+                                    Some(node_item(item, _)) => {\n+                                        match item.node {\n+                                            item_impl(_, None, _, _)\n+                                                    if item.vis != public => {\n+                                                is_private = true;\n+                                            }\n+                                            _ => {}\n+                                        }\n+                                    }\n+                                    Some(_) => {\n+                                        tcx.sess.span_bug(span,\n+                                                          ~\"impl wasn't an \\\n+                                                            item?!\");\n+                                    }\n+                                    None => {\n+                                        tcx.sess.span_bug(span,\n+                                                          ~\"impl wasn't in \\\n+                                                            AST map?!\");\n+                                    }\n+                                }\n+                            }\n+\n+                            if is_private &&\n                                     (impl_id.crate != local_crate ||\n                                      !privileged_items\n                                      .contains(&(impl_id.node))) {\n@@ -131,7 +170,15 @@ pub fn check_crate(tcx: ty::ctxt,\n                         }\n                     }\n                 } else {\n-                    // FIXME #4732: External crates.\n+                    let visibility =\n+                        csearch::get_method_visibility(tcx.sess.cstore,\n+                                                       method_id);\n+                    if visibility != public {\n+                        tcx.sess.span_err(span,\n+                                          fmt!(\"method `%s` is private\",\n+                                               *tcx.sess.parse_sess.interner\n+                                                   .get(ident)));\n+                    }\n                 }\n             }\n             method_param(method_param {\n@@ -230,14 +277,16 @@ pub fn check_crate(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span, &(*entry).origin);\n+                                    check_method(expr.span,\n+                                                 &entry.origin,\n+                                                 ident);\n                                 }\n                             }\n                         }\n                         _ => {}\n                     }\n                 }\n-                expr_method_call(base, _, _, _, _) => {\n+                expr_method_call(base, ident, _, _, _) => {\n                     // Ditto\n                     match ty::get(ty::type_autoderef(tcx, ty::expr_ty(tcx,\n                                                           base))).sty {\n@@ -253,7 +302,9 @@ pub fn check_crate(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span, &(*entry).origin);\n+                                    check_method(expr.span,\n+                                                 &entry.origin,\n+                                                 ident);\n                                 }\n                             }\n                         }"}, {"sha": "0dd30af4b71930a64741187d3a60adf20a618707", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -154,7 +154,7 @@ pub enum Dest {\n     Ignore,\n }\n \n-impl Dest {\n+pub impl Dest {\n     fn to_str(&self, ccx: @CrateContext) -> ~str {\n         match *self {\n             SaveIn(v) => fmt!(\"SaveIn(%s)\", val_str(ccx.tn, v)),"}, {"sha": "7105017cd88d2d9a1f88d570614602a749dad0b9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -3714,7 +3714,7 @@ pub enum DtorKind {\n     TraitDtor(def_id)\n }\n \n-impl DtorKind {\n+pub impl DtorKind {\n     pure fn is_not_present(&const self) -> bool {\n         match *self {\n             NoDtor => true,"}, {"sha": "6ad58bc5d4f437e1520997882580a3242b7c6710", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -87,7 +87,7 @@ use syntax::ast;\n // function.\n pub enum Coerce = CombineFields;\n \n-impl Coerce {\n+pub impl Coerce {\n     fn tys(&self, a: ty::t, b: ty::t) -> CoerceResult {\n         debug!(\"Coerce.tys(%s => %s)\",\n                a.inf_str(self.infcx),"}, {"sha": "aff2d599a0ef17fb441712f07586a5de13b1978e", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -551,7 +551,7 @@ struct Snapshot {\n     region_vars_snapshot: uint,\n }\n \n-impl @mut InferCtxt {\n+pub impl @mut InferCtxt {\n     fn combine_fields(&self, a_is_expected: bool,\n                       span: span) -> CombineFields {\n         CombineFields {infcx: *self,\n@@ -643,7 +643,7 @@ fn next_simple_var<V:Copy,T:Copy>(\n     return id;\n }\n \n-impl @mut InferCtxt {\n+pub impl @mut InferCtxt {\n     fn next_ty_var_id(&self) -> TyVid {\n         let id = self.ty_var_counter;\n         self.ty_var_counter += 1;"}, {"sha": "d016a6f790a60764e76e80aa2df75fc16227bd71", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -1218,7 +1218,7 @@ fn TwoRegionsMap() -> TwoRegionsMap {\n     return HashMap();\n }\n \n-impl RegionVarBindings {\n+pub impl RegionVarBindings {\n     fn infer_variable_values(&mut self) -> ~[GraphNodeValue] {\n         let mut graph = self.construct_graph();\n         self.expansion(&mut graph);"}, {"sha": "9701e370ca8ce310986cd8488693b10f214ef831", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -79,7 +79,7 @@ fn setup_env(test_name: &str, source_string: &str) -> Env {\n                 err_messages: messages};\n }\n \n-impl Env {\n+pub impl Env {\n     fn create_region_hierarchy(&self, rh: &RH) {\n         for rh.sub.each |child_rh| {\n             self.create_region_hierarchy(child_rh);"}, {"sha": "f7de1997d537383f04ef3a9c83912dcfccd87993", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -174,7 +174,7 @@ pub struct IndexEntry {\n     link: ~str\n }\n \n-impl Doc {\n+pub impl Doc {\n     fn CrateDoc(&self) -> CrateDoc {\n         option::get(vec::foldl(None, self.pages, |_m, page| {\n             match copy *page {\n@@ -190,7 +190,7 @@ impl Doc {\n }\n \n /// Some helper methods on ModDoc, mostly for testing\n-impl ModDoc {\n+pub impl ModDoc {\n     fn mods(&self) -> ~[ModDoc] {\n         do vec::filter_mapped(self.items) |itemtag| {\n             match copy *itemtag {"}, {"sha": "1a370947d6980b88c978e3b01a7ece7510e0bb93", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -51,7 +51,7 @@ fn test() {\n          fn ifn() { } \\\n          enum ienum { ivar } \\\n          trait itrait { fn a(); } \\\n-         impl int { fn a() { } } \\\n+         pub impl int { fn a() { } } \\\n          type itype = int; \\\n          struct istruct { f: () }\";\n     do astsrv::from_str(source) |srv| {"}, {"sha": "1e2abbe028746e66d192b351f6a3c3609e6f6620", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -30,7 +30,7 @@ use core::util;\n /// As sync::condvar, a mechanism for unlock-and-descheduling and signalling.\n pub struct Condvar { is_mutex: bool, failed: &mut bool, cond: &sync::Condvar }\n \n-impl &Condvar {\n+pub impl &Condvar {\n     /// Atomically exit the associated ARC and block until a signal is sent.\n     #[inline(always)]\n     fn wait() { self.wait_on(0) }\n@@ -158,7 +158,7 @@ impl<T:Owned> Clone for MutexARC<T> {\n     }\n }\n \n-impl<T:Owned> &MutexARC<T> {\n+pub impl<T:Owned> &MutexARC<T> {\n \n     /**\n      * Access the underlying mutable data with mutual exclusion from other\n@@ -301,7 +301,7 @@ pub fn rw_arc_with_condvars<T:Const + Owned>(\n     RWARC { x: unsafe { shared_mutable_state(data) }, cant_nest: () }\n }\n \n-impl<T:Const + Owned> RWARC<T> {\n+pub impl<T:Const + Owned> RWARC<T> {\n     /// Duplicate a rwlock-protected ARC, as arc::clone.\n     fn clone(&self) -> RWARC<T> {\n         RWARC { x: unsafe { clone_shared_mutable_state(&self.x) },\n@@ -310,7 +310,7 @@ impl<T:Const + Owned> RWARC<T> {\n \n }\n \n-impl<T:Const + Owned> &RWARC<T> {\n+pub impl<T:Const + Owned> &RWARC<T> {\n     /**\n      * Access the underlying data mutably. Locks the rwlock in write mode;\n      * other readers and writers will block.\n@@ -445,7 +445,7 @@ pub enum RWWriteMode<T> =\n /// The \"read permission\" token used for RWARC.write_downgrade().\n pub enum RWReadMode<T> = (&T, sync::RWlockReadMode);\n \n-impl<T:Const + Owned> &RWWriteMode<T> {\n+pub impl<T:Const + Owned> &RWWriteMode<T> {\n     /// Access the pre-downgrade RWARC in write mode.\n     fn write<U>(blk: fn(x: &mut T) -> U) -> U {\n         match *self {\n@@ -475,7 +475,7 @@ impl<T:Const + Owned> &RWWriteMode<T> {\n     }\n }\n \n-impl<T:Const + Owned> &RWReadMode<T> {\n+pub impl<T:Const + Owned> &RWReadMode<T> {\n     /// Access the post-downgrade rwlock in read mode.\n     fn read<U>(blk: fn(x: &T) -> U) -> U {\n         match *self {"}, {"sha": "a30ee94a42b0fcd1702d642fbb131931a4c4b9ea", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -161,7 +161,7 @@ unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TypeDesc, bool) {\n     (reinterpret_cast(&(p & !1)), p & 1 == 1)\n }\n \n-impl &Arena {\n+pub impl &Arena {\n     // Functions for the POD part of the arena\n     fn alloc_pod_grow(n_bytes: uint, align: uint) -> *u8 {\n         // Allocate a new chunk."}, {"sha": "cf278b07c9d9898afaa0e88b2f1cb41577493e4d", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -27,7 +27,7 @@ fn small_mask(nbits: uint) -> uint {\n     (1 << nbits) - 1\n }\n \n-impl SmallBitv {\n+pub impl SmallBitv {\n     static fn new(bits: uint) -> SmallBitv {\n         SmallBitv {bits: bits}\n     }\n@@ -124,7 +124,7 @@ fn big_mask(nbits: uint, elem: uint) -> uint {\n     }\n }\n \n-impl BigBitv {\n+pub impl BigBitv {\n     static fn new(storage: ~[uint]) -> BigBitv {\n         BigBitv {storage: storage}\n     }\n@@ -256,7 +256,7 @@ priv impl Bitv {\n \n }\n \n-impl Bitv {\n+pub impl Bitv {\n     static fn new(nbits: uint, init: bool) -> Bitv {\n         let rep = if nbits <= uint::bits {\n             Small(~SmallBitv::new(if init {!0} else {0}))\n@@ -591,7 +591,7 @@ pub struct BitvSet {\n     priv bitv: BigBitv\n }\n \n-impl BitvSet {\n+pub impl BitvSet {\n     /// Creates a new bit vector set with initially no contents\n     static fn new() -> BitvSet {\n         BitvSet{ size: 0, bitv: BigBitv::new(~[0]) }"}, {"sha": "4d8c60a6614bc3074f8961e20768b3d192860996", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -37,7 +37,7 @@ impl<T> Mutable for Deque<T> {\n     }\n }\n \n-impl<T> Deque<T> {\n+pub impl<T> Deque<T> {\n     static pure fn new() -> Deque<T> {\n         Deque{nelts: 0, lo: 0, hi: 0,\n               elts: vec::from_fn(initial_capacity, |_| None)}"}, {"sha": "7d04f6760793ee3759df174030e7cb5f34dfeda5", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -279,7 +279,7 @@ pub mod reader {\n         }\n     }\n \n-    impl Decoder {\n+    pub impl Decoder {\n         fn read_opaque<R>(&self, op: fn(Doc) -> R) -> R {\n             do self.push_doc(self.next_doc(EsOpaque)) {\n                 op(copy self.parent)\n@@ -451,7 +451,7 @@ pub mod writer {\n     }\n \n     // FIXME (#2741): Provide a function to write the standard ebml header.\n-    impl Encoder {\n+    pub impl Encoder {\n         fn start_tag(tag_id: uint) {\n             debug!(\"Start tag %u\", tag_id);\n \n@@ -571,7 +571,7 @@ pub mod writer {\n         }\n     }\n \n-    impl Encoder {\n+    pub impl Encoder {\n         fn emit_opaque(&self, f: fn()) {\n             do self.wr_tag(EsOpaque as uint) {\n                 f()"}, {"sha": "b9c7c9f3a1386c3ca7b3b6f6037f45d21ec97628", "filename": "src/libstd/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -49,14 +49,14 @@ priv enum FutureState<A> {\n }\n \n /// Methods on the `future` type\n-impl<A:Copy> Future<A> {\n+pub impl<A:Copy> Future<A> {\n     fn get() -> A {\n         //! Get the value of the future\n         *(self.get_ref())\n     }\n }\n \n-impl<A> Future<A> {\n+pub impl<A> Future<A> {\n \n     pure fn get_ref(&self) -> &self/A {\n         /*!"}, {"sha": "dcbf7e60d8956072c959f704ea7fd2a5f9b4378c", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -820,7 +820,7 @@ pub fn socket_buf(sock: TcpSocket) -> TcpSocketBuf {\n }\n \n /// Convenience methods extending `net::tcp::tcp_socket`\n-impl TcpSocket {\n+pub impl TcpSocket {\n     pub fn read_start() -> result::Result<@Port<\n         result::Result<~[u8], TcpErrData>>, TcpErrData> {\n         read_start(&self)"}, {"sha": "1d21f749b32a6a31b8fab0ec993f490d1e79965e", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -134,7 +134,9 @@ pub mod chained {\n             }\n             self.chains = new_chains;\n         }\n+    }\n \n+    pub impl<K:Eq + IterBytes + Hash,V> T<K, V> {\n         pure fn each_entry(blk: fn(@Entry<K,V>) -> bool) {\n             // n.b. we can't use vec::iter() here because self.chains\n             // is stored in a mutable location.\n@@ -168,7 +170,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq + IterBytes + Hash,V> T<K, V> {\n+    pub impl<K:Eq + IterBytes + Hash,V> T<K, V> {\n         pure fn contains_key(&self, k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n@@ -252,7 +254,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq + IterBytes + Hash + Copy,V:Copy> T<K, V> {\n+    pub impl<K:Eq + IterBytes + Hash + Copy,V:Copy> T<K, V> {\n         pure fn find(&self, k: &K) -> Option<V> {\n             match self.search_tbl(k, k.hash_keyed(0,0) as uint) {\n               NotFound => None,\n@@ -325,7 +327,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq + IterBytes + Hash + Copy + ToStr,V:ToStr + Copy> T<K, V> {\n+    pub impl<K:Eq + IterBytes + Hash + Copy + ToStr,V:ToStr + Copy> T<K, V> {\n         fn to_writer(wr: io::Writer) {\n             if self.count == 0u {\n                 wr.write_str(~\"{}\");"}, {"sha": "4b92bd7543a7d1c84adab51f5b5b05da4b4961b7", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -48,7 +48,7 @@ impl<T:Ord> Mutable for PriorityQueue<T> {\n     fn clear(&mut self) { self.data.truncate(0) }\n }\n \n-impl <T:Ord> PriorityQueue<T> {\n+pub impl <T:Ord> PriorityQueue<T> {\n     /// Returns the greatest item in the queue - fails if empty\n     pure fn top(&self) -> &self/T { &self.data[0] }\n "}, {"sha": "43fab9df1631e953626f119b060b2c360efe683a", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -404,7 +404,7 @@ fn MergeState<T>() -> MergeState<T> {\n     }\n }\n \n-impl<T:Copy + Ord> MergeState<T> {\n+pub impl<T:Copy + Ord> MergeState<T> {\n     fn push_run(&self, run_base: uint, run_len: uint) {\n         let tmp = RunState{base: run_base, len: run_len};\n         self.runs.push(tmp);"}, {"sha": "22325e6a83c6d96ff3398e6cabbda661041e0558", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -100,7 +100,7 @@ fn new_sem_and_signal(count: int, num_condvars: uint)\n }\n \n #[doc(hidden)]\n-impl<Q:Owned> &Sem<Q> {\n+pub impl<Q:Owned> &Sem<Q> {\n     fn acquire() {\n         let mut waiter_nobe = None;\n         unsafe {\n@@ -136,7 +136,7 @@ impl<Q:Owned> &Sem<Q> {\n }\n // FIXME(#3154) move both copies of this into Sem<Q>, and unify the 2 structs\n #[doc(hidden)]\n-impl &Sem<()> {\n+pub impl &Sem<()> {\n     fn access<U>(blk: fn() -> U) -> U {\n         let mut release = None;\n         unsafe {\n@@ -149,7 +149,7 @@ impl &Sem<()> {\n     }\n }\n #[doc(hidden)]\n-impl &Sem<~[Waitqueue]> {\n+pub impl &Sem<~[Waitqueue]> {\n     fn access<U>(blk: fn() -> U) -> U {\n         let mut release = None;\n         unsafe {\n@@ -192,7 +192,7 @@ pub struct Condvar { priv sem: &Sem<~[Waitqueue]> }\n \n impl Drop for Condvar { fn finalize(&self) {} }\n \n-impl &Condvar {\n+pub impl &Condvar {\n     /**\n      * Atomically drop the associated lock, and block until a signal is sent.\n      *\n@@ -344,7 +344,7 @@ fn check_cvar_bounds<U>(out_of_bounds: Option<uint>, id: uint, act: &str,\n }\n \n #[doc(hidden)]\n-impl &Sem<~[Waitqueue]> {\n+pub impl &Sem<~[Waitqueue]> {\n     // The only other place that condvars get built is rwlock_write_mode.\n     fn access_cond<U>(blk: fn(c: &Condvar) -> U) -> U {\n         do self.access { blk(&Condvar { sem: self }) }\n@@ -370,7 +370,7 @@ impl Clone for Semaphore {\n     }\n }\n \n-impl &Semaphore {\n+pub impl &Semaphore {\n     /**\n      * Acquire a resource represented by the semaphore. Blocks if necessary\n      * until resource(s) become available.\n@@ -418,7 +418,7 @@ impl Clone for Mutex {\n     fn clone(&self) -> Mutex { Mutex { sem: Sem((*self.sem).clone()) } }\n }\n \n-impl &Mutex {\n+pub impl &Mutex {\n     /// Run a function with ownership of the mutex.\n     fn lock<U>(blk: fn() -> U) -> U { (&self.sem).access(blk) }\n \n@@ -467,7 +467,7 @@ pub fn rwlock_with_condvars(num_condvars: uint) -> RWlock {\n                                              read_count: 0 }) }\n }\n \n-impl &RWlock {\n+pub impl &RWlock {\n     /// Create a new handle to the rwlock.\n     fn clone() -> RWlock {\n         RWlock { order_lock:  (&(self.order_lock)).clone(),\n@@ -688,15 +688,15 @@ impl Drop for RWlockWriteMode { fn finalize(&self) {} }\n pub struct RWlockReadMode  { priv lock: &RWlock }\n impl Drop for RWlockReadMode { fn finalize(&self) {} }\n \n-impl &RWlockWriteMode {\n+pub impl &RWlockWriteMode {\n     /// Access the pre-downgrade rwlock in write mode.\n     fn write<U>(blk: fn() -> U) -> U { blk() }\n     /// Access the pre-downgrade rwlock in write mode with a condvar.\n     fn write_cond<U>(blk: fn(c: &Condvar) -> U) -> U {\n         blk(&Condvar { sem: &self.lock.access_lock })\n     }\n }\n-impl &RWlockReadMode {\n+pub impl &RWlockReadMode {\n     /// Access the post-downgrade rwlock in read mode.\n     fn read<U>(blk: fn() -> U) -> U { blk() }\n }"}, {"sha": "15dea83815b2a49fefaf13e8eb43ecfbfdfec8ec", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -47,7 +47,7 @@ pub struct Timespec { sec: i64, nsec: i32 }\n  * -1.2 seconds before the epoch is represented by `Timespec { sec: -2_i64,\n  * nsec: 800_000_000_i32 }`.\n  */\n-impl Timespec {\n+pub impl Timespec {\n     static pure fn new(sec: i64, nsec: i32) -> Timespec {\n         assert nsec >= 0 && nsec < NSEC_PER_SEC;\n         Timespec { sec: sec, nsec: nsec }\n@@ -208,7 +208,7 @@ pub pure fn strftime(format: &str, tm: &Tm) -> ~str {\n     unsafe { do_strftime(format, tm) }\n }\n \n-impl Tm {\n+pub impl Tm {\n     /// Convert time to the seconds from January 1, 1970\n     fn to_timespec() -> Timespec {\n         unsafe {"}, {"sha": "cf863217deb1a6054f26ef10034f4e35471962e4", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -177,7 +177,7 @@ impl<K:Ord,V> Map<K, V> for TreeMap<K, V> {\n     }\n }\n \n-impl <K:Ord,V> TreeMap<K, V> {\n+pub impl <K:Ord,V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n@@ -208,7 +208,7 @@ pub struct TreeMapIterator<K, V> {\n /// tuple with a reference to the key and value. If there are no\n /// more nodes, return `None`.\n fn map_next<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>)\n- -> Option<(&r/K, &r/V)> {\n+                    -> Option<(&r/K, &r/V)> {\n     while !iter.stack.is_empty() || iter.node.is_some() {\n         match *iter.node {\n           Some(ref x) => {\n@@ -480,7 +480,7 @@ impl<T:Ord> Set<T> for TreeSet<T> {\n     }\n }\n \n-impl <T:Ord> TreeSet<T> {\n+pub impl <T:Ord> TreeSet<T> {\n     /// Create an empty TreeSet\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n@@ -518,7 +518,7 @@ struct TreeNode<K, V> {\n     level: uint\n }\n \n-impl <K:Ord,V> TreeNode<K, V> {\n+pub impl <K:Ord,V> TreeNode<K, V> {\n     #[inline(always)]\n     static pure fn new(key: K, value: V) -> TreeNode<K, V> {\n         TreeNode{key: key, value: value, left: None, right: None, level: 1}"}, {"sha": "592ac40e0824f3c7eb6bc2edd8e879d3ef7b8af7", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -132,7 +132,7 @@ impl cmp::Ord for WorkKey {\n     }\n }\n \n-impl WorkKey {\n+pub impl WorkKey {\n     static fn new(kind: &str, name: &str) -> WorkKey {\n     WorkKey { kind: kind.to_owned(), name: name.to_owned() }\n     }\n@@ -168,7 +168,7 @@ struct Database {\n     mut db_dirty: bool\n }\n \n-impl Database {\n+pub impl Database {\n     fn prepare(&mut self, fn_name: &str,\n                declared_inputs: &WorkMap) -> Option<(WorkMap, WorkMap, ~str)>\n     {\n@@ -199,7 +199,7 @@ struct Logger {\n     a: ()\n }\n \n-impl Logger {\n+pub impl Logger {\n     fn info(i: &str) {\n         io::println(~\"workcache: \" + i.to_owned());\n     }\n@@ -254,7 +254,7 @@ fn digest_file(path: &Path) -> ~str {\n     sha.result_str()\n }\n \n-impl Context {\n+pub impl Context {\n \n     static fn new(db: @Mut<Database>,\n                   lg: @Mut<Logger>,\n@@ -356,7 +356,7 @@ impl TPrep for @Mut<Prep> {\n     }\n }\n \n-impl<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>> Work<T> {\n+pub impl<T:Owned+Encodable<json::Encoder>+Decodable<json::Decoder>> Work<T> {\n     static fn new(p: @Mut<Prep>, e: Either<T,PortOne<(Exec,T)>>) -> Work<T> {\n         Work { prep: p, res: Some(e) }\n     }"}, {"sha": "c6994125b26133708540acf8ad483ba5d280b1a9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -162,7 +162,7 @@ pub struct Generics {\n     ty_params: OptVec<TyParam>\n }\n \n-impl Generics {\n+pub impl Generics {\n     fn is_empty(&self) -> bool {\n         self.lifetimes.len() + self.ty_params.len() == 0\n     }"}, {"sha": "7820bb5e964fe983cdd063bd2b04895cd86eac8c", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -38,7 +38,7 @@ enum Junction {\n     Disjunction,\n }\n \n-impl Junction {\n+pub impl Junction {\n     fn to_binop(self) -> binop {\n         match self {\n             Conjunction => and,"}, {"sha": "c04cdbcab1adbd24b25b3f6a298f75d8da4508c5", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -10,12 +10,12 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv mut meows : uint,\n+        priv meows : uint,\n         how_hungry : int,\n     }\n \n     pub impl cat {\n-      priv fn nap() { for uint::range(1, 10000u) |_i|{}}\n+      priv fn nap(&self) { for uint::range(1, 10000u) |_i|{}}\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "92452cbe8fdc41b49fbdc3ee0c3dca69325a6ccd", "filename": "src/test/auxiliary/impl_privacy_xc_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -4,7 +4,7 @@ pub struct Fish {\n     x: int\n }\n \n-impl Fish {\n+pub impl Fish {\n     fn swim(&self) {}\n }\n "}, {"sha": "e7a929547255468a24d360daef58468fb000f1d9", "filename": "src/test/auxiliary/issue_2472_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -11,7 +11,7 @@\n \n enum S = ();\n \n-impl S {\n+pub impl S {\n     fn foo() { }\n }\n "}, {"sha": "5e73b286530db901c4a01a26e6835606f0c1f2f2", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -31,7 +31,7 @@ fn timed(result: &mut float, op: fn()) {\n     *result = (end - start);\n }\n \n-impl Results {\n+pub impl Results {\n     fn bench_int<T:Set<uint>>(&mut self, rng: @rand::Rng, num_keys: uint,\n                                rand_cap: uint, f: fn() -> T) {\n         {"}, {"sha": "9825671bc8aea74734dce21fe6efc0d0990fe3d5", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -40,7 +40,7 @@ fn Noise2DContext() -> ~Noise2DContext {\n     }\n }\n \n-impl Noise2DContext {\n+pub impl Noise2DContext {\n     #[inline(always)]\n     fn get_gradient(&self, x: int, y: int) -> Vec2 {\n         let idx = self.permutations[x & 255] + self.permutations[y & 255];"}, {"sha": "0a2834a95e62edfe85e299427e36372ee923a954", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct cat {\n   how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n \n   fn speak() { self.meows += 1u; }\n }"}, {"sha": "068bb7cd7a61d86eeb1d9ef233e3c9888918a036", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -10,7 +10,7 @@\n \n use core::either::*;\n enum X = Either<(uint,uint),extern fn()>;\n-impl &X {\n+pub impl &X {\n     fn with(blk: fn(x: &Either<(uint,uint),extern fn()>)) {\n         blk(&**self)\n     }"}, {"sha": "2c68429baec926eadd428eca46ed1f1d15cb4c96", "filename": "src/test/compile-fail/borrowck-call-method-from-mut-aliasable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: int,\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn f(&self) {}\n     fn g(&const self) {}\n     fn h(&mut self) {}"}, {"sha": "476a790b85ede49d8db7f85e56a1f22e99ed4707", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n   n: LinearSet<int>,\n }\n \n-impl Foo {\n+pub impl Foo {\n   fn foo(&mut self, fun: fn(&int)) {\n     for self.n.each |f| {\n       fun(f);"}, {"sha": "61cf346ffa4848b41a71c48385c73e3cea94cf9a", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -19,7 +19,7 @@ impl ops::Add<int,int> for Point {\n     }\n }\n \n-impl Point {\n+pub impl Point {\n     fn times(z: int) -> int {\n         self.x * self.y * z\n     }"}, {"sha": "3169b0299a0bbe8ef4d39cf4fcab0927197684a7", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -19,7 +19,7 @@ struct cat {\n   name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n \n   fn eat() -> bool {\n     if self.how_hungry > 0 {"}, {"sha": "9a574b984ca4758a9e2e63d56afc4972cbd57c15", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,6 +14,6 @@ struct cat {\n   tail: int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn meow() { tail += 1; } //~ ERROR: Did you mean: `self.tail`\n }"}, {"sha": "8ec63ddc634c5892eec5c2c7c1a3f5c8751ad9e6", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ pub mod stream {\n         use core::option;\n         use core::pipes;\n \n-        impl<T:Owned> Stream<T> {\n+        pub impl<T:Owned> Stream<T> {\n             pub fn recv() -> extern fn(+v: Stream<T>) -> ::stream::Stream<T> {\n               // resolve really should report just one error here.\n               // Change the test case when it changes."}, {"sha": "e6d16042445e8dbb69320792e14818354e436e9d", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -16,7 +16,7 @@ fn siphash(k0 : u64) {\n         v0: u64,\n     }\n \n-    impl siphash {\n+    pub impl siphash {\n         fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: `k0`."}, {"sha": "530dadd7e90944bdd539ef0282ef48c97a00e1b4", "filename": "src/test/compile-fail/issue-3080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n enum x = ();\n-impl x {\n+pub impl x {\n     unsafe fn with() { } // This should fail\n }\n "}, {"sha": "1207ddcb9a042f6083e82b9ec2e11aa27b3c7c7e", "filename": "src/test/compile-fail/issue-3311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n     u: ~()\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn get_s(&self) -> &self/str {\n         self.s\n     }"}, {"sha": "040bd46ab8c8dd7779308bfdebb6906115b78399", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -13,7 +13,7 @@ struct Obj {\n     member: uint\n }\n \n-impl Obj {\n+pub impl Obj {\n     static pure fn boom() -> bool {\n         return 1+1 == 2\n     }"}, {"sha": "09a3f3d89c46ce57a4643859c13fd13252a6f9b2", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -15,7 +15,7 @@ mod my_mod {\n     pub fn MyStruct () -> MyStruct {\n         MyStruct {priv_field: 4}\n     }\n-    impl MyStruct {\n+    pub impl MyStruct {\n         priv fn happyfun() {}\n     }\n }"}, {"sha": "3a63cdee20c83bc2a4c94f6a390a33f90b30cf89", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -15,7 +15,7 @@ struct cat {\n   how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn eat() {\n     self.how_hungry -= 5;\n   }"}, {"sha": "7414dc5721621b3ce5e7c21bc58685a643586515", "filename": "src/test/compile-fail/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:attempted access of field `nap` on type\n-// xfail-test Cross-crate impl method privacy doesn't work\n // xfail-fast\n // aux-build:cci_class_5.rs\n extern mod cci_class_5;\n use cci_class_5::kitties::*;\n \n fn main() {\n   let nyan : cat = cat(52, 99);\n-  nyan.nap();\n+  nyan.nap();   //~ ERROR method `nap` is private\n }"}, {"sha": "7b64623e16c3e193fd03bd260f0bd47cabb4d8f5", "filename": "src/test/compile-fail/private-method-inherited.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -0,0 +1,15 @@\n+// Tests that inherited visibility applies to methods.\n+\n+mod a {\n+    pub struct Foo;\n+\n+    impl Foo {\n+        fn f(self) {}\n+    }\n+}\n+\n+fn main() {\n+    let x = a::Foo;\n+    x.f();  //~ ERROR method `f` is private\n+}\n+"}, {"sha": "96657edb5b1addcf66ae4de45c68bd2913b25835", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct dog {\n     cats_chased: uint,\n }\n \n-impl dog {\n+pub impl dog {\n     fn chase_cat(&mut self) {\n         let p: &static/mut uint = &mut self.cats_chased; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n         *p += 1u;"}, {"sha": "b9a9e2f38f5aa2299ba990187a033a011e5982d6", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct dog {\n     food: uint,\n }\n \n-impl dog {\n+pub impl dog {\n     fn chase_cat(&mut self) {\n         for uint::range(0u, 10u) |_i| {\n             let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements"}, {"sha": "dc7c7cec65f3fcc7d5d474fd0c603dfaff2cc25b", "filename": "src/test/compile-fail/trait-or-new-type-instead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: implement a trait or new type instead\n-impl <T> Option<T> {\n+pub impl <T> Option<T> {\n     fn foo() { }\n }\n "}, {"sha": "b0a2bc8ec1275a370f70256ac45e8604fd9a30f1", "filename": "src/test/compile-fail/use-after-move-self-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -6,7 +6,7 @@ impl Drop for S {\n     fn finalize(&self) {}\n }\n \n-impl S {\n+pub impl S {\n     fn foo(self) -> int {\n         self.bar();\n         return self.x;  //~ ERROR use of moved value"}, {"sha": "3eded9fd4f39c1370627e3c3fcd5d20bf543d3d7", "filename": "src/test/compile-fail/use-after-move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -2,7 +2,7 @@ struct S {\n     x: ~int\n }\n \n-impl S {\n+pub impl S {\n     fn foo(self) -> int {\n         self.bar();\n         return *self.x;  //~ ERROR use of moved value"}, {"sha": "2ec0b59e13feebcd6fc2772eccba13498c7a6802", "filename": "src/test/run-pass/anon-trait-static-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: int\n }\n \n-impl Foo {\n+pub impl Foo {\n     static fn new() -> Foo {\n         Foo { x: 3 }\n     }"}, {"sha": "1b4c22e80f3e627610f6ef93dc5fb6583e8afdaf", "filename": "src/test/run-pass/auto-ref-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -13,7 +13,7 @@\n \n enum Foo = uint;\n \n-impl Foo {\n+pub impl Foo {\n     fn len(&self) -> uint { **self }\n }\n "}, {"sha": "883cffa792bfbb9c4275ab6b29f11086652633de", "filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: int,\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn f(&const self) {}\n }\n "}, {"sha": "d8612155f6cd7feb480ca0b5f3380112036a91bb", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -2,7 +2,7 @@ struct Wizard {\n     spells: ~[&static/str]\n }\n \n-impl Wizard {\n+pub impl Wizard {\n     fn cast(&mut self) {\n         for self.spells.each |&spell| {\n             io::println(spell);"}, {"sha": "7c5d5c4d126fc4fc510486c94e03427b48877be6", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -18,7 +18,7 @@ struct dog {\n   volume : @mut int,\n }\n \n-impl dog {\n+pub impl dog {\n     priv fn bark() -> int {\n       debug!(\"Woof %u %d\", *self.barks, *self.volume);\n       *self.barks += 1u;\n@@ -55,7 +55,7 @@ impl noisy for cat {\n   fn speak() -> int { self.meow() as int }\n }\n \n-impl cat {\n+pub impl cat {\n   fn meow_count() -> uint { *self.meows }\n }\n "}, {"sha": "581361c154c488a11fec152351a0b59d5316dafc", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -22,7 +22,7 @@ impl noisy for cat {\n   fn speak(&mut self) { self.meow(); }\n }\n \n-impl cat {\n+pub impl cat {\n   fn eat(&mut self) -> bool {\n     if self.how_hungry > 0 {\n         error!(\"OM NOM NOM\");"}, {"sha": "f71675c06be0ab681500b0a57a849e6f2ab7db2d", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -34,7 +34,7 @@ struct cat<T> {\n     name : T,\n }\n \n-impl<T> cat<T> {\n+pub impl<T> cat<T> {\n     fn speak(&mut self) { self.meow(); }\n \n     fn eat(&mut self) -> bool {\n@@ -103,7 +103,7 @@ impl<T> Map<int, T> for cat<T> {\n     }\n }\n \n-impl<T> cat<T> {\n+pub impl<T> cat<T> {\n     pure fn get(&self, k: &int) -> &self/T {\n         match self.find(k) {\n           Some(v) => { v }"}, {"sha": "aa77dbb62c0a7260ccecf17dae2581d236874008", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -20,7 +20,7 @@ struct cat {\n   name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n     fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n             error!(\"OM NOM NOM\");"}, {"sha": "896b139110f26352c43e568216609cf88454a147", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -32,7 +32,7 @@ priv impl cat {\n     }\n }\n \n-impl cat {\n+pub impl cat {\n     fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n             error!(\"OM NOM NOM\");"}, {"sha": "f65bcf7be8e69f4c89dc93a46103d59cedd07339", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct cat {\n   how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n     fn speak(&mut self) { self.meows += 1u; }\n     fn meow_count(&mut self) -> uint { self.meows }\n }"}, {"sha": "654260d8399995a853a449a1cd98104bddc68268", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -15,7 +15,7 @@ struct cat<U> {\n     how_hungry : int,\n }\n \n-impl<U> cat<U> {\n+pub impl<U> cat<U> {\n     fn speak<T>(&mut self, stuff: ~[T]) {\n         self.meows += stuff.len();\n     }"}, {"sha": "728deff8e2db49dbc8661d1f0e5f23bf5940d763", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -18,7 +18,7 @@ struct cat {\n     name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n     fn speak(&mut self) { self.meow(); }\n \n     fn eat(&mut self) -> bool {"}, {"sha": "29354c54d8ba096521bb80e01d0ae78738504b3f", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct cat<U> {\n     how_hungry : int,\n }\n \n-impl<U> cat<U> {\n+pub impl<U> cat<U> {\n     fn speak(&mut self) { self.meows += 1u; }\n     fn meow_count(&mut self) -> uint { self.meows }\n }"}, {"sha": "505537af7a1bc77bbc5287bb170cb34a7a6b5f10", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct cat {\n     how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn speak(&mut self) {}\n }\n "}, {"sha": "0d8d7fc37a915ba19100ec6bb0175dfa528c5a2b", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -15,7 +15,7 @@ struct cat {\n     name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n     fn speak(&mut self) { self.meow(); }\n \n     fn eat(&mut self) -> bool {"}, {"sha": "35f963d8fb9912d56699a6e44e3c1d32be70bf79", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -2,7 +2,7 @@ struct SpeechMaker {\n     speeches: uint\n }\n \n-impl SpeechMaker {\n+pub impl SpeechMaker {\n     pure fn how_many(&self) -> uint { self.speeches }\n }\n "}, {"sha": "fd47c262d6a7d225bfb9cae5ce65b64eb00ab18b", "filename": "src/test/run-pass/coerce-reborrow-mut-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -2,7 +2,7 @@ struct SpeechMaker {\n     speeches: uint\n }\n \n-impl SpeechMaker {\n+pub impl SpeechMaker {\n     fn talk(&mut self) {\n         self.speeches += 1;\n     }"}, {"sha": "57cfdd2f9d4708880696d49d99ce6c05537b63b8", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -11,7 +11,7 @@\n enum E { V, VV(int) }\n const C: E = V;\n \n-impl E {\n+pub impl E {\n     fn method(&self) {\n         match *self {\n             V => {}"}, {"sha": "e019140d1a015103ae0612a6c5c16c45720a4844", "filename": "src/test/run-pass/explicit-self-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct Box {\n     x: uint\n }\n \n-impl Box {\n+pub impl Box {\n     fn set_many(&mut self, xs: &[uint]) {\n         for xs.each |x| { self.x = *x; }\n     }"}, {"sha": "5df155e4ad3fc4dc4481df4ef4e7ca9a2d1045fd", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -30,7 +30,7 @@ fn linear_map<K,V>() -> LinearMap<K,V> {\n         size: 0})\n }\n \n-impl<K,V> LinearMap<K,V> {\n+pub impl<K,V> LinearMap<K,V> {\n     fn len(&mut self) -> uint {\n         self.size\n     }"}, {"sha": "885eb9837a7109878ead989304819d1419a44d32", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -26,7 +26,7 @@ fn compute_area(shape: &shape) -> float {\n     }\n }\n \n-impl shape {\n+pub impl shape {\n     // self is in the implicit self region\n     fn select<T>(&self, threshold: float,\n                  a: &r/T, b: &r/T) -> &r/T {\n@@ -54,7 +54,7 @@ fn thing(x: A) -> thing {\n     }\n }\n \n-impl thing {\n+pub impl thing {\n     fn foo(@self) -> int { *self.x.a }\n     fn bar(~self) -> int { *self.x.a }\n     fn quux(&self) -> int { *self.x.a }"}, {"sha": "88e220670ba2c2f859e87924676b6fe8b6da3771", "filename": "src/test/run-pass/impl-implicit-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -13,7 +13,7 @@ enum option_<T> {\n     some_(T),\n }\n \n-impl<T> option_<T> {\n+pub impl<T> option_<T> {\n     fn foo() -> bool { true }\n }\n \n@@ -22,7 +22,7 @@ enum option__ {\n     some__(int)\n }\n \n-impl option__ {\n+pub impl option__ {\n     fn foo() -> bool { true }\n }\n "}, {"sha": "f60db84eb865f8803d8a5de987933ff65cb458b2", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -13,7 +13,7 @@ struct foo<A> {\n     x: A,\n }\n \n-impl<A:Copy> foo<A> {\n+pub impl<A:Copy> foo<A> {\n    fn bar<B,C:clam<A>>(c: C) -> B {\n      fail!();\n    }"}, {"sha": "9e45a6b53c2b63f3f303a198f02156a38b7417ab", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ trait clam<A> { }\n \n enum foo = int;\n \n-impl foo {\n+pub impl foo {\n     fn bar<B,C:clam<B>>(c: C) -> B { fail!(); }\n }\n "}, {"sha": "73bf97ad7af8dfae85a7bef4c6dd069134850e7a", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct c1<T> {\n     x: T,\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f1(x: int) {\n     }\n }\n@@ -23,7 +23,7 @@ fn c1<T:Copy>(x: T) -> c1<T> {\n     }\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f2(x: int) {\n     }\n }"}, {"sha": "973b8d851611cde926a65b7969f2ac9123729b85", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct c1<T> {\n     x: T,\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f1(x: T) {}\n }\n \n@@ -22,7 +22,7 @@ fn c1<T:Copy>(x: T) -> c1<T> {\n     }\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f2(x: T) {}\n }\n "}, {"sha": "33023db5323fcf625a400462c9a2273fb9fd567f", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -17,7 +17,7 @@ impl Drop for socket {\n     fn finalize(&self) {}\n }\n \n-impl socket {\n+pub impl socket {\n \n     fn set_identity()  {\n         do closure {"}, {"sha": "57e5aa39864c06f6a109abb937b977cbe83db84a", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct font {\n     fontbuf: &self/~[u8],\n }\n \n-impl font {\n+pub impl font {\n     fn buf() -> &self/~[u8] {\n         self.fontbuf\n     }"}, {"sha": "9ecc46c17ac346d00b7e0d3acb3f20d63d812a26", "filename": "src/test/run-pass/issue-3220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3220.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -19,7 +19,7 @@ fn thing() -> thing {\n         x: 0\n     }\n }\n-impl thing { fn f(self) {} }\n+pub impl thing { fn f(self) {} }\n \n pub fn main() {\n     let z = thing();"}, {"sha": "2f7cb998e1ae6d687697d733d0ae833f71404cd1", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -13,7 +13,7 @@ struct list<T> {\n     next: Option<@mut list<T>>\n }\n \n-impl<T> list<T>{\n+pub impl<T> list<T>{\n     fn addEnd(&mut self, element: &self/T) {\n         let newList = list {\n             element: element,"}, {"sha": "b113e902963b5eefb10765ea969cd53bd3745d40", "filename": "src/test/run-pass/issue-3860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3860.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -10,7 +10,7 @@\n \n struct Foo { x: int }\n \n-impl Foo {\n+pub impl Foo {\n     fn stuff(&mut self) -> &self/mut Foo {\n         return self;\n     }"}, {"sha": "1a09a8b860f8454f627d7f9b4c89de2a9663134a", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -23,7 +23,7 @@ struct X {\n     err: ErrPrinter\n }\n \n-impl X {\n+pub impl X {\n     fn boom() {\n         exit(self.err, \"prog\", \"arg\");\n     }"}, {"sha": "56c16d928741d5e61b6113882220bb6d7e03c77a", "filename": "src/test/run-pass/max-min-classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n     y: int,\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn sum() -> int {\n         self.x + self.y\n     }"}, {"sha": "d84646957283a77411fb1313d175c1cee02d9a93", "filename": "src/test/run-pass/move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fmove-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fmove-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-self.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -2,7 +2,7 @@ struct S {\n     x: ~str\n }\n \n-impl S {\n+pub impl S {\n     fn foo(self) {\n         self.bar();\n     }"}, {"sha": "2f2930dbab7c7f3e8eff839ce4203b78137de864", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     i: int,\n   }\n \n-  impl b {\n+  pub impl b {\n     fn do_stuff() -> int { return 37; }\n   }\n "}, {"sha": "b56f7fa961e2db117c722b2beeb338cce7404955", "filename": "src/test/run-pass/operator-overloading-explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -12,7 +12,7 @@ struct S {\n     x: int\n }\n \n-impl S {\n+pub impl S {\n     pure fn add(&self, other: &S) -> S {\n         S { x: self.x + other.x }\n     }"}, {"sha": "0abb758bd7e8eb7cce620e9945f95802232d462e", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct cat {\n     how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn meow_count(&mut self) -> uint { self.meows }\n }\n "}, {"sha": "1fab77cb5c8672d01ca59b506ded367e1faffc14", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -14,7 +14,7 @@ struct cat {\n     how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n     fn play(&mut self) {\n         self.meows += 1u;\n         self.nap();"}, {"sha": "98e42bd7b4df82052fd9f483693859bedebd9789", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -30,7 +30,7 @@ fn align(size: uint, align: uint) -> uint {\n \n enum ptr_visit_adaptor<V> = Inner<V>;\n \n-impl<V:TyVisitor + movable_ptr> ptr_visit_adaptor<V> {\n+pub impl<V:TyVisitor + movable_ptr> ptr_visit_adaptor<V> {\n \n     #[inline(always)]\n     fn bump(sz: uint) {\n@@ -478,7 +478,7 @@ struct Stuff {\n     vals: ~[~str]\n }\n \n-impl my_visitor {\n+pub impl my_visitor {\n     fn get<T>(f: fn(T)) {\n         unsafe {\n             f(*(self.ptr1 as *T));"}, {"sha": "2b00aea2b4cef68f1b1162941b6d99626858cd92", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d3a4fb3e2f5b165142adc382de1b226eb688f7/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=e1d3a4fb3e2f5b165142adc382de1b226eb688f7", "patch": "@@ -18,7 +18,7 @@ impl Drop for shrinky_pointer {\n     }\n }\n \n-impl shrinky_pointer {\n+pub impl shrinky_pointer {\n   fn look_at() -> int { return **(self.i); }\n }\n "}]}