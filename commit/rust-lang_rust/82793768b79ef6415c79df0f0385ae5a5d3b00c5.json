{"sha": "82793768b79ef6415c79df0f0385ae5a5d3b00c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzkzNzY4Yjc5ZWY2NDE1Yzc5ZGYwZjAzODVhZTVhNWQzYjAwYzU=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-07T21:43:24Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-07T21:43:24Z"}, "message": "Handle methods with an immediate negation in the non-minimal boolean lint, fixes #1930.", "tree": {"sha": "27a7ed1de70151e26b828f5c1ef56c472a3a8f3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a7ed1de70151e26b828f5c1ef56c472a3a8f3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82793768b79ef6415c79df0f0385ae5a5d3b00c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82793768b79ef6415c79df0f0385ae5a5d3b00c5", "html_url": "https://github.com/rust-lang/rust/commit/82793768b79ef6415c79df0f0385ae5a5d3b00c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82793768b79ef6415c79df0f0385ae5a5d3b00c5/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088555c4ead9a9194ab7d055c7abdee31db4e17b", "url": "https://api.github.com/repos/rust-lang/rust/commits/088555c4ead9a9194ab7d055c7abdee31db4e17b", "html_url": "https://github.com/rust-lang/rust/commit/088555c4ead9a9194ab7d055c7abdee31db4e17b"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "86d1f2fb9eeac8b2a7b9e099659682bc2519f641", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/82793768b79ef6415c79df0f0385ae5a5d3b00c5/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82793768b79ef6415c79df0f0385ae5a5d3b00c5/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=82793768b79ef6415c79df0f0385ae5a5d3b00c5", "patch": "@@ -44,6 +44,13 @@ declare_lint! {\n     \"boolean expressions that contain terminals which can be eliminated\"\n }\n \n+const METHODS_WITH_NEGATION: [(&str, &str); 4] = [\n+    (\"is_some\", \"is_none\"),\n+    (\"is_none\", \"is_some\"),\n+    (\"is_err\", \"is_ok\"),\n+    (\"is_ok\", \"is_err\"),\n+];\n+\n #[derive(Copy, Clone)]\n pub struct NonminimalBool;\n \n@@ -396,6 +403,28 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn handle_method_call_in_not(&mut self, e: &'tcx Expr, inner: &'tcx Expr) {\n+        if let ExprMethodCall(ref path, _, _) = inner.node {\n+            METHODS_WITH_NEGATION.iter().for_each(|&(method, negation_method)| {\n+                if method == path.name.as_str() {\n+                    span_lint_and_then(\n+                        self.cx,\n+                        NONMINIMAL_BOOL,\n+                        e.span,\n+                        \"this boolean expression can be simplified\",\n+                        |db| {\n+                            db.span_suggestion(\n+                                e.span,\n+                                \"try\",\n+                                negation_method.to_owned()\n+                            );\n+                        }\n+                    )\n+                }\n+            })\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n@@ -406,6 +435,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         match e.node {\n             ExprBinary(binop, _, _) if binop.node == BiOr || binop.node == BiAnd => self.bool_expr(e),\n             ExprUnary(UnNot, ref inner) => if self.cx.tables.node_types()[inner.hir_id].is_bool() {\n+                self.handle_method_call_in_not(e, inner);\n                 self.bool_expr(e);\n             } else {\n                 walk_expr(self, e);"}, {"sha": "a3c37fecfdc114172ffc21cf746d09d705af4ecd", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82793768b79ef6415c79df0f0385ae5a5d3b00c5/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82793768b79ef6415c79df0f0385ae5a5d3b00c5/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=82793768b79ef6415c79df0f0385ae5a5d3b00c5", "patch": "@@ -38,3 +38,17 @@ fn equality_stuff() {\n     let _ = a > b && a == b;\n     let _ = a != b || !(a != b || c == d);\n }\n+\n+#[allow(unused, many_single_char_names)]\n+fn methods_with_negation() {\n+    let a: Option<i32> = unimplemented!();\n+    let b: Result<i32, i32> = unimplemented!();\n+    let _ = a.is_some();\n+    let _ = !a.is_some();\n+    let _ = a.is_none();\n+    let _ = !a.is_none();\n+    let _ = b.is_err();\n+    let _ = !b.is_err();\n+    let _ = b.is_ok();\n+    let _ = !b.is_ok();\n+}"}, {"sha": "b7256ee0f3aab996fe00f3046c75e36f1f963deb", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/82793768b79ef6415c79df0f0385ae5a5d3b00c5/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82793768b79ef6415c79df0f0385ae5a5d3b00c5/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=82793768b79ef6415c79df0f0385ae5a5d3b00c5", "patch": "@@ -130,3 +130,27 @@ help: try\n 39 |     let _ = !(a == b && c == d);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:47:13\n+   |\n+47 |     let _ = !a.is_some();\n+   |             ^^^^^^^^^^^^ help: try: `is_none`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:49:13\n+   |\n+49 |     let _ = !a.is_none();\n+   |             ^^^^^^^^^^^^ help: try: `is_some`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:51:13\n+   |\n+51 |     let _ = !b.is_err();\n+   |             ^^^^^^^^^^^ help: try: `is_ok`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:53:13\n+   |\n+53 |     let _ = !b.is_ok();\n+   |             ^^^^^^^^^^ help: try: `is_err`\n+"}]}