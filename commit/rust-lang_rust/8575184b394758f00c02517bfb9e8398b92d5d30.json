{"sha": "8575184b394758f00c02517bfb9e8398b92d5d30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzUxODRiMzk0NzU4ZjAwYzAyNTE3YmZiOWU4Mzk4YjkyZDVkMzA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-11-28T17:10:37Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "Fix rebase breakage", "tree": {"sha": "a8cf503d57bf99e4bc52e2175bc98cc51ff4514f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8cf503d57bf99e4bc52e2175bc98cc51ff4514f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8575184b394758f00c02517bfb9e8398b92d5d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8575184b394758f00c02517bfb9e8398b92d5d30", "html_url": "https://github.com/rust-lang/rust/commit/8575184b394758f00c02517bfb9e8398b92d5d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8575184b394758f00c02517bfb9e8398b92d5d30/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf298aebfdd06d967aeb884b964f80b58c539723", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf298aebfdd06d967aeb884b964f80b58c539723", "html_url": "https://github.com/rust-lang/rust/commit/bf298aebfdd06d967aeb884b964f80b58c539723"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "d055506a38226b8277316b9a3f4a729544cac274", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=8575184b394758f00c02517bfb9e8398b92d5d30", "patch": "@@ -140,7 +140,7 @@ pub struct NativeLibrary {\n pub struct InlinedItem {\n     pub def_id: DefId,\n     pub body: P<hir::Expr>,\n-    pub const_fn_args: Vec<DefId>,\n+    pub const_fn_args: Vec<Option<DefId>>,\n }\n \n /// A borrowed version of `hir::InlinedItem`. This is what's encoded when saving\n@@ -149,11 +149,14 @@ pub struct InlinedItem {\n pub struct InlinedItemRef<'a> {\n     pub def_id: DefId,\n     pub body: &'a hir::Expr,\n-    pub const_fn_args: Vec<DefId>,\n+    pub const_fn_args: Vec<Option<DefId>>,\n }\n \n-fn get_fn_args(tcx: TyCtxt, decl: &hir::FnDecl) -> Vec<DefId> {\n-    decl.inputs.iter().map(|arg| tcx.expect_def(arg.pat.id).def_id()).collect()\n+fn get_fn_args(decl: &hir::FnDecl) -> Vec<Option<DefId>> {\n+    decl.inputs.iter().map(|arg| match arg.pat.node {\n+        hir::PatKind::Binding(_, def_id, _, _) => Some(def_id),\n+        _ => None\n+    }).collect()\n }\n \n impl<'a> InlinedItemRef<'a> {\n@@ -163,7 +166,7 @@ impl<'a> InlinedItemRef<'a> {\n                                -> InlinedItemRef<'a> {\n         let (body, args) = match item.node {\n             hir::ItemFn(ref decl, _, _, _, _, body_id) =>\n-                (tcx.map.expr(body_id), get_fn_args(tcx, decl)),\n+                (tcx.map.expr(body_id), get_fn_args(decl)),\n             hir::ItemConst(_, ref body) => (&**body, Vec::new()),\n             _ => bug!(\"InlinedItemRef::from_item wrong kind\")\n         };\n@@ -199,7 +202,7 @@ impl<'a> InlinedItemRef<'a> {\n                                     -> InlinedItemRef<'a> {\n         let (body, args) = match item.node {\n             hir::ImplItemKind::Method(ref sig, body_id) =>\n-                (tcx.map.expr(body_id), get_fn_args(tcx, &sig.decl)),\n+                (tcx.map.expr(body_id), get_fn_args(&sig.decl)),\n             hir::ImplItemKind::Const(_, ref body) =>\n                 (&**body, Vec::new()),\n             _ => bug!(\"InlinedItemRef::from_impl_item wrong kind\")"}, {"sha": "0de56d15c32af29ec27e81f403b9c8251ccb9401", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=8575184b394758f00c02517bfb9e8398b92d5d30", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn visit_path(&mut self, path: &'tcx hir::Path, id: ast::NodeId) {\n-        self.lookup_and_handle_definition(id);\n+        self.handle_definition(id, path.def);\n         intravisit::walk_path(self, path);\n     }\n }"}, {"sha": "ecf5aad6fe2425b2cb237930d54bb5326a23c5c5", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=8575184b394758f00c02517bfb9e8398b92d5d30", "patch": "@@ -328,8 +328,12 @@ impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for MissingStabilityAnnotations<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &Item) {\n+impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n+    }\n+\n+    fn visit_item(&mut self, i: &'tcx Item) {\n         match i.node {\n             // Inherent impls and foreign modules serve only as containers for other items,\n             // they don't have their own stability. They still can be annotated as unstable\n@@ -343,35 +347,35 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MissingStabilityAnnotations<'a, 'tcx> {\n         intravisit::walk_item(self, i)\n     }\n \n-    fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n         self.check_missing_stability(ti.id, ti.span);\n         intravisit::walk_trait_item(self, ti);\n     }\n \n-    fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n         let impl_def_id = self.tcx.map.local_def_id(self.tcx.map.get_parent(ii.id));\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n             self.check_missing_stability(ii.id, ii.span);\n         }\n         intravisit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_variant(&mut self, var: &Variant, g: &Generics, item_id: NodeId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: NodeId) {\n         self.check_missing_stability(var.node.data.id(), var.span);\n         intravisit::walk_variant(self, var, g, item_id);\n     }\n \n-    fn visit_struct_field(&mut self, s: &StructField) {\n+    fn visit_struct_field(&mut self, s: &'tcx StructField) {\n         self.check_missing_stability(s.id, s.span);\n         intravisit::walk_struct_field(self, s);\n     }\n \n-    fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n         self.check_missing_stability(i.id, i.span);\n         intravisit::walk_foreign_item(self, i);\n     }\n \n-    fn visit_macro_def(&mut self, md: &hir::MacroDef) {\n+    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n         if md.imported_from.is_none() {\n             self.check_missing_stability(md.id, md.span);\n         }"}, {"sha": "9a92e9e70feb4e65681b36c07e59db7ada659871", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8575184b394758f00c02517bfb9e8398b92d5d30", "patch": "@@ -1280,13 +1280,13 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             }\n             Some(ast_map::NodeExpr(expr)) => {\n                 // This is a convenience to allow closures to work.\n-                if let hir::ExprClosure(.., ref body, _) = expr.node {\n+                if let hir::ExprClosure(.., body, _) = expr.node {\n                     let def_id = tcx.map.local_def_id(id);\n                     let base_def_id = tcx.closure_base_def_id(def_id);\n                     tcx.construct_parameter_environment(\n                         expr.span,\n                         base_def_id,\n-                        tcx.region_maps.call_site_extent(id, body.id))\n+                        tcx.region_maps.call_site_extent(id, body.node_id()))\n                 } else {\n                     tcx.empty_parameter_environment()\n                 }"}, {"sha": "9fcab1239899fed2b44055026b324cb5f3ee3c80", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=8575184b394758f00c02517bfb9e8398b92d5d30", "patch": "@@ -868,15 +868,18 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n               Some(ConstFnNode::Inlined(ii)) => (ii.const_fn_args.clone(), ii.body.expr_id()),\n               Some(ConstFnNode::Local(fn_like)) =>\n                   (fn_like.decl().inputs.iter()\n-                   .map(|arg| tcx.expect_def(arg.pat.id).def_id()).collect(),\n+                   .map(|arg| match arg.pat.node {\n+                       hir::PatKind::Binding(_, def_id, _, _) => Some(def_id),\n+                       _ => None\n+                   }).collect(),\n                    fn_like.body()),\n               None => signal!(e, NonConstPath),\n           };\n           let result = tcx.map.expr(body_id);\n           assert_eq!(arg_defs.len(), args.len());\n \n           let mut call_args = DefIdMap();\n-          for (arg, arg_expr) in arg_defs.iter().zip(args.iter()) {\n+          for (arg, arg_expr) in arg_defs.into_iter().zip(args.iter()) {\n               let arg_hint = ty_hint.erase_hint();\n               let arg_val = eval_const_expr_partial(\n                   tcx,\n@@ -885,7 +888,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   fn_args\n               )?;\n               debug!(\"const call arg: {:?}\", arg);\n-              if let PatKind::Binding(_, def_id, _, _) = arg.pat.node {\n+              if let Some(def_id) = arg {\n                 assert!(call_args.insert(def_id, arg_val).is_none());\n               }\n           }"}, {"sha": "1823d38024339a64ef7acbe95a0d11c409d258c2", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=8575184b394758f00c02517bfb9e8398b92d5d30", "patch": "@@ -61,7 +61,7 @@ pub fn check_crate(sess: &Session, map: &Map) {\n \n impl<'a, 'ast> Visitor<'ast> for CheckLoopVisitor<'a, 'ast> {\n     fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n-        Some(&self.map)\n+        Some(&self.hir_map)\n     }\n \n     fn visit_item(&mut self, i: &'ast hir::Item) {"}, {"sha": "5e80572634fff453ca0103cf1b7721c00a0e736d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8575184b394758f00c02517bfb9e8398b92d5d30/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8575184b394758f00c02517bfb9e8398b92d5d30", "patch": "@@ -1067,8 +1067,12 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n+    }\n+\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let tcx = self.tcx;\n         let min = |vis1: ty::Visibility, vis2| {\n             if vis1.is_at_least(vis2, &tcx.map) { vis2 } else { vis1 }\n@@ -1171,11 +1175,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n         }\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) {\n         // handled in `visit_item` above\n     }\n \n-    fn visit_ty(&mut self, ty: &hir::Ty) {\n+    fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n         if let hir::TyImplTrait(..) = ty.node {\n             // Check the traits being exposed, as they're separate,\n             // e.g. `impl Iterator<Item=T>` has two predicates,\n@@ -1189,9 +1193,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n     }\n \n     // Don't recurse into expressions in array sizes or const initializers\n-    fn visit_expr(&mut self, _: &hir::Expr) {}\n+    fn visit_expr(&mut self, _: &'tcx hir::Expr) {}\n     // Don't recurse into patterns in function arguments\n-    fn visit_pat(&mut self, _: &hir::Pat) {}\n+    fn visit_pat(&mut self, _: &'tcx hir::Pat) {}\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}