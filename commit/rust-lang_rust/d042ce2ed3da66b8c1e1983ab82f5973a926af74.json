{"sha": "d042ce2ed3da66b8c1e1983ab82f5973a926af74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDJjZTJlZDNkYTY2YjhjMWUxOTgzYWI4MmY1OTczYTkyNmFmNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-21T12:18:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-31T23:44:05Z"}, "message": "add a snapshottable hashmap", "tree": {"sha": "f5169459b4b75bfa8fc6f7617a9cce844fbd5bbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5169459b4b75bfa8fc6f7617a9cce844fbd5bbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d042ce2ed3da66b8c1e1983ab82f5973a926af74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d042ce2ed3da66b8c1e1983ab82f5973a926af74", "html_url": "https://github.com/rust-lang/rust/commit/d042ce2ed3da66b8c1e1983ab82f5973a926af74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d042ce2ed3da66b8c1e1983ab82f5973a926af74/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cff88f2a0646297e76539fd90a084d6926fdf7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cff88f2a0646297e76539fd90a084d6926fdf7d", "html_url": "https://github.com/rust-lang/rust/commit/5cff88f2a0646297e76539fd90a084d6926fdf7d"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "00f797d1b9022640241af909f0248fdb6eacce11", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d042ce2ed3da66b8c1e1983ab82f5973a926af74/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d042ce2ed3da66b8c1e1983ab82f5973a926af74/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=d042ce2ed3da66b8c1e1983ab82f5973a926af74", "patch": "@@ -42,6 +42,7 @@ pub mod bitvec;\n pub mod graph;\n pub mod ivar;\n pub mod obligation_forest;\n+pub mod snapshot_map;\n pub mod snapshot_vec;\n pub mod transitive_relation;\n pub mod unify;"}, {"sha": "b3989013d21145044c0a88ffa0b9841711d07e72", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/d042ce2ed3da66b8c1e1983ab82f5973a926af74/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d042ce2ed3da66b8c1e1983ab82f5973a926af74/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=d042ce2ed3da66b8c1e1983ab82f5973a926af74", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use fnv::FnvHashMap;\n+use std::hash::Hash;\n+use std::ops;\n+\n+#[cfg(test)]\n+mod test;\n+\n+pub struct SnapshotMap<K, V>\n+    where K: Hash + Clone + Eq\n+{\n+    map: FnvHashMap<K, V>,\n+    undo_log: Vec<UndoLog<K, V>>,\n+}\n+\n+pub struct Snapshot {\n+    len: usize\n+}\n+\n+enum UndoLog<K, V> {\n+    OpenSnapshot,\n+    CommittedSnapshot,\n+    Inserted(K),\n+    Overwrite(K, V),\n+}\n+\n+impl<K, V> SnapshotMap<K, V>\n+    where K: Hash + Clone + Eq\n+{\n+    pub fn new() -> Self {\n+        SnapshotMap {\n+            map: FnvHashMap(),\n+            undo_log: vec![]\n+        }\n+    }\n+\n+    pub fn insert(&mut self, key: K, value: V) -> bool {\n+        match self.map.insert(key.clone(), value) {\n+            None => {\n+                if !self.undo_log.is_empty() {\n+                    self.undo_log.push(UndoLog::Inserted(key));\n+                }\n+                true\n+            }\n+            Some(old_value) => {\n+                if !self.undo_log.is_empty() {\n+                    self.undo_log.push(UndoLog::Overwrite(key, old_value));\n+                }\n+                false\n+            }\n+        }\n+    }\n+\n+    pub fn remove(&mut self, key: K) -> bool {\n+        match self.map.remove(&key) {\n+            Some(old_value) => {\n+                if !self.undo_log.is_empty() {\n+                    self.undo_log.push(UndoLog::Overwrite(key, old_value));\n+                }\n+                true\n+            }\n+            None => {\n+                false\n+            }\n+        }\n+    }\n+\n+    pub fn get(&self, key: &K) -> Option<&V> {\n+        self.map.get(key)\n+    }\n+\n+    pub fn snapshot(&mut self) -> Snapshot {\n+        self.undo_log.push(UndoLog::OpenSnapshot);\n+        let len = self.undo_log.len() - 1;\n+        Snapshot { len: len }\n+    }\n+\n+    fn assert_open_snapshot(&self, snapshot: &Snapshot) {\n+        assert!(snapshot.len < self.undo_log.len());\n+        assert!(match self.undo_log[snapshot.len] {\n+            UndoLog::OpenSnapshot => true,\n+            _ => false\n+        });\n+    }\n+\n+    pub fn commit(&mut self, snapshot: Snapshot) {\n+        self.assert_open_snapshot(&snapshot);\n+        if snapshot.len == 0 {\n+            // The root snapshot.\n+            self.undo_log.truncate(0);\n+        } else {\n+            self.undo_log[snapshot.len] = UndoLog::CommittedSnapshot;\n+        }\n+    }\n+\n+    pub fn rollback_to(&mut self, snapshot: Snapshot) {\n+        self.assert_open_snapshot(&snapshot);\n+        while self.undo_log.len() > snapshot.len + 1 {\n+            match self.undo_log.pop().unwrap() {\n+                UndoLog::OpenSnapshot => {\n+                    panic!(\"cannot rollback an uncommitted snapshot\");\n+                }\n+\n+                UndoLog::CommittedSnapshot => { }\n+\n+                UndoLog::Inserted(key) => {\n+                    self.map.remove(&key);\n+                }\n+\n+                UndoLog::Overwrite(key, old_value) => {\n+                    self.map.insert(key, old_value);\n+                }\n+            }\n+        }\n+\n+        let v = self.undo_log.pop().unwrap();\n+        assert!(match v { UndoLog::OpenSnapshot => true, _ => false });\n+        assert!(self.undo_log.len() == snapshot.len);\n+    }\n+}\n+\n+impl<'k, K, V> ops::Index<&'k K> for SnapshotMap<K, V>\n+    where K: Hash + Clone + Eq\n+{\n+    type Output = V;\n+    fn index(&self, key: &'k K) -> &V {\n+        &self.map[key]\n+    }\n+}"}, {"sha": "4114082839b0b9a6a3a10e4f9cde5ba9f26c4031", "filename": "src/librustc_data_structures/snapshot_map/test.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d042ce2ed3da66b8c1e1983ab82f5973a926af74/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d042ce2ed3da66b8c1e1983ab82f5973a926af74/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs?ref=d042ce2ed3da66b8c1e1983ab82f5973a926af74", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::SnapshotMap;\n+\n+#[test]\n+fn basic() {\n+    let mut map = SnapshotMap::new();\n+    map.insert(22, \"twenty-two\");\n+    let snapshot = map.snapshot();\n+    map.insert(22, \"thirty-three\");\n+    assert_eq!(map[&22], \"thirty-three\");\n+    map.insert(44, \"fourty-four\");\n+    assert_eq!(map[&44], \"fourty-four\");\n+    assert_eq!(map.get(&33), None);\n+    map.rollback_to(snapshot);\n+    assert_eq!(map[&22], \"twenty-two\");\n+    assert_eq!(map.get(&33), None);\n+    assert_eq!(map.get(&44), None);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn out_of_order() {\n+    let mut map = SnapshotMap::new();\n+    map.insert(22, \"twenty-two\");\n+    let snapshot1 = map.snapshot();\n+    let _snapshot2 = map.snapshot();\n+    map.rollback_to(snapshot1);\n+}\n+\n+#[test]\n+fn nested_commit_then_rollback() {\n+    let mut map = SnapshotMap::new();\n+    map.insert(22, \"twenty-two\");\n+    let snapshot1 = map.snapshot();\n+    let snapshot2 = map.snapshot();\n+    map.insert(22, \"thirty-three\");\n+    map.commit(snapshot2);\n+    assert_eq!(map[&22], \"thirty-three\");\n+    map.rollback_to(snapshot1);\n+    assert_eq!(map[&22], \"twenty-two\");\n+}"}]}