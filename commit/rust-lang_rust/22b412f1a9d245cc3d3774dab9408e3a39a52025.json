{"sha": "22b412f1a9d245cc3d3774dab9408e3a39a52025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYjQxMmYxYTlkMjQ1Y2MzZDM3NzRkYWI5NDA4ZTNhMzlhNTIwMjU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-30T13:25:19Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "find_path WIP", "tree": {"sha": "9651434730d78f05ecceb541f5eb28e99543a084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9651434730d78f05ecceb541f5eb28e99543a084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b412f1a9d245cc3d3774dab9408e3a39a52025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b412f1a9d245cc3d3774dab9408e3a39a52025", "html_url": "https://github.com/rust-lang/rust/commit/22b412f1a9d245cc3d3774dab9408e3a39a52025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b412f1a9d245cc3d3774dab9408e3a39a52025/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877fda04c5a37241b09f155847d7e27b20875b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/877fda04c5a37241b09f155847d7e27b20875b63", "html_url": "https://github.com/rust-lang/rust/commit/877fda04c5a37241b09f155847d7e27b20875b63"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "1ddf5fca6b65bdc5bad5f854eb4eb03335afcf61", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/22b412f1a9d245cc3d3774dab9408e3a39a52025/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b412f1a9d245cc3d3774dab9408e3a39a52025/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=22b412f1a9d245cc3d3774dab9408e3a39a52025", "patch": "@@ -0,0 +1,44 @@\n+//! An algorithm to find a path to refer to a certain item.\n+\n+use crate::{ModuleDefId, path::ModPath, ModuleId};\n+\n+pub fn find_path(item: ModuleDefId, from: ModuleId) -> ModPath {\n+    todo!()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use ra_db::{fixture::WithFixture, SourceDatabase};\n+    use crate::{db::DefDatabase, test_db::TestDB};\n+    use ra_syntax::ast::AstNode;\n+    use hir_expand::hygiene::Hygiene;\n+\n+    /// `code` needs to contain a cursor marker; checks that `find_path` for the\n+    /// item the `path` refers to returns that same path when called from the\n+    /// module the cursor is in.\n+    fn check_found_path(code: &str, path: &str) {\n+        let (db, pos) = TestDB::with_position(code);\n+        let module = db.module_for_file(pos.file_id);\n+        let parsed_path_file = ra_syntax::SourceFile::parse(&format!(\"use {};\", path));\n+        let ast_path = parsed_path_file.syntax_node().descendants().find_map(ra_syntax::ast::Path::cast).unwrap();\n+        let mod_path = ModPath::from_src(ast_path, &Hygiene::new_unhygienic()).unwrap();\n+\n+        let crate_def_map = db.crate_def_map(module.krate);\n+        let resolved = crate_def_map.resolve_path(&db, module.local_id, &mod_path, crate::item_scope::BuiltinShadowMode::Module).0.take_types().unwrap();\n+\n+        let found_path = find_path(resolved, module);\n+\n+        assert_eq!(mod_path, found_path);\n+    }\n+\n+    #[test]\n+    fn same_module() {\n+        let code = r#\"\n+//- /main.rs\n+struct S;\n+<|>\n+\"#;\n+        check_found_path(code, \"S\");\n+    }\n+}"}, {"sha": "ebc12e891d77d5d637b200eb82cc2f25366dd924", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22b412f1a9d245cc3d3774dab9408e3a39a52025/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b412f1a9d245cc3d3774dab9408e3a39a52025/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=22b412f1a9d245cc3d3774dab9408e3a39a52025", "patch": "@@ -37,6 +37,7 @@ pub mod src;\n pub mod child_by_source;\n \n pub mod visibility;\n+pub mod find_path;\n \n #[cfg(test)]\n mod test_db;"}, {"sha": "a403f183f576edc8c3290a4c7b8a88645e104b29", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22b412f1a9d245cc3d3774dab9408e3a39a52025/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b412f1a9d245cc3d3774dab9408e3a39a52025/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=22b412f1a9d245cc3d3774dab9408e3a39a52025", "patch": "@@ -6,6 +6,7 @@ use std::{\n };\n \n use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n+use crate::db::DefDatabase;\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -54,6 +55,18 @@ impl FileLoader for TestDB {\n }\n \n impl TestDB {\n+    pub fn module_for_file(&self, file_id: FileId) -> crate::ModuleId {\n+        for &krate in self.relevant_crates(file_id).iter() {\n+            let crate_def_map = self.crate_def_map(krate);\n+            for (local_id, data) in crate_def_map.modules.iter() {\n+                if data.origin.file_id() == Some(file_id) {\n+                    return crate::ModuleId { krate, local_id };\n+                }\n+            }\n+        }\n+        panic!(\"Can't find module for file\")\n+    }\n+\n     pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<TestDB>> {\n         *self.events.lock().unwrap() = Some(Vec::new());\n         f();"}]}