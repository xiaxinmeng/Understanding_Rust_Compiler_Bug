{"sha": "58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjRmYWMxY2VjYTNkNzVlNTkwOTFiMDllNzFhODkxNGQ2YmQ3ZTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-17T11:09:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-17T11:09:20Z"}, "message": "implement overflowing ops", "tree": {"sha": "d1d15c8b3d13da8db87f92f1684b30c0a88f8b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d15c8b3d13da8db87f92f1684b30c0a88f8b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXY9pgAAoJEFbW7qD8Z6xGBy4P/jE5uBE7r/WuwVyWyKw+uXVh\nxhZbyEE7FUKN/gPGWMBT7ZMLmjdBsiOSEhKS7avyB0WKVD09mFj4hqXh9bG+hYbB\n+yxTMNHAIBUIEdQ/iDGS900VyXRZ14fsdSVZakq+mzG7amOTT3YSH+XWCjGyOP9W\ntsCI3dnPQvNoBLp87r/iFVosOLdnGozBXFAtHqz/bRwZ2zDfHZpqLz6juYSB7t/D\n//8ey5QQZpbRgC8aIFNbl65Z2mmVPbfaIuKZKj+vt92wVE2adLILypz9futXC79E\n1iHtXQuRr7QtRR5bNyX1Pe0/jo1dLIkSdLCieCJfMqZZxaKXs/9IjJL8peMAh5T8\nBF1TSgILus9oqtsj85ut2MXNs5/RY9yqJ4fduqLuVra/scFWZkozIG2Xac2NwdVx\njvygLcg0FE6u+lvTEU6ClBdvClO1f11JjfwCQsBGoAssVk2HTygWOFhYlep4QtNS\n5L5i1YXe5QLPwe9PzX2ev1VAlyqNZwde4Za4h2GwO6HI9kDNBZ5nOgZuXIyST6bA\nocSy+bYaVfD1GzJV84ZF4icit1YNxaLkX+hhuPO1V4s9VKWLB+Bmzyu7EEEKNJXw\nLlPl7rHiMADMxjWrelmu4XELi0+1L4NsjHfMHah7LfVveF1WnfyfUgICVUEOCUqj\nsWs3Jl5rUMyZDNW/fCPF\n=z3bB\n-----END PGP SIGNATURE-----", "payload": "tree d1d15c8b3d13da8db87f92f1684b30c0a88f8b39\nparent 8db0bc0ce9d158ac016d8bec1422d1f01835266f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466161760 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466161760 +0200\n\nimplement overflowing ops"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "html_url": "https://github.com/rust-lang/rust/commit/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db0bc0ce9d158ac016d8bec1422d1f01835266f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db0bc0ce9d158ac016d8bec1422d1f01835266f", "html_url": "https://github.com/rust-lang/rust/commit/8db0bc0ce9d158ac016d8bec1422d1f01835266f"}], "stats": {"total": 141, "additions": 118, "deletions": 23}, "files": [{"sha": "885f5af6321cc86400e574222e50489b17c16e14", "filename": "src/error.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "patch": "@@ -3,6 +3,9 @@ use std::fmt;\n use rustc::mir::repr as mir;\n use rustc::ty::BareFnTy;\n use memory::Pointer;\n+use rustc_const_math::ConstMathErr;\n+use syntax::codemap::Span;\n+use primval::PrimVal;\n \n #[derive(Clone, Debug)]\n pub enum EvalError<'tcx> {\n@@ -24,6 +27,10 @@ pub enum EvalError<'tcx> {\n     Unimplemented(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n+    ArrayIndexOutOfBounds(Span, u64, u64),\n+    Math(Span, ConstMathErr),\n+    InvalidBitShiftRhs(PrimVal),\n+    Overflow(PrimVal, PrimVal, mir::BinOp, PrimVal),\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -58,6 +65,14 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"tried to dereference a function pointer\",\n             EvalError::ExecuteMemory =>\n                 \"tried to treat a memory pointer as a function pointer\",\n+            EvalError::ArrayIndexOutOfBounds(..) =>\n+                \"array index out of bounds\",\n+            EvalError::Math(..) =>\n+                \"mathematical operation failed\",\n+            EvalError::InvalidBitShiftRhs(..) =>\n+                \"bit shift rhs negative or not an int\",\n+            EvalError::Overflow(..) =>\n+                \"mathematical operation overflowed\",\n         }\n     }\n \n@@ -73,6 +88,12 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n             },\n             EvalError::FunctionPointerTyMismatch(expected, got) =>\n                 write!(f, \"tried to call a function of type {:?} through a function pointer of type {:?}\", expected, got),\n+            EvalError::ArrayIndexOutOfBounds(span, len, index) =>\n+                write!(f, \"array index {} out of bounds {} at {:?}\", index, len, span),\n+            EvalError::Math(span, ref err) =>\n+                write!(f, \"mathematical operation at {:?} failed with {:?}\", span, err),\n+            EvalError::Overflow(l, r, op, val) =>\n+                write!(f, \"mathematical operation overflowed: {:?} {} {:?} => {:?}\", l, op.to_hir_binop().as_str(), r, val),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "6d367a3be2ef784a4c6f32effa84494d0bb9603c", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "patch": "@@ -474,15 +474,23 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.frame_mut().block = target;\n             }\n \n-            Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let actual_ptr = self.eval_operand(cond)?;\n-                let actual = self.memory.read_bool(actual_ptr)?;\n-                if actual == expected {\n+            Assert { ref cond, expected, ref msg, target, .. } => {\n+                let cond_ptr = self.eval_operand(cond)?;\n+                if expected == self.memory.read_bool(cond_ptr)? {\n                     self.frame_mut().block = target;\n                 } else {\n-                    panic!(\"unimplemented: jump to {:?} and print {:?}\", cleanup, msg);\n+                    return match *msg {\n+                        mir::AssertMessage::BoundsCheck { ref len, ref index } => {\n+                            let len = self.eval_operand(len).expect(\"can't eval len\");\n+                            let len = self.memory.read_usize(len).expect(\"can't read len\");\n+                            let index = self.eval_operand(index).expect(\"can't eval index\");\n+                            let index = self.memory.read_usize(index).expect(\"can't read index\");\n+                            Err(EvalError::ArrayIndexOutOfBounds(terminator.source_info.span, len, index))\n+                        },\n+                        mir::AssertMessage::Math(ref err) => Err(EvalError::Math(terminator.source_info.span, err.clone())),\n+                    }\n                 }\n-            }\n+            },\n \n             DropAndReplace { .. } => unimplemented!(),\n             Resume => unimplemented!(),\n@@ -922,13 +930,28 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let right_ty = self.operand_ty(right);\n                 let right_val = self.read_primval(right_ptr, right_ty)?;\n \n-                let val = primval::binary_op(bin_op, left_val, right_val)?;\n-                self.memory.write_primval(dest, val)?;\n+                use rustc::ty::layout::Layout::*;\n+                let tup_layout = match *dest_layout {\n+                    Univariant { ref variant, .. } => variant,\n+                    _ => panic!(\"checked bin op returns something other than a tuple\"),\n+                };\n \n-                // FIXME(solson): Find the result type size properly. Perhaps refactor out\n-                // Projection calculations so we can do the equivalent of `dest.1` here.\n-                let s = self.type_size(left_ty);\n-                self.memory.write_bool(dest.offset(s as isize), false)?;\n+                match primval::binary_op(bin_op, left_val, right_val) {\n+                    Ok(val) => {\n+                        let offset = tup_layout.field_offset(0).bytes() as isize;\n+                        self.memory.write_primval(dest.offset(offset), val)?;\n+                        let offset = tup_layout.field_offset(1).bytes() as isize;\n+                        self.memory.write_bool(dest.offset(offset), false)?;\n+                    },\n+                    Err(EvalError::Overflow(l, r, op, val)) => {\n+                        debug!(\"mathematical operation overflowed: {:?} {} {:?} => {:?}\", l, op.to_hir_binop().as_str(), r, val);\n+                        let offset = tup_layout.field_offset(0).bytes() as isize;\n+                        self.memory.write_primval(dest.offset(offset), val)?;\n+                        let offset = tup_layout.field_offset(1).bytes() as isize;\n+                        self.memory.write_bool(dest.offset(offset), true)?;\n+                    },\n+                    Err(other) => return Err(other),\n+                }\n             }\n \n             UnaryOp(un_op, ref operand) => {"}, {"sha": "c881e79e6145d1e3cffde0ff8461267595d44c26", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "patch": "@@ -14,6 +14,7 @@\n extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_trans;\n+extern crate rustc_const_math;\n extern crate syntax;\n #[macro_use] extern crate log;\n extern crate log_settings;"}, {"sha": "b1900874a9a79cd58f85cce9b25f98cbaa3c6836", "filename": "src/primval.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "patch": "@@ -17,21 +17,32 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n     use rustc::mir::repr::BinOp::*;\n     use self::PrimVal::*;\n \n+    macro_rules! overflow {\n+        ($v:ident, $v2:ident, $l:ident, $op:ident, $r:ident) => ({\n+            let (val, of) = $l.$op($r);\n+            if of {\n+                return Err(EvalError::Overflow($v($l), $v2($r), bin_op, $v(val)));\n+            } else {\n+                $v(val)\n+            }\n+        })\n+    }\n+\n     macro_rules! int_binops {\n         ($v:ident, $l:ident, $r:ident) => ({\n             match bin_op {\n-                Add    => $v($l + $r),\n-                Sub    => $v($l - $r),\n-                Mul    => $v($l * $r),\n-                Div    => $v($l / $r),\n-                Rem    => $v($l % $r),\n+                Add    => overflow!($v, $v, $l, overflowing_add, $r),\n+                Sub    => overflow!($v, $v, $l, overflowing_sub, $r),\n+                Mul    => overflow!($v, $v, $l, overflowing_mul, $r),\n+                Div    => overflow!($v, $v, $l, overflowing_div, $r),\n+                Rem    => overflow!($v, $v, $l, overflowing_rem, $r),\n                 BitXor => $v($l ^ $r),\n                 BitAnd => $v($l & $r),\n                 BitOr  => $v($l | $r),\n \n-                // TODO(solson): Can have differently-typed RHS.\n-                Shl => $v($l << $r),\n-                Shr => $v($l >> $r),\n+                // these have already been handled\n+                Shl => unreachable!(),\n+                Shr => unreachable!(),\n \n                 Eq => Bool($l == $r),\n                 Ne => Bool($l != $r),\n@@ -53,6 +64,45 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         }\n     }\n \n+    match bin_op {\n+        // can have rhs with a different numeric type\n+        Shl | Shr => {\n+            let r = match right {\n+                I8(i) if i >= 0 => i as u32,\n+                I16(i) if i >= 0 => i as u32,\n+                I32(i) if i >= 0 => i as u32,\n+                I64(i) if i >= 0 && i as i32 as i64 == i => i as u32,\n+                U8(i) => i as u32,\n+                U16(i) => i as u32,\n+                U32(i) => i,\n+                U64(i) if i as u32 as u64 == i => i as u32,\n+                _ => return Err(EvalError::InvalidBitShiftRhs(right)),\n+            };\n+            macro_rules! shift {\n+                ($v:ident, $l:ident, $r:ident) => ({\n+                    match bin_op {\n+                        Shl => overflow!($v, U32, $l, overflowing_shl, $r),\n+                        Shr => overflow!($v, U32, $l, overflowing_shr, $r),\n+                        _ => unreachable!(),\n+                    }\n+                })\n+            }\n+            let val = match left {\n+                I8(l) => shift!(I8, l, r),\n+                I16(l) => shift!(I16, l, r),\n+                I32(l) => shift!(I32, l, r),\n+                I64(l) => shift!(I64, l, r),\n+                U8(l) => shift!(U8, l, r),\n+                U16(l) => shift!(U16, l, r),\n+                U32(l) => shift!(U32, l, r),\n+                U64(l) => shift!(U64, l, r),\n+                _ => unreachable!(),\n+            };\n+            return Ok(val);\n+        },\n+        _ => {},\n+    }\n+\n     let val = match (left, right) {\n         (I8(l),  I8(r))  => int_binops!(I8, l, r),\n         (I16(l), I16(r)) => int_binops!(I16, l, r),"}, {"sha": "6869eb1eef04c5347a800b8052034de096f04acd", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b4fac1ceca3d75e59091b09e71a8914d6bd7e2/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=58b4fac1ceca3d75e59091b09e71a8914d6bd7e2", "patch": "@@ -79,11 +79,11 @@ fn compile_test() {\n                     writeln!(stderr.lock(), \"FAILED: {}\", e).unwrap();\n                 },\n             }\n+            if failed {\n+                panic!(\"some tests failed\");\n+            }\n         }\n         let stderr = std::io::stderr();\n         writeln!(stderr.lock(), \"\").unwrap();\n     });\n-    if failed {\n-        panic!(\"some tests failed\");\n-    }\n }"}]}