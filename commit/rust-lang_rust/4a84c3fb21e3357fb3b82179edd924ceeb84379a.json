{"sha": "4a84c3fb21e3357fb3b82179edd924ceeb84379a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhODRjM2ZiMjFlMzM1N2ZiM2I4MjE3OWVkZDkyNGNlZWI4NDM3OWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T20:08:34Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T20:08:34Z"}, "message": "Fix unresolved attribute fallback again", "tree": {"sha": "be5bb32dfc5a6853843975b98f99ba8de3f059c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5bb32dfc5a6853843975b98f99ba8de3f059c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a84c3fb21e3357fb3b82179edd924ceeb84379a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a84c3fb21e3357fb3b82179edd924ceeb84379a", "html_url": "https://github.com/rust-lang/rust/commit/4a84c3fb21e3357fb3b82179edd924ceeb84379a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a84c3fb21e3357fb3b82179edd924ceeb84379a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49922cb2c3cd8390891cda9acb88b4b979db8911", "url": "https://api.github.com/repos/rust-lang/rust/commits/49922cb2c3cd8390891cda9acb88b4b979db8911", "html_url": "https://github.com/rust-lang/rust/commit/49922cb2c3cd8390891cda9acb88b4b979db8911"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "02ceb8d5059d66fa70d963942dc25ed86e0bd406", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a84c3fb21e3357fb3b82179edd924ceeb84379a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a84c3fb21e3357fb3b82179edd924ceeb84379a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4a84c3fb21e3357fb3b82179edd924ceeb84379a", "patch": "@@ -246,7 +246,7 @@ struct DefCollector<'a> {\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n     exports_proc_macros: bool,\n     from_glob_import: PerNsGlobImports,\n-    ignore_attrs_on: FxHashSet<ModItem>,\n+    ignore_attrs_on: FxHashSet<InFile<ModItem>>,\n }\n \n impl DefCollector<'_> {\n@@ -372,9 +372,9 @@ impl DefCollector<'_> {\n         let mut added_items = false;\n         let unexpanded_macros = std::mem::replace(&mut self.unexpanded_macros, Vec::new());\n         for directive in &unexpanded_macros {\n-            if let MacroDirectiveKind::Attr { mod_item, .. } = &directive.kind {\n+            if let MacroDirectiveKind::Attr { ast_id, mod_item, .. } = &directive.kind {\n                 // Make sure to only add such items once.\n-                if !self.ignore_attrs_on.insert(*mod_item) {\n+                if !self.ignore_attrs_on.insert(ast_id.ast_id.with_value(*mod_item)) {\n                     continue;\n                 }\n \n@@ -1463,7 +1463,7 @@ impl ModCollector<'_, '_> {\n \n         // We failed to resolve an attribute on this item earlier, and are falling back to treating\n         // the item as-is.\n-        if self.def_collector.ignore_attrs_on.contains(&mod_item) {\n+        if self.def_collector.ignore_attrs_on.contains(&InFile::new(self.file_id, mod_item)) {\n             return Ok(());\n         }\n "}, {"sha": "6eb5f97be15149daba20e8a5eff9f310cc156b41", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4a84c3fb21e3357fb3b82179edd924ceeb84379a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a84c3fb21e3357fb3b82179edd924ceeb84379a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=4a84c3fb21e3357fb3b82179edd924ceeb84379a", "patch": "@@ -706,6 +706,35 @@ fn builtin_derive_with_unresolved_attributes_fall_back() {\n     assert_eq!(map.modules[map.root].scope.impls().len(), 1);\n }\n \n+#[test]\n+fn unresolved_attributes_fall_back_track_per_file_moditems() {\n+    // Tests that we track per-file ModItems when ignoring an unresolved attribute.\n+    // Just tracking the `ModItem` leads to `Foo` getting ignored.\n+\n+    check(\n+        r#\"\n+        //- /main.rs crate:main\n+\n+        mod submod;\n+\n+        #[unresolved]\n+        struct Foo;\n+\n+        //- /submod.rs\n+        #[unresolved]\n+        struct Bar;\n+        \"#,\n+        expect![[r#\"\n+            crate\n+            Foo: t v\n+            submod: t\n+\n+            crate::submod\n+            Bar: t v\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn macro_expansion_overflow() {\n     cov_mark::check!(macro_expansion_overflow);"}]}