{"sha": "d6195fa21f09aa3f987e09d847c156e1788ec834", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTk1ZmEyMWYwOWFhM2Y5ODdlMDlkODQ3YzE1NmUxNzg4ZWM4MzQ=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-13T10:45:58Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-13T12:04:32Z"}, "message": "Fix completion of HashMap::new\n\nThe `ty` function in code_model returned the type with placeholders for type\nparameters. That's nice for printing, but not good for completion, because\nplaceholders won't unify with anything else: So the type we got for `HashMap`\nwas `HashMap<K, V, T>`, which doesn't unify with `HashMap<?, ?, RandomState>`,\nso the `new` method wasn't shown.\n\nNow we instead return `HashMap<{unknown}, {unknown}, {unknown}>`, which does\nunify with the impl type. Maybe we should just expose this properly as variables\nthough, i.e. we'd return something like `exists<type, type, type> HashMap<?0,\n?1, ?2>` (in Chalk notation). It'll make the API more complicated, but harder to\nmisuse. (And it would handle cases like `type TypeAlias<T> = HashMap<T, T>` more\ncorrectly.)", "tree": {"sha": "fda6b0e03da9ef7fc7426dbf785bd6c050e845dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda6b0e03da9ef7fc7426dbf785bd6c050e845dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6195fa21f09aa3f987e09d847c156e1788ec834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6195fa21f09aa3f987e09d847c156e1788ec834", "html_url": "https://github.com/rust-lang/rust/commit/d6195fa21f09aa3f987e09d847c156e1788ec834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6195fa21f09aa3f987e09d847c156e1788ec834/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b44006b8e37a8cd3f96d5b1c949d62e01be2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b44006b8e37a8cd3f96d5b1c949d62e01be2e8", "html_url": "https://github.com/rust-lang/rust/commit/02b44006b8e37a8cd3f96d5b1c949d62e01be2e8"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "ff041150b516c31fd3484b0ab8cd30fb08270b34", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d6195fa21f09aa3f987e09d847c156e1788ec834", "patch": "@@ -311,7 +311,11 @@ impl StructField {\n         self.parent.variant_data(db).fields()[self.id].name.clone()\n     }\n \n-    pub fn ty(&self, db: &impl HirDatabase) -> Type {\n+    /// Returns the type as in the signature of the struct (i.e., with\n+    /// placeholder types for type parameters). This is good for showing\n+    /// signature help, but not so good to actually get the type of the field\n+    /// when you actually have a variable of the struct.\n+    pub fn signature_ty(&self, db: &impl HirDatabase) -> Type {\n         let var_id = self.parent.into();\n         let generic_def_id: GenericDefId = match self.parent {\n             VariantDef::Struct(it) => it.id.into(),\n@@ -485,6 +489,10 @@ impl Adt {\n         let subst = db.generic_defaults(self.into());\n         subst.iter().any(|ty| ty == &Ty::Unknown)\n     }\n+\n+    /// Turns this ADT into a type. Any type parameters of the ADT will be\n+    /// turned into unknown types, which is good for e.g. finding the most\n+    /// general set of completions, but will not look very nice when printed.\n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n         let id = AdtId::from(self);\n         Type::from_def(db, id.module(db).krate, id)\n@@ -1031,7 +1039,7 @@ impl Type {\n         krate: CrateId,\n         def: impl HasResolver + Into<TyDefId> + Into<GenericDefId>,\n     ) -> Type {\n-        let substs = Substs::type_params(db, def);\n+        let substs = Substs::build_for_def(db, def).fill_with_unknown().build();\n         let ty = db.ty(def.into()).subst(&substs);\n         Type::new(db, krate, def, ty)\n     }"}, {"sha": "39d09a07fe391a28e1e70bd3534373f3b1d4d046", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=d6195fa21f09aa3f987e09d847c156e1788ec834", "patch": "@@ -543,6 +543,20 @@ fn main() {\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n+    #[test]\n+    fn generic_struct() {\n+        let info = call_info(\n+            r#\"\n+struct TS<T>(T);\n+fn main() {\n+    let s = TS(<|>);\n+}\"#,\n+        );\n+\n+        assert_eq!(info.label(), \"struct TS<T>(T) -> TS\");\n+        assert_eq!(info.active_parameter, Some(0));\n+    }\n+\n     #[test]\n     #[should_panic]\n     fn cant_call_named_structs() {"}, {"sha": "3db17f15ffe2d223275a30aa4dfe6ba47bd302ef", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=d6195fa21f09aa3f987e09d847c156e1788ec834", "patch": "@@ -1005,4 +1005,36 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn completes_hashmap_new() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct RandomState;\n+                struct HashMap<K, V, S = RandomState> {}\n+\n+                impl<K, V> HashMap<K, V, RandomState> {\n+                    pub fn new() -> HashMap<K, V, RandomState> { }\n+                }\n+                fn foo() {\n+                    HashMap::<|>\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"new()\",\n+                source_range: [292; 292),\n+                delete: [292; 292),\n+                insert: \"new()$0\",\n+                kind: Function,\n+                lookup: \"new\",\n+                detail: \"pub fn new() -> HashMap<K, V, RandomState>\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "910844244563391990767ff4a44006d11e3c10c5", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=d6195fa21f09aa3f987e09d847c156e1788ec834", "patch": "@@ -273,8 +273,10 @@ impl Completions {\n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = variant.name(ctx.db);\n-        let detail_types =\n-            variant.fields(ctx.db).into_iter().map(|field| (field.name(ctx.db), field.ty(ctx.db)));\n+        let detail_types = variant\n+            .fields(ctx.db)\n+            .into_iter()\n+            .map(|field| (field.name(ctx.db), field.signature_ty(ctx.db)));\n         let detail = match variant.kind(ctx.db) {\n             StructKind::Tuple | StructKind::Unit => {\n                 join(detail_types.map(|(_, t)| t.display(ctx.db).to_string()))"}, {"sha": "ec1bbd5a03122dc2729df7949621315aaa7bd1a9", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6195fa21f09aa3f987e09d847c156e1788ec834/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=d6195fa21f09aa3f987e09d847c156e1788ec834", "patch": "@@ -64,7 +64,7 @@ impl FunctionSignature {\n             .fields(db)\n             .into_iter()\n             .map(|field: hir::StructField| {\n-                let ty = field.ty(db);\n+                let ty = field.signature_ty(db);\n                 format!(\"{}\", ty.display(db))\n             })\n             .collect();\n@@ -102,7 +102,7 @@ impl FunctionSignature {\n             .into_iter()\n             .map(|field: hir::StructField| {\n                 let name = field.name(db);\n-                let ty = field.ty(db);\n+                let ty = field.signature_ty(db);\n                 format!(\"{}: {}\", name, ty.display(db))\n             })\n             .collect();"}]}