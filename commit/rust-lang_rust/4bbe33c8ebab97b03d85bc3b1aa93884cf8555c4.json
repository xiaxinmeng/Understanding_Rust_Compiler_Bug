{"sha": "4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYmUzM2M4ZWJhYjk3YjAzZDg1YmMzYjFhYTkzODg0Y2Y4NTU1YzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T00:21:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T00:21:23Z"}, "message": "rustdoc: Write page titles", "tree": {"sha": "666d7bd441ec55b854ee0f4e0e10ba3710a26d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/666d7bd441ec55b854ee0f4e0e10ba3710a26d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4", "html_url": "https://github.com/rust-lang/rust/commit/4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d539927a20476206476847943c48f1a2f99e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d539927a20476206476847943c48f1a2f99e12", "html_url": "https://github.com/rust-lang/rust/commit/78d539927a20476206476847943c48f1a2f99e12"}], "stats": {"total": 87, "additions": 66, "deletions": 21}, "files": [{"sha": "e6144cccab5f8ecd7147b12bc17abe988475266a", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 66, "deletions": 21, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=4bbe33c8ebab97b03d85bc3b1aa93884cf8555c4", "patch": "@@ -91,12 +91,15 @@ fn write_markdown(\n }\n \n fn write_page(ctxt: ctxt, page: doc::page) {\n+    write_title(ctxt, page);\n     alt page {\n       doc::cratepage(doc) {\n         write_crate(ctxt, doc);\n       }\n       doc::itempage(doc) {\n-        write_item(ctxt, doc);\n+        // We don't write a header for item's pages because their\n+        // header in the html output is created by the page title\n+        write_item_no_header(ctxt, doc);\n       }\n     }\n     ctxt.w.write_done();\n@@ -117,6 +120,45 @@ fn should_request_new_writer_for_each_page() {\n     }\n }\n \n+fn write_title(ctxt: ctxt, page: doc::page) {\n+    ctxt.w.write_line(#fmt(\"%% %s\", make_title(page)));\n+    ctxt.w.write_line(\"\");\n+}\n+\n+fn make_title(page: doc::page) -> str {\n+    let item = alt page {\n+      doc::cratepage(cratedoc) {\n+        doc::modtag(cratedoc.topmod)\n+      }\n+      doc::itempage(itemtag) {\n+        itemtag\n+      }\n+    };\n+    let title = markdown_pass::header_text(item);\n+    let title = str::replace(title, \"`\", \"\");\n+    ret title;\n+}\n+\n+#[test]\n+fn should_write_title_for_each_page() {\n+    let (writer_factory, po) = markdown_writer::future_writer_factory();\n+    let (srv, doc) = test::create_doc_srv(\n+        \"#[link(name = \\\"core\\\")]; mod a { }\");\n+    let doc = page_pass::mk_pass(config::doc_per_mod).f(srv, doc);\n+    write_markdown(doc, writer_factory);\n+    iter::repeat(2u) {||\n+        let (page, markdown) = comm::recv(po);\n+        alt page {\n+          doc::cratepage(_) {\n+            assert str::contains(markdown, \"% Crate core\");\n+          }\n+          doc::itempage(_) {\n+            assert str::contains(markdown, \"% Module a\");\n+          }\n+        }\n+    }\n+}\n+\n enum hlvl {\n     h1 = 1,\n     h2 = 2,\n@@ -210,7 +252,6 @@ fn write_crate(\n     ctxt: ctxt,\n     doc: doc::cratedoc\n ) {\n-    write_header(ctxt, h1, doc::modtag(doc.topmod));\n     write_top_module(ctxt, doc.topmod);\n }\n \n@@ -225,7 +266,6 @@ fn write_mod(\n     ctxt: ctxt,\n     moddoc: doc::moddoc\n ) {\n-    write_header(ctxt, h1, doc::modtag(moddoc));\n     write_mod_contents(ctxt, moddoc);\n }\n \n@@ -294,6 +334,18 @@ fn write_mod_contents(\n }\n \n fn write_item(ctxt: ctxt, doc: doc::itemtag) {\n+    write_item_(ctxt, doc, true);\n+}\n+\n+fn write_item_no_header(ctxt: ctxt, doc: doc::itemtag) {\n+    write_item_(ctxt, doc, false);\n+}\n+\n+fn write_item_(ctxt: ctxt, doc: doc::itemtag, write_header: bool) {\n+    if write_header {\n+        write_item_header(ctxt, doc);\n+    }\n+\n     alt doc {\n       doc::modtag(moddoc) { write_mod(ctxt, moddoc) }\n       doc::nmodtag(nmoddoc) { write_nmod(ctxt, nmoddoc) }\n@@ -307,6 +359,17 @@ fn write_item(ctxt: ctxt, doc: doc::itemtag) {\n     }\n }\n \n+fn write_item_header(ctxt: ctxt, doc: doc::itemtag) {\n+    write_header(ctxt, item_header_lvl(doc), doc);\n+}\n+\n+fn item_header_lvl(doc: doc::itemtag) -> hlvl {\n+    alt doc {\n+      doc::modtag(_) | doc::nmodtag(_) { h1 }\n+      _ { h2 }\n+    }\n+}\n+\n #[test]\n fn should_write_crate_description() {\n     let markdown = test::render(\"#[doc = \\\"this is the crate\\\"];\");\n@@ -354,7 +417,6 @@ fn should_not_write_index_if_no_entries() {\n }\n \n fn write_nmod(ctxt: ctxt, doc: doc::nmoddoc) {\n-    write_header(ctxt, h1, doc::nmodtag(doc));\n     write_common(ctxt, doc.desc(), doc.sections());\n \n     for fndoc in doc.fns {\n@@ -379,7 +441,6 @@ fn write_fn(\n     ctxt: ctxt,\n     doc: doc::fndoc\n ) {\n-    write_header(ctxt, h2, doc::fntag(doc));\n     write_fnlike(\n         ctxt,\n         doc.sig,\n@@ -463,7 +524,6 @@ fn write_const(\n     ctxt: ctxt,\n     doc: doc::constdoc\n ) {\n-    write_header(ctxt, h2, doc::consttag(doc));\n     write_sig(ctxt, doc.sig);\n     write_common(ctxt, doc.desc(), doc.sections());\n }\n@@ -486,7 +546,6 @@ fn write_enum(\n     ctxt: ctxt,\n     doc: doc::enumdoc\n ) {\n-    write_header(ctxt, h2, doc::enumtag(doc));\n     write_common(ctxt, doc.desc(), doc.sections());\n     write_variants(ctxt, doc.variants);\n }\n@@ -566,7 +625,6 @@ fn should_write_variant_list_with_signatures() {\n }\n \n fn write_res(ctxt: ctxt, doc: doc::resdoc) {\n-    write_header(ctxt, h2, doc::restag(doc));\n     write_sig(ctxt, doc.sig);\n     write_common(ctxt, doc.desc(), doc.sections());\n }\n@@ -584,7 +642,6 @@ fn should_write_resource_signature() {\n }\n \n fn write_iface(ctxt: ctxt, doc: doc::ifacedoc) {\n-    write_header(ctxt, h2, doc::ifacetag(doc));\n     write_common(ctxt, doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n@@ -631,7 +688,6 @@ fn should_write_iface_method_signature() {\n }\n \n fn write_impl(ctxt: ctxt, doc: doc::impldoc) {\n-    write_header(ctxt, h2, doc::impltag(doc));\n     write_common(ctxt, doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n@@ -673,7 +729,6 @@ fn write_type(\n     ctxt: ctxt,\n     doc: doc::tydoc\n ) {\n-    write_header(ctxt, h2, doc::tytag(doc));\n     write_sig(ctxt, doc.sig);\n     write_common(ctxt, doc.desc(), doc.sections());\n }\n@@ -759,16 +814,6 @@ mod test {\n         ret tuple::second(comm::recv(po));\n     }\n \n-    #[test]\n-    fn write_markdown_should_write_crate_header() {\n-        astsrv::from_str(\"\") {|srv|\n-            let doc = extract::from_srv(srv, \"belch\");\n-            let doc = attr_pass::mk_pass().f(srv, doc);\n-            let markdown = write_markdown_str(doc);\n-            assert str::contains(markdown, \"# Crate `belch`\");\n-        }\n-    }\n-\n     #[test]\n     fn write_markdown_should_write_mod_headers() {\n         let markdown = render(\"mod moo { }\");"}]}