{"sha": "1aa103511b6c52943e54f62992551babef9d4526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTEwMzUxMWI2YzUyOTQzZTU0ZjYyOTkyNTUxYmFiZWY5ZDQ1MjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-25T14:47:56Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-25T14:47:56Z"}, "message": "Rollup merge of #48330 - frewsxcv:frewsxcv-tests-zero-duration, r=sfackler\n\nAdd tests ensuring zero-Duration timeouts result in errors; fix Redox issues.\n\nPart of #48311", "tree": {"sha": "9da99f11e21caf2cb8e83bfa84cff6a2f0c376ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da99f11e21caf2cb8e83bfa84cff6a2f0c376ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa103511b6c52943e54f62992551babef9d4526", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqSzMYACgkQ/vbIBR0O\nATyPqA/+Nm2k92PVdD7+I2hYw81gOLqoC9oc5am/qeGURWgGf1yoDANIocq55Xu2\nfSXjXMwMGTUHburCpkGJNe/K7augZCwk+NprmwnxWtLokD8PWu57j02kSI7IrvEV\n0mIUlKUFdEiXbTrG+XIf+Q+Vki26x95QV9ne9WhjeSc97r7axqHHeP0726SPJPeB\nZwEesbPYGSAiFwJ7xegLttylJoiUUKNdMGf5ZkV9qADmwcYJrr+UJ0LCLWdtbNIw\nxGhAdolWLMq0+ApCupO9eYt3fyzva+gB8WggS+2KiPbAOuPvZIqG+rfoAAq9QZAh\nYjRcfyQNayjYhlQYy7b75MhguTk4I6y4GN/LqQaJcvZLtGLhi5rbq+lQUvMoOEQe\nuOk1bW02IaDv9T3MT7AthIqKtGpswFHk0iBOdZPRyXFyv/E0hq8tekDmv7O9invn\njgeRjQZPEaAKPIt5VeEQcV+L0it0JyZWczgjT6n3VsjbaQj5M2qp7nHmW9b5UhYo\nW/0lHyq9nC0NxmIpwVSUqr5RdZ17EUvmKjmZhN9so7GTaIGQ6t5HZ8ckG/TEELos\nI3Fjt2D8RibjYTkJaFgQyf/9p4DM5k4al+uBN8E1rAf1mLaSuPCZP0XMKbwB3PqG\nyoJ47JGM6oCUiHfaSxhSh5ohKogGaV0NdzW5yNH2+lgC0ZKPDnw=\n=zpB0\n-----END PGP SIGNATURE-----", "payload": "tree 9da99f11e21caf2cb8e83bfa84cff6a2f0c376ee\nparent 0652af21b5b2cedacff71c6e613addbd8d17ec58\nparent a554a2f5645f12cf42d311ac11bcaad594c91347\nauthor kennytm <kennytm@gmail.com> 1519570076 +0800\ncommitter kennytm <kennytm@gmail.com> 1519570076 +0800\n\nRollup merge of #48330 - frewsxcv:frewsxcv-tests-zero-duration, r=sfackler\n\nAdd tests ensuring zero-Duration timeouts result in errors; fix Redox issues.\n\nPart of #48311\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa103511b6c52943e54f62992551babef9d4526", "html_url": "https://github.com/rust-lang/rust/commit/1aa103511b6c52943e54f62992551babef9d4526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa103511b6c52943e54f62992551babef9d4526/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0652af21b5b2cedacff71c6e613addbd8d17ec58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0652af21b5b2cedacff71c6e613addbd8d17ec58", "html_url": "https://github.com/rust-lang/rust/commit/0652af21b5b2cedacff71c6e613addbd8d17ec58"}, {"sha": "a554a2f5645f12cf42d311ac11bcaad594c91347", "url": "https://api.github.com/repos/rust-lang/rust/commits/a554a2f5645f12cf42d311ac11bcaad594c91347", "html_url": "https://github.com/rust-lang/rust/commit/a554a2f5645f12cf42d311ac11bcaad594c91347"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "7931d14ed11662fd9998880ffbc99db88236ec77", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=1aa103511b6c52943e54f62992551babef9d4526", "patch": "@@ -1545,6 +1545,26 @@ mod tests {\n         drop(listener);\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_timeout_zero_duration() {\n+        let addr = next_test_ip4();\n+\n+        let listener = t!(TcpListener::bind(&addr));\n+        let stream = t!(TcpStream::connect(&addr));\n+\n+        let result = stream.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = stream.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        drop(listener);\n+    }\n+\n     #[test]\n     fn nodelay() {\n         let addr = next_test_ip4();"}, {"sha": "b49cc78ac40735de7f5a80190d4dd2fd236681d3", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=1aa103511b6c52943e54f62992551babef9d4526", "patch": "@@ -1024,6 +1024,23 @@ mod tests {\n         assert!(start.elapsed() > Duration::from_millis(400));\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_timeout_zero_duration() {\n+        let addr = next_test_ip4();\n+\n+        let socket = t!(UdpSocket::bind(&addr));\n+\n+        let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+    }\n+\n     #[test]\n     fn connect_send_recv() {\n         let addr = next_test_ip4();"}, {"sha": "b5664908479cfbc342cb3a0dcceeeaa3bc1d581e", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=1aa103511b6c52943e54f62992551babef9d4526", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cmp;\n-use io::{Error, ErrorKind, Result};\n+use io::{self, Error, ErrorKind, Result};\n use mem;\n use net::{SocketAddr, Shutdown};\n use path::Path;\n@@ -130,6 +130,10 @@ impl TcpStream {\n     pub fn set_read_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"read_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32\n@@ -143,6 +147,10 @@ impl TcpStream {\n     pub fn set_write_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"write_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32"}, {"sha": "2ed67bd2836f26fde2dc9006b799c776df7ab3f8", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=1aa103511b6c52943e54f62992551babef9d4526", "patch": "@@ -10,7 +10,7 @@\n \n use cell::UnsafeCell;\n use cmp;\n-use io::{Error, ErrorKind, Result};\n+use io::{self, Error, ErrorKind, Result};\n use mem;\n use net::{SocketAddr, Ipv4Addr, Ipv6Addr};\n use path::Path;\n@@ -179,6 +179,10 @@ impl UdpSocket {\n     pub fn set_read_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"read_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32\n@@ -192,6 +196,10 @@ impl UdpSocket {\n     pub fn set_write_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"write_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32"}, {"sha": "ab4aef1a582343dd002c7bfa3007f73b117d6ecb", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa103511b6c52943e54f62992551babef9d4526/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=1aa103511b6c52943e54f62992551babef9d4526", "patch": "@@ -1410,7 +1410,7 @@ impl IntoRawFd for UnixDatagram {\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod test {\n     use thread;\n-    use io;\n+    use io::{self, ErrorKind};\n     use io::prelude::*;\n     use time::Duration;\n     use sys_common::io::test::tmpdir;\n@@ -1613,6 +1613,27 @@ mod test {\n         assert!(kind == io::ErrorKind::WouldBlock || kind == io::ErrorKind::TimedOut);\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_unix_stream_timeout_zero_duration() {\n+        let dir = tmpdir();\n+        let socket_path = dir.path().join(\"sock\");\n+\n+        let listener = or_panic!(UnixListener::bind(&socket_path));\n+        let stream = or_panic!(UnixStream::connect(&socket_path));\n+\n+        let result = stream.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = stream.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        drop(listener);\n+    }\n+\n     #[test]\n     fn test_unix_datagram() {\n         let dir = tmpdir();\n@@ -1712,6 +1733,24 @@ mod test {\n         thread.join().unwrap();\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_unix_datagram_timeout_zero_duration() {\n+        let dir = tmpdir();\n+        let path = dir.path().join(\"sock\");\n+\n+        let datagram = or_panic!(UnixDatagram::bind(&path));\n+\n+        let result = datagram.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = datagram.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+    }\n+\n     #[test]\n     fn abstract_namespace_not_allowed() {\n         assert!(UnixStream::connect(\"\\0asdf\").is_err());"}]}