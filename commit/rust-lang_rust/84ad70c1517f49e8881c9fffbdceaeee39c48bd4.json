{"sha": "84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YWQ3MGMxNTE3ZjQ5ZTg4ODFjOWZmZmJkY2VhZWVlMzljNDhiZDQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-09T04:27:43Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-09T04:37:52Z"}, "message": "Add ignore config option\n\nFor example, with the following config file, rustfmt will ignore `src/types.rs`,\n`src/foo/bar.rs` and every file under `examples/` directory.\n\n```toml\n[ignore]\nfiles = [\n    \"src/types.rs\",\n    \"src/foo/bar.rs\",\n]\ndirectories = [\n    \"examples\",\n]\n```", "tree": {"sha": "18f094f3c85d958f12f24bdc7b440c19ea4befe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f094f3c85d958f12f24bdc7b440c19ea4befe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "html_url": "https://github.com/rust-lang/rust/commit/84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8298759607952ca13f5be9b2aefd3c89aa40c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8298759607952ca13f5be9b2aefd3c89aa40c4f", "html_url": "https://github.com/rust-lang/rust/commit/c8298759607952ca13f5be9b2aefd3c89aa40c4f"}], "stats": {"total": 135, "additions": 124, "deletions": 11}, "files": [{"sha": "0b2048958e1bc77b702446ba906a4ae61e2dd990", "filename": "Configurations.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "patch": "@@ -2135,3 +2135,32 @@ Copyright 2018 The Rust Project Developers.`, etc.:\n ```\n \n `\\{`, `\\}` and `\\\\` match literal braces / backslashes.\n+\n+## `ignore`\n+\n+Skip formatting the specified files and directories.\n+\n+- **Default value**: format every files\n+- **Possible values**: See an example below\n+- **Stable**: No\n+\n+### Example\n+\n+If you want to ignore specific files, put the following to your config file:\n+\n+```toml\n+[ignore]\n+files = [\n+    \"src/types.rs\",\n+    \"src/foo/bar.rs\",\n+]\n+```\n+\n+If you want to ignore every file under `examples/`, put the following to your config file:\n+\n+```toml\n+[ignore]\n+directories = [\n+    \"examples\",\n+]\n+```"}, {"sha": "4a49ce5a2e6d86044c26f18eb27212913004a8f1", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "patch": "@@ -18,15 +18,14 @@ use std::{env, error};\n use std::fs::File;\n use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n use rustfmt::config::{get_toml_path, Color, Config, WriteMode};\n use rustfmt::config::file_lines::FileLines;\n use rustfmt::{run, FileName, Input, Summary};\n \n-use std::str::FromStr;\n-\n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n "}, {"sha": "53a4fdb8e5794ed983a32fe80cb0ed97d5b09641", "filename": "src/config/config_type.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use config::file_lines::FileLines;\n-use config::options::WidthHeuristics;\n+use config::options::{IgnoreList, WidthHeuristics};\n \n /// Trait for types that can be used in `Config`.\n pub trait ConfigType: Sized {\n@@ -54,6 +54,12 @@ impl ConfigType for WidthHeuristics {\n     }\n }\n \n+impl ConfigType for IgnoreList {\n+    fn doc_hint() -> String {\n+        String::from(\"[<string>,..]\")\n+    }\n+}\n+\n /// Check if we're in a nightly build.\n ///\n /// The environment variable `CFG_RELEASE_CHANNEL` is set during the rustc bootstrap\n@@ -176,7 +182,7 @@ macro_rules! create_config {\n                 ConfigWasSet(self)\n             }\n \n-            fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n+            fn fill_from_parsed_config(mut self, parsed: PartialConfig, dir: &Path) -> Config {\n             $(\n                 if let Some(val) = parsed.$i {\n                     if self.$i.3 {\n@@ -195,6 +201,7 @@ macro_rules! create_config {\n             )+\n                 self.set_heuristics();\n                 self.set_license_template();\n+                self.set_ignore(dir);\n                 self\n             }\n \n@@ -216,7 +223,7 @@ macro_rules! create_config {\n                 }\n             }\n \n-            pub fn from_toml(toml: &str) -> Result<Config, String> {\n+            pub fn from_toml(toml: &str, dir: &Path) -> Result<Config, String> {\n                 let parsed: ::toml::Value =\n                     toml.parse().map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n                 let mut err: String = String::new();\n@@ -236,7 +243,7 @@ macro_rules! create_config {\n                         if !err.is_empty() {\n                             eprint!(\"{}\", err);\n                         }\n-                        Ok(Config::default().fill_from_parsed_config(parsed_config))\n+                        Ok(Config::default().fill_from_parsed_config(parsed_config, dir: &Path))\n                     }\n                     Err(e) => {\n                         err.push_str(\"Error: Decoding config file failed:\\n\");\n@@ -300,7 +307,8 @@ macro_rules! create_config {\n                 let mut file = File::open(&file_path)?;\n                 let mut toml = String::new();\n                 file.read_to_string(&mut toml)?;\n-                Config::from_toml(&toml).map_err(|err| Error::new(ErrorKind::InvalidData, err))\n+                Config::from_toml(&toml, file_path.parent().unwrap())\n+                    .map_err(|err| Error::new(ErrorKind::InvalidData, err))\n             }\n \n             /// Resolve the config for input in `dir`.\n@@ -401,6 +409,10 @@ macro_rules! create_config {\n                     }\n                 }\n             }\n+\n+            fn set_ignore(&mut self, dir: &Path) {\n+                self.ignore.2.add_prefix(dir);\n+            }\n         }\n \n         // Template for the default configuration"}, {"sha": "301b9e06b011cf227830e91f2b7f6b7d40c5af6d", "filename": "src/config/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "patch": "@@ -141,6 +141,8 @@ create_config! {\n         \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n     report_fixme: ReportTactic, ReportTactic::Never, false,\n         \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n+    ignore: IgnoreList, IgnoreList::default(), false,\n+        \"Skip formatting the specified files and directories.\";\n \n     // Not user-facing.\n     verbose: bool, false, false, \"Use verbose output\";\n@@ -208,7 +210,8 @@ mod test {\n \n     #[test]\n     fn test_was_set() {\n-        let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n+        use std::path::Path;\n+        let config = Config::from_toml(\"hard_tabs = true\", Path::new(\"\")).unwrap();\n \n         assert_eq!(config.was_set().hard_tabs(), true);\n         assert_eq!(config.was_set().verbose(), false);"}, {"sha": "7a5f9785b9ba1545e5ea3ddc965b3aebef5dec52", "filename": "src/config/options.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "patch": "@@ -8,9 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use syntax::codemap::FileName;\n+\n use config::config_type::ConfigType;\n use config::lists::*;\n \n+use std::collections::HashSet;\n+use std::path::{Path, PathBuf};\n+\n /// Macro for deriving implementations of Serialize/Deserialize for enums\n #[macro_export]\n macro_rules! impl_enum_serialize_and_deserialize {\n@@ -244,3 +249,68 @@ impl ::std::str::FromStr for WidthHeuristics {\n         Err(\"WidthHeuristics is not parsable\")\n     }\n }\n+\n+/// A set of directories, files and modules that rustfmt should ignore.\n+#[derive(Default, Deserialize, Serialize, Clone, Debug)]\n+pub struct IgnoreList {\n+    directories: Option<HashSet<PathBuf>>,\n+    files: Option<HashSet<PathBuf>>,\n+}\n+\n+impl IgnoreList {\n+    fn add_prefix_inner(set: &HashSet<PathBuf>, dir: &Path) -> HashSet<PathBuf> {\n+        set.iter()\n+            .map(|s| {\n+                if s.has_root() {\n+                    s.clone()\n+                } else {\n+                    let mut path = PathBuf::from(dir);\n+                    path.push(s);\n+                    path\n+                }\n+            })\n+            .collect()\n+    }\n+\n+    pub fn add_prefix(&mut self, dir: &Path) {\n+        macro add_prefix_inner_with ($($field: ident),* $(,)*) {\n+            $(if let Some(set) = self.$field.as_mut() {\n+                *set = IgnoreList::add_prefix_inner(set, dir);\n+            })*\n+        }\n+\n+        add_prefix_inner_with!(directories, files);\n+    }\n+\n+    fn is_ignore_file(&self, path: &Path) -> bool {\n+        self.files.as_ref().map_or(false, |set| set.contains(path))\n+    }\n+\n+    fn is_under_ignore_dir(&self, path: &Path) -> bool {\n+        if let Some(ref dirs) = self.directories {\n+            for dir in dirs {\n+                if path.starts_with(dir) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n+\n+    pub fn skip_file(&self, file: &FileName) -> bool {\n+        if let FileName::Real(ref path) = file {\n+            self.is_ignore_file(path) || self.is_under_ignore_dir(path)\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+impl ::std::str::FromStr for IgnoreList {\n+    type Err = &'static str;\n+\n+    fn from_str(_: &str) -> Result<Self, Self::Err> {\n+        Err(\"IgnoreList is not parsable\")\n+    }\n+}"}, {"sha": "ebd94e1b3d40f2e6d80193eb53b290b5e4f26a5c", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "patch": "@@ -338,7 +338,7 @@ where\n     // nothing to distinguish the nested module contents.\n     let skip_children = config.skip_children() || config.write_mode() == config::WriteMode::Plain;\n     for (path, module) in modules::list_files(krate, parse_session.codemap())? {\n-        if skip_children && path != *main_file {\n+        if (skip_children && path != *main_file) || config.ignore().skip_file(&path) {\n             continue;\n         }\n         should_emit_verbose(&path, config, || println!(\"Formatting {}\", path));"}, {"sha": "9309941983dc94f2aedfc197c6a92dfc7cd0024b", "filename": "tests/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/tests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ad70c1517f49e8881c9fffbdceaeee39c48bd4/tests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flib.rs?ref=84ad70c1517f49e8881c9fffbdceaeee39c48bd4", "patch": "@@ -293,7 +293,7 @@ fn format_lines_errors_are_reported() {\n fn format_lines_errors_are_reported_with_tabs() {\n     let long_identifier = String::from_utf8(vec![b'a'; 97]).unwrap();\n     let input = Input::Text(format!(\"fn a() {{\\n\\t{}\\n}}\", long_identifier));\n-    let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n+    let config = Config::from_toml(\"hard_tabs = true\", Path::new(\"\")).unwrap();\n     let (error_summary, _file_map, _report) =\n         format_input::<io::Stdout>(input, &config, None).unwrap();\n     assert!(error_summary.has_formatting_errors());\n@@ -433,7 +433,7 @@ fn get_config(config_file: Option<&Path>) -> Config {\n         .read_to_string(&mut def_config)\n         .expect(\"Couldn't read config\");\n \n-    Config::from_toml(&def_config).expect(\"Invalid toml\")\n+    Config::from_toml(&def_config, Path::new(\"tests/config/\")).expect(\"Invalid toml\")\n }\n \n // Reads significant comments of the form: // rustfmt-key: value"}]}