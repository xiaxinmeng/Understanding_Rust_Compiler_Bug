{"sha": "9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZmU5YmVhNTNhYzZkZmIxYmMxYjIzYjIyZmJlMWM1ZmFmY2ZlOGM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-04-20T16:46:18Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2018-04-25T03:12:07Z"}, "message": "Remove methods with implicit Binder::skip_bound\n\nFixes #20664.", "tree": {"sha": "070835214a9fd1059feddcd7dac3a878b77ee2aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/070835214a9fd1059feddcd7dac3a878b77ee2aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "html_url": "https://github.com/rust-lang/rust/commit/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98546f8b265c7d8dc2346d8bfce3d277dbc3fd5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/98546f8b265c7d8dc2346d8bfce3d277dbc3fd5d", "html_url": "https://github.com/rust-lang/rust/commit/98546f8b265c7d8dc2346d8bfce3d277dbc3fd5d"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "728d9f1a0270b84bbe3ebc18b41eb6cdf3ff61c6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "patch": "@@ -855,16 +855,19 @@ fn vtable_methods<'a, 'tcx>(\n \n                 // the method may have some early-bound lifetimes, add\n                 // regions for those\n-                let substs = Substs::for_item(tcx, def_id,\n-                                              |_, _| tcx.types.re_erased,\n-                                              |def, _| trait_ref.substs().type_for_def(def));\n+                let substs = trait_ref.map_bound(|trait_ref| {\n+                    Substs::for_item(\n+                        tcx, def_id,\n+                        |_, _| tcx.types.re_erased,\n+                        |def, _| trait_ref.substs.type_for_def(def))\n+                });\n \n                 // the trait type may have higher-ranked lifetimes in it;\n                 // so erase them if they appear, so that we get the type\n                 // at some particular call site\n                 let substs = tcx.normalize_erasing_late_bound_regions(\n                     ty::ParamEnv::reveal_all(),\n-                    &ty::Binder::bind(substs),\n+                    &substs\n                 );\n \n                 // It's possible that the method relies on where clauses that"}, {"sha": "cfc14b7bfe46181f9dae402b6de06047786a979d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "patch": "@@ -786,7 +786,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // This suffices to allow chains like `FnMut` implemented in\n         // terms of `Fn` etc, but we could probably make this more\n         // precise still.\n-        let unbound_input_types = stack.fresh_trait_ref.input_types().any(|ty| ty.is_fresh());\n+        let unbound_input_types =\n+            stack.fresh_trait_ref.skip_binder().input_types().any(|ty| ty.is_fresh());\n         // this check was an imperfect workaround for a bug n the old\n         // intercrate mode, it should be removed when that goes away.\n         if unbound_input_types &&"}, {"sha": "92e879a584b39928d9e3da4fbb7d9a09f093802e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "patch": "@@ -574,16 +574,6 @@ impl<'tcx> PolyTraitRef<'tcx> {\n         self.skip_binder().def_id\n     }\n \n-    pub fn substs(&self) -> &'tcx Substs<'tcx> {\n-        // FIXME(#20664) every use of this fn is probably a bug, it should yield Binder<>\n-        self.skip_binder().substs\n-    }\n-\n-    pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a {\n-        // FIXME(#20664) every use of this fn is probably a bug, it should yield Binder<>\n-        self.skip_binder().input_types()\n-    }\n-\n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n         // Note that we preserve binding levels\n         Binder(ty::TraitPredicate { trait_ref: self.skip_binder().clone() })\n@@ -635,11 +625,6 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     pub fn def_id(&self) -> DefId {\n         self.skip_binder().def_id\n     }\n-\n-    pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a {\n-        // FIXME(#20664) every use of this fn is probably a bug, it should yield Binder<>\n-        self.skip_binder().input_types()\n-    }\n }\n \n /// Binder is a binder for higher-ranked lifetimes. It is part of the"}, {"sha": "ed0613860d03ab8d43544f1bc8a0d9c939948a2d", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        let arg_param_ty = trait_ref.substs().type_at(1);\n+        let arg_param_ty = trait_ref.skip_binder().substs.type_at(1);\n         let arg_param_ty = self.resolve_type_vars_if_possible(&arg_param_ty);\n         debug!(\n             \"deduce_sig_from_projection: arg_param_ty {:?}\","}, {"sha": "b41a6dcf384dd5d4219e704be8141f1b4448e8eb", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9ffe9bea53ac6dfb1bc1b23b22fbe1c5fafcfe8c", "patch": "@@ -1485,7 +1485,7 @@ impl<'tcx> Candidate<'tcx> {\n                     // inference variables or other artifacts. This\n                     // means they are safe to put into the\n                     // `WhereClausePick`.\n-                    assert!(!trait_ref.substs().needs_infer());\n+                    assert!(!trait_ref.skip_binder().substs.needs_infer());\n \n                     WhereClausePick(trait_ref.clone())\n                 }"}]}