{"sha": "ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "node_id": "C_kwDOAAsO6NoAKGFkYTc3ZTk0YWI5MjQ0ZGZiMWI1MzViNTM0MGViZTRlZWZkODBkN2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-28T14:20:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-28T14:20:24Z"}, "message": "Rollup merge of #93261 - bjorn3:cg_ssa_refactor6, r=cjgillot\n\nSome unwinding related cg_ssa cleanups\n\nThese should make it a bit easier for alternative codegen backends to implement unwinding.", "tree": {"sha": "d3ed4fb1ea56a3bd46a30bfc9bdfa16800eb552f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ed4fb1ea56a3bd46a30bfc9bdfa16800eb552f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8/uoCRBK7hj4Ov3rIwAAeiQIAFrNVkJ8GLtRVEex3GWeqLS7\nVdpvAG54W25Y1OwQg7hklQzk6k/aTuBk/1shze+m5g2oXBy9Gw7fax25ZMViGRAN\n43BTPlTuKvo9IseZRj2GDI+RVv9GMdHKymoi4mGUJPB6vwTvAM/5Zl9SgAHgpNJH\nMaC5hr7yHdIKYfHzTb/5eMnjPoufT2EPVu0O9io4cU9+Qv23YbkApZmYP0+kBiqd\nPAc8TW0ONLCCdAF1kELIX/kNdvNdG4E3uaSGVBr2nhdwM/Ha4LQCuLtPTs+gWGOU\nvQbckUBGUAPp2kTUH/7WBFDePzCBGyhYHfz+d0ZcSsyC/rwc933dK7P0LK+orms=\n=EeWQ\n-----END PGP SIGNATURE-----\n", "payload": "tree d3ed4fb1ea56a3bd46a30bfc9bdfa16800eb552f\nparent 18c8d0da644682e69268c2247aed1f74b9132018\nparent f6ce7711726c24025083aec429d6e30274d63476\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643379624 +0100\ncommitter GitHub <noreply@github.com> 1643379624 +0100\n\nRollup merge of #93261 - bjorn3:cg_ssa_refactor6, r=cjgillot\n\nSome unwinding related cg_ssa cleanups\n\nThese should make it a bit easier for alternative codegen backends to implement unwinding.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "html_url": "https://github.com/rust-lang/rust/commit/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c8d0da644682e69268c2247aed1f74b9132018", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c8d0da644682e69268c2247aed1f74b9132018", "html_url": "https://github.com/rust-lang/rust/commit/18c8d0da644682e69268c2247aed1f74b9132018"}, {"sha": "f6ce7711726c24025083aec429d6e30274d63476", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ce7711726c24025083aec429d6e30274d63476", "html_url": "https://github.com/rust-lang/rust/commit/f6ce7711726c24025083aec429d6e30274d63476"}], "stats": {"total": 138, "additions": 63, "deletions": 75}, "files": [{"sha": "ffb77e16a14863c505b199efdf2acdb02e9118a8", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "patch": "@@ -1256,7 +1256,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         aggregate_value\n     }\n \n-    fn landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>, _num_clauses: usize) -> RValue<'gcc> {\n+    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n+        // TODO(antoyo)\n+    }\n+\n+    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n         let field1 = self.context.new_field(None, self.u8_type, \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n         let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n@@ -1267,38 +1271,31 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // rustc_codegen_ssa now calls the unwinding builder methods even on panic=abort.\n     }\n \n-    fn set_cleanup(&mut self, _landing_pad: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n-    fn resume(&mut self, _exn: RValue<'gcc>) -> RValue<'gcc> {\n+    fn resume(&mut self, _exn: RValue<'gcc>) {\n         unimplemented!();\n     }\n \n     fn cleanup_pad(&mut self, _parent: Option<RValue<'gcc>>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }\n \n-    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) -> RValue<'gcc> {\n+    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) {\n         unimplemented!();\n     }\n \n     fn catch_pad(&mut self, _parent: RValue<'gcc>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }\n \n-    fn catch_switch(&mut self, _parent: Option<RValue<'gcc>>, _unwind: Option<Block<'gcc>>, _num_handlers: usize) -> RValue<'gcc> {\n+    fn catch_switch(\n+        &mut self,\n+        _parent: Option<RValue<'gcc>>,\n+        _unwind: Option<Block<'gcc>>,\n+        _handlers: &[Block<'gcc>],\n+    ) -> RValue<'gcc> {\n         unimplemented!();\n     }\n \n-    fn add_handler(&mut self, _catch_switch: RValue<'gcc>, _handler: Block<'gcc>) {\n-        unimplemented!();\n-    }\n-\n-    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n     // Atomic Operations\n     fn atomic_cmpxchg(&mut self, dst: RValue<'gcc>, cmp: RValue<'gcc>, src: RValue<'gcc>, order: AtomicOrdering, failure_order: AtomicOrdering, weak: bool) -> RValue<'gcc> {\n         let expected = self.current_func().new_local(None, cmp.get_type(), \"expected\");"}, {"sha": "c9a04e6280f4092d4537ffec4e535a12ffafa805", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "patch": "@@ -956,29 +956,24 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildInsertValue(self.llbuilder, agg_val, elt, idx as c_uint, UNNAMED) }\n     }\n \n-    fn landing_pad(\n-        &mut self,\n-        ty: &'ll Type,\n-        pers_fn: &'ll Value,\n-        num_clauses: usize,\n-    ) -> &'ll Value {\n-        // Use LLVMSetPersonalityFn to set the personality. It supports arbitrary Consts while,\n-        // LLVMBuildLandingPad requires the argument to be a Function (as of LLVM 12). The\n-        // personality lives on the parent function anyway.\n-        self.set_personality_fn(pers_fn);\n+    fn set_personality_fn(&mut self, personality: &'ll Value) {\n         unsafe {\n-            llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n+            llvm::LLVMSetPersonalityFn(self.llfn(), personality);\n         }\n     }\n \n-    fn set_cleanup(&mut self, landing_pad: &'ll Value) {\n+    fn cleanup_landing_pad(&mut self, ty: &'ll Type, pers_fn: &'ll Value) -> &'ll Value {\n+        let landing_pad = self.landing_pad(ty, pers_fn, 1 /* FIXME should this be 0? */);\n         unsafe {\n             llvm::LLVMSetCleanup(landing_pad, llvm::True);\n         }\n+        landing_pad\n     }\n \n-    fn resume(&mut self, exn: &'ll Value) -> &'ll Value {\n-        unsafe { llvm::LLVMBuildResume(self.llbuilder, exn) }\n+    fn resume(&mut self, exn: &'ll Value) {\n+        unsafe {\n+            llvm::LLVMBuildResume(self.llbuilder, exn);\n+        }\n     }\n \n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n@@ -995,14 +990,11 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         Funclet::new(ret.expect(\"LLVM does not have support for cleanuppad\"))\n     }\n \n-    fn cleanup_ret(\n-        &mut self,\n-        funclet: &Funclet<'ll>,\n-        unwind: Option<&'ll BasicBlock>,\n-    ) -> &'ll Value {\n-        let ret =\n-            unsafe { llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind) };\n-        ret.expect(\"LLVM does not have support for cleanupret\")\n+    fn cleanup_ret(&mut self, funclet: &Funclet<'ll>, unwind: Option<&'ll BasicBlock>) {\n+        unsafe {\n+            llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n+                .expect(\"LLVM does not have support for cleanupret\");\n+        }\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n@@ -1023,31 +1015,25 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         &mut self,\n         parent: Option<&'ll Value>,\n         unwind: Option<&'ll BasicBlock>,\n-        num_handlers: usize,\n+        handlers: &[&'ll BasicBlock],\n     ) -> &'ll Value {\n         let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(\n                 self.llbuilder,\n                 parent,\n                 unwind,\n-                num_handlers as c_uint,\n+                handlers.len() as c_uint,\n                 name.as_ptr(),\n             )\n         };\n-        ret.expect(\"LLVM does not have support for catchswitch\")\n-    }\n-\n-    fn add_handler(&mut self, catch_switch: &'ll Value, handler: &'ll BasicBlock) {\n-        unsafe {\n-            llvm::LLVMRustAddHandler(catch_switch, handler);\n-        }\n-    }\n-\n-    fn set_personality_fn(&mut self, personality: &'ll Value) {\n-        unsafe {\n-            llvm::LLVMSetPersonalityFn(self.llfn(), personality);\n+        let ret = ret.expect(\"LLVM does not have support for catchswitch\");\n+        for handler in handlers {\n+            unsafe {\n+                llvm::LLVMRustAddHandler(ret, handler);\n+            }\n         }\n+        ret\n     }\n \n     // Atomic Operations\n@@ -1478,4 +1464,19 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             None\n         }\n     }\n+\n+    pub(crate) fn landing_pad(\n+        &mut self,\n+        ty: &'ll Type,\n+        pers_fn: &'ll Value,\n+        num_clauses: usize,\n+    ) -> &'ll Value {\n+        // Use LLVMSetPersonalityFn to set the personality. It supports arbitrary Consts while,\n+        // LLVMBuildLandingPad requires the argument to be a Function (as of LLVM 12). The\n+        // personality lives on the parent function anyway.\n+        self.set_personality_fn(pers_fn);\n+        unsafe {\n+            llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n+        }\n+    }\n }"}, {"sha": "f51d014bfb39a97f2af4c07efccff68fe5771af8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "patch": "@@ -525,9 +525,8 @@ fn codegen_msvc_try<'ll>(\n \n         normal.ret(bx.const_i32(0));\n \n-        let cs = catchswitch.catch_switch(None, None, 2);\n-        catchswitch.add_handler(cs, catchpad_rust.llbb());\n-        catchswitch.add_handler(cs, catchpad_foreign.llbb());\n+        let cs =\n+            catchswitch.catch_switch(None, None, &[catchpad_rust.llbb(), catchpad_foreign.llbb()]);\n \n         // We can't use the TypeDescriptor defined in libpanic_unwind because it\n         // might be in another DLL and the SEH encoding only supports specifying"}, {"sha": "4c7a09ca1e94b2ede7ff45f957aaf240552c3a8e", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "patch": "@@ -1346,8 +1346,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let mut cp_bx = self.new_block(&format!(\"cp_funclet{:?}\", bb));\n                     ret_llbb = cs_bx.llbb();\n \n-                    let cs = cs_bx.catch_switch(None, None, 1);\n-                    cs_bx.add_handler(cs, cp_bx.llbb());\n+                    let cs = cs_bx.catch_switch(None, None, &[cp_bx.llbb()]);\n \n                     // The \"null\" here is actually a RTTI type descriptor for the\n                     // C++ personality function, but `catch (...)` has no type so\n@@ -1374,8 +1373,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             let llpersonality = self.cx.eh_personality();\n             let llretty = self.landing_pad_type();\n-            let lp = bx.landing_pad(llretty, llpersonality, 1);\n-            bx.set_cleanup(lp);\n+            let lp = bx.cleanup_landing_pad(llretty, llpersonality);\n \n             let slot = self.get_personality_slot(&mut bx);\n             slot.storage_live(&mut bx);"}, {"sha": "53fb21b269a12f46a3696388ff69324d1f773132", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada77e94ab9244dfb1b535b5340ebe4eefd80d7d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=ada77e94ab9244dfb1b535b5340ebe4eefd80d7d", "patch": "@@ -421,29 +421,22 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn extract_value(&mut self, agg_val: Self::Value, idx: u64) -> Self::Value;\n     fn insert_value(&mut self, agg_val: Self::Value, elt: Self::Value, idx: u64) -> Self::Value;\n \n-    fn landing_pad(\n-        &mut self,\n-        ty: Self::Type,\n-        pers_fn: Self::Value,\n-        num_clauses: usize,\n-    ) -> Self::Value;\n-    fn set_cleanup(&mut self, landing_pad: Self::Value);\n-    fn resume(&mut self, exn: Self::Value) -> Self::Value;\n+    fn set_personality_fn(&mut self, personality: Self::Value);\n+\n+    // These are used by everyone except msvc\n+    fn cleanup_landing_pad(&mut self, ty: Self::Type, pers_fn: Self::Value) -> Self::Value;\n+    fn resume(&mut self, exn: Self::Value);\n+\n+    // These are used only by msvc\n     fn cleanup_pad(&mut self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Funclet;\n-    fn cleanup_ret(\n-        &mut self,\n-        funclet: &Self::Funclet,\n-        unwind: Option<Self::BasicBlock>,\n-    ) -> Self::Value;\n+    fn cleanup_ret(&mut self, funclet: &Self::Funclet, unwind: Option<Self::BasicBlock>);\n     fn catch_pad(&mut self, parent: Self::Value, args: &[Self::Value]) -> Self::Funclet;\n     fn catch_switch(\n         &mut self,\n         parent: Option<Self::Value>,\n         unwind: Option<Self::BasicBlock>,\n-        num_handlers: usize,\n+        handlers: &[Self::BasicBlock],\n     ) -> Self::Value;\n-    fn add_handler(&mut self, catch_switch: Self::Value, handler: Self::BasicBlock);\n-    fn set_personality_fn(&mut self, personality: Self::Value);\n \n     fn atomic_cmpxchg(\n         &mut self,"}]}