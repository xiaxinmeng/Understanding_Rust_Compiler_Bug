{"sha": "e841a88b9298b0d1fef93192d8e163b44645fc73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDFhODhiOTI5OGIwZDFmZWY5MzE5MmQ4ZTE2M2I0NDY0NWZjNzM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-29T00:32:51Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-29T23:01:36Z"}, "message": "syntax: add support for quoting arms", "tree": {"sha": "9ae56039fa607f96398be46cd12ce141b8065f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae56039fa607f96398be46cd12ce141b8065f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e841a88b9298b0d1fef93192d8e163b44645fc73", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e841a88b9298b0d1fef93192d8e163b44645fc73", "html_url": "https://github.com/rust-lang/rust/commit/e841a88b9298b0d1fef93192d8e163b44645fc73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e841a88b9298b0d1fef93192d8e163b44645fc73/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1200ad0f06fc1ecc9a5ccf320e704c95786dbfe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1200ad0f06fc1ecc9a5ccf320e704c95786dbfe3", "html_url": "https://github.com/rust-lang/rust/commit/1200ad0f06fc1ecc9a5ccf320e704c95786dbfe3"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "d00406e07b77dcacd6066f43c1cbed23e1b7e56d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e841a88b9298b0d1fef93192d8e163b44645fc73", "patch": "@@ -382,6 +382,9 @@ fn initial_syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"quote_pat\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_pat));\n+    syntax_expanders.insert(intern(\"quote_arm\"),\n+                       builtin_normal_expander(\n+                            ext::quote::expand_quote_arm));\n     syntax_expanders.insert(intern(\"quote_stmt\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_stmt));"}, {"sha": "dcfb019812774ff94ed6b312d0185ff35fc7aee9", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=e841a88b9298b0d1fef93192d8e163b44645fc73", "patch": "@@ -349,6 +349,14 @@ pub fn expand_quote_pat(cx: &mut ExtCtxt,\n     base::MacExpr::new(expanded)\n }\n \n+pub fn expand_quote_arm(cx: &mut ExtCtxt,\n+                        sp: Span,\n+                        tts: &[ast::TokenTree])\n+                        -> Box<base::MacResult> {\n+    let expanded = expand_parse_call(cx, sp, \"parse_arm\", vec!(), tts);\n+    base::MacExpr::new(expanded)\n+}\n+\n pub fn expand_quote_ty(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[ast::TokenTree])"}, {"sha": "945a643d2b4780d1426db72861e9fe64a9f29d9d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e841a88b9298b0d1fef93192d8e163b44645fc73", "patch": "@@ -2727,37 +2727,41 @@ impl<'a> Parser<'a> {\n         self.commit_expr_expecting(discriminant, token::LBRACE);\n         let mut arms: Vec<Arm> = Vec::new();\n         while self.token != token::RBRACE {\n-            let attrs = self.parse_outer_attributes();\n-            let pats = self.parse_pats();\n-            let mut guard = None;\n-            if self.eat_keyword(keywords::If) {\n-                guard = Some(self.parse_expr());\n-            }\n-            self.expect(&token::FAT_ARROW);\n-            let expr = self.parse_expr_res(RESTRICT_STMT_EXPR);\n-\n-            let require_comma =\n-                !classify::expr_is_simple_block(expr)\n-                && self.token != token::RBRACE;\n-\n-            if require_comma {\n-                self.commit_expr(expr, &[token::COMMA], &[token::RBRACE]);\n-            } else {\n-                self.eat(&token::COMMA);\n-            }\n-\n-            arms.push(ast::Arm {\n-                attrs: attrs,\n-                pats: pats,\n-                guard: guard,\n-                body: expr\n-            });\n+            arms.push(self.parse_arm());\n         }\n         let hi = self.span.hi;\n         self.bump();\n         return self.mk_expr(lo, hi, ExprMatch(discriminant, arms));\n     }\n \n+    pub fn parse_arm(&mut self) -> Arm {\n+        let attrs = self.parse_outer_attributes();\n+        let pats = self.parse_pats();\n+        let mut guard = None;\n+        if self.eat_keyword(keywords::If) {\n+            guard = Some(self.parse_expr());\n+        }\n+        self.expect(&token::FAT_ARROW);\n+        let expr = self.parse_expr_res(RESTRICT_STMT_EXPR);\n+\n+        let require_comma =\n+            !classify::expr_is_simple_block(expr)\n+            && self.token != token::RBRACE;\n+\n+        if require_comma {\n+            self.commit_expr(expr, &[token::COMMA], &[token::RBRACE]);\n+        } else {\n+            self.eat(&token::COMMA);\n+        }\n+\n+        ast::Arm {\n+            attrs: attrs,\n+            pats: pats,\n+            guard: guard,\n+            body: expr,\n+        }\n+    }\n+\n     /// Parse an expression\n     pub fn parse_expr(&mut self) -> Gc<Expr> {\n         return self.parse_expr_res(UNRESTRICTED);"}, {"sha": "2b7088fbc33ff2e0345af84b22f4658393e45b9a", "filename": "src/test/run-make/graphviz-flowgraph/f07.dot-expected.dot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot?ref=e841a88b9298b0d1fef93192d8e163b44645fc73", "patch": "@@ -6,7 +6,7 @@ digraph block {\n     N4[label=\"expr 777i\"];\n     N5[label=\"expr 7777i\"];\n     N6[label=\"expr [7i, 77i, 777i, 7777i]\"];\n-    N7[label=\"expr match [7i, 77i, 777i, 7777i] { [x, y, ..] => x + y }\"];\n+    N7[label=\"expr match [7i, 77i, 777i, 7777i] { [x, y, ..] => x + y, }\"];\n     N8[label=\"(dummy_node)\"];\n     N9[label=\"local x\"];\n     N10[label=\"local y\"];\n@@ -15,7 +15,7 @@ digraph block {\n     N13[label=\"expr x\"];\n     N14[label=\"expr y\"];\n     N15[label=\"expr x + y\"];\n-    N16[label=\"block { match [7i, 77i, 777i, 7777i] { [x, y, ..] => x + y }; }\"];\n+    N16[label=\"block { match [7i, 77i, 777i, 7777i] { [x, y, ..] => x + y, }; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "5d1d1253b22386dd5d564d060813a3fbf5229f09", "filename": "src/test/run-make/graphviz-flowgraph/f13.dot-expected.dot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff13.dot-expected.dot?ref=e841a88b9298b0d1fef93192d8e163b44645fc73", "patch": "@@ -7,7 +7,7 @@ digraph block {\n     N5[label=\"local x\"];\n     N6[label=\"local _y\"];\n     N7[label=\"expr x\"];\n-    N8[label=\"expr match x { E13a => _y = 1, E13b(v) => _y = v + 1 }\"];\n+    N8[label=\"expr match x { E13a => _y = 1, E13b(v) => _y = v + 1, }\"];\n     N9[label=\"(dummy_node)\"];\n     N10[label=\"local E13a\"];\n     N11[label=\"expr 1\"];\n@@ -21,7 +21,7 @@ digraph block {\n     N19[label=\"expr v + 1\"];\n     N20[label=\"expr _y\"];\n     N21[label=\"expr _y = v + 1\"];\n-    N22[label=\"block {\\l    let x = E13b(13);\\l    let _y;\\l    match x { E13a => _y = 1, E13b(v) => _y = v + 1 }\\l}\\l\"];\n+    N22[label=\"block {\\l    let x = E13b(13);\\l    let _y;\\l    match x { E13a => _y = 1, E13b(v) => _y = v + 1, }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "a5cf8e46b7e43033ba5242913453232fb1724949", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=e841a88b9298b0d1fef93192d8e163b44645fc73", "patch": "@@ -72,6 +72,8 @@ fn main() {\n     let pat = quote_pat!(cx, Some(_));\n     check_pp(ext_cx, pat, pprust::print_pat, \"Some(_)\".to_string());\n \n+    let arm = quote_arm!(cx, (ref x, ref y) => (x, y));\n+    check_pp(ext_cx, arm, pprust::print_stmt, \"(ref x, ref y) = (x, y)\".to_string());\n }\n \n fn check_pp<T>(cx: fake_ext_ctxt,"}, {"sha": "60b8f09bb3dedcebaea433f0277027eba156717c", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e841a88b9298b0d1fef93192d8e163b44645fc73/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=e841a88b9298b0d1fef93192d8e163b44645fc73", "patch": "@@ -26,6 +26,7 @@ fn syntax_extension(cx: &ExtCtxt) {\n     let _b: Option<Gc<syntax::ast::Item>> = quote_item!(cx, static foo : int = $e_toks; );\n     let _c: Gc<syntax::ast::Pat> = quote_pat!(cx, (x, 1 .. 4, *) );\n     let _d: Gc<syntax::ast::Stmt> = quote_stmt!(cx, let x = $a; );\n+    let _d: syntax::ast::Arm = quote_arm!(cx, (ref x, ref y) = (x, y) );\n     let _e: Gc<syntax::ast::Expr> = quote_expr!(cx, match foo { $p_toks => 10 } );\n \n     let _f: Gc<syntax::ast::Expr> = quote_expr!(cx, ());"}]}