{"sha": "5e570ce4b087ad7f8623772b64a3d618df9b7756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTcwY2U0YjA4N2FkN2Y4NjIzNzcyYjY0YTNkNjE4ZGY5Yjc3NTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-09T23:09:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-09T23:09:59Z"}, "message": "auto merge of #5766 : thestinger/rust/cmp, r=brson\n\nIt was simpler to just give the variants a value instead of listing out all the cases for (*self, *other) in a match statement or writing spaghetti code. This makes the `cmp` method easier to use with FFI too, since you're a cast away from an idiomatic C comparator function. It would be fine implemented another way though.", "tree": {"sha": "7c5060cf2892014354fc659a29f2cce6e82766df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c5060cf2892014354fc659a29f2cce6e82766df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e570ce4b087ad7f8623772b64a3d618df9b7756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e570ce4b087ad7f8623772b64a3d618df9b7756", "html_url": "https://github.com/rust-lang/rust/commit/5e570ce4b087ad7f8623772b64a3d618df9b7756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e570ce4b087ad7f8623772b64a3d618df9b7756/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ba65da472c6794372130353a25891a36b1fe74", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ba65da472c6794372130353a25891a36b1fe74", "html_url": "https://github.com/rust-lang/rust/commit/81ba65da472c6794372130353a25891a36b1fe74"}, {"sha": "a3f40184bdc0d094ac76b15f66bfbf87a699a705", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f40184bdc0d094ac76b15f66bfbf87a699a705", "html_url": "https://github.com/rust-lang/rust/commit/a3f40184bdc0d094ac76b15f66bfbf87a699a705"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "f96575aaf414f82374a5de59d247fcd7b6a539b4", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5e570ce4b087ad7f8623772b64a3d618df9b7756/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e570ce4b087ad7f8623772b64a3d618df9b7756/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5e570ce4b087ad7f8623772b64a3d618df9b7756", "patch": "@@ -64,14 +64,32 @@ totaleq_impl!(i64)\n totaleq_impl!(int)\n totaleq_impl!(uint)\n \n-#[deriving(Eq)]\n-pub enum Ordering { Less, Equal, Greater }\n+#[deriving(Clone, Eq)]\n+pub enum Ordering { Less = -1, Equal = 0, Greater = 1 }\n \n /// Trait for types that form a total order\n pub trait TotalOrd: TotalEq {\n     fn cmp(&self, other: &Self) -> Ordering;\n }\n \n+impl TotalOrd for Ordering {\n+    #[inline(always)]\n+    fn cmp(&self, other: &Ordering) -> Ordering {\n+        (*self as int).cmp(&(*other as int))\n+    }\n+}\n+\n+impl Ord for Ordering {\n+    #[inline(always)]\n+    fn lt(&self, other: &Ordering) -> bool { (*self as int) < (*other as int) }\n+    #[inline(always)]\n+    fn le(&self, other: &Ordering) -> bool { (*self as int) <= (*other as int) }\n+    #[inline(always)]\n+    fn gt(&self, other: &Ordering) -> bool { (*self as int) > (*other as int) }\n+    #[inline(always)]\n+    fn ge(&self, other: &Ordering) -> bool { (*self as int) >= (*other as int) }\n+}\n+\n macro_rules! totalord_impl(\n     ($t:ty) => {\n         impl TotalOrd for $t {\n@@ -180,4 +198,10 @@ mod test {\n         assert!(5.equals(&5));\n         assert!(!2.equals(&17));\n     }\n+\n+    #[test]\n+    fn test_ordering_order() {\n+        assert!(Less < Equal);\n+        assert_eq!(Greater.cmp(&Less), Greater);\n+    }\n }"}]}