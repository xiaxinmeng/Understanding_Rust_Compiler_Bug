{"sha": "ee53452aeccae1bc162126ce3dabdecc534d445b", "node_id": "C_kwDOAAsO6NoAKGVlNTM0NTJhZWNjYWUxYmMxNjIxMjZjZTNkYWJkZWNjNTM0ZDQ0NWI", "commit": {"author": {"name": "Matthew House", "email": "mattlloydhouse@gmail.com", "date": "2022-12-17T20:15:57Z"}, "committer": {"name": "Matthew House", "email": "mattlloydhouse@gmail.com", "date": "2022-12-17T20:21:37Z"}, "message": "Suggest a `T: Send` bound for `&mut T` upvars in `Send` generators", "tree": {"sha": "70b761e09078c156a9ef0331e7516f4c51707cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b761e09078c156a9ef0331e7516f4c51707cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee53452aeccae1bc162126ce3dabdecc534d445b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee53452aeccae1bc162126ce3dabdecc534d445b", "html_url": "https://github.com/rust-lang/rust/commit/ee53452aeccae1bc162126ce3dabdecc534d445b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee53452aeccae1bc162126ce3dabdecc534d445b/comments", "author": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c53c3bb6190319e210c94164b05a17997073f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c53c3bb6190319e210c94164b05a17997073f2", "html_url": "https://github.com/rust-lang/rust/commit/65c53c3bb6190319e210c94164b05a17997073f2"}], "stats": {"total": 120, "additions": 103, "deletions": 17}, "files": [{"sha": "911798b72104937f667cda351a3d4d5b111cd66a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ee53452aeccae1bc162126ce3dabdecc534d445b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee53452aeccae1bc162126ce3dabdecc534d445b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ee53452aeccae1bc162126ce3dabdecc534d445b", "patch": "@@ -2344,28 +2344,33 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             GeneratorInteriorOrUpvar::Upvar(upvar_span) => {\n-                // `Some(ref_ty)` if `target_ty` is `&T` and `T` fails to impl `Sync`\n-                let refers_to_non_sync = match target_ty.kind() {\n-                    ty::Ref(_, ref_ty, _) => match self.evaluate_obligation(&obligation) {\n-                        Ok(eval) if !eval.may_apply() => Some(ref_ty),\n+                // `Some((ref_ty, is_mut))` if `target_ty` is `&T` or `&mut T` and fails to impl `Send`\n+                let non_send = match target_ty.kind() {\n+                    ty::Ref(_, ref_ty, mutability) => match self.evaluate_obligation(&obligation) {\n+                        Ok(eval) if !eval.may_apply() => Some((ref_ty, mutability.is_mut())),\n                         _ => None,\n                     },\n                     _ => None,\n                 };\n \n-                let (span_label, span_note) = match refers_to_non_sync {\n-                    // if `target_ty` is `&T` and `T` fails to impl `Sync`,\n-                    // include suggestions to make `T: Sync` so that `&T: Send`\n-                    Some(ref_ty) => (\n-                        format!(\n-                            \"has type `{}` which {}, because `{}` is not `Sync`\",\n-                            target_ty, trait_explanation, ref_ty\n-                        ),\n-                        format!(\n-                            \"captured value {} because `&` references cannot be sent unless their referent is `Sync`\",\n-                            trait_explanation\n-                        ),\n-                    ),\n+                let (span_label, span_note) = match non_send {\n+                    // if `target_ty` is `&T` or `&mut T` and fails to impl `Send`,\n+                    // include suggestions to make `T: Sync` so that `&T: Send`,\n+                    // or to make `T: Send` so that `&mut T: Send`\n+                    Some((ref_ty, is_mut)) => {\n+                        let ref_ty_trait = if is_mut { \"Send\" } else { \"Sync\" };\n+                        let ref_kind = if is_mut { \"&mut\" } else { \"&\" };\n+                        (\n+                            format!(\n+                                \"has type `{}` which {}, because `{}` is not `{}`\",\n+                                target_ty, trait_explanation, ref_ty, ref_ty_trait\n+                            ),\n+                            format!(\n+                                \"captured value {} because `{}` references cannot be sent unless their referent is `{}`\",\n+                                trait_explanation, ref_kind, ref_ty_trait\n+                            ),\n+                        )\n+                    }\n                     None => (\n                         format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n                         format!(\"captured value {}\", trait_explanation),"}, {"sha": "eb9ef63ecfcb4fa8dfa5b440982b2bc2fbf47a73", "filename": "src/test/ui/generator/ref-upvar-not-send.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ee53452aeccae1bc162126ce3dabdecc534d445b/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee53452aeccae1bc162126ce3dabdecc534d445b/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.rs?ref=ee53452aeccae1bc162126ce3dabdecc534d445b", "patch": "@@ -0,0 +1,31 @@\n+// For `Send` generators, suggest a `T: Sync` requirement for `&T` upvars,\n+// and suggest a `T: Send` requirement for `&mut T` upvars.\n+\n+#![feature(generators)]\n+\n+fn assert_send<T: Send>(_: T) {}\n+//~^ NOTE required by a bound in `assert_send`\n+//~| NOTE required by this bound in `assert_send`\n+//~| NOTE required by a bound in `assert_send`\n+//~| NOTE required by this bound in `assert_send`\n+\n+fn main() {\n+    let x: &*mut () = &std::ptr::null_mut();\n+    let y: &mut *mut () = &mut std::ptr::null_mut();\n+    assert_send(move || {\n+        //~^ ERROR generator cannot be sent between threads safely\n+        //~| NOTE generator is not `Send`\n+        yield;\n+        let _x = x;\n+    });\n+    //~^^ NOTE captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+    //~| NOTE has type `&*mut ()` which is not `Send`, because `*mut ()` is not `Sync`\n+    assert_send(move || {\n+        //~^ ERROR generator cannot be sent between threads safely\n+        //~| NOTE generator is not `Send`\n+        yield;\n+        let _y = y;\n+    });\n+    //~^^ NOTE captured value is not `Send` because `&mut` references cannot be sent unless their referent is `Send`\n+    //~| NOTE has type `&mut *mut ()` which is not `Send`, because `*mut ()` is not `Send`\n+}"}, {"sha": "689ace67e34ef16297f4f7b34ce7428d05da8a6e", "filename": "src/test/ui/generator/ref-upvar-not-send.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ee53452aeccae1bc162126ce3dabdecc534d445b/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee53452aeccae1bc162126ce3dabdecc534d445b/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.stderr?ref=ee53452aeccae1bc162126ce3dabdecc534d445b", "patch": "@@ -0,0 +1,50 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/ref-upvar-not-send.rs:15:17\n+   |\n+LL |       assert_send(move || {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |         yield;\n+LL | |         let _x = x;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `*mut ()`\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/ref-upvar-not-send.rs:19:18\n+   |\n+LL |         let _x = x;\n+   |                  ^ has type `&*mut ()` which is not `Send`, because `*mut ()` is not `Sync`\n+note: required by a bound in `assert_send`\n+  --> $DIR/ref-upvar-not-send.rs:6:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/ref-upvar-not-send.rs:23:17\n+   |\n+LL |       assert_send(move || {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |         yield;\n+LL | |         let _y = y;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/ref-upvar-not-send.rs:23:17: 23:24]`, the trait `Send` is not implemented for `*mut ()`\n+note: captured value is not `Send` because `&mut` references cannot be sent unless their referent is `Send`\n+  --> $DIR/ref-upvar-not-send.rs:27:18\n+   |\n+LL |         let _y = y;\n+   |                  ^ has type `&mut *mut ()` which is not `Send`, because `*mut ()` is not `Send`\n+note: required by a bound in `assert_send`\n+  --> $DIR/ref-upvar-not-send.rs:6:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}]}