{"sha": "4828895cd913d94d7a5e2aa5c1789b51a59dac23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Mjg4OTVjZDkxM2Q5NGQ3YTVlMmFhNWMxNzg5YjUxYTU5ZGFjMjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-22T23:34:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-22T23:34:41Z"}, "message": "Rollup merge of #74538 - nbdd0121:issue-73976, r=lcnr\n\nGuard against non-monomorphized type_id intrinsic call\n\nThis PR checks whether the type is sufficient monomorphized when calling type_id or type_name intrinsics. If the type is not sufficiently monomorphized, e.g. used in a pattern, the code will be rejected.\n\nFixes #73976", "tree": {"sha": "dc88733b11cb7dd0bccf7db0ad26ad84ff3f8d84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc88733b11cb7dd0bccf7db0ad26ad84ff3f8d84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4828895cd913d94d7a5e2aa5c1789b51a59dac23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGM0RCRBK7hj4Ov3rIwAAdHIIAEx2EhavfC1HYQ5g046OvZBN\nqXRFmJIyanh1S3Rk+Naue9wcCkzxBNuIfbPhWpH4+TyY4J4j2ZNCrH3nJjQiIq5R\nyDrvXJKmtf8SoDNYfbjscX0W79GJszda4zDL1CscSB2TunwZgSv/0H7dAnDAxdWJ\nFTXZD5qrrJ2k3cGgLSc7KHnEhzCL4g6GoRYesRUm32U3RSFoqIPxNdbgR6o2HJsK\nSEievpgJxMMQAhuvRLKeYCNOUY+9iOiPBHCF2RnupzUeAC4Sq1GEa2eYTjYBSAo0\ndenD2oVI4cwTAt+V1vtgkO5+kK/Q8i4dmi98s+msQHbVkXT5TenOedwZZZLeHUA=\n=6oKC\n-----END PGP SIGNATURE-----\n", "payload": "tree dc88733b11cb7dd0bccf7db0ad26ad84ff3f8d84\nparent 02e350f5a2a0dc35a533ee3154aa7b92176ab7bc\nparent b3340b5cea5fdaefa4cbc7eec8ceb0592ebe2255\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595460881 -0700\ncommitter GitHub <noreply@github.com> 1595460881 -0700\n\nRollup merge of #74538 - nbdd0121:issue-73976, r=lcnr\n\nGuard against non-monomorphized type_id intrinsic call\n\nThis PR checks whether the type is sufficient monomorphized when calling type_id or type_name intrinsics. If the type is not sufficiently monomorphized, e.g. used in a pattern, the code will be rejected.\n\nFixes #73976\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4828895cd913d94d7a5e2aa5c1789b51a59dac23", "html_url": "https://github.com/rust-lang/rust/commit/4828895cd913d94d7a5e2aa5c1789b51a59dac23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4828895cd913d94d7a5e2aa5c1789b51a59dac23/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e350f5a2a0dc35a533ee3154aa7b92176ab7bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e350f5a2a0dc35a533ee3154aa7b92176ab7bc", "html_url": "https://github.com/rust-lang/rust/commit/02e350f5a2a0dc35a533ee3154aa7b92176ab7bc"}, {"sha": "b3340b5cea5fdaefa4cbc7eec8ceb0592ebe2255", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3340b5cea5fdaefa4cbc7eec8ceb0592ebe2255", "html_url": "https://github.com/rust-lang/rust/commit/b3340b5cea5fdaefa4cbc7eec8ceb0592ebe2255"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "29549041d258cc285d8db7e636da3e5638a22f31", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=4828895cd913d94d7a5e2aa5c1789b51a59dac23", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n \n@@ -54,6 +54,9 @@ crate fn eval_nullary_intrinsic<'tcx>(\n     let name = tcx.item_name(def_id);\n     Ok(match name {\n         sym::type_name => {\n+            if tp_ty.needs_subst() {\n+                throw_inval!(TooGeneric);\n+            }\n             let alloc = type_name::alloc_type_name(tcx, tp_ty);\n             ConstValue::Slice { data: alloc, start: 0, end: alloc.len() }\n         }\n@@ -68,7 +71,12 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             };\n             ConstValue::from_machine_usize(n, &tcx)\n         }\n-        sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty)),\n+        sym::type_id => {\n+            if tp_ty.needs_subst() {\n+                throw_inval!(TooGeneric);\n+            }\n+            ConstValue::from_u64(tcx.type_id_hash(tp_ty))\n+        }\n         sym::variant_count => {\n             if let ty::Adt(ref adt, _) = tp_ty.kind {\n                 ConstValue::from_machine_usize(adt.variants.len() as u64, &tcx)"}, {"sha": "7706a97f23b4834bd0c2166e8354c0659ca34f4b", "filename": "src/test/ui/consts/issue-73976-monomorphic.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs?ref=4828895cd913d94d7a5e2aa5c1789b51a59dac23", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+//\n+// This test is complement to the test in issue-73976-polymorphic.rs.\n+// In that test we ensure that polymorphic use of type_id and type_name in patterns\n+// will be properly rejected. This test will ensure that monomorphic use of these\n+// would not be wrongly rejected in patterns.\n+\n+#![feature(const_type_id)]\n+#![feature(const_type_name)]\n+\n+use std::any::{self, TypeId};\n+\n+pub struct GetTypeId<T>(T);\n+\n+impl<T: 'static> GetTypeId<T> {\n+    pub const VALUE: TypeId = TypeId::of::<T>();\n+}\n+\n+const fn check_type_id<T: 'static>() -> bool {\n+    matches!(GetTypeId::<T>::VALUE, GetTypeId::<usize>::VALUE)\n+}\n+\n+pub struct GetTypeNameLen<T>(T);\n+\n+impl<T: 'static> GetTypeNameLen<T> {\n+    pub const VALUE: usize = any::type_name::<T>().len();\n+}\n+\n+const fn check_type_name_len<T: 'static>() -> bool {\n+    matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<usize>::VALUE)\n+}\n+\n+fn main() {\n+    assert!(check_type_id::<usize>());\n+    assert!(check_type_name_len::<usize>());\n+}"}, {"sha": "28b84518719a1b1cd01a2844ba437df31d074963", "filename": "src/test/ui/consts/issue-73976-polymorphic.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs?ref=4828895cd913d94d7a5e2aa5c1789b51a59dac23", "patch": "@@ -0,0 +1,40 @@\n+// This test is from #73976. We previously did not check if a type is monomorphized\n+// before calculating its type id, which leads to the bizzare behaviour below that\n+// TypeId of a generic type does not match itself.\n+//\n+// This test case should either run-pass or be rejected at compile time.\n+// Currently we just disallow this usage and require pattern is monomorphic.\n+\n+#![feature(const_type_id)]\n+#![feature(const_type_name)]\n+\n+use std::any::{self, TypeId};\n+\n+pub struct GetTypeId<T>(T);\n+\n+impl<T: 'static> GetTypeId<T> {\n+    pub const VALUE: TypeId = TypeId::of::<T>();\n+}\n+\n+const fn check_type_id<T: 'static>() -> bool {\n+    matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n+    //~^ ERROR could not evaluate constant pattern\n+    //~| ERROR could not evaluate constant pattern\n+}\n+\n+pub struct GetTypeNameLen<T>(T);\n+\n+impl<T: 'static> GetTypeNameLen<T> {\n+    pub const VALUE: usize = any::type_name::<T>().len();\n+}\n+\n+const fn check_type_name_len<T: 'static>() -> bool {\n+    matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n+    //~^ ERROR could not evaluate constant pattern\n+    //~| ERROR could not evaluate constant pattern\n+}\n+\n+fn main() {\n+    assert!(check_type_id::<usize>());\n+    assert!(check_type_name_len::<usize>());\n+}"}, {"sha": "c90ce2bd06a67660b72c4470ac054b7449ad2891", "filename": "src/test/ui/consts/issue-73976-polymorphic.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4828895cd913d94d7a5e2aa5c1789b51a59dac23/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr?ref=4828895cd913d94d7a5e2aa5c1789b51a59dac23", "patch": "@@ -0,0 +1,26 @@\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-73976-polymorphic.rs:20:37\n+   |\n+LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-73976-polymorphic.rs:32:42\n+   |\n+LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-73976-polymorphic.rs:20:37\n+   |\n+LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-73976-polymorphic.rs:32:42\n+   |\n+LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}