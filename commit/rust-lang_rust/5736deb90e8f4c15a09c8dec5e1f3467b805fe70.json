{"sha": "5736deb90e8f4c15a09c8dec5e1f3467b805fe70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MzZkZWI5MGU4ZjRjMTVhMDljOGRlYzVlMWYzNDY3YjgwNWZlNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-17T22:16:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-17T22:16:53Z"}, "message": "auto merge of #12352 : alexcrichton/rust/fix-master, r=brson\n\nThis deadlock was caused when the channel was closed at just the right time, so\r\nthe extra `self.cnt.fetch_add` actually should have preserved the DISCONNECTED\r\nstate of the channel. by modifying this the channel entered a state such that\r\nthe port would never succeed in dropping.\r\n\r\nThis also moves the increment of self.steals until after the MAX_STEALS block.\r\nThe reason for this is that in 'fn recv()' the steals variable is decremented\r\nimmediately after the try_recv(), which could in theory set steals to -1 if it\r\nwas previously set to 0 in try_recv().\r\n\r\nCloses #12340", "tree": {"sha": "271b953e009e0a4a0cba8e11019eb16b1241b643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271b953e009e0a4a0cba8e11019eb16b1241b643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5736deb90e8f4c15a09c8dec5e1f3467b805fe70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5736deb90e8f4c15a09c8dec5e1f3467b805fe70", "html_url": "https://github.com/rust-lang/rust/commit/5736deb90e8f4c15a09c8dec5e1f3467b805fe70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5736deb90e8f4c15a09c8dec5e1f3467b805fe70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c31831a38bc2307234e54a48ad3bf071058ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c31831a38bc2307234e54a48ad3bf071058ade", "html_url": "https://github.com/rust-lang/rust/commit/47c31831a38bc2307234e54a48ad3bf071058ade"}, {"sha": "9c05c1c2366e286275c2320995ed5066bff08dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c05c1c2366e286275c2320995ed5066bff08dd7", "html_url": "https://github.com/rust-lang/rust/commit/9c05c1c2366e286275c2320995ed5066bff08dd7"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0884c46ee84e48ba77f128d45af05d24c2464f02", "filename": "src/libstd/comm/shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5736deb90e8f4c15a09c8dec5e1f3467b805fe70/src%2Flibstd%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5736deb90e8f4c15a09c8dec5e1f3467b805fe70/src%2Flibstd%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fshared.rs?ref=5736deb90e8f4c15a09c8dec5e1f3467b805fe70", "patch": "@@ -305,7 +305,6 @@ impl<T: Send> Packet<T> {\n             // See the discussion in the stream implementation for why we we\n             // might decrement steals.\n             Some(data) => {\n-                self.steals += 1;\n                 if self.steals > MAX_STEALS {\n                     match self.cnt.swap(0, atomics::SeqCst) {\n                         DISCONNECTED => {\n@@ -314,11 +313,12 @@ impl<T: Send> Packet<T> {\n                         n => {\n                             let m = cmp::min(n, self.steals);\n                             self.steals -= m;\n-                            self.cnt.fetch_add(n - m, atomics::SeqCst);\n+                            self.bump(n - m);\n                         }\n                     }\n                     assert!(self.steals >= 0);\n                 }\n+                self.steals += 1;\n                 Ok(data)\n             }\n "}, {"sha": "0bacf1e1d28e7459e12615ec07da8789e16da653", "filename": "src/libstd/comm/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5736deb90e8f4c15a09c8dec5e1f3467b805fe70/src%2Flibstd%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5736deb90e8f4c15a09c8dec5e1f3467b805fe70/src%2Flibstd%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fstream.rs?ref=5736deb90e8f4c15a09c8dec5e1f3467b805fe70", "patch": "@@ -213,7 +213,6 @@ impl<T: Send> Packet<T> {\n             // down as much as possible (without going negative), and then\n             // adding back in whatever we couldn't factor into steals.\n             Some(data) => {\n-                self.steals += 1;\n                 if self.steals > MAX_STEALS {\n                     match self.cnt.swap(0, atomics::SeqCst) {\n                         DISCONNECTED => {\n@@ -222,11 +221,12 @@ impl<T: Send> Packet<T> {\n                         n => {\n                             let m = cmp::min(n, self.steals);\n                             self.steals -= m;\n-                            self.cnt.fetch_add(n - m, atomics::SeqCst);\n+                            self.bump(n - m);\n                         }\n                     }\n                     assert!(self.steals >= 0);\n                 }\n+                self.steals += 1;\n                 match data {\n                     Data(t) => Ok(t),\n                     GoUp(up) => Err(Upgraded(up)),"}]}