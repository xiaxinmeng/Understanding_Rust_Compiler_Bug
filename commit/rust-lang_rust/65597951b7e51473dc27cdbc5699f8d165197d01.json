{"sha": "65597951b7e51473dc27cdbc5699f8d165197d01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTk3OTUxYjdlNTE0NzNkYzI3Y2RiYzU2OTlmOGQxNjUxOTdkMDE=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-02-14T10:57:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T09:56:13Z"}, "message": "Fix sysroot for rustdoc", "tree": {"sha": "643e1583db247729cdd19f7084a88a81b1a891d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643e1583db247729cdd19f7084a88a81b1a891d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65597951b7e51473dc27cdbc5699f8d165197d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65597951b7e51473dc27cdbc5699f8d165197d01", "html_url": "https://github.com/rust-lang/rust/commit/65597951b7e51473dc27cdbc5699f8d165197d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65597951b7e51473dc27cdbc5699f8d165197d01/comments", "author": null, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9083e00b2c27145551a24dbd06d2ca40986b0592", "url": "https://api.github.com/repos/rust-lang/rust/commits/9083e00b2c27145551a24dbd06d2ca40986b0592", "html_url": "https://github.com/rust-lang/rust/commit/9083e00b2c27145551a24dbd06d2ca40986b0592"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "350efbf1826da3483b4a0f6905b5b72a0d49b41b", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/65597951b7e51473dc27cdbc5699f8d165197d01/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65597951b7e51473dc27cdbc5699f8d165197d01/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=65597951b7e51473dc27cdbc5699f8d165197d01", "patch": "@@ -685,7 +685,7 @@ fn phase_cargo_rustc(mut args: env::Args) {\n                     .expect(\"the wrapper should have set MIRI_SYSROOT\");\n                 cmd.arg(\"--sysroot\").arg(sysroot);\n             }\n-            \n+\n             // ensure --emit argument for a check-only build is present\n             if let Some(i) = env.args.iter().position(|arg| arg.starts_with(\"--emit=\")) {\n                 // We need to make sure we're not producing a binary that overwrites the JSON file.\n@@ -702,7 +702,7 @@ fn phase_cargo_rustc(mut args: env::Args) {\n                 eprintln!(\"[cargo-miri rustc] captured input:\\n{}\", std::str::from_utf8(&env.stdin).unwrap());\n                 eprintln!(\"[cargo-miri rustc] {:?}\", cmd);\n             }\n-            \n+\n             exec_with_pipe(cmd, &env.stdin);\n         }\n \n@@ -841,11 +841,13 @@ fn phase_cargo_runner(binary: &Path, binary_args: env::Args) {\n             cmd.arg(arg);\n         }\n     }\n-    // Set sysroot.\n-    let sysroot =\n-        env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n-    cmd.arg(\"--sysroot\");\n-    cmd.arg(sysroot);\n+    if env::var_os(\"MIRI_CALLED_FROM_RUSTDOC\").is_none() {\n+        // Set sysroot.\n+        let sysroot =\n+            env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n+        cmd.arg(\"--sysroot\");\n+        cmd.arg(sysroot);\n+    }\n     // Respect `MIRIFLAGS`.\n     if let Ok(a) = env::var(\"MIRIFLAGS\") {\n         // This code is taken from `RUSTFLAGS` handling in cargo.\n@@ -892,7 +894,7 @@ fn phase_cargo_rustdoc(fst_arg: &str, mut args: env::Args) {\n     let extern_flag = \"--extern\";\n     assert!(fst_arg != extern_flag);\n     cmd.arg(fst_arg);\n-    \n+\n     let runtool_flag = \"--runtool\";\n     let mut crossmode = fst_arg == runtool_flag;\n     while let Some(arg) = args.next() {\n@@ -917,21 +919,27 @@ fn phase_cargo_rustdoc(fst_arg: &str, mut args: env::Args) {\n     // For each doc-test, rustdoc starts two child processes: first the test is compiled,\n     // then the produced executable is invoked. We want to reroute both of these to cargo-miri,\n     // such that the first time we'll enter phase_cargo_rustc, and phase_cargo_runner second.\n-    // \n+    //\n     // rustdoc invokes the test-builder by forwarding most of its own arguments, which makes\n     // it difficult to determine when phase_cargo_rustc should run instead of phase_cargo_rustdoc.\n     // Furthermore, the test code is passed via stdin, rather than a temporary file, so we need\n     // to let phase_cargo_rustc know to expect that. We'll use this environment variable as a flag:\n     cmd.env(\"MIRI_CALLED_FROM_RUSTDOC\", \"1\");\n-    \n+\n     // The `--test-builder` and `--runtool` arguments are unstable rustdoc features,\n     // which are disabled by default. We first need to enable them explicitly:\n     cmd.arg(\"-Z\").arg(\"unstable-options\");\n-    \n+\n+    // Use our custom sysroot.\n+    let sysroot =\n+        env::var_os(\"MIRI_SYSROOT\").expect(\"the wrapper should have set MIRI_SYSROOT\");\n+    cmd.arg(\"--sysroot\");\n+    cmd.arg(sysroot);\n+\n     let cargo_miri_path = std::env::current_exe().expect(\"current executable path invalid\");\n     cmd.arg(\"--test-builder\").arg(&cargo_miri_path); // invoked by forwarding most arguments\n     cmd.arg(\"--runtool\").arg(&cargo_miri_path); // invoked with just a single path argument\n-    \n+\n     if verbose {\n         eprintln!(\"[cargo-miri rustdoc] {:?}\", cmd);\n     }"}]}