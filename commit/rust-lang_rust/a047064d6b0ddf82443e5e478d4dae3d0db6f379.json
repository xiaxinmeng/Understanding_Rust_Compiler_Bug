{"sha": "a047064d6b0ddf82443e5e478d4dae3d0db6f379", "node_id": "C_kwDOAAsO6NoAKGEwNDcwNjRkNmIwZGRmODI0NDNlNWU0NzhkNGRhZTNkMGRiNmYzNzk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-10T06:52:18Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-10T06:52:41Z"}, "message": "Revert \"Don't recover lifetimes/labels containing emojis as character literals\"\n\nReverts PR #108031\nFixes (doesnt close until beta backported) #109746\n\nThis reverts commit e3f9db5fc319c6d8eee5d47d216ea6a426070c41.\nThis reverts commit 98b82aedba3f3f581e89df54352914b27f42c6f7.\nThis reverts commit 380fa264132ad481e73cbbf0f3a0feefd99a1d78.", "tree": {"sha": "b7f95883ae6d3f45b95490e1a0cf380f4561d82d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7f95883ae6d3f45b95490e1a0cf380f4561d82d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a047064d6b0ddf82443e5e478d4dae3d0db6f379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a047064d6b0ddf82443e5e478d4dae3d0db6f379", "html_url": "https://github.com/rust-lang/rust/commit/a047064d6b0ddf82443e5e478d4dae3d0db6f379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a047064d6b0ddf82443e5e478d4dae3d0db6f379/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c2e2dd5c516acc60ababd12e5dba684d71c2315", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2e2dd5c516acc60ababd12e5dba684d71c2315", "html_url": "https://github.com/rust-lang/rust/commit/3c2e2dd5c516acc60ababd12e5dba684d71c2315"}], "stats": {"total": 195, "additions": 17, "deletions": 178}, "files": [{"sha": "17944044aae1fc111a29a0cb7b0447583308c262", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a047064d6b0ddf82443e5e478d4dae3d0db6f379", "patch": "@@ -473,8 +473,6 @@ pub enum StashKey {\n     /// When an invalid lifetime e.g. `'2` should be reinterpreted\n     /// as a char literal in the parser\n     LifetimeIsChar,\n-    /// When an invalid lifetime e.g. `'\ud83d\udc31` contains emoji.\n-    LifetimeContainsEmoji,\n     /// Maybe there was a typo where a comma was forgotten before\n     /// FRU syntax\n     MaybeFruTypo,"}, {"sha": "b3f4b5cd5e5a0dda101ebfcb30d0a6dda3886e5c", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=a047064d6b0ddf82443e5e478d4dae3d0db6f379", "patch": "@@ -95,7 +95,7 @@ pub enum TokenKind {\n     Literal { kind: LiteralKind, suffix_start: u32 },\n \n     /// \"'a\"\n-    Lifetime { starts_with_number: bool, contains_emoji: bool },\n+    Lifetime { starts_with_number: bool },\n \n     // One-char tokens:\n     /// \";\"\n@@ -632,13 +632,7 @@ impl Cursor<'_> {\n             // If the first symbol is valid for identifier, it can be a lifetime.\n             // Also check if it's a number for a better error reporting (so '0 will\n             // be reported as invalid lifetime and not as unterminated char literal).\n-            // We also have to account for potential `'\ud83d\udc31` emojis to avoid reporting\n-            // it as an unterminated char literal.\n-            is_id_start(self.first())\n-                || self.first().is_digit(10)\n-                // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n-                // 5.0, but Unicode is already newer than this.\n-                || unic_emoji_char::is_emoji(self.first())\n+            is_id_start(self.first()) || self.first().is_digit(10)\n         };\n \n         if !can_be_a_lifetime {\n@@ -651,33 +645,16 @@ impl Cursor<'_> {\n             return Literal { kind, suffix_start };\n         }\n \n-        // Either a lifetime or a character literal.\n+        // Either a lifetime or a character literal with\n+        // length greater than 1.\n \n         let starts_with_number = self.first().is_digit(10);\n-        let mut contains_emoji = false;\n \n-        // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n-        // 5.0, but Unicode is already newer than this.\n-        if unic_emoji_char::is_emoji(self.first()) {\n-            contains_emoji = true;\n-        } else {\n-            // Skip the literal contents.\n-            // First symbol can be a number (which isn't a valid identifier start),\n-            // so skip it without any checks.\n-            self.bump();\n-        }\n-        self.eat_while(|c| {\n-            if is_id_continue(c) {\n-                true\n-            // FIXME(#108019): `unic-emoji-char` seems to have data tables only up to Unicode\n-            // 5.0, but Unicode is already newer than this.\n-            } else if unic_emoji_char::is_emoji(c) {\n-                contains_emoji = true;\n-                true\n-            } else {\n-                false\n-            }\n-        });\n+        // Skip the literal contents.\n+        // First symbol can be a number (which isn't a valid identifier start),\n+        // so skip it without any checks.\n+        self.bump();\n+        self.eat_while(is_id_continue);\n \n         // Check if after skipping literal contents we've met a closing\n         // single quote (which means that user attempted to create a\n@@ -687,7 +664,7 @@ impl Cursor<'_> {\n             let kind = Char { terminated: true };\n             Literal { kind, suffix_start: self.pos_within_token() }\n         } else {\n-            Lifetime { starts_with_number, contains_emoji }\n+            Lifetime { starts_with_number }\n         }\n     }\n "}, {"sha": "e4c1787f2ccef043e002d228346c72b8a2958655", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=a047064d6b0ddf82443e5e478d4dae3d0db6f379", "patch": "@@ -235,7 +235,7 @@ fn lifetime() {\n     check_lexing(\n         \"'abc\",\n         expect![[r#\"\n-            Token { kind: Lifetime { starts_with_number: false, contains_emoji: false }, len: 4 }\n+            Token { kind: Lifetime { starts_with_number: false }, len: 4 }\n         \"#]],\n     );\n }"}, {"sha": "399a86c9297a30743d7c0e9a68dd5ad540c28804", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a047064d6b0ddf82443e5e478d4dae3d0db6f379/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=a047064d6b0ddf82443e5e478d4dae3d0db6f379", "patch": "@@ -223,21 +223,16 @@ impl<'a> StringReader<'a> {\n                     };\n                     token::Literal(token::Lit { kind, symbol, suffix })\n                 }\n-                rustc_lexer::TokenKind::Lifetime { starts_with_number, contains_emoji } => {\n+                rustc_lexer::TokenKind::Lifetime { starts_with_number } => {\n                     // Include the leading `'` in the real identifier, for macro\n                     // expansion purposes. See #12512 for the gory details of why\n                     // this is necessary.\n                     let lifetime_name = self.str_from(start);\n                     if starts_with_number {\n                         let span = self.mk_sp(start, self.pos);\n-                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot start with a number\");\n+                        let mut diag = self.sess.struct_err(\"lifetimes cannot start with a number\");\n                         diag.set_span(span);\n                         diag.stash(span, StashKey::LifetimeIsChar);\n-                    } else if contains_emoji {\n-                        let span = self.mk_sp(start, self.pos);\n-                        let mut diag = self.sess.struct_err(\"lifetimes or labels cannot contain emojis\");\n-                        diag.set_span(span);\n-                        diag.stash(span, StashKey::LifetimeContainsEmoji);\n                     }\n                     let ident = Symbol::intern(lifetime_name);\n                     token::Lifetime(ident)"}, {"sha": "f0f86224560100121aad9e2e19551fd0e61bad4b", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e2dd5c516acc60ababd12e5dba684d71c2315/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e2dd5c516acc60ababd12e5dba684d71c2315/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.rs?ref=3c2e2dd5c516acc60ababd12e5dba684d71c2315", "patch": "@@ -1,45 +0,0 @@\n-#![allow(unused_labels)]\n-\n-// FIXME(#108019): outdated Unicode table\n-// fn foo() {\n-//     '\ud83e\udd7a loop {\n-//         break\n-//     }\n-// }\n-\n-fn bar() {\n-    '\ud83d\udc31 loop {\n-    //~^ ERROR labeled expression must be followed by `:`\n-    //~| ERROR lifetimes or labels cannot contain emojis\n-        break\n-    }\n-}\n-\n-fn qux() {\n-    'a\ud83d\udc31 loop {\n-    //~^ ERROR labeled expression must be followed by `:`\n-    //~| ERROR lifetimes or labels cannot contain emojis\n-        break\n-    }\n-}\n-\n-fn quux() {\n-    '1\ud83d\udc31 loop {\n-    //~^ ERROR labeled expression must be followed by `:`\n-    //~| ERROR lifetimes or labels cannot start with a number\n-        break\n-    }\n-}\n-\n-fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n-    //~^ ERROR lifetimes or labels cannot contain emojis\n-    //~| ERROR lifetimes or labels cannot contain emojis\n-    &()\n-}\n-\n-fn y() {\n-    'a\ud83d\udc31: loop {}\n-    //~^ ERROR lifetimes or labels cannot contain emojis\n-}\n-\n-fn main() {}"}, {"sha": "be77ffdea349f4296042f760e99923935573e7d8", "filename": "tests/ui/lexer/issue-108019-bad-emoji-recovery.stderr", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e2dd5c516acc60ababd12e5dba684d71c2315/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e2dd5c516acc60ababd12e5dba684d71c2315/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Fissue-108019-bad-emoji-recovery.stderr?ref=3c2e2dd5c516acc60ababd12e5dba684d71c2315", "patch": "@@ -1,86 +0,0 @@\n-error: labeled expression must be followed by `:`\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n-   |\n-LL |       '\ud83d\udc31 loop {\n-   |       ^--- help: add `:` after the label\n-   |       |\n-   |  _____the label\n-   | |\n-LL | |\n-LL | |\n-LL | |         break\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n-\n-error: labeled expression must be followed by `:`\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n-   |\n-LL |       'a\ud83d\udc31 loop {\n-   |       ^---- help: add `:` after the label\n-   |       |\n-   |  _____the label\n-   | |\n-LL | |\n-LL | |\n-LL | |         break\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n-\n-error: labeled expression must be followed by `:`\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n-   |\n-LL |       '1\ud83d\udc31 loop {\n-   |       ^---- help: add `:` after the label\n-   |       |\n-   |  _____the label\n-   | |\n-LL | |\n-LL | |\n-LL | |         break\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:11:5\n-   |\n-LL |     '\ud83d\udc31 loop {\n-   |     ^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:19:5\n-   |\n-LL |     'a\ud83d\udc31 loop {\n-   |     ^^^^\n-\n-error: lifetimes or labels cannot start with a number\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:27:5\n-   |\n-LL |     '1\ud83d\udc31 loop {\n-   |     ^^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:6\n-   |\n-LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n-   |      ^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:34:16\n-   |\n-LL | fn x<'\ud83d\udc31>() -> &'\ud83d\udc31 () {\n-   |                 ^^^\n-\n-error: lifetimes or labels cannot contain emojis\n-  --> $DIR/issue-108019-bad-emoji-recovery.rs:41:5\n-   |\n-LL |     'a\ud83d\udc31: loop {}\n-   |     ^^^^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "2d82354c62cca706fa9c17c35ed5b5f7e3575034", "filename": "tests/ui/parser/numeric-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a047064d6b0ddf82443e5e478d4dae3d0db6f379/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a047064d6b0ddf82443e5e478d4dae3d0db6f379/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.rs?ref=a047064d6b0ddf82443e5e478d4dae3d0db6f379", "patch": "@@ -1,6 +1,6 @@\n struct S<'1> { s: &'1 usize }\n-//~^ ERROR lifetimes or labels cannot start with a number\n-//~| ERROR lifetimes or labels cannot start with a number\n+//~^ ERROR lifetimes cannot start with a number\n+//~| ERROR lifetimes cannot start with a number\n fn main() {\n     // verify that the parse error doesn't stop type checking\n     let x: usize = \"\";"}, {"sha": "7c1bcb7263171d9b0d06d98feef52bae6501593f", "filename": "tests/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a047064d6b0ddf82443e5e478d4dae3d0db6f379/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a047064d6b0ddf82443e5e478d4dae3d0db6f379/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=a047064d6b0ddf82443e5e478d4dae3d0db6f379", "patch": "@@ -6,13 +6,13 @@ LL |     let x: usize = \"\";\n    |            |\n    |            expected due to this\n \n-error: lifetimes or labels cannot start with a number\n+error: lifetimes cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:10\n    |\n LL | struct S<'1> { s: &'1 usize }\n    |          ^^\n \n-error: lifetimes or labels cannot start with a number\n+error: lifetimes cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:20\n    |\n LL | struct S<'1> { s: &'1 usize }"}]}