{"sha": "20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYWU0MWMxYTEyOTYzZTkzOGNiM2JkNGM3Yzg0MDA3NDEyZDZmYTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-06T21:23:50Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-06T21:23:50Z"}, "message": "Reuse database in LowerCtx", "tree": {"sha": "361153338ec7c32866a5477b3e7681d05a4b0b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361153338ec7c32866a5477b3e7681d05a4b0b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "html_url": "https://github.com/rust-lang/rust/commit/20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f9cb9b53314b584f6451908ce40bbd65453116", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f9cb9b53314b584f6451908ce40bbd65453116", "html_url": "https://github.com/rust-lang/rust/commit/c4f9cb9b53314b584f6451908ce40bbd65453116"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "62500602a717623ae1ead7331eb6273b3b8aec30", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "patch": "@@ -855,7 +855,7 @@ impl<'a> SemanticsScope<'a> {\n     /// necessary a heuristic, as it doesn't take hygiene into account.\n     pub fn speculative_resolve(&self, path: &ast::Path) -> Option<PathResolution> {\n         let ctx = body::LowerCtx::new(self.db.upcast(), self.file_id);\n-        let path = Path::from_src(self.db.upcast(), path.clone(), &ctx)?;\n+        let path = Path::from_src(path.clone(), &ctx)?;\n         resolve_hir_path(self.db, &self.resolver, &path)\n     }\n }"}, {"sha": "b5c65808e60a9f9ba22597051e95f84eaf089b07", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "patch": "@@ -204,8 +204,7 @@ impl SourceAnalyzer {\n         macro_call: InFile<&ast::MacroCall>,\n     ) -> Option<MacroDef> {\n         let ctx = body::LowerCtx::new(db.upcast(), macro_call.file_id);\n-        let path =\n-            macro_call.value.path().and_then(|ast| Path::from_src(db.upcast(), ast, &ctx))?;\n+        let path = macro_call.value.path().and_then(|ast| Path::from_src(ast, &ctx))?;\n         self.resolver.resolve_path_as_macro(db.upcast(), path.mod_path()).map(|it| it.into())\n     }\n \n@@ -285,7 +284,7 @@ impl SourceAnalyzer {\n         // This must be a normal source file rather than macro file.\n         let hygiene = Hygiene::new(db.upcast(), self.file_id);\n         let ctx = body::LowerCtx::with_hygiene(db.upcast(), &hygiene);\n-        let hir_path = Path::from_src(db.upcast(), path.clone(), &ctx)?;\n+        let hir_path = Path::from_src(path.clone(), &ctx)?;\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we\n         // trying to resolve foo::bar."}, {"sha": "8360426f139ef33fb40f2c8ffe83b824271961d5", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "patch": "@@ -194,7 +194,7 @@ impl Expander {\n \n     fn parse_path(&mut self, db: &dyn DefDatabase, path: ast::Path) -> Option<Path> {\n         let ctx = LowerCtx::with_hygiene(db, &self.cfg_expander.hygiene);\n-        Path::from_src(db, path, &ctx)\n+        Path::from_src(path, &ctx)\n     }\n \n     fn resolve_path_as_macro(&self, db: &dyn DefDatabase, path: &ModPath) -> Option<MacroDefId> {"}, {"sha": "75dc19c117aed9bfef72dc260ba8737416ebe899", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "patch": "@@ -41,7 +41,7 @@ use crate::{\n use super::{diagnostics::BodyDiagnostic, ExprSource, PatSource};\n \n pub struct LowerCtx<'a> {\n-    db: &'a dyn DefDatabase,\n+    pub db: &'a dyn DefDatabase,\n     hygiene: Hygiene,\n     file_id: Option<HirFileId>,\n     source_ast_id_map: Option<Arc<AstIdMap>>,\n@@ -70,7 +70,7 @@ impl<'a> LowerCtx<'a> {\n     }\n \n     pub(crate) fn lower_path(&self, ast: ast::Path) -> Option<Path> {\n-        Path::from_src(self.db, ast, self)\n+        Path::from_src(ast, self)\n     }\n \n     pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> Option<FileAstId<N>> {"}, {"sha": "a43441b1c2ca4ca363be0c506fc12b77189c398c", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "patch": "@@ -49,7 +49,7 @@ pub enum ImportAlias {\n impl ModPath {\n     pub fn from_src(db: &dyn DefDatabase, path: ast::Path, hygiene: &Hygiene) -> Option<ModPath> {\n         let ctx = LowerCtx::with_hygiene(db, hygiene);\n-        lower::lower_path(db, path, &ctx).map(|it| (*it.mod_path).clone())\n+        lower::lower_path(path, &ctx).map(|it| (*it.mod_path).clone())\n     }\n \n     pub fn from_segments(kind: PathKind, segments: impl IntoIterator<Item = Name>) -> ModPath {\n@@ -169,8 +169,8 @@ pub enum GenericArg {\n impl Path {\n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n     /// It correctly handles `$crate` based path from macro call.\n-    pub fn from_src(db: &dyn DefDatabase, path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n-        lower::lower_path(db, path, ctx)\n+    pub fn from_src(path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n+        lower::lower_path(path, ctx)\n     }\n \n     /// Converts a known mod path to `Path`."}, {"sha": "a873325b24ba8d8266b7dd251a6bfef78eafc019", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "patch": "@@ -2,7 +2,7 @@\n \n mod lower_use;\n \n-use crate::{db::DefDatabase, intern::Interned};\n+use crate::intern::Interned;\n use std::sync::Arc;\n \n use either::Either;\n@@ -20,11 +20,7 @@ pub(super) use lower_use::lower_use_tree;\n \n /// Converts an `ast::Path` to `Path`. Works with use trees.\n /// It correctly handles `$crate` based path from macro call.\n-pub(super) fn lower_path(\n-    db: &dyn DefDatabase,\n-    mut path: ast::Path,\n-    ctx: &LowerCtx,\n-) -> Option<Path> {\n+pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n     let mut kind = PathKind::Plain;\n     let mut type_anchor = None;\n     let mut segments = Vec::new();\n@@ -40,7 +36,7 @@ pub(super) fn lower_path(\n         match segment.kind()? {\n             ast::PathSegmentKind::Name(name_ref) => {\n                 // FIXME: this should just return name\n-                match hygiene.name_ref_to_name(db.upcast(), name_ref) {\n+                match hygiene.name_ref_to_name(ctx.db.upcast(), name_ref) {\n                     Either::Left(name) => {\n                         let args = segment\n                             .generic_arg_list()\n@@ -75,7 +71,7 @@ pub(super) fn lower_path(\n                     }\n                     // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo\n                     Some(trait_ref) => {\n-                        let path = Path::from_src(db, trait_ref.path()?, ctx)?;\n+                        let path = Path::from_src(trait_ref.path()?, ctx)?;\n                         let mod_path = (*path.mod_path).clone();\n                         let num_segments = path.mod_path.segments.len();\n                         kind = mod_path.kind;\n@@ -137,7 +133,7 @@ pub(super) fn lower_path(\n     // We follow what it did anyway :)\n     if segments.len() == 1 && kind == PathKind::Plain {\n         if let Some(_macro_call) = path.syntax().parent().and_then(ast::MacroCall::cast) {\n-            if let Some(crate_id) = hygiene.local_inner_macros(db.upcast(), path) {\n+            if let Some(crate_id) = hygiene.local_inner_macros(ctx.db.upcast(), path) {\n                 kind = PathKind::DollarCrate(crate_id);\n             }\n         }"}, {"sha": "1f6edf7a28b81c1a0f45941814eb89bad5f19381", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ae41c1a12963e938cb3bd4c7c84007412d6fa6/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=20ae41c1a12963e938cb3bd4c7c84007412d6fa6", "patch": "@@ -1002,7 +1002,7 @@ impl HirDisplay for TypeRef {\n                 let macro_call = macro_call.to_node(f.db.upcast());\n                 let ctx = body::LowerCtx::with_hygiene(f.db.upcast(), &Hygiene::new_unhygienic());\n                 match macro_call.path() {\n-                    Some(path) => match Path::from_src(f.db.upcast(), path, &ctx) {\n+                    Some(path) => match Path::from_src(path, &ctx) {\n                         Some(path) => path.hir_fmt(f)?,\n                         None => write!(f, \"{{macro}}\")?,\n                     },"}]}