{"sha": "fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "node_id": "C_kwDOAAsO6NoAKGZkNWJlMjNhOTYyNzRjYjFkMWY4M2FjZGQ4ZjczNzBlZTE1ZTAwZmE", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-01-15T12:03:38Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-02-01T10:01:19Z"}, "message": "fix for the issue #92464", "tree": {"sha": "cfe8626a398fd2184d884ad1e1b800535da0627c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe8626a398fd2184d884ad1e1b800535da0627c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "html_url": "https://github.com/rust-lang/rust/commit/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38c22af0153cf8f920c01ef04493e8878401fd18", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c22af0153cf8f920c01ef04493e8878401fd18", "html_url": "https://github.com/rust-lang/rust/commit/38c22af0153cf8f920c01ef04493e8878401fd18"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "f98261e5e5e611af8233b38199ce5dba782b77f5", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "patch": "@@ -1310,7 +1310,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     },\n                 };\n                 let mut abi = Abi::Aggregate { sized: true };\n-                if tag.value.size(dl) == size {\n+\n+                // Without latter check aligned enums with custom discriminant values\n+                // Would result in ICE see the issue #92464 for more info\n+                if tag.value.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n                     abi = Abi::Scalar(tag);\n                 } else {\n                     // Try to use a ScalarPair for all tagged enums."}, {"sha": "4b5776a6aa8ee2c09d09d7eb6ac21c2c214abaf1", "filename": "src/test/ui/aligned_enum_cast.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faligned_enum_cast.rs?ref=fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// allows aligned custom discriminant enums to cast into other types\n+// See the issue #92464 for more info\n+#[allow(dead_code)]\n+#[repr(align(8))]\n+enum Aligned {\n+    Zero = 0,\n+    One = 1,\n+}\n+\n+fn main() {\n+    let aligned = Aligned::Zero;\n+    let fo = aligned as u8;\n+    println!(\"foo {}\",fo);\n+}"}]}