{"sha": "623ea5f5d283dfb57e17e2671bebe63ff7d1e936", "node_id": "C_kwDOAAsO6NoAKDYyM2VhNWY1ZDI4M2RmYjU3ZTE3ZTI2NzFiZWJlNjNmZjdkMWU5MzY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-27T07:35:28Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T21:07:04Z"}, "message": "Make hir().get_generics and generics_of consistent.", "tree": {"sha": "e83f86c24d3c98424e1af2e624b304db6d5d54c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e83f86c24d3c98424e1af2e624b304db6d5d54c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/623ea5f5d283dfb57e17e2671bebe63ff7d1e936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/623ea5f5d283dfb57e17e2671bebe63ff7d1e936", "html_url": "https://github.com/rust-lang/rust/commit/623ea5f5d283dfb57e17e2671bebe63ff7d1e936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/623ea5f5d283dfb57e17e2671bebe63ff7d1e936/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9b92cb43a489b34e2bcb8d21f36198e02eedbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9b92cb43a489b34e2bcb8d21f36198e02eedbc", "html_url": "https://github.com/rust-lang/rust/commit/7e9b92cb43a489b34e2bcb8d21f36198e02eedbc"}], "stats": {"total": 94, "additions": 23, "deletions": 71}, "files": [{"sha": "cb2e66090e7c393317c45563b4ad6a8add3d45db", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/623ea5f5d283dfb57e17e2671bebe63ff7d1e936/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623ea5f5d283dfb57e17e2671bebe63ff7d1e936/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=623ea5f5d283dfb57e17e2671bebe63ff7d1e936", "patch": "@@ -3004,13 +3004,12 @@ impl ItemKind<'_> {\n         Some(match *self {\n             ItemKind::Fn(_, ref generics, _)\n             | ItemKind::TyAlias(_, ref generics)\n-            | ItemKind::OpaqueTy(OpaqueTy {\n-                ref generics, origin: OpaqueTyOrigin::TyAlias, ..\n-            })\n+            | ItemKind::OpaqueTy(OpaqueTy { ref generics, .. })\n             | ItemKind::Enum(_, ref generics)\n             | ItemKind::Struct(_, ref generics)\n             | ItemKind::Union(_, ref generics)\n             | ItemKind::Trait(_, _, ref generics, _, _)\n+            | ItemKind::TraitAlias(ref generics, _)\n             | ItemKind::Impl(Impl { ref generics, .. }) => generics,\n             _ => return None,\n         })\n@@ -3210,13 +3209,8 @@ impl<'hir> OwnerNode<'hir> {\n         }\n     }\n \n-    pub fn generics(&self) -> Option<&'hir Generics<'hir>> {\n-        match self {\n-            OwnerNode::TraitItem(TraitItem { generics, .. })\n-            | OwnerNode::ImplItem(ImplItem { generics, .. }) => Some(generics),\n-            OwnerNode::Item(item) => item.kind.generics(),\n-            _ => None,\n-        }\n+    pub fn generics(self) -> Option<&'hir Generics<'hir>> {\n+        Node::generics(self.into())\n     }\n \n     pub fn def_id(self) -> LocalDefId {\n@@ -3403,9 +3397,12 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n-    pub fn generics(&self) -> Option<&'hir Generics<'hir>> {\n+    pub fn generics(self) -> Option<&'hir Generics<'hir>> {\n         match self {\n-            Node::TraitItem(TraitItem { generics, .. })\n+            Node::ForeignItem(ForeignItem {\n+                kind: ForeignItemKind::Fn(_, _, generics), ..\n+            })\n+            | Node::TraitItem(TraitItem { generics, .. })\n             | Node::ImplItem(ImplItem { generics, .. }) => Some(generics),\n             Node::Item(item) => item.kind.generics(),\n             _ => None,"}, {"sha": "779af7a382765f08f45144107174edf0ee8c2d7a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/623ea5f5d283dfb57e17e2671bebe63ff7d1e936/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623ea5f5d283dfb57e17e2671bebe63ff7d1e936/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=623ea5f5d283dfb57e17e2671bebe63ff7d1e936", "patch": "@@ -361,27 +361,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn get_generics(self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {\n         let node = self.tcx.hir_owner(id)?;\n-        match node.node {\n-            OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),\n-            OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),\n-            OwnerNode::ForeignItem(ForeignItem {\n-                kind: ForeignItemKind::Fn(_, _, generics),\n-                ..\n-            })\n-            | OwnerNode::Item(Item {\n-                kind:\n-                    ItemKind::Fn(_, generics, _)\n-                    | ItemKind::TyAlias(_, generics)\n-                    | ItemKind::Enum(_, generics)\n-                    | ItemKind::Struct(_, generics)\n-                    | ItemKind::Union(_, generics)\n-                    | ItemKind::Trait(_, _, generics, ..)\n-                    | ItemKind::TraitAlias(generics, _)\n-                    | ItemKind::Impl(Impl { generics, .. }),\n-                ..\n-            }) => Some(generics),\n-            _ => None,\n-        }\n+        node.node.generics()\n     }\n \n     pub fn item(self, id: ItemId) -> &'hir Item<'hir> {"}, {"sha": "838980e08aa0459687fe5baa6372dafde0f2a88a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 13, "deletions": 38, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/623ea5f5d283dfb57e17e2671bebe63ff7d1e936/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623ea5f5d283dfb57e17e2671bebe63ff7d1e936/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=623ea5f5d283dfb57e17e2671bebe63ff7d1e936", "patch": "@@ -1588,41 +1588,20 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         _ => None,\n     };\n \n-    let mut opt_self = None;\n-    let mut allow_defaults = false;\n-\n     let no_generics = hir::Generics::empty();\n-    let ast_generics = match node {\n-        Node::TraitItem(item) => &item.generics,\n-\n-        Node::ImplItem(item) => &item.generics,\n-\n+    let ast_generics = node.generics().unwrap_or(&no_generics);\n+    let (opt_self, allow_defaults) = match node {\n         Node::Item(item) => {\n             match item.kind {\n-                ItemKind::Fn(.., ref generics, _)\n-                | ItemKind::Impl(hir::Impl { ref generics, .. }) => generics,\n-\n-                ItemKind::TyAlias(_, ref generics)\n-                | ItemKind::Enum(_, ref generics)\n-                | ItemKind::Struct(_, ref generics)\n-                | ItemKind::OpaqueTy(hir::OpaqueTy { ref generics, .. })\n-                | ItemKind::Union(_, ref generics) => {\n-                    allow_defaults = true;\n-                    generics\n-                }\n-\n-                ItemKind::Trait(_, _, ref generics, ..)\n-                | ItemKind::TraitAlias(ref generics, ..) => {\n+                ItemKind::Trait(..) | ItemKind::TraitAlias(..) => {\n                     // Add in the self type parameter.\n                     //\n                     // Something of a hack: use the node id for the trait, also as\n                     // the node id for the Self type parameter.\n-                    let param_id = item.def_id;\n-\n-                    opt_self = Some(ty::GenericParamDef {\n+                    let opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n                         name: kw::SelfUpper,\n-                        def_id: param_id.to_def_id(),\n+                        def_id,\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n@@ -1631,21 +1610,17 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         },\n                     });\n \n-                    allow_defaults = true;\n-                    generics\n+                    (opt_self, true)\n                 }\n-\n-                _ => &no_generics,\n+                ItemKind::TyAlias(..)\n+                | ItemKind::Enum(..)\n+                | ItemKind::Struct(..)\n+                | ItemKind::OpaqueTy(..)\n+                | ItemKind::Union(..) => (None, true),\n+                _ => (None, false),\n             }\n         }\n-\n-        Node::ForeignItem(item) => match item.kind {\n-            ForeignItemKind::Static(..) => &no_generics,\n-            ForeignItemKind::Fn(_, _, ref generics) => generics,\n-            ForeignItemKind::Type => &no_generics,\n-        },\n-\n-        _ => &no_generics,\n+        _ => (None, false),\n     };\n \n     let has_self = opt_self.is_some();"}]}