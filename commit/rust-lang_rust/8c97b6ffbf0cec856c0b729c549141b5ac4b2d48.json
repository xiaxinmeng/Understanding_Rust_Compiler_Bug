{"sha": "8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTdiNmZmYmYwY2VjODU2YzBiNzI5YzU0OTE0MWI1YWM0YjJkNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-09T06:42:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-09T06:42:11Z"}, "message": "Auto merge of #57086 - oli-obk:miri_dist, r=kennytm\n\nPrepare everything for distributing miri via rustup\n\nThe next step is to tell rustup about `cargo-miri` in https://github.com/rust-lang/rustup.rs/blob/31935e5f633a5acd3a203d23b61d1556c64a821c/src/rustup/lib.rs#L28 and https://github.com/rust-lang/rustup.rs/blob/1ccd706d1d572c777c5134bd7db7aa1a8df7f278/src/rustup-win-installer/src/lib.rs#L29", "tree": {"sha": "1a1953ff7970090096e86ceb79fa7dd3f1e18f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a1953ff7970090096e86ceb79fa7dd3f1e18f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "html_url": "https://github.com/rust-lang/rust/commit/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167ceff01ec2f01f677fa6351646255d3dacbb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/167ceff01ec2f01f677fa6351646255d3dacbb98", "html_url": "https://github.com/rust-lang/rust/commit/167ceff01ec2f01f677fa6351646255d3dacbb98"}, {"sha": "2ab78e195a8af531012f820ab84995c44d32c5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab78e195a8af531012f820ab84995c44d32c5c1", "html_url": "https://github.com/rust-lang/rust/commit/2ab78e195a8af531012f820ab84995c44d32c5c1"}], "stats": {"total": 163, "additions": 162, "deletions": 1}, "files": [{"sha": "67e0dd8e795bb596d66fa4eda1899b06543270c7", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -13,6 +13,7 @@ __pycache__/\n .settings/\n .valgrindrc\n .vscode/\n+.favorites.json\n /*-*-*-*/\n /*-*-*/\n /Makefile"}, {"sha": "1fde5ac8cb15a25e813549b416b275ba528255c4", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -2260,8 +2260,10 @@ dependencies = [\n name = \"rustc-workspace-hack\"\n version = \"1.0.0\"\n dependencies = [\n+ \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "9c58f5b179fd8b2afdadd48d4e4c31137b8157e1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -449,6 +449,7 @@ impl<'a> Builder<'a> {\n                 dist::Rls,\n                 dist::Rustfmt,\n                 dist::Clippy,\n+                dist::Miri,\n                 dist::LlvmTools,\n                 dist::Lldb,\n                 dist::Extended,\n@@ -461,6 +462,7 @@ impl<'a> Builder<'a> {\n                 install::Rls,\n                 install::Rustfmt,\n                 install::Clippy,\n+                install::Miri,\n                 install::Analysis,\n                 install::Src,\n                 install::Rustc"}, {"sha": "3f9a093149423344e7d59a3d3d79da2b06f68992", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -32,6 +32,8 @@ pub fn pkgname(builder: &Builder, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.rls_package_vers())\n     } else if component == \"clippy\" {\n         format!(\"{}-{}\", component, builder.clippy_package_vers())\n+    } else if component == \"miri\" {\n+        format!(\"{}-{}\", component, builder.miri_package_vers())\n     } else if component == \"rustfmt\" {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n     } else if component == \"llvm-tools\" {\n@@ -1275,6 +1277,90 @@ impl Step for Clippy {\n     }\n }\n \n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Miri {\n+    pub stage: u32,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Miri {\n+    type Output = Option<PathBuf>;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"miri\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Miri {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+        let stage = self.stage;\n+        let target = self.target;\n+        assert!(builder.config.extended);\n+\n+        builder.info(&format!(\"Dist miri stage{} ({})\", stage, target));\n+        let src = builder.src.join(\"src/tools/miri\");\n+        let release_num = builder.release_num(\"miri\");\n+        let name = pkgname(builder, \"miri\");\n+        let version = builder.miri_info.version(builder, &release_num);\n+\n+        let tmp = tmpdir(builder);\n+        let image = tmp.join(\"miri-image\");\n+        drop(fs::remove_dir_all(&image));\n+        builder.create_dir(&image);\n+\n+        // Prepare the image directory\n+        // We expect miri to build, because we've exited this step above if tool\n+        // state for miri isn't testing.\n+        let miri = builder.ensure(tool::Miri {\n+            compiler: builder.compiler(stage, builder.config.build),\n+            target, extra_features: Vec::new()\n+        }).or_else(|| { missing_tool(\"miri\", builder.build.config.missing_tools); None })?;\n+        let cargomiri = builder.ensure(tool::CargoMiri {\n+            compiler: builder.compiler(stage, builder.config.build),\n+            target, extra_features: Vec::new()\n+        }).or_else(|| { missing_tool(\"cargo miri\", builder.build.config.missing_tools); None })?;\n+\n+        builder.install(&miri, &image.join(\"bin\"), 0o755);\n+        builder.install(&cargomiri, &image.join(\"bin\"), 0o755);\n+        let doc = image.join(\"share/doc/miri\");\n+        builder.install(&src.join(\"README.md\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"miri-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        t!(fs::create_dir_all(&overlay));\n+        builder.install(&src.join(\"README.md\"), &overlay, 0o644);\n+        builder.install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+        builder.create(&overlay.join(\"version\"), &version);\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=miri-ready-to-serve.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(builder))\n+           .arg(\"--output-dir\").arg(&distdir(builder))\n+           .arg(\"--non-installed-overlay\").arg(&overlay)\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+           .arg(\"--component-name=miri-preview\");\n+\n+        builder.run(&mut cmd);\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustfmt {\n     pub stage: u32,\n@@ -1396,6 +1482,7 @@ impl Step for Extended {\n         let rls_installer = builder.ensure(Rls { stage, target });\n         let llvm_tools_installer = builder.ensure(LlvmTools { stage, target });\n         let clippy_installer = builder.ensure(Clippy { stage, target });\n+        let miri_installer = builder.ensure(Miri { stage, target });\n         let lldb_installer = builder.ensure(Lldb { target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n         let analysis_installer = builder.ensure(Analysis {\n@@ -1434,6 +1521,7 @@ impl Step for Extended {\n         tarballs.push(cargo_installer);\n         tarballs.extend(rls_installer.clone());\n         tarballs.extend(clippy_installer.clone());\n+        tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer);\n         tarballs.extend(lldb_installer);\n@@ -1506,6 +1594,9 @@ impl Step for Extended {\n             if clippy_installer.is_none() {\n                 contents = filter(&contents, \"clippy\");\n             }\n+            if miri_installer.is_none() {\n+                contents = filter(&contents, \"miri\");\n+            }\n             if rustfmt_installer.is_none() {\n                 contents = filter(&contents, \"rustfmt\");\n             }\n@@ -1546,6 +1637,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 prepare(\"clippy\");\n             }\n+            if miri_installer.is_some() {\n+                prepare(\"miri\");\n+            }\n \n             // create an 'uninstall' package\n             builder.install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"uninstall\"), 0o755);\n@@ -1576,6 +1670,8 @@ impl Step for Extended {\n                     \"rls-preview\".to_string()\n                 } else if name == \"clippy\" {\n                     \"clippy-preview\".to_string()\n+                } else if name == \"miri\" {\n+                    \"miri-preview\".to_string()\n                 } else {\n                     name.to_string()\n                 };\n@@ -1595,6 +1691,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 prepare(\"clippy\");\n             }\n+            if miri_installer.is_some() {\n+                prepare(\"miri\");\n+            }\n             if target.contains(\"windows-gnu\") {\n                 prepare(\"rust-mingw\");\n             }\n@@ -1687,6 +1786,18 @@ impl Step for Extended {\n                                 .arg(\"-out\").arg(exe.join(\"ClippyGroup.wxs\"))\n                                 .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n             }\n+            if miri_installer.is_some() {\n+                builder.run(Command::new(&heat)\n+                                .current_dir(&exe)\n+                                .arg(\"dir\")\n+                                .arg(\"miri\")\n+                                .args(&heat_flags)\n+                                .arg(\"-cg\").arg(\"MiriGroup\")\n+                                .arg(\"-dr\").arg(\"Miri\")\n+                                .arg(\"-var\").arg(\"var.MiriDir\")\n+                                .arg(\"-out\").arg(exe.join(\"MiriGroup.wxs\"))\n+                                .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n+            }\n             builder.run(Command::new(&heat)\n                             .current_dir(&exe)\n                             .arg(\"dir\")\n@@ -1732,6 +1843,9 @@ impl Step for Extended {\n                 if clippy_installer.is_some() {\n                     cmd.arg(\"-dClippyDir=clippy\");\n                 }\n+                if miri_installer.is_some() {\n+                    cmd.arg(\"-dMiriDir=miri\");\n+                }\n                 if target.contains(\"windows-gnu\") {\n                     cmd.arg(\"-dGccDir=rust-mingw\");\n                 }\n@@ -1750,6 +1864,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 candle(\"ClippyGroup.wxs\".as_ref());\n             }\n+            if miri_installer.is_some() {\n+                candle(\"MiriGroup.wxs\".as_ref());\n+            }\n             candle(\"AnalysisGroup.wxs\".as_ref());\n \n             if target.contains(\"windows-gnu\") {\n@@ -1782,6 +1899,9 @@ impl Step for Extended {\n             if clippy_installer.is_some() {\n                 cmd.arg(\"ClippyGroup.wixobj\");\n             }\n+            if miri_installer.is_some() {\n+                cmd.arg(\"MiriGroup.wixobj\");\n+            }\n \n             if target.contains(\"windows-gnu\") {\n                 cmd.arg(\"GccGroup.wixobj\");\n@@ -1867,6 +1987,7 @@ impl Step for HashSign {\n         cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"clippy\")));\n+        cmd.arg(builder.package_vers(&builder.release_num(\"miri\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n         cmd.arg(builder.llvm_tools_package_vers());\n         cmd.arg(builder.lldb_package_vers());"}, {"sha": "1265fa9eff45bca8485b491edd564def56a28883", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -32,6 +32,9 @@ pub fn install_rls(builder: &Builder, stage: u32, host: Interned<String>) {\n pub fn install_clippy(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"clippy\", \"clippy\", stage, Some(host));\n }\n+pub fn install_miri(builder: &Builder, stage: u32, host: Interned<String>) {\n+    install_sh(builder, \"miri\", \"miri\", stage, Some(host));\n+}\n \n pub fn install_rustfmt(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"rustfmt\", \"rustfmt\", stage, Some(host));\n@@ -217,6 +220,14 @@ install!((self, builder, _config),\n             builder.info(&format!(\"skipping Install clippy stage{} ({})\", self.stage, self.target));\n         }\n     };\n+    Miri, \"miri\", Self::should_build(_config), only_hosts: true, {\n+        if builder.ensure(dist::Miri { stage: self.stage, target: self.target }).is_some() ||\n+            Self::should_install(builder) {\n+            install_miri(builder, self.stage, self.target);\n+        } else {\n+            builder.info(&format!(\"skipping Install miri stage{} ({})\", self.stage, self.target));\n+        }\n+    };\n     Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n             Self::should_install(builder) {"}, {"sha": "bddc6362389adcbecd4a1bf41b5f50b7d68862e2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -253,6 +253,7 @@ pub struct Build {\n     cargo_info: channel::GitInfo,\n     rls_info: channel::GitInfo,\n     clippy_info: channel::GitInfo,\n+    miri_info: channel::GitInfo,\n     rustfmt_info: channel::GitInfo,\n     local_rebuild: bool,\n     fail_fast: bool,\n@@ -374,6 +375,7 @@ impl Build {\n         let cargo_info = channel::GitInfo::new(&config, &src.join(\"src/tools/cargo\"));\n         let rls_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rls\"));\n         let clippy_info = channel::GitInfo::new(&config, &src.join(\"src/tools/clippy\"));\n+        let miri_info = channel::GitInfo::new(&config, &src.join(\"src/tools/miri\"));\n         let rustfmt_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rustfmt\"));\n \n         let mut build = Build {\n@@ -396,6 +398,7 @@ impl Build {\n             cargo_info,\n             rls_info,\n             clippy_info,\n+            miri_info,\n             rustfmt_info,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n@@ -1016,6 +1019,11 @@ impl Build {\n         self.package_vers(&self.release_num(\"clippy\"))\n     }\n \n+    /// Returns the value of `package_vers` above for miri\n+    fn miri_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"miri\"))\n+    }\n+\n     /// Returns the value of `package_vers` above for rustfmt\n     fn rustfmt_package_vers(&self) -> String {\n         self.package_vers(&self.release_num(\"rustfmt\"))"}, {"sha": "9f6db73e6f71389dd2456e234964a23dde40d23f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -83,6 +83,7 @@ impl Step for ToolBuild {\n                 | \"rls\"\n                 | \"cargo\"\n                 | \"clippy-driver\"\n+                | \"miri\"\n                 => {}\n \n                 _ => return,\n@@ -218,6 +219,7 @@ pub fn prepare_tool_cargo(\n         if path.ends_with(\"cargo\") ||\n             path.ends_with(\"rls\") ||\n             path.ends_with(\"clippy\") ||\n+            path.ends_with(\"miri\") ||\n             path.ends_with(\"rustfmt\")\n         {\n             cargo.env(\"LIBZ_SYS_STATIC\", \"1\");\n@@ -592,6 +594,14 @@ tool_extended!((self, builder),\n         });\n     };\n     Miri, miri, \"src/tools/miri\", \"miri\", {};\n+    CargoMiri, miri, \"src/tools/miri\", \"cargo-miri\", {\n+        // Miri depends on procedural macros (serde), which requires a full host\n+        // compiler to be available, so we need to depend on that.\n+        builder.ensure(compile::Rustc {\n+            compiler: self.compiler,\n+            target: builder.config.build,\n+        });\n+    };\n     Rls, rls, \"src/tools/rls\", \"rls\", {\n         let clippy = builder.ensure(Clippy {\n             compiler: self.compiler,"}, {"sha": "c4499ef95ad8e205fead99248059ac0329bc70a3", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c97b6ffbf0cec856c0b729c549141b5ac4b2d48/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=8c97b6ffbf0cec856c0b729c549141b5ac4b2d48", "patch": "@@ -27,18 +27,21 @@ features = [\n   \"errhandlingapi\",\n   \"jobapi\",\n   \"jobapi2\",\n+  \"knownfolders\",\n   \"lmcons\",\n   \"memoryapi\",\n   \"minschannel\",\n   \"minwinbase\",\n   \"ntsecapi\",\n   \"ntstatus\",\n+  \"objbase\",\n   \"profileapi\",\n   \"processenv\",\n   \"psapi\",\n   \"schannel\",\n   \"securitybaseapi\",\n   \"shellapi\",\n+  \"shlobj\",\n   \"sspi\",\n   \"synchapi\",\n   \"sysinfoapi\",\n@@ -50,12 +53,15 @@ features = [\n ]\n \n [dependencies]\n-curl-sys = { version = \"0.4.13\", optional = true }\n+curl-sys = { version = \"0.4.13\", features = [\"http2\", \"libnghttp2-sys\"], optional = true }\n parking_lot = { version = \"0.6\", features = ['nightly'] }\n rand = { version = \"0.5.5\", features = [\"i128_support\"] }\n serde = { version = \"1.0.82\", features = ['derive'] }\n serde_json = { version = \"1.0.31\", features = [\"raw_value\"] }\n smallvec = { version = \"0.6\", features = ['union'] }\n+scopeguard = { version = \"0.3.3\", features = [\"use_std\", \"default\"]}\n+byteorder = { version = \"1.2.7\", features = [\"i128\"]}\n+\n \n [target.'cfg(not(windows))'.dependencies]\n openssl = { version = \"0.10.12\", optional = true }"}]}