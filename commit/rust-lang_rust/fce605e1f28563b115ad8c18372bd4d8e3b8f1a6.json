{"sha": "fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZTYwNWUxZjI4NTYzYjExNWFkOGMxODM3MmJkNGQ4ZTNiOGYxYTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-08-18T17:08:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-08-19T20:26:10Z"}, "message": "Remove old stage0 compatibility", "tree": {"sha": "ea19d8ee0e14fce232077ccdeb605ac9679dfc51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea19d8ee0e14fce232077ccdeb605ac9679dfc51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "html_url": "https://github.com/rust-lang/rust/commit/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab6ca7e98fb0261185e5566cd77008434a900003", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6ca7e98fb0261185e5566cd77008434a900003", "html_url": "https://github.com/rust-lang/rust/commit/ab6ca7e98fb0261185e5566cd77008434a900003"}], "stats": {"total": 119, "additions": 29, "deletions": 90}, "files": [{"sha": "9bba6cd38e5567d9611d4f84affb00e4049f653b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "patch": "@@ -699,38 +699,29 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n-    // Note: This macro is a temporary hack that can be remove once we are building with a compiler\n-    // that supports `!`\n-    macro_rules! not_stage0 {\n-        () => {\n-            #[unstable(feature = \"never_type\", issue = \"35121\")]\n-            impl PartialEq for ! {\n-                fn eq(&self, _: &!) -> bool {\n-                    *self\n-                }\n-            }\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    impl PartialEq for ! {\n+        fn eq(&self, _: &!) -> bool {\n+            *self\n+        }\n+    }\n \n-            #[unstable(feature = \"never_type\", issue = \"35121\")]\n-            impl Eq for ! {}\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    impl Eq for ! {}\n \n-            #[unstable(feature = \"never_type\", issue = \"35121\")]\n-            impl PartialOrd for ! {\n-                fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n-                    *self\n-                }\n-            }\n-\n-            #[unstable(feature = \"never_type\", issue = \"35121\")]\n-            impl Ord for ! {\n-                fn cmp(&self, _: &!) -> Ordering {\n-                    *self\n-                }\n-            }\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    impl PartialOrd for ! {\n+        fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n+            *self\n         }\n     }\n \n-    #[cfg(not(stage0))]\n-    not_stage0!();\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    impl Ord for ! {\n+        fn cmp(&self, _: &!) -> Ordering {\n+            *self\n+        }\n+    }\n \n     // & pointers\n "}, {"sha": "7688da971eb1dde87c2bb8409d13a2f2030535a9", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "patch": "@@ -1363,28 +1363,19 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-// Note: This macro is a temporary hack that can be remove once we are building with a compiler\n-// that supports `!`\n-macro_rules! not_stage0 {\n-    () => {\n-        #[unstable(feature = \"never_type\", issue = \"35121\")]\n-        impl Debug for ! {\n-            fn fmt(&self, _: &mut Formatter) -> Result {\n-                *self\n-            }\n-        }\n-\n-        #[unstable(feature = \"never_type\", issue = \"35121\")]\n-        impl Display for ! {\n-            fn fmt(&self, _: &mut Formatter) -> Result {\n-                *self\n-            }\n-        }\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n+impl Debug for ! {\n+    fn fmt(&self, _: &mut Formatter) -> Result {\n+        *self\n     }\n }\n \n-#[cfg(not(stage0))]\n-not_stage0!();\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n+impl Display for ! {\n+    fn fmt(&self, _: &mut Formatter) -> Result {\n+        *self\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for bool {"}, {"sha": "fbeddf26b939a4014dddf8e527d6d5f365bf5f5b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "patch": "@@ -67,8 +67,6 @@\n #![deny(missing_debug_implementations)]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n-#![cfg_attr(stage0, allow(unused_attributes))]\n-\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n@@ -92,9 +90,7 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(question_mark)]\n-\n-// NOTE: remove the cfg_attr next snapshot\n-#![cfg_attr(not(stage0), feature(never_type))]\n+#![feature(never_type)]\n \n #[macro_use]\n mod macros;"}, {"sha": "bd0c2f5126d133c4965963dfb450c80bbcd314ea", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "patch": "@@ -264,30 +264,6 @@ unsafe fn find_eh_action(context: *mut uw::_Unwind_Context) -> EHAction {\n     eh::find_eh_action(lsda, &eh_context)\n }\n \n-// *** Delete after a new snapshot ***\n-#[cfg(all(stage0, any(target_os = \"ios\", not(target_arch = \"arm\"))))]\n-#[lang = \"eh_personality_catch\"]\n-#[no_mangle]\n-pub unsafe extern \"C\" fn rust_eh_personality_catch(version: c_int,\n-                                                    actions: uw::_Unwind_Action,\n-                                                    exception_class: uw::_Unwind_Exception_Class,\n-                                                    ue_header: *mut uw::_Unwind_Exception,\n-                                                    context: *mut uw::_Unwind_Context)\n-                                                    -> uw::_Unwind_Reason_Code {\n-    rust_eh_personality(version, actions, exception_class, ue_header, context)\n-}\n-\n-// *** Delete after a new snapshot ***\n-#[cfg(all(stage0, target_arch = \"arm\", not(target_os = \"ios\")))]\n-#[lang = \"eh_personality_catch\"]\n-#[no_mangle]\n-pub unsafe extern \"C\" fn rust_eh_personality_catch(state: uw::_Unwind_State,\n-                                                    ue_header: *mut uw::_Unwind_Exception,\n-                                                    context: *mut uw::_Unwind_Context)\n-                                                    -> uw::_Unwind_Reason_Code {\n-    rust_eh_personality(state, ue_header, context)\n-}\n-\n // See docs in the `unwind` module.\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n #[lang = \"eh_unwind_resume\"]"}, {"sha": "e6d3920b29cb0106da0f6e02a0ec5c09561a0929", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce605e1f28563b115ad8c18372bd4d8e3b8f1a6/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=fce605e1f28563b115ad8c18372bd4d8e3b8f1a6", "patch": "@@ -81,21 +81,6 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {\n // This is considered acceptable, because the behavior of throwing exceptions\n // through a C ABI boundary is undefined.\n \n-// *** Delete after a new snapshot ***\n-#[cfg(stage0)]\n-#[lang = \"eh_personality_catch\"]\n-#[cfg(not(test))]\n-unsafe extern \"C\" fn rust_eh_personality_catch(exceptionRecord: *mut c::EXCEPTION_RECORD,\n-                                               establisherFrame: c::LPVOID,\n-                                               contextRecord: *mut c::CONTEXT,\n-                                               dispatcherContext: *mut c::DISPATCHER_CONTEXT)\n-                                               -> c::EXCEPTION_DISPOSITION {\n-    rust_eh_personality(exceptionRecord,\n-                        establisherFrame,\n-                        contextRecord,\n-                        dispatcherContext)\n-}\n-\n #[lang = \"eh_personality\"]\n #[cfg(not(test))]\n unsafe extern \"C\" fn rust_eh_personality(exceptionRecord: *mut c::EXCEPTION_RECORD,"}]}