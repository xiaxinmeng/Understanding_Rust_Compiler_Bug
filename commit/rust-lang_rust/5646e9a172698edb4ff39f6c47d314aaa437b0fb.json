{"sha": "5646e9a172698edb4ff39f6c47d314aaa437b0fb", "node_id": "C_kwDOAAsO6NoAKDU2NDZlOWExNzI2OThlZGI0ZmYzOWY2YzQ3ZDMxNGFhYTQzN2IwZmI", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-04-17T16:12:06Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-05T17:13:00Z"}, "message": "Allow unused rules in some places in the compiler, library and tools", "tree": {"sha": "0ef361c4ed96f5db5d80750772edecaa85796971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef361c4ed96f5db5d80750772edecaa85796971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5646e9a172698edb4ff39f6c47d314aaa437b0fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5646e9a172698edb4ff39f6c47d314aaa437b0fb", "html_url": "https://github.com/rust-lang/rust/commit/5646e9a172698edb4ff39f6c47d314aaa437b0fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5646e9a172698edb4ff39f6c47d314aaa437b0fb/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd2232fe4a474af108666bdeb24c44b9e10669a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd2232fe4a474af108666bdeb24c44b9e10669a", "html_url": "https://github.com/rust-lang/rust/commit/0bd2232fe4a474af108666bdeb24c44b9e10669a"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "4407297c943a85dc01b1ba9cfaaec7dbe04722b5", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5646e9a172698edb4ff39f6c47d314aaa437b0fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5646e9a172698edb4ff39f6c47d314aaa437b0fb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=5646e9a172698edb4ff39f6c47d314aaa437b0fb", "patch": "@@ -816,6 +816,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n     span: Span,\n ) -> Result<&'ll Value, ()> {\n     // macros for error handling:\n+    #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n     macro_rules! emit_error {\n         ($msg: tt) => {\n             emit_error!($msg, )\n@@ -1144,6 +1145,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         span: Span,\n         args: &[OperandRef<'tcx, &'ll Value>],\n     ) -> Result<&'ll Value, ()> {\n+        #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n         macro_rules! emit_error {\n             ($msg: tt) => {\n                 emit_error!($msg, )"}, {"sha": "e2d70dd0b9c4157c3aa2d74d7c83b6f0dbfdae4c", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5646e9a172698edb4ff39f6c47d314aaa437b0fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5646e9a172698edb4ff39f6c47d314aaa437b0fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=5646e9a172698edb4ff39f6c47d314aaa437b0fb", "patch": "@@ -258,6 +258,7 @@ macro_rules! make_mir_visitor {\n                 // for best performance, we want to use an iterator rather\n                 // than a for-loop, to avoid calling `body::Body::invalidate` for\n                 // each basic block.\n+                #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut().iter_enumerated_mut());\n                     () => (body.basic_blocks().iter_enumerated());\n@@ -279,6 +280,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_local_decl(local, & $($mutability)? body.local_decls[local]);\n                 }\n \n+                #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n                 macro_rules! type_annotations {\n                     (mut) => (body.user_type_annotations.iter_enumerated_mut());\n                     () => (body.user_type_annotations.iter_enumerated());\n@@ -932,6 +934,7 @@ macro_rules! make_mir_visitor {\n                 body: &$($mutability)? Body<'tcx>,\n                 location: Location\n             ) {\n+                #[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut());\n                     () => (body.basic_blocks());"}, {"sha": "093b02113c3afca9513d5fe2a60335fe7218490a", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5646e9a172698edb4ff39f6c47d314aaa437b0fb/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5646e9a172698edb4ff39f6c47d314aaa437b0fb/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=5646e9a172698edb4ff39f6c47d314aaa437b0fb", "patch": "@@ -56,6 +56,7 @@ macro_rules! vec {\n // `slice::into_vec`  function which is only available with cfg(test)\n // NB see the slice::hack module in slice.rs for more information\n #[cfg(all(not(no_global_oom_handling), test))]\n+#[cfg_attr(not(bootstrap), allow(unused_macro_rules))]\n macro_rules! vec {\n     () => (\n         $crate::vec::Vec::new()"}, {"sha": "1ce02e48c05b6399492cc3ee19b28d5c4a36edc0", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5646e9a172698edb4ff39f6c47d314aaa437b0fb/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5646e9a172698edb4ff39f6c47d314aaa437b0fb/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=5646e9a172698edb4ff39f6c47d314aaa437b0fb", "patch": "@@ -280,10 +280,6 @@ fn main() {\n fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\n     let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\n     macro_rules! register_diagnostics {\n-        ($($ecode:ident: $message:expr,)*) => (\n-            register_diagnostics!{$($ecode:$message,)* ;}\n-        );\n-\n         ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n             $(\n                 {long_codes.extend(["}]}