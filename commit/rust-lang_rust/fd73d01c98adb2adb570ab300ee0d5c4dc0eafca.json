{"sha": "fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "node_id": "C_kwDOAAsO6NoAKGZkNzNkMDFjOThhZGIyYWRiNTcwYWIzMDBlZTBkNWM0ZGMwZWFmY2E", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-07T13:34:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-12T20:10:15Z"}, "message": "rustc_resolve: Remove `Resolver::clone_output`\n\nAnd remove `Clone` impls and `Lrc`s that are no longer necessary", "tree": {"sha": "40a6683bc5b00b53a154e41d05dc188ce9fb65ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40a6683bc5b00b53a154e41d05dc188ce9fb65ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "html_url": "https://github.com/rust-lang/rust/commit/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9080b79f2b4d5deccd4e0e6cdbb68780d7d12a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/9080b79f2b4d5deccd4e0e6cdbb68780d7d12a58", "html_url": "https://github.com/rust-lang/rust/commit/9080b79f2b4d5deccd4e0e6cdbb68780d7d12a58"}], "stats": {"total": 97, "additions": 18, "deletions": 79}, "files": [{"sha": "cd3c620cbb768b482a87efa65e06a2f416050a1d", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "patch": "@@ -92,7 +92,7 @@ impl DefPathTable {\n /// The definition table containing node definitions.\n /// It holds the `DefPathTable` for `LocalDefId`s/`DefPath`s.\n /// It also stores mappings to convert `LocalDefId`s to/from `HirId`s.\n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct Definitions {\n     table: DefPathTable,\n     next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,"}, {"sha": "7cb3b6e1525b2bc476034645f73e73fc1b668415", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "patch": "@@ -3460,7 +3460,7 @@ pub struct Upvar {\n // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n-#[derive(Encodable, Decodable, Clone, Debug, HashStable_Generic)]\n+#[derive(Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n     pub import_ids: SmallVec<[LocalDefId; 1]>,"}, {"sha": "c8d8afae39e0ad1c88ba3d11110897df40ac2c2f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "patch": "@@ -35,13 +35,11 @@ use rustc_target::spec::PanicStrategy;\n use rustc_trait_selection::traits;\n \n use std::any::Any;\n-use std::cell::RefCell;\n use std::ffi::OsString;\n use std::io::{self, BufWriter, Write};\n use std::marker::PhantomPinned;\n use std::path::{Path, PathBuf};\n use std::pin::Pin;\n-use std::rc::Rc;\n use std::sync::{Arc, LazyLock};\n use std::{env, fs, iter};\n \n@@ -131,21 +129,12 @@ mod boxed_resolver {\n             f((&mut *resolver).as_mut().unwrap())\n         }\n \n-        pub fn to_resolver_outputs(resolver: Rc<RefCell<BoxedResolver>>) -> ty::ResolverOutputs {\n-            match Rc::try_unwrap(resolver) {\n-                Ok(resolver) => {\n-                    let mut resolver = resolver.into_inner();\n-                    // SAFETY: The resolver doesn't need to be pinned.\n-                    let mut resolver = unsafe {\n-                        resolver\n-                            .0\n-                            .as_mut()\n-                            .map_unchecked_mut(|boxed_resolver| &mut boxed_resolver.resolver)\n-                    };\n-                    resolver.take().unwrap().into_outputs()\n-                }\n-                Err(resolver) => resolver.borrow_mut().access(|resolver| resolver.clone_outputs()),\n-            }\n+        pub fn into_outputs(mut self) -> ty::ResolverOutputs {\n+            // SAFETY: The resolver doesn't need to be pinned.\n+            let mut resolver = unsafe {\n+                self.0.as_mut().map_unchecked_mut(|boxed_resolver| &mut boxed_resolver.resolver)\n+            };\n+            resolver.take().unwrap().into_outputs()\n         }\n     }\n }"}, {"sha": "67886b6b9896e17e7ac64aa9d49586dd69ce6541", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "patch": "@@ -21,7 +21,6 @@ use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n use std::any::Any;\n use std::cell::{RefCell, RefMut};\n-use std::rc::Rc;\n use std::sync::Arc;\n \n /// Represent the result of a query.\n@@ -88,7 +87,7 @@ pub struct Queries<'tcx> {\n     parse: Query<ast::Crate>,\n     crate_name: Query<Symbol>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n-    expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n+    expansion: Query<(Lrc<ast::Crate>, BoxedResolver, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     // This just points to what's in `gcx_cell`.\n     gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n@@ -171,8 +170,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn expansion(\n         &self,\n-    ) -> Result<QueryResult<'_, (Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>>\n-    {\n+    ) -> Result<QueryResult<'_, (Lrc<ast::Crate>, BoxedResolver, Lrc<LintStore>)>> {\n         trace!(\"expansion\");\n         self.expansion.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n@@ -188,7 +186,7 @@ impl<'tcx> Queries<'tcx> {\n             let krate = resolver.access(|resolver| {\n                 passes::configure_and_expand(sess, &lint_store, krate, crate_name, resolver)\n             })?;\n-            Ok((Lrc::new(krate), Rc::new(RefCell::new(resolver)), lint_store))\n+            Ok((Lrc::new(krate), resolver, lint_store))\n         })\n     }\n \n@@ -217,7 +215,7 @@ impl<'tcx> Queries<'tcx> {\n                 untracked,\n                 global_ctxt: untracked_resolutions,\n                 ast_lowering: untracked_resolver_for_lowering,\n-            } = BoxedResolver::to_resolver_outputs(resolver);\n+            } = resolver.into_outputs();\n \n             let gcx = passes::create_global_ctxt(\n                 self.compiler,"}, {"sha": "c357f294279fb0edfab60fd00c0a1ffcda24c3f5", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{Lrc, ReadGuard};\n+use rustc_data_structures::sync::ReadGuard;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n@@ -30,11 +30,10 @@ use proc_macro::bridge::client::ProcMacro;\n use std::ops::Fn;\n use std::path::Path;\n use std::time::Duration;\n-use std::{cmp, env};\n+use std::{cmp, env, iter};\n \n-#[derive(Clone)]\n pub struct CStore {\n-    metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n+    metas: IndexVec<CrateNum, Option<Box<CrateMetadata>>>,\n     injected_panic_runtime: Option<CrateNum>,\n     /// This crate needs an allocator and either provides it itself, or finds it in a dependency.\n     /// If the above is true, then this field denotes the kind of the found allocator.\n@@ -153,7 +152,7 @@ impl CStore {\n \n     fn set_crate_data(&mut self, cnum: CrateNum, data: CrateMetadata) {\n         assert!(self.metas[cnum].is_none(), \"Overwriting crate metadata entry\");\n-        self.metas[cnum] = Some(Lrc::new(data));\n+        self.metas[cnum] = Some(Box::new(data));\n     }\n \n     pub(crate) fn iter_crate_data(&self) -> impl Iterator<Item = (CrateNum, &CrateMetadata)> {\n@@ -245,7 +244,7 @@ impl CStore {\n             // order to make array indices in `metas` match with the\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n-            metas: IndexVec::from_elem_n(None, 1),\n+            metas: IndexVec::from_iter(iter::once(None)),\n             injected_panic_runtime: None,\n             allocator_kind: None,\n             alloc_error_handler_kind: None,"}, {"sha": "3c70e9c93e364104be9b4b95b098c038bd7d89f9", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd73d01c98adb2adb570ab300ee0d5c4dc0eafca/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=fd73d01c98adb2adb570ab300ee0d5c4dc0eafca", "patch": "@@ -378,7 +378,7 @@ impl ModuleOrUniformRoot<'_> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n enum PathResult<'a> {\n     Module(ModuleOrUniformRoot<'a>),\n     NonModule(PartialRes),\n@@ -1472,53 +1472,6 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs { global_ctxt, ast_lowering, untracked }\n     }\n \n-    pub fn clone_outputs(&self) -> ResolverOutputs {\n-        let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n-        let definitions = self.untracked.definitions.clone();\n-        let cstore = Box::new(self.cstore().clone());\n-        let untracked =\n-            Untracked { cstore, source_span: self.untracked.source_span.clone(), definitions };\n-        let global_ctxt = ResolverGlobalCtxt {\n-            expn_that_defined: self.expn_that_defined.clone(),\n-            visibilities: self.visibilities.clone(),\n-            has_pub_restricted: self.has_pub_restricted,\n-            extern_crate_map: self.extern_crate_map.clone(),\n-            reexport_map: self.reexport_map.clone(),\n-            glob_map: self.glob_map.clone(),\n-            maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n-            maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n-            extern_prelude: self\n-                .extern_prelude\n-                .iter()\n-                .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n-                .collect(),\n-            main_def: self.main_def,\n-            trait_impls: self.trait_impls.clone(),\n-            proc_macros,\n-            confused_type_with_std_module: self.confused_type_with_std_module.clone(),\n-            registered_tools: self.registered_tools.clone(),\n-            effective_visibilities: self.effective_visibilities.clone(),\n-            doc_link_resolutions: self.doc_link_resolutions.clone(),\n-            doc_link_traits_in_scope: self.doc_link_traits_in_scope.clone(),\n-            all_macro_rules: self.all_macro_rules.clone(),\n-        };\n-        let ast_lowering = ty::ResolverAstLowering {\n-            legacy_const_generic_args: self.legacy_const_generic_args.clone(),\n-            partial_res_map: self.partial_res_map.clone(),\n-            import_res_map: self.import_res_map.clone(),\n-            label_res_map: self.label_res_map.clone(),\n-            lifetimes_res_map: self.lifetimes_res_map.clone(),\n-            extra_lifetime_params_map: self.extra_lifetime_params_map.clone(),\n-            next_node_id: self.next_node_id,\n-            node_id_to_def_id: self.node_id_to_def_id.clone(),\n-            def_id_to_node_id: self.def_id_to_node_id.clone(),\n-            trait_map: self.trait_map.clone(),\n-            builtin_macro_kinds: self.builtin_macro_kinds.clone(),\n-            lifetime_elision_allowed: self.lifetime_elision_allowed.clone(),\n-        };\n-        ResolverOutputs { global_ctxt, ast_lowering, untracked }\n-    }\n-\n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n         StableHashingContext::new(self.session, &self.untracked)\n     }"}]}