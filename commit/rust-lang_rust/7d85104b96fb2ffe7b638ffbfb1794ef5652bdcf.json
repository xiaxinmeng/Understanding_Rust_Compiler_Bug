{"sha": "7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "node_id": "C_kwDOAAsO6NoAKDdkODUxMDRiOTZmYjJmZmU3YjYzOGZmYmZiMTc5NGVmNTY1MmJkY2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-11T17:29:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-11T17:29:10Z"}, "message": "Auto merge of #104289 - Dylan-DPC:rollup-v7wei2t, r=Dylan-DPC\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #100633 (Consider `#[must_use]` annotation on `async fn` as also affecting the `Future::Output`)\n - #103445 (`#[test]`: Point at return type if `Termination` bound is unsatisfied)\n - #103924 (Fix broken link in description of error code E0706)\n - #104146 (Retry binding TCP Socket in remote-test-server)\n - #104169 (Migrate `:target` rules to use CSS variables)\n - #104202 (Fix ICE #103748)\n - #104216 (Don't ICE on operator trait methods with generic methods)\n - #104217 (Display help message when fluent arg was referenced incorrectly)\n - #104245 (Reduce default configuration's dependency upon static libstdcpp library (#103606))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b71aa551bae9a348b5f6a31cd199927eab4a0ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b71aa551bae9a348b5f6a31cd199927eab4a0ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "html_url": "https://github.com/rust-lang/rust/commit/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742d3f02c243964e5b868d90afd60c2907be5853", "url": "https://api.github.com/repos/rust-lang/rust/commits/742d3f02c243964e5b868d90afd60c2907be5853", "html_url": "https://github.com/rust-lang/rust/commit/742d3f02c243964e5b868d90afd60c2907be5853"}, {"sha": "378112034e05e38690359df934ebf5d0d6aec0be", "url": "https://api.github.com/repos/rust-lang/rust/commits/378112034e05e38690359df934ebf5d0d6aec0be", "html_url": "https://github.com/rust-lang/rust/commit/378112034e05e38690359df934ebf5d0d6aec0be"}], "stats": {"total": 535, "additions": 384, "deletions": 151}, "files": [{"sha": "b62840d4bc8221d72d4a45d5d5e3144a3a050d01", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -112,7 +112,7 @@ pub fn expand_test_or_bench(\n     };\n \n     // Note: non-associated fn items are already handled by `expand_test_or_bench`\n-    if !matches!(item.kind, ast::ItemKind::Fn(_)) {\n+    let ast::ItemKind::Fn(fn_) = &item.kind else {\n         let diag = &cx.sess.parse_sess.span_diagnostic;\n         let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n         let mut err = match item.kind {\n@@ -130,7 +130,7 @@ pub fn expand_test_or_bench(\n             .emit();\n \n         return vec![Annotatable::Item(item)];\n-    }\n+    };\n \n     // has_*_signature will report any errors in the type so compilation\n     // will fail. We shouldn't try to expand in this case because the errors\n@@ -141,12 +141,14 @@ pub fn expand_test_or_bench(\n         return vec![Annotatable::Item(item)];\n     }\n \n-    let (sp, attr_sp) = (cx.with_def_site_ctxt(item.span), cx.with_def_site_ctxt(attr_sp));\n+    let sp = cx.with_def_site_ctxt(item.span);\n+    let ret_ty_sp = cx.with_def_site_ctxt(fn_.sig.decl.output.span());\n+    let attr_sp = cx.with_def_site_ctxt(attr_sp);\n \n     let test_id = Ident::new(sym::test, attr_sp);\n \n     // creates test::$name\n-    let test_path = |name| cx.path(sp, vec![test_id, Ident::from_str_and_span(name, sp)]);\n+    let test_path = |name| cx.path(ret_ty_sp, vec![test_id, Ident::from_str_and_span(name, sp)]);\n \n     // creates test::ShouldPanic::$name\n     let should_panic_path = |name| {\n@@ -192,7 +194,7 @@ pub fn expand_test_or_bench(\n                         vec![\n                             // super::$test_fn(b)\n                             cx.expr_call(\n-                                sp,\n+                                ret_ty_sp,\n                                 cx.expr_path(cx.path(sp, vec![item.ident])),\n                                 vec![cx.expr_ident(sp, b)],\n                             ),\n@@ -216,7 +218,11 @@ pub fn expand_test_or_bench(\n                         cx.expr_path(test_path(\"assert_test_result\")),\n                         vec![\n                             // $test_fn()\n-                            cx.expr_call(sp, cx.expr_path(cx.path(sp, vec![item.ident])), vec![]), // )\n+                            cx.expr_call(\n+                                ret_ty_sp,\n+                                cx.expr_path(cx.path(sp, vec![item.ident])),\n+                                vec![],\n+                            ), // )\n                         ],\n                     ), // }\n                 ), // )"}, {"sha": "fabd855a222f0f3e1aa97d96e580c9107737ec97", "filename": "compiler/rustc_error_codes/src/error_codes/E0706.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0706.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0706.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0706.md?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -56,4 +56,4 @@ You might be interested in visiting the [async book] for further information.\n [`async-trait` crate]: https://crates.io/crates/async-trait\n [async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n [Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n-[async book]: https://rust-lang.github.io/async-book/07_workarounds/06_async_in_traits.html\n+[async book]: https://rust-lang.github.io/async-book/07_workarounds/05_async_in_traits.html"}, {"sha": "d27edd47470e83a60c74dd527f9317c1bbad4b7b", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -150,3 +150,6 @@ hir_analysis_const_bound_for_non_const_trait =\n hir_analysis_self_in_impl_self =\n     `Self` is not valid in the self type of an impl block\n     .note = replace `Self` with a different type\n+\n+hir_analysis_op_trait_generic_params =\n+    `{$method_name}` must not have any generic parameters"}, {"sha": "0b1b75471a661cefaa5d530e0534cb85ea868ea7", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -30,7 +30,8 @@ use intl_memoizer::concurrent::IntlLangMemoizer;\n #[cfg(not(parallel_compiler))]\n use intl_memoizer::IntlLangMemoizer;\n \n-pub use fluent_bundle::{FluentArgs, FluentError, FluentValue};\n+pub use fluent_bundle::{self, FluentArgs, FluentError, FluentValue};\n+\n pub use unic_langid::{langid, LanguageIdentifier};\n \n // Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module."}, {"sha": "a452fac074787348a0bf5666d5b7b55cfa00421f", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -1,7 +1,10 @@\n use crate::snippet::Style;\n use crate::{DiagnosticArg, DiagnosticMessage, FluentBundle};\n use rustc_data_structures::sync::Lrc;\n-use rustc_error_messages::FluentArgs;\n+use rustc_error_messages::{\n+    fluent_bundle::resolver::errors::{ReferenceKind, ResolverError},\n+    FluentArgs, FluentError,\n+};\n use std::borrow::Cow;\n \n /// Convert diagnostic arguments (a rustc internal type that exists to implement\n@@ -102,14 +105,31 @@ pub trait Translate {\n             .or_else(|| translate_with_bundle(self.fallback_fluent_bundle()))\n             .map(|(translated, errs)| {\n                 // Always bail out for errors with the fallback bundle.\n-                assert!(\n-                    errs.is_empty(),\n-                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n-                    identifier,\n-                    attr,\n-                    args,\n-                    errs\n-                );\n+\n+                let mut help_messages = vec![];\n+\n+                if !errs.is_empty() {\n+                    for error in &errs {\n+                        match error {\n+                            FluentError::ResolverError(ResolverError::Reference(\n+                                ReferenceKind::Message { id, .. },\n+                            )) if args.iter().any(|(arg_id, _)| arg_id == id) => {\n+                                help_messages.push(format!(\"Argument `{id}` exists but was not referenced correctly. Try using `{{${id}}}` instead\"));\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+\n+                    panic!(\n+                        \"Encountered errors while formatting message for `{identifier}`\\n\\\n+                        help: {}\\n\\\n+                        attr: `{attr:?}`\\n\\\n+                        args: `{args:?}`\\n\\\n+                        errors: `{errs:?}`\",\n+                        help_messages.join(\"\\nhelp: \")\n+                    );\n+                }\n+\n                 translated\n             })\n             .expect(\"failed to find message in primary or fallback fluent bundles\")"}, {"sha": "afac6e7d94a8116ca0ef9916c61c569d1f24dbfb", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -125,3 +125,11 @@ pub struct AddMissingParenthesesInRange {\n     #[suggestion_part(code = \")\")]\n     pub right: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_op_trait_generic_params)]\n+pub struct OpMethodGenericParams {\n+    #[primary_span]\n+    pub span: Span,\n+    pub method_name: String,\n+}"}, {"sha": "4a8b774936543698c07c7f9bba395e96792b2a0b", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -10,6 +10,7 @@ mod suggest;\n pub use self::suggest::SelfSource;\n pub use self::MethodError::*;\n \n+use crate::errors::OpMethodGenericParams;\n use crate::{Expectation, FnCtxt};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, Diagnostic};\n@@ -443,7 +444,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let def_id = method_item.def_id;\n         let generics = tcx.generics_of(def_id);\n-        assert_eq!(generics.params.len(), 0);\n+\n+        if generics.params.len() != 0 {\n+            tcx.sess.emit_fatal(OpMethodGenericParams {\n+                span: tcx.def_span(method_item.def_id),\n+                method_name: m_name.to_string(),\n+            });\n+        }\n \n         debug!(\"lookup_in_trait_adjusted: method_item={:?}\", method_item);\n         let mut obligations = vec![];"}, {"sha": "045d76cac62b8701af2e2b65aa7bcd2daf6d4353", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::util::elaborate_predicates_with_span;\n use rustc_middle::ty::adjustment;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, DefIdTree, Ty};\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n@@ -87,17 +87,33 @@ declare_lint_pass!(UnusedResults => [UNUSED_MUST_USE, UNUSED_RESULTS]);\n \n impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, s: &hir::Stmt<'_>) {\n-        let expr = match s.kind {\n-            hir::StmtKind::Semi(ref expr) => &**expr,\n-            _ => return,\n-        };\n+        let hir::StmtKind::Semi(expr) = s.kind else { return; };\n \n         if let hir::ExprKind::Ret(..) = expr.kind {\n             return;\n         }\n \n+        if let hir::ExprKind::Match(await_expr, _arms, hir::MatchSource::AwaitDesugar) = expr.kind\n+            && let ty = cx.typeck_results().expr_ty(&await_expr)\n+            && let ty::Opaque(future_def_id, _) = ty.kind()\n+            && cx.tcx.ty_is_opaque_future(ty)\n+            // FIXME: This also includes non-async fns that return `impl Future`.\n+            && let async_fn_def_id = cx.tcx.parent(*future_def_id)\n+            && check_must_use_def(\n+                cx,\n+                async_fn_def_id,\n+                expr.span,\n+                \"output of future returned by \",\n+                \"\",\n+            )\n+        {\n+            // We have a bare `foo().await;` on an opaque type from an async function that was\n+            // annotated with `#[must_use]`.\n+            return;\n+        }\n+\n         let ty = cx.typeck_results().expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", 1);\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, expr.span, \"\", \"\", 1);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -119,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             _ => None,\n         };\n         if let Some(def_id) = maybe_def_id {\n-            fn_warned = check_must_use_def(cx, def_id, s.span, \"return value of \", \"\");\n+            fn_warned = check_must_use_def(cx, def_id, expr.span, \"return value of \", \"\");\n         } else if type_permits_lack_of_use {\n             // We don't warn about unused unit or uninhabited types.\n             // (See https://github.com/rust-lang/rust/issues/43806 for details.)"}, {"sha": "f4562cdfb88dcfdfa07c488896a761f3fef5872f", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -185,7 +185,8 @@ fn find_item_ty_spans(\n                 });\n                 if check_params && let Some(args) = path.segments.last().unwrap().args {\n                     let params_in_repr = tcx.params_in_repr(def_id);\n-                    for (i, arg) in args.args.iter().enumerate() {\n+                    // the domain size check is needed because the HIR may not be well-formed at this point\n+                    for (i, arg) in args.args.iter().enumerate().take(params_in_repr.domain_size()) {\n                         if let hir::GenericArg::Type(ty) = arg && params_in_repr.contains(i as u32) {\n                             find_item_ty_spans(tcx, ty, needle, spans, seen_representable);\n                         }"}, {"sha": "e0da0096c4e1e181625f7c846671c0c3b4333ed4", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -139,7 +139,7 @@ impl CheckAttrVisitor<'_> {\n                 sym::collapse_debuginfo => self.check_collapse_debuginfo(attr, span, target),\n                 sym::const_trait => self.check_const_trait(attr, span, target),\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n-                sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n+                sym::must_use => self.check_must_use(hir_id, &attr, target),\n                 sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),\n                 sym::rustc_allow_incoherent_impl => {\n                     self.check_allow_incoherent_impl(&attr, span, target)\n@@ -1163,17 +1163,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Warns against some misuses of `#[must_use]`\n-    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n-        let node = self.tcx.hir().get(hir_id);\n-        if let Some(kind) = node.fn_kind() && let rustc_hir::IsAsync::Async = kind.asyncness() {\n-            self.tcx.emit_spanned_lint(\n-                UNUSED_ATTRIBUTES,\n-                hir_id,\n-                attr.span,\n-                errors::MustUseAsync { span }\n-            );\n-        }\n-\n+    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, target: Target) -> bool {\n         if !matches!(\n             target,\n             Target::Fn"}, {"sha": "c94a27b12a3a73661f7295f57a79f152ba3b9c3c", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -87,9 +87,10 @@ changelog-seen = 2\n # this flag will indicate that this version check should not be done.\n #version-check = true\n \n-# Link libstdc++ statically into the rustc_llvm instead of relying on a\n-# dynamic version to be available.\n-#static-libstdcpp = true\n+# When true, link libstdc++ statically into the rustc_llvm.\n+# This is useful if you don't want to use the dynamic version of that\n+# library provided by LLVM.\n+#static-libstdcpp = false\n \n # Whether to use Ninja to build LLVM. This runs much faster than make.\n #ninja = true"}, {"sha": "2afce4fac42f898b7a2808e8b2936731cb4e7f8a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -781,7 +781,7 @@ impl Config {\n         config.llvm_optimize = true;\n         config.ninja_in_file = true;\n         config.llvm_version_check = true;\n-        config.llvm_static_stdcpp = true;\n+        config.llvm_static_stdcpp = false;\n         config.backtrace = true;\n         config.rust_optimize = true;\n         config.rust_optimize_tests = true;"}, {"sha": "7de06ec35c36bba75da44543d567f7603835341b", "filename": "src/ci/run.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -123,6 +123,10 @@ else\n   # (And PGO is its own can of worms).\n   if [ \"$NO_DOWNLOAD_CI_LLVM\" = \"\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set llvm.download-ci-llvm=if-available\"\n+  else\n+    # When building for CI we want to use the static C++ Standard library\n+    # included with LLVM, since a dynamic libstdcpp may not be available.\n+    RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set llvm.static-libstdcpp\"\n   fi\n fi\n "}, {"sha": "972ceb67e7648cc4d30c9aed6842d9b500a67a42", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -1269,6 +1269,8 @@ h3.variant {\n \n :target {\n \tpadding-right: 3px;\n+\tbackground-color: var(--target-background-color);\n+\tborder-right: 3px solid var(--target-border-color);\n }\n \n .notable-traits-tooltip {"}, {"sha": "2fa1fa39d63ab9999fa99ee4b184742ec8aaf813", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -63,6 +63,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--test-arrow-background-color: rgba(57, 175, 215, 0.09);\n \t--test-arrow-hover-color: #c5c5c5;\n \t--test-arrow-hover-background-color: rgba(57, 175, 215, 0.368);\n+\t--target-background-color: rgba(255, 236, 164, 0.06);\n+\t--target-border-color: rgba(255, 180, 76, 0.85);\n \t--rust-logo-filter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n \t\tdrop-shadow(-1px 0 0 #fff)\n@@ -168,11 +170,6 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #788797;\n }\n \n-:target {\n-\tbackground: rgba(255, 236, 164, 0.06);\n-\tborder-right: 3px solid rgba(255, 180, 76, 0.85);\n-}\n-\n .search-failed a {\n \tcolor: #39AFD7;\n }"}, {"sha": "43f8dd42ab347ba37a9b37133f1ea1043542f033", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -58,6 +58,8 @@\n \t--test-arrow-background-color: rgba(78, 139, 202, 0.2);\n \t--test-arrow-hover-color: #dedede;\n \t--test-arrow-hover-background-color: #4e8bca;\n+\t--target-background-color: #494a3d;\n+\t--target-border-color: #bb7410;\n \t--rust-logo-filter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n \t\tdrop-shadow(-1px 0 0 #fff)\n@@ -90,11 +92,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(100%);\n }\n \n-:target {\n-\tbackground-color: #494a3d;\n-\tborder-right: 3px solid #bb7410;\n-}\n-\n .search-failed a {\n \tcolor: #0089ff;\n }"}, {"sha": "c8c5289ab540c912a21de673e49c4792c7c9a73c", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -58,6 +58,8 @@\n \t--test-arrow-background-color: rgba(78, 139, 202, 0.2);\n \t--test-arrow-hover-color: #f5f5f5;\n \t--test-arrow-hover-background-color: #4e8bca;\n+\t--target-background-color: #fdFfd3;\n+\t--target-border-color: #ad7c37;\n \t--rust-logo-filter: initial;\n \t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n \t--crate-search-div-filter: invert(100%) sepia(0%) saturate(4223%) hue-rotate(289deg)\n@@ -83,11 +85,6 @@ body.source .example-wrap pre.rust a {\n \tbackground: #eee;\n }\n \n-:target {\n-\tbackground: #FDFFD3;\n-\tborder-right: 3px solid #AD7C37;\n-}\n-\n .search-failed a {\n \tcolor: #3873AD;\n }"}, {"sha": "3e5c30dc7eafe47f9546850b4737ad7d5cf7a757", "filename": "src/test/rustdoc-gui/target.goml", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Frustdoc-gui%2Ftarget.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Frustdoc-gui%2Ftarget.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftarget.goml?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -0,0 +1,35 @@\n+// Check that the targetted element has the expected styles.\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.Foo.html#method.a_method\"\n+show-text: true\n+\n+// Confirming that the method is the target.\n+assert: \"#method\\.a_method:target\"\n+\n+define-function: (\n+    \"check-style\",\n+    (theme, background, border),\n+    [\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\"#method\\.a_method:target\", {\n+            \"background-color\": |background|,\n+            \"border-right\": \"3px solid \" + |border|,\n+        })),\n+    ],\n+)\n+\n+call-function: (\"check-style\", {\n+    \"theme\": \"ayu\",\n+    \"background\": \"rgba(255, 236, 164, 0.06)\",\n+    \"border\": \"rgba(255, 180, 76, 0.85)\",\n+})\n+call-function: (\"check-style\", {\n+    \"theme\": \"dark\",\n+    \"background\": \"rgb(73, 74, 61)\",\n+    \"border\": \"rgb(187, 116, 16)\",\n+})\n+call-function: (\"check-style\", {\n+    \"theme\": \"light\",\n+    \"background\": \"rgb(253, 255, 211)\",\n+    \"border\": \"rgb(173, 124, 55)\",\n+})"}, {"sha": "39ec71ba22a185214dfc679c2de5ff1c82e1aede", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -16,7 +16,7 @@ LL | /     || match out_ref {\n LL | |         Variant::A => (),\n LL | |         Variant::B => (),\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default\n@@ -28,7 +28,7 @@ LL | /     || match here.field {\n LL | |         Variant::A => (),\n LL | |         Variant::B => (),\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: closures are lazy and do nothing unless called\n "}, {"sha": "fbfcd45652f19a091b178673f0ab5359ae58a3d4", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -28,7 +28,7 @@ warning: unused `MustUseDeprecated` that must be used\n   --> $DIR/cfg-attr-multi-true.rs:19:5\n    |\n LL |     MustUseDeprecated::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/cfg-attr-multi-true.rs:7:9"}, {"sha": "539343275df6021c64923f51493b339a2ed05135", "filename": "src/test/ui/generator/issue-52398.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -4,7 +4,7 @@ warning: unused generator that must be used\n LL | /     move || {\n LL | |         A.test(yield);\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default\n@@ -16,7 +16,7 @@ LL | /     static move || {\n LL | |         yield *y.borrow();\n LL | |         return \"Done\";\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n "}, {"sha": "8f1fc5e803194d15774a89812e6e1f0582b2dace", "filename": "src/test/ui/generator/issue-57084.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -7,7 +7,7 @@ LL | |         loop {\n LL | |             yield\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "3dd2d595445aa39fd7a4a5854acda265af6b3f9d", "filename": "src/test/ui/generator/match-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -8,7 +8,7 @@ LL | |                 match Enum::A(String::new()) {\n ...  |\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "2e1fec35eaf52a29e798bda28b70c8697d2809cd", "filename": "src/test/ui/generator/reborrow-mut-upvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -8,7 +8,7 @@ LL | |             yield;\n ...  |\n LL | |         *bar = 2;\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "e262f213f63d2314d8dcb79f313395614d98d940", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -8,7 +8,7 @@ LL | |             // and it should also find out that `a` is not live.\n ...  |\n LL | |             let _ = &a;\n LL | |         };\n-   | |__________^\n+   | |_________^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "a87248f66210039f3b1d92257e5f672a5e1fa81b", "filename": "src/test/ui/generator/yield-in-args-rev.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -5,7 +5,7 @@ LL | /     || {\n LL | |         let b = true;\n LL | |         foo(yield, &b);\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "9d03ee00800c8f489b7b4ca96952df1d847a7577", "filename": "src/test/ui/generator/yield-in-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -8,7 +8,7 @@ LL | |             let _t = box (&x, yield 0, &y);\n ...  |\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "ed14a2e3273af7dde00d731f6148263a19cf9d15", "filename": "src/test/ui/generator/yield-in-initializer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -8,7 +8,7 @@ LL | |             // See https://github.com/rust-lang/rust/issues/52792\n ...  |\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "97862e91cd4a0409222621933663630df6b811bc", "filename": "src/test/ui/generator/yield-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -5,7 +5,7 @@ LL | /     || {\n LL | |         yield a;\n LL | |         yield b;\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "eb7661fad56db57b7c2bd7cad4053a005f8d6e09", "filename": "src/test/ui/issues/issue-1460.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ warning: unused closure that must be used\n   --> $DIR/issue-1460.rs:6:5\n    |\n LL |     {|i: u32| if 1 == i { }};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "d920530b57c6940efc1e22d617f0cbc902355ac9", "filename": "src/test/ui/issues/issue-16256.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ warning: unused closure that must be used\n   --> $DIR/issue-16256.rs:6:5\n    |\n LL |     |c: u8| buf.push(c);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "657f23c60856fa04d3d4613da7bc2685b47ae671", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ warning: unused return value of `need_to_use_this_value` that must be used\n   --> $DIR/fn_must_use.rs:55:5\n    |\n LL |     need_to_use_this_value();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: it's important\n note: the lint level is defined here\n@@ -15,33 +15,33 @@ warning: unused return value of `MyStruct::need_to_use_this_method_value` that m\n   --> $DIR/fn_must_use.rs:60:5\n    |\n LL |     m.need_to_use_this_method_value();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `EvenNature::is_even` that must be used\n   --> $DIR/fn_must_use.rs:61:5\n    |\n LL |     m.is_even(); // trait method!\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n    = note: no side effects\n \n warning: unused return value of `MyStruct::need_to_use_this_associated_function_value` that must be used\n   --> $DIR/fn_must_use.rs:64:5\n    |\n LL |     MyStruct::need_to_use_this_associated_function_value();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` that must be used\n   --> $DIR/fn_must_use.rs:70:5\n    |\n LL |     2.eq(&3);\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` that must be used\n   --> $DIR/fn_must_use.rs:71:5\n    |\n LL |     m.eq(&n);\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n \n warning: unused comparison that must be used\n   --> $DIR/fn_must_use.rs:74:5"}, {"sha": "72118275774d14b4d82747c4cb03297c3e89d54c", "filename": "src/test/ui/lint/unused/must-use-box-from-raw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ warning: unused return value of `Box::<T>::from_raw` that must be used\n   --> $DIR/must-use-box-from-raw.rs:8:5\n    |\n LL |     Box::from_raw(ptr);\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: call `drop(from_raw(ptr))` if you intend to drop the `Box`\n note: the lint level is defined here"}, {"sha": "bba2b1ba078c694191d9734e10e2474e45de022c", "filename": "src/test/ui/lint/unused/must_use-array.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ error: unused array of `S` that must be used\n   --> $DIR/must_use-array.rs:39:5\n    |\n LL |     singleton();\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/must_use-array.rs:1:9\n@@ -14,7 +14,7 @@ error: unused array of `S` that must be used\n   --> $DIR/must_use-array.rs:40:5\n    |\n LL |     many();\n-   |     ^^^^^^^\n+   |     ^^^^^^\n \n error: unused array of `S` in tuple element 0 that must be used\n   --> $DIR/must_use-array.rs:41:6\n@@ -26,7 +26,7 @@ error: unused array of implementers of `T` that must be used\n   --> $DIR/must_use-array.rs:42:5\n    |\n LL |     array_of_impl_trait();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: unused array of boxed `T` trait objects in tuple element 1 that must be used\n   --> $DIR/must_use-array.rs:43:5\n@@ -38,7 +38,7 @@ error: unused array of arrays of arrays of `S` that must be used\n   --> $DIR/must_use-array.rs:45:5\n    |\n LL |     array_of_arrays_of_arrays();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ef738708d5f4e56e1f54e85c57e979d6ff685e14", "filename": "src/test/ui/lint/unused/must_use-in-stdlib-traits.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-in-stdlib-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-in-stdlib-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-in-stdlib-traits.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ error: unused implementer of `Iterator` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:42:4\n    |\n LL |    iterator();\n-   |    ^^^^^^^^^^^\n+   |    ^^^^^^^^^^\n    |\n    = note: iterators are lazy and do nothing unless consumed\n note: the lint level is defined here\n@@ -15,31 +15,31 @@ error: unused implementer of `Future` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:43:4\n    |\n LL |    future();\n-   |    ^^^^^^^^^\n+   |    ^^^^^^^^\n    |\n    = note: futures do nothing unless you `.await` or poll them\n \n error: unused implementer of `FnOnce` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:44:4\n    |\n LL |    square_fn_once();\n-   |    ^^^^^^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused implementer of `FnMut` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:45:4\n    |\n LL |    square_fn_mut();\n-   |    ^^^^^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused implementer of `Fn` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:46:4\n    |\n LL |    square_fn();\n-   |    ^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n "}, {"sha": "2f54964848359a9d5e5327533fc0dee558420ed5", "filename": "src/test/ui/lint/unused/must_use-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ error: unused implementer of `Critical` that must be used\n   --> $DIR/must_use-trait.rs:33:5\n    |\n LL |     get_critical();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/must_use-trait.rs:1:9\n@@ -14,13 +14,13 @@ error: unused boxed `Critical` trait object that must be used\n   --> $DIR/must_use-trait.rs:34:5\n    |\n LL |     get_boxed_critical();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: unused boxed boxed `Critical` trait object that must be used\n   --> $DIR/must_use-trait.rs:35:5\n    |\n LL |     get_nested_boxed_critical();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unused boxed `Critical` trait object in tuple element 1 that must be used\n   --> $DIR/must_use-trait.rs:37:5"}, {"sha": "9fcbc5074ea800ae4d1209e430afb2fe772dc1f5", "filename": "src/test/ui/lint/unused/must_use-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ error: unused return value of `foo` that must be used\n   --> $DIR/must_use-unit.rs:13:5\n    |\n LL |     foo();\n-   |     ^^^^^^\n+   |     ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/must_use-unit.rs:2:9\n@@ -14,7 +14,7 @@ error: unused return value of `bar` that must be used\n   --> $DIR/must_use-unit.rs:15:5\n    |\n LL |     bar();\n-   |     ^^^^^^\n+   |     ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4be93aa155ad9097f0e35326ae0b2dd013caae87", "filename": "src/test/ui/lint/unused/unused-async.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -1,24 +1,43 @@\n // edition:2018\n-// run-pass\n-#![allow(dead_code)]\n+#![deny(unused_must_use)]\n+\n \n #[must_use]\n-//~^ WARNING `must_use`\n-async fn test() -> i32 {\n+async fn foo() -> i32 {\n     1\n }\n \n+#[must_use]\n+fn bar() -> impl std::future::Future<Output=i32> {\n+    async {\n+        42\n+    }\n+}\n+\n+async fn baz() -> i32 {\n+    0\n+}\n \n struct Wowee {}\n \n impl Wowee {\n     #[must_use]\n-    //~^ WARNING `must_use`\n     async fn test_method() -> i32 {\n         1\n     }\n }\n \n+async fn test() {\n+    foo(); //~ ERROR unused return value of `foo` that must be used\n+    //~^ ERROR unused implementer of `Future` that must be used\n+    foo().await; //~ ERROR unused output of future returned by `foo` that must be used\n+    bar(); //~ ERROR unused return value of `bar` that must be used\n+    //~^ ERROR unused implementer of `Future` that must be used\n+    bar().await; //~ ERROR unused output of future returned by `bar` that must be used\n+    baz(); //~ ERROR unused implementer of `Future` that must be used\n+    baz().await; // ok\n+}\n+\n /* FIXME(guswynn) update this test when async-fn-in-traits works\n trait Doer {\n     #[must_use]"}, {"sha": "4bcb26dc16586a38f3898fa8df4032af493b0271", "filename": "src/test/ui/lint/unused/unused-async.stderr", "status": "modified", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -1,26 +1,55 @@\n-warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n-  --> $DIR/unused-async.rs:5:1\n-   |\n-LL |   #[must_use]\n-   |   ^^^^^^^^^^^\n-LL |\n-LL | / async fn test() -> i32 {\n-LL | |     1\n-LL | | }\n-   | |_- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n-   |\n-   = note: `#[warn(unused_attributes)]` on by default\n-\n-warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n-  --> $DIR/unused-async.rs:15:5\n-   |\n-LL |       #[must_use]\n-   |       ^^^^^^^^^^^\n-LL |\n-LL | /     async fn test_method() -> i32 {\n-LL | |         1\n-LL | |     }\n-   | |_____- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n-\n-warning: 2 warnings emitted\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:31:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+note: the lint level is defined here\n+  --> $DIR/unused-async.rs:2:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: unused return value of `foo` that must be used\n+  --> $DIR/unused-async.rs:31:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+\n+error: unused output of future returned by `foo` that must be used\n+  --> $DIR/unused-async.rs:33:5\n+   |\n+LL |     foo().await;\n+   |     ^^^^^^^^^^^\n+\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:34:5\n+   |\n+LL |     bar();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: unused return value of `bar` that must be used\n+  --> $DIR/unused-async.rs:34:5\n+   |\n+LL |     bar();\n+   |     ^^^^^\n+\n+error: unused output of future returned by `bar` that must be used\n+  --> $DIR/unused-async.rs:36:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:37:5\n+   |\n+LL |     baz();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "c3a82402e0a2e516fcce7811186e438a16b58104", "filename": "src/test/ui/lint/unused/unused-closure.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-closure.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -4,7 +4,7 @@ error: unused closure that must be used\n LL | /     || {\n LL | |         println!(\"Hello!\");\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: closures are lazy and do nothing unless called\n note: the lint level is defined here\n@@ -17,47 +17,47 @@ error: unused implementer of `Future` that must be used\n   --> $DIR/unused-closure.rs:13:5\n    |\n LL |     async {};\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n    |\n    = note: futures do nothing unless you `.await` or poll them\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:14:5\n    |\n LL |     || async {};\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:15:5\n    |\n LL |     async || {};\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused array of boxed arrays of closures that must be used\n   --> $DIR/unused-closure.rs:18:5\n    |\n LL |     [Box::new([|| {}; 10]); 1];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:20:5\n    |\n LL |     vec![|| \"a\"].pop().unwrap();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:23:9\n    |\n LL |         || true;\n-   |         ^^^^^^^^\n+   |         ^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n "}, {"sha": "4e1ba1fd9595fd5bdb37fe40edae1005ee2fb7ea", "filename": "src/test/ui/lint/unused/unused-result.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ error: unused `MustUse` that must be used\n   --> $DIR/unused-result.rs:21:5\n    |\n LL |     foo::<MustUse>();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-result.rs:2:25\n@@ -14,7 +14,7 @@ error: unused `MustUseMsg` that must be used\n   --> $DIR/unused-result.rs:22:5\n    |\n LL |     foo::<MustUseMsg>();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: some message\n \n@@ -34,13 +34,13 @@ error: unused `MustUse` that must be used\n   --> $DIR/unused-result.rs:35:5\n    |\n LL |     foo::<MustUse>();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n \n error: unused `MustUseMsg` that must be used\n   --> $DIR/unused-result.rs:36:5\n    |\n LL |     foo::<MustUseMsg>();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: some message\n "}, {"sha": "cb45add9c2b1ba13886f43ecdbe3c790f8fc6df5", "filename": "src/test/ui/lint/unused/unused-supertrait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ error: unused implementer of `Iterator` that must be used\n   --> $DIR/unused-supertrait.rs:9:5\n    |\n LL |     it();\n-   |     ^^^^^\n+   |     ^^^^\n    |\n    = note: iterators are lazy and do nothing unless consumed\n note: the lint level is defined here"}, {"sha": "0f699429e02437fd2c0dbf4cc2be76bb59bf2699", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -139,7 +139,7 @@ error: unused `X` that must be used\n   --> $DIR/unused_attributes-must_use.rs:103:5\n    |\n LL |     X;\n-   |     ^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_attributes-must_use.rs:2:28\n@@ -151,37 +151,37 @@ error: unused `Y` that must be used\n   --> $DIR/unused_attributes-must_use.rs:104:5\n    |\n LL |     Y::Z;\n-   |     ^^^^^\n+   |     ^^^^\n \n error: unused `U` that must be used\n   --> $DIR/unused_attributes-must_use.rs:105:5\n    |\n LL |     U { unit: () };\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n \n error: unused return value of `U::method` that must be used\n   --> $DIR/unused_attributes-must_use.rs:106:5\n    |\n LL |     U::method();\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: unused return value of `foo` that must be used\n   --> $DIR/unused_attributes-must_use.rs:107:5\n    |\n LL |     foo();\n-   |     ^^^^^^\n+   |     ^^^^^\n \n error: unused return value of `foreign_foo` that must be used\n   --> $DIR/unused_attributes-must_use.rs:110:9\n    |\n LL |         foreign_foo();\n-   |         ^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^\n \n error: unused return value of `Use::get_four` that must be used\n   --> $DIR/unused_attributes-must_use.rs:118:5\n    |\n LL |     ().get_four();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 28 previous errors\n "}, {"sha": "bfdfca2100406ccd6c76a4b30f8377f1f676bb5c", "filename": "src/test/ui/nll/issue-48623-generator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -2,7 +2,7 @@ warning: unused generator that must be used\n   --> $DIR/issue-48623-generator.rs:15:5\n    |\n LL |     move || { d; yield; &mut *r };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "8012cb652bd8857b6ad3e9b299319664c57060d6", "filename": "src/test/ui/parser/issue-103748-ICE-wrong-braces.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fparser%2Fissue-103748-ICE-wrong-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fparser%2Fissue-103748-ICE-wrong-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103748-ICE-wrong-braces.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"lib\"]\n+\n+struct Apple((Apple, Option(Banana ? Citron)));\n+//~^ ERROR invalid `?` in type\n+//~| ERROR expected one of `)` or `,`, found `Citron`\n+//~| ERROR cannot find type `Citron` in this scope [E0412]\n+//~| ERROR parenthesized type parameters may only be used with a `Fn` trait [E0214]\n+//~| ERROR recursive type `Apple` has infinite size [E0072]"}, {"sha": "b0d8b03ae08c3cd714db27b63c55365039696feb", "filename": "src/test/ui/parser/issue-103748-ICE-wrong-braces.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fparser%2Fissue-103748-ICE-wrong-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Fparser%2Fissue-103748-ICE-wrong-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103748-ICE-wrong-braces.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -0,0 +1,51 @@\n+error: invalid `?` in type\n+  --> $DIR/issue-103748-ICE-wrong-braces.rs:3:36\n+   |\n+LL | struct Apple((Apple, Option(Banana ? Citron)));\n+   |                                    ^ `?` is only allowed on expressions, not types\n+   |\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL | struct Apple((Apple, Option(Option<Banana > Citron)));\n+   |                             +++++++       ~\n+\n+error: expected one of `)` or `,`, found `Citron`\n+  --> $DIR/issue-103748-ICE-wrong-braces.rs:3:38\n+   |\n+LL | struct Apple((Apple, Option(Banana ? Citron)));\n+   |                                     -^^^^^^ expected one of `)` or `,`\n+   |                                     |\n+   |                                     help: missing `,`\n+\n+error[E0412]: cannot find type `Citron` in this scope\n+  --> $DIR/issue-103748-ICE-wrong-braces.rs:3:38\n+   |\n+LL | struct Apple((Apple, Option(Banana ? Citron)));\n+   |                                      ^^^^^^ not found in this scope\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-103748-ICE-wrong-braces.rs:3:22\n+   |\n+LL | struct Apple((Apple, Option(Banana ? Citron)));\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL | struct Apple((Apple, Option<Banana ? Citron>));\n+   |                            ~               ~\n+\n+error[E0072]: recursive type `Apple` has infinite size\n+  --> $DIR/issue-103748-ICE-wrong-braces.rs:3:1\n+   |\n+LL | struct Apple((Apple, Option(Banana ? Citron)));\n+   | ^^^^^^^^^^^^  ----- recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n+   |\n+LL | struct Apple((Box<Apple>, Option(Banana ? Citron)));\n+   |               ++++     +\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0072, E0214, E0412.\n+For more information about an error, try `rustc --explain E0072`."}, {"sha": "9577952119adb2c480bc9b2caf5731574304da51", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -1,12 +1,10 @@\n error[E0277]: the trait bound `f32: Termination` is not satisfied\n-  --> $DIR/termination-trait-test-wrong-type.rs:6:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:6:31\n    |\n-LL |   #[test]\n-   |   ------- in this procedural macro expansion\n-LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n-LL | |     \"0\".parse()\n-LL | | }\n-   | |_^ the trait `Termination` is not implemented for `f32`\n+LL | #[test]\n+   | ------- in this procedural macro expansion\n+LL | fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Termination` is not implemented for `f32`\n    |\n    = note: required for `Result<f32, ParseFloatError>` to implement `Termination`\n note: required by a bound in `assert_test_result`"}, {"sha": "7ea3b0d5bac7679c85731f2ef28ecaa08ecf1dc7", "filename": "src/test/ui/traits/invalid_operator_trait.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -0,0 +1,23 @@\n+#![crate_type = \"lib\"]\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+pub trait Sized {\n+    // Empty.\n+}\n+\n+#[lang = \"add\"]\n+trait Add<RHS=Self> {\n+    type Output;\n+\n+    fn add<Y>(self, _: RHS) -> Self::Output;\n+    //~^ ERROR `add` must not have any generic parameters\n+}\n+\n+#[allow(unreachable_code)]\n+fn ice(a: usize) {\n+    let r = loop {};\n+    r = r + a;\n+}"}, {"sha": "8c6e3695905ee8c3a14ce4372cdaddfdeda83f54", "filename": "src/test/ui/traits/invalid_operator_trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.stderr?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -0,0 +1,8 @@\n+error: `add` must not have any generic parameters\n+  --> $DIR/invalid_operator_trait.rs:15:5\n+   |\n+LL |     fn add<Y>(self, _: RHS) -> Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8e7c39e72b68bddf1dd817c524adc4f31bc432db", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=7d85104b96fb2ffe7b638ffbfb1794ef5652bdcf", "patch": "@@ -39,6 +39,8 @@ macro_rules! t {\n }\n \n static TEST: AtomicUsize = AtomicUsize::new(0);\n+const RETRY_INTERVAL: u64 = 1;\n+const NUMBER_OF_RETRIES: usize = 5;\n \n #[derive(Copy, Clone)]\n struct Config {\n@@ -115,7 +117,7 @@ fn main() {\n     let config = Config::parse_args();\n     println!(\"starting test server\");\n \n-    let listener = t!(TcpListener::bind(config.bind));\n+    let listener = bind_socket(config.bind);\n     let (work, tmp): (PathBuf, PathBuf) = if cfg!(target_os = \"android\") {\n         (\"/data/local/tmp/work\".into(), \"/data/local/tmp/work/tmp\".into())\n     } else {\n@@ -159,6 +161,16 @@ fn main() {\n     }\n }\n \n+fn bind_socket(addr: SocketAddr) -> TcpListener {\n+    for _ in 0..(NUMBER_OF_RETRIES - 1) {\n+        if let Ok(x) = TcpListener::bind(addr) {\n+            return x;\n+        }\n+        std::thread::sleep(std::time::Duration::from_secs(RETRY_INTERVAL));\n+    }\n+    TcpListener::bind(addr).unwrap()\n+}\n+\n fn handle_push(socket: TcpStream, work: &Path, config: Config) {\n     let mut reader = BufReader::new(socket);\n     let dst = recv(&work, &mut reader);"}]}