{"sha": "bebd2fbfc836f871721057766a90775efa86e6a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYmQyZmJmYzgzNmY4NzE3MjEwNTc3NjZhOTA3NzVlZmE4NmU2YTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T08:14:42Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T10:25:22Z"}, "message": "Rollup merge of #48156 - Centril:feature/iterator_repeat_with, r=alexcrichton\n\nAdd std/core::iter::repeat_with\n\nAdds an iterator primitive `repeat_with` which is the \"lazy\" version of `repeat` but also more flexible since you can build up state with the `FnMut`. The design is mostly taken from `repeat`.\n\nr? @rust-lang/libs\ncc @withoutboats, @scottmcm", "tree": {"sha": "95c390683b7b3bc02ce8f7741ad131fcf381f875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c390683b7b3bc02ce8f7741ad131fcf381f875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bebd2fbfc836f871721057766a90775efa86e6a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqEDpIACgkQ/vbIBR0O\nATy2RRAAxN6EX7XMUVSRI06x1BO6OnV6xtz1Q2t8IBNM3uspTGgWPvvvQmKwZK+0\nBPQwReIA1mY0o+2ZoHBeLQya1Se8cc7h5eiGqZ7ey7L15IgoqjkXKmnKcJFoI0D5\n9NvLIbGG3QqW1+CVkdn3LX4N100njcuGKrym+D/WMjNjIRklmd2OcHHWOPAz7j6x\nUgPztg/SHkTs1BIaRimsLv7UEtCPFuzdWiGg6UKjqMAnSvNx5BYSZsIa23UCYLox\ngO357PDS/8e8SPvJ0e7BiMsk9X5dpc/9X+jHmQ1o3XI4tUqsfms+XUiJcwVtgHxh\nDcjp4o0xqlUK7QfN12r4XqcPWf1GMnc4xGB2eRLj5dQVBSDf3Ie/krQ7OF+cZCK6\nGhl0vOa1uHXiuyceow/VWD+GY4EAEqH1HPmeXQ5ika6ETebc++c8bulsbUaGt6au\nQbLiizC7k6EJQvQtwnFKETui2LIyF72GU4+l3+5Bp4xsKKI6AtGc22c4kvuDMonb\neR+05oJ86bjqgHls+46V9GLFjrl6VMujk5qVlIX88aucfaLZdx38lzeNE1Zbp5RR\nZd+edCxZcJsK3yh4egKwOgWwH03/kYNWFLw440x0q7dkEPVRRfpMWNxD4LDNvdek\ntcxcGn7ggACO+lVQ9twcjSVDNYbcwDLwUtpMptATpStEq5BZGrE=\n=P8fV\n-----END PGP SIGNATURE-----", "payload": "tree 95c390683b7b3bc02ce8f7741ad131fcf381f875\nparent dcb15269f676f5188f048d4ba014c402a1378086\nparent db13296b6fd6b68ab06055bdcb9a22078b11de6a\nauthor kennytm <kennytm@gmail.com> 1518596082 +0800\ncommitter kennytm <kennytm@gmail.com> 1518603922 +0800\n\nRollup merge of #48156 - Centril:feature/iterator_repeat_with, r=alexcrichton\n\nAdd std/core::iter::repeat_with\n\nAdds an iterator primitive `repeat_with` which is the \"lazy\" version of `repeat` but also more flexible since you can build up state with the `FnMut`. The design is mostly taken from `repeat`.\n\nr? @rust-lang/libs\ncc @withoutboats, @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bebd2fbfc836f871721057766a90775efa86e6a2", "html_url": "https://github.com/rust-lang/rust/commit/bebd2fbfc836f871721057766a90775efa86e6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bebd2fbfc836f871721057766a90775efa86e6a2/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb15269f676f5188f048d4ba014c402a1378086", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb15269f676f5188f048d4ba014c402a1378086", "html_url": "https://github.com/rust-lang/rust/commit/dcb15269f676f5188f048d4ba014c402a1378086"}, {"sha": "db13296b6fd6b68ab06055bdcb9a22078b11de6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/db13296b6fd6b68ab06055bdcb9a22078b11de6a", "html_url": "https://github.com/rust-lang/rust/commit/db13296b6fd6b68ab06055bdcb9a22078b11de6a"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "d929d1d65a91892a55d47305298b261ef2a151cc", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=bebd2fbfc836f871721057766a90775efa86e6a2", "patch": "@@ -333,6 +333,8 @@ pub use self::range::Step;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sources::{Repeat, repeat};\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+pub use self::sources::{RepeatWith, repeat_with};\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub use self::sources::{Empty, empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]"}, {"sha": "3e9d799c089486b95c78cb022f834d4f521379bb", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=bebd2fbfc836f871721057766a90775efa86e6a2", "patch": "@@ -57,6 +57,12 @@ unsafe impl<A: Clone> TrustedLen for Repeat<A> {}\n ///\n /// [`take`]: trait.Iterator.html#method.take\n ///\n+/// If the element type of the iterator you need does not implement `Clone`,\n+/// or if you do not want to keep the repeated element in memory, you can\n+/// instead use the [`repeat_with`] function.\n+///\n+/// [`repeat_with`]: fn.repeat_with.html\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -99,6 +105,115 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n     Repeat{element: elt}\n }\n \n+/// An iterator that repeats elements of type `A` endlessly by\n+/// applying the provided closure `F: FnMut() -> A`.\n+///\n+/// This `struct` is created by the [`repeat_with`] function.\n+/// See its documentation for more.\n+///\n+/// [`repeat_with`]: fn.repeat_with.html\n+#[derive(Copy, Clone, Debug)]\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+pub struct RepeatWith<F> {\n+    repeater: F\n+}\n+\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+impl<A, F: FnMut() -> A> Iterator for RepeatWith<F> {\n+    type Item = A;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<A> { Some((self.repeater)()) }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) { (usize::MAX, None) }\n+}\n+\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+impl<A, F: FnMut() -> A> DoubleEndedIterator for RepeatWith<F> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> { self.next() }\n+}\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A, F: FnMut() -> A> FusedIterator for RepeatWith<F> {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A, F: FnMut() -> A> TrustedLen for RepeatWith<F> {}\n+\n+/// Creates a new iterator that repeats elements of type `A` endlessly by\n+/// applying the provided closure, the repeater, `F: FnMut() -> A`.\n+///\n+/// The `repeat_with()` function calls the repeater over and over and over and\n+/// over and over and \ud83d\udd01.\n+///\n+/// Infinite iterators like `repeat_with()` are often used with adapters like\n+/// [`take`], in order to make them finite.\n+///\n+/// [`take`]: trait.Iterator.html#method.take\n+///\n+/// If the element type of the iterator you need implements `Clone`, and\n+/// it is OK to keep the source element in memory, you should instead use\n+/// the [`repeat`] function.\n+///\n+/// [`repeat`]: fn.repeat.html\n+///\n+/// An iterator produced by `repeat_with()` is a `DoubleEndedIterator`.\n+/// It is important to not that reversing `repeat_with(f)` will produce\n+/// the exact same sequence as the non-reversed iterator. In other words,\n+/// `repeat_with(f).rev().collect::<Vec<_>>()` is equivalent to\n+/// `repeat_with(f).collect::<Vec<_>>()`.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// #![feature(iterator_repeat_with)]\n+///\n+/// use std::iter;\n+///\n+/// // let's assume we have some value of a type that is not `Clone`\n+/// // or which don't want to have in memory just yet because it is expensive:\n+/// #[derive(PartialEq, Debug)]\n+/// struct Expensive;\n+///\n+/// // a particular value forever:\n+/// let mut things = iter::repeat_with(|| Expensive);\n+///\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// ```\n+///\n+/// Using mutation and going finite:\n+///\n+/// ```rust\n+/// #![feature(iterator_repeat_with)]\n+///\n+/// use std::iter;\n+///\n+/// // From the zeroth to the third power of two:\n+/// let mut curr = 1;\n+/// let mut pow2 = iter::repeat_with(|| { let tmp = curr; curr *= 2; tmp })\n+///                     .take(4);\n+///\n+/// assert_eq!(Some(1), pow2.next());\n+/// assert_eq!(Some(2), pow2.next());\n+/// assert_eq!(Some(4), pow2.next());\n+/// assert_eq!(Some(8), pow2.next());\n+///\n+/// // ... and now we're done\n+/// assert_eq!(None, pow2.next());\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+pub fn repeat_with<A, F: FnMut() -> A>(repeater: F) -> RepeatWith<F> {\n+    RepeatWith { repeater }\n+}\n+\n /// An iterator that yields nothing.\n ///\n /// This `struct` is created by the [`empty`] function. See its documentation for more."}, {"sha": "447e144bf0fd6083b43a7ec4f4a99284994d18da", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=bebd2fbfc836f871721057766a90775efa86e6a2", "patch": "@@ -92,6 +92,7 @@\n #![feature(unwind_attributes)]\n #![feature(doc_spotlight)]\n #![feature(rustc_const_unstable)]\n+#![feature(iterator_repeat_with)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "f91c919d7447d6111d258a79532d6ef8fd8c29e1", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=bebd2fbfc836f871721057766a90775efa86e6a2", "patch": "@@ -1592,6 +1592,51 @@ fn test_repeat_take_collect() {\n     assert_eq!(v, vec![42, 42, 42]);\n }\n \n+#[test]\n+fn test_repeat_with() {\n+    #[derive(PartialEq, Debug)]\n+    struct NotClone(usize);\n+    let mut it = repeat_with(|| NotClone(42));\n+    assert_eq!(it.next(), Some(NotClone(42)));\n+    assert_eq!(it.next(), Some(NotClone(42)));\n+    assert_eq!(it.next(), Some(NotClone(42)));\n+    assert_eq!(repeat_with(|| NotClone(42)).size_hint(), (usize::MAX, None));\n+}\n+\n+#[test]\n+fn test_repeat_with_rev() {\n+    let mut curr = 1;\n+    let mut pow2 = repeat_with(|| { let tmp = curr; curr *= 2; tmp })\n+                    .rev().take(4);\n+    assert_eq!(pow2.next(), Some(1));\n+    assert_eq!(pow2.next(), Some(2));\n+    assert_eq!(pow2.next(), Some(4));\n+    assert_eq!(pow2.next(), Some(8));\n+    assert_eq!(pow2.next(), None);\n+}\n+\n+#[test]\n+fn test_repeat_with_take() {\n+    let mut it = repeat_with(|| 42).take(3);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), None);\n+    is_trusted_len(repeat_with(|| 42).take(3));\n+    assert_eq!(repeat_with(|| 42).take(3).size_hint(), (3, Some(3)));\n+    assert_eq!(repeat_with(|| 42).take(0).size_hint(), (0, Some(0)));\n+    assert_eq!(repeat_with(|| 42).take(usize::MAX).size_hint(),\n+               (usize::MAX, Some(usize::MAX)));\n+}\n+\n+#[test]\n+fn test_repeat_with_take_collect() {\n+    let mut curr = 1;\n+    let v: Vec<_> = repeat_with(|| { let tmp = curr; curr *= 2; tmp })\n+                      .take(5).collect();\n+    assert_eq!(v, vec![1, 2, 4, 8, 16]);\n+}\n+\n #[test]\n fn test_fuse() {\n     let mut it = 0..3;"}, {"sha": "3e901a9d442ce29bc8460e2c582fa417c859b93e", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebd2fbfc836f871721057766a90775efa86e6a2/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=bebd2fbfc836f871721057766a90775efa86e6a2", "patch": "@@ -27,6 +27,7 @@\n #![feature(iterator_try_fold)]\n #![feature(iter_rfind)]\n #![feature(iter_rfold)]\n+#![feature(iterator_repeat_with)]\n #![feature(nonzero)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}]}