{"sha": "2b50c157d62f566fc367693cd15d55568fb5e33e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNTBjMTU3ZDYyZjU2NmZjMzY3NjkzY2QxNWQ1NTU2OGZiNWUzM2U=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-07T17:23:56Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-09T00:50:42Z"}, "message": "test: Display benchmark results with thousands separators\n\nExample display:\n\n```\nrunning 9 tests\ntest a ... bench:           0 ns/iter (+/- 0)\ntest b ... bench:          52 ns/iter (+/- 0)\ntest c ... bench:          88 ns/iter (+/- 0)\ntest d ... bench:         618 ns/iter (+/- 111)\ntest e ... bench:       5,933 ns/iter (+/- 87)\ntest f ... bench:      59,280 ns/iter (+/- 1,052)\ntest g ... bench:     588,672 ns/iter (+/- 3,381)\ntest h ... bench:   5,894,227 ns/iter (+/- 303,489)\ntest i ... bench:  59,112,382 ns/iter (+/- 1,500,110)\n```\n\nFixes #10953\nFixes #26109", "tree": {"sha": "8228009d829bd4eefe3c1cb6473dd42787ac8e02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8228009d829bd4eefe3c1cb6473dd42787ac8e02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b50c157d62f566fc367693cd15d55568fb5e33e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b50c157d62f566fc367693cd15d55568fb5e33e", "html_url": "https://github.com/rust-lang/rust/commit/2b50c157d62f566fc367693cd15d55568fb5e33e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b50c157d62f566fc367693cd15d55568fb5e33e/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32037a5696272f1c34f3692dcdc59b4ada91bdc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/32037a5696272f1c34f3692dcdc59b4ada91bdc7", "html_url": "https://github.com/rust-lang/rust/commit/32037a5696272f1c34f3692dcdc59b4ada91bdc7"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "cb14d16b525be6837fb11080a2e82cd384f2cadd", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2b50c157d62f566fc367693cd15d55568fb5e33e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b50c157d62f566fc367693cd15d55568fb5e33e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=2b50c157d62f566fc367693cd15d55568fb5e33e", "patch": "@@ -625,17 +625,44 @@ impl<T: Write> ConsoleTestState<T> {\n     }\n }\n \n+// Format a number with thousands separators\n+fn fmt_thousands_sep(mut n: usize, sep: char) -> String {\n+    use std::fmt::Write;\n+    let mut output = String::new();\n+    let mut first = true;\n+    for &pow in &[9, 6, 3, 0] {\n+        let base = 10_usize.pow(pow);\n+        if pow == 0 || n / base != 0 {\n+            if first {\n+                output.write_fmt(format_args!(\"{}\", n / base)).unwrap();\n+            } else {\n+                output.write_fmt(format_args!(\"{:03}\", n / base)).unwrap();\n+            }\n+            if pow != 0 {\n+                output.push(sep);\n+            }\n+            first = false;\n+        }\n+        n %= base;\n+    }\n+\n+    output\n+}\n+\n pub fn fmt_bench_samples(bs: &BenchSamples) -> String {\n+    use std::fmt::Write;\n+    let mut output = String::new();\n+\n+    let median = bs.ns_iter_summ.median as usize;\n+    let deviation = (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize;\n+\n+    output.write_fmt(format_args!(\"{:>11} ns/iter (+/- {})\",\n+                     fmt_thousands_sep(median, ','),\n+                     fmt_thousands_sep(deviation, ','))).unwrap();\n     if bs.mb_s != 0 {\n-        format!(\"{:>9} ns/iter (+/- {}) = {} MB/s\",\n-             bs.ns_iter_summ.median as usize,\n-             (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize,\n-             bs.mb_s)\n-    } else {\n-        format!(\"{:>9} ns/iter (+/- {})\",\n-             bs.ns_iter_summ.median as usize,\n-             (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize)\n+        output.write_fmt(format_args!(\" = {} MB/s\", bs.mb_s)).unwrap();\n     }\n+    output\n }\n \n // A simple console test runner"}]}