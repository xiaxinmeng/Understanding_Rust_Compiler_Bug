{"sha": "65cf7abbe2ee75cce74592fa0af75356181566be", "node_id": "C_kwDOAAsO6NoAKDY1Y2Y3YWJiZTJlZTc1Y2NlNzQ1OTJmYTBhZjc1MzU2MTgxNTY2YmU", "commit": {"author": {"name": "Ian Chamberlain", "email": "ichamberlain@juniper.net", "date": "2023-01-04T17:04:45Z"}, "committer": {"name": "Ian Chamberlain", "email": "ichamberlain@juniper.net", "date": "2023-01-09T16:50:35Z"}, "message": "Use experimental capability to enable color codes", "tree": {"sha": "d05033bcd649cedd05dd5627e9095459b7e9d4c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05033bcd649cedd05dd5627e9095459b7e9d4c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65cf7abbe2ee75cce74592fa0af75356181566be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEUeJtpptES4xNVu97vXsl1YFw4SQFAmO8Rd0ACgkQvXsl1YFw\n4SRY/Av/fYIAP3yIDFus1pKsVSKj9thOYALHooA4xehj2dCD3WfuoGzkaky5v8J3\nfBTKNCoJn9Itrnwf9AroIVOXVnWNWK102GB14WWo5KwN7Itt19pVLr63D3Ge9MCG\nG4m86cvPOQXP4HCNY2mVxRELu5XEcXnkvjAyAyDYSHZ7eMODegoxQLMTMzqewrxt\ng9OT8CcGvzU1YU24JRG1cBpQjed05bF8DYTNFODkTA39JsEOki9zazLO3IQWeDf1\npVnKdmzu/fdv2je4w6fWyP4/g0B0oyHegRvKj5mPFFDVgjOyvt8mOHvFxNosSBLI\nLAzFfzNRcOp3B8YGzFCnOZ80mw93e7QOhPQ+jnuxc+b2kF1anNAju9VHX/FK6D+7\n+sHt/VIn4OPpA3CW9PRFsRxVF2kHM88XrGGRWBUMzXQJCirpkf9bwyt3GlKByI/L\n7y0vU+95FxoyNHKpLtq510/4G4KAcW1JQkZ5pysjOH21aCilq8y70wbdqV/iOQOI\nTaGIOUHx\n=EWWp\n-----END PGP SIGNATURE-----", "payload": "tree d05033bcd649cedd05dd5627e9095459b7e9d4c3\nparent 738ce83d858aa498c3ff28be3417101ab5f9ce6f\nauthor Ian Chamberlain <ichamberlain@juniper.net> 1672851885 -0500\ncommitter Ian Chamberlain <ichamberlain@juniper.net> 1673283035 -0500\n\nUse experimental capability to enable color codes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65cf7abbe2ee75cce74592fa0af75356181566be", "html_url": "https://github.com/rust-lang/rust/commit/65cf7abbe2ee75cce74592fa0af75356181566be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65cf7abbe2ee75cce74592fa0af75356181566be/comments", "author": {"login": "ian-h-chamberlain", "id": 11131775, "node_id": "MDQ6VXNlcjExMTMxNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/11131775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ian-h-chamberlain", "html_url": "https://github.com/ian-h-chamberlain", "followers_url": "https://api.github.com/users/ian-h-chamberlain/followers", "following_url": "https://api.github.com/users/ian-h-chamberlain/following{/other_user}", "gists_url": "https://api.github.com/users/ian-h-chamberlain/gists{/gist_id}", "starred_url": "https://api.github.com/users/ian-h-chamberlain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ian-h-chamberlain/subscriptions", "organizations_url": "https://api.github.com/users/ian-h-chamberlain/orgs", "repos_url": "https://api.github.com/users/ian-h-chamberlain/repos", "events_url": "https://api.github.com/users/ian-h-chamberlain/events{/privacy}", "received_events_url": "https://api.github.com/users/ian-h-chamberlain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ian-h-chamberlain", "id": 11131775, "node_id": "MDQ6VXNlcjExMTMxNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/11131775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ian-h-chamberlain", "html_url": "https://github.com/ian-h-chamberlain", "followers_url": "https://api.github.com/users/ian-h-chamberlain/followers", "following_url": "https://api.github.com/users/ian-h-chamberlain/following{/other_user}", "gists_url": "https://api.github.com/users/ian-h-chamberlain/gists{/gist_id}", "starred_url": "https://api.github.com/users/ian-h-chamberlain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ian-h-chamberlain/subscriptions", "organizations_url": "https://api.github.com/users/ian-h-chamberlain/orgs", "repos_url": "https://api.github.com/users/ian-h-chamberlain/repos", "events_url": "https://api.github.com/users/ian-h-chamberlain/events{/privacy}", "received_events_url": "https://api.github.com/users/ian-h-chamberlain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "738ce83d858aa498c3ff28be3417101ab5f9ce6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/738ce83d858aa498c3ff28be3417101ab5f9ce6f", "html_url": "https://github.com/rust-lang/rust/commit/738ce83d858aa498c3ff28be3417101ab5f9ce6f"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "11f7b068ecb1630fe43763b91428c168e0c2ea55", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65cf7abbe2ee75cce74592fa0af75356181566be/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65cf7abbe2ee75cce74592fa0af75356181566be/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=65cf7abbe2ee75cce74592fa0af75356181566be", "patch": "@@ -47,6 +47,7 @@ pub enum FlycheckConfig {\n         features: Vec<String>,\n         extra_args: Vec<String>,\n         extra_env: FxHashMap<String, String>,\n+        ansi_color_output: bool,\n     },\n     CustomCommand {\n         command: String,\n@@ -293,16 +294,21 @@ impl FlycheckActor {\n                 extra_args,\n                 features,\n                 extra_env,\n+                ansi_color_output,\n             } => {\n                 let mut cmd = Command::new(toolchain::cargo());\n                 cmd.arg(command);\n                 cmd.current_dir(&self.root);\n-                cmd.args([\n-                    \"--workspace\",\n-                    \"--message-format=json-diagnostic-rendered-ansi\",\n-                    \"--manifest-path\",\n-                ])\n-                .arg(self.root.join(\"Cargo.toml\").as_os_str());\n+                cmd.arg(\"--workspace\");\n+\n+                cmd.arg(if *ansi_color_output {\n+                    \"--message-format=json-diagnostic-rendered-ansi\"\n+                } else {\n+                    \"--message-format=json\"\n+                });\n+\n+                cmd.arg(\"--manifest-path\");\n+                cmd.arg(self.root.join(\"Cargo.toml\").as_os_str());\n \n                 for target in target_triples {\n                     cmd.args([\"--target\", target.as_str()]);"}, {"sha": "b0afbdc9a4265508af0e7c1ea5bf1c63c8ef16f3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65cf7abbe2ee75cce74592fa0af75356181566be/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65cf7abbe2ee75cce74592fa0af75356181566be/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=65cf7abbe2ee75cce74592fa0af75356181566be", "patch": "@@ -161,8 +161,8 @@ config_data! {\n         /// Override the command rust-analyzer uses instead of `cargo check` for\n         /// diagnostics on save. The command is required to output json and\n         /// should therefore include `--message-format=json` or a similar option\n-        /// (for colored diagnostics, use\n-        /// `--message-format=json-diagnostic-rendered-ansi`).\n+        /// (if your client supports the `colorDiagnosticOutput` experimental\n+        /// capability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n         ///\n         /// If you're changing this because you're using some tool wrapping\n         /// Cargo, you might also want to change\n@@ -1008,6 +1008,11 @@ impl Config {\n         self.experimental(\"serverStatusNotification\")\n     }\n \n+    /// Whether the client supports colored output for full diagnostics from `checkOnSave`.\n+    pub fn color_diagnostic_output(&self) -> bool {\n+        self.experimental(\"colorDiagnosticOutput\")\n+    }\n+\n     pub fn publish_diagnostics(&self) -> bool {\n         self.data.diagnostics_enable\n     }\n@@ -1206,6 +1211,7 @@ impl Config {\n                 },\n                 extra_args: self.data.check_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n+                ansi_color_output: self.color_diagnostic_output(),\n             },\n         }\n     }"}, {"sha": "b33a2e79525def361fc8a6be281dfc142f6f216f", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65cf7abbe2ee75cce74592fa0af75356181566be/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/65cf7abbe2ee75cce74592fa0af75356181566be/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=65cf7abbe2ee75cce74592fa0af75356181566be", "patch": "@@ -174,8 +174,8 @@ Whether to pass `--no-default-features` to Cargo. Defaults to\n Override the command rust-analyzer uses instead of `cargo check` for\n diagnostics on save. The command is required to output json and\n should therefore include `--message-format=json` or a similar option\n-(for colored diagnostics, use\n-`--message-format=json-diagnostic-rendered-ansi`).\n+(if your client supports the `colorDiagnosticOutput` experimental\n+capability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n \n If you're changing this because you're using some tool wrapping\n Cargo, you might also want to change"}, {"sha": "930564bd7cabd557c5f0e4c2a6b5581b8f5d2078", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65cf7abbe2ee75cce74592fa0af75356181566be/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/65cf7abbe2ee75cce74592fa0af75356181566be/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=65cf7abbe2ee75cce74592fa0af75356181566be", "patch": "@@ -644,7 +644,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.check.overrideCommand\": {\n-                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option\\n(for colored diagnostics, use\\n`--message-format=json-diagnostic-rendered-ansi`).\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option\\n(if your client supports the `colorDiagnosticOutput` experimental\\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\","}, {"sha": "82cdf0390acaa5cf01c5a9ab7d7657a772ffe391", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65cf7abbe2ee75cce74592fa0af75356181566be/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/65cf7abbe2ee75cce74592fa0af75356181566be/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=65cf7abbe2ee75cce74592fa0af75356181566be", "patch": "@@ -333,6 +333,7 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         caps.codeActionGroup = true;\n         caps.hoverActions = true;\n         caps.serverStatusNotification = true;\n+        caps.colorDiagnosticOutput = true;\n         caps.commands = {\n             commands: [\n                 \"rust-analyzer.runSingle\","}]}