{"sha": "871792d9abba47e5505cf57cda5a1d3f20d4683f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MTc5MmQ5YWJiYTQ3ZTU1MDVjZjU3Y2RhNWExZDNmMjBkNDY4M2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-06T16:45:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-06T16:45:29Z"}, "message": "Implement intrinsic size_of_val for slices", "tree": {"sha": "067504d1f2094c1a41ad7c22187c4de07aa1ce1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/067504d1f2094c1a41ad7c22187c4de07aa1ce1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871792d9abba47e5505cf57cda5a1d3f20d4683f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871792d9abba47e5505cf57cda5a1d3f20d4683f", "html_url": "https://github.com/rust-lang/rust/commit/871792d9abba47e5505cf57cda5a1d3f20d4683f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871792d9abba47e5505cf57cda5a1d3f20d4683f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0a2ff59b2e8fe6258e626d7694e185bba63922", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0a2ff59b2e8fe6258e626d7694e185bba63922", "html_url": "https://github.com/rust-lang/rust/commit/4c0a2ff59b2e8fe6258e626d7694e185bba63922"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "5925bb6a254e5efb1e6f0db4eca3103831ea064e", "filename": "examples/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/871792d9abba47e5505cf57cda5a1d3f20d4683f/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871792d9abba47e5505cf57cda5a1d3f20d4683f/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=871792d9abba47e5505cf57cda5a1d3f20d4683f", "patch": "@@ -201,6 +201,7 @@ pub mod intrinsics {\n     extern \"rust-intrinsic\" {\n         pub fn abort() -> !;\n         pub fn size_of<T>() -> usize;\n+        pub fn size_of_val<T: ?::Sized>(val: &T) -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn uninit<T>() -> T;"}, {"sha": "accd3dacd7a1cb07a8433524b99a47e3958d1e21", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/871792d9abba47e5505cf57cda5a1d3f20d4683f/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871792d9abba47e5505cf57cda5a1d3f20d4683f/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=871792d9abba47e5505cf57cda5a1d3f20d4683f", "patch": "@@ -44,6 +44,9 @@ static NUM_REF: &'static u8 = unsafe { &NUM };\n fn main() {\n     unsafe {\n         let slice: &[u8] = b\"Hello\\0\" as &[u8; 6];\n+        if intrinsics::size_of_val(slice) as u8 != 0 {\n+            panic(&(\"eji\", \"frjio\", 0, 0));\n+        };\n         let ptr: *const u8 = slice as *const [u8] as *const u8;\n         let world = box \"World!\\0\";\n         puts(ptr);"}, {"sha": "c19ae0cd3008d5183dabc541c6248c99d1d5b1e8", "filename": "src/abi.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/871792d9abba47e5505cf57cda5a1d3f20d4683f/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871792d9abba47e5505cf57cda5a1d3f20d4683f/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=871792d9abba47e5505cf57cda5a1d3f20d4683f", "patch": "@@ -604,6 +604,18 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n                     ret.write_cvalue(fx, size_of);\n                 }\n+                \"size_of_val\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let size = match &substs.type_at(0).sty {\n+                        ty::Slice(elem) => {\n+                            let len = args[0].load_value_pair(fx).1;\n+                            let elem_size = fx.layout_of(elem).size.bytes();\n+                            fx.bcx.ins().imul_imm(len, elem_size as i64)\n+                        },\n+                        ty => unimplemented!(\"size_of_val for {:?}\", ty),\n+                    };\n+                    ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n+                }\n                 \"type_id\" => {\n                     assert_eq!(args.len(), 0);\n                     let type_id = fx.tcx.type_id_hash(substs.type_at(0));"}]}