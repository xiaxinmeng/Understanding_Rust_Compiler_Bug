{"sha": "55d73bc6754c351dead6ab4d4b57ddaa347734d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZDczYmM2NzU0YzM1MWRlYWQ2YWI0ZDRiNTdkZGFhMzQ3NzM0ZDY=", "commit": {"author": {"name": "Jay Somedon", "email": "jay.somedon@outlook.com", "date": "2020-12-23T13:24:53Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-04T01:11:33Z"}, "message": "Fix multiple issues from code review\n\n* check metadata version\n* use memmap\n* use Result instead of unwrap\n\nwith Jay Somedon <jay.somedon@outlook.com>", "tree": {"sha": "eb6236274e385dfb0e8c74b621506fa9d57add52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6236274e385dfb0e8c74b621506fa9d57add52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55d73bc6754c351dead6ab4d4b57ddaa347734d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55d73bc6754c351dead6ab4d4b57ddaa347734d6", "html_url": "https://github.com/rust-lang/rust/commit/55d73bc6754c351dead6ab4d4b57ddaa347734d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55d73bc6754c351dead6ab4d4b57ddaa347734d6/comments", "author": {"login": "jsomedon", "id": 2172297, "node_id": "MDQ6VXNlcjIxNzIyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2172297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsomedon", "html_url": "https://github.com/jsomedon", "followers_url": "https://api.github.com/users/jsomedon/followers", "following_url": "https://api.github.com/users/jsomedon/following{/other_user}", "gists_url": "https://api.github.com/users/jsomedon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsomedon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsomedon/subscriptions", "organizations_url": "https://api.github.com/users/jsomedon/orgs", "repos_url": "https://api.github.com/users/jsomedon/repos", "events_url": "https://api.github.com/users/jsomedon/events{/privacy}", "received_events_url": "https://api.github.com/users/jsomedon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fd7cd74067445484fbbd3f78e715c4fe24b004c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd7cd74067445484fbbd3f78e715c4fe24b004c", "html_url": "https://github.com/rust-lang/rust/commit/8fd7cd74067445484fbbd3f78e715c4fe24b004c"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "39f43ba17f886f9576949390156c8e39e9ae4463", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55d73bc6754c351dead6ab4d4b57ddaa347734d6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/55d73bc6754c351dead6ab4d4b57ddaa347734d6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=55d73bc6754c351dead6ab4d4b57ddaa347734d6", "patch": "@@ -80,7 +80,7 @@ dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"miniz_oxide\",\n- \"object 0.23.0\",\n+ \"object\",\n  \"rustc-demangle\",\n ]\n \n@@ -891,6 +891,16 @@ version = \"2.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525\"\n \n+[[package]]\n+name = \"memmap\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6585fd95e7bb50d6cc31e20d4cf9afb4e2ba16c5846fc76793f11218da9c475b\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"memmap2\"\n version = \"0.2.1\"\n@@ -1008,16 +1018,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"object\"\n-version = \"0.22.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397\"\n-dependencies = [\n- \"flate2\",\n- \"wasmparser\",\n-]\n-\n [[package]]\n name = \"object\"\n version = \"0.23.0\"\n@@ -1164,7 +1164,8 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"log\",\n- \"object 0.22.0\",\n+ \"memmap\",\n+ \"object\",\n  \"serde\",\n  \"serde_json\",\n  \"snap\",\n@@ -1180,7 +1181,7 @@ dependencies = [\n  \"libloading\",\n  \"mbe\",\n  \"memmap2\",\n- \"object 0.23.0\",\n+ \"object\",\n  \"proc_macro_api\",\n  \"proc_macro_test\",\n  \"serde_derive\",\n@@ -1898,12 +1899,6 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n-[[package]]\n-name = \"wasmparser\"\n-version = \"0.57.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"32fddd575d477c6e9702484139cf9f23dcd554b06d185ed0f56c857dd3a47aa6\"\n-\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "16fd56c7ecc757e7995798f5a49b72f29a7ebf36", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55d73bc6754c351dead6ab4d4b57ddaa347734d6/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55d73bc6754c351dead6ab4d4b57ddaa347734d6/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=55d73bc6754c351dead6ab4d4b57ddaa347734d6", "patch": "@@ -21,3 +21,4 @@ base_db = { path = \"../base_db\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n snap = \"1\"\n object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"elf\", \"macho\", \"pe\", \"unaligned\"] }\n+memmap = \"0.7.0\""}, {"sha": "a58e39de010545adb10194e5a1b834dce5f9fd83", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/55d73bc6754c351dead6ab4d4b57ddaa347734d6/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d73bc6754c351dead6ab4d4b57ddaa347734d6/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=55d73bc6754c351dead6ab4d4b57ddaa347734d6", "patch": "@@ -9,15 +9,22 @@ pub mod msg;\n mod process;\n mod rpc;\n \n-use std::{ffi::OsStr, fs::read as fsread, io::{self, Read}, path::{Path, PathBuf}, sync::Arc};\n-\n use base_db::{Env, ProcMacro};\n+use std::{\n+    ffi::OsStr,\n+    fs::File,\n+    io::{self, Read},\n+    path::{Path, PathBuf},\n+    sync::Arc,\n+};\n+\n use tt::{SmolStr, Subtree};\n \n use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n \n pub use rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind};\n \n+use memmap::Mmap;\n use object::read::{File as BinaryFile, Object, ObjectSection};\n use snap::read::FrameDecoder as SnapDecoder;\n \n@@ -110,13 +117,13 @@ impl ProcMacroClient {\n \n     // This is used inside self.read_version() to locate the \".rustc\" section\n     // from a proc macro crate's binary file.\n-    fn read_section<'a>(&self, dylib_binary: &'a [u8], section_name: &str) -> &'a [u8] {\n+    fn read_section<'a>(&self, dylib_binary: &'a [u8], section_name: &str) -> io::Result<&'a [u8]> {\n         BinaryFile::parse(dylib_binary)\n-            .unwrap()\n+            .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))?\n             .section_by_name(section_name)\n-            .unwrap()\n+            .ok_or_else(|| io::Error::new(io::ErrorKind::InvalidData, \"section read error\"))?\n             .data()\n-            .unwrap()\n+            .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))\n     }\n \n     // Check the version of rustc that was used to compile a proc macro crate's\n@@ -138,10 +145,19 @@ impl ProcMacroClient {\n     // * [some more bytes that we don really care but still there] :-)\n     // Check this issue for more about the bytes layout:\n     // https://github.com/rust-analyzer/rust-analyzer/issues/6174\n-    fn read_version(&self, dylib_path: &Path) -> String {\n-        let dylib_binary = fsread(dylib_path).unwrap();\n+    #[allow(unused)]\n+    fn read_version(&self, dylib_path: &Path) -> io::Result<String> {\n+        let dylib_file = File::open(dylib_path)?;\n+        let dylib_mmaped = unsafe { Mmap::map(&dylib_file) }?;\n+\n+        let dot_rustc = self.read_section(&dylib_mmaped, \".rustc\")?;\n \n-        let dot_rustc = self.read_section(&dylib_binary, \".rustc\");\n+        let header = &dot_rustc[..8];\n+        const EXPECTED_HEADER: [u8; 8] = [b'r', b'u', b's', b't', 0, 0, 0, 5];\n+        // check if header is valid\n+        if !(header == EXPECTED_HEADER) {\n+            return Err(io::Error::new(io::ErrorKind::InvalidData, format!(\".rustc section should start with header {:?}; header {:?} is actually presented.\",EXPECTED_HEADER ,header)));\n+        }\n \n         let snappy_portion = &dot_rustc[8..];\n \n@@ -154,14 +170,12 @@ impl ProcMacroClient {\n         // so 13 bytes in total, and we should check the 13th byte\n         // to know the length\n         let mut bytes_before_version = [0u8; 13];\n-        snappy_decoder\n-            .read_exact(&mut bytes_before_version)\n-            .unwrap();\n+        snappy_decoder.read_exact(&mut bytes_before_version)?;\n         let length = bytes_before_version[12]; // what? can't use -1 indexing?\n \n         let mut version_string_utf8 = vec![0u8; length as usize];\n-        snappy_decoder.read_exact(&mut version_string_utf8).unwrap();\n-        let version_string = String::from_utf8(version_string_utf8).unwrap();\n-        version_string\n+        snappy_decoder.read_exact(&mut version_string_utf8)?;\n+        let version_string = String::from_utf8(version_string_utf8);\n+        version_string.map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))\n     }\n }"}]}