{"sha": "0ced18eee00c53e2c060f674918255844edf30a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZWQxOGVlZTAwYzUzZTJjMDYwZjY3NDkxODI1NTg0NGVkZjMwYTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-02T12:33:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-02T12:52:55Z"}, "message": "Move run commands to commands.ts", "tree": {"sha": "1f8936df9341a486ec5cd176bce50b7e46718644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f8936df9341a486ec5cd176bce50b7e46718644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ced18eee00c53e2c060f674918255844edf30a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ced18eee00c53e2c060f674918255844edf30a6", "html_url": "https://github.com/rust-lang/rust/commit/0ced18eee00c53e2c060f674918255844edf30a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ced18eee00c53e2c060f674918255844edf30a6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131ccd95403e10131d6b8dfcad60ebc49c257c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/131ccd95403e10131d6b8dfcad60ebc49c257c53", "html_url": "https://github.com/rust-lang/rust/commit/131ccd95403e10131d6b8dfcad60ebc49c257c53"}], "stats": {"total": 267, "additions": 134, "deletions": 133}, "files": [{"sha": "534d2a9847e0dd1fd70265c2d85db405cb9855f4", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 60, "deletions": 14, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0ced18eee00c53e2c060f674918255844edf30a6/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ced18eee00c53e2c060f674918255844edf30a6/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=0ced18eee00c53e2c060f674918255844edf30a6", "patch": "@@ -8,6 +8,7 @@ import { spawnSync } from 'child_process';\n import { RunnableQuickPick, selectRunnable, createTask } from './run';\n import { AstInspector } from './ast_inspector';\n import { isRustDocument, sleep, isRustEditor } from './util';\n+import { startDebugSession, makeDebugConfig } from './debug';\n \n export * from './ast_inspector';\n export * from './run';\n@@ -197,20 +198,6 @@ export function toggleInlayHints(ctx: Ctx): Cmd {\n     };\n }\n \n-export function run(ctx: Ctx): Cmd {\n-    let prevRunnable: RunnableQuickPick | undefined;\n-\n-    return async () => {\n-        const item = await selectRunnable(ctx, prevRunnable);\n-        if (!item) return;\n-\n-        item.detail = 'rerun';\n-        prevRunnable = item;\n-        const task = createTask(item.runnable);\n-        return await vscode.tasks.executeTask(task);\n-    };\n-}\n-\n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n@@ -368,3 +355,62 @@ export function applySnippetWorkspaceEditCommand(_ctx: Ctx): Cmd {\n         await applySnippetWorkspaceEdit(edit);\n     };\n }\n+\n+export function run(ctx: Ctx): Cmd {\n+    let prevRunnable: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const item = await selectRunnable(ctx, prevRunnable);\n+        if (!item) return;\n+\n+        item.detail = 'rerun';\n+        prevRunnable = item;\n+        const task = createTask(item.runnable);\n+        return await vscode.tasks.executeTask(task);\n+    };\n+}\n+\n+export function runSingle(ctx: Ctx): Cmd {\n+    return async (runnable: ra.Runnable) => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return;\n+\n+        const task = createTask(runnable);\n+        task.group = vscode.TaskGroup.Build;\n+        task.presentationOptions = {\n+            reveal: vscode.TaskRevealKind.Always,\n+            panel: vscode.TaskPanelKind.Dedicated,\n+            clear: true,\n+        };\n+\n+        return vscode.tasks.executeTask(task);\n+    };\n+}\n+\n+export function debug(ctx: Ctx): Cmd {\n+    let prevDebuggee: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const item = await selectRunnable(ctx, prevDebuggee, true);\n+        if (!item) return;\n+\n+        item.detail = 'restart';\n+        prevDebuggee = item;\n+        return await startDebugSession(ctx, item.runnable);\n+    };\n+}\n+\n+export function debugSingle(ctx: Ctx): Cmd {\n+    return async (config: ra.Runnable) => {\n+        await startDebugSession(ctx, config);\n+    };\n+}\n+\n+export function newDebugConfig(ctx: Ctx): Cmd {\n+    return async () => {\n+        const item = await selectRunnable(ctx, undefined, true, false);\n+        if (!item) return;\n+\n+        await makeDebugConfig(ctx, item.runnable);\n+    };\n+}"}, {"sha": "1e421d407ba6dcd4379c66927abb6b81a7e45a0a", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 71, "deletions": 48, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/0ced18eee00c53e2c060f674918255844edf30a6/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ced18eee00c53e2c060f674918255844edf30a6/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=0ced18eee00c53e2c060f674918255844edf30a6", "patch": "@@ -9,40 +9,53 @@ import { Ctx } from \"./ctx\";\n const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n \n-function getLldbDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n-    return {\n-        type: \"lldb\",\n-        request: \"launch\",\n-        name: config.label,\n-        program: executable,\n-        args: config.extraArgs,\n-        cwd: config.cwd,\n-        sourceMap: sourceFileMap,\n-        sourceLanguages: [\"rust\"]\n-    };\n-}\n+export async function makeDebugConfig(ctx: Ctx, runnable: ra.Runnable): Promise<void> {\n+    const scope = ctx.activeRustEditor?.document.uri;\n+    if (!scope) return;\n \n-function getCppvsDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n-    return {\n-        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : \"cppdbg\",\n-        request: \"launch\",\n-        name: config.label,\n-        program: executable,\n-        args: config.extraArgs,\n-        cwd: config.cwd,\n-        sourceFileMap: sourceFileMap,\n-    };\n+    const debugConfig = await getDebugConfiguration(ctx, runnable);\n+    if (!debugConfig) return;\n+\n+    const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\", scope);\n+    const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n+\n+    const index = configurations.findIndex(c => c.name === debugConfig.name);\n+    if (index !== -1) {\n+        const answer = await vscode.window.showErrorMessage(`Launch configuration '${debugConfig.name}' already exists!`, 'Cancel', 'Update');\n+        if (answer === \"Cancel\") return;\n+\n+        configurations[index] = debugConfig;\n+    } else {\n+        configurations.push(debugConfig);\n+    }\n+\n+    await wsLaunchSection.update(\"configurations\", configurations);\n }\n \n-async function getDebugExecutable(config: ra.Runnable): Promise<string> {\n-    const cargo = new Cargo(config.cwd || '.', debugOutput);\n-    const executable = await cargo.executableFromArgs(config.args);\n+export async function startDebugSession(ctx: Ctx, runnable: ra.Runnable): Promise<boolean> {\n+    let debugConfig: vscode.DebugConfiguration | undefined = undefined;\n+    let message = \"\";\n \n-    // if we are here, there were no compilation errors.\n-    return executable;\n+    const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\");\n+    const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n+\n+    const index = configurations.findIndex(c => c.name === runnable.label);\n+    if (-1 !== index) {\n+        debugConfig = configurations[index];\n+        message = \" (from launch.json)\";\n+        debugOutput.clear();\n+    } else {\n+        debugConfig = await getDebugConfiguration(ctx, runnable);\n+    }\n+\n+    if (!debugConfig) return false;\n+\n+    debugOutput.appendLine(`Launching debug configuration${message}:`);\n+    debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n+    return vscode.debug.startDebugging(undefined, debugConfig);\n }\n \n-export async function getDebugConfiguration(ctx: Ctx, config: ra.Runnable): Promise<vscode.DebugConfiguration | undefined> {\n+async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<vscode.DebugConfiguration | undefined> {\n     const editor = ctx.activeRustEditor;\n     if (!editor) return;\n \n@@ -78,8 +91,8 @@ export async function getDebugConfiguration(ctx: Ctx, config: ra.Runnable): Prom\n         return path.normalize(p).replace(wsFolder, '${workspaceRoot}');\n     }\n \n-    const executable = await getDebugExecutable(config);\n-    const debugConfig = knownEngines[debugEngine.id](config, simplifyPath(executable), debugOptions.sourceFileMap);\n+    const executable = await getDebugExecutable(runnable);\n+    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), debugOptions.sourceFileMap);\n     if (debugConfig.type in debugOptions.engineSettings) {\n         const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n         for (var key in settingsMap) {\n@@ -100,25 +113,35 @@ export async function getDebugConfiguration(ctx: Ctx, config: ra.Runnable): Prom\n     return debugConfig;\n }\n \n-export async function startDebugSession(ctx: Ctx, config: ra.Runnable): Promise<boolean> {\n-    let debugConfig: vscode.DebugConfiguration | undefined = undefined;\n-    let message = \"\";\n-\n-    const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\");\n-    const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n+async function getDebugExecutable(runnable: ra.Runnable): Promise<string> {\n+    const cargo = new Cargo(runnable.cwd || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(runnable.args);\n \n-    const index = configurations.findIndex(c => c.name === config.label);\n-    if (-1 !== index) {\n-        debugConfig = configurations[index];\n-        message = \" (from launch.json)\";\n-        debugOutput.clear();\n-    } else {\n-        debugConfig = await getDebugConfiguration(ctx, config);\n-    }\n+    // if we are here, there were no compilation errors.\n+    return executable;\n+}\n \n-    if (!debugConfig) return false;\n+function getLldbDebugConfig(runnable: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+    return {\n+        type: \"lldb\",\n+        request: \"launch\",\n+        name: runnable.label,\n+        program: executable,\n+        args: runnable.extraArgs,\n+        cwd: runnable.cwd,\n+        sourceMap: sourceFileMap,\n+        sourceLanguages: [\"rust\"]\n+    };\n+}\n \n-    debugOutput.appendLine(`Launching debug configuration${message}:`);\n-    debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n-    return vscode.debug.startDebugging(undefined, debugConfig);\n+function getCppvsDebugConfig(runnable: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+    return {\n+        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : \"cppdbg\",\n+        request: \"launch\",\n+        name: runnable.label,\n+        program: executable,\n+        args: runnable.extraArgs,\n+        cwd: runnable.cwd,\n+        sourceFileMap: sourceFileMap,\n+    };\n }"}, {"sha": "5fc4f8e41b0c0d6e7924fb848a252e0328e763b5", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 3, "deletions": 71, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0ced18eee00c53e2c060f674918255844edf30a6/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ced18eee00c53e2c060f674918255844edf30a6/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=0ced18eee00c53e2c060f674918255844edf30a6", "patch": "@@ -3,8 +3,8 @@ import * as lc from 'vscode-languageclient';\n import * as ra from './lsp_ext';\n import * as toolchain from \"./toolchain\";\n \n-import { Ctx, Cmd } from './ctx';\n-import { startDebugSession, getDebugConfiguration } from './debug';\n+import { Ctx } from './ctx';\n+import { makeDebugConfig } from './debug';\n \n const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n@@ -65,7 +65,7 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n             quickPick.onDidHide(() => close()),\n             quickPick.onDidAccept(() => close(quickPick.selectedItems[0])),\n             quickPick.onDidTriggerButton((_button) => {\n-                (async () => await makeDebugConfig(ctx, quickPick.activeItems[0]))();\n+                (async () => await makeDebugConfig(ctx, quickPick.activeItems[0].runnable))();\n                 close();\n             }),\n             quickPick.onDidChangeActive((active) => {\n@@ -84,74 +84,6 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n     });\n }\n \n-export function runSingle(ctx: Ctx): Cmd {\n-    return async (runnable: ra.Runnable) => {\n-        const editor = ctx.activeRustEditor;\n-        if (!editor) return;\n-\n-        const task = createTask(runnable);\n-        task.group = vscode.TaskGroup.Build;\n-        task.presentationOptions = {\n-            reveal: vscode.TaskRevealKind.Always,\n-            panel: vscode.TaskPanelKind.Dedicated,\n-            clear: true,\n-        };\n-\n-        return vscode.tasks.executeTask(task);\n-    };\n-}\n-\n-export function debug(ctx: Ctx): Cmd {\n-    let prevDebuggee: RunnableQuickPick | undefined;\n-\n-    return async () => {\n-        const item = await selectRunnable(ctx, prevDebuggee, true);\n-        if (!item) return;\n-\n-        item.detail = 'restart';\n-        prevDebuggee = item;\n-        return await startDebugSession(ctx, item.runnable);\n-    };\n-}\n-\n-export function debugSingle(ctx: Ctx): Cmd {\n-    return async (config: ra.Runnable) => {\n-        await startDebugSession(ctx, config);\n-    };\n-}\n-\n-async function makeDebugConfig(ctx: Ctx, item: RunnableQuickPick): Promise<void> {\n-    const scope = ctx.activeRustEditor?.document.uri;\n-    if (!scope) return;\n-\n-    const debugConfig = await getDebugConfiguration(ctx, item.runnable);\n-    if (!debugConfig) return;\n-\n-    const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\", scope);\n-    const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n-\n-    const index = configurations.findIndex(c => c.name === debugConfig.name);\n-    if (index !== -1) {\n-        const answer = await vscode.window.showErrorMessage(`Launch configuration '${debugConfig.name}' already exists!`, 'Cancel', 'Update');\n-        if (answer === \"Cancel\") return;\n-\n-        configurations[index] = debugConfig;\n-    } else {\n-        configurations.push(debugConfig);\n-    }\n-\n-    await wsLaunchSection.update(\"configurations\", configurations);\n-}\n-\n-export function newDebugConfig(ctx: Ctx): Cmd {\n-    return async () => {\n-        const item = await selectRunnable(ctx, undefined, true, false);\n-        if (!item) return;\n-\n-        await makeDebugConfig(ctx, item);\n-    };\n-}\n-\n export class RunnableQuickPick implements vscode.QuickPickItem {\n     public label: string;\n     public description?: string | undefined;"}]}