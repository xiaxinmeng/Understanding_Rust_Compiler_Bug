{"sha": "c7244afea1bd6254f9417b47a2afaaeee15eee1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MjQ0YWZlYTFiZDYyNTRmOTQxN2I0N2EyYWZhYWVlZTE1ZWVlMWE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-19T22:49:13Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-19T22:49:13Z"}, "message": "Implement SwitchInt (for some match expressions).", "tree": {"sha": "992a6bd03e9b21d299b09b5f8800527b856a6cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992a6bd03e9b21d299b09b5f8800527b856a6cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7244afea1bd6254f9417b47a2afaaeee15eee1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7244afea1bd6254f9417b47a2afaaeee15eee1a", "html_url": "https://github.com/rust-lang/rust/commit/c7244afea1bd6254f9417b47a2afaaeee15eee1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7244afea1bd6254f9417b47a2afaaeee15eee1a/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8a6b64de024dc4ab6eaf2a97aad4978967f59f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8a6b64de024dc4ab6eaf2a97aad4978967f59f", "html_url": "https://github.com/rust-lang/rust/commit/4c8a6b64de024dc4ab6eaf2a97aad4978967f59f"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "6f2f604d84ec0fecc3c864e76aa94d777538cd84", "filename": "src/interpreter.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7244afea1bd6254f9417b47a2afaaeee15eee1a/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7244afea1bd6254f9417b47a2afaaeee15eee1a/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=c7244afea1bd6254f9417b47a2afaaeee15eee1a", "patch": "@@ -6,7 +6,7 @@ use syntax::attr::AttrMetaMethods;\n \n use std::iter;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n enum Value {\n     Uninit,\n     Bool(bool),\n@@ -120,11 +120,19 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                     }\n                 }\n \n-                _ => unimplemented!(),\n+                SwitchInt { ref discr, switch_ty: _, ref values, ref targets } => {\n+                    let discr_val = &self.value_stack[self.eval_lvalue(discr)];\n+\n+                    let index = values.iter().position(|v| *discr_val == self.eval_constant(v))\n+                        .expect(\"discriminant matched no values\");\n+\n+                    block = targets[index];\n+                }\n+\n                 // Diverge => unimplemented!(),\n                 // Panic { target } => unimplemented!(),\n                 // Switch { ref discr, adt_def, ref targets } => unimplemented!(),\n-                // SwitchInt { ref discr, switch_ty, ref values, ref targets } => unimplemented!(),\n+                _ => unimplemented!(),\n             }\n         }\n \n@@ -220,7 +228,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             Uint(_u) => unimplemented!(),\n             Str(ref _s) => unimplemented!(),\n             ByteStr(ref _bs) => unimplemented!(),\n-            Bool(_b) => unimplemented!(),\n+            Bool(b) => Value::Bool(b),\n             Struct(_node_id) => unimplemented!(),\n             Tuple(_node_id) => unimplemented!(),\n             Function(_def_id) => unimplemented!(),"}, {"sha": "bd60733b3d07d180d99a5e96765461c590f68116", "filename": "test/basic.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c7244afea1bd6254f9417b47a2afaaeee15eee1a/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7244afea1bd6254f9417b47a2afaaeee15eee1a/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=c7244afea1bd6254f9417b47a2afaaeee15eee1a", "patch": "@@ -73,4 +73,38 @@ fn factorial_recursive() -> i32 {\n     fact(10)\n }\n \n+#[miri_run(expected = \"Int(1)\")]\n+fn match_bool() -> i32 {\n+    let b = true;\n+    match b {\n+        true => 1,\n+        false => 0,\n+    }\n+}\n+\n+#[miri_run(expected = \"Int(20)\")]\n+fn match_int() -> i32 {\n+    let n = 2;\n+    match n {\n+        0 => 0,\n+        1 => 10,\n+        2 => 20,\n+        3 => 30,\n+        _ => 100,\n+    }\n+}\n+\n+// #[miri_run(expected = \"Int(4)\")]\n+// fn match_int_range() -> i32 {\n+//     let n = 42;\n+//     match n {\n+//         0...9 => 0,\n+//         10...19 => 1,\n+//         20...29 => 2,\n+//         30...39 => 3,\n+//         40...49 => 4,\n+//         _ => 5,\n+//     }\n+// }\n+\n fn main() {}"}]}