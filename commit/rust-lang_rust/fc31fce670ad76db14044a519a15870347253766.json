{"sha": "fc31fce670ad76db14044a519a15870347253766", "node_id": "C_kwDOAAsO6NoAKGZjMzFmY2U2NzBhZDc2ZGIxNDA0NGE1MTlhMTU4NzAzNDcyNTM3NjY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T23:36:47Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T23:36:47Z"}, "message": "rustdoc: use serde, which can escape strings more quickly\n\nThis means we don't gain as much as we did from using single-quotes, since\nserde_json can only produce double-quoted strings, but it's still a win.", "tree": {"sha": "3f76ebe44c468cecb9efd1006c7e39eb80327e39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f76ebe44c468cecb9efd1006c7e39eb80327e39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc31fce670ad76db14044a519a15870347253766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc31fce670ad76db14044a519a15870347253766", "html_url": "https://github.com/rust-lang/rust/commit/fc31fce670ad76db14044a519a15870347253766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc31fce670ad76db14044a519a15870347253766/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b", "html_url": "https://github.com/rust-lang/rust/commit/dddc2fd6de3db11eeeb244e0ac5754c49f9ad11b"}], "stats": {"total": 50, "additions": 15, "deletions": 35}, "files": [{"sha": "f9abb46207d748e957b70261d8fa2c4451425505", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fc31fce670ad76db14044a519a15870347253766/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc31fce670ad76db14044a519a15870347253766/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=fc31fce670ad76db14044a519a15870347253766", "patch": "@@ -1,5 +1,4 @@\n use std::ffi::OsStr;\n-use std::fmt;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n@@ -10,6 +9,8 @@ use std::sync::LazyLock as Lazy;\n use itertools::Itertools;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use serde::ser::SerializeSeq;\n+use serde::{Serialize, Serializer};\n \n use super::{collect_paths_for_type, ensure_trailing_slash, Context, BASIC_KEYWORDS};\n use crate::clean::Crate;\n@@ -563,36 +564,18 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n             types: Vec<String>,\n         }\n \n-        impl Implementor {\n-            fn to_js_string(&self) -> impl fmt::Display + '_ {\n-                fn single_quote_string(s: &str) -> String {\n-                    let mut result = String::with_capacity(s.len() + 2);\n-                    result.push_str(\"'\");\n-                    for c in s.chars() {\n-                        if c == '\"' {\n-                            result.push_str(\"\\\"\");\n-                        } else {\n-                            result.extend(c.escape_default());\n-                        }\n-                    }\n-                    result.push_str(\"'\");\n-                    result\n+        impl Serialize for Implementor {\n+            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+            where\n+                S: Serializer,\n+            {\n+                let mut seq = serializer.serialize_seq(None)?;\n+                seq.serialize_element(&self.text)?;\n+                if self.synthetic {\n+                    seq.serialize_element(&1)?;\n+                    seq.serialize_element(&self.types)?;\n                 }\n-                crate::html::format::display_fn(|f| {\n-                    let text_esc = single_quote_string(&self.text);\n-                    if self.synthetic {\n-                        let types = crate::html::format::comma_sep(\n-                            self.types.iter().map(|type_| single_quote_string(type_)),\n-                            false,\n-                        );\n-                        // use `1` to represent a synthetic, because it's fewer bytes than `true`\n-                        write!(f, \"[{text_esc},1,[{types}]]\")\n-                    } else {\n-                        // The types list is only used for synthetic impls.\n-                        // If this changes, `main.js` and `write_shared.rs` both need changed.\n-                        write!(f, \"[{text_esc}]\")\n-                    }\n-                })\n+                seq.end()\n             }\n         }\n \n@@ -626,12 +609,9 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n         }\n \n         let implementors = format!(\n-            r#\"\"{}\":[{}]\"#,\n+            r#\"\"{}\":{}\"#,\n             krate.name(cx.tcx()),\n-            crate::html::format::comma_sep(\n-                implementors.iter().map(Implementor::to_js_string),\n-                false\n-            )\n+            serde_json::to_string(&implementors).expect(\"failed serde conversion\"),\n         );\n \n         let mut mydst = dst.clone();"}]}