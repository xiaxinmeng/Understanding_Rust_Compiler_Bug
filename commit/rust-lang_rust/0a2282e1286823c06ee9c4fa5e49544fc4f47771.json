{"sha": "0a2282e1286823c06ee9c4fa5e49544fc4f47771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjI4MmUxMjg2ODIzYzA2ZWU5YzRmYTVlNDk1NDRmYzRmNDc3NzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-23T07:33:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-26T23:34:14Z"}, "message": "rustc: Continue to tweak \"std internal symbols\"\n\nIn investigating [an issue][1] with `panic_implementation` defined in an\nexecutable that's optimized I once again got to rethinking a bit about the\n`rustc_std_internal_symbol` attribute as well as weak lang items. We've sort of\nbeen non-stop tweaking these items ever since their inception, and this\ncontinues to the trend.\n\nThe crux of the bug was that in the reachability we have a [different branch][2]\nfor non-library builds which meant that weak lang items (and std internal\nsymbols) weren't considered reachable, causing them to get eliminiated by\nThinLTO passes. The fix was to basically tweak that branch to consider these\nsymbols to ensure that they're propagated all the way to the linker.\n\nAlong the way I've attempted to erode the distinction between std internal\nsymbols and weak lang items by having weak lang items automatically configure\nfields of `CodegenFnAttrs`. That way most code no longer even considers weak\nlang items and they're simply considered normal functions with attributes about\nthe ABI.\n\nIn the end this fixes the final comment of #51342\n\n[1]: https://github.com/rust-lang/rust/issues/51342#issuecomment-414368019\n[2]: https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src/librustc/middle/reachable.rs#L225-L238", "tree": {"sha": "bffd2f09af5259ef0670a5fc37dc4c4005b73bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bffd2f09af5259ef0670a5fc37dc4c4005b73bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2282e1286823c06ee9c4fa5e49544fc4f47771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2282e1286823c06ee9c4fa5e49544fc4f47771", "html_url": "https://github.com/rust-lang/rust/commit/0a2282e1286823c06ee9c4fa5e49544fc4f47771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2282e1286823c06ee9c4fa5e49544fc4f47771/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caed80ba4ba8d9f4d3fa8aa9af6c4092d779cd9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/caed80ba4ba8d9f4d3fa8aa9af6c4092d779cd9d", "html_url": "https://github.com/rust-lang/rust/commit/caed80ba4ba8d9f4d3fa8aa9af6c4092d779cd9d"}], "stats": {"total": 186, "additions": 151, "deletions": 35}, "files": [{"sha": "bdf0e37a2e672d8de3ae3d274b31a294c12918e8", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -89,25 +89,25 @@ mod contents {\n     // linkage directives are provided as part of the current compiler allocator\n     // ABI\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_alloc(size: usize, align: usize) -> *mut u8 {\n         let flags = align_to_flags(align, size);\n         let ptr = mallocx(size as size_t, flags) as *mut u8;\n         ptr\n     }\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_dealloc(ptr: *mut u8,\n                                        size: usize,\n                                        align: usize) {\n         let flags = align_to_flags(align, size);\n         sdallocx(ptr as *mut c_void, size, flags);\n     }\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_realloc(ptr: *mut u8,\n                                        _old_size: usize,\n                                        align: usize,\n@@ -117,8 +117,8 @@ mod contents {\n         ptr\n     }\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_alloc_zeroed(size: usize, align: usize) -> *mut u8 {\n         let ptr = if align <= MIN_ALIGN && align <= size {\n             calloc(size as size_t, 1) as *mut u8"}, {"sha": "14221f3d79e84050f91f50b58736b1281b022c8f", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -31,7 +31,7 @@\n \n // Rust's \"try\" function, but if we're aborting on panics we just call the\n // function as there's nothing else we need to do here.\n-#[no_mangle]\n+#[cfg_attr(stage0, no_mangle)]\n #[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n                                               data: *mut u8,\n@@ -51,7 +51,7 @@ pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n // which would break compat with XP. For now just use `intrinsics::abort` which\n // will kill us with an illegal instruction, which will do a good enough job for\n // now hopefully.\n-#[no_mangle]\n+#[cfg_attr(stage0, no_mangle)]\n #[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_start_panic(_payload: usize) -> u32 {\n     abort();"}, {"sha": "8aa0f5e07c0eaf127f3da05a5c986bb5ef0cb72d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -2287,25 +2287,59 @@ pub fn provide(providers: &mut Providers) {\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct CodegenFnAttrs {\n     pub flags: CodegenFnAttrFlags,\n+    /// Parsed representation of the `#[inline]` attribute\n     pub inline: InlineAttr,\n+    /// The `#[export_name = \"...\"]` attribute, indicating a custom symbol a\n+    /// function should be exported under\n     pub export_name: Option<Symbol>,\n+    /// The `#[link_name = \"...\"]` attribute, indicating a custom symbol an\n+    /// imported function should be imported as. Note that `export_name`\n+    /// probably isn't set when this is set, this is for foreign items while\n+    /// `#[export_name]` is for Rust-defined functions.\n+    pub link_name: Option<Symbol>,\n+    /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n+    /// features (only enabled features are supported right now).\n     pub target_features: Vec<Symbol>,\n+    /// The `#[linkage = \"...\"]` attribute and the value we found.\n     pub linkage: Option<Linkage>,\n+    /// The `#[link_section = \"...\"]` attribute, or what executable section this\n+    /// should be placed in.\n     pub link_section: Option<Symbol>,\n }\n \n bitflags! {\n     #[derive(RustcEncodable, RustcDecodable)]\n     pub struct CodegenFnAttrFlags: u32 {\n+        /// #[cold], a hint to LLVM that this function, when called, is never on\n+        /// the hot path\n         const COLD                      = 1 << 0;\n+        /// #[allocator], a hint to LLVM that the pointer returned from this\n+        /// function is never null\n         const ALLOCATOR                 = 1 << 1;\n+        /// #[unwind], an indicator that this function may unwind despite what\n+        /// its ABI signature may otherwise imply\n         const UNWIND                    = 1 << 2;\n+        /// #[rust_allocator_nounwind], an indicator that an imported FFI\n+        /// function will never unwind. Probably obsolete by recent changes with\n+        /// #[unwind], but hasn't been removed/migrated yet\n         const RUSTC_ALLOCATOR_NOUNWIND  = 1 << 3;\n+        /// #[naked], indicates to LLVM that no function prologue/epilogue\n+        /// should be generated\n         const NAKED                     = 1 << 4;\n+        /// #[no_mangle], the function's name should be the same as its symbol\n         const NO_MANGLE                 = 1 << 5;\n+        /// #[rustc_std_internal_symbol], and indicator that this symbol is a\n+        /// \"weird symbol\" for the standard library in that it has slightly\n+        /// different linkage, visibility, and reachability rules.\n         const RUSTC_STD_INTERNAL_SYMBOL = 1 << 6;\n+        /// #[no_debug], indicates that no debugging information should be\n+        /// generated for this function by LLVM\n         const NO_DEBUG                  = 1 << 7;\n+        /// #[thread_local], indicates a static is actually a thread local\n+        /// piece of memory\n         const THREAD_LOCAL              = 1 << 8;\n+        /// #[used], indicates that LLVM can't eliminate this function (but the\n+        /// linker can!)\n         const USED                      = 1 << 9;\n     }\n }\n@@ -2316,6 +2350,7 @@ impl CodegenFnAttrs {\n             flags: CodegenFnAttrFlags::empty(),\n             inline: InlineAttr::None,\n             export_name: None,\n+            link_name: None,\n             target_features: vec![],\n             linkage: None,\n             link_section: None,"}, {"sha": "2ac195dca82c42278dc7b40a31e3de8196a9dbbe", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -1136,6 +1136,7 @@ impl_stable_hash_for!(struct hir::CodegenFnAttrs {\n     flags,\n     inline,\n     export_name,\n+    link_name,\n     target_features,\n     linkage,\n     link_section,"}, {"sha": "ccfc84940f2dffd196549e25d337068853734c58", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -231,8 +231,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     false\n                 };\n                 let def_id = self.tcx.hir.local_def_id(item.id);\n-                let is_extern = self.tcx.codegen_fn_attrs(def_id).contains_extern_indicator();\n-                if reachable || is_extern {\n+                let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n+                let is_extern = codegen_attrs.contains_extern_indicator();\n+                let std_internal = codegen_attrs.flags.contains(\n+                    CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n+                if reachable || is_extern || std_internal {\n                     self.reachable_symbols.insert(search_item);\n                 }\n             }"}, {"sha": "11e8c30760b8a4f08ed22d0089b50ae89c665ba0", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -236,15 +236,9 @@ impl<'a> AllocFnFactory<'a> {\n     }\n \n     fn attrs(&self) -> Vec<Attribute> {\n-        let no_mangle = Symbol::intern(\"no_mangle\");\n-        let no_mangle = self.cx.meta_word(self.span, no_mangle);\n-\n         let special = Symbol::intern(\"rustc_std_internal_symbol\");\n         let special = self.cx.meta_word(self.span, special);\n-        vec![\n-            self.cx.attribute(self.span, no_mangle),\n-            self.cx.attribute(self.span, special),\n-        ]\n+        vec![self.cx.attribute(self.span, special)]\n     }\n \n     fn arg_ty("}, {"sha": "4f5e76c24e379900c0662419425cd75e1d9270fd", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -99,9 +99,9 @@\n \n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::map as hir_map;\n+use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::ich::NodeIdHashingMode;\n-use rustc::middle::weak_lang_items;\n use rustc::ty::item_path::{self, ItemPathBuffer, RootMode};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n@@ -111,7 +111,6 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_mir::monomorphize::item::{InstantiationMode, MonoItem, MonoItemExt};\n use rustc_mir::monomorphize::Instance;\n \n-use syntax::attr;\n use syntax_pos::symbol::Symbol;\n \n use std::fmt::Write;\n@@ -260,7 +259,6 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n     }\n \n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n-    let attrs = tcx.get_attrs(def_id);\n     let is_foreign = if let Some(id) = node_id {\n         match tcx.hir.get(id) {\n             hir_map::NodeForeignItem(_) => true,\n@@ -270,24 +268,21 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n         tcx.is_foreign_item(def_id)\n     };\n \n-    if let Some(name) = weak_lang_items::link_name(&attrs) {\n-        return name.to_string();\n-    }\n-\n+    let attrs = tcx.codegen_fn_attrs(def_id);\n     if is_foreign {\n-        if let Some(name) = attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+        if let Some(name) = attrs.link_name {\n             return name.to_string();\n         }\n         // Don't mangle foreign items.\n         return tcx.item_name(def_id).to_string();\n     }\n \n-    if let Some(name) = tcx.codegen_fn_attrs(def_id).export_name {\n+    if let Some(name) = &attrs.export_name {\n         // Use provided name\n         return name.to_string();\n     }\n \n-    if attr::contains_name(&attrs, \"no_mangle\") {\n+    if attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE) {\n         // Don't mangle\n         return tcx.item_name(def_id).to_string();\n     }"}, {"sha": "52ed17f86d9c0a86a2673250beb3f5911e6f74cd", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -1023,7 +1023,6 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             MonoItemCollectionMode::Lazy => {\n                 self.entry_fn == Some(def_id) ||\n                 self.tcx.is_reachable_non_generic(def_id) ||\n-                self.tcx.is_weak_lang_item(def_id) ||\n                 self.tcx.codegen_fn_attrs(def_id).flags.contains(\n                     CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n             }"}, {"sha": "c480fa4124665763d516c763247c327b70b1b449", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -516,10 +516,8 @@ fn mono_item_visibility(\n         //   visibility below. Like the weak lang items, though, we can't let\n         //   LLVM internalize them as this decision is left up to the linker to\n         //   omit them, so prevent them from being internalized.\n-        let codegen_fn_attrs = tcx.codegen_fn_attrs(def_id);\n-        let std_internal_symbol = codegen_fn_attrs.flags\n-            .contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n-        if tcx.is_weak_lang_item(def_id) || std_internal_symbol {\n+        let attrs = tcx.codegen_fn_attrs(def_id);\n+        if attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL) {\n             *can_be_internalized = false;\n         }\n "}, {"sha": "79061c250f7d6590ed7abdcc3d0a9841bae57c6e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -29,6 +29,7 @@ use constrained_type_params as ctp;\n use lint;\n use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime as rl;\n+use middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n@@ -2281,6 +2282,8 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n                     codegen_fn_attrs.link_section = Some(val);\n                 }\n             }\n+        } else if attr.check_name(\"link_name\") {\n+            codegen_fn_attrs.link_name = attr.value_str();\n         }\n     }\n \n@@ -2300,5 +2303,25 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n         }\n     }\n \n+    // Weak lang items have the same semantics as \"std internal\" symbols in the\n+    // sense that they're preserved through all our LTO passes and only\n+    // strippable by the linker.\n+    //\n+    // Additionally weak lang items have predetermined symbol names.\n+    if tcx.is_weak_lang_item(id) {\n+        codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n+    }\n+    if let Some(name) = weak_lang_items::link_name(&attrs) {\n+        codegen_fn_attrs.export_name = Some(name);\n+        codegen_fn_attrs.link_name = Some(name);\n+    }\n+\n+    // Internal symbols to the standard library all have no_mangle semantics in\n+    // that they have defined symbol names present in the function name. This\n+    // also applies to weak symbols where they all have known symbol names.\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL) {\n+        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n+    }\n+\n     codegen_fn_attrs\n }"}, {"sha": "6753ed4a3df6d03d50287427d2aa4a485884d40e", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -150,23 +150,23 @@ pub mod __default_lib_allocator {\n     // linkage directives are provided as part of the current compiler allocator\n     // ABI\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_alloc(size: usize, align: usize) -> *mut u8 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n         System.alloc(layout)\n     }\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_dealloc(ptr: *mut u8,\n                                        size: usize,\n                                        align: usize) {\n         System.dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n     }\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_realloc(ptr: *mut u8,\n                                        old_size: usize,\n                                        align: usize,\n@@ -175,8 +175,8 @@ pub mod __default_lib_allocator {\n         System.realloc(ptr, old_layout, new_size)\n     }\n \n-    #[no_mangle]\n     #[rustc_std_internal_symbol]\n+    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_alloc_zeroed(size: usize, align: usize) -> *mut u8 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n         System.alloc_zeroed(layout)"}, {"sha": "773e32a031588b1b67363691be2036f9ce024ee4", "filename": "src/test/run-make/wasm-symbols-not-imported/Makefile", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -0,0 +1,16 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(TARGET),wasm32-unknown-unknown)\n+all:\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n+\t$(NODE) verify-no-imports.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -C lto\n+\t$(NODE) verify-no-imports.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -O\n+\t$(NODE) verify-no-imports.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -O -C lto\n+\t$(NODE) verify-no-imports.js $(TMPDIR)/foo.wasm\n+else\n+all:\n+endif\n+"}, {"sha": "156db486a47676f398148bf607f2637ffdb5ddc0", "filename": "src/test/run-make/wasm-symbols-not-imported/foo.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Ffoo.rs?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"cdylib\"]\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+#[no_mangle]\n+pub extern fn foo() {\n+    panic!()\n+}\n+\n+#[panic_implementation]\n+fn panic(_info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "28a98b5f2c25cd8fac728e6536671ff7bfb2ddba", "filename": "src/test/run-make/wasm-symbols-not-imported/verify-no-imports.js", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Fverify-no-imports.js", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Fverify-no-imports.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2Fverify-no-imports.js?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const fs = require('fs');\n+const process = require('process');\n+const assert = require('assert');\n+const buffer = fs.readFileSync(process.argv[2]);\n+\n+let m = new WebAssembly.Module(buffer);\n+let list = WebAssembly.Module.imports(m);\n+console.log('imports', list);\n+if (list.length !== 0)\n+  throw new Error(\"there are some imports\");"}, {"sha": "b141a2171646c82306e3c15002cf2f52b842226d", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a2282e1286823c06ee9c4fa5e49544fc4f47771/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=0a2282e1286823c06ee9c4fa5e49544fc4f47771", "patch": "@@ -8,6 +8,12 @@ LL | | }\n    |\n    = note: first defined in crate `std`.\n \n-error: aborting due to previous error\n+error: argument should be `&PanicInfo`\n+  --> $DIR/panic-handler-std.rs:18:16\n+   |\n+LL | fn panic(info: PanicInfo) -> ! {\n+   |                ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0152`."}]}