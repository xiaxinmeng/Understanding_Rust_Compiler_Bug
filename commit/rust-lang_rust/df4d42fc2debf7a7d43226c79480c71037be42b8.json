{"sha": "df4d42fc2debf7a7d43226c79480c71037be42b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNGQ0MmZjMmRlYmY3YTdkNDMyMjZjNzk0ODBjNzEwMzdiZTQyYjg=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-17T23:00:11Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-18T19:55:56Z"}, "message": "transmute: avoid suggesting from/to bits in const", "tree": {"sha": "7f417dc42b0a431e9bf72d12f06889f1a1ab5c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f417dc42b0a431e9bf72d12f06889f1a1ab5c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4d42fc2debf7a7d43226c79480c71037be42b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4d42fc2debf7a7d43226c79480c71037be42b8", "html_url": "https://github.com/rust-lang/rust/commit/df4d42fc2debf7a7d43226c79480c71037be42b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4d42fc2debf7a7d43226c79480c71037be42b8/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6220dff504b1ac1a949e34562db47fd058378f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6220dff504b1ac1a949e34562db47fd058378f5d", "html_url": "https://github.com/rust-lang/rust/commit/6220dff504b1ac1a949e34562db47fd058378f5d"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "1d238b242b058cd61fddf215393e874836348e29", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df4d42fc2debf7a7d43226c79480c71037be42b8/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4d42fc2debf7a7d43226c79480c71037be42b8/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=df4d42fc2debf7a7d43226c79480c71037be42b8", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_sugg,\n+    in_constant, is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_sugg,\n     span_lint_and_then, sugg,\n };\n use if_chain::if_chain;\n@@ -331,6 +331,10 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::TRANSMUTE);\n             then {\n+                // Avoid suggesting f32::(from|to)_bits in const contexts.\n+                // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`.\n+                let const_context = in_constant(cx, e.hir_id);\n+\n                 let from_ty = cx.typeck_results().expr_ty(&args[0]);\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n@@ -544,7 +548,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             },\n                         )\n                     },\n-                    (ty::Int(_) | ty::Uint(_), ty::Float(_)) => span_lint_and_then(\n+                    (ty::Int(_) | ty::Uint(_), ty::Float(_)) if !const_context => span_lint_and_then(\n                         cx,\n                         TRANSMUTE_INT_TO_FLOAT,\n                         e.span,\n@@ -567,7 +571,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             );\n                         },\n                     ),\n-                    (ty::Float(float_ty), ty::Int(_) | ty::Uint(_)) => span_lint_and_then(\n+                    (ty::Float(float_ty), ty::Int(_) | ty::Uint(_)) if !const_context => span_lint_and_then(\n                         cx,\n                         TRANSMUTE_FLOAT_TO_INT,\n                         e.span,"}, {"sha": "7caad34edb3a53d0ac01b9a2e838b7d374575237", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=df4d42fc2debf7a7d43226c79480c71037be42b8", "patch": "@@ -1,3 +1,4 @@\n+#![feature(const_fn_transmute)]\n #![allow(dead_code)]\n \n extern crate core;\n@@ -81,9 +82,17 @@ fn int_to_bool() {\n }\n \n #[warn(clippy::transmute_int_to_float)]\n-fn int_to_float() {\n-    let _: f32 = unsafe { std::mem::transmute(0_u32) };\n-    let _: f32 = unsafe { std::mem::transmute(0_i32) };\n+mod int_to_float {\n+    fn test() {\n+        let _: f32 = unsafe { std::mem::transmute(0_u32) };\n+        let _: f32 = unsafe { std::mem::transmute(0_i32) };\n+    }\n+\n+    // See issue #5747\n+    const VALUE: f32 = unsafe { std::mem::transmute(0_u32) };\n+    const fn from_bits(v: u32) -> f32 {\n+        unsafe { std::mem::transmute(v) }\n+    }\n }\n \n fn bytes_to_str(b: &[u8], mb: &mut [u8]) {"}, {"sha": "d817c08b52fe3a176f093cd14ec316df029b3f31", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=df4d42fc2debf7a7d43226c79480c71037be42b8", "patch": "@@ -1,143 +1,143 @@\n error: transmute from a type (`&T`) to itself\n-  --> $DIR/transmute.rs:19:20\n+  --> $DIR/transmute.rs:20:20\n    |\n LL |     let _: &'a T = core::intrinsics::transmute(t);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:23:23\n+  --> $DIR/transmute.rs:24:23\n    |\n LL |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:25:21\n+  --> $DIR/transmute.rs:26:21\n    |\n LL |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *mut T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:27:23\n+  --> $DIR/transmute.rs:28:23\n    |\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:33:27\n+  --> $DIR/transmute.rs:34:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:35:27\n+  --> $DIR/transmute.rs:36:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:37:27\n+  --> $DIR/transmute.rs:38:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:39:27\n+  --> $DIR/transmute.rs:40:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:41:27\n+  --> $DIR/transmute.rs:42:27\n    |\n LL |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:43:31\n+  --> $DIR/transmute.rs:44:31\n    |\n LL |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:47:31\n+  --> $DIR/transmute.rs:48:31\n    |\n LL |         let _: *const usize = std::mem::transmute(1 + 1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(1 + 1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:62:24\n+  --> $DIR/transmute.rs:63:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::crosspointer-transmute` implied by `-D warnings`\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:64:24\n+  --> $DIR/transmute.rs:65:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-  --> $DIR/transmute.rs:66:31\n+  --> $DIR/transmute.rs:67:31\n    |\n LL |         let _: *const Usize = core::intrinsics::transmute(my_int());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-  --> $DIR/transmute.rs:68:29\n+  --> $DIR/transmute.rs:69:29\n    |\n LL |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a `u32` to a `char`\n-  --> $DIR/transmute.rs:74:28\n+  --> $DIR/transmute.rs:75:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_u32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n    |\n    = note: `-D clippy::transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n-  --> $DIR/transmute.rs:75:28\n+  --> $DIR/transmute.rs:76:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:80:28\n+  --> $DIR/transmute.rs:81:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:85:27\n+  --> $DIR/transmute.rs:87:31\n    |\n-LL |     let _: f32 = unsafe { std::mem::transmute(0_u32) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n+LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:86:27\n+  --> $DIR/transmute.rs:88:31\n    |\n-LL |     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n+LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:90:28\n+  --> $DIR/transmute.rs:99:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:91:32\n+  --> $DIR/transmute.rs:100:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`"}, {"sha": "8173944d959103e5134d84bbaaebd9b726be372e", "filename": "tests/ui/transmute_float_to_int.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.rs?ref=df4d42fc2debf7a7d43226c79480c71037be42b8", "patch": "@@ -1,4 +1,5 @@\n-#[warn(clippy::transmute_float_to_int)]\n+#![feature(const_fn_transmute)]\n+#![warn(clippy::transmute_float_to_int)]\n \n fn float_to_int() {\n     let _: u32 = unsafe { std::mem::transmute(1f32) };\n@@ -9,4 +10,12 @@ fn float_to_int() {\n     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n }\n \n+mod issue_5747 {\n+    const VALUE: u32 = unsafe { std::mem::transmute(1f32) };\n+\n+    const fn to_bits(v: f32) -> u32 {\n+        unsafe { std::mem::transmute(v) }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "5a40cf381d6147ee464da4cdcbe0e72ab1e75721", "filename": "tests/ui/transmute_float_to_int.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute_float_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df4d42fc2debf7a7d43226c79480c71037be42b8/tests%2Fui%2Ftransmute_float_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.stderr?ref=df4d42fc2debf7a7d43226c79480c71037be42b8", "patch": "@@ -1,37 +1,37 @@\n error: transmute from a `f32` to a `u32`\n-  --> $DIR/transmute_float_to_int.rs:4:27\n+  --> $DIR/transmute_float_to_int.rs:5:27\n    |\n LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n    |\n    = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n \n error: transmute from a `f32` to a `i32`\n-  --> $DIR/transmute_float_to_int.rs:5:27\n+  --> $DIR/transmute_float_to_int.rs:6:27\n    |\n LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:6:27\n+  --> $DIR/transmute_float_to_int.rs:7:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n \n error: transmute from a `f64` to a `i64`\n-  --> $DIR/transmute_float_to_int.rs:7:27\n+  --> $DIR/transmute_float_to_int.rs:8:27\n    |\n LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:8:27\n+  --> $DIR/transmute_float_to_int.rs:9:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:9:27\n+  --> $DIR/transmute_float_to_int.rs:10:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`"}]}