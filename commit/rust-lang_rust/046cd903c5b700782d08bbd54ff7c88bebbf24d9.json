{"sha": "046cd903c5b700782d08bbd54ff7c88bebbf24d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NmNkOTAzYzViNzAwNzgyZDA4YmJkNTRmZjdjODhiZWJiZjI0ZDk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:22:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:22:52Z"}, "message": "typeck/expr.rs: extract out check_expr_loop.", "tree": {"sha": "37fc7a46580c14782808fda6e03723f3cfe9d8e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37fc7a46580c14782808fda6e03723f3cfe9d8e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046cd903c5b700782d08bbd54ff7c88bebbf24d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046cd903c5b700782d08bbd54ff7c88bebbf24d9", "html_url": "https://github.com/rust-lang/rust/commit/046cd903c5b700782d08bbd54ff7c88bebbf24d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046cd903c5b700782d08bbd54ff7c88bebbf24d9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "867ff1b00a801807c12b7a904e650eaddeadf64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/867ff1b00a801807c12b7a904e650eaddeadf64c", "html_url": "https://github.com/rust-lang/rust/commit/867ff1b00a801807c12b7a904e650eaddeadf64c"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "4911486a70d15b8bb3be544d867dedd1dd30806e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/046cd903c5b700782d08bbd54ff7c88bebbf24d9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046cd903c5b700782d08bbd54ff7c88bebbf24d9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=046cd903c5b700782d08bbd54ff7c88bebbf24d9", "patch": "@@ -96,44 +96,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_while(cond, body, expr)\n             }\n             ExprKind::Loop(ref body, _, source) => {\n-                let coerce = match source {\n-                    // you can only use break with a value from a normal `loop { }`\n-                    hir::LoopSource::Loop => {\n-                        let coerce_to = expected.coercion_target_type(self, body.span);\n-                        Some(CoerceMany::new(coerce_to))\n-                    }\n-\n-                    hir::LoopSource::WhileLet |\n-                    hir::LoopSource::ForLoop => {\n-                        None\n-                    }\n-                };\n-\n-                let ctxt = BreakableCtxt {\n-                    coerce,\n-                    may_break: false, // Will get updated if/when we find a `break`.\n-                };\n-\n-                let (ctxt, ()) = self.with_breakable_ctxt(expr.hir_id, ctxt, || {\n-                    self.check_block_no_value(&body);\n-                });\n-\n-                if ctxt.may_break {\n-                    // No way to know whether it's diverging because\n-                    // of a `break` or an outer `break` or `return`.\n-                    self.diverges.set(Diverges::Maybe);\n-                }\n-\n-                // If we permit break with a value, then result type is\n-                // the LUB of the breaks (possibly ! if none); else, it\n-                // is nil. This makes sense because infinite loops\n-                // (which would have type !) are only possible iff we\n-                // permit break with a value [1].\n-                if ctxt.coerce.is_none() && !ctxt.may_break {\n-                    // [1]\n-                    self.tcx.sess.delay_span_bug(body.span, \"no coercion, but loop may not break\");\n-                }\n-                ctxt.coerce.map(|c| c.complete(self)).unwrap_or_else(|| self.tcx.mk_unit())\n+                self.check_expr_loop(body, source, expected, expr)\n             }\n             ExprKind::Match(ref discrim, ref arms, match_src) => {\n                 self.check_match(expr, &discrim, arms, expected, match_src)\n@@ -796,4 +759,51 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.tcx.mk_unit()\n     }\n+\n+    fn check_expr_loop(\n+        &self,\n+        body: &'tcx hir::Block,\n+        source: hir::LoopSource,\n+        expected: Expectation<'tcx>,\n+        expr: &'tcx hir::Expr,\n+    ) -> Ty<'tcx> {\n+        let coerce = match source {\n+            // you can only use break with a value from a normal `loop { }`\n+            hir::LoopSource::Loop => {\n+                let coerce_to = expected.coercion_target_type(self, body.span);\n+                Some(CoerceMany::new(coerce_to))\n+            }\n+\n+            hir::LoopSource::WhileLet |\n+            hir::LoopSource::ForLoop => {\n+                None\n+            }\n+        };\n+\n+        let ctxt = BreakableCtxt {\n+            coerce,\n+            may_break: false, // Will get updated if/when we find a `break`.\n+        };\n+\n+        let (ctxt, ()) = self.with_breakable_ctxt(expr.hir_id, ctxt, || {\n+            self.check_block_no_value(&body);\n+        });\n+\n+        if ctxt.may_break {\n+            // No way to know whether it's diverging because\n+            // of a `break` or an outer `break` or `return`.\n+            self.diverges.set(Diverges::Maybe);\n+        }\n+\n+        // If we permit break with a value, then result type is\n+        // the LUB of the breaks (possibly ! if none); else, it\n+        // is nil. This makes sense because infinite loops\n+        // (which would have type !) are only possible iff we\n+        // permit break with a value [1].\n+        if ctxt.coerce.is_none() && !ctxt.may_break {\n+            // [1]\n+            self.tcx.sess.delay_span_bug(body.span, \"no coercion, but loop may not break\");\n+        }\n+        ctxt.coerce.map(|c| c.complete(self)).unwrap_or_else(|| self.tcx.mk_unit())\n+    }\n }"}]}