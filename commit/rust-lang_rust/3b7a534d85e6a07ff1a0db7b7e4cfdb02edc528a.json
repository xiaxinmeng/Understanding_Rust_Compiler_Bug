{"sha": "3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiN2E1MzRkODVlNmEwN2ZmMWEwZGI3YjdlNGNmZGIwMmVkYzUyOGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T22:51:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-10T22:51:13Z"}, "message": "Rollup merge of #39820 - jonasbb:export-attributes, r=nrc\n\nExport attributes in save-analysis data\n\nSince this is my first pull-request to rust, I would like to get some feedback about obvious errors in this implementation.\n\nI would like to change the save-analysis data to include arbitrary attribute data.\nA use-case I have in mind for this is identifying functions with `#[test]` annotations such that tools like rls can offer a test-runner feature. I described my idea here [rls#173](https://github.com/rust-lang-nursery/rls/issues/173).\n\nMy changes contain:\n\n1. track a vector of attributes in the various `*Data` types in `data.rs` and `external_data.rs`\n2. implement lowering for `Attribute` and `MetaItem`\n3. adjust `JsonDumper` to print the attributes\n\nIn the lowering of `Attribute` I remove the distinction between `MetaItem` and `NestedMetaItem`. I did this because this distinction is somewhat confusing. For example, `NestedMetaItemKind::Literal` has two identical spans, because both `NestedMetaItem` and `Lit` are defined as `Spanned<_>`.\nMy model is strictly more general, as it allows an `LitKind` instead of a `Symbol` for `MetaItem` and `Symbol`s are converted into a cooked string. As a consumer of the save-analysis data this shouldn't affect you much.\n\nExample json output of `#[test]` annotation:\n```\n\"attributes\": [\n  {\n    \"value\": {\n      \"name\": {\n        \"variant\": \"Str\",\n        \"fields\": [\n          \"test\",\n          \"Cooked\"\n        ]\n      },\n      \"kind\": \"Literal\",\n      \"span\": {\n        \"file_name\": \"test.rs\",\n        \"byte_start\": 2,\n        \"byte_end\": 6,\n        \"line_start\": 1,\n        \"line_end\": 1,\n        \"column_start\": 3,\n        \"column_end\": 7\n      }\n    },\n    \"span\": {\n      \"file_name\": \"test.rs\",\n      \"byte_start\": 0,\n      \"byte_end\": 7,\n      \"line_start\": 1,\n      \"line_end\": 1,\n      \"column_start\": 1,\n      \"column_end\": 8\n    }\n  }\n]\n```", "tree": {"sha": "8d4429abf76faed3777a903923ee4f4bd152642a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4429abf76faed3777a903923ee4f4bd152642a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "html_url": "https://github.com/rust-lang/rust/commit/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d335c0a09b099a8737e64b043609297457d91db6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d335c0a09b099a8737e64b043609297457d91db6", "html_url": "https://github.com/rust-lang/rust/commit/d335c0a09b099a8737e64b043609297457d91db6"}, {"sha": "db35604792fb64efa0a3deaebc0ea0842e19c67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/db35604792fb64efa0a3deaebc0ea0842e19c67a", "html_url": "https://github.com/rust-lang/rust/commit/db35604792fb64efa0a3deaebc0ea0842e19c67a"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "6caf81380e40dad51f8c33c1d90a51c7dd5f7065", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "patch": "@@ -15,7 +15,7 @@\n \n use rustc::hir;\n use rustc::hir::def_id::{CrateNum, DefId};\n-use syntax::ast::{self, NodeId};\n+use syntax::ast::{self, Attribute, NodeId};\n use syntax_pos::Span;\n \n pub struct CrateData {\n@@ -136,6 +136,7 @@ pub struct EnumData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for extern crates.\n@@ -171,6 +172,7 @@ pub struct FunctionData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data about a function call.\n@@ -256,6 +258,7 @@ pub struct MethodData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for modules.\n@@ -271,6 +274,7 @@ pub struct ModData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a reference to a module.\n@@ -295,6 +299,7 @@ pub struct StructData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -309,6 +314,7 @@ pub struct StructVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -323,6 +329,7 @@ pub struct TraitData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -337,6 +344,7 @@ pub struct TupleVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a typedef.\n@@ -351,6 +359,7 @@ pub struct TypeDefData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a reference to a type or trait.\n@@ -396,6 +405,7 @@ pub struct VariableData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]"}, {"sha": "cbb1a3e5023638d0c60217e60d9c182dd93ada8e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "patch": "@@ -373,6 +373,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         visibility: Visibility::Inherited,\n                         docs: String::new(),\n                         sig: None,\n+                        attributes: vec![],\n                     }.lower(self.tcx));\n                 }\n             }\n@@ -448,6 +449,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: vis,\n                     docs: docs_for_attrs(attrs),\n                     sig: method_data.sig,\n+                    attributes: attrs.to_vec(),\n                 }.lower(self.tcx));\n             }\n \n@@ -519,6 +521,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     parent: None,\n                     docs: String::new(),\n                     sig: None,\n+                    attributes: vec![],\n                 }.lower(self.tcx));\n             }\n         }\n@@ -592,6 +595,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: vis,\n                 docs: docs_for_attrs(attrs),\n                 sig: None,\n+                attributes: attrs.to_vec(),\n             }.lower(self.tcx));\n         }\n \n@@ -636,6 +640,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n+                attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n \n@@ -701,6 +706,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n+                            attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -727,6 +733,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n+                            attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -798,6 +805,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n+                attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n \n@@ -1064,6 +1072,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: Visibility::Inherited,\n                     docs: String::new(),\n                     sig: None,\n+                    attributes: vec![],\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1305,6 +1314,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         parent: None,\n                         docs: docs_for_attrs(&item.attrs),\n                         sig: Some(self.save_ctxt.sig_base(item)),\n+                        attributes: item.attrs.clone(),\n                     }.lower(self.tcx));\n                 }\n \n@@ -1527,6 +1537,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                             visibility: Visibility::Inherited,\n                             docs: String::new(),\n                             sig: None,\n+                            attributes: vec![],\n                         }.lower(self.tcx));\n                     }\n                 }"}, {"sha": "41658dc5b1b48b043b9faf344768803a1db2b52b", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "patch": "@@ -11,8 +11,10 @@\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n-use syntax::ast::NodeId;\n+use syntax::ast::{self, NodeId};\n use syntax::codemap::CodeMap;\n+use syntax::print::pprust;\n+use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n use data::{self, Visibility, SigElement};\n@@ -64,6 +66,39 @@ impl SpanData {\n     }\n }\n \n+/// Represent an arbitrary attribute on a code element\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct Attribute {\n+    value: String,\n+    span: SpanData,\n+}\n+\n+impl Lower for Vec<ast::Attribute> {\n+    type Target = Vec<Attribute>;\n+\n+    fn lower(self, tcx: TyCtxt) -> Vec<Attribute> {\n+        let doc = Symbol::intern(\"doc\");\n+        self.into_iter()\n+        // Only retain real attributes. Doc comments are lowered separately.\n+        .filter(|attr| attr.name() != doc)\n+        .map(|mut attr| {\n+            // Remove the surrounding '#[..]' or '#![..]' of the pretty printed\n+            // attribute. First normalize all inner attribute (#![..]) to outer\n+            // ones (#[..]), then remove the two leading and the one trailing character.\n+            attr.style = ast::AttrStyle::Outer;\n+            let value = pprust::attribute_to_string(&attr);\n+            // This str slicing works correctly, because the leading and trailing characters\n+            // are in the ASCII range and thus exactly one byte each.\n+            let value = value[2..value.len()-1].to_string();\n+\n+            Attribute {\n+                value: value,\n+                span: SpanData::from_span(attr.span, tcx.sess.codemap()),\n+            }\n+        }).collect()\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable)]\n pub struct CratePreludeData {\n     pub crate_name: String,\n@@ -98,6 +133,7 @@ pub struct EnumData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::EnumData {\n@@ -115,6 +151,7 @@ impl Lower for data::EnumData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -179,6 +216,7 @@ pub struct FunctionData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::FunctionData {\n@@ -197,6 +235,7 @@ impl Lower for data::FunctionData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -346,6 +385,7 @@ pub struct MethodData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::MethodData {\n@@ -364,6 +404,7 @@ impl Lower for data::MethodData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -381,6 +422,7 @@ pub struct ModData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::ModData {\n@@ -398,6 +440,7 @@ impl Lower for data::ModData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -437,6 +480,7 @@ pub struct StructData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::StructData {\n@@ -455,6 +499,7 @@ impl Lower for data::StructData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -471,6 +516,7 @@ pub struct StructVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::StructVariantData {\n@@ -488,6 +534,7 @@ impl Lower for data::StructVariantData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -504,6 +551,7 @@ pub struct TraitData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TraitData {\n@@ -521,6 +569,7 @@ impl Lower for data::TraitData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -537,6 +586,7 @@ pub struct TupleVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -554,6 +604,7 @@ impl Lower for data::TupleVariantData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -570,6 +621,7 @@ pub struct TypeDefData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TypeDefData {\n@@ -586,6 +638,7 @@ impl Lower for data::TypeDefData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.map(|s| s.lower(tcx)),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -675,6 +728,7 @@ pub struct VariableData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::VariableData {\n@@ -694,6 +748,7 @@ impl Lower for data::VariableData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.map(|s| s.lower(tcx)),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }"}, {"sha": "1b72489f83c67da2d611710b757001966994c3f5", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "patch": "@@ -87,6 +87,7 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         };\n         if def.span.file_name != def.value {\n             // If the module is an out-of-line defintion, then we'll make the\n@@ -232,6 +233,7 @@ struct Def {\n     decl_id: Option<Id>,\n     docs: String,\n     sig: Option<JsonSignature>,\n+    attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -274,6 +276,7 @@ impl From<EnumData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -291,6 +294,7 @@ impl From<TupleVariantData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -307,6 +311,7 @@ impl From<StructVariantData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -323,6 +328,7 @@ impl From<StructData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -339,6 +345,7 @@ impl From<TraitData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -355,6 +362,7 @@ impl From<FunctionData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -371,6 +379,7 @@ impl From<MethodData> for Def {\n             decl_id: data.decl_id.map(|id| From::from(id)),\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -387,6 +396,7 @@ impl From<MacroData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: None,\n+            attributes: vec![],\n         }\n     }\n }\n@@ -403,6 +413,7 @@ impl From<TypeDefData> for Def {\n             decl_id: None,\n             docs: String::new(),\n             sig: data.sig.map(|s| From::from(s)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -424,6 +435,7 @@ impl From<VariableData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: None,\n+            attributes: data.attributes,\n         }\n     }\n }"}, {"sha": "2153b30b62cd52d9e4bcb201ca1e6ab758d2567f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3b7a534d85e6a07ff1a0db7b7e4cfdb02edc528a", "patch": "@@ -136,6 +136,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -164,6 +165,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -183,6 +185,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -205,6 +208,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -228,6 +232,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n@@ -315,6 +320,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 visibility: From::from(&field.vis),\n                 docs: docs_for_attrs(&field.attrs),\n                 sig: Some(sig),\n+                attributes: field.attrs.clone(),\n             })\n         } else {\n             None\n@@ -327,7 +333,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                            name: ast::Name, span: Span) -> Option<FunctionData> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n-        let (qualname, parent_scope, decl_id, vis, docs) =\n+        let (qualname, parent_scope, decl_id, vis, docs, attributes) =\n           match self.tcx.impl_of_method(self.tcx.hir.local_def_id(id)) {\n             Some(impl_id) => match self.tcx.hir.get_if_local(impl_id) {\n                 Some(Node::NodeItem(item)) => {\n@@ -349,7 +355,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                             (result, trait_id, decl_id,\n                              From::from(&item.vis),\n-                             docs_for_attrs(&item.attrs))\n+                             docs_for_attrs(&item.attrs),\n+                             item.attrs.to_vec())\n                         }\n                         _ => {\n                             span_bug!(span,\n@@ -374,7 +381,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             (format!(\"::{}\", self.tcx.item_path_str(def_id)),\n                              Some(def_id), None,\n                              From::from(&item.vis),\n-                             docs_for_attrs(&item.attrs))\n+                             docs_for_attrs(&item.attrs),\n+                             item.attrs.to_vec())\n                         }\n                         r => {\n                             span_bug!(span,\n@@ -423,6 +431,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             parent: parent_scope,\n             docs: docs,\n             sig: sig,\n+            attributes: attributes,\n         })\n     }\n "}]}