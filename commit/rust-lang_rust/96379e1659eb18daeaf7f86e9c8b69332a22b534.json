{"sha": "96379e1659eb18daeaf7f86e9c8b69332a22b534", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Mzc5ZTE2NTllYjE4ZGFlYWY3Zjg2ZTljOGI2OTMzMmEyMmI1MzQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-26T19:24:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Refactor mod/check (part iii)", "tree": {"sha": "093b87aef351144570dec735c50b0481937e027e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/093b87aef351144570dec735c50b0481937e027e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96379e1659eb18daeaf7f86e9c8b69332a22b534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96379e1659eb18daeaf7f86e9c8b69332a22b534", "html_url": "https://github.com/rust-lang/rust/commit/96379e1659eb18daeaf7f86e9c8b69332a22b534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96379e1659eb18daeaf7f86e9c8b69332a22b534/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe9aeb40234a92fc02f07dfa76c3dbe570efd45", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe9aeb40234a92fc02f07dfa76c3dbe570efd45", "html_url": "https://github.com/rust-lang/rust/commit/5fe9aeb40234a92fc02f07dfa76c3dbe570efd45"}], "stats": {"total": 85, "additions": 36, "deletions": 49}, "files": [{"sha": "98ec101c274996e793dabae314c2157ba301cbd8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 36, "deletions": 49, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/96379e1659eb18daeaf7f86e9c8b69332a22b534/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96379e1659eb18daeaf7f86e9c8b69332a22b534/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=96379e1659eb18daeaf7f86e9c8b69332a22b534", "patch": "@@ -5001,7 +5001,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // FIXME(varkor): Separating out the parameters is messy.\n         let mut lifetimes_type_seg = vec![];\n         let mut types_type_seg = vec![];\n-        let mut infer_types_type_seg = true;\n+        let mut _infer_types_type_seg = true;\n         if let Some((seg, _)) = type_segment {\n             if let Some(ref data) = seg.args {\n                 for (i, arg) in data.args.iter().enumerate() {\n@@ -5011,12 +5011,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            infer_types_type_seg = seg.infer_types;\n+            _infer_types_type_seg = seg.infer_types;\n         }\n \n         let mut lifetimes_fn_seg = vec![];\n         let mut types_fn_seg = vec![];\n-        let mut infer_types_fn_seg = true;\n+        let mut _infer_types_fn_seg = true;\n         if let Some((seg, _)) = fn_segment {\n             if let Some(ref data) = seg.args {\n                 for (i, arg) in data.args.iter().enumerate() {\n@@ -5026,7 +5026,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            infer_types_fn_seg = seg.infer_types;\n+            _infer_types_fn_seg = seg.infer_types;\n         }\n \n         let defs = self.tcx.generics_of(def.def_id());\n@@ -5045,74 +5045,61 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         while let Some(def_id) = stack.pop() {\n             let defs = self.tcx.generics_of(def_id);\n             Substs::fill_single(&mut substs, defs, &mut |param: &ty::GenericParamDef, substs| {\n-                let mut i = param.index as usize;\n-\n-                let (lifetimes, types, infer_types) = if i < fn_start {\n+                let lifetimes = if (param.index as usize) < fn_start {\n                     if let GenericParamDefKind::Type { .. } = param.kind {\n                         // Handle Self first, so we can adjust the index to match the AST.\n-                        if has_self && i == 0 {\n+                        if has_self && param.index == 0 {\n                             return opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n                                 self.var_for_def(span, param)\n                             });\n                         }\n                     }\n-                    i -= has_self as usize;\n-                    (&lifetimes_type_seg, &types_type_seg, infer_types_type_seg)\n+                    &lifetimes_type_seg\n                 } else {\n-                    i -= fn_start;\n-                    (&lifetimes_fn_seg, &types_fn_seg, infer_types_fn_seg)\n+                    &lifetimes_fn_seg\n                 };\n \n                 let mut pi = param.index as usize - has_self as usize;\n \n-                let segment = if let Some(&PathSeg(_, ind)) = path_segs.iter().find(|&PathSeg(di, _)| *di == def_id) {\n+                let (_segment, infer_types) = if let Some(&PathSeg(_, ind)) = path_segs.iter().find(|&PathSeg(di, _)| *di == def_id) {\n                     let seg = &segments[ind];\n                     if lifetimes.len() == 0 {\n                         pi -= defs.own_counts().lifetimes;\n                     }\n \n-                    Some((seg, defs))\n+                    if let Some(ref data) = seg.args {\n+                        if let Some(arg) = data.args.get(pi) {\n+                            return match param.kind {\n+                                GenericParamDefKind::Lifetime => {\n+                                    let lt = match arg {\n+                                        GenericArg::Lifetime(lt) => lt,\n+                                        _ => bug!(\"should be a lifetime\"),\n+                                    };\n+                                    AstConv::ast_region_to_region(self, lt, Some(param)).into()\n+                                }\n+                                GenericParamDefKind::Type { .. } => {\n+                                    // A provided type parameter.\n+                                    let ty = match arg {\n+                                        GenericArg::Type(ty) => ty,\n+                                        _ => bug!(\"should be a type\"),\n+                                    };\n+                                    self.to_ty(ty).into()\n+                                }\n+                            };\n+                        }\n+                    }\n+\n+                    (Some((seg, defs)), seg.infer_types)\n                 } else {\n-                    None\n+                    (None, true)\n                 };\n \n-                // eprintln!(\"{:?} {:?} {:?}\", param.index, i, segment);\n-\n-\n-\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n-                        if let Some((z, lt)) = lifetimes.get(i) {\n-                            eprintln!(\"lifetime {:?} {:?} {:?}\", pi, z, has_self);\n-                            if pi != *z {\n-                                eprintln!(\"error {:?} {:?} {:?} {:?} {:?} {:?}\", pi, z, i, segment, fn_start, has_self);\n-                                bug!(\"uh oh\")\n-                            }\n-                            AstConv::ast_region_to_region(self, lt, Some(param)).into()\n-                        } else {\n-                            self.re_infer(span, Some(param)).unwrap().into()\n-                        }\n+                        self.re_infer(span, Some(param)).unwrap().into()\n                     }\n-                    GenericParamDefKind::Type { .. } => {\n-                        // Skip over the lifetimes in the same segment.\n-                        if let Some((_, generics)) = segment {\n-                            i -= generics.own_counts().lifetimes;\n-                        }\n-\n-                        let has_default = match param.kind {\n-                            GenericParamDefKind::Type { has_default, .. } => has_default,\n-                            _ => unreachable!()\n-                        };\n-\n-                        if let Some((z, ty)) = types.get(i) {\n-                            eprintln!(\"type {:?} {:?} {:?}\", pi, z, has_self);\n-                            if pi != *z {\n-                                eprintln!(\"error {:?} {:?} {:?} {:?} {:?} {:?}\", pi, z, i, segment, fn_start, has_self);\n-                                bug!(\"uh oh\")\n-                            }\n-                            // A provided type parameter.\n-                            self.to_ty(ty).into()\n-                        } else if !infer_types && has_default {\n+                    GenericParamDefKind::Type { has_default, .. } => {\n+                        if !infer_types && has_default {\n                             // No type parameter provided, but a default exists.\n                             let default = self.tcx.type_of(param.def_id);\n                             self.normalize_ty("}]}