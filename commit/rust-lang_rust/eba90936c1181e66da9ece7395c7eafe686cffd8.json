{"sha": "eba90936c1181e66da9ece7395c7eafe686cffd8", "node_id": "C_kwDOAAsO6NoAKGViYTkwOTM2YzExODFlNjZkYTllY2U3Mzk1YzdlYWZlNjg2Y2ZmZDg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T22:52:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T22:52:26Z"}, "message": "Move ide crates to new hir::Macro", "tree": {"sha": "fc95b6698bad12d2e3d566bbe41baf1ad0017edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc95b6698bad12d2e3d566bbe41baf1ad0017edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba90936c1181e66da9ece7395c7eafe686cffd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba90936c1181e66da9ece7395c7eafe686cffd8", "html_url": "https://github.com/rust-lang/rust/commit/eba90936c1181e66da9ece7395c7eafe686cffd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba90936c1181e66da9ece7395c7eafe686cffd8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04b0f435b4d2b29147bcfc33cdd42639e68fc00", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04b0f435b4d2b29147bcfc33cdd42639e68fc00", "html_url": "https://github.com/rust-lang/rust/commit/c04b0f435b4d2b29147bcfc33cdd42639e68fc00"}], "stats": {"total": 128, "additions": 61, "deletions": 67}, "files": [{"sha": "3098198517556316a1425c4da4e51f5d18e35a6f", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -180,7 +180,7 @@ impl<'a> DeclValidator<'a> {\n                 AttrDefId::ImplId(iid) => Some(iid.lookup(self.db.upcast()).container.into()),\n                 AttrDefId::ExternBlockId(id) => Some(id.lookup(self.db.upcast()).container.into()),\n                 // These warnings should not explore macro definitions at all\n-                AttrDefId::MacroDefId(_) => None,\n+                AttrDefId::MacroId(_) => None,\n                 AttrDefId::AdtId(aid) => match aid {\n                     AdtId::StructId(sid) => Some(sid.lookup(self.db.upcast()).container.into()),\n                     AdtId::EnumId(eid) => Some(eid.lookup(self.db.upcast()).container.into()),"}, {"sha": "d27cdd51e4c652aef6a39020f007ce188c31f201", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -5,7 +5,6 @@ mod tests;\n \n mod intra_doc_links;\n \n-use either::Either;\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n use pulldown_cmark_to_cmark::{cmark_resume_with_options, Options as CMarkOptions};\n use stdx::format_to;\n@@ -173,7 +172,7 @@ pub(crate) fn resolve_doc_path_for_def(\n     link: &str,\n     ns: Option<hir::Namespace>,\n ) -> Option<Definition> {\n-    let def = match def {\n+    match def {\n         Definition::Module(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Function(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Adt(it) => it.resolve_doc_path(db, link, ns),\n@@ -191,11 +190,8 @@ pub(crate) fn resolve_doc_path_for_def(\n         | Definition::Local(_)\n         | Definition::GenericParam(_)\n         | Definition::Label(_) => None,\n-    }?;\n-    match def {\n-        Either::Left(def) => Some(Definition::from(def)),\n-        Either::Right(def) => Some(Definition::Macro(def)),\n     }\n+    .map(Definition::from)\n }\n \n pub(crate) fn doc_attributes("}, {"sha": "55bb10d5e86df9cc8edd46324cb6491ae62612ee", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -211,6 +211,7 @@ impl TryToNav for hir::ModuleDef {\n             hir::ModuleDef::Static(it) => it.try_to_nav(db),\n             hir::ModuleDef::Trait(it) => it.try_to_nav(db),\n             hir::ModuleDef::TypeAlias(it) => it.try_to_nav(db),\n+            hir::ModuleDef::Macro(it) => it.try_to_nav(db),\n             hir::ModuleDef::BuiltinType(_) => None,\n         }\n     }\n@@ -332,7 +333,7 @@ impl TryToNav for hir::Field {\n     }\n }\n \n-impl TryToNav for hir::MacroDef {\n+impl TryToNav for hir::Macro {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let src = self.source(db)?;\n         let name_owner: &dyn ast::HasName = match &src.value {\n@@ -343,7 +344,7 @@ impl TryToNav for hir::MacroDef {\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().with_value(name_owner),\n-            self.kind().into(),\n+            self.kind(db).into(),\n         );\n         res.docs = self.docs(db);\n         Some(res)"}, {"sha": "488566efcd4b2d70fa05f6577e8b8129500049a6", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -320,7 +320,7 @@ fn highlight_def(\n ) -> Highlight {\n     let db = sema.db;\n     let mut h = match def {\n-        Definition::Macro(m) => Highlight::new(HlTag::Symbol(m.kind().into())),\n+        Definition::Macro(m) => Highlight::new(HlTag::Symbol(m.kind(sema.db).into())),\n         Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::Module(module) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));"}, {"sha": "135f2a70b745f87de06d6b7c3bb8fe3b266706b3", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -130,9 +130,6 @@ impl Ref {\n             ScopeDef::ModuleDef(def) => {\n                 Some(Ref { visible_name: name, def: Definition::from(def) })\n             }\n-            ScopeDef::MacroDef(def) => {\n-                Some(Ref { visible_name: name, def: Definition::Macro(def) })\n-            }\n             _ => None,\n         }\n     }"}, {"sha": "bbb5cf91874cf375d26fdf46ab0548d53aecc391", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -199,6 +199,8 @@ fn target_data_for_def(\n             let syntax = in_file_source.value.syntax();\n             (vis_offset(syntax), in_file_source.value.visibility(), syntax.text_range(), file_id)\n         }\n+        // FIXME\n+        hir::ModuleDef::Macro(_) => return None,\n         // Enum variants can't be private, we can't modify builtin types\n         hir::ModuleDef::Variant(_) | hir::ModuleDef::BuiltinType(_) => return None,\n     };"}, {"sha": "b23b5bf87cbdb371f4054be5318c804fbee58d3a", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -44,7 +44,6 @@ pub(crate) fn replace_qualified_name_with_use(\n     // only offer replacement for non assoc items\n     match ctx.sema.resolve_path(&path)? {\n         hir::PathResolution::Def(def) if def.as_assoc_item(ctx.sema.db).is_none() => (),\n-        hir::PathResolution::Macro(_) => (),\n         _ => return None,\n     }\n     // then search for an import for the first path segment of what we want to replace"}, {"sha": "380cfe95ddff616ebacdcff45de3e76ac8711f22", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -21,7 +21,7 @@ pub(crate) mod vis;\n \n use std::iter;\n \n-use hir::{known, ScopeDef};\n+use hir::{db::HirDatabase, known, ScopeDef};\n use ide_db::SymbolKind;\n \n use crate::{\n@@ -40,17 +40,17 @@ use crate::{\n     CompletionContext, CompletionItem, CompletionItemKind,\n };\n \n-fn module_or_attr(def: ScopeDef) -> Option<ScopeDef> {\n+fn module_or_attr(db: &dyn HirDatabase, def: ScopeDef) -> Option<ScopeDef> {\n     match def {\n-        ScopeDef::MacroDef(mac) if mac.is_attr() => Some(def),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_attr(db) => Some(def),\n         ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n         _ => None,\n     }\n }\n \n-fn module_or_fn_macro(def: ScopeDef) -> Option<ScopeDef> {\n+fn module_or_fn_macro(db: &dyn HirDatabase, def: ScopeDef) -> Option<ScopeDef> {\n     match def {\n-        ScopeDef::MacroDef(mac) if mac.is_fn_like() => Some(def),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_fn_like(db) => Some(def),\n         ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n         _ => None,\n     }"}, {"sha": "3c5dd8f3fd345a0e77e947c6f0292be8d8bc0c2f", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             };\n \n             for (name, def) in module.scope(ctx.db, ctx.module) {\n-                if let Some(def) = module_or_attr(def) {\n+                if let Some(def) = module_or_attr(ctx.db, def) {\n                     acc.add_resolution(ctx, name, def);\n                 }\n             }\n@@ -104,7 +104,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n         // only show modules in a fresh UseTree\n         None => {\n             ctx.process_all_names(&mut |name, def| {\n-                if let Some(def) = module_or_attr(def) {\n+                if let Some(def) = module_or_attr(ctx.db, def) {\n                     acc.add_resolution(ctx, name, def);\n                 }\n             });"}, {"sha": "8bbe6ac3856e1e7aa19c1e897a3b696a45235009", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -1,5 +1,5 @@\n //! Completion for derives\n-use hir::{HasAttrs, MacroDef, MacroKind};\n+use hir::{HasAttrs, Macro, MacroKind};\n use ide_db::{\n     imports::{import_assets::ImportAssets, insert_use::ImportScope},\n     SymbolKind,\n@@ -24,9 +24,9 @@ pub(super) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, at\n         }\n \n         let name = name.to_smol_str();\n-        let (label, lookup) = match core.zip(mac.module(ctx.db).map(|it| it.krate())) {\n+        let (label, lookup) = match (core, mac.module(ctx.db).krate()) {\n             // show derive dependencies for `core`/`std` derives\n-            Some((core, mac_krate)) if core == mac_krate => {\n+            (Some(core), mac_krate) if core == mac_krate => {\n                 if let Some(derive_completion) = DEFAULT_DERIVE_DEPENDENCIES\n                     .iter()\n                     .find(|derive_completion| derive_completion.label == name)\n@@ -63,11 +63,11 @@ pub(super) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, at\n     flyimport_derive(acc, ctx);\n }\n \n-fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n+fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, Macro)> {\n     let mut result = Vec::default();\n     ctx.process_all_names(&mut |name, scope_def| {\n-        if let hir::ScopeDef::MacroDef(mac) = scope_def {\n-            if mac.kind() == hir::MacroKind::Derive {\n+        if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) = scope_def {\n+            if mac.kind(ctx.db) == hir::MacroKind::Derive {\n                 result.push((name, mac));\n             }\n         }\n@@ -99,7 +99,7 @@ fn flyimport_derive(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n                 hir::ItemInNs::Macros(mac) => Some((import, mac)),\n                 _ => None,\n             })\n-            .filter(|&(_, mac)| mac.kind() == MacroKind::Derive)\n+            .filter(|&(_, mac)| mac.kind(ctx.db) == MacroKind::Derive)\n             .filter(|&(_, mac)| !ctx.is_item_hidden(&hir::ItemInNs::Macros(mac)))\n             .sorted_by_key(|(import, _)| {\n                 compute_fuzzy_completion_order_key(&import.import_path, &user_input_lowercased)"}, {"sha": "b4cfc3273bdab20498d8c84145092a02a8bcfbe3", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -146,7 +146,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             Some(kind) => kind,\n             None => {\n                 return match import.original_item {\n-                    ItemInNs::Macros(mac) => mac.is_fn_like(),\n+                    ItemInNs::Macros(mac) => mac.is_fn_like(ctx.db),\n                     _ => true,\n                 }\n             }\n@@ -160,7 +160,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (\n                 PathKind::Expr | PathKind::Type | PathKind::Mac | PathKind::Pat,\n                 ItemInNs::Macros(mac),\n-            ) => mac.is_fn_like(),\n+            ) => mac.is_fn_like(ctx.db),\n             (PathKind::Mac, _) => true,\n \n             (PathKind::Expr, ItemInNs::Types(_) | ItemInNs::Values(_)) => true,\n@@ -171,7 +171,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (PathKind::Type, ItemInNs::Types(_)) => true,\n             (PathKind::Type, ItemInNs::Values(_)) => false,\n \n-            (PathKind::Attr { .. }, ItemInNs::Macros(mac)) => mac.is_attr(),\n+            (PathKind::Attr { .. }, ItemInNs::Macros(mac)) => mac.is_attr(ctx.db),\n             (PathKind::Attr { .. }, _) => false,\n         }\n     };"}, {"sha": "958c892b8d42373324d16b15c5788a4fbf9fea79", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -77,9 +77,9 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Enum(e)) => refutable || single_variant_enum(e),\n                 hir::ModuleDef::Const(..) | hir::ModuleDef::Module(..) => refutable,\n+                hir::ModuleDef::Macro(mac) => mac.is_fn_like(ctx.db),\n                 _ => false,\n             },\n-            hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n             hir::ScopeDef::ImplSelfType(impl_) => match impl_.self_ty(ctx.db).as_adt() {\n                 Some(hir::Adt::Struct(strukt)) => {\n                     acc.add_struct_pat(ctx, strukt, Some(name.clone()));\n@@ -117,7 +117,9 @@ fn pattern_path_completion(\n                     let module_scope = module.scope(ctx.db, ctx.module);\n                     for (name, def) in module_scope {\n                         let add_resolution = match def {\n-                            ScopeDef::MacroDef(m) if m.is_fn_like() => true,\n+                            ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) => {\n+                                mac.is_fn_like(ctx.db)\n+                            }\n                             ScopeDef::ModuleDef(_) => true,\n                             _ => false,\n                         };"}, {"sha": "c4ba77b3f7dad6f4c940cbd2aee65f3b045aefc0", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n                 for (name, def) in module.scope(ctx.db, ctx.module) {\n-                    if let Some(def) = module_or_fn_macro(def) {\n+                    if let Some(def) = module_or_fn_macro(ctx.db, def) {\n                         acc.add_resolution(ctx, name, def);\n                     }\n                 }\n@@ -81,7 +81,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             for (name, def) in module_scope {\n                 let add_resolution = match def {\n                     // Don't suggest attribute macros and derives.\n-                    ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) => mac.is_fn_like(ctx.db),\n                     // no values in type places\n                     ScopeDef::ModuleDef(\n                         hir::ModuleDef::Function(_)"}, {"sha": "ddd068488aa5847a7327a28f4a2dfa50c0815a69", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n             // only show macros in {Assoc}ItemList\n             ctx.process_all_names(&mut |name, def| {\n-                if let Some(def) = module_or_fn_macro(def) {\n+                if let Some(def) = module_or_fn_macro(ctx.db, def) {\n                     acc.add_resolution(ctx, name, def);\n                 }\n             });\n@@ -45,7 +45,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         Some(ImmediateLocation::TypeBound) => {\n             ctx.process_all_names(&mut |name, res| {\n                 let add_resolution = match res {\n-                    ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) => mac.is_fn_like(ctx.db),\n                     ScopeDef::ModuleDef(hir::ModuleDef::Trait(_) | hir::ModuleDef::Module(_)) => {\n                         true\n                     }\n@@ -94,7 +94,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n                 !ctx.previous_token_is(syntax::T![impl]) && !ctx.previous_token_is(syntax::T![for])\n             }\n             // Don't suggest attribute macros and derives.\n-            ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+            ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) => mac.is_fn_like(ctx.db),\n             // no values in type places\n             ScopeDef::ModuleDef(\n                 hir::ModuleDef::Function(_)"}, {"sha": "16b356963d9203a18f3f6eb67b871de913d99cb1", "filename": "crates/ide_completion/src/completions/use_.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -56,9 +56,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                                 cov_mark::hit!(dont_complete_current_use);\n                                 continue;\n                             }\n-                            ScopeDef::ModuleDef(_) | ScopeDef::MacroDef(_) | ScopeDef::Unknown => {\n-                                true\n-                            }\n+                            ScopeDef::ModuleDef(_) | ScopeDef::Unknown => true,\n                             _ => false,\n                         };\n "}, {"sha": "e7a5426a26b13e7dc499d578510ba89e86329939", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -171,7 +171,9 @@ fn render_resolution_(\n         ScopeDef::ModuleDef(Variant(var)) if ctx.completion.pattern_ctx.is_none() => {\n             return render_variant(ctx, import_to_add, Some(local_name), var, None);\n         }\n-        ScopeDef::MacroDef(mac) => return render_macro(ctx, import_to_add, local_name, mac),\n+        ScopeDef::ModuleDef(Macro(mac)) => {\n+            return render_macro(ctx, import_to_add, local_name, mac)\n+        }\n         ScopeDef::Unknown => {\n             let mut item = CompletionItem::new(\n                 CompletionItemKind::UnresolvedReference,\n@@ -274,7 +276,6 @@ fn scope_def_docs(db: &RootDatabase, resolution: ScopeDef) -> Option<hir::Docume\n fn scope_def_is_deprecated(ctx: &RenderContext<'_>, resolution: ScopeDef) -> bool {\n     match resolution {\n         ScopeDef::ModuleDef(it) => ctx.is_deprecated_assoc_item(it),\n-        ScopeDef::MacroDef(it) => ctx.is_deprecated(it),\n         ScopeDef::GenericParam(it) => ctx.is_deprecated(it),\n         ScopeDef::AdtSelfType(it) => ctx.is_deprecated(it),\n         _ => false,"}, {"sha": "6fdb622be7ecaf03044b94fed56efb3ef4f22bae", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -18,7 +18,7 @@ pub(crate) fn render_macro(\n     ctx: RenderContext<'_>,\n     import_to_add: Option<ImportEdit>,\n     name: hir::Name,\n-    macro_: hir::MacroDef,\n+    macro_: hir::Macro,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_macro\");\n     render(ctx, name, macro_, import_to_add)\n@@ -27,7 +27,7 @@ pub(crate) fn render_macro(\n fn render(\n     ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     name: hir::Name,\n-    macro_: hir::MacroDef,\n+    macro_: hir::Macro,\n     import_to_add: Option<ImportEdit>,\n ) -> CompletionItem {\n     let source_range = if completion.is_immediately_after_macro_bang() {\n@@ -40,14 +40,14 @@ fn render(\n     let name = name.to_smol_str();\n     let docs = ctx.docs(macro_);\n     let docs_str = docs.as_ref().map(Documentation::as_str).unwrap_or_default();\n-    let (bra, ket) =\n-        if macro_.is_fn_like() { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n+    let is_fn_like = macro_.is_fn_like(completion.db);\n+    let (bra, ket) = if is_fn_like { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n \n-    let needs_bang = macro_.is_fn_like()\n-        && !matches!(completion.path_kind(), Some(PathKind::Mac | PathKind::Use));\n+    let needs_bang =\n+        is_fn_like && !matches!(completion.path_kind(), Some(PathKind::Mac | PathKind::Use));\n \n     let mut item = CompletionItem::new(\n-        SymbolKind::from(macro_.kind()),\n+        SymbolKind::from(macro_.kind(completion.db)),\n         source_range,\n         label(&ctx, needs_bang, bra, ket, &name),\n     );\n@@ -103,7 +103,7 @@ fn banged_name(name: &str) -> SmolStr {\n     SmolStr::from_iter([name, \"!\"])\n }\n \n-fn detail(sema: &Semantics<RootDatabase>, macro_: hir::MacroDef) -> Option<String> {\n+fn detail(sema: &Semantics<RootDatabase>, macro_: hir::Macro) -> Option<String> {\n     // FIXME: This is parsing the file!\n     let InFile { file_id, value } = macro_.source(sema.db)?;\n     let _ = sema.parse_or_expand(file_id);"}, {"sha": "0a154f14e50e12be4a6855bdfaa4a73ffbc9e549", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -181,7 +181,6 @@ fn import_edits(\n     let resolve = |import: &GreenNode| {\n         let path = ast::Path::cast(SyntaxNode::new_root(import.clone()))?;\n         let item = match ctx.scope.speculative_resolve(&path)? {\n-            hir::PathResolution::Macro(mac) => mac.into(),\n             hir::PathResolution::Def(def) => def.into(),\n             _ => return None,\n         };"}, {"sha": "ae292d97887e481e208766c3f947e01ddb748004", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -8,7 +8,7 @@\n use arrayvec::ArrayVec;\n use hir::{\n     Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Field, Function, GenericParam,\n-    HasVisibility, Impl, ItemInNs, Label, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef, Name, PathResolution,\n     Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n };\n use stdx::impl_from;\n@@ -22,7 +22,7 @@ use crate::RootDatabase;\n // FIXME: a more precise name would probably be `Symbol`?\n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub enum Definition {\n-    Macro(MacroDef),\n+    Macro(Macro),\n     Field(Field),\n     Module(Module),\n     Function(Function),\n@@ -48,7 +48,7 @@ impl Definition {\n \n     pub fn module(&self, db: &RootDatabase) -> Option<Module> {\n         let module = match self {\n-            Definition::Macro(it) => it.module(db)?,\n+            Definition::Macro(it) => it.module(db),\n             Definition::Module(it) => it.parent(db)?,\n             Definition::Field(it) => it.parent_def(db).module(db),\n             Definition::Function(it) => it.module(db),\n@@ -493,7 +493,6 @@ impl From<PathResolution> for Definition {\n             PathResolution::Local(local) => Definition::Local(local),\n             PathResolution::TypeParam(par) => Definition::GenericParam(par.into()),\n             PathResolution::ConstParam(par) => Definition::GenericParam(par.into()),\n-            PathResolution::Macro(def) => Definition::Macro(def),\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n             PathResolution::BuiltinAttr(attr) => Definition::BuiltinAttr(attr),\n             PathResolution::ToolModule(tool) => Definition::ToolModule(tool),\n@@ -512,6 +511,7 @@ impl From<ModuleDef> for Definition {\n             ModuleDef::Static(it) => Definition::Static(it),\n             ModuleDef::Trait(it) => Definition::Trait(it),\n             ModuleDef::TypeAlias(it) => Definition::TypeAlias(it),\n+            ModuleDef::Macro(it) => Definition::Macro(it),\n             ModuleDef::BuiltinType(it) => Definition::BuiltinType(it),\n         }\n     }"}, {"sha": "142feff4cd757fecc376edacab77793c464e1174", "filename": "crates/ide_db/src/famous_defs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -1,5 +1,5 @@\n //! See [`FamousDefs`].\n-use hir::{Crate, Enum, MacroDef, Module, ScopeDef, Semantics, Trait};\n+use hir::{Crate, Enum, Macro, Module, ScopeDef, Semantics, Trait};\n \n use crate::RootDatabase;\n \n@@ -84,7 +84,7 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:marker:Copy\")\n     }\n \n-    pub fn core_macros_builtin_derive(&self) -> Option<MacroDef> {\n+    pub fn core_macros_builtin_derive(&self) -> Option<Macro> {\n         self.find_macro(\"core:macros:builtin:derive\")\n     }\n \n@@ -118,9 +118,9 @@ impl FamousDefs<'_, '_> {\n         }\n     }\n \n-    fn find_macro(&self, path: &str) -> Option<MacroDef> {\n+    fn find_macro(&self, path: &str) -> Option<Macro> {\n         match self.find_def(path)? {\n-            hir::ScopeDef::MacroDef(it) => Some(it),\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(it)) => Some(it),\n             _ => None,\n         }\n     }"}, {"sha": "5b410ad92ef48fe9ab5eace13c522c304e282d24", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -3,7 +3,7 @@\n use std::collections::VecDeque;\n \n use base_db::FileId;\n-use hir::{ItemInNs, MacroDef, ModuleDef, Name, Semantics};\n+use hir::{ItemInNs, Macro, ModuleDef, Name, Semantics};\n use syntax::{\n     ast::{self, make},\n     AstToken, SyntaxKind, SyntaxToken, TokenAtOffset,\n@@ -15,7 +15,7 @@ pub fn item_name(db: &RootDatabase, item: ItemInNs) -> Option<Name> {\n     match item {\n         ItemInNs::Types(module_def_id) => ModuleDef::from(module_def_id).name(db),\n         ItemInNs::Values(module_def_id) => ModuleDef::from(module_def_id).name(db),\n-        ItemInNs::Macros(macro_def_id) => MacroDef::from(macro_def_id).name(db),\n+        ItemInNs::Macros(macro_def_id) => Macro::from(macro_def_id).name(db),\n     }\n }\n "}, {"sha": "86c43ed0ece5a67990b693d2f2c6c8eb89722478", "filename": "crates/ide_db/src/imports/import_assets.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -1,7 +1,7 @@\n //! Look up accessible paths for items.\n use hir::{\n-    AsAssocItem, AssocItem, AssocItemContainer, Crate, ItemInNs, MacroDef, ModPath, Module,\n-    ModuleDef, PathResolution, PrefixKind, ScopeDef, Semantics, SemanticsScope, Type,\n+    AsAssocItem, AssocItem, AssocItemContainer, Crate, ItemInNs, ModPath, Module, ModuleDef,\n+    PathResolution, PrefixKind, ScopeDef, Semantics, SemanticsScope, Type,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -432,7 +432,7 @@ fn module_with_segment_name(\n     let mut current_module = match candidate {\n         ItemInNs::Types(module_def_id) => ModuleDef::from(module_def_id).module(db),\n         ItemInNs::Values(module_def_id) => ModuleDef::from(module_def_id).module(db),\n-        ItemInNs::Macros(macro_def_id) => MacroDef::from(macro_def_id).module(db),\n+        ItemInNs::Macros(macro_def_id) => ModuleDef::from(macro_def_id).module(db),\n     };\n     while let Some(module) = current_module {\n         if let Some(module_name) = module.name(db) {"}, {"sha": "558f4f1b639dc113327d0ad7ef6e0c93c2cd3e1f", "filename": "crates/ide_db/src/path_transform.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fpath_transform.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -225,7 +225,6 @@ impl<'a> Ctx<'a> {\n             hir::PathResolution::Local(_)\n             | hir::PathResolution::ConstParam(_)\n             | hir::PathResolution::SelfType(_)\n-            | hir::PathResolution::Macro(_)\n             | hir::PathResolution::AssocItem(_)\n             | hir::PathResolution::BuiltinAttr(_)\n             | hir::PathResolution::ToolModule(_) => (),"}, {"sha": "805eac30b8916411e98aa86aafb2d79f1d6827a0", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba90936c1181e66da9ece7395c7eafe686cffd8/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=eba90936c1181e66da9ece7395c7eafe686cffd8", "patch": "@@ -271,7 +271,7 @@ impl Definition {\n         }\n \n         if let Definition::Macro(macro_def) = self {\n-            return match macro_def.kind() {\n+            return match macro_def.kind(db) {\n                 hir::MacroKind::Declarative => {\n                     if macro_def.attrs(db).by_key(\"macro_export\").exists() {\n                         SearchScope::reverse_dependencies(db, module.krate())"}]}