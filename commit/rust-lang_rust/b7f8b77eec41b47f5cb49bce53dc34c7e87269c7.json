{"sha": "b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZjhiNzdlZWM0MWI0N2Y1Y2I0OWJjZTUzZGMzNGM3ZTg3MjY5Yzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T08:34:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-02T08:34:12Z"}, "message": "Rollup merge of #66822 - RalfJung:miri-panic, r=oli-obk\n\nlibunwind_panic: adjust miri panic hack\n\nWe adjust the Miri hack in libpanic_unwind such that even with `cfg(miri)`, we build a version of libpanic_unwind that actually works.\n\nThis is needed to resolve https://github.com/integer32llc/rust-playground/issues/548.\n\nr? @oli-obk @alexcrichton", "tree": {"sha": "e12baa06bbcdd5f2f48188de2e99435c268c8645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e12baa06bbcdd5f2f48188de2e99435c268c8645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5MyECRBK7hj4Ov3rIwAAdHIIAH4b93zQkYemWoshHkzqZtU7\ni2UyI76f64Vr5vsq+nTxPhEmQDe3rPaQ/FvKuQpb5rm7OrRDp9k8Uag/pqjJ/doe\n4j8hwZ83SSedSJhW3IqyIq+N9/GicZBhrI6XpRN4FY2JqQifJoX9tXas1XcMU/DR\njQ2XEaB35a2rQcSYtWl75X9/nIMw/MStliaJ+bsDSHxPkRx6aDTMS17eEKtFFxzK\n8E2xbk6YQ39ScwA9DHlqo8guTPc5e/cGi19iZRmNZOz3byM2pfHHaYtiqw7Vvep+\n/a4uTFeAzt38ibZhezl1TwFKoWAixVLtjHowpil7u7+GSJT8vPt0ygnrE/yGUaw=\n=3zBE\n-----END PGP SIGNATURE-----\n", "payload": "tree e12baa06bbcdd5f2f48188de2e99435c268c8645\nparent f32f56969c6c0e4d43b2ca9a6d5254c64ae1cd91\nparent 02b66a19010c76e41805e65179e951ad1d41e0c7\nauthor Ralf Jung <post@ralfj.de> 1575275652 +0100\ncommitter GitHub <noreply@github.com> 1575275652 +0100\n\nRollup merge of #66822 - RalfJung:miri-panic, r=oli-obk\n\nlibunwind_panic: adjust miri panic hack\n\nWe adjust the Miri hack in libpanic_unwind such that even with `cfg(miri)`, we build a version of libpanic_unwind that actually works.\n\nThis is needed to resolve https://github.com/integer32llc/rust-playground/issues/548.\n\nr? @oli-obk @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "html_url": "https://github.com/rust-lang/rust/commit/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32f56969c6c0e4d43b2ca9a6d5254c64ae1cd91", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32f56969c6c0e4d43b2ca9a6d5254c64ae1cd91", "html_url": "https://github.com/rust-lang/rust/commit/f32f56969c6c0e4d43b2ca9a6d5254c64ae1cd91"}, {"sha": "02b66a19010c76e41805e65179e951ad1d41e0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b66a19010c76e41805e65179e951ad1d41e0c7", "html_url": "https://github.com/rust-lang/rust/commit/02b66a19010c76e41805e65179e951ad1d41e0c7"}], "stats": {"total": 77, "additions": 18, "deletions": 59}, "files": [{"sha": "d4952f53bf7fed3ff2831dc20d1ed150d9d9a40c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "patch": "@@ -1348,9 +1348,11 @@ extern \"rust-intrinsic\" {\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// Internal hook used by Miri to implement unwinding.\n+    /// Compiles to a NOP during non-Miri codegen.\n+    ///\n     /// Perma-unstable: do not use\n     #[cfg(not(bootstrap))]\n-    pub fn miri_start_panic(data: *mut (dyn crate::any::Any + crate::marker::Send)) -> !;\n+    pub fn miri_start_panic(data: *mut (dyn crate::any::Any + crate::marker::Send)) -> ();\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "3a14197c77bec3ba289315fc1cfb8773f58a6a2f", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "patch": "@@ -36,10 +36,7 @@ use core::raw;\n use core::panic::BoxMeUp;\n \n cfg_if::cfg_if! {\n-    if #[cfg(miri)] {\n-        #[path = \"miri.rs\"]\n-        mod imp;\n-    } else if #[cfg(target_os = \"emscripten\")] {\n+    if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n         mod imp;\n     } else if #[cfg(target_arch = \"wasm32\")] {\n@@ -94,5 +91,14 @@ pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n #[unwind(allowed)]\n pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n     let payload = payload as *mut &mut dyn BoxMeUp;\n-    imp::panic(Box::from_raw((*payload).take_box()))\n+    let payload = (*payload).take_box();\n+\n+    // Miri panic support: cfg'd out of normal builds just to be sure.\n+    // When going through normal codegen, `miri_start_panic` is a NOP, so the\n+    // Miri-enabled sysroot still supports normal unwinding. But when executed in\n+    // Miri, this line initiates unwinding.\n+    #[cfg(miri)]\n+    core::intrinsics::miri_start_panic(payload);\n+\n+    imp::panic(Box::from_raw(payload))\n }"}, {"sha": "f26c42fd4bcbaac9c707b22ff7b50fd961b64e98", "filename": "src/libpanic_unwind/miri.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f32f56969c6c0e4d43b2ca9a6d5254c64ae1cd91/src%2Flibpanic_unwind%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f56969c6c0e4d43b2ca9a6d5254c64ae1cd91/src%2Flibpanic_unwind%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmiri.rs?ref=f32f56969c6c0e4d43b2ca9a6d5254c64ae1cd91", "patch": "@@ -1,42 +0,0 @@\n-#![allow(nonstandard_style)]\n-\n-use core::any::Any;\n-use alloc::boxed::Box;\n-\n-pub fn payload() -> *mut u8 {\n-    core::ptr::null_mut()\n-}\n-\n-pub unsafe fn panic(data: Box<dyn Any + Send>) -> ! {\n-    core::intrinsics::miri_start_panic(Box::into_raw(data))\n-}\n-\n-pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n-    Box::from_raw(ptr)\n-}\n-\n-// This is required by the compiler to exist (e.g., it's a lang item),\n-// but is never used by Miri. Therefore, we just use a stub here\n-#[lang = \"eh_personality\"]\n-#[cfg(not(test))]\n-fn rust_eh_personality() {\n-    unsafe { core::intrinsics::abort() }\n-}\n-\n-// The rest is required on *some* targets to exist (specifically, MSVC targets that use SEH).\n-// We just add it on all targets. Copied from `seh.rs`.\n-#[repr(C)]\n-pub struct _TypeDescriptor {\n-    pub pVFTable: *const u8,\n-    pub spare: *mut u8,\n-    pub name: [u8; 11],\n-}\n-\n-const TYPE_NAME: [u8; 11] = *b\"rust_panic\\0\";\n-\n-#[cfg_attr(not(test), lang = \"eh_catch_typeinfo\")]\n-static mut TYPE_DESCRIPTOR: _TypeDescriptor = _TypeDescriptor {\n-    pVFTable: core::ptr::null(),\n-    spare: core::ptr::null_mut(),\n-    name: TYPE_NAME,\n-};"}, {"sha": "d76392f7570b410690b922e72a9f4df0ae844986", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "patch": "@@ -528,18 +528,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             _ => FnAbi::new(&bx, sig, &extra_args)\n         };\n \n-        // This should never be reachable at runtime:\n-        // We should only emit a call to this intrinsic in #[cfg(miri)] mode,\n-        // which means that we will never actually use the generate object files\n-        // (we will just be interpreting the MIR)\n-        //\n-        // Note that we still need to be able to codegen *something* for this intrisnic:\n-        // Miri currently uses Xargo to build a special libstd. As a side effect,\n-        // we generate normal object files for libstd - while these are never used,\n-        // we still need to be able to build them.\n+        // For normal codegen, this Miri-specific intrinsic is just a NOP.\n         if intrinsic == Some(\"miri_start_panic\") {\n-            bx.abort();\n-            bx.unreachable();\n+            let target = destination.as_ref().unwrap().1;\n+            helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n+            helper.funclet_br(self, &mut bx, target);\n             return;\n         }\n "}]}