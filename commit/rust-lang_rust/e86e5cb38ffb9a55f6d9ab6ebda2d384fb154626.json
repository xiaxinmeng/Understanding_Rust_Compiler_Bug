{"sha": "e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NmU1Y2IzOGZmYjlhNTVmNmQ5YWI2ZWJkYTJkMzg0ZmIxNTQ2MjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-08T18:58:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:35:01Z"}, "message": "Add a regression test for #44692\n\nAdd a test for the issue resolved by removing `resolve_macro_path`\n\nAdd a test making sure that extern prelude entries introduced from an opaque macro are not visible anywhere, even it that macro\n\nFix test output after rebase", "tree": {"sha": "15765a41615dd4f84e30be843377182fc6a47253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15765a41615dd4f84e30be843377182fc6a47253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "html_url": "https://github.com/rust-lang/rust/commit/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b74d72d9a4414f088d7f638343d5d8a7c67084a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b74d72d9a4414f088d7f638343d5d8a7c67084a", "html_url": "https://github.com/rust-lang/rust/commit/7b74d72d9a4414f088d7f638343d5d8a7c67084a"}], "stats": {"total": 129, "additions": 128, "deletions": 1}, "files": [{"sha": "70345351bd09d9e406564d7a41037a7779683614", "filename": "src/test/ui/derives/auxiliary/derive-marker-tricky.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fderives%2Fauxiliary%2Fderive-marker-tricky.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fderives%2Fauxiliary%2Fderive-marker-tricky.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fauxiliary%2Fderive-marker-tricky.rs?ref=e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "patch": "@@ -0,0 +1,15 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro_derive(NoMarker)]\n+pub fn f(input: TokenStream) -> TokenStream {\n+    if input.to_string().contains(\"rustc_copy_clone_marker\") {\n+        panic!(\"found `#[rustc_copy_clone_marker]`\");\n+    }\n+    TokenStream::new()\n+}"}, {"sha": "730ea4714c789169264e1afde7f9c5a870700aca", "filename": "src/test/ui/derives/derive-marker-tricky.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fderives%2Fderive-marker-tricky.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fderives%2Fderive-marker-tricky.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-marker-tricky.rs?ref=e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "patch": "@@ -0,0 +1,16 @@\n+// Test that `#[rustc_copy_clone_marker]` is not injected when a user-defined derive shadows\n+// a built-in derive in non-trivial scope (e.g. in a nested module).\n+\n+// check-pass\n+// aux-build:derive-marker-tricky.rs\n+\n+extern crate derive_marker_tricky;\n+\n+mod m {\n+    use derive_marker_tricky::NoMarker as Copy;\n+\n+    #[derive(Copy)]\n+    struct S;\n+}\n+\n+fn main() {}"}, {"sha": "06d62656e957fcc2ff9abfe4ce474e7ce81e7cbf", "filename": "src/test/ui/hygiene/extern-prelude-from-opaque-fail.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.rs?ref=e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "patch": "@@ -0,0 +1,28 @@\n+#![feature(decl_macro)]\n+\n+macro a() {\n+    extern crate core as my_core;\n+    mod v {\n+        // Early resolution.\n+        use my_core; //~ ERROR unresolved import `my_core`\n+    }\n+    mod u {\n+        // Late resolution.\n+        fn f() { my_core::mem::drop(0); }\n+        //~^ ERROR failed to resolve: use of undeclared type or module `my_core`\n+    }\n+}\n+\n+a!();\n+\n+mod v {\n+    // Early resolution.\n+    use my_core; //~ ERROR unresolved import `my_core`\n+}\n+mod u {\n+    // Late resolution.\n+    fn f() { my_core::mem::drop(0); }\n+    //~^ ERROR failed to resolve: use of undeclared type or module `my_core`\n+}\n+\n+fn main() {}"}, {"sha": "65133eb1e1873e537bf01b5c55eb8d0c3d545d3e", "filename": "src/test/ui/hygiene/extern-prelude-from-opaque-fail.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr?ref=e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "patch": "@@ -0,0 +1,37 @@\n+error[E0432]: unresolved import `my_core`\n+  --> $DIR/extern-prelude-from-opaque-fail.rs:20:9\n+   |\n+LL |     use my_core;\n+   |         ^^^^^^^\n+   |         |\n+   |         no `my_core` in the root\n+   |         help: a similar name exists in the module: `my_core`\n+\n+error[E0432]: unresolved import `my_core`\n+  --> $DIR/extern-prelude-from-opaque-fail.rs:7:13\n+   |\n+LL |         use my_core;\n+   |             ^^^^^^^ no `my_core` in the root\n+...\n+LL | a!();\n+   | ----- in this macro invocation\n+\n+error[E0433]: failed to resolve: use of undeclared type or module `my_core`\n+  --> $DIR/extern-prelude-from-opaque-fail.rs:11:18\n+   |\n+LL |         fn f() { my_core::mem::drop(0); }\n+   |                  ^^^^^^^ use of undeclared type or module `my_core`\n+...\n+LL | a!();\n+   | ----- in this macro invocation\n+\n+error[E0433]: failed to resolve: use of undeclared type or module `my_core`\n+  --> $DIR/extern-prelude-from-opaque-fail.rs:24:14\n+   |\n+LL |     fn f() { my_core::mem::drop(0); }\n+   |              ^^^^^^^ use of undeclared type or module `my_core`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0432, E0433.\n+For more information about an error, try `rustc --explain E0432`."}, {"sha": "0729e14d5b2738d93554425e15e102b9f698e259", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.rs?ref=e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for the issue #44692\n+\n+macro_rules! hang { () => {\n+    { //~ ERROR format argument must be a string literal\n+        #[derive(Clone)]\n+        struct S;\n+\n+        \"\"\n+    }\n+}}\n+\n+fn main() {\n+    format_args!(hang!());\n+}"}, {"sha": "1ef9427666bc5958abbad5da82f963ea36257226", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr?ref=e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "patch": "@@ -0,0 +1,17 @@\n+error: format argument must be a string literal\n+  --> $DIR/derive-in-eager-expansion-hang.rs:4:5\n+   |\n+LL | /     {\n+LL | |         #[derive(Clone)]\n+LL | |         struct S;\n+LL | |\n+LL | |         \"\"\n+LL | |     }\n+   | |_____^\n+help: you might be missing a string literal to format with\n+   |\n+LL |     format_args!(\"{}\", hang!());\n+   |                  ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8a5e346c2b59fc8df0d3437bd9cee738a6d03645", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=e86e5cb38ffb9a55f6d9ab6ebda2d384fb154626", "patch": "@@ -83,7 +83,7 @@ LL | #[my_macro]\n    |   ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n error: can't use a procedural macro from the same crate that defines it\n   --> $DIR/macro-namespace-reserved-2.rs:39:3"}]}