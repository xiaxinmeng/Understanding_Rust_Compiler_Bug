{"sha": "de66e08957987c3faad81a201c728a236e401b56", "node_id": "C_kwDOAAsO6NoAKGRlNjZlMDg5NTc5ODdjM2ZhYWQ4MWEyMDFjNzI4YTIzNmU0MDFiNTY", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T05:11:05Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T05:38:13Z"}, "message": "Prettify rustc_session fmt with capturing args (nfc)", "tree": {"sha": "b47f41fd9fe68eab1cc6fd9405fa5234c39109cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b47f41fd9fe68eab1cc6fd9405fa5234c39109cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de66e08957987c3faad81a201c728a236e401b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de66e08957987c3faad81a201c728a236e401b56", "html_url": "https://github.com/rust-lang/rust/commit/de66e08957987c3faad81a201c728a236e401b56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de66e08957987c3faad81a201c728a236e401b56/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7941b3f1473331d2abb2b8796046adc0105c8f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/7941b3f1473331d2abb2b8796046adc0105c8f94", "html_url": "https://github.com/rust-lang/rust/commit/7941b3f1473331d2abb2b8796046adc0105c8f94"}], "stats": {"total": 150, "additions": 64, "deletions": 86}, "files": [{"sha": "dd64e8ab71e7be2af29740c031aeb49b9208927d", "filename": "compiler/rustc_session/src/cgu_reuse_tracker.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -52,7 +52,7 @@ impl CguReuseTracker {\n \n     pub fn set_actual_reuse(&self, cgu_name: &str, kind: CguReuse) {\n         if let Some(ref data) = self.data {\n-            debug!(\"set_actual_reuse({:?}, {:?})\", cgu_name, kind);\n+            debug!(\"set_actual_reuse({cgu_name:?}, {kind:?})\");\n \n             let prev_reuse = data.lock().unwrap().actual_reuse.insert(cgu_name.to_string(), kind);\n \n@@ -74,7 +74,7 @@ impl CguReuseTracker {\n         comparison_kind: ComparisonKind,\n     ) {\n         if let Some(ref data) = self.data {\n-            debug!(\"set_expectation({:?}, {:?}, {:?})\", cgu_name, expected_reuse, comparison_kind);\n+            debug!(\"set_expectation({cgu_name:?}, {expected_reuse:?}, {comparison_kind:?})\");\n             let mut data = data.lock().unwrap();\n \n             data.expected_reuse.insert(\n@@ -100,17 +100,15 @@ impl CguReuseTracker {\n                     if error {\n                         let at_least = if at_least { \"at least \" } else { \"\" };\n                         let msg = format!(\n-                            \"CGU-reuse for `{}` is `{:?}` but \\\n-                                           should be {}`{:?}`\",\n-                            cgu_user_name, actual_reuse, at_least, expected_reuse\n+                            \"CGU-reuse for `{cgu_user_name}` is `{actual_reuse:?}` but \\\n+                                           should be {at_least}`{expected_reuse:?}`\"\n                         );\n                         diag.span_err(error_span.0, &msg);\n                     }\n                 } else {\n                     let msg = format!(\n-                        \"CGU-reuse for `{}` (mangled: `{}`) was \\\n-                                       not recorded\",\n-                        cgu_user_name, cgu_name\n+                        \"CGU-reuse for `{cgu_user_name}` (mangled: `{cgu_name}`) was \\\n+                                       not recorded\"\n                     );\n                     diag.span_fatal(error_span.0, &msg)\n                 }"}, {"sha": "aa2b1f48daff388e03d200d71cbb3e084cb921e1", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -99,7 +99,7 @@ impl CodeStats {\n             let indent = \"    \";\n \n             let discr_size = if let Some(discr_size) = info.opt_discr_size {\n-                println!(\"print-type-size {}discriminant: {} bytes\", indent, discr_size);\n+                println!(\"print-type-size {indent}discriminant: {discr_size} bytes\");\n                 discr_size\n             } else {\n                 0\n@@ -123,10 +123,8 @@ impl CodeStats {\n                         None => i.to_string(),\n                     };\n                     println!(\n-                        \"print-type-size {}variant `{}`: {} bytes\",\n-                        indent,\n-                        name,\n-                        size - discr_size\n+                        \"print-type-size {indent}variant `{name}`: {diff} bytes\",\n+                        diff = size - discr_size\n                     );\n                     \"        \"\n                 } else {\n@@ -149,25 +147,23 @@ impl CodeStats {\n \n                     if offset > min_offset {\n                         let pad = offset - min_offset;\n-                        println!(\"print-type-size {}padding: {} bytes\", indent, pad);\n+                        println!(\"print-type-size {indent}padding: {pad} bytes\");\n                     }\n \n                     if offset < min_offset {\n                         // If this happens it's probably a union.\n                         println!(\n-                            \"print-type-size {}field `.{}`: {} bytes, \\\n-                                  offset: {} bytes, \\\n-                                  alignment: {} bytes\",\n-                            indent, name, size, offset, align\n+                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                                  offset: {offset} bytes, \\\n+                                  alignment: {align} bytes\"\n                         );\n                     } else if info.packed || offset == min_offset {\n-                        println!(\"print-type-size {}field `.{}`: {} bytes\", indent, name, size);\n+                        println!(\"print-type-size {indent}field `.{name}`: {size} bytes\");\n                     } else {\n                         // Include field alignment in output only if it caused padding injection\n                         println!(\n-                            \"print-type-size {}field `.{}`: {} bytes, \\\n-                                  alignment: {} bytes\",\n-                            indent, name, size, align\n+                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                                  alignment: {align} bytes\"\n                         );\n                     }\n "}, {"sha": "44a2e2bdc85d31d537af722d1901f330a365fd34", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 30, "deletions": 42, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -659,7 +659,7 @@ impl OutputFilenames {\n             single_output_file,\n             temps_directory,\n             outputs,\n-            filestem: format!(\"{}{}\", out_filestem, extra),\n+            filestem: format!(\"{out_filestem}{extra}\"),\n         }\n     }\n \n@@ -1514,7 +1514,7 @@ pub fn get_cmd_lint_options(\n \n     let lint_cap = matches.opt_str(\"cap-lints\").map(|cap| {\n         lint::Level::from_str(&cap)\n-            .unwrap_or_else(|| early_error(error_format, &format!(\"unknown lint level: `{}`\", cap)))\n+            .unwrap_or_else(|| early_error(error_format, &format!(\"unknown lint level: `{cap}`\")))\n     });\n \n     (lint_opts, describe_lints, lint_cap)\n@@ -1533,8 +1533,7 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n             ErrorOutputType::default(),\n             &format!(\n                 \"argument for `--color` must be auto, \\\n-                 always or never (instead was `{}`)\",\n-                arg\n+                 always or never (instead was `{arg}`)\"\n             ),\n         ),\n     }\n@@ -1579,7 +1578,7 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n                 \"future-incompat\" => json_future_incompat = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n-                    &format!(\"unknown `--json` option `{}`\", s),\n+                    &format!(\"unknown `--json` option `{s}`\"),\n                 ),\n             }\n         }\n@@ -1619,8 +1618,7 @@ pub fn parse_error_format(\n                 ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n                 &format!(\n                     \"argument for `--error-format` must be `human`, `json` or \\\n-                     `short` (instead was `{}`)\",\n-                    arg\n+                     `short` (instead was `{arg}`)\"\n                 ),\n             ),\n         }\n@@ -1654,8 +1652,7 @@ pub fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"argument for `--edition` must be one of: \\\n-                     {}. (instead was `{}`)\",\n-                    EDITION_NAME_LIST, arg\n+                     {EDITION_NAME_LIST}. (instead was `{arg}`)\"\n                 ),\n             )\n         }),\n@@ -1670,7 +1667,7 @@ pub fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n                 edition, LATEST_STABLE_EDITION\n             )\n         } else {\n-            format!(\"edition {} is unstable and only available with -Z unstable-options\", edition)\n+            format!(\"edition {edition} is unstable and only available with -Z unstable-options\")\n         };\n         early_error(ErrorOutputType::default(), &msg)\n     }\n@@ -1718,9 +1715,8 @@ fn parse_output_types(\n                     early_error(\n                         error_format,\n                         &format!(\n-                            \"unknown emission type: `{}` - expected one of: {}\",\n-                            shorthand,\n-                            OutputType::shorthands_display(),\n+                            \"unknown emission type: `{shorthand}` - expected one of: {display}\",\n+                            display = OutputType::shorthands_display(),\n                         ),\n                     )\n                 });\n@@ -1758,9 +1754,8 @@ fn should_override_cgus_and_disable_thinlto(\n                         early_warn(\n                             error_format,\n                             &format!(\n-                                \"`--emit={}` with `-o` incompatible with \\\n+                                \"`--emit={ot}` with `-o` incompatible with \\\n                                  `-C codegen-units=N` for N > 1\",\n-                                ot\n                             ),\n                         );\n                     }\n@@ -1835,7 +1830,7 @@ fn collect_print_requests(\n             }\n         }\n         \"link-args\" => PrintRequest::LinkArgs,\n-        req => early_error(error_format, &format!(\"unknown print request `{}`\", req)),\n+        req => early_error(error_format, &format!(\"unknown print request `{req}`\")),\n     }));\n \n     prints\n@@ -1849,7 +1844,7 @@ pub fn parse_target_triple(\n         Some(target) if target.ends_with(\".json\") => {\n             let path = Path::new(&target);\n             TargetTriple::from_path(&path).unwrap_or_else(|_| {\n-                early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n+                early_error(error_format, &format!(\"target file {path:?} does not exist\"))\n             })\n         }\n         Some(target) => TargetTriple::TargetTriple(target),\n@@ -1892,8 +1887,7 @@ fn parse_opt_level(\n                     error_format,\n                     &format!(\n                         \"optimization level needs to be \\\n-                            between 0-3, s or z (instead was `{}`)\",\n-                        arg\n+                            between 0-3, s or z (instead was `{arg}`)\"\n                     ),\n                 );\n             }\n@@ -1927,8 +1921,7 @@ fn select_debuginfo(\n                     error_format,\n                     &format!(\n                         \"debug info level needs to be between \\\n-                         0-2 (instead was `{}`)\",\n-                        arg\n+                         0-2 (instead was `{arg}`)\"\n                     ),\n                 );\n             }\n@@ -1943,10 +1936,9 @@ crate fn parse_assert_incr_state(\n     match opt_assertion {\n         Some(s) if s.as_str() == \"loaded\" => Some(IncrementalStateAssertion::Loaded),\n         Some(s) if s.as_str() == \"not-loaded\" => Some(IncrementalStateAssertion::NotLoaded),\n-        Some(s) => early_error(\n-            error_format,\n-            &format!(\"unexpected incremental state assertion value: {}\", s),\n-        ),\n+        Some(s) => {\n+            early_error(error_format, &format!(\"unexpected incremental state assertion value: {s}\"))\n+        }\n         None => None,\n     }\n }\n@@ -1991,7 +1983,7 @@ fn parse_native_lib_kind(\n         }\n         s => early_error(\n             error_format,\n-            &format!(\"unknown library kind `{}`, expected one of dylib, framework, or static\", s),\n+            &format!(\"unknown library kind `{s}`, expected one of dylib, framework, or static\"),\n         ),\n     };\n     match modifiers {\n@@ -2066,9 +2058,8 @@ fn parse_native_lib_modifiers(\n             _ => early_error(\n                 error_format,\n                 &format!(\n-                    \"unrecognized linking modifier `{}`, expected one \\\n-                    of: bundle, verbatim, whole-archive, as-needed\",\n-                    modifier\n+                    \"unrecognized linking modifier `{modifier}`, expected one \\\n+                    of: bundle, verbatim, whole-archive, as-needed\"\n                 ),\n             ),\n         }\n@@ -2109,7 +2100,7 @@ fn parse_borrowck_mode(dopts: &DebuggingOptions, error_format: ErrorOutputType)\n     match dopts.borrowck.as_ref() {\n         \"migrate\" => BorrowckMode::Migrate,\n         \"mir\" => BorrowckMode::Mir,\n-        m => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n+        m => early_error(error_format, &format!(\"unknown borrowck mode `{m}`\")),\n     }\n }\n \n@@ -2197,7 +2188,7 @@ pub fn parse_externs(\n                             );\n                         }\n                     }\n-                    _ => early_error(error_format, &format!(\"unknown --extern option `{}`\", opt)),\n+                    _ => early_error(error_format, &format!(\"unknown --extern option `{opt}`\")),\n                 }\n             }\n         }\n@@ -2234,7 +2225,7 @@ fn parse_extern_dep_specs(\n         let loc = parts.next().unwrap_or_else(|| {\n             early_error(\n                 error_format,\n-                &format!(\"`--extern-location`: specify location for extern crate `{}`\", name),\n+                &format!(\"`--extern-location`: specify location for extern crate `{name}`\"),\n             )\n         });\n \n@@ -2255,14 +2246,14 @@ fn parse_extern_dep_specs(\n                 let json = json::from_str(raw).unwrap_or_else(|_| {\n                     early_error(\n                         error_format,\n-                        &format!(\"`--extern-location`: malformed json location `{}`\", raw),\n+                        &format!(\"`--extern-location`: malformed json location `{raw}`\"),\n                     )\n                 });\n                 ExternDepSpec::Json(json)\n             }\n             [bad, ..] => early_error(\n                 error_format,\n-                &format!(\"unknown location type `{}`: use `raw` or `json`\", bad),\n+                &format!(\"unknown location type `{bad}`: use `raw` or `json`\"),\n             ),\n             [] => early_error(error_format, \"missing location specification\"),\n         };\n@@ -2527,9 +2518,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         && !target_triple.triple().contains(\"apple\")\n         && cg.split_debuginfo.is_some()\n     {\n-        {\n-            early_error(error_format, \"`-Csplit-debuginfo` is unstable on this platform\");\n-        }\n+        early_error(error_format, \"`-Csplit-debuginfo` is unstable on this platform\");\n     }\n \n     // Try to find a directory containing the Rust `src`, for more details see\n@@ -2561,7 +2550,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     };\n \n     let working_dir = std::env::current_dir().unwrap_or_else(|e| {\n-        early_error(error_format, &format!(\"Current directory is invalid: {}\", e));\n+        early_error(error_format, &format!(\"Current directory is invalid: {e}\"));\n     });\n \n     let (path, remapped) =\n@@ -2636,12 +2625,11 @@ fn parse_pretty(debugging_opts: &DebuggingOptions, efmt: ErrorOutputType) -> Opt\n                 \"argument to `unpretty` must be one of `normal`, `identified`, \\\n                             `expanded`, `expanded,identified`, `expanded,hygiene`, \\\n                             `ast-tree`, `ast-tree,expanded`, `hir`, `hir,identified`, \\\n-                            `hir,typed`, `hir-tree`, `thir-tree`, `mir` or `mir-cfg`; got {}\",\n-                name\n+                            `hir,typed`, `hir-tree`, `thir-tree`, `mir` or `mir-cfg`; got {name}\"\n             ),\n         ),\n     };\n-    tracing::debug!(\"got unpretty option: {:?}\", first);\n+    tracing::debug!(\"got unpretty option: {first:?}\");\n     Some(first)\n }\n \n@@ -2667,7 +2655,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"cdylib\" => CrateType::Cdylib,\n                 \"bin\" => CrateType::Executable,\n                 \"proc-macro\" => CrateType::ProcMacro,\n-                _ => return Err(format!(\"unknown crate type: `{}`\", part)),\n+                _ => return Err(format!(\"unknown crate type: `{part}`\")),\n             };\n             if !crate_types.contains(&new_part) {\n                 crate_types.push(new_part)"}, {"sha": "c973e3140cef97b596545cdfb3d536fa6bd6eef1", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -85,7 +85,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n                 p.pop();\n                 p\n             }\n-            Err(e) => panic!(\"failed to get current_exe: {}\", e),\n+            Err(e) => panic!(\"failed to get current_exe: {e}\"),\n         }\n     }\n "}, {"sha": "463c5c9d8b5827690ddae6ce5ad20d0201cf6ade", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -345,14 +345,13 @@ fn build_options<O: Default>(\n                         Some(value) => early_error(\n                             error_format,\n                             &format!(\n-                                \"incorrect value `{}` for {} option `{}` - {} was expected\",\n-                                value, outputname, key, type_desc\n+                                \"incorrect value `{value}` for {outputname} option `{key}` - {type_desc} was expected\"\n                             ),\n                         ),\n                     }\n                 }\n             }\n-            None => early_error(error_format, &format!(\"unknown {} option: `{}`\", outputname, key)),\n+            None => early_error(error_format, &format!(\"unknown {outputname} option: `{key}`\")),\n         }\n     }\n     return op;"}, {"sha": "c6648f9d740360b22ffde1a23350b92669d4613b", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -63,8 +63,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n             if name.as_str() != s {\n                 let msg = format!(\n                     \"`--crate-name` and `#[crate_name]` are \\\n-                                   required to match, but `{}` != `{}`\",\n-                    s, name\n+                                   required to match, but `{s}` != `{name}`\"\n                 );\n                 sess.span_err(attr.span, &msg);\n             }\n@@ -80,8 +79,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n             if s.starts_with('-') {\n                 let msg = format!(\n                     \"crate names cannot start with a `-`, but \\\n-                                   `{}` has a leading hyphen\",\n-                    s\n+                                   `{s}` has a leading hyphen\"\n                 );\n                 sess.err(&msg);\n             } else {\n@@ -113,7 +111,7 @@ pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n             if c == '_' {\n                 continue;\n             }\n-            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n+            say(&format!(\"invalid character `{c}` in crate name: `{s}`\"));\n         }\n     }\n \n@@ -137,7 +135,7 @@ pub fn filename_for_metadata(\n     let out_filename = outputs\n         .single_output_file\n         .clone()\n-        .unwrap_or_else(|| outputs.out_directory.join(&format!(\"lib{}.rmeta\", libname)));\n+        .unwrap_or_else(|| outputs.out_directory.join(&format!(\"lib{libname}.rmeta\")));\n \n     check_file_is_writeable(&out_filename, sess);\n \n@@ -153,14 +151,14 @@ pub fn filename_for_input(\n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n \n     match crate_type {\n-        CrateType::Rlib => outputs.out_directory.join(&format!(\"lib{}.rlib\", libname)),\n+        CrateType::Rlib => outputs.out_directory.join(&format!(\"lib{libname}.rlib\")),\n         CrateType::Cdylib | CrateType::ProcMacro | CrateType::Dylib => {\n             let (prefix, suffix) = (&sess.target.dll_prefix, &sess.target.dll_suffix);\n-            outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname, suffix))\n+            outputs.out_directory.join(&format!(\"{prefix}{libname}{suffix}\"))\n         }\n         CrateType::Staticlib => {\n             let (prefix, suffix) = (&sess.target.staticlib_prefix, &sess.target.staticlib_suffix);\n-            outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname, suffix))\n+            outputs.out_directory.join(&format!(\"{prefix}{libname}{suffix}\"))\n         }\n         CrateType::Executable => {\n             let suffix = &sess.target.exe_suffix;"}, {"sha": "6f0c4761841fa64a8ce162390ec2e20e08b4e332", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -120,14 +120,13 @@ pub fn add_feature_diagnostics_for_issue<'a>(\n ) {\n     if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n-            \"see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n-            n, n,\n+            \"see issue #{n} <https://github.com/rust-lang/rust/issues/{n}> for more information\"\n         ));\n     }\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n     if sess.unstable_features.is_nightly_build() {\n-        err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n+        err.help(&format!(\"add `#![feature({feature})]` to the crate attributes to enable\"));\n     }\n }\n "}, {"sha": "799e3822c29268f8438e4871aad85fdf353b1a4a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de66e08957987c3faad81a201c728a236e401b56/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=de66e08957987c3faad81a201c728a236e401b56", "patch": "@@ -88,7 +88,7 @@ impl From<usize> for Limit {\n \n impl fmt::Display for Limit {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.0)\n+        self.0.fmt(f)\n     }\n }\n \n@@ -252,8 +252,8 @@ impl Session {\n             let mut diag = self.struct_warn(\"skipping const checks\");\n             for &(span, feature_gate) in unleashed_features.iter() {\n                 // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n-                if let Some(feature_gate) = feature_gate {\n-                    diag.span_help(span, &format!(\"skipping check for `{}` feature\", feature_gate));\n+                if let Some(gate) = feature_gate {\n+                    diag.span_help(span, &format!(\"skipping check for `{gate}` feature\"));\n                     // The unleash flag must *not* be used to just \"hack around\" feature gates.\n                     must_err = true;\n                 } else {\n@@ -1204,7 +1204,7 @@ pub fn build_session(\n     let target_cfg = config::build_target_config(&sopts, target_override, &sysroot);\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let (host, target_warnings) = Target::search(&host_triple, &sysroot).unwrap_or_else(|e| {\n-        early_error(sopts.error_format, &format!(\"Error loading host specification: {}\", e))\n+        early_error(sopts.error_format, &format!(\"Error loading host specification: {e}\"))\n     });\n     for warning in target_warnings.warning_messages() {\n         early_warn(sopts.error_format, &warning)\n@@ -1243,7 +1243,7 @@ pub fn build_session(\n         match profiler {\n             Ok(profiler) => Some(Arc::new(profiler)),\n             Err(e) => {\n-                early_warn(sopts.error_format, &format!(\"failed to create profiler: {}\", e));\n+                early_warn(sopts.error_format, &format!(\"failed to create profiler: {e}\"));\n                 None\n             }\n         }\n@@ -1407,7 +1407,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // Cannot mix and match sanitizers.\n     let mut sanitizer_iter = sess.opts.debugging_opts.sanitizer.into_iter();\n     if let (Some(first), Some(second)) = (sanitizer_iter.next(), sanitizer_iter.next()) {\n-        sess.err(&format!(\"`-Zsanitizer={}` is incompatible with `-Zsanitizer={}`\", first, second));\n+        sess.err(&format!(\"`-Zsanitizer={first}` is incompatible with `-Zsanitizer={second}`\"));\n     }\n \n     // Cannot enable crt-static with sanitizers on Linux"}]}