{"sha": "390b639e59adbb35b491f3080a07ba7b2ed84072", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MGI2MzllNTlhZGJiMzViNDkxZjMwODBhMDdiYTdiMmVkODQwNzI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-11T15:47:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-08T09:42:57Z"}, "message": "Move some common code into check_struct_path", "tree": {"sha": "75158fb1bc22b740354a508b62865507cb763fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75158fb1bc22b740354a508b62865507cb763fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/390b639e59adbb35b491f3080a07ba7b2ed84072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/390b639e59adbb35b491f3080a07ba7b2ed84072", "html_url": "https://github.com/rust-lang/rust/commit/390b639e59adbb35b491f3080a07ba7b2ed84072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/390b639e59adbb35b491f3080a07ba7b2ed84072/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2859f8bf3984c5871df0ee7395ec732e4a79759f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2859f8bf3984c5871df0ee7395ec732e4a79759f", "html_url": "https://github.com/rust-lang/rust/commit/2859f8bf3984c5871df0ee7395ec732e4a79759f"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "e90b32cd5dfc0192c5001b46a8dc2795acab7f39", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/390b639e59adbb35b491f3080a07ba7b2ed84072/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/390b639e59adbb35b491f3080a07ba7b2ed84072/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=390b639e59adbb35b491f3080a07ba7b2ed84072", "patch": "@@ -495,9 +495,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         expected: Ty<'tcx>)\n     {\n         // Resolve the path and check the definition for errors.\n-        let def = self.finish_resolving_struct_path(path, pat.id, pat.span);\n-        let variant = if let Some(variant) = self.check_struct_path(def, path, pat.span) {\n-            variant\n+        let (variant, pat_ty) = if let Some(variant_ty) = self.check_struct_path(path, pat.id,\n+                                                                                 pat.span) {\n+            variant_ty\n         } else {\n             self.write_error(pat.id);\n             for field in fields {\n@@ -507,7 +507,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         // Type check the path.\n-        let pat_ty = self.instantiate_type_path(def.def_id(), path, pat.id);\n         self.demand_eqtype(pat.span, expected, pat_ty);\n \n         // Type check subpatterns."}, {"sha": "8daa16180a90515883f2b76516569e62503bb7fa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/390b639e59adbb35b491f3080a07ba7b2ed84072/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/390b639e59adbb35b491f3080a07ba7b2ed84072/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=390b639e59adbb35b491f3080a07ba7b2ed84072", "patch": "@@ -3122,10 +3122,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn check_struct_path(&self,\n-                         def: Def,\n                          path: &hir::Path,\n+                         node_id: ast::NodeId,\n                          span: Span)\n-                         -> Option<ty::VariantDef<'tcx>> {\n+                         -> Option<(ty::VariantDef<'tcx>,  Ty<'tcx>)> {\n+        let def = self.finish_resolving_struct_path(path, node_id, span);\n         let variant = match def {\n             Def::Err => {\n                 self.set_tainted_by_errors();\n@@ -3151,7 +3152,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                       pprust::path_to_string(path));\n             return None;\n         }\n-        variant\n+\n+        let ty = self.instantiate_type_path(def.def_id(), path, node_id);\n+        Some((variant.unwrap(), ty))\n     }\n \n     fn check_expr_struct(&self,\n@@ -3161,16 +3164,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                          base_expr: &'gcx Option<P<hir::Expr>>)\n     {\n         // Find the relevant variant\n-        let def = self.finish_resolving_struct_path(path, expr.id, expr.span);\n-        let variant = if let Some(variant) = self.check_struct_path(def, path, expr.span) {\n-            variant\n+        let (variant, expr_ty) = if let Some(variant_ty) = self.check_struct_path(path, expr.id,\n+                                                                                  expr.span) {\n+            variant_ty\n         } else {\n             self.check_struct_fields_on_error(expr.id, fields, base_expr);\n             return;\n         };\n \n-        let expr_ty = self.instantiate_type_path(def.def_id(), path, expr.id);\n-\n         self.check_expr_struct_fields(expr_ty, path.span, variant, fields,\n                                       base_expr.is_none());\n         if let &Some(ref base_expr) = base_expr {"}]}