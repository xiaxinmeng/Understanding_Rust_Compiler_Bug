{"sha": "06a041cbd399dc641cadef2bc22c6e519b01856e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YTA0MWNiZDM5OWRjNjQxY2FkZWYyYmMyMmM2ZTUxOWIwMTg1NmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-07T13:28:23Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-11T09:25:28Z"}, "message": "Forbid the upper indices of `IndexVec` indices to allow for niche optimizations", "tree": {"sha": "877ed7346b700140688c791818a1eb38f6a41d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/877ed7346b700140688c791818a1eb38f6a41d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a041cbd399dc641cadef2bc22c6e519b01856e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a041cbd399dc641cadef2bc22c6e519b01856e", "html_url": "https://github.com/rust-lang/rust/commit/06a041cbd399dc641cadef2bc22c6e519b01856e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a041cbd399dc641cadef2bc22c6e519b01856e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "url": "https://api.github.com/repos/rust-lang/rust/commits/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "html_url": "https://github.com/rust-lang/rust/commit/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "301fc76f93257eee3c869a2ec0073c5b4850c959", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=06a041cbd399dc641cadef2bc22c6e519b01856e", "patch": "@@ -59,6 +59,8 @@\n #![feature(optin_builtin_traits)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(rustc_attrs)]\n+#![cfg_attr(stage0, feature(attr_literals))]\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(specialization)]"}, {"sha": "a2a056a3590c999e700b1f16a6139fdbb71443f2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=06a041cbd399dc641cadef2bc22c6e519b01856e", "patch": "@@ -114,7 +114,7 @@ const SCOPE_DATA_NODE: u32 = !0;\n const SCOPE_DATA_CALLSITE: u32 = !1;\n const SCOPE_DATA_ARGUMENTS: u32 = !2;\n const SCOPE_DATA_DESTRUCTION: u32 = !3;\n-const SCOPE_DATA_REMAINDER_MAX: u32 = !4;\n+// be sure to add the MAX of FirstStatementIndex if you add more constants here\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, RustcEncodable, RustcDecodable)]\n pub enum ScopeData {\n@@ -160,9 +160,7 @@ pub struct BlockRemainder {\n }\n \n newtype_index! {\n-    pub struct FirstStatementIndex {\n-        MAX = SCOPE_DATA_REMAINDER_MAX\n-    }\n+    pub struct FirstStatementIndex;\n }\n \n impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });"}, {"sha": "2d1709f2374a9ceab6e46accb9757d7ac9d37a9c", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=06a041cbd399dc641cadef2bc22c6e519b01856e", "patch": "@@ -72,7 +72,7 @@ macro_rules! newtype_index {\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @max          [::std::u32::MAX - 1]\n+            @max          [0xFFFF_FFFE]\n             @vis          [$v]\n             @debug_format [\"{}\"]);\n     );\n@@ -82,7 +82,7 @@ macro_rules! newtype_index {\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @max          [::std::u32::MAX - 1]\n+            @max          [0xFFFF_FFFE]\n             @vis          [$v]\n             @debug_format [\"{}\"]\n                           $($tokens)+);\n@@ -97,6 +97,7 @@ macro_rules! newtype_index {\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n+        #[rustc_layout_scalar_range_end($max)]\n         $v struct $type {\n             private: u32\n         }"}, {"sha": "08ee40dbcf454bf33e26ea54a687e9c8dc83db21", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=06a041cbd399dc641cadef2bc22c6e519b01856e", "patch": "@@ -30,6 +30,8 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(rustc_attrs)]\n+#![cfg_attr(stage0, feature(attr_literals))]\n #![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]"}, {"sha": "d10c51bbe47b0134d6d24f9527d007bc03255fec", "filename": "src/test/run-pass-fulldeps/newtype_index.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a041cbd399dc641cadef2bc22c6e519b01856e/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs?ref=06a041cbd399dc641cadef2bc22c6e519b01856e", "patch": "@@ -0,0 +1,20 @@\n+#![feature(rustc_attrs, step_trait, rustc_private)]\n+\n+#[macro_use] extern crate rustc_data_structures;\n+extern crate rustc_serialize;\n+\n+use rustc_data_structures::indexed_vec::Idx;\n+\n+newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n+\n+use std::mem::size_of;\n+\n+fn main() {\n+    assert_eq!(size_of::<MyIdx>(), 4);\n+    assert_eq!(size_of::<Option<MyIdx>>(), 4);\n+    assert_eq!(size_of::<Option<Option<MyIdx>>>(), 4);\n+    assert_eq!(size_of::<Option<Option<Option<MyIdx>>>>(), 4);\n+    assert_eq!(size_of::<Option<Option<Option<Option<MyIdx>>>>>(), 4);\n+    assert_eq!(size_of::<Option<Option<Option<Option<Option<MyIdx>>>>>>(), 4);\n+    assert_eq!(size_of::<Option<Option<Option<Option<Option<Option<MyIdx>>>>>>>(), 8);\n+}\n\\ No newline at end of file"}]}