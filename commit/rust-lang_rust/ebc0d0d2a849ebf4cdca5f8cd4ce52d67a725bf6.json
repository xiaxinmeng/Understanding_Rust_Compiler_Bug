{"sha": "ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "node_id": "C_kwDOAAsO6NoAKGViYzBkMGQyYTg0OWViZjRjZGNhNWY4Y2Q0Y2U1MmQ2N2E3MjViZjY", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-12-21T01:15:29Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-12-27T19:07:05Z"}, "message": "Address review comments", "tree": {"sha": "79ce1aaa1c61d66e37db670fc4833067fc0b6db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79ce1aaa1c61d66e37db670fc4833067fc0b6db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "html_url": "https://github.com/rust-lang/rust/commit/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef57f249a2244634a5c98d431d3bbfd715bd9c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef57f249a2244634a5c98d431d3bbfd715bd9c89", "html_url": "https://github.com/rust-lang/rust/commit/ef57f249a2244634a5c98d431d3bbfd715bd9c89"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "32f18419753e9827fb02ab6966c4ad2b246e163f", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "patch": "@@ -273,20 +273,34 @@ fn save_function_record(\n /// `codegened_and_inlined_items`).\n ///\n /// These unused functions are then codegen'd in one of the CGUs which is marked as the\n-/// \"code coverage dead code cgu\" during the partitioning process.\n+/// \"code coverage dead code cgu\" during the partitioning process. This prevents us from generating\n+/// code regions for the same function more than once which can lead to linker errors regarding\n+/// duplicate symbols.\n fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     assert!(cx.codegen_unit.is_code_coverage_dead_code_cgu());\n \n     let tcx = cx.tcx;\n \n     let ignore_unused_generics = tcx.sess.instrument_coverage_except_unused_generics();\n \n-    let all_def_ids: DefIdSet = tcx\n+    let eligible_def_ids: DefIdSet = tcx\n         .mir_keys(())\n         .iter()\n         .filter_map(|local_def_id| {\n             let def_id = local_def_id.to_def_id();\n-            if ignore_unused_generics && tcx.generics_of(def_id).requires_monomorphization(tcx) {\n+            let kind = tcx.def_kind(def_id);\n+            // `mir_keys` will give us `DefId`s for all kinds of things, not\n+            // just \"functions\", like consts, statics, etc. Filter those out.\n+            // If `ignore_unused_generics` was specified, filter out any\n+            // generic functions from consideration as well.\n+            if !matches!(\n+                kind,\n+                DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator\n+            ) {\n+                return None;\n+            } else if ignore_unused_generics\n+                && tcx.generics_of(def_id).requires_monomorphization(tcx)\n+            {\n                 return None;\n             }\n             Some(local_def_id.to_def_id())\n@@ -295,24 +309,17 @@ fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n \n     let codegenned_def_ids = tcx.codegened_and_inlined_items(());\n \n-    for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {\n-        // `all_def_ids` contains things besides just \"functions\" such as constants,\n-        // statics, etc. We need to filter those out.\n-        let kind = tcx.def_kind(non_codegenned_def_id);\n-        if matches!(kind, DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator) {\n-            let codegen_fn_attrs = tcx.codegen_fn_attrs(non_codegenned_def_id);\n-\n-            // If a function is marked `#[no_coverage]`, then skip generating a\n-            // dead code stub for it.\n-            if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_COVERAGE) {\n-                debug!(\"skipping unused fn marked #[no_coverage]: {:?}\", non_codegenned_def_id);\n-                continue;\n-            }\n+    for &non_codegenned_def_id in eligible_def_ids.difference(codegenned_def_ids) {\n+        let codegen_fn_attrs = tcx.codegen_fn_attrs(non_codegenned_def_id);\n \n-            debug!(\"generating unused fn: {:?}\", non_codegenned_def_id);\n-            cx.define_unused_fn(non_codegenned_def_id);\n-        } else {\n-            debug!(\"skipping unused {:?}: {:?}\", kind, non_codegenned_def_id);\n+        // If a function is marked `#[no_coverage]`, then skip generating a\n+        // dead code stub for it.\n+        if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_COVERAGE) {\n+            debug!(\"skipping unused fn marked #[no_coverage]: {:?}\", non_codegenned_def_id);\n+            continue;\n         }\n+\n+        debug!(\"generating unused fn: {:?}\", non_codegenned_def_id);\n+        cx.define_unused_fn(non_codegenned_def_id);\n     }\n }"}, {"sha": "67597a0d7b46b5dea8d40f9bce3480e6ebb68146", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "patch": "@@ -205,17 +205,33 @@ pub fn partition<'tcx>(\n         tcx.sess.instrument_coverage() && !tcx.sess.instrument_coverage_except_unused_functions();\n \n     if instrument_dead_code {\n+        assert!(\n+            post_inlining.codegen_units.len() > 0,\n+            \"There must be at least one CGU that code coverage data can be generated in.\"\n+        );\n+\n         // Find the smallest CGU that has exported symbols and put the dead\n         // function stubs in that CGU. We look for exported symbols to increase\n-        // the likelyhood the linker won't throw away the dead functions.\n-        let mut cgus_with_exported_symbols: Vec<_> = post_inlining\n-            .codegen_units\n-            .iter_mut()\n+        // the likelihood the linker won't throw away the dead functions.\n+        // FIXME(#92165): In order to truly resolve this, we need to make sure\n+        // the object file (CGU) containing the dead function stubs is included\n+        // in the final binary. This will probably require forcing these\n+        // function symbols to be included via `-u` or `/include` linker args.\n+        let mut cgus: Vec<_> = post_inlining.codegen_units.iter_mut().collect();\n+        cgus.sort_by_key(|cgu| cgu.size_estimate());\n+\n+        let dead_code_cgu = if let Some(cgu) = cgus\n+            .into_iter()\n+            .rev()\n             .filter(|cgu| cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External))\n-            .collect();\n-        cgus_with_exported_symbols.sort_by_key(|cgu| cgu.size_estimate());\n-\n-        let dead_code_cgu = cgus_with_exported_symbols.last_mut().unwrap();\n+            .next()\n+        {\n+            cgu\n+        } else {\n+            // If there are no CGUs that have externally linked items,\n+            // then we just pick the first CGU as a fallback.\n+            &mut post_inlining.codegen_units[0]\n+        };\n         dead_code_cgu.make_code_coverage_dead_code_cgu();\n     }\n "}, {"sha": "768dcb2f6084cdc36abe9452ec3e499d3fb6747f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n@@ -36,12 +36,12 @@\n    22|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    23|      2|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}"}, {"sha": "89636294035df53dcdd8167e3e0aa08982b18171", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=ebc0d0d2a849ebf4cdca5f8cd4ce52d67a725bf6", "patch": "@@ -42,12 +42,12 @@\n    40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    41|      2|}\n   ------------------\n-  | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n   ------------------\n-  | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n@@ -61,12 +61,12 @@\n    46|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    47|      4|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}"}]}