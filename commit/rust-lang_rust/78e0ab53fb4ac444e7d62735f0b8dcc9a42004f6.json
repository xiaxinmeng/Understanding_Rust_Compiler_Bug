{"sha": "78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZTBhYjUzZmI0YWM0NDRlN2Q2MjczNWYwYjhkY2M5YTQyMDA0ZjY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-01-11T17:18:58Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Update tests", "tree": {"sha": "5a346f980694cd57012fe61dea3a3abcf1c396b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a346f980694cd57012fe61dea3a3abcf1c396b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "html_url": "https://github.com/rust-lang/rust/commit/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3e5d27f23f466f7a9e65950e6ce32169ad2a557", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e5d27f23f466f7a9e65950e6ce32169ad2a557", "html_url": "https://github.com/rust-lang/rust/commit/e3e5d27f23f466f7a9e65950e6ce32169ad2a557"}], "stats": {"total": 355, "additions": 124, "deletions": 231}, "files": [{"sha": "8e0e1ce3dc34d74760348c97f98de4864cf339c2", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -1,11 +1,3 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/issue-63388-1.rs:12:10\n-   |\n-LL |     ) -> &dyn Foo\n-   |          ^^^^^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#22r\n-\n error: lifetime may not live long enough\n   --> $DIR/issue-63388-1.rs:13:5\n    |\n@@ -19,6 +11,5 @@ LL | |         foo\n LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "3d60cbff3203f7431af547e85f82e2acbf9cbc29", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -41,7 +41,7 @@ note: ...which requires processing `cycle2::{{opaque}}#0`...\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,22 +51,22 @@ note: ...which requires processing `cycle2`...\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires building MIR for...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -127,13 +127,33 @@ note: ...which requires processing `cycle2::{{opaque}}#0`...\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n   --> $DIR/auto-trait-leak.rs:22:1\n    |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires processing `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:22:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:22:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for...\n+  --> $DIR/auto-trait-leak.rs:22:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires type-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:22:1\n+   |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n@@ -155,9 +175,34 @@ error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n+note: ...which requires borrow-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires processing `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle1`...\n   --> $DIR/auto-trait-leak.rs:12:1\n    |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires type-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n@@ -166,28 +211,33 @@ note: ...which requires processing `cycle2::{{opaque}}#0`...\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n+note: ...which requires borrow-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:22:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n   --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires building MIR for...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:21:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "96d891b2cf1d7276b1d8fc9ab2aeff81d7f770e3", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -0,0 +1,29 @@\n+// compile-flags:-Zborrowck=mir\n+\n+#![feature(member_constraints)]\n+#![feature(type_alias_impl_trait)]\n+\n+#[derive(Clone)]\n+struct CopyIfEq<T, U>(T, U);\n+\n+impl<T: Copy> Copy for CopyIfEq<T, T> {}\n+\n+type E<'a, 'b> = impl Sized;\n+\n+fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+    let v = CopyIfEq::<*mut _, *mut _>(&mut { x }, &mut y);\n+\n+    // This assignment requires that `x` and `y` have the same type due to the\n+    // `Copy` impl. The reason why we are using a copy to create a constraint\n+    // is that only borrow checking (not regionck in type checking) enforces\n+    // this bound.\n+    let u = v;\n+    let _: *mut &'a i32 = u.1;\n+    unsafe {\n+        let _: &'b i32 = *u.0;\n+    }\n+    u.0\n+}\n+\n+fn main() {}"}, {"sha": "59105f11805cd0c27de0c55025cf579a87873da1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -0,0 +1,15 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/error-handling-2.rs:13:60\n+   |\n+LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |                                                            ^^^^^^^^^\n+   |\n+note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 13:8\n+  --> $DIR/error-handling-2.rs:13:8\n+   |\n+LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "8d02d635094be46c270d8eae84c6cc303fc9f005", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -11,7 +11,6 @@ impl<T: Copy> Copy for CopyIfEq<T, T> {}\n type E<'a, 'b> = impl Sized;\n \n fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-    //~^ ERROR lifetime may not live long enough\n     let v = CopyIfEq::<*mut _, *mut _>(&mut { x }, &mut y);\n \n     // This assignment requires that `x` and `y` have the same type due to the\n@@ -22,6 +21,7 @@ fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n     let _: *mut &'a i32 = u.1;\n     unsafe {\n         let _: &'b i32 = *u.0;\n+        //~^ ERROR lifetime may not live long enough\n     }\n     u.0\n }"}, {"sha": "6ce3aaf49eb339b12630c25e863546a959c7027f", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -1,14 +1,15 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:13:56\n+  --> $DIR/error-handling.rs:23:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n-   |\n-LL | type E<'a, 'b> = impl Sized + 'a;\n-   |\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |         let _: &'b i32 = *u.0;\n+   |                ^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "5bfc446f6a5731f02942edbdf7b37860c73350af", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -3,6 +3,8 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: hidden type `Ordinary<'_>` captures lifetime '_#8r\n \n error: aborting due to previous error\n "}, {"sha": "7291eee7b9e88e05de456eef2848c6eae2078061", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -3,6 +3,8 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: hidden type `Ordinary<'_>` captures lifetime '_#5r\n \n error: aborting due to previous error\n "}, {"sha": "61f6680d5a423275e764b1474b55f6bd4d295a7d", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -1,11 +1,3 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n-   |\n-LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                             ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n@@ -24,14 +16,6 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          |          let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n-   |\n-LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                                          ^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n@@ -41,6 +25,5 @@ LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                  |               let's call the lifetime of this reference `'1`\n    |                  lifetime `'a` defined here\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "e66711076e89396d2bcd0721419325b314e2bda8", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -1,11 +1,3 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:12:42\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                          ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n-\n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:13:9\n    |\n@@ -16,14 +8,6 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:18:48\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                                ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n-\n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n@@ -34,14 +18,6 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:22:57\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n-\n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n@@ -52,14 +28,6 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:26:57\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n-\n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n@@ -70,14 +38,6 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:30:66\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n-\n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n@@ -88,14 +48,6 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:34:62\n-   |\n-LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                              ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n-\n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n@@ -106,6 +58,5 @@ LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "82098cd4f077e01edac24a8a9c01493aeeec9aac", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -1,11 +1,3 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:12:46\n-   |\n-LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                                              ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:13:9\n    |\n@@ -16,14 +8,6 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:18:52\n-   |\n-LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                                                    ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n@@ -34,14 +18,6 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:22:61\n-   |\n-LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                                             ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n@@ -52,14 +28,6 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:26:61\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                                             ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n@@ -70,14 +38,6 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:30:70\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                                      ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n@@ -88,14 +48,6 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:34:70\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                                                      ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n@@ -106,6 +58,5 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "736cebae4bccf63588dc045aebfd9f6228ab62c9", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -1,11 +1,3 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:12:56\n-   |\n-LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                                                        ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n@@ -16,14 +8,6 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:16:65\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                                 ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n@@ -34,14 +18,6 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:20:65\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                                                 ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n@@ -52,14 +28,6 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:24:74\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                          ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n@@ -70,14 +38,6 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:28:74\n-   |\n-LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                                                          ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n@@ -88,6 +48,5 @@ LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "5d7dd76827a9680175a59c0749bf9cacbeb86ade", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "patch": "@@ -1,11 +1,3 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:12:52\n-   |\n-LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                                                    ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:13:9\n    |\n@@ -16,14 +8,6 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:16:61\n-   |\n-LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                                             ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n@@ -34,14 +18,6 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:20:61\n-   |\n-LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                                             ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n@@ -52,14 +28,6 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:24:70\n-   |\n-LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                                                      ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n@@ -70,14 +38,6 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:28:66\n-   |\n-LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                                                  ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n@@ -88,6 +48,5 @@ LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0700`."}]}