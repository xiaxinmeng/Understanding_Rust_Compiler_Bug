{"sha": "45f67625291af6432c42b99a3b68b2b77fb8ad9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjY3NjI1MjkxYWY2NDMyYzQyYjk5YTNiNjhiMmI3N2ZiOGFkOWM=", "commit": {"author": {"name": "nasso", "email": "nassomails@gmail.com", "date": "2020-10-11T00:53:37Z"}, "committer": {"name": "nasso", "email": "nassomails@gmail.com", "date": "2020-10-13T08:46:21Z"}, "message": "Add a setting to use the system theme", "tree": {"sha": "f585b50f5354f9ec96771f288d5f9bb097c6a44c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f585b50f5354f9ec96771f288d5f9bb097c6a44c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f67625291af6432c42b99a3b68b2b77fb8ad9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f67625291af6432c42b99a3b68b2b77fb8ad9c", "html_url": "https://github.com/rust-lang/rust/commit/45f67625291af6432c42b99a3b68b2b77fb8ad9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f67625291af6432c42b99a3b68b2b77fb8ad9c/comments", "author": {"login": "nasso", "id": 11479594, "node_id": "MDQ6VXNlcjExNDc5NTk0", "avatar_url": "https://avatars.githubusercontent.com/u/11479594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nasso", "html_url": "https://github.com/nasso", "followers_url": "https://api.github.com/users/nasso/followers", "following_url": "https://api.github.com/users/nasso/following{/other_user}", "gists_url": "https://api.github.com/users/nasso/gists{/gist_id}", "starred_url": "https://api.github.com/users/nasso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nasso/subscriptions", "organizations_url": "https://api.github.com/users/nasso/orgs", "repos_url": "https://api.github.com/users/nasso/repos", "events_url": "https://api.github.com/users/nasso/events{/privacy}", "received_events_url": "https://api.github.com/users/nasso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nasso", "id": 11479594, "node_id": "MDQ6VXNlcjExNDc5NTk0", "avatar_url": "https://avatars.githubusercontent.com/u/11479594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nasso", "html_url": "https://github.com/nasso", "followers_url": "https://api.github.com/users/nasso/followers", "following_url": "https://api.github.com/users/nasso/following{/other_user}", "gists_url": "https://api.github.com/users/nasso/gists{/gist_id}", "starred_url": "https://api.github.com/users/nasso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nasso/subscriptions", "organizations_url": "https://api.github.com/users/nasso/orgs", "repos_url": "https://api.github.com/users/nasso/repos", "events_url": "https://api.github.com/users/nasso/events{/privacy}", "received_events_url": "https://api.github.com/users/nasso/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790d19cd259e9ec656c6e0bb1446e980115ba46f", "url": "https://api.github.com/repos/rust-lang/rust/commits/790d19cd259e9ec656c6e0bb1446e980115ba46f", "html_url": "https://github.com/rust-lang/rust/commit/790d19cd259e9ec656c6e0bb1446e980115ba46f"}], "stats": {"total": 268, "additions": 232, "deletions": 36}, "files": [{"sha": "a9d4c2cc813df28182c05d2a6b2a8441f60b6314", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 88, "deletions": 15, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=45f67625291af6432c42b99a3b68b2b77fb8ad9c", "patch": "@@ -575,7 +575,8 @@ impl FormatRenderer for Context {\n             settings(\n                 self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n                 &self.shared.resource_suffix,\n-            ),\n+                &self.shared.style_files,\n+            )?,\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n@@ -810,6 +811,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n     but.textContent = item;\n     but.onclick = function(el) {{\n         switchTheme(currentTheme, mainTheme, item, true);\n+        useSystemTheme(false);\n     }};\n     but.onblur = handleThemeButtonsBlur;\n     themes.appendChild(but);\n@@ -1343,22 +1345,35 @@ impl AllTypes {\n \n #[derive(Debug)]\n enum Setting {\n-    Section { description: &'static str, sub_settings: Vec<Setting> },\n-    Entry { js_data_name: &'static str, description: &'static str, default_value: bool },\n+    Section {\n+        description: &'static str,\n+        sub_settings: Vec<Setting>,\n+    },\n+    Toggle {\n+        js_data_name: &'static str,\n+        description: &'static str,\n+        default_value: bool,\n+    },\n+    Select {\n+        js_data_name: &'static str,\n+        description: &'static str,\n+        default_value: &'static str,\n+        options: Vec<(String, String)>,\n+    },\n }\n \n impl Setting {\n-    fn display(&self) -> String {\n+    fn display(&self, root_path: &str, suffix: &str) -> String {\n         match *self {\n             Setting::Section { ref description, ref sub_settings } => format!(\n                 \"<div class='setting-line'>\\\n                      <div class='title'>{}</div>\\\n                      <div class='sub-settings'>{}</div>\n                  </div>\",\n                 description,\n-                sub_settings.iter().map(|s| s.display()).collect::<String>()\n+                sub_settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>()\n             ),\n-            Setting::Entry { ref js_data_name, ref description, ref default_value } => format!(\n+            Setting::Toggle { ref js_data_name, ref description, ref default_value } => format!(\n                 \"<div class='setting-line'>\\\n                      <label class='toggle'>\\\n                      <input type='checkbox' id='{}' {}>\\\n@@ -1370,13 +1385,40 @@ impl Setting {\n                 if *default_value { \" checked\" } else { \"\" },\n                 description,\n             ),\n+            Setting::Select {\n+                ref js_data_name,\n+                ref description,\n+                ref default_value,\n+                ref options,\n+            } => format!(\n+                \"<div class='setting-line'>\\\n+                     <div>{}</div>\\\n+                     <label class='select-wrapper'>\\\n+                         <select id='{}' autocomplete='off'>{}</select>\\\n+                         <img src='{}down-arrow{}.svg' alt='Select item'>\\\n+                     </label>\\\n+                 </div>\",\n+                description,\n+                js_data_name,\n+                options\n+                    .iter()\n+                    .map(|opt| format!(\n+                        \"<option value=\\\"{}\\\" {}>{}</option>\",\n+                        opt.0,\n+                        if &opt.0 == *default_value { \"selected\" } else { \"\" },\n+                        opt.1,\n+                    ))\n+                    .collect::<String>(),\n+                root_path,\n+                suffix,\n+            ),\n         }\n     }\n }\n \n impl From<(&'static str, &'static str, bool)> for Setting {\n     fn from(values: (&'static str, &'static str, bool)) -> Setting {\n-        Setting::Entry { js_data_name: values.0, description: values.1, default_value: values.2 }\n+        Setting::Toggle { js_data_name: values.0, description: values.1, default_value: values.2 }\n     }\n }\n \n@@ -1389,9 +1431,39 @@ impl<T: Into<Setting>> From<(&'static str, Vec<T>)> for Setting {\n     }\n }\n \n-fn settings(root_path: &str, suffix: &str) -> String {\n+fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<String, Error> {\n+    let theme_names: Vec<(String, String)> = themes\n+        .iter()\n+        .map(|entry| {\n+            let theme =\n+                try_none!(try_none!(entry.path.file_stem(), &entry.path).to_str(), &entry.path)\n+                    .to_string();\n+\n+            Ok((theme.clone(), theme))\n+        })\n+        .collect::<Result<_, Error>>()?;\n+\n     // (id, explanation, default value)\n     let settings: &[Setting] = &[\n+        (\n+            \"Theme preferences\",\n+            vec![\n+                Setting::from((\"use-system-theme\", \"Use system theme\", true)),\n+                Setting::Select {\n+                    js_data_name: \"preferred-dark-theme\",\n+                    description: \"Preferred dark theme\",\n+                    default_value: \"dark\",\n+                    options: theme_names.clone(),\n+                },\n+                Setting::Select {\n+                    js_data_name: \"preferred-light-theme\",\n+                    description: \"Preferred light theme\",\n+                    default_value: \"light\",\n+                    options: theme_names,\n+                },\n+            ],\n+        )\n+            .into(),\n         (\n             \"Auto-hide item declarations\",\n             vec![\n@@ -1413,16 +1485,17 @@ fn settings(root_path: &str, suffix: &str) -> String {\n         (\"line-numbers\", \"Show line numbers on code examples\", false).into(),\n         (\"disable-shortcuts\", \"Disable keyboard shortcuts\", false).into(),\n     ];\n-    format!(\n+\n+    Ok(format!(\n         \"<h1 class='fqn'>\\\n-    <span class='in-band'>Rustdoc settings</span>\\\n-</h1>\\\n-<div class='settings'>{}</div>\\\n-<script src='{}settings{}.js'></script>\",\n-        settings.iter().map(|s| s.display()).collect::<String>(),\n+            <span class='in-band'>Rustdoc settings</span>\\\n+        </h1>\\\n+        <div class='settings'>{}</div>\\\n+        <script src='{}settings{}.js'></script>\",\n+        settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>(),\n         root_path,\n         suffix\n-    )\n+    ))\n }\n \n impl Context {"}, {"sha": "7c91f6b7d18ed84b9449ade3fcf281de97040603", "filename": "src/librustdoc/html/static/settings.css", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css?ref=45f67625291af6432c42b99a3b68b2b77fb8ad9c", "patch": "@@ -4,7 +4,6 @@\n }\n \n .setting-line > div {\n-\tmax-width: calc(100% - 74px);\n \tdisplay: inline-block;\n \tvertical-align: top;\n \tfont-size: 17px;\n@@ -30,6 +29,45 @@\n \tdisplay: none;\n }\n \n+.select-wrapper {\n+\tfloat: right;\n+\n+\tposition: relative;\n+\n+\theight: 27px;\n+\tmin-width: 25%;\n+}\n+\n+.select-wrapper select {\n+\tappearance: none;\n+\t-moz-appearance: none;\n+\t-webkit-appearance: none;\n+\n+\tbackground: none;\n+\tborder: 2px solid #ccc;\n+\tpadding-right: 28px;\n+\n+\twidth: 100%;\n+}\n+\n+.select-wrapper img {\n+\tpointer-events: none;\n+\n+\tposition: absolute;\n+\tright: 0;\n+\tbottom: 0;\n+\n+\tbackground: #ccc;\n+\n+\theight: 100%;\n+\twidth: 28px;\n+\tpadding: 0px 4px;\n+}\n+\n+.select-wrapper select option {\n+\tcolor: initial;\n+}\n+\n .slider {\n \tposition: absolute;\n \tcursor: pointer;"}, {"sha": "67dc77330eecaf83f4c0674e0c246ef7e00e6e23", "filename": "src/librustdoc/html/static/settings.js", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js?ref=45f67625291af6432c42b99a3b68b2b77fb8ad9c", "patch": "@@ -2,29 +2,54 @@\n /* global getCurrentValue, updateLocalStorage */\n \n (function () {\n-    function changeSetting(settingName, isEnabled) {\n-        updateLocalStorage('rustdoc-' + settingName, isEnabled);\n+    function changeSetting(settingName, value) {\n+        updateLocalStorage('rustdoc-' + settingName, value);\n+\n+        switch (settingName) {\n+            case 'preferred-dark-theme':\n+            case 'preferred-light-theme':\n+            case 'use-system-theme':\n+                updateSystemTheme();\n+                break;\n+        }\n     }\n \n     function getSettingValue(settingName) {\n         return getCurrentValue('rustdoc-' + settingName);\n     }\n \n     function setEvents() {\n-        var elems = document.getElementsByClassName(\"slider\");\n-        if (!elems || elems.length === 0) {\n-            return;\n+        var elems = {\n+            toggles: document.getElementsByClassName(\"slider\"),\n+            selects: document.getElementsByClassName(\"select-wrapper\")\n+        };\n+\n+        if (elems.toggles && elems.toggles.length > 0) {\n+            for (var i = 0; i < elems.toggles.length; ++i) {\n+                var toggle = elems.toggles[i].previousElementSibling;\n+                var settingId = toggle.id;\n+                var settingValue = getSettingValue(settingId);\n+                if (settingValue !== null) {\n+                    toggle.checked = settingValue === \"true\";\n+                }\n+                toggle.onchange = function() {\n+                    changeSetting(this.id, this.checked);\n+                };\n+            }\n         }\n-        for (var i = 0; i < elems.length; ++i) {\n-            var toggle = elems[i].previousElementSibling;\n-            var settingId = toggle.id;\n-            var settingValue = getSettingValue(settingId);\n-            if (settingValue !== null) {\n-                toggle.checked = settingValue === \"true\";\n+\n+        if (elems.selects && elems.selects.length > 0) {\n+            for (var i = 0; i < elems.selects.length; ++i) {\n+                var select = elems.selects[i].getElementsByTagName('select')[0];\n+                var settingId = select.id;\n+                var settingValue = getSettingValue(settingId);\n+                if (settingValue !== null) {\n+                    select.value = settingValue;\n+                }\n+                select.onchange = function() {\n+                    changeSetting(this.id, this.value);\n+                };\n             }\n-            toggle.onchange = function() {\n-                changeSetting(this.id, this.checked);\n-            };\n         }\n     }\n "}, {"sha": "3ee693d6eacaba5c44bb02c1145a3211429b5efc", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/45f67625291af6432c42b99a3b68b2b77fb8ad9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=45f67625291af6432c42b99a3b68b2b77fb8ad9c", "patch": "@@ -118,11 +118,71 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n     }\n }\n \n-function getSystemValue() {\n-    var property = getComputedStyle(document.documentElement).getPropertyValue('content');\n-    return property.replace(/[\\\"\\']/g, \"\");\n+function useSystemTheme(value) {\n+    if (value === undefined) {\n+        value = true;\n+    }\n+\n+    updateLocalStorage(\"rustdoc-use-system-theme\", value);\n+\n+    // update the toggle if we're on the settings page\n+    var toggle = document.getElementById(\"use-system-theme\");\n+    if (toggle && toggle instanceof HTMLInputElement) {\n+        toggle.checked = value;\n+    }\n }\n \n-switchTheme(currentTheme, mainTheme,\n-            getCurrentValue(\"rustdoc-theme\") || getSystemValue() || \"light\",\n-            false);\n+var updateSystemTheme = (function() {\n+    if (!window.matchMedia) {\n+        // fallback to the CSS computed value\n+        return function() {\n+            let cssTheme = getComputedStyle(document.documentElement)\n+                .getPropertyValue('content');\n+\n+            switchTheme(\n+                currentTheme,\n+                mainTheme,\n+                JSON.parse(cssTheme) || light,\n+                true\n+            );\n+        };\n+    }\n+\n+    // only listen to (prefers-color-scheme: dark) because light is the default\n+    var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n+\n+    function handlePreferenceChange(mql) {\n+        // maybe the user has disabled the setting in the meantime!\n+        if (getCurrentValue(\"rustdoc-use-system-theme\") !== \"false\") {\n+            var lightTheme = getCurrentValue(\"rustdoc-preferred-light-theme\") || \"light\";\n+            var darkTheme = getCurrentValue(\"rustdoc-preferred-dark-theme\") || \"dark\";\n+\n+            if (mql.matches) {\n+                // prefers a dark theme\n+                switchTheme(currentTheme, mainTheme, darkTheme, true);\n+            } else {\n+                // prefers a light theme, or has no preference\n+                switchTheme(currentTheme, mainTheme, lightTheme, true);\n+            }\n+\n+            // note: we save the theme so that it doesn't suddenly change when\n+            // the user disables \"use-system-theme\" and reloads the page or\n+            // navigates to another page\n+        }\n+    }\n+\n+    mql.addListener(handlePreferenceChange);\n+\n+    return function() {\n+        handlePreferenceChange(mql);\n+    };\n+})();\n+\n+if (getCurrentValue(\"rustdoc-use-system-theme\") !== \"false\" && window.matchMedia) {\n+    // call the function to initialize the theme at least once!\n+    updateSystemTheme();\n+} else {\n+    switchTheme(currentTheme, mainTheme,\n+                getCurrentValue(\"rustdoc-theme\") || \"light\",\n+                false);\n+}"}]}