{"sha": "b9bd2a60085acfc046365bab4cfa009cb6b9b773", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YmQyYTYwMDg1YWNmYzA0NjM2NWJhYjRjZmEwMDljYjZiOWI3NzM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-19T10:46:16Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-26T15:27:22Z"}, "message": "Impl items have generics", "tree": {"sha": "91964db725f2d9d710dcb0e5b900977d2c3920ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91964db725f2d9d710dcb0e5b900977d2c3920ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9bd2a60085acfc046365bab4cfa009cb6b9b773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bd2a60085acfc046365bab4cfa009cb6b9b773", "html_url": "https://github.com/rust-lang/rust/commit/b9bd2a60085acfc046365bab4cfa009cb6b9b773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9bd2a60085acfc046365bab4cfa009cb6b9b773/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "694cf752988728ba5da85c36c2deaeefeb49c05e", "url": "https://api.github.com/repos/rust-lang/rust/commits/694cf752988728ba5da85c36c2deaeefeb49c05e", "html_url": "https://github.com/rust-lang/rust/commit/694cf752988728ba5da85c36c2deaeefeb49c05e"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "abdd7fd8d40bf0d220ad2022d1fa47d6f12eb243", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9bd2a60085acfc046365bab4cfa009cb6b9b773/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bd2a60085acfc046365bab4cfa009cb6b9b773/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b9bd2a60085acfc046365bab4cfa009cb6b9b773", "patch": "@@ -251,25 +251,17 @@ impl PrintContext {\n     fn parameterized<F: fmt::Write>(&mut self,\n                                     f: &mut F,\n                                     substs: &subst::Substs<'_>,\n-                                    mut did: DefId,\n+                                    did: DefId,\n                                     projections: &[ty::ProjectionPredicate<'_>])\n                                     -> fmt::Result {\n         let key = ty::tls::with(|tcx| tcx.def_key(did));\n-        let mut item_name = if let Some(name) = key.disambiguated_data.data.get_opt_name() {\n-            Some(name)\n-        } else {\n-            did.index = key.parent.unwrap_or_else(\n-                || bug!(\"finding type for {:?}, encountered def-id {:?} with no parent\",\n-                        did, did));\n-            self.parameterized(f, substs, did, projections)?;\n-            return write!(f, \"::{}\", key.disambiguated_data.data.as_interned_str());\n-        };\n \n         let verbose = self.is_verbose;\n         let mut num_supplied_defaults = 0;\n         let mut has_self = false;\n         let mut own_counts: GenericParamCount = Default::default();\n         let mut is_value_path = false;\n+        let mut item_name = Some(key.disambiguated_data.data.as_interned_str());\n         let fn_trait_kind = ty::tls::with(|tcx| {\n             // Unfortunately, some kinds of items (e.g., closures) don't have\n             // generics. So walk back up the find the closest parent that DOES\n@@ -282,6 +274,7 @@ impl PrintContext {\n                     DefPathData::AssocTypeInImpl(_) |\n                     DefPathData::AssocExistentialInImpl(_) |\n                     DefPathData::Trait(_) |\n+                    DefPathData::Impl |\n                     DefPathData::TypeNs(_) => {\n                         break;\n                     }\n@@ -292,7 +285,6 @@ impl PrintContext {\n                     }\n                     DefPathData::CrateRoot |\n                     DefPathData::Misc |\n-                    DefPathData::Impl |\n                     DefPathData::Module(_) |\n                     DefPathData::MacroDef(_) |\n                     DefPathData::ClosureExpr |"}, {"sha": "d92001704285a84a34240e63dc5846faad6aaa0d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9bd2a60085acfc046365bab4cfa009cb6b9b773/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bd2a60085acfc046365bab4cfa009cb6b9b773/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=b9bd2a60085acfc046365bab4cfa009cb6b9b773", "patch": "@@ -612,6 +612,13 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n             other => return other,\n         }\n     }\n+    // the first trace is for replicating an ice\n+    // There's no tracking issue, but the next two lines concatenated link to the discussion on\n+    // zulip. It's not really possible to test this, because it doesn't show up in diagnostics\n+    // or MIR.\n+    // https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/\n+    // subject/anon_const_instance_printing/near/135980032\n+    trace!(\"const eval: {}\", key.value.instance);\n     trace!(\"const eval: {:?}\", key);\n \n     let cid = key.value;"}]}