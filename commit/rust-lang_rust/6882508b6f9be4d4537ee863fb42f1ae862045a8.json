{"sha": "6882508b6f9be4d4537ee863fb42f1ae862045a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ODI1MDhiNmY5YmU0ZDQ1MzdlZTg2M2ZiNDJmMWFlODYyMDQ1YTg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-02T03:24:24Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:56Z"}, "message": "Add kill::Death for task death services and use it in Task.", "tree": {"sha": "5a1edb7eb32c8c20602de4eaa225ffc200db9d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a1edb7eb32c8c20602de4eaa225ffc200db9d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6882508b6f9be4d4537ee863fb42f1ae862045a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6882508b6f9be4d4537ee863fb42f1ae862045a8", "html_url": "https://github.com/rust-lang/rust/commit/6882508b6f9be4d4537ee863fb42f1ae862045a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6882508b6f9be4d4537ee863fb42f1ae862045a8/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9", "html_url": "https://github.com/rust-lang/rust/commit/52ca256d7be99dafa81c531bf1fc6ec2e2a508b9"}], "stats": {"total": 101, "additions": 79, "deletions": 22}, "files": [{"sha": "a18c8cac2156c34901bc4ac8535c8f83b6d96ec0", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=6882508b6f9be4d4537ee863fb42f1ae862045a8", "patch": "@@ -37,6 +37,18 @@ struct KillHandleInner {\n #[deriving(Clone)]\n pub struct KillHandle(UnsafeAtomicRcBox<KillHandleInner>);\n \n+/// Per-task state related to task death, killing, failure, etc.\n+pub struct Death {\n+    // Shared among this task, its watched children, and any linked tasks who\n+    // might kill it. This is optional so we can take it by-value at exit time.\n+    kill_handle:     Option<KillHandle>,\n+    // Handle to a watching parent, if we have one, for exit code propagation.\n+    watching_parent: Option<KillHandle>,\n+    // Action to be done with the exit code. If set, also makes the task wait\n+    // until all its watched children exit before collecting the status.\n+    on_exit:         Option<~fn(bool)>,\n+}\n+\n impl KillHandle {\n     pub fn new() -> KillHandle {\n         KillHandle(UnsafeAtomicRcBox::new(KillHandleInner {\n@@ -126,3 +138,58 @@ impl KillHandle {\n     }\n }\n \n+impl Death {\n+    pub fn new() -> Death {\n+        Death {\n+            kill_handle:     Some(KillHandle::new()),\n+            watching_parent: None,\n+            on_exit:         None,\n+        }\n+    }\n+\n+    pub fn new_child(&self) -> Death {\n+        // FIXME(#7327)\n+        Death {\n+            kill_handle:     Some(KillHandle::new()),\n+            watching_parent: self.kill_handle.clone(),\n+            on_exit:         None,\n+        }\n+    }\n+\n+    /// Collect failure exit codes from children and propagate them to a parent.\n+    pub fn collect_failure(&mut self, mut success: bool) {\n+        // Step 1. Decide if we need to collect child failures synchronously.\n+        do self.on_exit.take_map |on_exit| {\n+            if success {\n+                // We succeeded, but our children might not. Need to wait for them.\n+                let mut inner = unsafe { self.kill_handle.take_unwrap().unwrap() };\n+                if inner.any_child_failed {\n+                    success = false;\n+                } else {\n+                    // Lockless access to tombstones protected by unwrap barrier.\n+                    success = inner.child_tombstones.take_map_default(true, |f| f());\n+                }\n+            }\n+            on_exit(success);\n+        };\n+\n+        // Step 2. Possibly alert possibly-watching parent to failure status.\n+        // Note that as soon as parent_handle goes out of scope, the parent\n+        // can successfully unwrap its handle and collect our reported status.\n+        do self.watching_parent.take_map |mut parent_handle| {\n+            if success {\n+                // Our handle might be None if we had an exit callback, and\n+                // already unwrapped it. But 'success' being true means no\n+                // child failed, so there's nothing to do (see below case).\n+                do self.kill_handle.take_map |own_handle| {\n+                    own_handle.reparent_children_to(&mut parent_handle);\n+                };\n+            } else {\n+                // Can inform watching parent immediately that we failed.\n+                // (Note the importance of non-failing tasks NOT writing\n+                // 'false', which could obscure another task's failure.)\n+                parent_handle.notify_immediate_failure();\n+            }\n+        };\n+    }\n+}"}, {"sha": "f01ef31b196db468a53b15c140aedf42ddacf209", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=6882508b6f9be4d4537ee863fb42f1ae862045a8", "patch": "@@ -280,7 +280,7 @@ pub fn run(main: ~fn()) -> int {\n     let main_cell = Cell::new(main);\n     let mut main_task = ~Task::new_root(&mut scheds[0].stack_pool,\n                                     main_cell.take());\n-    main_task.on_exit = Some(on_exit);\n+    main_task.death.on_exit = Some(on_exit);\n     scheds[0].enqueue_task(main_task);\n \n     // Run each scheduler in a thread."}, {"sha": "d4a51afd506a20006247ff177729c61f1c4dcffa", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=6882508b6f9be4d4537ee863fb42f1ae862045a8", "patch": "@@ -20,6 +20,7 @@ use libc::{c_void, uintptr_t};\n use ptr;\n use prelude::*;\n use option::{Option, Some, None};\n+use rt::kill::Death;\n use rt::local::Local;\n use rt::logging::StdErrLogger;\n use super::local_heap::LocalHeap;\n@@ -36,8 +37,8 @@ pub struct Task {\n     logger: StdErrLogger,\n     unwinder: Unwinder,\n     home: Option<SchedHome>,\n-    join_latch: Option<~JoinLatch>,\n-    on_exit: Option<~fn(bool)>,\n+    death: Death,\n+    join_latch: Option<~JoinLatch>, // FIXME(#7544) remove\n     destroyed: bool,\n     coroutine: Option<~Coroutine>\n }\n@@ -86,8 +87,8 @@ impl Task {\n             logger: StdErrLogger,\n             unwinder: Unwinder { unwinding: false },\n             home: Some(home),\n+            death: Death::new(),\n             join_latch: Some(JoinLatch::new_root()),\n-            on_exit: None,\n             destroyed: false,\n             coroutine: Some(~Coroutine::new(stack_pool, start))\n         }\n@@ -104,8 +105,9 @@ impl Task {\n             logger: StdErrLogger,\n             home: Some(home),\n             unwinder: Unwinder { unwinding: false },\n+            // FIXME(#7544) make watching optional\n+            death: self.death.new_child(),\n             join_latch: Some(self.join_latch.get_mut_ref().new_child()),\n-            on_exit: None,\n             destroyed: false,\n             coroutine: Some(~Coroutine::new(stack_pool, start))\n         }\n@@ -123,20 +125,8 @@ impl Task {\n         }\n \n         self.unwinder.try(f);\n+        self.death.collect_failure(!self.unwinder.unwinding);\n         self.destroy();\n-\n-        // Wait for children. Possibly report the exit status.\n-        let local_success = !self.unwinder.unwinding;\n-        let join_latch = self.join_latch.take_unwrap();\n-        match self.on_exit {\n-            Some(ref on_exit) => {\n-                let success = join_latch.wait(local_success);\n-                (*on_exit)(success);\n-            }\n-            None => {\n-                join_latch.release(local_success);\n-            }\n-        }\n     }\n \n     /// must be called manually before finalization to clean up"}, {"sha": "a4242d83ecde1b1318c413d808ad7516ed9aa1e3", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=6882508b6f9be4d4537ee863fb42f1ae862045a8", "patch": "@@ -51,7 +51,7 @@ pub fn run_in_newsched_task(f: ~fn()) {\n         let mut task = ~Task::new_root(&mut sched.stack_pool,\n                                        f.take());\n         rtdebug!(\"newsched_task: %x\", to_uint(task));\n-        task.on_exit = Some(on_exit);\n+        task.death.on_exit = Some(on_exit);\n         sched.enqueue_task(task);\n         sched.run();\n     }\n@@ -109,7 +109,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         };\n         let mut main_task = ~Task::new_root(&mut scheds[0].stack_pool,\n                                         f_cell.take());\n-        main_task.on_exit = Some(on_exit);\n+        main_task.death.on_exit = Some(on_exit);\n         scheds[0].enqueue_task(main_task);\n \n         let mut threads = ~[];\n@@ -280,7 +280,7 @@ pub fn spawntask_try(f: ~fn()) -> Result<(), ()> {\n                            f.take())\n         }\n     };\n-    new_task.on_exit = Some(on_exit);\n+    new_task.death.on_exit = Some(on_exit);\n \n     let sched = Local::take::<Scheduler>();\n     do sched.switch_running_tasks_and_then(new_task) |sched, old_task| {"}, {"sha": "518b52a19fb69858184f0fa7853f092825166f28", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6882508b6f9be4d4537ee863fb42f1ae862045a8/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=6882508b6f9be4d4537ee863fb42f1ae862045a8", "patch": "@@ -616,7 +616,7 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n                 if success { Success } else { Failure }\n             )\n         };\n-        task.on_exit = Some(on_exit);\n+        task.death.on_exit = Some(on_exit);\n     }\n \n     rtdebug!(\"spawn about to take scheduler\");"}]}