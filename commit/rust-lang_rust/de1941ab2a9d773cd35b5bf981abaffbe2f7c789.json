{"sha": "de1941ab2a9d773cd35b5bf981abaffbe2f7c789", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTk0MWFiMmE5ZDc3M2NkMzViNWJmOTgxYWJhZmZiZTJmN2M3ODk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-07T13:33:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-07T13:33:44Z"}, "message": "Rollup merge of #72998 - poliorcetics:atomic-availability-doc, r=Amanieu\n\nMention that some atomic operations may not be available on some platforms\n\nfixes #54250\n\nThis simply adds a line saying the type/function/method may not be available on some platforms, depending on said platform capabilities.\n\nI *think* I got them all.", "tree": {"sha": "4099ed58eb94919596246126585a1bb2f4194560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4099ed58eb94919596246126585a1bb2f4194560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de1941ab2a9d773cd35b5bf981abaffbe2f7c789", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3Oy4CRBK7hj4Ov3rIwAAdHIIALB4tgGiIT2jFNakddaRPRBD\nv5/t/6csEH1HDI8R/clcOFTR9MkNxFHlIQVZpDr3xq7KXTOGhtIvGqP/yWnaxb9J\nQCiCJap4C6bKkv0hx7yCphLrsBBJXdMlxWOXsKyNcNelnpyFJBZklLOYBSULa/S+\nVZwYdIiMZ1Vj5KFcc4BwvA+ZlXLbEQyJg1UDd63Q8eULDrPpPOBLBSsUSSe2ZWgt\ntODKyi2jPekSl3ldxzWka+alowd6krle0Uxq/e8DgmToQvLjnLXkaOoaAdetGM5q\nuPtDpzIgxn9hqS5/1kxMx6O/AF4gi8TOexbA+Z7ueRONHTh/3J1AR6ACKWTH8t4=\n=t4Bx\n-----END PGP SIGNATURE-----\n", "payload": "tree 4099ed58eb94919596246126585a1bb2f4194560\nparent 1ff0ba03ef71abf1f744d9acba6d9b3c82c9764b\nparent 53984569e289867c2fb4518f6345928571fd053a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591536824 +0200\ncommitter GitHub <noreply@github.com> 1591536824 +0200\n\nRollup merge of #72998 - poliorcetics:atomic-availability-doc, r=Amanieu\n\nMention that some atomic operations may not be available on some platforms\n\nfixes #54250\n\nThis simply adds a line saying the type/function/method may not be available on some platforms, depending on said platform capabilities.\n\nI *think* I got them all.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de1941ab2a9d773cd35b5bf981abaffbe2f7c789", "html_url": "https://github.com/rust-lang/rust/commit/de1941ab2a9d773cd35b5bf981abaffbe2f7c789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de1941ab2a9d773cd35b5bf981abaffbe2f7c789/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ff0ba03ef71abf1f744d9acba6d9b3c82c9764b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff0ba03ef71abf1f744d9acba6d9b3c82c9764b", "html_url": "https://github.com/rust-lang/rust/commit/1ff0ba03ef71abf1f744d9acba6d9b3c82c9764b"}, {"sha": "53984569e289867c2fb4518f6345928571fd053a", "url": "https://api.github.com/repos/rust-lang/rust/commits/53984569e289867c2fb4518f6345928571fd053a", "html_url": "https://github.com/rust-lang/rust/commit/53984569e289867c2fb4518f6345928571fd053a"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "477cb24d6be67ad57747b46b024f56f251d38709", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/de1941ab2a9d773cd35b5bf981abaffbe2f7c789/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1941ab2a9d773cd35b5bf981abaffbe2f7c789/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=de1941ab2a9d773cd35b5bf981abaffbe2f7c789", "patch": "@@ -153,6 +153,9 @@ pub fn spin_loop_hint() {\n ///\n /// This type has the same in-memory representation as a [`bool`].\n ///\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of `u8`.\n+///\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -178,6 +181,9 @@ unsafe impl Sync for AtomicBool {}\n /// A raw pointer type which can be safely shared between threads.\n ///\n /// This type has the same in-memory representation as a `*mut T`.\n+///\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of pointers. Its size depends on the target pointer's size.\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(target_pointer_width = \"16\", repr(C, align(2)))]\n@@ -447,6 +453,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -481,6 +490,9 @@ impl AtomicBool {\n     /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n     /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -524,6 +536,8 @@ impl AtomicBool {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`Ordering`]: enum.Ordering.html\n@@ -586,6 +600,9 @@ impl AtomicBool {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n@@ -646,6 +663,9 @@ impl AtomicBool {\n     /// [`Release`]: enum.Ordering.html#variant.Release\n     /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -683,6 +703,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -737,6 +760,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -779,6 +805,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -981,6 +1010,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1017,6 +1049,9 @@ impl<T> AtomicPtr<T> {\n     /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n     /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1058,6 +1093,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1118,6 +1156,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n@@ -1223,6 +1264,13 @@ macro_rules! atomic_int {\n         /// non-atomic types as well as information about the portability of\n         /// this type, please see the [module-level documentation].\n         ///\n+        /// **Note:** This type is only available on platforms that support\n+        /// atomic loads and stores of [`\n+        #[doc = $s_int_type]\n+        /// `](\n+        #[doc = $int_ref]\n+        /// ).\n+        ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n         #[repr(C, align($align))]\n@@ -1408,6 +1456,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1444,6 +1495,9 @@ might fail and hence just perform an `Acquire` load, but not have `Release` sema\n Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n happens, and using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1496,6 +1550,9 @@ of this operation [`Relaxed`], and using [`Release`] makes the successful load\n [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1558,6 +1615,9 @@ and must be equivalent to or weaker than the success ordering.\n [`Acquire`]: enum.Ordering.html#variant.Acquire\n [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n # Examples\n \n ```\n@@ -1599,6 +1659,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1632,6 +1695,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1668,6 +1734,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1704,6 +1773,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1741,6 +1813,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1777,6 +1852,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1819,6 +1897,9 @@ of this operation [`Relaxed`], and using [`Release`] makes the final successful\n [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`bool`]: ../../../std/primitive.bool.html\n [`compare_exchange`]: #method.compare_exchange\n [`Ordering`]: enum.Ordering.html\n@@ -1870,6 +1951,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1917,6 +2001,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release"}]}