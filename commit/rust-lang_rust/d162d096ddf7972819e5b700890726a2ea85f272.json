{"sha": "d162d096ddf7972819e5b700890726a2ea85f272", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjJkMDk2ZGRmNzk3MjgxOWU1YjcwMDg5MDcyNmEyZWE4NWYyNzI=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-14T13:40:42Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-26T15:49:22Z"}, "message": "Rename asm! to llvm_asm!\n\nasm! is left as a wrapper around llvm_asm! to maintain compatibility.", "tree": {"sha": "10aef78eb9fffb1aa127609e953204a62b18ecef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10aef78eb9fffb1aa127609e953204a62b18ecef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d162d096ddf7972819e5b700890726a2ea85f272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d162d096ddf7972819e5b700890726a2ea85f272", "html_url": "https://github.com/rust-lang/rust/commit/d162d096ddf7972819e5b700890726a2ea85f272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d162d096ddf7972819e5b700890726a2ea85f272/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbb07525e2f07a815e780a4268b11916248b5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbb07525e2f07a815e780a4268b11916248b5a9", "html_url": "https://github.com/rust-lang/rust/commit/2fbb07525e2f07a815e780a4268b11916248b5a9"}], "stats": {"total": 400, "additions": 213, "deletions": 187}, "files": [{"sha": "e07f716e5671892ccfc695fea86bea1f3184b82b", "filename": "src/doc/unstable-book/src/library-features/llvm-asm.md", "status": "renamed", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,25 +1,25 @@\n-# `asm`\n+# `llvm_asm`\n \n-The tracking issue for this feature is: [#29722]\n+The tracking issue for this feature is: [#70173]\n \n-[#29722]: https://github.com/rust-lang/rust/issues/29722\n+[#70173]: https://github.com/rust-lang/rust/issues/70173\n \n ------------------------\n \n For extremely low-level manipulations and performance reasons, one\n might wish to control the CPU directly. Rust supports using inline\n-assembly to do this via the `asm!` macro.\n+assembly to do this via the `llvm_asm!` macro.\n \n ```rust,ignore\n-asm!(assembly template\n+llvm_asm!(assembly template\n    : output operands\n    : input operands\n    : clobbers\n    : options\n    );\n ```\n \n-Any use of `asm` is feature gated (requires `#![feature(asm)]` on the\n+Any use of `llvm_asm` is feature gated (requires `#![feature(llvm_asm)]` on the\n crate to allow) and of course requires an `unsafe` block.\n \n > **Note**: the examples here are given in x86/x86-64 assembly, but\n@@ -31,12 +31,12 @@ The `assembly template` is the only required parameter and must be a\n literal string (i.e. `\"\"`)\n \n ```rust\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn foo() {\n     unsafe {\n-        asm!(\"NOP\");\n+        llvm_asm!(\"NOP\");\n     }\n }\n \n@@ -51,16 +51,16 @@ fn main() {\n }\n ```\n \n-(The `feature(asm)` and `#[cfg]`s are omitted from now on.)\n+(The `feature(llvm_asm)` and `#[cfg]`s are omitted from now on.)\n \n Output operands, input operands, clobbers and options are all optional\n but you must add the right number of `:` if you skip them:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n-asm!(\"xor %eax, %eax\"\n+llvm_asm!(\"xor %eax, %eax\"\n     :\n     :\n     : \"eax\"\n@@ -73,10 +73,10 @@ asm!(\"xor %eax, %eax\"\n Whitespace also doesn't matter:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n-asm!(\"xor %eax, %eax\" ::: \"eax\");\n+llvm_asm!(\"xor %eax, %eax\" ::: \"eax\");\n # } }\n # #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n # fn main() {}\n@@ -89,12 +89,12 @@ Input and output operands follow the same format: `:\n expressions must be mutable lvalues, or not yet assigned:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn add(a: i32, b: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        asm!(\"add $2, $0\"\n+        llvm_asm!(\"add $2, $0\"\n              : \"=r\"(c)\n              : \"0\"(a), \"r\"(b)\n              );\n@@ -116,11 +116,11 @@ operand. This is useful for very low level programming, where\n which register you use is important:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # unsafe fn read_byte_in(port: u16) -> u8 {\n let result: u8;\n-asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n+llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n result\n # }\n ```\n@@ -133,11 +133,11 @@ compiler not to assume any values loaded into those registers will\n stay valid.\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n // Put the value 0x200 in eax:\n-asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n+llvm_asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n # } }\n # #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n # fn main() {}\n@@ -167,12 +167,12 @@ Current valid options are:\n 3. *intel* - use intel syntax instead of the default AT&T.\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() {\n let result: i32;\n unsafe {\n-   asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n+   llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n }\n println!(\"eax is currently {}\", result);\n # }\n@@ -182,12 +182,12 @@ println!(\"eax is currently {}\", result);\n \n ## More Information\n \n-The current implementation of the `asm!` macro is a direct binding to [LLVM's\n+The current implementation of the `llvm_asm!` macro is a direct binding to [LLVM's\n inline assembler expressions][llvm-docs], so be sure to check out [their\n documentation as well][llvm-docs] for more information about clobbers,\n constraints, etc.\n \n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n If you need more power and don't mind losing some of the niceties of\n-`asm!`, check out [global_asm](global-asm.md).\n+`llvm_asm!`, check out [global_asm](global-asm.md).", "previous_filename": "src/doc/unstable-book/src/library-features/asm.md"}, {"sha": "698c97999c4570ac0608032e7eac7ae66393421b", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -113,7 +113,7 @@ pub fn black_box<T>(dummy: T) -> T {\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n     unsafe {\n-        asm!(\"\" : : \"r\"(&dummy));\n+        llvm_asm!(\"\" : : \"r\"(&dummy));\n         dummy\n     }\n }"}, {"sha": "73c5e3fad475dda1f19a3d6979cc00239e7668d6", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -98,6 +98,7 @@\n #![feature(is_sorted)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![feature(llvm_asm)]\n #![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "f67762cd04346b97c963376e02b06bd2ff4292cc", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1307,7 +1307,7 @@ pub(crate) mod builtin {\n     /// [unstable book]: ../unstable-book/library-features/asm.html\n     #[unstable(\n         feature = \"asm\",\n-        issue = \"29722\",\n+        issue = \"70173\",\n         reason = \"inline assembly is not stable enough for use and is subject to change\"\n     )]\n     #[rustc_builtin_macro]\n@@ -1322,6 +1322,47 @@ pub(crate) mod builtin {\n         };\n     }\n \n+    /// Inline assembly.\n+    ///\n+    /// Read the [unstable book] for the usage.\n+    ///\n+    /// [unstable book]: ../unstable-book/library-features/asm.html\n+    #[cfg(bootstrap)]\n+    #[unstable(\n+        feature = \"llvm_asm\",\n+        issue = \"70173\",\n+        reason = \"inline assembly is not stable enough for use and is subject to change\"\n+    )]\n+    #[macro_export]\n+    #[allow_internal_unstable(asm)]\n+    macro_rules! llvm_asm {\n+        // Redirect to asm! for stage0\n+        ($($arg:tt)*) => { $crate::asm!($($arg)*) }\n+    }\n+\n+    /// Inline assembly.\n+    ///\n+    /// Read the [unstable book] for the usage.\n+    ///\n+    /// [unstable book]: ../unstable-book/library-features/asm.html\n+    #[cfg(not(bootstrap))]\n+    #[unstable(\n+        feature = \"llvm_asm\",\n+        issue = \"70173\",\n+        reason = \"inline assembly is not stable enough for use and is subject to change\"\n+    )]\n+    #[rustc_builtin_macro]\n+    #[macro_export]\n+    macro_rules! llvm_asm {\n+        (\"assembly template\"\n+                        : $(\"output\"(operand),)*\n+                        : $(\"input\"(operand),)*\n+                        : $(\"clobbers\",)*\n+                        : $(\"options\",)*) => {\n+            /* compiler built-in */\n+        };\n+    }\n+\n     /// Module-level inline assembly.\n     #[unstable(\n         feature = \"global_asm\","}, {"sha": "aaeb4d8a22c297eee22fb9514d1fe85ee60e6ad6", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -60,7 +60,7 @@ mod fpu_precision {\n     fn set_cw(cw: u16) {\n         // SAFETY: the `fldcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { asm!(\"fldcw $0\" :: \"m\" (cw) :: \"volatile\") }\n+        unsafe { llvm_asm!(\"fldcw $0\" :: \"m\" (cw) :: \"volatile\") }\n     }\n \n     /// Sets the precision field of the FPU to `T` and returns a `FPUControlWord`.\n@@ -78,7 +78,7 @@ mod fpu_precision {\n         // `FPUControlWord` structure is dropped\n         // SAFETY: the `fnstcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { asm!(\"fnstcw $0\" : \"=*m\" (&cw) ::: \"volatile\") }\n+        unsafe { llvm_asm!(\"fnstcw $0\" : \"=*m\" (&cw) ::: \"volatile\") }\n \n         // Set the control word to the desired precision. This is achieved by masking away the old\n         // precision (bits 8 and 9, 0x300) and replacing it with the precision flag computed above."}, {"sha": "9b4ed4e82051289e130bc3c600098c1817197105", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -57,8 +57,8 @@ pub use crate::hash::macros::Hash;\n #[doc(no_inline)]\n pub use crate::{\n     asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, global_asm, include, include_bytes, include_str, line, log_syntax, module_path,\n-    option_env, stringify, trace_macros,\n+    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "9ba9d816d0f3f541c887c264504e453716b9edfa", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1584,7 +1584,7 @@ pub enum StatementKind<'tcx> {\n \n     /// Executes a piece of inline Assembly. Stored in a Box to keep the size\n     /// of `StatementKind` low.\n-    InlineAsm(Box<InlineAsm<'tcx>>),\n+    LlvmInlineAsm(Box<LlvmInlineAsm<'tcx>>),\n \n     /// Retag references in the given place, ensuring they got fresh tags. This is\n     /// part of the Stacked Borrows model. These statements are currently only interpreted\n@@ -1668,8 +1668,8 @@ pub enum FakeReadCause {\n }\n \n #[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n-pub struct InlineAsm<'tcx> {\n-    pub asm: hir::InlineAsmInner,\n+pub struct LlvmInlineAsm<'tcx> {\n+    pub asm: hir::LlvmInlineAsmInner,\n     pub outputs: Box<[Place<'tcx>]>,\n     pub inputs: Box<[(Span, Operand<'tcx>)]>,\n }\n@@ -1696,8 +1696,8 @@ impl Debug for Statement<'_> {\n             SetDiscriminant { ref place, variant_index } => {\n                 write!(fmt, \"discriminant({:?}) = {:?}\", place, variant_index)\n             }\n-            InlineAsm(ref asm) => {\n-                write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm.asm, asm.outputs, asm.inputs)\n+            LlvmInlineAsm(ref asm) => {\n+                write!(fmt, \"llvm_asm!({:?} : {:?} : {:?})\", asm.asm, asm.outputs, asm.inputs)\n             }\n             AscribeUserType(box (ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)"}, {"sha": "c1b27b40f7dcf90fc9db2092dd15ab6de9b13773", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -385,7 +385,7 @@ macro_rules! make_mir_visitor {\n                             location\n                         );\n                     }\n-                    StatementKind::InlineAsm(asm) => {\n+                    StatementKind::LlvmInlineAsm(asm) => {\n                         for output in & $($mutability)? asm.outputs[..] {\n                             self.visit_place(\n                                 output,"}, {"sha": "429791d09a49c00ebe07cd5c3ada237c36f149cf", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -263,7 +263,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_span::symbol::Symbol,\n     ::rustc_hir::def::Res,\n     ::rustc_hir::def_id::DefId,\n-    ::rustc_hir::InlineAsmInner,\n+    ::rustc_hir::LlvmInlineAsmInner,\n     ::rustc_hir::MatchSource,\n     ::rustc_hir::Mutability,\n     ::rustc_hir::Unsafety,"}, {"sha": "646294a7cca7871801a49db77a392fbef11ab9cb", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1114,7 +1114,7 @@ impl Expr {\n             ExprKind::Break(..) => ExprPrecedence::Break,\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n-            ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n+            ExprKind::LlvmInlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::MacCall(..) => ExprPrecedence::Mac,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n@@ -1243,8 +1243,8 @@ pub enum ExprKind {\n     /// A `return`, with an optional value to be returned.\n     Ret(Option<P<Expr>>),\n \n-    /// Output of the `asm!()` macro.\n-    InlineAsm(P<InlineAsm>),\n+    /// Output of the `llvm_asm!()` macro.\n+    LlvmInlineAsm(P<LlvmInlineAsm>),\n \n     /// A macro invocation; pre-expansion.\n     MacCall(MacCall),\n@@ -1860,37 +1860,37 @@ pub enum TraitObjectSyntax {\n \n /// Inline assembly dialect.\n ///\n-/// E.g., `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n+/// E.g., `\"intel\"` as in `llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n-pub enum AsmDialect {\n+pub enum LlvmAsmDialect {\n     Att,\n     Intel,\n }\n \n-/// Inline assembly.\n+/// LLVM-style inline assembly.\n ///\n-/// E.g., `\"={eax}\"(result)` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n+/// E.g., `\"={eax}\"(result)` as in `llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct InlineAsmOutput {\n+pub struct LlvmInlineAsmOutput {\n     pub constraint: Symbol,\n     pub expr: P<Expr>,\n     pub is_rw: bool,\n     pub is_indirect: bool,\n }\n \n-/// Inline assembly.\n+/// LLVM-style inline assembly.\n ///\n-/// E.g., `asm!(\"NOP\");`.\n+/// E.g., `llvm_asm!(\"NOP\");`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct InlineAsm {\n+pub struct LlvmInlineAsm {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<InlineAsmOutput>,\n+    pub outputs: Vec<LlvmInlineAsmOutput>,\n     pub inputs: Vec<(Symbol, P<Expr>)>,\n     pub clobbers: Vec<Symbol>,\n     pub volatile: bool,\n     pub alignstack: bool,\n-    pub dialect: AsmDialect,\n+    pub dialect: LlvmAsmDialect,\n }\n \n /// A parameter in a function header."}, {"sha": "67f7764d5bb27bf94a8f3923abd04060a8f6f300", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1202,8 +1202,8 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr,\n         ExprKind::Ret(expr) => {\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ExprKind::InlineAsm(asm) => {\n-            let InlineAsm {\n+        ExprKind::LlvmInlineAsm(asm) => {\n+            let LlvmInlineAsm {\n                 asm: _,\n                 asm_str_style: _,\n                 outputs,\n@@ -1214,7 +1214,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr,\n                 dialect: _,\n             } = asm.deref_mut();\n             for out in outputs {\n-                let InlineAsmOutput { constraint: _, expr, is_rw: _, is_indirect: _ } = out;\n+                let LlvmInlineAsmOutput { constraint: _, expr, is_rw: _, is_indirect: _ } = out;\n                 vis.visit_expr(expr);\n             }\n             visit_vec(inputs, |(_c, expr)| vis.visit_expr(expr));"}, {"sha": "cc2b1c48b51acc093fda84303c9a2ae618a3c23c", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -813,7 +813,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         }\n         ExprKind::MacCall(ref mac) => visitor.visit_mac(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n-        ExprKind::InlineAsm(ref ia) => {\n+        ExprKind::LlvmInlineAsm(ref ia) => {\n             for &(_, ref input) in &ia.inputs {\n                 visitor.visit_expr(input)\n             }"}, {"sha": "9984eb4e2825ff0f42a452cbd9b4905e530d9451", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -159,7 +159,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let e = e.as_ref().map(|x| self.lower_expr(x));\n                 hir::ExprKind::Ret(e)\n             }\n-            ExprKind::InlineAsm(ref asm) => self.lower_expr_asm(asm),\n+            ExprKind::LlvmInlineAsm(ref asm) => self.lower_expr_asm(asm),\n             ExprKind::Struct(ref path, ref fields, ref maybe_expr) => {\n                 let maybe_expr = maybe_expr.as_ref().map(|x| self.lower_expr(x));\n                 hir::ExprKind::Struct(\n@@ -952,13 +952,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         result\n     }\n \n-    fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind<'hir> {\n-        let inner = hir::InlineAsmInner {\n+    fn lower_expr_asm(&mut self, asm: &LlvmInlineAsm) -> hir::ExprKind<'hir> {\n+        let inner = hir::LlvmInlineAsmInner {\n             inputs: asm.inputs.iter().map(|&(c, _)| c).collect(),\n             outputs: asm\n                 .outputs\n                 .iter()\n-                .map(|out| hir::InlineAsmOutput {\n+                .map(|out| hir::LlvmInlineAsmOutput {\n                     constraint: out.constraint,\n                     is_rw: out.is_rw,\n                     is_indirect: out.is_indirect,\n@@ -972,7 +972,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,\n         };\n-        let hir_asm = hir::InlineAsm {\n+        let hir_asm = hir::LlvmInlineAsm {\n             inner,\n             inputs_exprs: self.arena.alloc_from_iter(\n                 asm.inputs.iter().map(|&(_, ref input)| self.lower_expr_mut(input)),\n@@ -981,7 +981,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .arena\n                 .alloc_from_iter(asm.outputs.iter().map(|out| self.lower_expr_mut(&out.expr))),\n         };\n-        hir::ExprKind::InlineAsm(self.arena.alloc(hir_asm))\n+        hir::ExprKind::LlvmInlineAsm(self.arena.alloc(hir_asm))\n     }\n \n     fn lower_field(&mut self, f: &Field) -> hir::Field<'hir> {"}, {"sha": "885f2f939a653d2f060721c67de747cc933fff45", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -716,12 +716,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match &expr.kind {\n-            ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n+            ExprKind::LlvmInlineAsm(..) if !self.session.target.target.options.allow_asm => {\n                 struct_span_err!(\n                     self.session,\n                     expr.span,\n                     E0472,\n-                    \"asm! is unsupported on this target\"\n+                    \"llvm_asm! is unsupported on this target\"\n                 )\n                 .emit();\n             }"}, {"sha": "2d6932ffbeedff3bae25e8906837162a165a9041", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -2024,8 +2024,8 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n                 }\n             }\n-            ast::ExprKind::InlineAsm(ref a) => {\n-                self.s.word(\"asm!\");\n+            ast::ExprKind::LlvmInlineAsm(ref a) => {\n+                self.s.word(\"llvm_asm!\");\n                 self.popen();\n                 self.print_string(&a.asm.as_str(), a.asm_str_style);\n                 self.word_space(\":\");\n@@ -2066,7 +2066,7 @@ impl<'a> State<'a> {\n                 if a.alignstack {\n                     options.push(\"alignstack\");\n                 }\n-                if a.dialect == ast::AsmDialect::Intel {\n+                if a.dialect == ast::LlvmAsmDialect::Intel {\n                     options.push(\"intel\");\n                 }\n "}, {"sha": "caed0bf7a0862df35ce1b73c8f8569bd83d0f077", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -19,7 +19,6 @@ use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n-mod asm;\n mod assert;\n mod cfg;\n mod cfg_accessible;\n@@ -32,6 +31,7 @@ mod format;\n mod format_foreign;\n mod global_allocator;\n mod global_asm;\n+mod llvm_asm;\n mod log_syntax;\n mod source_util;\n mod test;\n@@ -61,7 +61,7 @@ pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n     }\n \n     register_bang! {\n-        asm: asm::expand_asm,\n+        asm: llvm_asm::expand_llvm_asm,\n         assert: assert::expand_assert,\n         cfg: cfg::expand_cfg,\n         column: source_util::expand_column,\n@@ -77,6 +77,7 @@ pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n         include_str: source_util::expand_include_str,\n         include: source_util::expand_include,\n         line: source_util::expand_line,\n+        llvm_asm: llvm_asm::expand_llvm_asm,\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,"}, {"sha": "88756f533d412da81f43ec763751df3ab4901b25", "filename": "src/librustc_builtin_macros/llvm_asm.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,8 +1,8 @@\n-// Inline assembly support.\n+// Llvm-style inline assembly support.\n //\n use State::*;\n \n-use rustc_ast::ast::{self, AsmDialect};\n+use rustc_ast::ast::{self, LlvmAsmDialect};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{self, TokenStream};\n@@ -36,7 +36,7 @@ impl State {\n \n const OPTIONS: &[Symbol] = &[sym::volatile, sym::alignstack, sym::intel];\n \n-pub fn expand_asm<'cx>(\n+pub fn expand_llvm_asm<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     tts: TokenStream,\n@@ -58,7 +58,7 @@ pub fn expand_asm<'cx>(\n \n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n-        kind: ast::ExprKind::InlineAsm(P(inline_asm)),\n+        kind: ast::ExprKind::LlvmInlineAsm(P(inline_asm)),\n         span: cx.with_def_site_ctxt(sp),\n         attrs: ast::AttrVec::new(),\n     }))\n@@ -80,9 +80,9 @@ fn parse_inline_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n     tts: TokenStream,\n-) -> Result<Option<ast::InlineAsm>, DiagnosticBuilder<'a>> {\n-    // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being\n-    // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n+) -> Result<Option<ast::LlvmInlineAsm>, DiagnosticBuilder<'a>> {\n+    // Split the tts before the first colon, to avoid `llvm_asm!(\"x\": y)`  being\n+    // parsed as `llvm_asm!(z)` with `z = \"x\": y` which is type ascription.\n     let first_colon = tts\n         .trees()\n         .position(|tt| match tt {\n@@ -99,7 +99,7 @@ fn parse_inline_asm<'a>(\n     let mut clobs = Vec::new();\n     let mut volatile = false;\n     let mut alignstack = false;\n-    let mut dialect = AsmDialect::Att;\n+    let mut dialect = LlvmAsmDialect::Att;\n \n     let mut state = Asm;\n \n@@ -183,7 +183,7 @@ fn parse_inline_asm<'a>(\n \n                     let is_rw = output.is_some();\n                     let is_indirect = constraint_str.contains('*');\n-                    outputs.push(ast::InlineAsmOutput {\n+                    outputs.push(ast::LlvmInlineAsmOutput {\n                         constraint: output.unwrap_or(constraint),\n                         expr,\n                         is_rw,\n@@ -257,7 +257,7 @@ fn parse_inline_asm<'a>(\n                 } else if option == sym::alignstack {\n                     alignstack = true;\n                 } else if option == sym::intel {\n-                    dialect = AsmDialect::Intel;\n+                    dialect = LlvmAsmDialect::Intel;\n                 } else {\n                     cx.span_warn(p.prev_token.span, \"unrecognized option\");\n                 }\n@@ -287,7 +287,7 @@ fn parse_inline_asm<'a>(\n         }\n     }\n \n-    Ok(Some(ast::InlineAsm {\n+    Ok(Some(ast::LlvmInlineAsm {\n         asm,\n         asm_str_style: asm_str_style.unwrap(),\n         outputs,", "previous_filename": "src/librustc_builtin_macros/asm.rs"}, {"sha": "30bf3ce752859e34e132497e3bcbef0097b232d2", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -14,9 +14,9 @@ use libc::{c_char, c_uint};\n use log::debug;\n \n impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n-    fn codegen_inline_asm(\n+    fn codegen_llvm_inline_asm(\n         &mut self,\n-        ia: &hir::InlineAsmInner,\n+        ia: &hir::LlvmInlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, &'ll Value>>,\n         mut inputs: Vec<&'ll Value>,\n         span: Span,\n@@ -138,7 +138,7 @@ fn inline_asm_call(\n     output: &'ll llvm::Type,\n     volatile: bool,\n     alignstack: bool,\n-    dia: ::rustc_ast::ast::AsmDialect,\n+    dia: ::rustc_ast::ast::LlvmAsmDialect,\n ) -> Option<&'ll Value> {\n     let volatile = if volatile { llvm::True } else { llvm::False };\n     let alignstack = if alignstack { llvm::True } else { llvm::False };"}, {"sha": "1d61d95cc6bf3ee60c1f4e25441594fb2ad08fec", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -389,10 +389,10 @@ pub enum AsmDialect {\n }\n \n impl AsmDialect {\n-    pub fn from_generic(asm: rustc_ast::ast::AsmDialect) -> Self {\n+    pub fn from_generic(asm: rustc_ast::ast::LlvmAsmDialect) -> Self {\n         match asm {\n-            rustc_ast::ast::AsmDialect::Att => AsmDialect::Att,\n-            rustc_ast::ast::AsmDialect::Intel => AsmDialect::Intel,\n+            rustc_ast::ast::LlvmAsmDialect::Att => AsmDialect::Att,\n+            rustc_ast::ast::LlvmAsmDialect::Intel => AsmDialect::Intel,\n         }\n     }\n }"}, {"sha": "5edd9b9f0a05d07aa53bac7e8303512aede6b601", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n                 bx\n             }\n-            mir::StatementKind::InlineAsm(ref asm) => {\n+            mir::StatementKind::LlvmInlineAsm(ref asm) => {\n                 let outputs = asm\n                     .outputs\n                     .iter()\n@@ -93,7 +93,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 );\n \n                 if input_vals.len() == asm.inputs.len() {\n-                    let res = bx.codegen_inline_asm(\n+                    let res = bx.codegen_llvm_inline_asm(\n                         &asm.asm,\n                         outputs,\n                         input_vals,"}, {"sha": "1cdfd3ae356ddb81340120ceb75a8ca9c30af3d0", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,13 +1,13 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n-use rustc_hir::{GlobalAsm, InlineAsmInner};\n+use rustc_hir::{GlobalAsm, LlvmInlineAsmInner};\n use rustc_span::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     /// Take an inline assembly expression and splat it out via LLVM\n-    fn codegen_inline_asm(\n+    fn codegen_llvm_inline_asm(\n         &mut self,\n-        ia: &InlineAsmInner,\n+        ia: &LlvmInlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, Self::Value>>,\n         inputs: Vec<Self::Value>,\n         span: Span,"}, {"sha": "fe68e9eacbfdae2436a7216e07b2d4479f9bfdb4", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -541,7 +541,7 @@ E0751: include_str!(\"./error_codes/E0751.md\"),\n //  E0467, removed\n //  E0470, removed\n //  E0471, // constant evaluation error (in pattern)\n-    E0472, // asm! is unsupported on this target\n+    E0472, // llvm_asm! is unsupported on this target\n     E0473, // dereference of reference outside its lifetime\n     E0474, // captured variable `..` does not outlive the enclosing closure\n     E0475, // index of slice outside its lifetime"}, {"sha": "732de6a3818717d9ff61f78849fb729c4fd252ef", "filename": "src/librustc_error_codes/error_codes/E0660.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,9 +1,9 @@\n-The argument to the `asm` macro is not well-formed.\n+The argument to the `llvm_asm` macro is not well-formed.\n \n Erroneous code example:\n \n ```compile_fail,E0660\n-asm!(\"nop\" \"nop\");\n+llvm_asm!(\"nop\" \"nop\");\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "3d5cd90f6a37a9450e231b87321abb4829e6fcbf", "filename": "src/librustc_error_codes/error_codes/E0661.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,10 +1,10 @@\n-An invalid syntax was passed to the second argument of an `asm` macro line.\n+An invalid syntax was passed to the second argument of an `llvm_asm` macro line.\n \n Erroneous code example:\n \n ```compile_fail,E0661\n let a;\n-asm!(\"nop\" : \"r\"(a));\n+llvm_asm!(\"nop\" : \"r\"(a));\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "9858abd10c532546281924030f6cfa272db160dc", "filename": "src/librustc_error_codes/error_codes/E0662.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,12 +1,13 @@\n-An invalid input operand constraint was passed to the `asm` macro (third line).\n+An invalid input operand constraint was passed to the `llvm_asm` macro\n+(third line).\n \n Erroneous code example:\n \n ```compile_fail,E0662\n-asm!(\"xor %eax, %eax\"\n-     :\n-     : \"=test\"(\"a\")\n-    );\n+llvm_asm!(\"xor %eax, %eax\"\n+          :\n+          : \"=test\"(\"a\")\n+         );\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "36b87be7d6e38ad8012c09475de7d671f56d8ce0", "filename": "src/librustc_error_codes/error_codes/E0663.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,12 +1,13 @@\n-An invalid input operand constraint was passed to the `asm` macro (third line).\n+An invalid input operand constraint was passed to the `llvm_asm` macro\n+(third line).\n \n Erroneous code example:\n \n ```compile_fail,E0663\n-asm!(\"xor %eax, %eax\"\n-     :\n-     : \"+test\"(\"a\")\n-    );\n+llvm_asm!(\"xor %eax, %eax\"\n+          :\n+          : \"+test\"(\"a\")\n+         );\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "33924b14e6d6670c9f0505a9c77e607b6d5c49cc", "filename": "src/librustc_error_codes/error_codes/E0664.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1,13 +1,13 @@\n-A clobber was surrounded by braces in the `asm` macro.\n+A clobber was surrounded by braces in the `llvm_asm` macro.\n \n Erroneous code example:\n \n ```compile_fail,E0664\n-asm!(\"mov $$0x200, %eax\"\n-     :\n-     :\n-     : \"{eax}\"\n-    );\n+llvm_asm!(\"mov $$0x200, %eax\"\n+          :\n+          :\n+          : \"{eax}\"\n+         );\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "5d7c4cda05b28bb338295b7474db3efe44a459d2", "filename": "src/librustc_error_codes/error_codes/E0668.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -12,7 +12,7 @@ constraint (see issue #51430):\n fn main() {\n     let rax: u64;\n     unsafe {\n-        asm!(\"\" :\"={rax\"(rax));\n+        llvm_asm!(\"\" :\"={rax\"(rax));\n         println!(\"Accumulator is: {}\", rax);\n     }\n }"}, {"sha": "b8a691dd9813e7f4b10fdbfa2cefb665a346553f", "filename": "src/librustc_hir/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -28,7 +28,7 @@ macro_rules! arena_types {\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n-            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n+            [] inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n             [] local: rustc_hir::Local<$tcx>,\n             [few] macro_def: rustc_hir::MacroDef<$tcx>,\n             [] param: rustc_hir::Param<$tcx>,"}, {"sha": "4051febbd5860dfaf49be9a3d4cdfa42d309b897", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -8,7 +8,7 @@ crate use BlockCheckMode::*;\n crate use FnRetTy::*;\n crate use UnsafeSource::*;\n \n-use rustc_ast::ast::{self, AsmDialect, CrateSugar, Ident, Name};\n+use rustc_ast::ast::{self, CrateSugar, Ident, LlvmAsmDialect, Name};\n use rustc_ast::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use rustc_ast::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n@@ -1389,7 +1389,7 @@ impl Expr<'_> {\n             ExprKind::Break(..) => ExprPrecedence::Break,\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n-            ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n+            ExprKind::LlvmInlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n@@ -1444,7 +1444,7 @@ impl Expr<'_> {\n             | ExprKind::Ret(..)\n             | ExprKind::Loop(..)\n             | ExprKind::Assign(..)\n-            | ExprKind::InlineAsm(..)\n+            | ExprKind::LlvmInlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Lit(_)\n             | ExprKind::Unary(..)\n@@ -1631,8 +1631,8 @@ pub enum ExprKind<'hir> {\n     /// A `return`, with an optional value to be returned.\n     Ret(Option<&'hir Expr<'hir>>),\n \n-    /// Inline assembly (from `asm!`), with its outputs and inputs.\n-    InlineAsm(&'hir InlineAsm<'hir>),\n+    /// Inline assembly (from `llvm_asm!`), with its outputs and inputs.\n+    LlvmInlineAsm(&'hir LlvmInlineAsm<'hir>),\n \n     /// A struct or struct-like variant literal expression.\n     ///\n@@ -2061,7 +2061,7 @@ pub enum TyKind<'hir> {\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]\n-pub struct InlineAsmOutput {\n+pub struct LlvmInlineAsmOutput {\n     pub constraint: Symbol,\n     pub is_rw: bool,\n     pub is_indirect: bool,\n@@ -2071,20 +2071,20 @@ pub struct InlineAsmOutput {\n // NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n // it needs to be `Clone` and use plain `Vec<T>` instead of arena-allocated slice.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]\n-pub struct InlineAsmInner {\n+pub struct LlvmInlineAsmInner {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<InlineAsmOutput>,\n+    pub outputs: Vec<LlvmInlineAsmOutput>,\n     pub inputs: Vec<Symbol>,\n     pub clobbers: Vec<Symbol>,\n     pub volatile: bool,\n     pub alignstack: bool,\n-    pub dialect: AsmDialect,\n+    pub dialect: LlvmAsmDialect,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n-pub struct InlineAsm<'hir> {\n-    pub inner: InlineAsmInner,\n+pub struct LlvmInlineAsm<'hir> {\n+    pub inner: LlvmInlineAsmInner,\n     pub outputs_exprs: &'hir [Expr<'hir>],\n     pub inputs_exprs: &'hir [Expr<'hir>],\n }"}, {"sha": "7b8c9e2a4a2210e7a0a43ae751044566fc1cb1d0", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1151,7 +1151,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::InlineAsm(ref asm) => {\n+        ExprKind::LlvmInlineAsm(ref asm) => {\n             walk_list!(visitor, visit_expr, asm.outputs_exprs);\n             walk_list!(visitor, visit_expr, asm.inputs_exprs);\n         }"}, {"sha": "8df3b6dc669f87f53ffb339584ba3cd64c1a8417", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1388,9 +1388,9 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(&expr, parser::PREC_JUMP);\n                 }\n             }\n-            hir::ExprKind::InlineAsm(ref a) => {\n+            hir::ExprKind::LlvmInlineAsm(ref a) => {\n                 let i = &a.inner;\n-                self.s.word(\"asm!\");\n+                self.s.word(\"llvm_asm!\");\n                 self.popen();\n                 self.print_string(&i.asm.as_str(), i.asm_str_style);\n                 self.word_space(\":\");\n@@ -1435,7 +1435,7 @@ impl<'a> State<'a> {\n                 if i.alignstack {\n                     options.push(\"alignstack\");\n                 }\n-                if i.dialect == ast::AsmDialect::Intel {\n+                if i.dialect == ast::LlvmAsmDialect::Intel {\n                     options.push(\"intel\");\n                 }\n "}, {"sha": "3d1768cf0e596fa19cda67f61a4058ee1db80f56", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -68,7 +68,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n                 self.mutate_place(location, place, Shallow(None), JustWrite);\n             }\n-            StatementKind::InlineAsm(ref asm) => {\n+            StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should"}, {"sha": "91516887cf7cbeddac0440da3ae48f4d7d90916e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -550,7 +550,7 @@ impl<'cx, 'tcx> dataflow::generic::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt\n             StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n                 self.mutate_place(location, (place, span), Shallow(None), JustWrite, flow_state);\n             }\n-            StatementKind::InlineAsm(ref asm) => {\n+            StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should"}, {"sha": "289f147a3870a22f7c25d6cf1779e970f617719b", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -1529,7 +1529,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n-            | StatementKind::InlineAsm { .. }\n+            | StatementKind::LlvmInlineAsm { .. }\n             | StatementKind::Retag { .. }\n             | StatementKind::Nop => {}\n         }"}, {"sha": "4c46ac36f2aa494386ce89e330a6b34f6c8006c6", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -289,7 +289,7 @@ impl<'tcx> generic::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n                 self.kill_borrows_on_place(trans, &Place::from(local));\n             }\n \n-            mir::StatementKind::InlineAsm(ref asm) => {\n+            mir::StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect && !kind.is_rw {\n                         self.kill_borrows_on_place(trans, output);"}, {"sha": "3f50866b59092b914f2e0303961bb7a5c11ef492", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -124,7 +124,7 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n             | StatementKind::SetDiscriminant { box place, .. } => {\n                 trans.gen(place.local);\n             }\n-            StatementKind::InlineAsm(asm) => {\n+            StatementKind::LlvmInlineAsm(asm) => {\n                 for place in &*asm.outputs {\n                     trans.gen(place.local);\n                 }"}, {"sha": "8061765f66d907adb81101969d649f017de63048", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -295,7 +295,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::FakeRead(_, ref place) => {\n                 self.create_move_path(place);\n             }\n-            StatementKind::InlineAsm(ref asm) => {\n+            StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect {\n                         self.gather_init(output.as_ref(), InitKind::Deep);"}, {"sha": "01446c15ff691192026b2683f252dfb5fdb3ce45", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -124,7 +124,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // size of MIR constantly.\n             Nop => {}\n \n-            InlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n+            LlvmInlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n         }\n \n         self.stack[frame_idx].stmt += 1;"}, {"sha": "67ded01779b75e68f5370e6573c124beb5aecaf5", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -488,7 +488,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n-            | StatementKind::InlineAsm { .. }\n+            | StatementKind::LlvmInlineAsm { .. }\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Nop => {}"}, {"sha": "7d5f2860728690950a12aaca746f681bbb495062", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 // safe (at least as emitted during MIR construction)\n             }\n \n-            StatementKind::InlineAsm { .. } => self.require_unsafe(\n+            StatementKind::LlvmInlineAsm { .. } => self.require_unsafe(\n                 \"use of inline assembly\",\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n                 UnsafetyViolationKind::General,"}, {"sha": "b2d21d7a84befde4ab8bf68a834fb3c114bf29f9", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -230,7 +230,7 @@ fn check_statement(\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, place, span, def_id, body),\n \n-        StatementKind::InlineAsm { .. } => {\n+        StatementKind::LlvmInlineAsm { .. } => {\n             Err((span, \"cannot use inline assembly in const fn\".into()))\n         }\n "}, {"sha": "91f8b7b1c858db5c7095483bbb6ea7c28802699c", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -52,7 +52,7 @@ impl RemoveNoopLandingPads {\n \n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n-                | StatementKind::InlineAsm { .. }\n+                | StatementKind::LlvmInlineAsm { .. }\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "1c5f6762c6874465d79d8f180239e64244d96324", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -172,7 +172,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n                     // so we cannot assume that the `unreachable` terminator itself is reachable.\n                     // FIXME(Centril): use a normalization pass instead of a check.\n                     || bb.statements.iter().any(|stmt| match stmt.kind {\n-                        StatementKind::InlineAsm(..) => true,\n+                        StatementKind::LlvmInlineAsm(..) => true,\n                         _ => false,\n                     })\n                 })"}, {"sha": "c5c84acb6b2370ab51396310277ad42d7848b907", "filename": "src/librustc_mir/transform/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -29,7 +29,7 @@ impl MirPass<'_> for UnreachablePropagation {\n             // Accompanying testcases: mir-opt/unreachable_asm.rs and mir-opt/unreachable_asm_2.rs\n             let asm_stmt_in_block = || {\n                 bb_data.statements.iter().any(|stmt: &Statement<'_>| match stmt.kind {\n-                    StatementKind::InlineAsm(..) => true,\n+                    StatementKind::LlvmInlineAsm(..) => true,\n                     _ => false,\n                 })\n             };"}, {"sha": "8fa7bc7699030bc2923acdc3efe327de0c1a6ec6", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Return { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::StaticRef { .. }\n-            | ExprKind::InlineAsm { .. }\n+            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Yield { .. }\n             | ExprKind::Call { .. } => {\n                 // these are not places, so we need to make a temporary."}, {"sha": "4c7ff504722c5f624a2908a5e3a83c9fd408742f", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -251,7 +251,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Break { .. }\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n-            | ExprKind::InlineAsm { .. }\n+            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::PlaceTypeAscription { .. }\n             | ExprKind::ValueTypeAscription { .. } => {\n                 // these do not have corresponding `Rvalue` variants,"}, {"sha": "f8cae205453c3476847664420c50200b760610b8", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -64,7 +64,7 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n-            | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n+            | ExprKind::LlvmInlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),\n "}, {"sha": "62158d3b931248dddb11fc545389784ad05e4595", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -328,7 +328,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::AssignOp { .. }\n             | ExprKind::Continue { .. }\n             | ExprKind::Break { .. }\n-            | ExprKind::InlineAsm { .. }\n+            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Return { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr, None));\n                 this.cfg.push_assign_unit(block, source_info, destination);"}, {"sha": "1dc530a7bc88631da413611b221c8e0cce2c120f", "filename": "src/librustc_mir_build/build/expr/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -96,8 +96,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Return { value } => {\n                 this.break_scope(block, value, BreakableTarget::Return, source_info)\n             }\n-            ExprKind::InlineAsm { asm, outputs, inputs } => {\n-                debug!(\"stmt_expr InlineAsm block_context.push(SubExpr) : {:?}\", expr2);\n+            ExprKind::LlvmInlineAsm { asm, outputs, inputs } => {\n+                debug!(\"stmt_expr LlvmInlineAsm block_context.push(SubExpr) : {:?}\", expr2);\n                 this.block_context.push(BlockFrame::SubExpr);\n                 let outputs = outputs\n                     .into_iter()\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::InlineAsm(box InlineAsm {\n+                        kind: StatementKind::LlvmInlineAsm(box LlvmInlineAsm {\n                             asm: asm.clone(),\n                             outputs,\n                             inputs,"}, {"sha": "ba17e2a75aaf3c1419ccbd3390583637a02343e6", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -398,7 +398,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             convert_path_expr(cx, expr, res)\n         }\n \n-        hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {\n+        hir::ExprKind::LlvmInlineAsm(ref asm) => ExprKind::LlvmInlineAsm {\n             asm: &asm.inner,\n             outputs: asm.outputs_exprs.to_ref(),\n             inputs: asm.inputs_exprs.to_ref(),"}, {"sha": "ed60c79903d6a3aa8cae6f65b46d1db0796fa916", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -277,8 +277,8 @@ crate enum ExprKind<'tcx> {\n         literal: &'tcx Const<'tcx>,\n         def_id: DefId,\n     },\n-    InlineAsm {\n-        asm: &'tcx hir::InlineAsmInner,\n+    LlvmInlineAsm {\n+        asm: &'tcx hir::LlvmInlineAsmInner,\n         outputs: Vec<ExprRef<'tcx>>,\n         inputs: Vec<ExprRef<'tcx>>,\n     },"}, {"sha": "93c2449aaccf3009336201492b176a7649d5bb22", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -532,7 +532,7 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::AssignOp(..)\n         | hir::ExprKind::Struct(..)\n         | hir::ExprKind::Repeat(..)\n-        | hir::ExprKind::InlineAsm(..)\n+        | hir::ExprKind::LlvmInlineAsm(..)\n         | hir::ExprKind::Box(..)\n         | hir::ExprKind::Yield(..)\n         | hir::ExprKind::Type(..)\n@@ -1183,7 +1183,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             | hir::ExprKind::Yield(ref e, _)\n             | hir::ExprKind::Repeat(ref e, _) => self.propagate_through_expr(&e, succ),\n \n-            hir::ExprKind::InlineAsm(ref asm) => {\n+            hir::ExprKind::LlvmInlineAsm(ref asm) => {\n                 let ia = &asm.inner;\n                 let outputs = asm.outputs_exprs;\n                 let inputs = asm.inputs_exprs;\n@@ -1408,7 +1408,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n             }\n         }\n \n-        hir::ExprKind::InlineAsm(ref asm) => {\n+        hir::ExprKind::LlvmInlineAsm(ref asm) => {\n             for input in asm.inputs_exprs {\n                 this.visit_expr(input);\n             }"}, {"sha": "54b404e1161b9313d9d1799ba5121e7ecaf6b8e2", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -424,6 +424,7 @@ symbols! {\n         LintPass,\n         lint_reasons,\n         literal,\n+        llvm_asm,\n         local_inner_macros,\n         log_syntax,\n         loop_break_value,"}, {"sha": "dfe70cb1d744e91eaa18e4b9d96dbd5369a47ad6", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_addr_of(kind, mutbl, oprnd, expected, expr)\n             }\n             ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr),\n-            ExprKind::InlineAsm(ref asm) => {\n+            ExprKind::LlvmInlineAsm(ref asm) => {\n                 for expr in asm.outputs_exprs.iter().chain(asm.inputs_exprs.iter()) {\n                     self.check_expr(expr);\n                 }"}, {"sha": "4eb6a6bda02eb3d4ab822e53471614f5b28aba4f", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.borrow_expr(&base, bk);\n             }\n \n-            hir::ExprKind::InlineAsm(ref ia) => {\n+            hir::ExprKind::LlvmInlineAsm(ref ia) => {\n                 for (o, output) in ia.inner.outputs.iter().zip(ia.outputs_exprs) {\n                     if o.is_indirect {\n                         self.consume_expr(output);"}, {"sha": "e76c67794e7546cfd7c49b1576b14a3cdce8cbf3", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Continue(..)\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n-            | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Err => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }"}, {"sha": "09bc183cf20dacbdb90ddb958c3f61b8864ec7c5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -274,6 +274,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![feature(llvm_asm)]\n #![feature(log_syntax)]\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n@@ -533,29 +534,9 @@ pub use core::{\n // Re-export built-in macros defined through libcore.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n pub use core::{\n-    // Unstable\n-    asm,\n-    // Stable\n-    assert,\n-    cfg,\n-    column,\n-    compile_error,\n-    concat,\n-    concat_idents,\n-    env,\n-    file,\n-    format_args,\n-    format_args_nl,\n-    global_asm,\n-    include,\n-    include_bytes,\n-    include_str,\n-    line,\n-    log_syntax,\n-    module_path,\n-    option_env,\n-    stringify,\n-    trace_macros,\n+    asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n+    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]"}, {"sha": "03686d789d7213b0fdb860b6c2c14987466cd3d2", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -39,8 +39,8 @@ pub use crate::result::Result::{self, Err, Ok};\n #[doc(no_inline)]\n pub use core::prelude::v1::{\n     asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, global_asm, include, include_bytes, include_str, line, log_syntax, module_path,\n-    option_env, stringify, trace_macros,\n+    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n // FIXME: Attribute and derive macros are not documented because for them rustdoc generates"}, {"sha": "57fd7efdd49e6f686ad1d05a8cb6dbb0d9eb90f5", "filename": "src/libstd/sys/sgx/abi/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -22,7 +22,7 @@ extern \"C\" {\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn image_base() -> u64 {\n     let base;\n-    unsafe { asm!(\"lea IMAGE_BASE(%rip),$0\":\"=r\"(base)) };\n+    unsafe { llvm_asm!(\"lea IMAGE_BASE(%rip),$0\":\"=r\"(base)) };\n     base\n }\n "}, {"sha": "0c97a87e2e445819c5e467af9ec040767b113207", "filename": "src/libstd/sys/sgx/ext/arch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -31,7 +31,7 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n         let mut out = MaybeUninit::uninit();\n         let error;\n \n-        asm!(\n+        llvm_asm!(\n             \"enclu\"\n             : \"={eax}\"(error)\n             : \"{eax}\"(ENCLU_EGETKEY),\n@@ -60,7 +60,7 @@ pub fn ereport(\n     unsafe {\n         let mut report = MaybeUninit::uninit();\n \n-        asm!(\n+        llvm_asm!(\n             \"enclu\"\n             : /* no output registers */\n             : \"{eax}\"(ENCLU_EREPORT),"}, {"sha": "74dd41fd50147c941c936faf86b94314a36a17e8", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -267,7 +267,7 @@ pub fn dur2timeout(dur: Duration) -> c::DWORD {\n pub unsafe fn abort_internal() -> ! {\n     #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n     {\n-        asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n+        llvm_asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n         crate::intrinsics::unreachable();\n     }\n     crate::intrinsics::abort();"}, {"sha": "933b647071f790c38cd5e181c71ede25a7bfb0f6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -20,7 +20,6 @@\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"50297\")]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n-#![feature(asm)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n #![feature(rustc_private)]\n #![feature(nll)]"}, {"sha": "4c75d19c99fb55221aee93de7ca1c34f2ef65e9f", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n LL |         asm!(\"\");\n    |         ^^^\n    |\n-   = note: see issue #29722 <https://github.com/rust-lang/rust/issues/29722> for more information\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "eaf3aa402e3b8732dfe822a02a3367036c3fcced", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d162d096ddf7972819e5b700890726a2ea85f272/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d162d096ddf7972819e5b700890726a2ea85f272/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=d162d096ddf7972819e5b700890726a2ea85f272", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n LL |         println!(\"{:?}\", asm!(\"\"));\n    |                          ^^^\n    |\n-   = note: see issue #29722 <https://github.com/rust-lang/rust/issues/29722> for more information\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error: aborting due to previous error"}]}