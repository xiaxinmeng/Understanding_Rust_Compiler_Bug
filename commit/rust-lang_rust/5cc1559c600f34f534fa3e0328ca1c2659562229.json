{"sha": "5cc1559c600f34f534fa3e0328ca1c2659562229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYzE1NTljNjAwZjM0ZjUzNGZhM2UwMzI4Y2ExYzI2NTk1NjIyMjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T08:14:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T08:14:07Z"}, "message": "token: refactor with is_non_raw_ident_where.", "tree": {"sha": "cbdeaa7ea4abb90bcf3ce5afc3ecf1cbdeacf065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbdeaa7ea4abb90bcf3ce5afc3ecf1cbdeacf065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cc1559c600f34f534fa3e0328ca1c2659562229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1559c600f34f534fa3e0328ca1c2659562229", "html_url": "https://github.com/rust-lang/rust/commit/5cc1559c600f34f534fa3e0328ca1c2659562229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1559c600f34f534fa3e0328ca1c2659562229/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd27fbdfe309f3f6abd76f72f379247d49048b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd27fbdfe309f3f6abd76f72f379247d49048b7", "html_url": "https://github.com/rust-lang/rust/commit/2bd27fbdfe309f3f6abd76f72f379247d49048b7"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "dfea34c331ad428787fd8885c07518bf7a4abb29", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1559c600f34f534fa3e0328ca1c2659562229/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1559c600f34f534fa3e0328ca1c2659562229/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5cc1559c600f34f534fa3e0328ca1c2659562229", "patch": "@@ -409,7 +409,7 @@ impl Token {\n     crate fn expect_lit(&self) -> Lit {\n         match self.kind {\n             Literal(lit) => lit,\n-            _=> panic!(\"`expect_lit` called on non-literal\"),\n+            _ => panic!(\"`expect_lit` called on non-literal\"),\n         }\n     }\n \n@@ -457,6 +457,7 @@ impl Token {\n     pub fn is_ident(&self) -> bool {\n         self.ident().is_some()\n     }\n+\n     /// Returns `true` if the token is a lifetime.\n     crate fn is_lifetime(&self) -> bool {\n         self.lifetime().is_some()\n@@ -508,45 +509,38 @@ impl Token {\n \n     /// Returns `true` if the token is a given keyword, `kw`.\n     pub fn is_keyword(&self, kw: Symbol) -> bool {\n-        self.ident().map(|(id, is_raw)| id.name == kw && !is_raw).unwrap_or(false)\n+        self.is_non_raw_ident_where(|id| id.name == kw)\n     }\n \n     crate fn is_path_segment_keyword(&self) -> bool {\n-        match self.ident() {\n-            Some((id, false)) => id.is_path_segment_keyword(),\n-            _ => false,\n-        }\n+        self.is_non_raw_ident_where(ast::Ident::is_path_segment_keyword)\n     }\n \n     // Returns true for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n     crate fn is_special_ident(&self) -> bool {\n-        match self.ident() {\n-            Some((id, false)) => id.is_special(),\n-            _ => false,\n-        }\n+        self.is_non_raw_ident_where(ast::Ident::is_special)\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     crate fn is_used_keyword(&self) -> bool {\n-        match self.ident() {\n-            Some((id, false)) => id.is_used_keyword(),\n-            _ => false,\n-        }\n+        self.is_non_raw_ident_where(ast::Ident::is_used_keyword)\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     crate fn is_unused_keyword(&self) -> bool {\n-        match self.ident() {\n-            Some((id, false)) => id.is_unused_keyword(),\n-            _ => false,\n-        }\n+        self.is_non_raw_ident_where(ast::Ident::is_unused_keyword)\n     }\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved_ident(&self) -> bool {\n+        self.is_non_raw_ident_where(ast::Ident::is_reserved)\n+    }\n+\n+    /// Returns `true` if the token is a non-raw identifier for which `pred` holds.\n+    fn is_non_raw_ident_where(&self, pred: impl FnOnce(ast::Ident) -> bool) -> bool {\n         match self.ident() {\n-            Some((id, false)) => id.is_reserved(),\n+            Some((id, false)) => pred(id),\n             _ => false,\n         }\n     }"}]}