{"sha": "ec7152cdf68506df2b316a47b113666d75712954", "node_id": "C_kwDOAAsO6NoAKGVjNzE1MmNkZjY4NTA2ZGYyYjMxNmE0N2IxMTM2NjZkNzU3MTI5NTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-11T05:12:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-13T22:27:28Z"}, "message": "allow unions with mutable references and tuples of allowed types", "tree": {"sha": "837f17f312e2217c7458d4fbf867f313e38d5f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837f17f312e2217c7458d4fbf867f313e38d5f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7152cdf68506df2b316a47b113666d75712954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7152cdf68506df2b316a47b113666d75712954", "html_url": "https://github.com/rust-lang/rust/commit/ec7152cdf68506df2b316a47b113666d75712954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7152cdf68506df2b316a47b113666d75712954/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff", "html_url": "https://github.com/rust-lang/rust/commit/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "187a3f95d5209cb396e7db715ebeebb8d3de7f4a", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ec7152cdf68506df2b316a47b113666d75712954/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7152cdf68506df2b316a47b113666d75712954/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=ec7152cdf68506df2b316a47b113666d75712954", "patch": "@@ -772,17 +772,27 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 let ty = self.tcx.type_of(item.def_id);\n                 let ty::Adt(adt_def, substs) = ty.kind() else { bug!() };\n \n-                #[allow(rustc::usage_of_qualified_ty)] // `Ty` is the wrong type here, we really want `ty::Ty`.\n+                #[allow(rustc::usage_of_qualified_ty)] // `Ty` is `hir::Ty` here, we really want `ty::Ty`.\n                 fn allowed_union_field<'tcx>(\n                     tcx: TyCtxt<'tcx>,\n                     param_env: ty::ParamEnv<'tcx>,\n                     ty: ty::Ty<'tcx>,\n                 ) -> bool {\n-                    ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n-                        || ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env)\n+                    // We don't just accept all !needs_drop fields, due to semver concerns.\n+                    match ty.kind() {\n+                        ty::Ref(..) => true, // references never drop (even mutable refs, which are non-Copy and hence fail the later check)\n+                        ty::Tuple(tys) => {\n+                            // allow tuples of allowed types\n+                            tys.iter().all(|ty| allowed_union_field(tcx, param_env, ty))\n+                        }\n+                        _ => {\n+                            ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n+                                || ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env)\n+                        }\n+                    }\n                 }\n \n-                // Non-`Copy` fields are unstable, except for `ManuallyDrop`.\n+                // `allowed_union_field` determines which fields are allowed on stable.\n                 let param_env = self.tcx.param_env(item.def_id);\n                 for field in &adt_def.non_enum_variant().fields {\n                     let field_ty = field.ty(self.tcx, substs);\n@@ -799,10 +809,17 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                                 &self.tcx.sess.parse_sess,\n                                 sym::untagged_unions,\n                                 self.tcx.def_span(field.did),\n-                                \"unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\",\n+                                \"unions with non-`Copy` fields other than `ManuallyDrop<T>`, \\\n+                                references, and tuples of such types are unstable\",\n                             )\n                             .emit();\n                         }\n+                    } else {\n+                        // We allow this field. Make extra sure it does not drop.\n+                        assert!(\n+                            !field_ty.needs_drop(self.tcx, param_env),\n+                            \"we should accept no maybe-dropping union fields\"\n+                        );\n                     }\n                 }\n             }"}, {"sha": "7bc5c42b775162eb93a9bad941441e22e19980fe", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec7152cdf68506df2b316a47b113666d75712954/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7152cdf68506df2b316a47b113666d75712954/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs?ref=ec7152cdf68506df2b316a47b113666d75712954", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+use std::mem::ManuallyDrop;\n \n union U1 { // OK\n     a: u8,\n@@ -9,15 +10,19 @@ union U2<T: Copy> { // OK\n }\n \n union U22<T> { // OK\n-    a: std::mem::ManuallyDrop<T>,\n+    a: ManuallyDrop<T>,\n+}\n+\n+union U23<T> { // OK\n+    a: (ManuallyDrop<T>, i32),\n }\n \n union U3 {\n     a: String, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union U32 { // field that does not drop but is not `Copy`, either -- this is the real feature gate test!\n-    a: std::cell::RefCell<i32>, //~ ERROR unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n+    a: std::cell::RefCell<i32>, //~ ERROR unions with non-`Copy` fields other than `ManuallyDrop<T>`, references, and tuples of such types are unstable\n }\n \n union U4<T> {\n@@ -32,4 +37,17 @@ impl Drop for U5 {\n     fn drop(&mut self) {}\n }\n \n+union U5Nested { // a nested union that drops is NOT OK\n+    nest: U5, //~ ERROR unions cannot contain fields that may need dropping\n+}\n+\n+union U6 { // OK\n+    s: &'static i32,\n+    m: &'static mut i32,\n+}\n+\n+union U7<T> { // OK\n+    f: (&'static mut i32, ManuallyDrop<T>, i32),\n+}\n+\n fn main() {}"}, {"sha": "e1f10c6de333e37829ca0d4362bc90420184e6c9", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec7152cdf68506df2b316a47b113666d75712954/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7152cdf68506df2b316a47b113666d75712954/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=ec7152cdf68506df2b316a47b113666d75712954", "patch": "@@ -1,5 +1,5 @@\n-error[E0658]: unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:20:5\n+error[E0658]: unions with non-`Copy` fields other than `ManuallyDrop<T>`, references, and tuples of such types are unstable\n+  --> $DIR/feature-gate-untagged_unions.rs:25:5\n    |\n LL |     a: std::cell::RefCell<i32>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     a: std::cell::RefCell<i32>,\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:16:5\n+  --> $DIR/feature-gate-untagged_unions.rs:21:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n@@ -20,7 +20,7 @@ LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:24:5\n+  --> $DIR/feature-gate-untagged_unions.rs:29:5\n    |\n LL |     a: T,\n    |     ^^^^\n@@ -31,7 +31,19 @@ help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +\n \n-error: aborting due to 3 previous errors\n+error[E0740]: unions cannot contain fields that may need dropping\n+  --> $DIR/feature-gate-untagged_unions.rs:41:5\n+   |\n+LL |     nest: U5,\n+   |     ^^^^^^^^\n+   |\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   |\n+LL |     nest: std::mem::ManuallyDrop<U5>,\n+   |           +++++++++++++++++++++++  +\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0658, E0740.\n For more information about an error, try `rustc --explain E0658`."}]}