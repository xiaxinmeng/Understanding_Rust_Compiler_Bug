{"sha": "53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZTkyZjQ1NzNmMzBlNTJhMGVhMjQxZmI3NmM2ZjFmZmFhYmZmOTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-17T11:51:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-19T12:34:45Z"}, "message": "Update unit tests", "tree": {"sha": "b0a7c4a87fce98cab980e134d073c9313a4be442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a7c4a87fce98cab980e134d073c9313a4be442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "html_url": "https://github.com/rust-lang/rust/commit/53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53e92f4573f30e52a0ea241fb76c6f1ffaabff90/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "html_url": "https://github.com/rust-lang/rust/commit/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "700f9c95e3b579bce15ae88aa04e42acbea28c02", "filename": "src/librustc_data_structures/snapshot_map/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53e92f4573f30e52a0ea241fb76c6f1ffaabff90/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e92f4573f30e52a0ea241fb76c6f1ffaabff90/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs?ref=53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "patch": "@@ -12,7 +12,7 @@ use super::SnapshotMap;\n \n #[test]\n fn basic() {\n-    let mut map = SnapshotMap::new();\n+    let mut map = SnapshotMap::default();\n     map.insert(22, \"twenty-two\");\n     let snapshot = map.snapshot();\n     map.insert(22, \"thirty-three\");\n@@ -29,7 +29,7 @@ fn basic() {\n #[test]\n #[should_panic]\n fn out_of_order() {\n-    let mut map = SnapshotMap::new();\n+    let mut map = SnapshotMap::default();\n     map.insert(22, \"twenty-two\");\n     let snapshot1 = map.snapshot();\n     let _snapshot2 = map.snapshot();\n@@ -38,7 +38,7 @@ fn out_of_order() {\n \n #[test]\n fn nested_commit_then_rollback() {\n-    let mut map = SnapshotMap::new();\n+    let mut map = SnapshotMap::default();\n     map.insert(22, \"twenty-two\");\n     let snapshot1 = map.snapshot();\n     let snapshot2 = map.snapshot();"}, {"sha": "e1318eb54d581df20643b9cd4d2d4bc486a738a6", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/53e92f4573f30e52a0ea241fb76c6f1ffaabff90/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e92f4573f30e52a0ea241fb76c6f1ffaabff90/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=53e92f4573f30e52a0ea241fb76c6f1ffaabff90", "patch": "@@ -489,7 +489,7 @@ impl<CTX> HashStable<CTX> for Index {\n \n #[test]\n fn test_one_step() {\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"b\");\n     relation.add(\"a\", \"c\");\n     assert!(relation.contains(&\"a\", &\"c\"));\n@@ -500,7 +500,7 @@ fn test_one_step() {\n \n #[test]\n fn test_many_steps() {\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"b\");\n     relation.add(\"a\", \"c\");\n     relation.add(\"a\", \"f\");\n@@ -530,7 +530,7 @@ fn mubs_triangle() {\n     //      ^\n     //      |\n     //      b\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"tcx\");\n     relation.add(\"b\", \"tcx\");\n     assert_eq!(relation.minimal_upper_bounds(&\"a\", &\"b\"), vec![&\"tcx\"]);\n@@ -551,7 +551,7 @@ fn mubs_best_choice1() {\n     // need the second pare down call to get the right result (after\n     // intersection, we have [1, 2], but 2 -> 1).\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -578,7 +578,7 @@ fn mubs_best_choice2() {\n     // Like the precedecing test, but in this case intersection is [2,\n     // 1], and hence we rely on the first pare down call.\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -597,7 +597,7 @@ fn mubs_best_choice2() {\n fn mubs_no_best_choice() {\n     // in this case, the intersection yields [1, 2], and the \"pare\n     // down\" calls find nothing to remove.\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -614,7 +614,7 @@ fn mubs_best_choice_scc() {\n     // in this case, 1 and 2 form a cycle; we pick arbitrarily (but\n     // consistently).\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"0\", \"1\");\n     relation.add(\"0\", \"2\");\n \n@@ -636,7 +636,7 @@ fn pdub_crisscross() {\n     //   /\\       |\n     // b -> b1 ---+\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"a1\");\n     relation.add(\"a\", \"b1\");\n     relation.add(\"b\", \"a1\");\n@@ -659,7 +659,7 @@ fn pdub_crisscross_more() {\n     //   /\\    /\\             |\n     // b -> b1 -> b2 ---------+\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"a1\");\n     relation.add(\"a\", \"b1\");\n     relation.add(\"b\", \"a1\");\n@@ -692,7 +692,7 @@ fn pdub_lub() {\n     //            |\n     // b -> b1 ---+\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"a1\");\n     relation.add(\"b\", \"b1\");\n     relation.add(\"a1\", \"x\");\n@@ -715,7 +715,7 @@ fn mubs_intermediate_node_on_one_side_only() {\n     //           b\n \n     // \"digraph { a -> c -> d; b -> d; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"b\", \"d\");\n@@ -734,7 +734,7 @@ fn mubs_scc_1() {\n     //           b\n \n     // \"digraph { a -> c -> d; d -> c; a -> d; b -> d; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"c\");\n@@ -754,7 +754,7 @@ fn mubs_scc_2() {\n     //      +--- b\n \n     // \"digraph { a -> c -> d; d -> c; b -> d; b -> c; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"c\");\n@@ -774,7 +774,7 @@ fn mubs_scc_3() {\n     //           b ---+\n \n     // \"digraph { a -> c -> d -> e -> c; b -> d; b -> e; }\",\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"e\");\n@@ -796,7 +796,7 @@ fn mubs_scc_4() {\n     //           b ---+\n \n     // \"digraph { a -> c -> d -> e -> c; a -> d; b -> e; }\"\n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     relation.add(\"a\", \"c\");\n     relation.add(\"c\", \"d\");\n     relation.add(\"d\", \"e\");\n@@ -834,7 +834,7 @@ fn parent() {\n         (1, /*->*/ 3),\n     ];\n \n-    let mut relation = TransitiveRelation::new();\n+    let mut relation = TransitiveRelation::default();\n     for (a, b) in pairs {\n         relation.add(a, b);\n     }"}]}