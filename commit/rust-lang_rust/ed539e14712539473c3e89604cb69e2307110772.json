{"sha": "ed539e14712539473c3e89604cb69e2307110772", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNTM5ZTE0NzEyNTM5NDczYzNlODk2MDRjYjY5ZTIzMDcxMTA3NzI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-03T05:29:46Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T04:56:54Z"}, "message": "path2: Remove Path::normalize()\n\nThere are no clients of this API, so just remove it.\n\nUpdate the module docstring to mention normalization.", "tree": {"sha": "bc92a3c7dfe9aa37daa589352de69f73adb4eab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc92a3c7dfe9aa37daa589352de69f73adb4eab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed539e14712539473c3e89604cb69e2307110772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed539e14712539473c3e89604cb69e2307110772", "html_url": "https://github.com/rust-lang/rust/commit/ed539e14712539473c3e89604cb69e2307110772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed539e14712539473c3e89604cb69e2307110772/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaec8a71322a59eb284cbd5a8d502b6da321df3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaec8a71322a59eb284cbd5a8d502b6da321df3c", "html_url": "https://github.com/rust-lang/rust/commit/eaec8a71322a59eb284cbd5a8d502b6da321df3c"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "1ecb31a2a8797323956d703ed8937e01959ff582", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed539e14712539473c3e89604cb69e2307110772/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed539e14712539473c3e89604cb69e2307110772/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=ed539e14712539473c3e89604cb69e2307110772", "patch": "@@ -43,6 +43,10 @@ Option<&str> with `.as_str()`. Similarly, attributes of the path can be queried\n with methods such as `.filename()`. There are also methods that return a new\n path instead of modifying the receiver, such as `.join()` or `.dir_path()`.\n \n+Paths are always kept in normalized form. This means that creating the path\n+`Path::from_str(\"a/b/../c\")` will return the path `a/c`. Similarly any attempt\n+to mutate the path will always leave it in normalized form.\n+\n When rendering a path to some form of display, there is a method `.display()`\n which is compatible with the `format!()` parameter `{}`. This will render the\n path as a string, replacing all non-utf8 sequences with the Replacement"}, {"sha": "f39062e66cb3385fa1d3d3269973f4c99ba28b30", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed539e14712539473c3e89604cb69e2307110772/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed539e14712539473c3e89604cb69e2307110772/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=ed539e14712539473c3e89604cb69e2307110772", "patch": "@@ -349,7 +349,7 @@ impl Path {\n \n     /// Returns a normalized byte vector representation of a path, by removing all empty\n     /// components, and unnecessary . and .. components.\n-    pub fn normalize<V: Vector<u8>+CopyableVector<u8>>(v: V) -> ~[u8] {\n+    fn normalize<V: Vector<u8>+CopyableVector<u8>>(v: V) -> ~[u8] {\n         // borrowck is being very picky\n         let val = {\n             let is_abs = !v.as_slice().is_empty() && v.as_slice()[0] == sep;"}, {"sha": "5dfe5b4f35a879ce675c6038b59cfd854a860953", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed539e14712539473c3e89604cb69e2307110772/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed539e14712539473c3e89604cb69e2307110772/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=ed539e14712539473c3e89604cb69e2307110772", "patch": "@@ -697,13 +697,6 @@ impl Path {\n         Some(self.repr)\n     }\n \n-    /// Returns a normalized string representation of a path, by removing all empty\n-    /// components, and unnecessary . and .. components.\n-    pub fn normalize<S: Str>(s: S) -> ~str {\n-        let (_, path) = Path::normalize_(s);\n-        path\n-    }\n-\n     /// Returns an iterator that yields each component of the path in turn as a Option<&str>.\n     /// Every component is guaranteed to be Some.\n     /// Does not yield the path prefix (including server/share components in UNC paths)."}]}