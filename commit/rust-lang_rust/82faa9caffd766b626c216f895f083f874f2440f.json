{"sha": "82faa9caffd766b626c216f895f083f874f2440f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZmFhOWNhZmZkNzY2YjYyNmMyMTZmODk1ZjA4M2Y4NzRmMjQ0MGY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-19T13:22:19Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-19T14:16:08Z"}, "message": "refactor gating of demangler", "tree": {"sha": "9b928ff7fdafd3f069fefa60769a0b60d5e00ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b928ff7fdafd3f069fefa60769a0b60d5e00ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82faa9caffd766b626c216f895f083f874f2440f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmD1iSgACgkQzXazX3c0\ndp6t4hAAl39jDrpQvJO+Pw2RYwMZzcEzN9SmLERWH/x0Wc/N+yeYkiQRUHfkDP1i\nM7CzjIVKiuXaHFDmB9tOCbNssphc/MMVtrJ9UvKdCgBEjNg9+bxBm6atd+mwmWQc\nrYHuEWNBY6NG4UH+bj1V/CNlAzBZlEFZDzdklYbAJO+l/C8VGUkwkf7pcX5SYkCd\nU9F+p3wzSSniEoEKRUa+vS4YmPuFFAIsPIbf1ypbYZh4ptolT2hTZg1VeBY3Grs0\nGXjnf/b1/bh1OJCYRBE5ZCzt6vs208eqL7BufmN/mw8MWWm60Kbp4b1Msu2tv0YV\ntSss0y/x8QQF/p21XXxKUYcP54lIH3BpsuxitU68cVHiuA+vIrkobP0aEq77hHCb\ntpMFZbu5T11vh3XSZ9QpfIKXcvFtJaf0puplcCOJm0W1eGfqBNgtR4ROLLSKAYaY\n1gaySoUDGttZXi6i7Brmlp4r1udf9P6djapJF5nX/wh8SWYtQITP3bqAYh2TQRTx\nku2ff+GAWUboj6GBAEtJ+2AoN0rDh5CoG9fUwiV9xdbUdPM0GQDIbCjEkRfl8nJn\n5FlWh6jgywAB71b6nVCcy9MgI+L0zIYWII8tFjL6+ujOF1NrEE7+b+pVeKJHcIv4\njTFkKNJdspxk1E5b0zMlqkTj7/188IvdR0oCuR8vnmmpVatEJcI=\n=1+nV\n-----END PGP SIGNATURE-----", "payload": "tree 9b928ff7fdafd3f069fefa60769a0b60d5e00ef4\nparent e60b348b0d0122d9522df0d84f47c64ebea2e4c1\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1626700939 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1626704168 +0200\n\nrefactor gating of demangler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82faa9caffd766b626c216f895f083f874f2440f", "html_url": "https://github.com/rust-lang/rust/commit/82faa9caffd766b626c216f895f083f874f2440f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82faa9caffd766b626c216f895f083f874f2440f/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e60b348b0d0122d9522df0d84f47c64ebea2e4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e60b348b0d0122d9522df0d84f47c64ebea2e4c1", "html_url": "https://github.com/rust-lang/rust/commit/e60b348b0d0122d9522df0d84f47c64ebea2e4c1"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "3b4940e59f4c56f06e0ca9a4be5a60b485a2bcc5", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/82faa9caffd766b626c216f895f083f874f2440f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faa9caffd766b626c216f895f083f874f2440f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=82faa9caffd766b626c216f895f083f874f2440f", "patch": "@@ -1284,7 +1284,13 @@ impl Step for RustDemangler {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-demangler\")\n+        // While other tools use `should_build_extended_tool` to decide whether to be run by\n+        // default or not, `rust-demangler` must be build when *either* it's enabled as a tool like\n+        // the other ones or if `profiler = true`. Because we don't know the target at this stage\n+        // we run the step by default when only `extended = true`, and decide whether to actually\n+        // run it or not later.\n+        let default = run.builder.config.extended;\n+        run.path(\"rust-demangler\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1301,11 +1307,11 @@ impl Step for RustDemangler {\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         // Only build this extended tool if explicitly included in `tools`, or if `profiler = true`\n-        let profiler = builder.config.profiler_enabled(target);\n-        if !builder.config.tools.as_ref().map_or(profiler, |t| t.contains(\"rust-demangler\")) {\n+        let condition = should_build_extended_tool(builder, \"rust-demangler\")\n+            || builder.config.profiler_enabled(target);\n+        if builder.config.extended && !condition {\n             return None;\n         }\n \n@@ -1380,6 +1386,15 @@ impl Step for Extended {\n             tarballs.push(builder.ensure(Docs { host: target }));\n         }\n \n+        if builder.config.profiler_enabled(target)\n+            || should_build_extended_tool(builder, \"rust-demangler\")\n+        {\n+            if let Some(tarball) = builder.ensure(RustDemangler { compiler, target }) {\n+                tarballs.push(tarball);\n+                built_tools.insert(\"rust-demangler\");\n+            }\n+        }\n+\n         add_tool!(\"cargo\" => Cargo { compiler, target });\n         add_tool!(\"rustfmt\" => Rustfmt { compiler, target });\n         add_tool!(\"rls\" => Rls { compiler, target });\n@@ -1389,7 +1404,6 @@ impl Step for Extended {\n         add_tool!(\"miri\" => Miri { compiler, target });\n         add_tool!(\"analysis\" => Analysis { compiler, target });\n \n-        let rust_demangler_installer = builder.ensure(RustDemangler { compiler, target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n \n         let etc = builder.src.join(\"src/etc/installer\");\n@@ -1399,8 +1413,6 @@ impl Step for Extended {\n             return;\n         }\n \n-        tarballs.extend(rust_demangler_installer.clone());\n-\n         if target.contains(\"pc-windows-gnu\") {\n             tarballs.push(mingw_installer.unwrap());\n         }\n@@ -1447,11 +1459,7 @@ impl Step for Extended {\n \n         let xform = |p: &Path| {\n             let mut contents = t!(fs::read_to_string(p));\n-            if rust_demangler_installer.is_none() {\n-                contents = filter(&contents, \"rust-demangler\");\n-            }\n-\n-            for tool in &[\"rls\", \"rust-analyzer\", \"miri\", \"rustfmt\"] {\n+            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\", \"rustfmt\"] {\n                 if !built_tools.contains(tool) {\n                     contents = filter(&contents, tool);\n                 }\n@@ -1492,10 +1500,7 @@ impl Step for Extended {\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n             prepare(\"clippy\");\n-            if rust_demangler_installer.is_some() {\n-                prepare(\"rust-demangler\");\n-            }\n-            for tool in &[\"rls\", \"rust-analyzer\", \"miri\"] {\n+            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }\n@@ -1556,10 +1561,7 @@ impl Step for Extended {\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"clippy\");\n-            if rust_demangler_installer.is_some() {\n-                prepare(\"rust-demangler\");\n-            }\n-            for tool in &[\"rls\", \"rust-analyzer\", \"miri\"] {\n+            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }\n@@ -1696,7 +1698,7 @@ impl Step for Extended {\n                     .arg(\"-t\")\n                     .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n             );\n-            if rust_demangler_installer.is_some() {\n+            if built_tools.contains(\"rust-demangler\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1788,7 +1790,7 @@ impl Step for Extended {\n                     .arg(&input);\n                 add_env(builder, &mut cmd, target);\n \n-                if rust_demangler_installer.is_some() {\n+                if built_tools.contains(\"rust-demangler\") {\n                     cmd.arg(\"-dRustDemanglerDir=rust-demangler\");\n                 }\n                 if built_tools.contains(\"rls\") {\n@@ -1813,7 +1815,7 @@ impl Step for Extended {\n             candle(\"CargoGroup.wxs\".as_ref());\n             candle(\"StdGroup.wxs\".as_ref());\n             candle(\"ClippyGroup.wxs\".as_ref());\n-            if rust_demangler_installer.is_some() {\n+            if built_tools.contains(\"rust-demangler\") {\n                 candle(\"RustDemanglerGroup.wxs\".as_ref());\n             }\n             if built_tools.contains(\"rls\") {\n@@ -1862,7 +1864,7 @@ impl Step for Extended {\n             if built_tools.contains(\"rust-analyzer\") {\n                 cmd.arg(\"RustAnalyzerGroup.wixobj\");\n             }\n-            if rust_demangler_installer.is_some() {\n+            if built_tools.contains(\"rust-demangler\") {\n                 cmd.arg(\"RustDemanglerGroup.wixobj\");\n             }\n             if built_tools.contains(\"miri\") {"}]}