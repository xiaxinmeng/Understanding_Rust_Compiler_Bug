{"sha": "0088715411c2fcb3ea36cdbb969fb9966d722320", "node_id": "C_kwDOAAsO6NoAKDAwODg3MTU0MTFjMmZjYjNlYTM2Y2RiYjk2OWZiOTk2NmQ3MjIzMjA", "commit": {"author": {"name": "Tavian Barnes", "email": "tavianator@tavianator.com", "date": "2022-03-07T17:46:53Z"}, "committer": {"name": "Tavian Barnes", "email": "tavianator@tavianator.com", "date": "2022-03-07T21:19:03Z"}, "message": "Rename MiriMemoryKind::Env to Runtime\n\nIn preparation to use it for other runtime-internal allocations.", "tree": {"sha": "d6b781cdf63e41eceebbbb9ffe701e0170bc1c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b781cdf63e41eceebbbb9ffe701e0170bc1c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0088715411c2fcb3ea36cdbb969fb9966d722320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0088715411c2fcb3ea36cdbb969fb9966d722320", "html_url": "https://github.com/rust-lang/rust/commit/0088715411c2fcb3ea36cdbb969fb9966d722320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0088715411c2fcb3ea36cdbb969fb9966d722320/comments", "author": {"login": "tavianator", "id": 1692591, "node_id": "MDQ6VXNlcjE2OTI1OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1692591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tavianator", "html_url": "https://github.com/tavianator", "followers_url": "https://api.github.com/users/tavianator/followers", "following_url": "https://api.github.com/users/tavianator/following{/other_user}", "gists_url": "https://api.github.com/users/tavianator/gists{/gist_id}", "starred_url": "https://api.github.com/users/tavianator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tavianator/subscriptions", "organizations_url": "https://api.github.com/users/tavianator/orgs", "repos_url": "https://api.github.com/users/tavianator/repos", "events_url": "https://api.github.com/users/tavianator/events{/privacy}", "received_events_url": "https://api.github.com/users/tavianator/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tavianator", "id": 1692591, "node_id": "MDQ6VXNlcjE2OTI1OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1692591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tavianator", "html_url": "https://github.com/tavianator", "followers_url": "https://api.github.com/users/tavianator/followers", "following_url": "https://api.github.com/users/tavianator/following{/other_user}", "gists_url": "https://api.github.com/users/tavianator/gists{/gist_id}", "starred_url": "https://api.github.com/users/tavianator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tavianator/subscriptions", "organizations_url": "https://api.github.com/users/tavianator/orgs", "repos_url": "https://api.github.com/users/tavianator/repos", "events_url": "https://api.github.com/users/tavianator/events{/privacy}", "received_events_url": "https://api.github.com/users/tavianator/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccaf7206e122b544aa2762f6b42474d8ee545a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccaf7206e122b544aa2762f6b42474d8ee545a8a", "html_url": "https://github.com/rust-lang/rust/commit/ccaf7206e122b544aa2762f6b42474d8ee545a8a"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "1e91c66b859ed33cf843e996c8d412b398dd5b9d", "filename": "src/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=0088715411c2fcb3ea36cdbb969fb9966d722320", "patch": "@@ -743,7 +743,7 @@ impl VClockAlloc {\n             MemoryKind::Machine(\n                 MiriMemoryKind::Global\n                 | MiriMemoryKind::Machine\n-                | MiriMemoryKind::Env\n+                | MiriMemoryKind::Runtime\n                 | MiriMemoryKind::ExternStatic\n                 | MiriMemoryKind::Tls,\n             )"}, {"sha": "bb43cb95507c5391b62d0668039d4308b94017a1", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=0088715411c2fcb3ea36cdbb969fb9966d722320", "patch": "@@ -71,8 +71,9 @@ pub enum MiriMemoryKind {\n     /// Memory for args, errno, and other parts of the machine-managed environment.\n     /// This memory may leak.\n     Machine,\n-    /// Memory for env vars. Separate from `Machine` because we clean it up and leak-check it.\n-    Env,\n+    /// Memory allocated by the runtime (e.g. env vars). Separate from `Machine`\n+    /// because we clean it up and leak-check it.\n+    Runtime,\n     /// Globals copied from `tcx`.\n     /// This memory may leak.\n     Global,\n@@ -96,7 +97,7 @@ impl MayLeak for MiriMemoryKind {\n     fn may_leak(self) -> bool {\n         use self::MiriMemoryKind::*;\n         match self {\n-            Rust | C | WinHeap | Env => false,\n+            Rust | C | WinHeap | Runtime => false,\n             Machine | Global | ExternStatic | Tls => true,\n         }\n     }\n@@ -110,7 +111,7 @@ impl fmt::Display for MiriMemoryKind {\n             C => write!(f, \"C heap\"),\n             WinHeap => write!(f, \"Windows heap\"),\n             Machine => write!(f, \"machine-managed memory\"),\n-            Env => write!(f, \"environment variable\"),\n+            Runtime => write!(f, \"language runtime memory\"),\n             Global => write!(f, \"global (static or const)\"),\n             ExternStatic => write!(f, \"extern static\"),\n             Tls => write!(f, \"thread-local static\"),"}, {"sha": "fd772868858099eb8ce06719742a1d36f180570e", "filename": "src/shims/env.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=0088715411c2fcb3ea36cdbb969fb9966d722320", "patch": "@@ -78,12 +78,12 @@ impl<'tcx> EnvVars<'tcx> {\n     ) -> InterpResult<'tcx> {\n         // Deallocate individual env vars.\n         for (_name, ptr) in ecx.machine.env_vars.map.drain() {\n-            ecx.memory.deallocate(ptr, None, MiriMemoryKind::Env.into())?;\n+            ecx.memory.deallocate(ptr, None, MiriMemoryKind::Runtime.into())?;\n         }\n         // Deallocate environ var list.\n         let environ = ecx.machine.env_vars.environ.unwrap();\n         let old_vars_ptr = ecx.read_pointer(&environ.into())?;\n-        ecx.memory.deallocate(old_vars_ptr, None, MiriMemoryKind::Env.into())?;\n+        ecx.memory.deallocate(old_vars_ptr, None, MiriMemoryKind::Runtime.into())?;\n         Ok(())\n     }\n }\n@@ -96,7 +96,7 @@ fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into())\n+    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Runtime.into())\n }\n \n fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n@@ -107,7 +107,7 @@ fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into())\n+    ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Runtime.into())\n }\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -186,7 +186,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // Allocate environment block & Store environment variables to environment block.\n         // Final null terminator(block terminator) is added by `alloc_os_str_to_wide_str`.\n-        let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::Env.into())?;\n+        let envblock_ptr =\n+            this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::Runtime.into())?;\n         // If the function succeeds, the return value is a pointer to the environment block of the current process.\n         Ok(envblock_ptr)\n     }\n@@ -200,7 +201,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n \n         let env_block_ptr = this.read_pointer(env_block_op)?;\n-        let result = this.memory.deallocate(env_block_ptr, None, MiriMemoryKind::Env.into());\n+        let result = this.memory.deallocate(env_block_ptr, None, MiriMemoryKind::Runtime.into());\n         // If the function succeeds, the return value is nonzero.\n         Ok(result.is_ok() as i32)\n     }\n@@ -231,7 +232,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some((name, value)) = new {\n             let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n-                this.memory.deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory.deallocate(var, None, MiriMemoryKind::Runtime.into())?;\n             }\n             this.update_environ()?;\n             Ok(0) // return zero on success\n@@ -268,15 +269,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else if this.ptr_is_null(value_ptr)? {\n             // Delete environment variable `{name}`\n             if let Some(var) = this.machine.env_vars.map.remove(&name) {\n-                this.memory.deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory.deallocate(var, None, MiriMemoryKind::Runtime.into())?;\n                 this.update_environ()?;\n             }\n             Ok(1) // return non-zero on success\n         } else {\n             let value = this.read_os_str_from_wide_str(value_ptr)?;\n             let var_ptr = alloc_env_var_as_wide_str(&name, &value, &mut this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n-                this.memory.deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory.deallocate(var, None, MiriMemoryKind::Runtime.into())?;\n             }\n             this.update_environ()?;\n             Ok(1) // return non-zero on success\n@@ -301,7 +302,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         if let Some(old) = success {\n             if let Some(var) = old {\n-                this.memory.deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory.deallocate(var, None, MiriMemoryKind::Runtime.into())?;\n             }\n             this.update_environ()?;\n             Ok(0)\n@@ -437,7 +438,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Deallocate the old environ list, if any.\n         if let Some(environ) = this.machine.env_vars.environ {\n             let old_vars_ptr = this.read_pointer(&environ.into())?;\n-            this.memory.deallocate(old_vars_ptr, None, MiriMemoryKind::Env.into())?;\n+            this.memory.deallocate(old_vars_ptr, None, MiriMemoryKind::Runtime.into())?;\n         } else {\n             // No `environ` allocated yet, let's do that.\n             // This is memory backing an extern static, hence `ExternStatic`, not `Env`.\n@@ -455,7 +456,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tcx = this.tcx;\n         let vars_layout =\n             this.layout_of(tcx.mk_array(tcx.types.usize, u64::try_from(vars.len()).unwrap()))?;\n-        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Env.into())?;\n+        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Runtime.into())?;\n         for (idx, var) in vars.into_iter().enumerate() {\n             let place = this.mplace_field(&vars_place, idx)?;\n             this.write_pointer(var, &place.into())?;"}, {"sha": "0e47a9e1c3b07a9b812a47d4576bdfc7f027dc24", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088715411c2fcb3ea36cdbb969fb9966d722320/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=0088715411c2fcb3ea36cdbb969fb9966d722320", "patch": "@@ -535,7 +535,7 @@ impl Stacks {\n                 MiriMemoryKind::Global\n                 | MiriMemoryKind::ExternStatic\n                 | MiriMemoryKind::Tls\n-                | MiriMemoryKind::Env\n+                | MiriMemoryKind::Runtime\n                 | MiriMemoryKind::Machine,\n             ) => (extra.base_tag(id), Permission::SharedReadWrite),\n             // Heap allocations we only track precisely when raw pointers are tagged, for now."}]}