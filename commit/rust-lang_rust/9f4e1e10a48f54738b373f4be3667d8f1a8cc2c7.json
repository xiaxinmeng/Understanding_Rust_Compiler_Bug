{"sha": "9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNGUxZTEwYTQ4ZjU0NzM4YjM3M2Y0YmUzNjY3ZDhmMWE4Y2MyYzc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-05-15T09:26:26Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-05-15T09:26:26Z"}, "message": "Fix regression in `macro_rules!` name matching.", "tree": {"sha": "c214285334c7c758efac1d0d9b5e303d8a036e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c214285334c7c758efac1d0d9b5e303d8a036e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7", "html_url": "https://github.com/rust-lang/rust/commit/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9956e81c19c2f5bbc273d75b49f2e031d80d0e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9956e81c19c2f5bbc273d75b49f2e031d80d0e4e", "html_url": "https://github.com/rust-lang/rust/commit/9956e81c19c2f5bbc273d75b49f2e031d80d0e4e"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "780b7ec8c2a16ab7f7d6e6230be9d6d6319ae667", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7", "patch": "@@ -267,11 +267,12 @@ pub fn parse_failure_msg(tok: Token) -> String {\n \n /// Perform a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {\n-    match (t1,t2) {\n-        (&token::Ident(id1),&token::Ident(id2))\n-        | (&token::Lifetime(id1),&token::Lifetime(id2)) =>\n-            id1.name == id2.name,\n-        _ => *t1 == *t2\n+    if let (Some(id1), Some(id2)) = (t1.ident(), t2.ident()) {\n+        id1.name == id2.name\n+    } else if let (&token::Lifetime(id1), &token::Lifetime(id2)) = (t1, t2) {\n+        id1.name == id2.name\n+    } else {\n+        *t1 == *t2\n     }\n }\n "}, {"sha": "e18b4204584e386c590720dc15ced0169a874355", "filename": "src/test/run-pass/issue-41803.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7/src%2Ftest%2Frun-pass%2Fissue-41803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7/src%2Ftest%2Frun-pass%2Fissue-41803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41803.rs?ref=9f4e1e10a48f54738b373f4be3667d8f1a8cc2c7", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// A compile-time map from identifiers to arbitrary (heterogeneous) expressions\n+macro_rules! ident_map {\n+    ( $name:ident = { $($key:ident => $e:expr,)* } ) => {\n+        macro_rules! $name {\n+            $(\n+                ( $key ) => { $e };\n+            )*\n+            // Empty invocation expands to nothing. Needed when the map is empty.\n+            () => {};\n+        }\n+    };\n+}\n+\n+ident_map!(my_map = {\n+    main => 0,\n+});\n+\n+fn main() {\n+    my_map!(main);\n+}"}]}