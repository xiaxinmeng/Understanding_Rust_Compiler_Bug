{"sha": "d58fdfbf3c995d241677f0dff76d30b5157d0d0f", "node_id": "C_kwDOAAsO6NoAKGQ1OGZkZmJmM2M5OTVkMjQxNjc3ZjBkZmY3NmQzMGI1MTU3ZDBkMGY", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-12-22T15:18:11Z"}, "committer": {"name": "Dharma Saputra Wijaya", "email": "dswijj@gmail.com", "date": "2021-12-25T13:54:35Z"}, "message": "Fix False Positive on `enum_variants` when prefixes are not camel-case", "tree": {"sha": "092aeead79c3704b195be957c0fb38b5ca624ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/092aeead79c3704b195be957c0fb38b5ca624ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d58fdfbf3c995d241677f0dff76d30b5157d0d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d58fdfbf3c995d241677f0dff76d30b5157d0d0f", "html_url": "https://github.com/rust-lang/rust/commit/d58fdfbf3c995d241677f0dff76d30b5157d0d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d58fdfbf3c995d241677f0dff76d30b5157d0d0f/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f327f0e2b60597b0b6b171c7cbfef5832238d3a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f327f0e2b60597b0b6b171c7cbfef5832238d3a2", "html_url": "https://github.com/rust-lang/rust/commit/f327f0e2b60597b0b6b171c7cbfef5832238d3a2"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "9862a8c4f52fcd458fa5201efe9019dceffccf50", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d58fdfbf3c995d241677f0dff76d30b5157d0d0f/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d58fdfbf3c995d241677f0dff76d30b5157d0d0f/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=d58fdfbf3c995d241677f0dff76d30b5157d0d0f", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::is_present_in_source;\n-use clippy_utils::str_utils::{self, count_match_end, count_match_start};\n+use clippy_utils::str_utils::{camel_case_split, count_match_end, count_match_start};\n use rustc_hir::{EnumDef, Item, ItemKind, Variant};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -157,39 +157,35 @@ fn check_variant(cx: &LateContext<'_>, threshold: u64, def: &EnumDef<'_>, item_n\n     }\n \n     let first = &def.variants[0].ident.name.as_str();\n-    let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n-    let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n+    let mut pre = camel_case_split(first);\n+    let mut post = pre.clone();\n+    post.reverse();\n     for var in def.variants {\n         check_enum_start(cx, item_name, var);\n         check_enum_end(cx, item_name, var);\n         let name = var.ident.name.as_str();\n-        let pre_match = count_match_start(pre, &name).byte_count;\n-        pre = &pre[..pre_match];\n-        let pre_camel = str_utils::camel_case_until(pre).byte_index;\n-        pre = &pre[..pre_camel];\n-        while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n-            if next.is_numeric() {\n-                return;\n-            }\n-            if next.is_lowercase() {\n-                let last = pre.len() - last.len_utf8();\n-                let last_camel = str_utils::camel_case_until(&pre[..last]);\n-                pre = &pre[..last_camel.byte_index];\n-            } else {\n-                break;\n-            }\n-        }\n \n-        let post_match = count_match_end(post, &name);\n-        let post_end = post.len() - post_match.byte_count;\n-        post = &post[post_end..];\n-        let post_camel = str_utils::camel_case_start(post);\n-        post = &post[post_camel.byte_index..];\n+        let variant_split = camel_case_split(&name);\n+\n+        pre = pre\n+            .iter()\n+            .copied()\n+            .zip(variant_split.iter().copied())\n+            .take_while(|(a, b)| a == b)\n+            .map(|e| e.0)\n+            .collect();\n+        post = post\n+            .iter()\n+            .copied()\n+            .zip(variant_split.iter().rev().copied())\n+            .take_while(|(a, b)| a == b)\n+            .map(|e| e.0)\n+            .collect();\n     }\n     let (what, value) = match (pre.is_empty(), post.is_empty()) {\n         (true, true) => return,\n-        (false, _) => (\"pre\", pre),\n-        (true, false) => (\"post\", post),\n+        (false, _) => (\"pre\", pre.join(\"\")),\n+        (true, false) => (\"post\", post.join(\"\")),\n     };\n     span_lint_and_help(\n         cx,"}]}