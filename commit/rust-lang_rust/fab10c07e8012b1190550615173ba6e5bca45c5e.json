{"sha": "fab10c07e8012b1190550615173ba6e5bca45c5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjEwYzA3ZTgwMTJiMTE5MDU1MDYxNTE3M2JhNmU1YmNhNDVjNWU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-03T12:42:46Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-03T12:52:19Z"}, "message": "Fix confusing message for STRING_TO_STRING", "tree": {"sha": "6e8d2ef7f767739bcb7bfb18b8d80ac27820081c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e8d2ef7f767739bcb7bfb18b8d80ac27820081c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab10c07e8012b1190550615173ba6e5bca45c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab10c07e8012b1190550615173ba6e5bca45c5e", "html_url": "https://github.com/rust-lang/rust/commit/fab10c07e8012b1190550615173ba6e5bca45c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab10c07e8012b1190550615173ba6e5bca45c5e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eb884b7b055c5b150ad45de577458a4a5815952", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb884b7b055c5b150ad45de577458a4a5815952", "html_url": "https://github.com/rust-lang/rust/commit/5eb884b7b055c5b150ad45de577458a4a5815952"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "3f99b73c4cb794d55ad6946b73aa7e03a077ee7f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab10c07e8012b1190550615173ba6e5bca45c5e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/fab10c07e8012b1190550615173ba6e5bca45c5e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=fab10c07e8012b1190550615173ba6e5bca45c5e", "patch": "@@ -98,7 +98,7 @@ name\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                       | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                         | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                     | warn    | calling `as_bytes` on a string literal; suggests using a byte string literal instead\n-[string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                           | warn    | calling `String.to_string()` which is a no-op\n+[string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                           | warn    | calling `String::to_string` which is inefficient\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                   | warn    | assignments to temporaries\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                           | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                             | warn    | usage of very complex types; recommends factoring out parts into `type` definitions"}, {"sha": "0a06351afacc10f19b50ffadfe97eb7823d34e7a", "filename": "src/methods.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fab10c07e8012b1190550615173ba6e5bca45c5e/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab10c07e8012b1190550615173ba6e5bca45c5e/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=fab10c07e8012b1190550615173ba6e5bca45c5e", "patch": "@@ -56,13 +56,14 @@ declare_lint!(pub STR_TO_STRING, Warn,\n \n /// **What it does:** This lint checks for `.to_string()` method calls on values of type `String`. It is `Warn` by default.\n ///\n-/// **Why is this bad?** As our string is already owned, this whole operation is basically a no-op, but still creates a clone of the string (which, if really wanted, should be done with `.clone()`).\n+/// **Why is this bad?** This is an non-efficient way to clone a `String`, `.clone()` should be used\n+/// instead. `String` implements `ToString` mostly for generics.\n ///\n /// **Known problems:** None\n ///\n /// **Example:** `s.to_string()` where `s: String`\n declare_lint!(pub STRING_TO_STRING, Warn,\n-              \"calling `String.to_string()` which is a no-op\");\n+              \"calling `String::to_string` which is inefficient\");\n \n /// **What it does:** This lint checks for methods that should live in a trait implementation of a `std` trait (see [llogiq's blog post](http://llogiq.github.io/2015/07/30/traits.html) for further information) instead of an inherent implementation. It is `Warn` by default.\n ///\n@@ -560,7 +561,7 @@ fn lint_to_string(cx: &LateContext, expr: &Expr, to_string_args: &MethodArgs) {\n         span_lint(cx,\n                   STRING_TO_STRING,\n                   expr.span,\n-                  \"`String.to_string()` is a no-op; use `clone()` to make a copy\");\n+                  \"`String::to_string` is an inefficient way to clone a `String`; use `clone()` instead\");\n     }\n }\n "}, {"sha": "464a7c26e442c81e45eee402a5b04cea1a99a3d9", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab10c07e8012b1190550615173ba6e5bca45c5e/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab10c07e8012b1190550615173ba6e5bca45c5e/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=fab10c07e8012b1190550615173ba6e5bca45c5e", "patch": "@@ -267,7 +267,7 @@ fn main() {\n \n     let v = &\"str\";\n     let string = v.to_string();  //~ERROR `(*v).to_owned()` is faster\n-    let _again = string.to_string();  //~ERROR `String.to_string()` is a no-op\n+    let _again = string.to_string();  //~ERROR `String::to_string` is an inefficient way to clone a `String`; use `clone()` instead\n \n     res.ok().expect(\"disaster!\"); //~ERROR called `ok().expect()`\n     // the following should not warn, since `expect` isn't implemented unless"}]}