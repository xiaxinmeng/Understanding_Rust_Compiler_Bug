{"sha": "4e355ebb6e8bc7269a37548f51743f897493a129", "node_id": "C_kwDOAAsO6NoAKDRlMzU1ZWJiNmU4YmM3MjY5YTM3NTQ4ZjUxNzQzZjg5NzQ5M2ExMjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-02T09:44:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-02T09:44:27Z"}, "message": "Auto merge of #7819 - rust-lang:avoid-linting-impossible-truncation, r=flip1995\n\navoid linting `possible_truncation` on bit-reducing operations\n\n---\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: avoid linting `possible_truncation` on bit-reducing operations", "tree": {"sha": "df949ed79de05a562c80e7e3fd24ba967954c1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df949ed79de05a562c80e7e3fd24ba967954c1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e355ebb6e8bc7269a37548f51743f897493a129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e355ebb6e8bc7269a37548f51743f897493a129", "html_url": "https://github.com/rust-lang/rust/commit/4e355ebb6e8bc7269a37548f51743f897493a129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e355ebb6e8bc7269a37548f51743f897493a129/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b7e87843c711aacba3a6336dd2422d05d44d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b7e87843c711aacba3a6336dd2422d05d44d7d", "html_url": "https://github.com/rust-lang/rust/commit/08b7e87843c711aacba3a6336dd2422d05d44d7d"}, {"sha": "00ea73e1627841fe3da7ba3699bbe99705063df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ea73e1627841fe3da7ba3699bbe99705063df1", "html_url": "https://github.com/rust-lang/rust/commit/00ea73e1627841fe3da7ba3699bbe99705063df1"}], "stats": {"total": 110, "additions": 101, "deletions": 9}, "files": [{"sha": "4af412ccaf35d7d0946429c5b997f9ae7081792e", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4e355ebb6e8bc7269a37548f51743f897493a129/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e355ebb6e8bc7269a37548f51743f897493a129/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=4e355ebb6e8bc7269a37548f51743f897493a129", "patch": "@@ -1,23 +1,88 @@\n+use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::expr_or_init;\n use clippy_utils::ty::is_isize_or_usize;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n use super::{utils, CAST_POSSIBLE_TRUNCATION};\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n-    // do not lint if cast comes from a `signum` function\n-    if let ExprKind::MethodCall(path, ..) = expr_or_init(cx, cast_expr).kind {\n-        if path.ident.name.as_str() == \"signum\" {\n-            return;\n-        }\n+fn constant_int(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u128> {\n+    if let Some((Constant::Int(c), _)) = constant(cx, cx.typeck_results(), expr) {\n+        Some(c)\n+    } else {\n+        None\n     }\n+}\n \n+fn get_constant_bits(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u64> {\n+    constant_int(cx, expr).map(|c| u64::from(128 - c.leading_zeros()))\n+}\n+\n+fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: bool) -> u64 {\n+    match expr_or_init(cx, expr).kind {\n+        ExprKind::Cast(inner, _) => apply_reductions(cx, nbits, inner, signed),\n+        ExprKind::Block(block, _) => block.expr.map_or(nbits, |e| apply_reductions(cx, nbits, e, signed)),\n+        ExprKind::Binary(op, left, right) => match op.node {\n+            BinOpKind::Div => {\n+                apply_reductions(cx, nbits, left, signed)\n+                    - (if signed {\n+                        0 // let's be conservative here\n+                    } else {\n+                        // by dividing by 1, we remove 0 bits, etc.\n+                        get_constant_bits(cx, right).map_or(0, |b| b.saturating_sub(1))\n+                    })\n+            },\n+            BinOpKind::Rem | BinOpKind::BitAnd => get_constant_bits(cx, right)\n+                .unwrap_or(u64::max_value())\n+                .min(apply_reductions(cx, nbits, left, signed)),\n+            BinOpKind::Shr => {\n+                apply_reductions(cx, nbits, left, signed)\n+                    - constant_int(cx, right).map_or(0, |s| u64::try_from(s).expect(\"shift too high\"))\n+            },\n+            _ => nbits,\n+        },\n+        ExprKind::MethodCall(method, _, [left, right], _) => {\n+            if signed {\n+                return nbits;\n+            }\n+            let max_bits = if method.ident.as_str() == \"min\" {\n+                get_constant_bits(cx, right)\n+            } else {\n+                None\n+            };\n+            apply_reductions(cx, nbits, left, signed).min(max_bits.unwrap_or(u64::max_value()))\n+        },\n+        ExprKind::MethodCall(method, _, [_, lo, hi], _) => {\n+            if method.ident.as_str() == \"clamp\" {\n+                //FIXME: make this a diagnostic item\n+                if let (Some(lo_bits), Some(hi_bits)) = (get_constant_bits(cx, lo), get_constant_bits(cx, hi)) {\n+                    return lo_bits.max(hi_bits);\n+                }\n+            }\n+            nbits\n+        },\n+        ExprKind::MethodCall(method, _, [_value], _) => {\n+            if method.ident.name.as_str() == \"signum\" {\n+                0 // do not lint if cast comes from a `signum` function\n+            } else {\n+                nbits\n+            }\n+        },\n+        _ => nbits,\n+    }\n+}\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n     let msg = match (cast_from.is_integral(), cast_to.is_integral()) {\n         (true, true) => {\n-            let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n+            let from_nbits = apply_reductions(\n+                cx,\n+                utils::int_ty_to_nbits(cast_from, cx.tcx),\n+                cast_expr,\n+                cast_from.is_signed(),\n+            );\n             let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n \n             let (should_lint, suffix) = match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {"}, {"sha": "ebc1ed5587fe30a9b8f6675e6ac51b79f1a9725f", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e355ebb6e8bc7269a37548f51743f897493a129/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e355ebb6e8bc7269a37548f51743f897493a129/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=4e355ebb6e8bc7269a37548f51743f897493a129", "patch": "@@ -100,4 +100,19 @@ fn main() {\n \n     let s = x.signum();\n     let _ = s as i32;\n+\n+    // Test for signed min\n+    (-99999999999i64).min(1) as i8; // should be linted because signed\n+\n+    // Test for various operations that remove enough bits for the result to fit\n+    (999999u64 & 1) as u8;\n+    (999999u64 % 15) as u8;\n+    (999999u64 / 0x1_0000_0000_0000) as u16;\n+    ({ 999999u64 >> 56 }) as u8;\n+    ({\n+        let x = 999999u64;\n+        x.min(1)\n+    }) as u8;\n+    999999u64.clamp(0, 255) as u8;\n+    999999u64.clamp(0, 256) as u8; // should still be linted\n }"}, {"sha": "edf8790cf33d861c3978669145d5e500f2232314", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e355ebb6e8bc7269a37548f51743f897493a129/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e355ebb6e8bc7269a37548f51743f897493a129/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=4e355ebb6e8bc7269a37548f51743f897493a129", "patch": "@@ -138,5 +138,17 @@ error: casting `isize` to `usize` may lose the sign of the value\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 22 previous errors\n+error: casting `i64` to `i8` may truncate the value\n+  --> $DIR/cast.rs:105:5\n+   |\n+LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `u64` to `u8` may truncate the value\n+  --> $DIR/cast.rs:117:5\n+   |\n+LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 24 previous errors\n "}]}