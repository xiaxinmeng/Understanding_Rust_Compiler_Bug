{"sha": "65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjA1NTQxNDMyYzFmZTdiNzVmYjJkZDNiMDIwZjkzM2YzYjVmNGI=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-01-06T02:55:36Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-02-04T18:44:22Z"}, "message": "note individual lint name set via lint group attribute in notes\n\nWarning or error messages set via a lint group attribute\n(e.g. `#[deny(warnings)]`) should still make it clear which individual\nlint (by name) was triggered, similarly to how we include \"on by\ndefault\" language for default lints. This\u2014and, while we're here, the\nexisting \"on by default\" language\u2014can be tucked into a note rather than\ncluttering the main error message. This occasions the slightest of\nrefactorings (we now have to get the diagnostic-builder with the main\nmessage first, before matching on the lint source).\n\nThis is in the matter of #36846.", "tree": {"sha": "6035bf5af6d02854d5d79ab8effeb1806bb1cb4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6035bf5af6d02854d5d79ab8effeb1806bb1cb4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "html_url": "https://github.com/rust-lang/rust/commit/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8967085617f13fd11067e632f4f29e7eb013c1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8967085617f13fd11067e632f4f29e7eb013c1fd", "html_url": "https://github.com/rust-lang/rust/commit/8967085617f13fd11067e632f4f29e7eb013c1fd"}], "stats": {"total": 111, "additions": 72, "deletions": 39}, "files": [{"sha": "62f19412d52f0da7c8c2e491b9a904d5685fac67", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -40,6 +40,7 @@ use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n use std::fmt;\n+use std::ops::Deref;\n use syntax::attr;\n use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n@@ -446,42 +447,46 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n                               -> DiagnosticBuilder<'a>\n     where S: Into<MultiSpan>\n {\n-    let (mut level, source) = lvlsrc;\n+    let (level, source) = lvlsrc;\n     if level == Allow {\n         return sess.diagnostic().struct_dummy();\n     }\n \n     let name = lint.name_lower();\n     let mut def = None;\n-    let msg = match source {\n-        Default => {\n-            format!(\"{}, #[{}({})] on by default\", msg,\n-                    level.as_str(), name)\n-        },\n-        CommandLine => {\n-            format!(\"{} [-{} {}]\", msg,\n-                    match level {\n-                        Warn => 'W', Deny => 'D', Forbid => 'F',\n-                        Allow => bug!()\n-                    }, name.replace(\"_\", \"-\"))\n-        },\n-        Node(src) => {\n-            def = Some(src);\n-            msg.to_string()\n-        }\n-    };\n \n-    // For purposes of printing, we can treat forbid as deny.\n-    if level == Forbid { level = Deny; }\n+    // Except for possible note details, forbid behaves like deny.\n+    let effective_level = if level == Forbid { Deny } else { level };\n \n-    let mut err = match (level, span) {\n+    let mut err = match (effective_level, span) {\n         (Warn, Some(sp)) => sess.struct_span_warn(sp, &msg[..]),\n         (Warn, None)     => sess.struct_warn(&msg[..]),\n         (Deny, Some(sp)) => sess.struct_span_err(sp, &msg[..]),\n         (Deny, None)     => sess.struct_err(&msg[..]),\n         _ => bug!(\"impossible level in raw_emit_lint\"),\n     };\n \n+    match source {\n+        Default => {\n+            err.note(&format!(\"#[{}({})] on by default\", level.as_str(), name));\n+        },\n+        CommandLine => {\n+            err.note(&format!(\"[-{} {}]\",\n+                              match level {\n+                                  Warn => 'W', Deny => 'D', Forbid => 'F',\n+                                  Allow => bug!()\n+                              }, name.replace(\"_\", \"-\")));\n+        },\n+        Node(lint_attr_name, src) => {\n+            def = Some(src);\n+            if lint_attr_name.as_str().deref() != name {\n+                let level_str = level.as_str();\n+                err.note(&format!(\"#[{}({})] implies #[{}({})]\",\n+                                  level_str, lint_attr_name, level_str, name));\n+            }\n+        }\n+    }\n+\n     // Check for future incompatibility lints and issue a stronger warning.\n     if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n         let explanation = format!(\"this was previously accepted by the compiler \\\n@@ -649,6 +654,8 @@ pub trait LintContext<'tcx>: Sized {\n                 }\n             };\n \n+            let lint_attr_name = result.expect(\"lint attribute should be well-formed\").0;\n+\n             for (lint_id, level, span) in v {\n                 let (now, now_source) = self.lints().get_level_source(lint_id);\n                 if now == Forbid && level != Forbid {\n@@ -660,7 +667,7 @@ pub trait LintContext<'tcx>: Sized {\n                     diag_builder.span_label(span, &format!(\"overruled by previous forbid\"));\n                     match now_source {\n                         LintSource::Default => &mut diag_builder,\n-                        LintSource::Node(forbid_source_span) => {\n+                        LintSource::Node(_, forbid_source_span) => {\n                             diag_builder.span_label(forbid_source_span,\n                                                     &format!(\"`forbid` level set here\"))\n                         },\n@@ -672,7 +679,7 @@ pub trait LintContext<'tcx>: Sized {\n                     let src = self.lints().get_level_source(lint_id).1;\n                     self.level_stack().push((lint_id, (now, src)));\n                     pushed += 1;\n-                    self.mut_lints().set_level(lint_id, (level, Node(span)));\n+                    self.mut_lints().set_level(lint_id, (level, Node(lint_attr_name, span)));\n                 }\n             }\n         }"}, {"sha": "9c2a892a5fc7d92984317b40a6cd1880cea4b2b7", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -338,7 +338,7 @@ pub enum LintSource {\n     Default,\n \n     /// Lint level was set by an attribute.\n-    Node(Span),\n+    Node(ast::Name, Span),\n \n     /// Lint level was set by a command-line flag.\n     CommandLine,"}, {"sha": "1d67bf3a1cddad7617c3cbf9cc73fa0ca399020a", "filename": "src/test/compile-fail/imports/rfc-1560-warning-cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -23,6 +23,7 @@ mod bar {\n         //~^ WARN `Foo` is ambiguous\n         //~| WARN hard error in a future release\n         //~| NOTE see issue #38260\n+        //~| NOTE #[warn(legacy_imports)] on by default\n     }\n }\n "}, {"sha": "6082740f427d711224742b25ece8b6a9021ea1ca", "filename": "src/test/compile-fail/issue-30730.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Fissue-30730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Fissue-30730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30730.rs?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n #![deny(warnings)] //~ NOTE: lint level defined here\n-use std::thread; //~ ERROR: unused import\n+use std::thread;\n+//~^ ERROR: unused import\n+//~| NOTE: #[deny(warnings)] implies #[deny(unused_imports)]\n fn main() {}"}, {"sha": "a8c377034756a43800f0aefa5df8f9cffccda9d3", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -12,7 +12,9 @@\n //~^ NOTE lint level defined here\n #![allow(dead_code)]\n \n-fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n+fn CamelCase() {}\n+//~^ ERROR function `CamelCase` should have a snake case name\n+//~| NOTE #[deny(bad_style)] implies #[deny(non_snake_case)]\n \n #[allow(bad_style)]\n mod test {\n@@ -22,19 +24,27 @@ mod test {\n     //~^ NOTE lint level defined here\n     //~^^ NOTE lint level defined here\n     mod bad {\n-        fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n+        fn CamelCase() {}\n+        //~^ ERROR function `CamelCase` should have a snake case name\n+        //~| NOTE #[forbid(bad_style)] implies #[forbid(non_snake_case)]\n \n-        static bad: isize = 1; //~ ERROR static variable `bad` should have an upper case name\n+        static bad: isize = 1;\n+        //~^ ERROR static variable `bad` should have an upper case name\n+        //~| NOTE #[forbid(bad_style)] implies #[forbid(non_upper_case_globals)]\n     }\n \n     mod warn {\n         #![warn(bad_style)]\n         //~^ NOTE lint level defined here\n         //~| NOTE lint level defined here\n \n-        fn CamelCase() {} //~ WARN function `CamelCase` should have a snake case name\n+        fn CamelCase() {}\n+        //~^ WARN function `CamelCase` should have a snake case name\n+        //~| NOTE #[warn(bad_style)] implies #[warn(non_snake_case)]\n \n-        struct snake_case; //~ WARN type `snake_case` should have a camel case name\n+        struct snake_case;\n+        //~^ WARN type `snake_case` should have a camel case name\n+        //~| NOTE #[warn(bad_style)] implies #[warn(non_camel_case_types)]\n     }\n }\n "}, {"sha": "8b76bedb003c008764099886147975590316d64d", "filename": "src/test/compile-fail/lint-output-format-2.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -11,15 +11,20 @@\n // compile-flags: -F unused_features\n // aux-build:lint_output_format.rs\n \n-#![feature(foo)] //~ ERROR unused or unknown feature\n+#![feature(foo)]\n+//~^ ERROR unused or unknown feature\n+//~| NOTE [-F unused-features]\n \n #![feature(test_feature)]\n \n extern crate lint_output_format;\n use lint_output_format::{foo, bar};\n-//~^ WARNING use of deprecated item: text,\n+//~^ WARNING use of deprecated item: text\n+//~| NOTE #[warn(deprecated)] on by default\n \n fn main() {\n-    let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n+    let _x = foo();\n+    //~^ WARNING use of deprecated item: text\n+    //~| NOTE #[warn(deprecated)] on by default\n     let _y = bar();\n }"}, {"sha": "5c195c8a4c63a37ddd09a1a4d21fa31967709b44", "filename": "src/test/run-pass/path-lookahead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Frun-pass%2Fpath-lookahead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Frun-pass%2Fpath-lookahead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath-lookahead.rs?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -10,11 +10,11 @@\n \n // Parser test for #37765\n \n-fn with_parens<T: ToString>(arg: T) -> String { //~WARN dead_code\n-  return (<T as ToString>::to_string(&arg)); //~WARN unused_parens\n+fn with_parens<T: ToString>(arg: T) -> String { //~WARN function is never used: `with_parens`\n+  return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n }\n \n-fn no_parens<T: ToString>(arg: T) -> String { //~WARN dead_code\n+fn no_parens<T: ToString>(arg: T) -> String { //~WARN function is never used: `no_parens`\n   return <T as ToString>::to_string(&arg);\n }\n "}, {"sha": "2a707c6eb8b103b428de32c4fb5f2c64f848b38a", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -1,4 +1,4 @@\n-error[E0276]: impl has stricter requirements than trait, #[deny(extra_requirement_in_impl)] on by default\n+error[E0276]: impl has stricter requirements than trait\n   --> $DIR/proj-outlives-region.rs:22:5\n    |\n 17 |     fn foo() where T: 'a;\n@@ -7,6 +7,7 @@ error[E0276]: impl has stricter requirements than trait, #[deny(extra_requiremen\n 22 |     fn foo() where U: 'a { } //~ ERROR E0276\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n    |\n+   = note: #[deny(extra_requirement_in_impl)] on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n "}, {"sha": "9e822bd8b0790097ff4832bd78edadf41677b8e9", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -1,4 +1,4 @@\n-error[E0276]: impl has stricter requirements than trait, #[deny(extra_requirement_in_impl)] on by default\n+error[E0276]: impl has stricter requirements than trait\n   --> $DIR/region-unrelated.rs:22:5\n    |\n 17 |     fn foo() where T: 'a;\n@@ -7,6 +7,7 @@ error[E0276]: impl has stricter requirements than trait, #[deny(extra_requiremen\n 22 |     fn foo() where V: 'a { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n    |\n+   = note: #[deny(extra_requirement_in_impl)] on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n "}, {"sha": "623bb4a0d26973664c268e2ff499a20362fc8bb0", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -4,6 +4,7 @@ error: variable `theTwo` should have a snake case name such as `the_two`\n 19 |     let theTwo = 2;\n    |         ^^^^^^\n    |\n+   = note: #[deny(warnings)] implies #[deny(non_snake_case)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |\n@@ -15,13 +16,16 @@ error: variable `theOtherTwo` should have a snake case name such as `the_other_t\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n+   |\n+   = note: #[deny(warnings)] implies #[deny(non_snake_case)]\n \n error: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:20:9\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n    |\n+   = note: #[deny(warnings)] implies #[deny(unused_variables)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |"}, {"sha": "4b1ca7f98bbf65d1d2ad8bd2e73462f5dcd16087", "filename": "src/test/ui/span/multispan-import-lint.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65b05541432c1fe7b75fb2dd3b020f933f3b5f4b/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr?ref=65b05541432c1fe7b75fb2dd3b020f933f3b5f4b", "patch": "@@ -1,6 +1,8 @@\n-warning: unused imports: `Eq`, `Ord`, `PartialEq`, `PartialOrd`, #[warn(unused_imports)] on by default\n+warning: unused imports: `Eq`, `Ord`, `PartialEq`, `PartialOrd`\n   --> $DIR/multispan-import-lint.rs:11:16\n    |\n 11 | use std::cmp::{Eq, Ord, min, PartialEq, PartialOrd};\n    |                ^^  ^^^       ^^^^^^^^^  ^^^^^^^^^^\n+   |\n+   = note: #[warn(unused_imports)] on by default\n "}]}