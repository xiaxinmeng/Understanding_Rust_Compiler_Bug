{"sha": "ed532c0d933aaae45e6804efc5936bea078bbaad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNTMyYzBkOTMzYWFhZTQ1ZTY4MDRlZmM1OTM2YmVhMDc4YmJhYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-01T13:56:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-01T13:56:22Z"}, "message": "Auto merge of #44238 - nrc:pulldown-warn, r=@QuietMisdreavus\n\nImprove the Pulldown/hoedown warnings\n\ncc #44229\n\nr? @QuietMisdreavus", "tree": {"sha": "65d869ef625e96d296d6cbea2d535855581a406a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d869ef625e96d296d6cbea2d535855581a406a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed532c0d933aaae45e6804efc5936bea078bbaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed532c0d933aaae45e6804efc5936bea078bbaad", "html_url": "https://github.com/rust-lang/rust/commit/ed532c0d933aaae45e6804efc5936bea078bbaad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed532c0d933aaae45e6804efc5936bea078bbaad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59a6d8a5687dd6aee871de0e7c9f734709ac544", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59a6d8a5687dd6aee871de0e7c9f734709ac544", "html_url": "https://github.com/rust-lang/rust/commit/a59a6d8a5687dd6aee871de0e7c9f734709ac544"}, {"sha": "1d6d09fa6d3392343a89e1a4d116bf4170334300", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6d09fa6d3392343a89e1a4d116bf4170334300", "html_url": "https://github.com/rust-lang/rust/commit/1d6d09fa6d3392343a89e1a4d116bf4170334300"}], "stats": {"total": 253, "additions": 214, "deletions": 39}, "files": [{"sha": "cc84e340c74f8bf1b6fdd937bb9f19dbdd534262", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 210, "deletions": 35, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/ed532c0d933aaae45e6804efc5936bea078bbaad/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed532c0d933aaae45e6804efc5936bea078bbaad/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ed532c0d933aaae45e6804efc5936bea078bbaad", "patch": "@@ -63,7 +63,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc::session::config::nightly_options::is_nightly_build;\n use rustc_data_structures::flock;\n \n-use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n+use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability, Span};\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n@@ -124,6 +124,9 @@ pub struct SharedContext {\n     /// The given user css file which allow to customize the generated\n     /// documentation theme.\n     pub css_file_extension: Option<PathBuf>,\n+    /// Warnings for the user if rendering would differ using different markdown\n+    /// parsers.\n+    pub markdown_warnings: RefCell<Vec<(Span, String, Vec<html_diff::Difference>)>>,\n }\n \n /// Indicates where an external crate can be found.\n@@ -457,6 +460,7 @@ pub fn run(mut krate: clean::Crate,\n             krate: krate.name.clone(),\n         },\n         css_file_extension: css_file_extension.clone(),\n+        markdown_warnings: RefCell::new(vec![]),\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -579,8 +583,102 @@ pub fn run(mut krate: clean::Crate,\n \n     write_shared(&cx, &krate, &*cache, index)?;\n \n+    let scx = cx.shared.clone();\n+\n     // And finally render the whole crate's documentation\n-    cx.krate(krate)\n+    let result = cx.krate(krate);\n+\n+    let markdown_warnings = scx.markdown_warnings.borrow();\n+    if !markdown_warnings.is_empty() {\n+        println!(\"WARNING: documentation for this crate may be rendered \\\n+                  differently using the new Pulldown renderer.\");\n+        println!(\"    See https://github.com/rust-lang/rust/issues/44229 for details.\");\n+        for &(ref span, ref text, ref diffs) in &*markdown_warnings {\n+            println!(\"WARNING: rendering difference in `{}`\", concise_str(text));\n+            println!(\"   --> {}:{}:{}\", span.filename, span.loline, span.locol);\n+            for d in diffs {\n+                render_difference(d);\n+            }\n+        }\n+    }\n+\n+    result\n+}\n+\n+// A short, single-line view of `s`.\n+fn concise_str(s: &str) -> String {\n+    if s.contains('\\n') {\n+        return format!(\"{}...\", s.lines().next().expect(\"Impossible! We just found a newline\"));\n+    }\n+    if s.len() > 70 {\n+        return format!(\"{} ... {}\", &s[..50], &s[s.len()-20..]);\n+    }\n+    s.to_owned()\n+}\n+\n+// Returns short versions of s1 and s2, starting from where the strings differ.\n+fn concise_compared_strs(s1: &str, s2: &str) -> (String, String) {\n+    let s1 = s1.trim();\n+    let s2 = s2.trim();\n+    if !s1.contains('\\n') && !s2.contains('\\n') && s1.len() <= 70 && s2.len() <= 70 {\n+        return (s1.to_owned(), s2.to_owned());\n+    }\n+\n+    let mut start_byte = 0;\n+    for (c1, c2) in s1.chars().zip(s2.chars()) {\n+        if c1 != c2 {\n+            break;\n+        }\n+\n+        start_byte += c1.len_utf8();\n+    }\n+\n+    if start_byte == 0 {\n+        return (concise_str(s1), concise_str(s2));\n+    }\n+\n+    let s1 = &s1[start_byte..];\n+    let s2 = &s2[start_byte..];\n+    (format!(\"...{}\", concise_str(s1)), format!(\"...{}\", concise_str(s2)))\n+}\n+\n+fn render_difference(diff: &html_diff::Difference) {\n+    match *diff {\n+        html_diff::Difference::NodeType { ref elem, ref opposite_elem } => {\n+            println!(\"    {} Types differ: expected: `{}`, found: `{}`\",\n+                     elem.path, elem.element_name, opposite_elem.element_name);\n+        }\n+        html_diff::Difference::NodeName { ref elem, ref opposite_elem } => {\n+            println!(\"    {} Tags differ: expected: `{}`, found: `{}`\",\n+                     elem.path, elem.element_name, opposite_elem.element_name);\n+        }\n+        html_diff::Difference::NodeAttributes { ref elem,\n+                                     ref elem_attributes,\n+                                     ref opposite_elem_attributes,\n+                                     .. } => {\n+            println!(\"    {} Attributes differ in `{}`: expected: `{:?}`, found: `{:?}`\",\n+                     elem.path, elem.element_name, elem_attributes, opposite_elem_attributes);\n+        }\n+        html_diff::Difference::NodeText { ref elem, ref elem_text, ref opposite_elem_text, .. } => {\n+            let (s1, s2) = concise_compared_strs(elem_text, opposite_elem_text);\n+            println!(\"    {} Text differs:\\n        expected: `{}`\\n        found:    `{}`\",\n+                     elem.path, s1, s2);\n+        }\n+        html_diff::Difference::NotPresent { ref elem, ref opposite_elem } => {\n+            if let Some(ref elem) = *elem {\n+                println!(\"    {} One element is missing: expected: `{}`\",\n+                         elem.path, elem.element_name);\n+            } else if let Some(ref elem) = *opposite_elem {\n+                if elem.element_name.is_empty() {\n+                    println!(\"    {} Unexpected element: `{}`\",\n+                             elem.path, concise_str(&elem.element_content));\n+                } else {\n+                    println!(\"    {} Unexpected element `{}`: found: `{}`\",\n+                             elem.path, elem.element_name, concise_str(&elem.element_content));\n+                }\n+            }\n+        }\n+    }\n }\n \n /// Build the search index from the collected metadata\n@@ -1641,47 +1739,92 @@ fn plain_summary_line(s: Option<&str>) -> String {\n fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n     document_stability(w, cx, item)?;\n     let prefix = render_assoc_const_value(item);\n-    document_full(w, item, cx.render_type, &prefix)?;\n+    document_full(w, item, cx, &prefix)?;\n     Ok(())\n }\n \n-fn get_html_diff(w: &mut fmt::Formatter, md_text: &str, render_type: RenderType,\n-                 prefix: &str) -> fmt::Result {\n-    let output = format!(\"{}\", Markdown(md_text, render_type));\n-    let old = format!(\"{}\", Markdown(md_text, match render_type {\n-                                                  RenderType::Hoedown => RenderType::Pulldown,\n-                                                  RenderType::Pulldown => RenderType::Hoedown,\n-                                              }));\n-    let differences = html_diff::get_differences(&output, &old);\n-    if !differences.is_empty() {\n-        println!(\"Differences spotted in {:?}:\\n{}\",\n-                 md_text,\n-                 differences.iter()\n-                            .filter_map(|s| {\n-                                match *s {\n-                                    html_diff::Difference::NodeText { ref elem_text,\n-                                                                      ref opposite_elem_text,\n-                                                                      .. }\n-                                        if elem_text.trim() == opposite_elem_text.trim() => None,\n-                                    _ => Some(format!(\"=> {}\", s.to_string())),\n-                                }\n-                            })\n-                            .collect::<Vec<String>>()\n-                            .join(\"\\n\"));\n-    }\n+/// Render md_text as markdown. Warns the user if there are difference in\n+/// rendering between Pulldown and Hoedown.\n+fn render_markdown(w: &mut fmt::Formatter,\n+                   md_text: &str,\n+                   span: Span,\n+                   render_type: RenderType,\n+                   prefix: &str,\n+                   scx: &SharedContext)\n+                   -> fmt::Result {\n+    let hoedown_output = format!(\"{}\", Markdown(md_text, RenderType::Hoedown));\n+    // We only emit warnings if the user has opted-in to Pulldown rendering.\n+    let output = if render_type == RenderType::Pulldown {\n+        let pulldown_output = format!(\"{}\", Markdown(md_text, RenderType::Pulldown));\n+        let differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n+        let differences = differences.into_iter()\n+            .filter(|s| {\n+                match *s {\n+                    html_diff::Difference::NodeText { ref elem_text,\n+                                                      ref opposite_elem_text,\n+                                                      .. }\n+                        if match_non_whitespace(elem_text, opposite_elem_text) => false,\n+                    _ => true,\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+\n+        if !differences.is_empty() {\n+            scx.markdown_warnings.borrow_mut().push((span, md_text.to_owned(), differences));\n+        }\n+\n+        pulldown_output\n+    } else {\n+        hoedown_output\n+    };\n+\n     write!(w, \"<div class='docblock'>{}{}</div>\", prefix, output)\n }\n \n+// Returns true iff s1 and s2 match, ignoring whitespace.\n+fn match_non_whitespace(s1: &str, s2: &str) -> bool {\n+    let s1 = s1.trim();\n+    let s2 = s2.trim();\n+    let mut cs1 = s1.chars();\n+    let mut cs2 = s2.chars();\n+    while let Some(c1) = cs1.next() {\n+        if c1.is_whitespace() {\n+            continue;\n+        }\n+\n+        loop {\n+            if let Some(c2) = cs2.next() {\n+                if !c2.is_whitespace() {\n+                    if c1 != c2 {\n+                        return false;\n+                    }\n+                    break;\n+                }\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    while let Some(c2) = cs2.next() {\n+        if !c2.is_whitespace() {\n+            return false;\n+        }\n+    }\n+\n+    true\n+}\n+\n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,\n-                  render_type: RenderType, prefix: &str) -> fmt::Result {\n+                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        get_html_diff(w, &markdown, render_type, prefix)?;\n+        render_markdown(w, &markdown, item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -1703,9 +1846,9 @@ fn render_assoc_const_value(item: &clean::Item) -> String {\n }\n \n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n-                 render_type: RenderType, prefix: &str) -> fmt::Result {\n+                 cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n-        get_html_diff(w, s, render_type, prefix)?;\n+        render_markdown(w, s, item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -3104,20 +3247,20 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         // because impls can't have a stability.\n                         document_stability(w, cx, it)?;\n                         if item.doc_value().is_some() {\n-                            document_full(w, item, cx.render_type, &prefix)?;\n+                            document_full(w, item, cx, &prefix)?;\n                         } else {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, it, link, cx.render_type, &prefix)?;\n+                            document_short(w, it, link, cx, &prefix)?;\n                         }\n                     }\n                 } else {\n                     document_stability(w, cx, item)?;\n-                    document_full(w, item, cx.render_type, &prefix)?;\n+                    document_full(w, item, cx, &prefix)?;\n                 }\n             } else {\n                 document_stability(w, cx, item)?;\n-                document_short(w, item, link, cx.render_type, &prefix)?;\n+                document_short(w, item, link, cx, &prefix)?;\n             }\n         }\n         Ok(())\n@@ -3586,3 +3729,35 @@ fn test_name_sorting() {\n     sorted.sort_by_key(|&s| name_key(s));\n     assert_eq!(names, sorted);\n }\n+\n+#[cfg(test)]\n+#[test]\n+fn test_match_non_whitespace() {\n+    assert!(match_non_whitespace(\"\", \"\"));\n+    assert!(match_non_whitespace(\"  \", \"\"));\n+    assert!(match_non_whitespace(\"\", \"  \"));\n+\n+    assert!(match_non_whitespace(\"a\", \"a\"));\n+    assert!(match_non_whitespace(\" a \", \"a\"));\n+    assert!(match_non_whitespace(\"a\", \"  a\"));\n+    assert!(match_non_whitespace(\"abc\", \"abc\"));\n+    assert!(match_non_whitespace(\"abc\", \" abc \"));\n+    assert!(match_non_whitespace(\"abc  \", \"abc\"));\n+    assert!(match_non_whitespace(\"abc xyz\", \"abc xyz\"));\n+    assert!(match_non_whitespace(\"abc xyz\", \"abc\\nxyz\"));\n+    assert!(match_non_whitespace(\"abc xyz\", \"abcxyz\"));\n+    assert!(match_non_whitespace(\"abcxyz\", \"abc xyz\"));\n+    assert!(match_non_whitespace(\"abc    xyz \", \" abc xyz\\n\"));\n+\n+    assert!(!match_non_whitespace(\"a\", \"b\"));\n+    assert!(!match_non_whitespace(\" a \", \"c\"));\n+    assert!(!match_non_whitespace(\"a\", \"  aa\"));\n+    assert!(!match_non_whitespace(\"abc\", \"ac\"));\n+    assert!(!match_non_whitespace(\"abc\", \" adc \"));\n+    assert!(!match_non_whitespace(\"abc  \", \"abca\"));\n+    assert!(!match_non_whitespace(\"abc xyz\", \"abc xy\"));\n+    assert!(!match_non_whitespace(\"abc xyz\", \"bc\\nxyz\"));\n+    assert!(!match_non_whitespace(\"abc xyz\", \"abc.xyz\"));\n+    assert!(!match_non_whitespace(\"abcxyz\", \"abc.xyz\"));\n+    assert!(!match_non_whitespace(\"abc    xyz \", \" abc xyz w\"));\n+}"}, {"sha": "074ab3ebd8fdca9b045f86672f04f093abf2704b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed532c0d933aaae45e6804efc5936bea078bbaad/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed532c0d933aaae45e6804efc5936bea078bbaad/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ed532c0d933aaae45e6804efc5936bea078bbaad", "patch": "@@ -212,7 +212,7 @@\n //! # }\n //! ```\n //!\n-//! [functions-list]: #functions-2\n+//! [functions-list]: #functions-1\n //!\n //! ## io::Result\n //!"}, {"sha": "f296048e30b54d16d564f506ca8ddad3c8eac84e", "filename": "src/test/rustdoc/issue-29449.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed532c0d933aaae45e6804efc5936bea078bbaad/src%2Ftest%2Frustdoc%2Fissue-29449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed532c0d933aaae45e6804efc5936bea078bbaad/src%2Ftest%2Frustdoc%2Fissue-29449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29449.rs?ref=ed532c0d933aaae45e6804efc5936bea078bbaad", "patch": "@@ -18,12 +18,12 @@ impl Foo {\n     /// # Panics\n     pub fn bar() {}\n \n-    // @has - '//*[@id=\"examples-2\"]//a' 'Examples'\n+    // @has - '//*[@id=\"examples-1\"]//a' 'Examples'\n     /// # Examples\n     pub fn bar_1() {}\n \n-    // @has - '//*[@id=\"examples-4\"]//a' 'Examples'\n-    // @has - '//*[@id=\"panics-2\"]//a' 'Panics'\n+    // @has - '//*[@id=\"examples-2\"]//a' 'Examples'\n+    // @has - '//*[@id=\"panics-1\"]//a' 'Panics'\n     /// # Examples\n     /// # Panics\n     pub fn bar_2() {}"}]}