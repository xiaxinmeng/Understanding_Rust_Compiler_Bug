{"sha": "a05d06f7c589525116dbc566bc5382d75ca03098", "node_id": "C_kwDOAAsO6NoAKGEwNWQwNmY3YzU4OTUyNTExNmRiYzU2NmJjNTM4MmQ3NWNhMDMwOTg", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-14T03:04:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-14T03:04:36Z"}, "message": "Rollup merge of #106799 - scottmcm:remove-unused-generics, r=cuviper\n\nStop having unused lifetimes on some `impl`s\n\nSee <https://doc.rust-lang.org/nightly/std/cmp/trait.PartialOrd.html#impl-PartialOrd%3COsStr%3E-for-PathBuf>, where these lifetimes show up even though they're not needed:\n![image](https://user-images.githubusercontent.com/18526288/212257802-da275167-38f9-4e2c-aafc-d44f0fc6a7c6.png)\n\nWith this PR, the unneeded lifetimes are no longer there:\n![image](https://user-images.githubusercontent.com/18526288/212257938-0097c4bf-1247-4c91-8445-5bf0dde1b501.png)", "tree": {"sha": "995a2041c2f2050e4d63381667ff2d6f70ac3b45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/995a2041c2f2050e4d63381667ff2d6f70ac3b45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a05d06f7c589525116dbc566bc5382d75ca03098", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwhvECRBK7hj4Ov3rIwAADVAIAAE+sHu3Ze6JNLhLiWLCVP3C\nac4xsujJPjkHRnmx/iqhwqUt4pvyWzdaO2DG6RMQaNeB1JObEyiiBXULRDQVoZi5\n+J2uNQK/doW2b+/T/Mf22aFbXcjfGZ87HQFlmsRbPBcqRsreasZVLWPqc3BhIbfo\n99J0C7zZDuk27F66RwVRFxzYv5w9pFYUEog7QPEEMFAVINDOfyQFA0fMbRQSBzww\nWKpVSV8BLnMD3m4JVCnEmozNwuuwAbsltU/ReJP+y82Uyrk1Fo+LWmrIotf+ytsG\neSKtOUGc8RDlOkSN2ML6NxnLmAquuA5FrJcGbFBM4cA3sw/Veu9V2HNiKKXR484=\n=KbOs\n-----END PGP SIGNATURE-----\n", "payload": "tree 995a2041c2f2050e4d63381667ff2d6f70ac3b45\nparent 5ff28671e7d05afec2c4dce00dbece05d4be9b4e\nparent 4949fb0419a58e937b5098d76e89dff4c91f3f7e\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673665476 +0900\ncommitter GitHub <noreply@github.com> 1673665476 +0900\n\nRollup merge of #106799 - scottmcm:remove-unused-generics, r=cuviper\n\nStop having unused lifetimes on some `impl`s\n\nSee <https://doc.rust-lang.org/nightly/std/cmp/trait.PartialOrd.html#impl-PartialOrd%3COsStr%3E-for-PathBuf>, where these lifetimes show up even though they're not needed:\n![image](https://user-images.githubusercontent.com/18526288/212257802-da275167-38f9-4e2c-aafc-d44f0fc6a7c6.png)\n\nWith this PR, the unneeded lifetimes are no longer there:\n![image](https://user-images.githubusercontent.com/18526288/212257938-0097c4bf-1247-4c91-8445-5bf0dde1b501.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a05d06f7c589525116dbc566bc5382d75ca03098", "html_url": "https://github.com/rust-lang/rust/commit/a05d06f7c589525116dbc566bc5382d75ca03098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a05d06f7c589525116dbc566bc5382d75ca03098/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff28671e7d05afec2c4dce00dbece05d4be9b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff28671e7d05afec2c4dce00dbece05d4be9b4e", "html_url": "https://github.com/rust-lang/rust/commit/5ff28671e7d05afec2c4dce00dbece05d4be9b4e"}, {"sha": "4949fb0419a58e937b5098d76e89dff4c91f3f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4949fb0419a58e937b5098d76e89dff4c91f3f7e", "html_url": "https://github.com/rust-lang/rust/commit/4949fb0419a58e937b5098d76e89dff4c91f3f7e"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "a2dcee0e2bdb26ef252f04cd8feee8d217b27683", "filename": "library/std/src/path.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a05d06f7c589525116dbc566bc5382d75ca03098/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05d06f7c589525116dbc566bc5382d75ca03098/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=a05d06f7c589525116dbc566bc5382d75ca03098", "patch": "@@ -3177,33 +3177,33 @@ impl<'a> IntoIterator for &'a Path {\n }\n \n macro_rules! impl_cmp {\n-    ($lhs:ty, $rhs: ty) => {\n+    (<$($life:lifetime),*> $lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n-        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+        impl<$($life),*> PartialEq<$rhs> for $lhs {\n             #[inline]\n             fn eq(&self, other: &$rhs) -> bool {\n                 <Path as PartialEq>::eq(self, other)\n             }\n         }\n \n         #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n-        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+        impl<$($life),*> PartialEq<$lhs> for $rhs {\n             #[inline]\n             fn eq(&self, other: &$lhs) -> bool {\n                 <Path as PartialEq>::eq(self, other)\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$rhs> for $lhs {\n+        impl<$($life),*> PartialOrd<$rhs> for $lhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self, other)\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$lhs> for $rhs {\n+        impl<$($life),*> PartialOrd<$lhs> for $rhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self, other)\n@@ -3212,40 +3212,40 @@ macro_rules! impl_cmp {\n     };\n }\n \n-impl_cmp!(PathBuf, Path);\n-impl_cmp!(PathBuf, &'a Path);\n-impl_cmp!(Cow<'a, Path>, Path);\n-impl_cmp!(Cow<'a, Path>, &'b Path);\n-impl_cmp!(Cow<'a, Path>, PathBuf);\n+impl_cmp!(<> PathBuf, Path);\n+impl_cmp!(<'a> PathBuf, &'a Path);\n+impl_cmp!(<'a> Cow<'a, Path>, Path);\n+impl_cmp!(<'a, 'b> Cow<'a, Path>, &'b Path);\n+impl_cmp!(<'a> Cow<'a, Path>, PathBuf);\n \n macro_rules! impl_cmp_os_str {\n-    ($lhs:ty, $rhs: ty) => {\n+    (<$($life:lifetime),*> $lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+        impl<$($life),*> PartialEq<$rhs> for $lhs {\n             #[inline]\n             fn eq(&self, other: &$rhs) -> bool {\n                 <Path as PartialEq>::eq(self, other.as_ref())\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+        impl<$($life),*> PartialEq<$lhs> for $rhs {\n             #[inline]\n             fn eq(&self, other: &$lhs) -> bool {\n                 <Path as PartialEq>::eq(self.as_ref(), other)\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$rhs> for $lhs {\n+        impl<$($life),*> PartialOrd<$rhs> for $lhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$lhs> for $rhs {\n+        impl<$($life),*> PartialOrd<$lhs> for $rhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)\n@@ -3254,20 +3254,20 @@ macro_rules! impl_cmp_os_str {\n     };\n }\n \n-impl_cmp_os_str!(PathBuf, OsStr);\n-impl_cmp_os_str!(PathBuf, &'a OsStr);\n-impl_cmp_os_str!(PathBuf, Cow<'a, OsStr>);\n-impl_cmp_os_str!(PathBuf, OsString);\n-impl_cmp_os_str!(Path, OsStr);\n-impl_cmp_os_str!(Path, &'a OsStr);\n-impl_cmp_os_str!(Path, Cow<'a, OsStr>);\n-impl_cmp_os_str!(Path, OsString);\n-impl_cmp_os_str!(&'a Path, OsStr);\n-impl_cmp_os_str!(&'a Path, Cow<'b, OsStr>);\n-impl_cmp_os_str!(&'a Path, OsString);\n-impl_cmp_os_str!(Cow<'a, Path>, OsStr);\n-impl_cmp_os_str!(Cow<'a, Path>, &'b OsStr);\n-impl_cmp_os_str!(Cow<'a, Path>, OsString);\n+impl_cmp_os_str!(<> PathBuf, OsStr);\n+impl_cmp_os_str!(<'a> PathBuf, &'a OsStr);\n+impl_cmp_os_str!(<'a> PathBuf, Cow<'a, OsStr>);\n+impl_cmp_os_str!(<> PathBuf, OsString);\n+impl_cmp_os_str!(<> Path, OsStr);\n+impl_cmp_os_str!(<'a> Path, &'a OsStr);\n+impl_cmp_os_str!(<'a> Path, Cow<'a, OsStr>);\n+impl_cmp_os_str!(<> Path, OsString);\n+impl_cmp_os_str!(<'a> &'a Path, OsStr);\n+impl_cmp_os_str!(<'a, 'b> &'a Path, Cow<'b, OsStr>);\n+impl_cmp_os_str!(<'a> &'a Path, OsString);\n+impl_cmp_os_str!(<'a> Cow<'a, Path>, OsStr);\n+impl_cmp_os_str!(<'a, 'b> Cow<'a, Path>, &'b OsStr);\n+impl_cmp_os_str!(<'a> Cow<'a, Path>, OsString);\n \n #[stable(since = \"1.7.0\", feature = \"strip_prefix\")]\n impl fmt::Display for StripPrefixError {"}]}