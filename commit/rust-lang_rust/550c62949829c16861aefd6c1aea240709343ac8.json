{"sha": "550c62949829c16861aefd6c1aea240709343ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MGM2Mjk0OTgyOWMxNjg2MWFlZmQ2YzFhZWEyNDA3MDkzNDNhYzg=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-06T09:08:50Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-06T09:08:50Z"}, "message": "do not truncate display for hover\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "4859212d919e7f7ce4a97b3b343db36a1dc59798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4859212d919e7f7ce4a97b3b343db36a1dc59798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/550c62949829c16861aefd6c1aea240709343ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/550c62949829c16861aefd6c1aea240709343ac8", "html_url": "https://github.com/rust-lang/rust/commit/550c62949829c16861aefd6c1aea240709343ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/550c62949829c16861aefd6c1aea240709343ac8/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4d128e454448191c4b21d8e151c673e4c42376e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d128e454448191c4b21d8e151c673e4c42376e", "html_url": "https://github.com/rust-lang/rust/commit/c4d128e454448191c4b21d8e151c673e4c42376e"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "d52f22157fffa706fad42e6b12d144d5b253f74b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/550c62949829c16861aefd6c1aea240709343ac8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550c62949829c16861aefd6c1aea240709343ac8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=550c62949829c16861aefd6c1aea240709343ac8", "patch": "@@ -143,7 +143,7 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n             ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n             ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        Definition::Local(it) => Some(rust_code_markup(&it.ty(db).display_truncated(db, None))),\n+        Definition::Local(it) => Some(rust_code_markup(&it.ty(db).display(db))),\n         Definition::TypeParam(_) | Definition::SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n@@ -279,6 +279,47 @@ mod tests {\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"u32\"));\n     }\n \n+    #[test]\n+    fn hover_shows_long_type_of_an_expression() {\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            struct Scan<A, B, C> {\n+                a: A,\n+                b: B,\n+                c: C,\n+            }\n+\n+            struct FakeIter<I> {\n+                inner: I,\n+            }\n+\n+            struct OtherStruct<T> {\n+                i: T,\n+            }\n+\n+            enum FakeOption<T> {\n+                Some(T),\n+                None,\n+            }\n+\n+            fn scan<A, B, C>(a: A, b: B, c: C) -> FakeIter<Scan<OtherStruct<A>, B, C>> {\n+                FakeIter { inner: Scan { a, b, c } }\n+            }\n+\n+            fn main() {\n+                let num: i32 = 55;\n+                let closure = |memo: &mut u32, value: &u32, _another: &mut u32| -> FakeOption<u32> {\n+                    FakeOption::Some(*memo + value)\n+                };\n+                let number = 5u32;\n+                let mut iter<|> = scan(OtherStruct { i: num }, closure, number);\n+            }\n+            \"#,\n+            &[\"FakeIter<Scan<OtherStruct<OtherStruct<i32>>, |&mut u32, &u32, &mut u32| -> FakeOption<u32>, u32>>\"],\n+        );\n+    }\n+\n     #[test]\n     fn hover_shows_fn_signature() {\n         // Single file with result"}]}