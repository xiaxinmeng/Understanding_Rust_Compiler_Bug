{"sha": "a26ac4cb94f0cd1afb2c05439f757cb3ba465b83", "node_id": "C_kwDOAAsO6NoAKGEyNmFjNGNiOTRmMGNkMWFmYjJjMDU0MzlmNzU3Y2IzYmE0NjViODM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T07:35:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T07:35:34Z"}, "message": "Rollup merge of #109380 - Randl:patch-1, r=oli-obk\n\nadd `known-bug` test for unsoundness issue\n\nTest for https://github.com/rust-lang/rust/issues/97156", "tree": {"sha": "a9f1273f6a2a1d3d8699c2c9cb3e9baa5bf2b4be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f1273f6a2a1d3d8699c2c9cb3e9baa5bf2b4be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHAFGCRBK7hj4Ov3rIwAAfzYIAD9HpfsyH6udlH/em7hTGI93\nxz5ivYtfAlkEDqtfKbcZ2wzHmK2Qzo2shzdZpZC3M4RgttV/Yx0MvOsye9qRZhe9\nDOLRXE0M3tOBKyARE9/YwqqhnLgx6WlVEtG7Hquw6k3JUqZMPXb5lvdr/ajg7HeM\n2kmQo8LGSGD06pvRuKMSHaI/2BtE7NLPI6TZrm6jmkh4p4L1GF5YTnD7VU+lmvb1\nA6jvLfGKfhXgWhIQ/JRGvxnsCZf89vCfQ/f9fXA2lTn9FOnu+hK0D8h/vd3GlXzW\nwNOfFd8CP4INQnmdfzOB5vq0spjEptF/mwIw46swbf0A8GMSvFNwGs74r9sAw+4=\n=KjH2\n-----END PGP SIGNATURE-----\n", "payload": "tree a9f1273f6a2a1d3d8699c2c9cb3e9baa5bf2b4be\nparent 3e33fb9f1209fc0c135d5583944d6f80ea21e89a\nparent 009ed88789d5351c763cd6d1056fe2c1a040bf33\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679556934 +0100\ncommitter GitHub <noreply@github.com> 1679556934 +0100\n\nRollup merge of #109380 - Randl:patch-1, r=oli-obk\n\nadd `known-bug` test for unsoundness issue\n\nTest for https://github.com/rust-lang/rust/issues/97156\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83", "html_url": "https://github.com/rust-lang/rust/commit/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "html_url": "https://github.com/rust-lang/rust/commit/3e33fb9f1209fc0c135d5583944d6f80ea21e89a"}, {"sha": "009ed88789d5351c763cd6d1056fe2c1a040bf33", "url": "https://api.github.com/repos/rust-lang/rust/commits/009ed88789d5351c763cd6d1056fe2c1a040bf33", "html_url": "https://github.com/rust-lang/rust/commit/009ed88789d5351c763cd6d1056fe2c1a040bf33"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "64317b9d39aae4d99ea034982337a7821b3a61f4", "filename": "tests/ui/const-generics/generic_const_exprs/typeid-equality-by-subtyping.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ftypeid-equality-by-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ftypeid-equality-by-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ftypeid-equality-by-subtyping.rs?ref=a26ac4cb94f0cd1afb2c05439f757cb3ba465b83", "patch": "@@ -0,0 +1,52 @@\n+// check-pass\n+// known-bug: #97156\n+\n+#![feature(const_type_id, generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+use std::any::TypeId;\n+// `One` and `Two` are currently considered equal types, as both\n+// `One <: Two` and `One :> Two` holds.\n+type One = for<'a> fn(&'a (), &'a ());\n+type Two = for<'a, 'b> fn(&'a (), &'b ());\n+trait AssocCt {\n+    const ASSOC: usize;\n+}\n+const fn to_usize<T: 'static>() -> usize {\n+    const WHAT_A_TYPE: TypeId = TypeId::of::<One>();\n+    match TypeId::of::<T>() {\n+        WHAT_A_TYPE => 0,\n+        _ => 1000,\n+    } \n+}\n+impl<T: 'static> AssocCt for T {\n+    const ASSOC: usize = to_usize::<T>();\n+}\n+\n+trait WithAssoc<U> {\n+    type Assoc;\n+}\n+impl<T: 'static> WithAssoc<()> for T where [(); <T as AssocCt>::ASSOC]: {\n+    type Assoc = [u8; <T as AssocCt>::ASSOC];\n+}\n+\n+fn generic<T: 'static, U>(x: <T as WithAssoc<U>>::Assoc) -> <T as WithAssoc<U>>::Assoc\n+where\n+    [(); <T as AssocCt>::ASSOC]:,\n+    T: WithAssoc<U>,\n+{\n+    x\n+}\n+\n+\n+fn unsound<T>(x: <One as WithAssoc<T>>::Assoc) -> <Two as WithAssoc<T>>::Assoc\n+where\n+    One: WithAssoc<T>,\n+{\n+    let x: <Two as WithAssoc<T>>::Assoc = generic::<One, T>(x);\n+    x\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", unsound::<()>([]));\n+}"}]}