{"sha": "ee25b6bdebf3bd079d4129470c31b803c21bdedc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMjViNmJkZWJmM2JkMDc5ZDQxMjk0NzBjMzFiODAzYzIxYmRlZGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-07-24T09:09:41Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-08-27T13:19:14Z"}, "message": "debuginfo: Allow to activate GDB pretty printers in autotests.", "tree": {"sha": "2754b82b96c719e83b8b4fdd7f9ba305c959add9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2754b82b96c719e83b8b4fdd7f9ba305c959add9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee25b6bdebf3bd079d4129470c31b803c21bdedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee25b6bdebf3bd079d4129470c31b803c21bdedc", "html_url": "https://github.com/rust-lang/rust/commit/ee25b6bdebf3bd079d4129470c31b803c21bdedc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee25b6bdebf3bd079d4129470c31b803c21bdedc/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9669c6dc1a7299dd01ddce50c0e5eae66465474d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9669c6dc1a7299dd01ddce50c0e5eae66465474d", "html_url": "https://github.com/rust-lang/rust/commit/9669c6dc1a7299dd01ddce50c0e5eae66465474d"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "881eee93d2a8fe896170010dc2abf9aa825be8e1", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ee25b6bdebf3bd079d4129470c31b803c21bdedc/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee25b6bdebf3bd079d4129470c31b803c21bdedc/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=ee25b6bdebf3bd079d4129470c31b803c21bdedc", "patch": "@@ -323,7 +323,12 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     };\n \n     let config = &mut config;\n-    let DebuggerCommands { commands, check_lines, .. } = parse_debugger_commands(testfile, \"gdb\");\n+    let DebuggerCommands {\n+        commands,\n+        check_lines,\n+        use_gdb_pretty_printer,\n+        ..\n+    } = parse_debugger_commands(testfile, \"gdb\");\n     let mut cmds = commands.connect(\"\\n\");\n \n     // compile test file (it should have 'compile-flags:-g' in the header)\n@@ -334,7 +339,6 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     let exe_file = make_exe_name(config, testfile);\n \n-    let mut proc_args;\n     let debugger_run_result;\n     match config.target.as_slice() {\n         \"arm-linux-androideabi\" => {\n@@ -454,6 +458,12 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n         }\n \n         _=> {\n+            let rust_src_root = find_rust_src_root(config).expect(\"Could not find Rust source root\");\n+            let rust_pp_module_rel_path = Path::new(\"./src/etc\");\n+            let rust_pp_module_abs_path = rust_src_root.join(rust_pp_module_rel_path)\n+                                                       .as_str()\n+                                                       .unwrap()\n+                                                       .to_string();\n             // write debugger script\n             let script_str = [\n                 \"set charset UTF-8\".to_string(),\n@@ -466,6 +476,12 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                              script_str.as_slice(),\n                              \"debugger.script\");\n \n+            if use_gdb_pretty_printer {\n+                // Only emit the gdb auto-loading script if pretty printers\n+                // should actually be loaded\n+                dump_gdb_autoload_script(config, testfile);\n+            }\n+\n             // run debugger script with gdb\n             #[cfg(windows)]\n             fn debugger() -> String {\n@@ -483,16 +499,27 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 vec!(\"-quiet\".to_string(),\n                      \"-batch\".to_string(),\n                      \"-nx\".to_string(),\n+                     // Add the directory containing the pretty printers to\n+                     // GDB's script auto loading safe path ...\n+                     format!(\"-iex=add-auto-load-safe-path {}\",\n+                             rust_pp_module_abs_path.as_slice()),\n+                     // ... and also the test directory\n+                     format!(\"-iex=add-auto-load-safe-path {}\",\n+                             config.build_base.as_str().unwrap()),\n                      format!(\"-command={}\", debugger_script.as_str().unwrap()),\n                      exe_file.as_str().unwrap().to_string());\n-            proc_args = ProcArgs {\n+\n+            let proc_args = ProcArgs {\n                 prog: debugger(),\n                 args: debugger_opts,\n             };\n+\n+            let environment = vec![(\"PYTHONPATH\".to_string(), rust_pp_module_abs_path)];\n+\n             debugger_run_result = compose_and_run(config,\n                                                   testfile,\n                                                   proc_args,\n-                                                  Vec::new(),\n+                                                  environment,\n                                                   config.run_lib_path.as_slice(),\n                                                   None,\n                                                   None);\n@@ -504,6 +531,32 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     }\n \n     check_debugger_output(&debugger_run_result, check_lines.as_slice());\n+\n+    fn dump_gdb_autoload_script(config: &Config, testfile: &Path) {\n+        let mut script_path = output_base_name(config, testfile);\n+        let mut script_file_name = script_path.filename().unwrap().to_vec();\n+        script_file_name.push_all(\"-gdb.py\".as_bytes());\n+        script_path.set_filename(script_file_name.as_slice());\n+\n+        let script_content = \"import gdb_rust_pretty_printing\\n\\\n+                              gdb_rust_pretty_printing.register_printers(gdb.current_objfile())\\n\"\n+                             .as_bytes();\n+\n+        File::create(&script_path).write(script_content).unwrap();\n+    }\n+}\n+\n+fn find_rust_src_root(config: &Config) -> Option<Path> {\n+    let mut path = config.src_base.clone();\n+    let path_postfix = Path::new(\"src/etc/lldb_batchmode.py\");\n+\n+    while path.pop() {\n+        if path.join(path_postfix.clone()).is_file() {\n+            return Some(path);\n+        }\n+    }\n+\n+    return None;\n }\n \n fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path) {\n@@ -533,7 +586,8 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n     let DebuggerCommands {\n         commands,\n         check_lines,\n-        breakpoint_lines\n+        breakpoint_lines,\n+        ..\n     } = parse_debugger_commands(testfile, \"lldb\");\n \n     // Write debugger script:\n@@ -619,6 +673,7 @@ struct DebuggerCommands {\n     commands: Vec<String>,\n     check_lines: Vec<String>,\n     breakpoint_lines: Vec<uint>,\n+    use_gdb_pretty_printer: bool\n }\n \n fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n@@ -631,6 +686,7 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n     let mut breakpoint_lines = vec!();\n     let mut commands = vec!();\n     let mut check_lines = vec!();\n+    let mut use_gdb_pretty_printer = false;\n     let mut counter = 1;\n     let mut reader = BufferedReader::new(File::open(file_path).unwrap());\n     for line in reader.lines() {\n@@ -640,6 +696,10 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n                     breakpoint_lines.push(counter);\n                 }\n \n+                if line.as_slice().contains(\"gdb-use-pretty-printer\") {\n+                    use_gdb_pretty_printer = true;\n+                }\n+\n                 header::parse_name_value_directive(\n                         line.as_slice(),\n                         command_directive.as_slice()).map(|cmd| {\n@@ -663,7 +723,8 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n     DebuggerCommands {\n         commands: commands,\n         check_lines: check_lines,\n-        breakpoint_lines: breakpoint_lines\n+        breakpoint_lines: breakpoint_lines,\n+        use_gdb_pretty_printer: use_gdb_pretty_printer,\n     }\n }\n "}]}