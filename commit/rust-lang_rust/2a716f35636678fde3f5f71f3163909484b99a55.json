{"sha": "2a716f35636678fde3f5f71f3163909484b99a55", "node_id": "C_kwDOAAsO6NoAKDJhNzE2ZjM1NjM2Njc4ZmRlM2Y1ZjcxZjMxNjM5MDk0ODRiOTlhNTU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-22T07:14:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-13T13:31:54Z"}, "message": "resolve: Centralize retrieval of items span and item name", "tree": {"sha": "612a0bad23101c222e91124badf80b6cf76ac293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612a0bad23101c222e91124badf80b6cf76ac293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a716f35636678fde3f5f71f3163909484b99a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a716f35636678fde3f5f71f3163909484b99a55", "html_url": "https://github.com/rust-lang/rust/commit/2a716f35636678fde3f5f71f3163909484b99a55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a716f35636678fde3f5f71f3163909484b99a55/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7f424b80ab734cfeb5215be62cff3e48ed5da60", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f424b80ab734cfeb5215be62cff3e48ed5da60", "html_url": "https://github.com/rust-lang/rust/commit/c7f424b80ab734cfeb5215be62cff3e48ed5da60"}], "stats": {"total": 106, "additions": 37, "deletions": 69}, "files": [{"sha": "415942405ae97ff001fed62b7da0e16dfb543df5", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=2a716f35636678fde3f5f71f3163909484b99a55", "patch": "@@ -130,12 +130,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     };\n \n                     let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n-                    let span = self.cstore().get_span_untracked(def_id, &self.tcx.sess);\n                     Some(self.new_module(\n                         parent,\n                         ModuleKind::Def(def_kind, def_id, name),\n                         expn_id,\n-                        span,\n+                        self.def_span(def_id),\n                         // FIXME: Account for `#[no_implicit_prelude]` attributes.\n                         parent.map_or(false, |module| module.no_implicit_prelude),\n                     ))"}, {"sha": "62873342c2e4ea067a2dbe03610586611d76c3a0", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=2a716f35636678fde3f5f71f3163909484b99a55", "patch": "@@ -12,7 +12,7 @@ use rustc_errors::{struct_span_err, SuggestionStyle};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::PrimTy;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n@@ -555,25 +555,22 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         return err;\n                     }\n                     Res::SelfTyAlias { alias_to: def_id, .. } => {\n-                        if let Some(impl_span) = self.opt_span(def_id) {\n-                            err.span_label(\n-                                reduce_impl_span_to_impl_keyword(sm, impl_span),\n-                                \"`Self` type implicitly declared here, by this `impl`\",\n-                            );\n-                        }\n+                        err.span_label(\n+                            reduce_impl_span_to_impl_keyword(sm, self.def_span(def_id)),\n+                            \"`Self` type implicitly declared here, by this `impl`\",\n+                        );\n                         err.span_label(span, \"use a type here instead\");\n                         return err;\n                     }\n                     Res::Def(DefKind::TyParam, def_id) => {\n-                        if let Some(span) = self.opt_span(def_id) {\n-                            err.span_label(span, \"type parameter from outer function\");\n-                        }\n+                        err.span_label(self.def_span(def_id), \"type parameter from outer function\");\n                         def_id\n                     }\n                     Res::Def(DefKind::ConstParam, def_id) => {\n-                        if let Some(span) = self.opt_span(def_id) {\n-                            err.span_label(span, \"const parameter from outer function\");\n-                        }\n+                        err.span_label(\n+                            self.def_span(def_id),\n+                            \"const parameter from outer function\",\n+                        );\n                         def_id\n                     }\n                     _ => {\n@@ -589,7 +586,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     // Try to retrieve the span of the function signature and generate a new\n                     // message with a local type or const parameter.\n                     let sugg_msg = \"try using a local generic parameter instead\";\n-                    let name = self.opt_name(def_id).unwrap_or(sym::T);\n+                    let name = self.tcx.item_name(def_id);\n                     let (span, snippet) = if span.is_empty() {\n                         let snippet = format!(\"<{}>\", name);\n                         (span, snippet)\n@@ -1369,8 +1366,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n         if ident.name == kw::Default\n             && let ModuleKind::Def(DefKind::Enum, def_id, _) = parent_scope.module.kind\n-            && let Some(span) = self.opt_span(def_id)\n         {\n+            let span = self.def_span(def_id);\n             let source_map = self.tcx.sess.source_map();\n             let head_span = source_map.guess_head_span(span);\n             if let Ok(head) = source_map.span_to_snippet(head_span) {\n@@ -1446,11 +1443,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Some(suggestion) if suggestion.candidate == kw::Underscore => return false,\n             Some(suggestion) => suggestion,\n         };\n-        let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n-            LOCAL_CRATE => self.opt_span(def_id),\n-            _ => Some(self.cstore().get_span_untracked(def_id, self.tcx.sess)),\n-        });\n-        if let Some(def_span) = def_span {\n+        if let Some(def_span) = suggestion.res.opt_def_id().map(|def_id| self.def_span(def_id)) {\n             if span.overlaps(def_span) {\n                 // Don't suggest typo suggestion for itself like in the following:\n                 // error[E0423]: expected function, tuple struct or tuple variant, found struct `X`"}, {"sha": "eff10e5af9fe879d849ca3df0b7ddc6718de8e28", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=2a716f35636678fde3f5f71f3163909484b99a55", "patch": "@@ -3376,7 +3376,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         participle: \"defined\",\n                         article: res.article(),\n                         shadowed_binding: res,\n-                        shadowed_binding_span: self.r.opt_span(def_id).expect(\"const parameter defined outside of local crate\"),\n+                        shadowed_binding_span: self.r.def_span(def_id),\n                     }\n                 );\n                 None"}, {"sha": "6a9b1505712cd075317b29e924763f65dae8b101", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2a716f35636678fde3f5f71f3163909484b99a55", "patch": "@@ -19,7 +19,7 @@ use rustc_errors::{\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::PrimTy;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n@@ -166,13 +166,6 @@ impl TypoCandidate {\n }\n \n impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n-    fn def_span(&self, def_id: DefId) -> Option<Span> {\n-        match def_id.krate {\n-            LOCAL_CRATE => self.r.opt_span(def_id),\n-            _ => Some(self.r.cstore().get_span_untracked(def_id, self.r.tcx.sess)),\n-        }\n-    }\n-\n     fn make_base_error(\n         &mut self,\n         path: &[Segment],\n@@ -191,7 +184,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 span,\n                 span_label: match res {\n                     Res::Def(kind, def_id) if kind == DefKind::TyParam => {\n-                        self.def_span(def_id).map(|span| (span, \"found this type parameter\"))\n+                        Some((self.r.def_span(def_id), \"found this type parameter\"))\n                     }\n                     _ => None,\n                 },\n@@ -1295,9 +1288,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }\n                 PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n                     let span = find_span(&source, err);\n-                    if let Some(span) = self.def_span(def_id) {\n-                        err.span_label(span, &format!(\"`{}` defined here\", path_str));\n-                    }\n+                    err.span_label(self.r.def_span(def_id), &format!(\"`{path_str}` defined here\"));\n                     let (tail, descr, applicability) = match source {\n                         PathSource::Pat | PathSource::TupleStruct(..) => {\n                             (\"\", \"pattern\", Applicability::MachineApplicable)\n@@ -1359,17 +1350,14 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 if self.r.tcx.sess.is_nightly_build() {\n                     let msg = \"you might have meant to use `#![feature(trait_alias)]` instead of a \\\n                                `type` alias\";\n-                    if let Some(span) = self.def_span(def_id) {\n-                        if let Ok(snip) = self.r.tcx.sess.source_map().span_to_snippet(span) {\n-                            // The span contains a type alias so we should be able to\n-                            // replace `type` with `trait`.\n-                            let snip = snip.replacen(\"type\", \"trait\", 1);\n-                            err.span_suggestion(span, msg, snip, Applicability::MaybeIncorrect);\n-                        } else {\n-                            err.span_help(span, msg);\n-                        }\n+                    let span = self.r.def_span(def_id);\n+                    if let Ok(snip) = self.r.tcx.sess.source_map().span_to_snippet(span) {\n+                        // The span contains a type alias so we should be able to\n+                        // replace `type` with `trait`.\n+                        let snip = snip.replacen(\"type\", \"trait\", 1);\n+                        err.span_suggestion(span, msg, snip, Applicability::MaybeIncorrect);\n                     } else {\n-                        err.help(msg);\n+                        err.span_help(span, msg);\n                     }\n                 }\n             }\n@@ -1512,9 +1500,10 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 match source {\n                     PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n                         let span = find_span(&source, err);\n-                        if let Some(span) = self.def_span(def_id) {\n-                            err.span_label(span, &format!(\"`{}` defined here\", path_str));\n-                        }\n+                        err.span_label(\n+                            self.r.def_span(def_id),\n+                            &format!(\"`{path_str}` defined here\"),\n+                        );\n                         err.span_suggestion(\n                             span,\n                             \"use this syntax instead\",\n@@ -1527,9 +1516,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             }\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_def_id), _) if ns == ValueNS => {\n                 let def_id = self.r.tcx.parent(ctor_def_id);\n-                if let Some(span) = self.def_span(def_id) {\n-                    err.span_label(span, &format!(\"`{}` defined here\", path_str));\n-                }\n+                err.span_label(self.r.def_span(def_id), &format!(\"`{path_str}` defined here\"));\n                 let fields = self.r.field_names.get(&def_id).map_or_else(\n                     || \"/* fields */\".to_string(),\n                     |fields| vec![\"_\"; fields.len()].join(\", \"),\n@@ -2093,9 +2080,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         };\n \n         if def_id.is_local() {\n-            if let Some(span) = self.def_span(def_id) {\n-                err.span_note(span, \"the enum is defined here\");\n-            }\n+            err.span_note(self.r.def_span(def_id), \"the enum is defined here\");\n         }\n     }\n "}, {"sha": "4277e427c46685a00dffcd4f6a6785824b8e0070", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a716f35636678fde3f5f71f3163909484b99a55/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=2a716f35636678fde3f5f71f3163909484b99a55", "patch": "@@ -48,7 +48,6 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::{self, MainDefinition, RegisteredTools, TyCtxt};\n use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::cstore::CrateStore;\n use rustc_session::lint::LintBuffer;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n@@ -1870,20 +1869,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n-    /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n-    #[inline]\n-    fn opt_span(&self, def_id: DefId) -> Option<Span> {\n-        def_id.as_local().map(|def_id| self.tcx.source_span(def_id))\n-    }\n-\n-    /// Retrieves the name of the given `DefId`.\n-    #[inline]\n-    fn opt_name(&self, def_id: DefId) -> Option<Symbol> {\n-        let def_key = match def_id.as_local() {\n-            Some(def_id) => self.tcx.definitions_untracked().def_key(def_id),\n-            None => self.cstore().def_key(def_id),\n-        };\n-        def_key.get_opt_name()\n+    /// Retrieves definition span of the given `DefId`.\n+    fn def_span(&self, def_id: DefId) -> Span {\n+        match def_id.as_local() {\n+            Some(def_id) => self.tcx.source_span(def_id),\n+            None => self.cstore().get_span_untracked(def_id, self.tcx.sess),\n+        }\n     }\n \n     /// Checks if an expression refers to a function marked with"}]}