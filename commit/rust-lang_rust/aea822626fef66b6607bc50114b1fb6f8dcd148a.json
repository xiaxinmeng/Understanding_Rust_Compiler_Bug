{"sha": "aea822626fef66b6607bc50114b1fb6f8dcd148a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTgyMjYyNmZlZjY2YjY2MDdiYzUwMTE0YjFmYjZmOGRjZDE0OGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:26:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:26:24Z"}, "message": "rollup merge of #23503: alexcrichton/fix-ptr-docs\n\nThe method with which backwards compatibility was retained ended up leading to\ndocumentation that rustdoc didn't handle well and largely ended up confusing.", "tree": {"sha": "5a3bd5fa42da582951d99db4efbde8f59ebfd47c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3bd5fa42da582951d99db4efbde8f59ebfd47c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea822626fef66b6607bc50114b1fb6f8dcd148a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea822626fef66b6607bc50114b1fb6f8dcd148a", "html_url": "https://github.com/rust-lang/rust/commit/aea822626fef66b6607bc50114b1fb6f8dcd148a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea822626fef66b6607bc50114b1fb6f8dcd148a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0f1d3984b8cef2b27f029270f8bc18b87d14fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0f1d3984b8cef2b27f029270f8bc18b87d14fc", "html_url": "https://github.com/rust-lang/rust/commit/6e0f1d3984b8cef2b27f029270f8bc18b87d14fc"}, {"sha": "e24fe5b8cfabb65a763a67403e7b0c91aaa848a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24fe5b8cfabb65a763a67403e7b0c91aaa848a9", "html_url": "https://github.com/rust-lang/rust/commit/e24fe5b8cfabb65a763a67403e7b0c91aaa848a9"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "4168fe88a4b562bd7d09e259abba3535a869e355", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -1428,7 +1428,7 @@ mod bench {\n             let mut v = Vec::<u8>::with_capacity(1024);\n             unsafe {\n                 let vp = v.as_mut_ptr();\n-                ptr::set_memory(vp, 0, 1024);\n+                ptr::write_bytes(vp, 0, 1024);\n                 v.set_len(1024);\n             }\n             v"}, {"sha": "1f1044b0b21520d0148877edbe132faf6e9c5a6e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -44,6 +44,10 @@\n \n use marker::Sized;\n \n+#[cfg(stage0)] pub use self::copy_memory as copy;\n+#[cfg(stage0)] pub use self::set_memory as write_bytes;\n+#[cfg(stage0)] pub use self::copy_nonoverlapping_memory as copy_nonoverlapping;\n+\n extern \"rust-intrinsic\" {\n \n     // NB: These intrinsics take unsafe pointers because they mutate aliased\n@@ -246,7 +250,7 @@ extern \"rust-intrinsic\" {\n     /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n     /// and destination may *not* overlap.\n     ///\n-    /// `copy_nonoverlapping_memory` is semantically equivalent to C's `memcpy`.\n+    /// `copy_nonoverlapping` is semantically equivalent to C's `memcpy`.\n     ///\n     /// # Safety\n     ///\n@@ -272,9 +276,9 @@ extern \"rust-intrinsic\" {\n     ///         let mut t: T = mem::uninitialized();\n     ///\n     ///         // Perform the swap, `&mut` pointers never alias\n-    ///         ptr::copy_nonoverlapping_memory(&mut t, &*x, 1);\n-    ///         ptr::copy_nonoverlapping_memory(x, &*y, 1);\n-    ///         ptr::copy_nonoverlapping_memory(y, &t, 1);\n+    ///         ptr::copy_nonoverlapping(&mut t, &*x, 1);\n+    ///         ptr::copy_nonoverlapping(x, &*y, 1);\n+    ///         ptr::copy_nonoverlapping(y, &t, 1);\n     ///\n     ///         // y and t now point to the same thing, but we need to completely forget `tmp`\n     ///         // because it's no longer relevant.\n@@ -283,12 +287,18 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(not(stage0))]\n+    pub fn copy_nonoverlapping<T>(dst: *mut T, src: *const T, count: usize);\n+\n+    /// dox\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(stage0)]\n     pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: usize);\n \n     /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n     /// and destination may overlap.\n     ///\n-    /// `copy_memory` is semantically equivalent to C's `memmove`.\n+    /// `copy` is semantically equivalent to C's `memmove`.\n     ///\n     /// # Safety\n     ///\n@@ -308,16 +318,28 @@ extern \"rust-intrinsic\" {\n     /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: uint) -> Vec<T> {\n     ///     let mut dst = Vec::with_capacity(elts);\n     ///     dst.set_len(elts);\n-    ///     ptr::copy_memory(dst.as_mut_ptr(), ptr, elts);\n+    ///     ptr::copy(dst.as_mut_ptr(), ptr, elts);\n     ///     dst\n     /// }\n     /// ```\n     ///\n+    #[cfg(not(stage0))]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn copy<T>(dst: *mut T, src: *const T, count: usize);\n+\n+    /// dox\n+    #[cfg(stage0)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n \n     /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n     /// bytes of memory starting at `dst` to `c`.\n+    #[cfg(not(stage0))]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n+\n+    /// dox\n+    #[cfg(stage0)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_memory<T>(dst: *mut T, val: u8, count: usize);\n "}, {"sha": "58bbb0b38c1e9be2dc5505a70b902946a059f691", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -107,27 +107,13 @@ use cmp::Ordering::{self, Less, Equal, Greater};\n // FIXME #19649: intrinsic docs don't render, so these have no docs :(\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use intrinsics::copy_nonoverlapping_memory as copy_nonoverlapping;\n+pub use intrinsics::copy_nonoverlapping;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use intrinsics::copy_memory as copy;\n+pub use intrinsics::copy;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use intrinsics::set_memory as write_bytes;\n-\n-extern \"rust-intrinsic\" {\n-    #[unstable(feature = \"core\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"renamed to `copy_nonoverlapping`\")]\n-    pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: usize);\n-    #[unstable(feature = \"core\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"renamed to `copy`\")]\n-    pub fn copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n-\n-    #[unstable(feature = \"core\",\n-               reason = \"uncertain about naming and semantics\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"renamed to `write_bytes`\")]\n-    pub fn set_memory<T>(dst: *mut T, val: u8, count: usize);\n-}\n+pub use intrinsics::write_bytes;\n \n /// Creates a null raw pointer.\n ///"}, {"sha": "adc15b9fbc27ffcd6bf38f74d4d9ec8246850baf", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -35,18 +35,18 @@ fn test() {\n         let v0 = vec![32000u16, 32001u16, 32002u16];\n         let mut v1 = vec![0u16, 0u16, 0u16];\n \n-        copy_memory(v1.as_mut_ptr().offset(1),\n-                    v0.as_ptr().offset(1), 1);\n+        copy(v1.as_mut_ptr().offset(1),\n+             v0.as_ptr().offset(1), 1);\n         assert!((v1[0] == 0u16 &&\n                  v1[1] == 32001u16 &&\n                  v1[2] == 0u16));\n-        copy_memory(v1.as_mut_ptr(),\n-                    v0.as_ptr().offset(2), 1);\n+        copy(v1.as_mut_ptr(),\n+             v0.as_ptr().offset(2), 1);\n         assert!((v1[0] == 32002u16 &&\n                  v1[1] == 32001u16 &&\n                  v1[2] == 0u16));\n-        copy_memory(v1.as_mut_ptr().offset(2),\n-                    v0.as_ptr(), 1);\n+        copy(v1.as_mut_ptr().offset(2),\n+             v0.as_ptr(), 1);\n         assert!((v1[0] == 32002u16 &&\n                  v1[1] == 32001u16 &&\n                  v1[2] == 32000u16));\n@@ -164,7 +164,7 @@ fn test_ptr_subtraction() {\n fn test_set_memory() {\n     let mut xs = [0u8; 20];\n     let ptr = xs.as_mut_ptr();\n-    unsafe { set_memory(ptr, 5u8, xs.len()); }\n+    unsafe { write_bytes(ptr, 5u8, xs.len()); }\n     assert!(xs == [5u8; 20]);\n }\n "}, {"sha": "f714c5800c57b3717f5fb2532413b7e5159f17a3", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -386,7 +386,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             InBoundsGEP(bcx, ptr, &[offset])\n         }\n \n-        (_, \"copy_nonoverlapping_memory\") => {\n+        (_, \"copy_nonoverlapping\") => {\n             copy_intrinsic(bcx,\n                            false,\n                            false,\n@@ -396,7 +396,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                            llargs[2],\n                            call_debug_location)\n         }\n-        (_, \"copy_memory\") => {\n+        (_, \"copy\") => {\n             copy_intrinsic(bcx,\n                            true,\n                            false,\n@@ -406,7 +406,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                            llargs[2],\n                            call_debug_location)\n         }\n-        (_, \"set_memory\") => {\n+        (_, \"write_bytes\") => {\n             memset_intrinsic(bcx,\n                              false,\n                              *substs.types.get(FnSpace, 0),"}, {"sha": "c3f4937d26b045d9e788bfee33102aaebc456f41", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -5381,7 +5381,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                    mutbl: ast::MutImmutable\n                }))\n             }\n-            \"copy_memory\" | \"copy_nonoverlapping_memory\" |\n+            \"copy\" | \"copy_nonoverlapping\" |\n             \"volatile_copy_memory\" | \"volatile_copy_nonoverlapping_memory\" => {\n               (1,\n                vec!(\n@@ -5397,7 +5397,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                ),\n                ty::mk_nil(tcx))\n             }\n-            \"set_memory\" | \"volatile_set_memory\" => {\n+            \"write_bytes\" | \"volatile_set_memory\" => {\n               (1,\n                vec!(\n                   ty::mk_ptr(tcx, ty::mt {"}, {"sha": "5b1b9471b075c5247e9a8a5338a8970684ff31e8", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -159,7 +159,7 @@ pub fn u64_to_be_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n ///           that many bytes are parsed. For example, if `size` is 4, then a\n ///           32-bit value is parsed.\n pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n-    use ptr::{copy_nonoverlapping_memory};\n+    use ptr::{copy_nonoverlapping};\n \n     assert!(size <= 8);\n \n@@ -171,7 +171,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n     unsafe {\n         let ptr = data.as_ptr().offset(start as int);\n         let out = buf.as_mut_ptr();\n-        copy_nonoverlapping_memory(out.offset((8 - size) as int), ptr, size);\n+        copy_nonoverlapping(out.offset((8 - size) as int), ptr, size);\n         (*(out as *const u64)).to_be()\n     }\n }"}, {"sha": "8235b013a81bad39deb9d0696a90f80a4d33ef81", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea822626fef66b6607bc50114b1fb6f8dcd148a/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=aea822626fef66b6607bc50114b1fb6f8dcd148a", "patch": "@@ -46,7 +46,7 @@ extern crate libc;\n \n use std::old_io::stdio::{stdin_raw, stdout_raw};\n use std::old_io::*;\n-use std::ptr::{copy_memory, Unique};\n+use std::ptr::{copy, Unique};\n use std::thread;\n \n struct Tables {\n@@ -181,8 +181,8 @@ fn reverse_complement(seq: &mut [u8], tables: &Tables) {\n     let mut i = LINE_LEN;\n     while i < len {\n         unsafe {\n-            copy_memory(seq.as_mut_ptr().offset((i - off + 1) as int),\n-                        seq.as_ptr().offset((i - off) as int), off);\n+            copy(seq.as_mut_ptr().offset((i - off + 1) as int),\n+                 seq.as_ptr().offset((i - off) as int), off);\n             *seq.get_unchecked_mut(i - off) = b'\\n';\n         }\n         i += LINE_LEN + 1;"}]}