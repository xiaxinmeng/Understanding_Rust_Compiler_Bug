{"sha": "37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTRjZmU1MTI1ZTFkOGQyOWZkMWE2NmM3ZjgwMTA5YzI1NjE4ZmI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-30T19:11:15Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-02T00:29:15Z"}, "message": "Move lint machinery into a separate file", "tree": {"sha": "2138bbdc6a0bf113f126c6035bb2932097cee224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2138bbdc6a0bf113f126c6035bb2932097cee224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "html_url": "https://github.com/rust-lang/rust/commit/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc62018e61edfa9706b8e4e61d1b571bdee7827d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc62018e61edfa9706b8e4e61d1b571bdee7827d", "html_url": "https://github.com/rust-lang/rust/commit/cc62018e61edfa9706b8e4e61d1b571bdee7827d"}], "stats": {"total": 363, "additions": 183, "deletions": 180}, "files": [{"sha": "5313f8553a894e22a159f8d6dcd38e9462390657", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 168, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -12,8 +12,6 @@ use rustc_hir::{\n     Path,\n };\n use rustc_interface::{interface, Queries};\n-use rustc_lint::LintStore;\n-use rustc_lint_defs::{declare_tool_lint, Lint, LintId};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n@@ -28,7 +26,6 @@ use rustc_span::DUMMY_SP;\n \n use std::cell::RefCell;\n use std::collections::hash_map::Entry;\n-use std::lazy::SyncLazy as Lazy;\n use std::mem;\n use std::rc::Rc;\n \n@@ -232,164 +229,6 @@ crate fn new_handler(\n     )\n }\n \n-/// This function is used to setup the lint initialization. By default, in rustdoc, everything\n-/// is \"allowed\". Depending if we run in test mode or not, we want some of them to be at their\n-/// default level. For example, the \"INVALID_CODEBLOCK_ATTRIBUTES\" lint is activated in both\n-/// modes.\n-///\n-/// A little detail easy to forget is that there is a way to set the lint level for all lints\n-/// through the \"WARNINGS\" lint. To prevent this to happen, we set it back to its \"normal\" level\n-/// inside this function.\n-///\n-/// It returns a tuple containing:\n-///  * Vector of tuples of lints' name and their associated \"max\" level\n-///  * HashMap of lint id with their associated \"max\" level\n-pub(crate) fn init_lints<F>(\n-    mut allowed_lints: Vec<String>,\n-    lint_opts: Vec<(String, lint::Level)>,\n-    filter_call: F,\n-) -> (Vec<(String, lint::Level)>, FxHashMap<lint::LintId, lint::Level>)\n-where\n-    F: Fn(&lint::Lint) -> Option<(String, lint::Level)>,\n-{\n-    let warnings_lint_name = lint::builtin::WARNINGS.name;\n-\n-    allowed_lints.push(warnings_lint_name.to_owned());\n-    allowed_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n-\n-    let lints = || {\n-        lint::builtin::HardwiredLints::get_lints()\n-            .into_iter()\n-            .chain(rustc_lint::SoftLints::get_lints().into_iter())\n-    };\n-\n-    let lint_opts = lints()\n-        .filter_map(|lint| {\n-            // Permit feature-gated lints to avoid feature errors when trying to\n-            // allow all lints.\n-            if lint.feature_gate.is_some() || allowed_lints.iter().any(|l| lint.name == l) {\n-                None\n-            } else {\n-                filter_call(lint)\n-            }\n-        })\n-        .chain(lint_opts.into_iter())\n-        .collect::<Vec<_>>();\n-\n-    let lint_caps = lints()\n-        .filter_map(|lint| {\n-            // We don't want to allow *all* lints so let's ignore\n-            // those ones.\n-            if allowed_lints.iter().any(|l| lint.name == l) {\n-                None\n-            } else {\n-                Some((lint::LintId::of(lint), lint::Allow))\n-            }\n-        })\n-        .collect();\n-    (lint_opts, lint_caps)\n-}\n-\n-declare_tool_lint! {\n-    /// The `broken_intra_doc_links` lint detects failures in resolving\n-    /// intra-doc link targets. This is a `rustdoc` only lint, see the\n-    /// documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#broken_intra_doc_links\n-    pub rustdoc::BROKEN_INTRA_DOC_LINKS,\n-    Warn,\n-    \"failures in resolving intra-doc link targets\"\n-}\n-\n-declare_tool_lint! {\n-    /// This is a subset of `broken_intra_doc_links` that warns when linking from\n-    /// a public item to a private one. This is a `rustdoc` only lint, see the\n-    /// documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#private_intra_doc_links\n-    pub rustdoc::PRIVATE_INTRA_DOC_LINKS,\n-    Warn,\n-    \"linking from a public item to a private one\"\n-}\n-\n-declare_tool_lint! {\n-    /// The `invalid_codeblock_attributes` lint detects code block attributes\n-    /// in documentation examples that have potentially mis-typed values. This\n-    /// is a `rustdoc` only lint, see the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_codeblock_attributes\n-    pub rustdoc::INVALID_CODEBLOCK_ATTRIBUTES,\n-    Warn,\n-    \"codeblock attribute looks a lot like a known one\"\n-}\n-\n-declare_tool_lint! {\n-    /// The `missing_doc_code_examples` lint detects publicly-exported items\n-    /// without code samples in their documentation. This is a `rustdoc` only\n-    /// lint, see the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_doc_code_examples\n-    pub rustdoc::MISSING_DOC_CODE_EXAMPLES,\n-    Allow,\n-    \"detects publicly-exported items without code samples in their documentation\"\n-}\n-\n-declare_tool_lint! {\n-    /// The `private_doc_tests` lint detects code samples in docs of private\n-    /// items not documented by `rustdoc`. This is a `rustdoc` only lint, see\n-    /// the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#private_doc_tests\n-    pub rustdoc::PRIVATE_DOC_TESTS,\n-    Allow,\n-    \"detects code samples in docs of private items not documented by rustdoc\"\n-}\n-\n-declare_tool_lint! {\n-    /// The `invalid_html_tags` lint detects invalid HTML tags. This is a\n-    /// `rustdoc` only lint, see the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_html_tags\n-    pub rustdoc::INVALID_HTML_TAGS,\n-    Allow,\n-    \"detects invalid HTML tags in doc comments\"\n-}\n-\n-declare_tool_lint! {\n-    /// The `non_autolinks` lint detects when a URL could be written using\n-    /// only angle brackets. This is a `rustdoc` only lint, see the\n-    /// documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#non_autolinks\n-    pub rustdoc::NON_AUTOLINKS,\n-    Warn,\n-    \"detects URLs that could be written using only angle brackets\"\n-}\n-\n-static RUSTDOC_LINTS: Lazy<Vec<&'static Lint>> = Lazy::new(|| {\n-    vec![\n-        BROKEN_INTRA_DOC_LINKS,\n-        PRIVATE_INTRA_DOC_LINKS,\n-        MISSING_DOC_CODE_EXAMPLES,\n-        PRIVATE_DOC_TESTS,\n-        INVALID_CODEBLOCK_ATTRIBUTES,\n-        INVALID_HTML_TAGS,\n-        NON_AUTOLINKS,\n-    ]\n-});\n-\n-crate fn register_lints(_sess: &Session, lint_store: &mut LintStore) {\n-    lint_store.register_lints(&**RUSTDOC_LINTS);\n-    lint_store.register_group(\n-        true,\n-        \"rustdoc\",\n-        None,\n-        RUSTDOC_LINTS.iter().map(|&lint| LintId::of(lint)).collect(),\n-    );\n-    lint_store\n-        .register_renamed(\"intra_doc_link_resolution_failure\", \"rustdoc::broken_intra_doc_links\");\n-}\n-\n /// Parse, resolve, and typecheck the given crate.\n crate fn create_config(\n     RustdocOptions {\n@@ -418,8 +257,8 @@ crate fn create_config(\n     let cpath = Some(input.clone());\n     let input = Input::File(input);\n \n-    // In addition to those specific lints, we also need to allow those given through\n-    // command line, otherwise they'll get ignored and we don't want that.\n+    // By default, rustdoc ignores all lints.\n+    // Specifically unblock lints relevant to documentation or the lint machinery itself.\n     let mut lints_to_show = vec![\n         // it's unclear whether these should be part of rustdoc directly\n         rustc_lint::builtin::MISSING_DOCS.name.to_string(),\n@@ -428,12 +267,12 @@ crate fn create_config(\n         rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name.to_string(),\n         rustc_lint::builtin::UNKNOWN_LINTS.name.to_string(),\n     ];\n-    lints_to_show.extend(RUSTDOC_LINTS.iter().map(|lint| lint.name.to_string()));\n+    lints_to_show.extend(crate::lint::RUSTDOC_LINTS.iter().map(|lint| lint.name.to_string()));\n \n-    let (lint_opts, lint_caps) = init_lints(lints_to_show, lint_opts, |lint| {\n+    let (lint_opts, lint_caps) = crate::lint::init_lints(lints_to_show, lint_opts, |lint| {\n         // FIXME: why is this necessary?\n-        if lint.name == BROKEN_INTRA_DOC_LINKS.name\n-            || lint.name == INVALID_CODEBLOCK_ATTRIBUTES.name\n+        if lint.name == crate::lint::BROKEN_INTRA_DOC_LINKS.name\n+            || lint.name == crate::lint::INVALID_CODEBLOCK_ATTRIBUTES.name\n         {\n             None\n         } else {\n@@ -474,7 +313,7 @@ crate fn create_config(\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n-        register_lints: Some(box register_lints),\n+        register_lints: Some(box crate::lint::register_lints),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n             providers.lint_mod = |_, _| {};"}, {"sha": "27ce064669d2ca362e08ae7a7e1f9b2f15bf4560", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -26,8 +26,8 @@ use std::str;\n \n use crate::clean::Attributes;\n use crate::config::Options;\n-use crate::core::init_lints;\n use crate::html::markdown::{self, ErrorCodes, Ignore, LangString};\n+use crate::lint::init_lints;\n use crate::passes::span_of_attrs;\n \n #[derive(Clone, Default)]\n@@ -44,10 +44,9 @@ crate struct TestOptions {\n crate fn run(options: Options) -> Result<(), ErrorReported> {\n     let input = config::Input::File(options.input.clone());\n \n-    let invalid_codeblock_attributes_name = crate::core::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_codeblock_attributes_name = crate::lint::INVALID_CODEBLOCK_ATTRIBUTES.name;\n \n-    // In addition to those specific lints, we also need to allow those given through\n-    // command line, otherwise they'll get ignored and we don't want that.\n+    // See core::create_config for what's going on here.\n     let allowed_lints = vec![\n         invalid_codeblock_attributes_name.to_owned(),\n         lint::builtin::UNKNOWN_LINTS.name.to_owned(),\n@@ -96,7 +95,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n-        register_lints: Some(box crate::core::register_lints),\n+        register_lints: Some(box crate::lint::register_lints),\n         override_queries: None,\n         make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),"}, {"sha": "f8ca259fb9ab56226c8a1143d5bde57495485003", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -720,7 +720,7 @@ impl<'tcx> ExtraInfo<'tcx> {\n             (None, None) => return,\n         };\n         self.tcx.struct_span_lint_hir(\n-            crate::core::INVALID_CODEBLOCK_ATTRIBUTES,\n+            crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,\n             hir_id,\n             self.sp,\n             |lint| {"}, {"sha": "c152f0fb7f6a02da5fc0613bf4b26d393e042652", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -86,6 +86,7 @@ mod formats;\n // used by the error-index generator, so it needs to be public\n pub mod html;\n mod json;\n+crate mod lint;\n mod markdown;\n mod passes;\n mod theme;"}, {"sha": "778983868ea01820718d86f1700e1929e00467cc", "filename": "src/librustdoc/lint.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flint.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -0,0 +1,164 @@\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_lint::LintStore;\n+use rustc_lint_defs::{declare_tool_lint, Lint, LintId};\n+use rustc_session::{lint, Session};\n+\n+use std::lazy::SyncLazy as Lazy;\n+\n+/// This function is used to setup the lint initialization. By default, in rustdoc, everything\n+/// is \"allowed\". Depending if we run in test mode or not, we want some of them to be at their\n+/// default level. For example, the \"INVALID_CODEBLOCK_ATTRIBUTES\" lint is activated in both\n+/// modes.\n+///\n+/// A little detail easy to forget is that there is a way to set the lint level for all lints\n+/// through the \"WARNINGS\" lint. To prevent this to happen, we set it back to its \"normal\" level\n+/// inside this function.\n+///\n+/// It returns a tuple containing:\n+///  * Vector of tuples of lints' name and their associated \"max\" level\n+///  * HashMap of lint id with their associated \"max\" level\n+pub(crate) fn init_lints<F>(\n+    mut allowed_lints: Vec<String>,\n+    lint_opts: Vec<(String, lint::Level)>,\n+    filter_call: F,\n+) -> (Vec<(String, lint::Level)>, FxHashMap<lint::LintId, lint::Level>)\n+where\n+    F: Fn(&lint::Lint) -> Option<(String, lint::Level)>,\n+{\n+    let warnings_lint_name = lint::builtin::WARNINGS.name;\n+\n+    allowed_lints.push(warnings_lint_name.to_owned());\n+    allowed_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n+\n+    let lints = || {\n+        lint::builtin::HardwiredLints::get_lints()\n+            .into_iter()\n+            .chain(rustc_lint::SoftLints::get_lints().into_iter())\n+    };\n+\n+    let lint_opts = lints()\n+        .filter_map(|lint| {\n+            // Permit feature-gated lints to avoid feature errors when trying to\n+            // allow all lints.\n+            if lint.feature_gate.is_some() || allowed_lints.iter().any(|l| lint.name == l) {\n+                None\n+            } else {\n+                filter_call(lint)\n+            }\n+        })\n+        .chain(lint_opts.into_iter())\n+        .collect::<Vec<_>>();\n+\n+    let lint_caps = lints()\n+        .filter_map(|lint| {\n+            // We don't want to allow *all* lints so let's ignore\n+            // those ones.\n+            if allowed_lints.iter().any(|l| lint.name == l) {\n+                None\n+            } else {\n+                Some((lint::LintId::of(lint), lint::Allow))\n+            }\n+        })\n+        .collect();\n+    (lint_opts, lint_caps)\n+}\n+\n+declare_tool_lint! {\n+    /// The `broken_intra_doc_links` lint detects failures in resolving\n+    /// intra-doc link targets. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#broken_intra_doc_links\n+    pub rustdoc::BROKEN_INTRA_DOC_LINKS,\n+    Warn,\n+    \"failures in resolving intra-doc link targets\"\n+}\n+\n+declare_tool_lint! {\n+    /// This is a subset of `broken_intra_doc_links` that warns when linking from\n+    /// a public item to a private one. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#private_intra_doc_links\n+    pub rustdoc::PRIVATE_INTRA_DOC_LINKS,\n+    Warn,\n+    \"linking from a public item to a private one\"\n+}\n+\n+declare_tool_lint! {\n+    /// The `invalid_codeblock_attributes` lint detects code block attributes\n+    /// in documentation examples that have potentially mis-typed values. This\n+    /// is a `rustdoc` only lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_codeblock_attributes\n+    pub rustdoc::INVALID_CODEBLOCK_ATTRIBUTES,\n+    Warn,\n+    \"codeblock attribute looks a lot like a known one\"\n+}\n+\n+declare_tool_lint! {\n+    /// The `missing_doc_code_examples` lint detects publicly-exported items\n+    /// without code samples in their documentation. This is a `rustdoc` only\n+    /// lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_doc_code_examples\n+    pub rustdoc::MISSING_DOC_CODE_EXAMPLES,\n+    Allow,\n+    \"detects publicly-exported items without code samples in their documentation\"\n+}\n+\n+declare_tool_lint! {\n+    /// The `private_doc_tests` lint detects code samples in docs of private\n+    /// items not documented by `rustdoc`. This is a `rustdoc` only lint, see\n+    /// the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#private_doc_tests\n+    pub rustdoc::PRIVATE_DOC_TESTS,\n+    Allow,\n+    \"detects code samples in docs of private items not documented by rustdoc\"\n+}\n+\n+declare_tool_lint! {\n+    /// The `invalid_html_tags` lint detects invalid HTML tags. This is a\n+    /// `rustdoc` only lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_html_tags\n+    pub rustdoc::INVALID_HTML_TAGS,\n+    Allow,\n+    \"detects invalid HTML tags in doc comments\"\n+}\n+\n+declare_tool_lint! {\n+    /// The `non_autolinks` lint detects when a URL could be written using\n+    /// only angle brackets. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#non_autolinks\n+    pub rustdoc::NON_AUTOLINKS,\n+    Warn,\n+    \"detects URLs that could be written using only angle brackets\"\n+}\n+\n+crate static RUSTDOC_LINTS: Lazy<Vec<&'static Lint>> = Lazy::new(|| {\n+    vec![\n+        BROKEN_INTRA_DOC_LINKS,\n+        PRIVATE_INTRA_DOC_LINKS,\n+        MISSING_DOC_CODE_EXAMPLES,\n+        PRIVATE_DOC_TESTS,\n+        INVALID_CODEBLOCK_ATTRIBUTES,\n+        INVALID_HTML_TAGS,\n+        NON_AUTOLINKS,\n+    ]\n+});\n+\n+crate fn register_lints(_sess: &Session, lint_store: &mut LintStore) {\n+    lint_store.register_lints(&**RUSTDOC_LINTS);\n+    lint_store.register_group(\n+        true,\n+        \"rustdoc\",\n+        None,\n+        RUSTDOC_LINTS.iter().map(|&lint| LintId::of(lint)).collect(),\n+    );\n+    lint_store\n+        .register_renamed(\"intra_doc_link_resolution_failure\", \"rustdoc::broken_intra_doc_links\");\n+}"}, {"sha": "38efecb393b79cd624bc823e7be3c53c6ca12909", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -32,9 +32,9 @@ use std::ops::Range;\n \n use crate::clean::{self, utils::find_nearest_parent_module, Crate, Item, ItemLink, PrimitiveType};\n use crate::core::DocContext;\n-use crate::core::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::fold::DocFolder;\n use crate::html::markdown::{markdown_links, MarkdownLink};\n+use crate::lint::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::passes::Pass;\n \n use super::span_of_attrs;"}, {"sha": "c6b956c600058211ba61432b0ea2c520958f5b8e", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -68,7 +68,7 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n         return false;\n     }\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_local());\n-    let (level, source) = cx.tcx.lint_level_at_node(crate::core::MISSING_DOC_CODE_EXAMPLES, hir_id);\n+    let (level, source) = cx.tcx.lint_level_at_node(crate::lint::MISSING_DOC_CODE_EXAMPLES, hir_id);\n     level != lint::Level::Allow || matches!(source, LintLevelSource::Default)\n }\n \n@@ -90,15 +90,15 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n             cx.tcx.struct_span_lint_hir(\n-                crate::core::MISSING_DOC_CODE_EXAMPLES,\n+                crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n                 sp,\n                 |lint| lint.build(\"missing code example in this documentation\").emit(),\n             );\n         }\n     } else if tests.found_tests > 0 && !cx.renderinfo.access_levels.is_public(item.def_id) {\n         cx.tcx.struct_span_lint_hir(\n-            crate::core::PRIVATE_DOC_TESTS,\n+            crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n             span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n             |lint| lint.build(\"documentation test in private item\").emit(),"}, {"sha": "27e669aa44fc0b65996eb48e9f4a4c0506046dc7", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     Some(sp) => sp,\n                     None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n                 };\n-                cx.tcx.struct_span_lint_hir(crate::core::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                cx.tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n                     lint.build(msg).emit()\n                 });\n             };"}, {"sha": "09a1959fa113c049cbd5bc3affdff5c485703d4f", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e4cfe5125e1d8d29fd1a66c7f80109c25618fb/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=37e4cfe5125e1d8d29fd1a66c7f80109c25618fb", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n                 let sp = super::source_span_for_markdown_range(cx, &dox, &range, &item.attrs)\n                     .or_else(|| span_of_attrs(&item.attrs))\n                     .unwrap_or(item.source.span());\n-                cx.tcx.struct_span_lint_hir(crate::core::NON_AUTOLINKS, hir_id, sp, |lint| {\n+                cx.tcx.struct_span_lint_hir(crate::lint::NON_AUTOLINKS, hir_id, sp, |lint| {\n                     lint.build(msg)\n                         .span_suggestion(\n                             sp,"}]}