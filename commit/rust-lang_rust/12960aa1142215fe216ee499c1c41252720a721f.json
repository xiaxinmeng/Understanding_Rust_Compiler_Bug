{"sha": "12960aa1142215fe216ee499c1c41252720a721f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOTYwYWExMTQyMjE1ZmUyMTZlZTQ5OWMxYzQxMjUyNzIwYTcyMWY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@palantir.com", "date": "2016-09-17T23:00:15Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@palantir.com", "date": "2016-09-18T04:04:24Z"}, "message": "Clean up hasher discussion on HashMap\n\n* We never want to make guarantees about protecting against attacks.\n* \"True randomness\" is not the right terminology to be using in this\n    context.\n* There is significantly more nuance to the performance of SipHash than\n    \"somewhat slow\".", "tree": {"sha": "9d9fec68e9200de13c54b26271070a3b9fd44398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9fec68e9200de13c54b26271070a3b9fd44398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12960aa1142215fe216ee499c1c41252720a721f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12960aa1142215fe216ee499c1c41252720a721f", "html_url": "https://github.com/rust-lang/rust/commit/12960aa1142215fe216ee499c1c41252720a721f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12960aa1142215fe216ee499c1c41252720a721f/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde61ba7f786d73592743e17af93077405cc4c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde61ba7f786d73592743e17af93077405cc4c97", "html_url": "https://github.com/rust-lang/rust/commit/cde61ba7f786d73592743e17af93077405cc4c97"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "37f2d7c1e25d8d40ceaae99b8cea3edaedb099ca", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/12960aa1142215fe216ee499c1c41252720a721f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12960aa1142215fe216ee499c1c41252720a721f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=12960aa1142215fe216ee499c1c41252720a721f", "patch": "@@ -196,15 +196,29 @@ fn test_resize_policy() {\n //\n // FIXME(Gankro, pczarn): review the proof and put it all in a separate README.md\n \n-/// A hash map implementation which uses linear probing with Robin\n-/// Hood bucket stealing.\n+/// A hash map implementation which uses linear probing with Robin Hood bucket\n+/// stealing.\n ///\n-/// By default, HashMap uses a somewhat slow hashing algorithm which can provide resistance\n-/// to DoS attacks. Rust makes a best attempt at acquiring random numbers without IO\n-/// blocking from your system. Because of this HashMap is not guaranteed to provide\n-/// DoS resistance since the numbers generated might not be truly random. If you do\n-/// require this behavior you can create your own hashing function using\n-/// [BuildHasherDefault](../hash/struct.BuildHasherDefault.html).\n+/// By default, `HashMap` uses a hashing algorithm selected to provide\n+/// resistance against HashDoS attacks. The algorithm is randomly seeded, and a\n+/// reasonable best-effort is made to generate this seed from a high quality,\n+/// secure source of randomness provided by the host without blocking the\n+/// program. Because of this, the randomness of the seed is dependant on the\n+/// quality of the system's random number generator at the time it is created.\n+/// In particular, seeds generated when the system's entropy pool is abnormally\n+/// low such as during system boot may be of a lower quality.\n+///\n+/// The default hashing algorithm is currently SipHash 1-3, though this is\n+/// subject to change at any point in the future. While its performance is very\n+/// competitive for medium sized keys, other hashing algorithms will outperform\n+/// it for small keys such as integers as well as large keys such as long\n+/// strings, though those algorithms will typically *not* protect against\n+/// attacks such as HashDoS.\n+///\n+/// The hashing algorithm can be replaced on a per-`HashMap` basis using the\n+/// `HashMap::default`, `HashMap::with_hasher`, and\n+/// `HashMap::with_capacity_and_hasher` methods. Many alternative algorithms\n+/// are available on crates.io.\n ///\n /// It is required that the keys implement the [`Eq`] and [`Hash`] traits, although\n /// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`."}]}