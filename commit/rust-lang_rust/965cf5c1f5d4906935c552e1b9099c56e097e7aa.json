{"sha": "965cf5c1f5d4906935c552e1b9099c56e097e7aa", "node_id": "C_kwDOAAsO6NoAKDk2NWNmNWMxZjVkNDkwNjkzNWM1NTJlMWI5MDk5YzU2ZTA5N2U3YWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T14:14:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T14:14:29Z"}, "message": "Auto merge of #111820 - matthiaskrgr:rollup-9sb2lw9, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #111745 (Fix overflow in error emitter)\n - #111770 (Read beta version from the version file if building from a source tarball)\n - #111797 (Migrate GUI colors test to original CSS color format)\n - #111809 (Unset MIRI_BLESS for mir-opt-level 4 miri tests)\n - #111817 (Migrate GUI colors test to original CSS color format)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "76252a2e38f55d72c7c3874d26b9c180fa4aecec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76252a2e38f55d72c7c3874d26b9c180fa4aecec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/965cf5c1f5d4906935c552e1b9099c56e097e7aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/965cf5c1f5d4906935c552e1b9099c56e097e7aa", "html_url": "https://github.com/rust-lang/rust/commit/965cf5c1f5d4906935c552e1b9099c56e097e7aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/965cf5c1f5d4906935c552e1b9099c56e097e7aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06345574d96da7c471ee59c991ce14f33741c0ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/06345574d96da7c471ee59c991ce14f33741c0ee", "html_url": "https://github.com/rust-lang/rust/commit/06345574d96da7c471ee59c991ce14f33741c0ee"}, {"sha": "73581668827c499f4ca72914b4acbf4de63e852b", "url": "https://api.github.com/repos/rust-lang/rust/commits/73581668827c499f4ca72914b4acbf4de63e852b", "html_url": "https://github.com/rust-lang/rust/commit/73581668827c499f4ca72914b4acbf4de63e852b"}], "stats": {"total": 235, "additions": 180, "deletions": 55}, "files": [{"sha": "3e38d6afb0b8eed4b383bef78fbf05dd54db2d3e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -2303,22 +2303,25 @@ impl EmitterWriter {\n \n         // Colorize addition/replacements with green.\n         for &SubstitutionHighlight { start, end } in highlight_parts {\n-            // Account for tabs when highlighting (#87972).\n-            let tabs: usize = line_to_add\n-                .chars()\n-                .take(start)\n-                .map(|ch| match ch {\n-                    '\\t' => 3,\n-                    _ => 0,\n-                })\n-                .sum();\n-            buffer.set_style_range(\n-                *row_num,\n-                max_line_num_len + 3 + start + tabs,\n-                max_line_num_len + 3 + end + tabs,\n-                Style::Addition,\n-                true,\n-            );\n+            // This is a no-op for empty ranges\n+            if start != end {\n+                // Account for tabs when highlighting (#87972).\n+                let tabs: usize = line_to_add\n+                    .chars()\n+                    .take(start)\n+                    .map(|ch| match ch {\n+                        '\\t' => 3,\n+                        _ => 0,\n+                    })\n+                    .sum();\n+                buffer.set_style_range(\n+                    *row_num,\n+                    max_line_num_len + 3 + start + tabs,\n+                    max_line_num_len + 3 + end + tabs,\n+                    Style::Addition,\n+                    true,\n+                );\n+            }\n         }\n         *row_num += 1;\n     }"}, {"sha": "5a80024f19bf5ed517a86b5bc6544b301eeadbab", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -330,12 +330,11 @@ impl CodeSuggestion {\n                     });\n                     buf.push_str(&part.snippet);\n                     let cur_hi = sm.lookup_char_pos(part.span.hi());\n-                    if cur_hi.line == cur_lo.line && !part.snippet.is_empty() {\n-                        // Account for the difference between the width of the current code and the\n-                        // snippet being suggested, so that the *later* suggestions are correctly\n-                        // aligned on the screen.\n-                        acc += len - (cur_hi.col.0 - cur_lo.col.0) as isize;\n-                    }\n+                    // Account for the difference between the width of the current code and the\n+                    // snippet being suggested, so that the *later* suggestions are correctly\n+                    // aligned on the screen. Note that cur_hi and cur_lo can be on different\n+                    // lines, so cur_hi.col can be smaller than cur_lo.col\n+                    acc += len - (cur_hi.col.0 as isize - cur_lo.col.0 as isize);\n                     prev_hi = cur_hi;\n                     prev_line = sf.get_line(prev_hi.line - 1);\n                     for line in part.snippet.split('\\n').skip(1) {"}, {"sha": "edca8fe9b13afd2e51a624205f8fd046c61e8a75", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -146,6 +146,22 @@ fn alias_and_path_for_library() {\n     );\n }\n \n+#[test]\n+fn test_beta_rev_parsing() {\n+    use crate::extract_beta_rev;\n+\n+    // single digit revision\n+    assert_eq!(extract_beta_rev(\"1.99.9-beta.7 (xxxxxx)\"), Some(\"7\".to_string()));\n+    // multiple digits\n+    assert_eq!(extract_beta_rev(\"1.99.9-beta.777 (xxxxxx)\"), Some(\"777\".to_string()));\n+    // nightly channel (no beta revision)\n+    assert_eq!(extract_beta_rev(\"1.99.9-nightly (xxxxxx)\"), None);\n+    // stable channel (no beta revision)\n+    assert_eq!(extract_beta_rev(\"1.99.9 (xxxxxxx)\"), None);\n+    // invalid string\n+    assert_eq!(extract_beta_rev(\"invalid\"), None);\n+}\n+\n mod defaults {\n     use super::{configure, first, run_build};\n     use crate::builder::*;"}, {"sha": "6ee50ee657399283b4e66b0c92d8dcb2d5232d78", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -1324,7 +1324,7 @@ impl Build {\n         match &self.config.channel[..] {\n             \"stable\" => num.to_string(),\n             \"beta\" => {\n-                if self.rust_info().is_managed_git_subrepository() && !self.config.omit_git_hash {\n+                if !self.config.omit_git_hash {\n                     format!(\"{}-beta.{}\", num, self.beta_prerelease_version())\n                 } else {\n                     format!(\"{}-beta\", num)\n@@ -1336,18 +1336,28 @@ impl Build {\n     }\n \n     fn beta_prerelease_version(&self) -> u32 {\n+        fn extract_beta_rev_from_file<P: AsRef<Path>>(version_file: P) -> Option<String> {\n+            let version = fs::read_to_string(version_file).ok()?;\n+\n+            extract_beta_rev(&version)\n+        }\n+\n         if let Some(s) = self.prerelease_version.get() {\n             return s;\n         }\n \n-        // Figure out how many merge commits happened since we branched off master.\n-        // That's our beta number!\n-        // (Note that we use a `..` range, not the `...` symmetric difference.)\n-        let count =\n+        // First check if there is a version file available.\n+        // If available, we read the beta revision from that file.\n+        // This only happens when building from a source tarball when Git should not be used.\n+        let count = extract_beta_rev_from_file(self.src.join(\"version\")).unwrap_or_else(|| {\n+            // Figure out how many merge commits happened since we branched off master.\n+            // That's our beta number!\n+            // (Note that we use a `..` range, not the `...` symmetric difference.)\n             output(self.config.git().arg(\"rev-list\").arg(\"--count\").arg(\"--merges\").arg(format!(\n                 \"refs/remotes/origin/{}..HEAD\",\n                 self.config.stage0_metadata.config.nightly_branch\n-            )));\n+            )))\n+        });\n         let n = count.trim().parse().unwrap();\n         self.prerelease_version.set(Some(n));\n         n\n@@ -1707,6 +1717,17 @@ to download LLVM rather than building it.\n     }\n }\n \n+/// Extract the beta revision from the full version string.\n+///\n+/// The full version string looks like \"a.b.c-beta.y\". And we need to extract\n+/// the \"y\" part from the string.\n+pub fn extract_beta_rev(version: &str) -> Option<String> {\n+    let parts = version.splitn(2, \"-beta.\").collect::<Vec<_>>();\n+    let count = parts.get(1).and_then(|s| s.find(' ').map(|p| (&s[..p]).to_string()));\n+\n+    count\n+}\n+\n #[cfg(unix)]\n fn chmod(path: &Path, perms: u32) {\n     use std::os::unix::fs::*;"}, {"sha": "2b72d6c48eb75aab665c2a87b203d81937233d10", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -620,6 +620,8 @@ impl Step for Miri {\n             cargo.env(\"MIRIFLAGS\", \"-O -Zmir-opt-level=4 -Cdebug-assertions=yes\");\n             // Optimizations can change backtraces\n             cargo.env(\"MIRI_SKIP_UI_CHECKS\", \"1\");\n+            // `MIRI_SKIP_UI_CHECKS` and `MIRI_BLESS` are incompatible\n+            cargo.env_remove(\"MIRI_BLESS\");\n             // Optimizations can change error locations and remove UB so don't run `fail` tests.\n             cargo.args(&[\"tests/pass\", \"tests/panic\"]);\n "}, {"sha": "e9b77296917fede64c801b34d5eb0abfcd6cbf2d", "filename": "tests/rustdoc-gui/anchors.goml", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fanchors.goml?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -75,35 +75,35 @@ call-function: (\n     \"check-colors\",\n     {\n         \"theme\": \"ayu\",\n-        \"main_color\": \"rgb(197, 197, 197)\",\n-        \"title_color\": \"rgb(255, 255, 255)\",\n-        \"main_heading_color\": \"rgb(255, 255, 255)\",\n-        \"main_heading_type_color\": \"rgb(255, 160, 165)\",\n-        \"src_link_color\": \"rgb(57, 175, 215)\",\n-        \"sidebar_link_color\": \"rgb(83, 177, 219)\",\n+        \"main_color\": \"#c5c5c5\",\n+        \"title_color\": \"#fff\",\n+        \"main_heading_color\": \"#fff\",\n+        \"main_heading_type_color\": \"#ffa0a5\",\n+        \"src_link_color\": \"#39afd7\",\n+        \"sidebar_link_color\": \"#53b1db\",\n     },\n )\n call-function: (\n     \"check-colors\",\n     {\n         \"theme\": \"dark\",\n-        \"main_color\": \"rgb(221, 221, 221)\",\n-        \"title_color\": \"rgb(221, 221, 221)\",\n-        \"main_heading_color\": \"rgb(221, 221, 221)\",\n-        \"main_heading_type_color\": \"rgb(45, 191, 184)\",\n-        \"src_link_color\": \"rgb(210, 153, 29)\",\n-        \"sidebar_link_color\": \"rgb(253, 191, 53)\",\n+        \"main_color\": \"#ddd\",\n+        \"title_color\": \"#ddd\",\n+        \"main_heading_color\": \"#ddd\",\n+        \"main_heading_type_color\": \"#2dbfb8\",\n+        \"src_link_color\": \"#d2991d\",\n+        \"sidebar_link_color\": \"#fdbf35\",\n     },\n )\n call-function: (\n     \"check-colors\",\n     {\n         \"theme\": \"light\",\n-        \"main_color\": \"rgb(0, 0, 0)\",\n-        \"title_color\": \"rgb(0, 0, 0)\",\n-        \"main_heading_color\": \"rgb(0, 0, 0)\",\n-        \"main_heading_type_color\": \"rgb(173, 55, 138)\",\n-        \"src_link_color\": \"rgb(56, 115, 173)\",\n-        \"sidebar_link_color\": \"rgb(53, 109, 164)\",\n+        \"main_color\": \"black\",\n+        \"title_color\": \"black\",\n+        \"main_heading_color\": \"black\",\n+        \"main_heading_type_color\": \"#ad378a\",\n+        \"src_link_color\": \"#3873ad\",\n+        \"sidebar_link_color\": \"#356da4\",\n     },\n )"}, {"sha": "e1c81ed79e401e021996ea23499e3425734639fd", "filename": "tests/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -109,19 +109,19 @@ define-function: (\n \n call-function: (\"check-colors\", {\n     \"theme\": \"ayu\",\n-    \"background\": \"rgb(15, 20, 25)\",\n-    \"color\": \"rgb(197, 197, 197)\",\n-    \"border\": \"rgb(92, 103, 115)\",\n+    \"background\": \"#0f1419\",\n+    \"color\": \"#c5c5c5\",\n+    \"border\": \"#5c6773\",\n })\n call-function: (\"check-colors\", {\n     \"theme\": \"dark\",\n-    \"background\": \"rgb(53, 53, 53)\",\n-    \"color\": \"rgb(221, 221, 221)\",\n-    \"border\": \"rgb(224, 224, 224)\",\n+    \"background\": \"#353535\",\n+    \"color\": \"#ddd\",\n+    \"border\": \"#e0e0e0\",\n })\n call-function: (\"check-colors\", {\n     \"theme\": \"light\",\n-    \"background\": \"rgb(255, 255, 255)\",\n-    \"color\": \"rgb(0, 0, 0)\",\n-    \"border\": \"rgb(224, 224, 224)\",\n+    \"background\": \"white\",\n+    \"color\": \"black\",\n+    \"border\": \"#e0e0e0\",\n })"}, {"sha": "dd4542dd71f7024ab1655493224c710328006d76", "filename": "tests/ui/suggestions/issue-109854.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-109854.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-109854.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109854.rs?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -0,0 +1,12 @@\n+fn generate_setter() {\n+    String::with_capacity(\n+    //~^ ERROR this function takes 1 argument but 3 arguments were supplied\n+    generate_setter,\n+    r#\"\n+pub(crate) struct Person<T: Clone> {}\n+\"#,\n+     r#\"\"#,\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "621a3897165b812fac5e31e7702323672726d65f", "filename": "tests/ui/suggestions/issue-109854.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-109854.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-109854.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109854.stderr?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -0,0 +1,31 @@\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109854.rs:2:5\n+   |\n+LL |       String::with_capacity(\n+   |       ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     r#\"\n+LL | | pub(crate) struct Person<T: Clone> {}\n+LL | | \"#,\n+   | |__- unexpected argument of type `&'static str`\n+LL |        r#\"\"#,\n+   |        ----- unexpected argument of type `&'static str`\n+   |\n+note: expected `usize`, found fn item\n+  --> $DIR/issue-109854.rs:4:5\n+   |\n+LL |     generate_setter,\n+   |     ^^^^^^^^^^^^^^^\n+   = note: expected type `usize`\n+           found fn item `fn() {generate_setter}`\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/string.rs:LL:COL\n+help: remove the extra arguments\n+   |\n+LL -     generate_setter,\n+LL +     /* usize */,\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "cbb9f9cec721142def77ecc4eb61d772b474d6b4", "filename": "tests/ui/suggestions/issue-94171.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-94171.rs", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-94171.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-94171.rs?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -0,0 +1,5 @@\n+fn L(]{match\n+(; {`\n+//~^^ ERROR mismatched closing delimiter\n+//~^^ ERROR unknown start of token\n+//~ ERROR this file contains an unclosed delimiter"}, {"sha": "b3440e46e8acd7a98bf785863c8539f311a5d407", "filename": "tests/ui/suggestions/issue-94171.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-94171.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/965cf5c1f5d4906935c552e1b9099c56e097e7aa/tests%2Fui%2Fsuggestions%2Fissue-94171.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-94171.stderr?ref=965cf5c1f5d4906935c552e1b9099c56e097e7aa", "patch": "@@ -0,0 +1,36 @@\n+error: unknown start of token: `\n+  --> $DIR/issue-94171.rs:2:5\n+   |\n+LL | (; {`\n+   |     ^\n+   |\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+   |\n+LL | (; {'\n+   |     ~\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-94171.rs:1:5\n+   |\n+LL | fn L(]{match\n+   |     ^^ mismatched closing delimiter\n+   |     |\n+   |     unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-94171.rs:5:52\n+   |\n+LL | fn L(]{match\n+   |      -- unclosed delimiter\n+   |      |\n+   |      missing open `[` for this delimiter\n+LL | (; {`\n+   | -  - unclosed delimiter\n+   | |\n+   | unclosed delimiter\n+...\n+LL |\n+   |                                                    ^\n+\n+error: aborting due to 3 previous errors\n+"}]}