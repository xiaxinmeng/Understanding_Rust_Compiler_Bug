{"sha": "5c794210bfb67c7aa021b405810342cd50e21262", "node_id": "C_kwDOAAsO6NoAKDVjNzk0MjEwYmZiNjdjN2FhMDIxYjQwNTgxMDM0MmNkNTBlMjEyNjI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-28T11:33:19Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-28T12:24:55Z"}, "message": "Replace expect test for GATs with `check_types`", "tree": {"sha": "083f2d08bbb2848895cb562cb8609c45ad6e64e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/083f2d08bbb2848895cb562cb8609c45ad6e64e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c794210bfb67c7aa021b405810342cd50e21262", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNbyhcACgkQ4laYqTBY\nYXGV8A//aPExDfPvi37wNH0BO8yhZVTlfgMOouGnqS9jV5Q1INh2tYMcNVN1U2Tv\nFgQTyc55rg815FJ5z9sq75pGNIEg76g9gRz6xo1dYIdttYzuh5C75OvXiMVRVlHn\npDGpAxaSa9BgxpnjO4LI4vrBAgB2OI597/mXIoAb/+gQ5f98qKgD/zKEwgP9apG9\n5wHmtmAPCzRWeSFqkFO4Gc4XWSJNsdZWLELlbHo1tYO6lIqrsMH4MmJI9qLAoVrt\nnS6yIY7x7bp1XzZcf7x3SefyfExgd16m+xLZvFV4ZLWxZByqtBqTUIHYrb+fKr9e\nWHRiO7owrprHMSqrm4/mqfU9D59+z/LszKmhoJpiwPmTtIW1W0kIx1FCDdVa75Vz\nY0AgwGcbHS6KaYDuG15xW/rZKuuvOXIljNBZ2HZNQcC8zCoAtXRactM9pJ3F5d1x\nBprW83ZzPP3n9cuwGAYGkZ1eVvWmsO9VtpTZACJuTfdEmSL8KhjkM+cESUKN9urp\n6h3BsG5SaVHOA943iJatxb/FJjD/bbci86WtyCcklixil/mqSOaqz1/QjY7pBET5\n60jcpN1FLw1AiQf+cwBbV0Acatc2tLRUZp4MfvCO/09xZS6FOg3Sf3y+808wN6PR\nBNiBKWq6b7/TnG2R42zKUHJwuWkm1hMkuX3Gh7yRlW6AqZY70ng=\n=3oGt\n-----END PGP SIGNATURE-----", "payload": "tree 083f2d08bbb2848895cb562cb8609c45ad6e64e6\nparent 5fc18ad6fa635adac058160bc7ba13e53abd5ece\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1666956799 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1666959895 +0900\n\nReplace expect test for GATs with `check_types`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c794210bfb67c7aa021b405810342cd50e21262", "html_url": "https://github.com/rust-lang/rust/commit/5c794210bfb67c7aa021b405810342cd50e21262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c794210bfb67c7aa021b405810342cd50e21262/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc18ad6fa635adac058160bc7ba13e53abd5ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc18ad6fa635adac058160bc7ba13e53abd5ece", "html_url": "https://github.com/rust-lang/rust/commit/5fc18ad6fa635adac058160bc7ba13e53abd5ece"}], "stats": {"total": 92, "additions": 28, "deletions": 64}, "files": [{"sha": "7d42b8b9bc8d80951f258da956e786ee0a681273", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 28, "deletions": 64, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5c794210bfb67c7aa021b405810342cd50e21262/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c794210bfb67c7aa021b405810342cd50e21262/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=5c794210bfb67c7aa021b405810342cd50e21262", "patch": "@@ -3966,7 +3966,7 @@ fn g(t: &(dyn T + Send)) {\n \n #[test]\n fn gats_in_path() {\n-    check_infer_with_mismatches(\n+    check_types(\n         r#\"\n //- minicore: deref\n use core::ops::Deref;\n@@ -3976,32 +3976,22 @@ trait PointerFamily {\n \n fn f<P: PointerFamily>(p: P::Pointer<i32>) {\n     let a = *p;\n+      //^ i32\n }\n fn g<P: PointerFamily>(p: <P as PointerFamily>::Pointer<i32>) {\n     let a = *p;\n+      //^ i32\n }\n         \"#,\n-        expect![[r#\"\n-            110..111 'p': PointerFamily::Pointer<i32, P>\n-            130..149 '{     ... *p; }': ()\n-            140..141 'a': i32\n-            144..146 '*p': i32\n-            145..146 'p': PointerFamily::Pointer<i32, P>\n-            173..174 'p': PointerFamily::Pointer<i32, P>\n-            212..231 '{     ... *p; }': ()\n-            222..223 'a': i32\n-            226..228 '*p': i32\n-            227..228 'p': PointerFamily::Pointer<i32, P>\n-        \"#]],\n     );\n }\n \n #[test]\n fn gats_with_impl_trait() {\n-    // FIXME: the last function (`fn h()`) is not valid Rust as of this writing because you cannot\n-    // specify the same associated type multiple times even if their arguments are different.\n-    // Reconsider how to treat these invalid types.\n-    check_infer_with_mismatches(\n+    // FIXME: the last function (`fn i()`) is not valid Rust as of this writing because you cannot\n+    // specify the same associated type multiple times even if their arguments are different (c.f.\n+    // `fn h()`, which is valid). Reconsider how to treat these invalid types.\n+    check_types(\n         r#\"\n //- minicore: deref\n use core::ops::Deref;\n@@ -4012,45 +4002,30 @@ trait Trait {\n }\n \n fn f<T>(v: impl Trait) {\n-    v.get::<i32>().deref();\n-    v.get::<T>().deref();\n+    let a = v.get::<i32>().deref();\n+      //^ &i32\n+    let a = v.get::<T>().deref();\n+      //^ &T\n }\n-fn g<T>(v: impl Trait<Assoc<T> = &'a T>) {\n+fn g<'a, T: 'a>(v: impl Trait<Assoc<T> = &'a T>) {\n     let a = v.get::<T>();\n+      //^ &T\n     let a = v.get::<()>();\n+      //^ Trait::Assoc<(), impl Trait<Assoc<T> = &T>>\n+}\n+fn h<'a>(v: impl Trait<Assoc<i32> = &'a i32> + Trait<Assoc<i64> = &'a i64>) {\n+    let a = v.get::<i32>();\n+      //^ &i32\n+    let a = v.get::<i64>();\n+      //^ &i64\n }\n-fn h(v: impl Trait<Assoc<i32> = &'a i32, Assoc<i64> = &'a i64> {\n+fn i<'a>(v: impl Trait<Assoc<i32> = &'a i32, Assoc<i64> = &'a i64>) {\n     let a = v.get::<i32>();\n+      //^ &i32\n     let a = v.get::<i64>();\n+      //^ &i64\n }\n     \"#,\n-        expect![[r#\"\n-            90..94 'self': &Self\n-            126..127 'v': impl Trait\n-            141..198 '{     ...f(); }': ()\n-            147..148 'v': impl Trait\n-            147..161 'v.get::<i32>()': Trait::Assoc<i32, impl Trait>\n-            147..169 'v.get:...eref()': &i32\n-            175..176 'v': impl Trait\n-            175..187 'v.get::<T>()': Trait::Assoc<T, impl Trait>\n-            175..195 'v.get:...eref()': &T\n-            207..208 'v': impl Trait<Assoc<T> = &T>\n-            240..296 '{     ...>(); }': ()\n-            250..251 'a': &T\n-            254..255 'v': impl Trait<Assoc<T> = &T>\n-            254..266 'v.get::<T>()': &T\n-            276..277 'a': Trait::Assoc<(), impl Trait<Assoc<T> = &T>>\n-            280..281 'v': impl Trait<Assoc<T> = &T>\n-            280..293 'v.get::<()>()': Trait::Assoc<(), impl Trait<Assoc<T> = &T>>\n-            302..303 'v': impl Trait<Assoc<i32> = &i32, Assoc<i64> = &i64>\n-            360..419 '{     ...>(); }': ()\n-            370..371 'a': &i32\n-            374..375 'v': impl Trait<Assoc<i32> = &i32, Assoc<i64> = &i64>\n-            374..388 'v.get::<i32>()': &i32\n-            398..399 'a': &i64\n-            402..403 'v': impl Trait<Assoc<i32> = &i32, Assoc<i64> = &i64>\n-            402..416 'v.get::<i64>()': &i64\n-        \"#]],\n     );\n }\n \n@@ -4086,7 +4061,7 @@ fn f<'a>(v: &dyn Trait<Assoc<i32> = &'a i32>) {\n \n #[test]\n fn gats_in_associated_type_binding() {\n-    check_infer_with_mismatches(\n+    check_types(\n         r#\"\n trait Trait {\n     type Assoc<T>;\n@@ -4099,24 +4074,13 @@ where\n     T: Trait<Assoc<isize> = usize>,\n {\n     let a = t.get::<i32>();\n+      //^ u32\n     let a = t.get::<isize>();\n+      //^ usize\n     let a = t.get::<()>();\n+      //^ Trait::Assoc<(), T>\n }\n \n     \"#,\n-        expect![[r#\"\n-            48..52 'self': &Self\n-            84..85 't': T\n-            164..252 '{     ...>(); }': ()\n-            174..175 'a': u32\n-            178..179 't': T\n-            178..192 't.get::<i32>()': u32\n-            202..203 'a': usize\n-            206..207 't': T\n-            206..222 't.get:...ize>()': usize\n-            232..233 'a': Trait::Assoc<(), T>\n-            236..237 't': T\n-            236..249 't.get::<()>()': Trait::Assoc<(), T>\n-        \"#]],\n-    )\n+    );\n }"}]}