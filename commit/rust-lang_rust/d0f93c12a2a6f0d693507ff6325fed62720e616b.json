{"sha": "d0f93c12a2a6f0d693507ff6325fed62720e616b", "node_id": "C_kwDOAAsO6NoAKGQwZjkzYzEyYTJhNmYwZDY5MzUwN2ZmNjMyNWZlZDYyNzIwZTYxNmI", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-05-25T00:11:29Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-05-25T00:11:29Z"}, "message": "refactor: get the required variables with MethodCall", "tree": {"sha": "16c31c0dcc35d3ce530bc20bfd6b917b6124d4bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c31c0dcc35d3ce530bc20bfd6b917b6124d4bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f93c12a2a6f0d693507ff6325fed62720e616b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f93c12a2a6f0d693507ff6325fed62720e616b", "html_url": "https://github.com/rust-lang/rust/commit/d0f93c12a2a6f0d693507ff6325fed62720e616b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f93c12a2a6f0d693507ff6325fed62720e616b/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e47c5b0e035c556947fcf3485fd2d1823ed1d1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e47c5b0e035c556947fcf3485fd2d1823ed1d1b1", "html_url": "https://github.com/rust-lang/rust/commit/e47c5b0e035c556947fcf3485fd2d1823ed1d1b1"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "0748ab45252ad3d8decd4ad9b8e80a99afc0f29c", "filename": "clippy_lints/src/get_first.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0f93c12a2a6f0d693507ff6325fed62720e616b/clippy_lints%2Fsrc%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f93c12a2a6f0d693507ff6325fed62720e616b/clippy_lints%2Fsrc%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_first.rs?ref=d0f93c12a2a6f0d693507ff6325fed62720e616b", "patch": "@@ -40,14 +40,11 @@ declare_lint_pass!(GetFirst => [GET_FIRST]);\n impl<'tcx> LateLintPass<'tcx> for GetFirst {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n-            if let hir::ExprKind::MethodCall(_, expr_args, _) = &expr.kind;\n+            if let hir::ExprKind::MethodCall(_, [struct_calling_on, method_arg], _) = &expr.kind;\n             if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-            if match_def_path(cx, expr_def_id, &paths::SLICE_GET) && expr_args.len() == 2;\n+            if match_def_path(cx, expr_def_id, &paths::SLICE_GET);\n \n-            if let Some(struct_calling_on) = expr_args.get(0);\n             if let Some(_) = is_slice_of_primitives(cx, struct_calling_on);\n-\n-            if let Some(method_arg) = expr_args.get(1);\n             if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = method_arg.kind;\n \n             then {"}]}