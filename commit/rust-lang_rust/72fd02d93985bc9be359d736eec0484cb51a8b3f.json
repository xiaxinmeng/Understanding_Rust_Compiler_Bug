{"sha": "72fd02d93985bc9be359d736eec0484cb51a8b3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZmQwMmQ5Mzk4NWJjOWJlMzU5ZDczNmVlYzA0ODRjYjUxYThiM2Y=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-16T05:54:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-16T05:54:14Z"}, "message": "doc: convert remaining uses of core:: to std::.", "tree": {"sha": "97320928c95c49aefbf757500be8b4432b7f80c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97320928c95c49aefbf757500be8b4432b7f80c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72fd02d93985bc9be359d736eec0484cb51a8b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72fd02d93985bc9be359d736eec0484cb51a8b3f", "html_url": "https://github.com/rust-lang/rust/commit/72fd02d93985bc9be359d736eec0484cb51a8b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72fd02d93985bc9be359d736eec0484cb51a8b3f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe94f9b4d0d072e2477b989715c6c79e97de259", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe94f9b4d0d072e2477b989715c6c79e97de259", "html_url": "https://github.com/rust-lang/rust/commit/abe94f9b4d0d072e2477b989715c6c79e97de259"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "21b1b377afa6339214821852b13606fbe6dd8641", "filename": "src/etc/cmathconsts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Fetc%2Fcmathconsts.c", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Fetc%2Fcmathconsts.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcmathconsts.c?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -13,7 +13,7 @@\n #include <math.h>\n #include <stdio.h>\n \n-// must match core::ctypes\n+// must match std::ctypes\n \n #define C_FLT(x) (float)x\n #define C_DBL(x) (double)x"}, {"sha": "51c0da39bd5ac167df3222ce41c469389870b137", "filename": "src/etc/ziggurat_tables.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Fetc%2Fziggurat_tables.py", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Fetc%2Fziggurat_tables.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fziggurat_tables.py?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -2,7 +2,7 @@\n # xfail-license\n \n # This creates the tables used for distributions implemented using the\n-# ziggurat algorithm in `core::rand::distributions;`. They are\n+# ziggurat algorithm in `std::rand::distributions;`. They are\n # (basically) the tables as used in the ZIGNOR variant (Doornik 2005).\n # They are changed rarely, so the generated file should be checked in\n # to git."}, {"sha": "3d0163d9e259305d5531df46fc615acbaae1364d", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -36,7 +36,7 @@ _rustc_opts_lint=(\n     'path-statement[path statements with no effect]'\n     'missing-trait-doc[detects missing documentation for traits]'\n     'missing-struct-doc[detects missing documentation for structs]'\n-    'ctypes[proper use of core::libc types in foreign modules]'\n+    'ctypes[proper use of std::libc types in foreign modules]'\n     \"unused-mut[detect mut variables which don't need to be mutable]\"\n     'unused-imports[imports that are never used]'\n     'heap-memory[use of any (~ type or @ type) heap memory]'"}, {"sha": "0df575b7f41996a76cbd78bae47b92c918277983", "filename": "src/libstd/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -1029,9 +1029,9 @@ pub fn FILE_reader(f: *libc::FILE, cleanup: bool) -> @Reader {\n * # Example\n *\n * ~~~ {.rust}\n-* let stdin = core::io::stdin();\n+* let stdin = std::io::stdin();\n * let line = stdin.read_line();\n-* core::io::print(line);\n+* std::io::print(line);\n * ~~~\n */\n pub fn stdin() -> @Reader {\n@@ -1598,7 +1598,7 @@ pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n * # Example\n *\n * ~~~ {.rust}\n-* let stdout = core::io::stdout();\n+* let stdout = std::io::stdout();\n * stdout.write_str(\"hello\\n\");\n * ~~~\n */\n@@ -1610,7 +1610,7 @@ pub fn stdout() -> @Writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n * # Example\n *\n * ~~~ {.rust}\n-* let stderr = core::io::stderr();\n+* let stderr = std::io::stderr();\n * stderr.write_str(\"hello\\n\");\n * ~~~\n */"}, {"sha": "53c5d255f1c9ce4ce3ec802349addc6bb962c9b7", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -411,7 +411,7 @@ pub fn pipe() -> Pipe {\n         // inheritance has to be handled in a different way that I do not\n         // fully understand. Here we explicitly make the pipe non-inheritable,\n         // which means to pass it to a subprocess they need to be duplicated\n-        // first, as in core::run.\n+        // first, as in std::run.\n         let mut fds = Pipe {input: 0 as c_int,\n                     out: 0 as c_int };\n         let res = libc::pipe(&mut fds.input, 1024 as ::libc::c_uint,"}, {"sha": "67be7986c33d8a37fa340299d8e9615ba10d3358", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -66,7 +66,7 @@ fn ziggurat<R:Rng>(rng: &mut R,\n /// # Example\n ///\n /// ~~~\n-/// use core::rand::distributions::StandardNormal;\n+/// use std::rand::distributions::StandardNormal;\n ///\n /// fn main() {\n ///     let normal = 2.0 + (*rand::random::<StandardNormal>()) * 3.0;\n@@ -120,7 +120,7 @@ impl Rand for StandardNormal {\n /// # Example\n ///\n /// ~~~\n-/// use core::rand::distributions::Exp1;\n+/// use std::rand::distributions::Exp1;\n ///\n /// fn main() {\n ///     let exp2 = (*rand::random::<Exp1>()) * 0.5;"}, {"sha": "aec9168b5d179003d2e3f7d573fef4c9070230c3", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -19,7 +19,7 @@ file, TCP, UDP, Unix domain sockets.\n Readers and Writers may be composed to add capabilities like string\n parsing, encoding, and compression.\n \n-This will likely live in core::io, not core::rt::io.\n+This will likely live in std::io, not std::rt::io.\n \n # Examples\n "}, {"sha": "58e86f97f71e16c4893c5e3cf5daee1c8c87b6d3", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -40,17 +40,17 @@ out of `rt` as development proceeds.\n \n Several modules in `core` are clients of `rt`:\n \n-* `core::task` - The user-facing interface to the Rust task model.\n-* `core::task::local_data` - The interface to local data.\n-* `core::gc` - The garbage collector.\n-* `core::unstable::lang` - Miscellaneous lang items, some of which rely on `core::rt`.\n-* `core::condition` - Uses local data.\n-* `core::cleanup` - Local heap destruction.\n-* `core::io` - In the future `core::io` will use an `rt` implementation.\n-* `core::logging`\n-* `core::pipes`\n-* `core::comm`\n-* `core::stackwalk`\n+* `std::task` - The user-facing interface to the Rust task model.\n+* `std::task::local_data` - The interface to local data.\n+* `std::gc` - The garbage collector.\n+* `std::unstable::lang` - Miscellaneous lang items, some of which rely on `std::rt`.\n+* `std::condition` - Uses local data.\n+* `std::cleanup` - Local heap destruction.\n+* `std::io` - In the future `std::io` will use an `rt` implementation.\n+* `std::logging`\n+* `std::pipes`\n+* `std::comm`\n+* `std::stackwalk`\n \n */\n \n@@ -139,7 +139,7 @@ pub mod rc;\n /// scheduler and task context\n pub mod tube;\n \n-/// Simple reimplementation of core::comm\n+/// Simple reimplementation of std::comm\n pub mod comm;\n \n mod select;"}, {"sha": "59833a16ed8b57a6faa1804fc0ae7239bfc0698c", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-Bindings to libuv, along with the default implementation of `core::rt::rtio`.\n+Bindings to libuv, along with the default implementation of `std::rt::rtio`.\n \n UV types consist of the event loop (Loop), Watchers, Requests and\n Callbacks."}, {"sha": "b01c19a59c18630b00dc07762252e469f4e8a982", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -100,7 +100,7 @@ pub struct Lifetime {\n }\n \n // a \"Path\" is essentially Rust's notion of a name;\n-// for instance: core::cmp::Eq  .  It's represented\n+// for instance: std::cmp::Eq  .  It's represented\n // as a sequence of identifiers, along with a bunch\n // of supporting information.\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n@@ -1093,8 +1093,8 @@ pub enum inlined_item {\n /* hold off on tests ... they appear in a later merge.\n #[cfg(test)]\n mod test {\n-    use core::option::{None, Option, Some};\n-    use core::uint;\n+    use std::option::{None, Option, Some};\n+    use std::uint;\n     use extra;\n     use codemap::*;\n     use super::*;"}, {"sha": "127a1b57a218deb4eb85e067b386d224199a4b3c", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -31,7 +31,7 @@ const size_t default_log_level = log_err;\n \n // This is a rather ugly parser for strings in the form\n // \"crate1,crate2.mod3,crate3.x=1\". Log levels are 0-255,\n-// with the most likely ones being 0-3 (defined in core::).\n+// with the most likely ones being 0-3 (defined in std::).\n size_t parse_logging_spec(char* spec, log_directive* dirs) {\n     size_t dir = 0;\n     while (dir < max_log_directives && *spec) {"}, {"sha": "c2b15c2fd1bd4d7b9fb11960a2b15eb95581f640", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fd02d93985bc9be359d736eec0484cb51a8b3f/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=72fd02d93985bc9be359d736eec0484cb51a8b3f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-use core::io::ReaderUtil;\n-use core::io::Reader;\n+use std::io::ReaderUtil;\n+use std::io::Reader;\n \n fn bar(r:@ReaderUtil) -> ~str { r.read_line() }\n "}]}