{"sha": "fd83b2794536514ba5fb46f51ba76ea2a82c6841", "node_id": "C_kwDOAAsO6NoAKGZkODNiMjc5NDUzNjUxNGJhNWZiNDZmNTFiYTc2ZWEyYTgyYzY4NDE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T18:25:43Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T18:25:43Z"}, "message": "Port llvm sysroot building to SysrootTarget too and dedup some code", "tree": {"sha": "0a5041249036dcd5022859dc5c478121a19dbd43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a5041249036dcd5022859dc5c478121a19dbd43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd83b2794536514ba5fb46f51ba76ea2a82c6841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd83b2794536514ba5fb46f51ba76ea2a82c6841", "html_url": "https://github.com/rust-lang/rust/commit/fd83b2794536514ba5fb46f51ba76ea2a82c6841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd83b2794536514ba5fb46f51ba76ea2a82c6841/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac4456351b3767c0bd46af312cf6635cc98f6ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac4456351b3767c0bd46af312cf6635cc98f6ef", "html_url": "https://github.com/rust-lang/rust/commit/0ac4456351b3767c0bd46af312cf6635cc98f6ef"}], "stats": {"total": 159, "additions": 80, "deletions": 79}, "files": [{"sha": "3f52721a4698ee499739eb7fb730bbd8a9abf344", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 80, "deletions": 79, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/fd83b2794536514ba5fb46f51ba76ea2a82c6841/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd83b2794536514ba5fb46f51ba76ea2a82c6841/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=fd83b2794536514ba5fb46f51ba76ea2a82c6841", "patch": "@@ -12,7 +12,6 @@ use super::SysrootKind;\n static DIST_DIR: RelPath = RelPath::DIST;\n static BIN_DIR: RelPath = RelPath::DIST.join(\"bin\");\n static LIB_DIR: RelPath = RelPath::DIST.join(\"lib\");\n-static RUSTLIB_DIR: RelPath = LIB_DIR.join(\"rustlib\");\n \n pub(crate) fn build_sysroot(\n     dirs: &Dirs,\n@@ -56,86 +55,37 @@ pub(crate) fn build_sysroot(\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n-    match sysroot_kind {\n-        SysrootKind::None => {} // Nothing to do\n-        SysrootKind::Llvm => {\n-            let default_sysroot =\n-                super::rustc_info::get_default_sysroot(&bootstrap_host_compiler.rustc);\n-\n-            let host_rustlib_lib =\n-                RUSTLIB_DIR.to_path(dirs).join(&bootstrap_host_compiler.triple).join(\"lib\");\n-            let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&target_triple).join(\"lib\");\n-            fs::create_dir_all(&host_rustlib_lib).unwrap();\n-            fs::create_dir_all(&target_rustlib_lib).unwrap();\n-\n-            for file in fs::read_dir(\n-                default_sysroot\n-                    .join(\"lib\")\n-                    .join(\"rustlib\")\n-                    .join(&bootstrap_host_compiler.triple)\n-                    .join(\"lib\"),\n-            )\n-            .unwrap()\n-            {\n-                let file = file.unwrap().path();\n-                let file_name_str = file.file_name().unwrap().to_str().unwrap();\n-                if (file_name_str.contains(\"rustc_\")\n-                    && !file_name_str.contains(\"rustc_std_workspace_\")\n-                    && !file_name_str.contains(\"rustc_demangle\"))\n-                    || file_name_str.contains(\"chalk\")\n-                    || file_name_str.contains(\"tracing\")\n-                    || file_name_str.contains(\"regex\")\n-                {\n-                    // These are large crates that are part of the rustc-dev component and are not\n-                    // necessary to run regular programs.\n-                    continue;\n-                }\n-                try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n-            }\n+    let host = build_sysroot_for_triple(\n+        dirs,\n+        channel,\n+        bootstrap_host_compiler.clone(),\n+        &cg_clif_dylib_path,\n+        sysroot_kind,\n+    );\n+    host.install_into_sysroot(&DIST_DIR.to_path(dirs));\n \n-            if !is_native {\n-                for file in fs::read_dir(\n-                    default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\"),\n-                )\n-                .unwrap()\n-                {\n-                    let file = file.unwrap().path();\n-                    try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n-                }\n-            }\n-        }\n-        SysrootKind::Clif => {\n-            let host = build_clif_sysroot_for_triple(\n-                dirs,\n-                channel,\n-                bootstrap_host_compiler.clone(),\n-                &cg_clif_dylib_path,\n-            );\n-            host.install_into_sysroot(&DIST_DIR.to_path(dirs));\n-\n-            if !is_native {\n-                build_clif_sysroot_for_triple(\n-                    dirs,\n-                    channel,\n-                    {\n-                        let mut bootstrap_target_compiler = bootstrap_host_compiler.clone();\n-                        bootstrap_target_compiler.triple = target_triple.clone();\n-                        bootstrap_target_compiler.set_cross_linker_and_runner();\n-                        bootstrap_target_compiler\n-                    },\n-                    &cg_clif_dylib_path,\n-                )\n-                .install_into_sysroot(&DIST_DIR.to_path(dirs));\n-            }\n+    if !is_native {\n+        build_sysroot_for_triple(\n+            dirs,\n+            channel,\n+            {\n+                let mut bootstrap_target_compiler = bootstrap_host_compiler.clone();\n+                bootstrap_target_compiler.triple = target_triple.clone();\n+                bootstrap_target_compiler.set_cross_linker_and_runner();\n+                bootstrap_target_compiler\n+            },\n+            &cg_clif_dylib_path,\n+            sysroot_kind,\n+        )\n+        .install_into_sysroot(&DIST_DIR.to_path(dirs));\n+    }\n \n-            // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n-            // libstd.\n-            for lib in host.libs {\n-                let filename = lib.file_name().unwrap().to_str().unwrap();\n-                if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n-                    try_hard_link(&lib, LIB_DIR.to_path(dirs).join(lib.file_name().unwrap()));\n-                }\n-            }\n+    // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n+    // libstd.\n+    for lib in host.libs {\n+        let filename = lib.file_name().unwrap().to_str().unwrap();\n+        if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n+            try_hard_link(&lib, LIB_DIR.to_path(dirs).join(lib.file_name().unwrap()));\n         }\n     }\n \n@@ -170,6 +120,57 @@ pub(crate) static STANDARD_LIBRARY: CargoProject =\n     CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n pub(crate) static RTSTARTUP_SYSROOT: RelPath = RelPath::BUILD.join(\"rtstartup\");\n \n+#[must_use]\n+fn build_sysroot_for_triple(\n+    dirs: &Dirs,\n+    channel: &str,\n+    compiler: Compiler,\n+    cg_clif_dylib_path: &Path,\n+    sysroot_kind: SysrootKind,\n+) -> SysrootTarget {\n+    match sysroot_kind {\n+        SysrootKind::None => SysrootTarget { triple: compiler.triple, libs: vec![] },\n+        SysrootKind::Llvm => build_llvm_sysroot_for_triple(compiler),\n+        SysrootKind::Clif => {\n+            build_clif_sysroot_for_triple(dirs, channel, compiler, &cg_clif_dylib_path)\n+        }\n+    }\n+}\n+\n+#[must_use]\n+fn build_llvm_sysroot_for_triple(compiler: Compiler) -> SysrootTarget {\n+    let default_sysroot = super::rustc_info::get_default_sysroot(&compiler.rustc);\n+\n+    let mut target_libs = SysrootTarget { triple: compiler.triple, libs: vec![] };\n+\n+    for entry in fs::read_dir(\n+        default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_libs.triple).join(\"lib\"),\n+    )\n+    .unwrap()\n+    {\n+        let entry = entry.unwrap();\n+        if entry.file_type().unwrap().is_dir() {\n+            continue;\n+        }\n+        let file = entry.path();\n+        let file_name_str = file.file_name().unwrap().to_str().unwrap();\n+        if (file_name_str.contains(\"rustc_\")\n+            && !file_name_str.contains(\"rustc_std_workspace_\")\n+            && !file_name_str.contains(\"rustc_demangle\"))\n+            || file_name_str.contains(\"chalk\")\n+            || file_name_str.contains(\"tracing\")\n+            || file_name_str.contains(\"regex\")\n+        {\n+            // These are large crates that are part of the rustc-dev component and are not\n+            // necessary to run regular programs.\n+            continue;\n+        }\n+        target_libs.libs.push(file);\n+    }\n+\n+    target_libs\n+}\n+\n #[must_use]\n fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,"}]}