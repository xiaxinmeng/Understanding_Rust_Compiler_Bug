{"sha": "382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MjM2MWMyNTJmNmQ5ZTFjOWUzZmFkM2JkYzRlYmUzMmM1ZDRiN2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-15T18:51:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-15T18:51:23Z"}, "message": "Merge #6552\n\n6552: Properly handle shorthands in destructure patterns when renaming r=SomeoneToIgnore a=Veykril\n\nFixes #6548 and #6551.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "60e0e6ccfab323471d18e4d5568e8da735af56c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60e0e6ccfab323471d18e4d5568e8da735af56c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsXirCRBK7hj4Ov3rIwAAdHIIAHXrIiHpbtgxQxzN0z5LJczl\nrKTj7mbDPSxP5XXa1PLqDDdEjhc3OREGkeEIdkDH7ixPUjbhLVcMLgYjG+vFOzXJ\nfVLRpgf+G05+jLE7Sak+P9CL2qi6zy2EvZ+Uhv4b0zq2O+fPooGqjV8A+sLDtql5\neiLGvJlWEhX52YNYhTdpfl9PWLKCFgNJg6utzhHhUqCx+Vmoryjdeu7SMXupU9VJ\nv1RYa5mJ2sKIyYI/Ccxg7ggIyaKMJdRCSsMAVtPe+7e6+Mwi+TlzeOzAeOk8RCR/\nnrNeoTxvIyqTNwyUDmwHSWFLK9M/NLfPd1s8/N5OXySFN5sEEb0tekxCJkkp7zI=\n=fgz0\n-----END PGP SIGNATURE-----\n", "payload": "tree 60e0e6ccfab323471d18e4d5568e8da735af56c6\nparent e8c803937ce23a6cf74583ad03f9868869c7eea1\nparent f3e297331c5c4b8c03810acc745ae5b4a9c4f71f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605466283 +0000\ncommitter GitHub <noreply@github.com> 1605466283 +0000\n\nMerge #6552\n\n6552: Properly handle shorthands in destructure patterns when renaming r=SomeoneToIgnore a=Veykril\n\nFixes #6548 and #6551.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "html_url": "https://github.com/rust-lang/rust/commit/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c803937ce23a6cf74583ad03f9868869c7eea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c803937ce23a6cf74583ad03f9868869c7eea1", "html_url": "https://github.com/rust-lang/rust/commit/e8c803937ce23a6cf74583ad03f9868869c7eea1"}, {"sha": "f3e297331c5c4b8c03810acc745ae5b4a9c4f71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f", "html_url": "https://github.com/rust-lang/rust/commit/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f"}], "stats": {"total": 232, "additions": 206, "deletions": 26}, "files": [{"sha": "5693dd400e278a554f2ab7623b292311a9ba6bf2", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "patch": "@@ -110,14 +110,23 @@ pub(crate) fn find_all_refs(\n         .filter(|r| search_kind == ReferenceKind::Other || search_kind == r.kind)\n         .collect();\n \n-    let decl_range = def.try_to_nav(sema.db)?.focus_or_full_range();\n-\n-    let declaration = Declaration {\n-        nav: def.try_to_nav(sema.db)?,\n-        kind: ReferenceKind::Other,\n-        access: decl_access(&def, &syntax, decl_range),\n+    let nav = def.try_to_nav(sema.db)?;\n+    let decl_range = nav.focus_or_full_range();\n+\n+    let mut kind = ReferenceKind::Other;\n+    if let Definition::Local(local) = def {\n+        if let either::Either::Left(pat) = local.source(sema.db).value {\n+            if matches!(\n+                pat.syntax().parent().and_then(ast::RecordPatField::cast),\n+                Some(pat_field) if pat_field.name_ref().is_none()\n+            ) {\n+                kind = ReferenceKind::FieldShorthandForLocal;\n+            }\n+        }\n     };\n \n+    let declaration = Declaration { nav, kind, access: decl_access(&def, &syntax, decl_range) };\n+\n     Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references }))\n }\n \n@@ -613,7 +622,7 @@ fn foo() {\n             expect![[r#\"\n                 f RECORD_FIELD FileId(0) 15..21 15..16 Other\n \n-                FileId(0) 55..56 Other Read\n+                FileId(0) 55..56 RecordFieldExprOrPat Read\n                 FileId(0) 68..69 Other Write\n             \"#]],\n         );\n@@ -748,7 +757,7 @@ fn f() -> m::En {\n             expect![[r#\"\n                 field RECORD_FIELD FileId(0) 56..65 56..61 Other\n \n-                FileId(0) 125..130 Other Read\n+                FileId(0) 125..130 RecordFieldExprOrPat Read\n             \"#]],\n         );\n     }"}, {"sha": "b8725693aa67c7c930f2f1b5cab33c81fcceb19b", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 158, "deletions": 7, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::{Module, ModuleDef, ModuleSource, Semantics};\n-use ide_db::base_db::SourceDatabaseExt;\n+use ide_db::base_db::{FileRange, SourceDatabaseExt};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -106,9 +106,12 @@ fn find_module_at_offset(\n     Some(module)\n }\n \n-fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFileEdit {\n+fn source_edit_from_reference(\n+    sema: &Semantics<RootDatabase>,\n+    reference: Reference,\n+    new_name: &str,\n+) -> SourceFileEdit {\n     let mut replacement_text = String::new();\n-    let file_id = reference.file_range.file_id;\n     let range = match reference.kind {\n         ReferenceKind::FieldShorthandForField => {\n             mark::hit!(test_rename_struct_field_for_shorthand);\n@@ -122,12 +125,48 @@ fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFil\n             replacement_text.push_str(new_name);\n             TextRange::new(reference.file_range.range.end(), reference.file_range.range.end())\n         }\n+        ReferenceKind::RecordFieldExprOrPat => {\n+            mark::hit!(test_rename_field_expr_pat);\n+            replacement_text.push_str(new_name);\n+            edit_text_range_for_record_field_expr_or_pat(sema, reference.file_range, new_name)\n+        }\n         _ => {\n             replacement_text.push_str(new_name);\n             reference.file_range.range\n         }\n     };\n-    SourceFileEdit { file_id, edit: TextEdit::replace(range, replacement_text) }\n+    SourceFileEdit {\n+        file_id: reference.file_range.file_id,\n+        edit: TextEdit::replace(range, replacement_text),\n+    }\n+}\n+\n+fn edit_text_range_for_record_field_expr_or_pat(\n+    sema: &Semantics<RootDatabase>,\n+    file_range: FileRange,\n+    new_name: &str,\n+) -> TextRange {\n+    let source_file = sema.parse(file_range.file_id);\n+    let file_syntax = source_file.syntax();\n+    let original_range = file_range.range;\n+\n+    syntax::algo::find_node_at_range::<ast::RecordExprField>(file_syntax, original_range)\n+        .and_then(|field_expr| match field_expr.expr().and_then(|e| e.name_ref()) {\n+            Some(name) if &name.to_string() == new_name => Some(field_expr.syntax().text_range()),\n+            _ => None,\n+        })\n+        .or_else(|| {\n+            syntax::algo::find_node_at_range::<ast::RecordPatField>(file_syntax, original_range)\n+                .and_then(|field_pat| match field_pat.pat() {\n+                    Some(ast::Pat::IdentPat(pat))\n+                        if pat.name().map(|n| n.to_string()).as_deref() == Some(new_name) =>\n+                    {\n+                        Some(field_pat.syntax().text_range())\n+                    }\n+                    _ => None,\n+                })\n+        })\n+        .unwrap_or(original_range)\n }\n \n fn rename_mod(\n@@ -170,7 +209,7 @@ fn rename_mod(\n     let ref_edits = refs\n         .references\n         .into_iter()\n-        .map(|reference| source_edit_from_reference(reference, new_name));\n+        .map(|reference| source_edit_from_reference(sema, reference, new_name));\n     source_file_edits.extend(ref_edits);\n \n     Ok(RangeInfo::new(range, SourceChange::from_edits(source_file_edits, file_system_edits)))\n@@ -211,7 +250,7 @@ fn rename_to_self(\n \n     let mut edits = usages\n         .into_iter()\n-        .map(|reference| source_edit_from_reference(reference, \"self\"))\n+        .map(|reference| source_edit_from_reference(sema, reference, \"self\"))\n         .collect::<Vec<_>>();\n \n     edits.push(SourceFileEdit {\n@@ -300,7 +339,7 @@ fn rename_reference(\n \n     let edit = refs\n         .into_iter()\n-        .map(|reference| source_edit_from_reference(reference, new_name))\n+        .map(|reference| source_edit_from_reference(sema, reference, new_name))\n         .collect::<Vec<_>>();\n \n     if edit.is_empty() {\n@@ -1097,4 +1136,116 @@ impl Foo {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_initializer_use_field_init_shorthand() {\n+        mark::check!(test_rename_field_expr_pat);\n+        check(\n+            \"bar\",\n+            r#\"\n+struct Foo { i<|>: i32 }\n+\n+fn foo(bar: i32) -> Foo {\n+    Foo { i: bar }\n+}\n+\"#,\n+            r#\"\n+struct Foo { bar: i32 }\n+\n+fn foo(bar: i32) -> Foo {\n+    Foo { bar }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_struct_field_destructure_into_shorthand() {\n+        check(\n+            \"baz\",\n+            r#\"\n+struct Foo { i<|>: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { i: baz } = foo;\n+    let _ = baz;\n+}\n+\"#,\n+            r#\"\n+struct Foo { baz: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { baz } = foo;\n+    let _ = baz;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_binding_in_destructure_pat() {\n+        let expected_fixture = r#\"\n+struct Foo {\n+    i: i32,\n+}\n+\n+fn foo(foo: Foo) {\n+    let Foo { i: bar } = foo;\n+    let _ = bar;\n+}\n+\"#;\n+        check(\n+            \"bar\",\n+            r#\"\n+struct Foo {\n+    i: i32,\n+}\n+\n+fn foo(foo: Foo) {\n+    let Foo { i: b } = foo;\n+    let _ = b<|>;\n+}\n+\"#,\n+            expected_fixture,\n+        );\n+        check(\n+            \"bar\",\n+            r#\"\n+struct Foo {\n+    i: i32,\n+}\n+\n+fn foo(foo: Foo) {\n+    let Foo { i } = foo;\n+    let _ = i<|>;\n+}\n+\"#,\n+            expected_fixture,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_binding_in_destructure_param_pat() {\n+        check(\n+            \"bar\",\n+            r#\"\n+struct Foo {\n+    i: i32\n+}\n+\n+fn foo(Foo { i }: foo) -> i32 {\n+    i<|>\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    i: i32\n+}\n+\n+fn foo(Foo { i: bar }: foo) -> i32 {\n+    bar\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "a3e765d0598d92212795c24255468520e40c9846", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "patch": "@@ -30,6 +30,7 @@ pub enum ReferenceKind {\n     FieldShorthandForField,\n     FieldShorthandForLocal,\n     StructLiteral,\n+    RecordFieldExprOrPat,\n     Other,\n }\n \n@@ -278,8 +279,9 @@ impl<'a> FindUsages<'a> {\n     ) -> bool {\n         match NameRefClass::classify(self.sema, &name_ref) {\n             Some(NameRefClass::Definition(def)) if &def == self.def => {\n-                let kind = if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref)\n-                {\n+                let kind = if is_record_field_expr_or_pat(&name_ref) {\n+                    ReferenceKind::RecordFieldExprOrPat\n+                } else if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref) {\n                     ReferenceKind::StructLiteral\n                 } else {\n                     ReferenceKind::Other\n@@ -385,3 +387,17 @@ fn is_record_lit_name_ref(name_ref: &ast::NameRef) -> bool {\n         .map(|p| p.name_ref().as_ref() == Some(name_ref))\n         .unwrap_or(false)\n }\n+\n+fn is_record_field_expr_or_pat(name_ref: &ast::NameRef) -> bool {\n+    if let Some(parent) = name_ref.syntax().parent() {\n+        match_ast! {\n+            match parent {\n+                ast::RecordExprField(it) => true,\n+                ast::RecordPatField(_it) => true,\n+                _ => false,\n+            }\n+        }\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "e4a9b945c98f0864ccf825d105c1495b53614b16", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "patch": "@@ -22,6 +22,18 @@ impl ast::Expr {\n             _ => false,\n         }\n     }\n+\n+    pub fn name_ref(&self) -> Option<ast::NameRef> {\n+        if let ast::Expr::PathExpr(expr) = self {\n+            let path = expr.path()?;\n+            let segment = path.segment()?;\n+            let name_ref = segment.name_ref()?;\n+            if path.qualifier().is_none() {\n+                return Some(name_ref);\n+            }\n+        }\n+        None\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "b70b840b81abd91b1cec0ee5469817a8f9b50a5d", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "patch": "@@ -203,15 +203,7 @@ impl ast::RecordExprField {\n         if let Some(name_ref) = self.name_ref() {\n             return Some(name_ref);\n         }\n-        if let Some(ast::Expr::PathExpr(expr)) = self.expr() {\n-            let path = expr.path()?;\n-            let segment = path.segment()?;\n-            let name_ref = segment.name_ref()?;\n-            if path.qualifier().is_none() {\n-                return Some(name_ref);\n-            }\n-        }\n-        None\n+        self.expr()?.name_ref()\n     }\n }\n "}]}