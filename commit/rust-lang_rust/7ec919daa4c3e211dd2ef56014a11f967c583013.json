{"sha": "7ec919daa4c3e211dd2ef56014a11f967c583013", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzkxOWRhYTRjM2UyMTFkZDJlZjU2MDE0YTExZjk2N2M1ODMwMTM=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-17T14:12:08Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-17T14:27:57Z"}, "message": "Remove the macro and expand it manually", "tree": {"sha": "86d65bae69700ef2cfa3bf85a217b6d0d5c267b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d65bae69700ef2cfa3bf85a217b6d0d5c267b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec919daa4c3e211dd2ef56014a11f967c583013", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYFIR7RUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLjJfQEA0ttJ+oxeaSrXhJWWeEFclku3I1Iu\n1HPwpl2d98FW0pcA/3AJvo3Qvrr9+D5Ju1x24iijs1+RnkP8LJ3o6UBuAQID\n=VE29\n-----END PGP SIGNATURE-----", "payload": "tree 86d65bae69700ef2cfa3bf85a217b6d0d5c267b3\nparent 633ac2a22226b27981b52ce6ed5af47fcc251746\nauthor hyd-dev <yd-huang@outlook.com> 1615990328 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1615991277 +0800\n\nRemove the macro and expand it manually\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec919daa4c3e211dd2ef56014a11f967c583013", "html_url": "https://github.com/rust-lang/rust/commit/7ec919daa4c3e211dd2ef56014a11f967c583013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec919daa4c3e211dd2ef56014a11f967c583013/comments", "author": null, "committer": null, "parents": [{"sha": "633ac2a22226b27981b52ce6ed5af47fcc251746", "url": "https://api.github.com/repos/rust-lang/rust/commits/633ac2a22226b27981b52ce6ed5af47fcc251746", "html_url": "https://github.com/rust-lang/rust/commit/633ac2a22226b27981b52ce6ed5af47fcc251746"}], "stats": {"total": 191, "additions": 148, "deletions": 43}, "files": [{"sha": "373d5299618d5c5e44ab88e00e33c1d2e602b9c5", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=7ec919daa4c3e211dd2ef56014a11f967c583013", "patch": "@@ -13,36 +13,6 @@ use crate::*;\n use super::backtrace::EvalContextExt as _;\n use helpers::{check_abi, check_arg_count};\n \n-/// This macro behaves just like `match $link_name { ... }`, but inserts a\n-/// `$crate::helpers::check_abi($abi, $exp_abi)?` call at each match arm\n-/// except the wildcard one.\n-#[macro_export]\n-macro_rules! match_with_abi_check {\n-    ($link_name:expr, $abi:expr, $exp_abi:expr, {\n-        $(|)? $($pattern:pat)|+ $(if $guard:expr)? => $shim_impl:block\n-        $($remaining:tt)+\n-    }) => {\n-        match ($link_name, $abi, $exp_abi) {\n-            ($($pattern)|+, abi, exp_abi) $(if $guard)? => {\n-                $crate::helpers::check_abi(abi, exp_abi)?;\n-                $shim_impl\n-            }\n-            (link_name, abi, exp_abi) => match_with_abi_check!(\n-                link_name,\n-                abi,\n-                exp_abi,\n-                { $($remaining)* }\n-            ),\n-        }\n-    };\n-    ($link_name:ident, $abi:ident, $exp_abi:ident, {\n-        _ => $fallback:expr $(,)?\n-    }) => ({\n-        let _ = ($link_name, $abi, $exp_abi);\n-        $fallback\n-    });\n-}\n-\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Returns the minimum alignment for the target architecture for allocations of the given size."}, {"sha": "b3d53cdc10dede24408cae257e1d11c8110de4cc", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=7ec919daa4c3e211dd2ef56014a11f967c583013", "patch": "@@ -5,7 +5,7 @@ use rustc_target::abi::{Align, LayoutOf, Size};\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::check_arg_count;\n+use helpers::{check_abi, check_arg_count};\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::sync::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n@@ -22,46 +22,54 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        match_with_abi_check!(link_name, abi, Abi::C { unwind: false }, {\n+        match link_name {\n             // Environment related shims\n             \"getenv\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref name] = check_arg_count(args)?;\n                 let result = this.getenv(name)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"unsetenv\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref name] = check_arg_count(args)?;\n                 let result = this.unsetenv(name)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"setenv\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref name, ref value, ref overwrite] = check_arg_count(args)?;\n                 this.read_scalar(overwrite)?.to_i32()?;\n                 let result = this.setenv(name, value)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"getcwd\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref buf, ref size] = check_arg_count(args)?;\n                 let result = this.getcwd(buf, size)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"chdir\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref path] = check_arg_count(args)?;\n                 let result = this.chdir(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // File related shims\n             \"open\" | \"open64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref path, ref flag, ref mode] = check_arg_count(args)?;\n                 let result = this.open(path, flag, mode)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fcntl\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let result = this.fcntl(args)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"read\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref buf, ref count] = check_arg_count(args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_scalar(buf)?.check_init()?;\n@@ -70,6 +78,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"write\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref buf, ref n] = check_arg_count(args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_scalar(buf)?.check_init()?;\n@@ -80,59 +89,70 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"unlink\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref path] = check_arg_count(args)?;\n                 let result = this.unlink(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"symlink\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref target, ref linkpath] = check_arg_count(args)?;\n                 let result = this.symlink(target, linkpath)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"rename\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref oldpath, ref newpath] = check_arg_count(args)?;\n                 let result = this.rename(oldpath, newpath)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"mkdir\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref path, ref mode] = check_arg_count(args)?;\n                 let result = this.mkdir(path, mode)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"rmdir\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref path] = check_arg_count(args)?;\n                 let result = this.rmdir(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"closedir\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref dirp] = check_arg_count(args)?;\n                 let result = this.closedir(dirp)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"lseek\" | \"lseek64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref offset, ref whence] = check_arg_count(args)?;\n                 let result = this.lseek64(fd, offset, whence)?;\n                 // \"lseek\" is only used on macOS which is 64bit-only, so `i64` always works.\n                 this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n             \"fsync\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd] = check_arg_count(args)?;\n                 let result = this.fsync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fdatasync\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd] = check_arg_count(args)?;\n                 let result = this.fdatasync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"readlink\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref pathname, ref buf, ref bufsize] = check_arg_count(args)?;\n                 let result = this.readlink(pathname, buf, bufsize)?;\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n \n             // Allocation\n             \"posix_memalign\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref ret, ref align, ref size] = check_arg_count(args)?;\n                 let ret = this.deref_operand(ret)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n@@ -163,6 +183,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Dynamic symbol loading\n             \"dlsym\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref handle, ref symbol] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_usize(this)?;\n                 let symbol = this.read_scalar(symbol)?.check_init()?;\n@@ -177,6 +198,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Querying system information\n             \"sysconf\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref name] = check_arg_count(args)?;\n                 let name = this.read_scalar(name)?.to_i32()?;\n \n@@ -202,6 +224,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Thread-local storage\n             \"pthread_key_create\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref key, ref dtor] = check_arg_count(args)?;\n                 let key_place = this.deref_operand(key)?;\n                 let dtor = this.read_scalar(dtor)?.check_init()?;\n@@ -230,20 +253,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"pthread_key_delete\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref key] = check_arg_count(args)?;\n                 let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 this.machine.tls.delete_tls_key(key)?;\n                 // Return success (0)\n                 this.write_null(dest)?;\n             }\n             \"pthread_getspecific\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref key] = check_arg_count(args)?;\n                 let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 let active_thread = this.get_active_thread();\n                 let ptr = this.machine.tls.load_tls(key, active_thread, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"pthread_setspecific\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref key, ref new_ptr] = check_arg_count(args)?;\n                 let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 let active_thread = this.get_active_thread();\n@@ -256,148 +282,177 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Synchronization primitives\n             \"pthread_mutexattr_init\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref attr] = check_arg_count(args)?;\n                 let result = this.pthread_mutexattr_init(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutexattr_settype\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref attr, ref kind] = check_arg_count(args)?;\n                 let result = this.pthread_mutexattr_settype(attr, kind)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutexattr_destroy\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref attr] = check_arg_count(args)?;\n                 let result = this.pthread_mutexattr_destroy(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_init\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref mutex, ref attr] = check_arg_count(args)?;\n                 let result = this.pthread_mutex_init(mutex, attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_lock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref mutex] = check_arg_count(args)?;\n                 let result = this.pthread_mutex_lock(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_trylock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref mutex] = check_arg_count(args)?;\n                 let result = this.pthread_mutex_trylock(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_unlock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref mutex] = check_arg_count(args)?;\n                 let result = this.pthread_mutex_unlock(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_destroy\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref mutex] = check_arg_count(args)?;\n                 let result = this.pthread_mutex_destroy(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_rdlock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref rwlock] = check_arg_count(args)?;\n                 let result = this.pthread_rwlock_rdlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_tryrdlock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref rwlock] = check_arg_count(args)?;\n                 let result = this.pthread_rwlock_tryrdlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_wrlock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref rwlock] = check_arg_count(args)?;\n                 let result = this.pthread_rwlock_wrlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_trywrlock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref rwlock] = check_arg_count(args)?;\n                 let result = this.pthread_rwlock_trywrlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_unlock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref rwlock] = check_arg_count(args)?;\n                 let result = this.pthread_rwlock_unlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_destroy\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref rwlock] = check_arg_count(args)?;\n                 let result = this.pthread_rwlock_destroy(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_init\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref attr] = check_arg_count(args)?;\n                 let result = this.pthread_condattr_init(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_destroy\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref attr] = check_arg_count(args)?;\n                 let result = this.pthread_condattr_destroy(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_init\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref cond, ref attr] = check_arg_count(args)?;\n                 let result = this.pthread_cond_init(cond, attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_signal\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref cond] = check_arg_count(args)?;\n                 let result = this.pthread_cond_signal(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_broadcast\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref cond] = check_arg_count(args)?;\n                 let result = this.pthread_cond_broadcast(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_wait\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref cond, ref mutex] = check_arg_count(args)?;\n                 let result = this.pthread_cond_wait(cond, mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_timedwait\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref cond, ref mutex, ref abstime] = check_arg_count(args)?;\n                 this.pthread_cond_timedwait(cond, mutex, abstime, dest)?;\n             }\n             \"pthread_cond_destroy\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref cond] = check_arg_count(args)?;\n                 let result = this.pthread_cond_destroy(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Threading\n             \"pthread_create\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref thread, ref attr, ref start, ref arg] = check_arg_count(args)?;\n                 let result = this.pthread_create(thread, attr, start, arg)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_join\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref thread, ref retval] = check_arg_count(args)?;\n                 let result = this.pthread_join(thread, retval)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_detach\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref thread] = check_arg_count(args)?;\n                 let result = this.pthread_detach(thread)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_self\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 this.pthread_self(dest)?;\n             }\n             \"sched_yield\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 let result = this.sched_yield()?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"nanosleep\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref req, ref rem] = check_arg_count(args)?;\n                 let result = this.nanosleep(req, rem)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Miscellaneous\n             \"isatty\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd] = check_arg_count(args)?;\n                 this.read_scalar(fd)?.to_i32()?;\n                 // \"returns 1 if fd is an open file descriptor referring to a terminal; otherwise 0 is returned, and errno is set to indicate the error\"\n@@ -407,6 +462,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"pthread_atfork\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref prepare, ref parent, ref child] = check_arg_count(args)?;\n                 this.force_bits(this.read_scalar(prepare)?.check_init()?, this.memory.pointer_size())?;\n                 this.force_bits(this.read_scalar(parent)?.check_init()?, this.memory.pointer_size())?;\n@@ -419,6 +475,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_attr_getguardsize\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _attr, ref guard_size] = check_arg_count(args)?;\n                 let guard_size = this.deref_operand(guard_size)?;\n                 let guard_size_layout = this.libc_ty_layout(\"size_t\")?;\n@@ -431,24 +488,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"pthread_attr_init\"\n             | \"pthread_attr_destroy\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"pthread_attr_setstacksize\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n \n             | \"signal\"\n             | \"sigaltstack\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"sigaction\"\n             | \"mprotect\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n@@ -461,7 +522,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     _ => unreachable!(),\n                 }\n             }\n-        });\n+        };\n \n         Ok(true)\n     }"}, {"sha": "fe989b5924dfdea874642581a655a75b75171dfe", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=7ec919daa4c3e211dd2ef56014a11f967c583013", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use crate::helpers::check_arg_count;\n+use crate::helpers::{check_abi, check_arg_count};\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::linux::sync::futex;\n use shims::posix::sync::EvalContextExt as _;\n@@ -20,9 +20,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        match_with_abi_check!(link_name, abi, Abi::C { unwind: false }, {\n+        match link_name {\n             // errno\n             \"__errno_location\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 let errno_place = this.last_error_place()?;\n                 this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n@@ -32,27 +33,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // These symbols have different names on Linux and macOS, which is the only reason they are not\n             // in the `posix` module.\n             \"close\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd] = check_arg_count(args)?;\n                 let result = this.close(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"opendir\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref name] = check_arg_count(args)?;\n                 let result = this.opendir(name)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"readdir64_r\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref dirp, ref entry, ref result] = check_arg_count(args)?;\n                 let result = this.linux_readdir64_r(dirp, entry, result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"ftruncate64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref length] = check_arg_count(args)?;\n                 let result = this.ftruncate64(fd, length)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             // Linux-only\n             \"posix_fadvise\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref offset, ref len, ref advice] = check_arg_count(args)?;\n                 this.read_scalar(fd)?.to_i32()?;\n                 this.read_scalar(offset)?.to_machine_isize(this)?;\n@@ -62,13 +68,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"sync_file_range\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref offset, ref nbytes, ref flags] = check_arg_count(args)?;\n                 let result = this.sync_file_range(fd, offset, nbytes, flags)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Time related shims\n             \"clock_gettime\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 // This is a POSIX function but it has only been tested on linux.\n                 let &[ref clk_id, ref tp] = check_arg_count(args)?;\n                 let result = this.clock_gettime(clk_id, tp)?;\n@@ -77,6 +85,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Querying system information\n             \"pthread_attr_getstack\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n                 let &[ref attr_place, ref addr_place, ref size_place] = check_arg_count(args)?;\n                 this.deref_operand(attr_place)?;\n@@ -98,23 +107,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Threading\n             \"prctl\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref option, ref arg2, ref arg3, ref arg4, ref arg5] = check_arg_count(args)?;\n                 let result = this.prctl(option, arg2, arg3, arg4, arg5)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_setclock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref attr, ref clock_id] = check_arg_count(args)?;\n                 let result = this.pthread_condattr_setclock(attr, clock_id)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_getclock\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref attr, ref clock_id] = check_arg_count(args)?;\n                 let result = this.pthread_condattr_getclock(attr, clock_id)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Dynamically invoked syscalls\n             \"syscall\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 // The syscall variadic function is legal to call with more arguments than needed,\n                 // extra arguments are simply ignored. However, all arguments need to be scalars;\n                 // other types might be treated differently by the calling convention.\n@@ -169,10 +182,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Miscelanneous\n             \"getrandom\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref ptr, ref len, ref flags] = check_arg_count(args)?;\n                 getrandom(this, ptr, len, flags, dest)?;\n             }\n             \"sched_getaffinity\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref pid, ref cpusetsize, ref mask] = check_arg_count(args)?;\n                 this.read_scalar(pid)?.to_i32()?;\n                 this.read_scalar(cpusetsize)?.to_machine_usize(this)?;\n@@ -186,12 +201,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_getattr_np\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _thread, ref _attr] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n \n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        });\n+        };\n \n         Ok(true)\n     }"}, {"sha": "dce9eea668e6304401f99e65adc54c2751cdfe2f", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=7ec919daa4c3e211dd2ef56014a11f967c583013", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::check_arg_count;\n+use helpers::{check_abi, check_arg_count};\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n \n@@ -18,87 +18,102 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        match_with_abi_check!(link_name, abi, Abi::C { unwind: false }, {\n+        match link_name {\n             // errno\n             \"__error\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 let errno_place = this.last_error_place()?;\n                 this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n             }\n \n             // File related shims\n             \"close\" | \"close$NOCANCEL\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref result] = check_arg_count(args)?;\n                 let result = this.close(result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"stat\" | \"stat$INODE64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref path, ref buf] = check_arg_count(args)?;\n                 let result = this.macos_stat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"lstat\" | \"lstat$INODE64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref path, ref buf] = check_arg_count(args)?;\n                 let result = this.macos_lstat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fstat\" | \"fstat$INODE64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref buf] = check_arg_count(args)?;\n                 let result = this.macos_fstat(fd, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"opendir\" | \"opendir$INODE64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref name] = check_arg_count(args)?;\n                 let result = this.opendir(name)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"readdir_r\" | \"readdir_r$INODE64\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref dirp, ref entry, ref result] = check_arg_count(args)?;\n                 let result = this.macos_readdir_r(dirp, entry, result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"ftruncate\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref fd, ref length] = check_arg_count(args)?;\n                 let result = this.ftruncate64(fd, length)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Environment related shims\n             \"_NSGetEnviron\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 this.write_scalar(this.machine.env_vars.environ.unwrap().ptr, dest)?;\n             }\n \n             // Time related shims\n             \"gettimeofday\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref tv, ref tz] = check_arg_count(args)?;\n                 let result = this.gettimeofday(tv, tz)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"mach_absolute_time\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 let result = this.mach_absolute_time()?;\n                 this.write_scalar(Scalar::from_u64(result), dest)?;\n             }\n \n             \"mach_timebase_info\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref info] = check_arg_count(args)?;\n                 let result = this.mach_timebase_info(info)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n+            },\n \n             // Access to command-line arguments\n             \"_NSGetArgc\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 this.write_scalar(this.machine.argc.expect(\"machine must be initialized\"), dest)?;\n             }\n             \"_NSGetArgv\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 this.write_scalar(this.machine.argv.expect(\"machine must be initialized\"), dest)?;\n             }\n \n             // Thread-local storage\n             \"_tlv_atexit\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref dtor, ref data] = check_arg_count(args)?;\n                 let dtor = this.read_scalar(dtor)?.check_init()?;\n                 let dtor = this.memory.get_fn(dtor)?.as_instance()?;\n@@ -109,12 +124,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Querying system information\n             \"pthread_get_stackaddr_np\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref thread] = check_arg_count(args)?;\n                 this.read_scalar(thread)?.to_machine_usize(this)?;\n                 let stack_addr = Scalar::from_uint(STACK_ADDR, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref thread] = check_arg_count(args)?;\n                 this.read_scalar(thread)?.to_machine_usize(this)?;\n                 let stack_size = Scalar::from_uint(STACK_SIZE, this.pointer_size());\n@@ -123,6 +140,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Threading\n             \"pthread_setname_np\" => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref name] = check_arg_count(args)?;\n                 let name = this.read_scalar(name)?.check_init()?;\n                 this.pthread_setname_np(name)?;\n@@ -131,14 +149,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"mmap\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let &[ref addr, _, _, _, _, _] = check_arg_count(args)?;\n                 let addr = this.read_scalar(addr)?.check_init()?;\n                 this.write_scalar(addr, dest)?;\n             }\n \n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        });\n+        };\n \n         Ok(true)\n     }"}, {"sha": "72b776380b99a5cfec5876c956243c62899aebdd", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec919daa4c3e211dd2ef56014a11f967c583013/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=7ec919daa4c3e211dd2ef56014a11f967c583013", "patch": "@@ -5,7 +5,7 @@ use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::check_arg_count;\n+use helpers::{check_abi, check_arg_count};\n use shims::windows::sync::EvalContextExt as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -25,48 +25,56 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // DWORD = ULONG = u32\n         // BOOL = i32\n         // BOOLEAN = u8\n-        match_with_abi_check!(link_name, abi, Abi::System { unwind: false }, {\n+        match link_name {\n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref name, ref buf, ref size] = check_arg_count(args)?;\n                 let result = this.GetEnvironmentVariableW(name, buf, size)?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n             \"SetEnvironmentVariableW\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref name, ref value] = check_arg_count(args)?;\n                 let result = this.SetEnvironmentVariableW(name, value)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"GetEnvironmentStringsW\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 let result = this.GetEnvironmentStringsW()?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"FreeEnvironmentStringsW\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref env_block] = check_arg_count(args)?;\n                 let result = this.FreeEnvironmentStringsW(env_block)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"GetCurrentDirectoryW\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref size, ref buf] = check_arg_count(args)?;\n                 let result = this.GetCurrentDirectoryW(size, buf)?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n             \"SetCurrentDirectoryW\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref path] = check_arg_count(args)?;\n                 let result = this.SetCurrentDirectoryW(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // File related shims\n             \"GetStdHandle\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref which] = check_arg_count(args)?;\n                 let which = this.read_scalar(which)?.to_i32()?;\n                 // We just make this the identity function, so we know later in `WriteFile`\n                 // which one it is.\n                 this.write_scalar(Scalar::from_machine_isize(which.into(), this), dest)?;\n             }\n             \"WriteFile\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref handle, ref buf, ref n, ref written_ptr, ref overlapped] = check_arg_count(args)?;\n                 this.read_scalar(overlapped)?.to_machine_usize(this)?; // this is a poiner, that we ignore\n                 let handle = this.read_scalar(handle)?.to_machine_isize(this)?;\n@@ -102,6 +110,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Allocation\n             \"HeapAlloc\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref handle, ref flags, ref size] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n@@ -111,6 +120,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(res, dest)?;\n             }\n             \"HeapFree\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref handle, ref flags, ref ptr] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 this.read_scalar(flags)?.to_u32()?;\n@@ -119,6 +129,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(1), dest)?;\n             }\n             \"HeapReAlloc\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref handle, ref flags, ref ptr, ref size] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 this.read_scalar(flags)?.to_u32()?;\n@@ -130,18 +141,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // errno\n             \"SetLastError\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref error] = check_arg_count(args)?;\n                 let error = this.read_scalar(error)?.check_init()?;\n                 this.set_last_error(error)?;\n             }\n             \"GetLastError\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 let last_error = this.get_last_error()?;\n                 this.write_scalar(last_error, dest)?;\n             }\n \n             // Querying system information\n             \"GetSystemInfo\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref system_info] = check_arg_count(args)?;\n                 let system_info = this.deref_operand(system_info)?;\n                 // Initialize with `0`.\n@@ -157,6 +171,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Thread-local storage\n             \"TlsAlloc\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 // This just creates a key; Windows does not natively support TLS destructors.\n \n                 // Create key and return it.\n@@ -165,13 +180,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n             }\n             \"TlsGetValue\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref key] = check_arg_count(args)?;\n                 let key = u128::from(this.read_scalar(key)?.to_u32()?);\n                 let active_thread = this.get_active_thread();\n                 let ptr = this.machine.tls.load_tls(key, active_thread, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref key, ref new_ptr] = check_arg_count(args)?;\n                 let key = u128::from(this.read_scalar(key)?.to_u32()?);\n                 let active_thread = this.get_active_thread();\n@@ -184,6 +201,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Access to command-line arguments\n             \"GetCommandLineW\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 this.write_scalar(\n                     this.machine.cmd_line.expect(\"machine must be initialized\"),\n@@ -193,17 +211,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Time related shims\n             \"GetSystemTimeAsFileTime\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref LPFILETIME] = check_arg_count(args)?;\n                 this.GetSystemTimeAsFileTime(LPFILETIME)?;\n             }\n             \"QueryPerformanceCounter\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref lpPerformanceCount] = check_arg_count(args)?;\n                 let result = this.QueryPerformanceCounter(lpPerformanceCount)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"QueryPerformanceFrequency\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref lpFrequency] = check_arg_count(args)?;\n                 let result = this.QueryPerformanceFrequency(lpFrequency)?;\n@@ -212,34 +233,41 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Synchronization primitives\n             \"AcquireSRWLockExclusive\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 this.AcquireSRWLockExclusive(ptr)?;\n             }\n             \"ReleaseSRWLockExclusive\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 this.ReleaseSRWLockExclusive(ptr)?;\n             }\n             \"TryAcquireSRWLockExclusive\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 let ret = this.TryAcquireSRWLockExclusive(ptr)?;\n                 this.write_scalar(Scalar::from_u8(ret), dest)?;\n             }\n             \"AcquireSRWLockShared\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 this.AcquireSRWLockShared(ptr)?;\n             }\n             \"ReleaseSRWLockShared\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 this.ReleaseSRWLockShared(ptr)?;\n             }\n             \"TryAcquireSRWLockShared\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 let ret = this.TryAcquireSRWLockShared(ptr)?;\n                 this.write_scalar(Scalar::from_u8(ret), dest)?;\n             }\n \n             // Dynamic symbol loading\n             \"GetProcAddress\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref hModule, ref lpProcName] = check_arg_count(args)?;\n                 this.read_scalar(hModule)?.to_machine_isize(this)?;\n@@ -254,6 +282,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Miscellaneous\n             \"SystemFunction036\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 // The actual name of 'RtlGenRandom'\n                 let &[ref ptr, ref len] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n@@ -262,6 +291,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }\n             \"GetConsoleScreenBufferInfo\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 // `term` needs this, so we fake it.\n                 let &[ref console, ref buffer_info] = check_arg_count(args)?;\n                 this.read_scalar(console)?.to_machine_isize(this)?;\n@@ -271,6 +301,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"GetConsoleMode\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 // Windows \"isatty\" (in libtest) needs this, so we fake it.\n                 let &[ref console, ref mode] = check_arg_count(args)?;\n                 this.read_scalar(console)?.to_machine_isize(this)?;\n@@ -280,6 +311,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"SwitchToThread\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 // Note that once Miri supports concurrency, this will need to return a nonzero\n                 // value if this call does result in switching to another thread.\n@@ -288,29 +320,34 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Better error for attempts to create a thread\n             \"CreateThread\" => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 throw_unsup_format!(\"Miri does not support concurrency on Windows\");\n             }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"GetProcessHeap\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 // Just fake a HANDLE\n                 this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n             \"SetConsoleTextAttribute\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _hConsoleOutput, ref _wAttribute] = check_arg_count(args)?;\n                 // Pretend these does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n             \"AddVectoredExceptionHandler\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _First, ref _Handler] = check_arg_count(args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n                 this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n             }\n             \"SetThreadStackGuarantee\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[_StackSizeInBytes] = check_arg_count(args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n@@ -321,6 +358,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"LeaveCriticalSection\"\n             | \"DeleteCriticalSection\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _lpCriticalSection] = check_arg_count(args)?;\n                 assert_eq!(this.get_total_thread_count(), 1, \"concurrency on Windows is not supported\");\n@@ -330,6 +368,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"TryEnterCriticalSection\"\n             if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n+                check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _lpCriticalSection] = check_arg_count(args)?;\n                 assert_eq!(this.get_total_thread_count(), 1, \"concurrency on Windows is not supported\");\n@@ -338,7 +377,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        });\n+        }\n \n         Ok(true)\n     }"}]}