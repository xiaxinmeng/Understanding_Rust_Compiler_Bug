{"sha": "fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "node_id": "C_kwDOAAsO6NoAKGZkODE1YTUwOTFlYjRkNDljZDMxN2Y4YWQyNzJmMTdiN2E1ZjU1MGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T03:29:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T03:29:04Z"}, "message": "Auto merge of #104610 - ouz-a:revert-overflow, r=compiler-errors\n\nReverts check done by #100757\n\nAs my `fix` caused more issues than it resolved it's better to revert it.\n( #103274 #104322 https://github.com/rust-lang/rust/issues/104606)\n\nr? `@compiler-errors`\n\nReopens #95134", "tree": {"sha": "456c3356e45849e24608f3f61439f7070521177d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456c3356e45849e24608f3f61439f7070521177d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "html_url": "https://github.com/rust-lang/rust/commit/fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872631d0f0fadffe3220ab1bd9c8f1f2342341e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/872631d0f0fadffe3220ab1bd9c8f1f2342341e2", "html_url": "https://github.com/rust-lang/rust/commit/872631d0f0fadffe3220ab1bd9c8f1f2342341e2"}, {"sha": "701970e0b8941537f3b34381d2cc98940c4e71db", "url": "https://api.github.com/repos/rust-lang/rust/commits/701970e0b8941537f3b34381d2cc98940c4e71db", "html_url": "https://github.com/rust-lang/rust/commit/701970e0b8941537f3b34381d2cc98940c4e71db"}], "stats": {"total": 42, "additions": 13, "deletions": 29}, "files": [{"sha": "7b2329b1ddd60e3aaa3e28f0d017d59cb539fc0e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "patch": "@@ -566,22 +566,6 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     .flatten()\n                     .unwrap_or_else(|| ty.super_fold_with(self).into())\n                 };\n-                // For cases like #95134 we would like to catch overflows early\n-                // otherwise they slip away and cause ICE.\n-                let recursion_limit = self.tcx().recursion_limit();\n-                if !recursion_limit.value_within_limit(self.depth)\n-                    // HACK: Don't overflow when running cargo doc see #100991\n-                    && !self.tcx().sess.opts.actually_rustdoc\n-                {\n-                    let obligation = Obligation::with_depth(\n-                        self.selcx.tcx(),\n-                        self.cause.clone(),\n-                        recursion_limit.0,\n-                        self.param_env,\n-                        ty,\n-                    );\n-                    self.selcx.infcx().err_ctxt().report_overflow_error(&obligation, true);\n-                }\n                 debug!(\n                     ?self.depth,\n                     ?ty,"}, {"sha": "338789c2e871914a0f28a7a082f635e00dc8072d", "filename": "src/test/ui/issues/issue-23122-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs?ref=fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n trait Next {\n     type Next: Next;\n }"}, {"sha": "5828e027b590312123168886eae1c2fc317ecf0a", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "patch": "@@ -1,10 +1,16 @@\n-error[E0275]: overflow evaluating the requirement `<T as Next>::Next`\n-  --> $DIR/issue-23122-2.rs:10:17\n+error[E0275]: overflow evaluating the requirement `<<<<<<<... as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n+  --> $DIR/issue-23122-2.rs:11:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n+note: required for `GetNext<<<<<<... as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>` to implement `Next`\n+  --> $DIR/issue-23122-2.rs:10:15\n+   |\n+LL | impl<T: Next> Next for GetNext<T> {\n+   |               ^^^^     ^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-23122-2/issue-23122-2.long-type-hash.txt'\n \n error: aborting due to previous error\n "}, {"sha": "4d00a7083137782aba899be905d2dd4e9d34033e", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "patch": "@@ -9,11 +9,9 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error[E0275]: overflow evaluating the requirement `<std::ops::Range<u8> as Iterator>::Item`\n+error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n-   = note: 64 redundant requirements hidden\n    = note: required for `&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n "}, {"sha": "fdc4d53698143686a6b15a85da100a8b3d8c277d", "filename": "src/test/ui/recursion/issue-95134.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd815a5091eb4d49cd317f8ad272f17b7a5f550d/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.rs?ref=fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "patch": "@@ -1,6 +1,8 @@\n // build-fail\n+// known-bug: #95134\n // compile-flags: -Copt-level=0\n-//~^^ ERROR overflow evaluating the requirement\n+// failure-status: 101\n+// dont-check-compiler-stderr\n \n pub fn encode_num<Writer: ExampleWriter>(n: u32, mut writer: Writer) -> Result<(), Writer::Error> {\n     if n > 15 {"}, {"sha": "57a498694b7c1215aa79b48e2bb95772d873c0fe", "filename": "src/test/ui/recursion/issue-95134.stderr", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/872631d0f0fadffe3220ab1bd9c8f1f2342341e2/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/872631d0f0fadffe3220ab1bd9c8f1f2342341e2/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.stderr?ref=872631d0f0fadffe3220ab1bd9c8f1f2342341e2", "patch": "@@ -1,7 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `<EmptyWriter as ExampleWriter>::Error`\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_95134`)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}]}