{"sha": "64e58183074480bc6a1dfdd9ffe8ef7674005806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZTU4MTgzMDc0NDgwYmM2YTFkZmRkOWZmZThlZjc2NzQwMDU4MDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-21T23:42:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-21T23:42:41Z"}, "message": "Rollup merge of #62019 - jeremystucki:refactoring, r=estebank\n\nRemove needless lifetimes", "tree": {"sha": "3736336e6085e6a69d0271b669613ab31d8526c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3736336e6085e6a69d0271b669613ab31d8526c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64e58183074480bc6a1dfdd9ffe8ef7674005806", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdDWtxCRBK7hj4Ov3rIwAAdHIIACwUFRUqSMMV6HAUtbJNN1EL\nQ8aEK9f/WHQA7v/c5TM32HM92KQkLtBpEKoP3seg0VFnaBzmbusAJZ0kZmplzb4/\nZqG2MXeiASMHShYag55c60U5ZuGGO7h04v85MVDppQvaDGLP4AzPn7lR/Lu4Vp0F\ni+T2ZLdLGikRBu1j4JA/eUzSEvep7L1OKdwDszeL7y+VASo/R4arqjbcdukfy15X\n+d5LKrMrzPIhFSCInuY92wnU79RfpCURoD+WYnt01JXAE6YCzOb5prSWqYK1juC5\nOexhfg1moGlCie0bkL9c2hUoIOnj2U7pIul6wIl4Ur8md/7wWqNX3ffuoid6Das=\n=Nsv2\n-----END PGP SIGNATURE-----\n", "payload": "tree 3736336e6085e6a69d0271b669613ab31d8526c2\nparent 595f55cb8b4267c9c8a02b4e0dc586299942622c\nparent 004efa27059441651b240ee1a408d40f420413f8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561160561 +0200\ncommitter GitHub <noreply@github.com> 1561160561 +0200\n\nRollup merge of #62019 - jeremystucki:refactoring, r=estebank\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64e58183074480bc6a1dfdd9ffe8ef7674005806", "html_url": "https://github.com/rust-lang/rust/commit/64e58183074480bc6a1dfdd9ffe8ef7674005806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64e58183074480bc6a1dfdd9ffe8ef7674005806/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595f55cb8b4267c9c8a02b4e0dc586299942622c", "url": "https://api.github.com/repos/rust-lang/rust/commits/595f55cb8b4267c9c8a02b4e0dc586299942622c", "html_url": "https://github.com/rust-lang/rust/commit/595f55cb8b4267c9c8a02b4e0dc586299942622c"}, {"sha": "004efa27059441651b240ee1a408d40f420413f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/004efa27059441651b240ee1a408d40f420413f8", "html_url": "https://github.com/rust-lang/rust/commit/004efa27059441651b240ee1a408d40f420413f8"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "e4022bb24ad442e7d4cb45c9ceeca9dca9b8d608", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=64e58183074480bc6a1dfdd9ffe8ef7674005806", "patch": "@@ -67,9 +67,9 @@ impl<'tcx> TyCtxt<'tcx> {\n }\n \n \n-pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     /// only checks whether the function has a `const` modifier\n-    fn is_const_fn_raw<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         let hir_id = tcx.hir().as_local_hir_id(def_id)\n                               .expect(\"Non-local call to local provider is_const_fn\");\n \n@@ -83,7 +83,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n-    fn is_promotable_const_fn<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         tcx.is_const_fn(def_id) && match tcx.lookup_stability(def_id) {\n             Some(stab) => {\n                 if cfg!(debug_assertions) && stab.promotable {\n@@ -101,7 +101,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n-    fn const_fn_is_allowed_fn_ptr<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         tcx.is_const_fn(def_id) &&\n             tcx.lookup_stability(def_id)\n                 .map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)"}, {"sha": "ce785f9a0246bb9493aa89e8bfaf66d6ed97b1c7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=64e58183074480bc6a1dfdd9ffe8ef7674005806", "patch": "@@ -2223,7 +2223,7 @@ impl<'tcx> Borrow<[Ty<'tcx>]> for Interned<'tcx, List<Ty<'tcx>>> {\n }\n \n impl<'tcx> Borrow<[CanonicalVarInfo]> for Interned<'tcx, List<CanonicalVarInfo>> {\n-    fn borrow<'a>(&'a self) -> &'a [CanonicalVarInfo] {\n+    fn borrow(&self) -> &[CanonicalVarInfo] {\n         &self.0[..]\n     }\n }\n@@ -2236,13 +2236,13 @@ impl<'tcx> Borrow<[Kind<'tcx>]> for Interned<'tcx, InternalSubsts<'tcx>> {\n \n impl<'tcx> Borrow<[ProjectionKind]>\n     for Interned<'tcx, List<ProjectionKind>> {\n-    fn borrow<'a>(&'a self) -> &'a [ProjectionKind] {\n+    fn borrow(&self) -> &[ProjectionKind] {\n         &self.0[..]\n     }\n }\n \n impl<'tcx> Borrow<RegionKind> for Interned<'tcx, RegionKind> {\n-    fn borrow<'a>(&'a self) -> &'a RegionKind {\n+    fn borrow(&self) -> &RegionKind {\n         &self.0\n     }\n }"}, {"sha": "ee0d33dbe345cee6758be24922469853012c90c1", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=64e58183074480bc6a1dfdd9ffe8ef7674005806", "patch": "@@ -55,8 +55,8 @@ pub enum SimplifiedTypeGen<D>\n /// then we can't say much about whether two types would unify. Put another way,\n /// `can_simplify_params` should be true if type parameters appear free in `ty` and `false` if they\n /// are to be considered bound.\n-pub fn simplify_type<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn simplify_type(\n+    tcx: TyCtxt<'_>,\n     ty: Ty<'_>,\n     can_simplify_params: bool,\n ) -> Option<SimplifiedType> {"}, {"sha": "ad9880725128f0156af94de039c9aaf1d70c313c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=64e58183074480bc6a1dfdd9ffe8ef7674005806", "patch": "@@ -213,7 +213,7 @@ impl AssocItem {\n         }\n     }\n \n-    pub fn signature<'tcx>(&self, tcx: TyCtxt<'tcx>) -> String {\n+    pub fn signature(&self, tcx: TyCtxt<'_>) -> String {\n         match self.kind {\n             ty::AssocKind::Method => {\n                 // We skip the binder here because the binder would deanonymize all\n@@ -2311,7 +2311,7 @@ impl<'tcx> AdtDef {\n     /// Returns an iterator over all fields contained\n     /// by this ADT.\n     #[inline]\n-    pub fn all_fields<'s>(&'s self) -> impl Iterator<Item = &'s FieldDef> + Clone {\n+    pub fn all_fields(&self) -> impl Iterator<Item=&FieldDef> + Clone {\n         self.variants.iter().flat_map(|v| v.fields.iter())\n     }\n \n@@ -3111,7 +3111,7 @@ impl Iterator for AssocItemsIterator<'_> {\n     }\n }\n \n-fn associated_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> AssocItem {\n+fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> AssocItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);\n     let parent_def_id = tcx.hir().local_def_id_from_hir_id(parent_id);\n@@ -3156,7 +3156,7 @@ pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n ///       such.\n ///     - a Error, if a type contained itself. The representability\n ///       check should catch this case.\n-fn adt_sized_constraint<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> AdtSizedConstraint<'tcx> {\n+fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> AdtSizedConstraint<'_> {\n     let def = tcx.adt_def(def_id);\n \n     let result = tcx.mk_type_list(def.variants.iter().flat_map(|v| {\n@@ -3170,7 +3170,7 @@ fn adt_sized_constraint<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> AdtSizedConst\n     AdtSizedConstraint(result)\n }\n \n-fn associated_item_def_ids<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [DefId] {\n+fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item(id);\n     match item.node {\n@@ -3193,14 +3193,14 @@ fn associated_item_def_ids<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [Def\n     }\n }\n \n-fn def_span<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Span {\n+fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {\n     tcx.hir().span_if_local(def_id).unwrap()\n }\n \n /// If the given `DefId` describes an item belonging to a trait,\n /// returns the `DefId` of the trait that the trait item belongs to;\n /// otherwise, returns `None`.\n-fn trait_of_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId> {\n+fn trait_of_item(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     tcx.opt_associated_item(def_id)\n         .and_then(|associated_item| {\n             match associated_item.container {\n@@ -3223,7 +3223,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n }\n \n /// See `ParamEnv` struct definition for details.\n-fn param_env<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ParamEnv<'tcx> {\n+fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ParamEnv<'_> {\n     // The param_env of an impl Trait type is its defining function's param_env\n     if let Some(parent) = is_impl_trait_defn(tcx, def_id) {\n         return param_env(tcx, parent);\n@@ -3258,17 +3258,17 @@ fn param_env<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ParamEnv<'tcx> {\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n }\n \n-fn crate_disambiguator<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> CrateDisambiguator {\n+fn crate_disambiguator(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateDisambiguator {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.sess.local_crate_disambiguator()\n }\n \n-fn original_crate_name<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> Symbol {\n+fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.crate_name.clone()\n }\n \n-fn crate_hash<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> Svh {\n+fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.hir().crate_hash\n }\n@@ -3288,7 +3288,7 @@ fn instance_def_size_estimate<'tcx>(tcx: TyCtxt<'tcx>, instance_def: InstanceDef\n /// If `def_id` is an issue 33140 hack impl, returns its self type; otherwise, returns `None`.\n ///\n /// See [`ImplOverlapKind::Issue33140`] for more details.\n-fn issue33140_self_ty<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Ty<'tcx>> {\n+fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n     debug!(\"issue33140_self_ty({:?})\", def_id);\n \n     let trait_ref = tcx.impl_trait_ref(def_id).unwrap_or_else(|| {"}, {"sha": "a7ade875bf11b25d61368a5298d061218d5c37fe", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=64e58183074480bc6a1dfdd9ffe8ef7674005806", "patch": "@@ -150,10 +150,10 @@ impl<'tcx> TyCtxt<'tcx> {\n }\n \n // Query provider for `trait_impls_of`.\n-pub(super) fn trait_impls_of_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn trait_impls_of_provider(\n+    tcx: TyCtxt<'_>,\n     trait_id: DefId,\n-) -> &'tcx TraitImpls {\n+) -> &TraitImpls {\n     let mut impls = TraitImpls::default();\n \n     {"}, {"sha": "c74511cf0fdda02acfb7b63994981aa1fc89c556", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e58183074480bc6a1dfdd9ffe8ef7674005806/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=64e58183074480bc6a1dfdd9ffe8ef7674005806", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n     }\n }\n \n-pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> smallvec::IntoIter<TypeWalkerArray<'tcx>> {\n+pub fn walk_shallow(ty: Ty<'_>) -> smallvec::IntoIter<TypeWalkerArray<'_>> {\n     let mut stack = SmallVec::new();\n     push_subtypes(&mut stack, ty);\n     stack.into_iter()"}]}