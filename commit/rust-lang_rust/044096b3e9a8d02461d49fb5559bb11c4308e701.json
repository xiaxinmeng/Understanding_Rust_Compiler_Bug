{"sha": "044096b3e9a8d02461d49fb5559bb11c4308e701", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDA5NmIzZTlhOGQwMjQ2MWQ0OWZiNTU1OWJiMTFjNDMwOGU3MDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-21T21:29:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T09:35:00Z"}, "message": "Change Call operands to be, well, Operands", "tree": {"sha": "7fb4f5ccf48bd7c06e499a9e3772c0b51ffcd437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb4f5ccf48bd7c06e499a9e3772c0b51ffcd437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044096b3e9a8d02461d49fb5559bb11c4308e701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044096b3e9a8d02461d49fb5559bb11c4308e701", "html_url": "https://github.com/rust-lang/rust/commit/044096b3e9a8d02461d49fb5559bb11c4308e701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044096b3e9a8d02461d49fb5559bb11c4308e701/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab29d337834383c159b2a4e275581f97ad34a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab29d337834383c159b2a4e275581f97ad34a25", "html_url": "https://github.com/rust-lang/rust/commit/3ab29d337834383c159b2a4e275581f97ad34a25"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "57c6db79c5271ac8e89f1132263d9aae92468c5d", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=044096b3e9a8d02461d49fb5559bb11c4308e701", "patch": "@@ -211,10 +211,10 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Call { fun, args } => {\n-                let fun = unpack!(block = this.as_lvalue(block, fun));\n+                let fun = unpack!(block = this.as_operand(block, fun));\n                 let args: Vec<_> =\n                     args.into_iter()\n-                        .map(|arg| unpack!(block = this.as_lvalue(block, arg)))\n+                        .map(|arg| unpack!(block = this.as_operand(block, arg)))\n                         .collect();\n                 let success = this.cfg.start_new_block();\n                 let panic = this.diverge_cleanup();"}, {"sha": "e035f53dacf41130eadca00fe304c8f67a95ead9", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=044096b3e9a8d02461d49fb5559bb11c4308e701", "patch": "@@ -100,27 +100,28 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n \n             TestKind::Eq { value, ty } => {\n                 // call PartialEq::eq(discrim, constant)\n-                let constant = self.push_literal(block, test.span, ty.clone(), value);\n+                let constant = self.literal_operand(test.span, ty.clone(), value);\n                 let item_ref = self.hir.partial_eq(ty);\n-                self.call_comparison_fn(block, test.span, item_ref, lvalue.clone(), constant)\n+                self.call_comparison_fn(block, test.span, item_ref,\n+                                        Operand::Consume(lvalue.clone()), constant)\n             }\n \n             TestKind::Range { lo, hi, ty } => {\n                 // Test `v` by computing `PartialOrd::le(lo, v) && PartialOrd::le(v, hi)`.\n-                let lo = self.push_literal(block, test.span, ty.clone(), lo);\n-                let hi = self.push_literal(block, test.span, ty.clone(), hi);\n+                let lo = self.literal_operand(test.span, ty.clone(), lo);\n+                let hi = self.literal_operand(test.span, ty.clone(), hi);\n                 let item_ref = self.hir.partial_le(ty);\n \n                 let lo_blocks = self.call_comparison_fn(block,\n                                                         test.span,\n                                                         item_ref.clone(),\n                                                         lo,\n-                                                        lvalue.clone());\n+                                                        Operand::Consume(lvalue.clone()));\n \n                 let hi_blocks = self.call_comparison_fn(lo_blocks[0],\n                                                         test.span,\n                                                         item_ref,\n-                                                        lvalue.clone(),\n+                                                        Operand::Consume(lvalue.clone()),\n                                                         hi);\n \n                 let failure = self.cfg.start_new_block();\n@@ -165,14 +166,14 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                           block: BasicBlock,\n                           span: Span,\n                           item_ref: ItemRef<'tcx>,\n-                          lvalue1: Lvalue<'tcx>,\n-                          lvalue2: Lvalue<'tcx>)\n+                          lvalue1: Operand<'tcx>,\n+                          lvalue2: Operand<'tcx>)\n                           -> Vec<BasicBlock> {\n         let target_blocks = vec![self.cfg.start_new_block(), self.cfg.start_new_block()];\n \n         let bool_ty = self.hir.bool_ty();\n         let eq_result = self.temp(bool_ty);\n-        let func = self.push_item_ref(block, span, item_ref);\n+        let func = self.item_ref_operand(span, item_ref);\n         let call_blocks = [self.cfg.start_new_block(), self.diverge_cleanup()];\n         self.cfg.terminate(block,\n                            Terminator::Call {"}, {"sha": "41274f3f3736eb5834fe12aa013ac38885269a72", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=044096b3e9a8d02461d49fb5559bb11c4308e701", "patch": "@@ -34,20 +34,17 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         lvalue\n     }\n \n-    pub fn push_literal(&mut self,\n-                        block: BasicBlock,\n-                        span: Span,\n-                        ty: Ty<'tcx>,\n-                        literal: Literal<'tcx>)\n-                        -> Lvalue<'tcx> {\n-        let temp = self.temp(ty.clone());\n+    pub fn literal_operand(&mut self,\n+                           span: Span,\n+                           ty: Ty<'tcx>,\n+                           literal: Literal<'tcx>)\n+                           -> Operand<'tcx> {\n         let constant = Constant {\n             span: span,\n             ty: ty,\n             literal: literal,\n         };\n-        self.cfg.push_assign_constant(block, span, &temp, constant);\n-        temp\n+        Operand::Constant(constant)\n     }\n \n     pub fn push_usize(&mut self, block: BasicBlock, span: Span, value: usize) -> Lvalue<'tcx> {\n@@ -63,15 +60,14 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         temp\n     }\n \n-    pub fn push_item_ref(&mut self,\n-                         block: BasicBlock,\n-                         span: Span,\n-                         item_ref: ItemRef<'tcx>)\n-                         -> Lvalue<'tcx> {\n+    pub fn item_ref_operand(&mut self,\n+                            span: Span,\n+                            item_ref: ItemRef<'tcx>)\n+                            -> Operand<'tcx> {\n         let literal = Literal::Item {\n             def_id: item_ref.def_id,\n             substs: item_ref.substs,\n         };\n-        self.push_literal(block, span, item_ref.ty, literal)\n+        self.literal_operand(span, item_ref.ty, literal)\n     }\n }"}, {"sha": "89b1afa8723811d881bc9d4962be9b7816f53256", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044096b3e9a8d02461d49fb5559bb11c4308e701/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=044096b3e9a8d02461d49fb5559bb11c4308e701", "patch": "@@ -294,10 +294,10 @@ pub struct CallData<'tcx> {\n     pub destination: Lvalue<'tcx>,\n \n     /// the fn being called\n-    pub func: Lvalue<'tcx>,\n+    pub func: Operand<'tcx>,\n \n     /// the arguments\n-    pub args: Vec<Lvalue<'tcx>>,\n+    pub args: Vec<Operand<'tcx>>,\n }\n \n impl<'tcx> BasicBlockData<'tcx> {"}]}