{"sha": "b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDdhZWE5NDZlODhlODdhZjEzNmZiMGZlNWM0YTdlODdiNmMxNmU=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-10T02:25:03Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-10T02:25:03Z"}, "message": "Fixes 3289, cmp_owned wording and false positive", "tree": {"sha": "daf1c797a63ba89ccc58f1a28581324cc51ebdee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daf1c797a63ba89ccc58f1a28581324cc51ebdee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e", "html_url": "https://github.com/rust-lang/rust/commit/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6882ede4dc32684e000d256644c9e192ea8c738", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6882ede4dc32684e000d256644c9e192ea8c738", "html_url": "https://github.com/rust-lang/rust/commit/f6882ede4dc32684e000d256644c9e192ea8c738"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "4c6a9d6bd117c33908924d492d2c6ace0240c163", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e", "patch": "@@ -535,10 +535,29 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n         return;\n     }\n \n+    let other_gets_derefed = match other.node {\n+        ExprKind::Unary(UnDeref, _) => true,\n+        _ => false,\n+    };\n+\n+    let (lint_span, try_hint) = if deref_arg_impl_partial_eq_other {\n+        // suggest deref on the left\n+        (expr.span, format!(\"*{}\", snip))\n+    } else if other_gets_derefed {\n+        // suggest dropping the to_owned on the left and the deref on the right\n+        let other_snippet = snippet(cx, other.span, \"..\").into_owned();\n+        let other_without_deref = other_snippet.trim_left_matches(\"*\");\n+\n+        (expr.span.to(other.span), format!(\"{} == {}\", snip.to_string(), other_without_deref))\n+    } else {\n+        // suggest dropping the to_owned on the left\n+        (expr.span, snip.to_string())\n+    };\n+\n     span_lint_and_then(\n         cx,\n         CMP_OWNED,\n-        expr.span,\n+        lint_span,\n         \"this creates an owned instance just for comparison\",\n         |db| {\n             // this is as good as our recursion check can get, we can't prove that the\n@@ -554,15 +573,14 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n                             // we are implementing PartialEq, don't suggest not doing `to_owned`, otherwise\n                             // we go into\n                             // recursion\n-                            db.span_label(expr.span, \"try calling implementing the comparison without allocating\");\n+                            db.span_label(lint_span, \"try implementing the comparison without allocating\");\n                             return;\n                         }\n                     }\n                 }\n             }\n-            let try_hint = if deref_arg_impl_partial_eq_other { format!(\"*{}\", snip) } else { snip.to_string() };\n             db.span_suggestion_with_applicability(\n-                expr.span,\n+                lint_span,\n                 \"try\",\n                 try_hint,\n                 Applicability::MachineApplicable, // snippet"}, {"sha": "65351cd9b9d826a6acca1e23fb0015b4dd21fa0a", "filename": "tests/ui/cmp_owned.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e", "patch": "@@ -35,6 +35,11 @@ fn main() {\n     \"abc\".chars().filter(|c| c.to_owned() != 'X');\n \n     \"abc\".chars().filter(|c| *c != 'X');\n+\n+    let x = &Baz;\n+    let y = &Baz;\n+\n+    y.to_owned() == *x;\n }\n \n struct Foo;\n@@ -67,3 +72,13 @@ impl std::borrow::Borrow<Foo> for Bar {\n         &FOO\n     }\n }\n+\n+#[derive(PartialEq)]\n+struct Baz;\n+\n+impl ToOwned for Baz {\n+    type Owned = Baz;\n+    fn to_owned(&self) -> Baz {\n+        Baz\n+    }\n+}"}, {"sha": "2613d3b750099ea7ec3027de2ee67abfb6956cc0", "filename": "tests/ui/cmp_owned.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=b0d7aea946e88e87af136fb0fe5c4a7e87b6c16e", "patch": "@@ -37,10 +37,16 @@ error: this creates an owned instance just for comparison\n    |                              ^^^^^^^^^^^^ help: try: `*c`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:44:9\n+  --> $DIR/cmp_owned.rs:42:5\n    |\n-44 |         self.to_owned() == *other\n-   |         ^^^^^^^^^^^^^^^ try calling implementing the comparison without allocating\n+42 |     y.to_owned() == *x;\n+   |     ^^^^^^^^^^^^^^^^^^ help: try: `y == x`\n \n-error: aborting due to 7 previous errors\n+error: this creates an owned instance just for comparison\n+  --> $DIR/cmp_owned.rs:49:9\n+   |\n+49 |         self.to_owned() == *other\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n+\n+error: aborting due to 8 previous errors\n "}]}