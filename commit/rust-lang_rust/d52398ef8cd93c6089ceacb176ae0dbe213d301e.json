{"sha": "d52398ef8cd93c6089ceacb176ae0dbe213d301e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MjM5OGVmOGNkOTNjNjA4OWNlYWNiMTc2YWUwZGJlMjEzZDMwMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-14T09:52:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-14T09:52:08Z"}, "message": "auto merge of #21076 : sfackler/rust/bufferedreader-undef, r=Gankro\n\nIt's passed to the underlying reader, so uninitialized memory == sad\r\ntimes.\r\n\r\nWe might want to shrink the default buffer size as well. 64k is pretty\r\nhuge. Java uses 8k by default, and Go uses 4k for reference.\r\n\r\nr? @alexcrichton", "tree": {"sha": "08e4dfeec71c72dead90902cc43cf5c1a2a44ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e4dfeec71c72dead90902cc43cf5c1a2a44ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52398ef8cd93c6089ceacb176ae0dbe213d301e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52398ef8cd93c6089ceacb176ae0dbe213d301e", "html_url": "https://github.com/rust-lang/rust/commit/d52398ef8cd93c6089ceacb176ae0dbe213d301e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52398ef8cd93c6089ceacb176ae0dbe213d301e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3614e1de6cf7abc7754c23f93476bef0e2625e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/3614e1de6cf7abc7754c23f93476bef0e2625e99", "html_url": "https://github.com/rust-lang/rust/commit/3614e1de6cf7abc7754c23f93476bef0e2625e99"}, {"sha": "89f1848b556971a4278f2b2385137ca6c9e07094", "url": "https://api.github.com/repos/rust-lang/rust/commits/89f1848b556971a4278f2b2385137ca6c9e07094", "html_url": "https://github.com/rust-lang/rust/commit/89f1848b556971a4278f2b2385137ca6c9e07094"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "8c38bc009cc63058aeaf82fffb54a18eed15cd1d", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d52398ef8cd93c6089ceacb176ae0dbe213d301e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52398ef8cd93c6089ceacb176ae0dbe213d301e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=d52398ef8cd93c6089ceacb176ae0dbe213d301e", "patch": "@@ -15,7 +15,7 @@\n use cmp;\n use fmt;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n-use iter::{IteratorExt, ExactSizeIterator};\n+use iter::{IteratorExt, ExactSizeIterator, repeat};\n use ops::Drop;\n use option::Option;\n use option::Option::{Some, None};\n@@ -62,17 +62,11 @@ impl<R> fmt::Show for BufferedReader<R> where R: fmt::Show {\n impl<R: Reader> BufferedReader<R> {\n     /// Creates a new `BufferedReader` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: R) -> BufferedReader<R> {\n-        // It's *much* faster to create an uninitialized buffer than it is to\n-        // fill everything in with 0. This buffer is entirely an implementation\n-        // detail and is never exposed, so we're safe to not initialize\n-        // everything up-front. This allows creation of BufferedReader instances\n-        // to be very cheap (large mallocs are not nearly as expensive as large\n-        // callocs).\n-        let mut buf = Vec::with_capacity(cap);\n-        unsafe { buf.set_len(cap); }\n         BufferedReader {\n             inner: inner,\n-            buf: buf,\n+            // We can't use the same trick here as we do for BufferedWriter,\n+            // since this memory is visible to the inner Reader.\n+            buf: repeat(0).take(cap).collect(),\n             pos: 0,\n             cap: 0,\n         }\n@@ -166,7 +160,12 @@ impl<W> fmt::Show for BufferedWriter<W> where W: fmt::Show {\n impl<W: Writer> BufferedWriter<W> {\n     /// Creates a new `BufferedWriter` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: W) -> BufferedWriter<W> {\n-        // See comments in BufferedReader for why this uses unsafe code.\n+        // It's *much* faster to create an uninitialized buffer than it is to\n+        // fill everything in with 0. This buffer is entirely an implementation\n+        // detail and is never exposed, so we're safe to not initialize\n+        // everything up-front. This allows creation of BufferedWriter instances\n+        // to be very cheap (large mallocs are not nearly as expensive as large\n+        // callocs).\n         let mut buf = Vec::with_capacity(cap);\n         unsafe { buf.set_len(cap); }\n         BufferedWriter {"}]}