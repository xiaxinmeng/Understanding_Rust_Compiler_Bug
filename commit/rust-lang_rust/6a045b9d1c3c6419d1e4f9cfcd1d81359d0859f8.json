{"sha": "6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDQ1YjlkMWMzYzY0MTlkMWU0ZjljZmNkMWQ4MTM1OWQwODU5Zjg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T13:45:50Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T22:47:56Z"}, "message": "Move tracking of the next NodeId from syntax's ParseSess to rustc's Session.", "tree": {"sha": "d4125d9d79590564df85a5eee575ec3174cb2a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4125d9d79590564df85a5eee575ec3174cb2a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "html_url": "https://github.com/rust-lang/rust/commit/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222cd73b8a422d2c4124375f6aaffd2663bb9718", "url": "https://api.github.com/repos/rust-lang/rust/commits/222cd73b8a422d2c4124375f6aaffd2663bb9718", "html_url": "https://github.com/rust-lang/rust/commit/222cd73b8a422d2c4124375f6aaffd2663bb9718"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "d2b0ba70367a09c6bfe8165fdefe5de44d90ed59", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "patch": "@@ -64,7 +64,9 @@ pub struct Session {\n     /// operations such as auto-dereference and monomorphization.\n     pub recursion_limit: Cell<usize>,\n \n-    pub can_print_warnings: bool\n+    pub can_print_warnings: bool,\n+\n+    next_node_id: Cell<ast::NodeId>\n }\n \n impl Session {\n@@ -213,10 +215,17 @@ impl Session {\n         lints.insert(id, vec!((lint_id, sp, msg)));\n     }\n     pub fn next_node_id(&self) -> ast::NodeId {\n-        self.parse_sess.next_node_id()\n+        self.reserve_node_ids(1)\n     }\n     pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId {\n-        self.parse_sess.reserve_node_ids(count)\n+        let id = self.next_node_id.get();\n+\n+        match id.checked_add(count) {\n+            Some(next) => self.next_node_id.set(next),\n+            None => self.bug(\"Input too large, ran out of node ids!\")\n+        }\n+\n+        id\n     }\n     pub fn diagnostic<'a>(&'a self) -> &'a diagnostic::SpanHandler {\n         &self.parse_sess.span_diagnostic\n@@ -421,7 +430,8 @@ pub fn build_session_(sopts: config::Options,\n         delayed_span_bug: RefCell::new(None),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n-        can_print_warnings: can_print_warnings\n+        can_print_warnings: can_print_warnings,\n+        next_node_id: Cell::new(1)\n     };\n \n     sess"}, {"sha": "e207b197e8325345ae83809d05db3792c0a85526", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6a045b9d1c3c6419d1e4f9cfcd1d81359d0859f8", "patch": "@@ -18,7 +18,7 @@ use parse::parser::Parser;\n use ptr::P;\n use str::char_at;\n \n-use std::cell::{Cell, RefCell};\n+use std::cell::RefCell;\n use std::fs::File;\n use std::io::Read;\n use std::iter;\n@@ -44,38 +44,19 @@ pub struct ParseSess {\n     pub span_diagnostic: SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<PathBuf>>,\n-    pub node_id: Cell<ast::NodeId>,\n }\n \n pub fn new_parse_sess() -> ParseSess {\n     ParseSess {\n         span_diagnostic: mk_span_handler(default_handler(Auto, None, true), CodeMap::new()),\n         included_mod_stack: RefCell::new(Vec::new()),\n-        node_id: Cell::new(1),\n     }\n }\n \n pub fn new_parse_sess_special_handler(sh: SpanHandler) -> ParseSess {\n     ParseSess {\n         span_diagnostic: sh,\n         included_mod_stack: RefCell::new(Vec::new()),\n-        node_id: Cell::new(1),\n-    }\n-}\n-\n-impl ParseSess {\n-    pub fn next_node_id(&self) -> ast::NodeId {\n-        self.reserve_node_ids(1)\n-    }\n-    pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId {\n-        let v = self.node_id.get();\n-\n-        match v.checked_add(count) {\n-            Some(next) => { self.node_id.set(next); }\n-            None => panic!(\"Input too large, ran out of node ids!\")\n-        }\n-\n-        v\n     }\n }\n "}]}