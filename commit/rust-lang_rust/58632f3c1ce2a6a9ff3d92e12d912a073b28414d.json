{"sha": "58632f3c1ce2a6a9ff3d92e12d912a073b28414d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NjMyZjNjMWNlMmE2YTlmZjNkOTJlMTJkOTEyYTA3M2IyODQxNGQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-28T15:24:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-01T05:59:47Z"}, "message": "tests: fix fallout from empowering unused_allocation in comparisons.", "tree": {"sha": "d82192759eee8906eb7dd32066babb057034c9ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d82192759eee8906eb7dd32066babb057034c9ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58632f3c1ce2a6a9ff3d92e12d912a073b28414d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58632f3c1ce2a6a9ff3d92e12d912a073b28414d", "html_url": "https://github.com/rust-lang/rust/commit/58632f3c1ce2a6a9ff3d92e12d912a073b28414d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58632f3c1ce2a6a9ff3d92e12d912a073b28414d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce443828be823cac2791d2b8392c33db9320677", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce443828be823cac2791d2b8392c33db9320677", "html_url": "https://github.com/rust-lang/rust/commit/3ce443828be823cac2791d2b8392c33db9320677"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "06d585f8ea82f699e64a181921554f237083ff21", "filename": "src/libcollections/tests/binary_heap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58632f3c1ce2a6a9ff3d92e12d912a073b28414d/src%2Flibcollections%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58632f3c1ce2a6a9ff3d92e12d912a073b28414d/src%2Flibcollections%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fbinary_heap.rs?ref=58632f3c1ce2a6a9ff3d92e12d912a073b28414d", "patch": "@@ -134,22 +134,22 @@ fn test_push() {\n fn test_push_unique() {\n     let mut heap = BinaryHeap::<Box<_>>::from(vec![box 2, box 4, box 9]);\n     assert_eq!(heap.len(), 3);\n-    assert!(*heap.peek().unwrap() == box 9);\n+    assert!(**heap.peek().unwrap() == 9);\n     heap.push(box 11);\n     assert_eq!(heap.len(), 4);\n-    assert!(*heap.peek().unwrap() == box 11);\n+    assert!(**heap.peek().unwrap() == 11);\n     heap.push(box 5);\n     assert_eq!(heap.len(), 5);\n-    assert!(*heap.peek().unwrap() == box 11);\n+    assert!(**heap.peek().unwrap() == 11);\n     heap.push(box 27);\n     assert_eq!(heap.len(), 6);\n-    assert!(*heap.peek().unwrap() == box 27);\n+    assert!(**heap.peek().unwrap() == 27);\n     heap.push(box 3);\n     assert_eq!(heap.len(), 7);\n-    assert!(*heap.peek().unwrap() == box 27);\n+    assert!(**heap.peek().unwrap() == 27);\n     heap.push(box 103);\n     assert_eq!(heap.len(), 8);\n-    assert!(*heap.peek().unwrap() == box 103);\n+    assert!(**heap.peek().unwrap() == 103);\n }\n \n fn check_to_vec(mut data: Vec<i32>) {"}, {"sha": "3d472adc1fba57b8b43be79e7c23eaa6bb133869", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58632f3c1ce2a6a9ff3d92e12d912a073b28414d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58632f3c1ce2a6a9ff3d92e12d912a073b28414d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=58632f3c1ce2a6a9ff3d92e12d912a073b28414d", "patch": "@@ -1924,7 +1924,7 @@ mod tests {\n     fn oneshot_single_thread_send_then_recv() {\n         let (tx, rx) = channel::<Box<i32>>();\n         tx.send(box 10).unwrap();\n-        assert!(rx.recv().unwrap() == box 10);\n+        assert!(*rx.recv().unwrap() == 10);\n     }\n \n     #[test]\n@@ -1981,7 +1981,7 @@ mod tests {\n     fn oneshot_multi_task_recv_then_send() {\n         let (tx, rx) = channel::<Box<i32>>();\n         let _t = thread::spawn(move|| {\n-            assert!(rx.recv().unwrap() == box 10);\n+            assert!(*rx.recv().unwrap() == 10);\n         });\n \n         tx.send(box 10).unwrap();\n@@ -1994,7 +1994,7 @@ mod tests {\n             drop(tx);\n         });\n         let res = thread::spawn(move|| {\n-            assert!(rx.recv().unwrap() == box 10);\n+            assert!(*rx.recv().unwrap() == 10);\n         }).join();\n         assert!(res.is_err());\n     }\n@@ -2048,7 +2048,7 @@ mod tests {\n             let _t = thread::spawn(move|| {\n                 tx.send(box 10).unwrap();\n             });\n-            assert!(rx.recv().unwrap() == box 10);\n+            assert!(*rx.recv().unwrap() == 10);\n         }\n     }\n \n@@ -2073,7 +2073,7 @@ mod tests {\n                 if i == 10 { return }\n \n                 thread::spawn(move|| {\n-                    assert!(rx.recv().unwrap() == box i);\n+                    assert!(*rx.recv().unwrap() == i);\n                     recv(rx, i + 1);\n                 });\n             }\n@@ -2610,7 +2610,7 @@ mod sync_tests {\n     fn oneshot_single_thread_send_then_recv() {\n         let (tx, rx) = sync_channel::<Box<i32>>(1);\n         tx.send(box 10).unwrap();\n-        assert!(rx.recv().unwrap() == box 10);\n+        assert!(*rx.recv().unwrap() == 10);\n     }\n \n     #[test]\n@@ -2682,7 +2682,7 @@ mod sync_tests {\n     fn oneshot_multi_task_recv_then_send() {\n         let (tx, rx) = sync_channel::<Box<i32>>(0);\n         let _t = thread::spawn(move|| {\n-            assert!(rx.recv().unwrap() == box 10);\n+            assert!(*rx.recv().unwrap() == 10);\n         });\n \n         tx.send(box 10).unwrap();\n@@ -2695,7 +2695,7 @@ mod sync_tests {\n             drop(tx);\n         });\n         let res = thread::spawn(move|| {\n-            assert!(rx.recv().unwrap() == box 10);\n+            assert!(*rx.recv().unwrap() == 10);\n         }).join();\n         assert!(res.is_err());\n     }\n@@ -2749,7 +2749,7 @@ mod sync_tests {\n             let _t = thread::spawn(move|| {\n                 tx.send(box 10).unwrap();\n             });\n-            assert!(rx.recv().unwrap() == box 10);\n+            assert!(*rx.recv().unwrap() == 10);\n         }\n     }\n \n@@ -2774,7 +2774,7 @@ mod sync_tests {\n                 if i == 10 { return }\n \n                 thread::spawn(move|| {\n-                    assert!(rx.recv().unwrap() == box i);\n+                    assert!(*rx.recv().unwrap() == i);\n                     recv(rx, i + 1);\n                 });\n             }"}]}