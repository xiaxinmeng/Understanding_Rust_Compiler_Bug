{"sha": "253fad77883869511e2030352e86904ac2165d7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1M2ZhZDc3ODgzODY5NTExZTIwMzAzNTJlODY5MDRhYzIxNjVkN2M=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-17T06:21:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-20T22:23:22Z"}, "message": "replace impl of globa_async_handle with one using atomic compare-and-swap", "tree": {"sha": "ce92967c3a4b2c971104023634b765dbb2dd7123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce92967c3a4b2c971104023634b765dbb2dd7123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/253fad77883869511e2030352e86904ac2165d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/253fad77883869511e2030352e86904ac2165d7c", "html_url": "https://github.com/rust-lang/rust/commit/253fad77883869511e2030352e86904ac2165d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/253fad77883869511e2030352e86904ac2165d7c/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a87aa0a1bf6fb2fe2e591d63e48e39799e8437", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a87aa0a1bf6fb2fe2e591d63e48e39799e8437", "html_url": "https://github.com/rust-lang/rust/commit/d7a87aa0a1bf6fb2fe2e591d63e48e39799e8437"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "bf1bc68ff3afd5799231ac39f5d804f4b19cfda7", "filename": "src/libstd/uv_hl.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/253fad77883869511e2030352e86904ac2165d7c/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253fad77883869511e2030352e86904ac2165d7c/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=253fad77883869511e2030352e86904ac2165d7c", "patch": "@@ -15,8 +15,10 @@ import ll = uv_ll;\n \n native mod rustrt {\n     fn rust_uv_get_kernel_global_chan_ptr() -> *libc::uintptr_t;\n-    fn rust_uv_get_kernel_global_async_handle() -> **libc::c_void;\n-    fn rust_uv_set_kernel_global_async_handle(handle: *ll::uv_async_t);\n+    fn rust_uv_get_kernel_global_async_handle() -> *libc::uintptr_t;\n+    fn rust_compare_and_swap_ptr(address: *libc::uintptr_t,\n+                                 oldval: libc::uintptr_t,\n+                                 newval: libc::uintptr_t) -> bool;\n }\n \n #[doc = \"\n@@ -75,7 +77,8 @@ fn get_global_loop() -> high_level_loop unsafe {\n             outer_global_loop_body(port);\n         };\n         log(debug, \"after priv::chan_from_global_ptr\");\n-        let handle = get_global_async_handle();\n+        let handle = get_global_async_handle_native_representation()\n+            as **ll::uv_async_t;\n         ret { async_handle: handle, op_chan: chan };\n     }\n }\n@@ -104,7 +107,7 @@ unsafe fn run_high_level_loop(loop_ptr: *libc::c_void,\n                               msg_po: comm::port<high_level_msg>,\n                               before_run: fn~(*global_loop_data),\n                               before_msg_drain: fn~() -> bool,\n-                              before_tear_down: fn~()) {\n+                              before_tear_down: fn~(*global_loop_data)) {\n     // set up the special async handle we'll use to allow multi-task\n     // communication with this loop\n     let async = ll::async_t();\n@@ -117,7 +120,7 @@ unsafe fn run_high_level_loop(loop_ptr: *libc::c_void,\n         async_handle: async_handle,\n         mut active: true,\n         before_msg_drain: before_msg_drain,\n-        before_tear_down: before_tear_down,\n+        before_tear_down: gdc_callback(before_tear_down),\n         msg_po_ptr: ptr::addr_of(msg_po),\n         mut refd_handles: [mut],\n         mut unrefd_handles: [mut]\n@@ -263,7 +266,11 @@ crust fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n fn high_level_tear_down(data: *global_loop_data) unsafe {\n     log(debug, \"high_level_tear_down() called, close async_handle\");\n     // call user-suppled before_tear_down cb\n-    (*data).before_tear_down();\n+    alt (*data).before_tear_down {\n+      gdc_callback(cb) {\n+        cb(data);\n+      }\n+    }\n     let async_handle = (*data).async_handle;\n     ll::close(async_handle as *libc::c_void, tear_down_close_cb);\n }\n@@ -330,19 +337,32 @@ enum high_level_msg {\n     tear_down\n }\n \n-fn get_global_async_handle() -> **ll::uv_async_t {\n-    ret rustrt::rust_uv_get_kernel_global_async_handle() as **ll::uv_async_t;\n+unsafe fn get_global_async_handle_native_representation()\n+    -> *libc::uintptr_t {\n+    ret rustrt::rust_uv_get_kernel_global_async_handle();\n+}\n+\n+unsafe fn get_global_async_handle() -> *ll::uv_async_t {\n+    ret (*get_global_async_handle_native_representation()) as *ll::uv_async_t;\n }\n \n-fn set_global_async_handle(handle: *ll::uv_async_t) {\n-    rustrt::rust_uv_set_kernel_global_async_handle(handle);\n+unsafe fn set_global_async_handle(old: *ll::uv_async_t,\n+                           new_ptr: *ll::uv_async_t) {\n+    rustrt::rust_compare_and_swap_ptr(\n+        get_global_async_handle_native_representation(),\n+        old as libc::uintptr_t,\n+        new_ptr as libc::uintptr_t);\n+}\n+\n+enum global_data_callback {\n+    gdc_callback(fn~(*global_loop_data))\n }\n \n type global_loop_data = {\n     async_handle: *ll::uv_async_t,\n     mut active: bool,\n     before_msg_drain: fn~() -> bool,\n-    before_tear_down: fn~(),\n+    before_tear_down: global_data_callback,\n     msg_po_ptr: *comm::port<high_level_msg>,\n     mut refd_handles: [mut *libc::c_void],\n     mut unrefd_handles: [mut *libc::c_void]\n@@ -399,7 +419,8 @@ unsafe fn inner_global_loop_body(weak_exit_po_in: comm::port<()>,\n         // before_run\n         {|data|\n             // set the handle as the global\n-            set_global_async_handle((*data).async_handle);\n+            set_global_async_handle(0u as *ll::uv_async_t,\n+                                    (*data).async_handle);\n             // when this is ran, our async_handle is set up, so let's\n             // do an async_send with it\n             ll::async_send((*data).async_handle);\n@@ -422,8 +443,9 @@ unsafe fn inner_global_loop_body(weak_exit_po_in: comm::port<()>,\n             }\n         },\n         // before_tear_down\n-        {||\n-            set_global_async_handle(0 as *ll::uv_async_t);\n+        {|data|\n+            set_global_async_handle((*data).async_handle,\n+                                    0 as *ll::uv_async_t);\n         });\n     // supposed to return a bool to indicate to the enclosing loop whether\n     // it should continue or not.."}, {"sha": "9afb010a3db8c3521f77ba4c6568c48a0586d1dc", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=253fad77883869511e2030352e86904ac2165d7c", "patch": "@@ -27,10 +27,9 @@ rust_kernel::rust_kernel(rust_env *env) :\n     // set up storage of pointers needed to\n     // access the global loop.\n     global_loop_chan = 0;\n-    int foo = 0;\n-    async_handle_stub = (void*)&foo;\n-    global_async_handle = &async_handle_stub;\n-    *global_async_handle = (void*)0;\n+    async_handle_inner = (uintptr_t)0;\n+    global_async_handle = &async_handle_inner;\n+    *global_async_handle = (uintptr_t)0;\n \n     // Create the single threaded scheduler that will run on the platform's\n     // main thread"}, {"sha": "58739b2ada0d5371e0222840aee3b8637c467ff9", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=253fad77883869511e2030352e86904ac2165d7c", "patch": "@@ -75,8 +75,8 @@ class rust_kernel {\n \n     // Used to communicate with the process-side, global libuv loop\n     uintptr_t global_loop_chan;\n-    void* async_handle_stub;\n-    void** global_async_handle;\n+    uintptr_t async_handle_inner;\n+    uintptr_t* global_async_handle;\n \n public:\n     struct rust_env *env;\n@@ -124,9 +124,7 @@ class rust_kernel {\n     bool send_to_port(rust_port_id chan, void *sptr);\n \n     uintptr_t* get_global_loop() { return &global_loop_chan; }\n-    void** get_global_async_handle() { return global_async_handle; }\n-    void set_global_async_handle(void* handle) {\n-        *global_async_handle = handle; }\n+    uintptr_t* get_global_async_handle() { return global_async_handle; }\n };\n \n template <typename T> struct kernel_owned {"}, {"sha": "a0184f78e5f01e2c67146b2b1c6dd3f4e0d60930", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=253fad77883869511e2030352e86904ac2165d7c", "patch": "@@ -446,11 +446,7 @@ rust_uv_get_kernel_global_chan_ptr() {\n     return result;\n }\n \n-extern \"C\" void**\n+extern \"C\" uintptr_t*\n rust_uv_get_kernel_global_async_handle() {\n     return rust_get_current_task()->kernel->get_global_async_handle();\n }\n-extern \"C\" void\n-rust_uv_set_kernel_global_async_handle(uv_async_t* handle) {\n-    rust_get_current_task()->kernel->set_global_async_handle((void*)handle);\n-}"}, {"sha": "8b5d9c8fc8e3f48592b6a7d587e1f6b46521e3d5", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/253fad77883869511e2030352e86904ac2165d7c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=253fad77883869511e2030352e86904ac2165d7c", "patch": "@@ -138,7 +138,6 @@ rust_uv_get_base_from_buf\n rust_uv_get_len_from_buf\n rust_uv_get_kernel_global_chan_ptr\n rust_uv_get_kernel_global_async_handle\n-rust_uv_set_kernel_global_async_handle\n rust_dbg_lock_create\n rust_dbg_lock_destroy\n rust_dbg_lock_lock"}]}