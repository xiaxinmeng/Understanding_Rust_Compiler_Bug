{"sha": "316510f5e216340d9ec1a2734e2f5ada87504689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNjUxMGY1ZTIxNjM0MGQ5ZWMxYTI3MzRlMmY1YWRhODc1MDQ2ODk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-08-18T20:21:29Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-24T17:10:25Z"}, "message": "split ReInfer into ReVar and ReSkolemized\n\nthis should reduce the size of ty::Region to 24 bytes (from 32),\nand they are treated differently in most cases anyway.", "tree": {"sha": "289f962c629cc4535b2350191651ef64f156d3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289f962c629cc4535b2350191651ef64f156d3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/316510f5e216340d9ec1a2734e2f5ada87504689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/316510f5e216340d9ec1a2734e2f5ada87504689", "html_url": "https://github.com/rust-lang/rust/commit/316510f5e216340d9ec1a2734e2f5ada87504689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/316510f5e216340d9ec1a2734e2f5ada87504689/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797d0ba59c3d11a61bdfca52b79d511580309713", "url": "https://api.github.com/repos/rust-lang/rust/commits/797d0ba59c3d11a61bdfca52b79d511580309713", "html_url": "https://github.com/rust-lang/rust/commit/797d0ba59c3d11a61bdfca52b79d511580309713"}], "stats": {"total": 141, "additions": 65, "deletions": 76}, "files": [{"sha": "5be19bd5ba7ea08ea918d77239014ddf66670bf4", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -271,7 +271,7 @@ pub fn enc_region(w: &mut Encoder, cx: &ctxt, r: ty::Region) {\n         ty::ReEmpty => {\n             mywrite!(w, \"e\");\n         }\n-        ty::ReInfer(_) => {\n+        ty::ReVar(_) | ty::ReSkolemized(..) => {\n             // these should not crop up after typeck\n             cx.diag.handler().bug(\"cannot encode region variables\");\n         }"}, {"sha": "5fd1fea41aebbaeb7dcf747c89a3c40b2cde8b22", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -498,7 +498,7 @@ impl tr for ty::Region {\n             ty::ReScope(scope) => {\n                 ty::ReScope(scope.tr(dcx))\n             }\n-            ty::ReEmpty | ty::ReStatic | ty::ReInfer(..) => {\n+            ty::ReEmpty | ty::ReStatic | ty::ReVar(..) | ty::ReSkolemized(..) => {\n                 *self\n             }\n             ty::ReFree(ref fr) => {"}, {"sha": "cfeec1c4f73e30d48073ac485042013cf263cde5", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -340,14 +340,14 @@ impl<'cx, 'tcx> ty_fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n \n             // Always make a fresh region variable for skolemized regions;\n             // the higher-ranked decision procedures rely on this.\n-            ty::ReInfer(ty::ReSkolemized(..)) => { }\n+            ty::ReSkolemized(..) => { }\n \n             // For anything else, we make a region variable, unless we\n             // are *equating*, in which case it's just wasteful.\n             ty::ReEmpty |\n             ty::ReStatic |\n             ty::ReScope(..) |\n-            ty::ReInfer(ty::ReVar(..)) |\n+            ty::ReVar(..) |\n             ty::ReFree(..) => {\n                 if !self.make_region_vars {\n                     return r;"}, {"sha": "dca480b39c8254b5420f6957a8f813b75385b497", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -196,9 +196,12 @@ impl<'tcx> ty::ctxt<'tcx> {\n \n             ty::ReEarlyBound(ref data) => (data.name.to_string(), None),\n \n-            // I believe these cases should not occur (except when debugging,\n-            // perhaps)\n-            ty::ReInfer(_) | ty::ReLateBound(..) => {\n+            // FIXME(#13998) ReSkolemized should probably print like\n+            // ReFree rather than dumping Debug output on the user.\n+            //\n+            // We shouldn't really be having unification failures with ReVar\n+            // and ReLateBound through.\n+            ty::ReSkolemized(..) | ty::ReVar(_) | ty::ReLateBound(..) => {\n                 (format!(\"lifetime {:?}\", region), None)\n             }\n         };"}, {"sha": "c72a4fc0db3093cf1472ea853834e8c6ba4553a7", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -95,7 +95,8 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::ReStatic |\n             ty::ReFree(_) |\n             ty::ReScope(_) |\n-            ty::ReInfer(_) |\n+            ty::ReVar(_) |\n+            ty::ReSkolemized(..) |\n             ty::ReEmpty => {\n                 // replace all free regions with 'static\n                 ty::ReStatic"}, {"sha": "fb8da9b65daeebc1b79b97800fd435ba0a3aa5b8", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -335,7 +335,7 @@ fn var_ids<'a, 'tcx>(fields: &CombineFields<'a, 'tcx>,\n                      -> Vec<ty::RegionVid> {\n     map.iter()\n        .map(|(_, r)| match *r {\n-           ty::ReInfer(ty::ReVar(r)) => { r }\n+           ty::ReVar(r) => { r }\n            r => {\n                fields.tcx().sess.span_bug(\n                    fields.trace.origin.span(),\n@@ -347,7 +347,7 @@ fn var_ids<'a, 'tcx>(fields: &CombineFields<'a, 'tcx>,\n \n fn is_var_in_set(new_vars: &[ty::RegionVid], r: ty::Region) -> bool {\n     match r {\n-        ty::ReInfer(ty::ReVar(ref v)) => new_vars.iter().any(|x| x == v),\n+        ty::ReVar(ref v) => new_vars.iter().any(|x| x == v),\n         _ => false\n     }\n }\n@@ -443,7 +443,7 @@ impl<'a,'tcx> InferCtxtExt for InferCtxt<'a,'tcx> {\n         }\n \n         region_vars.retain(|&region_vid| {\n-            let r = ty::ReInfer(ty::ReVar(region_vid));\n+            let r = ty::ReVar(region_vid);\n             !escaping_region_vars.contains(&r)\n         });\n \n@@ -561,7 +561,7 @@ pub fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n             // Each skolemized should only be relatable to itself\n             // or new variables:\n             match tainted_region {\n-                ty::ReInfer(ty::ReVar(vid)) => {\n+                ty::ReVar(vid) => {\n                     if new_vars.iter().any(|&x| x == vid) { continue; }\n                 }\n                 _ => {"}, {"sha": "4e8ed01c6b9e01e9a9318150cdcd6b48fe470284", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -1059,7 +1059,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region {\n-        ty::ReInfer(ty::ReVar(self.region_vars.new_region_var(origin)))\n+        ty::ReVar(self.region_vars.new_region_var(origin))\n     }\n \n     pub fn region_vars_for_defs(&self,"}, {"sha": "d9265f78ccae02d8f0fdb1f615c1242f970e8d42", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -25,7 +25,7 @@ use middle::free_region::FreeRegionMap;\n use middle::region;\n use middle::ty::{self, Ty, TypeError};\n use middle::ty::{BoundRegion, FreeRegion, Region, RegionVid};\n-use middle::ty::{ReEmpty, ReStatic, ReInfer, ReFree, ReEarlyBound};\n+use middle::ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound};\n use middle::ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n use middle::ty_relate::RelateResult;\n use util::common::indenter;\n@@ -373,7 +373,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n         let sc = self.skolemization_count.get();\n         self.skolemization_count.set(sc + 1);\n-        ReInfer(ReSkolemized(sc, br))\n+        ReSkolemized(sc, br)\n     }\n \n     pub fn new_bound(&self, debruijn: ty::DebruijnIndex) -> Region {\n@@ -510,13 +510,13 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n           (_, ReStatic) => {\n             // all regions are subregions of static, so we can ignore this\n           }\n-          (ReInfer(ReVar(sub_id)), ReInfer(ReVar(sup_id))) => {\n+          (ReVar(sub_id), ReVar(sup_id)) => {\n             self.add_constraint(ConstrainVarSubVar(sub_id, sup_id), origin);\n           }\n-          (r, ReInfer(ReVar(sup_id))) => {\n+          (r, ReVar(sup_id)) => {\n             self.add_constraint(ConstrainRegSubVar(r, sup_id), origin);\n           }\n-          (ReInfer(ReVar(sub_id)), r) => {\n+          (ReVar(sub_id), r) => {\n             self.add_constraint(ConstrainVarSubReg(sub_id, r), origin);\n           }\n           _ => {\n@@ -621,7 +621,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         let vars = TwoRegions { a: a, b: b };\n         match self.combine_map(t).borrow().get(&vars) {\n             Some(&c) => {\n-                return ReInfer(ReVar(c));\n+                return ReVar(c);\n             }\n             None => {}\n         }\n@@ -630,10 +630,10 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         if self.in_snapshot() {\n             self.undo_log.borrow_mut().push(AddCombination(t, vars));\n         }\n-        relate(self, a, ReInfer(ReVar(c)));\n-        relate(self, b, ReInfer(ReVar(c)));\n+        relate(self, a, ReVar(c));\n+        relate(self, b, ReVar(c));\n         debug!(\"combine_vars() c={:?}\", c);\n-        ReInfer(ReVar(c))\n+        ReVar(c)\n     }\n \n     pub fn vars_created_since_snapshot(&self, mark: &RegionSnapshot)\n@@ -672,22 +672,22 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                     &AddConstraint(ConstrainVarSubVar(a, b)) => {\n                         consider_adding_bidirectional_edges(\n                             &mut result_set, r,\n-                            ReInfer(ReVar(a)), ReInfer(ReVar(b)));\n+                            ReVar(a), ReVar(b));\n                     }\n                     &AddConstraint(ConstrainRegSubVar(a, b)) => {\n                         consider_adding_bidirectional_edges(\n                             &mut result_set, r,\n-                            a, ReInfer(ReVar(b)));\n+                            a, ReVar(b));\n                     }\n                     &AddConstraint(ConstrainVarSubReg(a, b)) => {\n                         consider_adding_bidirectional_edges(\n                             &mut result_set, r,\n-                            ReInfer(ReVar(a)), b);\n+                            ReVar(a), b);\n                     }\n                     &AddGiven(a, b) => {\n                         consider_adding_bidirectional_edges(\n                             &mut result_set, r,\n-                            ReFree(a), ReInfer(ReVar(b)));\n+                            ReFree(a), ReVar(b));\n                     }\n                     &AddVerify(i) => {\n                         match (*self.verifys.borrow())[i] {\n@@ -775,7 +775,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             r // everything lives longer than empty\n           }\n \n-          (ReInfer(ReVar(v_id)), _) | (_, ReInfer(ReVar(v_id))) => {\n+          (ReVar(v_id), _) | (_, ReVar(v_id)) => {\n             self.tcx.sess.span_bug(\n                 (*self.var_origins.borrow())[v_id.index as usize].span(),\n                 &format!(\"lub_concrete_regions invoked with \\\n@@ -818,8 +818,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n           // For these types, we cannot define any additional\n           // relationship:\n-          (ReInfer(ReSkolemized(..)), _) |\n-          (_, ReInfer(ReSkolemized(..))) => {\n+          (ReSkolemized(..), _) |\n+          (_, ReSkolemized(..)) => {\n             if a == b {a} else {ReStatic}\n           }\n         }\n@@ -853,8 +853,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 Ok(ReEmpty)\n             }\n \n-            (ReInfer(ReVar(v_id)), _) |\n-            (_, ReInfer(ReVar(v_id))) => {\n+            (ReVar(v_id), _) |\n+            (_, ReVar(v_id)) => {\n                 self.tcx.sess.span_bug(\n                     (*self.var_origins.borrow())[v_id.index as usize].span(),\n                     &format!(\"glb_concrete_regions invoked with \\\n@@ -890,8 +890,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n             // For these types, we cannot define any additional\n             // relationship:\n-            (ReInfer(ReSkolemized(..)), _) |\n-            (_, ReInfer(ReSkolemized(..))) => {\n+            (ReSkolemized(..), _) |\n+            (_, ReSkolemized(..)) => {\n                 if a == b {\n                     Ok(a)\n                 } else {\n@@ -1632,7 +1632,7 @@ impl<'tcx> fmt::Debug for Verify<'tcx> {\n \n fn normalize(values: &Vec<VarValue>, r: ty::Region) -> ty::Region {\n     match r {\n-        ty::ReInfer(ReVar(rid)) => lookup(values, rid),\n+        ty::ReVar(rid) => lookup(values, rid),\n         _ => r\n     }\n }"}, {"sha": "9cc9f148ce183dbce9ad3f88a91804175c94b695", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n         match r {\n-          ty::ReInfer(ty::ReVar(rid)) => self.infcx.region_vars.resolve_var(rid),\n+          ty::ReVar(rid) => self.infcx.region_vars.resolve_var(rid),\n           _ => r,\n         }\n     }"}, {"sha": "52d76d277792eeeeaf71cf32feac30200fb3b50e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -12,7 +12,6 @@\n #![allow(non_camel_case_types)]\n \n pub use self::InferTy::*;\n-pub use self::InferRegion::*;\n pub use self::ImplOrTraitItemId::*;\n pub use self::ClosureKind::*;\n pub use self::Variance::*;\n@@ -1529,7 +1528,11 @@ pub enum Region {\n     ReStatic,\n \n     /// A region variable.  Should not exist after typeck.\n-    ReInfer(InferRegion),\n+    ReVar(RegionVid),\n+\n+    /// A skolemized region - basically the higher-ranked version of ReFree.\n+    /// Should not exist after typeck.\n+    ReSkolemized(u32, BoundRegion),\n \n     /// Empty lifetime is for data that is never accessed.\n     /// Bottom in the region lattice. We treat ReEmpty somewhat\n@@ -1648,7 +1651,7 @@ impl Region {\n \n     pub fn needs_infer(&self) -> bool {\n         match *self {\n-            ty::ReInfer(..) => true,\n+            ty::ReVar(..) | ty::ReSkolemized(..) => true,\n             _ => false\n         }\n     }\n@@ -2187,29 +2190,6 @@ pub enum UnconstrainedNumeric {\n }\n \n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Eq, Hash, Debug, Copy)]\n-pub enum InferRegion {\n-    ReVar(RegionVid),\n-    ReSkolemized(u32, BoundRegion)\n-}\n-\n-impl cmp::PartialEq for InferRegion {\n-    fn eq(&self, other: &InferRegion) -> bool {\n-        match ((*self), *other) {\n-            (ReVar(rva), ReVar(rvb)) => {\n-                rva == rvb\n-            }\n-            (ReSkolemized(rva, _), ReSkolemized(rvb, _)) => {\n-                rva == rvb\n-            }\n-            _ => false\n-        }\n-    }\n-    fn ne(&self, other: &InferRegion) -> bool {\n-        !((*self) == (*other))\n-    }\n-}\n-\n impl fmt::Debug for TyVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"_#{}t\", self.index)\n@@ -3722,7 +3702,8 @@ impl FlagComputation {\n \n     fn add_region(&mut self, r: Region) {\n         match r {\n-            ty::ReInfer(_) => { self.add_flags(TypeFlags::HAS_RE_INFER); }\n+            ty::ReVar(..) |\n+            ty::ReSkolemized(..) => { self.add_flags(TypeFlags::HAS_RE_INFER); }\n             ty::ReLateBound(debruijn, _) => { self.add_depth(debruijn.depth); }\n             ty::ReEarlyBound(..) => { self.add_flags(TypeFlags::HAS_RE_EARLY_BOUND); }\n             ty::ReStatic => {}\n@@ -5728,7 +5709,7 @@ impl<'tcx> ctxt<'tcx> {\n                 self.note_and_explain_region(\"concrete lifetime that was found is \",\n                                            conc_region, \"\");\n             }\n-            RegionsOverlyPolymorphic(_, ty::ReInfer(ty::ReVar(_))) => {\n+            RegionsOverlyPolymorphic(_, ty::ReVar(_)) => {\n                 // don't bother to print out the message below for\n                 // inference variables, it's not very illuminating.\n             }\n@@ -6479,7 +6460,8 @@ impl<'tcx> ctxt<'tcx> {\n                     ReLateBound(..) |\n                     ReFree(..) |\n                     ReScope(..) |\n-                    ReInfer(..) => {\n+                    ReVar(..) |\n+                    ReSkolemized(..) => {\n                         tcx.sess.bug(\"unexpected region found when hashing a type\")\n                     }\n                 }\n@@ -7338,8 +7320,9 @@ impl HasTypeFlags for Region {\n             }\n         }\n         if flags.intersects(TypeFlags::HAS_RE_INFER) {\n-            if let ty::ReInfer(_) = *self {\n-                return true;\n+            match *self {\n+                ty::ReVar(_) | ty::ReSkolemized(..) => { return true }\n+                _ => {}\n             }\n         }\n         false"}, {"sha": "48c2e1e6dca7ae00b4a8cf90284f803e159c5074", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -13,7 +13,7 @@ use middle::def_id::DefId;\n use middle::subst::{self, Subst};\n use middle::ty::{BoundRegion, BrAnon, BrNamed};\n use middle::ty::{ReEarlyBound, BrFresh, ctxt};\n-use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region, ReEmpty};\n+use middle::ty::{ReFree, ReScope, ReStatic, Region, ReEmpty};\n use middle::ty::{ReSkolemized, ReVar, BrEnv};\n use middle::ty::{TyBool, TyChar, TyStruct, TyEnum};\n use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n@@ -413,11 +413,11 @@ impl fmt::Debug for ty::Region {\n \n             ty::ReStatic => write!(f, \"ReStatic\"),\n \n-            ty::ReInfer(ReVar(ref vid)) => {\n+            ty::ReVar(ref vid) => {\n                 write!(f, \"{:?}\", vid)\n             }\n \n-            ty::ReInfer(ReSkolemized(id, ref bound_region)) => {\n+            ty::ReSkolemized(id, ref bound_region) => {\n                 write!(f, \"ReSkolemized({}, {:?})\", id, bound_region)\n             }\n \n@@ -442,11 +442,11 @@ impl fmt::Display for ty::Region {\n             }\n             ty::ReLateBound(_, br) |\n             ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n-            ty::ReInfer(ReSkolemized(_, br)) => {\n+            ty::ReSkolemized(_, br) => {\n                 write!(f, \"{}\", br)\n             }\n             ty::ReScope(_) |\n-            ty::ReInfer(ReVar(_)) => Ok(()),\n+            ty::ReVar(_) => Ok(()),\n             ty::ReStatic => write!(f, \"'static\"),\n             ty::ReEmpty => write!(f, \"'<empty>\"),\n         }"}, {"sha": "d1e75afad454b1d10662ee6484b51e26a1e9918e", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -377,7 +377,8 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     ty::ReEmpty |\n                     ty::ReLateBound(..) |\n                     ty::ReEarlyBound(..) |\n-                    ty::ReInfer(..) => {\n+                    ty::ReVar(..) |\n+                    ty::ReSkolemized(..) => {\n                         self.tcx().sess.span_bug(\n                             cmt.span,\n                             &format!(\"invalid borrow lifetime: {:?}\","}, {"sha": "156aa14bebf583e1d12e4616bfa8b34ea5e52edd", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -428,7 +428,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n                 debug!(\"implication: {:?}\", implication);\n                 match implication {\n                     ImpliedBound::RegionSubRegion(ty::ReFree(free_a),\n-                                                  ty::ReInfer(ty::ReVar(vid_b))) => {\n+                                                  ty::ReVar(vid_b)) => {\n                         self.fcx.inh.infcx.add_given(free_a, vid_b);\n                     }\n                     ImpliedBound::RegionSubParam(r_a, param_b) => {"}, {"sha": "98058b804eee486b493987cea6147375c59340e9", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -1025,8 +1025,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // methods or in fn types.\n             }\n \n-            ty::ReFree(..) | ty::ReScope(..) | ty::ReInfer(..) |\n-            ty::ReEmpty => {\n+            ty::ReFree(..) | ty::ReScope(..) | ty::ReVar(..) |\n+            ty::ReSkolemized(..) | ty::ReEmpty => {\n                 // We don't expect to see anything but 'static or bound\n                 // regions when visiting member types or method types.\n                 self.tcx()"}, {"sha": "9cd376f8d31bdc46dfe41041a86ce888f745fc64", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316510f5e216340d9ec1a2734e2f5ada87504689/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=316510f5e216340d9ec1a2734e2f5ada87504689", "patch": "@@ -772,7 +772,8 @@ impl Clean<Option<Lifetime>> for ty::Region {\n             ty::ReLateBound(..) |\n             ty::ReFree(..) |\n             ty::ReScope(..) |\n-            ty::ReInfer(..) |\n+            ty::ReVar(..) |\n+            ty::ReSkolemized(..) |\n             ty::ReEmpty(..) => None\n         }\n     }"}]}