{"sha": "08adce61a1874a725f2682c887392d5a325cab01", "node_id": "C_kwDOAAsO6NoAKDA4YWRjZTYxYTE4NzRhNzI1ZjI2ODJjODg3MzkyZDVhMzI1Y2FiMDE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T13:14:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T13:14:33Z"}, "message": "Better interface for doc comment and attribute processing", "tree": {"sha": "506a7b8ed9d8a44ec533da033f58090ef7a3b25a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506a7b8ed9d8a44ec533da033f58090ef7a3b25a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08adce61a1874a725f2682c887392d5a325cab01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08adce61a1874a725f2682c887392d5a325cab01", "html_url": "https://github.com/rust-lang/rust/commit/08adce61a1874a725f2682c887392d5a325cab01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08adce61a1874a725f2682c887392d5a325cab01/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69dbfc775447df596ac8ed17e83ecd50dbf494d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/69dbfc775447df596ac8ed17e83ecd50dbf494d6", "html_url": "https://github.com/rust-lang/rust/commit/69dbfc775447df596ac8ed17e83ecd50dbf494d6"}], "stats": {"total": 130, "additions": 66, "deletions": 64}, "files": [{"sha": "30642f6cc61a3dc42cf03db3b91632c2b7e89ba6", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 38, "deletions": 54, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=08adce61a1874a725f2682c887392d5a325cab01", "patch": "@@ -5,7 +5,7 @@ use std::{fmt, hash::Hash, ops, sync::Arc};\n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n-use hir_expand::{hygiene::Hygiene, name::AsName, AstId, InFile};\n+use hir_expand::{hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile};\n use itertools::Itertools;\n use la_arena::ArenaMap;\n use mbe::{syntax_node_to_token_tree, DelimiterKind, Punct};\n@@ -84,6 +84,14 @@ impl ops::Deref for Attrs {\n     }\n }\n \n+impl ops::Index<AttrId> for Attrs {\n+    type Output = Attr;\n+\n+    fn index(&self, AttrId { ast_index, .. }: AttrId) -> &Self::Output {\n+        &(**self)[ast_index as usize]\n+    }\n+}\n+\n impl ops::Deref for AttrsWithOwner {\n     type Target = Attrs;\n \n@@ -509,23 +517,23 @@ fn inner_attributes(\n ) -> Option<(impl Iterator<Item = ast::Attr>, impl Iterator<Item = ast::Comment>)> {\n     let (attrs, docs) = match_ast! {\n         match syntax {\n-            ast::SourceFile(it) => (it.attrs(), ast::CommentIter::from_syntax_node(it.syntax())),\n+            ast::SourceFile(it) => (it.attrs(), ast::DocCommentIter::from_syntax_node(it.syntax())),\n             ast::ExternBlock(it) => {\n                 let extern_item_list = it.extern_item_list()?;\n-                (extern_item_list.attrs(), ast::CommentIter::from_syntax_node(extern_item_list.syntax()))\n+                (extern_item_list.attrs(), ast::DocCommentIter::from_syntax_node(extern_item_list.syntax()))\n             },\n             ast::Fn(it) => {\n                 let body = it.body()?;\n                 let stmt_list = body.stmt_list()?;\n-                (stmt_list.attrs(), ast::CommentIter::from_syntax_node(body.syntax()))\n+                (stmt_list.attrs(), ast::DocCommentIter::from_syntax_node(body.syntax()))\n             },\n             ast::Impl(it) => {\n                 let assoc_item_list = it.assoc_item_list()?;\n-                (assoc_item_list.attrs(), ast::CommentIter::from_syntax_node(assoc_item_list.syntax()))\n+                (assoc_item_list.attrs(), ast::DocCommentIter::from_syntax_node(assoc_item_list.syntax()))\n             },\n             ast::Module(it) => {\n                 let item_list = it.item_list()?;\n-                (item_list.attrs(), ast::CommentIter::from_syntax_node(item_list.syntax()))\n+                (item_list.attrs(), ast::DocCommentIter::from_syntax_node(item_list.syntax()))\n             },\n             // FIXME: BlockExpr's only accept inner attributes in specific cases\n             // Excerpt from the reference:\n@@ -542,27 +550,20 @@ fn inner_attributes(\n \n #[derive(Debug)]\n pub struct AttrSourceMap {\n-    attrs: Vec<InFile<ast::Attr>>,\n-    doc_comments: Vec<InFile<ast::Comment>>,\n+    source: Vec<Either<ast::Attr, ast::Comment>>,\n+    file_id: HirFileId,\n }\n \n impl AttrSourceMap {\n     fn new(owner: InFile<&dyn ast::HasAttrs>) -> Self {\n-        let mut attrs = Vec::new();\n-        let mut doc_comments = Vec::new();\n-        for (_, attr) in collect_attrs(owner.value) {\n-            match attr {\n-                Either::Left(attr) => attrs.push(owner.with_value(attr)),\n-                Either::Right(comment) => doc_comments.push(owner.with_value(comment)),\n-            }\n+        Self {\n+            source: collect_attrs(owner.value).map(|(_, it)| it).collect(),\n+            file_id: owner.file_id,\n         }\n-\n-        Self { attrs, doc_comments }\n     }\n \n     fn merge(&mut self, other: Self) {\n-        self.attrs.extend(other.attrs);\n-        self.doc_comments.extend(other.doc_comments);\n+        self.source.extend(other.source);\n     }\n \n     /// Maps the lowered `Attr` back to its original syntax node.\n@@ -571,24 +572,15 @@ impl AttrSourceMap {\n     ///\n     /// Note that the returned syntax node might be a `#[cfg_attr]`, or a doc comment, instead of\n     /// the attribute represented by `Attr`.\n-    pub fn source_of(&self, attr: &Attr) -> InFile<Either<ast::Attr, ast::Comment>> {\n+    pub fn source_of(&self, attr: &Attr) -> InFile<&Either<ast::Attr, ast::Comment>> {\n         self.source_of_id(attr.id)\n     }\n \n-    fn source_of_id(&self, id: AttrId) -> InFile<Either<ast::Attr, ast::Comment>> {\n-        if id.is_doc_comment {\n-            self.doc_comments\n-                .get(id.ast_index as usize)\n-                .unwrap_or_else(|| panic!(\"cannot find doc comment at index {:?}\", id))\n-                .clone()\n-                .map(Either::Right)\n-        } else {\n-            self.attrs\n-                .get(id.ast_index as usize)\n-                .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {:?}\", id))\n-                .clone()\n-                .map(Either::Left)\n-        }\n+    fn source_of_id(&self, id: AttrId) -> InFile<&Either<ast::Attr, ast::Comment>> {\n+        self.source\n+            .get(id.ast_index as usize)\n+            .map(|it| InFile::new(self.file_id, it))\n+            .unwrap_or_else(|| panic!(\"cannot find attr at index {:?}\", id))\n     }\n }\n \n@@ -656,8 +648,7 @@ fn get_doc_string_in_attr(it: &ast::Attr) -> Option<ast::String> {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct AttrId {\n-    is_doc_comment: bool,\n+pub struct AttrId {\n     pub(crate) ast_index: u32,\n }\n \n@@ -816,27 +807,20 @@ fn collect_attrs(\n         .map_or((None, None), |(attrs, docs)| (Some(attrs), Some(docs)));\n \n     let outer_attrs = owner.attrs().filter(|attr| attr.kind().is_outer());\n-    let attrs =\n-        outer_attrs.chain(inner_attrs.into_iter().flatten()).enumerate().map(|(idx, attr)| {\n-            (\n-                AttrId { ast_index: idx as u32, is_doc_comment: false },\n-                attr.syntax().text_range().start(),\n-                Either::Left(attr),\n-            )\n-        });\n+    let attrs = outer_attrs\n+        .chain(inner_attrs.into_iter().flatten())\n+        .map(|attr| (attr.syntax().text_range().start(), Either::Left(attr)));\n \n     let outer_docs =\n-        ast::CommentIter::from_syntax_node(owner.syntax()).filter(ast::Comment::is_outer);\n-    let docs =\n-        outer_docs.chain(inner_docs.into_iter().flatten()).enumerate().map(|(idx, docs_text)| {\n-            (\n-                AttrId { ast_index: idx as u32, is_doc_comment: true },\n-                docs_text.syntax().text_range().start(),\n-                Either::Right(docs_text),\n-            )\n-        });\n+        ast::DocCommentIter::from_syntax_node(owner.syntax()).filter(ast::Comment::is_outer);\n+    let docs = outer_docs\n+        .chain(inner_docs.into_iter().flatten())\n+        .map(|docs_text| (docs_text.syntax().text_range().start(), Either::Right(docs_text)));\n     // sort here by syntax node offset because the source can have doc attributes and doc strings be interleaved\n-    docs.chain(attrs).sorted_by_key(|&(_, offset, _)| offset).map(|(id, _, attr)| (id, attr))\n+    docs.chain(attrs)\n+        .sorted_by_key(|&(offset, _)| offset)\n+        .enumerate()\n+        .map(|(id, (_, attr))| (AttrId { ast_index: id as u32 }, attr))\n }\n \n pub(crate) fn variants_attrs_source_map("}, {"sha": "421120602ee988daf85f69177fa6065ef23a218e", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=08adce61a1874a725f2682c887392d5a325cab01", "patch": "@@ -30,7 +30,7 @@ pub use self::{\n         QuoteOffsets, Radix,\n     },\n     traits::{\n-        CommentIter, HasArgList, HasAttrs, HasDocComments, HasGenericParams, HasLoopBody,\n+        DocCommentIter, HasArgList, HasAttrs, HasDocComments, HasGenericParams, HasLoopBody,\n         HasModuleItem, HasName, HasTypeBounds, HasVisibility,\n     },\n };"}, {"sha": "705aa5edac48b9834b22681777d2ca0a48ba1fb9", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=08adce61a1874a725f2682c887392d5a325cab01", "patch": "@@ -772,3 +772,13 @@ impl ast::HasLoopBody for ast::ForExpr {\n }\n \n impl ast::HasAttrs for ast::AnyHasDocComments {}\n+\n+impl From<ast::Adt> for ast::Item {\n+    fn from(it: ast::Adt) -> Self {\n+        match it {\n+            ast::Adt::Enum(it) => ast::Item::Enum(it),\n+            ast::Adt::Struct(it) => ast::Item::Struct(it),\n+            ast::Adt::Union(it) => ast::Item::Union(it),\n+        }\n+    }\n+}"}, {"sha": "cc7e5150b36069e66d06cbc69f8b303316383099", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=08adce61a1874a725f2682c887392d5a325cab01", "patch": "@@ -14,6 +14,10 @@ impl ast::Comment {\n         CommentKind::from_text(self.text())\n     }\n \n+    pub fn is_doc(&self) -> bool {\n+        self.kind().doc.is_some()\n+    }\n+\n     pub fn is_inner(&self) -> bool {\n         self.kind().doc == Some(CommentPlacement::Inner)\n     }"}, {"sha": "98b1087e641073745a797e015e38e3c819cddda5", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08adce61a1874a725f2682c887392d5a325cab01/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=08adce61a1874a725f2682c887392d5a325cab01", "patch": "@@ -73,17 +73,17 @@ pub trait HasAttrs: AstNode {\n }\n \n pub trait HasDocComments: HasAttrs {\n-    fn doc_comments(&self) -> CommentIter {\n-        CommentIter { iter: self.syntax().children_with_tokens() }\n+    fn doc_comments(&self) -> DocCommentIter {\n+        DocCommentIter { iter: self.syntax().children_with_tokens() }\n     }\n     fn doc_comments_and_attrs(&self) -> AttrCommentIter {\n         AttrCommentIter { iter: self.syntax().children_with_tokens() }\n     }\n }\n \n-impl CommentIter {\n-    pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> CommentIter {\n-        CommentIter { iter: syntax_node.children_with_tokens() }\n+impl DocCommentIter {\n+    pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> DocCommentIter {\n+        DocCommentIter { iter: syntax_node.children_with_tokens() }\n     }\n \n     #[cfg(test)]\n@@ -100,14 +100,16 @@ impl CommentIter {\n     }\n }\n \n-pub struct CommentIter {\n+pub struct DocCommentIter {\n     iter: SyntaxElementChildren,\n }\n \n-impl Iterator for CommentIter {\n+impl Iterator for DocCommentIter {\n     type Item = ast::Comment;\n     fn next(&mut self) -> Option<ast::Comment> {\n-        self.iter.by_ref().find_map(|el| el.into_token().and_then(ast::Comment::cast))\n+        self.iter.by_ref().find_map(|el| {\n+            el.into_token().and_then(ast::Comment::cast).filter(ast::Comment::is_doc)\n+        })\n     }\n }\n \n@@ -120,7 +122,9 @@ impl Iterator for AttrCommentIter {\n     fn next(&mut self) -> Option<Self::Item> {\n         self.iter.by_ref().find_map(|el| match el {\n             SyntaxElement::Node(node) => ast::Attr::cast(node).map(Either::Right),\n-            SyntaxElement::Token(tok) => ast::Comment::cast(tok).map(Either::Left),\n+            SyntaxElement::Token(tok) => {\n+                ast::Comment::cast(tok).filter(ast::Comment::is_doc).map(Either::Left)\n+            }\n         })\n     }\n }"}]}