{"sha": "d8801ceabcf039708e448e07460f859d60771e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODAxY2VhYmNmMDM5NzA4ZTQ0OGUwNzQ2MGY4NTlkNjA3NzFlMTg=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-29T15:11:11Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-29T15:11:11Z"}, "message": "std::str: Use CharIterator in NormalizationIterator\n\nJust to simplify and not have the iteration logic repeated in multiple places.", "tree": {"sha": "1434c370a328d643de3a40ec88628c9b31f75871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1434c370a328d643de3a40ec88628c9b31f75871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8801ceabcf039708e448e07460f859d60771e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8801ceabcf039708e448e07460f859d60771e18", "html_url": "https://github.com/rust-lang/rust/commit/d8801ceabcf039708e448e07460f859d60771e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8801ceabcf039708e448e07460f859d60771e18/comments", "author": null, "committer": null, "parents": [{"sha": "518bd073b4b41a5cca0892c1a7878a7b16836db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/518bd073b4b41a5cca0892c1a7878a7b16836db1", "html_url": "https://github.com/rust-lang/rust/commit/518bd073b4b41a5cca0892c1a7878a7b16836db1"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "750f5acaf2aa5b231e9b75c717149ef10eec1eb3", "filename": "src/libstd/str.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d8801ceabcf039708e448e07460f859d60771e18/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8801ceabcf039708e448e07460f859d60771e18/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=d8801ceabcf039708e448e07460f859d60771e18", "patch": "@@ -621,8 +621,7 @@ enum NormalizationForm {\n #[deriving(Clone)]\n struct NormalizationIterator<'self> {\n     priv kind: NormalizationForm,\n-    priv index: uint,\n-    priv string: &'self str,\n+    priv iter: CharIterator<'self>,\n     priv buffer: ~[(char, u8)],\n     priv sorted: bool\n }\n@@ -650,16 +649,17 @@ impl<'self> Iterator<char> for NormalizationIterator<'self> {\n             NFKD => char::decompose_compatible\n         };\n \n-        while !self.sorted && self.index < self.string.len() {\n-            let CharRange {ch, next} = self.string.char_range_at(self.index);\n-            self.index = next;\n-            do decomposer(ch) |d| {\n-                let class = canonical_combining_class(d);\n-                if class == 0 && !self.sorted {\n-                    canonical_sort(self.buffer);\n-                    self.sorted = true;\n+        if !self.sorted {\n+            for ch in self.iter {\n+                do decomposer(ch) |d| {\n+                    let class = canonical_combining_class(d);\n+                    if class == 0 && !self.sorted {\n+                        canonical_sort(self.buffer);\n+                        self.sorted = true;\n+                    }\n+                    self.buffer.push((d, class));\n                 }\n-                self.buffer.push((d, class));\n+                if self.sorted { break }\n             }\n         }\n \n@@ -678,7 +678,10 @@ impl<'self> Iterator<char> for NormalizationIterator<'self> {\n         }\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) { (self.string.len(), None) }\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (lower, _) = self.iter.size_hint();\n+        (lower, None)\n+    }\n }\n \n /// Replace all occurrences of one string with another\n@@ -1628,8 +1631,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// Returns the string in Unicode Normalization Form D (canonical decomposition)\n     fn nfd_iter(&self) -> NormalizationIterator<'self> {\n         NormalizationIterator {\n-            index: 0,\n-            string: *self,\n+            iter: self.iter(),\n             buffer: ~[],\n             sorted: false,\n             kind: NFD\n@@ -1639,8 +1641,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// Returns the string in Unicode Normalization Form KD (compatibility decomposition)\n     fn nfkd_iter(&self) -> NormalizationIterator<'self> {\n         NormalizationIterator {\n-            index: 0,\n-            string: *self,\n+            iter: self.iter(),\n             buffer: ~[],\n             sorted: false,\n             kind: NFKD"}]}