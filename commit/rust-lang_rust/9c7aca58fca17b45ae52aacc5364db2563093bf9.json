{"sha": "9c7aca58fca17b45ae52aacc5364db2563093bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljN2FjYTU4ZmNhMTdiNDVhZTUyYWFjYzUzNjRkYjI1NjMwOTNiZjk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-17T06:20:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T06:20:55Z"}, "message": "Rollup merge of #83124 - cjgillot:iiib, r=petrochenkov\n\nDo not insert impl_trait_in_bindings opaque definitions twice.\n\nThe reference to the item already appears inside the `OpaqueDef`. It does not need to be repeated as a statement.", "tree": {"sha": "fc9dec89cd7f8cb8b46701621301ba224e804b7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9dec89cd7f8cb8b46701621301ba224e804b7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7aca58fca17b45ae52aacc5364db2563093bf9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUZ/ICRBK7hj4Ov3rIwAAdHIIAG1ylYPTUSk2jxQU9k2eIdFw\noqDTvUWWRM7Nl9XKHHuLa+gJELXPwi632gfq4jg3KMlXKQCYytOx8LJszYLam78A\nNYg0oxDyVEKhrh4corC7KoyqTcl9bLIxPHHYGXStcEko11pCE0t2doU0QQphsIh6\nsro/WkkO/cRw/aDyoAxNxae49oWiMwK95t+QI/t03+3uR2jFRs+ejEVa/17wGZu1\npzGqIgWfrbeHIBKzO3dhVsGvFwDEX9sLTaF7avifYeClxoYNf+sWd9fsEMqIAMfh\njphWZ7eIz4nu22z0ht4Ni3GSR+tpn8gd+EMGcxwrrNrPiu1wj9JV7DWLg6GrXLo=\n=bWkr\n-----END PGP SIGNATURE-----\n", "payload": "tree fc9dec89cd7f8cb8b46701621301ba224e804b7e\nparent 70edab895d15480b34d0fcf94fd3fcb5f5966121\nparent e8b2e7b01ce9415f448318e4acc161195efcfbb6\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615962055 +0900\ncommitter GitHub <noreply@github.com> 1615962055 +0900\n\nRollup merge of #83124 - cjgillot:iiib, r=petrochenkov\n\nDo not insert impl_trait_in_bindings opaque definitions twice.\n\nThe reference to the item already appears inside the `OpaqueDef`. It does not need to be repeated as a statement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7aca58fca17b45ae52aacc5364db2563093bf9", "html_url": "https://github.com/rust-lang/rust/commit/9c7aca58fca17b45ae52aacc5364db2563093bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7aca58fca17b45ae52aacc5364db2563093bf9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70edab895d15480b34d0fcf94fd3fcb5f5966121", "url": "https://api.github.com/repos/rust-lang/rust/commits/70edab895d15480b34d0fcf94fd3fcb5f5966121", "html_url": "https://github.com/rust-lang/rust/commit/70edab895d15480b34d0fcf94fd3fcb5f5966121"}, {"sha": "e8b2e7b01ce9415f448318e4acc161195efcfbb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b2e7b01ce9415f448318e4acc161195efcfbb6", "html_url": "https://github.com/rust-lang/rust/commit/e8b2e7b01ce9415f448318e4acc161195efcfbb6"}], "stats": {"total": 83, "additions": 17, "deletions": 66}, "files": [{"sha": "ef32a9924935fab12e7554f44d31c88225612cc4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 63, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9c7aca58fca17b45ae52aacc5364db2563093bf9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7aca58fca17b45ae52aacc5364db2563093bf9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9c7aca58fca17b45ae52aacc5364db2563093bf9", "patch": "@@ -438,31 +438,6 @@ impl<'a> TokenStreamLowering<'a> {\n     }\n }\n \n-struct ImplTraitTypeIdVisitor<'a> {\n-    ids: &'a mut SmallVec<[NodeId; 1]>,\n-}\n-\n-impl Visitor<'_> for ImplTraitTypeIdVisitor<'_> {\n-    fn visit_ty(&mut self, ty: &Ty) {\n-        match ty.kind {\n-            TyKind::Typeof(_) | TyKind::BareFn(_) => return,\n-\n-            TyKind::ImplTrait(id, _) => self.ids.push(id),\n-            _ => {}\n-        }\n-        visit::walk_ty(self, ty);\n-    }\n-\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &PathSegment) {\n-        if let Some(ref p) = path_segment.args {\n-            if let GenericArgs::Parenthesized(_) = **p {\n-                return;\n-            }\n-        }\n-        visit::walk_path_segment(self, path_span, path_segment)\n-    }\n-}\n-\n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_crate(mut self, c: &Crate) -> hir::Crate<'hir> {\n         /// Full-crate AST visitor that inserts into a fresh\n@@ -1789,14 +1764,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n-    fn lower_local(&mut self, l: &Local) -> (hir::Local<'hir>, SmallVec<[NodeId; 1]>) {\n-        let mut ids = SmallVec::<[NodeId; 1]>::new();\n-        if self.sess.features_untracked().impl_trait_in_bindings {\n-            if let Some(ref ty) = l.ty {\n-                let mut visitor = ImplTraitTypeIdVisitor { ids: &mut ids };\n-                visitor.visit_ty(ty);\n-            }\n-        }\n+    fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n         let ty = l.ty.as_ref().map(|t| {\n             let mut capturable_lifetimes;\n             self.lower_ty(\n@@ -1815,17 +1783,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let init = l.init.as_ref().map(|e| self.lower_expr(e));\n         let hir_id = self.lower_node_id(l.id);\n         self.lower_attrs(hir_id, &l.attrs);\n-        (\n-            hir::Local {\n-                hir_id,\n-                ty,\n-                pat: self.lower_pat(&l.pat),\n-                init,\n-                span: l.span,\n-                source: hir::LocalSource::Normal,\n-            },\n-            ids,\n-        )\n+        hir::Local {\n+            hir_id,\n+            ty,\n+            pat: self.lower_pat(&l.pat),\n+            init,\n+            span: l.span,\n+            source: hir::LocalSource::Normal,\n+        }\n     }\n \n     fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> &'hir [Ident] {\n@@ -2445,27 +2410,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt<'hir>; 1]> {\n         let (hir_id, kind) = match s.kind {\n             StmtKind::Local(ref l) => {\n-                let (l, item_ids) = self.lower_local(l);\n-                let mut ids: SmallVec<[hir::Stmt<'hir>; 1]> = item_ids\n-                    .into_iter()\n-                    .map(|item_id| {\n-                        let item_id = hir::ItemId {\n-                            // All the items that `lower_local` finds are `impl Trait` types.\n-                            def_id: self.lower_node_id(item_id).expect_owner(),\n-                        };\n-                        self.stmt(s.span, hir::StmtKind::Item(item_id))\n-                    })\n-                    .collect();\n+                let l = self.lower_local(l);\n                 let hir_id = self.lower_node_id(s.id);\n                 self.alias_attrs(hir_id, l.hir_id);\n-                ids.push({\n-                    hir::Stmt {\n-                        hir_id,\n-                        kind: hir::StmtKind::Local(self.arena.alloc(l)),\n-                        span: s.span,\n-                    }\n-                });\n-                return ids;\n+                return smallvec![hir::Stmt {\n+                    hir_id,\n+                    kind: hir::StmtKind::Local(self.arena.alloc(l)),\n+                    span: s.span,\n+                }];\n             }\n             StmtKind::Item(ref it) => {\n                 // Can only use the ID once."}, {"sha": "7dc9014d3042fc5a3a057b8eb3adc87bae5d3738", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7aca58fca17b45ae52aacc5364db2563093bf9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7aca58fca17b45ae52aacc5364db2563093bf9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=9c7aca58fca17b45ae52aacc5364db2563093bf9", "patch": "@@ -52,6 +52,7 @@ fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V\n     if i >= len {\n         map.extend(repeat(None).take(i - len + 1));\n     }\n+    debug_assert!(map[k].is_none());\n     map[k] = Some(v);\n }\n \n@@ -216,9 +217,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             // Overwrite the dummy hash with the real HIR owner hash.\n             nodes.hash = hash;\n \n-            // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n-            //assert!(data.signature.is_none());\n-\n+            debug_assert!(data.signature.is_none());\n             data.signature =\n                 Some(self.arena.alloc(Owner { parent: entry.parent, node: entry.node }));\n "}]}