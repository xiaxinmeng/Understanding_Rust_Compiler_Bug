{"sha": "593f9293b9a9e3c7ddd2a230578a2284a9163ec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5M2Y5MjkzYjlhOWUzYzdkZGQyYTIzMDU3OGEyMjg0YTkxNjNlYzQ=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2021-03-23T20:24:26Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2021-03-23T20:24:26Z"}, "message": "Add Result::into_err where the Ok variant can never happen", "tree": {"sha": "c1876ae12c56e93fb15f520b56ee50b30d8bb6d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1876ae12c56e93fb15f520b56ee50b30d8bb6d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/593f9293b9a9e3c7ddd2a230578a2284a9163ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/593f9293b9a9e3c7ddd2a230578a2284a9163ec4", "html_url": "https://github.com/rust-lang/rust/commit/593f9293b9a9e3c7ddd2a230578a2284a9163ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/593f9293b9a9e3c7ddd2a230578a2284a9163ec4/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e5814f4520f2c51b5307421db45cd82d134e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e5814f4520f2c51b5307421db45cd82d134e76", "html_url": "https://github.com/rust-lang/rust/commit/79e5814f4520f2c51b5307421db45cd82d134e76"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "20f8095b7d1cee998b7115c3949b65514839ed01", "filename": "library/core/src/result.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/593f9293b9a9e3c7ddd2a230578a2284a9163ec4/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/593f9293b9a9e3c7ddd2a230578a2284a9163ec4/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=593f9293b9a9e3c7ddd2a230578a2284a9163ec4", "patch": "@@ -1167,6 +1167,42 @@ impl<T, E: Into<!>> Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+impl<T: Into<!>, E> Result<T, E> {\n+    /// Returns the contained [`Err`] value, but never panics.\n+    ///\n+    /// Unlike [`unwrap_err`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap_err` as a maintainability safeguard that will fail\n+    /// to compile if the ok type of the `Result` is later changed\n+    /// to a type that can actually occur.\n+    ///\n+    /// [`unwrap_err`]: Result::unwrap_err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_bad_news() -> Result<!, String> {\n+    ///     Err(\"Oops, it failed\".into())\n+    /// }\n+    ///\n+    /// let error: String = only_bad_news().into_err();\n+    /// println!(\"{}\", error);\n+    /// ```\n+    #[inline]\n+    pub fn into_err(self) -> E {\n+        match self {\n+            Ok(x) => x.into(),\n+            Err(e) => e,\n+        }\n+    }\n+}\n+\n impl<T: Deref, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n     ///"}]}