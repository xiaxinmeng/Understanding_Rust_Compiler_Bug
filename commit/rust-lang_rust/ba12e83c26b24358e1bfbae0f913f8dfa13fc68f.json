{"sha": "ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMTJlODNjMjZiMjQzNThlMWJmYmFlMGY5MTNmOGRmYTEzZmM2OGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-19T17:12:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-19T17:12:46Z"}, "message": "Add body as a possible container for items", "tree": {"sha": "25c92eff2ad56df99c5b53886018bf65f9dbd55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c92eff2ad56df99c5b53886018bf65f9dbd55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "html_url": "https://github.com/rust-lang/rust/commit/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd8de3f5e11732d67d0cc9bacda7d3a1b7cf13a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8de3f5e11732d67d0cc9bacda7d3a1b7cf13a", "html_url": "https://github.com/rust-lang/rust/commit/5bd8de3f5e11732d67d0cc9bacda7d3a1b7cf13a"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "4fc3127c414de5c0ed5d2e32f2a1395e658c2890", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "patch": "@@ -335,6 +335,7 @@ pub enum ContainerId {\n     ModuleId(ModuleId),\n     ImplId(ImplId),\n     TraitId(TraitId),\n+    DefWithBodyId(DefWithBodyId),\n }\n \n /// A Data Type\n@@ -478,33 +479,32 @@ pub trait HasModule {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId;\n }\n \n-impl HasModule for FunctionLoc {\n+impl HasModule for ContainerId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        match self.container {\n+        match *self {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n             ContainerId::TraitId(it) => it.lookup(db).container,\n+            ContainerId::DefWithBodyId(it) => it.module(db),\n         }\n     }\n }\n \n+impl HasModule for FunctionLoc {\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n+        self.container.module(db)\n+    }\n+}\n+\n impl HasModule for TypeAliasLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        match self.container {\n-            ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.lookup(db).container,\n-        }\n+        self.container.module(db)\n     }\n }\n \n impl HasModule for ConstLoc {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        match self.container {\n-            ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.lookup(db).container,\n-        }\n+        self.container.module(db)\n     }\n }\n "}, {"sha": "25032927151140438fa209503beff4445b9ecb26", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "patch": "@@ -586,6 +586,7 @@ impl HasResolver for ContainerId {\n             ContainerId::TraitId(it) => it.resolver(db),\n             ContainerId::ImplId(it) => it.resolver(db),\n             ContainerId::ModuleId(it) => it.resolver(db),\n+            ContainerId::DefWithBodyId(it) => it.resolver(db),\n         }\n     }\n }"}, {"sha": "31c90ea1ef07ae8e150fd55b45db05264f96efde", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "patch": "@@ -237,7 +237,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         }));\n                         Some(substs)\n                     }\n-                    ContainerId::ModuleId(_) => None,\n+                    ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n                 };\n \n                 self.write_assoc_resolution(id, item.into());"}, {"sha": "d0b2b016d5f14de783814960930ccf6cdb5ce867", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "patch": "@@ -6,8 +6,8 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, FunctionId,\n-    HasModule, ImplId, Lookup, TraitId,\n+    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, ContainerId,\n+    FunctionId, HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n@@ -451,12 +451,12 @@ fn transform_receiver_ty(\n     self_ty: &Canonical<Ty>,\n ) -> Option<Ty> {\n     let substs = match function_id.lookup(db).container {\n-        hir_def::ContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n+        ContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n-        hir_def::ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n-        hir_def::ContainerId::ModuleId(_) => unreachable!(),\n+        ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n+        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n     Some(sig.params()[0].clone().subst(&substs))"}, {"sha": "34defc1a201dd4bbeea82ab93b8c94e36d81258d", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "patch": "@@ -157,6 +157,6 @@ fn parent_generic_def(db: &impl DefDatabase, def: GenericDefId) -> Option<Generi\n     match container {\n         ContainerId::ImplId(it) => Some(it.into()),\n         ContainerId::TraitId(it) => Some(it.into()),\n-        ContainerId::ModuleId(_) => None,\n+        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n     }\n }"}]}