{"sha": "1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTMyYjM3MjFhMzU4MWNmOGE0YWUyY2U2NDg2YTAxYTNiOWNhYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-22T23:09:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-22T23:09:36Z"}, "message": "auto merge of #5092 : brson/rust/legacy, r=brson", "tree": {"sha": "8a12069afdca55cf32f090b3eb782e8e82a4e834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a12069afdca55cf32f090b3eb782e8e82a4e834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "html_url": "https://github.com/rust-lang/rust/commit/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc4e3f6a21c3c5d92873f490b646358ea395f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc4e3f6a21c3c5d92873f490b646358ea395f9e", "html_url": "https://github.com/rust-lang/rust/commit/1bc4e3f6a21c3c5d92873f490b646358ea395f9e"}, {"sha": "ddd9fb6c1e3962518289dfd62e2c206e644871d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd9fb6c1e3962518289dfd62e2c206e644871d2", "html_url": "https://github.com/rust-lang/rust/commit/ddd9fb6c1e3962518289dfd62e2c206e644871d2"}], "stats": {"total": 162, "additions": 64, "deletions": 98}, "files": [{"sha": "89c86c1cf430f820f959efdf6015e99c953d153a", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n struct X { mut x: int }\n \n-fn f1(a: X, b: &mut int, -c: int) -> int {\n+fn f1(a: &mut X, b: &mut int, -c: int) -> int {\n     let r = a.x + *b + c;\n     a.x = 0;\n     *b = 10;\n@@ -24,7 +23,7 @@ fn f2(a: int, f: fn(int)) -> int { f(1); return a; }\n \n pub fn main() {\n     let mut a = X {mut x: 1}, b = 2, c = 3;\n-    assert (f1(a, &mut b, c) == 6);\n+    assert (f1(&mut a, &mut b, c) == 6);\n     assert (a.x == 0);\n     assert (b == 10);\n     assert (f2(a.x, |x| a.x = 50 ) == 0);"}, {"sha": "b23ce1122678431a20396255edbb895fee6c33b4", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,16 +9,15 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n-fn iter_vec<T>(v: ~[T], f: fn(T)) { for v.each |x| { f(*x); } }\n+fn iter_vec<T>(v: ~[T], f: fn(&T)) { for v.each |x| { f(x); } }\n \n pub fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7];\n     let mut odds = 0;\n     iter_vec(v, |i| {\n         log(error, i);\n-        if i % 2 == 1 {\n+        if *i % 2 == 1 {\n             odds += 1;\n         }\n         log(error, odds);"}, {"sha": "df49fc6a4ef5c70f67b5707f6b68e8c8eb6f5258", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,17 +9,16 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n-fn iter_vec<T>(v: ~[T], f: fn(T)) { for v.each |x| { f(*x); } }\n+fn iter_vec<T>(v: ~[T], f: fn(&T)) { for v.each |x| { f(x); } }\n \n pub fn main() {\n     let v = ~[1, 2, 3, 4, 5];\n     let mut sum = 0;\n     iter_vec(copy v, |i| {\n         iter_vec(copy v, |j| {\n-            log(error, i * j);\n-            sum += i * j;\n+            log(error, *i * *j);\n+            sum += *i * *j;\n         });\n     });\n     log(error, sum);"}, {"sha": "33202193acbc86c1d720edcc226dc60c891ef7f4", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n fn foo(i: int) -> int { i + 1 }\n "}, {"sha": "e5c82f9edb019639c9a760f9e2cd1b176c12572e", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -11,8 +11,6 @@\n // xfail-fast\n // -*- rust -*-\n \n-#[legacy_modes];\n-\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n@@ -21,7 +19,7 @@ fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(&&v1: @int, &&v2: @int) -> bool { return v1 == v2; }\n+    fn compare_box(v1: @int, v2: @int) -> bool { return v1 == v2; }\n     test_generic::<@int>(@1, compare_box);\n }\n "}, {"sha": "7f1c2e17dd524d7f9caf4993acb5f238ed3403d4", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -11,8 +11,6 @@\n // xfail-fast\n // -*- rust -*-\n \n-#[legacy_modes];\n-\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n@@ -24,7 +22,7 @@ fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(&&v1: ~int, &&v2: ~int) -> bool { return v1 == v2; }\n+    fn compare_box(v1: ~int, v2: ~int) -> bool { return v1 == v2; }\n     test_generic::<~int>(~1, compare_box);\n }\n "}, {"sha": "dcffcd0ad23f6bb8bd8add6c00d3e63b1be849c8", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-fast\n // -*- rust -*-\n-#[legacy_modes];\n \n type compare<T> = fn@(T, T) -> bool;\n \n@@ -20,7 +19,7 @@ fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n }\n \n fn test_bool() {\n-    fn compare_bool(&&b1: bool, &&b2: bool) -> bool { return b1 == b2; }\n+    fn compare_bool(b1: bool, b2: bool) -> bool { return b1 == b2; }\n     test_generic::<bool>(true, compare_bool);\n }\n "}, {"sha": "ef726e47df3c9808e5f3b0e98a77b6c67485abca", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -11,7 +11,6 @@\n \n \n // xfail-fast\n-#[legacy_modes];\n \n // Tests for standalone blocks as expressions with dynamic type sizes\n type compare<T> = fn@(T, T) -> bool;\n@@ -22,7 +21,7 @@ fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n }\n \n fn test_bool() {\n-    fn compare_bool(&&b1: bool, &&b2: bool) -> bool { return b1 == b2; }\n+    fn compare_bool(b1: bool, b2: bool) -> bool { return b1 == b2; }\n     test_generic::<bool>(true, compare_bool);\n }\n "}, {"sha": "21080280d2c4c10886678f0756f984080dce2b16", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,19 +9,18 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n-fn f(arg: A) {\n+fn f(arg: &A) {\n     arg.a = 100;\n }\n \n struct A { mut a: int }\n \n pub fn main() {\n     let x = A {a: 10};\n-    f(x);\n+    f(&x);\n     assert x.a == 100;\n     x.a = 20;\n-    f(copy x);\n+    f(&copy x);\n     assert x.a == 20;\n }"}, {"sha": "4e52fec5c195531c4c8e86708b69700f6c27a608", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-fast\n // -*- rust -*-\n-#[legacy_modes];\n \n // Tests for if as expressions with dynamic type sizes\n type compare<T> = fn@(T, T) -> bool;\n@@ -21,7 +20,7 @@ fn test_generic<T:Copy>(expected: T, not_expected: T, eq: compare<T>) {\n }\n \n fn test_bool() {\n-    fn compare_bool(&&b1: bool, &&b2: bool) -> bool { return b1 == b2; }\n+    fn compare_bool(b1: bool, b2: bool) -> bool { return b1 == b2; }\n     test_generic::<bool>(true, false, compare_bool);\n }\n "}, {"sha": "a1b41ca4b5278707c0e2b41b2a5a6f0dcd04c8be", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n fn fix_help<A, B>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     return f( |a| fix_help(f, a), x);\n@@ -19,7 +18,7 @@ fn fix<A, B>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     return |a| fix_help(f, a);\n }\n \n-fn fact_(f: fn@(&&v: int) -> int, &&n: int) -> int {\n+fn fact_(f: fn@(v: int) -> int, n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "dfd52940e73c4eef083bd0359f697263cf41ed2d", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n fn fix_help<A:&static,B:Owned>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     return f(|a| fix_help(f, a), x);\n@@ -19,7 +18,7 @@ fn fix<A:&static,B:Owned>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     return |a| fix_help(f, a);\n }\n \n-fn fact_(f: fn@(&&v: int) -> int, &&n: int) -> int {\n+fn fact_(f: fn@(v: int) -> int, n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "d9c6dcef1f5cb158eab6ac5d420f09e86583c52c", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n fn mk() -> int { return 1; }\n \n-fn chk(&&a: int) { log(debug, a); assert (a == 1); }\n+fn chk(a: int) { log(debug, a); assert (a == 1); }\n \n fn apply<T>(produce: extern fn() -> T,\n             consume: extern fn(T)) {\n@@ -22,6 +21,6 @@ fn apply<T>(produce: extern fn() -> T,\n \n pub fn main() {\n     let produce: extern fn() -> int = mk;\n-    let consume: extern fn(&&v: int) = chk;\n+    let consume: extern fn(v: int) = chk;\n     apply::<int>(produce, consume);\n }"}, {"sha": "a8533b574e86cc5e771dbb75f1365f9ceab7b889", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -14,8 +14,6 @@\n // However, the condition it was testing seemed complex enough to\n // warrant still having a test, so I inlined the old definitions.\n \n-#[legacy_modes];\n-\n trait iterable<A> {\n     fn iter(blk: fn(A));\n }\n@@ -34,7 +32,7 @@ fn filter<A,IA:iterable<A>>(self: IA, prd: fn@(A) -> bool, blk: fn(A)) {\n     }\n }\n \n-fn foldl<A,B,IA:iterable<A>>(self: IA, +b0: B, blk: fn(B, A) -> B) -> B {\n+fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: fn(B, A) -> B) -> B {\n     let mut b = b0;\n     do self.iter |a| {\n         b = blk(b, a);\n@@ -52,7 +50,7 @@ fn range(lo: uint, hi: uint, it: fn(uint)) {\n \n pub fn main() {\n     let range: fn@(fn&(uint)) = |a| range(0u, 1000u, a);\n-    let filt: fn@(fn&(&&v: uint)) = |a| filter(\n+    let filt: fn@(fn&(v: uint)) = |a| filter(\n         range,\n         |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n         a);"}, {"sha": "5f4e6e984a44b832d5a4ce6c28678ed8d615561b", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,42 +9,41 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n trait vec_monad<A> {\n-    fn bind<B:Copy>(f: fn(A) -> ~[B]) -> ~[B];\n+    fn bind<B:Copy>(f: fn(&A) -> ~[B]) -> ~[B];\n }\n \n impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B:Copy>(f: fn(A) -> ~[B]) -> ~[B] {\n+    fn bind<B:Copy>(f: fn(&A) -> ~[B]) -> ~[B] {\n         let mut r = ~[];\n-        for self.each |elt| { r += f(*elt); }\n+        for self.each |elt| { r += f(elt); }\n         r\n     }\n }\n \n trait option_monad<A> {\n-    fn bind<B>(f: fn(A) -> Option<B>) -> Option<B>;\n+    fn bind<B>(f: fn(&A) -> Option<B>) -> Option<B>;\n }\n \n impl<A> option_monad<A> for Option<A> {\n-    fn bind<B>(f: fn(A) -> Option<B>) -> Option<B> {\n+    fn bind<B>(f: fn(&A) -> Option<B>) -> Option<B> {\n         match self {\n-          Some(ref a) => { f(*a) }\n+          Some(ref a) => { f(a) }\n           None => { None }\n         }\n     }\n }\n \n fn transform(x: Option<int>) -> Option<~str> {\n-    x.bind(|n| Some(n + 1) ).bind(|n| Some(int::str(n)) )\n+    x.bind(|n| Some(*n + 1) ).bind(|n| Some(int::str(*n)) )\n }\n \n pub fn main() {\n     assert transform(Some(10)) == Some(~\"11\");\n     assert transform(None) == None;\n     assert (~[~\"hi\"])\n-        .bind(|x| ~[copy x, x + ~\"!\"] )\n-        .bind(|x| ~[copy x, x + ~\"?\"] ) ==\n+        .bind(|x| ~[copy *x, *x + ~\"!\"] )\n+        .bind(|x| ~[copy *x, *x + ~\"?\"] ) ==\n         ~[~\"hi\", ~\"hi?\", ~\"hi!\", ~\"hi!?\"];\n }"}, {"sha": "c9e8c6f4b14918b873695a88b923e4fe960a3177", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n struct Point {\n     x: int,"}, {"sha": "b25a95cbb8a5667b8fe6a16cd09dd6deb223e2c2", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n use core::bool;\n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};"}, {"sha": "ea981dc5fb70a76489e39139f641d67275541088", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n fn region_identity(x: &r/uint) -> &r/uint { x }\n "}, {"sha": "d32a60ee4f84b4b17bdab769c279035e155c6f6c", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n struct Arg<T> {val: T, fin: extern fn(T)}\n \n@@ -31,7 +30,7 @@ fn finish<T:Copy>(arg: Arg<T>) -> finish<T> {\n \n pub fn main() {\n     let box = @mut 10;\n-    fn dec_box(&&i: @mut int) { *i -= 1; }\n+    fn dec_box(i: @mut int) { *i -= 1; }\n \n     { let _i = finish(Arg{val: box, fin: dec_box}); }\n     assert (*box == 9);"}, {"sha": "2f0f9e5ae6ad7a18d6101a6ba9e9744a477143ec", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,22 +9,21 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n use cmp::Eq;\n \n-fn iter<T>(v: ~[T], it: fn(T) -> bool) {\n+fn iter<T>(v: ~[T], it: fn(&T) -> bool) {\n     let mut i = 0u, l = v.len();\n     while i < l {\n-        if !it(v[i]) { break; }\n+        if !it(&v[i]) { break; }\n         i += 1u;\n     }\n }\n \n fn find_pos<T:Eq + Copy>(n: T, h: ~[T]) -> Option<uint> {\n     let mut i = 0u;\n     for iter(copy h) |e| {\n-        if e == n { return Some(i); }\n+        if *e == n { return Some(i); }\n         i += 1u;\n     }\n     None\n@@ -33,9 +32,9 @@ fn find_pos<T:Eq + Copy>(n: T, h: ~[T]) -> Option<uint> {\n fn bail_deep(x: ~[~[bool]]) {\n     let mut seen = false;\n     for iter(copy x) |x| {\n-        for iter(copy x) |x| {\n+        for iter(copy *x) |x| {\n             assert !seen;\n-            if x { seen = true; return; }\n+            if *x { seen = true; return; }\n         }\n     }\n     assert !seen;\n@@ -44,7 +43,7 @@ fn bail_deep(x: ~[~[bool]]) {\n fn ret_deep() -> ~str {\n     for iter(~[1, 2]) |e| {\n         for iter(~[3, 4]) |x| {\n-            if e + x > 4 { return ~\"hi\"; }\n+            if *e + *x > 4 { return ~\"hi\"; }\n         }\n     }\n     return ~\"bye\";"}, {"sha": "8ae976ccadec29a33425b76a897b3bf8e20ff1af", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n pub fn main() { test05(); }\n \n@@ -19,23 +18,23 @@ fn make_generic_record<A:Copy,B:Copy>(a: A, b: B) -> Pair<A,B> {\n     return Pair {a: a, b: b};\n }\n \n-fn test05_start(&&f: fn~(&&v: float, &&v: ~str) -> Pair<float, ~str>) {\n-    let p = f(22.22f, ~\"Hi\");\n+fn test05_start(f: &~fn(v: float, v: ~str) -> Pair<float, ~str>) {\n+    let p = (*f)(22.22f, ~\"Hi\");\n     log(debug, copy p);\n     assert p.a == 22.22f;\n     assert p.b == ~\"Hi\";\n \n-    let q = f(44.44f, ~\"Ho\");\n+    let q = (*f)(44.44f, ~\"Ho\");\n     log(debug, copy q);\n     assert q.a == 44.44f;\n     assert q.b == ~\"Ho\";\n }\n \n-fn spawn<A:Copy,B:Copy>(f: extern fn(fn~(A,B)->Pair<A,B>)) {\n+fn spawn<A:Copy,B:Copy>(f: extern fn(&~fn(A,B)->Pair<A,B>)) {\n     let arg = fn~(a: A, b: B) -> Pair<A,B> {\n         return make_generic_record(a, b);\n     };\n-    task::spawn(|| f(arg) );\n+    task::spawn(|| f(&arg) );\n }\n \n fn test05() {"}, {"sha": "099ba326300ee1733a6b7ab96ce3f858d6429cc7", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n fn test(f: fn(uint) -> uint) -> uint {\n     return f(22u);"}, {"sha": "9d7c2fe446d32950a0edee451e4d5eef428da94b", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n pub trait plus {\n     fn plus() -> int;\n@@ -40,16 +39,16 @@ impl uint_utils for uint {\n \n trait vec_utils<T> {\n     fn length_() -> uint;\n-    fn iter_(f: fn(T));\n-    fn map_<U:Copy>(f: fn(T) -> U) -> ~[U];\n+    fn iter_(f: fn(&T));\n+    fn map_<U:Copy>(f: fn(&T) -> U) -> ~[U];\n }\n \n impl<T> vec_utils<T> for ~[T] {\n     fn length_() -> uint { vec::len(self) }\n-    fn iter_(f: fn(T)) { for self.each |x| { f(*x); } }\n-    fn map_<U:Copy>(f: fn(T) -> U) -> ~[U] {\n+    fn iter_(f: fn(&T)) { for self.each |x| { f(x); } }\n+    fn map_<U:Copy>(f: fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n-        for self.each |elt| { r += ~[f(*elt)]; }\n+        for self.each |elt| { r += ~[f(elt)]; }\n         r\n     }\n }\n@@ -59,8 +58,8 @@ pub fn main() {\n     assert (~\"hi\").plus() == 200;\n \n     assert (~[1]).length_().str() == ~\"1\";\n-    assert (~[3, 4]).map_(|a| a + 4 )[0] == 7;\n-    assert (~[3, 4]).map_::<uint>(|a| a as uint + 4u )[0] == 7u;\n+    assert (~[3, 4]).map_(|a| *a + 4 )[0] == 7;\n+    assert (~[3, 4]).map_::<uint>(|a| *a as uint + 4u )[0] == 7u;\n     let mut x = 0u;\n     10u.multi(|_n| x += 2u );\n     assert x == 20u;"}, {"sha": "21c141d18a2d89ab2142bc714cb5b47964474538", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n extern mod std;\n \n-fn start(c: comm::Chan<comm::Chan<~str>>) {\n+fn start(c: &comm::Chan<comm::Chan<~str>>) {\n     let (p, ch) = comm::stream();\n     c.send(ch);\n \n@@ -29,7 +28,7 @@ fn start(c: comm::Chan<comm::Chan<~str>>) {\n \n pub fn main() {\n     let (p, ch) = comm::stream();\n-    let child = task::spawn(|| start(ch) );\n+    let child = task::spawn(|| start(&ch) );\n \n     let c = p.recv();\n     c.send(~\"A\");"}, {"sha": "b2012fbd2dd5e17fa1e70173eac1766060f5447d", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,17 +9,16 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n extern mod std;\n \n-fn start(c: comm::Chan<comm::Chan<int>>) {\n+fn start(c: &comm::Chan<comm::Chan<int>>) {\n     let (p, ch) = comm::stream();\n     c.send(ch);\n }\n \n pub fn main() {\n     let (p, ch) = comm::stream();\n-    let child = task::spawn(|| start(ch) );\n+    let child = task::spawn(|| start(&ch) );\n     let c = p.recv();\n }"}, {"sha": "053499ee5ed1fbe3c7e584b8f1c7140a0c086226", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n pub fn main() {\n     let po = comm::PortSet();\n@@ -20,7 +19,7 @@ pub fn main() {\n         log(debug, i);\n         let (p, ch) = comm::stream();\n         po.add(p);\n-        task::spawn({let i = i; || child(i, ch)});\n+        task::spawn({let i = i; || child(i, &ch)});\n         i = i - 1;\n     }\n \n@@ -37,7 +36,7 @@ pub fn main() {\n     debug!(\"main thread exiting\");\n }\n \n-fn child(x: int, ch: comm::Chan<int>) {\n+fn child(x: int, ch: &comm::Chan<int>) {\n     log(debug, x);\n     ch.send(x);\n }"}, {"sha": "308627720622c971963f1544d9d1c6005c620db8", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -10,11 +10,10 @@\n \n // xfail-fast\n // xfail-win32\n-#[legacy_modes];\n \n extern mod std;\n \n-fn start(c: comm::Chan<int>, i0: int) {\n+fn start(c: &comm::Chan<int>, i0: int) {\n     let mut i = i0;\n     while i > 0 {\n         c.send(0);\n@@ -28,6 +27,6 @@ pub fn main() {\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n     let (p, ch) = comm::stream();\n-    task::spawn(|| start(ch, 10));\n+    task::spawn(|| start(&ch, 10));\n     p.recv();\n }"}, {"sha": "9ef76e06d7e83bcbaa0fa3cabfb726784dd43554", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,14 +9,13 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n extern mod std;\n use core::comm::Chan;\n \n pub fn main() { debug!(\"===== WITHOUT THREADS =====\"); test00(); }\n \n-fn test00_start(ch: Chan<int>, message: int, count: int) {\n+fn test00_start(ch: &Chan<int>, message: int, count: int) {\n     debug!(\"Starting test00_start\");\n     let mut i: int = 0;\n     while i < count {\n@@ -45,7 +44,7 @@ fn test00() {\n             results.push(r);\n         }).spawn({\n             let i = i;\n-            || test00_start(ch, i, number_of_messages)\n+            || test00_start(&ch, i, number_of_messages)\n         });\n         i = i + 1;\n     }"}, {"sha": "4e54053865788db3e84ce824dae4ace50bab9114", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,13 +9,12 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n extern mod std;\n \n pub fn main() { test00(); }\n \n-fn test00_start(c: comm::Chan<int>, number_of_messages: int) {\n+fn test00_start(c: &comm::Chan<int>, number_of_messages: int) {\n     let mut i: int = 0;\n     while i < number_of_messages { c.send(i + 0); i += 1; }\n }\n@@ -30,7 +29,7 @@ fn test00() {\n     let mut result = None;\n     do task::task().future_result(|+r| { result = Some(r); }).spawn\n           || {\n-        test00_start(ch, number_of_messages);\n+        test00_start(&ch, number_of_messages);\n     }\n \n     let mut i: int = 0;"}, {"sha": "1f32cc94de97d715f7073718cbfbbe288b301378", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n trait to_str {\n     fn to_str() -> ~str;\n@@ -25,12 +24,12 @@ impl to_str for () {\n }\n \n trait map<T> {\n-    fn map<U:Copy>(f: fn(T) -> U) -> ~[U];\n+    fn map<U:Copy>(f: fn(&T) -> U) -> ~[U];\n }\n impl<T> map<T> for ~[T] {\n-    fn map<U:Copy>(f: fn(T) -> U) -> ~[U] {\n+    fn map<U:Copy>(f: fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n-        for self.each |x| { r += ~[f(*x)]; }\n+        for self.each |x| { r += ~[f(x)]; }\n         r\n     }\n }"}, {"sha": "bd6165806c273aacbdf628f2e0d116d2081f24b9", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n fn p_foo<T>(pinned: T) { }\n fn s_foo<T:Copy>(shared: T) { }"}]}