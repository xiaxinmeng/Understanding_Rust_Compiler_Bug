{"sha": "1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzdhZTE0ZmE1YjRiMjlmNTZkNzA4NWY2MzJkZDYzMDFhZDQ4MTU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-07-13T21:09:46Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-09-24T18:11:50Z"}, "message": "resolve the rustc_reservation_impl attribute in 1 place", "tree": {"sha": "cf6cf1ebb1b4001ebeef9f88e07a698be9bd2fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6cf1ebb1b4001ebeef9f88e07a698be9bd2fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "html_url": "https://github.com/rust-lang/rust/commit/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a94ecde04306986dac1b7ca88b4b327b67ea499", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a94ecde04306986dac1b7ca88b4b327b67ea499", "html_url": "https://github.com/rust-lang/rust/commit/9a94ecde04306986dac1b7ca88b4b327b67ea499"}], "stats": {"total": 178, "additions": 112, "deletions": 66}, "files": [{"sha": "b937d1a30409a67f07393ce59031b6ab4df6f5c9", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -286,7 +286,7 @@ rustc_queries! {\n         query associated_item(_: DefId) -> ty::AssocItem {}\n \n         query impl_trait_ref(_: DefId) -> Option<ty::TraitRef<'tcx>> {}\n-        query impl_polarity(_: DefId) -> hir::ImplPolarity {}\n+        query impl_polarity(_: DefId) -> ty::ImplPolarity {}\n \n         query issue33140_self_ty(_: DefId) -> Option<ty::Ty<'tcx>> {}\n     }"}, {"sha": "c481943e25e37a11d5c1f13362c4789e38e70f43", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -321,7 +321,7 @@ impl AutoTraitFinder<'tcx> {\n                     match vtable {\n                         Vtable::VtableImpl(VtableImplData { impl_def_id, .. }) => {\n                             // Blame tidy for the weird bracket placement\n-                            if infcx.tcx.impl_polarity(*impl_def_id) == hir::ImplPolarity::Negative\n+                            if infcx.tcx.impl_polarity(*impl_def_id) == ty::ImplPolarity::Negative\n                             {\n                                 debug!(\"evaluate_nested_obligations: Found explicit negative impl\\\n                                         {:?}, bailing out\", impl_def_id);"}, {"sha": "61bb53dd334fad7f8f849b1e2bcea20efeec9429", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -50,8 +50,6 @@ use std::iter;\n use std::rc::Rc;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use syntax::symbol::sym;\n-\n pub struct SelectionContext<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n \n@@ -1334,15 +1332,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidate: SelectionCandidate<'tcx>,\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n         if let ImplCandidate(def_id) = candidate {\n-            if !self.allow_negative_impls\n-                && self.tcx().impl_polarity(def_id) == hir::ImplPolarity::Negative\n-            {\n-                return Err(Unimplemented);\n-            }\n-\n-            if self.tcx().has_attr(def_id, sym::rustc_reservation_impl) {\n-                return Ok(None);\n-            }\n+            match self.tcx().impl_polarity(def_id) {\n+                ty::ImplPolarity::Negative if !self.allow_negative_impls => {\n+                    return Err(Unimplemented);\n+                }\n+                ty::ImplPolarity::Reservation => {\n+                    return Ok(None);\n+                }\n+                _ => {}\n+            };\n         }\n         Ok(Some(candidate))\n     }\n@@ -3734,8 +3732,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n-        if self.intercrate.is_none() &&\n-            self.tcx().has_attr(impl_def_id, sym::rustc_reservation_impl)\n+        if self.intercrate.is_none()\n+            && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation\n         {\n             debug!(\"match_impl: reservation impls only apply in intercrate mode\");\n             return Err(());"}, {"sha": "b546a245346660e6cbf58bb17f58c3a4ccfc8220", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -167,6 +167,16 @@ pub struct ImplHeader<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n \n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum ImplPolarity {\n+    /// `impl Trait for Type`\n+    Positive,\n+    /// `impl !Trait for Type`\n+    Negative,\n+    /// `#[rustc_reservation_impl] impl Trait for Type`\n+    Reservation,\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n pub struct AssocItem {\n     pub def_id: DefId,\n@@ -2911,11 +2921,24 @@ impl<'tcx> TyCtxt<'tcx> {\n             return Some(ImplOverlapKind::Permitted);\n         }\n \n-        if self.impl_polarity(def_id1) != self.impl_polarity(def_id2) {\n-            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) - different polarities, None\",\n-                   def_id1, def_id2);\n-            return None;\n-        }\n+        match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {\n+            (ImplPolarity::Reservation, _) |\n+            (_, ImplPolarity::Reservation) => {\n+                // `#[rustc_reservation_impl]` impls don't overlap with anything\n+                debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)\",\n+                       def_id1, def_id2);\n+                return Some(ImplOverlapKind::Permitted);\n+            }\n+            (ImplPolarity::Positive, ImplPolarity::Negative) |\n+            (ImplPolarity::Negative, ImplPolarity::Positive) => {\n+                // FIXME: when can this happen?\n+                debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) - None (differing polarities)\",\n+                       def_id1, def_id2);\n+                return None;\n+            }\n+            (ImplPolarity::Positive, ImplPolarity::Positive) |\n+            (ImplPolarity::Negative, ImplPolarity::Negative) => {}\n+        };\n \n         let is_marker_overlap = if self.features().overlapping_marker_traits {\n             let trait1_is_empty = self.impl_trait_ref(def_id1)\n@@ -2935,15 +2958,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             is_marker_impl(def_id1) && is_marker_impl(def_id2)\n         };\n \n-        // `#[rustc_reservation_impl]` impls don't overlap with anything\n-        let is_reserve_overlap = {\n-            self.has_attr(def_id1, sym::rustc_reservation_impl) ||\n-            self.has_attr(def_id2, sym::rustc_reservation_impl)\n-        };\n \n-        if is_marker_overlap || is_reserve_overlap {\n-            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) ({:?}/{:?})\",\n-                  def_id1, def_id2, is_marker_overlap, is_reserve_overlap);\n+        if is_marker_overlap {\n+            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)\",\n+                   def_id1, def_id2);\n             Some(ImplOverlapKind::Permitted)\n         } else {\n             if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {\n@@ -3325,7 +3343,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n     debug!(\"issue33140_self_ty({:?}), trait-ref={:?}\", def_id, trait_ref);\n \n     let is_marker_like =\n-        tcx.impl_polarity(def_id) == hir::ImplPolarity::Positive &&\n+        tcx.impl_polarity(def_id) == ty::ImplPolarity::Positive &&\n         tcx.associated_item_def_ids(trait_ref.def_id).is_empty();\n \n     // Check whether these impls would be ok for a marker trait."}, {"sha": "9785b69eaf09ed1fec6ed5b44bdc1deaea33c1c4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -722,7 +722,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.get_impl_data(id).parent_impl\n     }\n \n-    pub fn get_impl_polarity(&self, id: DefIndex) -> hir::ImplPolarity {\n+    pub fn get_impl_polarity(&self, id: DefIndex) -> ty::ImplPolarity {\n         self.get_impl_data(id).polarity\n     }\n "}, {"sha": "9bf0eefd9fe704f9a586a357d9bfe203355e0c1e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -1172,8 +1172,9 @@ impl EncodeContext<'tcx> {\n                     ctor_sig: None,\n                 }), repr_options)\n             }\n-            hir::ItemKind::Impl(_, polarity, defaultness, ..) => {\n+            hir::ItemKind::Impl(_, _, defaultness, ..) => {\n                 let trait_ref = tcx.impl_trait_ref(def_id);\n+                let polarity = tcx.impl_polarity(def_id);\n                 let parent = if let Some(trait_ref) = trait_ref {\n                     let trait_def = tcx.trait_def(trait_ref.def_id);\n                     trait_def.ancestors(tcx, def_id).nth(1).and_then(|node| {"}, {"sha": "90967c7933323834a1d1e93888350ebea99c79e3", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -327,7 +327,7 @@ pub struct TraitAliasData<'tcx> {\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ImplData<'tcx> {\n-    pub polarity: hir::ImplPolarity,\n+    pub polarity: ty::ImplPolarity,\n     pub defaultness: hir::Defaultness,\n     pub parent_impl: Option<DefId>,\n "}, {"sha": "51d49f0d59ae7d12be3f1af3f6adc596123df9c5", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n-use rustc::hir::{self, ImplPolarity};\n+use rustc::hir;\n use rustc::traits::{\n     Clause,\n     Clauses,\n@@ -295,7 +295,8 @@ fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n }\n \n fn program_clauses_for_impl(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n-    if let ImplPolarity::Negative = tcx.impl_polarity(def_id) {\n+    // FIXME: implement reservation impls.\n+    if let ty::ImplPolarity::Negative = tcx.impl_polarity(def_id) {\n         return List::empty();\n     }\n "}, {"sha": "e0e878ffdcc47fea4e00f34b3f8bd85b7b73a430", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -94,20 +94,27 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n         //\n         // won't be allowed unless there's an *explicit* implementation of `Send`\n         // for `T`\n-        hir::ItemKind::Impl(_, polarity, defaultness, _, ref trait_ref, ref self_ty, _) => {\n+        hir::ItemKind::Impl(_, _, defaultness, _, ref trait_ref, ref self_ty, _) => {\n             let is_auto = tcx.impl_trait_ref(tcx.hir().local_def_id(item.hir_id))\n-                                .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n+                .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n+            let polarity = tcx.impl_polarity(def_id);\n             if let (hir::Defaultness::Default { .. }, true) = (defaultness, is_auto) {\n                 tcx.sess.span_err(item.span, \"impls of auto traits cannot be default\");\n             }\n-            if polarity == hir::ImplPolarity::Positive {\n-                check_impl(tcx, item, self_ty, trait_ref);\n-            } else {\n-                // FIXME(#27579): what amount of WF checking do we need for neg impls?\n-                if trait_ref.is_some() && !is_auto {\n-                    span_err!(tcx.sess, item.span, E0192,\n-                              \"negative impls are only allowed for \\\n-                               auto traits (e.g., `Send` and `Sync`)\")\n+            match polarity {\n+                ty::ImplPolarity::Positive => {\n+                    check_impl(tcx, item, self_ty, trait_ref);\n+                }\n+                ty::ImplPolarity::Negative => {\n+                    // FIXME(#27579): what amount of WF checking do we need for neg impls?\n+                    if trait_ref.is_some() && !is_auto {\n+                        span_err!(tcx.sess, item.span, E0192,\n+                                  \"negative impls are only allowed for \\\n+                                   auto traits (e.g., `Send` and `Sync`)\")\n+                    }\n+                }\n+                ty::ImplPolarity::Reservation => {\n+                    // FIXME: what amount of WF checking do we need for reservation impls?\n                 }\n             }\n         }\n@@ -401,20 +408,18 @@ fn check_impl<'tcx>(\n                 // `#[rustc_reservation_impl]` impls are not real impls and\n                 // therefore don't need to be WF (the trait's `Self: Trait` predicate\n                 // won't hold).\n-                if !fcx.tcx.has_attr(item_def_id, sym::rustc_reservation_impl) {\n-                    let trait_ref = fcx.tcx.impl_trait_ref(item_def_id).unwrap();\n-                    let trait_ref =\n-                        fcx.normalize_associated_types_in(\n-                            ast_trait_ref.path.span, &trait_ref);\n-                    let obligations =\n-                        ty::wf::trait_obligations(fcx,\n-                                                  fcx.param_env,\n-                                                  fcx.body_id,\n-                                                  &trait_ref,\n-                                                  ast_trait_ref.path.span);\n-                    for obligation in obligations {\n-                        fcx.register_predicate(obligation);\n-                    }\n+                let trait_ref = fcx.tcx.impl_trait_ref(item_def_id).unwrap();\n+                let trait_ref =\n+                    fcx.normalize_associated_types_in(\n+                        ast_trait_ref.path.span, &trait_ref);\n+                let obligations =\n+                    ty::wf::trait_obligations(fcx,\n+                                              fcx.param_env,\n+                                              fcx.body_id,\n+                                              &trait_ref,\n+                                              ast_trait_ref.path.span);\n+                for obligation in obligations {\n+                    fcx.register_predicate(obligation);\n                 }\n             }\n             None => {"}, {"sha": "4503bb264a5f7639ac5ad668501231f400b723ec", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -1866,10 +1866,30 @@ fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     }\n }\n \n-fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> hir::ImplPolarity {\n+fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    match tcx.hir().expect_item(hir_id).node {\n-        hir::ItemKind::Impl(_, polarity, ..) => polarity,\n+    let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n+    let item = tcx.hir().expect_item(hir_id);\n+    match &item.node {\n+        hir::ItemKind::Impl(_, hir::ImplPolarity::Negative, ..) => {\n+            if is_rustc_reservation {\n+                tcx.sess.span_err(item.span, \"reservation impls can't be negative\");\n+            }\n+            ty::ImplPolarity::Negative\n+        }\n+        hir::ItemKind::Impl(_, hir::ImplPolarity::Positive, _, _, None, _, _) => {\n+            if is_rustc_reservation {\n+                tcx.sess.span_err(item.span, \"reservation impls can't be inherent\");\n+            }\n+            ty::ImplPolarity::Positive\n+        }\n+        hir::ItemKind::Impl(_, hir::ImplPolarity::Positive, _, _, Some(_tr), _, _) => {\n+            if is_rustc_reservation {\n+                ty::ImplPolarity::Reservation\n+            } else {\n+                ty::ImplPolarity::Positive\n+            }\n+        }\n         ref item => bug!(\"impl_polarity: {:?} not an impl\", item),\n     }\n }"}, {"sha": "15ada0952c8a379b6d1ab70b848be9925306712a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec7ae14fa5b4b29f56d7085f632dd6301ad4815/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1ec7ae14fa5b4b29f56d7085f632dd6301ad4815", "patch": "@@ -3864,11 +3864,13 @@ pub enum ImplPolarity {\n     Negative,\n }\n \n-impl Clean<ImplPolarity> for hir::ImplPolarity {\n+impl Clean<ImplPolarity> for ty::ImplPolarity {\n     fn clean(&self, _: &DocContext<'_>) -> ImplPolarity {\n         match self {\n-            &hir::ImplPolarity::Positive => ImplPolarity::Positive,\n-            &hir::ImplPolarity::Negative => ImplPolarity::Negative,\n+            &ty::ImplPolarity::Positive |\n+            // FIXME: do we want to do something else here?\n+            &ty::ImplPolarity::Reservation => ImplPolarity::Positive,\n+            &ty::ImplPolarity::Negative => ImplPolarity::Negative,\n         }\n     }\n }\n@@ -3900,6 +3902,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n         let mut ret = Vec::new();\n         let trait_ = self.trait_.clean(cx);\n         let items = self.items.iter().map(|ii| ii.clean(cx)).collect::<Vec<_>>();\n+        let def_id = cx.tcx.hir().local_def_id(self.id);\n \n         // If this impl block is an implementation of the Deref trait, then we\n         // need to try inlining the target's inherent impl blocks as well.\n@@ -3918,7 +3921,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id,\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n@@ -3929,7 +3932,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n                 trait_,\n                 for_: self.for_.clean(cx),\n                 items,\n-                polarity: Some(self.polarity.clean(cx)),\n+                polarity: Some(cx.tcx.impl_polarity(def_id).clean(cx)),\n                 synthetic: false,\n                 blanket_impl: None,\n             })"}]}