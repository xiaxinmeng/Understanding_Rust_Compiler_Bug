{"sha": "2f6e99666218a2f4c0e6b958d710aac445ff85c0", "node_id": "C_kwDOAAsO6NoAKDJmNmU5OTY2NjIxOGEyZjRjMGU2Yjk1OGQ3MTBhYWM0NDVmZjg1YzA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-04T23:24:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-05T11:32:38Z"}, "message": "always check overflow in CheckedBinOp in CTFE", "tree": {"sha": "b87ddb0a449a0290d84794824824bb4f9a09027d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87ddb0a449a0290d84794824824bb4f9a09027d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6e99666218a2f4c0e6b958d710aac445ff85c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6e99666218a2f4c0e6b958d710aac445ff85c0", "html_url": "https://github.com/rust-lang/rust/commit/2f6e99666218a2f4c0e6b958d710aac445ff85c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6e99666218a2f4c0e6b958d710aac445ff85c0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f01ff61b3d9d722031fdb39747283c911b97049", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f01ff61b3d9d722031fdb39747283c911b97049", "html_url": "https://github.com/rust-lang/rust/commit/6f01ff61b3d9d722031fdb39747283c911b97049"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "34644f4eb37d29159569f426899854c23ffcc860", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6e99666218a2f4c0e6b958d710aac445ff85c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6e99666218a2f4c0e6b958d710aac445ff85c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=2f6e99666218a2f4c0e6b958d710aac445ff85c0", "patch": "@@ -144,6 +144,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         true\n     }\n \n+    /// Whether CheckedBinOp MIR statements should actually check for overflow.\n+    fn check_binop_checks_overflow(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+\n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n     /// constants, ...\n@@ -468,6 +471,11 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         true\n     }\n \n+    #[inline(always)]\n+    fn check_binop_checks_overflow(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+        true\n+    }\n+\n     #[inline(always)]\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,"}, {"sha": "942bdb36645bde6cc3add4e810f6537994ffef35", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f6e99666218a2f4c0e6b958d710aac445ff85c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6e99666218a2f4c0e6b958d710aac445ff85c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=2f6e99666218a2f4c0e6b958d710aac445ff85c0", "patch": "@@ -32,7 +32,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         );\n         // As per https://github.com/rust-lang/rust/pull/98738, we always return `false` in the 2nd\n         // component when overflow checking is disabled.\n-        let overflowed = overflowed && (force_overflow_checks || self.tcx.sess.overflow_checks());\n+        let overflowed =\n+            overflowed && (force_overflow_checks || M::check_binop_checks_overflow(self));\n         // Write the result to `dest`.\n         if let Abi::ScalarPair(..) = dest.layout.abi {\n             // We can use the optimized path and avoid `place_field` (which might do"}, {"sha": "2f4c0ae96b38391f4800f41f37616f380c8ad577", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6e99666218a2f4c0e6b958d710aac445ff85c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6e99666218a2f4c0e6b958d710aac445ff85c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=2f6e99666218a2f4c0e6b958d710aac445ff85c0", "patch": "@@ -993,8 +993,9 @@ pub enum Rvalue<'tcx> {\n \n     /// Same as `BinaryOp`, but yields `(T, bool)` with a `bool` indicating an error condition.\n     ///\n-    /// When overflow checking is disabled, the error condition is false. Otherwise, the error\n-    /// condition is determined as described below.\n+    /// When overflow checking is disabled and we are generating run-time code, the error condition\n+    /// is false. Otherwise, and always during CTFE, the error condition is determined as described\n+    /// below.\n     ///\n     /// For addition, subtraction, and multiplication on integers the error condition is set when\n     /// the infinite precision result would be unequal to the actual result."}]}