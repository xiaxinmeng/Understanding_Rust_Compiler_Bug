{"sha": "1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWJmYzcxNWY4ZGZlMzZhMzhkOGZhZTM2ZmNiZTkyZTc0NjNhM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-04T12:30:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-04T12:30:27Z"}, "message": "Auto merge of #47832 - fintelia:vec-index, r=kennytm\n\nHave Vec use slice's implementations of Index<I> and IndexMut<I>\n\nThis PR simplifies the implementation of Index and IndexMut on Vec, and in the process enables indexing Vec by any user types that implement SliceIndex.\n\nThe stability annotations probably need to be changed, but I wasn't sure of the right way to do that. It also wasn't completely clear to me if this change could break any existing code.", "tree": {"sha": "f918a6637865c6e3ad5e775fc2a96ea988e24a03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f918a6637865c6e3ad5e775fc2a96ea988e24a03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "html_url": "https://github.com/rust-lang/rust/commit/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d", "html_url": "https://github.com/rust-lang/rust/commit/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d"}, {"sha": "370df40dab8df9f3c0b10bb7396225b8d24869b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/370df40dab8df9f3c0b10bb7396225b8d24869b3", "html_url": "https://github.com/rust-lang/rust/commit/370df40dab8df9f3c0b10bb7396225b8d24869b3"}], "stats": {"total": 153, "additions": 19, "deletions": 134}, "files": [{"sha": "feed7c8699a3ebf0cbb8a4822bf91fa2bb209697", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 11, "deletions": 127, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "patch": "@@ -1527,142 +1527,26 @@ impl<T: Hash> Hash for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> Index<usize> for Vec<T> {\n-    type Output = T;\n-\n-    #[inline]\n-    fn index(&self, index: usize) -> &T {\n-        // NB built-in indexing via `&[T]`\n-        &(**self)[index]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> IndexMut<usize> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: usize) -> &mut T {\n-        // NB built-in indexing via `&mut [T]`\n-        &mut (**self)[index]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::Range<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::Range<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeTo<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, _index: ops::RangeFull) -> &[T] {\n-        self\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeInclusive<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeInclusive<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeToInclusive<usize>> for Vec<T> {\n-    type Output = [T];\n+impl<T, I> Index<I> for Vec<T>\n+where\n+    I: ::core::slice::SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n \n     #[inline]\n-    fn index(&self, index: ops::RangeToInclusive<usize>) -> &[T] {\n+    fn index(&self, index: I) -> &Self::Output {\n         Index::index(&**self, index)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] {\n-        self\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for Vec<T> {\n+impl<T, I> IndexMut<I> for Vec<T>\n+where\n+    I: ::core::slice::SliceIndex<[T]>,\n+{\n     #[inline]\n-    fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] {\n+    fn index_mut(&mut self, index: I) -> &mut Self::Output {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }"}, {"sha": "4b01afb8131b709d6d9e97b441aef88b32deac6f", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "patch": "@@ -13,10 +13,10 @@ pub fn main() {\n     let s: String = \"abcdef\".to_string();\n     v[3_usize];\n     v[3];\n-    v[3u8];  //~ERROR : std::ops::Index<u8>` is not satisfied\n-    v[3i8];  //~ERROR : std::ops::Index<i8>` is not satisfied\n-    v[3u32]; //~ERROR : std::ops::Index<u32>` is not satisfied\n-    v[3i32]; //~ERROR : std::ops::Index<i32>` is not satisfied\n+    v[3u8];  //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n+    v[3i8];  //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n+    v[3u32]; //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n+    v[3i32]; //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n     s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR : std::slice::SliceIndex<[u8]>` is not satisfied"}, {"sha": "ae3cd529ac42e499454f1909ed0fb1c34f79838b", "filename": "src/test/ui/index-help.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "patch": "@@ -1,10 +1,11 @@\n-error[E0277]: the trait bound `std::vec::Vec<{integer}>: std::ops::Index<i32>` is not satisfied\n+error[E0277]: the trait bound `i32: std::slice::SliceIndex<[{integer}]>` is not satisfied\n   --> $DIR/index-help.rs:13:5\n    |\n LL |     x[0i32]; //~ ERROR E0277\n-   |     ^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n-   = help: the trait `std::ops::Index<i32>` is not implemented for `std::vec::Vec<{integer}>`\n+   = help: the trait `std::slice::SliceIndex<[{integer}]>` is not implemented for `i32`\n+   = note: required because of the requirements on the impl of `std::ops::Index<i32>` for `std::vec::Vec<{integer}>`\n \n error: aborting due to previous error\n "}]}