{"sha": "2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjcxNmYwNDU4N2ViMzc5YmY3NzE1ZjFkZDdkN2E0NmM4ZjdlYWI=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T08:32:35Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T09:14:05Z"}, "message": "all: DRY for lint descriptions\n\n* use the rustc style for lint descriptions\n* add a script to parse all lint descriptions\n  and put the generated table into README", "tree": {"sha": "4ef0e1e934f1005c674a2dc328f616334f68a023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef0e1e934f1005c674a2dc328f616334f68a023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "html_url": "https://github.com/rust-lang/rust/commit/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfa02938d03cf5a9994b014937aacecb0bc99c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfa02938d03cf5a9994b014937aacecb0bc99c6", "html_url": "https://github.com/rust-lang/rust/commit/8dfa02938d03cf5a9994b014937aacecb0bc99c6"}], "stats": {"total": 250, "additions": 180, "deletions": 70}, "files": [{"sha": "193d759ff904375dd33ab8625b2856c1d9247db8", "filename": "README.md", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -6,35 +6,42 @@ A collection of lints that give helpful tips to newbies and catch oversights.\n ##Lints\n Lints included in this crate:\n \n- - `single_match`: Warns when a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used, and recommends `if let` instead.\n- - `box_vec`: Warns on usage of `Box<Vec<T>>`\n- - `linkedlist`: Warns on usage of `LinkedList`\n- - `str_to_string`: Warns on usage of `str::to_string()`\n- - `toplevel_ref_arg`: Warns when a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n- - `eq_op`: Warns on equal operands on both sides of a comparison or bitwise combination\n- - `bad_bit_mask`: Denies expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n- - `ineffective_bit_mask`: Warns on expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n- - `needless_bool` : Warns on if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n- - `ptr_arg`: Warns on fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n- - `approx_constant`: Warns if the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found and suggests to use the constant\n- - `cmp_nan`: Denies comparisons to NAN (which will always return false, which is probably not intended)\n- - `float_cmp`: Warns on `==` or `!=` comparisons of floaty typed values. As floating-point operations usually involve rounding errors, it is always better to check for approximate equality within some small bounds\n- - `precedence`: Warns on expressions where precedence may trip up the unwary reader of the source and suggests adding parenthesis, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n- - `redundant_closure`: Warns on usage of eta-reducible closures like `|a| foo(a)` (which can be written as just `foo`)\n- - `identity_op`: Warns on identity operations like `x + 0` or `y / 1` (which can be reduced to `x` and `y`, respectively)\n- - `mut_mut`: Warns on `&mut &mut` which is either a copy'n'paste error, or shows a fundamental misunderstanding of references\n- - `len_zero`: Warns on `_.len() == 0` and suggests using `_.is_empty()` (or similar comparisons with `>` or `!=`)\n- - `len_without_is_empty`: Warns on traits or impls that have a `.len()` but no `.is_empty()` method\n- - `cmp_owned`: Warns on creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n- - `inline_always`: Warns on `#[inline(always)]`, because in most cases it is a bad idea\n- - `collapsible_if`: Warns on cases where two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n- - `zero_width_space`: Warns on encountering a unicode zero-width space\n- - `string_add_assign`: Warns on `x = x + ..` where `x` is a `String` and suggests using `push_str(..)` instead.\n- - `needless_return`: Warns on using `return expr;` when a simple `expr` would suffice.\n- - `let_and_return`: Warns on doing `let x = expr; x` at the end of a function.\n- - `option_unwrap_used`: Warns when `Option.unwrap()` is used, and suggests `.expect()`.\n- - `result_unwrap_used`: Warns when `Result.unwrap()` is used (silent by default).\n- - `modulo_one`: Warns on taking a number modulo 1, which always has a result of 0.\n+name                 | default | meaning\n+---------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+approx_constant      | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n+bad_bit_mask         | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+box_vec              | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n+cmp_nan              | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n+cmp_owned            | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n+collapsible_if       | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+eq_op                | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n+float_cmp            | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+identity_op          | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+ineffective_bit_mask | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n+inline_always        | warn    | `#[inline(always)]` is a bad idea in most cases\n+len_without_is_empty | warn    | traits and impls that have `.len()` but not `.is_empty()`\n+len_zero             | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n+let_and_return       | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n+let_unit_value       | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n+linkedlist           | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n+modulo_one           | warn    | taking a number modulo 1, which always returns 0\n+mut_mut              | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n+needless_bool        | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n+needless_lifetimes   | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+needless_range_loop  | warn    | for-looping over a range of indices where an iterator over items would do\n+needless_return      | warn    | using a return statement like `return expr;` where an expression would suffice\n+non_ascii_literal    | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n+option_unwrap_used   | warn    | using `Option.unwrap()`, which should at least get a better message using `expect()`\n+precedence           | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n+ptr_arg              | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+redundant_closure    | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+result_unwrap_used   | allow   | using `Result.unwrap()`, which might be better handled\n+single_match         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n+str_to_string        | warn    | using `to_string()` on a str, which should be `to_owned()`\n+string_add_assign    | warn    | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n+string_to_string     | warn    | calling `String.to_string()` which is a no-op\n+toplevel_ref_arg     | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n+zero_width_space     | deny    | using a zero-width space in a string literal, which is confusing\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "3c39b79885c9a74d25d2cf71eb049e14a9e4a17a", "filename": "src/approx_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -12,7 +12,8 @@ use utils::span_lint;\n declare_lint! {\n     pub APPROX_CONSTANT,\n     Warn,\n-    \"Warn if a user writes an approximate known constant in their code\"\n+    \"the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) \\\n+     is found; suggests to use the constant\"\n }\n \n const KNOWN_CONSTS : &'static [(f64, &'static str)] = &[(f64::E, \"E\"), (f64::FRAC_1_PI, \"FRAC_1_PI\"),"}, {"sha": "ca5b6c55cede153a07e5b1b092365aaed3368c9e", "filename": "src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -9,7 +9,7 @@ use syntax::parse::token::InternedString;\n use utils::{in_macro, match_path, span_lint};\n \n declare_lint! { pub INLINE_ALWAYS, Warn,\n-    \"#[inline(always)] is usually a bad idea.\"}\n+    \"`#[inline(always)]` is a bad idea in most cases\" }\n \n \n #[derive(Copy,Clone)]"}, {"sha": "169975001b903e874a6e0c72e729e9258f4d7844", "filename": "src/bit_mask.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -11,15 +11,14 @@ use utils::span_lint;\n declare_lint! {\n     pub BAD_BIT_MASK,\n     Deny,\n-    \"Deny the use of incompatible bit masks in comparisons, e.g. \\\n-     '(a & 1) == 2'\"\n+    \"expressions of the form `_ & mask == select` that will only ever return `true` or `false` \\\n+     (because in the example `select` containing bits that `mask` doesn't have)\"\n }\n \n declare_lint! {\n     pub INEFFECTIVE_BIT_MASK,\n     Warn,\n-    \"Warn on the use of an ineffective bit mask in comparisons, e.g. \\\n-     '(a & 1) > 2'\"\n+    \"expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\"\n }\n \n /// Checks for incompatible bit masks in comparisons, e.g. `x & 1 == 2`."}, {"sha": "f0f53622c47dbd34c65a18387b4a4c1584578f2e", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -23,7 +23,8 @@ use utils::{in_macro, span_help_and_lint, snippet};\n declare_lint! {\n     pub COLLAPSIBLE_IF,\n     Warn,\n-    \"Warn on if expressions that can be collapsed\"\n+    \"two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` \\\n+     can be written as `if x && y { foo() }`\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "495696b810cf60b7ac15baaecf67511095d23284", "filename": "src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -8,7 +8,7 @@ use utils::span_lint;\n declare_lint! {\n     pub EQ_OP,\n     Warn,\n-    \"warn about comparing equal expressions (e.g. x == x)\"\n+    \"equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "484d46ddc214c698142a1ef8d5672940a63d0980", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -11,7 +11,7 @@ pub struct EtaPass;\n \n \n declare_lint!(pub REDUNDANT_CLOSURE, Warn,\n-              \"Warn on usage of redundant closures, i.e. `|a| foo(a)`\");\n+              \"using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\");\n \n impl LintPass for EtaPass {\n     fn get_lints(&self) -> LintArray {"}, {"sha": "964675b765eca632715095760e58c30ee2106a2d", "filename": "src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -10,7 +10,7 @@ use syntax::codemap::Span;\n use utils::{span_lint, snippet};\n \n declare_lint! { pub IDENTITY_OP, Warn,\n-    \"Warn on identity operations, e.g. '_ + 0'\"}\n+                \"using identity operations, e.g. `x + 0` or `y / 1`\" }\n \n #[derive(Copy,Clone)]\n pub struct IdentityOp;"}, {"sha": "d5f3d1ad8100142ea957048ca79d13abdc056a14", "filename": "src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -12,10 +12,11 @@ use syntax::ast::*;\n use utils::{span_lint, walk_ptrs_ty, snippet};\n \n declare_lint!(pub LEN_ZERO, Warn,\n-              \"Warn when .is_empty() could be used instead of checking .len()\");\n+              \"checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` \\\n+               could be used instead\");\n \n declare_lint!(pub LEN_WITHOUT_IS_EMPTY, Warn,\n-              \"Warn on traits and impls that have .len() but not .is_empty()\");\n+              \"traits and impls that have `.len()` but not `.is_empty()`\");\n \n #[derive(Copy,Clone)]\n pub struct LenZero;"}, {"sha": "eb2704cd4bd54e8eb60511f8c4dfb4d2a2bd96af", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -64,16 +64,21 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box loops::LoopsPass as LintPassObject);\n     reg.register_lint_pass(box lifetimes::LifetimePass as LintPassObject);\n \n-    reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n+    reg.register_lint_group(\"clippy\", vec![types::BOX_VEC,\n+                                           types::LINKEDLIST,\n+                                           types::LET_UNIT_VALUE,\n                                            misc::SINGLE_MATCH,\n-                                           misc::TOPLEVEL_REF_ARG, eq_op::EQ_OP,\n+                                           misc::TOPLEVEL_REF_ARG,\n+                                           misc::CMP_NAN,\n+                                           misc::FLOAT_CMP,\n+                                           misc::PRECEDENCE,\n+                                           misc::CMP_OWNED,\n+                                           eq_op::EQ_OP,\n                                            bit_mask::BAD_BIT_MASK,\n                                            bit_mask::INEFFECTIVE_BIT_MASK,\n                                            ptr_arg::PTR_ARG,\n                                            needless_bool::NEEDLESS_BOOL,\n                                            approx_const::APPROX_CONSTANT,\n-                                           misc::CMP_NAN, misc::FLOAT_CMP,\n-                                           misc::PRECEDENCE, misc::CMP_OWNED,\n                                            eta_reduction::REDUNDANT_CLOSURE,\n                                            identity_op::IDENTITY_OP,\n                                            mut_mut::MUT_MUT,\n@@ -85,12 +90,12 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            unicode::NON_ASCII_LITERAL,\n                                            strings::STRING_ADD_ASSIGN,\n                                            returns::NEEDLESS_RETURN,\n+                                           returns::LET_AND_RETURN,\n                                            misc::MODULO_ONE,\n                                            methods::OPTION_UNWRAP_USED,\n                                            methods::RESULT_UNWRAP_USED,\n                                            methods::STR_TO_STRING,\n                                            methods::STRING_TO_STRING,\n-                                           types::LET_UNIT_VALUE,\n                                            lifetimes::NEEDLESS_LIFETIMES,\n                                            loops::NEEDLESS_RANGE_LOOP,\n                                            ]);"}, {"sha": "644537f9be173de9808f9cf94a806bf6b887cb6a", "filename": "src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -7,7 +7,8 @@ use std::collections::HashSet;\n use std::iter::FromIterator;\n \n declare_lint!(pub NEEDLESS_LIFETIMES, Warn,\n-              \"Warn on explicit lifetimes when elision rules would apply\");\n+              \"using explicit lifetimes for references in function arguments when elision rules \\\n+               would allow omitting them\");\n \n #[derive(Copy,Clone)]\n pub struct LifetimePass;"}, {"sha": "b406bc67961942e9b6feec86ff0c1856130ee20a", "filename": "src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -6,7 +6,7 @@ use std::collections::HashSet;\n use utils::{span_lint, get_parent_expr};\n \n declare_lint!{ pub NEEDLESS_RANGE_LOOP, Warn,\n-               \"Warn about looping over a range of indices if a normal iterator would do\" }\n+               \"for-looping over a range of indices where an iterator over items would do\" }\n \n #[derive(Copy, Clone)]\n pub struct LoopsPass;"}, {"sha": "07b0fdf70e21645bf975059f5aca9f3af2b9c226", "filename": "src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -8,13 +8,13 @@ use utils::{span_lint, match_def_path, walk_ptrs_ty};\n pub struct MethodsPass;\n \n declare_lint!(pub OPTION_UNWRAP_USED, Warn,\n-              \"Warn on using unwrap() on an Option value\");\n+              \"using `Option.unwrap()`, which should at least get a better message using `expect()`\");\n declare_lint!(pub RESULT_UNWRAP_USED, Allow,\n-              \"Warn on using unwrap() on a Result value\");\n+              \"using `Result.unwrap()`, which might be better handled\");\n declare_lint!(pub STR_TO_STRING, Warn,\n-              \"Warn when a String could use to_owned() instead of to_string()\");\n+              \"using `to_string()` on a str, which should be `to_owned()`\");\n declare_lint!(pub STRING_TO_STRING, Warn,\n-              \"Warn when calling String.to_string()\");\n+              \"calling `String.to_string()` which is a no-op\");\n \n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {"}, {"sha": "6c9a7d92ce8ce5d7d4a89ebfbec3c69f39ccd20d", "filename": "src/misc.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -16,7 +16,8 @@ pub struct MiscPass;\n \n \n declare_lint!(pub SINGLE_MATCH, Warn,\n-              \"Warn on usage of matches with a single nontrivial arm\");\n+              \"a match statement with a single nontrivial arm (i.e, where the other arm \\\n+               is `_ => {}`) is used; recommends `if let` instead\");\n \n impl LintPass for MiscPass {\n     fn get_lints(&self) -> LintArray {\n@@ -59,7 +60,9 @@ impl LintPass for MiscPass {\n }\n \n \n-declare_lint!(pub TOPLEVEL_REF_ARG, Warn, \"Warn about pattern matches with top-level `ref` bindings\");\n+declare_lint!(pub TOPLEVEL_REF_ARG, Warn,\n+              \"a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not \\\n+               `fn foo((ref x, ref y): (u8, u8))`)\");\n \n #[allow(missing_copy_implementations)]\n pub struct TopLevelRefPass;\n@@ -82,7 +85,8 @@ impl LintPass for TopLevelRefPass {\n     }\n }\n \n-declare_lint!(pub CMP_NAN, Deny, \"Deny comparisons to std::f32::NAN or std::f64::NAN\");\n+declare_lint!(pub CMP_NAN, Deny,\n+              \"comparisons to NAN (which will always return false, which is probably not intended)\");\n \n #[derive(Copy,Clone)]\n pub struct CmpNan;\n@@ -114,7 +118,9 @@ fn check_nan(cx: &Context, path: &Path, span: Span) {\n }\n \n declare_lint!(pub FLOAT_CMP, Warn,\n-              \"Warn on ==/!= comparison of floaty values\");\n+              \"using `==` or `!=` on float values (as floating-point operations \\\n+               usually involve rounding errors, it is always better to check for approximate \\\n+               equality within small bounds)\");\n \n #[derive(Copy,Clone)]\n pub struct FloatCmp;\n@@ -147,7 +153,8 @@ fn is_float(cx: &Context, expr: &Expr) -> bool {\n }\n \n declare_lint!(pub PRECEDENCE, Warn,\n-              \"Warn on mixing bit ops with integer arithmetic without parentheses\");\n+              \"expressions where precedence may trip up the unwary reader of the source; \\\n+               suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\");\n \n #[derive(Copy,Clone)]\n pub struct Precedence;\n@@ -190,7 +197,7 @@ fn is_arith_op(op : BinOp_) -> bool {\n }\n \n declare_lint!(pub CMP_OWNED, Warn,\n-              \"Warn on creating an owned string just for comparison\");\n+              \"creating owned instances for comparing with others, e.g. `x == \\\"foo\\\".to_string()`\");\n \n #[derive(Copy,Clone)]\n pub struct CmpOwned;\n@@ -242,7 +249,7 @@ fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n         walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n }\n \n-declare_lint!(pub MODULO_ONE, Warn, \"Warn on expressions that include % 1, which is always 0\");\n+declare_lint!(pub MODULO_ONE, Warn, \"taking a number modulo 1, which always returns 0\");\n \n #[derive(Copy,Clone)]\n pub struct ModuloOne;"}, {"sha": "a3c40d06f90d15c7052adeee19e9a7487d480896", "filename": "src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -6,7 +6,8 @@ use syntax::codemap::{BytePos, ExpnInfo, Span};\n use utils::{in_macro, span_lint};\n \n declare_lint!(pub MUT_MUT, Warn,\n-              \"Warn on usage of double-mut refs, e.g. '&mut &mut ...'\");\n+              \"usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, \\\n+               or shows a fundamental misunderstanding of references)\");\n \n #[derive(Copy,Clone)]\n pub struct MutMut;"}, {"sha": "6a4a55aeda5de0a03dec05e44f762704507cd3c3", "filename": "src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -15,7 +15,8 @@ use utils::{de_p, span_lint};\n declare_lint! {\n     pub NEEDLESS_BOOL,\n     Warn,\n-    \"Warn on needless use of if x { true } else { false } (or vice versa)\"\n+    \"if-statements with plain booleans in the then- and else-clause, e.g. \\\n+     `if p { true } else { false }`\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "85db4aa7b21dba44024fae36bf95cdb7d5d5063e", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -16,7 +16,8 @@ use utils::span_lint;\n declare_lint! {\n     pub PTR_ARG,\n     Allow,\n-    \"Warn on declaration of a &Vec- or &String-typed method argument\"\n+    \"fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` \\\n+     instead, respectively\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "94b9ec9650f7b1dfdd7e58370466e3dc68ba837b", "filename": "src/returns.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -7,9 +7,10 @@ use rustc::lint::{Context, LintPass, LintArray, Level};\n use utils::{span_lint, snippet, match_path};\n \n declare_lint!(pub NEEDLESS_RETURN, Warn,\n-              \"Warn on using a return statement where an expression would be enough\");\n+              \"using a return statement like `return expr;` where an expression would suffice\");\n declare_lint!(pub LET_AND_RETURN, Warn,\n-              \"Warn on creating a let-binding and then immediately returning it\");\n+              \"creating a let-binding and then immediately returning it like `let x = expr; x` at \\\n+               the end of a function\");\n \n #[derive(Copy,Clone)]\n pub struct ReturnPass;"}, {"sha": "20844be318bb4d729f6615c6149c043565a1353b", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -14,7 +14,7 @@ use utils::{match_def_path, span_lint, walk_ptrs_ty};\n declare_lint! {\n     pub STRING_ADD_ASSIGN,\n     Warn,\n-    \"Warn on `x = x + ..` where x is a `String`\"\n+    \"using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "ad7b767d95ece52fe6a72b119113a40912dcf72b", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -12,9 +12,10 @@ use utils::{in_macro, snippet, span_lint, span_help_and_lint};\n pub struct TypePass;\n \n declare_lint!(pub BOX_VEC, Warn,\n-              \"Warn on usage of Box<Vec<T>>\");\n+              \"usage of `Box<Vec<T>>`, vector elements are already on the heap\");\n declare_lint!(pub LINKEDLIST, Warn,\n-              \"Warn on usage of LinkedList\");\n+              \"usage of LinkedList, usually a vector is faster, or a more specialized data \\\n+               structure like a RingBuf\");\n \n /// Matches a type with a provided string, and returns its type parameters if successful\n pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]> {\n@@ -81,7 +82,7 @@ impl LintPass for TypePass {\n pub struct LetPass;\n \n declare_lint!(pub LET_UNIT_VALUE, Warn,\n-              \"Warn on let-binding a value of unit type\");\n+              \"creating a let binding to a value of unit type, which usually can't be used afterwards\");\n \n \n fn check_let_unit(cx: &Context, decl: &Decl, info: Option<&ExpnInfo>) {"}, {"sha": "62b4a9dadf55ca138989248050d9886228448de6", "filename": "src/unicode.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -3,8 +3,11 @@ use syntax::ast::*;\n use syntax::codemap::{BytePos, Span};\n use utils::span_lint;\n \n-declare_lint!{ pub ZERO_WIDTH_SPACE, Deny, \"Zero-width space is confusing\" }\n-declare_lint!{ pub NON_ASCII_LITERAL, Allow, \"Lint literal non-ASCII chars in literals\" }\n+declare_lint!{ pub ZERO_WIDTH_SPACE, Deny,\n+               \"using a zero-width space in a string literal, which is confusing\" }\n+declare_lint!{ pub NON_ASCII_LITERAL, Allow,\n+               \"using any literal non-ASCII chars in a string literal; suggests \\\n+                using the \\\\u escape instead\" }\n \n #[derive(Copy, Clone)]\n pub struct Unicode;"}, {"sha": "0b54afa83ea91698fb8225eb6f26b8a2c71db416", "filename": "util/update_readme.py", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/util%2Fupdate_readme.py", "raw_url": "https://github.com/rust-lang/rust/raw/2c2716f04587eb379bf7715f1dd7d7a46c8f7eab/util%2Fupdate_readme.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_readme.py?ref=2c2716f04587eb379bf7715f1dd7d7a46c8f7eab", "patch": "@@ -0,0 +1,80 @@\n+# Generate a Markdown table of all lints, and put it in README.md.\n+# With -n option, only print the new table to stdout.\n+\n+import os\n+import re\n+import sys\n+\n+declare_lint_re = re.compile(r'''\n+    declare_lint! \\s* [{(] \\s*\n+    pub \\s+ (?P<name>[A-Z_]+) \\s*,\\s*\n+    (?P<level>Forbid|Deny|Warn|Allow) \\s*,\\s*\n+    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n+''', re.X | re.S)\n+\n+nl_escape_re = re.compile(r'\\\\\\n\\s*')\n+\n+\n+def collect(lints, fp):\n+    code = fp.read()\n+    for match in declare_lint_re.finditer(code):\n+        # remove \\-newline escapes from description string\n+        desc = nl_escape_re.sub('', match.group('desc'))\n+        lints.append((match.group('name').lower(),\n+                      match.group('level').lower(),\n+                      desc.replace('\\\\\"', '\"')))\n+\n+\n+def write_tbl(lints, fp):\n+    # first and third column widths\n+    w_name = max(len(l[0]) for l in lints)\n+    w_desc = max(len(l[2]) for l in lints)\n+    # header and underline\n+    fp.write('%-*s | default | meaning\\n' % (w_name, 'name'))\n+    fp.write('%s-|-%s-|-%s\\n' % ('-' * w_name, '-' * 7, '-' * w_desc))\n+    # one table row per lint\n+    for (name, default, meaning) in sorted(lints):\n+        fp.write('%-*s | %-7s | %s\\n' % (w_name, name, default, meaning))\n+\n+\n+def main(print_only=False):\n+    lints = []\n+\n+    # check directory\n+    if not os.path.isfile('src/lib.rs'):\n+        print('Error: call this script from clippy checkout directory!')\n+        return\n+\n+    # collect all lints from source files\n+    for root, dirs, files in os.walk('src'):\n+        for fn in files:\n+            if fn.endswith('.rs'):\n+                with open(os.path.join(root, fn)) as fp:\n+                    collect(lints, fp)\n+\n+    if print_only:\n+        write_tbl(lints, sys.stdout)\n+        return\n+\n+    # read current README.md content\n+    with open('README.md') as fp:\n+        lines = list(fp)\n+\n+    # replace old table with new table\n+    with open('README.md', 'w') as fp:\n+        in_old_tbl = False\n+        for line in lines:\n+            if line.replace(' ', '').strip() == 'name|default|meaning':\n+                # old table starts here\n+                write_tbl(lints, fp)\n+                in_old_tbl = True\n+            if in_old_tbl:\n+                # the old table is finished by an empty line\n+                if line.strip():\n+                    continue\n+                in_old_tbl = False\n+            fp.write(line)\n+\n+\n+if __name__ == '__main__':\n+    main(print_only='-n' in sys.argv)"}]}