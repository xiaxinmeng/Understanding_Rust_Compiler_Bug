{"sha": "75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "node_id": "C_kwDOAAsO6NoAKDc1ZWYwNjg5MjA4OWUwY2Y1M2I0YTg2NDE5YzdmZjNiM2MxZjNjNGM", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T03:56:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T17:11:28Z"}, "message": "Delete QueryLookup\n\nThis was largely just caching the shard value at this point, which is not\nparticularly useful -- in the use sites the key was being hashed nearby anyway.", "tree": {"sha": "390a0eb58492c30a598602f21af93d0afb8c4536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390a0eb58492c30a598602f21af93d0afb8c4536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "html_url": "https://github.com/rust-lang/rust/commit/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9deed6f74ea2df0ba08fb72342bef4eb303d0777", "url": "https://api.github.com/repos/rust-lang/rust/commits/9deed6f74ea2df0ba08fb72342bef4eb303d0777", "html_url": "https://github.com/rust-lang/rust/commit/9deed6f74ea2df0ba08fb72342bef4eb303d0777"}], "stats": {"total": 69, "additions": 24, "deletions": 45}, "files": [{"sha": "f2e1d129e9ba791ac765b65b1135fad46a6ee6f4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "patch": "@@ -222,12 +222,12 @@ macro_rules! define_callbacks {\n \n                 let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, noop);\n \n-                let lookup = match cached {\n+                match cached {\n                     Ok(()) => return,\n-                    Err(lookup) => lookup,\n-                };\n+                    Err(()) => (),\n+                }\n \n-                self.tcx.queries.$name(self.tcx, DUMMY_SP, key, lookup, QueryMode::Ensure);\n+                self.tcx.queries.$name(self.tcx, DUMMY_SP, key, QueryMode::Ensure);\n             })*\n         }\n \n@@ -251,12 +251,12 @@ macro_rules! define_callbacks {\n \n                 let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, copy);\n \n-                let lookup = match cached {\n+                match cached {\n                     Ok(value) => return value,\n-                    Err(lookup) => lookup,\n-                };\n+                    Err(()) => (),\n+                }\n \n-                self.tcx.queries.$name(self.tcx, self.span, key, lookup, QueryMode::Get).unwrap()\n+                self.tcx.queries.$name(self.tcx, self.span, key, QueryMode::Get).unwrap()\n             })*\n         }\n \n@@ -314,7 +314,6 @@ macro_rules! define_callbacks {\n                 tcx: TyCtxt<$tcx>,\n                 span: Span,\n                 key: query_keys::$name<$tcx>,\n-                lookup: QueryLookup,\n                 mode: QueryMode,\n             ) -> Option<query_stored::$name<$tcx>>;)*\n         }"}, {"sha": "684b2e248c85fbf6a7781aca49aa060de2e47d6a", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "patch": "@@ -538,12 +538,11 @@ macro_rules! define_queries_struct {\n                 tcx: TyCtxt<$tcx>,\n                 span: Span,\n                 key: query_keys::$name<$tcx>,\n-                lookup: QueryLookup,\n                 mode: QueryMode,\n             ) -> Option<query_stored::$name<$tcx>> {\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n                 let qcx = QueryCtxt { tcx, queries: self };\n-                get_query::<queries::$name<$tcx>, _>(qcx, span, key, lookup, mode)\n+                get_query::<queries::$name<$tcx>, _>(qcx, span, key, mode)\n             })*\n         }\n     };"}, {"sha": "c5fa4c9ee6fc1e2d25d344a00c19ecb87f219a72", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "patch": "@@ -1,5 +1,4 @@\n use crate::dep_graph::DepNodeIndex;\n-use crate::query::plumbing::QueryLookup;\n \n use rustc_arena::TypedArena;\n use rustc_data_structures::fx::FxHashMap;\n@@ -35,7 +34,7 @@ pub trait QueryCache: QueryStorage + Sized {\n         key: &Self::Key,\n         // `on_hit` can be called while holding a lock to the query state shard.\n         on_hit: OnHit,\n-    ) -> Result<R, QueryLookup>\n+    ) -> Result<R, ()>\n     where\n         OnHit: FnOnce(&Self::Stored, DepNodeIndex) -> R;\n \n@@ -79,21 +78,20 @@ where\n     type Key = K;\n \n     #[inline(always)]\n-    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, QueryLookup>\n+    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, ()>\n     where\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n     {\n         let key_hash = sharded::make_hash(key);\n         let shard = sharded::get_shard_index_by_hash(key_hash);\n         let lock = self.shards.get_shard_by_index(shard).lock();\n-        let lookup = QueryLookup { key_hash, shard };\n-        let result = lock.raw_entry().from_key_hashed_nocheck(lookup.key_hash, key);\n+        let result = lock.raw_entry().from_key_hashed_nocheck(key_hash, key);\n \n         if let Some((_, value)) = result {\n             let hit_result = on_hit(&value.0, value.1);\n             Ok(hit_result)\n         } else {\n-            Err(lookup)\n+            Err(())\n         }\n     }\n \n@@ -153,21 +151,20 @@ where\n     type Key = K;\n \n     #[inline(always)]\n-    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, QueryLookup>\n+    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, ()>\n     where\n         OnHit: FnOnce(&&'tcx V, DepNodeIndex) -> R,\n     {\n         let key_hash = sharded::make_hash(key);\n         let shard = sharded::get_shard_index_by_hash(key_hash);\n         let lock = self.shards.get_shard_by_index(shard).lock();\n-        let lookup = QueryLookup { key_hash, shard };\n-        let result = lock.raw_entry().from_key_hashed_nocheck(lookup.key_hash, key);\n+        let result = lock.raw_entry().from_key_hashed_nocheck(key_hash, key);\n \n         if let Some((_, value)) = result {\n             let hit_result = on_hit(&&value.0, value.1);\n             Ok(hit_result)\n         } else {\n-            Err(lookup)\n+            Err(())\n         }\n     }\n "}, {"sha": "d55afaa0cb00ee117527b4ac93b58f2a6070932d", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "patch": "@@ -24,12 +24,6 @@ use std::hash::{Hash, Hasher};\n use std::mem;\n use std::ptr;\n \n-/// Values used when checking a query cache which can be reused on a cache-miss to execute the query.\n-pub struct QueryLookup {\n-    pub(super) key_hash: u64,\n-    pub(super) shard: usize,\n-}\n-\n // We compute the key's hash once and then use it for both the\n // shard lookup and the hashmap lookup. This relies on the fact\n // that both of them use `FxHasher`.\n@@ -147,13 +141,11 @@ where\n         state: &'b QueryState<K>,\n         span: Span,\n         key: K,\n-        lookup: QueryLookup,\n     ) -> TryGetJob<'b, K>\n     where\n         CTX: QueryContext,\n     {\n-        let shard = lookup.shard;\n-        let mut state_lock = state.shards.get_shard_by_index(shard).lock();\n+        let mut state_lock = state.shards.get_shard_by_value(&key).lock();\n         let lock = &mut *state_lock;\n \n         match lock.active.entry(key) {\n@@ -303,7 +295,7 @@ pub fn try_get_cached<'a, CTX, C, R, OnHit>(\n     key: &C::Key,\n     // `on_hit` can be called while holding a lock to the query cache\n     on_hit: OnHit,\n-) -> Result<R, QueryLookup>\n+) -> Result<R, ()>\n where\n     C: QueryCache,\n     CTX: DepContext,\n@@ -324,7 +316,6 @@ fn try_execute_query<CTX, C>(\n     cache: &C,\n     span: Span,\n     key: C::Key,\n-    lookup: QueryLookup,\n     dep_node: Option<DepNode<CTX::DepKind>>,\n     query: &QueryVtable<CTX, C::Key, C::Value>,\n ) -> (C::Stored, Option<DepNodeIndex>)\n@@ -333,7 +324,7 @@ where\n     C::Key: Clone + DepNodeParams<CTX::DepContext>,\n     CTX: QueryContext,\n {\n-    match JobOwner::<'_, C::Key>::try_start(&tcx, state, span, key.clone(), lookup) {\n+    match JobOwner::<'_, C::Key>::try_start(&tcx, state, span, key.clone()) {\n         TryGetJob::NotYetStarted(job) => {\n             let (result, dep_node_index) = execute_job(tcx, key, dep_node, query, job.id);\n             let result = job.complete(cache, result, dep_node_index);\n@@ -675,13 +666,7 @@ pub enum QueryMode {\n     Ensure,\n }\n \n-pub fn get_query<Q, CTX>(\n-    tcx: CTX,\n-    span: Span,\n-    key: Q::Key,\n-    lookup: QueryLookup,\n-    mode: QueryMode,\n-) -> Option<Q::Stored>\n+pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key, mode: QueryMode) -> Option<Q::Stored>\n where\n     Q: QueryDescription<CTX>,\n     Q::Key: DepNodeParams<CTX::DepContext>,\n@@ -705,7 +690,6 @@ where\n         Q::query_cache(tcx),\n         span,\n         key,\n-        lookup,\n         dep_node,\n         &query,\n     );\n@@ -730,14 +714,14 @@ where\n         }\n     });\n \n-    let lookup = match cached {\n+    match cached {\n         Ok(()) => return,\n-        Err(lookup) => lookup,\n-    };\n+        Err(()) => {}\n+    }\n \n     let query = Q::make_vtable(tcx, &key);\n     let state = Q::query_state(tcx);\n     debug_assert!(!query.anon);\n \n-    try_execute_query(tcx, state, cache, DUMMY_SP, key, lookup, Some(dep_node), &query);\n+    try_execute_query(tcx, state, cache, DUMMY_SP, key, Some(dep_node), &query);\n }"}]}