{"sha": "0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjgwZGNjZTdkZDRlZDBlODJiM2M3YzBhZGVhZTQzM2MzMDYzZmM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-03-15T19:18:56Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-03-19T20:27:31Z"}, "message": "Better handle comments and newlines around erased imports", "tree": {"sha": "394d2b07497876ae357eb88a1a5debab1ed84860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394d2b07497876ae357eb88a1a5debab1ed84860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "html_url": "https://github.com/rust-lang/rust/commit/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa75ef466396a48d5aac03a83ac2c92f89f3bf2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa75ef466396a48d5aac03a83ac2c92f89f3bf2e", "html_url": "https://github.com/rust-lang/rust/commit/fa75ef466396a48d5aac03a83ac2c92f89f3bf2e"}], "stats": {"total": 94, "additions": 66, "deletions": 28}, "files": [{"sha": "fdb022db077ff7c4610980f92dee2cc6106de16b", "filename": "src/lists.rs", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "patch": "@@ -56,7 +56,7 @@ impl AsRef<ListItem> for ListItem {\n     }\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, Debug)]\n pub enum ListItemCommentStyle {\n     // Try to keep the comment on the same line with the item.\n     SameLine,\n@@ -66,6 +66,7 @@ pub enum ListItemCommentStyle {\n     None,\n }\n \n+#[derive(Debug)]\n pub struct ListItem {\n     // None for comments mean that they are not present.\n     pub pre_comment: Option<String>,\n@@ -118,6 +119,18 @@ impl ListItem {\n             new_lines: false,\n         }\n     }\n+\n+    // true if the item causes something to be written.\n+    fn is_substantial(&self) -> bool {\n+        fn empty(s: &Option<String>) -> bool {\n+            match *s {\n+                Some(ref s) if !s.is_empty() => false,\n+                _ => true,\n+            }\n+        }\n+\n+        !(empty(&self.pre_comment) && empty(&self.item) && empty(&self.post_comment))\n+    }\n }\n \n /// The type of separator for lists.\n@@ -220,6 +233,10 @@ where\n             item_last_line_width -= indent_str.len();\n         }\n \n+        if !item.is_substantial() {\n+            continue;\n+        }\n+\n         match tactic {\n             DefinitiveListTactic::Horizontal if !first => {\n                 result.push(' ');\n@@ -276,26 +293,28 @@ where\n                 rewrite_comment(comment, block_mode, formatting.shape, formatting.config)?;\n             result.push_str(&comment);\n \n-            if tactic == DefinitiveListTactic::Vertical {\n-                // We cannot keep pre-comments on the same line if the comment if normalized.\n-                let keep_comment = if formatting.config.normalize_comments()\n-                    || item.pre_comment_style == ListItemCommentStyle::DifferentLine\n-                {\n-                    false\n+            if !inner_item.is_empty() {\n+                if tactic == DefinitiveListTactic::Vertical {\n+                    // We cannot keep pre-comments on the same line if the comment if normalized.\n+                    let keep_comment = if formatting.config.normalize_comments()\n+                        || item.pre_comment_style == ListItemCommentStyle::DifferentLine\n+                    {\n+                        false\n+                    } else {\n+                        // We will try to keep the comment on the same line with the item here.\n+                        // 1 = ` `\n+                        let total_width = total_item_width(item) + item_sep_len + 1;\n+                        total_width <= formatting.shape.width\n+                    };\n+                    if keep_comment {\n+                        result.push(' ');\n+                    } else {\n+                        result.push('\\n');\n+                        result.push_str(indent_str);\n+                    }\n                 } else {\n-                    // We will try to keep the comment on the same line with the item here.\n-                    // 1 = ` `\n-                    let total_width = total_item_width(item) + item_sep_len + 1;\n-                    total_width <= formatting.shape.width\n-                };\n-                if keep_comment {\n                     result.push(' ');\n-                } else {\n-                    result.push('\\n');\n-                    result.push_str(indent_str);\n                 }\n-            } else {\n-                result.push(' ');\n             }\n             item_max_width = None;\n         }\n@@ -304,7 +323,7 @@ where\n             result.push_str(formatting.separator.trim());\n             result.push(' ');\n         }\n-        result.push_str(&inner_item[..]);\n+        result.push_str(inner_item);\n \n         // Post-comments\n         if tactic != DefinitiveListTactic::Vertical && item.post_comment.is_some() {"}, {"sha": "f5794c65c4c4b7d48ffd0a506a8d49312cc11152", "filename": "src/missed_spans.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "patch": "@@ -104,19 +104,38 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn push_vertical_spaces(&mut self, mut newline_count: usize) {\n-        // The buffer already has a trailing newline.\n-        let offset = if self.buffer.ends_with('\\n') { 0 } else { 1 };\n-        let newline_upper_bound = self.config.blank_lines_upper_bound() + offset;\n-        let newline_lower_bound = self.config.blank_lines_lower_bound() + offset;\n-        if newline_count > newline_upper_bound {\n-            newline_count = newline_upper_bound;\n-        } else if newline_count < newline_lower_bound {\n-            newline_count = newline_lower_bound;\n+        let offset = self.count_trailing_newlines();\n+        let newline_upper_bound = self.config.blank_lines_upper_bound() + 1;\n+        let newline_lower_bound = self.config.blank_lines_lower_bound() + 1;\n+\n+        if newline_count + offset > newline_upper_bound {\n+            if offset >= newline_upper_bound {\n+                newline_count = 0;\n+            } else {\n+                newline_count = newline_upper_bound - offset;\n+            }\n+        } else if newline_count + offset < newline_lower_bound {\n+            if offset >= newline_lower_bound {\n+                newline_count = 0;\n+            } else {\n+                newline_count = newline_lower_bound - offset;\n+            }\n         }\n+\n         let blank_lines: String = repeat('\\n').take(newline_count).collect();\n         self.push_str(&blank_lines);\n     }\n \n+    fn count_trailing_newlines(&self) -> usize {\n+        let mut buf = &*self.buffer;\n+        let mut result = 0;\n+        while buf.ends_with('\\n') {\n+            buf = &buf[..buf.len() - 1];\n+            result += 1;\n+        }\n+        result\n+    }\n+\n     fn write_snippet<F>(&mut self, span: Span, process_last_snippet: F)\n     where\n         F: Fn(&mut FmtVisitor, &str, &str),"}, {"sha": "5595fa5b237ba6373575dc9c577daa55502fc6e2", "filename": "src/reorder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "patch": "@@ -121,6 +121,7 @@ fn rewrite_reorderable_items(\n         span.hi(),\n         false,\n     );\n+\n     let mut item_pair_vec: Vec<_> = items.zip(reorderable_items.iter()).collect();\n     item_pair_vec.sort_by(|a, b| compare_items(a.1, b.1));\n     let item_vec: Vec<_> = item_pair_vec.into_iter().map(|pair| pair.0).collect();"}, {"sha": "af5f1ee7bcf6f4a8eb43b52b7a4be239cb517a3d", "filename": "tests/target/imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=0cf80dcce7dd4ed0e82b3c7c0adeae433c3063fc", "patch": "@@ -85,5 +85,4 @@ use fooo::{bar, x, y, z,\n // nested imports with a single sub-tree.\n use a::b::c::d;\n use a::b::c::*;\n-\n use a::b::c::{xxx, yyy, zzz};"}]}