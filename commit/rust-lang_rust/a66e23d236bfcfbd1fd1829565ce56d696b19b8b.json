{"sha": "a66e23d236bfcfbd1fd1829565ce56d696b19b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NmUyM2QyMzZiZmNmYmQxZmQxODI5NTY1Y2U1NmQ2OTZiMTliOGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-25T23:39:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-25T23:40:37Z"}, "message": "rustc: Stop generating shape tables", "tree": {"sha": "a4c6fed6270c783136847c92da1929453631d5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4c6fed6270c783136847c92da1929453631d5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a66e23d236bfcfbd1fd1829565ce56d696b19b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a66e23d236bfcfbd1fd1829565ce56d696b19b8b", "html_url": "https://github.com/rust-lang/rust/commit/a66e23d236bfcfbd1fd1829565ce56d696b19b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a66e23d236bfcfbd1fd1829565ce56d696b19b8b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e85a3d82470e2e45db370b62e4fd54175c4b144d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e85a3d82470e2e45db370b62e4fd54175c4b144d", "html_url": "https://github.com/rust-lang/rust/commit/e85a3d82470e2e45db370b62e4fd54175c4b144d"}], "stats": {"total": 63, "additions": 4, "deletions": 59}, "files": [{"sha": "2e2e2937cf1cd325a9da73f97076871ab40fc0a1", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a66e23d236bfcfbd1fd1829565ce56d696b19b8b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66e23d236bfcfbd1fd1829565ce56d696b19b8b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a66e23d236bfcfbd1fd1829565ce56d696b19b8b", "patch": "@@ -2701,11 +2701,7 @@ fn trans_crate(sess: session::session,\n \n     decl_gc_metadata(ccx, llmod_id);\n     fill_crate_map(ccx, crate_map);\n-    // NB: Must call force_declare_tydescs before emit_tydescs to break\n-    // cyclical dependency with shape code! See shape.rs for details.\n-    force_declare_tydescs(ccx);\n     glue::emit_tydescs(ccx);\n-    gen_shape_tables(ccx);\n     write_abi_version(ccx);\n \n     // Translate the metadata."}, {"sha": "0fc72e8dc152da0c6a2235b5a738cbb5e0bef09d", "filename": "src/rustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a66e23d236bfcfbd1fd1829565ce56d696b19b8b/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66e23d236bfcfbd1fd1829565ce56d696b19b8b/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=a66e23d236bfcfbd1fd1829565ce56d696b19b8b", "patch": "@@ -679,7 +679,7 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n     let _icx = ccx.insn_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n     ccx.finished_tydescs = true;\n-    for ccx.tydescs.each |key, val| {\n+    for ccx.tydescs.each |_key, val| {\n         let glue_fn_ty = T_ptr(T_generic_glue_fn(ccx));\n         let ti = val;\n \n@@ -720,10 +720,8 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n               }\n             };\n \n-        let shape = shape_of(ccx, key);\n-        let shape_tables =\n-            llvm::LLVMConstPointerCast(ccx.shape_cx.llshapetables,\n-                                       T_ptr(T_i8()));\n+        let shape = C_null(T_ptr(T_i8()));\n+        let shape_tables = C_null(T_ptr(T_i8()));\n \n         let tydesc =\n             C_named_struct(ccx.tydesc_type,\n@@ -733,7 +731,7 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n                              drop_glue, // drop_glue\n                              free_glue, // free_glue\n                              visit_glue, // visit_glue\n-                             C_shape(ccx, shape), // shape\n+                             shape, // shape\n                              shape_tables]); // shape_tables\n \n         let gvar = ti.tydesc;"}, {"sha": "708bf149d0748416d6417840ca932f63459c314d", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a66e23d236bfcfbd1fd1829565ce56d696b19b8b/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66e23d236bfcfbd1fd1829565ce56d696b19b8b/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=a66e23d236bfcfbd1fd1829565ce56d696b19b8b", "patch": "@@ -591,52 +591,3 @@ fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     return mk_global(ccx, ~\"resource_shapes\", C_struct(dtors), true);\n }\n \n-// This function serves to break a cyclical dependence between\n-// emit_tydescs and gen_shape_tables.\n-//\n-//  * emit_tydescs calls shape_of, which causes changes to the shape\n-//    tables\n-//  * gen_shape_tables transitively calls get_tydesc, which causes new\n-//    tydescs to be created\n-//\n-// We force those tydescs to be emitted now, thus breaking the\n-// dependency.\n-fn force_declare_tydescs(ccx: @crate_ctxt) {\n-    // Walk all known tydescs first to force shape code to declare\n-    // dependencies.\n-    for ccx.tydescs.each |key, _val| {\n-        shape_of(ccx, key);\n-    }\n-\n-    // Then walk all resource shapes to force emit all dtors.\n-    let len = ccx.shape_cx.resources.len();\n-    for uint::range(0u, len) |i| {\n-        let ri = ccx.shape_cx.resources.get(i);\n-        for ri.tps.each() |s| { assert !ty::type_has_params(*s); }\n-        do ri.parent_id.iter |id| {\n-            trans::base::get_res_dtor(ccx, ri.did, id, ri.tps);\n-        }\n-    }\n-}\n-\n-fn gen_shape_tables(ccx: @crate_ctxt) {\n-    let lltagstable = gen_enum_shapes(ccx);\n-    let llresourcestable = gen_resource_shapes(ccx);\n-    trans::common::set_struct_body(ccx.shape_cx.llshapetablesty,\n-                                   ~[val_ty(lltagstable),\n-                                    val_ty(llresourcestable)]);\n-\n-    let lltables =\n-        C_named_struct(ccx.shape_cx.llshapetablesty,\n-                       ~[lltagstable, llresourcestable]);\n-    lib::llvm::llvm::LLVMSetInitializer(ccx.shape_cx.llshapetables, lltables);\n-    lib::llvm::llvm::LLVMSetGlobalConstant(ccx.shape_cx.llshapetables, True);\n-    lib::llvm::SetLinkage(ccx.shape_cx.llshapetables,\n-                          lib::llvm::InternalLinkage);\n-}\n-\n-// Computes the static size of a enum, without using mk_tup(), which is\n-// bad for performance.\n-//\n-// NB: Migrate trans over to use this.\n-"}]}