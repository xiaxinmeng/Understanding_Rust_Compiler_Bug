{"sha": "6bd01efcead9e2a62e1e7704d95a07d1a451d282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZDAxZWZjZWFkOWUyYTYyZTFlNzcwNGQ5NWEwN2QxYTQ1MWQyODI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-02T16:25:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-02T16:25:14Z"}, "message": "Rollup merge of #59341 - o01eg:use-custom-libdir, r=Mark-Simulacrum\n\nFix custom relative libdir\n\nWhile working on #58947 I found out relative libdir ignored during setting LD_LIBRARY_PATH.", "tree": {"sha": "93b625b7dfaba8cee2bf5ac81f10451431ac6916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b625b7dfaba8cee2bf5ac81f10451431ac6916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bd01efcead9e2a62e1e7704d95a07d1a451d282", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJco4zqCRBK7hj4Ov3rIwAAdHIIALE5cnpQGYJc+TWot/rXp0Nk\noDkBGzGTY0wmqXp+6Lc/dj/jEEKwYmJAMnU2TjWluvuvU3lL1Yp2Feo24xpLv4PS\nV66Af2MzyG/gKlz2A6dDO0c5SqTmGtWC16TuQdQqJjf6bFqHLb5Ugp8pTpaT+xF9\nbKT6I4mNDYRBZ6yC5YHonOry6pQlJeUhp/ZsFuI4DP3/T8R09tkr7MImS3wKN69x\npsM7XEknJKTJhYdchG1ND+lPT0JBbdUMIMBMYeI6uoBwc5KjlbosQ76ox+1L96NG\nxml3uS8gnHoVIlU8t1p07B6qFZqiCpVsKeY3KLUHbRpUnNzoXL+MDD6X2hR87rM=\n=6eo5\n-----END PGP SIGNATURE-----\n", "payload": "tree 93b625b7dfaba8cee2bf5ac81f10451431ac6916\nparent a2f3f0cdb30f4e98e0ed22c0c51befcc0cfbed47\nparent 5bcc365a0f0842955457c5edc25f464925e51b66\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554222314 +0200\ncommitter GitHub <noreply@github.com> 1554222314 +0200\n\nRollup merge of #59341 - o01eg:use-custom-libdir, r=Mark-Simulacrum\n\nFix custom relative libdir\n\nWhile working on #58947 I found out relative libdir ignored during setting LD_LIBRARY_PATH.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd01efcead9e2a62e1e7704d95a07d1a451d282", "html_url": "https://github.com/rust-lang/rust/commit/6bd01efcead9e2a62e1e7704d95a07d1a451d282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bd01efcead9e2a62e1e7704d95a07d1a451d282/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f3f0cdb30f4e98e0ed22c0c51befcc0cfbed47", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f3f0cdb30f4e98e0ed22c0c51befcc0cfbed47", "html_url": "https://github.com/rust-lang/rust/commit/a2f3f0cdb30f4e98e0ed22c0c51befcc0cfbed47"}, {"sha": "5bcc365a0f0842955457c5edc25f464925e51b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bcc365a0f0842955457c5edc25f464925e51b66", "html_url": "https://github.com/rust-lang/rust/commit/5bcc365a0f0842955457c5edc25f464925e51b66"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "522466314d66045306e65b71763a6f4ea1e88669", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6bd01efcead9e2a62e1e7704d95a07d1a451d282", "patch": "@@ -634,7 +634,28 @@ impl<'a> Builder<'a> {\n         if compiler.is_snapshot(self) {\n             self.rustc_snapshot_libdir()\n         } else {\n-            self.sysroot(compiler).join(libdir(&compiler.host))\n+            match self.config.libdir_relative() {\n+                Some(relative_libdir) if compiler.stage >= 1\n+                    => self.sysroot(compiler).join(relative_libdir),\n+                _ => self.sysroot(compiler).join(libdir(&compiler.host))\n+            }\n+        }\n+    }\n+\n+    /// Returns the compiler's relative libdir where it stores the dynamic libraries that\n+    /// it itself links against.\n+    ///\n+    /// For example this returns `lib` on Unix and `bin` on\n+    /// Windows.\n+    pub fn libdir_relative(&self, compiler: Compiler) -> &Path {\n+        if compiler.is_snapshot(self) {\n+            libdir(&self.config.build).as_ref()\n+        } else {\n+            match self.config.libdir_relative() {\n+                Some(relative_libdir) if compiler.stage >= 1\n+                    => relative_libdir,\n+                _ => libdir(&compiler.host).as_ref()\n+            }\n         }\n     }\n "}, {"sha": "08316b71ea85b36b2e807102dfc96a8b92e8e9aa", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6bd01efcead9e2a62e1e7704d95a07d1a451d282", "patch": "@@ -20,7 +20,7 @@ use filetime::FileTime;\n use serde_json;\n \n use crate::dist;\n-use crate::util::{exe, libdir, is_dylib};\n+use crate::util::{exe, is_dylib};\n use crate::{Compiler, Mode, GitRepo};\n use crate::native;\n \n@@ -1005,13 +1005,13 @@ impl Step for Assemble {\n \n         // Link in all dylibs to the libdir\n         let sysroot = builder.sysroot(target_compiler);\n-        let sysroot_libdir = sysroot.join(libdir(&*host));\n-        t!(fs::create_dir_all(&sysroot_libdir));\n+        let rustc_libdir = builder.rustc_libdir(target_compiler);\n+        t!(fs::create_dir_all(&rustc_libdir));\n         let src_libdir = builder.sysroot_libdir(build_compiler, host);\n         for f in builder.read_dir(&src_libdir) {\n             let filename = f.file_name().into_string().unwrap();\n             if is_dylib(&filename) {\n-                builder.copy(&f.path(), &sysroot_libdir.join(&filename));\n+                builder.copy(&f.path(), &rustc_libdir.join(&filename));\n             }\n         }\n "}, {"sha": "a4d924d64ee78487156f20b6d79328b01b3cac2c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6bd01efcead9e2a62e1e7704d95a07d1a451d282", "patch": "@@ -18,7 +18,7 @@ use build_helper::output;\n \n use crate::{Compiler, Mode, LLVM_TOOLS};\n use crate::channel;\n-use crate::util::{libdir, is_dylib, exe};\n+use crate::util::{is_dylib, exe};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::compile;\n use crate::tool::{self, Tool};\n@@ -473,21 +473,23 @@ impl Step for Rustc {\n         fn prepare_image(builder: &Builder<'_>, compiler: Compiler, image: &Path) {\n             let host = compiler.host;\n             let src = builder.sysroot(compiler);\n-            let libdir = libdir(&host);\n+            let libdir = builder.rustc_libdir(compiler);\n \n             // Copy rustc/rustdoc binaries\n             t!(fs::create_dir_all(image.join(\"bin\")));\n             builder.cp_r(&src.join(\"bin\"), &image.join(\"bin\"));\n \n             builder.install(&builder.rustdoc(compiler), &image.join(\"bin\"), 0o755);\n \n+            let libdir_relative = builder.libdir_relative(compiler);\n+\n             // Copy runtime DLLs needed by the compiler\n-            if libdir != \"bin\" {\n-                for entry in builder.read_dir(&src.join(libdir)) {\n+            if libdir_relative.to_str() != Some(\"bin\") {\n+                for entry in builder.read_dir(&libdir) {\n                     let name = entry.file_name();\n                     if let Some(s) = name.to_str() {\n                         if is_dylib(s) {\n-                            builder.install(&entry.path(), &image.join(libdir), 0o644);\n+                            builder.install(&entry.path(), &image.join(&libdir_relative), 0o644);\n                         }\n                     }\n                 }\n@@ -516,7 +518,8 @@ impl Step for Rustc {\n                     .join(\"bin\")\n                     .join(&exe);\n                 // for the rationale about this rename check `compile::copy_lld_to_sysroot`\n-                let dst = image.join(\"lib/rustlib\")\n+                let dst = image.join(libdir_relative)\n+                    .join(\"rustlib\")\n                     .join(&*host)\n                     .join(\"bin\")\n                     .join(&exe);"}, {"sha": "47ac04baf6d6d73563a854aab14b278eda6d5a73", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd01efcead9e2a62e1e7704d95a07d1a451d282/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6bd01efcead9e2a62e1e7704d95a07d1a451d282", "patch": "@@ -1275,6 +1275,7 @@ impl Build {\n     fn install(&self, src: &Path, dstdir: &Path, perms: u32) {\n         if self.config.dry_run { return; }\n         let dst = dstdir.join(src.file_name().unwrap());\n+        self.verbose_than(1, &format!(\"Install {:?} to {:?}\", src, dst));\n         t!(fs::create_dir_all(dstdir));\n         drop(fs::remove_file(&dst));\n         {"}]}