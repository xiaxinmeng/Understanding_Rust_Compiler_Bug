{"sha": "5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTg0MTE4YTY2YzBmMzdiYzhiY2IzZTNhMGI4YTIzNTQ0MGE1YWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:40:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` `ImportResolution::value_target`", "tree": {"sha": "803f5c139ad3c79331411f88d4e3059c2fae5369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803f5c139ad3c79331411f88d4e3059c2fae5369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad", "html_url": "https://github.com/rust-lang/rust/commit/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5b422267395fbdf2471acca2656ddc9f1993b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5b422267395fbdf2471acca2656ddc9f1993b7", "html_url": "https://github.com/rust-lang/rust/commit/aa5b422267395fbdf2471acca2656ddc9f1993b7"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "6beb9f3192a6a3dc15556780b2680ebeee481066", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad", "patch": "@@ -326,6 +326,7 @@ impl ImportDirective {\n }\n \n /// The item that an import resolves to.\n+#[deriving(Clone)]\n struct Target {\n     target_module: @Module,\n     bindings: @NameBindings,\n@@ -354,7 +355,7 @@ struct ImportResolution {\n     outstanding_references: Cell<uint>,\n \n     /// The value that this `use` directive names, if there is one.\n-    value_target: Option<Target>,\n+    value_target: RefCell<Option<Target>>,\n     /// The source node of the `use` directive leading to the value target\n     /// being non-none\n     value_id: NodeId,\n@@ -372,7 +373,7 @@ impl ImportResolution {\n             type_id: id,\n             value_id: id,\n             outstanding_references: Cell::new(0),\n-            value_target: None,\n+            value_target: RefCell::new(None),\n             type_target: None,\n             is_public: Cell::new(is_public),\n         }\n@@ -382,7 +383,7 @@ impl ImportResolution {\n                                 -> Option<Target> {\n         match namespace {\n             TypeNS      => return self.type_target,\n-            ValueNS     => return self.value_target,\n+            ValueNS     => return self.value_target.get(),\n         }\n     }\n \n@@ -2418,8 +2419,8 @@ impl Resolver {\n         match value_result {\n             BoundResult(target_module, name_bindings) => {\n                 debug!(\"(resolving single import) found value target\");\n-                import_resolution.value_target =\n-                    Some(Target::new(target_module, name_bindings));\n+                import_resolution.value_target.set(\n+                    Some(Target::new(target_module, name_bindings)));\n                 import_resolution.value_id = directive.id;\n                 used_public = name_bindings.defined_in_public_namespace(ValueNS);\n             }\n@@ -2443,7 +2444,7 @@ impl Resolver {\n             }\n         }\n \n-        if import_resolution.value_target.is_none() &&\n+        if import_resolution.value_target.get().is_none() &&\n            import_resolution.type_target.is_none() {\n             let msg = format!(\"unresolved import: there is no \\\n                                `{}` in `{}`\",\n@@ -2461,7 +2462,7 @@ impl Resolver {\n         // record what this import resolves to for later uses in documentation,\n         // this may resolve to either a value or a type, but for documentation\n         // purposes it's good enough to just favor one over the other.\n-        match import_resolution.value_target {\n+        match import_resolution.value_target.get() {\n             Some(target) => {\n                 let def = target.bindings.def_for_namespace(ValueNS).unwrap();\n                 self.def_map.insert(directive.id, def);\n@@ -2534,8 +2535,8 @@ impl Resolver {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n                         @mut ImportResolution::new(id, is_public);\n-                    new_import_resolution.value_target =\n-                        target_import_resolution.value_target;\n+                    new_import_resolution.value_target.set(\n+                        target_import_resolution.value_target.get());\n                     new_import_resolution.type_target =\n                         target_import_resolution.type_target;\n \n@@ -2546,13 +2547,13 @@ impl Resolver {\n                     // Merge the two import resolutions at a finer-grained\n                     // level.\n \n-                    match target_import_resolution.value_target {\n+                    match target_import_resolution.value_target.get() {\n                         None => {\n                             // Continue.\n                         }\n                         Some(value_target) => {\n-                            dest_import_resolution.value_target =\n-                                Some(value_target);\n+                            dest_import_resolution.value_target.set(\n+                                Some(value_target));\n                         }\n                     }\n                     match target_import_resolution.type_target {\n@@ -2595,8 +2596,8 @@ impl Resolver {\n             // Merge the child item into the import resolution.\n             if name_bindings.defined_in_public_namespace(ValueNS) {\n                 debug!(\"(resolving glob import) ... for value target\");\n-                dest_import_resolution.value_target =\n-                    Some(Target::new(containing_module, name_bindings));\n+                dest_import_resolution.value_target.set(\n+                    Some(Target::new(containing_module, name_bindings)));\n                 dest_import_resolution.value_id = id;\n             }\n             if name_bindings.defined_in_public_namespace(TypeNS) {"}]}