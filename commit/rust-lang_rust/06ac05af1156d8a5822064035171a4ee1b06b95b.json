{"sha": "06ac05af1156d8a5822064035171a4ee1b06b95b", "node_id": "C_kwDOAAsO6NoAKDA2YWMwNWFmMTE1NmQ4YTU4MjIwNjQwMzUxNzFhNGVlMWIwNmI5NWI", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-17T15:51:25Z"}, "message": "Remove unused `unsound_ignore_borrow_on_drop`", "tree": {"sha": "947fa76a86ba058a23cd3d4d533bb1dd9e525546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947fa76a86ba058a23cd3d4d533bb1dd9e525546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ac05af1156d8a5822064035171a4ee1b06b95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ac05af1156d8a5822064035171a4ee1b06b95b", "html_url": "https://github.com/rust-lang/rust/commit/06ac05af1156d8a5822064035171a4ee1b06b95b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ac05af1156d8a5822064035171a4ee1b06b95b/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b3f35c420694a4f24e5a4df00f06073f4f3a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b3f35c420694a4f24e5a4df00f06073f4f3a37", "html_url": "https://github.com/rust-lang/rust/commit/30b3f35c420694a4f24e5a4df00f06073f4f3a37"}], "stats": {"total": 51, "additions": 13, "deletions": 38}, "files": [{"sha": "4981ab5152cd766f8ba7e7ace6c49b7cd8ee288d", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/06ac05af1156d8a5822064035171a4ee1b06b95b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ac05af1156d8a5822064035171a4ee1b06b95b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=06ac05af1156d8a5822064035171a4ee1b06b95b", "patch": "@@ -10,38 +10,11 @@ use rustc_middle::mir::*;\n /// At present, this is used as a very limited form of alias analysis. For example,\n /// `MaybeBorrowedLocals` is used to compute which locals are live during a yield expression for\n /// immovable generators.\n-pub struct MaybeBorrowedLocals {\n-    ignore_borrow_on_drop: bool,\n-}\n-\n-impl MaybeBorrowedLocals {\n-    /// A dataflow analysis that records whether a pointer or reference exists that may alias the\n-    /// given local.\n-    pub fn all_borrows() -> Self {\n-        MaybeBorrowedLocals { ignore_borrow_on_drop: false }\n-    }\n-}\n+pub struct MaybeBorrowedLocals;\n \n impl MaybeBorrowedLocals {\n-    /// During dataflow analysis, ignore the borrow that may occur when a place is dropped.\n-    ///\n-    /// Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut self` as a\n-    /// parameter. In the general case, a drop impl could launder that reference into the\n-    /// surrounding environment through a raw pointer, thus creating a valid `*mut` pointing to the\n-    /// dropped local. We are not yet willing to declare this particular case UB, so we must treat\n-    /// all dropped locals as mutably borrowed for now. See discussion on [#61069].\n-    ///\n-    /// In some contexts, we know that this borrow will never occur. For example, during\n-    /// const-eval, custom drop glue cannot be run. Code that calls this should document the\n-    /// assumptions that justify ignoring `Drop` terminators in this way.\n-    ///\n-    /// [#61069]: https://github.com/rust-lang/rust/pull/61069\n-    pub fn unsound_ignore_borrow_on_drop(self) -> Self {\n-        MaybeBorrowedLocals { ignore_borrow_on_drop: true, ..self }\n-    }\n-\n     fn transfer_function<'a, T>(&'a self, trans: &'a mut T) -> TransferFunction<'a, T> {\n-        TransferFunction { trans, ignore_borrow_on_drop: self.ignore_borrow_on_drop }\n+        TransferFunction { trans }\n     }\n }\n \n@@ -92,7 +65,6 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n /// A `Visitor` that defines the transfer function for `MaybeBorrowedLocals`.\n struct TransferFunction<'a, T> {\n     trans: &'a mut T,\n-    ignore_borrow_on_drop: bool,\n }\n \n impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n@@ -146,10 +118,15 @@ where\n         match terminator.kind {\n             mir::TerminatorKind::Drop { place: dropped_place, .. }\n             | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n-                // See documentation for `unsound_ignore_borrow_on_drop` for an explanation.\n-                if !self.ignore_borrow_on_drop {\n-                    self.trans.gen(dropped_place.local);\n-                }\n+                // Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut\n+                // self` as a parameter. In the general case, a drop impl could launder that\n+                // reference into the surrounding environment through a raw pointer, thus creating\n+                // a valid `*mut` pointing to the dropped local. We are not yet willing to declare\n+                // this particular case UB, so we must treat all dropped locals as mutably borrowed\n+                // for now. See discussion on [#61069].\n+                //\n+                // [#61069]: https://github.com/rust-lang/rust/pull/61069\n+                self.trans.gen(dropped_place.local);\n             }\n \n             TerminatorKind::Abort"}, {"sha": "6bd4c11990a4b77c2b3fdcc5c72212a178bd03d1", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06ac05af1156d8a5822064035171a4ee1b06b95b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ac05af1156d8a5822064035171a4ee1b06b95b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=06ac05af1156d8a5822064035171a4ee1b06b95b", "patch": "@@ -463,10 +463,8 @@ fn locals_live_across_suspend_points<'tcx>(\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n-    let borrowed_locals_results = MaybeBorrowedLocals::all_borrows()\n-        .into_engine(tcx, body_ref)\n-        .pass_name(\"generator\")\n-        .iterate_to_fixpoint();\n+    let borrowed_locals_results =\n+        MaybeBorrowedLocals.into_engine(tcx, body_ref).pass_name(\"generator\").iterate_to_fixpoint();\n \n     let mut borrowed_locals_cursor =\n         rustc_mir_dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);"}]}