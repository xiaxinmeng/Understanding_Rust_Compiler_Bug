{"sha": "95d67ec40174ec1c344ab39eee414d7a41a36af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZDY3ZWM0MDE3NGVjMWMzNDRhYjM5ZWVlNDE0ZDdhNDFhMzZhZjA=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-06-29T15:07:52Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-06-29T15:07:52Z"}, "message": "Use more of FxHash*", "tree": {"sha": "43f713aef65a1439b960b1d199863dc1c29a1994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f713aef65a1439b960b1d199863dc1c29a1994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d67ec40174ec1c344ab39eee414d7a41a36af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d67ec40174ec1c344ab39eee414d7a41a36af0", "html_url": "https://github.com/rust-lang/rust/commit/95d67ec40174ec1c344ab39eee414d7a41a36af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d67ec40174ec1c344ab39eee414d7a41a36af0/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ce5792ab70ab8d20a1afde72c5400c27b9c190", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ce5792ab70ab8d20a1afde72c5400c27b9c190", "html_url": "https://github.com/rust-lang/rust/commit/82ce5792ab70ab8d20a1afde72c5400c27b9c190"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "bc58ce5fe199a75d78ffc0f5f5a9617b4b208bcd", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=95d67ec40174ec1c344ab39eee414d7a41a36af0", "patch": "@@ -1,7 +1,7 @@\n-use std::collections::HashMap;\n+use itertools::Itertools;\n+use rustc_hash::FxHashMap;\n \n use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n-use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{algo, ast, match_ast, AstNode, SyntaxKind, SyntaxKind::*, SyntaxNode};\n \n@@ -87,7 +87,7 @@ fn struct_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option\n     }\n }\n \n-fn compute_fields_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<HashMap<String, usize>> {\n+fn compute_fields_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashMap<String, usize>> {\n     Some(\n         struct_definition(path, &ctx.sema)?\n             .fields(ctx.db)"}, {"sha": "1ae166d196cf70e0fbc3258faa211f2e478dc099", "filename": "crates/ra_ssr/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fparsing.rs?ref=95d67ec40174ec1c344ab39eee414d7a41a36af0", "patch": "@@ -165,7 +165,7 @@ fn parse_pattern(pattern_str: &str) -> Result<Vec<PatternElement>, SsrError> {\n /// Checks for errors in a rule. e.g. the replace pattern referencing placeholders that the search\n /// pattern didn't define.\n fn validate_rule(rule: &SsrRule) -> Result<(), SsrError> {\n-    let mut defined_placeholders = std::collections::HashSet::new();\n+    let mut defined_placeholders = FxHashSet::default();\n     for p in &rule.pattern.raw.tokens {\n         if let PatternElement::Placeholder(placeholder) = p {\n             defined_placeholders.insert(&placeholder.ident);"}, {"sha": "9d09501cd901098307429e03f0a4377abdeb6d07", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=95d67ec40174ec1c344ab39eee414d7a41a36af0", "patch": "@@ -1,18 +1,20 @@\n //! Fully type-check project and print various stats, like the number of type\n //! errors.\n \n-use std::{collections::HashSet, path::Path, time::Instant};\n+use std::{path::Path, time::Instant};\n+\n+use itertools::Itertools;\n+use rand::{seq::SliceRandom, thread_rng};\n+use rustc_hash::FxHashSet;\n \n use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     original_range, AssocItem, Crate, HasSource, HirDisplay, ModuleDef,\n };\n use hir_def::FunctionId;\n use hir_ty::{Ty, TypeWalk};\n-use itertools::Itertools;\n use ra_db::SourceDatabaseExt;\n use ra_syntax::AstNode;\n-use rand::{seq::SliceRandom, thread_rng};\n use stdx::format_to;\n \n use crate::cli::{load_cargo::load_cargo, progress_report::ProgressReport, Result, Verbosity};\n@@ -33,7 +35,7 @@ pub fn analysis_stats(\n     println!(\"Database loaded {:?}\", db_load_time.elapsed());\n     let analysis_time = Instant::now();\n     let mut num_crates = 0;\n-    let mut visited_modules = HashSet::new();\n+    let mut visited_modules = FxHashSet::default();\n     let mut visit_queue = Vec::new();\n \n     let mut krates = Crate::all(db);"}, {"sha": "6f3c1c1f960c2ac39e614426fe051046e1cd4e0e", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=95d67ec40174ec1c344ab39eee414d7a41a36af0", "patch": "@@ -1,11 +1,14 @@\n //! Analyze all modules in a project for diagnostics. Exits with a non-zero status\n //! code if any errors are found.\n \n+use std::path::Path;\n+\n use anyhow::anyhow;\n+use rustc_hash::FxHashSet;\n+\n use hir::Crate;\n use ra_db::SourceDatabaseExt;\n use ra_ide::Severity;\n-use std::{collections::HashSet, path::Path};\n \n use crate::cli::{load_cargo::load_cargo, Result};\n \n@@ -20,7 +23,7 @@ pub fn diagnostics(\n     let analysis = host.analysis();\n \n     let mut found_error = false;\n-    let mut visited_files = HashSet::new();\n+    let mut visited_files = FxHashSet::default();\n \n     let mut work = Vec::new();\n     let krates = Crate::all(db);"}, {"sha": "b46281c985e2b4343fc500126d0b55669574fe05", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d67ec40174ec1c344ab39eee414d7a41a36af0/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=95d67ec40174ec1c344ab39eee414d7a41a36af0", "patch": "@@ -1,14 +1,14 @@\n //! Book keeping for keeping diagnostics easily in sync with the client.\n pub(crate) mod to_proto;\n \n-use std::{collections::HashMap, mem, sync::Arc};\n+use std::{mem, sync::Arc};\n \n use ra_ide::FileId;\n-use rustc_hash::FxHashSet;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::lsp_ext;\n \n-pub(crate) type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n+pub(crate) type CheckFixes = Arc<FxHashMap<FileId, Vec<Fix>>>;\n \n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticsConfig {\n@@ -18,8 +18,8 @@ pub struct DiagnosticsConfig {\n \n #[derive(Debug, Default, Clone)]\n pub(crate) struct DiagnosticCollection {\n-    pub(crate) native: HashMap<FileId, Vec<lsp_types::Diagnostic>>,\n-    pub(crate) check: HashMap<FileId, Vec<lsp_types::Diagnostic>>,\n+    pub(crate) native: FxHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n+    pub(crate) check: FxHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n     pub(crate) check_fixes: CheckFixes,\n     changes: FxHashSet<FileId>,\n }"}, {"sha": "6b6824ded1c4655da34bce33b93a6e81f3ad3a5d", "filename": "docs/dev/README.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95d67ec40174ec1c344ab39eee414d7a41a36af0/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/95d67ec40174ec1c344ab39eee414d7a41a36af0/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=95d67ec40174ec1c344ab39eee414d7a41a36af0", "patch": "@@ -254,6 +254,11 @@ The default name is a lowercased name of the type: `global_state: GlobalState`.\n Avoid ad-hoc acronyms and contractions, but use the ones that exist consistently (`db`, `ctx`, `acc`).\n The default name for \"result of the function\" local variable is `res`.\n \n+## Collection types\n+\n+We prefer `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` instead of the ones in `std::collections`.\n+They use a hasher that's slightly faster and using them consistently will reduce code size by some small amount.\n+\n ## Preconditions\n \n Function preconditions should generally be expressed in types and provided by the caller (rather than checked by callee):"}]}