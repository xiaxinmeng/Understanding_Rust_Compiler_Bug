{"sha": "1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "node_id": "C_kwDOAAsO6NoAKDFmNzA4ODZiMTUyZDdjNDZhZmUzZjZhYWU5ZWM0MWYwMGQzMmFjMDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T12:22:12Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:50:49Z"}, "message": "fix clippy::single_char_pattern", "tree": {"sha": "601e200be78dc6c03551251e49ddd0c784ef5d66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/601e200be78dc6c03551251e49ddd0c784ef5d66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "html_url": "https://github.com/rust-lang/rust/commit/1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7912e33ed66beb0976715207cdaa308c9b38c719", "url": "https://api.github.com/repos/rust-lang/rust/commits/7912e33ed66beb0976715207cdaa308c9b38c719", "html_url": "https://github.com/rust-lang/rust/commit/7912e33ed66beb0976715207cdaa308c9b38c719"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "d1e2d74a987a44a159adc9440d92518993fd4445", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -394,9 +394,9 @@ struct FileMeta {\n }\n \n fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n-    if let Some((a, b)) = crate_str.split_once(\"@\") {\n-        let (version, origin) = match b.split_once(\":\") {\n-            Some((\"CratesIo\", data)) => match data.split_once(\",\") {\n+    if let Some((a, b)) = crate_str.split_once('@') {\n+        let (version, origin) = match b.split_once(':') {\n+            Some((\"CratesIo\", data)) => match data.split_once(',') {\n                 Some((version, url)) => {\n                     (version, CrateOrigin::CratesIo { repo: Some(url.to_owned()) })\n                 }"}, {"sha": "9d9b925bd2dcd84aa608a51fe52b7e4aa57acea9", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -178,7 +178,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n \n             if tree {\n                 let tree = format!(\"{:#?}\", parse.syntax_node())\n-                    .split_inclusive(\"\\n\")\n+                    .split_inclusive('\\n')\n                     .map(|line| format!(\"// {}\", line))\n                     .collect::<String>();\n                 format_to!(expn_text, \"\\n{}\", tree)"}, {"sha": "18523d2db599d01e065bbc52b63ca343bdf19e9f", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -337,7 +337,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.value.clone()) {\n                 (self_param.name().unwrap().syntax().text_range(), \"self\".to_string())\n             } else {\n-                (node.value.text_range(), node.value.text().to_string().replace(\"\\n\", \" \"))\n+                (node.value.text_range(), node.value.text().to_string().replace('\\n', \" \"))\n             };\n             let macro_prefix = if node.file_id != file_id.into() { \"!\" } else { \"\" };\n             format_to!("}, {"sha": "0491ce3635063c474abcf1e0c519071ae18f9427", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n \n //FIXME: like, real html escaping\n fn html_escape(text: &str) -> String {\n-    text.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n+    text.replace('<', \"&lt;\").replace('>', \"&gt;\")\n }\n \n const STYLE: &str = \""}, {"sha": "f77471d80cba9fc15572dba8fd1550c57d49ec09", "filename": "crates/ide_assists/src/handlers/number_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -57,7 +57,7 @@ fn remove_separators(acc: &mut Assists, literal: ast::IntNumber) -> Option<()> {\n         AssistId(\"reformat_number_literal\", AssistKind::RefactorInline),\n         \"Remove digit separators\",\n         range,\n-        |builder| builder.replace(range, literal.text().replace(\"_\", \"\")),\n+        |builder| builder.replace(range, literal.text().replace('_', \"\")),\n     )\n }\n "}, {"sha": "61c05c7ffd19c276484672885d6d660d7f1037ad", "filename": "crates/ide_db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -75,7 +75,7 @@ fn generate_lint_descriptor(buf: &mut String) {\n                 format!(\"lint group for: {}\", lints.trim()).into(),\n                 lints\n                     .split_ascii_whitespace()\n-                    .map(|s| s.trim().trim_matches(',').replace(\"-\", \"_\"))\n+                    .map(|s| s.trim().trim_matches(',').replace('-', \"_\"))\n                     .collect(),\n             )\n         });\n@@ -85,7 +85,7 @@ fn generate_lint_descriptor(buf: &mut String) {\n         .sorted_by(|(ident, ..), (ident2, ..)| ident.cmp(ident2))\n         .collect::<Vec<_>>();\n     for (name, description, ..) in &lints {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), description);\n+        push_lint_completion(buf, &name.replace('-', \"_\"), description);\n     }\n     buf.push_str(\"];\\n\");\n     buf.push_str(r#\"pub const DEFAULT_LINT_GROUPS: &[LintGroup] = &[\"#);\n@@ -96,7 +96,7 @@ fn generate_lint_descriptor(buf: &mut String) {\n                 push_lint_group(buf, name, description, &Vec::new());\n                 continue;\n             }\n-            push_lint_group(buf, &name.replace(\"-\", \"_\"), description, children);\n+            push_lint_group(buf, &name.replace('-', \"_\"), description, children);\n         }\n     }\n     buf.push('\\n');\n@@ -124,7 +124,7 @@ fn generate_lint_descriptor(buf: &mut String) {\n                     format!(\"lint group for: {}\", lints.trim()).into(),\n                     lints\n                         .split_ascii_whitespace()\n-                        .map(|s| s.trim().trim_matches(',').replace(\"-\", \"_\"))\n+                        .map(|s| s.trim().trim_matches(',').replace('-', \"_\"))\n                         .collect(),\n                 )\n             },\n@@ -136,14 +136,14 @@ fn generate_lint_descriptor(buf: &mut String) {\n         .collect::<Vec<_>>();\n \n     for (name, description, ..) in &lints_rustdoc {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), description)\n+        push_lint_completion(buf, &name.replace('-', \"_\"), description)\n     }\n     buf.push_str(\"];\\n\");\n \n     buf.push_str(r#\"pub const RUSTDOC_LINT_GROUPS: &[LintGroup] = &[\"#);\n     for (name, description, children) in &lints_rustdoc {\n         if !children.is_empty() {\n-            push_lint_group(buf, &name.replace(\"-\", \"_\"), description, children);\n+            push_lint_group(buf, &name.replace('-', \"_\"), description, children);\n         }\n     }\n     buf.push('\\n');\n@@ -159,7 +159,7 @@ fn generate_feature_descriptor(buf: &mut String, src_dir: &Path) {\n             path.extension().unwrap_or_default().to_str().unwrap_or_default() == \"md\"\n         })\n         .map(|path| {\n-            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace('-', \"_\");\n             let doc = fs::read_to_string(path).unwrap();\n             (feature_ident, doc)\n         })"}, {"sha": "a93e18a9b09dd383e4ac22d114522810ec5068f3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -1238,7 +1238,7 @@ fn schema(fields: &[(&'static str, &'static str, &[&str], &str)]) -> serde_json:\n     let map = fields\n         .iter()\n         .map(|(field, ty, doc, default)| {\n-            let name = field.replace(\"_\", \".\");\n+            let name = field.replace('_', \".\");\n             let name = format!(\"rust-analyzer.{}\", name);\n             let props = field_props(field, ty, doc, default);\n             (name, props)\n@@ -1385,7 +1385,7 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n     fields\n         .iter()\n         .map(|(field, _ty, doc, default)| {\n-            let name = format!(\"rust-analyzer.{}\", field.replace(\"_\", \".\"));\n+            let name = format!(\"rust-analyzer.{}\", field.replace('_', \".\"));\n             let doc = doc_comment_to_string(*doc);\n             if default.contains('\\n') {\n                 format!(\n@@ -1428,7 +1428,7 @@ mod tests {\n             .trim_start_matches('{')\n             .trim_end_matches('}')\n             .replace(\"  \", \"    \")\n-            .replace(\"\\n\", \"\\n            \")\n+            .replace('\\n', \"\\n            \")\n             .trim_start_matches('\\n')\n             .trim_end()\n             .to_string();"}, {"sha": "a55d3c2405bc198a83b13023b0142634ad4352f1", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -972,7 +972,7 @@ fn main() {}\n           \"documentChanges\": [\n             {\n               \"textDocument\": {\n-                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace(\"\\\\\", \"/\")),\n+                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace('\\\\', \"/\")),\n                 \"version\": null\n               },\n               \"edits\": [\n@@ -1029,7 +1029,7 @@ fn main() {}\n           \"documentChanges\": [\n             {\n               \"textDocument\": {\n-                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace(\"\\\\\", \"/\")),\n+                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace('\\\\', \"/\")),\n                 \"version\": null\n               },\n               \"edits\": ["}, {"sha": "515cdfdc7c6a62d13b43658b890a33d0a6062509", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -374,8 +374,8 @@ fn lines_match(expected: &str, actual: &str) -> bool {\n     // Let's not deal with / vs \\ (windows...)\n     // First replace backslash-escaped backslashes with forward slashes\n     // which can occur in, for example, JSON output\n-    let expected = expected.replace(r\"\\\\\", \"/\").replace(r\"\\\", \"/\");\n-    let mut actual: &str = &actual.replace(r\"\\\\\", \"/\").replace(r\"\\\", \"/\");\n+    let expected = expected.replace(r\"\\\\\", \"/\").replace('\\\\', \"/\");\n+    let mut actual: &str = &actual.replace(r\"\\\\\", \"/\").replace('\\\\', \"/\");\n     for (i, part) in expected.split(\"[..]\").enumerate() {\n         match actual.find(part) {\n             Some(j) => {"}, {"sha": "f1e5c2136f3cea94256ed5f85953b33aff62d3fa", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f70886b152d7c46afe3f6aae9ec41f00d32ac00/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "patch": "@@ -307,7 +307,7 @@ impl ast::IntNumber {\n \n     pub fn value(&self) -> Option<u128> {\n         let (_, text, _) = self.split_into_parts();\n-        let value = u128::from_str_radix(&text.replace(\"_\", \"\"), self.radix() as u32).ok()?;\n+        let value = u128::from_str_radix(&text.replace('_', \"\"), self.radix() as u32).ok()?;\n         Some(value)\n     }\n "}]}