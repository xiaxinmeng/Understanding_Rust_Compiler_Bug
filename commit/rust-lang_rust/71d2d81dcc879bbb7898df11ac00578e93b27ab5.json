{"sha": "71d2d81dcc879bbb7898df11ac00578e93b27ab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZDJkODFkY2M4NzliYmI3ODk4ZGYxMWFjMDA1NzhlOTNiMjdhYjU=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T18:56:07Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T18:56:07Z"}, "message": "Some documentatioN", "tree": {"sha": "2be24a27cc014d426af0a4bd4a24324f32e6b6e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2be24a27cc014d426af0a4bd4a24324f32e6b6e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d2d81dcc879bbb7898df11ac00578e93b27ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d2d81dcc879bbb7898df11ac00578e93b27ab5", "html_url": "https://github.com/rust-lang/rust/commit/71d2d81dcc879bbb7898df11ac00578e93b27ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d2d81dcc879bbb7898df11ac00578e93b27ab5/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069c1655369aa33223788b4f1b8407b6d6b63193", "url": "https://api.github.com/repos/rust-lang/rust/commits/069c1655369aa33223788b4f1b8407b6d6b63193", "html_url": "https://github.com/rust-lang/rust/commit/069c1655369aa33223788b4f1b8407b6d6b63193"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "fa0409ee04e53321fc4ade62b2ea663ccca6810a", "filename": "crates/ra_lsp_server/src/cargo_check.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71d2d81dcc879bbb7898df11ac00578e93b27ab5/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d2d81dcc879bbb7898df11ac00578e93b27ab5/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs?ref=71d2d81dcc879bbb7898df11ac00578e93b27ab5", "patch": "@@ -1,3 +1,6 @@\n+//! cargo_check provides the functionality needed to run `cargo check` or\n+//! another compatible command (f.x. clippy) in a background thread and provide\n+//! LSP diagnostics based on the output of the command.\n use crate::world::Options;\n use cargo_metadata::{\n     diagnostic::{\n@@ -23,6 +26,9 @@ use std::{\n     time::Instant,\n };\n \n+/// CheckWatcher wraps the shared state and communication machinery used for\n+/// running `cargo check` (or other compatible command) and providing\n+/// diagnostics based on the output.\n #[derive(Debug)]\n pub struct CheckWatcher {\n     pub task_recv: Receiver<CheckTask>,\n@@ -55,6 +61,7 @@ impl CheckWatcher {\n         CheckWatcher { task_recv, cmd_send, handle, shared }\n     }\n \n+    /// Schedule a re-start of the cargo check worker.\n     pub fn update(&self) {\n         self.cmd_send.send(CheckCommand::Update).unwrap();\n     }\n@@ -85,6 +92,8 @@ impl CheckWatcherSharedState {\n         }\n     }\n \n+    /// Clear the cached diagnostics, and schedule updating diagnostics by the\n+    /// server, to clear stale results.\n     pub fn clear(&mut self, task_send: &Sender<CheckTask>) {\n         let cleared_files: Vec<Url> = self.diagnostic_collection.keys().cloned().collect();\n \n@@ -139,11 +148,15 @@ impl CheckWatcherSharedState {\n \n #[derive(Debug)]\n pub enum CheckTask {\n+    /// Request a update of the given files diagnostics\n     Update(Url),\n+\n+    /// Request check progress notification to client\n     Status(WorkDoneProgress),\n }\n \n pub enum CheckCommand {\n+    /// Request re-start of check thread\n     Update,\n }\n "}]}