{"sha": "87f782ede653c0f0472cfa879d7be163af072417", "node_id": "C_kwDOAAsO6NoAKDg3Zjc4MmVkZTY1M2MwZjA0NzJjZmE4NzlkN2JlMTYzYWYwNzI0MTc", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T06:56:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T06:56:20Z"}, "message": "Rollup merge of #89423 - DevinR528:reachable-fields, r=Nadrieril\n\nFix ICE caused by non_exaustive_omitted_patterns struct lint\n\nfixes #89382\n\nAdd check that a list of `Pat`s is non empty to prevent ICE in `FnCtxt::lint_non_exhaustive_omitted_patterns`.\n\nIs related to #89374 and #89105", "tree": {"sha": "ddcb5cf5bb0c8b621e61fb6819d2ea9077d14c28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddcb5cf5bb0c8b621e61fb6819d2ea9077d14c28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f782ede653c0f0472cfa879d7be163af072417", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW/cUCRBK7hj4Ov3rIwAAiU8IAFdyXkyrpzYqaZeDMRxQtmSO\neTuFJAN0jnEWKKc7QYvunHyZZRSzOqDnpBfyjKlmlF5PX1XwAVd8DQiAowZtgogW\nsjKPrFRwAOBdL6I85O1Mxxi7bj8a6KI7T2nVZY97WQWOiEz4mvos1SxGmufZm5Ws\nMKBikzru7rjTbYKK+UwKDthBwHKEMQO6A9A7udsY5h/tzG/3iZsrjAZc1M8br6IX\ny81XD3pSgmQV5/EGDCZIEb4jibdOeh1dUtHuLgv9aArD0o3YI8B+WZcJmzEsGASF\nFvqY8a5de9PPZumtxYI+CjbYNKExhEdlvTXfE0smA/46D7JeTp2hecso4FL99js=\n=aeio\n-----END PGP SIGNATURE-----\n", "payload": "tree ddcb5cf5bb0c8b621e61fb6819d2ea9077d14c28\nparent 27b84a92c6e012f5665b4adb79adb28e8717a9bd\nparent b06409ebcde5746d36e11f323ea4dcc8bebe581c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633416980 -0700\ncommitter GitHub <noreply@github.com> 1633416980 -0700\n\nRollup merge of #89423 - DevinR528:reachable-fields, r=Nadrieril\n\nFix ICE caused by non_exaustive_omitted_patterns struct lint\n\nfixes #89382\n\nAdd check that a list of `Pat`s is non empty to prevent ICE in `FnCtxt::lint_non_exhaustive_omitted_patterns`.\n\nIs related to #89374 and #89105\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f782ede653c0f0472cfa879d7be163af072417", "html_url": "https://github.com/rust-lang/rust/commit/87f782ede653c0f0472cfa879d7be163af072417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f782ede653c0f0472cfa879d7be163af072417/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b84a92c6e012f5665b4adb79adb28e8717a9bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b84a92c6e012f5665b4adb79adb28e8717a9bd", "html_url": "https://github.com/rust-lang/rust/commit/27b84a92c6e012f5665b4adb79adb28e8717a9bd"}, {"sha": "b06409ebcde5746d36e11f323ea4dcc8bebe581c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06409ebcde5746d36e11f323ea4dcc8bebe581c", "html_url": "https://github.com/rust-lang/rust/commit/b06409ebcde5746d36e11f323ea4dcc8bebe581c"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "635219146d0f5ee344670b467e1f76a97ecc7f79", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/87f782ede653c0f0472cfa879d7be163af072417/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f782ede653c0f0472cfa879d7be163af072417/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=87f782ede653c0f0472cfa879d7be163af072417", "patch": "@@ -181,8 +181,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_tuple_struct(pat, qpath, subpats, ddpos, expected, def_bm, ti)\n             }\n             PatKind::Path(_) => self.check_pat_path(pat, path_res.unwrap(), expected, ti),\n-            PatKind::Struct(ref qpath, fields, etc) => {\n-                self.check_pat_struct(pat, qpath, fields, etc, expected, def_bm, ti)\n+            PatKind::Struct(ref qpath, fields, has_rest_pat) => {\n+                self.check_pat_struct(pat, qpath, fields, has_rest_pat, expected, def_bm, ti)\n             }\n             PatKind::Or(pats) => {\n                 let parent_pat = Some(pat);\n@@ -712,7 +712,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         qpath: &hir::QPath<'_>,\n         fields: &'tcx [hir::PatField<'tcx>],\n-        etc: bool,\n+        has_rest_pat: bool,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n@@ -734,7 +734,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.demand_eqtype_pat(pat.span, expected, pat_ty, ti);\n \n         // Type-check subpatterns.\n-        if self.check_struct_pat_fields(pat_ty, pat, variant, fields, etc, def_bm, ti) {\n+        if self.check_struct_pat_fields(pat_ty, &pat, variant, fields, has_rest_pat, def_bm, ti) {\n             pat_ty\n         } else {\n             self.tcx.ty_error()\n@@ -1216,7 +1216,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         variant: &'tcx ty::VariantDef,\n         fields: &'tcx [hir::PatField<'tcx>],\n-        etc: bool,\n+        has_rest_pat: bool,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n     ) -> bool {\n@@ -1290,7 +1290,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Require `..` if struct has non_exhaustive attribute.\n         let non_exhaustive = variant.is_field_list_non_exhaustive() && !adt.did.is_local();\n-        if non_exhaustive && !etc {\n+        if non_exhaustive && !has_rest_pat {\n             self.error_foreign_non_exhaustive_spat(pat, adt.variant_descr(), fields.is_empty());\n         }\n \n@@ -1302,7 +1302,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .struct_span_err(pat.span, \"union patterns should have exactly one field\")\n                     .emit();\n             }\n-            if etc {\n+            if has_rest_pat {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !unmentioned_fields.is_empty() {\n@@ -1313,9 +1313,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n                 })\n                 .collect();\n-            if non_exhaustive {\n-                self.non_exhaustive_reachable_pattern(pat, &accessible_unmentioned_fields, adt_ty)\n-            } else if !etc {\n+\n+            if !has_rest_pat {\n                 if accessible_unmentioned_fields.is_empty() {\n                     unmentioned_err = Some(self.error_no_accessible_fields(pat, fields));\n                 } else {\n@@ -1326,6 +1325,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         fields,\n                     ));\n                 }\n+            } else if non_exhaustive && !accessible_unmentioned_fields.is_empty() {\n+                self.lint_non_exhaustive_omitted_patterns(\n+                    pat,\n+                    &accessible_unmentioned_fields,\n+                    adt_ty,\n+                )\n             }\n         }\n         match (inexistent_fields_err, unmentioned_err) {\n@@ -1653,7 +1658,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// is not exhaustive enough.\n     ///\n     /// Nb: the partner lint for enums lives in `compiler/rustc_mir_build/src/thir/pattern/usefulness.rs`.\n-    fn non_exhaustive_reachable_pattern(\n+    fn lint_non_exhaustive_omitted_patterns(\n         &self,\n         pat: &Pat<'_>,\n         unmentioned_fields: &[(&ty::FieldDef, Ident)],"}, {"sha": "78db6b170bb13d9e240d116d7519da6e72520003", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/structs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87f782ede653c0f0472cfa879d7be163af072417/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f782ede653c0f0472cfa879d7be163af072417/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs?ref=87f782ede653c0f0472cfa879d7be163af072417", "patch": "@@ -31,3 +31,11 @@ pub struct NestedStruct {\n     pub foo: u16,\n     pub bar: NormalStruct,\n }\n+\n+#[derive(Default)]\n+#[non_exhaustive]\n+pub struct MixedVisFields {\n+    pub a: u16,\n+    pub b: bool,\n+    pub(crate) foo: bool,\n+}"}, {"sha": "c196ded404ddcef8345eefa22c186d9769a8ce25", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87f782ede653c0f0472cfa879d7be163af072417/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f782ede653c0f0472cfa879d7be163af072417/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs?ref=87f782ede653c0f0472cfa879d7be163af072417", "patch": "@@ -10,7 +10,7 @@ use enums::{\n     EmptyNonExhaustiveEnum, NestedNonExhaustive, NonExhaustiveEnum, NonExhaustiveSingleVariant,\n     VariantNonExhaustive,\n };\n-use structs::{FunctionalRecord, NestedStruct, NormalStruct};\n+use structs::{FunctionalRecord, MixedVisFields, NestedStruct, NormalStruct};\n \n #[non_exhaustive]\n #[derive(Default)]\n@@ -141,6 +141,10 @@ fn main() {\n     //~^ some fields are not explicitly listed\n     //~^^ some fields are not explicitly listed\n \n+    // Ok: this tests https://github.com/rust-lang/rust/issues/89382\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let MixedVisFields { a, b, .. } = MixedVisFields::default();\n+\n     // Ok: because this only has 1 variant\n     #[deny(non_exhaustive_omitted_patterns)]\n     match NonExhaustiveSingleVariant::A(true) {"}, {"sha": "e66fd8008a10bbd07cd7b599f0f6667963dea5ec", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87f782ede653c0f0472cfa879d7be163af072417/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87f782ede653c0f0472cfa879d7be163af072417/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr?ref=87f782ede653c0f0472cfa879d7be163af072417", "patch": "@@ -129,13 +129,13 @@ LL |     #[deny(non_exhaustive_omitted_patterns)]\n    = note: the matched value is of type `ErrorKind` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:153:9\n+  --> $DIR/reachable-patterns.rs:157:9\n    |\n LL |         _ => {}\n    |         ^ pattern `A(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:151:12\n+  --> $DIR/reachable-patterns.rs:155:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}