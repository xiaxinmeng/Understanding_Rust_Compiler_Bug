{"sha": "29a53e6e69d5684a598770652e9c170dd4d149d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YTUzZTZlNjlkNTY4NGE1OTg3NzA2NTJlOWMxNzBkZDRkMTQ5ZDg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-22T01:20:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T01:20:26Z"}, "message": "Rollup merge of #81607 - the8472:trustedrandomaccess-all-the-things, r=m-ou-se\n\nImplement TrustedLen and TrustedRandomAccess for Range<integer>, array::IntoIter, VecDequeue's iterators\n\nThis should make some `FromIterator` and `.zip()` specializations applicable in a few more cases.\n\n``@rustbot`` label libs-impl", "tree": {"sha": "f46e66ca5ddba746cb4e833120960ac68bb8417a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46e66ca5ddba746cb4e833120960ac68bb8417a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a53e6e69d5684a598770652e9c170dd4d149d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgV/DaCRBK7hj4Ov3rIwAAdHIIAEsusDF4URdp5I8kGTQjWb8S\n/tf75zQlnGU0vCoLrUzMWnDD/qevfhU8XWORR0+FwlgYJr8e101OWRPgOfMre1yt\n3LcLGznhMbPCAwoPrGFCHPIqeOG/A7VjKUjrNIWeu3v+KEJjpjWL8N9sbhtEGWE4\nIqBW8TIFt7AGOsT2EM9ba66TvkpwiPLsdB1vFi7WQQJtBct2hGN4V6h73zuGGy41\nn0N8QAyo3xn/gDKWcxwZWajxm6QY84aeUm9YgNRYQ+ZLziXktMjJVrlJByFk7vPM\n7xuB6p8XJTGCbtV3RirhF7x3lusmbQJtxWlTVhma2758YAdFl1X5pZENDMySj+8=\n=JqGf\n-----END PGP SIGNATURE-----\n", "payload": "tree f46e66ca5ddba746cb4e833120960ac68bb8417a\nparent ad8aa185dff457cc18dc38c80d31d348af3d3486\nparent 08a1dd287d371b8df7fbef610e66bc925b3eea0b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616376026 +0100\ncommitter GitHub <noreply@github.com> 1616376026 +0100\n\nRollup merge of #81607 - the8472:trustedrandomaccess-all-the-things, r=m-ou-se\n\nImplement TrustedLen and TrustedRandomAccess for Range<integer>, array::IntoIter, VecDequeue's iterators\n\nThis should make some `FromIterator` and `.zip()` specializations applicable in a few more cases.\n\n``@rustbot`` label libs-impl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a53e6e69d5684a598770652e9c170dd4d149d8", "html_url": "https://github.com/rust-lang/rust/commit/29a53e6e69d5684a598770652e9c170dd4d149d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a53e6e69d5684a598770652e9c170dd4d149d8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8aa185dff457cc18dc38c80d31d348af3d3486", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8aa185dff457cc18dc38c80d31d348af3d3486", "html_url": "https://github.com/rust-lang/rust/commit/ad8aa185dff457cc18dc38c80d31d348af3d3486"}, {"sha": "08a1dd287d371b8df7fbef610e66bc925b3eea0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a1dd287d371b8df7fbef610e66bc925b3eea0b", "html_url": "https://github.com/rust-lang/rust/commit/08a1dd287d371b8df7fbef610e66bc925b3eea0b"}], "stats": {"total": 150, "additions": 144, "deletions": 6}, "files": [{"sha": "1c635dd4f27fa8c001cfc5287f2ccf0ff45ad952", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=29a53e6e69d5684a598770652e9c170dd4d149d8", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::FusedIterator;\n+use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n \n use super::VecDeque;\n \n@@ -36,6 +36,22 @@ impl<T> Iterator for IntoIter<T> {\n         let len = self.inner.len();\n         (len, Some(len))\n     }\n+\n+    #[inline]\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n+        // that is in bounds.\n+        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n+        // multiple repeated reads of the same index would be safe and the\n+        // values are !Drop, thus won't suffer from double drops.\n+        unsafe {\n+            let idx = self.inner.wrap_add(self.inner.tail, idx);\n+            self.inner.buffer_read(idx)\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -55,3 +71,17 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T> TrustedLen for IntoIter<T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n+// and thus we can't implement drop-handling\n+unsafe impl<T> TrustedRandomAccess for IntoIter<T>\n+where\n+    T: Copy,\n+{\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n+}"}, {"sha": "e4cfb3acdfd5ce94c74d172a2a425720a1c8966e", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=29a53e6e69d5684a598770652e9c170dd4d149d8", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::FusedIterator;\n+use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n use core::ops::Try;\n \n use super::{count, wrap_index, RingSlices};\n@@ -101,6 +101,19 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn last(mut self) -> Option<&'a T> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // Safety: The TrustedRandomAccess contract requires that callers only  pass an index\n+        // that is in bounds.\n+        unsafe {\n+            let idx = wrap_index(self.tail.wrapping_add(idx), self.ring.len());\n+            self.ring.get_unchecked(idx)\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -157,3 +170,12 @@ impl<T> ExactSizeIterator for Iter<'_, T> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Iter<'_, T> {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T> TrustedLen for Iter<'_, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<T> TrustedRandomAccess for Iter<'_, T> {\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n+}"}, {"sha": "9493676e66bc8f3232e6937aea62a6a99a47a38a", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=29a53e6e69d5684a598770652e9c170dd4d149d8", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::FusedIterator;\n+use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n use core::marker::PhantomData;\n \n use super::{count, wrap_index, RingSlices};\n@@ -87,6 +87,19 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     fn last(mut self) -> Option<&'a mut T> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // Safety: The TrustedRandomAccess contract requires that callers only  pass an index\n+        // that is in bounds.\n+        unsafe {\n+            let idx = wrap_index(self.tail.wrapping_add(idx), self.ring.len());\n+            &mut *self.ring.get_unchecked_mut(idx)\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -126,3 +139,12 @@ impl<T> ExactSizeIterator for IterMut<'_, T> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IterMut<'_, T> {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T> TrustedLen for IterMut<'_, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<T> TrustedRandomAccess for IterMut<'_, T> {\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n+}"}, {"sha": "d3e70991ad5187bcee4500d008fe65bd3d56386a", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=29a53e6e69d5684a598770652e9c170dd4d149d8", "patch": "@@ -58,7 +58,7 @@ mod tests;\n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1\n \n-const MAXIMUM_ZST_CAPACITY: usize = 1 << (core::mem::size_of::<usize>() * 8 - 1); // Largest possible power of two\n+const MAXIMUM_ZST_CAPACITY: usize = 1 << (usize::BITS - 1); // Largest possible power of two\n \n /// A double-ended queue implemented with a growable ring buffer.\n ///"}, {"sha": "f82454addd09af3466c6c95720af4b3f05937e3b", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=29a53e6e69d5684a598770652e9c170dd4d149d8", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     fmt,\n-    iter::{ExactSizeIterator, FusedIterator, TrustedLen},\n+    iter::{ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess},\n     mem::{self, MaybeUninit},\n     ops::Range,\n     ptr,\n@@ -130,6 +130,18 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     fn last(mut self) -> Option<Self::Item> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // SAFETY: Callers are only allowed to pass an index that is in bounds\n+        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n+        // multiple repeated reads of the same index would be safe and the\n+        // values aree !Drop, thus won't suffer from double drops.\n+        unsafe { self.data.get_unchecked(self.alive.start + idx).assume_init_read() }\n+    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n@@ -184,6 +196,17 @@ impl<T, const N: usize> FusedIterator for IntoIter<T, N> {}\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> {}\n \n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n+// and thus we can't implement drop-handling\n+unsafe impl<T, const N: usize> TrustedRandomAccess for IntoIter<T, N>\n+where\n+    T: Copy,\n+{\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n+}\n+\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n impl<T: Clone, const N: usize> Clone for IntoIter<T, N> {\n     fn clone(&self) -> Self {"}, {"sha": "4b293c596e7af6e702bacff670c27a5475e8c097", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a53e6e69d5684a598770652e9c170dd4d149d8/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=29a53e6e69d5684a598770652e9c170dd4d149d8", "patch": "@@ -3,7 +3,7 @@ use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Try};\n \n-use super::{FusedIterator, TrustedLen};\n+use super::{FusedIterator, TrustedLen, TrustedRandomAccess};\n \n /// Objects that have a notion of *successor* and *predecessor* operations.\n ///\n@@ -493,6 +493,18 @@ macro_rules! range_exact_iter_impl {\n     )*)\n }\n \n+/// Safety: This macro must only be used on types that are `Copy` and result in ranges\n+/// which have an exact `size_hint()` where the upper bound must not be `None`.\n+macro_rules! unsafe_range_trusted_random_access_impl {\n+    ($($t:ty)*) => ($(\n+        #[doc(hidden)]\n+        #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+        unsafe impl TrustedRandomAccess for ops::Range<$t> {\n+            const MAY_HAVE_SIDE_EFFECT: bool = false;\n+        }\n+    )*)\n+}\n+\n macro_rules! range_incl_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n@@ -553,6 +565,18 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn max(mut self) -> Option<A> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // SAFETY: The TrustedRandomAccess contract requires that callers only  pass an index\n+        // that is in bounds.\n+        // Additionally Self: TrustedRandomAccess is only implemented for Copy types\n+        // which means even repeated reads of the same index would be safe.\n+        unsafe { Step::forward_unchecked(self.start.clone(), idx) }\n+    }\n }\n \n // These macros generate `ExactSizeIterator` impls for various range types.\n@@ -574,6 +598,23 @@ range_exact_iter_impl! {\n     u32\n     i32\n }\n+\n+unsafe_range_trusted_random_access_impl! {\n+    usize u8 u16\n+    isize i8 i16\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+unsafe_range_trusted_random_access_impl! {\n+    u32 i32\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+unsafe_range_trusted_random_access_impl! {\n+    u32 i32\n+    u64 i64\n+}\n+\n range_incl_exact_iter_impl! {\n     u8\n     i8"}]}