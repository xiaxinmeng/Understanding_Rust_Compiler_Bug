{"sha": "414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNGQ4ZDljMzg4NGNkNDE0NGI5ZGFiN2ViNGEwZDcyYjhmM2E0OTY=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-04-29T16:34:46Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-04-29T16:34:46Z"}, "message": "Include function qualifiers in signature", "tree": {"sha": "94918af6d27ca9b8135c948b22221265acddf066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94918af6d27ca9b8135c948b22221265acddf066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl6prKYACgkQztOS3gxI\nPQDQPw//RxuStxbReuTe0rJVkuu3nmTrws5XSSURM+iJgaku57v9S9TvqgYuhsau\nRpVvjLjUEPMwUOC7B3L/hP6WBf6y/KH7ld8WT+1v18wU4nPtbHhr59jjj7kM0xL/\nVV8MT40Dj1drjDYFxZa4tly9Ej3yJ7ESrliDQXeWwQ6gOTM9xEQDEztYv2dBcdCl\nbt/Sn+rqAWbyTXPDIEizj5ZUpIiD5rq6Y7M19Kc9X7zXiRr1apy3hvc4/+M/cw+U\nZPHJik1bxw1pQxDoKBchEsKNgyTWW8WsNyhpt1HZA6nBIaxSGqeFbszTxBMm3bC9\nssZzqIKj+Ys/TJA2ReYuLsUsrQPGeHpSEqyt7UFjKnUg7jjic4BpWT/lZFjNsLT2\nkLk8i8PCHcPuoPqJNxxSeMZ8xuQLuBTDHLjbKMXul0NeXl+lGbwXs6xLNVP9wEYL\n8lRExmQACOMKrQZ3+0xVbkIEZv9NB7ln+r/M5HXElXy2kbiHEu7I+8zQfvXqNZBV\nylVbQG4LFiM6tjjw6Y+9EYbfc+W8lkevIV3+NDPzoj6glqj61vln/QdLYqM1fkE2\nFl5+qA89subNdWidOr3rJUA6RMgztF9r9zJlBEbUpa/dcz1PXqFzKIIDvHFlLU34\nkyrI3CraMRMZcd9cu4LyWz26qC3uNA92K9377N7lEAOUJEiKte8=\n=NSPc\n-----END PGP SIGNATURE-----", "payload": "tree 94918af6d27ca9b8135c948b22221265acddf066\nparent 1cde354c35f425026184b8d72f4f5865e96975d4\nauthor oxalica <oxalicc@pm.me> 1588178086 +0800\ncommitter oxalica <oxalicc@pm.me> 1588178086 +0800\n\nInclude function qualifiers in signature\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496", "html_url": "https://github.com/rust-lang/rust/commit/414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cde354c35f425026184b8d72f4f5865e96975d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cde354c35f425026184b8d72f4f5865e96975d4", "html_url": "https://github.com/rust-lang/rust/commit/1cde354c35f425026184b8d72f4f5865e96975d4"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "db3907fe64e13afe8194abb13e1a209fda488b8f", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=414d8d9c3884cd4144b9dab7eb4a0d72b8f3a496", "patch": "@@ -26,6 +26,8 @@ pub struct FunctionSignature {\n     pub kind: CallableKind,\n     /// Optional visibility\n     pub visibility: Option<String>,\n+    /// Qualifiers like `async`, `unsafe`, ...\n+    pub qualifier: FunctionQualifier,\n     /// Name of the function\n     pub name: Option<String>,\n     /// Documentation for the function\n@@ -46,6 +48,16 @@ pub struct FunctionSignature {\n     pub has_self_param: bool,\n }\n \n+#[derive(Debug, Default)]\n+pub struct FunctionQualifier {\n+    // `async` and `const` are mutually exclusive. Do we need to enforcing it here?\n+    pub is_async: bool,\n+    pub is_const: bool,\n+    pub is_unsafe: bool,\n+    /// The string `extern \"..\"`\n+    pub extern_abi: Option<String>,\n+}\n+\n impl FunctionSignature {\n     pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n         self.doc = doc;\n@@ -83,6 +95,8 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::StructConstructor,\n                 visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+                // Do we need `const`?\n+                qualifier: Default::default(),\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: node.name().map(|n| n.text().to_string()),\n                 parameters: params,\n@@ -128,6 +142,8 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::VariantConstructor,\n                 visibility: None,\n+                // Do we need `const`?\n+                qualifier: Default::default(),\n                 name: Some(name),\n                 ret_type: None,\n                 parameters: params,\n@@ -151,6 +167,7 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::Macro,\n                 visibility: None,\n+                qualifier: Default::default(),\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: None,\n                 parameters: params,\n@@ -223,6 +240,12 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n         FunctionSignature {\n             kind: CallableKind::Function,\n             visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+            qualifier: FunctionQualifier {\n+                is_async: node.async_token().is_some(),\n+                is_const: node.const_token().is_some(),\n+                is_unsafe: node.unsafe_token().is_some(),\n+                extern_abi: node.abi().map(|n| n.to_string()),\n+            },\n             name: node.name().map(|n| n.text().to_string()),\n             ret_type: node\n                 .ret_type()\n@@ -246,6 +269,23 @@ impl Display for FunctionSignature {\n             write!(f, \"{} \", t)?;\n         }\n \n+        if self.qualifier.is_async {\n+            write!(f, \"async \")?;\n+        }\n+\n+        if self.qualifier.is_const {\n+            write!(f, \"const \")?;\n+        }\n+\n+        if self.qualifier.is_unsafe {\n+            write!(f, \"unsafe \")?;\n+        }\n+\n+        if let Some(extern_abi) = &self.qualifier.extern_abi {\n+            // Keyword `extern` is included in the string.\n+            write!(f, \"{} \", extern_abi)?;\n+        }\n+\n         if let Some(name) = &self.name {\n             match self.kind {\n                 CallableKind::Function => write!(f, \"fn {}\", name)?,"}]}