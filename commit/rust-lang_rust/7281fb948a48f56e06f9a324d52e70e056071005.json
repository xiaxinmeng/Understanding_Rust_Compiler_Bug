{"sha": "7281fb948a48f56e06f9a324d52e70e056071005", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyODFmYjk0OGE0OGY1NmUwNmY5YTMyNGQ1MmU3MGUwNTYwNzEwMDU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T06:17:10Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T13:02:54Z"}, "message": "std: replace str::{any,all}_between with the iterator equivalent.", "tree": {"sha": "441b25cbd2245cba7a945f1a0094bc60814e955a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/441b25cbd2245cba7a945f1a0094bc60814e955a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7281fb948a48f56e06f9a324d52e70e056071005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7281fb948a48f56e06f9a324d52e70e056071005", "html_url": "https://github.com/rust-lang/rust/commit/7281fb948a48f56e06f9a324d52e70e056071005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7281fb948a48f56e06f9a324d52e70e056071005/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cfc08d81e7cc664330ce9d38a874c14a4ae51bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfc08d81e7cc664330ce9d38a874c14a4ae51bf", "html_url": "https://github.com/rust-lang/rust/commit/0cfc08d81e7cc664330ce9d38a874c14a4ae51bf"}], "stats": {"total": 67, "additions": 3, "deletions": 64}, "files": [{"sha": "9ae8c47ae3c68d50181ee788b7ff254734a206f4", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7281fb948a48f56e06f9a324d52e70e056071005/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7281fb948a48f56e06f9a324d52e70e056071005/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=7281fb948a48f56e06f9a324d52e70e056071005", "patch": "@@ -37,6 +37,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::str;\n use core::uint;\n use core::vec;\n@@ -1079,9 +1080,7 @@ pub mod node {\n \n     pub fn loop_chars(node: @Node, it: &fn(c: char) -> bool) -> bool {\n         return loop_leaves(node,|leaf| {\n-            str::all_between(*leaf.content,\n-                             leaf.byte_offset,\n-                             leaf.byte_len, it)\n+            leaf.content.slice(leaf.byte_offset, leaf.byte_len).iter().all(it)\n         });\n     }\n "}, {"sha": "e68b79575e0dd5923a686189a8a592cb881dc765", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7281fb948a48f56e06f9a324d52e70e056071005/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7281fb948a48f56e06f9a324d52e70e056071005/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=7281fb948a48f56e06f9a324d52e70e056071005", "patch": "@@ -1623,66 +1623,6 @@ pub fn char_at_reverse(s: &str, i: uint) -> char {\n     char_range_at_reverse(s, i).ch\n }\n \n-/**\n- * Loop through a substring, char by char\n- *\n- * # Safety note\n- *\n- * * This function does not check whether the substring is valid.\n- * * This function fails if `start` or `end` do not\n- *   represent valid positions inside `s`\n- *\n- * # Arguments\n- *\n- * * s - A string to traverse. It may be empty.\n- * * start - The byte offset at which to start in the string.\n- * * end - The end of the range to traverse\n- * * it - A block to execute with each consecutive character of `s`.\n- *        Return `true` to continue, `false` to stop.\n- *\n- * # Return value\n- *\n- * `true` If execution proceeded correctly, `false` if it was interrupted,\n- * that is if `it` returned `false` at any point.\n- */\n-pub fn all_between(s: &str, start: uint, end: uint,\n-                    it: &fn(char) -> bool) -> bool {\n-    assert!(is_char_boundary(s, start));\n-    let mut i = start;\n-    while i < end {\n-        let CharRange {ch, next} = char_range_at(s, i);\n-        if !it(ch) { return false; }\n-        i = next;\n-    }\n-    return true;\n-}\n-\n-/**\n- * Loop through a substring, char by char\n- *\n- * # Safety note\n- *\n- * * This function does not check whether the substring is valid.\n- * * This function fails if `start` or `end` do not\n- *   represent valid positions inside `s`\n- *\n- * # Arguments\n- *\n- * * s - A string to traverse. It may be empty.\n- * * start - The byte offset at which to start in the string.\n- * * end - The end of the range to traverse\n- * * it - A block to execute with each consecutive character of `s`.\n- *        Return `true` to continue, `false` to stop.\n- *\n- * # Return value\n- *\n- * `true` if `it` returns `true` for any character\n- */\n-pub fn any_between(s: &str, start: uint, end: uint,\n-                    it: &fn(char) -> bool) -> bool {\n-    !all_between(s, start, end, |c| !it(c))\n-}\n-\n // UTF-8 tags and ranges\n static tag_cont_u8: u8 = 128u8;\n static tag_cont: uint = 128u;"}, {"sha": "2dc8008f8ec53ecb2232202d96133a575ea12396", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7281fb948a48f56e06f9a324d52e70e056071005/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7281fb948a48f56e06f9a324d52e70e056071005/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=7281fb948a48f56e06f9a324d52e70e056071005", "patch": "@@ -307,7 +307,7 @@ fn consume_any_line_comment(rdr: @mut StringReader)\n \n pub fn is_block_non_doc_comment(s: &str) -> bool {\n     assert!(s.len() >= 1u);\n-    str::all_between(s, 1u, s.len() - 1u, |ch| ch == '*')\n+    s.slice(1u, s.len() - 1u).iter().all(|ch| ch == '*')\n }\n \n // might return a sugared-doc-attr"}]}