{"sha": "16030528b53d38e24c1e5733aa4cc46058d0bbd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MDMwNTI4YjUzZDM4ZTI0YzFlNTczM2FhNGNjNDYwNThkMGJiZDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-28T10:02:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-28T10:02:46Z"}, "message": "Merge #2440\n\n2440: Rename Source -> InFile r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e878f88aebf11c0e54eff2e107dfaa4d192ab272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e878f88aebf11c0e54eff2e107dfaa4d192ab272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16030528b53d38e24c1e5733aa4cc46058d0bbd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd35tGCRBK7hj4Ov3rIwAAdHIIAGz0t11519FoLWW+TEH2NtA9\nIV3HdjGBULWwTWxcGRfOMUQxs1xGFc7T4AfIvoaRW5lus6wMg2QHLciAWYyRjaoL\ndNmYmgwOsBVioyRTnW1oH9b6MXv5LCRDE2eoQo42SSVu88bATjw0//gzAKsXZZH9\ngSkkECq37gVJRc0VM8+on4iNL7UYtHnD49hZoCCmQ5HXZrdqxH63E8Aj7ILgqOT2\nmv2XCG7sA3Kp6foSE2egFPsu8zh3YpGy/zGim41tFlx36mLCSthxo2yI5EfD7cVV\nPHVGx1kSvCJ7fpFeXo49am80dhaBasotDsbq52B/OBLBECQ7aCR7thu0rgFD3Xg=\n=TiFp\n-----END PGP SIGNATURE-----\n", "payload": "tree e878f88aebf11c0e54eff2e107dfaa4d192ab272\nparent 2702fa1c5d6d8ad504c0d7703b6363ea09ba5570\nparent ccd1b0800a5de5e046e6e9a4b6f49030c1ce3639\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574935366 +0000\ncommitter GitHub <noreply@github.com> 1574935366 +0000\n\nMerge #2440\n\n2440: Rename Source -> InFile r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16030528b53d38e24c1e5733aa4cc46058d0bbd1", "html_url": "https://github.com/rust-lang/rust/commit/16030528b53d38e24c1e5733aa4cc46058d0bbd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16030528b53d38e24c1e5733aa4cc46058d0bbd1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2702fa1c5d6d8ad504c0d7703b6363ea09ba5570", "url": "https://api.github.com/repos/rust-lang/rust/commits/2702fa1c5d6d8ad504c0d7703b6363ea09ba5570", "html_url": "https://github.com/rust-lang/rust/commit/2702fa1c5d6d8ad504c0d7703b6363ea09ba5570"}, {"sha": "ccd1b0800a5de5e046e6e9a4b6f49030c1ce3639", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd1b0800a5de5e046e6e9a4b6f49030c1ce3639", "html_url": "https://github.com/rust-lang/rust/commit/ccd1b0800a5de5e046e6e9a4b6f49030c1ce3639"}], "stats": {"total": 378, "additions": 189, "deletions": 189}, "files": [{"sha": "993aebc478a0665f139727630a059c18e2937edd", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -1,5 +1,5 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n-use hir::{db::HirDatabase, SourceAnalyzer};\n+use hir::{db::HirDatabase, InFile, SourceAnalyzer};\n use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n@@ -117,7 +117,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         node: &SyntaxNode,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        SourceAnalyzer::new(self.db, hir::Source::new(self.frange.file_id.into(), node), offset)\n+        SourceAnalyzer::new(self.db, InFile::new(self.frange.file_id.into(), node), offset)\n     }\n \n     pub(crate) fn covering_node_for_range(&self, range: TextRange) -> SyntaxElement {"}, {"sha": "f977547fb99921a52c03220e5401833f531ab882", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -1,5 +1,5 @@\n use format_buf::format;\n-use hir::{db::HirDatabase, FromSource};\n+use hir::{db::HirDatabase, FromSource, InFile};\n use join_to_string::join;\n use ra_syntax::{\n     ast::{\n@@ -141,7 +141,7 @@ fn find_struct_impl(\n     })?;\n \n     let struct_ty = {\n-        let src = hir::Source { file_id: ctx.frange.file_id.into(), value: strukt.clone() };\n+        let src = InFile { file_id: ctx.frange.file_id.into(), value: strukt.clone() };\n         hir::Struct::from_source(db, src).unwrap().ty(db)\n     };\n \n@@ -152,7 +152,7 @@ fn find_struct_impl(\n             return false;\n         }\n \n-        let src = hir::Source { file_id: ctx.frange.file_id.into(), value: impl_blk.clone() };\n+        let src = InFile { file_id: ctx.frange.file_id.into(), value: impl_blk.clone() };\n         let blk = hir::ImplBlock::from_source(db, src).unwrap();\n \n         let same_ty = blk.target_ty(db) == struct_ty;"}, {"sha": "dddac915bc45bae8676fcd8bcacfd9cf4c795f1e", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -30,7 +30,7 @@ use crate::{\n     db::{DefDatabase, HirDatabase},\n     ty::display::HirFormatter,\n     ty::{self, InEnvironment, InferenceResult, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk},\n-    CallableDef, Either, HirDisplay, Name, Source,\n+    CallableDef, Either, HirDisplay, InFile, Name,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -118,7 +118,7 @@ impl ModuleSource {\n         }\n     }\n \n-    pub fn from_child_node(db: &impl DefDatabase, child: Source<&SyntaxNode>) -> ModuleSource {\n+    pub fn from_child_node(db: &impl DefDatabase, child: InFile<&SyntaxNode>) -> ModuleSource {\n         if let Some(m) =\n             child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n         {\n@@ -901,7 +901,7 @@ impl Local {\n         Type { krate, ty: InEnvironment { value: ty, environment } }\n     }\n \n-    pub fn source(self, db: &impl HirDatabase) -> Source<Either<ast::BindPat, ast::SelfParam>> {\n+    pub fn source(self, db: &impl HirDatabase) -> InFile<Either<ast::BindPat, ast::SelfParam>> {\n         let (_body, source_map) = db.body_with_source_map(self.parent.into());\n         let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n         let root = src.file_syntax(db);"}, {"sha": "6fd4e79871a38a4ff3133fe9fb6db30d2b6d7a41", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -9,18 +9,18 @@ use crate::{\n     Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n-pub use hir_expand::Source;\n+pub use hir_expand::InFile;\n \n pub trait HasSource {\n     type Ast;\n-    fn source(self, db: &impl DefDatabase) -> Source<Self::Ast>;\n+    fn source(self, db: &impl DefDatabase) -> InFile<Self::Ast>;\n }\n \n /// NB: Module is !HasSource, because it has two source nodes at the same time:\n /// definition and declaration.\n impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(self, db: &impl DefDatabase) -> Source<ModuleSource> {\n+    pub fn definition_source(self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n         let def_map = db.crate_def_map(self.id.krate);\n         let src = def_map[self.id.local_id].definition_source(db);\n         src.map(|it| match it {\n@@ -31,15 +31,15 @@ impl Module {\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n-    pub fn declaration_source(self, db: &impl DefDatabase) -> Option<Source<ast::Module>> {\n+    pub fn declaration_source(self, db: &impl DefDatabase) -> Option<InFile<ast::Module>> {\n         let def_map = db.crate_def_map(self.id.krate);\n         def_map[self.id.local_id].declaration_source(db)\n     }\n }\n \n impl HasSource for StructField {\n     type Ast = FieldSource;\n-    fn source(self, db: &impl DefDatabase) -> Source<FieldSource> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<FieldSource> {\n         let var = VariantId::from(self.parent);\n         let src = var.child_source(db);\n         src.map(|it| match it[self.id].clone() {\n@@ -50,75 +50,75 @@ impl HasSource for StructField {\n }\n impl HasSource for Struct {\n     type Ast = ast::StructDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::StructDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::StructDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for Union {\n     type Ast = ast::UnionDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::UnionDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::UnionDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for Enum {\n     type Ast = ast::EnumDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::EnumDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::EnumDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::EnumVariant> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::EnumVariant> {\n         self.parent.id.child_source(db).map(|map| map[self.id].clone())\n     }\n }\n impl HasSource for Function {\n     type Ast = ast::FnDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::FnDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::FnDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Const {\n     type Ast = ast::ConstDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::ConstDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::ConstDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Static {\n     type Ast = ast::StaticDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::StaticDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::StaticDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Trait {\n     type Ast = ast::TraitDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::TraitDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::TraitDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::TypeAliasDef> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::TypeAliasDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::MacroCall> {\n-        Source { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::MacroCall> {\n+        InFile { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n     }\n }\n impl HasSource for ImplBlock {\n     type Ast = ast::ImplBlock;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::ImplBlock> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::ImplBlock> {\n         self.id.source(db)\n     }\n }\n impl HasSource for Import {\n     type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n \n     /// Returns the syntax of the last path segment corresponding to this import\n-    fn source(self, db: &impl DefDatabase) -> Source<Self::Ast> {\n+    fn source(self, db: &impl DefDatabase) -> InFile<Self::Ast> {\n         let src = self.parent.definition_source(db);\n         let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n         let root = db.parse_or_expand(src.file_id).unwrap();"}, {"sha": "82bf641dca90a0328af3a9a07335e9b72d3f196f", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -10,46 +10,46 @@ use ra_syntax::{\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     AssocItem, Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasSource, ImplBlock,\n-    Local, MacroDef, Module, ModuleDef, ModuleSource, Source, Static, Struct, StructField, Trait,\n+    InFile, Local, MacroDef, Module, ModuleDef, ModuleSource, Static, Struct, StructField, Trait,\n     TypeAlias, Union, VariantDef,\n };\n \n pub trait FromSource: Sized {\n     type Ast;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self>;\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self>;\n }\n \n impl FromSource for Struct {\n     type Ast = ast::StructDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let id = from_source(db, src)?;\n         Some(Struct { id })\n     }\n }\n impl FromSource for Union {\n     type Ast = ast::UnionDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let id = from_source(db, src)?;\n         Some(Union { id })\n     }\n }\n impl FromSource for Enum {\n     type Ast = ast::EnumDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let id = from_source(db, src)?;\n         Some(Enum { id })\n     }\n }\n impl FromSource for Trait {\n     type Ast = ast::TraitDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let id = from_source(db, src)?;\n         Some(Trait { id })\n     }\n }\n impl FromSource for Function {\n     type Ast = ast::FnDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let items = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n             Container::Trait(it) => it.items(db),\n             Container::ImplBlock(it) => it.items(db),\n@@ -76,7 +76,7 @@ impl FromSource for Function {\n \n impl FromSource for Const {\n     type Ast = ast::ConstDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let items = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n             Container::Trait(it) => it.items(db),\n             Container::ImplBlock(it) => it.items(db),\n@@ -102,7 +102,7 @@ impl FromSource for Const {\n }\n impl FromSource for Static {\n     type Ast = ast::StaticDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let module = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n             Container::Module(it) => it,\n             Container::Trait(_) | Container::ImplBlock(_) => return None,\n@@ -120,7 +120,7 @@ impl FromSource for Static {\n \n impl FromSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let items = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n             Container::Trait(it) => it.items(db),\n             Container::ImplBlock(it) => it.items(db),\n@@ -147,11 +147,11 @@ impl FromSource for TypeAlias {\n \n impl FromSource for MacroDef {\n     type Ast = ast::MacroCall;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let kind = MacroDefKind::Declarative;\n \n         let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-        let module = Module::from_definition(db, Source::new(src.file_id, module_src))?;\n+        let module = Module::from_definition(db, InFile::new(src.file_id, module_src))?;\n         let krate = module.krate().crate_id();\n \n         let ast_id = AstId::new(src.file_id, db.ast_id_map(src.file_id).ast_id(&src.value));\n@@ -163,35 +163,35 @@ impl FromSource for MacroDef {\n \n impl FromSource for ImplBlock {\n     type Ast = ast::ImplBlock;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let id = from_source(db, src)?;\n         Some(ImplBlock { id })\n     }\n }\n \n impl FromSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let parent_enum = src.value.parent_enum();\n-        let src_enum = Source { file_id: src.file_id, value: parent_enum };\n+        let src_enum = InFile { file_id: src.file_id, value: parent_enum };\n         let variants = Enum::from_source(db, src_enum)?.variants(db);\n         variants.into_iter().find(|v| same_source(&v.source(db), &src))\n     }\n }\n \n impl FromSource for StructField {\n     type Ast = FieldSource;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n         let variant_def: VariantDef = match src.value {\n             FieldSource::Named(ref field) => {\n                 let value = field.syntax().ancestors().find_map(ast::StructDef::cast)?;\n-                let src = Source { file_id: src.file_id, value };\n+                let src = InFile { file_id: src.file_id, value };\n                 let def = Struct::from_source(db, src)?;\n                 VariantDef::from(def)\n             }\n             FieldSource::Pos(ref field) => {\n                 let value = field.syntax().ancestors().find_map(ast::EnumVariant::cast)?;\n-                let src = Source { file_id: src.file_id, value };\n+                let src = InFile { file_id: src.file_id, value };\n                 let def = EnumVariant::from_source(db, src)?;\n                 VariantDef::from(def)\n             }\n@@ -206,14 +206,14 @@ impl FromSource for StructField {\n }\n \n impl Local {\n-    pub fn from_source(db: &impl HirDatabase, src: Source<ast::BindPat>) -> Option<Self> {\n+    pub fn from_source(db: &impl HirDatabase, src: InFile<ast::BindPat>) -> Option<Self> {\n         let file_id = src.file_id;\n         let parent: DefWithBody = src.value.syntax().ancestors().find_map(|it| {\n             let res = match_ast! {\n                 match it {\n-                    ast::ConstDef(value) => { Const::from_source(db, Source { value, file_id})?.into() },\n-                    ast::StaticDef(value) => { Static::from_source(db, Source { value, file_id})?.into() },\n-                    ast::FnDef(value) => { Function::from_source(db, Source { value, file_id})?.into() },\n+                    ast::ConstDef(value) => { Const::from_source(db, InFile { value, file_id})?.into() },\n+                    ast::StaticDef(value) => { Static::from_source(db, InFile { value, file_id})?.into() },\n+                    ast::FnDef(value) => { Function::from_source(db, InFile { value, file_id})?.into() },\n                     _ => return None,\n                 }\n             };\n@@ -227,16 +227,16 @@ impl Local {\n }\n \n impl Module {\n-    pub fn from_declaration(db: &impl DefDatabase, src: Source<ast::Module>) -> Option<Self> {\n+    pub fn from_declaration(db: &impl DefDatabase, src: InFile<ast::Module>) -> Option<Self> {\n         let parent_declaration = src.value.syntax().ancestors().skip(1).find_map(ast::Module::cast);\n \n         let parent_module = match parent_declaration {\n             Some(parent_declaration) => {\n-                let src_parent = Source { file_id: src.file_id, value: parent_declaration };\n+                let src_parent = InFile { file_id: src.file_id, value: parent_declaration };\n                 Module::from_declaration(db, src_parent)\n             }\n             _ => {\n-                let src_parent = Source {\n+                let src_parent = InFile {\n                     file_id: src.file_id,\n                     value: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n                 };\n@@ -248,13 +248,13 @@ impl Module {\n         parent_module.child(db, &child_name.as_name())\n     }\n \n-    pub fn from_definition(db: &impl DefDatabase, src: Source<ModuleSource>) -> Option<Self> {\n+    pub fn from_definition(db: &impl DefDatabase, src: InFile<ModuleSource>) -> Option<Self> {\n         match src.value {\n             ModuleSource::Module(ref module) => {\n                 assert!(!module.has_semi());\n                 return Module::from_declaration(\n                     db,\n-                    Source { file_id: src.file_id, value: module.clone() },\n+                    InFile { file_id: src.file_id, value: module.clone() },\n                 );\n             }\n             ModuleSource::SourceFile(_) => (),\n@@ -271,13 +271,13 @@ impl Module {\n     }\n }\n \n-fn from_source<N, DEF>(db: &(impl DefDatabase + AstDatabase), src: Source<N>) -> Option<DEF>\n+fn from_source<N, DEF>(db: &(impl DefDatabase + AstDatabase), src: InFile<N>) -> Option<DEF>\n where\n     N: AstNode,\n     DEF: AstItemDef<N>,\n {\n     let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-    let module = Module::from_definition(db, Source::new(src.file_id, module_src))?;\n+    let module = Module::from_definition(db, InFile::new(src.file_id, module_src))?;\n     let ctx = LocationCtx::new(db, module.id, src.file_id);\n     let items = db.ast_id_map(src.file_id);\n     let item_id = items.ast_id(&src.value);\n@@ -291,7 +291,7 @@ enum Container {\n }\n \n impl Container {\n-    fn find(db: &impl DefDatabase, src: Source<&SyntaxNode>) -> Option<Container> {\n+    fn find(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<Container> {\n         // FIXME: this doesn't try to handle nested declarations\n         for container in src.value.ancestors() {\n             let res = match_ast! {\n@@ -322,6 +322,6 @@ impl Container {\n /// In general, we do not guarantee that we have exactly one instance of a\n /// syntax tree for each file. We probably should add such guarantee, but, for\n /// the time being, we will use identity-less AstPtr comparison.\n-fn same_source<N: AstNode>(s1: &Source<N>, s2: &Source<N>) -> bool {\n+fn same_source<N: AstNode>(s1: &InFile<N>, s2: &InFile<N>) -> bool {\n     s1.as_ref().map(AstPtr::new) == s2.as_ref().map(AstPtr::new)\n }"}, {"sha": "88d2f6e02a2dc6a921ec939b24266ae351386775", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -63,5 +63,5 @@ pub use hir_def::{\n     type_ref::Mutability,\n };\n pub use hir_expand::{\n-    either::Either, name::Name, HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Source,\n+    either::Either, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile,\n };"}, {"sha": "1661d92a2ee5b8ac97cb4d5dd4f0b6afcc9c16b2", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -18,7 +18,7 @@ use hir_def::{\n     AssocItemId, DefWithBodyId,\n };\n use hir_expand::{\n-    hygiene::Hygiene, name::AsName, AstId, HirFileId, MacroCallId, MacroFileKind, Source,\n+    hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroFileKind,\n };\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -37,7 +37,7 @@ use crate::{\n     GenericParam, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias,\n };\n \n-fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n+fn try_get_resolver_for_node(db: &impl HirDatabase, node: InFile<&SyntaxNode>) -> Option<Resolver> {\n     match_ast! {\n         match (node.value) {\n             ast::Module(it) => {\n@@ -71,7 +71,7 @@ fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -\n \n fn def_with_body_from_child_node(\n     db: &impl HirDatabase,\n-    child: Source<&SyntaxNode>,\n+    child: InFile<&SyntaxNode>,\n ) -> Option<DefWithBody> {\n     child.value.ancestors().find_map(|node| {\n         match_ast! {\n@@ -141,8 +141,8 @@ impl Expansion {\n     pub fn map_token_down(\n         &self,\n         db: &impl HirDatabase,\n-        token: Source<&SyntaxToken>,\n-    ) -> Option<Source<SyntaxToken>> {\n+        token: InFile<&SyntaxToken>,\n+    ) -> Option<InFile<SyntaxToken>> {\n         let exp_info = self.file_id().expansion_info(db)?;\n         exp_info.map_token_down(token)\n     }\n@@ -155,7 +155,7 @@ impl Expansion {\n impl SourceAnalyzer {\n     pub fn new(\n         db: &impl HirDatabase,\n-        node: Source<&SyntaxNode>,\n+        node: InFile<&SyntaxNode>,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n         let def_with_body = def_with_body_from_child_node(db, node);\n@@ -192,12 +192,12 @@ impl SourceAnalyzer {\n     }\n \n     fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {\n-        let src = Source { file_id: self.file_id, value: expr };\n+        let src = InFile { file_id: self.file_id, value: expr };\n         self.body_source_map.as_ref()?.node_expr(src)\n     }\n \n     fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n-        let src = Source { file_id: self.file_id, value: pat };\n+        let src = InFile { file_id: self.file_id, value: pat };\n         self.body_source_map.as_ref()?.node_pat(src)\n     }\n \n@@ -243,7 +243,7 @@ impl SourceAnalyzer {\n     pub fn resolve_macro_call(\n         &self,\n         db: &impl HirDatabase,\n-        macro_call: Source<&ast::MacroCall>,\n+        macro_call: InFile<&ast::MacroCall>,\n     ) -> Option<MacroDef> {\n         let hygiene = Hygiene::new(db, macro_call.file_id);\n         let path = macro_call.value.path().and_then(|ast| Path::from_src(ast, &hygiene))?;\n@@ -318,7 +318,7 @@ impl SourceAnalyzer {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n-        let scope = scope_for(scopes, source_map, Source::new(self.file_id, name_ref.syntax()))?;\n+        let scope = scope_for(scopes, source_map, InFile::new(self.file_id, name_ref.syntax()))?;\n         let entry = scopes.resolve_name_in_scope(scope, &name)?;\n         Some(ScopeEntryWithSyntax {\n             name: entry.name().clone(),\n@@ -446,7 +446,7 @@ impl SourceAnalyzer {\n     pub fn expand(\n         &self,\n         db: &impl HirDatabase,\n-        macro_call: Source<&ast::MacroCall>,\n+        macro_call: InFile<&ast::MacroCall>,\n     ) -> Option<Expansion> {\n         let def = self.resolve_macro_call(db, macro_call)?.id;\n         let ast_id = AstId::new(\n@@ -463,19 +463,19 @@ impl SourceAnalyzer {\n fn scope_for(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n-    node: Source<&SyntaxNode>,\n+    node: InFile<&SyntaxNode>,\n ) -> Option<ScopeId> {\n     node.value\n         .ancestors()\n         .filter_map(ast::Expr::cast)\n-        .filter_map(|it| source_map.node_expr(Source::new(node.file_id, &it)))\n+        .filter_map(|it| source_map.node_expr(InFile::new(node.file_id, &it)))\n         .find_map(|it| scopes.scope_for(it))\n }\n \n fn scope_for_offset(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n-    offset: Source<TextUnit>,\n+    offset: InFile<TextUnit>,\n ) -> Option<ScopeId> {\n     scopes\n         .scope_by_expr()"}, {"sha": "3d21dedeeec0f79ebe16a2231e408b72253b41e2", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use hir_expand::{\n     either::Either,\n     name::{AsName, Name},\n-    Source,\n+    InFile,\n };\n use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n@@ -88,7 +88,7 @@ impl EnumData {\n impl HasChildSource for EnumId {\n     type ChildId = LocalEnumVariantId;\n     type Value = ast::EnumVariant;\n-    fn child_source(&self, db: &impl DefDatabase) -> Source<ArenaMap<Self::ChildId, Self::Value>> {\n+    fn child_source(&self, db: &impl DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n         let src = self.source(db);\n         let mut trace = Trace::new_for_map();\n         lower_enum(&mut trace, &src.value);\n@@ -145,7 +145,7 @@ impl HasChildSource for VariantId {\n     type ChildId = LocalStructFieldId;\n     type Value = Either<ast::TupleFieldDef, ast::RecordFieldDef>;\n \n-    fn child_source(&self, db: &impl DefDatabase) -> Source<ArenaMap<Self::ChildId, Self::Value>> {\n+    fn child_source(&self, db: &impl DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n         let src = match self {\n             VariantId::EnumVariantId(it) => {\n                 // I don't really like the fact that we call into parent source"}, {"sha": "83783ac7ade5530ac22bba98ab2c7d44e18a928d", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -2,7 +2,7 @@\n \n use std::{ops, sync::Arc};\n \n-use hir_expand::{either::Either, hygiene::Hygiene, AstId, Source};\n+use hir_expand::{either::Either, hygiene::Hygiene, AstId, InFile};\n use mbe::ast_to_token_tree;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n@@ -68,7 +68,7 @@ impl Attrs {\n         }\n     }\n \n-    fn from_attrs_owner(db: &impl DefDatabase, owner: Source<&dyn AttrsOwner>) -> Attrs {\n+    fn from_attrs_owner(db: &impl DefDatabase, owner: InFile<&dyn AttrsOwner>) -> Attrs {\n         let hygiene = Hygiene::new(db, owner.file_id);\n         Attrs::new(owner.value, &hygiene)\n     }\n@@ -157,7 +157,7 @@ where\n     N: ast::AttrsOwner,\n     D: DefDatabase,\n {\n-    let src = Source::new(src.file_id(), src.to_node(db));\n+    let src = InFile::new(src.file_id(), src.to_node(db));\n     Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n }\n "}, {"sha": "f21937f104cd731f3f01a8f5dd603e48315339a4", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -6,7 +6,7 @@ pub mod scope;\n use std::{ops::Index, sync::Arc};\n \n use hir_expand::{\n-    either::Either, hygiene::Hygiene, AstId, HirFileId, MacroDefId, MacroFileKind, Source,\n+    either::Either, hygiene::Hygiene, AstId, HirFileId, InFile, MacroDefId, MacroFileKind,\n };\n use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::{ast, AstNode, AstPtr};\n@@ -73,8 +73,8 @@ impl Expander {\n         std::mem::forget(mark);\n     }\n \n-    fn to_source<T>(&self, value: T) -> Source<T> {\n-        Source { file_id: self.current_file_id, value }\n+    fn to_source<T>(&self, value: T) -> InFile<T> {\n+        InFile { file_id: self.current_file_id, value }\n     }\n \n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n@@ -115,10 +115,10 @@ pub struct Body {\n }\n \n pub type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;\n-pub type ExprSource = Source<ExprPtr>;\n+pub type ExprSource = InFile<ExprPtr>;\n \n pub type PatPtr = Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>;\n-pub type PatSource = Source<PatPtr>;\n+pub type PatSource = InFile<PatPtr>;\n \n /// An item body together with the mapping from syntax nodes to HIR expression\n /// IDs. This is needed to go from e.g. a position in a file to the HIR\n@@ -205,7 +205,7 @@ impl BodySourceMap {\n         self.expr_map_back.get(expr).copied()\n     }\n \n-    pub fn node_expr(&self, node: Source<&ast::Expr>) -> Option<ExprId> {\n+    pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n         let src = node.map(|it| Either::A(AstPtr::new(it)));\n         self.expr_map.get(&src).cloned()\n     }\n@@ -214,7 +214,7 @@ impl BodySourceMap {\n         self.pat_map_back.get(pat).copied()\n     }\n \n-    pub fn node_pat(&self, node: Source<&ast::Pat>) -> Option<PatId> {\n+    pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {\n         let src = node.map(|it| Either::A(AstPtr::new(it)));\n         self.pat_map.get(&src).cloned()\n     }"}, {"sha": "ab6599b23f8e5cb71f0b6309fbd342e6cc48ba2a", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -171,7 +171,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n \n #[cfg(test)]\n mod tests {\n-    use hir_expand::{name::AsName, Source};\n+    use hir_expand::{name::AsName, InFile};\n     use ra_db::{fixture::WithFixture, FileId, SourceDatabase};\n     use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n     use test_utils::{assert_eq_text, covers, extract_offset};\n@@ -211,7 +211,7 @@ mod tests {\n         let (_body, source_map) = db.body_with_source_map(function.into());\n \n         let expr_id = source_map\n-            .node_expr(Source { file_id: file_id.into(), value: &marker.into() })\n+            .node_expr(InFile { file_id: file_id.into(), value: &marker.into() })\n             .unwrap();\n         let scope = scopes.scope_for(expr_id);\n \n@@ -318,7 +318,7 @@ mod tests {\n         let expr_scope = {\n             let expr_ast = name_ref.syntax().ancestors().find_map(ast::Expr::cast).unwrap();\n             let expr_id =\n-                source_map.node_expr(Source { file_id: file_id.into(), value: &expr_ast }).unwrap();\n+                source_map.node_expr(InFile { file_id: file_id.into(), value: &expr_ast }).unwrap();\n             scopes.scope_for(expr_id).unwrap()\n         };\n "}, {"sha": "09549842986d95286fb1ae9232fb50a76aef7efa", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -6,7 +6,7 @@ use hir_expand::diagnostics::Diagnostic;\n use ra_db::RelativePathBuf;\n use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n \n-use hir_expand::{HirFileId, Source};\n+use hir_expand::{HirFileId, InFile};\n \n #[derive(Debug)]\n pub struct UnresolvedModule {\n@@ -19,8 +19,8 @@ impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, value: self.decl.into() }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.decl.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "9d89692bf382daf2062b9ec2d76bff9a07608b6f", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -36,7 +36,7 @@ mod marks;\n \n use std::hash::{Hash, Hasher};\n \n-use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, MacroDefId, Source};\n+use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, InFile, MacroDefId};\n use ra_arena::{impl_arena_id, map::ArenaMap, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_syntax::{ast, AstNode};\n@@ -105,10 +105,10 @@ pub trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n         let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n         Self::intern(ctx.db, loc)\n     }\n-    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> Source<N> {\n+    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> InFile<N> {\n         let loc = self.lookup_intern(db);\n         let value = loc.ast_id.to_node(db);\n-        Source { file_id: loc.ast_id.file_id(), value }\n+        InFile { file_id: loc.ast_id.file_id(), value }\n     }\n     fn module(self, db: &impl InternDatabase) -> ModuleId {\n         let loc = self.lookup_intern(db);\n@@ -517,42 +517,42 @@ impl HasModule for StaticLoc {\n \n pub trait HasSource {\n     type Value;\n-    fn source(&self, db: &impl db::DefDatabase) -> Source<Self::Value>;\n+    fn source(&self, db: &impl db::DefDatabase) -> InFile<Self::Value>;\n }\n \n impl HasSource for FunctionLoc {\n     type Value = ast::FnDef;\n \n-    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::FnDef> {\n+    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::FnDef> {\n         let node = self.ast_id.to_node(db);\n-        Source::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id(), node)\n     }\n }\n \n impl HasSource for TypeAliasLoc {\n     type Value = ast::TypeAliasDef;\n \n-    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::TypeAliasDef> {\n+    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::TypeAliasDef> {\n         let node = self.ast_id.to_node(db);\n-        Source::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id(), node)\n     }\n }\n \n impl HasSource for ConstLoc {\n     type Value = ast::ConstDef;\n \n-    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::ConstDef> {\n+    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::ConstDef> {\n         let node = self.ast_id.to_node(db);\n-        Source::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id(), node)\n     }\n }\n \n impl HasSource for StaticLoc {\n     type Value = ast::StaticDef;\n \n-    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::StaticDef> {\n+    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::StaticDef> {\n         let node = self.ast_id.to_node(db);\n-        Source::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id(), node)\n     }\n }\n \n@@ -562,5 +562,5 @@ pub trait HasChildSource {\n     fn child_source(\n         &self,\n         db: &impl db::DefDatabase,\n-    ) -> Source<ArenaMap<Self::ChildId, Self::Value>>;\n+    ) -> InFile<ArenaMap<Self::ChildId, Self::Value>>;\n }"}, {"sha": "1b369ea1125ee9290f5d06fb97fd92a8c042807c", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -58,8 +58,8 @@ mod tests;\n use std::sync::Arc;\n \n use hir_expand::{\n-    ast_id_map::FileAstId, diagnostics::DiagnosticSink, either::Either, name::Name, MacroDefId,\n-    Source,\n+    ast_id_map::FileAstId, diagnostics::DiagnosticSink, either::Either, name::Name, InFile,\n+    MacroDefId,\n };\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n@@ -261,21 +261,21 @@ impl ModuleData {\n     pub fn definition_source(\n         &self,\n         db: &impl DefDatabase,\n-    ) -> Source<Either<ast::SourceFile, ast::Module>> {\n+    ) -> InFile<Either<ast::SourceFile, ast::Module>> {\n         if let Some(file_id) = self.definition {\n             let sf = db.parse(file_id).tree();\n-            return Source::new(file_id.into(), Either::A(sf));\n+            return InFile::new(file_id.into(), Either::A(sf));\n         }\n         let decl = self.declaration.unwrap();\n-        Source::new(decl.file_id(), Either::B(decl.to_node(db)))\n+        InFile::new(decl.file_id(), Either::B(decl.to_node(db)))\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n-    pub fn declaration_source(&self, db: &impl DefDatabase) -> Option<Source<ast::Module>> {\n+    pub fn declaration_source(&self, db: &impl DefDatabase) -> Option<InFile<ast::Module>> {\n         let decl = self.declaration?;\n         let value = decl.to_node(db);\n-        Some(Source { file_id: decl.file_id(), value })\n+        Some(InFile { file_id: decl.file_id(), value })\n     }\n }\n "}, {"sha": "5196b67cad1bfd3609932f97adfd314e5f8d249a", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -22,8 +22,8 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, path::Path, trace::Trace, FileAstId, HirFileId, LocalImportId,\n-    Source,\n+    attr::Attrs, db::DefDatabase, path::Path, trace::Trace, FileAstId, HirFileId, InFile,\n+    LocalImportId,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -313,7 +313,7 @@ impl RawItemsCollector {\n \n         let mut buf = Vec::new();\n         Path::expand_use_item(\n-            Source { value: use_item, file_id: self.file_id },\n+            InFile { value: use_item, file_id: self.file_id },\n             &self.hygiene,\n             |path, use_tree, is_glob, alias| {\n                 let import_data = ImportData {"}, {"sha": "10688df4d7131dc56f11570fa2d4efeeda89ff8a", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n     AstNode,\n };\n \n-use crate::{type_ref::TypeRef, Source};\n+use crate::{type_ref::TypeRef, InFile};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n@@ -67,7 +67,7 @@ pub enum PathKind {\n impl Path {\n     /// Calls `cb` with all paths, represented by this use item.\n     pub(crate) fn expand_use_item(\n-        item_src: Source<ast::UseItem>,\n+        item_src: InFile<ast::UseItem>,\n         hygiene: &Hygiene,\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n     ) {"}, {"sha": "108c1e38c6d3d91bd49d59a84131801c28f8e05b", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -18,11 +18,11 @@ use std::{any::Any, fmt};\n \n use ra_syntax::{SyntaxNode, SyntaxNodePtr, TextRange};\n \n-use crate::{db::AstDatabase, Source};\n+use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n-    fn source(&self) -> Source<SyntaxNodePtr>;\n+    fn source(&self) -> InFile<SyntaxNodePtr>;\n     fn highlight_range(&self) -> TextRange {\n         self.source().value.range()\n     }"}, {"sha": "2c5b6b2bb102aa3a566ef03a7dc2e624a7c1adbb", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -90,9 +90,9 @@ impl HirFileId {\n                 let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n                 Some(ExpansionInfo {\n-                    expanded: Source::new(self, parse.syntax_node()),\n-                    arg: Source::new(loc.ast_id.file_id, arg_tt),\n-                    def: Source::new(loc.ast_id.file_id, def_tt),\n+                    expanded: InFile::new(self, parse.syntax_node()),\n+                    arg: InFile::new(loc.ast_id.file_id, arg_tt),\n+                    def: InFile::new(loc.ast_id.file_id, def_tt),\n                     macro_arg,\n                     macro_def,\n                     exp_map,\n@@ -167,17 +167,17 @@ impl MacroCallId {\n /// ExpansionInfo mainly describes how to map text range between src and expanded macro\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ExpansionInfo {\n-    expanded: Source<SyntaxNode>,\n-    arg: Source<ast::TokenTree>,\n-    def: Source<ast::TokenTree>,\n+    expanded: InFile<SyntaxNode>,\n+    arg: InFile<ast::TokenTree>,\n+    def: InFile<ast::TokenTree>,\n \n     macro_def: Arc<(db::TokenExpander, mbe::TokenMap)>,\n     macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n     exp_map: Arc<mbe::TokenMap>,\n }\n \n impl ExpansionInfo {\n-    pub fn map_token_down(&self, token: Source<&SyntaxToken>) -> Option<Source<SyntaxToken>> {\n+    pub fn map_token_down(&self, token: InFile<&SyntaxToken>) -> Option<InFile<SyntaxToken>> {\n         assert_eq!(token.file_id, self.arg.file_id);\n         let range =\n             token.value.text_range().checked_sub(self.arg.value.syntax().text_range().start())?;\n@@ -191,7 +191,7 @@ impl ExpansionInfo {\n         Some(self.expanded.with_value(token))\n     }\n \n-    pub fn map_token_up(&self, token: Source<&SyntaxToken>) -> Option<Source<SyntaxToken>> {\n+    pub fn map_token_up(&self, token: InFile<&SyntaxToken>) -> Option<InFile<SyntaxToken>> {\n         let token_id = self.exp_map.token_by_range(token.value.text_range())?;\n \n         let (token_id, origin) = self.macro_def.0.map_id_up(token_id);\n@@ -254,33 +254,33 @@ impl<N: AstNode> AstId<N> {\n     }\n }\n \n-/// `Source<T>` stores a value of `T` inside a particular file/syntax tree.\n+/// `InFile<T>` stores a value of `T` inside a particular file/syntax tree.\n ///\n /// Typical usages are:\n ///\n-/// * `Source<SyntaxNode>` -- syntax node in a file\n-/// * `Source<ast::FnDef>` -- ast node in a file\n-/// * `Source<TextUnit>` -- offset in a file\n+/// * `InFile<SyntaxNode>` -- syntax node in a file\n+/// * `InFile<ast::FnDef>` -- ast node in a file\n+/// * `InFile<TextUnit>` -- offset in a file\n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n-pub struct Source<T> {\n+pub struct InFile<T> {\n     pub file_id: HirFileId,\n     pub value: T,\n }\n \n-impl<T> Source<T> {\n-    pub fn new(file_id: HirFileId, value: T) -> Source<T> {\n-        Source { file_id, value }\n+impl<T> InFile<T> {\n+    pub fn new(file_id: HirFileId, value: T) -> InFile<T> {\n+        InFile { file_id, value }\n     }\n \n     // Similarly, naming here is stupid...\n-    pub fn with_value<U>(&self, value: U) -> Source<U> {\n-        Source::new(self.file_id, value)\n+    pub fn with_value<U>(&self, value: U) -> InFile<U> {\n+        InFile::new(self.file_id, value)\n     }\n \n-    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n-        Source::new(self.file_id, f(self.value))\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> InFile<U> {\n+        InFile::new(self.file_id, f(self.value))\n     }\n-    pub fn as_ref(&self) -> Source<&T> {\n+    pub fn as_ref(&self) -> InFile<&T> {\n         self.with_value(&self.value)\n     }\n     pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {"}, {"sha": "5054189cc1041d624086b9dcb8eeff6bf649e56b", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -2,7 +2,7 @@\n \n use std::any::Any;\n \n-use hir_expand::{db::AstDatabase, name::Name, HirFileId, Source};\n+use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n \n pub use hir_def::diagnostics::UnresolvedModule;\n@@ -19,8 +19,8 @@ impl Diagnostic for NoSuchField {\n         \"no such field\".to_string()\n     }\n \n-    fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, value: self.field.into() }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.field.into() }\n     }\n \n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -44,8 +44,8 @@ impl Diagnostic for MissingFields {\n         }\n         message\n     }\n-    fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, value: self.field_list.into() }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.field_list.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -72,8 +72,8 @@ impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n-    fn source(&self) -> Source<SyntaxNodePtr> {\n-        Source { file_id: self.file, value: self.expr.into() }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.expr.into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "abbc1546cb69bd8ac237c8ab782fb5545ecccf7c", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     body::BodySourceMap, db::DefDatabase, nameres::CrateDefMap, AssocItemId, DefWithBodyId,\n     LocalModuleId, Lookup, ModuleDefId,\n };\n-use hir_expand::Source;\n+use hir_expand::InFile;\n use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, salsa::Database, FilePosition, SourceDatabase};\n use ra_syntax::{\n@@ -4680,7 +4680,7 @@ fn type_at_pos(db: &TestDB, pos: FilePosition) -> String {\n     for decl in crate_def_map[module.local_id].scope.declarations() {\n         if let ModuleDefId::FunctionId(func) = decl {\n             let (_body, source_map) = db.body_with_source_map(func.into());\n-            if let Some(expr_id) = source_map.node_expr(Source::new(pos.file_id.into(), &expr)) {\n+            if let Some(expr_id) = source_map.node_expr(InFile::new(pos.file_id.into(), &expr)) {\n                 let infer = db.infer(func.into());\n                 let ty = &infer[expr_id];\n                 return ty.display(db).to_string();"}, {"sha": "b3c323d38c71d292a343c1b81b4c96cf0e00762d", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -18,7 +18,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     // Find the calling expression and it's NameRef\n     let calling_node = FnCallNode::with_node(&syntax, position.offset)?;\n     let name_ref = calling_node.name_ref()?;\n-    let name_ref = hir::Source::new(position.file_id.into(), name_ref.syntax());\n+    let name_ref = hir::InFile::new(position.file_id.into(), name_ref.syntax());\n \n     let analyzer = hir::SourceAnalyzer::new(db, name_ref, None);\n     let (mut call_info, has_self) = match &calling_node {"}, {"sha": "ca0a483d4be25a64cb45a58a40161a41cae5f08f", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -54,13 +54,13 @@ impl<'a> CompletionContext<'a> {\n         let src = hir::ModuleSource::from_position(db, position);\n         let module = hir::Module::from_definition(\n             db,\n-            hir::Source { file_id: position.file_id.into(), value: src },\n+            hir::InFile { file_id: position.file_id.into(), value: src },\n         );\n         let token =\n             original_parse.tree().syntax().token_at_offset(position.offset).left_biased()?;\n         let analyzer = hir::SourceAnalyzer::new(\n             db,\n-            hir::Source::new(position.file_id.into(), &token.parent()),\n+            hir::InFile::new(position.file_id.into(), &token.parent()),\n             Some(position.offset),\n         );\n         let mut ctx = CompletionContext {"}, {"sha": "c50a70d9900ee4072a4e5f0880e3ddd13f18e09f", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -96,7 +96,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     });\n     let source_file = db.parse(file_id).tree();\n     let src =\n-        hir::Source { file_id: file_id.into(), value: hir::ModuleSource::SourceFile(source_file) };\n+        hir::InFile { file_id: file_id.into(), value: hir::ModuleSource::SourceFile(source_file) };\n     if let Some(m) = hir::Module::from_definition(db, src) {\n         m.diagnostics(db, &mut sink);\n     };"}, {"sha": "61dca14ac58fcc0ebc5ca301e926d8fa33593b04", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{AssocItem, Either, FieldSource, HasSource, ModuleSource, Source};\n+use hir::{AssocItem, Either, FieldSource, HasSource, InFile, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n@@ -141,7 +141,7 @@ impl NavigationTarget {\n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n     pub(crate) fn from_named(\n         db: &RootDatabase,\n-        node: Source<&dyn ast::NameOwner>,\n+        node: InFile<&dyn ast::NameOwner>,\n         docs: Option<String>,\n         description: Option<String>,\n     ) -> NavigationTarget {"}, {"sha": "216d5cfec716a866c219fcb92e239cbeb468bb6c", "filename": "crates/ra_ide/src/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -1,13 +1,13 @@\n //! Utilities to work with files, produced by macros.\n use std::iter::successors;\n \n-use hir::Source;\n+use hir::InFile;\n use ra_db::FileId;\n use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken};\n \n use crate::{db::RootDatabase, FileRange};\n \n-pub(crate) fn original_range(db: &RootDatabase, node: Source<&SyntaxNode>) -> FileRange {\n+pub(crate) fn original_range(db: &RootDatabase, node: InFile<&SyntaxNode>) -> FileRange {\n     let expansion = match node.file_id.expansion_info(db) {\n         None => {\n             return FileRange {\n@@ -44,8 +44,8 @@ pub(crate) fn descend_into_macros(\n     db: &RootDatabase,\n     file_id: FileId,\n     token: SyntaxToken,\n-) -> Source<SyntaxToken> {\n-    let src = Source::new(file_id.into(), token);\n+) -> InFile<SyntaxToken> {\n+    let src = InFile::new(file_id.into(), token);\n \n     successors(Some(src), |token| {\n         let macro_call = token.value.ancestors().find_map(ast::MacroCall::cast)?;"}, {"sha": "862c03304a9a5f44c520b506027037eddb4fe3c6", "filename": "crates/ra_ide/src/expand_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)?;\n     let mac = name_ref.syntax().ancestors().find_map(ast::MacroCall::cast)?;\n \n-    let source = hir::Source::new(position.file_id.into(), mac.syntax());\n+    let source = hir::InFile::new(position.file_id.into(), mac.syntax());\n     let expanded = expand_macro_recur(db, source, source.with_value(&mac))?;\n \n     // FIXME:\n@@ -34,8 +34,8 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n \n fn expand_macro_recur(\n     db: &RootDatabase,\n-    source: hir::Source<&SyntaxNode>,\n-    macro_call: hir::Source<&ast::MacroCall>,\n+    source: hir::InFile<&SyntaxNode>,\n+    macro_call: hir::InFile<&ast::MacroCall>,\n ) -> Option<SyntaxNode> {\n     let analyzer = hir::SourceAnalyzer::new(db, source, None);\n     let expansion = analyzer.expand(db, macro_call)?;\n@@ -46,7 +46,7 @@ fn expand_macro_recur(\n     let mut replaces = FxHashMap::default();\n \n     for child in children.into_iter() {\n-        let node = hir::Source::new(macro_file_id, &child);\n+        let node = hir::InFile::new(macro_file_id, &child);\n         if let Some(new_node) = expand_macro_recur(db, source, node) {\n             // Replace the whole node if it is root\n             // `replace_descendants` will not replace the parent node"}, {"sha": "76a741207623cfbf41ce07032366f26bd5412a81", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{db::AstDatabase, Source};\n+use hir::{db::AstDatabase, InFile};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode, SyntaxNode,\n@@ -58,7 +58,7 @@ impl ReferenceResult {\n \n pub(crate) fn reference_definition(\n     db: &RootDatabase,\n-    name_ref: Source<&ast::NameRef>,\n+    name_ref: InFile<&ast::NameRef>,\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n@@ -94,7 +94,7 @@ pub(crate) fn reference_definition(\n \n pub(crate) fn name_definition(\n     db: &RootDatabase,\n-    name: Source<&ast::Name>,\n+    name: InFile<&ast::Name>,\n ) -> Option<Vec<NavigationTarget>> {\n     let parent = name.value.syntax().parent()?;\n \n@@ -115,7 +115,7 @@ pub(crate) fn name_definition(\n     None\n }\n \n-fn named_target(db: &RootDatabase, node: Source<&SyntaxNode>) -> Option<NavigationTarget> {\n+fn named_target(db: &RootDatabase, node: InFile<&SyntaxNode>) -> Option<NavigationTarget> {\n     match_ast! {\n         match (node.value) {\n             ast::StructDef(it) => {"}, {"sha": "d8185c6889f4afe5ede3c1f5f3011e5118295114", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -227,7 +227,7 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n         .take_while(|it| it.text_range() == leaf_node.text_range())\n         .find(|it| ast::Expr::cast(it.clone()).is_some() || ast::Pat::cast(it.clone()).is_some())?;\n     let analyzer =\n-        hir::SourceAnalyzer::new(db, hir::Source::new(frange.file_id.into(), &node), None);\n+        hir::SourceAnalyzer::new(db, hir::InFile::new(frange.file_id.into(), &node), None);\n     let ty = if let Some(ty) = ast::Expr::cast(node.clone()).and_then(|e| analyzer.type_of(db, &e))\n     {\n         ty"}, {"sha": "9b165ee2aa065adfc2d20768a28fe9d848ce94ce", "filename": "crates/ra_ide/src/impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimpls.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn goto_implementation(\n     let src = hir::ModuleSource::from_position(db, position);\n     let module = hir::Module::from_definition(\n         db,\n-        hir::Source { file_id: position.file_id.into(), value: src },\n+        hir::InFile { file_id: position.file_id.into(), value: src },\n     )?;\n \n     if let Some(nominal_def) = find_node_at_offset::<ast::NominalDef>(&syntax, position.offset) {\n@@ -42,15 +42,15 @@ fn impls_for_def(\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n         ast::NominalDef::StructDef(def) => {\n-            let src = hir::Source { file_id: position.file_id.into(), value: def.clone() };\n+            let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n             hir::Struct::from_source(db, src)?.ty(db)\n         }\n         ast::NominalDef::EnumDef(def) => {\n-            let src = hir::Source { file_id: position.file_id.into(), value: def.clone() };\n+            let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n             hir::Enum::from_source(db, src)?.ty(db)\n         }\n         ast::NominalDef::UnionDef(def) => {\n-            let src = hir::Source { file_id: position.file_id.into(), value: def.clone() };\n+            let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n             hir::Union::from_source(db, src)?.ty(db)\n         }\n     };\n@@ -73,7 +73,7 @@ fn impls_for_trait(\n     node: &ast::TraitDef,\n     module: hir::Module,\n ) -> Option<Vec<NavigationTarget>> {\n-    let src = hir::Source { file_id: position.file_id.into(), value: node.clone() };\n+    let src = hir::InFile { file_id: position.file_id.into(), value: node.clone() };\n     let tr = hir::Trait::from_source(db, src)?;\n \n     let krate = module.krate();"}, {"sha": "59eced9d73e90a414c07a3fc1904977a15b09ec0", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -38,7 +38,7 @@ fn get_inlay_hints(\n     node: &SyntaxNode,\n     max_inlay_hint_length: Option<usize>,\n ) -> Option<Vec<InlayHint>> {\n-    let analyzer = SourceAnalyzer::new(db, hir::Source::new(file_id.into(), node), None);\n+    let analyzer = SourceAnalyzer::new(db, hir::InFile::new(file_id.into(), node), None);\n     match_ast! {\n         match node {\n             ast::LetStmt(it) => {"}, {"sha": "616d69fce2db8e4aafa346cdbf690ba7124a740c", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n     let src = hir::ModuleSource::from_position(db, position);\n     let module = match hir::Module::from_definition(\n         db,\n-        hir::Source { file_id: position.file_id.into(), value: src },\n+        hir::InFile { file_id: position.file_id.into(), value: src },\n     ) {\n         None => return Vec::new(),\n         Some(it) => it,\n@@ -23,7 +23,7 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n     let src = hir::ModuleSource::from_file_id(db, file_id);\n     let module =\n-        match hir::Module::from_definition(db, hir::Source { file_id: file_id.into(), value: src })\n+        match hir::Module::from_definition(db, hir::InFile { file_id: file_id.into(), value: src })\n         {\n             Some(it) => it,\n             None => return Vec::new(),"}, {"sha": "3e7bfd872e02c6b98b3c66d52db9ac8b492f1016", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -14,7 +14,7 @@ mod name_definition;\n mod rename;\n mod search_scope;\n \n-use hir::Source;\n+use hir::InFile;\n use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n@@ -107,12 +107,12 @@ fn find_name<'a>(\n     position: FilePosition,\n ) -> Option<RangeInfo<(String, NameDefinition)>> {\n     if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, position.offset) {\n-        let def = classify_name(db, Source::new(position.file_id.into(), &name))?;\n+        let def = classify_name(db, InFile::new(position.file_id.into(), &name))?;\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, (name.text().to_string(), def)));\n     }\n     let name_ref = find_node_at_offset::<ast::NameRef>(&syntax, position.offset)?;\n-    let def = classify_name_ref(db, Source::new(position.file_id.into(), &name_ref))?;\n+    let def = classify_name_ref(db, InFile::new(position.file_id.into(), &name_ref))?;\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, (name_ref.text().to_string(), def)))\n }\n@@ -144,7 +144,7 @@ fn process_definition(\n                         continue;\n                     }\n                 }\n-                if let Some(d) = classify_name_ref(db, Source::new(file_id.into(), &name_ref)) {\n+                if let Some(d) = classify_name_ref(db, InFile::new(file_id.into(), &name_ref)) {\n                     if d == def {\n                         refs.push(FileRange { file_id, range });\n                     }"}, {"sha": "b716d32e597c2aa6e74533a71f18833ea8d09557", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -1,6 +1,6 @@\n //! Functions that are used to classify an element from its definition or reference.\n \n-use hir::{FromSource, Module, ModuleSource, PathResolution, Source, SourceAnalyzer};\n+use hir::{FromSource, InFile, Module, ModuleSource, PathResolution, SourceAnalyzer};\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode};\n use test_utils::tested_by;\n@@ -11,7 +11,7 @@ use super::{\n };\n use crate::db::RootDatabase;\n \n-pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Option<NameDefinition> {\n+pub(crate) fn classify_name(db: &RootDatabase, name: InFile<&ast::Name>) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name\");\n     let parent = name.value.syntax().parent()?;\n \n@@ -117,7 +117,7 @@ pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Opti\n \n pub(crate) fn classify_name_ref(\n     db: &RootDatabase,\n-    name_ref: Source<&ast::NameRef>,\n+    name_ref: InFile<&ast::NameRef>,\n ) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name_ref\");\n "}, {"sha": "ea6b354c2044878be3e00e710fe4113aea8e6145", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -55,7 +55,7 @@ fn rename_mod(\n ) -> Option<SourceChange> {\n     let mut source_file_edits = Vec::new();\n     let mut file_system_edits = Vec::new();\n-    let module_src = hir::Source { file_id: position.file_id.into(), value: ast_module.clone() };\n+    let module_src = hir::InFile { file_id: position.file_id.into(), value: ast_module.clone() };\n     if let Some(module) = hir::Module::from_declaration(db, module_src) {\n         let src = module.definition_source(db);\n         let file_id = src.file_id.original_file(db);"}, {"sha": "e213e1a06d2bdc5ed41aeffa1c18575754cdc68a", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::Source;\n+use hir::InFile;\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_syntax::{\n@@ -66,8 +66,8 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Opti\n         return None;\n     }\n     let range = module.syntax().text_range();\n-    let src = hir::ModuleSource::from_child_node(db, Source::new(file_id.into(), &module.syntax()));\n-    let module = hir::Module::from_definition(db, Source::new(file_id.into(), src))?;\n+    let src = hir::ModuleSource::from_child_node(db, InFile::new(file_id.into(), &module.syntax()));\n+    let module = hir::Module::from_definition(db, InFile::new(file_id.into(), src))?;\n \n     let path = module.path_to_root(db).into_iter().rev().filter_map(|it| it.name(db)).join(\"::\");\n     Some(Runnable { range, kind: RunnableKind::TestMod { path } })"}, {"sha": "e6a79541fe5657599c7c9bd547a73d5a3b98f26e", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16030528b53d38e24c1e5733aa4cc46058d0bbd1/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=16030528b53d38e24c1e5733aa4cc46058d0bbd1", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_hash::{FxHashMap, FxHashSet};\n \n-use hir::{Name, Source};\n+use hir::{InFile, Name};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, TextRange, T};\n@@ -81,7 +81,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n \n                 let name_ref = node.as_node().cloned().and_then(ast::NameRef::cast).unwrap();\n                 let name_kind =\n-                    classify_name_ref(db, Source::new(file_id.into(), &name_ref)).map(|d| d.kind);\n+                    classify_name_ref(db, InFile::new(file_id.into(), &name_ref)).map(|d| d.kind);\n \n                 if let Some(Local(local)) = &name_kind {\n                     if let Some(name) = local.name(db) {\n@@ -95,7 +95,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();\n                 let name_kind =\n-                    classify_name(db, Source::new(file_id.into(), &name)).map(|d| d.kind);\n+                    classify_name(db, InFile::new(file_id.into(), &name)).map(|d| d.kind);\n \n                 if let Some(Local(local)) = &name_kind {\n                     if let Some(name) = local.name(db) {"}]}