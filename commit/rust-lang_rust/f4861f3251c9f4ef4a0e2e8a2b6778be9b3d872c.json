{"sha": "f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ODYxZjMyNTFjOWY0ZWY0YTBlMmU4YTJiNjc3OGJlOWIzZDg3MmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-25T09:31:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-25T09:31:57Z"}, "message": "Miri: santiy check that null pointer can never have an AllocId", "tree": {"sha": "3ed8f37726f042ac628c3f788f40cee17b6f61fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed8f37726f042ac628c3f788f40cee17b6f61fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c", "html_url": "https://github.com/rust-lang/rust/commit/f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c66d11a34047be1eb6c50703f8ba6689a15e716", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c66d11a34047be1eb6c50703f8ba6689a15e716", "html_url": "https://github.com/rust-lang/rust/commit/1c66d11a34047be1eb6c50703f8ba6689a15e716"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "0396806f822fbd862bb676264303f204780f4aeb", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=f4861f3251c9f4ef4a0e2e8a2b6778be9b3d872c", "patch": "@@ -1142,7 +1142,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Err(ptr) => ptr.into(),\n             Ok(bits) => {\n                 let addr = u64::try_from(bits).unwrap();\n-                M::ptr_from_addr(&self, addr)\n+                let ptr = M::ptr_from_addr(&self, addr);\n+                if addr == 0 {\n+                    assert!(ptr.provenance.is_none(), \"null pointer can never have an AllocId\");\n+                }\n+                ptr\n             }\n         }\n     }"}]}