{"sha": "e5ecbb55ee68370c629215e077ced565c0925d22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZWNiYjU1ZWU2ODM3MGM2MjkyMTVlMDc3Y2VkNTY1YzA5MjVkMjI=", "commit": {"author": {"name": "Phil Turnbull", "email": "philip.turnbull@gmail.com", "date": "2017-01-16T20:40:50Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T11:01:09Z"}, "message": "Lint `Option.map(f)` where f returns nil", "tree": {"sha": "de4fe169fe50c5259f2538eb8061806fa05af2fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4fe169fe50c5259f2538eb8061806fa05af2fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ecbb55ee68370c629215e077ced565c0925d22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa0zD1AAoJELb6Bqbg4mZbIdUP/35zUppPiaeOI4T9vutXT3gm\nDCP2CyGIMVg/JTsui0fizMDbdu1EPcAuM7pEk0WPXcY4bpKpuQ9cSEclPJ61Tz2k\n83qxIBEWDdnylxtiHveYwTJ19DeB2pfY108h21upAKX70CvsltpwlW2YrFx70UBI\ntG+gv5jdg/1953MrsHaGWIZOl8F5izcqvEDWbKh3aVb8hadsU9RaUqu4ezQ6FyhZ\nr/kx7APo57NzctFzgmzglfSjz8YOdSNOGPYGC441R2jhr/bOKpHOcvzmp1kqAgw8\nPQU9gc9LprfQyNDV85xFM7rlI9/8FYdK4kI8X1JmIvm9odEHtMagAhtAxmT+UoU+\nXiS0UpRQGit97nItAg1a6+eIivuqZujy1VE0HtEnr7fnOZ40sIPGV5E8C1y1Kum8\n2xsK780/DpEG+EH5IVNCuFOvixY5KIL95r4fSpOTJ1O1kqTZc2ueapSwxn3G8+5b\nQOEP/XUBxSpKfq8eOi11Zew3MJpuMqgpxF0CZylYB4EdULK45vsZi6ZbRNJhXzdH\n8NRAZDiYH7i8EWEsFZ53e8UyKfv0Luk9BBTsNetlL8BvEgBNwxvI5eMV8Y17P4IH\nWsaMiPRHfdyZ9EjKEFuABcvV9i1vwQE5JHJjXbwQXGgTvvrmI25cQTOfAgSpL2YM\nO7Z3cBCaDE1+nyKOnxRY\n=aTMJ\n-----END PGP SIGNATURE-----", "payload": "tree de4fe169fe50c5259f2538eb8061806fa05af2fc\nparent b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15\nauthor Phil Turnbull <philip.turnbull@gmail.com> 1484599250 -0500\ncommitter Philipp Hansch <dev@phansch.net> 1523790069 +0200\n\nLint `Option.map(f)` where f returns nil\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ecbb55ee68370c629215e077ced565c0925d22", "html_url": "https://github.com/rust-lang/rust/commit/e5ecbb55ee68370c629215e077ced565c0925d22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ecbb55ee68370c629215e077ced565c0925d22/comments", "author": {"login": "philipturnbull", "id": 45588, "node_id": "MDQ6VXNlcjQ1NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/45588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipturnbull", "html_url": "https://github.com/philipturnbull", "followers_url": "https://api.github.com/users/philipturnbull/followers", "following_url": "https://api.github.com/users/philipturnbull/following{/other_user}", "gists_url": "https://api.github.com/users/philipturnbull/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipturnbull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipturnbull/subscriptions", "organizations_url": "https://api.github.com/users/philipturnbull/orgs", "repos_url": "https://api.github.com/users/philipturnbull/repos", "events_url": "https://api.github.com/users/philipturnbull/events{/privacy}", "received_events_url": "https://api.github.com/users/philipturnbull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "html_url": "https://github.com/rust-lang/rust/commit/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "14438edcb98c8960c8ec9a71aab0fcb5f2b2c423", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecbb55ee68370c629215e077ced565c0925d22/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecbb55ee68370c629215e077ced565c0925d22/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e5ecbb55ee68370c629215e077ced565c0925d22", "patch": "@@ -705,6 +705,7 @@ All notable changes to this project will be documented in this file.\n [`nonsensical_open_options`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`not_unsafe_ptr_arg_deref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n [`ok_expect`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ok_expect\n+[`option_map_nil_fn`]: https://github.com/Manishearth/rust-clippy/wiki#option_map_nil_fn\n [`op_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#op_ref\n [`option_map_or_none`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unwrap_or`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#option_map_unwrap_or"}, {"sha": "755fc26bc9b86da67dcb8ad339617f8ecbc41307", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecbb55ee68370c629215e077ced565c0925d22/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecbb55ee68370c629215e077ced565c0925d22/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e5ecbb55ee68370c629215e077ced565c0925d22", "patch": "@@ -145,6 +145,7 @@ pub mod lifetimes;\n pub mod literal_representation;\n pub mod loops;\n pub mod map_clone;\n+pub mod map_nil_fn;\n pub mod matches;\n pub mod mem_forget;\n pub mod methods;\n@@ -405,6 +406,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box question_mark::QuestionMarkPass);\n     reg.register_late_lint_pass(box suspicious_trait_impl::SuspiciousImpl);\n     reg.register_late_lint_pass(box redundant_field_names::RedundantFieldNames);\n+    reg.register_late_lint_pass(box map_nil_fn::Pass);\n \n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n@@ -441,6 +443,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n+        map_nil_fn::OPTION_MAP_NIL_FN,\n         matches::SINGLE_MATCH_ELSE,\n         methods::FILTER_MAP,\n         methods::OPTION_MAP_UNWRAP_OR,"}, {"sha": "0fd2c176a643413dacad1a7b9d8323cbae569196", "filename": "clippy_lints/src/map_nil_fn.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecbb55ee68370c629215e077ced565c0925d22/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecbb55ee68370c629215e077ced565c0925d22/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_nil_fn.rs?ref=e5ecbb55ee68370c629215e077ced565c0925d22", "patch": "@@ -0,0 +1,91 @@\n+use rustc::hir;\n+use rustc::lint::*;\n+use rustc::ty;\n+use utils::{in_macro, match_type, method_chain_args, snippet, span_lint_and_then};\n+use utils::paths;\n+\n+#[derive(Clone)]\n+pub struct Pass;\n+\n+/// **What it does:** Checks for usage of `Option.map(f)` where f is a nil\n+/// function\n+///\n+/// **Why is this bad?** Readability, this can be written more clearly with\n+/// an if statement\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x : Option<&str> = do_stuff();\n+/// x.map(log_err_msg);\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let x : Option<&str> = do_stuff();\n+/// if let Some(msg) = x {\n+///     log_err_msg(msg)\n+/// }\n+/// ```\n+declare_lint! {\n+    pub OPTION_MAP_NIL_FN,\n+    Allow,\n+    \"using `Option.map(f)`, where f is a nil function\"\n+}\n+\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(OPTION_MAP_NIL_FN)\n+    }\n+}\n+\n+fn is_nil_function(cx: &LateContext, expr: &hir::Expr) -> bool {\n+    let ty = cx.tables.expr_ty(expr);\n+\n+    if let ty::TyFnDef(_, _, bare) = ty.sty {\n+        if let Some(fn_type) = cx.tcx.no_late_bound_regions(&bare.sig) {\n+            return fn_type.output().is_nil();\n+        }\n+    }\n+    false\n+}\n+\n+fn lint_map_nil_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_args: &[hir::Expr]) {\n+    let var_arg = &map_args[0];\n+    let fn_arg = &map_args[1];\n+\n+    if !match_type(cx, cx.tables.expr_ty(var_arg), &paths::OPTION) {\n+        return;\n+    }\n+\n+    let suggestion = if is_nil_function(cx, fn_arg) {\n+        format!(\"if let Some(...) = {0} {{ {1}(...) }}\",\n+                snippet(cx, var_arg.span, \"_\"),\n+                snippet(cx, fn_arg.span, \"_\"))\n+    } else {\n+        return;\n+    };\n+\n+    span_lint_and_then(cx,\n+                       OPTION_MAP_NIL_FN,\n+                       expr.span,\n+                       \"called `map(f)` on an Option value where `f` is a nil function\",\n+                       |db| { db.span_suggestion(stmt.span, \"try this\", suggestion); });\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_stmt(&mut self, cx: &LateContext, stmt: &hir::Stmt) {\n+        if in_macro(cx, stmt.span) {\n+            return;\n+        }\n+\n+        if let hir::StmtSemi(ref expr, _) = stmt.node {\n+            if let hir::ExprMethodCall(_, _, _) = expr.node {\n+                if let Some(arglists) = method_chain_args(expr, &[\"map\"]) {\n+                    lint_map_nil_fn(cx, stmt, expr, arglists[0]);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "0338216c578224e4d00fc35ca53c4e5f3c136ea9", "filename": "tests/compile-fail/map_nil_fn.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecbb55ee68370c629215e077ced565c0925d22/tests%2Fcompile-fail%2Fmap_nil_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecbb55ee68370c629215e077ced565c0925d22/tests%2Fcompile-fail%2Fmap_nil_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmap_nil_fn.rs?ref=e5ecbb55ee68370c629215e077ced565c0925d22", "patch": "@@ -0,0 +1,42 @@\n+#![feature(plugin)]\n+#![feature(const_fn)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy_pedantic)]\n+#![allow(unused, missing_docs_in_private_items)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+struct HasOption {\n+    field: Option<usize>,\n+}\n+\n+impl HasOption {\n+    fn do_option_nothing(self: &HasOption, value: usize) {}\n+\n+    fn do_option_plus_one(self: &HasOption, value: usize) -> usize {\n+        value + 1\n+    }\n+}\n+\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n+fn main() {\n+    let x = HasOption { field: Some(10) };\n+\n+    x.field.map(plus_one);\n+    let _ : Option<()> = x.field.map(do_nothing);\n+\n+    x.field.map(do_nothing);\n+    //~^ ERROR called `map(f)` on an Option value where `f` is a nil function\n+    //~| HELP try this\n+    //~| SUGGESTION if let Some(...) = x.field { do_nothing(...) }\n+\n+    x.field.map(do_nothing);\n+    //~^ ERROR called `map(f)` on an Option value where `f` is a nil function\n+    //~| HELP try this\n+    //~| SUGGESTION if let Some(...) = x.field { do_nothing(...) }\n+}"}]}