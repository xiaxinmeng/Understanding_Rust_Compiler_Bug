{"sha": "e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "node_id": "C_kwDOAAsO6NoAKGU3MGU0ZDQ5OWRkOWRkMWY3ZmYzNzE3YjlkOTFjYTVkZDA3NTcxNDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-12T00:58:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-12T00:58:30Z"}, "message": "Auto merge of #91813 - matthiaskrgr:rollup-nryyeyj, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #90081 (Make `intrinsics::write_bytes` const)\n - #91643 (asm: Allow using r9 (ARM) and x18 (AArch64) if they are not reserved by the current target)\n - #91737 (Make certain panicky stdlib functions behave better under panic_immediate_abort)\n - #91750 (rustdoc: Add regression test for Iterator as notable trait on &T)\n - #91764 (Do not ICE when suggesting elided lifetimes on non-existent spans.)\n - #91780 (Remove hir::Node::hir_id.)\n - #91797 (Fix zero-sized reference to deallocated memory)\n - #91806 (Make `Unique`s methods `const`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ca2d074d8d0b5f315aa9500d19fae6e994e51761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2d074d8d0b5f315aa9500d19fae6e994e51761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "html_url": "https://github.com/rust-lang/rust/commit/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229d0a94128d036fb07dafdb1f73db5eba5ab0d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/229d0a94128d036fb07dafdb1f73db5eba5ab0d3", "html_url": "https://github.com/rust-lang/rust/commit/229d0a94128d036fb07dafdb1f73db5eba5ab0d3"}, {"sha": "9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "html_url": "https://github.com/rust-lang/rust/commit/9031ac4840e4da725a5972ac3e6d43f0074b4f3c"}], "stats": {"total": 381, "additions": 289, "deletions": 92}, "files": [{"sha": "9c28f3c7f5899c36f5a0029102ba61e84cb31b87", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -64,7 +64,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let mut clobber_abis = FxHashMap::default();\n         if let Some(asm_arch) = asm_arch {\n             for (abi_name, abi_span) in &asm.clobber_abis {\n-                match asm::InlineAsmClobberAbi::parse(asm_arch, &self.sess.target, *abi_name) {\n+                match asm::InlineAsmClobberAbi::parse(\n+                    asm_arch,\n+                    |feature| self.sess.target_features.contains(&Symbol::intern(feature)),\n+                    &self.sess.target,\n+                    *abi_name,\n+                ) {\n                     Ok(abi) => {\n                         // If the abi was already in the list, emit an error\n                         match clobber_abis.get(&abi) {"}, {"sha": "63cc6faf9ec5ea01de532406e44fcc2b98ff9f84", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -36,6 +36,7 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // #[target_feature].\n     (\"thumb-mode\", Some(sym::arm_target_feature)),\n     (\"thumb2\", Some(sym::arm_target_feature)),\n+    (\"reserve-r9\", Some(sym::arm_target_feature)),\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &["}, {"sha": "18dde3bc34ef15f9d11f0322572a029aef9dd3d7", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -322,6 +322,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::copy => {\n                 self.copy_intrinsic(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n+            sym::write_bytes => {\n+                self.write_bytes_intrinsic(&args[0], &args[1], &args[2])?;\n+            }\n             sym::offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n                 let offset_count = self.read_scalar(&args[1])?.to_machine_isize(self)?;\n@@ -567,6 +570,27 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.memory.copy(src, align, dst, align, size, nonoverlapping)\n     }\n \n+    pub(crate) fn write_bytes_intrinsic(\n+        &mut self,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        byte: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        let layout = self.layout_of(dst.layout.ty.builtin_deref(true).unwrap().ty)?;\n+\n+        let dst = self.read_pointer(&dst)?;\n+        let byte = self.read_scalar(&byte)?.to_u8()?;\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+\n+        let len = layout\n+            .size\n+            .checked_mul(count, self)\n+            .ok_or_else(|| err_ub_format!(\"overflow computing total size of `write_bytes`\"))?;\n+\n+        let bytes = std::iter::repeat(byte).take(len.bytes_usize());\n+        self.memory.write_bytes(dst, bytes)\n+    }\n+\n     pub(crate) fn raw_eq_intrinsic(\n         &mut self,\n         lhs: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,"}, {"sha": "9a8bc2efbfa4628b3caaa8d1aa9284020fdff613", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -3210,34 +3210,6 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n-    pub fn hir_id(&self) -> Option<HirId> {\n-        match self {\n-            Node::Item(Item { def_id, .. })\n-            | Node::TraitItem(TraitItem { def_id, .. })\n-            | Node::ImplItem(ImplItem { def_id, .. })\n-            | Node::ForeignItem(ForeignItem { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n-            Node::Field(FieldDef { hir_id, .. })\n-            | Node::AnonConst(AnonConst { hir_id, .. })\n-            | Node::Expr(Expr { hir_id, .. })\n-            | Node::Stmt(Stmt { hir_id, .. })\n-            | Node::Ty(Ty { hir_id, .. })\n-            | Node::Binding(Pat { hir_id, .. })\n-            | Node::Pat(Pat { hir_id, .. })\n-            | Node::Arm(Arm { hir_id, .. })\n-            | Node::Block(Block { hir_id, .. })\n-            | Node::Local(Local { hir_id, .. })\n-            | Node::Lifetime(Lifetime { hir_id, .. })\n-            | Node::Param(Param { hir_id, .. })\n-            | Node::Infer(InferArg { hir_id, .. })\n-            | Node::GenericParam(GenericParam { hir_id, .. }) => Some(*hir_id),\n-            Node::TraitRef(TraitRef { hir_ref_id, .. }) => Some(*hir_ref_id),\n-            Node::PathSegment(PathSegment { hir_id, .. }) => *hir_id,\n-            Node::Variant(Variant { id, .. }) => Some(*id),\n-            Node::Ctor(variant) => variant.ctor_hir_id(),\n-            Node::Crate(_) | Node::Visibility(_) => None,\n-        }\n-    }\n-\n     /// Returns `Constness::Const` when this node is a const fn/impl/item.\n     pub fn constness_for_typeck(&self) -> Constness {\n         match self {"}, {"sha": "3c79020523a9fea2f99e036dc22811c0f2b7c31c", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -22,9 +22,7 @@ use ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n-use rustc_errors::{\n-    add_elided_lifetime_in_path_suggestion, struct_span_err, Applicability, SuggestionStyle,\n-};\n+use rustc_errors::{struct_span_err, Applicability, SuggestionStyle};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -670,23 +668,6 @@ pub trait LintContext: Sized {\n                 ) => {\n                     db.span_note(span_def, \"the macro is defined here\");\n                 }\n-                BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n-                    n,\n-                    path_span,\n-                    incl_angl_brckt,\n-                    insertion_span,\n-                    anon_lts,\n-                ) => {\n-                    add_elided_lifetime_in_path_suggestion(\n-                        sess.source_map(),\n-                        &mut db,\n-                        n,\n-                        path_span,\n-                        incl_angl_brckt,\n-                        insertion_span,\n-                        anon_lts,\n-                    );\n-                }\n                 BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n                     db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n                 }"}, {"sha": "3f504d75dfc92120bee05a736400105e181ca579", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -289,7 +289,6 @@ pub enum BuiltinLintDiagnostics {\n     AbsPathWithModule(Span),\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n-    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n     RedundantImport(Vec<(Span, bool)>, Ident),"}, {"sha": "feb4f82ce8ddcc53088ab561fdae62dc76f937b3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -2115,6 +2115,11 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     })\n                     .map(|(formatter, span)| (*span, formatter(name)))\n                     .collect();\n+                if spans_suggs.is_empty() {\n+                    // If all the spans come from macros, we cannot extract snippets and then\n+                    // `formatters` only contains None and `spans_suggs` is empty.\n+                    return;\n+                }\n                 err.multipart_suggestion_verbose(\n                     &format!(\n                         \"consider using the `{}` lifetime\","}, {"sha": "4bf909ce46d257955a319c518726ae605b1cba26", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -70,6 +71,22 @@ impl AArch64InlineAsmRegClass {\n     }\n }\n \n+pub fn reserved_x18(\n+    _arch: InlineAsmArch,\n+    _has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+) -> Result<(), &'static str> {\n+    if target.os == \"android\"\n+        || target.is_like_fuchsia\n+        || target.is_like_osx\n+        || target.is_like_windows\n+    {\n+        Err(\"x18 is a reserved register on this target\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     AArch64 AArch64InlineAsmReg AArch64InlineAsmRegClass {\n         x0: reg = [\"x0\", \"w0\"],\n@@ -90,6 +107,7 @@ def_regs! {\n         x15: reg = [\"x15\", \"w15\"],\n         x16: reg = [\"x16\", \"w16\"],\n         x17: reg = [\"x17\", \"w17\"],\n+        x18: reg = [\"x18\", \"w18\"] % reserved_x18,\n         x20: reg = [\"x20\", \"w20\"],\n         x21: reg = [\"x21\", \"w21\"],\n         x22: reg = [\"x22\", \"w22\"],\n@@ -149,8 +167,6 @@ def_regs! {\n         p14: preg = [\"p14\"],\n         p15: preg = [\"p15\"],\n         ffr: preg = [\"ffr\"],\n-        #error = [\"x18\", \"w18\"] =>\n-            \"x18 is used as a reserved register on some targets and cannot be used as an operand for inline asm\",\n         #error = [\"x19\", \"w19\"] =>\n             \"x19 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"x29\", \"w29\", \"fp\", \"wfp\"] =>"}, {"sha": "b03594b3151a3788a54f5296b0d105b850c39ef5", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -99,6 +99,22 @@ fn not_thumb1(\n     }\n }\n \n+fn reserved_r9(\n+    arch: InlineAsmArch,\n+    mut has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+) -> Result<(), &'static str> {\n+    not_thumb1(arch, &mut has_feature, target)?;\n+\n+    // We detect this using the reserved-r9 feature instead of using the target\n+    // because the relocation model can be changed with compiler options.\n+    if has_feature(\"reserved-r9\") {\n+        Err(\"the RWPI static base register (r9) cannot be used as an operand for inline asm\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     Arm ArmInlineAsmReg ArmInlineAsmRegClass {\n         r0: reg = [\"r0\", \"a1\"],\n@@ -109,6 +125,7 @@ def_regs! {\n         r5: reg = [\"r5\", \"v2\"],\n         r7: reg = [\"r7\", \"v4\"] % frame_pointer_r7,\n         r8: reg = [\"r8\", \"v5\"] % not_thumb1,\n+        r9: reg = [\"r9\", \"v6\", \"rfp\"] % reserved_r9,\n         r10: reg = [\"r10\", \"sl\"] % not_thumb1,\n         r11: reg = [\"r11\", \"fp\"] % frame_pointer_r11,\n         r12: reg = [\"r12\", \"ip\"] % not_thumb1,\n@@ -195,8 +212,6 @@ def_regs! {\n         q15: qreg = [\"q15\"],\n         #error = [\"r6\", \"v3\"] =>\n             \"r6 is used internally by LLVM and cannot be used as an operand for inline asm\",\n-        #error = [\"r9\", \"v6\", \"rfp\"] =>\n-            \"r9 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"r13\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r15\", \"pc\"] =>"}, {"sha": "f1f5f4389e3e9097b9e0ef7ac12cec97afecde97", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -785,6 +785,7 @@ pub enum InlineAsmClobberAbi {\n     X86_64SysV,\n     Arm,\n     AArch64,\n+    AArch64NoX18,\n     RiscV,\n }\n \n@@ -793,6 +794,7 @@ impl InlineAsmClobberAbi {\n     /// clobber ABIs for the target.\n     pub fn parse(\n         arch: InlineAsmArch,\n+        has_feature: impl FnMut(&str) -> bool,\n         target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static [&'static str]> {\n@@ -816,7 +818,13 @@ impl InlineAsmClobberAbi {\n                 _ => Err(&[\"C\", \"system\", \"efiapi\", \"aapcs\"]),\n             },\n             InlineAsmArch::AArch64 => match name {\n-                \"C\" | \"system\" | \"efiapi\" => Ok(InlineAsmClobberAbi::AArch64),\n+                \"C\" | \"system\" | \"efiapi\" => {\n+                    Ok(if aarch64::reserved_x18(arch, has_feature, target).is_err() {\n+                        InlineAsmClobberAbi::AArch64NoX18\n+                    } else {\n+                        InlineAsmClobberAbi::AArch64\n+                    })\n+                }\n                 _ => Err(&[\"C\", \"system\", \"efiapi\"]),\n             },\n             InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => match name {\n@@ -891,8 +899,25 @@ impl InlineAsmClobberAbi {\n                 AArch64 AArch64InlineAsmReg {\n                     x0, x1, x2, x3, x4, x5, x6, x7,\n                     x8, x9, x10, x11, x12, x13, x14, x15,\n-                    // x18 is platform-reserved or temporary, but we exclude it\n-                    // here since it is a reserved register.\n+                    x16, x17, x18, x30,\n+\n+                    // Technically the low 64 bits of v8-v15 are preserved, but\n+                    // we have no way of expressing this using clobbers.\n+                    v0, v1, v2, v3, v4, v5, v6, v7,\n+                    v8, v9, v10, v11, v12, v13, v14, v15,\n+                    v16, v17, v18, v19, v20, v21, v22, v23,\n+                    v24, v25, v26, v27, v28, v29, v30, v31,\n+\n+                    p0, p1, p2, p3, p4, p5, p6, p7,\n+                    p8, p9, p10, p11, p12, p13, p14, p15,\n+                    ffr,\n+\n+                }\n+            },\n+            InlineAsmClobberAbi::AArch64NoX18 => clobbered_regs! {\n+                AArch64 AArch64InlineAsmReg {\n+                    x0, x1, x2, x3, x4, x5, x6, x7,\n+                    x8, x9, x10, x11, x12, x13, x14, x15,\n                     x16, x17, x30,\n \n                     // Technically the low 64 bits of v8-v15 are preserved, but\n@@ -910,7 +935,8 @@ impl InlineAsmClobberAbi {\n             },\n             InlineAsmClobberAbi::Arm => clobbered_regs! {\n                 Arm ArmInlineAsmReg {\n-                    // r9 is platform-reserved and is treated as callee-saved.\n+                    // r9 is either platform-reserved or callee-saved. Either\n+                    // way we don't need to clobber it.\n                     r0, r1, r2, r3, r12, r14,\n \n                     // The finest-grained register variant is used here so that"}, {"sha": "1bff19d05c10d33de7a81f7d4a21c2565d46d09f", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -128,10 +128,6 @@ impl<T, A: Allocator> Drop for Drain<'_, T, A> {\n \n         let iter = mem::replace(&mut self.iter, (&mut []).iter());\n         let drop_len = iter.len();\n-        let drop_ptr = iter.as_slice().as_ptr();\n-\n-        // forget iter so there's no aliasing reference\n-        drop(iter);\n \n         let mut vec = self.vec;\n \n@@ -155,6 +151,12 @@ impl<T, A: Allocator> Drop for Drain<'_, T, A> {\n             return;\n         }\n \n+        // as_slice() must only be called when iter.len() is > 0 because\n+        // vec::Splice modifies vec::Drain fields and may grow the vec which would invalidate\n+        // the iterator's internal pointers. Creating a reference to deallocated memory\n+        // is invalid even when it is zero-length\n+        let drop_ptr = iter.as_slice().as_ptr();\n+\n         unsafe {\n             // drop_ptr comes from a slice::Iter which only gives us a &[T] but for drop_in_place\n             // a pointer with mutable provenance is necessary. Therefore we must reconstruct"}, {"sha": "ad2f6f213dec8a390699707a24e10b83ec3fae8c", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -2244,13 +2244,29 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n /// assert_eq!(*v, 42);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n #[inline]\n-pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n+pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n         fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n     }\n \n-    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n+    #[cfg(debug_assertions)]\n+    fn runtime_check<T>(ptr: *mut T) {\n+        debug_assert!(\n+            is_aligned_and_not_null(ptr),\n+            \"attempt to write to unaligned or null pointer\"\n+        );\n+    }\n+    #[cfg(debug_assertions)]\n+    const fn compiletime_check<T>(_ptr: *mut T) {}\n+    #[cfg(debug_assertions)]\n+    // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to\n+    // not do them during compile time\n+    unsafe {\n+        const_eval_select((dst,), compiletime_check, runtime_check);\n+    }\n \n     // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.\n     unsafe { write_bytes(dst, val, count) }"}, {"sha": "d9a40a9b2ec0dd35028844880555370afd00dece", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -124,6 +124,7 @@\n #![feature(const_option)]\n #![feature(const_pin)]\n #![feature(const_replace)]\n+#![feature(const_ptr_is_null)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]"}, {"sha": "a6e7257448cb5155a59b04176a322a46ebd4e24c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -1671,7 +1671,8 @@ impl<T, E> Option<Result<T, E>> {\n }\n \n // This is a separate function to reduce the code size of .expect() itself.\n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n const fn expect_failed(msg: &str) -> ! {"}, {"sha": "f5c624c225f26350b17c0b04cf36c928bb7fdc44", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -92,7 +92,7 @@ impl<T: ?Sized> Unique<T> {\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n     #[inline]\n-    pub fn new(ptr: *mut T) -> Option<Self> {\n+    pub const fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n             // SAFETY: The pointer has already been checked and is not null.\n             Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n@@ -115,7 +115,7 @@ impl<T: ?Sized> Unique<T> {\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_ref(&self) -> &T {\n+    pub const unsafe fn as_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.as_ptr() }\n@@ -128,7 +128,7 @@ impl<T: ?Sized> Unique<T> {\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_mut(&mut self) -> &mut T {\n+    pub const unsafe fn as_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n         unsafe { &mut *self.as_ptr() }"}, {"sha": "ab067d57d082abc66ae74307382457573f88d874", "filename": "library/core/src/result.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -1653,13 +1653,26 @@ impl<T> Result<T, T> {\n }\n \n // This is a separate function to reduce the code size of the methods\n+#[cfg(not(feature = \"panic_immediate_abort\"))]\n #[inline(never)]\n #[cold]\n #[track_caller]\n fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, error)\n }\n \n+// This is a separate function to avoid constructing a `dyn Debug`\n+// that gets immediately thrown away, since vtables don't get cleaned up\n+// by dead code elimination if a trait object is constructed even if it goes\n+// unused\n+#[cfg(feature = \"panic_immediate_abort\")]\n+#[inline]\n+#[cold]\n+#[track_caller]\n+fn unwrap_failed<T>(_msg: &str, _error: &T) -> ! {\n+    panic!()\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "0298bba8d329eb9c2fb078196344741d5c93cf33", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -27,35 +27,40 @@ where\n     }\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n     panic!(\"range start index {} out of range for slice of length {}\", index, len);\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n     panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_index_order_fail(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_end_index_overflow_fail() -> ! {"}, {"sha": "84cef53b3584b091da23e53c58688c48fad3d201", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -35,3 +35,33 @@ fn test_assume_can_be_in_const_contexts() {\n     let rs = unsafe { foo(42, 97) };\n     assert_eq!(rs, 0);\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+const fn test_write_bytes_in_const_contexts() {\n+    use core::intrinsics::write_bytes;\n+\n+    const TEST: [u32; 3] = {\n+        let mut arr = [1u32, 2, 3];\n+        unsafe {\n+            write_bytes(arr.as_mut_ptr(), 0, 2);\n+        }\n+        arr\n+    };\n+\n+    assert!(TEST[0] == 0);\n+    assert!(TEST[1] == 0);\n+    assert!(TEST[2] == 3);\n+\n+    const TEST2: [u32; 3] = {\n+        let mut arr = [1u32, 2, 3];\n+        unsafe {\n+            write_bytes(arr.as_mut_ptr(), 1, 2);\n+        }\n+        arr\n+    };\n+\n+    assert!(TEST2[0] == 16843009);\n+    assert!(TEST2[1] == 16843009);\n+    assert!(TEST2[2] == 3);\n+}"}, {"sha": "b359dcea0ff471bd768f366a6a13a3b45a9d7110", "filename": "src/test/rustdoc/doc-notable_trait-mut_t_is_not_ref_t.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -0,0 +1,21 @@\n+//! Test case for [#78160].\n+//!\n+//! A SomeTrait that is implemented for `&mut T` should not be marked as\n+//! \"notable\" for return values that are `&T`.\n+//!\n+//! [#78160]: https://github.com/rust-lang/rust/issues/78160\n+\n+#![feature(rustdoc_internals)]\n+\n+#[doc(primitive = \"reference\")]\n+/// Some useless docs, wouhou!\n+///\n+/// We need to put this in here, because notable traits\n+/// that are implemented on foreign types don't show up.\n+mod reference {}\n+\n+// @has doc_notable_trait_mut_t_is_not_ref_t/fn.fn_no_matches.html\n+// @!has - '//code[@class=\"content\"]' \"impl<'_, I> Iterator for &'_ mut I\"\n+pub fn fn_no_matches<'a, T: Iterator + 'a>() -> &'a T {\n+    loop {}\n+}"}, {"sha": "e346f8d992aa5cd8f3f4ae8c60f7dec2841028fe", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -29,8 +29,6 @@ fn main() {\n         //~^ ERROR invalid register `sp`: the stack pointer cannot be used as an operand\n         asm!(\"\", in(\"xzr\") foo);\n         //~^ ERROR invalid register `xzr`: the zero register cannot be used as an operand\n-        asm!(\"\", in(\"x18\") foo);\n-        //~^ ERROR invalid register `x18`: x18 is used as a reserved register on some targets and cannot be used as an operand for inline asm\n         asm!(\"\", in(\"x19\") foo);\n         //~^ ERROR invalid register `x19`: x19 is used internally by LLVM and cannot be used as an operand for inline asm\n "}, {"sha": "42f2a5d72ec0915cfb30e02ef36600c64214169a", "filename": "src/test/ui/asm/aarch64/bad-reg.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -74,79 +74,73 @@ error: invalid register `xzr`: the zero register cannot be used as an operand fo\n LL |         asm!(\"\", in(\"xzr\") foo);\n    |                  ^^^^^^^^^^^^^\n \n-error: invalid register `x18`: x18 is used as a reserved register on some targets and cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:32:18\n-   |\n-LL |         asm!(\"\", in(\"x18\") foo);\n-   |                  ^^^^^^^^^^^^^\n-\n error: invalid register `x19`: x19 is used internally by LLVM and cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:34:18\n+  --> $DIR/bad-reg.rs:32:18\n    |\n LL |         asm!(\"\", in(\"x19\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:37:18\n+  --> $DIR/bad-reg.rs:35:18\n    |\n LL |         asm!(\"\", in(\"p0\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:40:20\n+  --> $DIR/bad-reg.rs:38:20\n    |\n LL |         asm!(\"{}\", in(preg) foo);\n    |                    ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:42:20\n+  --> $DIR/bad-reg.rs:40:20\n    |\n LL |         asm!(\"{}\", out(preg) _);\n    |                    ^^^^^^^^^^^\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:48:32\n+  --> $DIR/bad-reg.rs:46:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, in(\"w0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:50:32\n+  --> $DIR/bad-reg.rs:48:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:50:18\n+  --> $DIR/bad-reg.rs:48:18\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ^^^^^^^^^^^^\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:53:32\n+  --> $DIR/bad-reg.rs:51:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, in(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:55:32\n+  --> $DIR/bad-reg.rs:53:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:55:18\n+  --> $DIR/bad-reg.rs:53:18\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ^^^^^^^^^^^^\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "0335f72b7846f0a561fa30ccabd1938831d8bc98", "filename": "src/test/ui/lifetimes/auxiliary/issue-91763-aux.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Flifetimes%2Fauxiliary%2Fissue-91763-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Flifetimes%2Fauxiliary%2Fissue-91763-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fauxiliary%2Fissue-91763-aux.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -0,0 +1,47 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+//#![feature(proc_macro_diagnostic, proc_macro_span, proc_macro_def_site)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Delimiter, Group, Ident, Punct, Spacing, Span, TokenStream, TokenTree};\n+use std::iter::FromIterator;\n+\n+#[proc_macro_attribute]\n+pub fn repro(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    let call_site = Span::call_site();\n+    let span = input.into_iter().nth(8).unwrap().span();\n+\n+    //fn f(_: &::std::fmt::Formatter) {}\n+    TokenStream::from_iter([\n+        TokenTree::Ident(Ident::new(\"fn\", call_site)),\n+        TokenTree::Ident(Ident::new(\"f\", call_site)),\n+        TokenTree::Group(Group::new(\n+            Delimiter::Parenthesis,\n+            TokenStream::from_iter([\n+                TokenTree::Ident(Ident::new(\"_\", call_site)),\n+                TokenTree::Punct(punct(':', Spacing::Alone, call_site)),\n+                TokenTree::Punct(punct('&', Spacing::Alone, call_site)),\n+                TokenTree::Punct(punct(':', Spacing::Joint, span)),\n+                TokenTree::Punct(punct(':', Spacing::Alone, span)),\n+                TokenTree::Ident(Ident::new(\"std\", span)),\n+                TokenTree::Punct(punct(':', Spacing::Joint, span)),\n+                TokenTree::Punct(punct(':', Spacing::Alone, span)),\n+                TokenTree::Ident(Ident::new(\"fmt\", span)),\n+                TokenTree::Punct(punct(':', Spacing::Joint, span)),\n+                TokenTree::Punct(punct(':', Spacing::Alone, span)),\n+                TokenTree::Ident(Ident::new(\"Formatter\", span)),\n+            ]),\n+        )),\n+        TokenTree::Group(Group::new(Delimiter::Brace, TokenStream::new())),\n+    ])\n+}\n+\n+fn punct(ch: char, spacing: Spacing, span: Span) -> Punct {\n+    let mut punct = Punct::new(ch, spacing);\n+    punct.set_span(span);\n+    punct\n+}"}, {"sha": "2e8807fe639aca9f76ec04e13b1f616acca595dd", "filename": "src/test/ui/lifetimes/issue-91763.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.rs?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:issue-91763-aux.rs\n+\n+#![deny(elided_lifetimes_in_paths)]\n+\n+extern crate issue_91763_aux;\n+\n+#[issue_91763_aux::repro]\n+fn f() -> Ptr<Thing>;\n+//~^ ERROR hidden lifetime parameters in types are deprecated\n+\n+fn main() {}"}, {"sha": "1b1912c8e4544d8c03d168914fb4e72cccef0e9b", "filename": "src/test/ui/lifetimes/issue-91763.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.stderr?ref=e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "patch": "@@ -0,0 +1,14 @@\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/issue-91763.rs:8:20\n+   |\n+LL | fn f() -> Ptr<Thing>;\n+   |                    ^ expected named lifetime parameter\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-91763.rs:3:9\n+   |\n+LL | #![deny(elided_lifetimes_in_paths)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}