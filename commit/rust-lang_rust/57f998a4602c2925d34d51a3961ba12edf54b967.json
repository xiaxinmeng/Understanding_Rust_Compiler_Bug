{"sha": "57f998a4602c2925d34d51a3961ba12edf54b967", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3Zjk5OGE0NjAyYzI5MjVkMzRkNTFhMzk2MWJhMTJlZGY1NGI5Njc=", "commit": {"author": {"name": "Cobrand", "email": "cobrandw@gmail.com", "date": "2016-11-22T20:55:02Z"}, "committer": {"name": "Cobrand", "email": "cobrandw@gmail.com", "date": "2016-12-07T17:57:01Z"}, "message": "Improve and fix mpsc documentation\n\nCloses #37915\n\nThis commit enhances documentation with several links and\nfixes an error in the `sync_channel` documentation as well:\n`send` doesn't panic when the senders are all disconnected", "tree": {"sha": "e9a357c8fe03918ecc6300cc41a83449bcfc2e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a357c8fe03918ecc6300cc41a83449bcfc2e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57f998a4602c2925d34d51a3961ba12edf54b967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57f998a4602c2925d34d51a3961ba12edf54b967", "html_url": "https://github.com/rust-lang/rust/commit/57f998a4602c2925d34d51a3961ba12edf54b967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57f998a4602c2925d34d51a3961ba12edf54b967/comments", "author": {"login": "Cobrand", "id": 8882127, "node_id": "MDQ6VXNlcjg4ODIxMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/8882127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cobrand", "html_url": "https://github.com/Cobrand", "followers_url": "https://api.github.com/users/Cobrand/followers", "following_url": "https://api.github.com/users/Cobrand/following{/other_user}", "gists_url": "https://api.github.com/users/Cobrand/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cobrand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cobrand/subscriptions", "organizations_url": "https://api.github.com/users/Cobrand/orgs", "repos_url": "https://api.github.com/users/Cobrand/repos", "events_url": "https://api.github.com/users/Cobrand/events{/privacy}", "received_events_url": "https://api.github.com/users/Cobrand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Cobrand", "id": 8882127, "node_id": "MDQ6VXNlcjg4ODIxMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/8882127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cobrand", "html_url": "https://github.com/Cobrand", "followers_url": "https://api.github.com/users/Cobrand/followers", "following_url": "https://api.github.com/users/Cobrand/following{/other_user}", "gists_url": "https://api.github.com/users/Cobrand/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cobrand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cobrand/subscriptions", "organizations_url": "https://api.github.com/users/Cobrand/orgs", "repos_url": "https://api.github.com/users/Cobrand/repos", "events_url": "https://api.github.com/users/Cobrand/events{/privacy}", "received_events_url": "https://api.github.com/users/Cobrand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e39c0ede524e491cfd1898649115e03d4b22b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e39c0ede524e491cfd1898649115e03d4b22b53", "html_url": "https://github.com/rust-lang/rust/commit/7e39c0ede524e491cfd1898649115e03d4b22b53"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "9f51d3e87f3f74fc8a44a2ec3ba363645db6f5b6", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/57f998a4602c2925d34d51a3961ba12edf54b967/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f998a4602c2925d34d51a3961ba12edf54b967/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=57f998a4602c2925d34d51a3961ba12edf54b967", "patch": "@@ -454,10 +454,16 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n }\n \n /// Creates a new asynchronous channel, returning the sender/receiver halves.\n-///\n /// All data sent on the sender will become available on the receiver, and no\n /// send will block the calling thread (this channel has an \"infinite buffer\").\n ///\n+/// If the [`Receiver`] is disconnected while trying to [`send()`] with the\n+/// [`Sender`], the [`send()`] method will return an error.\n+///\n+/// [`send()`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+/// [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n+/// [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -487,18 +493,23 @@ pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n \n /// Creates a new synchronous, bounded channel.\n ///\n-/// Like asynchronous channels, the `Receiver` will block until a message\n+/// Like asynchronous channels, the [`Receiver`] will block until a message\n /// becomes available. These channels differ greatly in the semantics of the\n /// sender from asynchronous channels, however.\n ///\n-/// This channel has an internal buffer on which messages will be queued. `bound`\n-/// specifies the buffer size. When the internal buffer becomes full, future sends\n-/// will *block* waiting for the buffer to open up. Note that a buffer size of 0\n-/// is valid, in which case this becomes  \"rendezvous channel\" where each send will\n-/// not return until a recv is paired with it.\n+/// This channel has an internal buffer on which messages will be queued.\n+/// `bound` specifies the buffer size. When the internal buffer becomes full,\n+/// future sends will *block* waiting for the buffer to open up. Note that a\n+/// buffer size of 0 is valid, in which case this becomes \"rendezvous channel\"\n+/// where each [`send()`] will not return until a recv is paired with it.\n+///\n+/// Like asynchronous channels, if the [`Receiver`] is disconnected while\n+/// trying to [`send()`] with the [`SyncSender`], the [`send()`] method will\n+/// return an error.\n ///\n-/// As with asynchronous channels, all senders will panic in `send` if the\n-/// `Receiver` has been destroyed.\n+/// [`send()`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n+/// [`SyncSender`]: ../../../std/sync/mpsc/struct.SyncSender.html\n+/// [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n ///\n /// # Examples\n ///"}]}