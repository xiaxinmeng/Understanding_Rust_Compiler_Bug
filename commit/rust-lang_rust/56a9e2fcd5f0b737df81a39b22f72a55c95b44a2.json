{"sha": "56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTllMmZjZDVmMGI3MzdkZjgxYTM5YjIyZjcyYTU1Yzk1YjQ0YTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:57:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-07T00:10:37Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "c49c538f8e87842bb6371f97ece94ceaa0bcca8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c49c538f8e87842bb6371f97ece94ceaa0bcca8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "html_url": "https://github.com/rust-lang/rust/commit/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26cd8eae48ea99bda183c5224bc423991ccfaf1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/26cd8eae48ea99bda183c5224bc423991ccfaf1f", "html_url": "https://github.com/rust-lang/rust/commit/26cd8eae48ea99bda183c5224bc423991ccfaf1f"}], "stats": {"total": 101, "additions": 67, "deletions": 34}, "files": [{"sha": "3045102286005a9e3bc756d670cf2a2c3980b15e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -21,6 +21,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n+#![allow(unknown_features)]\n #![feature(unsafe_destructor, slicing_syntax)]\n #![feature(old_impl_check)]\n #![no_std]"}, {"sha": "09d140067f451902fe7649a84ee51df73084d8cf", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -1339,6 +1339,12 @@ pub trait StrExt: Index<FullRange, Output = str> {\n     fn trim_left(&self) -> &str {\n         UnicodeStr::trim_left(self.index(&FullRange))\n     }\n+\n+    /// Returns a string with trailing whitespace removed.\n+    #[stable]\n+    fn trim_right(&self) -> &str {\n+        UnicodeStr::trim_right(self.index(&FullRange))\n+    }\n }\n \n #[stable]"}, {"sha": "24ebd1ac21aa4effe123c9632cc249532510244d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -42,6 +42,9 @@\n #![experimental]\n #![allow(missing_docs)]\n \n+#[cfg(not(stage0))]\n+use marker::Sized;\n+\n pub type GlueFn = extern \"Rust\" fn(*const i8);\n \n #[lang=\"ty_desc\"]\n@@ -200,7 +203,10 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n+    #[cfg(not(stage0))]\n     pub fn type_id<T: ?Sized + 'static>() -> TypeId;\n+    #[cfg(stage0)]\n+    pub fn type_id<T: 'static>() -> TypeId;\n \n     /// Create a value initialized to zero.\n     ///\n@@ -550,7 +556,16 @@ pub struct TypeId {\n }\n \n impl TypeId {\n-    /// Returns the `TypeId` of the type this generic function has been instantiated with\n+    /// Returns the `TypeId` of the type this generic function has been\n+    /// instantiated with\n+    #[cfg(stage0)]\n+    pub fn of<T: 'static>() -> TypeId {\n+        unsafe { type_id::<T>() }\n+    }\n+\n+    /// Returns the `TypeId` of the type this generic function has been\n+    /// instantiated with\n+    #[cfg(not(stage0))]\n     pub fn of<T: ?Sized + 'static>() -> TypeId {\n         unsafe { type_id::<T>() }\n     }"}, {"sha": "bf2df465370084df2bb62cbd87fbf4be80484e40", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -733,7 +733,7 @@ macro_rules! iterator {\n }\n \n macro_rules! make_slice {\n-    ($t: ty -> $result: ty: $start: expr, $end: expr) => {{\n+    ($t: ty => $result: ty: $start: expr, $end: expr) => {{\n         let diff = $end as uint - $start as uint;\n         let len = if mem::size_of::<T>() == 0 {\n             diff\n@@ -797,7 +797,7 @@ impl<'a, T> Iter<'a, T> {\n     /// iterator can continue to be used while this exists.\n     #[experimental]\n     pub fn as_slice(&self) -> &'a [T] {\n-        make_slice!(T -> &'a [T]: self.ptr, self.end)\n+        make_slice!(T => &'a [T]: self.ptr, self.end)\n     }\n }\n \n@@ -876,7 +876,7 @@ impl<'a, T> ops::Index<ops::FullRange> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, _index: &ops::FullRange) -> &[T] {\n-        make_slice!(T -> &[T]: self.ptr, self.end)\n+        make_slice!(T => &[T]: self.ptr, self.end)\n     }\n }\n \n@@ -909,7 +909,7 @@ impl<'a, T> ops::IndexMut<ops::FullRange> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, _index: &ops::FullRange) -> &mut [T] {\n-        make_slice!(T -> &mut [T]: self.ptr, self.end)\n+        make_slice!(T => &mut [T]: self.ptr, self.end)\n     }\n }\n \n@@ -923,7 +923,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// restricted lifetimes that do not consume the iterator.\n     #[experimental]\n     pub fn into_slice(self) -> &'a mut [T] {\n-        make_slice!(T -> &'a mut [T]: self.ptr, self.end)\n+        make_slice!(T => &'a mut [T]: self.ptr, self.end)\n     }\n }\n "}, {"sha": "a3a041c2497c7a9fed075053374a2127f9e6929a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -22,6 +22,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "b29c24c586114ff6492c2a32e89647bf069c4564", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -486,9 +486,9 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             let method_call = ty::MethodCall::expr(expr.id());\n             match self.typer.node_method_ty(method_call) {\n                 Some(method_ty) => {\n-                    // If this is an index implemented by a method call, then it will\n-                    // include an implicit deref of the result.\n-                    let ret_ty = ty::ty_fn_ret(method_ty).unwrap();\n+                    // If this is an index implemented by a method call, then it\n+                    // will include an implicit deref of the result.\n+                    let ret_ty = self.overloaded_method_return_ty(method_ty);\n                     self.cat_deref(expr,\n                                    self.cat_rvalue_node(expr.id(),\n                                                         expr.span(),"}, {"sha": "9563dd45ca23444a4ba77f3c706b4f10be2176d6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -2405,7 +2405,7 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // First, try built-in indexing.\n     match (ty::index(adjusted_ty), &index_ty.sty) {\n-        (Some(ty), &ty::ty_uint(ast::TyU)) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n+        (Some(ty), &ty::ty_uint(ast::TyUs)) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n             debug!(\"try_index_step: success, using built-in indexing\");\n             fcx.write_adjustment(base_expr.id, base_expr.span, ty::AdjustDerefRef(adjustment));\n             return Some((tcx.types.uint, ty));"}, {"sha": "79e98f15a2d43daf7a4a609886f632debf61542e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'tcx> AstConv<'tcx> for CollectCtxt<'a, 'tcx> {\n             x => {\n                 self.tcx.sess.bug(format!(\"unexpected sort of node \\\n                                            in get_item_type_scheme(): {:?}\",\n-                                          x)[]);\n+                                          x).as_slice());\n             }\n         }\n     }"}, {"sha": "139170fc012cb59d869ab95f93cde444c84cd778", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -25,6 +25,7 @@ Core encoding and decoding interfaces.\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n #![feature(old_impl_check)]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "7b6ca10669df6036022f49518cff9c2f33709229", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -499,7 +499,7 @@ macro_rules! peel {\n /// Evaluates to the number of identifiers passed to it, for example: `count_idents!(a, b, c) == 3\n macro_rules! count_idents {\n     () => { 0u };\n-    ($_i:ident, $($rest:ident),*) => { 1 + count_idents!($($rest),*) }\n+    ($_i:ident, $($rest:ident,)*) => { 1 + count_idents!($($rest,)*) }\n }\n \n macro_rules! tuple {\n@@ -508,7 +508,7 @@ macro_rules! tuple {\n         impl<$($name:Decodable),*> Decodable for ($($name,)*) {\n             #[allow(non_snake_case)]\n             fn decode<D: Decoder>(d: &mut D) -> Result<($($name,)*), D::Error> {\n-                let len: uint = count_idents!($($name),*);\n+                let len: uint = count_idents!($($name,)*);\n                 d.read_tuple(len, |d| {\n                     let mut i = 0;\n                     let ret = ($(try!(d.read_tuple_arg({ i+=1; i-1 },"}, {"sha": "9a6ad04fdbc3eb1687fd43494cde57376d446c6f", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -13,7 +13,7 @@\n //! Readers and Writers for in-memory buffers\n \n use cmp::min;\n-use prelude::v1::Index;\n+use ops::Index;\n use option::Option::None;\n use result::Result::{Err, Ok};\n use io;"}, {"sha": "32b28c0c2c993d0e2b11f8f09bc1c7df9aae673a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -108,6 +108,7 @@\n #![feature(phase, lang_items, unsafe_destructor)]\n #![feature(slicing_syntax, unboxed_closures)]\n #![feature(old_impl_check)]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "581969e98fb8bec5d905f8534fd5bb62a8335599", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -68,7 +68,7 @@ use fmt;\n use iter::IteratorExt;\n use option::Option;\n use option::Option::{None, Some};\n-use prelude::v1::{FullRange, Index};\n+use ops::{FullRange, Index};\n use str;\n use str::StrExt;\n use string::{String, CowString};"}, {"sha": "bd4b0407bf5e618e98dd94d8e09abe0277b2083c", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -25,7 +25,7 @@ use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map, repeat};\n use mem;\n use option::Option::{self, Some, None};\n-use prelude::v1::{FullRange, Index};\n+use ops::{FullRange, Index};\n use slice::{SliceExt, SliceConcatExt};\n use str::{SplitTerminator, FromStr, StrExt};\n use string::{String, ToString};"}, {"sha": "dcb342b9ca2c3dec35b06f76434c9b42fb5f8f37", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -14,7 +14,10 @@\n \n // Reexported core operators\n #[stable] #[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n-#[stable] #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce, FullRange};\n+#[stable] #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n+\n+// TEMPORARY\n+#[unstable] #[doc(no_inline)] pub use ops::{Index, IndexMut, FullRange};\n \n // Reexported functions\n #[stable] #[doc(no_inline)] pub use mem::drop;"}, {"sha": "64c53e298efe62208d9e623ce7248f3d1d9a2e67", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -287,7 +287,7 @@ fn check_lhs_nt_follows(cx: &mut ExtCtxt, lhs: &NamedMatch, sp: Span) {\n     // &MatchedNonterminal(NtTT(box TtDelimited(...))) = lhs`\n     let matcher = match lhs {\n         &MatchedNonterminal(NtTT(ref inner)) => match &**inner {\n-            &TtDelimited(_, ref tts) => tts.tts[],\n+            &TtDelimited(_, ref tts) => tts.tts.as_slice(),\n             _ => cx.span_bug(sp, \"wrong-structured lhs for follow check\")\n         },\n         _ => cx.span_bug(sp, \"wrong-structured lhs for follow check\")\n@@ -317,9 +317,12 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n                     Some(&&TtToken(_, CloseDelim(_))) => follow.clone(),\n                     Some(&&TtToken(_, ref tok)) => tok.clone(),\n                     Some(&&TtSequence(sp, _)) => {\n-                        cx.span_err(sp, format!(\"`${0}:{1}` is followed by a sequence \\\n-                                                 repetition, which is not allowed for `{1}` \\\n-                                                 fragments\", name.as_str(), frag_spec.as_str())[]);\n+                        cx.span_err(sp,\n+                                    format!(\"`${0}:{1}` is followed by a \\\n+                                             sequence repetition, which is not \\\n+                                             allowed for `{1}` fragments\",\n+                                            name.as_str(), frag_spec.as_str())\n+                                        .as_slice());\n                         Eof\n                     },\n                     // die next iteration\n@@ -337,7 +340,7 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n                         cx.span_err(sp, format!(\"`${0}:{1}` is followed by `{2}`, which \\\n                                                  is not allowed for `{1}` fragments\",\n                                                  name.as_str(), frag_spec.as_str(),\n-                                                 token_to_string(next))[]);\n+                                                 token_to_string(next)).as_slice());\n                         continue\n                     },\n                 }\n@@ -351,11 +354,12 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n                     Some(ref u) => {\n                         let last = check_matcher(cx, seq.tts.iter(), u);\n                         match last {\n-                            // Since the delimiter isn't required after the last repetition, make\n-                            // sure that the *next* token is sane. This doesn't actually compute\n-                            // the FIRST of the rest of the matcher yet, it only considers single\n-                            // tokens and simple NTs. This is imprecise, but conservatively\n-                            // correct.\n+                            // Since the delimiter isn't required after the last\n+                            // repetition, make sure that the *next* token is\n+                            // sane. This doesn't actually compute the FIRST of\n+                            // the rest of the matcher yet, it only considers\n+                            // single tokens and simple NTs. This is imprecise,\n+                            // but conservatively correct.\n                             Some((span, tok)) => {\n                                 let fol = match tokens.peek() {\n                                     Some(&&TtToken(_, ref tok)) => tok.clone(),\n@@ -373,9 +377,9 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n                             None => last,\n                         }\n                     },\n-                    // If T has the form $(...)+ or $(...)*, run the algorithm on the contents with\n-                    // F set to the token following the sequence. If it accepts, continue, else,\n-                    // reject.\n+                    // If T has the form $(...)+ or $(...)*, run the algorithm\n+                    // on the contents with F set to the token following the\n+                    // sequence. If it accepts, continue, else, reject.\n                     None => {\n                         let fol = match tokens.peek() {\n                             Some(&&TtToken(_, ref tok)) => tok.clone(),\n@@ -449,6 +453,7 @@ fn is_in_follow(cx: &ExtCtxt, tok: &Token, frag: &str) -> bool {\n             // harmless\n             true\n         },\n-        _ => cx.bug(format!(\"unrecognized builtin nonterminal {}\", frag)[]),\n+        _ => cx.bug(format!(\"unrecognized builtin nonterminal {}\",\n+                            frag).as_slice()),\n     }\n }"}, {"sha": "f10113254de04f82ad10802b91e2437d0456a53a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                         \"the new orphan check rules will eventually be strictly enforced\");\n                 }\n \n-                if attr::contains_name(i.attrs[],\n+                if attr::contains_name(i.attrs.index(&FullRange),\n                                        \"old_impl_check\") {\n                     self.gate_feature(\"old_impl_check\",\n                                       i.span,"}, {"sha": "92e0395eca4397c012dc62b600dc83031b3089a9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a9e2fcd5f0b737df81a39b22f72a55c95b44a2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=56a9e2fcd5f0b737df81a39b22f72a55c95b44a2", "patch": "@@ -2613,7 +2613,7 @@ impl<'a> Parser<'a> {\n                         |p| p.parse_token_tree()\n                     );\n                     let (sep, repeat) = self.parse_sep_and_kleene_op();\n-                    let name_num = macro_parser::count_names(seq[]);\n+                    let name_num = macro_parser::count_names(seq.as_slice());\n                     return TtSequence(mk_sp(sp.lo, seq_span.hi),\n                                       Rc::new(SequenceRepetition {\n                                           tts: seq,\n@@ -2656,7 +2656,7 @@ impl<'a> Parser<'a> {\n             match self.token {\n                 token::SubstNt(name, _) =>\n                     self.fatal(format!(\"unknown macro variable `{}`\",\n-                                       token::get_ident(name))[]),\n+                                       token::get_ident(name)).index(&FullRange)),\n                 _ => {}\n             }\n         }"}]}