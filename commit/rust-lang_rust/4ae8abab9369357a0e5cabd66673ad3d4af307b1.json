{"sha": "4ae8abab9369357a0e5cabd66673ad3d4af307b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZThhYmFiOTM2OTM1N2EwZTVjYWJkNjY2NzNhZDNkNGFmMzA3YjE=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-03T15:56:16Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-03T23:15:42Z"}, "message": "Transition libtest to 2018 edition", "tree": {"sha": "9b317f41509b9dcdacb9c54d4e2227105ee3af8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b317f41509b9dcdacb9c54d4e2227105ee3af8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae8abab9369357a0e5cabd66673ad3d4af307b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae8abab9369357a0e5cabd66673ad3d4af307b1", "html_url": "https://github.com/rust-lang/rust/commit/4ae8abab9369357a0e5cabd66673ad3d4af307b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae8abab9369357a0e5cabd66673ad3d4af307b1/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f4f4a40b6c7bcb6fa07ee6575e8a9759ba08922", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f4a40b6c7bcb6fa07ee6575e8a9759ba08922", "html_url": "https://github.com/rust-lang/rust/commit/4f4f4a40b6c7bcb6fa07ee6575e8a9759ba08922"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "10bdd6e877c4f2da1c17c9044cbae0d0da46dfd2", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=4ae8abab9369357a0e5cabd66673ad3d4af307b1", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"test\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"test\""}, {"sha": "a06497f98626aa9f03bc406b6450c2b8856222aa", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=4ae8abab9369357a0e5cabd66673ad3d4af307b1", "patch": "@@ -145,7 +145,7 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n struct EscapedString<S: AsRef<str>>(S);\n \n impl<S: AsRef<str>> ::std::fmt::Display for EscapedString<S> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         let mut start = 0;\n \n         for (i, byte) in self.0.as_ref().bytes().enumerate() {"}, {"sha": "b3d719d5c64db38b23f1181662073ef21795f3a5", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4ae8abab9369357a0e5cabd66673ad3d4af307b1", "patch": "@@ -17,6 +17,7 @@\n // this crate, which relies on this attribute (rather than the value of `--crate-name` passed by\n // cargo) to detect this crate.\n \n+#![deny(rust_2018_idioms)]\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -32,10 +33,10 @@\n #![feature(termination_trait_lib)]\n #![feature(test)]\n \n-extern crate getopts;\n+use getopts;\n #[cfg(any(unix, target_os = \"cloudabi\"))]\n extern crate libc;\n-extern crate term;\n+use term;\n \n // FIXME(#54291): rustc and/or LLVM don't yet support building with panic-unwind\n //                on aarch64-pc-windows-msvc, so we don't link libtest against\n@@ -78,7 +79,7 @@ const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in qu\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n-    pub use {assert_test_result, filter_tests, parse_opts, run_test, test_main, test_main_static,\n+    pub use crate::{assert_test_result, filter_tests, parse_opts, run_test, test_main, test_main_static,\n              Bencher, DynTestFn, DynTestName, Metric, MetricMap, Options, RunIgnored, ShouldPanic,\n              StaticBenchFn, StaticTestFn, StaticTestName, TestDesc, TestDescAndFn, TestName,\n              TestOpts, TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk};\n@@ -87,7 +88,7 @@ pub mod test {\n pub mod stats;\n mod formatters;\n \n-use formatters::{JsonFormatter, OutputFormatter, PrettyFormatter, TerseFormatter};\n+use crate::formatters::{JsonFormatter, OutputFormatter, PrettyFormatter, TerseFormatter};\n \n /// Whether to execute tests concurrently or not\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -131,7 +132,7 @@ impl TestName {\n     }\n }\n impl fmt::Display for TestName {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.as_slice(), f)\n     }\n }\n@@ -185,7 +186,7 @@ impl TestFn {\n }\n \n impl fmt::Debug for TestFn {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match *self {\n             StaticTestFn(..) => \"StaticTestFn(..)\",\n             StaticBenchFn(..) => \"StaticBenchFn(..)\",\n@@ -823,7 +824,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n     let mut nbench = 0;\n \n     for test in filter_tests(&opts, tests) {\n-        use TestFn::*;\n+        use crate::TestFn::*;\n \n         let TestDescAndFn {\n             desc: TestDesc { name, .. },\n@@ -1454,12 +1455,12 @@ pub fn run_test(\n \n     match testfn {\n         DynBenchFn(bencher) => {\n-            ::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n+            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n                 bencher.run(harness)\n             });\n         }\n         StaticBenchFn(benchfn) => {\n-            ::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n+            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n                 (benchfn.clone())(harness)\n             });\n         }\n@@ -1673,7 +1674,7 @@ pub mod bench {\n     use std::cmp;\n     use std::io;\n     use std::sync::{Arc, Mutex};\n-    use stats;\n+    use crate::stats;\n     use super::{BenchMode, BenchSamples, Bencher, MonitorMsg, Sender, Sink, TestDesc, TestResult};\n \n     pub fn benchmark<F>(desc: TestDesc, monitor_ch: Sender<MonitorMsg>, nocapture: bool, f: F)\n@@ -1749,13 +1750,13 @@ pub mod bench {\n \n #[cfg(test)]\n mod tests {\n-    use test::{filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n+    use crate::test::{filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n                ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n                TrFailedMsg, TrIgnored, TrOk};\n     use std::sync::mpsc::channel;\n-    use bench;\n-    use Bencher;\n-    use Concurrent;\n+    use crate::bench;\n+    use crate::Bencher;\n+    use crate::Concurrent;\n \n \n     fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n@@ -2156,7 +2157,7 @@ mod tests {\n             allow_fail: false,\n         };\n \n-        ::bench::benchmark(desc, tx, true, f);\n+        crate::bench::benchmark(desc, tx, true, f);\n         rx.recv().unwrap();\n     }\n \n@@ -2175,7 +2176,7 @@ mod tests {\n             allow_fail: false,\n         };\n \n-        ::bench::benchmark(desc, tx, true, f);\n+        crate::bench::benchmark(desc, tx, true, f);\n         rx.recv().unwrap();\n     }\n }"}, {"sha": "5c9421d5ea4b023089049f6e23529af7a2ddf165", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8abab9369357a0e5cabd66673ad3d4af307b1/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=4ae8abab9369357a0e5cabd66673ad3d4af307b1", "patch": "@@ -319,8 +319,8 @@ pub fn winsorize(samples: &mut [f64], pct: f64) {\n \n #[cfg(test)]\n mod tests {\n-    use stats::Stats;\n-    use stats::Summary;\n+    use crate::stats::Stats;\n+    use crate::stats::Summary;\n     use std::f64;\n     use std::io::prelude::*;\n     use std::io;\n@@ -899,7 +899,7 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::Bencher;\n-    use stats::Stats;\n+    use crate::stats::Stats;\n \n     #[bench]\n     pub fn sum_three_items(b: &mut Bencher) {"}]}