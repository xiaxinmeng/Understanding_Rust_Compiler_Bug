{"sha": "be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "node_id": "C_kwDOAAsO6NoAKGJlNmQ2OTM0YjYzNWE4YzJlOGZmNWJiNjgwMDJhMzc0NGRkNDdlOGQ", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-15T22:07:52Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-16T22:02:36Z"}, "message": "Fix Visitor::NestedFilter in Clippy", "tree": {"sha": "95fb043dc808454eb698c39c8eae59f17966ede3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95fb043dc808454eb698c39c8eae59f17966ede3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "html_url": "https://github.com/rust-lang/rust/commit/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6312ee0f667d0c31ceb37b7304e86c924899fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6312ee0f667d0c31ceb37b7304e86c924899fd", "html_url": "https://github.com/rust-lang/rust/commit/1a6312ee0f667d0c31ceb37b7304e86c924899fd"}], "stats": {"total": 545, "additions": 126, "deletions": 419}, "files": [{"sha": "7cfb20745720d075df04044efc7628a113309c4b", "filename": "compiler/rustc_middle/src/hir/nested_filter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "previous_filename": "compiler/rustc_middle/src/hir/intravisit.rs"}, {"sha": "12c1bddf79d5d23e21913616a6dbefed03611682", "filename": "src/tools/clippy/clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -6,9 +6,8 @@ use clippy_utils::{eq_expr_value, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -220,16 +219,11 @@ struct ExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if eq_expr_value(self.cx, self.assignee, expr) {\n             self.counter += 1;\n         }\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "b3f9c1b297679f8a8774ba2c54d34cece15f0c87", "filename": "src/tools/clippy/clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::ty::implements_trait;\n use clippy_utils::{differing_macro_contexts, get_parent_expr};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -55,8 +54,6 @@ struct ExVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if let ExprKind::Closure(_, _, eid, _, _) = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n@@ -82,9 +79,6 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         }\n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression condition\";"}, {"sha": "7ffc8ecd31e5d37348b107bbd7572d7f583a9ced", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::{eq_expr_value, get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -452,8 +451,6 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         if !e.span.from_expansion() {\n             match &e.kind {\n@@ -470,9 +467,6 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         }\n         walk_expr(self, e);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn implements_ord<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n@@ -485,8 +479,6 @@ struct NotSimplificationVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind {\n             if let Some(suggestion) = simplify_not(self.cx, inner) {\n@@ -504,7 +496,4 @@ impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "85f952375491f213556d9f3fa606e8ad17edf044", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::LimitStack;\n use rustc_ast::ast::Attribute;\n-use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n@@ -149,8 +148,6 @@ struct CcHelper {\n }\n \n impl<'tcx> Visitor<'tcx> for CcHelper {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         walk_expr(self, e);\n         match e.kind {\n@@ -167,7 +164,4 @@ impl<'tcx> Visitor<'tcx> for CcHelper {\n             _ => {},\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "39456e25ff4eb4353c1408f8df29524659f08f8c", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -7,10 +7,10 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n use std::borrow::Cow;\n@@ -561,10 +561,10 @@ impl<'a, 'tcx> UsedValueFinderVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UsedValueFinderVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_local(&mut self, l: &'tcx rustc_hir::Local<'tcx>) {"}, {"sha": "78acdb5dfd580bd7906c298a28ca05f3bf51e76d", "filename": "src/tools/clippy/clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,12 +5,11 @@ use if_chain::if_chain;\n use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    intravisit::{walk_expr, walk_stmt, NestedVisitorMap, Visitor},\n+    intravisit::{walk_expr, walk_stmt, Visitor},\n     Body, Expr, ExprKind, HirId, Lit, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::{\n-    hir::map::Map,\n     lint::in_external_macro,\n     ty::{self, FloatTy, IntTy, PolyFnSig, Ty},\n };\n@@ -117,8 +116,6 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n@@ -209,10 +206,6 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n         walk_stmt(self, stmt);\n         self.ty_bounds.pop();\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'tcx>> {"}, {"sha": "6d3df260ca25592a59a43e5d75751200c20f7591", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -3,12 +3,12 @@ use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n use clippy_utils::{get_trait_def_id, is_automatically_derived, is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n     BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -382,7 +382,7 @@ struct UnsafeVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, span: Span, id: HirId) {\n         if self.has_unsafe {\n@@ -414,7 +414,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "a00361e6062ad4ab1faee890838dd36a9f54328a", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -13,10 +13,10 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n use rustc_errors::{Applicability, Handler, SuggestionStyle};\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AnonConst, Expr};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n@@ -799,7 +799,7 @@ struct FindPanicUnwrap<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.panic_span.is_some() {\n@@ -834,7 +834,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n     // Panics in const blocks will cause compilation to fail.\n     fn visit_anon_const(&mut self, _: &'tcx AnonConst) {}\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "a574c307a015fe9c3ba9fe7d907519ba5791f741", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -10,7 +10,7 @@ use core::fmt::Write;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     hir_id::HirIdSet,\n-    intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n+    intravisit::{walk_expr, Visitor},\n     Block, Expr, ExprKind, Guard, HirId, Pat, Stmt, StmtKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -370,11 +370,6 @@ impl<'tcx> InsertSearcher<'_, 'tcx> {\n     }\n }\n impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n-    type Map = ErasedMap<'tcx>;\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n             StmtKind::Semi(e) => {"}, {"sha": "65599a0587d449ab2150abdb280442d808e6a48c", "filename": "src/tools/clippy/clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_note};\n use clippy_utils::{get_parent_expr, path_to_local, path_to_local_id};\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, Guard, HirId, Local, Node, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -133,8 +132,6 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         match e.kind {\n             ExprKind::Continue(_) | ExprKind::Break(_, _) | ExprKind::Ret(_) => self.report_diverging_sub_expr(e),\n@@ -167,9 +164,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, _: &'tcx Block<'_>) {\n         // don't continue over blocks, LateLintPass already does that\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Walks up the AST from the given write expression (`vis.write_expr`) looking\n@@ -299,8 +293,6 @@ struct ReadVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if expr.hir_id == self.last_expr.hir_id {\n             return;\n@@ -343,9 +335,6 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Returns `true` if `expr` is the LHS of an assignment, like `expr = ...`."}, {"sha": "574678b5542111d4c3132b825139c56356254e25", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,7 +5,6 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n@@ -68,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n }\n \n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n-    use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+    use rustc_hir::intravisit::{self, Visitor};\n     use rustc_hir::{Expr, ImplItemKind};\n \n     struct FindPanicUnwrap<'a, 'tcx> {\n@@ -78,8 +77,6 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n     }\n \n     impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n-        type Map = Map<'tcx>;\n-\n         fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n             if let Some(macro_call) = root_macro_call_first_node(self.lcx, expr) {\n                 if is_panic(self.lcx, macro_call.def_id) {\n@@ -100,10 +97,6 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n             // and check sub-expressions\n             intravisit::walk_expr(self, expr);\n         }\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n     }\n \n     for impl_item in impl_items {"}, {"sha": "2610f0ff384eb25575cc75e52ec6f729fb2018f1", "filename": "src/tools/clippy/clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -4,7 +4,6 @@ use rustc_hir::def_id::{DefIdSet, LocalDefId};\n use rustc_hir::{self as hir, def::Res, intravisit, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::{\n-    hir::map::Map,\n     lint::in_external_macro,\n     ty::{self, Ty},\n };\n@@ -211,8 +210,6 @@ struct StaticMutVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         use hir::ExprKind::{AddrOf, Assign, AssignOp, Call, MethodCall};\n \n@@ -244,10 +241,6 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n             _ => {},\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }\n \n fn is_mutated_static(e: &hir::Expr<'_>) -> bool {"}, {"sha": "8902ee14572f5b67a1888c09ef828f2c3679054f", "filename": "src/tools/clippy/clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1,6 +1,6 @@\n use rustc_hir::{self as hir, intravisit, HirIdSet};\n use rustc_lint::LateContext;\n-use rustc_middle::{hir::map::Map, ty};\n+use rustc_middle::ty;\n use rustc_span::def_id::LocalDefId;\n \n use clippy_utils::diagnostics::span_lint;\n@@ -74,8 +74,6 @@ struct DerefVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Call(f, args) => {\n@@ -103,10 +101,6 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n \n         intravisit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }\n \n impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {"}, {"sha": "0cc697d8425517495e2aac59b7e0cb7f28a59759", "filename": "src/tools/clippy/clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -3,10 +3,9 @@ use clippy_utils::higher;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::SpanlessEq;\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{self as visit, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self as visit, Visitor};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -91,8 +90,6 @@ pub struct OppVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for OppVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if let Some(mutex) = is_mutex_lock_call(self.cx, expr) {\n             self.found_mutex = Some(mutex);\n@@ -101,10 +98,6 @@ impl<'tcx> Visitor<'tcx> for OppVisitor<'_, 'tcx> {\n         }\n         visit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Checks if `Mutex::lock` is called in any of the branches.\n@@ -115,8 +108,6 @@ pub struct ArmVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for ArmVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if let Some(mutex) = is_mutex_lock_call(self.cx, expr) {\n             self.found_mutex = Some(mutex);\n@@ -125,10 +116,6 @@ impl<'tcx> Visitor<'tcx> for ArmVisitor<'_, 'tcx> {\n         }\n         visit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {"}, {"sha": "104de0ff62f8a2e0d0101a601d34fc458c72de1c", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -3,10 +3,10 @@ use std::collections::BTreeMap;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{Ty, TyS, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -294,8 +294,6 @@ impl<'a, 'tcx> ImplicitHasherTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n         if let Some(target) = ImplicitHasherType::new(self.cx, t) {\n             self.found.push(target);\n@@ -311,10 +309,6 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n \n         walk_inf(self, inf);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Looks for default-hasher-dependent constructors like `HashMap::new`.\n@@ -337,7 +331,7 @@ impl<'a, 'b, 'tcx> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_body(&mut self, body: &'tcx Body<'_>) {\n         let old_maybe_typeck_results = self.maybe_typeck_results.replace(self.cx.tcx.typeck_body(body.id()));\n@@ -389,7 +383,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n         walk_expr(self, e);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "4615122bbf9e51cef7b6c3087b2e9a1eefabc945", "filename": "src/tools/clippy/clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -7,9 +7,9 @@ use if_chain::if_chain;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -230,10 +230,10 @@ struct SliceIndexLintingVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for SliceIndexLintingVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {"}, {"sha": "565057140454d4af4e3de567c216092365b45408", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -2,8 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::trait_ref_of_method;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::intravisit::{\n-    walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty,\n-    NestedVisitorMap, Visitor,\n+    walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty, Visitor,\n };\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n@@ -12,7 +11,6 @@ use rustc_hir::{\n     TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WhereClause, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Symbol};\n@@ -354,8 +352,6 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         self.record(&Some(*lifetime));\n@@ -409,9 +405,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         }\n         walk_ty(self, ty);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Are any lifetimes mentioned in the `where` clause? If so, we don't try to\n@@ -457,8 +450,6 @@ struct LifetimeChecker {\n }\n \n impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n-    type Map = Map<'tcx>;\n-\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         self.map.remove(&lifetime.name.ident().name);\n@@ -474,9 +465,6 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n             walk_generic_param(self, param);\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>, generics: &'tcx Generics<'_>) {\n@@ -508,16 +496,10 @@ struct BodyLifetimeChecker {\n }\n \n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n-    type Map = Map<'tcx>;\n-\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         if lifetime.name.ident().name != kw::Empty && lifetime.name.ident().name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "9d8679d77c6d02590737d25a19de817cb6e6f679", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -2,11 +2,10 @@ use super::MUT_RANGE_BOUND;\n use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::{get_enclosing_block, higher, path_to_local};\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n@@ -148,12 +147,6 @@ impl BreakAfterExprVisitor {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for BreakAfterExprVisitor {\n-    type Map = Map<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if self.past_candidate {\n             return;"}, {"sha": "f7d3227af01745a0ae532005ef8cf771cf98a960", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -7,10 +7,10 @@ use clippy_utils::{can_move_expr_to_closure, is_trait_method, path_to_local, pat\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId, HirIdSet, Local, Mutability, Node, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, TyS};\n use rustc_span::sym;\n@@ -262,11 +262,6 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n             walk_expr(self, expr);\n         }\n     }\n-\n-    type Map = Map<'tcx>;\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n impl<'tcx> IterFunctionVisitor<'_, 'tcx> {\n@@ -298,7 +293,7 @@ struct UsedCountVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if path_to_local_id(expr, self.id) {\n@@ -308,8 +303,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "22da21bc6bc40597f815c86f6f29822052bb39db", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -8,10 +8,9 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Symbol};\n@@ -294,8 +293,6 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // a range index op\n@@ -374,7 +371,4 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n         }\n         self.prefer_mutable = old;\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "c61b411708c2a932be82b960d21c0146d0d88c37", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -6,10 +6,9 @@ use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Node, Pat, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_span::symbol::sym;\n use std::iter::Iterator;\n \n@@ -134,8 +133,6 @@ impl<'a, 'tcx> SameItemPushVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             // Non-determinism may occur ... don't give a lint\n@@ -175,10 +172,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n // Given some statement, determine if that statement is a push on a Vec. If it is, return"}, {"sha": "eac0f03b142a821c56ade84d17f2ea5fe8264f04", "filename": "src/tools/clippy/clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -3,10 +3,10 @@ use clippy_utils::{get_parent_expr, is_integer_const, path_to_local, path_to_loc\n use if_chain::if_chain;\n use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor};\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::Ty;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Symbol};\n@@ -50,8 +50,6 @@ impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.done {\n             return;\n@@ -102,9 +100,6 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n             walk_expr(self, expr);\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n enum InitializeVisitorState<'hir> {\n@@ -151,7 +146,7 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_local(&mut self, l: &'tcx Local<'_>) {\n         // Look for declarations of the variable\n@@ -254,8 +249,8 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n \n@@ -283,8 +278,6 @@ pub(super) struct LoopNestVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         if stmt.hir_id == self.hir_id {\n             self.nesting = LookFurther;\n@@ -323,10 +316,6 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n         }\n         walk_pat(self, pat);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// If `arg` was the argument to a `for` loop, return the \"cleanest\" way of writing the"}, {"sha": "5dcfed65c78ac7829e004564ce8b1957c81d4866", "filename": "src/tools/clippy/clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,11 +5,10 @@ use clippy_utils::usage::mutated_variables;\n use if_chain::if_chain;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefIdMap;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::HirIdSet;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n     if constant(cx, cx.typeck_results(), cond).is_some() {\n@@ -67,8 +66,6 @@ struct HasBreakOrReturnVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.has_break_or_return {\n             return;\n@@ -84,10 +81,6 @@ impl<'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Collects the set of variables in an expression\n@@ -123,8 +116,6 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::Path(_) => self.insert_def_id(ex),\n@@ -134,8 +125,4 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n             _ => walk_expr(self, ex),\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "e0b235c355980e444ee8367a422cc32adb497791", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::{\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n@@ -211,11 +211,6 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n         uses_iter: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, '_, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if self.uses_iter {\n                 // return\n@@ -254,11 +249,6 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_iter: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for AfterLoopVisitor<'_, '_, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if self.used_iter {\n                 return;\n@@ -293,12 +283,6 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_after: bool,\n     }\n     impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_local(&mut self, l: &'tcx Local<'_>) {\n             if !self.after_loop {\n                 l.pat.each_binding_or_first(&mut |_, id, _, _| {"}, {"sha": "039cb3aafdb780eca45eaeadd8c71626e6f84ac8", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -6,11 +6,10 @@ use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, msrvs, pat\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -203,11 +202,6 @@ fn find_stripping<'tcx>(\n     }\n \n     impl<'a, 'tcx> Visitor<'tcx> for StrippingFinder<'a, 'tcx> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n             if_chain! {\n                 if is_ref_str(self.cx, ex);"}, {"sha": "b0eebf35e274df6694fef2524b96aaafcf0f90a1", "filename": "src/tools/clippy/clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -2,10 +2,9 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -86,12 +85,6 @@ struct MatchExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::MethodCall(segment, _, [receiver], _) if self.case_altered(segment.ident.as_str(), receiver) => {"}, {"sha": "33d022c73a5e7c007aa286918e8a78e6db392321", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1776,7 +1776,7 @@ mod redundant_pattern_match {\n     use rustc_errors::Applicability;\n     use rustc_hir::LangItem::{OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n     use rustc_hir::{\n-        intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n+        intravisit::{walk_expr, Visitor},\n         Arm, Block, Expr, ExprKind, LangItem, MatchSource, Node, Pat, PatKind, QPath, UnOp,\n     };\n     use rustc_lint::LateContext;\n@@ -1880,11 +1880,6 @@ mod redundant_pattern_match {\n             res: bool,\n         }\n         impl<'a, 'tcx> Visitor<'tcx> for V<'a, 'tcx> {\n-            type Map = ErasedMap<'tcx>;\n-            fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-                NestedVisitorMap::None\n-            }\n-\n             fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n                 match expr.kind {\n                     // Taking the reference of a value leaves a temporary"}, {"sha": "9c6f421103185c7f02437bc63372256642fa3111", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,10 +5,10 @@ use clippy_utils::ty::is_copy;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_path, Visitor};\n use rustc_hir::{self, HirId, Path};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n \n@@ -97,15 +97,15 @@ struct UnwrapVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n \n@@ -116,7 +116,7 @@ struct MapExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n@@ -126,8 +126,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "784014f0d87433de6b4b373052c7ffe4eb0e1fb3", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -2,10 +2,9 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::usage::mutated_variables;\n use clippy_utils::{is_lang_ctor, is_trait_method, path_to_local_id};\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, TyS};\n use rustc_span::sym;\n \n@@ -113,8 +112,6 @@ impl<'a, 'tcx> ReturnVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReturnVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if let hir::ExprKind::Ret(Some(expr)) = &expr.kind {\n             let (found_mapping, found_filtering) = check_expression(self.cx, self.arg_id, expr);\n@@ -124,8 +121,4 @@ impl<'a, 'tcx> Visitor<'tcx> for ReturnVisitor<'a, 'tcx> {\n             walk_expr(self, expr);\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "5fee18c5129a90d9cc4ae690aa47c7c33bea30cc", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -4,10 +4,11 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait};\n use clippy_utils::{fn_def_id, get_parent_expr, path_to_local_id, usage};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, HirId, LangItem, Mutability, Pat};\n use rustc_lint::LateContext;\n-use rustc_middle::{hir::map::Map, ty};\n+use rustc_middle::hir::nested_filter;\n+use rustc_middle::ty;\n use rustc_span::{sym, Symbol};\n \n use super::UNNECESSARY_TO_OWNED;\n@@ -139,10 +140,10 @@ struct CloneOrCopyVisitor<'cx, 'tcx> {\n }\n \n impl<'cx, 'tcx> Visitor<'tcx> for CloneOrCopyVisitor<'cx, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {"}, {"sha": "cb16f00047a394b06b147151fd0244f9bde86274", "filename": "src/tools/clippy/clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::higher;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -47,8 +46,6 @@ pub struct MutVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if in_external_macro(self.cx.sess(), expr.span) {\n             return;\n@@ -114,7 +111,4 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n \n         intravisit::walk_ty(self, ty);\n     }\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }"}, {"sha": "cd1bc20237028dbce9fef4a3c0fa711c7750dd54", "filename": "src/tools/clippy/clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::macros::{find_assert_eq_args, root_macro_call_first_node};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BorrowKind, Expr, ExprKind, MatchSource, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -84,7 +84,7 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match expr.kind {\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "44c4b70524d9371353f42858188077cc4ac9cbad", "filename": "src/tools/clippy/clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1,10 +1,9 @@\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    intravisit::{walk_expr, NestedVisitorMap, Visitor},\n+    intravisit::{walk_expr, Visitor},\n     Expr, ExprKind, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{source_map::Span, sym, Symbol};\n \n@@ -136,8 +135,6 @@ struct RetCollector {\n }\n \n impl<'tcx> Visitor<'tcx> for RetCollector {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &Expr<'_>) {\n         match expr.kind {\n             ExprKind::Ret(..) => {\n@@ -160,8 +157,4 @@ impl<'tcx> Visitor<'tcx> for RetCollector {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "0c77cf5e77dd28232f97e0e80c5adcb8209eaeb5", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor as HirVisitor;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                 count: usize,\n             }\n             impl<'a, 'tcx> hir_visit::Visitor<'tcx> for ClosureUsageCount<'a, 'tcx> {\n-                type Map = Map<'tcx>;\n+                type NestedFilter = nested_filter::OnlyBodies;\n \n                 fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n                     if_chain! {\n@@ -121,8 +121,8 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                     hir_visit::walk_expr(self, expr);\n                 }\n \n-                fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n-                    hir_visit::NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+                fn nested_visit_map(&mut self) -> Self::Map {\n+                    self.cx.tcx.hir()\n                 }\n             }\n             let mut closure_usage_count = ClosureUsageCount { cx, path, count: 0 };"}, {"sha": "8068fa22d9ccf8eea0fb4801d0d9b3f92193184a", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -4,10 +4,9 @@ use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, MatchSource, PatKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -287,8 +286,6 @@ struct BorrowVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.borrows {\n             return;\n@@ -307,8 +304,4 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "607fa847dae5f61959f8dd69c5f902f88bc376bf", "filename": "src/tools/clippy/clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::{get_enclosing_block, is_expr_path_def_path, path_to_local, pa\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_block, walk_expr, walk_stmt, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -270,8 +269,6 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         if self.initialization_found {\n             match stmt.kind {\n@@ -308,8 +305,4 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "4294464dbf61a5fffbda1a1d728a9c3a71608f9d", "filename": "src/tools/clippy/clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -2,9 +2,8 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::{binop_traits, trait_ref_of_method, BINOP_TRAITS, OP_ASSIGN_TRAITS};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -104,8 +103,6 @@ struct BinaryExprVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n@@ -116,8 +113,4 @@ impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "5ca4023aa5c199b3d8d2296525b2f2eb5640057b", "filename": "src/tools/clippy/clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1,9 +1,8 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_inf, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_inf, walk_ty, Visitor};\n use rustc_hir::{GenericParamKind, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_target::spec::abi::Abi;\n \n use super::TYPE_COMPLEXITY;\n@@ -37,8 +36,6 @@ struct TypeComplexityVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n         self.score += 1;\n         walk_inf(self, inf);\n@@ -78,7 +75,4 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n         walk_ty(self, ty);\n         self.nest -= sub_nest;\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "e42c6c63ede0ba2e419de335318e2bcf841d4a89", "filename": "src/tools/clippy/clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -2,11 +2,10 @@ use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::is_lint_allowed;\n use clippy_utils::source::{indent_of, reindent_multiline, snippet};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{Block, BlockCheckMode, Expr, ExprKind, HirId, Local, UnsafeSource};\n use rustc_lexer::TokenKind;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -114,12 +113,6 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n }\n \n impl<'v> Visitor<'v> for UndocumentedUnsafeBlocks {\n-    type Map = Map<'v>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, ex: &'v Expr<'v>) {\n         match ex.kind {\n             ExprKind::Block(_, _) => self.local_level = self.local_level.saturating_add(1),"}, {"sha": "2b89398ecd6ad1ea3ed6be1359814d43aa0be47c", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, FnHeader, HirId, IsAsync, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -43,7 +43,7 @@ struct AsyncFnVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         if let ExprKind::Yield(_, YieldSource::Await { .. }) = ex.kind {\n@@ -52,8 +52,8 @@ impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n         walk_expr(self, ex);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "0a728d7700b3073ee6b00435fdec36d8f77f10ee", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -4,10 +4,10 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{differing_macro_contexts, path_to_local, usage::is_potentially_mutated};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, PathSegment, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -215,7 +215,7 @@ impl<'a, 'tcx> UnwrappableVariablesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // Shouldn't lint when `expr` is in macro.\n@@ -297,8 +297,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "2c13f1049b59955a2e81ebb7b42dc1f5317c1fe3", "filename": "src/tools/clippy/clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -3,10 +3,9 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{method_chain_args, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, ImplItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n@@ -81,8 +80,6 @@ struct FindExpectUnwrap<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // check for `expect`\n         if let Some(arglists) = method_chain_args(expr, &[\"expect\"]) {\n@@ -107,10 +104,6 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n         // and check sub-expressions\n         intravisit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tcx hir::ImplItem<'_>) {"}, {"sha": "6c5a5fe1434f8885ed8686eefee5378d1e78c66e", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -8,11 +8,10 @@ use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n-    intravisit::{walk_inf, walk_ty, NestedVisitorMap, Visitor},\n+    intravisit::{walk_inf, walk_ty, Visitor},\n     Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -262,8 +261,6 @@ struct SkipTyCollector {\n }\n \n impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n-    type Map = Map<'tcx>;\n-\n     fn visit_infer(&mut self, inf: &hir::InferArg) {\n         self.types_to_skip.push(inf.hir_id);\n \n@@ -274,10 +271,6 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n \n         walk_ty(self, hir_ty);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn span_lint(cx: &LateContext<'_>, span: Span) {"}, {"sha": "02fa866db5235586530d45b04d4b7cb61696d03b", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -17,13 +17,12 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::{\n     BinOpKind, Block, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty, TyKind,\n     UnOp,\n };\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n@@ -544,16 +543,16 @@ struct LintCollector<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "8485c14bfe72a5ea338a2af8003b3201fe13fddb", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -19,7 +19,6 @@ use rustc_hir::{\n     self as hir, def::DefKind, intravisit, intravisit::Visitor, ExprKind, Item, ItemKind, Mutability, QPath,\n };\n use rustc_lint::{CheckLintNameResult, LateContext, LateLintPass, LintContext, LintId};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Loc, Span, Symbol};\n use serde::{ser::SerializeStruct, Serialize, Serializer};\n@@ -738,10 +737,10 @@ impl<'a, 'hir> LintResolver<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for LintResolver<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n@@ -792,10 +791,10 @@ impl<'a, 'hir> ApplicabilityResolver<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_path(&mut self, path: &'hir hir::Path<'hir>, _id: hir::HirId) {\n@@ -875,10 +874,10 @@ impl<'a, 'hir> IsMultiSpanScanner<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for IsMultiSpanScanner<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {"}, {"sha": "1f9c7363bbcb79e19d53bc9692079c7ddc382591", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -12,7 +12,7 @@\n use crate::ty::{all_predicates_of, is_copy};\n use crate::visitors::is_const_evaluatable;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{def_id::DefId, Block, Expr, ExprKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, PredicateKind};\n@@ -104,11 +104,6 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n     }\n \n     impl<'cx, 'tcx> Visitor<'tcx> for V<'cx, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             use EagernessSuggestion::{ForceNoChange, Lazy, NoChange};\n             if self.eagerness == ForceNoChange {"}, {"sha": "9e5e53a768b84b132e6b0560110239496870978e", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -72,7 +72,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n-use rustc_hir::intravisit::{walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n@@ -82,7 +82,6 @@ use rustc_hir::{\n     Target, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n@@ -982,11 +981,6 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n         captures: HirIdMap<CaptureKind>,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if !self.allow_closure {\n                 return;\n@@ -1144,16 +1138,11 @@ pub struct ContainsName {\n }\n \n impl<'tcx> Visitor<'tcx> for ContainsName {\n-    type Map = Map<'tcx>;\n-\n     fn visit_name(&mut self, _: Span, name: Symbol) {\n         if self.name == name {\n             self.result = true;\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Checks if an `Expr` contains a certain name."}, {"sha": "405e306359bc9b2dfe46278b43c4d5e3c6307a90", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::HirIdSet;\n use rustc_hir::{Expr, ExprKind, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n@@ -96,18 +96,12 @@ impl<'tcx> ParamBindingIdCollector {\n     }\n }\n impl<'tcx> intravisit::Visitor<'tcx> for ParamBindingIdCollector {\n-    type Map = Map<'tcx>;\n-\n     fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {\n         if let hir::PatKind::Binding(_, hir_id, ..) = pat.kind {\n             self.binding_hir_ids.push(hir_id);\n         }\n         intravisit::walk_pat(self, pat);\n     }\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }\n \n pub struct BindingUsageFinder<'a, 'tcx> {\n@@ -127,7 +121,7 @@ impl<'a, 'tcx> BindingUsageFinder<'a, 'tcx> {\n     }\n }\n impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         if !self.usage_found {\n@@ -143,8 +137,8 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "40451b17a9c63ce30693fbf2ab7147b2a020f284", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6d6934b635a8c2e8ff5bb68002a3744dd47e8d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=be6d6934b635a8c2e8ff5bb68002a3744dd47e8d", "patch": "@@ -1,12 +1,13 @@\n use crate::path_to_local_id;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{self, walk_block, walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, walk_block, walk_expr, Visitor};\n use rustc_hir::{\n     Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Stmt, UnOp, Unsafety,\n };\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n \n /// Convenience method for creating a `Visitor` with just `visit_expr` overridden and nested\n@@ -19,9 +20,9 @@ pub fn expr_visitor<'tcx>(cx: &LateContext<'tcx>, f: impl FnMut(&'tcx Expr<'tcx>\n         f: F,\n     }\n     impl<'tcx, F: FnMut(&'tcx Expr<'tcx>) -> bool> Visitor<'tcx> for V<'tcx, F> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::OnlyBodies(self.hir)\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.hir\n         }\n \n         fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n@@ -40,11 +41,6 @@ pub fn expr_visitor<'tcx>(cx: &LateContext<'tcx>, f: impl FnMut(&'tcx Expr<'tcx>\n pub fn expr_visitor_no_bodies<'tcx>(f: impl FnMut(&'tcx Expr<'tcx>) -> bool) -> impl Visitor<'tcx> {\n     struct V<F>(F);\n     impl<'tcx, F: FnMut(&'tcx Expr<'tcx>) -> bool> Visitor<'tcx> for V<F> {\n-        type Map = intravisit::ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if (self.0)(e) {\n                 walk_expr(self, e);\n@@ -113,12 +109,6 @@ where\n     }\n \n     impl<'hir, F: FnMut(&'hir hir::Expr<'hir>) -> bool> intravisit::Visitor<'hir> for RetFinder<F> {\n-        type Map = Map<'hir>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n         fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n             intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt);\n         }\n@@ -237,9 +227,9 @@ pub fn is_const_evaluatable<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) ->\n         is_const: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n         }\n \n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n@@ -327,9 +317,9 @@ pub fn is_expr_unsafe<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n         is_unsafe: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n         }\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if self.is_unsafe {"}]}