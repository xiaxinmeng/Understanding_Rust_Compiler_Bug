{"sha": "ee7a68d48bfda1df361cf015de36bcb92ee01fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlN2E2OGQ0OGJmZGExZGYzNjFjZjAxNWRlMzZiY2I5MmVlMDFmZTY=", "commit": {"author": {"name": "Tomoki Aonuma", "email": "uasi@uasi.jp", "date": "2016-05-02T05:20:22Z"}, "committer": {"name": "Tomoki Aonuma", "email": "uasi@uasi.jp", "date": "2016-05-02T05:20:51Z"}, "message": "Fix minor typo in E0038", "tree": {"sha": "b609ba9bad25f7afefcaa89f8e513ec6928ccbfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b609ba9bad25f7afefcaa89f8e513ec6928ccbfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7a68d48bfda1df361cf015de36bcb92ee01fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7a68d48bfda1df361cf015de36bcb92ee01fe6", "html_url": "https://github.com/rust-lang/rust/commit/ee7a68d48bfda1df361cf015de36bcb92ee01fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7a68d48bfda1df361cf015de36bcb92ee01fe6/comments", "author": {"login": "uasi", "id": 22321, "node_id": "MDQ6VXNlcjIyMzIx", "avatar_url": "https://avatars.githubusercontent.com/u/22321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uasi", "html_url": "https://github.com/uasi", "followers_url": "https://api.github.com/users/uasi/followers", "following_url": "https://api.github.com/users/uasi/following{/other_user}", "gists_url": "https://api.github.com/users/uasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/uasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uasi/subscriptions", "organizations_url": "https://api.github.com/users/uasi/orgs", "repos_url": "https://api.github.com/users/uasi/repos", "events_url": "https://api.github.com/users/uasi/events{/privacy}", "received_events_url": "https://api.github.com/users/uasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uasi", "id": 22321, "node_id": "MDQ6VXNlcjIyMzIx", "avatar_url": "https://avatars.githubusercontent.com/u/22321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uasi", "html_url": "https://github.com/uasi", "followers_url": "https://api.github.com/users/uasi/followers", "following_url": "https://api.github.com/users/uasi/following{/other_user}", "gists_url": "https://api.github.com/users/uasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/uasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uasi/subscriptions", "organizations_url": "https://api.github.com/users/uasi/orgs", "repos_url": "https://api.github.com/users/uasi/repos", "events_url": "https://api.github.com/users/uasi/events{/privacy}", "received_events_url": "https://api.github.com/users/uasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855fb6192263a5c059325bb4b4e10b55e4e8ddbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/855fb6192263a5c059325bb4b4e10b55e4e8ddbb", "html_url": "https://github.com/rust-lang/rust/commit/855fb6192263a5c059325bb4b4e10b55e4e8ddbb"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c26224edbcd1ab38db349ddb2b0cebfcab92a00d", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee7a68d48bfda1df361cf015de36bcb92ee01fe6/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7a68d48bfda1df361cf015de36bcb92ee01fe6/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=ee7a68d48bfda1df361cf015de36bcb92ee01fe6", "patch": "@@ -115,7 +115,7 @@ trait Trait {\n \n Now, `foo()` can no longer be called on a trait object, but you will now be\n allowed to make a trait object, and that will be able to call any object-safe\n-methods\". With such a bound, one can still call `foo()` on types implementing\n+methods. With such a bound, one can still call `foo()` on types implementing\n that trait that aren't behind trait objects.\n \n ### Method has generic type parameters"}]}