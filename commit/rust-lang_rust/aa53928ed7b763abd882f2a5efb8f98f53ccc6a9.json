{"sha": "aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNTM5MjhlZDdiNzYzYWJkODgyZjJhNWVmYjhmOThmNTNjY2M2YTk=", "commit": {"author": {"name": "Alex Vlasov", "email": "alex.m.vlasov@gmail.com", "date": "2021-06-20T14:09:42Z"}, "committer": {"name": "Alex Vlasov", "email": "alex.m.vlasov@gmail.com", "date": "2021-06-20T14:09:42Z"}, "message": "Squashed implementation of the pass", "tree": {"sha": "30377d01a46cdaee160f02c9bac254e27f841c8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30377d01a46cdaee160f02c9bac254e27f841c8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "html_url": "https://github.com/rust-lang/rust/commit/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/comments", "author": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "304441960e7058fe97f09ef00b20739b4dc56d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/304441960e7058fe97f09ef00b20739b4dc56d11", "html_url": "https://github.com/rust-lang/rust/commit/304441960e7058fe97f09ef00b20739b4dc56d11"}], "stats": {"total": 186, "additions": 185, "deletions": 1}, "files": [{"sha": "bab685006eafc2e2e3ef5c75610ec247dd912f5f", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -310,6 +310,8 @@ language_item_table! {\n \n     Try,                     sym::Try,                 try_trait,                  Target::Trait;\n \n+    SliceLen,                sym::slice_len_fn,        slice_len_fn,               Target::Method(MethodKind::Inherent);\n+\n     // Language items from AST lowering\n     TryTraitFromResidual,    sym::from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false });\n     TryTraitFromOutput,      sym::from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false });"}, {"sha": "c3eb2d9f921b3ba0c32e0299a982f76892f9e7f7", "filename": "compiler/rustc_mir/src/transform/lower_slice_len.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_slice_len.rs?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -0,0 +1,100 @@\n+//! This pass lowers calls to core::slice::len to just Len op.\n+//! It should run before inlining!\n+\n+use crate::transform::MirPass;\n+use rustc_hir::def_id::DefId;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n+\n+pub struct LowerSliceLenCalls;\n+\n+impl<'tcx> MirPass<'tcx> for LowerSliceLenCalls {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        lower_slice_len_calls(tcx, body)\n+    }\n+}\n+\n+pub fn lower_slice_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let language_items = tcx.lang_items();\n+    let slice_len_fn_item_def_id = if let Some(slice_len_fn_item) = language_items.slice_len_fn() {\n+        slice_len_fn_item\n+    } else {\n+        // there is no language item to compare to :)\n+        return;\n+    };\n+\n+    let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+\n+    for block in basic_blocks {\n+        // lower `<[_]>::len` calls\n+        lower_slice_len_call(tcx, block, &*local_decls, slice_len_fn_item_def_id);\n+    }\n+}\n+\n+struct SliceLenPatchInformation<'tcx> {\n+    add_statement: Statement<'tcx>,\n+    new_terminator_kind: TerminatorKind<'tcx>,\n+}\n+\n+fn lower_slice_len_call<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    block: &mut BasicBlockData<'tcx>,\n+    local_decls: &IndexVec<Local, LocalDecl<'tcx>>,\n+    slice_len_fn_item_def_id: DefId,\n+) {\n+    let mut patch_found: Option<SliceLenPatchInformation<'_>> = None;\n+\n+    let terminator = block.terminator();\n+    match &terminator.kind {\n+        TerminatorKind::Call {\n+            func,\n+            args,\n+            destination: Some((dest, bb)),\n+            cleanup: None,\n+            from_hir_call: true,\n+            ..\n+        } => {\n+            // some heuristics for fast rejection\n+            if args.len() != 1 {\n+                return;\n+            }\n+            let arg = match args[0].place() {\n+                Some(arg) => arg,\n+                None => return,\n+            };\n+            let func_ty = func.ty(local_decls, tcx);\n+            match func_ty.kind() {\n+                ty::FnDef(fn_def_id, _) if fn_def_id == &slice_len_fn_item_def_id => {\n+                    // perform modifications\n+                    // from something like `_5 = core::slice::<impl [u8]>::len(move _6) -> bb1`\n+                    // into `_5 = Len(*_6)\n+                    // goto bb1\n+\n+                    // make new RValue for Len\n+                    let deref_arg = tcx.mk_place_deref(arg);\n+                    let r_value = Rvalue::Len(deref_arg);\n+                    let len_statement_kind = StatementKind::Assign(Box::new((*dest, r_value)));\n+                    let add_statement = Statement {\n+                        kind: len_statement_kind,\n+                        source_info: terminator.source_info.clone(),\n+                    };\n+\n+                    // modify terminator into simple Goto\n+                    let new_terminator_kind = TerminatorKind::Goto { target: bb.clone() };\n+\n+                    let patch = SliceLenPatchInformation { add_statement, new_terminator_kind };\n+\n+                    patch_found = Some(patch);\n+                }\n+                _ => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+\n+    if let Some(SliceLenPatchInformation { add_statement, new_terminator_kind }) = patch_found {\n+        block.statements.push(add_statement);\n+        block.terminator_mut().kind = new_terminator_kind;\n+    }\n+}"}, {"sha": "5c201594ddd895f574f7122ea9576ffd4ee34ec7", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -36,6 +36,7 @@ pub mod generator;\n pub mod inline;\n pub mod instcombine;\n pub mod lower_intrinsics;\n+pub mod lower_slice_len;\n pub mod match_branches;\n pub mod multiple_return_terminators;\n pub mod no_landing_pads;\n@@ -479,6 +480,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     // to them. We run some optimizations before that, because they may be harder to do on the state\n     // machine than on MIR with async primitives.\n     let optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[\n+        &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n         &unreachable_prop::UnreachablePropagation,\n         &uninhabited_enum_branching::UninhabitedEnumBranching,\n         &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),"}, {"sha": "a31a8b18b804c6e88ec1292ea10aa45e5344404c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -681,6 +681,7 @@ symbols! {\n         lateout,\n         lazy_normalization_consts,\n         le,\n+        len,\n         let_chains,\n         lhs,\n         lib,\n@@ -1147,6 +1148,7 @@ symbols! {\n         skip,\n         slice,\n         slice_alloc,\n+        slice_len_fn,\n         slice_patterns,\n         slice_u8,\n         slice_u8_alloc,"}, {"sha": "018aba2e97ffa52b1680d3f383f3c8a4584288ab", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -96,6 +96,7 @@ impl<T> [T] {\n     /// assert_eq!(a.len(), 3);\n     /// ```\n     #[doc(alias = \"length\")]\n+    #[cfg_attr(not(bootstrap), lang = \"slice_len_fn\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]\n     #[inline]"}, {"sha": "1df1ca758c054d10516cce9c215dd08977036be3", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -297,7 +297,7 @@ fn join_orders_after_tls_destructors() {\n             .unwrap();\n \n         loop {\n-            match SYNC_STATE.compare_exchange_weak(\n+            match SYNC_STATE.compare_exchange(\n                 THREAD1_WAITING,\n                 MAIN_THREAD_RENDEZVOUS,\n                 Ordering::SeqCst,"}, {"sha": "d2056ac13a7ac79041d01b891de3ad0d50e77900", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -0,0 +1,63 @@\n+- // MIR for `bound` before LowerSliceLenCalls\n++ // MIR for `bound` after LowerSliceLenCalls\n+  \n+  fn bound(_1: usize, _2: &[u8]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_slice_len.rs:4:14: 4:19\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_slice_len.rs:4:28: 4:33\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_slice_len.rs:4:45: 4:47\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_slice_len.rs:5:16: 5:21\n+      let _7: usize;                       // in scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n+      let mut _8: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+      let mut _9: bool;                    // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:21\n+          _6 = &(*_2);                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:21\n+-         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25\n+-                                          // + literal: Const { ty: for<'r> fn(&'r [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(Scalar(<ZST>)) }\n++         _5 = Len((*_6));                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n++         goto -> bb1;                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6\n+      }\n+  \n+      bb2: {\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n+          _7 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n+          _8 = Len((*_2));                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          _9 = Lt(_7, _8);                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb4; // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+      }\n+  \n+      bb3: {\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_slice_len.rs:8:9: 8:11\n+          goto -> bb5;                     // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6\n+      }\n+  \n+      bb4: {\n+          _0 = (*_2)[_7];                  // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_slice_len.rs:7:5: 7:6\n+          goto -> bb5;                     // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_slice_len.rs:9:5: 9:6\n+          return;                          // scope 0 at $DIR/lower_slice_len.rs:10:2: 10:2\n+      }\n+  }\n+  "}, {"sha": "f2438e69749905d71f917c13cc180718b495148f", "filename": "src/test/mir-opt/lower_slice_len.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa53928ed7b763abd882f2a5efb8f98f53ccc6a9/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.rs?ref=aa53928ed7b763abd882f2a5efb8f98f53ccc6a9", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Z mir-opt-level=3\n+\n+// EMIT_MIR lower_slice_len.bound.LowerSliceLenCalls.diff\n+pub fn bound(index: usize, slice: &[u8]) -> u8 {\n+    if index < slice.len() {\n+        slice[index]\n+    } else {\n+        42\n+    }\n+}\n+\n+fn main() {\n+    let _ = bound(1, &[1, 2, 3]);\n+}"}]}