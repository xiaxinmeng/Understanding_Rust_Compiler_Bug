{"sha": "7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYzNjOTM0ZTg1YTEyYmQ0OGFiZjc0OWQ1MmM0YmU2OWU3ZWVkNWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-26T21:55:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-26T21:55:44Z"}, "message": "Rollup merge of #63693 - Centril:polish-parse-or-pats, r=estebank\n\nFully implement or-pattern parsing\n\nBuilds upon the initial parsing in https://github.com/rust-lang/rust/pull/61708 to fully implement or-pattern (`p | q`) parsing as specified in [the grammar section of RFC 2535](https://github.com/rust-lang/rfcs/blob/master/text/2535-or-patterns.md#grammar).\n\nNoteworthy:\n\n- We allow or-patterns in `[p | q, ...]`.\n- We allow or-patterns in `let` statements and `for` expressions including with leading `|`.\n- We improve recovery for `p || q` (+ tests for that in `multiple-pattern-typo.rs`).\n- We improve recovery for `| p | q` in inner patterns (tests in `or-patterns-syntactic-fail.rs`).\n- We rigorously test or-pattern parsing (in `or-patterns-syntactic-{pass,fail}.rs`).\n- We harden the feature gating tests.\n- We do **_not_** change `ast.rs`. That is, `ExprKind::Let.0` and `Arm.pats` still accept `Vec<P<Pat>>`.\n   I was starting work on that but it would be cleaner to do this in a separate PR so this one has a narrower scope.\n\ncc @dlrobertson\ncc the tracking issue https://github.com/rust-lang/rust/issues/54883.\n\nr? @estebank", "tree": {"sha": "20000b371a3ae2118f2740f748f98645376479ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20000b371a3ae2118f2740f748f98645376479ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZFVgCRBK7hj4Ov3rIwAAdHIIAGqpfyed/zpRHsTSqghpTpG+\njBECnD1Tegx1uOk53YcJv1OLt8Xo+bIHOIqcMedLBZJAFSsf2Ff7GHIwDDSd2LJ+\nFwAPaH53c6m7mP1jbCKXr8XL9/3oWbxivGPJTLk/pyVF4QNgQ38nINGa+glerBL/\n79PMmmZiZKS53IQuxdOePcHpHVSCfsXjaZE/ZpNsy/6D3EqepoHnmiVC2xAMiUml\nSDvB3ob0atxuUKLpEECxRCWNrIoCXZXMVlcadBk8Bmz3cRse/TnxClODLOR3PhRL\nk1tep3pitHTK30vi7pUQejCEDIwWVsm+LqNrQkod0UlYEtkJEMktTvyu/5tNpww=\n=BoYC\n-----END PGP SIGNATURE-----\n", "payload": "tree 20000b371a3ae2118f2740f748f98645376479ab\nparent 44cfa7823d25ca52e42e23aad7dec22e4626f892\nparent 2bd27fbdfe309f3f6abd76f72f379247d49048b7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566856544 +0200\ncommitter GitHub <noreply@github.com> 1566856544 +0200\n\nRollup merge of #63693 - Centril:polish-parse-or-pats, r=estebank\n\nFully implement or-pattern parsing\n\nBuilds upon the initial parsing in https://github.com/rust-lang/rust/pull/61708 to fully implement or-pattern (`p | q`) parsing as specified in [the grammar section of RFC 2535](https://github.com/rust-lang/rfcs/blob/master/text/2535-or-patterns.md#grammar).\n\nNoteworthy:\n\n- We allow or-patterns in `[p | q, ...]`.\n- We allow or-patterns in `let` statements and `for` expressions including with leading `|`.\n- We improve recovery for `p || q` (+ tests for that in `multiple-pattern-typo.rs`).\n- We improve recovery for `| p | q` in inner patterns (tests in `or-patterns-syntactic-fail.rs`).\n- We rigorously test or-pattern parsing (in `or-patterns-syntactic-{pass,fail}.rs`).\n- We harden the feature gating tests.\n- We do **_not_** change `ast.rs`. That is, `ExprKind::Let.0` and `Arm.pats` still accept `Vec<P<Pat>>`.\n   I was starting work on that but it would be cleaner to do this in a separate PR so this one has a narrower scope.\n\ncc @dlrobertson\ncc the tracking issue https://github.com/rust-lang/rust/issues/54883.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "html_url": "https://github.com/rust-lang/rust/commit/7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44cfa7823d25ca52e42e23aad7dec22e4626f892", "url": "https://api.github.com/repos/rust-lang/rust/commits/44cfa7823d25ca52e42e23aad7dec22e4626f892", "html_url": "https://github.com/rust-lang/rust/commit/44cfa7823d25ca52e42e23aad7dec22e4626f892"}, {"sha": "2bd27fbdfe309f3f6abd76f72f379247d49048b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd27fbdfe309f3f6abd76f72f379247d49048b7", "html_url": "https://github.com/rust-lang/rust/commit/2bd27fbdfe309f3f6abd76f72f379247d49048b7"}], "stats": {"total": 1307, "additions": 1081, "deletions": 226}, "files": [{"sha": "25ad2d4404cacd8912fc86a1b543253ec55e4a71", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -971,15 +971,12 @@ impl<'a> Parser<'a> {\n     /// Skips unexpected attributes and doc comments in this position and emits an appropriate\n     /// error.\n     /// This version of parse arg doesn't necessarily require identifier names.\n-    fn parse_arg_general<F>(\n+    fn parse_arg_general(\n         &mut self,\n         is_trait_item: bool,\n         allow_c_variadic: bool,\n-        is_name_required: F,\n-    ) -> PResult<'a, Arg>\n-    where\n-        F: Fn(&token::Token) -> bool\n-    {\n+        is_name_required: impl Fn(&token::Token) -> bool,\n+    ) -> PResult<'a, Arg> {\n         let lo = self.token.span;\n         let attrs = self.parse_arg_attributes()?;\n         if let Some(mut arg) = self.parse_self_arg()? {\n@@ -991,7 +988,7 @@ impl<'a> Parser<'a> {\n         let (pat, ty) = if is_name_required || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (is_name_required:{})\", is_name_required);\n \n-            let pat = self.parse_pat(Some(\"argument name\"))?;\n+            let pat = self.parse_fn_param_pat()?;\n             if let Err(mut err) = self.expect(&token::Colon) {\n                 if let Some(ident) = self.argument_without_type(\n                     &mut err,"}, {"sha": "f7c090b5135e9b5354a12386ac8344b36c96af3d", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,6 +1,7 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, TokenType, PathStyle};\n use super::{BlockMode, SemiColonMode};\n use super::{SeqSep, TokenExpectType};\n+use super::pat::{GateOr, PARAM_EXPECTED};\n \n use crate::maybe_recover_from_interpolated_ty_qpath;\n use crate::ptr::P;\n@@ -1175,7 +1176,7 @@ impl<'a> Parser<'a> {\n     fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n         let lo = self.token.span;\n         let attrs = self.parse_arg_attributes()?;\n-        let pat = self.parse_pat(Some(\"argument name\"))?;\n+        let pat = self.parse_pat(PARAM_EXPECTED)?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?\n         } else {\n@@ -1241,19 +1242,20 @@ impl<'a> Parser<'a> {\n         Ok(cond)\n     }\n \n-    /// Parses a `let $pats = $expr` pseudo-expression.\n+    /// Parses a `let $pat = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n-        let pats = self.parse_pats()?;\n+        // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n+        let pat = self.parse_top_pat_unpack(GateOr::No)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(\n             Restrictions::NO_STRUCT_LITERAL,\n             |this| this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         )?;\n         let span = lo.to(expr.span);\n         self.sess.gated_spans.let_chains.borrow_mut().push(span);\n-        Ok(self.mk_expr(span, ExprKind::Let(pats, expr), attrs))\n+        Ok(self.mk_expr(span, ExprKind::Let(pat, expr), attrs))\n     }\n \n     /// `else` token already eaten\n@@ -1283,7 +1285,7 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_top_level_pat()?;\n+        let pat = self.parse_top_pat(GateOr::Yes)?;\n         if !self.eat_keyword(kw::In) {\n             let in_span = self.prev_span.between(self.token.span);\n             self.struct_span_err(in_span, \"missing `in` in `for` loop\")\n@@ -1387,7 +1389,8 @@ impl<'a> Parser<'a> {\n     crate fn parse_arm(&mut self) -> PResult<'a, Arm> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n-        let pats = self.parse_pats()?;\n+        // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n+        let pat = self.parse_top_pat_unpack(GateOr::No)?;\n         let guard = if self.eat_keyword(kw::If) {\n             Some(self.parse_expr()?)\n         } else {\n@@ -1448,7 +1451,7 @@ impl<'a> Parser<'a> {\n \n         Ok(ast::Arm {\n             attrs,\n-            pats,\n+            pats: pat, // FIXME(or_patterns, Centril | dlrobertson): this should just be `pat,`.\n             guard,\n             body: expr,\n             span: lo.to(hi),"}, {"sha": "78c9a289b37023dd7649e143e58145752a1d287f", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 194, "deletions": 94, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -12,80 +12,184 @@ use crate::ThinVec;\n \n use errors::{Applicability, DiagnosticBuilder};\n \n+type Expected = Option<&'static str>;\n+\n+/// `Expected` for function and lambda parameter patterns.\n+pub(super) const PARAM_EXPECTED: Expected = Some(\"parameter name\");\n+\n+/// Whether or not an or-pattern should be gated when occurring in the current context.\n+#[derive(PartialEq)]\n+pub enum GateOr { Yes, No }\n+\n+/// Whether or not to recover a `,` when parsing or-patterns.\n+#[derive(PartialEq, Copy, Clone)]\n+enum RecoverComma { Yes, No }\n+\n impl<'a> Parser<'a> {\n     /// Parses a pattern.\n-    pub fn parse_pat(\n+    ///\n+    /// Corresponds to `pat<no_top_alt>` in RFC 2535 and does not admit or-patterns\n+    /// at the top level. Used when parsing the parameters of lambda expressions,\n+    /// functions, function pointers, and `pat` macro fragments.\n+    pub fn parse_pat(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n+        self.parse_pat_with_range_pat(true, expected)\n+    }\n+\n+    // FIXME(or_patterns, Centril | dlrobertson):\n+    // remove this and use `parse_top_pat` everywhere it is used instead.\n+    pub(super) fn parse_top_pat_unpack(&mut self, gate_or: GateOr) -> PResult<'a, Vec<P<Pat>>> {\n+        self.parse_top_pat(gate_or)\n+            .map(|pat| pat.and_then(|pat| match pat.node {\n+                PatKind::Or(pats) => pats,\n+                node => vec![self.mk_pat(pat.span, node)],\n+            }))\n+    }\n+\n+    /// Entry point to the main pattern parser.\n+    /// Corresponds to `top_pat` in RFC 2535 and allows or-pattern at the top level.\n+    pub(super) fn parse_top_pat(&mut self, gate_or: GateOr) -> PResult<'a, P<Pat>> {\n+        // Allow a '|' before the pats (RFCs 1925, 2530, and 2535).\n+        let gated_leading_vert = self.eat_or_separator() && gate_or == GateOr::Yes;\n+        let leading_vert_span = self.prev_span;\n+\n+        // Parse the possibly-or-pattern.\n+        let pat = self.parse_pat_with_or(None, gate_or, RecoverComma::Yes)?;\n+\n+        // If we parsed a leading `|` which should be gated,\n+        // and no other gated or-pattern has been parsed thus far,\n+        // then we should really gate the leading `|`.\n+        // This complicated procedure is done purely for diagnostics UX.\n+        if gated_leading_vert {\n+            let mut or_pattern_spans = self.sess.gated_spans.or_patterns.borrow_mut();\n+            if or_pattern_spans.is_empty() {\n+                or_pattern_spans.push(leading_vert_span);\n+            }\n+        }\n+\n+        Ok(pat)\n+    }\n+\n+    /// Parse the pattern for a function or function pointer parameter.\n+    /// Special recovery is provided for or-patterns and leading `|`.\n+    pub(super) fn parse_fn_param_pat(&mut self) -> PResult<'a, P<Pat>> {\n+        self.recover_leading_vert(\"not allowed in a parameter pattern\");\n+        let pat = self.parse_pat_with_or(PARAM_EXPECTED, GateOr::No, RecoverComma::No)?;\n+\n+        if let PatKind::Or(..) = &pat.node {\n+            self.ban_illegal_fn_param_or_pat(&pat);\n+        }\n+\n+        Ok(pat)\n+    }\n+\n+    /// Ban `A | B` immediately in a parameter pattern and suggest wrapping in parens.\n+    fn ban_illegal_fn_param_or_pat(&self, pat: &Pat) {\n+        let msg = \"wrap the pattern in parenthesis\";\n+        let fix = format!(\"({})\", pprust::pat_to_string(pat));\n+        self.struct_span_err(pat.span, \"an or-pattern parameter must be wrapped in parenthesis\")\n+            .span_suggestion(pat.span, msg, fix, Applicability::MachineApplicable)\n+            .emit();\n+    }\n+\n+    /// Parses a pattern, that may be a or-pattern (e.g. `Foo | Bar` in `Some(Foo | Bar)`).\n+    /// Corresponds to `pat<allow_top_alt>` in RFC 2535.\n+    fn parse_pat_with_or(\n         &mut self,\n-        expected: Option<&'static str>\n+        expected: Expected,\n+        gate_or: GateOr,\n+        rc: RecoverComma,\n     ) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_with_range_pat(true, expected)\n+        // Parse the first pattern.\n+        let first_pat = self.parse_pat(expected)?;\n+        self.maybe_recover_unexpected_comma(first_pat.span, rc)?;\n+\n+        // If the next token is not a `|`,\n+        // this is not an or-pattern and we should exit here.\n+        if !self.check(&token::BinOp(token::Or)) && self.token != token::OrOr {\n+            return Ok(first_pat)\n+        }\n+\n+        let lo = first_pat.span;\n+        let mut pats = vec![first_pat];\n+        while self.eat_or_separator() {\n+            let pat = self.parse_pat(expected).map_err(|mut err| {\n+                err.span_label(lo, \"while parsing this or-pattern staring here\");\n+                err\n+            })?;\n+            self.maybe_recover_unexpected_comma(pat.span, rc)?;\n+            pats.push(pat);\n+        }\n+        let or_pattern_span = lo.to(self.prev_span);\n+\n+        // Feature gate the or-pattern if instructed:\n+        if gate_or == GateOr::Yes {\n+            self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n+        }\n+\n+        Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }\n \n-    /// Parses patterns, separated by '|' s.\n-    pub(super) fn parse_pats(&mut self) -> PResult<'a, Vec<P<Pat>>> {\n-        // Allow a '|' before the pats (RFC 1925 + RFC 2530)\n-        self.eat(&token::BinOp(token::Or));\n-\n-        let mut pats = Vec::new();\n-        loop {\n-            pats.push(self.parse_top_level_pat()?);\n-\n-            if self.token == token::OrOr {\n-                self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\")\n-                    .span_suggestion(\n-                        self.token.span,\n-                        \"use a single `|` to specify multiple patterns\",\n-                        \"|\".to_owned(),\n-                        Applicability::MachineApplicable\n-                    )\n-                    .emit();\n+    /// Eat the or-pattern `|` separator.\n+    /// If instead a `||` token is encountered, recover and pretend we parsed `|`.\n+    fn eat_or_separator(&mut self) -> bool {\n+        match self.token.kind {\n+            token::OrOr => {\n+                // Found `||`; Recover and pretend we parsed `|`.\n+                self.ban_unexpected_or_or();\n                 self.bump();\n-            } else if self.eat(&token::BinOp(token::Or)) {\n-                // This is a No-op. Continue the loop to parse the next\n-                // pattern.\n-            } else {\n-                return Ok(pats);\n+                true\n             }\n-        };\n+            _ => self.eat(&token::BinOp(token::Or)),\n+        }\n     }\n \n-    /// A wrapper around `parse_pat` with some special error handling for the\n-    /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contrast\n-    /// to subpatterns within such).\n-    pub(super) fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        let pat = self.parse_pat(None)?;\n-        if self.token == token::Comma {\n-            // An unexpected comma after a top-level pattern is a clue that the\n-            // user (perhaps more accustomed to some other language) forgot the\n-            // parentheses in what should have been a tuple pattern; return a\n-            // suggestion-enhanced error here rather than choking on the comma\n-            // later.\n-            let comma_span = self.token.span;\n-            self.bump();\n-            if let Err(mut err) = self.skip_pat_list() {\n-                // We didn't expect this to work anyway; we just wanted\n-                // to advance to the end of the comma-sequence so we know\n-                // the span to suggest parenthesizing\n-                err.cancel();\n-            }\n-            let seq_span = pat.span.to(self.prev_span);\n-            let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n-            if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n-                err.span_suggestion(\n-                    seq_span,\n-                    \"try adding parentheses to match on a tuple..\",\n-                    format!(\"({})\", seq_snippet),\n-                    Applicability::MachineApplicable\n-                ).span_suggestion(\n-                    seq_span,\n-                    \"..or a vertical bar to match on multiple alternatives\",\n-                    format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n-                    Applicability::MachineApplicable\n-                );\n-            }\n-            return Err(err);\n+    /// We have parsed `||` instead of `|`. Error and suggest `|` instead.\n+    fn ban_unexpected_or_or(&mut self) {\n+        self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\")\n+            .span_suggestion(\n+                self.token.span,\n+                \"use a single `|` to separate multiple alternative patterns\",\n+                \"|\".to_owned(),\n+                Applicability::MachineApplicable\n+            )\n+            .emit();\n+    }\n+\n+    /// Some special error handling for the \"top-level\" patterns in a match arm,\n+    /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, rc: RecoverComma) -> PResult<'a, ()> {\n+        if rc == RecoverComma::No || self.token != token::Comma {\n+            return Ok(());\n         }\n-        Ok(pat)\n+\n+        // An unexpected comma after a top-level pattern is a clue that the\n+        // user (perhaps more accustomed to some other language) forgot the\n+        // parentheses in what should have been a tuple pattern; return a\n+        // suggestion-enhanced error here rather than choking on the comma later.\n+        let comma_span = self.token.span;\n+        self.bump();\n+        if let Err(mut err) = self.skip_pat_list() {\n+            // We didn't expect this to work anyway; we just wanted to advance to the\n+            // end of the comma-sequence so we know the span to suggest parenthesizing.\n+            err.cancel();\n+        }\n+        let seq_span = lo.to(self.prev_span);\n+        let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n+        if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n+            err.span_suggestion(\n+                seq_span,\n+                \"try adding parentheses to match on a tuple..\",\n+                format!(\"({})\", seq_snippet),\n+                Applicability::MachineApplicable\n+            )\n+            .span_suggestion(\n+                seq_span,\n+                \"..or a vertical bar to match on multiple alternatives\",\n+                format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n+                Applicability::MachineApplicable\n+            );\n+        }\n+        Err(err)\n     }\n \n     /// Parse and throw away a parentesized comma separated\n@@ -100,40 +204,34 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Parses a pattern, that may be a or-pattern (e.g. `Some(Foo | Bar)`).\n-    fn parse_pat_with_or(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n-        // Parse the first pattern.\n-        let first_pat = self.parse_pat(expected)?;\n-\n-        // If the next token is not a `|`, this is not an or-pattern and\n-        // we should exit here.\n-        if !self.check(&token::BinOp(token::Or)) {\n-            return Ok(first_pat)\n-        }\n+    /// Recursive possibly-or-pattern parser with recovery for an erroneous leading `|`.\n+    /// See `parse_pat_with_or` for details on parsing or-patterns.\n+    fn parse_pat_with_or_inner(&mut self) -> PResult<'a, P<Pat>> {\n+        self.recover_leading_vert(\"only allowed in a top-level pattern\");\n+        self.parse_pat_with_or(None, GateOr::Yes, RecoverComma::No)\n+    }\n \n-        let lo = first_pat.span;\n+    /// Recover if `|` or `||` is here.\n+    /// The user is thinking that a leading `|` is allowed in this position.\n+    fn recover_leading_vert(&mut self, ctx: &str) {\n+        if let token::BinOp(token::Or) | token::OrOr = self.token.kind {\n+            let span = self.token.span;\n+            let rm_msg = format!(\"remove the `{}`\", pprust::token_to_string(&self.token));\n \n-        let mut pats = vec![first_pat];\n+            self.struct_span_err(span, &format!(\"a leading `|` is {}\", ctx))\n+                .span_suggestion(span, &rm_msg, String::new(), Applicability::MachineApplicable)\n+                .emit();\n \n-        while self.eat(&token::BinOp(token::Or)) {\n-            pats.push(self.parse_pat_with_range_pat(\n-                true, expected\n-            )?);\n+            self.bump();\n         }\n-\n-        let or_pattern_span = lo.to(self.prev_span);\n-\n-        self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n-\n-        Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }\n \n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat(\n         &mut self,\n         allow_range_pat: bool,\n-        expected: Option<&'static str>,\n+        expected: Expected,\n     ) -> PResult<'a, P<Pat>> {\n         maybe_recover_from_interpolated_ty_qpath!(self, true);\n         maybe_whole!(self, NtPat, |x| x);\n@@ -144,7 +242,11 @@ impl<'a> Parser<'a> {\n             token::OpenDelim(token::Paren) => self.parse_pat_tuple_or_parens()?,\n             token::OpenDelim(token::Bracket) => {\n                 // Parse `[pat, pat,...]` as a slice pattern.\n-                PatKind::Slice(self.parse_delim_comma_seq(token::Bracket, |p| p.parse_pat(None))?.0)\n+                let (pats, _) = self.parse_delim_comma_seq(\n+                    token::Bracket,\n+                    |p| p.parse_pat_with_or_inner(),\n+                )?;\n+                PatKind::Slice(pats)\n             }\n             token::DotDot => {\n                 self.bump();\n@@ -255,7 +357,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse `&pat` / `&mut pat`.\n-    fn parse_pat_deref(&mut self, expected: Option<&'static str>) -> PResult<'a, PatKind> {\n+    fn parse_pat_deref(&mut self, expected: Expected) -> PResult<'a, PatKind> {\n         self.expect_and()?;\n         let mutbl = self.parse_mutability();\n \n@@ -271,9 +373,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_with_or(None)\n-        })?;\n+        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner())?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -361,7 +461,7 @@ impl<'a> Parser<'a> {\n     fn fatal_unexpected_non_pat(\n         &mut self,\n         mut err: DiagnosticBuilder<'a>,\n-        expected: Option<&'static str>,\n+        expected: Expected,\n     ) -> PResult<'a, P<Pat>> {\n         self.cancel(&mut err);\n \n@@ -516,7 +616,7 @@ impl<'a> Parser<'a> {\n             err.span_label(self.token.span, msg);\n             return Err(err);\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner())?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -660,7 +760,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_with_or(None)?;\n+            let pat = self.parse_pat_with_or_inner()?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "651ebf6342e715ac136738c9b474d4f483bc7651", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,6 +1,7 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, SemiColonMode, BlockMode};\n use super::expr::LhsExpr;\n use super::path::PathStyle;\n+use super::pat::GateOr;\n \n use crate::ptr::P;\n use crate::{maybe_whole, ThinVec};\n@@ -207,7 +208,7 @@ impl<'a> Parser<'a> {\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Local>> {\n         let lo = self.prev_span;\n-        let pat = self.parse_top_level_pat()?;\n+        let pat = self.parse_top_pat(GateOr::Yes)?;\n \n         let (err, ty) = if self.eat(&token::Colon) {\n             // Save the state of the parser before parsing type normally, in case there is a `:`"}, {"sha": "5721f5d235783d61102784888bdea8a261bc0cd2", "filename": "src/test/ui/anon-params-denied-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n \n trait T {\n-    fn foo(i32); //~ expected one of `:` or `@`, found `)`\n+    fn foo(i32); //~ expected one of `:`, `@`, or `|`, found `)`\n \n     fn bar_with_default_impl(String, String) {}\n     //~^ ERROR expected one of `:`"}, {"sha": "a58998e4891e09e38f5abc6c4d04277f454e4ff2", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:6:15\n    |\n LL |     fn foo(i32);\n-   |               ^ expected one of `:` or `@` here\n+   |               ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -14,11 +14,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn foo(_: i32);\n    |            ^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:8:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                    ^ expected one of `:` or `@` here\n+   |                                    ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -30,11 +30,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn bar_with_default_impl(_: String, String) {}\n    |                              ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:8:44\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                            ^ expected one of `:` or `@` here\n+   |                                            ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -46,11 +46,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn bar_with_default_impl(String, _: String) {}\n    |                                      ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:13:22\n    |\n LL |     fn baz(a:usize, b, c: usize) -> usize {\n-   |                      ^ expected one of `:` or `@` here\n+   |                      ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "14ad33d53b08c80979724a6e68ff73c3f715f9f5", "filename": "src/test/ui/did_you_mean/multiple-pattern-typo.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    let x = 3;\n-    match x {\n-        1 | 2 || 3 => (), //~ ERROR unexpected token `||` after pattern\n-        _ => (),\n-    }\n-}"}, {"sha": "a29fa584b29241187a8cd0d1421b148fb05fc7c2", "filename": "src/test/ui/did_you_mean/multiple-pattern-typo.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -1,8 +0,0 @@\n-error: unexpected token `||` after pattern\n-  --> $DIR/multiple-pattern-typo.rs:4:15\n-   |\n-LL |         1 | 2 || 3 => (),\n-   |               ^^ help: use a single `|` to specify multiple patterns: `|`\n-\n-error: aborting due to previous error\n-"}, {"sha": "036a6095965bdd0c6689284b0db25d832d60d375", "filename": "src/test/ui/feature-gate/feature-gate-or_patterns.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -1,9 +0,0 @@\n-#![crate_type=\"lib\"]\n-\n-pub fn example(x: Option<usize>) {\n-    match x {\n-        Some(0 | 1 | 2) => {}\n-        //~^ ERROR: or-patterns syntax is experimental\n-        _ => {}\n-    }\n-}"}, {"sha": "de8e1bba5576cbbf14fbcd1fe2ff4d810513ea6b", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-for.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,8 @@\n+// Test feature gating for a sole leading `|` in `let`.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn gated_leading_vert_in_let() {\n+    for | A in 0 {} //~ ERROR or-patterns syntax is experimental\n+}"}, {"sha": "f520409e8bad62abefd08ec058fdc7b134f7d303", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-for.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:5:14\n+  --> $DIR/feature-gate-or_patterns-leading-for.rs:7:9\n    |\n-LL |         Some(0 | 1 | 2) => {}\n-   |              ^^^^^^^^^\n+LL |     for | A in 0 {}\n+   |         ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable", "previous_filename": "src/test/ui/feature-gate/feature-gate-or_patterns.stderr"}, {"sha": "a4ea4e25d861e56fe7bdd68a458284e9375089a9", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-let.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,8 @@\n+// Test feature gating for a sole leading `|` in `let`.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn gated_leading_vert_in_let() {\n+    let | A; //~ ERROR or-patterns syntax is experimental\n+}"}, {"sha": "30fd6a1a95effbb910931b4d25d9be0d110e4e50", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-let.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns-leading-let.rs:7:9\n+   |\n+LL |     let | A;\n+   |         ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e638838147a4dd9137d7f2f501cdb67405ee7e3b", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,52 @@\n+fn main() {}\n+\n+pub fn example(x: Option<usize>) {\n+    match x {\n+        Some(0 | 1 | 2) => {}\n+        //~^ ERROR: or-patterns syntax is experimental\n+        _ => {}\n+    }\n+}\n+\n+// Test the `pat` macro fragment parser:\n+macro_rules! accept_pat {\n+    ($p:pat) => {}\n+}\n+\n+accept_pat!((p | q)); //~ ERROR or-patterns syntax is experimental\n+accept_pat!((p | q,)); //~ ERROR or-patterns syntax is experimental\n+accept_pat!(TS(p | q)); //~ ERROR or-patterns syntax is experimental\n+accept_pat!(NS { f: p | q }); //~ ERROR or-patterns syntax is experimental\n+accept_pat!([p | q]); //~ ERROR or-patterns syntax is experimental\n+\n+// Non-macro tests:\n+\n+#[cfg(FALSE)]\n+fn or_patterns() {\n+    // Gated:\n+\n+    let | A | B; //~ ERROR or-patterns syntax is experimental\n+    let A | B; //~ ERROR or-patterns syntax is experimental\n+    for | A | B in 0 {} //~ ERROR or-patterns syntax is experimental\n+    for A | B in 0 {} //~ ERROR or-patterns syntax is experimental\n+    fn fun((A | B): _) {} //~ ERROR or-patterns syntax is experimental\n+    let _ = |(A | B): u8| (); //~ ERROR or-patterns syntax is experimental\n+    let (A | B); //~ ERROR or-patterns syntax is experimental\n+    let (A | B,); //~ ERROR or-patterns syntax is experimental\n+    let A(B | C); //~ ERROR or-patterns syntax is experimental\n+    let E::V(B | C); //~ ERROR or-patterns syntax is experimental\n+    let S { f1: B | C, f2 }; //~ ERROR or-patterns syntax is experimental\n+    let E::V { f1: B | C, f2 }; //~ ERROR or-patterns syntax is experimental\n+    let [A | B]; //~ ERROR or-patterns syntax is experimental\n+\n+    // Top level of `while`, `if`, and `match` arms are allowed:\n+\n+    while let | A = 0 {}\n+    while let A | B = 0 {}\n+    if let | A = 0 {}\n+    if let A | B = 0 {}\n+    match 0 {\n+        | A => {},\n+        A | B => {},\n+    }\n+}"}, {"sha": "aae6644dac2e076ee01242ea526a921add8b1f52", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.stderr", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,174 @@\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:5:14\n+   |\n+LL |         Some(0 | 1 | 2) => {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:28:11\n+   |\n+LL |     let | A | B;\n+   |           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:29:9\n+   |\n+LL |     let A | B;\n+   |         ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:30:11\n+   |\n+LL |     for | A | B in 0 {}\n+   |           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:31:9\n+   |\n+LL |     for A | B in 0 {}\n+   |         ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:32:13\n+   |\n+LL |     fn fun((A | B): _) {}\n+   |             ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:33:15\n+   |\n+LL |     let _ = |(A | B): u8| ();\n+   |               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:34:10\n+   |\n+LL |     let (A | B);\n+   |          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:35:10\n+   |\n+LL |     let (A | B,);\n+   |          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:36:11\n+   |\n+LL |     let A(B | C);\n+   |           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:37:14\n+   |\n+LL |     let E::V(B | C);\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:38:17\n+   |\n+LL |     let S { f1: B | C, f2 };\n+   |                 ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:39:20\n+   |\n+LL |     let E::V { f1: B | C, f2 };\n+   |                    ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:40:10\n+   |\n+LL |     let [A | B];\n+   |          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:16:14\n+   |\n+LL | accept_pat!((p | q));\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:17:14\n+   |\n+LL | accept_pat!((p | q,));\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:18:16\n+   |\n+LL | accept_pat!(TS(p | q));\n+   |                ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:19:21\n+   |\n+LL | accept_pat!(NS { f: p | q });\n+   |                     ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:20:14\n+   |\n+LL | accept_pat!([p | q]);\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to 19 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "08730fe8b07b74f030fc217025bc18734fc6498b", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,14 @@\n+// Test the suggestion to wrap an or-pattern as a function parameter in parens.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+enum E { A, B }\n+use E::*;\n+\n+#[cfg(FALSE)]\n+fn fun1((A | B): E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis"}, {"sha": "ed667e0e66067b778255d8ac87952018250ba7b5", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,14 @@\n+// Test the suggestion to wrap an or-pattern as a function parameter in parens.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+enum E { A, B }\n+use E::*;\n+\n+#[cfg(FALSE)]\n+fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis"}, {"sha": "2c6e4d9838ddcf9387a9971ddb6cee44e10031e5", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,8 @@\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/fn-param-wrap-parens.rs:14:9\n+   |\n+LL | fn fun1(A | B: E) {}\n+   |         ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e308c0adb4eb82b7f47790f73d6e348127d3f930", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,45 @@\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    let x = 3;\n+\n+    match x {\n+        1 | 2 || 3 => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match x {\n+        (1 | 2 || 3) => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match (x,) {\n+        (1 | 2 || 3,) => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    struct TS(u8);\n+\n+    match TS(x) {\n+        TS(1 | 2 || 3) => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    struct NS { f: u8 }\n+\n+    match (NS { f: x }) {\n+        NS { f: 1 | 2 || 3 } => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match [x] {\n+        [1 | 2 || 3] => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match x {\n+        || 1 | 2 | 3 => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+}"}, {"sha": "c61b5cb2082510d26e700dc26060e3adacd4b486", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,52 @@\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:8:15\n+   |\n+LL |         1 | 2 || 3 => (),\n+   |               ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:13:16\n+   |\n+LL |         (1 | 2 || 3) => (),\n+   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:18:16\n+   |\n+LL |         (1 | 2 || 3,) => (),\n+   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:25:18\n+   |\n+LL |         TS(1 | 2 || 3) => (),\n+   |                  ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:32:23\n+   |\n+LL |         NS { f: 1 | 2 || 3 } => (),\n+   |                       ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:37:16\n+   |\n+LL |         [1 | 2 || 3] => (),\n+   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:42:9\n+   |\n+LL |         || 1 | 2 | 3 => (),\n+   |         ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/multiple-pattern-typo.rs:1:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "973954bca5a5e823877180da26ca2ddf6a82cc87", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "previous_filename": "src/test/ui/or-pattern-mismatch.rs"}, {"sha": "731b2090a7ba04bc140d7c825bf96c74575b7133", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "previous_filename": "src/test/ui/or-pattern-mismatch.stderr"}, {"sha": "b676ea851a3ba6b514148defbe5a317705445843", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,53 @@\n+// Test some cases where or-patterns may ostensibly be allowed but are in fact not.\n+// This is not a semantic test. We only test parsing.\n+\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete and may cause the compiler to crash\n+\n+fn main() {}\n+\n+// Test the `pat` macro fragment parser:\n+macro_rules! accept_pat {\n+    ($p:pat) => {}\n+}\n+\n+accept_pat!(p | q); //~ ERROR no rules expected the token `|`\n+accept_pat!(| p | q); //~ ERROR no rules expected the token `|`\n+\n+// Non-macro tests:\n+\n+enum E { A, B }\n+use E::*;\n+\n+fn no_top_level_or_patterns() {\n+    // We do *not* allow or-patterns at the top level of lambdas...\n+    let _ = |A | B: E| (); //~ ERROR binary operation `|` cannot be applied to type `E`\n+    //           -------- This looks like an or-pattern but is in fact `|A| (B: E | ())`.\n+\n+    // ...and for now neither do we allow or-patterns at the top level of functions.\n+    fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis\n+\n+    fn fun2(| A | B: E) {}\n+    //~^ ERROR a leading `|` is not allowed in a parameter pattern\n+    //~| ERROR an or-pattern parameter must be wrapped in parenthesis\n+}\n+\n+// We also do not allow a leading `|` when not in a top level position:\n+\n+fn no_leading_inner() {\n+    struct TS(E);\n+    struct NS { f: E }\n+\n+    let ( | A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let ( | A | B,) = (E::B,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ | A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( | A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: | A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+\n+    let ( || A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ || A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( || A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: || A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+\n+    let recovery_witness: String = 0; //~ ERROR mismatched types\n+}"}, {"sha": "2a3a6abfb7b624035d189b0ee55e286d86ddd9b1", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,124 @@\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/or-patterns-syntactic-fail.rs:28:13\n+   |\n+LL |     fn fun1(A | B: E) {}\n+   |             ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+\n+error: a leading `|` is not allowed in a parameter pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:30:13\n+   |\n+LL |     fn fun2(| A | B: E) {}\n+   |             ^ help: remove the `|`\n+\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/or-patterns-syntactic-fail.rs:30:15\n+   |\n+LL |     fn fun2(| A | B: E) {}\n+   |               ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:41:11\n+   |\n+LL |     let ( | A | B) = E::A;\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:42:11\n+   |\n+LL |     let ( | A | B,) = (E::B,);\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:43:11\n+   |\n+LL |     let [ | A | B ] = [E::A];\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:44:13\n+   |\n+LL |     let TS( | A | B );\n+   |             ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:45:17\n+   |\n+LL |     let NS { f: | A | B };\n+   |                 ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:47:11\n+   |\n+LL |     let ( || A | B) = E::A;\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:48:11\n+   |\n+LL |     let [ || A | B ] = [E::A];\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:49:13\n+   |\n+LL |     let TS( || A | B );\n+   |             ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:50:17\n+   |\n+LL |     let NS { f: || A | B };\n+   |                 ^^ help: remove the `||`\n+\n+error: no rules expected the token `|`\n+  --> $DIR/or-patterns-syntactic-fail.rs:14:15\n+   |\n+LL | macro_rules! accept_pat {\n+   | ----------------------- when calling this macro\n+...\n+LL | accept_pat!(p | q);\n+   |               ^ no rules expected this token in macro call\n+\n+error: no rules expected the token `|`\n+  --> $DIR/or-patterns-syntactic-fail.rs:15:13\n+   |\n+LL | macro_rules! accept_pat {\n+   | ----------------------- when calling this macro\n+...\n+LL | accept_pat!(| p | q);\n+   |             ^ no rules expected this token in macro call\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/or-patterns-syntactic-fail.rs:4:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0369]: binary operation `|` cannot be applied to type `E`\n+  --> $DIR/or-patterns-syntactic-fail.rs:24:22\n+   |\n+LL |     let _ = |A | B: E| ();\n+   |                  ----^ -- ()\n+   |                  |\n+   |                  E\n+   |\n+   = note: an implementation of `std::ops::BitOr` might be missing for `E`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-patterns-syntactic-fail.rs:52:36\n+   |\n+LL |     let recovery_witness: String = 0;\n+   |                                    ^\n+   |                                    |\n+   |                                    expected struct `std::string::String`, found integer\n+   |                                    help: try using a conversion method: `0.to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `{integer}`\n+\n+error: aborting due to 16 previous errors\n+\n+Some errors have detailed explanations: E0308, E0369.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "5fe72caf9c1ff7a9c3ee401a76dd4f6ab8e86761", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,78 @@\n+// Here we test all the places `|` is *syntactically* allowed.\n+// This is not a semantic test. We only test parsing.\n+\n+// check-pass\n+\n+#![feature(or_patterns)]\n+\n+fn main() {}\n+\n+// Test the `pat` macro fragment parser:\n+macro_rules! accept_pat {\n+    ($p:pat) => {}\n+}\n+\n+accept_pat!((p | q));\n+accept_pat!((p | q,));\n+accept_pat!(TS(p | q));\n+accept_pat!(NS { f: p | q });\n+accept_pat!([p | q]);\n+\n+// Non-macro tests:\n+\n+#[cfg(FALSE)]\n+fn or_patterns() {\n+    // Top level of `let`:\n+    let | A | B;\n+    let A | B;\n+    let A | B: u8;\n+    let A | B = 0;\n+    let A | B: u8 = 0;\n+\n+    // Top level of `for`:\n+    for | A | B in 0 {}\n+    for A | B in 0 {}\n+\n+    // Top level of `while`:\n+    while let | A | B = 0 {}\n+    while let A | B = 0 {}\n+\n+    // Top level of `if`:\n+    if let | A | B = 0 {}\n+    if let A | B = 0 {}\n+\n+    // Top level of `match` arms:\n+    match 0 {\n+        | A | B => {},\n+        A | B => {},\n+    }\n+\n+    // Functions:\n+    fn fun((A | B): _) {}\n+\n+    // Lambdas:\n+    let _ = |(A | B): u8| ();\n+\n+    // Parenthesis and tuple patterns:\n+    let (A | B);\n+    let (A | B,);\n+\n+    // Tuple struct patterns:\n+    let A(B | C);\n+    let E::V(B | C);\n+\n+    // Struct patterns:\n+    let S { f1: B | C, f2 };\n+    let E::V { f1: B | C, f2 };\n+\n+    // Slice patterns:\n+    let [A | B, .. | ..];\n+\n+    // These bind as `(prefix p) | q` as opposed to `prefix (p | q)`:\n+    let box 0 | 1; // Unstable; we *can* the precedence if we want.\n+    let &0 | 1;\n+    let &mut 0 | 1;\n+    let x @ 0 | 1;\n+    let ref x @ 0 | 1;\n+    let ref mut x @ 0 | 1;\n+}"}, {"sha": "3145a2e9f2a6edef9a25352ee7645a346a5c1e84", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/or-patterns-syntactic-pass.rs:6:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "e96d76061ac28913978862002714b2cee1aa53b2", "filename": "src/test/ui/or-patterns/remove-leading-vert.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,23 @@\n+// Test the suggestion to remove a leading `|`.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn leading_vert() {\n+    fn fun1(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    fn fun2(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    let (  A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let (  A): (E); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let (  A,): (E,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [  A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [  A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS(  A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS(  A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+}"}, {"sha": "3790b17553fe38b8860b18acaa182fd96e408e87", "filename": "src/test/ui/or-patterns/remove-leading-vert.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,23 @@\n+// Test the suggestion to remove a leading `|`.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn leading_vert() {\n+    fn fun1( | A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    fn fun2( || A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    let ( | A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let ( || A): (E); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let ( | A,): (E,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ | A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ || A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( | A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( || A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: | A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: || A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+}"}, {"sha": "cbe06f997296a476aa2240a095f4530fc442d53b", "filename": "src/test/ui/or-patterns/remove-leading-vert.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,68 @@\n+error: a leading `|` is not allowed in a parameter pattern\n+  --> $DIR/remove-leading-vert.rs:12:14\n+   |\n+LL |     fn fun1( | A: E) {}\n+   |              ^ help: remove the `|`\n+\n+error: a leading `|` is not allowed in a parameter pattern\n+  --> $DIR/remove-leading-vert.rs:13:14\n+   |\n+LL |     fn fun2( || A: E) {}\n+   |              ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:14:11\n+   |\n+LL |     let ( | A): E;\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:15:11\n+   |\n+LL |     let ( || A): (E);\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:16:11\n+   |\n+LL |     let ( | A,): (E,);\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:17:11\n+   |\n+LL |     let [ | A ]: [E; 1];\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:18:11\n+   |\n+LL |     let [ || A ]: [E; 1];\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:19:13\n+   |\n+LL |     let TS( | A ): TS;\n+   |             ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:20:13\n+   |\n+LL |     let TS( || A ): TS;\n+   |             ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:21:17\n+   |\n+LL |     let NS { f: | A }: NS;\n+   |                 ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:22:17\n+   |\n+LL |     let NS { f: || A }: NS;\n+   |                 ^^ help: remove the `||`\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "4a9fae1406af7f378b584d394df1570e4cff2703", "filename": "src/test/ui/or-patterns/while-parsing-this-or-pattern.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,9 @@\n+// Test the parser for the \"while parsing this or-pattern...\" label here.\n+\n+fn main() {\n+    match Some(42) {\n+        Some(42) | .=. => {} //~ ERROR expected pattern, found `.`\n+        //~^ while parsing this or-pattern staring here\n+        //~| NOTE expected pattern\n+    }\n+}"}, {"sha": "21fece6c64fe5000071803e526349a92bda8ec50", "filename": "src/test/ui/or-patterns/while-parsing-this-or-pattern.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -0,0 +1,10 @@\n+error: expected pattern, found `.`\n+  --> $DIR/while-parsing-this-or-pattern.rs:5:20\n+   |\n+LL |         Some(42) | .=. => {}\n+   |         --------   ^ expected pattern\n+   |         |\n+   |         while parsing this or-pattern staring here\n+\n+error: aborting due to previous error\n+"}, {"sha": "04100d1701ddb8f94854115c4a67f32e1daf10ca", "filename": "src/test/ui/parser/bad-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fbad-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fbad-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-match.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-  let isize x = 5; //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `x`\n+  let isize x = 5; //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `x`\n   match x;\n }"}, {"sha": "d5baaf5e93b355fd8ac55cd7cffbb82468e6cdcb", "filename": "src/test/ui/parser/bad-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `x`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `x`\n   --> $DIR/bad-match.rs:2:13\n    |\n LL |   let isize x = 5;\n-   |             ^ expected one of `:`, `;`, `=`, or `@` here\n+   |             ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "dce4dabedf5c87fb3418a3785fe858aaed9559d5", "filename": "src/test/ui/parser/bad-name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `.`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `.`\n   --> $DIR/bad-name.rs:4:8\n    |\n LL |   let x.y::<isize>.z foo;\n-   |        ^ expected one of `:`, `;`, `=`, or `@` here\n+   |        ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "d6efc8be072bd2fba38ed99dabb4a44054568d72", "filename": "src/test/ui/parser/inverted-parameters.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -2,29 +2,29 @@ struct S;\n \n impl S {\n     fn foo(&self, &str bar) {}\n-    //~^ ERROR expected one of `:` or `@`\n+    //~^ ERROR expected one of `:`, `@`\n     //~| HELP declare the type after the parameter binding\n     //~| SUGGESTION <identifier>: <type>\n }\n \n fn baz(S quux, xyzzy: i32) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP declare the type after the parameter binding\n //~| SUGGESTION <identifier>: <type>\n \n fn one(i32 a b) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n \n fn pattern((i32, i32) (a, b)) {}\n-//~^ ERROR expected `:`\n+//~^ ERROR expected one of `:`\n \n fn fizz(i32) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP if this was a parameter name, give it a type\n //~| HELP if this is a type, explicitly ignore the parameter name\n \n fn missing_colon(quux S) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP declare the type after the parameter binding\n //~| SUGGESTION <identifier>: <type>\n "}, {"sha": "2bda4460031a068032c1377dce9bcd159b77e651", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,38 +1,38 @@\n-error: expected one of `:` or `@`, found `bar`\n+error: expected one of `:`, `@`, or `|`, found `bar`\n   --> $DIR/inverted-parameters.rs:4:24\n    |\n LL |     fn foo(&self, &str bar) {}\n    |                   -----^^^\n    |                   |    |\n-   |                   |    expected one of `:` or `@` here\n+   |                   |    expected one of `:`, `@`, or `|` here\n    |                   help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-error: expected one of `:` or `@`, found `quux`\n+error: expected one of `:`, `@`, or `|`, found `quux`\n   --> $DIR/inverted-parameters.rs:10:10\n    |\n LL | fn baz(S quux, xyzzy: i32) {}\n    |        --^^^^\n    |        | |\n-   |        | expected one of `:` or `@` here\n+   |        | expected one of `:`, `@`, or `|` here\n    |        help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-error: expected one of `:` or `@`, found `a`\n+error: expected one of `:`, `@`, or `|`, found `a`\n   --> $DIR/inverted-parameters.rs:15:12\n    |\n LL | fn one(i32 a b) {}\n-   |            ^ expected one of `:` or `@` here\n+   |            ^ expected one of `:`, `@`, or `|` here\n \n-error: expected `:`, found `(`\n+error: expected one of `:` or `|`, found `(`\n   --> $DIR/inverted-parameters.rs:18:23\n    |\n LL | fn pattern((i32, i32) (a, b)) {}\n-   |                       ^ expected `:`\n+   |                       ^ expected one of `:` or `|` here\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/inverted-parameters.rs:21:12\n    |\n LL | fn fizz(i32) {}\n-   |            ^ expected one of `:` or `@` here\n+   |            ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -44,13 +44,13 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn fizz(_: i32) {}\n    |         ^^^^^^\n \n-error: expected one of `:` or `@`, found `S`\n+error: expected one of `:`, `@`, or `|`, found `S`\n   --> $DIR/inverted-parameters.rs:26:23\n    |\n LL | fn missing_colon(quux S) {}\n    |                  -----^\n    |                  |    |\n-   |                  |    expected one of `:` or `@` here\n+   |                  |    expected one of `:`, `@`, or `|` here\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n error: aborting due to 6 previous errors"}, {"sha": "a6861410682cbeaa4223900cf51b1b6006498b93", "filename": "src/test/ui/parser/issue-22647.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22647.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let caller<F> = |f: F|  //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `<`\n+    let caller<F> = |f: F|  //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n     where F: Fn() -> i32\n     {\n         let x = f();"}, {"sha": "4b1ef4f3dfc7849b36829f97d06d548616468698", "filename": "src/test/ui/parser/issue-22647.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `<`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n   --> $DIR/issue-22647.rs:2:15\n    |\n LL |     let caller<F> = |f: F|\n-   |               ^ expected one of `:`, `;`, `=`, or `@` here\n+   |               ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "774de9c7e64485165e695fbc6c8f69813d7ef552", "filename": "src/test/ui/parser/issue-22712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22712.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -3,7 +3,7 @@ struct Foo<B> {\n }\n \n fn bar() {\n-    let Foo<Vec<u8>>  //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `<`\n+    let Foo<Vec<u8>>  //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n }\n \n fn main() {}"}, {"sha": "d9e83144b367a1fc13546f1319824106675b55f4", "filename": "src/test/ui/parser/issue-22712.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `<`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n   --> $DIR/issue-22712.rs:6:12\n    |\n LL |     let Foo<Vec<u8>>\n-   |            ^ expected one of `:`, `;`, `=`, or `@` here\n+   |            ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "aaf5137461fa639e0385c57b5d3b337868356250", "filename": "src/test/ui/parser/issue-24197.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-24197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-24197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24197.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let buf[0] = 0; //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `[`\n+    let buf[0] = 0; //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n }"}, {"sha": "24818db622ad45fcc4557d12652e0d5f832ca6a6", "filename": "src/test/ui/parser/issue-24197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `[`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n   --> $DIR/issue-24197.rs:2:12\n    |\n LL |     let buf[0] = 0;\n-   |            ^ expected one of `:`, `;`, `=`, or `@` here\n+   |            ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "22f80a8aae866f254a8623a196f7c08ab0a85851", "filename": "src/test/ui/parser/issue-33413.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -2,7 +2,7 @@ struct S;\n \n impl S {\n     fn f(*, a: u8) -> u8 {}\n-    //~^ ERROR expected argument name, found `*`\n+    //~^ ERROR expected parameter name, found `*`\n }\n \n fn main() {}"}, {"sha": "9e1178e8ac1f352d3f4fc53d8dc1f401f7cfbeeb", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected argument name, found `*`\n+error: expected parameter name, found `*`\n   --> $DIR/issue-33413.rs:4:10\n    |\n LL |     fn f(*, a: u8) -> u8 {}\n-   |          ^ expected argument name\n+   |          ^ expected parameter name\n \n error: aborting due to previous error\n "}, {"sha": "a5a8de85466bbccf5c549f3d538f82bf69ccc854", "filename": "src/test/ui/parser/issue-63135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: aborting due to 6 previous errors\n+// error-pattern: aborting due to 5 previous errors\n \n fn i(n{...,f #"}, {"sha": "a077ad454a9df419eb721c5359ccdfe9cbd0721a", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -28,17 +28,11 @@ error: expected `[`, found `}`\n LL | fn i(n{...,f #\n    |               ^ expected `[`\n \n-error: expected `:`, found `)`\n+error: expected one of `:` or `|`, found `)`\n   --> $DIR/issue-63135.rs:3:15\n    |\n LL | fn i(n{...,f #\n-   |               ^ expected `:`\n+   |               ^ expected one of `:` or `|` here\n \n-error: expected one of `->`, `where`, or `{`, found `<eof>`\n-  --> $DIR/issue-63135.rs:3:15\n-   |\n-LL | fn i(n{...,f #\n-   |               ^ expected one of `->`, `where`, or `{` here\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "bffeb1e2e7c40a79eb27e8aceb37056fc84f1fa2", "filename": "src/test/ui/parser/mut-patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -2,5 +2,6 @@\n \n pub fn main() {\n     struct Foo { x: isize }\n-    let mut Foo { x: x } = Foo { x: 3 }; //~ ERROR: expected one of `:`, `;`, `=`, or `@`, found `{`\n+    let mut Foo { x: x } = Foo { x: 3 };\n+    //~^ ERROR: expected one of `:`, `;`, `=`, `@`, or `|`, found `{`\n }"}, {"sha": "b39209afd42958364df00e6c61dc47316ec26adc", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `{`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `{`\n   --> $DIR/mut-patterns.rs:5:17\n    |\n LL |     let mut Foo { x: x } = Foo { x: 3 };\n-   |                 ^ expected one of `:`, `;`, `=`, or `@` here\n+   |                 ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "49cbc4d6bf40f0c091f8ad6a232585e678ef51e0", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,4 +1,4 @@\n-fn foo(x) { //~ ERROR expected one of `:` or `@`, found `)`\n+fn foo(x) { //~ ERROR expected one of `:`, `@`, or `|`, found `)`\n }\n \n fn main() {}"}, {"sha": "7feb15592c54f7793560863e9279ee3c7967b3b0", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/omitted-arg-in-item-fn.rs:1:9\n    |\n LL | fn foo(x) {\n-   |         ^ expected one of `:` or `@` here\n+   |         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "3a778ed14f637a2f90e64277b104443525eb5e72", "filename": "src/test/ui/parser/pat-lt-bracket-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,4 +1,4 @@\n fn a(B<) {}\n-   //~^ error: expected one of `:` or `@`, found `<`\n+   //~^ error: expected one of `:`, `@`, or `|`, found `<`\n \n fn main() {}"}, {"sha": "dbc8d0f5865c6c7d352826f0919280bff2770b41", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `<`\n+error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/pat-lt-bracket-2.rs:1:7\n    |\n LL | fn a(B<) {}\n-   |       ^ expected one of `:` or `@` here\n+   |       ^ expected one of `:`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "aaece1f6bd9cb8e4d8a28fd3ca993205e321dacd", "filename": "src/test/ui/parser/pat-lt-bracket-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let v[0] = v[1]; //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `[`\n+    let v[0] = v[1]; //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n }"}, {"sha": "167314dde06501dca040854dc6b911b426a58e7d", "filename": "src/test/ui/parser/pat-lt-bracket-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `[`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-5.rs:2:10\n    |\n LL |     let v[0] = v[1];\n-   |          ^ expected one of `:`, `;`, `=`, or `@` here\n+   |          ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "1dafb5a07bb5a4c7cf7f419f9475f1f27e1a8064", "filename": "src/test/ui/parser/pat-ranges-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,5 +1,5 @@\n // Parsing of range patterns\n \n fn main() {\n-    let macropus!() ..= 11 = 12; //~ error: expected one of `:`, `;`, or `=`, found `..=`\n+    let macropus!() ..= 11 = 12; //~ error: expected one of `:`, `;`, `=`, or `|`, found `..=`\n }"}, {"sha": "4e2c5d28381d8a76d40bad97f9fb118729e0ad01", "filename": "src/test/ui/parser/pat-ranges-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, or `=`, found `..=`\n+error: expected one of `:`, `;`, `=`, or `|`, found `..=`\n   --> $DIR/pat-ranges-1.rs:4:21\n    |\n LL |     let macropus!() ..= 11 = 12;\n-   |                     ^^^ expected one of `:`, `;`, or `=` here\n+   |                     ^^^ expected one of `:`, `;`, `=`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "1593222acca1be442f74c57f87c1f2efcfdc4dc3", "filename": "src/test/ui/parser/pat-ranges-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,5 +1,5 @@\n // Parsing of range patterns\n \n fn main() {\n-    let 10 ..= makropulos!() = 12; //~ error: expected one of `::`, `:`, `;`, or `=`, found `!`\n+    let 10 ..= makropulos!() = 12; //~ error: expected one of `::`, `:`, `;`, `=`, or `|`, found `!`\n }"}, {"sha": "64df56f5a61b1847eb040582c0c051b8f87d4d1e", "filename": "src/test/ui/parser/pat-ranges-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `::`, `:`, `;`, or `=`, found `!`\n+error: expected one of `::`, `:`, `;`, `=`, or `|`, found `!`\n   --> $DIR/pat-ranges-2.rs:4:26\n    |\n LL |     let 10 ..= makropulos!() = 12;\n-   |                          ^ expected one of `::`, `:`, `;`, or `=` here\n+   |                          ^ expected one of `::`, `:`, `;`, `=`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "8976dcf0d90f931466973cef05cc984a014fe9fe", "filename": "src/test/ui/parser/pat-ranges-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,5 +1,5 @@\n // Parsing of range patterns\n \n fn main() {\n-    let 10 ..= 10 + 3 = 12; //~ expected one of `:`, `;`, or `=`, found `+`\n+    let 10 ..= 10 + 3 = 12; //~ expected one of `:`, `;`, `=`, or `|`, found `+`\n }"}, {"sha": "c32c18d98dce7c1da31851ffdb4466a3655b5283", "filename": "src/test/ui/parser/pat-ranges-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, or `=`, found `+`\n+error: expected one of `:`, `;`, `=`, or `|`, found `+`\n   --> $DIR/pat-ranges-3.rs:4:19\n    |\n LL |     let 10 ..= 10 + 3 = 12;\n-   |                   ^ expected one of `:`, `;`, or `=` here\n+   |                   ^ expected one of `:`, `;`, `=`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "61188976b028cce46b9cd175b3a1abde7ffed87d", "filename": "src/test/ui/parser/pat-ranges-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let 10 - 3 ..= 10 = 8;\n-    //~^ error: expected one of `...`, `..=`, `..`, `:`, `;`, or `=`, found `-`\n+    //~^ error: expected one of `...`, `..=`, `..`, `:`, `;`, `=`, or `|`, found `-`\n }"}, {"sha": "53e38bc670beb0c1b27fba9b96d052b1f6c7aa45", "filename": "src/test/ui/parser/pat-ranges-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `...`, `..=`, `..`, `:`, `;`, or `=`, found `-`\n+error: expected one of `...`, `..=`, `..`, `:`, `;`, `=`, or `|`, found `-`\n   --> $DIR/pat-ranges-4.rs:4:12\n    |\n LL |     let 10 - 3 ..= 10 = 8;\n-   |            ^ expected one of `...`, `..=`, `..`, `:`, `;`, or `=` here\n+   |            ^ expected one of 7 possible tokens here\n \n error: aborting due to previous error\n "}, {"sha": "a438db3b0c18b8ee34eb8f6840cde137dd242698", "filename": "src/test/ui/parser/removed-syntax-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,4 +1,4 @@\n fn f(+x: isize) {}\n-//~^ ERROR expected argument name, found `+`\n+//~^ ERROR expected parameter name, found `+`\n \n fn main() {}"}, {"sha": "d0393b379f06d03a4cef67dbede819a6cd2a7bfc", "filename": "src/test/ui/parser/removed-syntax-mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected argument name, found `+`\n+error: expected parameter name, found `+`\n   --> $DIR/removed-syntax-mode.rs:1:6\n    |\n LL | fn f(+x: isize) {}\n-   |      ^ expected argument name\n+   |      ^ expected parameter name\n \n error: aborting due to previous error\n "}, {"sha": "d71711336b06e41a8ac5f9705c672d1fe55169be", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -3,6 +3,6 @@\n #![feature(param_attrs)]\n \n trait Trait2015 { fn foo(#[allow(C)] i32); }\n-//~^ ERROR expected one of `:` or `@`, found `)`\n+//~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n \n fn main() {}"}, {"sha": "26b414e4268059c0e242404ca85b917e90335860", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/param-attrs-2018.rs:5:41\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n-   |                                         ^ expected one of `:` or `@` here\n+   |                                         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "cc0eccd37a26f6eda14f756cbfb5b7eb7390ea6c", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3c934e85a12bd48abf749d52c4be69e7eed5b/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=7dc3c934e85a12bd48abf749d52c4be69e7eed5b", "patch": "@@ -1,14 +1,14 @@\n-error: expected one of `:` or `@`, found `<`\n+error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/issue-34264.rs:1:14\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |              ^ expected one of `:` or `@` here\n+   |              ^ expected one of `:`, `@`, or `|` here\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/issue-34264.rs:1:27\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |                           ^ expected one of `:` or `@` here\n+   |                           ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -20,11 +20,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn foo(Option<i32>, _: String) {}\n    |                     ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/issue-34264.rs:3:9\n    |\n LL | fn bar(x, y: usize) {}\n-   |         ^ expected one of `:` or `@` here\n+   |         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}]}