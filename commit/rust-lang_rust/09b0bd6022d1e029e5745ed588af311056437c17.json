{"sha": "09b0bd6022d1e029e5745ed588af311056437c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YjBiZDYwMjJkMWUwMjllNTc0NWVkNTg4YWYzMTEwNTY0MzdjMTc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-25T00:29:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-25T00:29:39Z"}, "message": "Rollup merge of #77074 - lcnr:array-from-ref, r=SimonSapin\n\nadd array::from_ref\n\nmirrors the methods in `std::slice` with the same name.\n\nI guess this method previously didn't exist as there was close to no reason to create an array of size `1`.\nThis will change due to const generics in the near future.", "tree": {"sha": "5c58e2428620129725ced006c624c11deb898960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c58e2428620129725ced006c624c11deb898960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b0bd6022d1e029e5745ed588af311056437c17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbTnzCRBK7hj4Ov3rIwAAdHIIAAXoYJMX/OlLqmrZaquzU5v0\nsxhkpIhquz4qdkd5NwNEzDzRSfckqZ9gW3+zOrXLZ/MC00c1ajfIp9xcV/SXKNpf\n1l0eY8s89s/dISA3b5DJGq/9f2TCGiIy+3E/pJCFfsnTBEZtUeW56lQQ2OGcm+0p\nkvtufHUJ5jyD/1YpK4L1xk1VWXF1zd0pjvDN7p06puj2VlHvm25Xkzspr54mQkQH\nza+BfTnW0vAAuepBwnLb5n8g/ZfRe0cXi1G3pXwa8hf48twfz4b9T1NNhJFtBZD+\niF8Ns/FJ8IqHLBwLgYGdFRiWqZuBCzqmXTPEaAOXpV8MqbPD9ZeCeU2JTVKSe5w=\n=gKuR\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c58e2428620129725ced006c624c11deb898960\nparent 862faea4bea9ff45563aaefca2a5d6047242c75f\nparent 5b3016134fef93d9bed343bb15da837acf50b635\nauthor Jonas Schievink <jonasschievink@gmail.com> 1600993779 +0200\ncommitter GitHub <noreply@github.com> 1600993779 +0200\n\nRollup merge of #77074 - lcnr:array-from-ref, r=SimonSapin\n\nadd array::from_ref\n\nmirrors the methods in `std::slice` with the same name.\n\nI guess this method previously didn't exist as there was close to no reason to create an array of size `1`.\nThis will change due to const generics in the near future.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b0bd6022d1e029e5745ed588af311056437c17", "html_url": "https://github.com/rust-lang/rust/commit/09b0bd6022d1e029e5745ed588af311056437c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b0bd6022d1e029e5745ed588af311056437c17/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862faea4bea9ff45563aaefca2a5d6047242c75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/862faea4bea9ff45563aaefca2a5d6047242c75f", "html_url": "https://github.com/rust-lang/rust/commit/862faea4bea9ff45563aaefca2a5d6047242c75f"}, {"sha": "5b3016134fef93d9bed343bb15da837acf50b635", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3016134fef93d9bed343bb15da837acf50b635", "html_url": "https://github.com/rust-lang/rust/commit/5b3016134fef93d9bed343bb15da837acf50b635"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "966272ca115491005ba2747be6cd067b207023d1", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=09b0bd6022d1e029e5745ed588af311056437c17", "patch": "@@ -19,6 +19,20 @@ mod iter;\n #[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n pub use iter::IntoIter;\n \n+/// Converts a reference to `T` into a reference to an array of length 1 (without copying).\n+#[unstable(feature = \"array_from_ref\", issue = \"77101\")]\n+pub fn from_ref<T>(s: &T) -> &[T; 1] {\n+    // SAFETY: Converting `&T` to `&[T; 1]` is sound.\n+    unsafe { &*(s as *const T).cast::<[T; 1]>() }\n+}\n+\n+/// Converts a mutable reference to `T` into a mutable reference to an array of length 1 (without copying).\n+#[unstable(feature = \"array_from_ref\", issue = \"77101\")]\n+pub fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n+    // SAFETY: Converting `&mut T` to `&mut [T; 1]` is sound.\n+    unsafe { &mut *(s as *mut T).cast::<[T; 1]>() }\n+}\n+\n /// Utility trait implemented only on arrays of fixed size\n ///\n /// This trait can be used to implement other traits on fixed-size arrays"}, {"sha": "09209306c9d0f75eb08706e68e89d2b36e62ecaa", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=09b0bd6022d1e029e5745ed588af311056437c17", "patch": "@@ -1,5 +1,6 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n+use crate::array;\n use crate::intrinsics::is_aligned_and_not_null;\n use crate::mem;\n use crate::ptr;\n@@ -140,19 +141,11 @@ pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T]\n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub fn from_ref<T>(s: &T) -> &[T] {\n-    // SAFETY: a reference is guaranteed to be valid for reads. The returned\n-    // reference cannot be mutated as it is an immutable reference.\n-    // `mem::size_of::<T>()` cannot be larger than `isize::MAX`.\n-    // Thus the call to `from_raw_parts` is safe.\n-    unsafe { from_raw_parts(s, 1) }\n+    array::from_ref(s)\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub fn from_mut<T>(s: &mut T) -> &mut [T] {\n-    // SAFETY: a mutable reference is guaranteed to be valid for writes.\n-    // The reference cannot be accessed by another pointer as it is an mutable reference.\n-    // `mem::size_of::<T>()` cannot be larger than `isize::MAX`.\n-    // Thus the call to `from_raw_parts_mut` is safe.\n-    unsafe { from_raw_parts_mut(s, 1) }\n+    array::from_mut(s)\n }"}, {"sha": "dbcea2747a00d5bacbc005f78e57a6543df76841", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=09b0bd6022d1e029e5745ed588af311056437c17", "patch": "@@ -1,4 +1,4 @@\n-use core::array::{FixedSizeArray, IntoIter};\n+use core::array::{self, FixedSizeArray, IntoIter};\n use core::convert::TryFrom;\n \n #[test]\n@@ -19,6 +19,21 @@ fn fixed_size_array() {\n     assert_eq!(FixedSizeArray::as_mut_slice(&mut empty_zero_sized).len(), 0);\n }\n \n+#[test]\n+fn array_from_ref() {\n+    let value: String = \"Hello World!\".into();\n+    let arr: &[String; 1] = array::from_ref(&value);\n+    assert_eq!(&[value.clone()], arr);\n+}\n+\n+#[test]\n+fn array_from_mut() {\n+    let mut value: String = \"Hello World\".into();\n+    let arr: &mut [String; 1] = array::from_mut(&mut value);\n+    arr[0].push_str(\"!\");\n+    assert_eq!(&value, \"Hello World!\");\n+}\n+\n #[test]\n fn array_try_from() {\n     macro_rules! test {"}, {"sha": "d8b36beb3e0856585939f7e91f7b24497751fc3f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0bd6022d1e029e5745ed588af311056437c17/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=09b0bd6022d1e029e5745ed588af311056437c17", "patch": "@@ -1,5 +1,6 @@\n #![feature(alloc_layout_extra)]\n #![feature(array_chunks)]\n+#![feature(array_from_ref)]\n #![feature(array_methods)]\n #![feature(array_map)]\n #![feature(array_windows)]"}]}