{"sha": "ea277f1909f9afb31baec14bc072b085f5c565c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjc3ZjE5MDlmOWFmYjMxYmFlYzE0YmMwNzJiMDg1ZjVjNTY1YzA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-01T00:41:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-01T00:41:46Z"}, "message": "Rollup merge of #83700 - steffahn:string_to_pathbuf_conversion_documentation, r=JohnTitor\n\nFix documentation of conversion from String to OsString\n\nFrom [this question on URLO](https://users.rust-lang.org/t/does-converting-a-string-into-a-pathbuf-allocate-new-buffer/57678), I noticed that the documentation of `From<String> for OsString` incorrectly claims to be copying data.\n\n````@rustbot```` modify labels: T-doc, T-libs", "tree": {"sha": "cb1539b2e42d5c93a733b0e45a7dff0890bb3de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb1539b2e42d5c93a733b0e45a7dff0890bb3de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea277f1909f9afb31baec14bc072b085f5c565c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZRbLCRBK7hj4Ov3rIwAAdHIIABxzWy8lf0TViOXW90Bjp5vt\nYDUAQacu96aBI9Qr4z/ktzw6rNfLjQVT39Bd72/uYQFVcFTRMzo7KKQYYlW7NlFT\nKoSKqkOJPsuVrd6r5JAUR3t3ryY+UzVecZb59iK2dxTug7tlLs5lR9lG/h6sTngg\n4byRy3HBfvJiYGuMag9nyk6m/ufr9aQgguLJQrHojmXzfQfihJ/MYTAC0vvYBn9n\nofYtLtoqyyWlhxOQAJtQUWurmpvtT6+zSliHer2e+2NBJk2paSB0edQ+C4MuGzxH\ndm7W1LhSUyw+2M0kryd570dzRz5cRUfqhaK34vtTA0SrJ+yEaplZuR5Db+sJ2ZU=\n=C2or\n-----END PGP SIGNATURE-----\n", "payload": "tree cb1539b2e42d5c93a733b0e45a7dff0890bb3de8\nparent e40601e952b8c6d4fe38b8d7d2930b132ce46be2\nparent 7509aa108c6bb852062e72de6fef5297f0d624e9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617237706 +0200\ncommitter GitHub <noreply@github.com> 1617237706 +0200\n\nRollup merge of #83700 - steffahn:string_to_pathbuf_conversion_documentation, r=JohnTitor\n\nFix documentation of conversion from String to OsString\n\nFrom [this question on URLO](https://users.rust-lang.org/t/does-converting-a-string-into-a-pathbuf-allocate-new-buffer/57678), I noticed that the documentation of `From<String> for OsString` incorrectly claims to be copying data.\n\n````@rustbot```` modify labels: T-doc, T-libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea277f1909f9afb31baec14bc072b085f5c565c0", "html_url": "https://github.com/rust-lang/rust/commit/ea277f1909f9afb31baec14bc072b085f5c565c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea277f1909f9afb31baec14bc072b085f5c565c0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40601e952b8c6d4fe38b8d7d2930b132ce46be2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40601e952b8c6d4fe38b8d7d2930b132ce46be2", "html_url": "https://github.com/rust-lang/rust/commit/e40601e952b8c6d4fe38b8d7d2930b132ce46be2"}, {"sha": "7509aa108c6bb852062e72de6fef5297f0d624e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7509aa108c6bb852062e72de6fef5297f0d624e9", "html_url": "https://github.com/rust-lang/rust/commit/7509aa108c6bb852062e72de6fef5297f0d624e9"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "ecaab6703490803a7ad84d666e0bb7c53ef498b8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea277f1909f9afb31baec14bc072b085f5c565c0/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea277f1909f9afb31baec14bc072b085f5c565c0/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=ea277f1909f9afb31baec14bc072b085f5c565c0", "patch": "@@ -361,7 +361,7 @@ impl OsString {\n impl From<String> for OsString {\n     /// Converts a [`String`] into a [`OsString`].\n     ///\n-    /// The conversion copies the data, and includes an allocation on the heap.\n+    /// This conversion does not allocate or copy memory.\n     #[inline]\n     fn from(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n@@ -858,7 +858,7 @@ impl From<Cow<'_, OsStr>> for Box<OsStr> {\n \n #[stable(feature = \"os_string_from_box\", since = \"1.18.0\")]\n impl From<Box<OsStr>> for OsString {\n-    /// Converts a [`Box`]`<`[`OsStr`]`>` into a `OsString` without copying or\n+    /// Converts a [`Box`]`<`[`OsStr`]`>` into an [`OsString`] without copying or\n     /// allocating.\n     #[inline]\n     fn from(boxed: Box<OsStr>) -> OsString {"}, {"sha": "f4020a428791efa93d16473e0273ee18abe89ed2", "filename": "library/std/src/path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea277f1909f9afb31baec14bc072b085f5c565c0/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea277f1909f9afb31baec14bc072b085f5c565c0/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=ea277f1909f9afb31baec14bc072b085f5c565c0", "patch": "@@ -1467,7 +1467,7 @@ impl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<OsString> for PathBuf {\n-    /// Converts a `OsString` into a `PathBuf`\n+    /// Converts an [`OsString`] into a [`PathBuf`]\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1478,7 +1478,7 @@ impl From<OsString> for PathBuf {\n \n #[stable(feature = \"from_path_buf_for_os_string\", since = \"1.14.0\")]\n impl From<PathBuf> for OsString {\n-    /// Converts a `PathBuf` into a `OsString`\n+    /// Converts a [`PathBuf`] into an [`OsString`]\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1489,7 +1489,7 @@ impl From<PathBuf> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for PathBuf {\n-    /// Converts a `String` into a `PathBuf`\n+    /// Converts a [`String`] into a [`PathBuf`]\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1595,7 +1595,7 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n-    /// Converts a `PathBuf` into an `Arc` by moving the `PathBuf` data into a new `Arc` buffer.\n+    /// Converts a [`PathBuf`] into an [`Arc`] by moving the [`PathBuf`] data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1605,7 +1605,7 @@ impl From<PathBuf> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Arc<Path> {\n-    /// Converts a `Path` into an `Arc` by copying the `Path` data into a new `Arc` buffer.\n+    /// Converts a [`Path`] into an [`Arc`] by copying the [`Path`] data into a new [`Arc`] buffer.\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.as_os_str());\n@@ -1615,7 +1615,7 @@ impl From<&Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n-    /// Converts a `PathBuf` into an `Rc` by moving the `PathBuf` data into a new `Rc` buffer.\n+    /// Converts a [`PathBuf`] into an [`Rc`] by moving the [`PathBuf`] data into a new `Rc` buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1625,7 +1625,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&Path> for Rc<Path> {\n-    /// Converts a `Path` into an `Rc` by copying the `Path` data into a new `Rc` buffer.\n+    /// Converts a [`Path`] into an [`Rc`] by copying the [`Path`] data into a new `Rc` buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());"}]}