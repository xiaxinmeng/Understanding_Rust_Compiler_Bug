{"sha": "4f0f1102bfa20352b8afdb39ece2a3823bb0cae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMGYxMTAyYmZhMjAzNTJiOGFmZGIzOWVjZTJhMzgyM2JiMGNhZTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-14T14:10:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T14:10:04Z"}, "message": "Rollup merge of #56609 - michaelwoerister:unconditional-target-cpu-attr, r=alexcrichton\n\nUnconditionally emit the target-cpu LLVM attribute.\n\nThis PR makes `rustc` always emit the `target-cpu` LLVM attribute for functions. The goal is to allow for cross-language inlining of functions defined in `libstd`. So far `libstd` functions were the only function without a `target-cpu` attribute, so in whole-crate-graph cross-lang LTO scenarios they were not eligible for inlining into foreign code.\n\nr? @alexcrichton", "tree": {"sha": "5514a9dc644ed68666987eaac38ba69ba0177262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5514a9dc644ed68666987eaac38ba69ba0177262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0f1102bfa20352b8afdb39ece2a3823bb0cae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcE7m8CRBK7hj4Ov3rIwAAdHIIABr6hepvlCoUnLBmVsW0zRGO\n3UrFAelZYYu3iE+fkqRzSkLjxZciAwRH/wAcNviIpCkJcZrUMqm0kyCyPU4FSwYb\ncBVggINyl64nv0YUVV66Ji/Iv9KFm9ZjxaSa6DAigZGN+IHZLXumnvu2dh/g1UQM\nzJXDQD8ujJqHuG3dojW+8WZru+cMvrda6jE0guQroan0U3brYJaz0o6iyhjW8azj\n4K8RTrDRd2wO6w5BT6OScfQ33kckEt5hshFx55UeY+DUgAl1YikmFxm4kbrRwqbC\nt97SM+gnzvECLjjwMA/nymA5eLxjQO9khuj53p/YRUXT8L3H106fQ77d1GTBPvI=\n=Fd2Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 5514a9dc644ed68666987eaac38ba69ba0177262\nparent f4b07e0713b2d82417968db08cd0575734cdac0d\nparent 86822eb9404382eb82404a2c7b9193980fdd5296\nauthor kennytm <kennytm@gmail.com> 1544796604 +0800\ncommitter GitHub <noreply@github.com> 1544796604 +0800\n\nRollup merge of #56609 - michaelwoerister:unconditional-target-cpu-attr, r=alexcrichton\n\nUnconditionally emit the target-cpu LLVM attribute.\n\nThis PR makes `rustc` always emit the `target-cpu` LLVM attribute for functions. The goal is to allow for cross-language inlining of functions defined in `libstd`. So far `libstd` functions were the only function without a `target-cpu` attribute, so in whole-crate-graph cross-lang LTO scenarios they were not eligible for inlining into foreign code.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0f1102bfa20352b8afdb39ece2a3823bb0cae9", "html_url": "https://github.com/rust-lang/rust/commit/4f0f1102bfa20352b8afdb39ece2a3823bb0cae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0f1102bfa20352b8afdb39ece2a3823bb0cae9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b07e0713b2d82417968db08cd0575734cdac0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b07e0713b2d82417968db08cd0575734cdac0d", "html_url": "https://github.com/rust-lang/rust/commit/f4b07e0713b2d82417968db08cd0575734cdac0d"}, {"sha": "86822eb9404382eb82404a2c7b9193980fdd5296", "url": "https://api.github.com/repos/rust-lang/rust/commits/86822eb9404382eb82404a2c7b9193980fdd5296", "html_url": "https://github.com/rust-lang/rust/commit/86822eb9404382eb82404a2c7b9193980fdd5296"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "48e0a3a12c963ced9a96469b8cca8c694c3fb4da", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f0f1102bfa20352b8afdb39ece2a3823bb0cae9/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0f1102bfa20352b8afdb39ece2a3823bb0cae9/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=4f0f1102bfa20352b8afdb39ece2a3823bb0cae9", "patch": "@@ -18,6 +18,7 @@ use rustc::session::config::Sanitizer;\n use rustc::ty::{self, TyCtxt, PolyFnSig};\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n+use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::PanicStrategy;\n@@ -130,8 +131,7 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n }\n \n pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n-    let cpu = llvm_util::target_cpu(cx.tcx.sess);\n-    let target_cpu = CString::new(cpu).unwrap();\n+    let target_cpu = SmallCStr::new(llvm_util::target_cpu(cx.tcx.sess));\n     llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n@@ -231,11 +231,7 @@ pub fn from_fn_attrs(\n     // Always annotate functions with the target-cpu they are compiled for.\n     // Without this, ThinLTO won't inline Rust functions into Clang generated\n     // functions (because Clang annotates functions this way too).\n-    // NOTE: For now we just apply this if -Zcross-lang-lto is specified, since\n-    //       it introduce a little overhead and isn't really necessary otherwise.\n-    if cx.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() {\n-        apply_target_cpu_attr(cx, llfn);\n-    }\n+    apply_target_cpu_attr(cx, llfn);\n \n     let features = llvm_target_features(cx.tcx.sess)\n         .map(|s| s.to_string())"}]}