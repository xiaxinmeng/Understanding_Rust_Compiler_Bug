{"sha": "9d69783a46a9f6096b8c2f284876d6a68e2b6455", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNjk3ODNhNDZhOWY2MDk2YjhjMmYyODQ4NzZkNmE2OGUyYjY0NTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T11:40:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:15:52Z"}, "message": "typeck/pat.rs: `(*)` -> `(note_1)` for clarity.", "tree": {"sha": "bddcba2f394884db84a32e7b2697d79183d1df19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bddcba2f394884db84a32e7b2697d79183d1df19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d69783a46a9f6096b8c2f284876d6a68e2b6455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d69783a46a9f6096b8c2f284876d6a68e2b6455", "html_url": "https://github.com/rust-lang/rust/commit/9d69783a46a9f6096b8c2f284876d6a68e2b6455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d69783a46a9f6096b8c2f284876d6a68e2b6455/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862bb385d1dea925c179dfad996150ee1bd5b2ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/862bb385d1dea925c179dfad996150ee1bd5b2ed", "html_url": "https://github.com/rust-lang/rust/commit/862bb385d1dea925c179dfad996150ee1bd5b2ed"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "59244ec33ca33cdeb17842410383fcf92342a71a", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d69783a46a9f6096b8c2f284876d6a68e2b6455/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d69783a46a9f6096b8c2f284876d6a68e2b6455/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=9d69783a46a9f6096b8c2f284876d6a68e2b6455", "patch": "@@ -115,12 +115,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.write_ty(pat.hir_id, ty);\n \n-        // (*) In most of the cases above (literals and constants being\n-        // the exception), we relate types using strict equality, even\n-        // though subtyping would be sufficient. There are a few reasons\n-        // for this, some of which are fairly subtle and which cost me\n-        // (nmatsakis) an hour or two debugging to remember, so I thought\n-        // I'd write them down this time.\n+        // (note_1): In most of the cases where (note_1) is referenced\n+        // (literals and constants being the exception), we relate types\n+        // using strict equality, even though subtyping would be sufficient.\n+        // There are a few reasons for this, some of which are fairly subtle\n+        // and which cost me (nmatsakis) an hour or two debugging to remember,\n+        // so I thought I'd write them down this time.\n         //\n         // 1. There is no loss of expressiveness here, though it does\n         // cause some inconvenience. What we are saying is that the type\n@@ -427,12 +427,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // `x` is assigned a value of type `&M T`, hence `&M T <: typeof(x)`\n                 // is required. However, we use equality, which is stronger.\n-                // See (*) for an explanation.\n+                // See (note_1) for an explanation.\n                 region_ty\n             }\n             // Otherwise, the type of x is the expected type `T`.\n             ty::BindByValue(_) => {\n-                // As above, `T <: typeof(x)` is required, but we use equality, see (*) below.\n+                // As above, `T <: typeof(x)` is required, but we use equality, see (note_1).\n                 expected\n             }\n         };\n@@ -955,11 +955,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expected = self.shallow_resolve(expected);\n         if self.check_dereferencable(pat.span, expected, &inner) {\n             // `demand::subtype` would be good enough, but using `eqtype` turns\n-            // out to be equally general. See (*) below for details.\n+            // out to be equally general. See (note_1) for details.\n \n             // Take region, inner-type from expected type if we can,\n             // to avoid creating needless variables. This also helps with\n-            // the bad  interactions of the given hack detailed in (*) below.\n+            // the bad  interactions of the given hack detailed in (note_1).\n             debug!(\"check_pat_ref: expected={:?}\", expected);\n             let (rptr_ty, inner_ty) = match expected.sty {\n                 ty::Ref(_, r_ty, r_mutbl) if r_mutbl == mutbl => {"}]}