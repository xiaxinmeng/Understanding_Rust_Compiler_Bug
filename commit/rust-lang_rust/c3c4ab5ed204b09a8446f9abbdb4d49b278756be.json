{"sha": "c3c4ab5ed204b09a8446f9abbdb4d49b278756be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYzRhYjVlZDIwNGIwOWE4NDQ2ZjlhYmJkYjRkNDliMjc4NzU2YmU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-06-21T13:30:16Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-06-21T13:30:16Z"}, "message": "Encode SourceFile source crate as StableCrateId in incr. comp. OnDiskCache.", "tree": {"sha": "f6ed5e07fc38cb2e8f074f7ceb884dcf0ff6a158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ed5e07fc38cb2e8f074f7ceb884dcf0ff6a158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c4ab5ed204b09a8446f9abbdb4d49b278756be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c4ab5ed204b09a8446f9abbdb4d49b278756be", "html_url": "https://github.com/rust-lang/rust/commit/c3c4ab5ed204b09a8446f9abbdb4d49b278756be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c4ab5ed204b09a8446f9abbdb4d49b278756be/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47327145e3babaeef39e8bf41ebaeaf1ccab0d63", "url": "https://api.github.com/repos/rust-lang/rust/commits/47327145e3babaeef39e8bf41ebaeaf1ccab0d63", "html_url": "https://github.com/rust-lang/rust/commit/47327145e3babaeef39e8bf41ebaeaf1ccab0d63"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "6df8e64fada8615684fafe37c9ab2a95f57f49d5", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c3c4ab5ed204b09a8446f9abbdb4d49b278756be/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c4ab5ed204b09a8446f9abbdb4d49b278756be/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=c3c4ab5ed204b09a8446f9abbdb4d49b278756be", "patch": "@@ -54,7 +54,7 @@ pub struct OnDiskCache<'sess> {\n     cnum_map: OnceCell<UnhashMap<StableCrateId, CrateNum>>,\n \n     source_map: &'sess SourceMap,\n-    file_index_to_stable_id: FxHashMap<SourceFileIndex, StableSourceFileId>,\n+    file_index_to_stable_id: FxHashMap<SourceFileIndex, EncodedSourceFileId>,\n \n     // Caches that are populated lazily during decoding.\n     file_index_to_file: Lock<FxHashMap<SourceFileIndex, Lrc<SourceFile>>>,\n@@ -111,7 +111,7 @@ pub struct OnDiskCache<'sess> {\n // This type is used only for serialization and deserialization.\n #[derive(Encodable, Decodable)]\n struct Footer {\n-    file_index_to_stable_id: FxHashMap<SourceFileIndex, StableSourceFileId>,\n+    file_index_to_stable_id: FxHashMap<SourceFileIndex, EncodedSourceFileId>,\n     query_result_index: EncodedQueryResultIndex,\n     diagnostics_index: EncodedQueryResultIndex,\n     // The location of all allocations.\n@@ -157,6 +157,32 @@ crate struct RawDefId {\n     pub index: u32,\n }\n \n+/// An `EncodedSourceFileId` is the same as a `StableSourceFileId` except that\n+/// the source crate is represented as a [StableCrateId] instead of as a\n+/// `CrateNum`. This way `EncodedSourceFileId` can be encoded and decoded\n+/// without any additional context, i.e. with a simple `opaque::Decoder` (which\n+/// is the only thing available when decoding the cache's [Footer].\n+#[derive(Encodable, Decodable, Clone, Debug)]\n+struct EncodedSourceFileId {\n+    file_name_hash: u64,\n+    stable_crate_id: StableCrateId,\n+}\n+\n+impl EncodedSourceFileId {\n+    fn translate(&self, cnum_map: &UnhashMap<StableCrateId, CrateNum>) -> StableSourceFileId {\n+        let cnum = cnum_map[&self.stable_crate_id];\n+        StableSourceFileId { file_name_hash: self.file_name_hash, cnum }\n+    }\n+\n+    fn new(tcx: TyCtxt<'_>, file: &SourceFile) -> EncodedSourceFileId {\n+        let source_file_id = StableSourceFileId::new(file);\n+        EncodedSourceFileId {\n+            file_name_hash: source_file_id.file_name_hash,\n+            stable_crate_id: tcx.stable_crate_id(source_file_id.cnum),\n+        }\n+    }\n+}\n+\n impl<'sess> OnDiskCache<'sess> {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n     pub fn new(sess: &'sess Session, data: Vec<u8>, start_pos: usize) -> Self {\n@@ -238,7 +264,8 @@ impl<'sess> OnDiskCache<'sess> {\n                     let index = SourceFileIndex(index as u32);\n                     let file_ptr: *const SourceFile = &**file as *const _;\n                     file_to_file_index.insert(file_ptr, index);\n-                    file_index_to_stable_id.insert(index, StableSourceFileId::new(&file));\n+                    let source_file_id = EncodedSourceFileId::new(tcx, &file);\n+                    file_index_to_stable_id.insert(index, source_file_id);\n                 }\n \n                 (file_to_file_index, file_index_to_stable_id)\n@@ -605,7 +632,7 @@ pub struct CacheDecoder<'a, 'tcx> {\n     source_map: &'a SourceMap,\n     cnum_map: &'a UnhashMap<StableCrateId, CrateNum>,\n     file_index_to_file: &'a Lock<FxHashMap<SourceFileIndex, Lrc<SourceFile>>>,\n-    file_index_to_stable_id: &'a FxHashMap<SourceFileIndex, StableSourceFileId>,\n+    file_index_to_stable_id: &'a FxHashMap<SourceFileIndex, EncodedSourceFileId>,\n     alloc_decoding_session: AllocDecodingSession<'a>,\n     syntax_contexts: &'a FxHashMap<u32, AbsoluteBytePos>,\n     expn_data: &'a FxHashMap<u32, AbsoluteBytePos>,\n@@ -618,14 +645,15 @@ impl<'a, 'tcx> CacheDecoder<'a, 'tcx> {\n             ref file_index_to_file,\n             ref file_index_to_stable_id,\n             ref source_map,\n+            ref cnum_map,\n             ..\n         } = *self;\n \n         file_index_to_file\n             .borrow_mut()\n             .entry(index)\n             .or_insert_with(|| {\n-                let stable_id = file_index_to_stable_id[&index];\n+                let stable_id = file_index_to_stable_id[&index].translate(cnum_map);\n                 source_map\n                     .source_file_by_stable_id(stable_id)\n                     .expect(\"failed to lookup `SourceFile` in new context\")"}, {"sha": "32031ac70715f9735ceff3b2f759e2824f98bde7", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3c4ab5ed204b09a8446f9abbdb4d49b278756be/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c4ab5ed204b09a8446f9abbdb4d49b278756be/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=c3c4ab5ed204b09a8446f9abbdb4d49b278756be", "patch": "@@ -133,13 +133,13 @@ impl FileLoader for RealFileLoader {\n pub struct StableSourceFileId {\n     // A hash of the source file's FileName. This is hash so that it's size\n     // is more predictable than if we included the actual FileName value.\n-    file_name_hash: u64,\n+    pub file_name_hash: u64,\n \n     // The CrateNum of the crate this source file was originally parsed for.\n     // We cannot include this information in the hash because at the time\n     // of hashing we don't have the context to map from the CrateNum's numeric\n     // value to a StableCrateId.\n-    cnum: CrateNum,\n+    pub cnum: CrateNum,\n }\n \n // FIXME: we need a more globally consistent approach to the problem solved by"}]}