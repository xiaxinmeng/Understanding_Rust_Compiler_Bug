{"sha": "daea09cf91fdf50c03500784d0f1612db42afd2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZWEwOWNmOTFmZGY1MGMwMzUwMDc4NGQwZjE2MTJkYjQyYWZkMmI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-04T21:03:59Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-20T00:50:05Z"}, "message": "Add `MaybeInitializedLocals` dataflow analysis", "tree": {"sha": "32b8aa9524b74f90b4261e3bf5168fb3ec021aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b8aa9524b74f90b4261e3bf5168fb3ec021aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daea09cf91fdf50c03500784d0f1612db42afd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daea09cf91fdf50c03500784d0f1612db42afd2b", "html_url": "https://github.com/rust-lang/rust/commit/daea09cf91fdf50c03500784d0f1612db42afd2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daea09cf91fdf50c03500784d0f1612db42afd2b/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "html_url": "https://github.com/rust-lang/rust/commit/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "01cb794a2e085d512d868fb9cd4fc4e70fd62b8c", "filename": "src/librustc_mir/dataflow/impls/init_locals.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/daea09cf91fdf50c03500784d0f1612db42afd2b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daea09cf91fdf50c03500784d0f1612db42afd2b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Finit_locals.rs?ref=daea09cf91fdf50c03500784d0f1612db42afd2b", "patch": "@@ -0,0 +1,115 @@\n+//! A less precise version of `MaybeInitializedPlaces` whose domain is entire locals.\n+//!\n+//! A local will be maybe initialized if *any* projections of that local might be initialized.\n+\n+use crate::dataflow::{self, BottomValue, GenKill};\n+\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::{self, BasicBlock, Local, Location};\n+\n+pub struct MaybeInitializedLocals;\n+\n+impl BottomValue for MaybeInitializedLocals {\n+    /// bottom = uninit\n+    const BOTTOM_VALUE: bool = false;\n+}\n+\n+impl dataflow::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n+    type Idx = Local;\n+\n+    const NAME: &'static str = \"maybe_init_locals\";\n+\n+    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n+        body.local_decls.len()\n+    }\n+\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, entry_set: &mut BitSet<Self::Idx>) {\n+        // Function arguments are initialized to begin with.\n+        for arg in body.args_iter() {\n+            entry_set.insert(arg);\n+        }\n+    }\n+}\n+\n+impl dataflow::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n+    fn statement_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        statement: &mir::Statement<'tcx>,\n+        loc: Location,\n+    ) {\n+        TransferFunction { trans }.visit_statement(statement, loc)\n+    }\n+\n+    fn terminator_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        terminator: &mir::Terminator<'tcx>,\n+        loc: Location,\n+    ) {\n+        TransferFunction { trans }.visit_terminator(terminator, loc)\n+    }\n+\n+    fn call_return_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        _block: BasicBlock,\n+        _func: &mir::Operand<'tcx>,\n+        _args: &[mir::Operand<'tcx>],\n+        return_place: mir::Place<'tcx>,\n+    ) {\n+        trans.gen(return_place.local)\n+    }\n+\n+    /// See `Analysis::apply_yield_resume_effect`.\n+    fn yield_resume_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        _resume_block: BasicBlock,\n+        resume_place: mir::Place<'tcx>,\n+    ) {\n+        trans.gen(resume_place.local)\n+    }\n+}\n+\n+struct TransferFunction<'a, T> {\n+    trans: &'a mut T,\n+}\n+\n+impl<T> Visitor<'tcx> for TransferFunction<'a, T>\n+where\n+    T: GenKill<Local>,\n+{\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+        use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, NonUseContext};\n+        match context {\n+            // These are handled specially in `call_return_effect` and `yield_resume_effect`.\n+            PlaceContext::MutatingUse(MutatingUseContext::Call | MutatingUseContext::Yield) => {}\n+\n+            // Otherwise, when a place is mutated, we must consider it possibly initialized.\n+            PlaceContext::MutatingUse(_) => self.trans.gen(local),\n+\n+            // If the local is moved out of, or if it gets marked `StorageDead`, consider it no\n+            // longer initialized.\n+            PlaceContext::NonUse(NonUseContext::StorageDead)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => self.trans.kill(local),\n+\n+            // All other uses do not affect this analysis.\n+            PlaceContext::NonUse(\n+                NonUseContext::StorageLive\n+                | NonUseContext::AscribeUserTy\n+                | NonUseContext::VarDebugInfo,\n+            )\n+            | PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::Inspect\n+                | NonMutatingUseContext::Copy\n+                | NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::UniqueBorrow\n+                | NonMutatingUseContext::AddressOf\n+                | NonMutatingUseContext::Projection,\n+            ) => {}\n+        }\n+    }\n+}"}, {"sha": "d5def0389126a90068f9f2afe9d48bc1f6e2ea7a", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daea09cf91fdf50c03500784d0f1612db42afd2b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daea09cf91fdf50c03500784d0f1612db42afd2b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=daea09cf91fdf50c03500784d0f1612db42afd2b", "patch": "@@ -22,11 +22,13 @@ use crate::dataflow::drop_flag_effects;\n \n mod borrowed_locals;\n pub(super) mod borrows;\n+mod init_locals;\n mod liveness;\n mod storage_liveness;\n \n pub use self::borrowed_locals::{MaybeBorrowedLocals, MaybeMutBorrowedLocals};\n pub use self::borrows::Borrows;\n+pub use self::init_locals::MaybeInitializedLocals;\n pub use self::liveness::MaybeLiveLocals;\n pub use self::storage_liveness::{MaybeRequiresStorage, MaybeStorageLive};\n "}]}