{"sha": "a760d054ef5380e32191884068c11270c70071d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NjBkMDU0ZWY1MzgwZTMyMTkxODg0MDY4YzExMjcwYzcwMDcxZDk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-19T12:11:10Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-19T12:11:10Z"}, "message": "Rollup merge of #26427 - GuillaumeGomez:patch-7, r=Manishearth\n\nSee #26396, #26400, #26399, #26398 and #26393.", "tree": {"sha": "ab8f753944154d08518848440b7d1107b8e464aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab8f753944154d08518848440b7d1107b8e464aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a760d054ef5380e32191884068c11270c70071d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a760d054ef5380e32191884068c11270c70071d9", "html_url": "https://github.com/rust-lang/rust/commit/a760d054ef5380e32191884068c11270c70071d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a760d054ef5380e32191884068c11270c70071d9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812a3f044f82715016bbe134b334491db32bb149", "url": "https://api.github.com/repos/rust-lang/rust/commits/812a3f044f82715016bbe134b334491db32bb149", "html_url": "https://github.com/rust-lang/rust/commit/812a3f044f82715016bbe134b334491db32bb149"}, {"sha": "9679faa97afbdb9738df16b81175b7090915897f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9679faa97afbdb9738df16b81175b7090915897f", "html_url": "https://github.com/rust-lang/rust/commit/9679faa97afbdb9738df16b81175b7090915897f"}], "stats": {"total": 200, "additions": 195, "deletions": 5}, "files": [{"sha": "0f83cdff5372c95b797e4c3e2870c23b7e6bf6c1", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a760d054ef5380e32191884068c11270c70071d9/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a760d054ef5380e32191884068c11270c70071d9/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=a760d054ef5380e32191884068c11270c70071d9", "patch": "@@ -256,6 +256,21 @@ See [RFC 911] for more details on the design of `const fn`s.\n [RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n \"##,\n \n+E0016: r##\"\n+Blocks in constants may only contain items (such as constant, function\n+definition, etc...) and a tail expression. Example:\n+\n+```\n+const FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n+```\n+\n+To avoid it, you have to replace the non-item object:\n+\n+```\n+const FOO: i32 = { const X : i32 = 0; X };\n+```\n+\"##,\n+\n E0018: r##\"\n The value of static and const variables must be known at compile time. You\n can't cast a pointer as an integer because we can't know what value the\n@@ -279,6 +294,42 @@ println!(\"{}\", Y);\n ```\n \"##,\n \n+E0019: r##\"\n+A function call isn't allowed in the const's initialization expression\n+because the expression's value must be known at compile-time. Example of\n+erroneous code:\n+\n+```\n+enum Test {\n+    V1\n+}\n+\n+impl Test {\n+    fn test(&self) -> i32 {\n+        12\n+    }\n+}\n+\n+fn main() {\n+    const FOO: Test = Test::V1;\n+\n+    const A: i32 = FOO.test(); // You can't call Test::func() here !\n+}\n+```\n+\n+Remember: you can't use a function call inside a const's initialization\n+expression! However, you can totally use it elsewhere you want:\n+\n+```\n+fn main() {\n+    const FOO: Test = Test::V1;\n+\n+    FOO.func(); // here is good\n+    let x = FOO.func(); // or even here!\n+}\n+```\n+\"##,\n+\n E0020: r##\"\n This error indicates that an attempt was made to divide by zero (or take the\n remainder of a zero divisor) in a static or constant expression.\n@@ -950,9 +1001,7 @@ static mut BAR: Option<Vec<i32>> = None;\n \n \n register_diagnostics! {\n-    E0016,\n     E0017,\n-    E0019,\n     E0022,\n     E0038,\n     E0109,"}, {"sha": "fa29f8f1dcea96395a2c68ebf8ed5c12467538e8", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 144, "deletions": 3, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/a760d054ef5380e32191884068c11270c70071d9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a760d054ef5380e32191884068c11270c70071d9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a760d054ef5380e32191884068c11270c70071d9", "patch": "@@ -211,6 +211,150 @@ Reference:\n http://doc.rust-lang.org/reference.html#trait-objects\n \"##,\n \n+E0034: r##\"\n+The compiler doesn't know what method to call because more than one method\n+has the same prototype. Example:\n+\n+```\n+struct Test;\n+\n+trait Trait1 {\n+    fn foo();\n+}\n+\n+trait Trait2 {\n+    fn foo();\n+}\n+\n+impl Trait1 for Test { fn foo() {} }\n+impl Trait2 for Test { fn foo() {} }\n+\n+fn main() {\n+    Test::foo() // error, which foo() to call?\n+}\n+```\n+\n+To avoid this error, you have to keep only one of them and remove the others.\n+So let's take our example and fix it:\n+\n+```\n+struct Test;\n+\n+trait Trait1 {\n+    fn foo();\n+}\n+\n+impl Trait1 for Test { fn foo() {} }\n+\n+fn main() {\n+    Test::foo() // and now that's good!\n+}\n+```\n+\n+However, a better solution would be using fully explicit naming of type and\n+trait:\n+\n+```\n+struct Test;\n+\n+trait Trait1 {\n+    fn foo();\n+}\n+\n+trait Trait2 {\n+    fn foo();\n+}\n+\n+impl Trait1 for Test { fn foo() {} }\n+impl Trait2 for Test { fn foo() {} }\n+\n+fn main() {\n+    <Test as Trait1>::foo()\n+}\n+```\n+\"##,\n+\n+E0035: r##\"\n+You tried to give a type parameter where it wasn't needed. Bad example:\n+\n+```\n+struct Test;\n+\n+impl Test {\n+    fn method(&self) {}\n+}\n+\n+fn main() {\n+    let x = Test;\n+\n+    x.method::<i32>(); // Error: Test::method doesn't need type parameter!\n+}\n+```\n+\n+To fix this error, just remove the type parameter:\n+\n+```\n+struct Test;\n+\n+impl Test {\n+    fn method(&self) {}\n+}\n+\n+fn main() {\n+    let x = Test;\n+\n+    x.method(); // OK, we're good!\n+}\n+```\n+\"##,\n+\n+E0036: r##\"\n+This error occurrs when you pass too many or not enough type parameters to\n+a method. Example:\n+\n+```\n+struct Test;\n+\n+impl Test {\n+    fn method<T>(&self, v: &[T]) -> usize {\n+        v.len()\n+    }\n+}\n+\n+fn main() {\n+    let x = Test;\n+    let v = &[0i32];\n+\n+    x.method::<i32, i32>(v); // error: only one type parameter is expected!\n+}\n+```\n+\n+To fix it, just specify a correct number of type parameters:\n+\n+```\n+struct Test;\n+\n+impl Test {\n+    fn method<T>(&self, v: &[T]) -> usize {\n+        v.len()\n+    }\n+}\n+\n+fn main() {\n+    let x = Test;\n+    let v = &[0i32];\n+\n+    x.method::<i32>(v); // OK, we're good!\n+}\n+```\n+\n+Please note on the last example that we could have called `method` like this:\n+\n+```\n+x.method(v);\n+```\n+\"##,\n+\n E0040: r##\"\n It is not allowed to manually call destructors in Rust. It is also not\n necessary to do this since `drop` is called automatically whenever a value goes\n@@ -1320,9 +1464,6 @@ For more information see the [opt-in builtin traits RFC](https://github.com/rust\n }\n \n register_diagnostics! {\n-    E0034, // multiple applicable methods in scope\n-    E0035, // does not take type parameters\n-    E0036, // incorrect number of type parameters given for this method\n     E0044, // foreign items may not have type parameters\n     E0045, // variadic function must have C calling convention\n     E0068,"}]}