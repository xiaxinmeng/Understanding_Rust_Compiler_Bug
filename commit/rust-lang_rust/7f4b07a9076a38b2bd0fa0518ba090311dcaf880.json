{"sha": "7f4b07a9076a38b2bd0fa0518ba090311dcaf880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNGIwN2E5MDc2YTM4YjJiZDBmYTA1MThiYTA5MDMxMWRjYWY4ODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T18:02:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T18:02:47Z"}, "message": "Refactor", "tree": {"sha": "b7482d9a3f1b32cf6017493e43f8b1078e601d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7482d9a3f1b32cf6017493e43f8b1078e601d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f4b07a9076a38b2bd0fa0518ba090311dcaf880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f4b07a9076a38b2bd0fa0518ba090311dcaf880", "html_url": "https://github.com/rust-lang/rust/commit/7f4b07a9076a38b2bd0fa0518ba090311dcaf880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f4b07a9076a38b2bd0fa0518ba090311dcaf880/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaca7d003bd969785be53d8f312b67bfa26f6272", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaca7d003bd969785be53d8f312b67bfa26f6272", "html_url": "https://github.com/rust-lang/rust/commit/aaca7d003bd969785be53d8f312b67bfa26f6272"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "cea2d14d124d01c015d02b0d98963471c9fae0bd", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f4b07a9076a38b2bd0fa0518ba090311dcaf880/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4b07a9076a38b2bd0fa0518ba090311dcaf880/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=7f4b07a9076a38b2bd0fa0518ba090311dcaf880", "patch": "@@ -8,7 +8,7 @@ use libsyntax2::{\n \n use {\n     AtomEdit, find_node_at_offset,\n-    scope::{FnScopes, compute_scopes},\n+    scope::FnScopes,\n };\n \n #[derive(Debug)]\n@@ -25,7 +25,7 @@ pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionI\n     };\n     let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), offset)?;\n     let fn_def = ancestors(name_ref.syntax()).filter_map(ast::FnDef::cast).next()?;\n-    let scopes = compute_scopes(fn_def);\n+    let scopes = FnScopes::new(fn_def);\n     Some(complete(name_ref, &scopes))\n }\n "}, {"sha": "76104b2cf1d781eb5bf0997c854a4653df9b06e4", "filename": "crates/libeditor/src/scope.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7f4b07a9076a38b2bd0fa0518ba090311dcaf880/crates%2Flibeditor%2Fsrc%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4b07a9076a38b2bd0fa0518ba090311dcaf880/crates%2Flibeditor%2Fsrc%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope.rs?ref=7f4b07a9076a38b2bd0fa0518ba090311dcaf880", "patch": "@@ -9,20 +9,6 @@ use libsyntax2::{\n     algo::{ancestors, generate, walk::preorder}\n };\n \n-pub fn compute_scopes(fn_def: ast::FnDef) -> FnScopes {\n-    let mut scopes = FnScopes::new();\n-    let root = scopes.root_scope();\n-    fn_def.param_list().into_iter()\n-        .flat_map(|it| it.params())\n-        .filter_map(|it| it.pat())\n-        .for_each(|it| scopes.add_bindings(root, it));\n-\n-    if let Some(body) = fn_def.body() {\n-        compute_block_scopes(body, &mut scopes, root)\n-    }\n-    scopes\n-}\n-\n fn compute_block_scopes(block: ast::Block, scopes: &mut FnScopes, mut scope: ScopeId) {\n     for stmt in block.statements() {\n         match stmt {\n@@ -106,11 +92,21 @@ pub struct FnScopes {\n }\n \n impl FnScopes {\n-    fn new() -> FnScopes {\n-        FnScopes {\n-            scopes: vec![],\n-            scope_for: HashMap::new(),\n+    pub fn new(fn_def: ast::FnDef) -> FnScopes {\n+        let mut scopes = FnScopes {\n+            scopes: Vec::new(),\n+            scope_for: HashMap::new()\n+        };\n+        let root = scopes.root_scope();\n+        fn_def.param_list().into_iter()\n+            .flat_map(|it| it.params())\n+            .filter_map(|it| it.pat())\n+            .for_each(|it| scopes.add_bindings(root, it));\n+\n+        if let Some(body) = fn_def.body() {\n+            compute_block_scopes(body, &mut scopes, root)\n         }\n+        scopes\n     }\n     pub fn entries(&self, scope: ScopeId) -> &[ScopeEntry] {\n         &self.scopes[scope].entries"}]}