{"sha": "70db76602e0fbd88c718e4f564b90a8819978773", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZGI3NjYwMmUwZmJkODhjNzE4ZTRmNTY0YjkwYTg4MTk5Nzg3NzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-04T17:12:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-04T17:12:19Z"}, "message": "Auto merge of #25078 - nham:std_net_impl_debug, r=alexcrichton\n\nI'm uncertain whether the 3 implementations in `net2` should unwrap the socket address values. Without unwrapping it looks like this:\r\n\r\n```\r\nUdpSocket { addr: Ok(V4(127.0.0.1:34354)), inner: 3 }\r\nTcpListener { addr: Ok(V4(127.0.0.1:9123)), inner: 4 }\r\nTcpStream { addr: Ok(V4(127.0.0.1:9123)), peer: Ok(V4(127.0.0.1:58360)), inner: 5 }\r\n```\r\n\r\nOne issue is that you can create, e.g. `UdpSocket`s with bad addresses, which means you can't just unwrap in the implementation:\r\n\r\n```\r\n#![feature(from_raw_os)]\r\nuse std::net::UdpSocket;\r\nuse std::os::unix::io::FromRawFd;\r\n\r\nlet sock: UdpSocket = unsafe { FromRawFd::from_raw_fd(-1) };\r\nprintln!(\"{:?}\", sock); // prints \"UdpSocket { addr: Err(Error { repr: Os(9) }), inner: -1 }\"\r\n\r\n```\r\n\r\nFixes #23134.", "tree": {"sha": "26ff11a665a56b3cf31d084344d574cb82c0a089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ff11a665a56b3cf31d084344d574cb82c0a089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70db76602e0fbd88c718e4f564b90a8819978773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70db76602e0fbd88c718e4f564b90a8819978773", "html_url": "https://github.com/rust-lang/rust/commit/70db76602e0fbd88c718e4f564b90a8819978773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70db76602e0fbd88c718e4f564b90a8819978773/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a979efc2f961c2cf8d7afa57b905e73349b8f476", "url": "https://api.github.com/repos/rust-lang/rust/commits/a979efc2f961c2cf8d7afa57b905e73349b8f476", "html_url": "https://github.com/rust-lang/rust/commit/a979efc2f961c2cf8d7afa57b905e73349b8f476"}, {"sha": "987eb28ecad144928bfc21e27777d443f56547de", "url": "https://api.github.com/repos/rust-lang/rust/commits/987eb28ecad144928bfc21e27777d443f56547de", "html_url": "https://github.com/rust-lang/rust/commit/987eb28ecad144928bfc21e27777d443f56547de"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "bf444ce671dfc38c69a4d0d91be626ce601b5fa2", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=70db76602e0fbd88c718e4f564b90a8819978773", "patch": "@@ -32,7 +32,7 @@ mod parser;\n \n /// Possible values which can be passed to the `shutdown` method of `TcpStream`\n /// and `UdpSocket`.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Shutdown {\n     /// Indicates that the reading portion of this stream/socket should be shut"}, {"sha": "c0d880877b5119e876fe0a8035e88b5f4fe9b488", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=70db76602e0fbd88c718e4f564b90a8819978773", "patch": "@@ -14,6 +14,7 @@\n use prelude::v1::*;\n use io::prelude::*;\n \n+use fmt;\n use io;\n use net::{ToSocketAddrs, SocketAddr, Shutdown};\n use sys_common::net2 as net_imp;\n@@ -167,6 +168,12 @@ impl FromInner<net_imp::TcpStream> for TcpStream {\n     fn from_inner(inner: net_imp::TcpStream) -> TcpStream { TcpStream(inner) }\n }\n \n+impl fmt::Debug for TcpStream {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n impl TcpListener {\n     /// Creates a new `TcpListener` which will be bound to the specified\n     /// address.\n@@ -239,6 +246,12 @@ impl FromInner<net_imp::TcpListener> for TcpListener {\n     }\n }\n \n+impl fmt::Debug for TcpListener {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;\n@@ -248,6 +261,7 @@ mod tests {\n     use net::*;\n     use net::test::{next_test_ip4, next_test_ip6};\n     use sync::mpsc::channel;\n+    use sys_common::AsInner;\n     use thread;\n \n     fn each_ip(f: &mut FnMut(SocketAddr)) {\n@@ -818,4 +832,27 @@ mod tests {\n             rx.recv().unwrap();\n         })\n     }\n+\n+    #[test]\n+    fn debug() {\n+        let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n+        let socket_addr = next_test_ip4();\n+\n+        let listener = t!(TcpListener::bind(&socket_addr));\n+        let listener_inner = listener.0.socket().as_inner();\n+        let compare = format!(\"TcpListener {{ addr: {:?}, {}: {:?} }}\",\n+                              socket_addr, name, listener_inner);\n+        assert_eq!(format!(\"{:?}\", listener), compare);\n+\n+        let mut stream = t!(TcpStream::connect(&(\"localhost\",\n+                                                 socket_addr.port())));\n+        let stream_inner = stream.0.socket().as_inner();\n+        let compare = format!(\"TcpStream {{ addr: {:?}, \\\n+                              peer: {:?}, {}: {:?} }}\",\n+                              stream.local_addr().unwrap(),\n+                              stream.peer_addr().unwrap(),\n+                              name,\n+                              stream_inner);\n+        assert_eq!(format!(\"{:?}\", stream), compare);\n+    }\n }"}, {"sha": "4360f62c1bf0f33bedabf0606e26b2e9415a333e", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=70db76602e0fbd88c718e4f564b90a8819978773", "patch": "@@ -13,6 +13,7 @@\n \n use prelude::v1::*;\n \n+use fmt;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr, IpAddr};\n use sys_common::net2 as net_imp;\n@@ -136,6 +137,12 @@ impl FromInner<net_imp::UdpSocket> for UdpSocket {\n     fn from_inner(inner: net_imp::UdpSocket) -> UdpSocket { UdpSocket(inner) }\n }\n \n+impl fmt::Debug for UdpSocket {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;\n@@ -144,6 +151,7 @@ mod tests {\n     use net::*;\n     use net::test::{next_test_ip4, next_test_ip6};\n     use sync::mpsc::channel;\n+    use sys_common::AsInner;\n     use thread;\n \n     fn each_ip(f: &mut FnMut(SocketAddr, SocketAddr)) {\n@@ -301,4 +309,16 @@ mod tests {\n             serv_rx.recv().unwrap();\n         })\n     }\n+\n+    #[test]\n+    fn debug() {\n+        let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n+        let socket_addr = next_test_ip4();\n+\n+        let udpsock = t!(UdpSocket::bind(&socket_addr));\n+        let udpsock_inner = udpsock.0.socket().as_inner();\n+        let compare = format!(\"UdpSocket {{ addr: {:?}, {}: {:?} }}\",\n+                              socket_addr, name, udpsock_inner);\n+        assert_eq!(format!(\"{:?}\", udpsock), compare);\n+    }\n }"}, {"sha": "7da7071670ab631c575590df8e6b6dbd95d71a6c", "filename": "src/libstd/sys/common/net2.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db76602e0fbd88c718e4f564b90a8819978773/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs?ref=70db76602e0fbd88c718e4f564b90a8819978773", "patch": "@@ -11,6 +11,7 @@\n use prelude::v1::*;\n \n use ffi::{CStr, CString};\n+use fmt;\n use io::{self, Error, ErrorKind};\n use libc::{self, c_int, c_char, c_void, socklen_t};\n use mem;\n@@ -268,6 +269,24 @@ impl FromInner<Socket> for TcpStream {\n     }\n }\n \n+impl fmt::Debug for TcpStream {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let mut res = f.debug_struct(\"TcpStream\");\n+\n+        if let Ok(addr) = self.socket_addr() {\n+            res = res.field(\"addr\", &addr);\n+        }\n+\n+        if let Ok(peer) = self.peer_addr() {\n+            res = res.field(\"peer\", &peer);\n+        }\n+\n+        let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n+        res = res.field(name, &self.inner.as_inner());\n+        res.finish()\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // TCP listeners\n ////////////////////////////////////////////////////////////////////////////////\n@@ -327,6 +346,20 @@ impl FromInner<Socket> for TcpListener {\n     }\n }\n \n+impl fmt::Debug for TcpListener {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let mut res = f.debug_struct(\"TcpListener\");\n+\n+        if let Ok(addr) = self.socket_addr() {\n+            res = res.field(\"addr\", &addr);\n+        }\n+\n+        let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n+        res = res.field(name, &self.inner.as_inner());\n+        res.finish()\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // UDP\n ////////////////////////////////////////////////////////////////////////////////\n@@ -445,3 +478,17 @@ impl FromInner<Socket> for UdpSocket {\n         UdpSocket { inner: socket }\n     }\n }\n+\n+impl fmt::Debug for UdpSocket {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let mut res = f.debug_struct(\"UdpSocket\");\n+\n+        if let Ok(addr) = self.socket_addr() {\n+            res = res.field(\"addr\", &addr);\n+        }\n+\n+        let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n+        res = res.field(name, &self.inner.as_inner());\n+        res.finish()\n+    }\n+}"}]}