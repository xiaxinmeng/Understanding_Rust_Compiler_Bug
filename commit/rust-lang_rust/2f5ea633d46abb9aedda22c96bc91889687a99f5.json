{"sha": "2f5ea633d46abb9aedda22c96bc91889687a99f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNWVhNjMzZDQ2YWJiOWFlZGRhMjJjOTZiYzkxODg5Njg3YTk5ZjU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-25T18:52:12Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-28T14:06:52Z"}, "message": "Return a `bool` from `in_any_value_of_ty`\n\nThe `Option` was only used for the promotion qualifiers, so we can use a\nsimpler API for validation.", "tree": {"sha": "22d145b61b89af83457f6e6c82d1d3e6006b6b97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d145b61b89af83457f6e6c82d1d3e6006b6b97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f5ea633d46abb9aedda22c96bc91889687a99f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5ea633d46abb9aedda22c96bc91889687a99f5", "html_url": "https://github.com/rust-lang/rust/commit/2f5ea633d46abb9aedda22c96bc91889687a99f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f5ea633d46abb9aedda22c96bc91889687a99f5/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406ac2e14b6ce374778370424e378a38bd13a4b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/406ac2e14b6ce374778370424e378a38bd13a4b7", "html_url": "https://github.com/rust-lang/rust/commit/406ac2e14b6ce374778370424e378a38bd13a4b7"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "ea25d6ff5b8d353974b93247ceebfde49a038e58", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2f5ea633d46abb9aedda22c96bc91889687a99f5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5ea633d46abb9aedda22c96bc91889687a99f5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=2f5ea633d46abb9aedda22c96bc91889687a99f5", "patch": "@@ -29,16 +29,8 @@ pub trait Qualif {\n     const IS_CLEARED_ON_MOVE: bool = false;\n \n     /// Return the qualification that is (conservatively) correct for any value\n-    /// of the type, or `None` if the qualification is not value/type-based.\n-    fn in_any_value_of_ty(_cx: &ConstCx<'_, 'tcx>, _ty: Ty<'tcx>) -> Option<bool> {\n-        None\n-    }\n-\n-    /// Return a mask for the qualification, given a type. This is `false` iff\n-    /// no value of that type can have the qualification.\n-    fn mask_for_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-        Self::in_any_value_of_ty(cx, ty).unwrap_or(true)\n-    }\n+    /// of the type.\n+    fn in_any_value_of_ty(_cx: &ConstCx<'_, 'tcx>, _ty: Ty<'tcx>) -> bool;\n \n     fn in_static(_cx: &ConstCx<'_, 'tcx>, _static: &Static<'tcx>) -> bool {\n         // FIXME(eddyb) should we do anything here for value properties?\n@@ -55,7 +47,7 @@ pub trait Qualif {\n                 base: place.base,\n                 projection: proj_base,\n             });\n-            let qualif = base_qualif && Self::mask_for_ty(\n+            let qualif = base_qualif && Self::in_any_value_of_ty(\n                 cx,\n                 Place::ty_from(place.base, proj_base, cx.body, cx.tcx)\n                     .projection_ty(cx.tcx, elem)\n@@ -126,7 +118,7 @@ pub trait Qualif {\n                 if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n-                        Self::in_any_value_of_ty(cx, constant.literal.ty).unwrap_or(false)\n+                        Self::in_any_value_of_ty(cx, constant.literal.ty)\n                     } else {\n                         let (bits, _) = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n \n@@ -135,7 +127,7 @@ pub trait Qualif {\n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n                         // with type parameters, take it into account.\n-                        qualif && Self::mask_for_ty(cx, constant.literal.ty)\n+                        qualif && Self::in_any_value_of_ty(cx, constant.literal.ty)\n                     }\n                 } else {\n                     false\n@@ -200,7 +192,7 @@ pub trait Qualif {\n         return_ty: Ty<'tcx>,\n     ) -> bool {\n         // Be conservative about the returned value of a const fn.\n-        Self::in_any_value_of_ty(cx, return_ty).unwrap_or(false)\n+        Self::in_any_value_of_ty(cx, return_ty)\n     }\n }\n \n@@ -214,8 +206,8 @@ pub struct HasMutInterior;\n impl Qualif for HasMutInterior {\n     const IDX: usize = 0;\n \n-    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> Option<bool> {\n-        Some(!ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP))\n+    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        !ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP)\n     }\n \n     fn in_rvalue(cx: &ConstCx<'_, 'tcx>, per_local: &BitSet<Local>, rvalue: &Rvalue<'tcx>) -> bool {\n@@ -249,7 +241,7 @@ impl Qualif for HasMutInterior {\n                 if let AggregateKind::Adt(def, ..) = **kind {\n                     if Some(def.did) == cx.tcx.lang_items().unsafe_cell_type() {\n                         let ty = rvalue.ty(cx.body, cx.tcx);\n-                        assert_eq!(Self::in_any_value_of_ty(cx, ty), Some(true));\n+                        assert_eq!(Self::in_any_value_of_ty(cx, ty), true);\n                         return true;\n                     }\n                 }\n@@ -272,8 +264,8 @@ impl Qualif for NeedsDrop {\n     const IDX: usize = 1;\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n-    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> Option<bool> {\n-        Some(ty.needs_drop(cx.tcx, cx.param_env))\n+    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        ty.needs_drop(cx.tcx, cx.param_env)\n     }\n \n     fn in_rvalue(cx: &ConstCx<'_, 'tcx>, per_local: &BitSet<Local>, rvalue: &Rvalue<'tcx>) -> bool {"}, {"sha": "2350382e66390a59fdac0a13df1dce30463aab5b", "filename": "src/librustc_mir/transform/check_consts/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f5ea633d46abb9aedda22c96bc91889687a99f5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5ea633d46abb9aedda22c96bc91889687a99f5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=2f5ea633d46abb9aedda22c96bc91889687a99f5", "patch": "@@ -43,7 +43,7 @@ where\n \n         for arg in self.item.body.args_iter() {\n             let arg_ty = self.item.body.local_decls[arg].ty;\n-            if Q::in_any_value_of_ty(self.item, arg_ty).unwrap() {\n+            if Q::in_any_value_of_ty(self.item, arg_ty) {\n                 self.qualifs_per_local.insert(arg);\n             }\n         }"}]}