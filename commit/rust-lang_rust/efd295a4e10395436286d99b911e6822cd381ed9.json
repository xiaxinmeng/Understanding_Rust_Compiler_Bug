{"sha": "efd295a4e10395436286d99b911e6822cd381ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDI5NWE0ZTEwMzk1NDM2Mjg2ZDk5YjkxMWU2ODIyY2QzODFlZDk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-28T07:56:39Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-28T08:42:17Z"}, "message": "Follow indent style config when formatting attrs", "tree": {"sha": "2734ae09c56e5a5d0fdea9c56b69bcb300d67208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2734ae09c56e5a5d0fdea9c56b69bcb300d67208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd295a4e10395436286d99b911e6822cd381ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd295a4e10395436286d99b911e6822cd381ed9", "html_url": "https://github.com/rust-lang/rust/commit/efd295a4e10395436286d99b911e6822cd381ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd295a4e10395436286d99b911e6822cd381ed9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c77708ff9a66724f28546c2de133461bdf0e1e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c77708ff9a66724f28546c2de133461bdf0e1e8d", "html_url": "https://github.com/rust-lang/rust/commit/c77708ff9a66724f28546c2de133461bdf0e1e8d"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "3c4cc390e78d67700480bc30232201fd4adae966", "filename": "src/attr.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/efd295a4e10395436286d99b911e6822cd381ed9/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd295a4e10395436286d99b911e6822cd381ed9/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=efd295a4e10395436286d99b911e6822cd381ed9", "patch": "@@ -10,6 +10,7 @@\n \n //! Format attributes and meta items.\n \n+use config::IndentStyle;\n use config::lists::*;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -202,11 +203,16 @@ impl Rewrite for ast::MetaItem {\n             ast::MetaItemKind::Word => String::from(&*self.name.as_str()),\n             ast::MetaItemKind::List(ref list) => {\n                 let name = self.name.as_str();\n-                // 1 = `(`, 2 = `]` and `)`\n-                let item_shape = shape\n-                    .visual_indent(0)\n-                    .shrink_left(name.len() + 1)\n-                    .and_then(|s| s.sub_width(2))?;\n+                let item_shape = match context.config.indent_style() {\n+                    IndentStyle::Block => shape\n+                        .block_indent(context.config.tab_spaces())\n+                        .with_max_width(context.config),\n+                    // 1 = `(`, 2 = `]` and `)`\n+                    IndentStyle::Visual => shape\n+                        .visual_indent(0)\n+                        .shrink_left(name.len() + 1)\n+                        .and_then(|s| s.sub_width(2))?,\n+                };\n                 let items = itemize_list(\n                     context.snippet_provider,\n                     list.iter(),\n@@ -240,7 +246,17 @@ impl Rewrite for ast::MetaItem {\n                     preserve_newline: false,\n                     config: context.config,\n                 };\n-                format!(\"{}({})\", name, write_list(&item_vec, &fmt)?)\n+                let item_str = write_list(&item_vec, &fmt)?;\n+                let one_line_budget = shape.offset_left(name.len())?.sub_width(2)?.width;\n+                if context.config.indent_style() == IndentStyle::Visual\n+                    || (!item_str.contains('\\n') && item_str.len() <= one_line_budget)\n+                {\n+                    format!(\"{}({})\", name, item_str)\n+                } else {\n+                    let indent = shape.indent.to_string_with_newline(context.config);\n+                    let nested_indent = item_shape.indent.to_string_with_newline(context.config);\n+                    format!(\"{}({}{}{})\", name, nested_indent, item_str, indent)\n+                }\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n                 let name = self.name.as_str();"}]}