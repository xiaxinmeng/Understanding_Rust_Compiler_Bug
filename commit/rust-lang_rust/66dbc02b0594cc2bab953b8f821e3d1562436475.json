{"sha": "66dbc02b0594cc2bab953b8f821e3d1562436475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZGJjMDJiMDU5NGNjMmJhYjk1M2I4ZjgyMWUzZDE1NjI0MzY0NzU=", "commit": {"author": {"name": "Daniele D'Orazio", "email": "d.dorazio96@gmail.com", "date": "2019-06-21T12:46:34Z"}, "committer": {"name": "Daniele D'Orazio", "email": "d.dorazio96@gmail.com", "date": "2019-06-21T12:46:34Z"}, "message": "more idiomatic code", "tree": {"sha": "14b06b30aa06765a5b4195fd6d286baf6c87c230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b06b30aa06765a5b4195fd6d286baf6c87c230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66dbc02b0594cc2bab953b8f821e3d1562436475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66dbc02b0594cc2bab953b8f821e3d1562436475", "html_url": "https://github.com/rust-lang/rust/commit/66dbc02b0594cc2bab953b8f821e3d1562436475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66dbc02b0594cc2bab953b8f821e3d1562436475/comments", "author": {"login": "d-dorazio", "id": 6960399, "node_id": "MDQ6VXNlcjY5NjAzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6960399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-dorazio", "html_url": "https://github.com/d-dorazio", "followers_url": "https://api.github.com/users/d-dorazio/followers", "following_url": "https://api.github.com/users/d-dorazio/following{/other_user}", "gists_url": "https://api.github.com/users/d-dorazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-dorazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-dorazio/subscriptions", "organizations_url": "https://api.github.com/users/d-dorazio/orgs", "repos_url": "https://api.github.com/users/d-dorazio/repos", "events_url": "https://api.github.com/users/d-dorazio/events{/privacy}", "received_events_url": "https://api.github.com/users/d-dorazio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "d-dorazio", "id": 6960399, "node_id": "MDQ6VXNlcjY5NjAzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6960399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-dorazio", "html_url": "https://github.com/d-dorazio", "followers_url": "https://api.github.com/users/d-dorazio/followers", "following_url": "https://api.github.com/users/d-dorazio/following{/other_user}", "gists_url": "https://api.github.com/users/d-dorazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-dorazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-dorazio/subscriptions", "organizations_url": "https://api.github.com/users/d-dorazio/orgs", "repos_url": "https://api.github.com/users/d-dorazio/repos", "events_url": "https://api.github.com/users/d-dorazio/events{/privacy}", "received_events_url": "https://api.github.com/users/d-dorazio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a78ae5287803ee8b29350e5e1f694166f3320c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a78ae5287803ee8b29350e5e1f694166f3320c", "html_url": "https://github.com/rust-lang/rust/commit/e1a78ae5287803ee8b29350e5e1f694166f3320c"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "2245b719c23bb0346064dad61cf80e10b3a9ede7", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/66dbc02b0594cc2bab953b8f821e3d1562436475/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dbc02b0594cc2bab953b8f821e3d1562436475/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=66dbc02b0594cc2bab953b8f821e3d1562436475", "patch": "@@ -86,7 +86,7 @@ declare_clippy_lint! {\n #[derive(PartialEq, Eq, Copy, Clone)]\n enum RetReplacement {\n     Empty,\n-    Unit\n+    Unit,\n }\n \n declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n@@ -105,13 +105,24 @@ impl Return {\n     }\n \n     // Check a the final expression in a block if it's a return.\n-    fn check_final_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr, span: Option<Span>, replacement: RetReplacement) {\n+    fn check_final_expr(\n+        &mut self,\n+        cx: &EarlyContext<'_>,\n+        expr: &ast::Expr,\n+        span: Option<Span>,\n+        replacement: RetReplacement,\n+    ) {\n         match expr.node {\n             // simple return is always \"bad\"\n             ast::ExprKind::Ret(ref inner) => {\n                 // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n                 if !expr.attrs.iter().any(attr_is_cfg) {\n-                    self.emit_return_lint(cx, span.expect(\"`else return` is not possible\"), inner.as_ref().map(|i| i.span), replacement);\n+                    self.emit_return_lint(\n+                        cx,\n+                        span.expect(\"`else return` is not possible\"),\n+                        inner.as_ref().map(|i| i.span),\n+                        replacement,\n+                    );\n                 }\n             },\n             // a whole block? check it!\n@@ -135,7 +146,13 @@ impl Return {\n         }\n     }\n \n-    fn emit_return_lint(&mut self, cx: &EarlyContext<'_>, ret_span: Span, inner_span: Option<Span>, replacement: RetReplacement) {\n+    fn emit_return_lint(\n+        &mut self,\n+        cx: &EarlyContext<'_>,\n+        ret_span: Span,\n+        inner_span: Option<Span>,\n+        replacement: RetReplacement,\n+    ) {\n         match inner_span {\n             Some(inner_span) => {\n                 if in_external_macro(cx.sess(), inner_span) || in_macro_or_desugar(inner_span) {\n@@ -144,39 +161,32 @@ impl Return {\n \n                 span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n                     if let Some(snippet) = snippet_opt(cx, inner_span) {\n+                        db.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n+                    }\n+                })\n+            },\n+            None => match replacement {\n+                RetReplacement::Empty => {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n                         db.span_suggestion(\n                             ret_span,\n-                            \"remove `return` as shown\",\n-                            snippet,\n+                            \"remove `return`\",\n+                            String::new(),\n                             Applicability::MachineApplicable,\n                         );\n-                    }\n-                })\n+                    });\n+                },\n+                RetReplacement::Unit => {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                        db.span_suggestion(\n+                            ret_span,\n+                            \"replace `return` with the unit type\",\n+                            \"()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                },\n             },\n-            None => {\n-                match replacement {\n-                    RetReplacement::Empty => {\n-                        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n-                            db.span_suggestion(\n-                                ret_span,\n-                                \"remove `return`\",\n-                                String::new(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        });\n-                    }\n-                    RetReplacement::Unit => {\n-                        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n-                            db.span_suggestion(\n-                                ret_span,\n-                                \"replace `return` with the unit type `()`\",\n-                                \"()\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        });\n-                    }\n-                }\n-            }\n         }\n     }\n "}, {"sha": "7858ecfba978720cd833472f5051a795fc767566", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66dbc02b0594cc2bab953b8f821e3d1562436475/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66dbc02b0594cc2bab953b8f821e3d1562436475/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=66dbc02b0594cc2bab953b8f821e3d1562436475", "patch": "@@ -2,51 +2,51 @@ error: unneeded return statement\n   --> $DIR/needless_return.rs:14:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:18:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:23:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:25:9\n    |\n LL |         return false;\n-   |         ^^^^^^^^^^^^^ help: remove `return` as shown: `false`\n+   |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:31:17\n    |\n LL |         true => return false,\n-   |                 ^^^^^^^^^^^^ help: remove `return` as shown: `false`\n+   |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:33:13\n    |\n LL |             return true;\n-   |             ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:40:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:42:16\n    |\n LL |     let _ = || return true;\n-   |                ^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n   --> $DIR/needless_return.rs:50:5\n@@ -70,7 +70,7 @@ error: unneeded return statement\n   --> $DIR/needless_return.rs:64:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with the unit type `()`: `()`\n+   |              ^^^^^^ help: replace `return` with the unit type: `()`\n \n error: aborting due to 12 previous errors\n "}]}