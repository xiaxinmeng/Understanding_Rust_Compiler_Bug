{"sha": "e3a739a115f897379f844926ba8f8cfd880641de", "node_id": "C_kwDOAAsO6NoAKGUzYTczOWExMTVmODk3Mzc5Zjg0NDkyNmJhOGY4Y2ZkODgwNjQxZGU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T08:51:19Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T08:51:19Z"}, "message": "s/eval_usize/eval_target_usize/ for clarity", "tree": {"sha": "96afc89f9291f6ac070324808fa67b078bc29a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96afc89f9291f6ac070324808fa67b078bc29a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a739a115f897379f844926ba8f8cfd880641de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a739a115f897379f844926ba8f8cfd880641de", "html_url": "https://github.com/rust-lang/rust/commit/e3a739a115f897379f844926ba8f8cfd880641de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a739a115f897379f844926ba8f8cfd880641de/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "html_url": "https://github.com/rust-lang/rust/commit/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c384172fbde83abc95a834027334aded88aba190", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n             if let Some(range) = higher::Range::hir(index) {\n                 // Ranged indexes, i.e., &x[n..m], &x[n..], &x[..n] and &x[..]\n                 if let ty::Array(_, s) = ty.kind() {\n-                    let size: u128 = if let Some(size) = s.try_eval_usize(cx.tcx, cx.param_env) {\n+                    let size: u128 = if let Some(size) = s.try_eval_target_usize(cx.tcx, cx.param_env) {\n                         size.into()\n                     } else {\n                         return;"}, {"sha": "151c7f1d5d254d8d33a0c0a702b6220be399d43f", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -68,7 +68,7 @@ fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.kind() {\n         ty::Array(_, n) => n\n-            .try_eval_usize(cx.tcx, cx.param_env)\n+            .try_eval_target_usize(cx.tcx, cx.param_env)\n             .map_or(false, |val| (0..=32).contains(&val)),\n         _ => false,\n     }"}, {"sha": "5c317c2a5bbb6b115a5668897d6db85f7616596c", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -211,7 +211,7 @@ fn is_end_eq_array_len<'tcx>(\n         if let ExprKind::Lit(ref lit) = end.kind;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n         if let ty::Array(_, arr_len_const) = indexed_ty.kind();\n-        if let Some(arr_len) = arr_len_const.try_eval_usize(cx.tcx, cx.param_env);\n+        if let Some(arr_len) = arr_len_const.try_eval_target_usize(cx.tcx, cx.param_env);\n         then {\n             return match limits {\n                 ast::RangeLimits::Closed => end_int + 1 >= arr_len.into(),"}, {"sha": "d50346c166ae0a2861304adb5df6ef15f1cef799", "filename": "clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -22,7 +22,7 @@ pub(super) fn derefs_to_slice<'tcx>(\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::Vec),\n-            ty::Array(_, size) => size.try_eval_usize(cx.tcx, cx.param_env).is_some(),\n+            ty::Array(_, size) => size.try_eval_target_usize(cx.tcx, cx.param_env).is_some(),\n             ty::Ref(_, inner, _) => may_slice(cx, *inner),\n             _ => false,\n         }"}, {"sha": "3cc765108d7ccdba8c4679e7631efdbaff99635b", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -166,7 +166,7 @@ impl MutableKeyType {\n             Ref(_, inner_ty, mutbl) => mutbl == hir::Mutability::Mut || self.is_interior_mutable_type(cx, inner_ty),\n             Slice(inner_ty) => self.is_interior_mutable_type(cx, inner_ty),\n             Array(inner_ty, size) => {\n-                size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n+                size.try_eval_target_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n                     && self.is_interior_mutable_type(cx, inner_ty)\n             },\n             Tuple(fields) => fields.iter().any(|ty| self.is_interior_mutable_type(cx, ty)),"}, {"sha": "1382c1a40da2417f21c747d71addff0b5fa10ed4", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -62,7 +62,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n \n         // Then check if that that array zero-sized\n         let length = Const::from_anon_const(cx.tcx, length.def_id);\n-        let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+        let length = length.try_eval_target_usize(cx.tcx, cx.param_env);\n         if let Some(length) = length;\n         then {\n             length == 0"}, {"sha": "9d812fbdcc37e8f7c8e79fdc5808b03e6036f55f", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n             ExprKind::Tup(tup) => self.multi(tup).map(Constant::Tuple),\n             ExprKind::Repeat(value, _) => {\n                 let n = match self.typeck_results.expr_ty(e).kind() {\n-                    ty::Array(_, n) => n.try_eval_usize(self.lcx.tcx, self.lcx.param_env)?,\n+                    ty::Array(_, n) => n.try_eval_target_usize(self.lcx.tcx, self.lcx.param_env)?,\n                     _ => span_bug!(e.span, \"typeck error\"),\n                 };\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n))"}, {"sha": "0d763a2c5cf6b33f41b81b7d240e91b0b1b3285c", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a739a115f897379f844926ba8f8cfd880641de/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a739a115f897379f844926ba8f8cfd880641de/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=e3a739a115f897379f844926ba8f8cfd880641de", "patch": "@@ -949,7 +949,7 @@ pub fn approx_ty_size<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> u64 {\n         (Ok(size), _) => size,\n         (Err(_), ty::Tuple(list)) => list.as_substs().types().map(|t| approx_ty_size(cx, t)).sum(),\n         (Err(_), ty::Array(t, n)) => {\n-            n.try_eval_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n+            n.try_eval_target_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n         },\n         (Err(_), ty::Adt(def, subst)) if def.is_struct() => def\n             .variants()"}]}