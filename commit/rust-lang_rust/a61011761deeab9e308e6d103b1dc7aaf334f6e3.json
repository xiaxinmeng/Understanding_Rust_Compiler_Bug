{"sha": "a61011761deeab9e308e6d103b1dc7aaf334f6e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MTAxMTc2MWRlZWFiOWUzMDhlNmQxMDNiMWRjN2FhZjMzNGY2ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-08T14:05:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-08T14:05:06Z"}, "message": "Auto merge of #41055 - Archytaus:compile-fail/const-match-pattern-arm, r=arielb1\n\nFixed ICEs with pattern matching in const expression\n\nFixed 2 ICEs with when pattern matching inside a constant expression.\n\nBoth of these ICEs now resolve to an appropriate compiler error.\n\n1. ICE was caused by a compiler bug to implement discriminant const qualify.\n\n    I removed this intentionally thrown bug and changed it to a FIXME as the unimplemented expression type is handled as a compiler error elsewhere.\n\n2. ICE was caused during a drop check when checking if a variable lifetime outlives the current scope if there was no parent scope .\n\n    I've changed it to stop checking if there is no parent scope for the current scope. It is valid syntax for a const variable to be assigned a match expression with no enclosing scope.\n\n    The ICE seemed to mainly be used as a defensive check for bugs elsewhere.\n\nFixes #38199.\nFixes #31577.\nFixes #29093.\nFixes #40012.", "tree": {"sha": "ad81d56b54b321b5afb8f9aa29e593f2cd13b351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad81d56b54b321b5afb8f9aa29e593f2cd13b351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61011761deeab9e308e6d103b1dc7aaf334f6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61011761deeab9e308e6d103b1dc7aaf334f6e3", "html_url": "https://github.com/rust-lang/rust/commit/a61011761deeab9e308e6d103b1dc7aaf334f6e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61011761deeab9e308e6d103b1dc7aaf334f6e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe39e94d6cd6eba00b3aadf323b3f4d029aad7eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe39e94d6cd6eba00b3aadf323b3f4d029aad7eb", "html_url": "https://github.com/rust-lang/rust/commit/fe39e94d6cd6eba00b3aadf323b3f4d029aad7eb"}, {"sha": "c9932b395ada3c367aea5e79645c10657262ea6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9932b395ada3c367aea5e79645c10657262ea6f", "html_url": "https://github.com/rust-lang/rust/commit/c9932b395ada3c367aea5e79645c10657262ea6f"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "8eabe92fb98c005a7a4beec26e456b02e9791f47", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a61011761deeab9e308e6d103b1dc7aaf334f6e3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61011761deeab9e308e6d103b1dc7aaf334f6e3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a61011761deeab9e308e6d103b1dc7aaf334f6e3", "patch": "@@ -603,7 +603,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n             Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n             Rvalue::Cast(CastKind::ClosureFnPointer, ..) |\n-            Rvalue::Cast(CastKind::Unsize, ..) => {}\n+            Rvalue::Cast(CastKind::Unsize, ..) |\n+            Rvalue::Discriminant(..) => {}\n \n             Rvalue::Len(_) => {\n                 // Static lvalues in consts would have errored already,\n@@ -721,14 +722,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n             }\n \n-            Rvalue::Discriminant(..) => {\n-                // FIXME discriminant\n-                self.add(Qualif::NOT_CONST);\n-                if self.mode != Mode::Fn {\n-                    bug!(\"implement discriminant const qualify\");\n-                }\n-            }\n-\n             Rvalue::Box(_) => {\n                 self.add(Qualif::NOT_CONST);\n                 if self.mode != Mode::Fn {"}, {"sha": "9f41373dab1b74ec2cd3b0ae858567818a17cceb", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a61011761deeab9e308e6d103b1dc7aaf334f6e3/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61011761deeab9e308e6d103b1dc7aaf334f6e3/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=a61011761deeab9e308e6d103b1dc7aaf334f6e3", "patch": "@@ -278,9 +278,12 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n     debug!(\"check_safety_of_destructor_if_necessary typ: {:?} scope: {:?}\",\n            typ, scope);\n \n-    let parent_scope = rcx.tcx.region_maps.opt_encl_scope(scope).unwrap_or_else(|| {\n-        span_bug!(span, \"no enclosing scope found for scope: {:?}\", scope)\n-    });\n+\n+    let parent_scope = match rcx.tcx.region_maps.opt_encl_scope(scope) {\n+      Some(parent_scope) => parent_scope,\n+      // If no enclosing scope, then it must be the root scope which cannot be outlived.\n+      None => return\n+    };\n \n     let result = iterate_over_potentially_unsafe_regions_in_type(\n         &mut DropckContext {"}, {"sha": "452aa87d6ba56ecc1706b92157ed7b069d1f0fae", "filename": "src/test/compile-fail/const-match-pattern-arm.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a61011761deeab9e308e6d103b1dc7aaf334f6e3/src%2Ftest%2Fcompile-fail%2Fconst-match-pattern-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61011761deeab9e308e6d103b1dc7aaf334f6e3/src%2Ftest%2Fcompile-fail%2Fconst-match-pattern-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-match-pattern-arm.rs?ref=a61011761deeab9e308e6d103b1dc7aaf334f6e3", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const x: bool = match Some(true) {\n+    Some(value) => true,\n+    //~^ ERROR: constant contains unimplemented expression type [E0019]\n+    _ => false\n+};\n+\n+const y: bool = {\n+    match Some(true) {\n+        Some(value) => true,\n+        //~^ ERROR: constant contains unimplemented expression type [E0019]\n+        _ => false\n+    }\n+};\n+\n+fn main() {}"}]}