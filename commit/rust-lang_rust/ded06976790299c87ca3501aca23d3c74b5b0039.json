{"sha": "ded06976790299c87ca3501aca23d3c74b5b0039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZDA2OTc2NzkwMjk5Yzg3Y2EzNTAxYWNhMjNkM2M3NGI1YjAwMzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-06T16:35:50Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-04-29T05:25:57Z"}, "message": "Return RootPlace in is_mutable", "tree": {"sha": "51888e9f86f80c975a8c0331139a81f0acafce53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51888e9f86f80c975a8c0331139a81f0acafce53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded06976790299c87ca3501aca23d3c74b5b0039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded06976790299c87ca3501aca23d3c74b5b0039", "html_url": "https://github.com/rust-lang/rust/commit/ded06976790299c87ca3501aca23d3c74b5b0039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded06976790299c87ca3501aca23d3c74b5b0039/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c607eaf949a0ba9c365dd00e18d948418cfe957", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c607eaf949a0ba9c365dd00e18d948418cfe957", "html_url": "https://github.com/rust-lang/rust/commit/8c607eaf949a0ba9c365dd00e18d948418cfe957"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "f2b0ec58e7823449f3b4bfd6029b5e1a3d79f8e6", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ded06976790299c87ca3501aca23d3c74b5b0039/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded06976790299c87ca3501aca23d3c74b5b0039/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ded06976790299c87ca3501aca23d3c74b5b0039", "patch": "@@ -1150,13 +1150,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // in order to populate our used_mut set.\n                 if let AggregateKind::Closure(def_id, _) = &**aggregate_kind {\n                     let BorrowCheckResult { used_mut_upvars, .. } = self.tcx.mir_borrowck(*def_id);\n+                    debug!(\"{:?} used_mut_upvars={:?}\", def_id, used_mut_upvars);\n                     for field in used_mut_upvars {\n                         match operands[field.index()] {\n                             Operand::Move(Place::Local(local)) => {\n                                 self.used_mut.insert(local);\n                             }\n-                            Operand::Move(Place::Projection(ref proj)) => {\n-                                if let Some(field) = self.is_upvar_field_projection(&proj.base) {\n+                            Operand::Move(ref place @ Place::Projection(_)) => {\n+                                if let Some(field) = self.is_upvar_field_projection(place) {\n                                     self.used_mut_upvars.push(field);\n                                 }\n                             }\n@@ -1697,8 +1698,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             }\n                         }\n                     }\n-                    Ok((Place::Projection(ref proj), _mut_allowed)) => {\n-                        if let Some(field) = self.is_upvar_field_projection(&proj.base) {\n+                    Ok((Place::Projection(_), _mut_allowed)) => {\n+                        if let Some(field) = self.is_upvar_field_projection(&place) {\n                             self.used_mut_upvars.push(field);\n                         }\n                     }\n@@ -1734,8 +1735,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             }\n                         }\n                     }\n-                    Ok((Place::Projection(ref proj), _mut_allowed)) => {\n-                        if let Some(field) = self.is_upvar_field_projection(&proj.base) {\n+                    Ok((Place::Projection(_), _mut_allowed)) => {\n+                        if let Some(field) = self.is_upvar_field_projection(&place) {\n                             self.used_mut_upvars.push(field);\n                         }\n                     }\n@@ -1930,7 +1931,34 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 }\n                                 (Mutability::Not, LocalMutationIsAllowed::Yes)\n                                 | (Mutability::Mut, _) => {\n-                                    self.is_mutable(&proj.base, is_local_mutation_allowed)\n+                                    // Subtle: this is an upvar\n+                                    // reference, so it looks like\n+                                    // `self.foo` -- we want to double\n+                                    // check that the context `*self`\n+                                    // is mutable (i.e., this is not a\n+                                    // `Fn` closure).  But if that\n+                                    // check succeeds, we want to\n+                                    // *blame* the mutability on\n+                                    // `place` (that is,\n+                                    // `self.foo`). This is used to\n+                                    // propagate the info about\n+                                    // whether mutability declarations\n+                                    // are used outwards, so that we register\n+                                    // the outer variable as mutable. Otherwise a\n+                                    // test like this fails to record the `mut`\n+                                    // as needed:\n+                                    //\n+                                    // ```\n+                                    // fn foo<F: FnOnce()>(_f: F) { }\n+                                    // fn main() {\n+                                    //     let var = Vec::new();\n+                                    //     foo(move || {\n+                                    //         var.push(1);\n+                                    //     });\n+                                    // }\n+                                    // ```\n+                                    let _ = self.is_mutable(&proj.base, is_local_mutation_allowed)?;\n+                                    Ok((place, is_local_mutation_allowed))\n                                 }\n                             }\n                         } else {"}]}