{"sha": "80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "node_id": "C_kwDOAAsO6NoAKDgwZGY0YWI0MDNjYmRhZjBmYzdhODMwMWQ4NDkwZWU2MGQ3MDYzYmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-03T18:47:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-03T18:47:23Z"}, "message": "Rollup merge of #110791 - compiler-errors:negative-bounds, r=oli-obk\n\nImplement negative bounds for internal testing purposes\n\nImplements partial support the `!` negative polarity on trait bounds. This is incomplete, but should allow us to at least be able to play with the feature.\n\nNot even gonna consider them as a public-facing feature, but I'm implementing them because would've been nice to have in UI tests, for example in #110671.", "tree": {"sha": "9c49bfac0499b037a7b2e35ea6c374962a1e2249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c49bfac0499b037a7b2e35ea6c374962a1e2249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUqw7CRBK7hj4Ov3rIwAAQ20IAIpBkhnIsg1erWn4mSyA0tZ2\n4J7/Vq6o0bvLDON1cRB0CvdtMdDpRYRz0sms4wDEB0nI0VyEBys5ktzSngm0Nr+D\nvVKZviXjBnNtaONGu53v1F5JtcbQ8mFI/HE7M+vRAjfMpn5QnAw3PmUUgiN203bo\n3Ni6tMdP4YgaOzOoXwqjgCAxzpiNuv+3Rf+yH7o0+m4gOsuG350yYCBuq3Nua8UT\nv59xipDFdJXbkwMibDQu3zNnTTLj2pPGvQ892ME15FqXgzgo33xWDuweCTjkoILv\n0hbLSXnl5leIKXmSdj7NRboVQznjN9UtqSJkieaF1VM3KQbvvdIsf/ghNDCVzJ4=\n=C6bA\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c49bfac0499b037a7b2e35ea6c374962a1e2249\nparent 32f3ddb902e03b7ac23de3e677ff27bc97eff0d6\nparent 6fca051b76342f8c21ec85fb9a77103b7c05adb9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683139643 +0530\ncommitter GitHub <noreply@github.com> 1683139643 +0530\n\nRollup merge of #110791 - compiler-errors:negative-bounds, r=oli-obk\n\nImplement negative bounds for internal testing purposes\n\nImplements partial support the `!` negative polarity on trait bounds. This is incomplete, but should allow us to at least be able to play with the feature.\n\nNot even gonna consider them as a public-facing feature, but I'm implementing them because would've been nice to have in UI tests, for example in #110671.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "html_url": "https://github.com/rust-lang/rust/commit/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "html_url": "https://github.com/rust-lang/rust/commit/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6"}, {"sha": "6fca051b76342f8c21ec85fb9a77103b7c05adb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fca051b76342f8c21ec85fb9a77103b7c05adb9", "html_url": "https://github.com/rust-lang/rust/commit/6fca051b76342f8c21ec85fb9a77103b7c05adb9"}], "stats": {"total": 663, "additions": 478, "deletions": 185}, "files": [{"sha": "b5dba0713bfa07cc2b76d4023b6decfb7473badd", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -287,12 +287,20 @@ pub enum TraitBoundModifier {\n     /// No modifiers\n     None,\n \n+    /// `!Trait`\n+    Negative,\n+\n     /// `?Trait`\n     Maybe,\n \n     /// `~const Trait`\n     MaybeConst,\n \n+    /// `~const !Trait`\n+    //\n+    // This parses but will be rejected during AST validation.\n+    MaybeConstNegative,\n+\n     /// `~const ?Trait`\n     //\n     // This parses but will be rejected during AST validation.\n@@ -2446,6 +2454,16 @@ impl fmt::Debug for ImplPolarity {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]\n+pub enum BoundPolarity {\n+    /// `Type: Trait`\n+    Positive,\n+    /// `Type: !Trait`\n+    Negative(Span),\n+    /// `Type: ?Trait`\n+    Maybe(Span),\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum FnRetTy {\n     /// Returns type is not specified."}, {"sha": "4100efb6eb330a2aceea99a53536c9b00f6cc189", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1368,13 +1368,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         this.arena.alloc_from_iter(bounds.iter().filter_map(|bound| match bound {\n                             GenericBound::Trait(\n                                 ty,\n-                                TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n+                                TraitBoundModifier::None\n+                                | TraitBoundModifier::MaybeConst\n+                                | TraitBoundModifier::Negative,\n                             ) => Some(this.lower_poly_trait_ref(ty, itctx)),\n                             // `~const ?Bound` will cause an error during AST validation\n                             // anyways, so treat it like `?Bound` as compilation proceeds.\n                             GenericBound::Trait(\n                                 _,\n-                                TraitBoundModifier::Maybe | TraitBoundModifier::MaybeConstMaybe,\n+                                TraitBoundModifier::Maybe\n+                                | TraitBoundModifier::MaybeConstMaybe\n+                                | TraitBoundModifier::MaybeConstNegative,\n                             ) => None,\n                             GenericBound::Outlives(lifetime) => {\n                                 if lifetime_bound.is_none() {\n@@ -2421,11 +2425,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TraitBoundModifier::None => hir::TraitBoundModifier::None,\n             TraitBoundModifier::MaybeConst => hir::TraitBoundModifier::MaybeConst,\n \n+            TraitBoundModifier::Negative => {\n+                if self.tcx.features().negative_bounds {\n+                    hir::TraitBoundModifier::Negative\n+                } else {\n+                    hir::TraitBoundModifier::None\n+                }\n+            }\n+\n             // `MaybeConstMaybe` will cause an error during AST validation, but we need to pick a\n             // placeholder for compilation to proceed.\n             TraitBoundModifier::MaybeConstMaybe | TraitBoundModifier::Maybe => {\n                 hir::TraitBoundModifier::Maybe\n             }\n+            TraitBoundModifier::MaybeConstNegative => hir::TraitBoundModifier::MaybeConst,\n         }\n     }\n "}, {"sha": "2f413789e7704630e13c4ad316d104a3554d3d9c", "filename": "compiler/rustc_ast_passes/messages.ftl", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fmessages.ftl?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -206,7 +206,7 @@ ast_passes_tilde_const_disallowed = `~const` is not allowed here\n     .closure = closures cannot have `~const` trait bounds\n     .function = this function is not `const`, so it cannot have `~const` trait bounds\n \n-ast_passes_optional_const_exclusive = `~const` and `?` are mutually exclusive\n+ast_passes_optional_const_exclusive = `~const` and `{$modifier}` are mutually exclusive\n \n ast_passes_const_and_async = functions cannot be both `const` and `async`\n     .const = `const` because of this\n@@ -235,3 +235,9 @@ ast_passes_incompatible_features = `{$f1}` and `{$f2}` are incompatible, using t\n     .help = remove one of these features\n \n ast_passes_show_span = {$msg}\n+\n+ast_passes_negative_bound_not_supported =\n+    negative bounds are not supported\n+\n+ast_passes_constraint_on_negative_bound =\n+    associated type constraints not allowed on negative bounds"}, {"sha": "bf43bbdbbeebae89abbf4c687b25c046f17767f3", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1168,12 +1168,27 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     });\n                 }\n                 (_, TraitBoundModifier::MaybeConstMaybe) => {\n-                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span()});\n+                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span(), modifier: \"?\" });\n+                }\n+                (_, TraitBoundModifier::MaybeConstNegative) => {\n+                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span(), modifier: \"!\" });\n                 }\n                 _ => {}\n             }\n         }\n \n+        // Negative trait bounds are not allowed to have associated constraints\n+        if let GenericBound::Trait(trait_ref, TraitBoundModifier::Negative) = bound\n+            && let Some(segment) = trait_ref.trait_ref.path.segments.last()\n+            && let Some(ast::GenericArgs::AngleBracketed(args)) = segment.args.as_deref()\n+        {\n+            for arg in &args.args {\n+                if let ast::AngleBracketedArg::Constraint(constraint) = arg {\n+                    self.err_handler().emit_err(errors::ConstraintOnNegativeBound { span: constraint.span });\n+                }\n+            }\n+        }\n+\n         visit::walk_param_bound(self, bound)\n     }\n "}, {"sha": "82fe2a21d0876910bcb72fc82e951cb8715a5bfd", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -567,6 +567,7 @@ pub enum TildeConstReason {\n pub struct OptionalConstExclusive {\n     #[primary_span]\n     pub span: Span,\n+    pub modifier: &'static str,\n }\n \n #[derive(Diagnostic)]\n@@ -693,3 +694,17 @@ pub struct ShowSpan {\n     pub span: Span,\n     pub msg: &'static str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(ast_passes_negative_bound_not_supported)]\n+pub struct NegativeBoundUnsupported {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ast_passes_constraint_on_negative_bound)]\n+pub struct ConstraintOnNegativeBound {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "a46fe9e898fc6bf5f33089091bc7f9110042d73d", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -603,6 +603,12 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n \n+    if !visitor.features.negative_bounds {\n+        for &span in spans.get(&sym::negative_bounds).iter().copied().flatten() {\n+            sess.emit_err(errors::NegativeBoundUnsupported { span });\n+        }\n+    }\n+\n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded).\n     // We emit an early future-incompatible warning for these."}, {"sha": "ae346510ccc8220340de68a5b95b9fb248c16f62", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1570,12 +1570,19 @@ impl<'a> State<'a> {\n                 GenericBound::Trait(tref, modifier) => {\n                     match modifier {\n                         TraitBoundModifier::None => {}\n+                        TraitBoundModifier::Negative => {\n+                            self.word(\"!\");\n+                        }\n                         TraitBoundModifier::Maybe => {\n                             self.word(\"?\");\n                         }\n                         TraitBoundModifier::MaybeConst => {\n                             self.word_space(\"~const\");\n                         }\n+                        TraitBoundModifier::MaybeConstNegative => {\n+                            self.word_space(\"~const\");\n+                            self.word(\"!\");\n+                        }\n                         TraitBoundModifier::MaybeConstMaybe => {\n                             self.word_space(\"~const\");\n                             self.word(\"?\");"}, {"sha": "294ed18a239f57194f8ad4ad152b6aaa91647917", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -164,6 +164,8 @@ declare_features! (\n     (active, link_cfg, \"1.14.0\", None, None),\n     /// Allows the `multiple_supertrait_upcastable` lint.\n     (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n+    /// Allow negative trait bounds. This is an internal-only feature for testing the trait solver!\n+    (incomplete, negative_bounds, \"CURRENT_RUSTC_VERSION\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items."}, {"sha": "38cd5865cc3266218a16dd82fbaf526ef1b153a5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -435,6 +435,7 @@ pub enum GenericArgsParentheses {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum TraitBoundModifier {\n     None,\n+    Negative,\n     Maybe,\n     MaybeConst,\n }"}, {"sha": "a6114e27030d35bc5e87b528c5647e0258752d40", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -665,6 +665,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         binding_span: Option<Span>,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n         trait_ref_span: Span,\n@@ -696,10 +697,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ty::Binder::bind_with_vars(tcx.mk_trait_ref(trait_def_id, substs), bound_vars);\n \n         debug!(?poly_trait_ref, ?assoc_bindings);\n-        bounds.push_trait_bound(tcx, poly_trait_ref, span, constness);\n+        bounds.push_trait_bound(tcx, poly_trait_ref, span, constness, polarity);\n \n         let mut dup_bindings = FxHashMap::default();\n         for binding in &assoc_bindings {\n+            // Don't register additional associated type bounds for negative bounds,\n+            // since we should have emitten an error for them earlier, and they will\n+            // not be well-formed!\n+            if polarity == ty::ImplPolarity::Negative {\n+                self.tcx()\n+                    .sess\n+                    .delay_span_bug(binding.span, \"negative trait bounds should not have bindings\");\n+                continue;\n+            }\n+\n             // Specify type to assert that error was already reported in `Err` case.\n             let _: Result<_, ErrorGuaranteed> = self.add_predicates_for_ast_type_binding(\n                 hir_id,\n@@ -711,6 +722,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 binding_span.unwrap_or(binding.span),\n                 constness,\n                 only_self_bounds,\n+                polarity,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -743,6 +755,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_ref: &hir::TraitRef<'_>,\n         span: Span,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n@@ -764,6 +777,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             binding_span,\n             constness,\n+            polarity,\n             bounds,\n             speculative,\n             trait_ref_span,\n@@ -799,6 +813,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             binding_span,\n             constness,\n+            ty::ImplPolarity::Positive,\n             bounds,\n             speculative,\n             trait_ref_span,\n@@ -961,16 +976,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for ast_bound in ast_bounds {\n             match ast_bound {\n                 hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n-                    let constness = match modifier {\n-                        hir::TraitBoundModifier::MaybeConst => ty::BoundConstness::ConstIfConst,\n-                        hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n+                    let (constness, polarity) = match modifier {\n+                        hir::TraitBoundModifier::MaybeConst => {\n+                            (ty::BoundConstness::ConstIfConst, ty::ImplPolarity::Positive)\n+                        }\n+                        hir::TraitBoundModifier::None => {\n+                            (ty::BoundConstness::NotConst, ty::ImplPolarity::Positive)\n+                        }\n+                        hir::TraitBoundModifier::Negative => {\n+                            (ty::BoundConstness::NotConst, ty::ImplPolarity::Negative)\n+                        }\n                         hir::TraitBoundModifier::Maybe => continue,\n                     };\n-\n                     let _ = self.instantiate_poly_trait_ref(\n                         &poly_trait_ref.trait_ref,\n                         poly_trait_ref.span,\n                         constness,\n+                        polarity,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -1088,6 +1110,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         path_span: Span,\n         constness: ty::BoundConstness,\n         only_self_bounds: OnlySelfBounds,\n+        polarity: ty::ImplPolarity,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1438,6 +1461,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &trait_bound.trait_ref,\n                 trait_bound.span,\n                 ty::BoundConstness::NotConst,\n+                ty::ImplPolarity::Positive,\n                 dummy_self,\n                 &mut bounds,\n                 false,"}, {"sha": "7156fea8f896c6c3143e54996730f3e904d11aca", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -42,8 +42,14 @@ impl<'tcx> Bounds<'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         span: Span,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n     ) {\n-        self.predicates.push((trait_ref.with_constness(constness).to_predicate(tcx), span));\n+        self.predicates.push((\n+            trait_ref\n+                .map_bound(|trait_ref| ty::TraitPredicate { trait_ref, constness, polarity })\n+                .to_predicate(tcx),\n+            span,\n+        ));\n     }\n \n     pub fn push_projection_bound("}, {"sha": "3fe34f23aef421023b76408fa3c5be48c2dce625", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -528,6 +528,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         hir_trait,\n         DUMMY_SP,\n         ty::BoundConstness::NotConst,\n+        ty::ImplPolarity::Positive,\n         self_ty,\n         &mut bounds,\n         true,"}, {"sha": "f54e5e5e56ffc007defd6c315b1ef2ea1224a8c4", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -200,6 +200,10 @@ impl<'tcx, O: Elaboratable<'tcx>> Elaborator<'tcx, O> {\n         let bound_predicate = elaboratable.predicate().kind();\n         match bound_predicate.skip_binder() {\n             ty::PredicateKind::Clause(ty::Clause::Trait(data)) => {\n+                // Negative trait bounds do not imply any supertrait bounds\n+                if data.polarity == ty::ImplPolarity::Negative {\n+                    return;\n+                }\n                 // Get predicates implied by the trait, or only super predicates if we only care about self predicates.\n                 let predicates = if self.only_self {\n                     tcx.super_predicates_of(data.def_id())"}, {"sha": "6ac9f95045069d4bc58027a6c864da71b8436f59", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -2816,6 +2816,9 @@ define_print_and_forward_display! {\n         if let ty::BoundConstness::ConstIfConst = self.constness && cx.tcx().features().const_trait_impl {\n             p!(\"~const \");\n         }\n+        if let ty::ImplPolarity::Negative = self.polarity {\n+            p!(\"!\");\n+        }\n         p!(print(self.trait_ref.print_only_trait_path()))\n     }\n "}, {"sha": "cd296dca133f544587d334e5831e98540b7a17ee", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -615,13 +615,6 @@ parse_invalid_dyn_keyword = invalid `dyn` keyword\n     .help = `dyn` is only needed at the start of a trait `+`-separated list\n     .suggestion = remove this keyword\n \n-parse_negative_bounds_not_supported = negative bounds are not supported\n-    .label = negative bounds are not supported\n-    .suggestion = {$num_bounds ->\n-            [one] remove the bound\n-           *[other] remove the bounds\n-        }\n-\n parse_help_set_edition_cargo = set `edition = \"{$edition}\"` in `Cargo.toml`\n parse_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n parse_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide\n@@ -772,7 +765,8 @@ parse_assoc_lifetime = associated lifetimes are not supported\n \n parse_tilde_const_lifetime = `~const` may only modify trait bounds, not lifetime bounds\n \n-parse_maybe_lifetime = `?` may only modify trait bounds, not lifetime bounds\n+parse_modifier_lifetime = `{$sigil}` may only modify trait bounds, not lifetime bounds\n+    .suggestion = remove the `{$sigil}`\n \n parse_parenthesized_lifetime = parenthesized lifetime bounds are not supported\n     .suggestion = remove the parentheses"}, {"sha": "010a13aefa42033be37e5fc610090a9d9153e14a", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -2280,31 +2280,6 @@ pub(crate) struct InvalidDynKeyword {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(parse_negative_bounds_not_supported)]\n-pub(crate) struct NegativeBoundsNotSupported {\n-    #[primary_span]\n-    pub negative_bounds: Vec<Span>,\n-    #[label]\n-    pub last_span: Span,\n-    #[subdiagnostic]\n-    pub sub: Option<NegativeBoundsNotSupportedSugg>,\n-}\n-\n-#[derive(Subdiagnostic)]\n-#[suggestion(\n-    parse_suggestion,\n-    style = \"tool-only\",\n-    code = \"{fixed}\",\n-    applicability = \"machine-applicable\"\n-)]\n-pub(crate) struct NegativeBoundsNotSupportedSugg {\n-    #[primary_span]\n-    pub bound_list: Span,\n-    pub num_bounds: usize,\n-    pub fixed: String,\n-}\n-\n #[derive(Subdiagnostic)]\n pub enum HelpUseLatestEdition {\n     #[help(parse_help_set_edition_cargo)]\n@@ -2412,10 +2387,12 @@ pub(crate) struct TildeConstLifetime {\n }\n \n #[derive(Diagnostic)]\n-#[diag(parse_maybe_lifetime)]\n-pub(crate) struct MaybeLifetime {\n+#[diag(parse_modifier_lifetime)]\n+pub(crate) struct ModifierLifetime {\n     #[primary_span]\n+    #[suggestion(style = \"tool-only\", applicability = \"maybe-incorrect\", code = \"\")]\n     pub span: Span,\n+    pub sigil: &'static str,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "36883bd2172116585ea9ec4f74d5f6080ccd25e1", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1284,7 +1284,7 @@ impl<'a> Parser<'a> {\n         }\n \n         self.bump(); // `+`\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         let sum_span = ty.span.to(self.prev_token.span);\n \n         let sub = match &ty.kind {"}, {"sha": "e6d0f9fbc76d8702606940b621d55105d2bf4fda", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -78,7 +78,7 @@ impl<'a> Parser<'a> {\n                 }\n                 self.restore_snapshot(snapshot);\n             }\n-            self.parse_generic_bounds(colon_span)?\n+            self.parse_generic_bounds()?\n         } else {\n             Vec::new()\n         };\n@@ -419,7 +419,7 @@ impl<'a> Parser<'a> {\n         // or with mandatory equality sign and the second type.\n         let ty = self.parse_ty_for_where_clause()?;\n         if self.eat(&token::Colon) {\n-            let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n+            let bounds = self.parse_generic_bounds()?;\n             Ok(ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n                 span: lo.to(self.prev_token.span),\n                 bound_generic_params: lifetime_defs,"}, {"sha": "6ca88200dc51b7a44f8dde1dc1a14fcd66f0e0d1", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -788,11 +788,7 @@ impl<'a> Parser<'a> {\n         // Parse optional colon and supertrait bounds.\n         let had_colon = self.eat(&token::Colon);\n         let span_at_colon = self.prev_token.span;\n-        let bounds = if had_colon {\n-            self.parse_generic_bounds(Some(self.prev_token.span))?\n-        } else {\n-            Vec::new()\n-        };\n+        let bounds = if had_colon { self.parse_generic_bounds()? } else { Vec::new() };\n \n         let span_before_eq = self.prev_token.span;\n         if self.eat(&token::Eq) {\n@@ -802,7 +798,7 @@ impl<'a> Parser<'a> {\n                 self.sess.emit_err(errors::BoundsNotAllowedOnTraitAliases { span });\n             }\n \n-            let bounds = self.parse_generic_bounds(None)?;\n+            let bounds = self.parse_generic_bounds()?;\n             generics.where_clause = self.parse_where_clause()?;\n             self.expect_semi()?;\n \n@@ -883,7 +879,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds =\n-            if self.eat(&token::Colon) { self.parse_generic_bounds(None)? } else { Vec::new() };\n+            if self.eat(&token::Colon) { self.parse_generic_bounds()? } else { Vec::new() };\n         let before_where_clause = self.parse_where_clause()?;\n \n         let ty = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };"}, {"sha": "feb7e829caf685d5b24e98657d91e880959d11f0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -606,7 +606,7 @@ impl<'a> Parser<'a> {\n                     let kind = if self.eat(&token::Colon) {\n                         // Parse associated type constraint bound.\n \n-                        let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n+                        let bounds = self.parse_generic_bounds()?;\n                         AssocConstraintKind::Bound { bounds }\n                     } else if self.eat(&token::Eq) {\n                         self.parse_assoc_equality_term(ident, self.prev_token.span)?"}, {"sha": "a29b696aea83c5a86615c6c1e2bc527399b09981", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 46, "deletions": 79, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -3,8 +3,7 @@ use super::{Parser, PathStyle, TokenType};\n use crate::errors::{\n     self, DynAfterMut, ExpectedFnPathFoundFnKeyword, ExpectedMutOrConstInRawPointerType,\n     FnPointerCannotBeAsync, FnPointerCannotBeConst, FnPtrWithGenerics, FnPtrWithGenericsSugg,\n-    InvalidDynKeyword, LifetimeAfterMut, NeedPlusAfterTraitObjectLifetime,\n-    NegativeBoundsNotSupported, NegativeBoundsNotSupportedSugg, NestedCVariadicType,\n+    InvalidDynKeyword, LifetimeAfterMut, NeedPlusAfterTraitObjectLifetime, NestedCVariadicType,\n     ReturnTypesUseThinArrow,\n };\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n@@ -14,31 +13,34 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::util::case::Case;\n use rustc_ast::{\n-    self as ast, BareFnTy, FnRetTy, GenericBound, GenericBounds, GenericParam, Generics, Lifetime,\n-    MacCall, MutTy, Mutability, PolyTraitRef, TraitBoundModifier, TraitObjectSyntax, Ty, TyKind,\n+    self as ast, BareFnTy, BoundPolarity, FnRetTy, GenericBound, GenericBounds, GenericParam,\n+    Generics, Lifetime, MacCall, MutTy, Mutability, PolyTraitRef, TraitBoundModifier,\n+    TraitObjectSyntax, Ty, TyKind,\n };\n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n use thin_vec::{thin_vec, ThinVec};\n \n-/// Any `?` or `~const` modifiers that appear at the start of a bound.\n+/// Any `?`, `!`, or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n     /// `?Trait`.\n-    maybe: Option<Span>,\n+    bound_polarity: BoundPolarity,\n \n     /// `~const Trait`.\n     maybe_const: Option<Span>,\n }\n \n impl BoundModifiers {\n     fn to_trait_bound_modifier(&self) -> TraitBoundModifier {\n-        match (self.maybe, self.maybe_const) {\n-            (None, None) => TraitBoundModifier::None,\n-            (Some(_), None) => TraitBoundModifier::Maybe,\n-            (None, Some(_)) => TraitBoundModifier::MaybeConst,\n-            (Some(_), Some(_)) => TraitBoundModifier::MaybeConstMaybe,\n+        match (self.bound_polarity, self.maybe_const) {\n+            (BoundPolarity::Positive, None) => TraitBoundModifier::None,\n+            (BoundPolarity::Negative(_), None) => TraitBoundModifier::Negative,\n+            (BoundPolarity::Maybe(_), None) => TraitBoundModifier::Maybe,\n+            (BoundPolarity::Positive, Some(_)) => TraitBoundModifier::MaybeConst,\n+            (BoundPolarity::Negative(_), Some(_)) => TraitBoundModifier::MaybeConstNegative,\n+            (BoundPolarity::Maybe(_), Some(_)) => TraitBoundModifier::MaybeConstMaybe,\n         }\n     }\n }\n@@ -368,7 +370,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_bare_trait_object(&mut self, lo: Span, allow_plus: AllowPlus) -> PResult<'a, TyKind> {\n         let lt_no_plus = self.check_lifetime() && !self.look_ahead(1, |t| t.is_like_plus());\n-        let bounds = self.parse_generic_bounds_common(allow_plus, None)?;\n+        let bounds = self.parse_generic_bounds_common(allow_plus)?;\n         if lt_no_plus {\n             self.sess.emit_err(NeedPlusAfterTraitObjectLifetime { span: lo });\n         }\n@@ -395,7 +397,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, TyKind> {\n         if plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n-            bounds.append(&mut self.parse_generic_bounds(Some(self.prev_token.span))?);\n+            bounds.append(&mut self.parse_generic_bounds()?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n@@ -598,7 +600,7 @@ impl<'a> Parser<'a> {\n                 }\n             })\n         }\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds))\n     }\n@@ -629,7 +631,7 @@ impl<'a> Parser<'a> {\n         };\n \n         // Always parse bounds greedily for better error recovery.\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::TraitObject(bounds, syntax))\n     }\n@@ -660,23 +662,15 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn parse_generic_bounds(\n-        &mut self,\n-        colon_span: Option<Span>,\n-    ) -> PResult<'a, GenericBounds> {\n-        self.parse_generic_bounds_common(AllowPlus::Yes, colon_span)\n+    pub(super) fn parse_generic_bounds(&mut self) -> PResult<'a, GenericBounds> {\n+        self.parse_generic_bounds_common(AllowPlus::Yes)\n     }\n \n     /// Parses bounds of a type parameter `BOUND + BOUND + ...`, possibly with trailing `+`.\n     ///\n     /// See `parse_generic_bound` for the `BOUND` grammar.\n-    fn parse_generic_bounds_common(\n-        &mut self,\n-        allow_plus: AllowPlus,\n-        colon_span: Option<Span>,\n-    ) -> PResult<'a, GenericBounds> {\n+    fn parse_generic_bounds_common(&mut self, allow_plus: AllowPlus) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n-        let mut negative_bounds = Vec::new();\n \n         // In addition to looping while we find generic bounds:\n         // We continue even if we find a keyword. This is necessary for error recovery on,\n@@ -693,75 +687,35 @@ impl<'a> Parser<'a> {\n                 self.sess.emit_err(InvalidDynKeyword { span: self.token.span });\n                 self.bump();\n             }\n-            match self.parse_generic_bound()? {\n-                Ok(bound) => bounds.push(bound),\n-                Err(neg_sp) => negative_bounds.push(neg_sp),\n-            }\n+            bounds.push(self.parse_generic_bound()?);\n             if allow_plus == AllowPlus::No || !self.eat_plus() {\n                 break;\n             }\n         }\n \n-        if !negative_bounds.is_empty() {\n-            self.error_negative_bounds(colon_span, &bounds, negative_bounds);\n-        }\n-\n         Ok(bounds)\n     }\n \n     /// Can the current token begin a bound?\n     fn can_begin_bound(&mut self) -> bool {\n         // This needs to be synchronized with `TokenKind::can_begin_bound`.\n         self.check_path()\n-        || self.check_lifetime()\n-        || self.check(&token::Not) // Used for error reporting only.\n-        || self.check(&token::Question)\n-        || self.check(&token::Tilde)\n-        || self.check_keyword(kw::For)\n-        || self.check(&token::OpenDelim(Delimiter::Parenthesis))\n-    }\n-\n-    fn error_negative_bounds(\n-        &self,\n-        colon_span: Option<Span>,\n-        bounds: &[GenericBound],\n-        negative_bounds: Vec<Span>,\n-    ) {\n-        let sub = if let Some(bound_list) = colon_span {\n-            let bound_list = bound_list.to(self.prev_token.span);\n-            let mut new_bound_list = String::new();\n-            if !bounds.is_empty() {\n-                let mut snippets = bounds.iter().map(|bound| self.span_to_snippet(bound.span()));\n-                while let Some(Ok(snippet)) = snippets.next() {\n-                    new_bound_list.push_str(\" + \");\n-                    new_bound_list.push_str(&snippet);\n-                }\n-                new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n-            }\n-\n-            Some(NegativeBoundsNotSupportedSugg {\n-                bound_list,\n-                num_bounds: negative_bounds.len(),\n-                fixed: new_bound_list,\n-            })\n-        } else {\n-            None\n-        };\n-\n-        let last_span = *negative_bounds.last().expect(\"no negative bounds, but still error?\");\n-        self.sess.emit_err(NegativeBoundsNotSupported { negative_bounds, last_span, sub });\n+            || self.check_lifetime()\n+            || self.check(&token::Not)\n+            || self.check(&token::Question)\n+            || self.check(&token::Tilde)\n+            || self.check_keyword(kw::For)\n+            || self.check(&token::OpenDelim(Delimiter::Parenthesis))\n     }\n \n     /// Parses a bound according to the grammar:\n     /// ```ebnf\n     /// BOUND = TY_BOUND | LT_BOUND\n     /// ```\n-    fn parse_generic_bound(&mut self) -> PResult<'a, Result<GenericBound, Span>> {\n-        let anchor_lo = self.prev_token.span;\n+    fn parse_generic_bound(&mut self) -> PResult<'a, GenericBound> {\n         let lo = self.token.span;\n         let has_parens = self.eat(&token::OpenDelim(Delimiter::Parenthesis));\n         let inner_lo = self.token.span;\n-        let is_negative = self.eat(&token::Not);\n \n         let modifiers = self.parse_ty_bound_modifiers()?;\n         let bound = if self.token.is_lifetime() {\n@@ -771,7 +725,7 @@ impl<'a> Parser<'a> {\n             self.parse_generic_ty_bound(lo, has_parens, modifiers)?\n         };\n \n-        Ok(if is_negative { Err(anchor_lo.to(self.prev_token.span)) } else { Ok(bound) })\n+        Ok(bound)\n     }\n \n     /// Parses a lifetime (\"outlives\") bound, e.g. `'a`, according to:\n@@ -799,8 +753,14 @@ impl<'a> Parser<'a> {\n             self.sess.emit_err(errors::TildeConstLifetime { span });\n         }\n \n-        if let Some(span) = modifiers.maybe {\n-            self.sess.emit_err(errors::MaybeLifetime { span });\n+        match modifiers.bound_polarity {\n+            BoundPolarity::Positive => {}\n+            BoundPolarity::Negative(span) => {\n+                self.sess.emit_err(errors::ModifierLifetime { span, sigil: \"!\" });\n+            }\n+            BoundPolarity::Maybe(span) => {\n+                self.sess.emit_err(errors::ModifierLifetime { span, sigil: \"?\" });\n+            }\n         }\n     }\n \n@@ -843,9 +803,16 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        let maybe = self.eat(&token::Question).then_some(self.prev_token.span);\n+        let bound_polarity = if self.eat(&token::Question) {\n+            BoundPolarity::Maybe(self.prev_token.span)\n+        } else if self.eat(&token::Not) {\n+            self.sess.gated_spans.gate(sym::negative_bounds, self.prev_token.span);\n+            BoundPolarity::Negative(self.prev_token.span)\n+        } else {\n+            BoundPolarity::Positive\n+        };\n \n-        Ok(BoundModifiers { maybe, maybe_const })\n+        Ok(BoundModifiers { bound_polarity, maybe_const })\n     }\n \n     /// Parses a type bound according to:"}, {"sha": "714d10f234107308477391c30da41c921e29c76a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -984,6 +984,7 @@ symbols! {\n         needs_panic_runtime,\n         neg,\n         negate_unsigned,\n+        negative_bounds,\n         negative_impls,\n         neon,\n         never,"}, {"sha": "3e9e497672aa1758fec7525c459f2673fce6f81a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -530,6 +530,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         associated_ty: Option<(&'static str, Ty<'tcx>)>,\n         mut body_id: LocalDefId,\n     ) {\n+        if trait_pred.skip_binder().polarity == ty::ImplPolarity::Negative {\n+            return;\n+        }\n+\n         let trait_pred = self.resolve_numeric_literals_with_default(trait_pred);\n \n         let self_ty = trait_pred.skip_binder().self_ty();"}, {"sha": "a8864f47ef0369c8c80732b90787d1d14cb8b41d", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -57,6 +57,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if obligation.polarity() == ty::ImplPolarity::Negative {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n             self.assemble_candidates_from_impls(obligation, &mut candidates);\n+            self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;\n         } else {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n \n@@ -187,6 +188,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n+            if bound.skip_binder().polarity != stack.obligation.predicate.skip_binder().polarity {\n+                continue;\n+            }\n+\n             // FIXME(oli-obk): it is suspicious that we are dropping the constness and\n             // polarity here.\n             let wc = self.where_clause_may_apply(stack, bound.map_bound(|t| t.trait_ref))?;"}, {"sha": "0590e02d84ac04038cbcbca38e078ec7c89fd351", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -328,6 +328,13 @@ impl<'tcx> WfPredicates<'tcx> {\n         let tcx = self.tcx;\n         let trait_ref = &trait_pred.trait_ref;\n \n+        // Negative trait predicates don't require supertraits to hold, just\n+        // that their substs are WF.\n+        if trait_pred.polarity == ty::ImplPolarity::Negative {\n+            self.compute_negative_trait_pred(trait_ref);\n+            return;\n+        }\n+\n         // if the trait predicate is not const, the wf obligations should not be const as well.\n         let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n@@ -393,6 +400,14 @@ impl<'tcx> WfPredicates<'tcx> {\n         );\n     }\n \n+    // Compute the obligations that are required for `trait_ref` to be WF,\n+    // given that it is a *negative* trait predicate.\n+    fn compute_negative_trait_pred(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n+        for arg in trait_ref.substs {\n+            self.compute(arg);\n+        }\n+    }\n+\n     /// Pushes the obligations required for `trait_ref::Item` to be WF\n     /// into `self.out`.\n     fn compute_projection(&mut self, data: ty::AliasTy<'tcx>) {"}, {"sha": "1c6810bdaf9be1b4077ba11ee7b092a8ed0518c0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -439,6 +439,7 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n+                    hir::TraitBoundModifier::Negative => \"!\",\n                     // ~const is experimental; do not display those bounds in rustdoc\n                     hir::TraitBoundModifier::MaybeConst => \"\",\n                 };"}, {"sha": "b5bebb7059380cf453cf15e719411c9c1187cb5b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -533,6 +533,10 @@ pub(crate) fn from_trait_bound_modifier(\n         None => TraitBoundModifier::None,\n         Maybe => TraitBoundModifier::Maybe,\n         MaybeConst => TraitBoundModifier::MaybeConst,\n+        // FIXME(negative-bounds): This bound should be rendered negative, but\n+        // since that's experimental, maybe let's not add it to the rustdoc json\n+        // API just now...\n+        Negative => TraitBoundModifier::None,\n     }\n }\n "}, {"sha": "f548388ed8ba278b65f7e3686cecfa161334b775", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -552,6 +552,12 @@ impl Rewrite for ast::GenericBound {\n                     ast::TraitBoundModifier::MaybeConstMaybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(8)?)\n                         .map(|s| format!(\"~const ?{}\", s)),\n+                    ast::TraitBoundModifier::Negative => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(1)?)\n+                        .map(|s| format!(\"!{}\", s)),\n+                    ast::TraitBoundModifier::MaybeConstNegative => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(8)?)\n+                        .map(|s| format!(\"~const !{}\", s)),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }"}, {"sha": "4fb35cccf6684e5ecc840d94bcbd8ca14363a61f", "filename": "src/tools/rustfmt/tests/target/negative-bounds.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -0,0 +1,11 @@\n+fn negative()\n+where\n+    i32: !Copy,\n+{\n+}\n+\n+fn maybe_const_negative()\n+where\n+    i32: ~const !Copy,\n+{\n+}"}, {"sha": "533cb0ce5bcc5af0a0dc79fecdda430a05a491a2", "filename": "tests/ui/feature-gates/feature-gate-negative_bounds.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -0,0 +1,4 @@\n+fn test<T: !Copy>() {}\n+//~^ ERROR negative bounds are not supported\n+\n+fn main() {}"}, {"sha": "ae010fdf3f848d1763d931c44da69b763dfd5122", "filename": "tests/ui/feature-gates/feature-gate-negative_bounds.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.stderr?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -0,0 +1,8 @@\n+error: negative bounds are not supported\n+  --> $DIR/feature-gate-negative_bounds.rs:1:12\n+   |\n+LL | fn test<T: !Copy>() {}\n+   |            ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6aef35f0bb96a541de387ff6ff38f3e8eccac1b9", "filename": "tests/ui/issues/issue-58857.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fissues%2Fissue-58857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fissues%2Fissue-58857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-58857.stderr?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1,8 +1,8 @@\n error: negative bounds are not supported\n-  --> $DIR/issue-58857.rs:4:7\n+  --> $DIR/issue-58857.rs:4:9\n    |\n LL | impl<A: !Valid> Conj<A>{}\n-   |       ^^^^^^^^ negative bounds are not supported\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "ed885ae14356633e0043e1fd0fa7ed1ff9c5e622", "filename": "tests/ui/parser/issues/issue-33418.fixed", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/32f3ddb902e03b7ac23de3e677ff27bc97eff0d6/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.fixed?ref=32f3ddb902e03b7ac23de3e677ff27bc97eff0d6", "patch": "@@ -1,19 +0,0 @@\n-// run-rustfix\n-\n-trait Tr {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr2: SuperA {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr3: SuperB {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr4: SuperB + SuperD {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr5 {}\n-//~^ ERROR negative bounds are not supported\n-\n-trait SuperA {}\n-trait SuperB {}\n-trait SuperC {}\n-trait SuperD {}\n-\n-fn main() {}"}, {"sha": "4ebd5871e53cabeace4d5391b44db1783c3972e5", "filename": "tests/ui/parser/issues/issue-33418.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1,16 +1,16 @@\n-// run-rustfix\n-\n trait Tr: !SuperA {}\n //~^ ERROR negative bounds are not supported\n trait Tr2: SuperA + !SuperB {}\n //~^ ERROR negative bounds are not supported\n trait Tr3: !SuperA + SuperB {}\n //~^ ERROR negative bounds are not supported\n trait Tr4: !SuperA + SuperB\n-    + !SuperC + SuperD {}\n+//~^ ERROR negative bounds are not supported\n++ !SuperC + SuperD {}\n //~^ ERROR negative bounds are not supported\n trait Tr5: !SuperA\n-    + !SuperB {}\n+//~^ ERROR negative bounds are not supported\n++ !SuperB {}\n //~^ ERROR negative bounds are not supported\n \n trait SuperA {}"}, {"sha": "b111bcfd24093a0acb951b23fe12250407e1cb16", "filename": "tests/ui/parser/issues/issue-33418.stderr", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.stderr?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1,36 +1,44 @@\n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:3:9\n+  --> $DIR/issue-33418.rs:1:11\n    |\n LL | trait Tr: !SuperA {}\n-   |         ^^^^^^^^^ negative bounds are not supported\n+   |           ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:5:19\n+  --> $DIR/issue-33418.rs:3:21\n    |\n LL | trait Tr2: SuperA + !SuperB {}\n-   |                   ^^^^^^^^^ negative bounds are not supported\n+   |                     ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:7:10\n+  --> $DIR/issue-33418.rs:5:12\n    |\n LL | trait Tr3: !SuperA + SuperB {}\n-   |          ^^^^^^^^^ negative bounds are not supported\n+   |            ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:9:10\n+  --> $DIR/issue-33418.rs:7:12\n    |\n LL | trait Tr4: !SuperA + SuperB\n-   |          ^^^^^^^^^\n-LL |     + !SuperC + SuperD {}\n-   |     ^^^^^^^^^ negative bounds are not supported\n+   |            ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:12:10\n+  --> $DIR/issue-33418.rs:9:3\n+   |\n+LL | + !SuperC + SuperD {}\n+   |   ^\n+\n+error: negative bounds are not supported\n+  --> $DIR/issue-33418.rs:11:12\n    |\n LL | trait Tr5: !SuperA\n-   |          ^^^^^^^^^\n-LL |     + !SuperB {}\n-   |     ^^^^^^^^^ negative bounds are not supported\n+   |            ^\n+\n+error: negative bounds are not supported\n+  --> $DIR/issue-33418.rs:13:3\n+   |\n+LL | + !SuperB {}\n+   |   ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "2c42f9731743e573588738aada1ff21915c1f60d", "filename": "tests/ui/parser/issues/issue-67146-negative-outlives-bound-syntactic-fail.fixed", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -6,9 +6,12 @@\n \n fn main() {}\n \n-pub fn f1<T>() {}\n+pub fn f1<T: 'static>() {}\n //~^ ERROR negative bounds are not supported\n-pub fn f2<'a, T: Ord>() {}\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n+pub fn f2<'a, T: Ord + 'a>() {}\n //~^ ERROR negative bounds are not supported\n-pub fn f3<'a, T: Ord>() {}\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n+pub fn f3<'a, T: 'a + Ord>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound"}, {"sha": "e510efaae5ba2ee10d0f648b461bfc8f18e1fe39", "filename": "tests/ui/parser/issues/issue-67146-negative-outlives-bound-syntactic-fail.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -8,7 +8,10 @@ fn main() {}\n \n pub fn f1<T: !'static>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n pub fn f2<'a, T: Ord + !'a>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n pub fn f3<'a, T: !'a + Ord>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound"}, {"sha": "91fe02db3a606626fee1587fc1107b97f1ce6082", "filename": "tests/ui/parser/issues/issue-67146-negative-outlives-bound-syntactic-fail.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -1,20 +1,38 @@\n+error: `!` may only modify trait bounds, not lifetime bounds\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:14\n+   |\n+LL | pub fn f1<T: !'static>() {}\n+   |              ^\n+\n+error: `!` may only modify trait bounds, not lifetime bounds\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:12:24\n+   |\n+LL | pub fn f2<'a, T: Ord + !'a>() {}\n+   |                        ^\n+\n+error: `!` may only modify trait bounds, not lifetime bounds\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:15:18\n+   |\n+LL | pub fn f3<'a, T: !'a + Ord>() {}\n+   |                  ^\n+\n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:12\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:14\n    |\n LL | pub fn f1<T: !'static>() {}\n-   |            ^^^^^^^^^^ negative bounds are not supported\n+   |              ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:11:22\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:12:24\n    |\n LL | pub fn f2<'a, T: Ord + !'a>() {}\n-   |                      ^^^^^ negative bounds are not supported\n+   |                        ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:13:16\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:15:18\n    |\n LL | pub fn f3<'a, T: !'a + Ord>() {}\n-   |                ^^^^^ negative bounds are not supported\n+   |                  ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "bc1a0ef1708378e75ae27d86e997b149c47076c8", "filename": "tests/ui/traits/negative-bounds/associated-constraints.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -0,0 +1,20 @@\n+#![feature(negative_bounds, associated_type_bounds)]\n+//~^ WARN the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Trait {\n+    type Assoc;\n+}\n+\n+fn test<T: !Trait<Assoc = i32>>() {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn test2<T>() where T: !Trait<Assoc = i32> {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn test3<T: !Trait<Assoc: Send>>() {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn test4<T>() where T: !Trait<Assoc: Send> {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn main() {}"}, {"sha": "335ac7e5ad903f6c702eb3cc2a41e1e4f18459b4", "filename": "tests/ui/traits/negative-bounds/associated-constraints.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.stderr?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -0,0 +1,34 @@\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:8:19\n+   |\n+LL | fn test<T: !Trait<Assoc = i32>>() {}\n+   |                   ^^^^^^^^^^^\n+\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:11:31\n+   |\n+LL | fn test2<T>() where T: !Trait<Assoc = i32> {}\n+   |                               ^^^^^^^^^^^\n+\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:14:20\n+   |\n+LL | fn test3<T: !Trait<Assoc: Send>>() {}\n+   |                    ^^^^^^^^^^^\n+\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:17:31\n+   |\n+LL | fn test4<T>() where T: !Trait<Assoc: Send> {}\n+   |                               ^^^^^^^^^^^\n+\n+warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/associated-constraints.rs:1:12\n+   |\n+LL | #![feature(negative_bounds, associated_type_bounds)]\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+"}, {"sha": "f6d1d5169c4fc51e3cd407b1ce88dc8a55cd396c", "filename": "tests/ui/traits/negative-bounds/simple.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.rs?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -0,0 +1,42 @@\n+#![feature(negative_bounds, negative_impls)]\n+//~^ WARN the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+fn not_copy<T: !Copy>() {}\n+\n+fn neg_param_env<T: !Copy>() {\n+    not_copy::<T>();\n+}\n+\n+fn pos_param_env<T: Copy>() {\n+    not_copy::<T>();\n+    //~^ ERROR the trait bound `T: !Copy` is not satisfied\n+}\n+\n+fn unknown<T>() {\n+    not_copy::<T>();\n+    //~^ ERROR the trait bound `T: !Copy` is not satisfied\n+}\n+\n+struct NotCopyable;\n+impl !Copy for NotCopyable {}\n+\n+fn neg_impl() {\n+    not_copy::<NotCopyable>();\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Copyable;\n+\n+fn pos_impl() {\n+    not_copy::<Copyable>();\n+    //~^ ERROR the trait bound `Copyable: !Copy` is not satisfied\n+}\n+\n+struct NotNecessarilyCopyable;\n+\n+fn unknown_impl() {\n+    not_copy::<NotNecessarilyCopyable>();\n+    //~^ ERROR the trait bound `NotNecessarilyCopyable: !Copy` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "a3cab41a2ce0f247d7a3ed03bb0ca0571a69fff8", "filename": "tests/ui/traits/negative-bounds/simple.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80df4ab403cbdaf0fc7a8301d8490ee60d7063bf/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr?ref=80df4ab403cbdaf0fc7a8301d8490ee60d7063bf", "patch": "@@ -0,0 +1,70 @@\n+warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/simple.rs:1:12\n+   |\n+LL | #![feature(negative_bounds, negative_impls)]\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the trait bound `T: !Copy` is not satisfied\n+  --> $DIR/simple.rs:11:16\n+   |\n+LL |     not_copy::<T>();\n+   |                ^ the trait `!Copy` is not implemented for `T`\n+   |\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+\n+error[E0277]: the trait bound `T: !Copy` is not satisfied\n+  --> $DIR/simple.rs:16:16\n+   |\n+LL |     not_copy::<T>();\n+   |                ^ the trait `!Copy` is not implemented for `T`\n+   |\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+\n+error[E0277]: the trait bound `Copyable: !Copy` is not satisfied\n+  --> $DIR/simple.rs:31:16\n+   |\n+LL |     not_copy::<Copyable>();\n+   |                ^^^^^^^^ the trait `!Copy` is not implemented for `Copyable`\n+   |\n+   = help: the trait `Copy` is implemented for `Copyable`\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+help: consider annotating `Copyable` with `#[derive(Copy)]`\n+   |\n+LL + #[derive(Copy)]\n+LL | struct Copyable;\n+   |\n+\n+error[E0277]: the trait bound `NotNecessarilyCopyable: !Copy` is not satisfied\n+  --> $DIR/simple.rs:38:16\n+   |\n+LL |     not_copy::<NotNecessarilyCopyable>();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ the trait `!Copy` is not implemented for `NotNecessarilyCopyable`\n+   |\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+help: consider annotating `NotNecessarilyCopyable` with `#[derive(Copy)]`\n+   |\n+LL + #[derive(Copy)]\n+LL | struct NotNecessarilyCopyable;\n+   |\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}