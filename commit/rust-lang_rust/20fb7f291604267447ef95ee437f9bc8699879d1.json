{"sha": "20fb7f291604267447ef95ee437f9bc8699879d1", "node_id": "C_kwDOAAsO6NoAKDIwZmI3ZjI5MTYwNDI2NzQ0N2VmOTVlZTQzN2Y5YmM4Njk5ODc5ZDE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-24T17:52:38Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-24T17:52:38Z"}, "message": "Update rustfmt", "tree": {"sha": "ac70b8f6798681bc62863b04a268e0aef5046455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac70b8f6798681bc62863b04a268e0aef5046455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20fb7f291604267447ef95ee437f9bc8699879d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20fb7f291604267447ef95ee437f9bc8699879d1", "html_url": "https://github.com/rust-lang/rust/commit/20fb7f291604267447ef95ee437f9bc8699879d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20fb7f291604267447ef95ee437f9bc8699879d1/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba0cfc7debaaa68dbd26c9aab101a496afe3db49", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0cfc7debaaa68dbd26c9aab101a496afe3db49", "html_url": "https://github.com/rust-lang/rust/commit/ba0cfc7debaaa68dbd26c9aab101a496afe3db49"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "ce59311c4aa96acac5154ce00f02e3d0a746fa99", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 target_mut,\n                             },\n                         ));\n-                    }\n+                    },\n                     _ => (),\n                 }\n             },"}, {"sha": "57fd24bd4f04d81ca9263a905b84b258a100ae59", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -245,11 +245,14 @@ fn try_parse_contains(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(Map\n         ExprKind::MethodCall(\n             _,\n             _,\n-            [map, Expr {\n-                kind: ExprKind::AddrOf(_, _, key),\n-                span: key_span,\n-                ..\n-            }],\n+            [\n+                map,\n+                Expr {\n+                    kind: ExprKind::AddrOf(_, _, key),\n+                    span: key_span,\n+                    ..\n+                },\n+            ],\n             _,\n         ) if key_span.ctxt() == expr.span.ctxt() => {\n             let id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;"}, {"sha": "9247343b52a5322f8c7ee09eec77de8b655ffcff", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -169,13 +169,16 @@ fn check_inputs(cx: &LateContext<'_>, params: &[Param<'_>], call_args: &[Expr<'_\n         }\n         match *cx.typeck_results().expr_adjustments(arg) {\n             [] => true,\n-            [Adjustment {\n-                kind: Adjust::Deref(None),\n-                ..\n-            }, Adjustment {\n-                kind: Adjust::Borrow(AutoBorrow::Ref(_, mu2)),\n-                ..\n-            }] => {\n+            [\n+                Adjustment {\n+                    kind: Adjust::Deref(None),\n+                    ..\n+                },\n+                Adjustment {\n+                    kind: Adjust::Borrow(AutoBorrow::Ref(_, mu2)),\n+                    ..\n+                },\n+            ] => {\n                 // re-borrow with the same mutability is allowed\n                 let ty = cx.typeck_results().expr_ty(arg);\n                 matches!(*ty.kind(), ty::Ref(.., mu1) if mu1 == mu2.into())"}, {"sha": "6850e0c34767cb0864a002b5ce498c3cc157c5a8", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -89,7 +89,7 @@ impl IntPlusOne {\n                     },\n                     _ => None,\n                 }\n-            }\n+            },\n             // case where `x + 1 <= ...` or `1 + x <= ...`\n             (BinOpKind::Le, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _)\n                 if lhskind.node == BinOpKind::Add =>\n@@ -104,7 +104,7 @@ impl IntPlusOne {\n                     },\n                     _ => None,\n                 }\n-            }\n+            },\n             // case where `... >= y - 1` or `... >= -1 + y`\n             (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n                 match (rhskind.node, &rhslhs.kind, &rhsrhs.kind) {"}, {"sha": "f9f515cc40a0fbdd120af9de1358d4e92ba66ce7", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -338,7 +338,7 @@ pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic\n                     sugg::Sugg::hir_with_applicability(cx, arg_inner, \"_\", applic_ref).maybe_par(),\n                     meth_name,\n                 )\n-            }\n+            },\n             _ => format!(\n                 \"{}.into_iter()\",\n                 sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()"}, {"sha": "b4dacb2580c313fbc366aae7b251facfbdda215e", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -85,7 +85,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                     if expr.hir_id == self_arg.hir_id && ty != cx.typeck_results().expr_ty_adjusted(expr) =>\n                 {\n                     return;\n-                }\n+                },\n                 ExprKind::MethodCall(_, _, [self_arg, ..], _) if expr.hir_id == self_arg.hir_id => true,\n                 ExprKind::Match(_, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)\n                 | ExprKind::Field(..)\n@@ -100,7 +100,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                 ) =>\n             {\n                 return;\n-            }\n+            },\n             _ => false,\n         };\n "}, {"sha": "fe9ffde0d337c1f15506e73bdca1e0f373c88da5", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -186,7 +186,7 @@ pub(super) fn check<'tcx>(\n                         check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n                     }\n                 }\n-            }\n+            },\n             _ => (),\n         }\n     }"}, {"sha": "d41b54745649958de717e61f6d395bfbce0e62e5", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -106,7 +106,7 @@ impl EarlyLintPass for ModStyle {\n                     }\n                     process_paths_for_mod_files(path, &mut folder_segments, &mut mod_folders);\n                     check_self_named_mod_exists(cx, path, file);\n-                }\n+                },\n                 _ => {},\n             }\n         }"}, {"sha": "f1be90c44f98b998901e0f4b2462722466c99d69", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -107,14 +107,18 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n         if let ExprKind::AddrOf(BorrowKind::Ref, mutability, inner) = e.kind {\n             if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(inner).kind() {\n                 for adj3 in cx.typeck_results().expr_adjustments(e).windows(3) {\n-                    if let [Adjustment {\n-                        kind: Adjust::Deref(_), ..\n-                    }, Adjustment {\n-                        kind: Adjust::Deref(_), ..\n-                    }, Adjustment {\n-                        kind: Adjust::Borrow(_),\n-                        ..\n-                    }] = *adj3\n+                    if let [\n+                        Adjustment {\n+                            kind: Adjust::Deref(_), ..\n+                        },\n+                        Adjustment {\n+                            kind: Adjust::Deref(_), ..\n+                        },\n+                        Adjustment {\n+                            kind: Adjust::Borrow(_),\n+                            ..\n+                        },\n+                    ] = *adj3\n                     {\n                         let help_msg_ty = if matches!(mutability, Mutability::Not) {\n                             format!(\"&{}\", ty)"}, {"sha": "7cbd43e6266e95016f197eba28a87e6f50434057", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -770,13 +770,13 @@ pub fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -\n                     }\n                     return Some(VecInitKind::WithExprCapacity(arg.hir_id));\n                 }\n-            }\n+            },\n             ExprKind::Path(QPath::Resolved(_, path))\n                 if match_def_path(cx, path.res.opt_def_id()?, &paths::DEFAULT_TRAIT_METHOD)\n                     && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Vec) =>\n             {\n                 return Some(VecInitKind::Default);\n-            }\n+            },\n             _ => (),\n         }\n     }"}, {"sha": "bcc38c72256045831fc86c778c195cf75506d28f", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fb7f291604267447ef95ee437f9bc8699879d1/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=20fb7f291604267447ef95ee437f9bc8699879d1", "patch": "@@ -844,10 +844,13 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n     let mut capture_expr_ty = e;\n \n     for (parent_id, parent) in cx.tcx.hir().parent_iter(e.hir_id) {\n-        if let [Adjustment {\n-            kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n-            target,\n-        }, ref adjust @ ..] = *cx\n+        if let [\n+            Adjustment {\n+                kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n+                target,\n+            },\n+            ref adjust @ ..,\n+        ] = *cx\n             .typeck_results()\n             .adjustments()\n             .get(child_id)\n@@ -1232,9 +1235,7 @@ pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Opti\n     for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n-                e\n-                @\n-                Expr {\n+                e @ Expr {\n                     kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n                     ..\n                 },\n@@ -1692,10 +1693,12 @@ pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n pub fn get_async_fn_body(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if let ExprKind::Call(\n         _,\n-        &[Expr {\n-            kind: ExprKind::Closure(_, _, body, _, _),\n-            ..\n-        }],\n+        &[\n+            Expr {\n+                kind: ExprKind::Closure(_, _, body, _, _),\n+                ..\n+            },\n+        ],\n     ) = body.value.kind\n     {\n         if let ExprKind::Block("}]}