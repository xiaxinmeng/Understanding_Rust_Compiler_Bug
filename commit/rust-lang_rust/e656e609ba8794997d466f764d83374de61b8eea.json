{"sha": "e656e609ba8794997d466f764d83374de61b8eea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTZlNjA5YmE4Nzk0OTk3ZDQ2NmY3NjRkODMzNzRkZTYxYjhlZWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-29T16:05:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-29T16:05:31Z"}, "message": "Rollup merge of #78527 - bugadani:typo3, r=jonas-schievink\n\nFix some more typos", "tree": {"sha": "67e1d168c275f6069afedcefc41304dce80cc46b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e1d168c275f6069afedcefc41304dce80cc46b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e656e609ba8794997d466f764d83374de61b8eea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmuhMCRBK7hj4Ov3rIwAAdHIIAAd8H4jiFwnGQ+2dNfdMMG3Y\nsR0il2/kfKN0h8qcI51f1VnsinTl+FIlATgD4AspsRxxkHDWdfeGZF+MSZpNjqc/\nsRFEWmnQeWohTMFdgDkP99C5u4/PKaFxAgPxV7Cw5Uc3eGJIIScj8hpdlMCjekLk\nDJGijcjA4L+eMBfG+jWeBcWfVd63AbQGwlLOR7oYg8Vv/7F5U7LQZNjDi5u0L0W8\njymOc2e0lcBcIJd8IHO0QF7NMaJkMRUJrMH89mePSmJCQ5T4Cu/QLdCph2ZdeQHF\nAL+EJZ7d5RKo6sjvD65z18V6EfH+zHFOYmh9txH96MwgXZf00/WVQ7leKGn4erg=\n=OYbB\n-----END PGP SIGNATURE-----\n", "payload": "tree 67e1d168c275f6069afedcefc41304dce80cc46b\nparent 1d6e20e706ba1e90f52e0e6029f06b81d705aed4\nparent 3fba94851064dd7d9076480080e9387b81d68359\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603987531 +0100\ncommitter GitHub <noreply@github.com> 1603987531 +0100\n\nRollup merge of #78527 - bugadani:typo3, r=jonas-schievink\n\nFix some more typos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e656e609ba8794997d466f764d83374de61b8eea", "html_url": "https://github.com/rust-lang/rust/commit/e656e609ba8794997d466f764d83374de61b8eea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e656e609ba8794997d466f764d83374de61b8eea/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6e20e706ba1e90f52e0e6029f06b81d705aed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6e20e706ba1e90f52e0e6029f06b81d705aed4", "html_url": "https://github.com/rust-lang/rust/commit/1d6e20e706ba1e90f52e0e6029f06b81d705aed4"}, {"sha": "3fba94851064dd7d9076480080e9387b81d68359", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fba94851064dd7d9076480080e9387b81d68359", "html_url": "https://github.com/rust-lang/rust/commit/3fba94851064dd7d9076480080e9387b81d68359"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "269811053a08459e81f2074d4a1aa845a501bb27", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e656e609ba8794997d466f764d83374de61b8eea", "patch": "@@ -148,7 +148,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     is_collecting_in_band_lifetimes: bool,\n \n     /// Currently in-scope lifetimes defined in impl headers, fn headers, or HRTB.\n-    /// When `is_collectin_in_band_lifetimes` is true, each lifetime is checked\n+    /// When `is_collecting_in_band_lifetimes` is true, each lifetime is checked\n     /// against this list to see if it is already in-scope, or if a definition\n     /// needs to be created for it.\n     ///\n@@ -257,7 +257,7 @@ enum ImplTraitPosition {\n     /// Disallowed in `let` / `const` / `static` bindings.\n     Binding,\n \n-    /// All other posiitons.\n+    /// All other positions.\n     Other,\n }\n \n@@ -363,7 +363,7 @@ enum ParenthesizedGenericArgs {\n ///   elided bounds follow special rules. Note that this only covers\n ///   cases where *nothing* is written; the `'_` in `Box<dyn Foo +\n ///   '_>` is a case of \"modern\" elision.\n-/// - **Deprecated** -- this coverse cases like `Ref<T>`, where the lifetime\n+/// - **Deprecated** -- this covers cases like `Ref<T>`, where the lifetime\n ///   parameter to ref is completely elided. `Ref<'_, T>` would be the modern,\n ///   non-deprecated equivalent.\n ///"}, {"sha": "d6585bcc4259b141a01c2b231152b54c56b0d935", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e656e609ba8794997d466f764d83374de61b8eea", "patch": "@@ -516,7 +516,7 @@ impl<'a> AstValidator<'a> {\n         self.session.source_map().guess_head_span(self.extern_mod.unwrap().span)\n     }\n \n-    /// An `fn` in `extern { ... }` cannot have qualfiers, e.g. `async fn`.\n+    /// An `fn` in `extern { ... }` cannot have qualifiers, e.g. `async fn`.\n     fn check_foreign_fn_headerless(&self, ident: Ident, span: Span, header: FnHeader) {\n         if header.has_qualifiers() {\n             self.err_handler()"}, {"sha": "cd1e12ca450163d0e424f121f3a99436af352987", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=e656e609ba8794997d466f764d83374de61b8eea", "patch": "@@ -24,7 +24,7 @@ mod drop;\n pub use copy::CopyTaggedPtr;\n pub use drop::TaggedPtr;\n \n-/// This describes the pointer type encaspulated by TaggedPtr.\n+/// This describes the pointer type encapsulated by TaggedPtr.\n ///\n /// # Safety\n ///"}, {"sha": "2e1512b3929ca3bbad7c0c0a10002175e4ac85e2", "filename": "compiler/rustc_data_structures/src/transitive_relation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation.rs?ref=e656e609ba8794997d466f764d83374de61b8eea", "patch": "@@ -18,7 +18,7 @@ pub struct TransitiveRelation<T: Eq + Hash> {\n     edges: Vec<Edge>,\n \n     // This is a cached transitive closure derived from the edges.\n-    // Currently, we build it lazilly and just throw out any existing\n+    // Currently, we build it lazily and just throw out any existing\n     // copy whenever a new edge is added. (The Lock is to permit\n     // the lazy computation.) This is kind of silly, except for the\n     // fact its size is tied to `self.elements.len()`, so I wanted to\n@@ -255,7 +255,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n             // argument is that, after step 2, we know that no element\n             // can reach its successors (in the vector, not the graph).\n             // After step 3, we know that no element can reach any of\n-            // its predecesssors (because of step 2) nor successors\n+            // its predecessors (because of step 2) nor successors\n             // (because we just called `pare_down`)\n             //\n             // This same algorithm is used in `parents` below."}, {"sha": "08e9bdf308798894f641eeacdcc555ea6646c856", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656e609ba8794997d466f764d83374de61b8eea/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=e656e609ba8794997d466f764d83374de61b8eea", "patch": "@@ -513,7 +513,7 @@ impl Emitter for SilentEmitter {\n /// Maximum number of lines we will print for a multiline suggestion; arbitrary.\n ///\n /// This should be replaced with a more involved mechanism to output multiline suggestions that\n-/// more closely mimmics the regular diagnostic output, where irrelevant code lines are elided.\n+/// more closely mimics the regular diagnostic output, where irrelevant code lines are elided.\n pub const MAX_SUGGESTION_HIGHLIGHT_LINES: usize = 6;\n /// Maximum number of suggestions to be shown\n ///\n@@ -887,7 +887,7 @@ impl EmitterWriter {\n                                                      // or the next are vertical line placeholders.\n                         || (annotation.takes_space() // If either this or the next annotation is\n                             && next.has_label())     // multiline start/end, move it to a new line\n-                        || (annotation.has_label()   // so as not to overlap the orizontal lines.\n+                        || (annotation.has_label()   // so as not to overlap the horizontal lines.\n                             && next.takes_space())\n                         || (annotation.takes_space() && next.takes_space())\n                         || (overlaps(next, annotation, l)"}]}