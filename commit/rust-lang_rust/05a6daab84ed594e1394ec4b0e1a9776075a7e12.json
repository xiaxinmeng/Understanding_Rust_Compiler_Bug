{"sha": "05a6daab84ed594e1394ec4b0e1a9776075a7e12", "node_id": "C_kwDOAAsO6NoAKDA1YTZkYWFiODRlZDU5NGUxMzk0ZWM0YjBlMWE5Nzc2MDc1YTdlMTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-09T04:29:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-10T16:36:30Z"}, "message": "Report overflows gracefully with new solver", "tree": {"sha": "720bd28bb1cc9a5b2d3703de5a6dd7718b0d3254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/720bd28bb1cc9a5b2d3703de5a6dd7718b0d3254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a6daab84ed594e1394ec4b0e1a9776075a7e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a6daab84ed594e1394ec4b0e1a9776075a7e12", "html_url": "https://github.com/rust-lang/rust/commit/05a6daab84ed594e1394ec4b0e1a9776075a7e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a6daab84ed594e1394ec4b0e1a9776075a7e12/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a198c7f62a6dea507ba950750bc928237ad7a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a198c7f62a6dea507ba950750bc928237ad7a00", "html_url": "https://github.com/rust-lang/rust/commit/2a198c7f62a6dea507ba950750bc928237ad7a00"}], "stats": {"total": 102, "additions": 75, "deletions": 27}, "files": [{"sha": "f736f7a96207e204dc72fccb77c459fe9e9e5a09", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -578,7 +578,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(in super::super) fn report_ambiguity_errors(&self) {\n-        let mut errors = self.fulfillment_cx.borrow_mut().collect_remaining_errors();\n+        let mut errors = self.fulfillment_cx.borrow_mut().collect_remaining_errors(self);\n \n         if !errors.is_empty() {\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);"}, {"sha": "2899ba0b7e7016e6411006651ea295694957dca2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Finally, for ambiguity-related errors, we actually want to look\n         // for a parameter that is the source of the inference type left\n         // over in this predicate.\n-        if let traits::FulfillmentErrorCode::CodeAmbiguity = error.code {\n+        if let traits::FulfillmentErrorCode::CodeAmbiguity { .. } = error.code {\n             fallback_param_to_point_at = None;\n             self_param_to_point_at = None;\n             param_to_point_at ="}, {"sha": "2f0a19b46de93ee716213d780f059d4415ee224e", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -38,7 +38,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>>;\n+    fn collect_remaining_errors(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n \n@@ -78,6 +78,6 @@ impl<'tcx, T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n             return errors;\n         }\n \n-        self.collect_remaining_errors()\n+        self.collect_remaining_errors(infcx)\n     }\n }"}, {"sha": "e01b6caf43064caafa94051f9d29128d8ec0799e", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -128,7 +128,11 @@ pub enum FulfillmentErrorCode<'tcx> {\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n     CodeSubtypeError(ExpectedFound<Ty<'tcx>>, TypeError<'tcx>), // always comes from a SubtypePredicate\n     CodeConstEquateError(ExpectedFound<Const<'tcx>>, TypeError<'tcx>),\n-    CodeAmbiguity,\n+    CodeAmbiguity {\n+        /// Overflow reported from the new solver `-Ztrait-solver=next`, which will\n+        /// be reported as an regular error as opposed to a fatal error.\n+        overflow: bool,\n+    },\n }\n \n impl<'tcx, O> Obligation<'tcx, O> {"}, {"sha": "1563d92af0ea771a259bb4bf9c00d3f1b96cf46c", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -46,7 +46,8 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n             super::CodeConstEquateError(ref a, ref b) => {\n                 write!(f, \"CodeConstEquateError({:?}, {:?})\", a, b)\n             }\n-            super::CodeAmbiguity => write!(f, \"Ambiguity\"),\n+            super::CodeAmbiguity { overflow: false } => write!(f, \"Ambiguity\"),\n+            super::CodeAmbiguity { overflow: true } => write!(f, \"Overflow\"),\n             super::CodeCycle(ref cycle) => write!(f, \"Cycle({:?})\", cycle),\n         }\n     }"}, {"sha": "32bd10f0beba5101e9ba019bed28e3b72325f708", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -1,6 +1,7 @@\n use std::mem;\n \n use rustc_infer::infer::InferCtxt;\n+use rustc_infer::traits::solve::MaybeCause;\n use rustc_infer::traits::Obligation;\n use rustc_infer::traits::{\n     query::NoSolution, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n@@ -41,13 +42,31 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n         self.obligations.push(obligation);\n     }\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n+    fn collect_remaining_errors(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         self.obligations\n             .drain(..)\n-            .map(|obligation| FulfillmentError {\n-                obligation: obligation.clone(),\n-                code: FulfillmentErrorCode::CodeAmbiguity,\n-                root_obligation: obligation,\n+            .map(|obligation| {\n+                let code =\n+                    infcx.probe(|_| match infcx.evaluate_root_goal(obligation.clone().into()) {\n+                        Ok((_, Certainty::Maybe(MaybeCause::Ambiguity), _)) => {\n+                            FulfillmentErrorCode::CodeAmbiguity { overflow: false }\n+                        }\n+                        Ok((_, Certainty::Maybe(MaybeCause::Overflow), _)) => {\n+                            FulfillmentErrorCode::CodeAmbiguity { overflow: true }\n+                        }\n+                        Ok((_, Certainty::Yes, _)) => {\n+                            bug!(\"did not expect successful goal when collecting ambiguity errors\")\n+                        }\n+                        Err(_) => {\n+                            bug!(\"did not expect selection error when collecting ambiguity errors\")\n+                        }\n+                    });\n+\n+                FulfillmentError {\n+                    obligation: obligation.clone(),\n+                    code,\n+                    root_obligation: obligation,\n+                }\n             })\n             .collect()\n     }"}, {"sha": "28967e1cc55b288ea8e22d3fa8e07f805ac05f3f", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -40,13 +40,16 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.obligations.insert(obligation);\n     }\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n+    fn collect_remaining_errors(\n+        &mut self,\n+        _infcx: &InferCtxt<'tcx>,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n         // any remaining obligations are errors\n         self.obligations\n             .iter()\n             .map(|obligation| FulfillmentError {\n                 obligation: obligation.clone(),\n-                code: FulfillmentErrorCode::CodeAmbiguity,\n+                code: FulfillmentErrorCode::CodeAmbiguity { overflow: false },\n                 // FIXME - does Chalk have a notation of 'root obligation'?\n                 // This is just for diagnostics, so it's okay if this is wrong\n                 root_obligation: obligation.clone(),"}, {"sha": "5b49684cfcebc7fb17c592004473d57d846eb3b1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -125,6 +125,8 @@ pub trait TypeErrCtxtExt<'tcx> {\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n+    fn report_overflow_no_abort(&self, obligation: PredicateObligation<'tcx>) -> ErrorGuaranteed;\n+\n     fn report_fulfillment_errors(&self, errors: &[FulfillmentError<'tcx>]) -> ErrorGuaranteed;\n \n     fn report_overflow_obligation<T>(\n@@ -602,6 +604,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         );\n     }\n \n+    fn report_overflow_no_abort(&self, obligation: PredicateObligation<'tcx>) -> ErrorGuaranteed {\n+        let obligation = self.resolve_vars_if_possible(obligation);\n+        let mut err = self.build_overflow_error(&obligation.predicate, obligation.cause.span, true);\n+        self.note_obligation_cause(&mut err, &obligation);\n+        self.point_at_returns_when_relevant(&mut err, &obligation);\n+        err.emit()\n+    }\n+\n     fn report_selection_error(\n         &self,\n         mut obligation: PredicateObligation<'tcx>,\n@@ -1658,9 +1668,12 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {\n                 self.report_projection_error(&error.obligation, e);\n             }\n-            FulfillmentErrorCode::CodeAmbiguity => {\n+            FulfillmentErrorCode::CodeAmbiguity { overflow: false } => {\n                 self.maybe_report_ambiguity(&error.obligation);\n             }\n+            FulfillmentErrorCode::CodeAmbiguity { overflow: true } => {\n+                self.report_overflow_no_abort(error.obligation.clone());\n+            }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n                 self.report_mismatched_types(\n                     &error.obligation.cause,"}, {"sha": "26cadab3e9f1acd67c31395c389844f5ce31b4e8", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -133,8 +133,15 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });\n     }\n \n-    fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>> {\n-        self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n+    fn collect_remaining_errors(\n+        &mut self,\n+        _infcx: &InferCtxt<'tcx>,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        self.predicates\n+            .to_errors(CodeAmbiguity { overflow: false })\n+            .into_iter()\n+            .map(to_fulfillment_error)\n+            .collect()\n     }\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {"}, {"sha": "d4bc5b67220a0caa280857d0c7d86e47a0bc4ca6", "filename": "tests/ui/higher-rank-trait-bounds/issue-95230.new.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.new.stderr?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -1,9 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0275]: overflow evaluating the requirement `for<'a> &'a mut Bar well-formed`\n   --> $DIR/issue-95230.rs:9:13\n    |\n LL |     for<'a> &'a mut Self:;\n-   |             ^^^^^^^^^^^^ cannot infer type for mutable reference `&'a mut Bar`\n+   |             ^^^^^^^^^^^^\n    |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_95230`)\n note: required by a bound in `Bar`\n   --> $DIR/issue-95230.rs:9:13\n    |\n@@ -15,4 +16,4 @@ LL |     for<'a> &'a mut Self:;\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "8c029f5179d1f74881e06da7d2c187ead19772e6", "filename": "tests/ui/traits/new-solver/recursive-self-normalization-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -13,7 +13,7 @@ fn needs_bar<S: Bar>() {}\n \n fn test<T: Foo1<Assoc1 = <T as Foo2>::Assoc2> + Foo2<Assoc2 = <T as Foo1>::Assoc1>>() {\n     needs_bar::<T::Assoc1>();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo1>::Assoc1: Bar`\n }\n \n fn main() {}"}, {"sha": "139b0a456801889f10f27849196fd9d900fe1d1a", "filename": "tests/ui/traits/new-solver/recursive-self-normalization-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -1,10 +1,10 @@\n-error[E0283]: type annotations needed: cannot satisfy `<T as Foo1>::Assoc1: Bar`\n+error[E0275]: overflow evaluating the requirement `<T as Foo1>::Assoc1: Bar`\n   --> $DIR/recursive-self-normalization-2.rs:15:5\n    |\n LL |     needs_bar::<T::Assoc1>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: cannot satisfy `<T as Foo1>::Assoc1: Bar`\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`recursive_self_normalization_2`)\n note: required by a bound in `needs_bar`\n   --> $DIR/recursive-self-normalization-2.rs:12:17\n    |\n@@ -13,4 +13,4 @@ LL | fn needs_bar<S: Bar>() {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "06d187b5fdf73f1656fac3d1c663b37ccc185711", "filename": "tests/ui/traits/new-solver/recursive-self-normalization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -9,7 +9,7 @@ fn needs_bar<S: Bar>() {}\n \n fn test<T: Foo<Assoc = <T as Foo>::Assoc>>() {\n     needs_bar::<T::Assoc>();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Assoc: Bar`\n }\n \n fn main() {}"}, {"sha": "8e9b9b4b4cec33f829725544786b672f0ae21ba6", "filename": "tests/ui/traits/new-solver/recursive-self-normalization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05a6daab84ed594e1394ec4b0e1a9776075a7e12/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr?ref=05a6daab84ed594e1394ec4b0e1a9776075a7e12", "patch": "@@ -1,10 +1,10 @@\n-error[E0283]: type annotations needed: cannot satisfy `<T as Foo>::Assoc: Bar`\n+error[E0275]: overflow evaluating the requirement `<T as Foo>::Assoc: Bar`\n   --> $DIR/recursive-self-normalization.rs:11:5\n    |\n LL |     needs_bar::<T::Assoc>();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: cannot satisfy `<T as Foo>::Assoc: Bar`\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`recursive_self_normalization`)\n note: required by a bound in `needs_bar`\n   --> $DIR/recursive-self-normalization.rs:8:17\n    |\n@@ -13,4 +13,4 @@ LL | fn needs_bar<S: Bar>() {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0275`."}]}