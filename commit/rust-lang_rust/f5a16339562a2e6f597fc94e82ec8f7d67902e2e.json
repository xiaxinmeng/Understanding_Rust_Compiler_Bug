{"sha": "f5a16339562a2e6f597fc94e82ec8f7d67902e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YTE2MzM5NTYyYTJlNmY1OTdmYzk0ZTgyZWM4ZjdkNjc5MDJlMmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-01T10:05:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-01T10:05:10Z"}, "message": "Reduce duplication of vtables", "tree": {"sha": "b317e9ef8c6857bad21feccdc7c03b27e19411ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b317e9ef8c6857bad21feccdc7c03b27e19411ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a16339562a2e6f597fc94e82ec8f7d67902e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a16339562a2e6f597fc94e82ec8f7d67902e2e", "html_url": "https://github.com/rust-lang/rust/commit/f5a16339562a2e6f597fc94e82ec8f7d67902e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a16339562a2e6f597fc94e82ec8f7d67902e2e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cbba98420b27af2c56df1878ff1992c7993a7bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cbba98420b27af2c56df1878ff1992c7993a7bc", "html_url": "https://github.com/rust-lang/rust/commit/4cbba98420b27af2c56df1878ff1992c7993a7bc"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "d22ebd5e2ff58160951eb6d49b914a2313af4387", "filename": "src/constant.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5a16339562a2e6f597fc94e82ec8f7d67902e2e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a16339562a2e6f597fc94e82ec8f7d67902e2e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=f5a16339562a2e6f597fc94e82ec8f7d67902e2e", "patch": "@@ -190,7 +190,6 @@ pub(crate) fn codegen_const_value<'tcx>(\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n-                            fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n                             let data_id = data_id_for_alloc_id(\n                                 &mut fx.constants_cx,\n                                 fx.module,\n@@ -249,12 +248,11 @@ pub(crate) fn codegen_const_value<'tcx>(\n     }\n }\n \n-pub(crate) fn pointer_for_allocation<'tcx>(\n+fn pointer_for_allocation<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     alloc: &'tcx Allocation,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n-    fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n     let data_id =\n         data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.module, alloc_id, alloc.mutability);\n \n@@ -266,12 +264,13 @@ pub(crate) fn pointer_for_allocation<'tcx>(\n     crate::pointer::Pointer::new(global_ptr)\n }\n \n-fn data_id_for_alloc_id(\n+pub(crate) fn data_id_for_alloc_id(\n     cx: &mut ConstantCx,\n     module: &mut dyn Module,\n     alloc_id: AllocId,\n     mutability: rustc_hir::Mutability,\n ) -> DataId {\n+    cx.todo.push(TodoItem::Alloc(alloc_id));\n     *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n         module.declare_anonymous_data(mutability == rustc_hir::Mutability::Mut, false).unwrap()\n     })\n@@ -352,7 +351,14 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n-                let data_id = data_id_for_alloc_id(cx, module, alloc_id, alloc.mutability);\n+                let data_id = *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n+                    module\n+                        .declare_anonymous_data(\n+                            alloc.mutability == rustc_hir::Mutability::Mut,\n+                            false,\n+                        )\n+                        .unwrap()\n+                });\n                 (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n@@ -415,7 +421,6 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     continue;\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n-                    cx.todo.push(TodoItem::Alloc(reloc));\n                     data_id_for_alloc_id(cx, module, reloc, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {"}, {"sha": "021686544ebea9dea03a11ef6de1955356621168", "filename": "src/vtable.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f5a16339562a2e6f597fc94e82ec8f7d67902e2e/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a16339562a2e6f597fc94e82ec8f7d67902e2e/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=f5a16339562a2e6f597fc94e82ec8f7d67902e2e", "patch": "@@ -2,7 +2,7 @@\n //!\n //! See `rustc_codegen_ssa/src/meth.rs` for reference.\n \n-use super::constant::pointer_for_allocation;\n+use crate::constant::data_id_for_alloc_id;\n use crate::prelude::*;\n \n fn vtable_memflags() -> MemFlags {\n@@ -68,9 +68,16 @@ pub(crate) fn get_vtable<'tcx>(\n     ty: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n-    let vtable_alloc_id = fx.tcx.vtable_allocation(ty, trait_ref);\n-    let vtable_allocation = fx.tcx.global_alloc(vtable_alloc_id).unwrap_memory();\n-    let vtable_ptr = pointer_for_allocation(fx, vtable_allocation);\n-\n-    vtable_ptr.get_addr(fx)\n+    let alloc_id = fx.tcx.vtable_allocation(ty, trait_ref);\n+    let data_id = data_id_for_alloc_id(\n+        &mut fx.constants_cx,\n+        &mut *fx.module,\n+        alloc_id,\n+        Mutability::Not,\n+    );\n+    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    if fx.clif_comments.enabled() {\n+        fx.add_comment(local_data_id, format!(\"vtable: {:?}\", alloc_id));\n+    }\n+    fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n }"}]}