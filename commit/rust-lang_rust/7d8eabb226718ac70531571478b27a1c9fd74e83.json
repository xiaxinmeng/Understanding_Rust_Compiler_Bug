{"sha": "7d8eabb226718ac70531571478b27a1c9fd74e83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOGVhYmIyMjY3MThhYzcwNTMxNTcxNDc4YjI3YTFjOWZkNzRlODM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-27T18:57:31Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T00:05:58Z"}, "message": "librustc_back: remove unnecessary `as_slice()` calls", "tree": {"sha": "2540bc08a2b461c16b78de53d74872a6e3a5210f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2540bc08a2b461c16b78de53d74872a6e3a5210f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d8eabb226718ac70531571478b27a1c9fd74e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8eabb226718ac70531571478b27a1c9fd74e83", "html_url": "https://github.com/rust-lang/rust/commit/7d8eabb226718ac70531571478b27a1c9fd74e83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d8eabb226718ac70531571478b27a1c9fd74e83/comments", "author": null, "committer": null, "parents": [{"sha": "00f3c3f7a7058ac1b049810cffc2a8fa71ef7daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/00f3c3f7a7058ac1b049810cffc2a8fa71ef7daa", "html_url": "https://github.com/rust-lang/rust/commit/00f3c3f7a7058ac1b049810cffc2a8fa71ef7daa"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "ea4d5c820f8b8796afb5faca1cdc134553a3d350", "filename": "src/librustc_back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=7d8eabb226718ac70531571478b27a1c9fd74e83", "patch": "@@ -12,7 +12,7 @@ use target_strs;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    let cc_args = if target_triple.as_slice().contains(\"thumb\") {\n+    let cc_args = if target_triple.contains(\"thumb\") {\n         vec!(\"-mthumb\".to_string())\n     } else {\n         vec!(\"-marm\".to_string())"}, {"sha": "ea691b85f6c27b98ec06a280f6fe713aec3fa136", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=7d8eabb226718ac70531571478b27a1c9fd74e83", "patch": "@@ -156,9 +156,9 @@ mod test {\n             \"rpath2\".to_string(),\n             \"rpath1\".to_string()\n         ]);\n-        assert!(res.as_slice() == [\n-            \"rpath1\".to_string(),\n-            \"rpath2\".to_string()\n+        assert!(res == [\n+            \"rpath1\",\n+            \"rpath2\",\n         ]);\n     }\n \n@@ -176,11 +176,11 @@ mod test {\n             \"4a\".to_string(),\n             \"3\".to_string()\n         ]);\n-        assert!(res.as_slice() == [\n-            \"1a\".to_string(),\n-            \"2\".to_string(),\n-            \"4a\".to_string(),\n-            \"3\".to_string()\n+        assert!(res == [\n+            \"1a\",\n+            \"2\",\n+            \"4a\",\n+            \"3\",\n         ]);\n     }\n \n@@ -196,7 +196,7 @@ mod test {\n             realpath: |p| Ok(p.clone())\n         };\n         let res = get_rpath_relative_to_output(config, &Path::new(\"lib/libstd.so\"));\n-        assert_eq!(res.as_slice(), \"$ORIGIN/../lib\");\n+        assert_eq!(res, \"$ORIGIN/../lib\");\n     }\n \n     #[test]\n@@ -211,7 +211,7 @@ mod test {\n             realpath: |p| Ok(p.clone())\n         };\n         let res = get_rpath_relative_to_output(config, &Path::new(\"lib/libstd.so\"));\n-        assert_eq!(res.as_slice(), \"$ORIGIN/../lib\");\n+        assert_eq!(res, \"$ORIGIN/../lib\");\n     }\n \n     #[test]\n@@ -226,7 +226,7 @@ mod test {\n             realpath: |p| Ok(p.clone())\n         };\n         let res = get_rpath_relative_to_output(config, &Path::new(\"lib/libstd.so\"));\n-        assert_eq!(res.as_slice(), \"$ORIGIN/../lib\");\n+        assert_eq!(res, \"$ORIGIN/../lib\");\n     }\n \n     #[test]\n@@ -241,6 +241,6 @@ mod test {\n             realpath: |p| Ok(p.clone())\n         };\n         let res = get_rpath_relative_to_output(config, &Path::new(\"lib/libstd.so\"));\n-        assert_eq!(res.as_slice(), \"@loader_path/../lib\");\n+        assert_eq!(res, \"@loader_path/../lib\");\n     }\n }"}, {"sha": "1b662ef17876007c53c34385c25ca138f93ca417", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=7d8eabb226718ac70531571478b27a1c9fd74e83", "patch": "@@ -263,7 +263,7 @@ pub trait Digest {\n     /// Convenience function that retrieves the result of a digest as a\n     /// String in hexadecimal format.\n     fn result_str(&mut self) -> String {\n-        self.result_bytes().as_slice().to_hex().to_string()\n+        self.result_bytes().to_hex().to_string()\n     }\n }\n \n@@ -568,7 +568,6 @@ mod tests {\n             while left > 0u {\n                 let take = (left + 1u) / 2u;\n                 sh.input_str(t.input\n-                              .as_slice()\n                               .slice(len - left, take + len - left));\n                 left = left - take;\n             }"}, {"sha": "76adc4e472f82b7e98f0387d0d8744086a217813", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8eabb226718ac70531571478b27a1c9fd74e83/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=7d8eabb226718ac70531571478b27a1c9fd74e83", "patch": "@@ -200,7 +200,7 @@ impl Target {\n     pub fn adjust_abi(&self, abi: abi::Abi) -> abi::Abi {\n         match abi {\n             abi::System => {\n-                if self.options.is_like_windows && self.arch.as_slice() == \"x86\" {\n+                if self.options.is_like_windows && self.arch == \"x86\" {\n                     abi::Stdcall\n                 } else {\n                     abi::C\n@@ -308,7 +308,6 @@ impl Target {\n             ( $($name:ident),+ ) => (\n                 {\n                     let target = target.replace(\"-\", \"_\");\n-                    let target = target.as_slice();\n                     if false { }\n                     $(\n                         else if target == stringify!($name) {"}]}