{"sha": "af099bb2401bc9fe7aa753a20086d51c49816bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMDk5YmIyNDAxYmM5ZmU3YWE3NTNhMjAwODZkNTFjNDk4MTZiY2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-09T06:09:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-13T14:57:59Z"}, "message": "Cache const eval queries", "tree": {"sha": "55179c08f796e904ebf863b499e777dbb87c15f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55179c08f796e904ebf863b499e777dbb87c15f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af099bb2401bc9fe7aa753a20086d51c49816bcd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqn5vcACgkQpp+NIls6\n19nufw/+JUzm4wYX5i36gYDPed8GhgxegC5hZJd9qp64nhBHYp8JeM28BielD/Ua\nIMdgL3Y5nZXclYWQDsAfhAFwizZX0SsyU4SYqPGJvjEIfpyWc09in/RxKCUuyuCC\nDyv2euIBe22jRLfX5Yhv8/a6+B0PSt/jgKopHbamK2n3MATE3kmtrW7S7qgCM/2p\nYeWdk0+IblWHkH9QujkpSiUw4TsE/qcuJV1tanizBoeBNPbTlKgQviEn1HPURDb3\n5K646YR4MFsNhG9dFnd+TTaa9zrhPBVqTPnL9pBCzsnwJupNqNiR/DH1SRo1maEq\np+v+Ku1Wq0h7GMiSPGIXluQS9Y62gD2fNeWCRZaDXWpTGkKS/oBO/GjbhxKIzNDJ\n/cg5Y74KCsBuwvFC6C8vIE2k/NqnrFCt7SkoIK3SnaKlj5UgmmYVgIQBn55neuNZ\n8wVX+7lxIIIEk03b9WNuOF/FIcH04W4mFAXdpfjBamkthRNv5xjO8nhyu+zlnXzq\nfDUGAy2vP9RjTzEGF0ftk5MyQokag/pF3acx3IK5rlrU2RbK6UcDh1yMT+zXKu7N\np7liBSYUKBrUaU+LNFPN4LyzymqAtLwDOsHCWeYmAofDWet62MCDLPM2hoIeO4Cd\nbLRsGI36ITaMm+i5gjFp9oZf3uwWr1YPAqfSgylLXiNcUCBmMLA=\n=mbpx\n-----END PGP SIGNATURE-----", "payload": "tree 55179c08f796e904ebf863b499e777dbb87c15f3\nparent e65547d4fad0425d1db4f33a4d8134bf2cad939e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520575764 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520953079 +0100\n\nCache const eval queries\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af099bb2401bc9fe7aa753a20086d51c49816bcd", "html_url": "https://github.com/rust-lang/rust/commit/af099bb2401bc9fe7aa753a20086d51c49816bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af099bb2401bc9fe7aa753a20086d51c49816bcd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65547d4fad0425d1db4f33a4d8134bf2cad939e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65547d4fad0425d1db4f33a4d8134bf2cad939e", "html_url": "https://github.com/rust-lang/rust/commit/e65547d4fad0425d1db4f33a4d8134bf2cad939e"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "7e2ece1b334b9e09dbae80503ddf45973b7a35a1", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af099bb2401bc9fe7aa753a20086d51c49816bcd/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af099bb2401bc9fe7aa753a20086d51c49816bcd/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=af099bb2401bc9fe7aa753a20086d51c49816bcd", "patch": "@@ -156,6 +156,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n     fn describe(tcx: TyCtxt, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>) -> String {\n         format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.instance.def.def_id()))\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(key: Self::Key) -> bool {\n+        key.value.instance.def_id().is_local()\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.load_constant(tcx, id).map(Ok)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::mir_keys<'tcx> {"}, {"sha": "27eb7de2d06aa31ebffeec80b7c8ab18518e0c78", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af099bb2401bc9fe7aa753a20086d51c49816bcd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af099bb2401bc9fe7aa753a20086d51c49816bcd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=af099bb2401bc9fe7aa753a20086d51c49816bcd", "patch": "@@ -82,7 +82,7 @@ pub use self::on_disk_cache::OnDiskCache;\n // the driver creates (using several `rustc_*` crates).\n //\n // The result of query must implement Clone. They must also implement ty::maps::values::Value\n-// which produces an appropiate error value if the query resulted in a query cycle.\n+// which produces an appropriate error value if the query resulted in a query cycle.\n // Queries marked with `fatal_cycle` do not need that implementation\n // as they will raise an fatal error on query cycles instead.\n define_maps! { <'tcx>"}, {"sha": "bb0b1975b9e46582279b5c84d5e1e8495e40c301", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/af099bb2401bc9fe7aa753a20086d51c49816bcd/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af099bb2401bc9fe7aa753a20086d51c49816bcd/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=af099bb2401bc9fe7aa753a20086d51c49816bcd", "patch": "@@ -75,6 +75,10 @@ pub struct OnDiskCache<'sess> {\n     // A map from dep-node to the position of any associated diagnostics in\n     // `serialized_data`.\n     prev_diagnostics_index: FxHashMap<SerializedDepNodeIndex, AbsoluteBytePos>,\n+\n+    // A map from dep-node to the position of any associated constants in\n+    // `serialized_data`.\n+    prev_constants_index: FxHashMap<SerializedDepNodeIndex, AbsoluteBytePos>,\n }\n \n // This type is used only for (de-)serialization.\n@@ -84,8 +88,10 @@ struct Footer {\n     prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n     query_result_index: EncodedQueryResultIndex,\n     diagnostics_index: EncodedQueryResultIndex,\n+    constants_index: EncodedConstantsIndex,\n }\n \n+type EncodedConstantsIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n type EncodedQueryResultIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n type EncodedDiagnosticsIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n type EncodedDiagnostics = Vec<Diagnostic>;\n@@ -139,6 +145,7 @@ impl<'sess> OnDiskCache<'sess> {\n             current_diagnostics: RefCell::new(FxHashMap()),\n             query_result_index: footer.query_result_index.into_iter().collect(),\n             prev_diagnostics_index: footer.diagnostics_index.into_iter().collect(),\n+            prev_constants_index: footer.constants_index.into_iter().collect(),\n             synthetic_expansion_infos: RefCell::new(FxHashMap()),\n         }\n     }\n@@ -154,6 +161,7 @@ impl<'sess> OnDiskCache<'sess> {\n             current_diagnostics: RefCell::new(FxHashMap()),\n             query_result_index: FxHashMap(),\n             prev_diagnostics_index: FxHashMap(),\n+            prev_constants_index: FxHashMap(),\n             synthetic_expansion_infos: RefCell::new(FxHashMap()),\n         }\n     }\n@@ -223,6 +231,45 @@ impl<'sess> OnDiskCache<'sess> {\n                 encode_query_results::<trans_fn_attrs, _>(tcx, enc, qri)?;\n             }\n \n+            // encode successful constant evaluations\n+            let constants_index = {\n+                let mut constants_index = EncodedConstantsIndex::new();\n+                use ty::maps::queries::const_eval;\n+                use ty::maps::plumbing::GetCacheInternal;\n+                use ty::maps::config::QueryDescription;\n+                for (key, entry) in const_eval::get_cache_internal(tcx).map.iter() {\n+                    if let Ok(ref constant) = entry.value {\n+                        if const_eval::cache_on_disk(key.clone()) {\n+                            trace!(\"caching constant {:?} with value {:#?}\", key, constant);\n+                            let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n+\n+                            // Record position of the cache entry\n+                            constants_index.push((\n+                                dep_node,\n+                                AbsoluteBytePos::new(encoder.position()),\n+                            ));\n+                            let did = key.value.instance.def_id();\n+                            let constant = if key.value.promoted.is_none()\n+                                           && tcx.is_static(did).is_some() {\n+                                // memorize the allocation for the static, too, so\n+                                // we can refer to the static, not just read its value\n+                                // since we have had a successful query, the cached value must\n+                                // exist, so we can unwrap it\n+                                let cached = tcx.interpret_interner.get_cached(did).unwrap();\n+                                (constant, Some(cached))\n+                            } else {\n+                                (constant, None)\n+                            };\n+\n+                            // Encode the type check tables with the SerializedDepNodeIndex\n+                            // as tag.\n+                            encoder.encode_tagged(dep_node, &constant)?;\n+                        }\n+                    }\n+                }\n+                constants_index\n+            };\n+\n             // Encode diagnostics\n             let diagnostics_index = {\n                 let mut diagnostics_index = EncodedDiagnosticsIndex::new();\n@@ -256,6 +303,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 prev_cnums,\n                 query_result_index,\n                 diagnostics_index,\n+                constants_index,\n             })?;\n \n             // Encode the position of the footer as the last 8 bytes of the\n@@ -278,6 +326,25 @@ impl<'sess> OnDiskCache<'sess> {\n         })\n     }\n \n+    /// Load a constant emitted during the previous compilation session.\n+    pub fn load_constant<'a, 'tcx>(&self,\n+                                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                      dep_node_index: SerializedDepNodeIndex)\n+                                      -> Option<&'tcx ty::Const<'tcx>> {\n+        type Encoded<'tcx> = (ty::Const<'tcx>, Option<interpret::AllocId>);\n+        let constant: Option<Encoded<'tcx>> = self.load_indexed(\n+            tcx,\n+            dep_node_index,\n+            &self.prev_constants_index,\n+            \"constants\");\n+\n+        constant.map(|(c, _alloc_id)| {\n+            // the AllocId decoding already registers the AllocId to its DefId\n+            // so we don't need to take additional actions here\n+            tcx.mk_const(c)\n+        })\n+    }\n+\n     /// Load a diagnostic emitted during the previous compilation session.\n     pub fn load_diagnostics<'a, 'tcx>(&self,\n                                       tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -563,6 +630,7 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<interpret::AllocId> for CacheDecoder<'a, '\n                 tcx.interpret_interner.intern_at_reserved(alloc_id, allocation);\n \n                 if let Some(glob) = Option::<DefId>::decode(self)? {\n+                    trace!(\"connecting alloc {:?} with {:?}\", alloc_id, glob);\n                     tcx.interpret_interner.cache(glob, alloc_id);\n                 }\n "}]}