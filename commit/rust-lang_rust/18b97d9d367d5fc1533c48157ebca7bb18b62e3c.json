{"sha": "18b97d9d367d5fc1533c48157ebca7bb18b62e3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4Yjk3ZDlkMzY3ZDVmYzE1MzNjNDgxNTdlYmNhN2JiMThiNjJlM2M=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T23:43:52Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T23:43:52Z"}, "message": "vscode: migrate rust-analyzer-api to import * as lc as per matklad and kjeremy", "tree": {"sha": "f6218ef4a8def297d1da81cd2f3024276cbbe68f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6218ef4a8def297d1da81cd2f3024276cbbe68f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b97d9d367d5fc1533c48157ebca7bb18b62e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b97d9d367d5fc1533c48157ebca7bb18b62e3c", "html_url": "https://github.com/rust-lang/rust/commit/18b97d9d367d5fc1533c48157ebca7bb18b62e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b97d9d367d5fc1533c48157ebca7bb18b62e3c/comments", "author": null, "committer": null, "parents": [{"sha": "72e81dae71b8d2efbc418cba206b1988727766b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e81dae71b8d2efbc418cba206b1988727766b7", "html_url": "https://github.com/rust-lang/rust/commit/72e81dae71b8d2efbc418cba206b1988727766b7"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "c5a010e94722075a7cb8d4857135e78a51c6f322", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/18b97d9d367d5fc1533c48157ebca7bb18b62e3c/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/18b97d9d367d5fc1533c48157ebca7bb18b62e3c/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=18b97d9d367d5fc1533c48157ebca7bb18b62e3c", "patch": "@@ -2,17 +2,17 @@\n  * This file mirrors `crates/rust-analyzer/src/req.rs` declarations.\n  */\n \n-import { RequestType, TextDocumentIdentifier, Position, Range, TextDocumentPositionParams, Location, NotificationType, WorkspaceEdit } from \"vscode-languageclient\";\n+import * as lc from \"vscode-languageclient\";\n \n type Option<T> = null | T;\n type Vec<T> = T[];\n type FxHashMap<K extends PropertyKey, V> = Record<K, V>;\n \n function request<TParams, TResult>(method: string) {\n-    return new RequestType<TParams, TResult, unknown>(`rust-analyzer/${method}`);\n+    return new lc.RequestType<TParams, TResult, unknown>(`rust-analyzer/${method}`);\n }\n function notification<TParam>(method: string) {\n-    return new NotificationType<TParam>(method);\n+    return new lc.NotificationType<TParam>(method);\n }\n \n \n@@ -23,15 +23,15 @@ export const collectGarbage = request<null, null>(\"collectGarbage\");\n \n \n export interface SyntaxTreeParams {\n-    textDocument: TextDocumentIdentifier;\n-    range: Option<Range>;\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: Option<lc.Range>;\n }\n export const syntaxTree = request<SyntaxTreeParams, string>(\"syntaxTree\");\n \n \n export interface ExpandMacroParams {\n-    textDocument: TextDocumentIdentifier;\n-    position: Option<Position>;\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: Option<lc.Position>;\n }\n export interface ExpandedMacro {\n     name: string;\n@@ -41,42 +41,42 @@ export const expandMacro = request<ExpandMacroParams, Option<ExpandedMacro>>(\"ex\n \n \n export interface FindMatchingBraceParams {\n-    textDocument: TextDocumentIdentifier;\n-    offsets: Vec<Position>;\n+    textDocument: lc.TextDocumentIdentifier;\n+    offsets: Vec<lc.Position>;\n }\n-export const findMatchingBrace = request<FindMatchingBraceParams, Vec<Position>>(\"findMatchingBrace\");\n+export const findMatchingBrace = request<FindMatchingBraceParams, Vec<lc.Position>>(\"findMatchingBrace\");\n \n \n export interface PublishDecorationsParams {\n     uri: string;\n     decorations: Vec<Decoration>;\n }\n export interface Decoration {\n-    range: Range;\n+    range: lc.Range;\n     tag: string;\n     bindingHash: Option<string>;\n }\n-export const decorationsRequest = request<TextDocumentIdentifier, Vec<Decoration>>(\"decorationsRequest\");\n+export const decorationsRequest = request<lc.TextDocumentIdentifier, Vec<Decoration>>(\"decorationsRequest\");\n \n \n-export const parentModule = request<TextDocumentPositionParams, Vec<Location>>(\"parentModule\");\n+export const parentModule = request<lc.TextDocumentPositionParams, Vec<lc.Location>>(\"parentModule\");\n \n \n export interface JoinLinesParams {\n-    textDocument: TextDocumentIdentifier;\n-    range: Range;\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n }\n export const joinLines = request<JoinLinesParams, SourceChange>(\"joinLines\");\n \n \n-export const onEnter = request<TextDocumentPositionParams, Option<SourceChange>>(\"onEnter\");\n+export const onEnter = request<lc.TextDocumentPositionParams, Option<SourceChange>>(\"onEnter\");\n \n export interface RunnablesParams {\n-    textDocument: TextDocumentIdentifier;\n-    position: Option<Position>;\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: Option<lc.Position>;\n }\n export interface Runnable {\n-    range: Range;\n+    range: lc.Range;\n     label: string;\n     bin: string;\n     args: Vec<string>;\n@@ -91,12 +91,12 @@ export const enum InlayKind {\n     ParameterHint = \"ParameterHint\",\n }\n export interface InlayHint {\n-    range: Range;\n+    range: lc.Range;\n     kind: InlayKind;\n     label: string;\n }\n export interface InlayHintsParams {\n-    textDocument: TextDocumentIdentifier;\n+    textDocument: lc.TextDocumentIdentifier;\n }\n export const inlayHints = request<InlayHintsParams, Vec<InlayHint>>(\"inlayHints\");\n \n@@ -112,6 +112,6 @@ export const publishDecorations = notification<PublishDecorationsParams>(\"publis\n \n export interface SourceChange {\n     label: string;\n-    workspaceEdit: WorkspaceEdit;\n-    cursorPosition: Option<TextDocumentPositionParams>;\n+    workspaceEdit: lc.WorkspaceEdit;\n+    cursorPosition: Option<lc.TextDocumentPositionParams>;\n }"}]}