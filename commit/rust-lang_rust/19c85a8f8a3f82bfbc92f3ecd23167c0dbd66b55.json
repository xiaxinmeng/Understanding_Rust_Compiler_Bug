{"sha": "19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Yzg1YThmOGEzZjgyYmZiYzkyZjNlY2QyMzE2N2MwZGJkNjZiNTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T17:37:31Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T14:36:46Z"}, "message": "Move def_id_to_path to use site in visit_ast", "tree": {"sha": "e1e683d09761b0dc03f0bc2b9d9bd5a1a67b7130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1e683d09761b0dc03f0bc2b9d9bd5a1a67b7130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "html_url": "https://github.com/rust-lang/rust/commit/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ea7b794718306c7b2945f63f3dd01919fc73c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ea7b794718306c7b2945f63f3dd01919fc73c0", "html_url": "https://github.com/rust-lang/rust/commit/65ea7b794718306c7b2945f63f3dd01919fc73c0"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "0c38e68a764f4c76bb59a79988558e905b3fa854", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "patch": "@@ -39,7 +39,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::default::Default;\n use std::{mem, slice, vec};\n-use std::iter::{FromIterator, once};\n+use std::iter::FromIterator;\n use std::rc::Rc;\n use std::cell::RefCell;\n use std::sync::Arc;\n@@ -4398,24 +4398,6 @@ impl Clean<TypeBindingKind> for hir::TypeBindingKind {\n     }\n }\n \n-pub fn def_id_to_path(\n-    cx: &DocContext<'_>,\n-    did: DefId,\n-    name: Option<String>\n-) -> Vec<String> {\n-    let crate_name = name.unwrap_or_else(|| cx.tcx.crate_name(did.krate).to_string());\n-    let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n-        // extern blocks have an empty name\n-        let s = elem.data.to_string();\n-        if !s.is_empty() {\n-            Some(s)\n-        } else {\n-            None\n-        }\n-    });\n-    once(crate_name).chain(relative).collect()\n-}\n-\n pub fn enter_impl_trait<F, R>(cx: &DocContext<'_>, f: F) -> R\n where\n     F: FnOnce() -> R,"}, {"sha": "878f1a476be9c66eaebe02bd1573dcf703187ca0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "patch": "@@ -15,9 +15,26 @@ use syntax_pos::{self, Span};\n use std::mem;\n \n use crate::core;\n-use crate::clean::{self, AttributesExt, NestedAttributesExt, def_id_to_path};\n+use crate::clean::{self, AttributesExt, NestedAttributesExt};\n use crate::doctree::*;\n \n+fn def_id_to_path(\n+    cx: &core::DocContext<'_>,\n+    did: DefId,\n+    name: Option<String>\n+) -> Vec<String> {\n+    let crate_name = name.unwrap_or_else(|| cx.tcx.crate_name(did.krate).to_string());\n+    let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n+        // extern blocks have an empty name\n+        let s = elem.data.to_string();\n+        if !s.is_empty() {\n+            Some(s)\n+        } else {\n+            None\n+        }\n+    });\n+    std::iter::once(crate_name).chain(relative).collect()\n+}\n \n // Also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?."}]}