{"sha": "37a3131640d0fa2633aa26db7f849d110250ce51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTMxMzE2NDBkMGZhMjYzM2FhMjZkYjdmODQ5ZDExMDI1MGNlNTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T22:00:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:37Z"}, "message": "doc: Update with changes in field privacy", "tree": {"sha": "1e66451d207e19694d62608a8e1724c71796dc00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e66451d207e19694d62608a8e1724c71796dc00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a3131640d0fa2633aa26db7f849d110250ce51", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a3131640d0fa2633aa26db7f849d110250ce51", "html_url": "https://github.com/rust-lang/rust/commit/37a3131640d0fa2633aa26db7f849d110250ce51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a3131640d0fa2633aa26db7f849d110250ce51/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "809342719541db989bee43e695f1d88b8340ac4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/809342719541db989bee43e695f1d88b8340ac4e", "html_url": "https://github.com/rust-lang/rust/commit/809342719541db989bee43e695f1d88b8340ac4e"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "4c8e32982c10e75c8a84e721e427acb755728524", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a3131640d0fa2633aa26db7f849d110250ce51/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/37a3131640d0fa2633aa26db7f849d110250ce51/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=37a3131640d0fa2633aa26db7f849d110250ce51", "patch": "@@ -200,7 +200,7 @@ use std::ptr;\n // Unique<T> has the same semantics as ~T\n pub struct Unique<T> {\n     // It contains a single raw, mutable pointer to the object in question.\n-    priv ptr: *mut T\n+    ptr: *mut T\n }\n \n // Implement methods for creating and using the values in the box."}, {"sha": "98db4cb536791593e37e6910dc3b3751f7b08697", "filename": "src/doc/rust.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37a3131640d0fa2633aa26db7f849d110250ce51/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/37a3131640d0fa2633aa26db7f849d110250ce51/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=37a3131640d0fa2633aa26db7f849d110250ce51", "patch": "@@ -1527,12 +1527,9 @@ of an item to see whether it should be allowed or not. This is where privacy\n warnings are generated, or otherwise \"you used a private item of another module\n and weren't allowed to.\"\n \n-By default, everything in rust is *private*, with two exceptions. The first\n-exception is that struct fields are public by default (but the struct itself is\n-still private by default), and the remaining exception is that enum variants in\n-a `pub` enum are the default visibility of the enum container itself.. You are\n-allowed to alter this default visibility with the `pub` keyword (or `priv`\n-keyword for struct fields and enum variants). When an item is declared as `pub`,\n+By default, everything in rust is *private*, with one exception. Enum variants\n+in a `pub` enum are also public by default. You are allowed to alter this\n+default visibility with the `priv` keyword. When an item is declared as `pub`,\n it can be thought of as being accessible to the outside world. For example:\n \n ~~~~\n@@ -1542,7 +1539,7 @@ struct Foo;\n \n // Declare a public struct with a private field\n pub struct Bar {\n-    priv field: int\n+    field: int\n }\n \n // Declare a public enum with public and private variants\n@@ -2354,7 +2351,7 @@ The following are examples of structure expressions:\n ~~~~\n # struct Point { x: f64, y: f64 }\n # struct TuplePoint(f64, f64);\n-# mod game { pub struct User<'a> { name: &'a str, age: uint, score: uint } }\n+# mod game { pub struct User<'a> { pub name: &'a str, pub age: uint, pub score: uint } }\n # struct Cookie; fn some_fn<T>(t: T) {}\n Point {x: 10.0, y: 20.0};\n TuplePoint(10.0, 20.0);\n@@ -3140,7 +3137,7 @@ The types `char` and `str` hold textual data.\n A value of type `char` is a [Unicode scalar value](\n http://www.unicode.org/glossary/#unicode_scalar_value)\n (ie. a code point that is not a surrogate),\n-represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF \n+represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF\n or 0xE000 to 0x10FFFF range.\n A `[char]` vector is effectively an UCS-4 / UTF-32 string.\n "}, {"sha": "3423a5e090eea44719cdc19fc0c36fe19c987c0e", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a3131640d0fa2633aa26db7f849d110250ce51/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/37a3131640d0fa2633aa26db7f849d110250ce51/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=37a3131640d0fa2633aa26db7f849d110250ce51", "patch": "@@ -2657,8 +2657,8 @@ Rust doesn't support encapsulation: both struct fields and methods can\n be private. But this encapsulation is at the module level, not the\n struct level.\n \n-For convenience, fields are _public_ by default, and can be made _private_ with\n-the `priv` keyword:\n+Fields are _private_ by default, and can be made _public_ with\n+the `pub` keyword:\n \n ~~~\n mod farm {\n@@ -2667,8 +2667,8 @@ mod farm {\n # impl Human { pub fn rest(&self) { } }\n # pub fn make_me_a_farm() -> Farm { Farm { chickens: ~[], farmer: Human(0) } }\n     pub struct Farm {\n-        priv chickens: ~[Chicken],\n-        farmer: Human\n+        chickens: ~[Chicken],\n+        pub farmer: Human\n     }\n \n     impl Farm {"}]}