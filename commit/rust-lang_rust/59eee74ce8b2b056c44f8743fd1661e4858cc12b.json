{"sha": "59eee74ce8b2b056c44f8743fd1661e4858cc12b", "node_id": "C_kwDOAAsO6NoAKDU5ZWVlNzRjZThiMmIwNTZjNDRmODc0M2ZkMTY2MWU0ODU4Y2MxMmI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-03T17:10:32Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-03T17:30:05Z"}, "message": "Fix link generation for local primitive types in rustdoc JSON output", "tree": {"sha": "69d1b7f3ade687f4428517f0c633bf1eaa3233e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d1b7f3ade687f4428517f0c633bf1eaa3233e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59eee74ce8b2b056c44f8743fd1661e4858cc12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59eee74ce8b2b056c44f8743fd1661e4858cc12b", "html_url": "https://github.com/rust-lang/rust/commit/59eee74ce8b2b056c44f8743fd1661e4858cc12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59eee74ce8b2b056c44f8743fd1661e4858cc12b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1567730c0ea07e41fcabd14332ad701857d9f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1567730c0ea07e41fcabd14332ad701857d9f93", "html_url": "https://github.com/rust-lang/rust/commit/c1567730c0ea07e41fcabd14332ad701857d9f93"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "4a81a9d2d61a5f8aad1cfb1608a980d034a66917", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/59eee74ce8b2b056c44f8743fd1661e4858cc12b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eee74ce8b2b056c44f8743fd1661e4858cc12b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=59eee74ce8b2b056c44f8743fd1661e4858cc12b", "patch": "@@ -8,8 +8,9 @@ use std::convert::From;\n use std::fmt;\n \n use rustc_ast::ast;\n-use rustc_hir::{def::CtorKind, def_id::DefId};\n+use rustc_hir::{def::CtorKind, def::DefKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_span::symbol::sym;\n use rustc_span::{Pos, Symbol};\n use rustc_target::spec::abi::Abi as RustcAbi;\n \n@@ -217,13 +218,27 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n \n     impl<'a> fmt::Display for DisplayDefId<'a> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let name = match self.2 {\n+            let DisplayDefId(def_id, tcx, name) = self;\n+            let name = match name {\n                 Some(name) => format!(\":{}\", name.as_u32()),\n-                None => self\n-                    .1\n-                    .opt_item_name(self.0)\n-                    .map(|n| format!(\":{}\", n.as_u32()))\n-                    .unwrap_or_default(),\n+                None => {\n+                    // We need this workaround because primitive types' DefId actually refers to\n+                    // their parent module, which isn't present in the output JSON items. So\n+                    // instead, we directly get the primitive symbol and convert it to u32 to\n+                    // generate the ID.\n+                    if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n+                        let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n+                            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n+                            .filter(|attr| attr.has_name(sym::primitive))\n+                            .find_map(|attr| attr.value_str()) {\n+                        format!(\":{}\", prim.as_u32())\n+                    } else {\n+                        tcx\n+                        .opt_item_name(*def_id)\n+                        .map(|n| format!(\":{}\", n.as_u32()))\n+                        .unwrap_or_default()\n+                    }\n+                }\n             };\n             write!(f, \"{}:{}{}\", self.0.krate.as_u32(), u32::from(self.0.index), name)\n         }"}]}