{"sha": "c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjhlOWJiMmU1OGQ3ZTJmZTk2NzlhYzgxYzMzYTg1OTUyMmQ1YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-25T01:28:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-25T01:28:23Z"}, "message": "Auto merge of #34441 - tbu-:pr_dont_ignore_errors, r=alexcrichton\n\nDon't ignore errors of syscalls in std::sys::unix::fd\n\nIf any of these syscalls fail, it indicates a programmer error that\nshould not be silently ignored.", "tree": {"sha": "6c64a76c56ee63d9419619eb1db0e9fb89944ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c64a76c56ee63d9419619eb1db0e9fb89944ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "html_url": "https://github.com/rust-lang/rust/commit/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d011290e393596c6a8de15da90f358b16c5bc0c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d011290e393596c6a8de15da90f358b16c5bc0c6", "html_url": "https://github.com/rust-lang/rust/commit/d011290e393596c6a8de15da90f358b16c5bc0c6"}, {"sha": "9347ffcf5c065b3d1aaac8c06c5c34d98bef96b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9347ffcf5c065b3d1aaac8c06c5c34d98bef96b9", "html_url": "https://github.com/rust-lang/rust/commit/9347ffcf5c065b3d1aaac8c06c5c34d98bef96b9"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "b99f4a2eacde563d489fa690b06bbb19fea50f35", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "patch": "@@ -62,32 +62,31 @@ impl FileDesc {\n     }\n \n     #[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\", target_os = \"emscripten\")))]\n-    pub fn set_cloexec(&self) {\n+    pub fn set_cloexec(&self) -> io::Result<()> {\n         unsafe {\n-            let ret = libc::ioctl(self.fd, libc::FIOCLEX);\n-            debug_assert_eq!(ret, 0);\n+            cvt(libc::ioctl(self.fd, libc::FIOCLEX))?;\n+            Ok(())\n         }\n     }\n     #[cfg(any(target_env = \"newlib\", target_os = \"solaris\", target_os = \"emscripten\"))]\n-    pub fn set_cloexec(&self) {\n+    pub fn set_cloexec(&self) -> io::Result<()> {\n         unsafe {\n-            let previous = libc::fcntl(self.fd, libc::F_GETFD);\n-            let ret = libc::fcntl(self.fd, libc::F_SETFD, previous | libc::FD_CLOEXEC);\n-            debug_assert_eq!(ret, 0);\n+            let previous = cvt(libc::fcntl(self.fd, libc::F_GETFD))?;\n+            cvt(libc::fcntl(self.fd, libc::F_SETFD, previous | libc::FD_CLOEXEC))?;\n+            Ok(())\n         }\n     }\n \n-    pub fn set_nonblocking(&self, nonblocking: bool) {\n+    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         unsafe {\n-            let previous = libc::fcntl(self.fd, libc::F_GETFL);\n-            debug_assert!(previous != -1);\n+            let previous = cvt(libc::fcntl(self.fd, libc::F_GETFL))?;\n             let new = if nonblocking {\n                 previous | libc::O_NONBLOCK\n             } else {\n                 previous & !libc::O_NONBLOCK\n             };\n-            let ret = libc::fcntl(self.fd, libc::F_SETFL, new);\n-            debug_assert!(ret != -1);\n+            cvt(libc::fcntl(self.fd, libc::F_SETFL, new))?;\n+            Ok(())\n         }\n     }\n \n@@ -114,8 +113,8 @@ impl FileDesc {\n \n         let make_filedesc = |fd| {\n             let fd = FileDesc::new(fd);\n-            fd.set_cloexec();\n-            fd\n+            fd.set_cloexec()?;\n+            Ok(fd)\n         };\n         static TRY_CLOEXEC: AtomicBool =\n             AtomicBool::new(!cfg!(target_os = \"android\"));\n@@ -127,7 +126,7 @@ impl FileDesc {\n                 // though it reported doing so on F_DUPFD_CLOEXEC.\n                 Ok(fd) => {\n                     return Ok(if cfg!(target_os = \"linux\") {\n-                        make_filedesc(fd)\n+                        make_filedesc(fd)?\n                     } else {\n                         FileDesc::new(fd)\n                     })\n@@ -138,7 +137,7 @@ impl FileDesc {\n                 Err(e) => return Err(e),\n             }\n         }\n-        cvt(unsafe { libc::fcntl(fd, libc::F_DUPFD, 0) }).map(make_filedesc)\n+        cvt(unsafe { libc::fcntl(fd, libc::F_DUPFD, 0) }).and_then(make_filedesc)\n     }\n }\n "}, {"sha": "0524851df91abeb0c091a0a254b616388dd4b007", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "patch": "@@ -418,7 +418,7 @@ impl File {\n         // The CLOEXEC flag, however, is supported on versions of OSX/BSD/etc\n         // that we support, so we only do this on Linux currently.\n         if cfg!(target_os = \"linux\") {\n-            fd.set_cloexec();\n+            fd.set_cloexec()?;\n         }\n \n         Ok(File(fd))"}, {"sha": "a784741c88cc7f3536857065b6490db772e82dc1", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "patch": "@@ -77,7 +77,7 @@ impl Socket {\n \n             let fd = cvt(libc::socket(fam, ty, 0))?;\n             let fd = FileDesc::new(fd);\n-            fd.set_cloexec();\n+            fd.set_cloexec()?;\n             Ok(Socket(fd))\n         }\n     }\n@@ -99,9 +99,9 @@ impl Socket {\n \n             cvt(libc::socketpair(fam, ty, 0, fds.as_mut_ptr()))?;\n             let a = FileDesc::new(fds[0]);\n-            a.set_cloexec();\n             let b = FileDesc::new(fds[1]);\n-            b.set_cloexec();\n+            a.set_cloexec()?;\n+            b.set_cloexec()?;\n             Ok((Socket(a), Socket(b)))\n         }\n     }\n@@ -132,7 +132,7 @@ impl Socket {\n             libc::accept(self.0.raw(), storage, len)\n         })?;\n         let fd = FileDesc::new(fd);\n-        fd.set_cloexec();\n+        fd.set_cloexec()?;\n         Ok(Socket(fd))\n     }\n "}, {"sha": "2dde9c0e615f2ec055540adea76fc09ecae55d7b", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "patch": "@@ -44,17 +44,18 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n         }\n     }\n     if unsafe { libc::pipe(fds.as_mut_ptr()) == 0 } {\n-        Ok((AnonPipe::from_fd(fds[0]), AnonPipe::from_fd(fds[1])))\n+        let fd0 = FileDesc::new(fds[0]);\n+        let fd1 = FileDesc::new(fds[1]);\n+        Ok((AnonPipe::from_fd(fd0)?, AnonPipe::from_fd(fd1)?))\n     } else {\n         Err(io::Error::last_os_error())\n     }\n }\n \n impl AnonPipe {\n-    pub fn from_fd(fd: libc::c_int) -> AnonPipe {\n-        let fd = FileDesc::new(fd);\n-        fd.set_cloexec();\n-        AnonPipe(fd)\n+    pub fn from_fd(fd: FileDesc) -> io::Result<AnonPipe> {\n+        fd.set_cloexec()?;\n+        Ok(AnonPipe(fd))\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -81,8 +82,8 @@ pub fn read2(p1: AnonPipe,\n     // in the `select` loop below, and we wouldn't want one to block the other!\n     let p1 = p1.into_fd();\n     let p2 = p2.into_fd();\n-    p1.set_nonblocking(true);\n-    p2.set_nonblocking(true);\n+    p1.set_nonblocking(true)?;\n+    p2.set_nonblocking(true)?;\n \n     let max = cmp::max(p1.raw(), p2.raw());\n     loop {\n@@ -114,11 +115,11 @@ pub fn read2(p1: AnonPipe,\n             }\n         };\n         if read(&p1, v1)? {\n-            p2.set_nonblocking(false);\n+            p2.set_nonblocking(false)?;\n             return p2.read_to_end(v2).map(|_| ());\n         }\n         if read(&p2, v2)? {\n-            p1.set_nonblocking(false);\n+            p1.set_nonblocking(false)?;\n             return p1.read_to_end(v1).map(|_| ());\n         }\n     }"}]}