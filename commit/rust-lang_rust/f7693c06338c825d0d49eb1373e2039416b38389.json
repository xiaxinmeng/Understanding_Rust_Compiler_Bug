{"sha": "f7693c06338c825d0d49eb1373e2039416b38389", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NjkzYzA2MzM4YzgyNWQwZDQ5ZWIxMzczZTIwMzk0MTZiMzgzODk=", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2018-02-21T15:12:23Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2018-03-01T11:54:16Z"}, "message": "Fix spelling s/casted/cast/", "tree": {"sha": "b05bc35d79ba0d89852e725822d19ccf1ab72132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b05bc35d79ba0d89852e725822d19ccf1ab72132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7693c06338c825d0d49eb1373e2039416b38389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7693c06338c825d0d49eb1373e2039416b38389", "html_url": "https://github.com/rust-lang/rust/commit/f7693c06338c825d0d49eb1373e2039416b38389", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7693c06338c825d0d49eb1373e2039416b38389/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "55d4b590f9133603901949e19a20b6c6844bb064", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -79,7 +79,7 @@ pub const MAX: char = '\\u{10ffff}';\n \n /// Converts a `u32` to a `char`.\n ///\n-/// Note that all [`char`]s are valid [`u32`]s, and can be casted to one with\n+/// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n /// [`as`]:\n ///\n /// ```\n@@ -131,7 +131,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n \n /// Converts a `u32` to a `char`, ignoring validity.\n ///\n-/// Note that all [`char`]s are valid [`u32`]s, and can be casted to one with\n+/// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n /// [`as`]:\n ///\n /// ```"}, {"sha": "2207bbd1ca05e7324dcc33649e974c66e059db4b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                         let mut err = cx.struct_span_lint(\n                                                              OVERFLOWING_LITERALS,\n                                                              parent_expr.span,\n-                                                             \"only u8 can be casted into char\");\n+                                                             \"only u8 can be cast into char\");\n                                         err.span_suggestion(parent_expr.span,\n                                                             &\"use a char literal instead\",\n                                                             format!(\"'\\\\u{{{:X}}}'\", lit_val));"}, {"sha": "fdeed5391f772009ecbb60545c9ff8d3668b424c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -3094,7 +3094,7 @@ impl<'a> Parser<'a> {\n                         let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n                                                 .unwrap_or(pprust::expr_to_string(&expr));\n                         err.span_suggestion(expr.span,\n-                                            &format!(\"try {} the casted value\", op_verb),\n+                                            &format!(\"try {} the cast value\", op_verb),\n                                             format!(\"({})\", expr_str));\n                         err.emit();\n "}, {"sha": "0dede8eb70de046a594b06a28e0bd4948fefe717", "filename": "src/test/run-pass/extern-types-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that pointers to extern types can be casted from/to usize,\n+// Test that pointers to extern types can be cast from/to usize,\n // despite being !Sized.\n \n #![feature(extern_types)]"}, {"sha": "4dfa5037bc5551373a94232f5ce1e16b99c6796a", "filename": "src/test/ui/cast_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fcast_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fcast_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.rs?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -12,9 +12,9 @@\n \n fn main() {\n     const XYZ: char = 0x1F888 as char;\n-    //~^ ERROR only u8 can be casted into char\n+    //~^ ERROR only u8 can be cast into char\n     const XY: char = 129160 as char;\n-    //~^ ERROR only u8 can be casted into char\n+    //~^ ERROR only u8 can be cast into char\n     const ZYX: char = '\\u{01F888}';\n     println!(\"{}\", XYZ);\n }"}, {"sha": "5da763992e35bd7d43e17c6ba2e4489dd6c5e12d", "filename": "src/test/ui/cast_char.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -1,4 +1,4 @@\n-error: only u8 can be casted into char\n+error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:14:23\n    |\n 14 |     const XYZ: char = 0x1F888 as char;\n@@ -10,7 +10,7 @@ note: lint level defined here\n 11 | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: only u8 can be casted into char\n+error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:16:22\n    |\n 16 |     const XY: char = 129160 as char;"}, {"sha": "60ad222c7ab1295bcab2f4b1ec9a077779e07d5d", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -5,7 +5,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                    ---------- ^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a as usize)`\n+   |                    help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:17:33\n@@ -14,7 +14,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                      ---------- ^ -------------------- interpreted as generic arguments\n    |                      |          |\n    |                      |          not interpreted as comparison\n-   |                      help: try comparing the casted value: `(a as usize)`\n+   |                      help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:19:31\n@@ -23,7 +23,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                    ---------- ^ - interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a as usize)`\n+   |                    help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:21:31\n@@ -32,7 +32,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                      -------- ^ -------------------- interpreted as generic arguments\n    |                      |        |\n    |                      |        not interpreted as comparison\n-   |                      help: try comparing the casted value: `(a: usize)`\n+   |                      help: try comparing the cast value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:23:29\n@@ -41,7 +41,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                    -------- ^ - interpreted as generic arguments\n    |                    |        |\n    |                    |        not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a: usize)`\n+   |                    help: try comparing the cast value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:28:20\n@@ -50,7 +50,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                    ^ not interpreted as comparison\n 29 |                    4);\n    |                    - interpreted as generic arguments\n-help: try comparing the casted value\n+help: try comparing the cast value\n    |\n 25 |     println!(\"{}\", (a\n 26 |                    as\n@@ -64,7 +64,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n    |                    ^ not interpreted as comparison\n 38 |                    5);\n    |                    - interpreted as generic arguments\n-help: try comparing the casted value\n+help: try comparing the cast value\n    |\n 30 |     println!(\"{}\", (a\n 31 | \n@@ -81,7 +81,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a shi\n    |                    ---------- ^^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as shift\n-   |                    help: try shifting the casted value: `(a as usize)`\n+   |                    help: try shifting the cast value: `(a as usize)`\n \n error: expected type, found `4`\n   --> $DIR/issue-22644.rs:42:28"}, {"sha": "205fa82274a69f002a0557a751ad0ba77d4a4710", "filename": "src/test/ui/issue-42954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7693c06338c825d0d49eb1373e2039416b38389/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=f7693c06338c825d0d49eb1373e2039416b38389", "patch": "@@ -5,7 +5,7 @@ error: `<` is interpreted as a start of generic arguments for `u32`, not a compa\n    |         --------- ^ - interpreted as generic arguments\n    |         |         |\n    |         |         not interpreted as comparison\n-   |         help: try comparing the casted value: `($i as u32)`\n+   |         help: try comparing the cast value: `($i as u32)`\n ...\n 19 |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation"}]}