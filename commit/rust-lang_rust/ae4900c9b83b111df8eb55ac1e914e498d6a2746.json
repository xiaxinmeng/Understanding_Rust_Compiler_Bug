{"sha": "ae4900c9b83b111df8eb55ac1e914e498d6a2746", "node_id": "C_kwDOAAsO6NoAKGFlNDkwMGM5YjgzYjExMWRmOGViNTVhYzFlOTE0ZTQ5OGQ2YTI3NDY", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-25T12:16:32Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-25T12:37:50Z"}, "message": "Fix `#[expect]` for `clippy::macro_use_imports`", "tree": {"sha": "3a9eeea4d2747da1a8062bcbce5b4812584d4a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a9eeea4d2747da1a8062bcbce5b4812584d4a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae4900c9b83b111df8eb55ac1e914e498d6a2746", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEwgBEOx3xlHwII7PG9cWdDmaeUwIFAmK3AZ4ACgkQ9cWdDmae\nUwLgjhAAsaXoHiYPS+K6Nu3DZ25bjjmwHc9TjkojLYzn7HSfHeOIiX6o3MaeFnYN\npV7dPmM+IYz4NuxV9kFDtnexCwElCpye8AWYL8FSkcvUaqGmai1WvdL5FTa4CrEI\nXKFa6o9nEmu+txMsFlnq2405U8YA2J9hfgG4/gkXUtwM9Epgo733gi7DODjm4FAa\nZuxxZ/vra/fr62HJBYaGENEfxUPp2GNqzqbktDy8RLhlZk4/2JDhvIRrCJf3aJWC\nA5e01Qm0MOpP9DxkkeYg1EQC/6K4P5CeV6MzAcTLXeL/SHpIjPXQAyZPmh3I83Dx\nSIEFQE3mJ803E48dBEOUUBGNS/+7sEW4ia6fKC+3rgLv46aBZOtOMcqxy8bUQ4Jw\naj+igDr/e+6IppxLf0EQzqIO8ZNZ5JyQ2cY3siV01HGaBq2qdDHzseIGOh5QgXYK\nxU/6DYjduaWH2jeSHMyqux0lH5xI0GlvydAYcJ59B5pghP9s5d65e7i9DVyeNQwK\nzAMRoJGMseqLE+Ujwt8vzUmCItGyLpMUFE9IJReVq1+v1Am5l1w+1FzRL/59/u3A\ng4wkJdtpEw/GhidBFn314F+srFP4AgmtWp2TuvxcS52cZc6HdeKzWvZEeizgF15S\n+7PsdjAIIA5MC0wIWXni90BSD0pp8Jorw+w3ubqKIcZ+Up4B4mk=\n=Tl42\n-----END PGP SIGNATURE-----", "payload": "tree 3a9eeea4d2747da1a8062bcbce5b4812584d4a58\nparent 79fc2716dcf208f9af397226ea282296a1654e67\nauthor xFrednet <xFrednet@gmail.com> 1656159392 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1656160670 +0200\n\nFix `#[expect]` for `clippy::macro_use_imports`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4900c9b83b111df8eb55ac1e914e498d6a2746", "html_url": "https://github.com/rust-lang/rust/commit/ae4900c9b83b111df8eb55ac1e914e498d6a2746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae4900c9b83b111df8eb55ac1e914e498d6a2746/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fc2716dcf208f9af397226ea282296a1654e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fc2716dcf208f9af397226ea282296a1654e67", "html_url": "https://github.com/rust-lang/rust/commit/79fc2716dcf208f9af397226ea282296a1654e67"}], "stats": {"total": 109, "additions": 85, "deletions": 24}, "files": [{"sha": "6b78c16206522562878a4fea3b5a75ddc832cfca", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ae4900c9b83b111df8eb55ac1e914e498d6a2746/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4900c9b83b111df8eb55ac1e914e498d6a2746/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=ae4900c9b83b111df8eb55ac1e914e498d6a2746", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::source::snippet;\n use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n@@ -51,8 +51,9 @@ impl MacroRefData {\n #[derive(Default)]\n #[expect(clippy::module_name_repetitions)]\n pub struct MacroUseImports {\n-    /// the actual import path used and the span of the attribute above it.\n-    imports: Vec<(String, Span)>,\n+    /// the actual import path used and the span of the attribute above it. The value is\n+    /// the location, where the lint should be emitted.\n+    imports: Vec<(String, Span, hir::HirId)>,\n     /// the span of the macro reference, kept to ensure only one reference is used per macro call.\n     collected: FxHashSet<Span>,\n     mac_refs: Vec<MacroRefData>,\n@@ -91,7 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         if_chain! {\n             if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n-            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let hir_id = item.hir_id();\n+            let attrs = cx.tcx.hir().attrs(hir_id);\n             if let Some(mac_attr) = attrs.iter().find(|attr| attr.has_name(sym::macro_use));\n             if let Res::Def(DefKind::Mod, id) = path.res;\n             if !id.is_local();\n@@ -100,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                     if let Res::Def(DefKind::Macro(_mac_type), mac_id) = kid.res {\n                         let span = mac_attr.span;\n                         let def_path = cx.tcx.def_path_str(mac_id);\n-                        self.imports.push((def_path, span));\n+                        self.imports.push((def_path, span, hir_id));\n                     }\n                 }\n             } else {\n@@ -138,7 +140,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n     fn check_crate_post(&mut self, cx: &LateContext<'_>) {\n         let mut used = FxHashMap::default();\n         let mut check_dup = vec![];\n-        for (import, span) in &self.imports {\n+        for (import, span, hir_id) in &self.imports {\n             let found_idx = self.mac_refs.iter().position(|mac| import.ends_with(&mac.name));\n \n             if let Some(idx) = found_idx {\n@@ -151,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                     [] | [_] => return,\n                     [root, item] => {\n                         if !check_dup.contains(&(*item).to_string()) {\n-                            used.entry(((*root).to_string(), span))\n+                            used.entry(((*root).to_string(), span, hir_id))\n                                 .or_insert_with(Vec::new)\n                                 .push((*item).to_string());\n                             check_dup.push((*item).to_string());\n@@ -169,13 +171,13 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                     }\n                                 })\n                                 .collect::<Vec<_>>();\n-                            used.entry(((*root).to_string(), span))\n+                            used.entry(((*root).to_string(), span, hir_id))\n                                 .or_insert_with(Vec::new)\n                                 .push(filtered.join(\"::\"));\n                             check_dup.extend(filtered);\n                         } else {\n                             let rest = rest.to_vec();\n-                            used.entry(((*root).to_string(), span))\n+                            used.entry(((*root).to_string(), span, hir_id))\n                                 .or_insert_with(Vec::new)\n                                 .push(rest.join(\"::\"));\n                             check_dup.extend(rest.iter().map(ToString::to_string));\n@@ -186,27 +188,33 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n \n         let mut suggestions = vec![];\n-        for ((root, span), path) in used {\n+        for ((root, span, hir_id), path) in used {\n             if path.len() == 1 {\n-                suggestions.push((span, format!(\"{}::{}\", root, path[0])));\n+                suggestions.push((span, format!(\"{}::{}\", root, path[0]), hir_id));\n             } else {\n-                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \"))));\n+                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \")), hir_id));\n             }\n         }\n \n         // If mac_refs is not empty we have encountered an import we could not handle\n         // such as `std::prelude::v1::foo` or some other macro that expands to an import.\n         if self.mac_refs.is_empty() {\n-            for (span, import) in suggestions {\n+            for (span, import, hir_id) in suggestions {\n                 let help = format!(\"use {};\", import);\n-                span_lint_and_sugg(\n+                span_lint_hir_and_then(\n                     cx,\n                     MACRO_USE_IMPORTS,\n+                    *hir_id,\n                     *span,\n                     \"`macro_use` attributes are no longer needed in the Rust 2018 edition\",\n-                    \"remove the attribute and import the macro directly, try\",\n-                    help,\n-                    Applicability::MaybeIncorrect,\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            *span,\n+                            \"remove the attribute and import the macro directly, try\",\n+                            help,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    },\n                 );\n             }\n         }"}, {"sha": "e612480d264bdbc5ecf7fe7219dc8fb555c66cd5", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=ae4900c9b83b111df8eb55ac1e914e498d6a2746", "patch": "@@ -4,6 +4,7 @@\n // run-rustfix\n // ignore-32bit\n \n+#![feature(lint_reasons)]\n #![allow(unused_imports, unreachable_code, unused_variables, dead_code, unused_attributes)]\n #![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]"}, {"sha": "b34817cc3b2696e2e939ce9de2cdd660185bce48", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=ae4900c9b83b111df8eb55ac1e914e498d6a2746", "patch": "@@ -4,6 +4,7 @@\n // run-rustfix\n // ignore-32bit\n \n+#![feature(lint_reasons)]\n #![allow(unused_imports, unreachable_code, unused_variables, dead_code, unused_attributes)]\n #![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]"}, {"sha": "bf7b6edd0e314732cc71a469a23dc0a130aaa394", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=ae4900c9b83b111df8eb55ac1e914e498d6a2746", "patch": "@@ -1,28 +1,28 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:18:5\n+  --> $DIR/macro_use_imports.rs:23:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:20:5\n+  --> $DIR/macro_use_imports.rs:21:5\n    |\n LL |     #[macro_use]\n    |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:22:5\n+  --> $DIR/macro_use_imports.rs:25:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:24:5\n+  --> $DIR/macro_use_imports.rs:19:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8a1b05da9efc78231103984cfec6d253ee9e9e4f", "filename": "tests/ui/macro_use_imports_expect.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4900c9b83b111df8eb55ac1e914e498d6a2746/tests%2Fui%2Fmacro_use_imports_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports_expect.rs?ref=ae4900c9b83b111df8eb55ac1e914e498d6a2746", "patch": "@@ -0,0 +1,51 @@\n+// aux-build:macro_rules.rs\n+// aux-build:macro_use_helper.rs\n+// aux-build:proc_macro_derive.rs\n+// ignore-32bit\n+\n+#![feature(lint_reasons)]\n+#![allow(unused_imports, unreachable_code, unused_variables, dead_code, unused_attributes)]\n+#![allow(clippy::single_component_path_imports)]\n+#![warn(clippy::macro_use_imports)]\n+\n+#[macro_use]\n+extern crate macro_use_helper as mac;\n+\n+#[macro_use]\n+extern crate proc_macro_derive as mini_mac;\n+\n+mod a {\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mac;\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mini_mac;\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mac::inner;\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mac::inner::nested;\n+\n+    #[derive(ClippyMiniMacroTest)]\n+    struct Test;\n+\n+    fn test() {\n+        pub_macro!();\n+        inner_mod_macro!();\n+        pub_in_private_macro!(_var);\n+        function_macro!();\n+        let v: ty_macro!() = Vec::default();\n+\n+        inner::try_err!();\n+        inner::foofoo!();\n+        nested::string_add!();\n+    }\n+}\n+\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n+#[macro_use]\n+use a as b;\n+\n+fn main() {}"}]}