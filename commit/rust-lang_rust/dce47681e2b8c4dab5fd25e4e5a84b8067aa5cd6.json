{"sha": "dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTQ3NjgxZTJiOGM0ZGFiNWZkMjVlNGU1YTg0YjgwNjdhYTVjZDY=", "commit": {"author": {"name": "Pyfisch", "email": "pyfisch@gmail.com", "date": "2016-01-05T20:14:38Z"}, "committer": {"name": "Pyfisch", "email": "pyfisch@gmail.com", "date": "2016-01-07T19:13:59Z"}, "message": "f32: inline methods with special variant for msvc", "tree": {"sha": "dccf1dd590d6de93bb740f9b05411ac062d003ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccf1dd590d6de93bb740f9b05411ac062d003ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6", "html_url": "https://github.com/rust-lang/rust/commit/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6/comments", "author": {"login": "pyfisch", "id": 2781017, "node_id": "MDQ6VXNlcjI3ODEwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2781017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyfisch", "html_url": "https://github.com/pyfisch", "followers_url": "https://api.github.com/users/pyfisch/followers", "following_url": "https://api.github.com/users/pyfisch/following{/other_user}", "gists_url": "https://api.github.com/users/pyfisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyfisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyfisch/subscriptions", "organizations_url": "https://api.github.com/users/pyfisch/orgs", "repos_url": "https://api.github.com/users/pyfisch/repos", "events_url": "https://api.github.com/users/pyfisch/events{/privacy}", "received_events_url": "https://api.github.com/users/pyfisch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pyfisch", "id": 2781017, "node_id": "MDQ6VXNlcjI3ODEwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2781017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyfisch", "html_url": "https://github.com/pyfisch", "followers_url": "https://api.github.com/users/pyfisch/followers", "following_url": "https://api.github.com/users/pyfisch/following{/other_user}", "gists_url": "https://api.github.com/users/pyfisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyfisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyfisch/subscriptions", "organizations_url": "https://api.github.com/users/pyfisch/orgs", "repos_url": "https://api.github.com/users/pyfisch/repos", "events_url": "https://api.github.com/users/pyfisch/events{/privacy}", "received_events_url": "https://api.github.com/users/pyfisch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e8350387c57582561874aa2a5aeb4d5370cfc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8350387c57582561874aa2a5aeb4d5370cfc04", "html_url": "https://github.com/rust-lang/rust/commit/1e8350387c57582561874aa2a5aeb4d5370cfc04"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "0a72bdd8e16cb74563ae1d77bf8e97594e72bc9c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6", "patch": "@@ -254,6 +254,7 @@\n #![feature(slice_concat_ext)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n+#![feature(stmt_expr_attributes)] \n #![feature(str_char)]\n #![feature(str_internals)]\n #![feature(str_utf16)]"}, {"sha": "7194ace868f2b3dca4d9bc31ceb4db8ff51d87e1", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=dce47681e2b8c4dab5fd25e4e5a84b8067aa5cd6", "patch": "@@ -84,44 +84,54 @@ mod cmath {\n     mod shims {\n         use libc::{c_float, c_int};\n \n+        #[inline]\n         pub unsafe fn acosf(n: c_float) -> c_float {\n             f64::acos(n as f64) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn asinf(n: c_float) -> c_float {\n             f64::asin(n as f64) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn atan2f(n: c_float, b: c_float) -> c_float {\n             f64::atan2(n as f64, b as f64) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn atanf(n: c_float) -> c_float {\n             f64::atan(n as f64) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn coshf(n: c_float) -> c_float {\n             f64::cosh(n as f64) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn frexpf(x: c_float, value: &mut c_int) -> c_float {\n             let (a, b) = f64::frexp(x as f64);\n             *value = b as c_int;\n             a as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn ldexpf(x: c_float, n: c_int) -> c_float {\n             f64::ldexp(x as f64, n as isize) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn sinhf(n: c_float) -> c_float {\n             f64::sinh(n as f64) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn tanf(n: c_float) -> c_float {\n             f64::tan(n as f64) as c_float\n         }\n \n+        #[inline]\n         pub unsafe fn tanhf(n: c_float) -> c_float {\n             f64::tanh(n as f64) as c_float\n         }\n@@ -272,8 +282,6 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn floor(self) -> f32 {\n-        return floorf(self);\n-\n         // On MSVC LLVM will lower many math intrinsics to a call to the\n         // corresponding function. On MSVC, however, many of these functions\n         // aren't actually available as symbols to call, but rather they are all\n@@ -288,9 +296,9 @@ impl f32 {\n         // redirect to this comment, so `floorf` is just one case of a missing\n         // function on MSVC, but there are many others elsewhere.\n         #[cfg(target_env = \"msvc\")]\n-        fn floorf(f: f32) -> f32 { (f as f64).floor() as f32 }\n+        return (self as f64).floor() as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn floorf(f: f32) -> f32 { unsafe { intrinsics::floorf32(f) } }\n+        return unsafe { intrinsics::floorf32(f) };\n     }\n \n     /// Returns the smallest integer greater than or equal to a number.\n@@ -305,13 +313,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ceil(self) -> f32 {\n-        return ceilf(self);\n-\n         // see notes above in `floor`\n         #[cfg(target_env = \"msvc\")]\n-        fn ceilf(f: f32) -> f32 { (f as f64).ceil() as f32 }\n+        return (self as f64).ceil() as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn ceilf(f: f32) -> f32 { unsafe { intrinsics::ceilf32(f) } }\n+        return unsafe { intrinsics::ceilf32(self) };\n     }\n \n     /// Returns the nearest integer to a number. Round half-way cases away from\n@@ -506,13 +512,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powf(self, n: f32) -> f32 {\n-        return powf(self, n);\n-\n         // see notes above in `floor`\n         #[cfg(target_env = \"msvc\")]\n-        fn powf(f: f32, n: f32) -> f32 { (f as f64).powf(n as f64) as f32 }\n+        return (self as f64).powf(n as f64) as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn powf(f: f32, n: f32) -> f32 { unsafe { intrinsics::powf32(f, n) } }\n+        return unsafe { intrinsics::powf32(self, n) };\n     }\n \n     /// Takes the square root of a number.\n@@ -557,13 +561,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp(self) -> f32 {\n-        return expf(self);\n-\n         // see notes above in `floor`\n         #[cfg(target_env = \"msvc\")]\n-        fn expf(f: f32) -> f32 { (f as f64).exp() as f32 }\n+        return (self as f64).exp() as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn expf(f: f32) -> f32 { unsafe { intrinsics::expf32(f) } }\n+        return unsafe { intrinsics::expf32(self) };\n     }\n \n     /// Returns `2^(self)`.\n@@ -601,13 +603,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f32 {\n-        return logf(self);\n-\n         // see notes above in `floor`\n         #[cfg(target_env = \"msvc\")]\n-        fn logf(f: f32) -> f32 { (f as f64).ln() as f32 }\n+        return (self as f64).ln() as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn logf(f: f32) -> f32 { unsafe { intrinsics::logf32(f) } }\n+        return unsafe { intrinsics::logf32(self) };\n     }\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -664,13 +664,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f32 {\n-        return log10f(self);\n-\n         // see notes above in `floor`\n         #[cfg(target_env = \"msvc\")]\n-        fn log10f(f: f32) -> f32 { (f as f64).log10() as f32 }\n+        return (f as f64).log10() as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn log10f(f: f32) -> f32 { unsafe { intrinsics::log10f32(f) } }\n+        return unsafe { intrinsics::log10f32(f) };\n     }\n \n     /// Converts radians to degrees.\n@@ -884,13 +882,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sin(self) -> f32 {\n-        return sinf(self);\n-\n         // see notes in `core::f32::Float::floor`\n         #[cfg(target_env = \"msvc\")]\n-        fn sinf(f: f32) -> f32 { (f as f64).sin() as f32 }\n+        return (self as f64).sin() as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn sinf(f: f32) -> f32 { unsafe { intrinsics::sinf32(f) } }\n+        return unsafe { intrinsics::sinf32(self) };\n     }\n \n     /// Computes the cosine of a number (in radians).\n@@ -907,13 +903,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cos(self) -> f32 {\n-        return cosf(self);\n-\n         // see notes in `core::f32::Float::floor`\n         #[cfg(target_env = \"msvc\")]\n-        fn cosf(f: f32) -> f32 { (f as f64).cos() as f32 }\n+        return (self as f64).cos() as f32;\n         #[cfg(not(target_env = \"msvc\"))]\n-        fn cosf(f: f32) -> f32 { unsafe { intrinsics::cosf32(f) } }\n+        return unsafe { intrinsics::cosf32(self) };\n     }\n \n     /// Computes the tangent of a number (in radians)."}]}