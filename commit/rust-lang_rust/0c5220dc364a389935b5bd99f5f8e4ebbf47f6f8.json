{"sha": "0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNTIyMGRjMzY0YTM4OTkzNWI1YmQ5OWY1ZjhlNGViYmY0N2Y2Zjg=", "commit": {"author": {"name": "Ilija Tovilo", "email": "ilija.tovilo@me.com", "date": "2019-08-18T21:59:46Z"}, "committer": {"name": "Ilija Tovilo", "email": "ilija.tovilo@me.com", "date": "2019-08-20T21:13:08Z"}, "message": "Test that Wrapping arithmetic ops are implemented for all int types", "tree": {"sha": "f14af2abaafd5f3be8ebdcb8bd6221ee40e33c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f14af2abaafd5f3be8ebdcb8bd6221ee40e33c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEzbqtco3jAIy93eipPxI9Ct1EgZgFAl1cYmYACgkQPxI9Ct1E\ngZhAohAArVuUNVvI3GmWL/3G3hqb9KziZ5blSymhsTGrkFyRbENEROAZ7Yfm+QH1\nSIOxSi9sNgAZBVnb8Ji/pFHsMrTAZhaNrAygN/vW8WVVeD0JIQwc0nbqs7O1jcnl\nRsnusLhopdNTOgYf1E+eSS+lskRuK23JE6ZIvXQltZYJpZd/DzZyuBS7ItTiVqkA\nHQTk0VwHQDJs6djrYpqpEYv++VNqokwKTObxhc9mmdutRWCwmvMPrsRyzuSk8x8W\n0PNeFSnJcn6x53o3iv3iyQiHc26B9EKRH0Dqp7/hXvhGMCxGH6SWLKYbKG7ct03w\nU8Klssx4R+RH6ofIIquc6nPUfiK11Ighl/VPpJv6bzUxM9a/JOWSQj7ZB6eE/Si6\n0WuUgJOV/9QJCztJg8J3X14Xj7WlMQfEvMBk2JP2zTBZ4ZyO2V5fKaRJ4Ty3oM2/\nr3EK7RSnm1sVr41V6kG/Ak8w1GwoGX74ZM1qlHvFDdHzi3S3mbkm04lgeOkNvgf0\nnPDHx4fA0MoBeEPyABSFXM1SxR5BflObaCK682yc6GnszBtn8Z/pAuJIxLPfWR1f\njK/cLPyR9B3DIsq8IWOU53FmXvmJVnDOl7IaLWJeV+o8kQDtjn4bRnIGx/ystxVI\nwpwVfBRIWlBfbpjuxZIapqYAYQtQYKBIkO3Jm5Y2H4t/btfDhEM=\n=tDBL\n-----END PGP SIGNATURE-----", "payload": "tree f14af2abaafd5f3be8ebdcb8bd6221ee40e33c54\nparent d65e272a9fe3e61aa5f229c5358e35a909435575\nauthor Ilija Tovilo <ilija.tovilo@me.com> 1566165586 +0200\ncommitter Ilija Tovilo <ilija.tovilo@me.com> 1566335588 +0200\n\nTest that Wrapping arithmetic ops are implemented for all int types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8", "html_url": "https://github.com/rust-lang/rust/commit/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8/comments", "author": {"login": "iluuu1994", "id": 1752683, "node_id": "MDQ6VXNlcjE3NTI2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1752683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iluuu1994", "html_url": "https://github.com/iluuu1994", "followers_url": "https://api.github.com/users/iluuu1994/followers", "following_url": "https://api.github.com/users/iluuu1994/following{/other_user}", "gists_url": "https://api.github.com/users/iluuu1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/iluuu1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iluuu1994/subscriptions", "organizations_url": "https://api.github.com/users/iluuu1994/orgs", "repos_url": "https://api.github.com/users/iluuu1994/repos", "events_url": "https://api.github.com/users/iluuu1994/events{/privacy}", "received_events_url": "https://api.github.com/users/iluuu1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iluuu1994", "id": 1752683, "node_id": "MDQ6VXNlcjE3NTI2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1752683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iluuu1994", "html_url": "https://github.com/iluuu1994", "followers_url": "https://api.github.com/users/iluuu1994/followers", "following_url": "https://api.github.com/users/iluuu1994/following{/other_user}", "gists_url": "https://api.github.com/users/iluuu1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/iluuu1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iluuu1994/subscriptions", "organizations_url": "https://api.github.com/users/iluuu1994/orgs", "repos_url": "https://api.github.com/users/iluuu1994/repos", "events_url": "https://api.github.com/users/iluuu1994/events{/privacy}", "received_events_url": "https://api.github.com/users/iluuu1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65e272a9fe3e61aa5f229c5358e35a909435575", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65e272a9fe3e61aa5f229c5358e35a909435575", "html_url": "https://github.com/rust-lang/rust/commit/d65e272a9fe3e61aa5f229c5358e35a909435575"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "59a10ae99bb6aa5bff9c66a5ebe3b2520a22a807", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8", "patch": "@@ -18,6 +18,8 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n+        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n@@ -41,6 +43,8 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n+        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {\n@@ -64,6 +68,8 @@ macro_rules! sh_impl_unsigned {\n                 Wrapping(self.0.wrapping_shl((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n+        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n@@ -83,6 +89,8 @@ macro_rules! sh_impl_unsigned {\n                 Wrapping(self.0.wrapping_shr((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n+        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {"}, {"sha": "e09f7232bd2fb8f89fdef3ce346dc7ea6bb8f184", "filename": "src/test/ui/wrapping-int-combinations.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs?ref=0c5220dc364a389935b5bd99f5f8e4ebbf47f6f8", "patch": "@@ -0,0 +1,73 @@\n+// run-pass\n+\n+use std::num::Wrapping;\n+\n+macro_rules! wrapping_operation {\n+    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n+        assert_eq!($result, $lhs $op $rhs);\n+        assert_eq!($result, &$lhs $op $rhs);\n+        assert_eq!($result, $lhs $op &$rhs);\n+        assert_eq!($result, &$lhs $op &$rhs);\n+    };\n+    ($result:expr, $op:tt $expr:expr) => {\n+        assert_eq!($result, $op $expr);\n+        assert_eq!($result, $op &$expr);\n+    };\n+}\n+\n+macro_rules! wrapping_assignment {\n+    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n+        let mut lhs1 = $lhs;\n+        lhs1 $op $rhs;\n+        assert_eq!($result, lhs1);\n+\n+        let mut lhs2 = $lhs;\n+        lhs2 $op &$rhs;\n+        assert_eq!($result, lhs2);\n+    };\n+}\n+\n+macro_rules! wrapping_test {\n+    ($type:ty, $min:expr, $max:expr) => {\n+        let zero: Wrapping<$type> = Wrapping(0);\n+        let one: Wrapping<$type> = Wrapping(1);\n+        let min: Wrapping<$type> = Wrapping($min);\n+        let max: Wrapping<$type> = Wrapping($max);\n+\n+        wrapping_operation!(min, max + one);\n+        wrapping_assignment!(min, max += one);\n+        wrapping_operation!(max, min - one);\n+        wrapping_assignment!(max, min -= one);\n+        wrapping_operation!(max, max * one);\n+        wrapping_assignment!(max, max *= one);\n+        wrapping_operation!(max, max / one);\n+        wrapping_assignment!(max, max /= one);\n+        wrapping_operation!(zero, max % one);\n+        wrapping_assignment!(zero, max %= one);\n+        wrapping_operation!(zero, zero & max);\n+        wrapping_assignment!(zero, zero &= max);\n+        wrapping_operation!(max, zero | max);\n+        wrapping_assignment!(max, zero |= max);\n+        wrapping_operation!(zero, max ^ max);\n+        wrapping_assignment!(zero, max ^= max);\n+        wrapping_operation!(zero, zero << 1usize);\n+        wrapping_assignment!(zero, zero <<= 1usize);\n+        wrapping_operation!(zero, zero >> 1usize);\n+        wrapping_assignment!(zero, zero >>= 1usize);\n+        wrapping_operation!(zero, -zero);\n+        wrapping_operation!(max, !min);\n+    };\n+}\n+\n+fn main() {\n+    wrapping_test!(i8, std::i8::MIN, std::i8::MAX);\n+    wrapping_test!(i16, std::i16::MIN, std::i16::MAX);\n+    wrapping_test!(i32, std::i32::MIN, std::i32::MAX);\n+    wrapping_test!(i64, std::i64::MIN, std::i64::MAX);\n+    wrapping_test!(i128, std::i128::MIN, std::i128::MAX);\n+    wrapping_test!(u8, std::u8::MIN, std::u8::MAX);\n+    wrapping_test!(u16, std::u16::MIN, std::u16::MAX);\n+    wrapping_test!(u32, std::u32::MIN, std::u32::MAX);\n+    wrapping_test!(u64, std::u64::MIN, std::u64::MAX);\n+    wrapping_test!(u128, std::u128::MIN, std::u128::MAX);\n+}"}]}