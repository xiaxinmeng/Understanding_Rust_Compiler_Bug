{"sha": "0b32b65ca6aee21f352d178eeb0b85e092a93177", "node_id": "C_kwDOAAsO6NoAKDBiMzJiNjVjYTZhZWUyMWYzNTJkMTc4ZWViMGI4NWUwOTJhOTMxNzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-05T13:46:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-05T13:46:22Z"}, "message": "Auto merge of #14043 - lowr:fix/completion-within-str-that-changed, r=Veykril\n\nfix: consider relative offset to fake ident token in expansion for completion\n\nFixes #13836\n\nWhen we check if the offset of fake ident token is out of bounds in the \"actual expansion\" (i.e. expansion without the fake ident token), we should take relative offset to it into account to match [how we'd get token after expansion](https://github.com/rust-lang/rust-analyzer/blob/f1b257f4eb4fef74b42fd7135d1cf3884e8b51c9/crates/ide-completion/src/context/analysis.rs#L53-L54).", "tree": {"sha": "33a4f95a78a8dc7037ee205eb406272fad87622d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33a4f95a78a8dc7037ee205eb406272fad87622d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b32b65ca6aee21f352d178eeb0b85e092a93177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b32b65ca6aee21f352d178eeb0b85e092a93177", "html_url": "https://github.com/rust-lang/rust/commit/0b32b65ca6aee21f352d178eeb0b85e092a93177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b32b65ca6aee21f352d178eeb0b85e092a93177/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc33c7e9f041c5aef69a5c33b3d29d19a341ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc33c7e9f041c5aef69a5c33b3d29d19a341ece", "html_url": "https://github.com/rust-lang/rust/commit/3bc33c7e9f041c5aef69a5c33b3d29d19a341ece"}, {"sha": "a4d0b5c522405fd2351c56f48c68544b3130a513", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d0b5c522405fd2351c56f48c68544b3130a513", "html_url": "https://github.com/rust-lang/rust/commit/a4d0b5c522405fd2351c56f48c68544b3130a513"}], "stats": {"total": 101, "additions": 96, "deletions": 5}, "files": [{"sha": "8a7e9dfadfed2b79b39f423e029425782e702598", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0b32b65ca6aee21f352d178eeb0b85e092a93177/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b32b65ca6aee21f352d178eeb0b85e092a93177/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=0b32b65ca6aee21f352d178eeb0b85e092a93177", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n use test_utils::{\n     extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER, ESCAPED_CURSOR_MARKER,\n };\n-use tt::token_id::Subtree;\n+use tt::token_id::{Leaf, Subtree, TokenTree};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n@@ -310,7 +310,7 @@ impl ChangeFixture {\n     }\n }\n \n-fn default_test_proc_macros() -> [(String, ProcMacro); 4] {\n+fn default_test_proc_macros() -> [(String, ProcMacro); 5] {\n     [\n         (\n             r#\"\n@@ -368,6 +368,20 @@ pub fn mirror(input: TokenStream) -> TokenStream {\n                 expander: Arc::new(MirrorProcMacroExpander),\n             },\n         ),\n+        (\n+            r#\"\n+#[proc_macro]\n+pub fn shorten(input: TokenStream) -> TokenStream {\n+    loop {}\n+}\n+\"#\n+            .into(),\n+            ProcMacro {\n+                name: \"shorten\".into(),\n+                kind: crate::ProcMacroKind::FuncLike,\n+                expander: Arc::new(ShortenProcMacroExpander),\n+            },\n+        ),\n     ]\n }\n \n@@ -508,3 +522,47 @@ impl ProcMacroExpander for MirrorProcMacroExpander {\n         Ok(traverse(input))\n     }\n }\n+\n+// Replaces every literal with an empty string literal and every identifier with its first letter,\n+// but retains all tokens' span. Useful for testing we don't assume token hasn't been modified by\n+// macros even if it retains its span.\n+#[derive(Debug)]\n+struct ShortenProcMacroExpander;\n+impl ProcMacroExpander for ShortenProcMacroExpander {\n+    fn expand(\n+        &self,\n+        input: &Subtree,\n+        _: Option<&Subtree>,\n+        _: &Env,\n+    ) -> Result<Subtree, ProcMacroExpansionError> {\n+        return Ok(traverse(input));\n+\n+        fn traverse(input: &Subtree) -> Subtree {\n+            let token_trees = input\n+                .token_trees\n+                .iter()\n+                .map(|it| match it {\n+                    TokenTree::Leaf(leaf) => tt::TokenTree::Leaf(modify_leaf(leaf)),\n+                    TokenTree::Subtree(subtree) => tt::TokenTree::Subtree(traverse(subtree)),\n+                })\n+                .collect();\n+            Subtree { delimiter: input.delimiter, token_trees }\n+        }\n+\n+        fn modify_leaf(leaf: &Leaf) -> Leaf {\n+            let mut leaf = leaf.clone();\n+            match &mut leaf {\n+                Leaf::Literal(it) => {\n+                    // XXX Currently replaces any literals with an empty string, but supporting\n+                    // \"shortening\" other literals would be nice.\n+                    it.text = \"\\\"\\\"\".into();\n+                }\n+                Leaf::Punct(_) => {}\n+                Leaf::Ident(it) => {\n+                    it.text = it.text.chars().take(1).collect();\n+                }\n+            }\n+            leaf\n+        }\n+    }\n+}"}, {"sha": "f606d79ad20407ad6b438948b713e36a4e549165", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b32b65ca6aee21f352d178eeb0b85e092a93177/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b32b65ca6aee21f352d178eeb0b85e092a93177/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=0b32b65ca6aee21f352d178eeb0b85e092a93177", "patch": "@@ -48,7 +48,9 @@ pub(super) fn expand_and_analyze(\n     // make the offset point to the start of the original token, as that is what the\n     // intermediate offsets calculated in expansion always points to\n     let offset = offset - relative_offset;\n-    let expansion = expand(sema, original_file, speculative_file, offset, fake_ident_token);\n+    let expansion =\n+        expand(sema, original_file, speculative_file, offset, fake_ident_token, relative_offset);\n+\n     // add the relative offset back, so that left_biased finds the proper token\n     let offset = expansion.offset + relative_offset;\n     let token = expansion.original_file.token_at_offset(offset).left_biased()?;\n@@ -67,6 +69,7 @@ fn expand(\n     mut speculative_file: SyntaxNode,\n     mut offset: TextSize,\n     mut fake_ident_token: SyntaxToken,\n+    relative_offset: TextSize,\n ) -> ExpansionResult {\n     let _p = profile::span(\"CompletionContext::expand\");\n     let mut derive_ctx = None;\n@@ -97,7 +100,7 @@ fn expand(\n                 // successful expansions\n                 (Some(actual_expansion), Some((fake_expansion, fake_mapped_token))) => {\n                     let new_offset = fake_mapped_token.text_range().start();\n-                    if new_offset > actual_expansion.text_range().end() {\n+                    if new_offset + relative_offset > actual_expansion.text_range().end() {\n                         // offset outside of bounds from the original expansion,\n                         // stop here to prevent problems from happening\n                         break 'expansion;\n@@ -176,7 +179,7 @@ fn expand(\n                 // successful expansions\n                 (Some(actual_expansion), Some((fake_expansion, fake_mapped_token))) => {\n                     let new_offset = fake_mapped_token.text_range().start();\n-                    if new_offset > actual_expansion.text_range().end() {\n+                    if new_offset + relative_offset > actual_expansion.text_range().end() {\n                         // offset outside of bounds from the original expansion,\n                         // stop here to prevent problems from happening\n                         break 'expansion;"}, {"sha": "fec149e56a9e21d2cf75799c5cbfd57abf79fdf7", "filename": "crates/ide-completion/src/tests/proc_macros.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b32b65ca6aee21f352d178eeb0b85e092a93177/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b32b65ca6aee21f352d178eeb0b85e092a93177/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs?ref=0b32b65ca6aee21f352d178eeb0b85e092a93177", "patch": "@@ -131,3 +131,33 @@ fn main() {}\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn issue_13836_str() {\n+    check(\n+        r#\"\n+//- proc_macros: shorten\n+fn main() {\n+    let s = proc_macros::shorten!(\"text.$0\");\n+}\n+\"#,\n+        expect![[r#\"\"#]],\n+    )\n+}\n+\n+#[test]\n+fn issue_13836_ident() {\n+    check(\n+        r#\"\n+//- proc_macros: shorten\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn main() {\n+    let s = proc_macros::shorten!(S.fo$0);\n+}\n+\"#,\n+        expect![[r#\"\"#]],\n+    )\n+}"}]}