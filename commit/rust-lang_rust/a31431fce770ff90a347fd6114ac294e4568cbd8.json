{"sha": "a31431fce770ff90a347fd6114ac294e4568cbd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMTQzMWZjZTc3MGZmOTBhMzQ3ZmQ2MTE0YWMyOTRlNDU2OGNiZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-10T16:41:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-10T16:41:26Z"}, "message": "Auto merge of #87029 - JohnTitor:rollup-0yapv7z, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #87006 (Revert the revert of renaming traits::VTable to ImplSource)\n - #87011 (avoid reentrant lock acquire when ThreadIds run out)\n - #87013 (Fix several ICEs related to malformed `#[repr(...)]` attributes)\n - #87020 (remove const_raw_ptr_to_usize_cast feature)\n - #87028 (Fix type: `'satic` -> `'static`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "982527241e92f1ed9dc54d98595fa53678addb8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/982527241e92f1ed9dc54d98595fa53678addb8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a31431fce770ff90a347fd6114ac294e4568cbd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a31431fce770ff90a347fd6114ac294e4568cbd8", "html_url": "https://github.com/rust-lang/rust/commit/a31431fce770ff90a347fd6114ac294e4568cbd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a31431fce770ff90a347fd6114ac294e4568cbd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3982eb35cabe3a99194d768d34a92347967c3fa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3982eb35cabe3a99194d768d34a92347967c3fa2", "html_url": "https://github.com/rust-lang/rust/commit/3982eb35cabe3a99194d768d34a92347967c3fa2"}, {"sha": "36b142f5c11014090b98028688f2580f1ce4b483", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b142f5c11014090b98028688f2580f1ce4b483", "html_url": "https://github.com/rust-lang/rust/commit/36b142f5c11014090b98028688f2580f1ce4b483"}], "stats": {"total": 651, "additions": 305, "deletions": 346}, "files": [{"sha": "b7b053cd5ddb7a910f24f795abb0ddac2ecb1044", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 96, "deletions": 8, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -870,6 +870,23 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                         sym::simd => Some(ReprSimd),\n                         sym::transparent => Some(ReprTransparent),\n                         sym::no_niche => Some(ReprNoNiche),\n+                        sym::align => {\n+                            let mut err = struct_span_err!(\n+                                diagnostic,\n+                                item.span(),\n+                                E0589,\n+                                \"invalid `repr(align)` attribute: `align` needs an argument\"\n+                            );\n+                            err.span_suggestion(\n+                                item.span(),\n+                                \"supply an argument here\",\n+                                \"align(...)\".to_string(),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                            err.emit();\n+                            recognised = true;\n+                            None\n+                        }\n                         name => int_type_of_word(name).map(ReprInt),\n                     };\n \n@@ -891,53 +908,124 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                             Ok(literal) => acc.push(ReprPacked(literal)),\n                             Err(message) => literal_error = Some(message),\n                         };\n+                    } else if matches!(name, sym::C | sym::simd | sym::transparent | sym::no_niche)\n+                        || int_type_of_word(name).is_some()\n+                    {\n+                        recognised = true;\n+                        struct_span_err!(\n+                                diagnostic,\n+                                item.span(),\n+                                E0552,\n+                                \"invalid representation hint: `{}` does not take a parenthesized argument list\",\n+                                name.to_ident_string(),\n+                            ).emit();\n                     }\n                     if let Some(literal_error) = literal_error {\n                         struct_span_err!(\n                             diagnostic,\n                             item.span(),\n                             E0589,\n-                            \"invalid `repr(align)` attribute: {}\",\n+                            \"invalid `repr({})` attribute: {}\",\n+                            name.to_ident_string(),\n                             literal_error\n                         )\n                         .emit();\n                     }\n                 } else if let Some(meta_item) = item.meta_item() {\n-                    if meta_item.has_name(sym::align) {\n-                        if let MetaItemKind::NameValue(ref value) = meta_item.kind {\n+                    if let MetaItemKind::NameValue(ref value) = meta_item.kind {\n+                        if meta_item.has_name(sym::align) || meta_item.has_name(sym::packed) {\n+                            let name = meta_item.name_or_empty().to_ident_string();\n                             recognised = true;\n                             let mut err = struct_span_err!(\n                                 diagnostic,\n                                 item.span(),\n                                 E0693,\n-                                \"incorrect `repr(align)` attribute format\"\n+                                \"incorrect `repr({})` attribute format\",\n+                                name,\n                             );\n                             match value.kind {\n                                 ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n                                     err.span_suggestion(\n                                         item.span(),\n                                         \"use parentheses instead\",\n-                                        format!(\"align({})\", int),\n+                                        format!(\"{}({})\", name, int),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }\n                                 ast::LitKind::Str(s, _) => {\n                                     err.span_suggestion(\n                                         item.span(),\n                                         \"use parentheses instead\",\n-                                        format!(\"align({})\", s),\n+                                        format!(\"{}({})\", name, s),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }\n                                 _ => {}\n                             }\n                             err.emit();\n+                        } else {\n+                            if matches!(\n+                                meta_item.name_or_empty(),\n+                                sym::C | sym::simd | sym::transparent | sym::no_niche\n+                            ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n+                            {\n+                                recognised = true;\n+                                struct_span_err!(\n+                                    diagnostic,\n+                                    meta_item.span,\n+                                    E0552,\n+                                    \"invalid representation hint: `{}` does not take a value\",\n+                                    meta_item.name_or_empty().to_ident_string(),\n+                                )\n+                                .emit();\n+                            }\n+                        }\n+                    } else if let MetaItemKind::List(_) = meta_item.kind {\n+                        if meta_item.has_name(sym::align) {\n+                            recognised = true;\n+                            struct_span_err!(\n+                                diagnostic,\n+                                meta_item.span,\n+                                E0693,\n+                                \"incorrect `repr(align)` attribute format: \\\n+                                 `align` takes exactly one argument in parentheses\"\n+                            )\n+                            .emit();\n+                        } else if meta_item.has_name(sym::packed) {\n+                            recognised = true;\n+                            struct_span_err!(\n+                                diagnostic,\n+                                meta_item.span,\n+                                E0552,\n+                                \"incorrect `repr(packed)` attribute format: \\\n+                                 `packed` takes exactly one parenthesized argument, \\\n+                                 or no parentheses at all\"\n+                            )\n+                            .emit();\n+                        } else if matches!(\n+                            meta_item.name_or_empty(),\n+                            sym::C | sym::simd | sym::transparent | sym::no_niche\n+                        ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n+                        {\n+                            recognised = true;\n+                            struct_span_err!(\n+                                diagnostic,\n+                                meta_item.span,\n+                                E0552,\n+                                \"invalid representation hint: `{}` does not take a parenthesized argument list\",\n+                                meta_item.name_or_empty().to_ident_string(),\n+                            ).emit();\n                         }\n                     }\n                 }\n                 if !recognised {\n-                    // Not a word we recognize\n-                    diagnostic.delay_span_bug(item.span(), \"unrecognized representation hint\");\n+                    // Not a word we recognize. This will be caught and reported by\n+                    // the `check_mod_attrs` pass, but this pass doesn't always run\n+                    // (e.g. if we only pretty-print the source), so we have to gate\n+                    // the `delay_span_bug` call as follows:\n+                    if sess.opts.pretty.map_or(true, |pp| pp.needs_analysis()) {\n+                        diagnostic.delay_span_bug(item.span(), \"unrecognized representation hint\");\n+                    }\n                 }\n             }\n         }"}, {"sha": "9eaf4693811ca100844fe5fd4fc51d614463a468", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -416,9 +416,6 @@ declare_features! (\n     /// Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n-    /// Allows casting raw pointers to `usize` during const eval.\n-    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n-\n     /// Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n "}, {"sha": "6d3e2b9c5171366219cb1d904d1288e86349285e", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -144,6 +144,10 @@ declare_features! (\n     (removed, external_doc, \"1.54.0\", Some(44732), None,\n      Some(\"use #[doc = include_str!(\\\"filename\\\")] instead, which handles macro invocations\")),\n \n+     /// Allows casting raw pointers to `usize` during const eval.\n+    (removed, const_raw_ptr_to_usize_cast, \"1.55.0\", Some(51910), None,\n+     Some(\"at compile-time, pointers do not have an integer value, so these casts cannot be properly supported\")),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "892a29e4e22c7e4e090d95b0cb01431c88321aec", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -426,10 +426,10 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// impl Clone for i32 { ... }                   // Impl_3\n ///\n /// fn foo<T: Clone>(concrete: Option<Box<i32>>, param: T, mixed: Option<T>) {\n-///     // Case A: Vtable points at a specific impl. Only possible when\n+///     // Case A: ImplSource points at a specific impl. Only possible when\n ///     // type is concretely known. If the impl itself has bounded\n-///     // type parameters, Vtable will carry resolutions for those as well:\n-///     concrete.clone(); // Vtable(Impl_1, [Vtable(Impl_2, [Vtable(Impl_3)])])\n+///     // type parameters, ImplSource will carry resolutions for those as well:\n+///     concrete.clone(); // ImpleSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n ///\n ///     // Case A: ImplSource points at a specific impl. Only possible when\n ///     // type is concretely known. If the impl itself has bounded"}, {"sha": "fd72ec4340f9f2a7f9c462c9039f3888998e70c2", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -397,6 +397,9 @@ impl NonConstOp for PanicNonStr {\n     }\n }\n \n+/// Comparing raw pointers for equality.\n+/// Not currently intended to ever be allowed, even behind a feature gate: operation depends on\n+/// allocation base addresses that are not known at compile-time.\n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {\n@@ -430,20 +433,22 @@ impl NonConstOp for RawPtrDeref {\n     }\n }\n \n+/// Casting raw pointer or function pointer to an integer.\n+/// Not currently intended to ever be allowed, even behind a feature gate: operation depends on\n+/// allocation base addresses that are not known at compile-time.\n #[derive(Debug)]\n pub struct RawPtrToIntCast;\n impl NonConstOp for RawPtrToIntCast {\n-    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n-        Status::Unstable(sym::const_raw_ptr_to_usize_cast)\n-    }\n-\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_raw_ptr_to_usize_cast,\n-            span,\n-            &format!(\"casting pointers to integers in {}s is unstable\", ccx.const_kind(),),\n-        )\n+        let mut err = ccx\n+            .tcx\n+            .sess\n+            .struct_span_err(span, \"pointers cannot be cast to integers during const eval.\");\n+        err.note(\"at compile-time, pointers do not have an integer value\");\n+        err.note(\n+            \"avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\",\n+        );\n+        err\n     }\n }\n "}, {"sha": "1ff9bd157210874391deafc577a31eb4dd435c42", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -7,7 +7,6 @@ use rustc_hir::intravisit;\n use rustc_hir::Node;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n@@ -18,7 +17,6 @@ use std::ops::Bound;\n pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     body_did: LocalDefId,\n-    const_context: bool,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n@@ -30,7 +28,6 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n-        const_context: bool,\n         body: &'a Body<'tcx>,\n         body_did: LocalDefId,\n         tcx: TyCtxt<'tcx>,\n@@ -39,7 +36,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         Self {\n             body,\n             body_did,\n-            const_context,\n             violations: vec![],\n             source_info: SourceInfo::outermost(body.span),\n             tcx,\n@@ -136,25 +132,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.register_violations(&violations, &unsafe_blocks);\n                 }\n             },\n-            // casting pointers to ints is unsafe in const fn because the const evaluator cannot\n-            // possibly know what the result of various operations like `address / 2` would be\n-            // pointers during const evaluation have no integral address, only an abstract one\n-            Rvalue::Cast(CastKind::Misc, ref operand, cast_ty)\n-                if self.const_context && self.tcx.features().const_raw_ptr_to_usize_cast =>\n-            {\n-                let operand_ty = operand.ty(self.body, self.tcx);\n-                let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n-                let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n-                match (cast_in, cast_out) {\n-                    (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n-                        self.require_unsafe(\n-                            UnsafetyViolationKind::General,\n-                            UnsafetyViolationDetails::CastOfPointerToInt,\n-                        );\n-                    }\n-                    _ => {}\n-                }\n-            }\n             _ => {}\n         }\n         self.super_rvalue(rvalue, location);\n@@ -469,13 +446,7 @@ fn unsafety_check_result<'tcx>(\n \n     let param_env = tcx.param_env(def.did);\n \n-    let id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let const_context = match tcx.hir().body_owner_kind(id) {\n-        hir::BodyOwnerKind::Closure => false,\n-        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def.did.to_def_id()),\n-        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n-    };\n-    let mut checker = UnsafetyChecker::new(const_context, body, def.did, tcx, param_env);\n+    let mut checker = UnsafetyChecker::new(body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def.did, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "703ac39dc30802c606e73d774d8e8bb8ec4b448c", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -284,7 +284,7 @@ impl Inliner<'tcx> {\n         &self,\n         callsite: &CallSite<'tcx>,\n         callee_attrs: &CodegenFnAttrs,\n-    ) -> Result<(), &'satic str> {\n+    ) -> Result<(), &'static str> {\n         if let InlineAttr::Never = callee_attrs.inline {\n             return Err(\"never inline hint\");\n         }"}, {"sha": "38111527a4ec719e133138452ad4eea2247238a5", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -25,7 +25,6 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     /// The `#[target_feature]` attributes of the body. Used for checking\n     /// calls to functions with `#[target_feature]` (RFC 2396).\n     body_target_features: &'tcx Vec<Symbol>,\n-    is_const: bool,\n     in_possible_lhs_union_assign: bool,\n     in_union_destructure: bool,\n }\n@@ -315,16 +314,6 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 (Bound::Unbounded, Bound::Unbounded) => {}\n                 _ => self.requires_unsafe(expr.span, InitializingTypeWith),\n             },\n-            ExprKind::Cast { source } => {\n-                let source = &self.thir[source];\n-                if self.tcx.features().const_raw_ptr_to_usize_cast\n-                    && self.is_const\n-                    && (source.ty.is_unsafe_ptr() || source.ty.is_fn_ptr())\n-                    && expr.ty.is_integral()\n-                {\n-                    self.requires_unsafe(expr.span, CastOfPointerToInt);\n-                }\n-            }\n             ExprKind::Closure {\n                 closure_id,\n                 substs: _,\n@@ -413,7 +402,6 @@ enum UnsafeOpKind {\n     CallToUnsafeFunction,\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n-    CastOfPointerToInt,\n     UseOfMutableStatic,\n     UseOfExternStatic,\n     DerefOfRawPointer,\n@@ -446,9 +434,6 @@ impl UnsafeOpKind {\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n-            CastOfPointerToInt => {\n-                (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n-            }\n             UseOfMutableStatic => (\n                 \"use of mutable static\",\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n@@ -526,19 +511,13 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n     let body_target_features = &tcx.codegen_fn_attrs(def.did).target_features;\n     let safety_context =\n         if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n-    let is_const = match tcx.hir().body_owner_kind(hir_id) {\n-        hir::BodyOwnerKind::Closure => false,\n-        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def.did.to_def_id()),\n-        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n-    };\n     let mut visitor = UnsafetyVisitor {\n         tcx,\n         thir,\n         safety_context,\n         hir_context: hir_id,\n         body_unsafety,\n         body_target_features,\n-        is_const,\n         in_possible_lhs_union_assign: false,\n         in_union_destructure: false,\n     };"}, {"sha": "9f7e6b95dfb90c0d496eb88ead3679226ed02379", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -999,11 +999,12 @@ impl ThreadId {\n         static mut COUNTER: u64 = 1;\n \n         unsafe {\n-            let _guard = GUARD.lock();\n+            let guard = GUARD.lock();\n \n             // If we somehow use up all our bits, panic so that we're not\n             // covering up subtle bugs of IDs being reused.\n             if COUNTER == u64::MAX {\n+                drop(guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n                 panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n             }\n "}, {"sha": "97bf225f0cc733b9803844bc583f8ea6134aaeb1", "filename": "src/test/ui/attributes/nonterminal-expansion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -2,7 +2,9 @@\n \n macro_rules! pass_nonterminal {\n     ($n:expr) => {\n-        #[repr(align($n))] //~ ERROR expected unsuffixed literal or identifier, found `n!()`\n+        #[repr(align($n))]\n+        //~^ ERROR expected unsuffixed literal or identifier, found `n!()`\n+        //~| ERROR incorrect `repr(align)` attribute format\n         struct S;\n     };\n }"}, {"sha": "9bf36f3c58e8120401905cd8cbce8131aefd22a2", "filename": "src/test/ui/attributes/nonterminal-expansion.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -9,5 +9,17 @@ LL | pass_nonterminal!(n!());\n    |\n    = note: this error originates in the macro `pass_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error[E0693]: incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+  --> $DIR/nonterminal-expansion.rs:5:16\n+   |\n+LL |         #[repr(align($n))]\n+   |                ^^^^^^^^^\n+...\n+LL | pass_nonterminal!(n!());\n+   | ------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `pass_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0693`."}, {"sha": "dcc9a243f0f399a0b73e63fe5820de16224cbcbe", "filename": "src/test/ui/cast/cast-ptr-to-int-const.mir.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,19 +0,0 @@\n-error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n-  --> $DIR/cast-ptr-to-int-const.rs:10:9\n-   |\n-LL |         &Y as *const u32 as usize\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n-   |\n-   = note: casting pointers to integers in constants\n-\n-error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n-  --> $DIR/cast-ptr-to-int-const.rs:17:5\n-   |\n-LL |     &0 as *const i32 as usize\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n-   |\n-   = note: casting pointers to integers in constants\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0133`."}, {"sha": "01ea627679d135b0d4201ec25a5437f5065be6cb", "filename": "src/test/ui/cast/cast-ptr-to-int-const.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,19 +0,0 @@\n-// revisions: mir thir\n-// [thir]compile-flags: -Z thir-unsafeck\n-\n-#![feature(const_raw_ptr_to_usize_cast)]\n-\n-fn main() {\n-    const Y: u32 = 0;\n-    // Cast in `const` without `unsafe` block\n-    const SAFE: usize = {\n-        &Y as *const u32 as usize\n-        //~^ ERROR cast of pointer to int is unsafe and requires unsafe\n-    };\n-}\n-\n-// Cast in `const fn` without `unsafe` block\n-const fn test() -> usize {\n-    &0 as *const i32 as usize\n-    //~^ ERROR cast of pointer to int is unsafe and requires unsafe\n-}"}, {"sha": "dcc9a243f0f399a0b73e63fe5820de16224cbcbe", "filename": "src/test/ui/cast/cast-ptr-to-int-const.thir.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,19 +0,0 @@\n-error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n-  --> $DIR/cast-ptr-to-int-const.rs:10:9\n-   |\n-LL |         &Y as *const u32 as usize\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n-   |\n-   = note: casting pointers to integers in constants\n-\n-error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n-  --> $DIR/cast-ptr-to-int-const.rs:17:5\n-   |\n-LL |     &0 as *const i32 as usize\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n-   |\n-   = note: casting pointers to integers in constants\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0133`."}, {"sha": "03e99eb752740c2822b372050269fc9679aacf15", "filename": "src/test/ui/cast/feature-gate-const_raw_ptr_to_usize_cast.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,13 +0,0 @@\n-fn main() {\n-    const X: usize = unsafe {\n-        main as usize //~ ERROR casting pointers to integers in constants is unstable\n-    };\n-    const Y: u32 = 0;\n-    const Z: usize = unsafe {\n-        &Y as *const u32 as usize //~ ERROR is unstable\n-    };\n-}\n-\n-const fn test() -> usize {\n-    &0 as *const i32 as usize //~ ERROR is unstable\n-}"}, {"sha": "4a0b424e1816b3d7df6a0d08821c1ccbb676d3ac", "filename": "src/test/ui/cast/feature-gate-const_raw_ptr_to_usize_cast.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:3:9\n-   |\n-LL |         main as usize\n-   |         ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:7:9\n-   |\n-LL |         &Y as *const u32 as usize\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:12:5\n-   |\n-LL |     &0 as *const i32 as usize\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "bf1e790b5dc29270a92c743ab2b92bc122a2a031", "filename": "src/test/ui/const-ptr/ptr_to_usize_cast.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,13 +0,0 @@\n-#![feature(const_raw_ptr_to_usize_cast)]\n-\n-fn main() {\n-    const OK: usize = unsafe { 0 as *const i32 as usize };\n-\n-    const _ERROR: usize = unsafe { &0 as *const i32 as usize };\n-    //~^ ERROR [const_err]\n-    //~| NOTE cannot cast pointer to integer because it was not created by cast from integer\n-    //~| NOTE\n-    //~| NOTE `#[deny(const_err)]` on by default\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| NOTE see issue #71800\n-}"}, {"sha": "48255860bb53fd1f0b5331866dbe70ea6544de4d", "filename": "src/test/ui/const-ptr/ptr_to_usize_cast.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,14 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/ptr_to_usize_cast.rs:6:36\n-   |\n-LL |     const _ERROR: usize = unsafe { &0 as *const i32 as usize };\n-   |     -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                    |\n-   |                                    cannot cast pointer to integer because it was not created by cast from integer\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to previous error\n-"}, {"sha": "a177ed6b3413eb9f7b26e099aa6934d3c931a291", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,15 +1,11 @@\n-#![feature(const_raw_ptr_to_usize_cast, const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_deref)]\n \n fn main() {}\n \n-// unconst and fine\n-const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n-// unconst and bad, will thus error in miri\n-const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-// unconst and fine\n+// fine\n const Z: i32 = unsafe { *(&1 as *const i32) };\n-// unconst and bad, will thus error in miri\n+\n+// bad, will thus error in miri\n const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n //~| WARN this was previously accepted by the compiler but is being phased out\n const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause"}, {"sha": "de54ea3b9fbd0c7b6754b766a758c500a9dfaf6d", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,28 +1,17 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops2.rs:8:28\n-   |\n-LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n-   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n-   |                            |\n-   |                            cannot cast pointer to integer because it was not created by cast from integer\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops2.rs:13:26\n+  --> $DIR/const_raw_ptr_ops2.rs:9:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          unable to turn bytes into a pointer\n    |\n+   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops2.rs:15:26\n+  --> $DIR/const_raw_ptr_ops2.rs:11:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n@@ -32,5 +21,5 @@ LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "159b48d42b6c69e50fc146865244fbb3101ee721", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    [();  { &loop { break } as *const _ as usize } ];\n-    //~^ ERROR casting pointers to integers in constants is unstable\n-}"}, {"sha": "2a8f34279c3db67d9f114333de6a0b50b6b9e079", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/issue-52442.rs:2:13\n-   |\n-LL |     [();  { &loop { break } as *const _ as usize } ];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4af97b5487929ce0184a84d429edaf07a1c20b6f", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     // bytes.\n     let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize {\n-            //~^ ERROR casting pointers to integers in constants\n+            //~^ ERROR pointers cannot be cast to integers during const eval\n             0 => 42,\n             n => n,\n         }"}, {"sha": "4e55b36da73929237f0f52a147fc5900975dd388", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "c7d84303fe54ca6028248b792869357a0605c38e", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_raw_ptr_to_usize_cast, const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_deref)]\n \n fn main() {\n     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);"}, {"sha": "46748673067cebb02e795c78449a413186722521", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -7,7 +7,7 @@ const unsafe extern \"C\" fn closure() -> fn() { || {} }\n const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n //~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n-//~^ ERROR casting pointers to integers\n+//~^ ERROR pointers cannot be cast to integers\n \n \n fn main() {}"}, {"sha": "2e52bae2b676cf1601d94ded482deb7bcb76489a", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -25,14 +25,14 @@ LL | const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n    = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n    = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n \n-error[E0658]: casting pointers to integers in constant functions is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/const-extern-fn-min-const-fn.rs:9:48\n    |\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n    |                                                ^^^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: aborting due to 4 previous errors\n "}, {"sha": "44125a1c3df8d64302f9688a81883083c73873da", "filename": "src/test/ui/consts/issue-17458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,5 +1,5 @@\n static X: usize = unsafe { core::ptr::null::<usize>() as usize };\n-//~^ ERROR: casting pointers to integers in statics is unstable\n+//~^ ERROR: pointers cannot be cast to integers during const eval\n \n fn main() {\n     assert_eq!(X, 0);"}, {"sha": "aab7d798db2e7f663882befd9bbf10a7b0e4d34e", "filename": "src/test/ui/consts/issue-17458.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: casting pointers to integers in statics is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/issue-17458.rs:1:28\n    |\n LL | static X: usize = unsafe { core::ptr::null::<usize>() as usize };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "cc644404f7d7351de70b2c410b56faff0cca4cca", "filename": "src/test/ui/consts/issue-51559.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,8 +0,0 @@\n-#![feature(const_raw_ptr_to_usize_cast)]\n-\n-const BAR: *mut () = ((|| 3) as fn() -> i32) as *mut ();\n-pub const FOO: usize = unsafe { BAR as usize };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n-\n-fn main() {}"}, {"sha": "d571eb549630f948ffb25569946f6463603bc160", "filename": "src/test/ui/consts/issue-51559.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,14 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/issue-51559.rs:4:33\n-   |\n-LL | pub const FOO: usize = unsafe { BAR as usize };\n-   | --------------------------------^^^^^^^^^^^^---\n-   |                                 |\n-   |                                 cannot cast pointer to integer because it was not created by cast from integer\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to previous error\n-"}, {"sha": "2249d9879f5dc9243991ddcfb0b945ffdb152ee9", "filename": "src/test/ui/consts/issue-52023-array-size-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to integers in constants\n+    let _ = [0; (&0 as *const i32) as usize]; //~ ERROR pointers cannot be cast to integers during const eval\n }"}, {"sha": "363c7b2c8e462d54281956911cebc8709b4c85b0", "filename": "src/test/ui/consts/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/issue-52023-array-size-pointer-cast.rs:2:17\n    |\n LL |     let _ = [0; (&0 as *const i32) as usize];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d719bf1b97161668d5fb305df2f6e81448788f70", "filename": "src/test/ui/consts/issue-52432.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,10 +0,0 @@\n-#![feature(const_raw_ptr_to_usize_cast)]\n-\n-fn main() {\n-    [(); &(static |x| {}) as *const _ as usize];\n-    //~^ ERROR: closures cannot be static\n-    //~| ERROR: type annotations needed\n-    [(); &(static || {}) as *const _ as usize];\n-    //~^ ERROR: closures cannot be static\n-    //~| ERROR evaluation of constant value failed\n-}"}, {"sha": "29998950552cd502c761a8b287a533c39ff4522a", "filename": "src/test/ui/consts/issue-52432.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3982eb35cabe3a99194d768d34a92347967c3fa2/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr?ref=3982eb35cabe3a99194d768d34a92347967c3fa2", "patch": "@@ -1,28 +0,0 @@\n-error[E0697]: closures cannot be static\n-  --> $DIR/issue-52432.rs:4:12\n-   |\n-LL |     [(); &(static |x| {}) as *const _ as usize];\n-   |            ^^^^^^^^^^\n-\n-error[E0697]: closures cannot be static\n-  --> $DIR/issue-52432.rs:7:12\n-   |\n-LL |     [(); &(static || {}) as *const _ as usize];\n-   |            ^^^^^^^^^\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/issue-52432.rs:4:20\n-   |\n-LL |     [(); &(static |x| {}) as *const _ as usize];\n-   |                    ^ consider giving this closure parameter a type\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52432.rs:7:10\n-   |\n-LL |     [(); &(static || {}) as *const _ as usize];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot cast pointer to integer because it was not created by cast from integer\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0080, E0282, E0697.\n-For more information about an error, try `rustc --explain E0080`."}, {"sha": "bb525d57197789ad5b1ebfbd6a370b00e155e848", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -90,13 +90,13 @@ static BAR: u32 = 42;\n const fn foo25() -> u32 { BAR } //~ ERROR cannot refer to statics\n const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot refer to statics\n const fn foo30(x: *const u32) -> usize { x as usize }\n-//~^ ERROR casting pointers to integers\n+//~^ ERROR pointers cannot be cast to integers\n const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n-//~^ ERROR casting pointers to integers\n+//~^ ERROR pointers cannot be cast to integers\n const fn foo30_2(x: *mut u32) -> usize { x as usize }\n-//~^ ERROR casting pointers to integers\n+//~^ ERROR pointers cannot be cast to integers\n const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n-//~^ ERROR casting pointers to integers\n+//~^ ERROR pointers cannot be cast to integers\n const fn foo30_6() -> bool { let x = true; x }\n const fn inc(x: &mut i32) { *x += 1 }\n //~^ ERROR mutable references"}, {"sha": "fcbf39d38690b5861ddd04d8d04b3eb9a35d7905", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -164,41 +164,41 @@ LL | const fn foo26() -> &'static u32 { &BAR }\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0658]: casting pointers to integers in constant functions is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error[E0658]: casting pointers to integers in constant functions is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error[E0658]: casting pointers to integers in constant functions is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error[E0658]: casting pointers to integers in constant functions is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:101:14"}, {"sha": "77355f0d7c994423a142ceeb4cf87963def7cbcd", "filename": "src/test/ui/issues/issue-18294.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fissues%2Fissue-18294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fissues%2Fissue-18294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     const X: u32 = 1;\n-    const Y: usize = unsafe { &X as *const u32 as usize }; //~ ERROR is unstable\n+    const Y: usize = unsafe { &X as *const u32 as usize }; //~ ERROR pointers cannot be cast to integers\n     println!(\"{}\", Y);\n }"}, {"sha": "432e9a6518765d1e2848f8bc1003405d634a234b", "filename": "src/test/ui/issues/issue-18294.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n+error: pointers cannot be cast to integers during const eval.\n   --> $DIR/issue-18294.rs:3:31\n    |\n LL |     const Y: usize = unsafe { &X as *const u32 as usize };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+   = note: at compile-time, pointers do not have an integer value\n+   = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "70583eb9bd3320b242db508d864a0a6c711610a4", "filename": "src/test/ui/repr/issue-83921-ice.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for various ICEs inspired by\n+// https://github.com/rust-lang/rust/issues/83921#issuecomment-814640734\n+\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n+\n+#[repr(packed())]\n+//~^ ERROR: incorrect `repr(packed)` attribute format\n+struct S1;\n+\n+#[repr(align)]\n+//~^ ERROR: invalid `repr(align)` attribute\n+struct S2;\n+\n+#[repr(align(2, 4))]\n+//~^ ERROR: incorrect `repr(align)` attribute format\n+struct S3;\n+\n+#[repr(align())]\n+//~^ ERROR: incorrect `repr(align)` attribute format\n+struct S4;\n+\n+#[repr(i8())]\n+//~^ ERROR: invalid representation hint\n+enum E1 { A, B }\n+\n+#[repr(u32(42))]\n+//~^ ERROR: invalid representation hint\n+enum E2 { A, B }\n+\n+#[repr(i64 = 2)]\n+//~^ ERROR: invalid representation hint\n+enum E3 { A, B }\n+\n+fn main() {}"}, {"sha": "32c450410eacebb58a2677b4658db63978cd7c48", "filename": "src/test/ui/repr/issue-83921-ice.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -0,0 +1,46 @@\n+error[E0552]: incorrect `repr(packed)` attribute format: `packed` takes exactly one parenthesized argument, or no parentheses at all\n+  --> $DIR/issue-83921-ice.rs:6:8\n+   |\n+LL | #[repr(packed())]\n+   |        ^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: `align` needs an argument\n+  --> $DIR/issue-83921-ice.rs:10:8\n+   |\n+LL | #[repr(align)]\n+   |        ^^^^^ help: supply an argument here: `align(...)`\n+\n+error[E0693]: incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+  --> $DIR/issue-83921-ice.rs:14:8\n+   |\n+LL | #[repr(align(2, 4))]\n+   |        ^^^^^^^^^^^\n+\n+error[E0693]: incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+  --> $DIR/issue-83921-ice.rs:18:8\n+   |\n+LL | #[repr(align())]\n+   |        ^^^^^^^\n+\n+error[E0552]: invalid representation hint: `i8` does not take a parenthesized argument list\n+  --> $DIR/issue-83921-ice.rs:22:8\n+   |\n+LL | #[repr(i8())]\n+   |        ^^^^\n+\n+error[E0552]: invalid representation hint: `u32` does not take a parenthesized argument list\n+  --> $DIR/issue-83921-ice.rs:26:8\n+   |\n+LL | #[repr(u32(42))]\n+   |        ^^^^^^^\n+\n+error[E0552]: invalid representation hint: `i64` does not take a value\n+  --> $DIR/issue-83921-ice.rs:30:8\n+   |\n+LL | #[repr(i64 = 2)]\n+   |        ^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0552, E0589, E0693.\n+For more information about an error, try `rustc --explain E0552`."}, {"sha": "6b7e831ed2f7a47c54e83713ddfbb2194e094d21", "filename": "src/test/ui/repr/issue-83921-pretty.normal.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -0,0 +1,9 @@\n+error[E0565]: meta item in `repr` must be an identifier\n+  --> $DIR/issue-83921-pretty.rs:10:8\n+   |\n+LL | #[repr(\"C\")]\n+   |        ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0565`."}, {"sha": "dad3641f0f5af87b125456ded6023cceaf40434e", "filename": "src/test/ui/repr/issue-83921-pretty.pretty.stdout", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -0,0 +1,19 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// Regression test for #83921. A `delay_span_bug()` call was issued, but the\n+// error was never reported because the pass responsible for detecting and\n+// reporting the error does not run in certain modes of pretty-printing.\n+\n+// Make sure the error is reported if we do not just pretty-print:\n+// revisions: pretty normal\n+// [pretty]compile-flags: -Zunpretty=everybody_loops\n+// [pretty]check-pass\n+#[repr(\"C\")]\n+struct A {\n+}\n+\n+fn main() { loop { } }"}, {"sha": "d5d36470f11acf62ffab868ecc4904df556fde62", "filename": "src/test/ui/repr/issue-83921-pretty.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31431fce770ff90a347fd6114ac294e4568cbd8/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs?ref=a31431fce770ff90a347fd6114ac294e4568cbd8", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #83921. A `delay_span_bug()` call was issued, but the\n+// error was never reported because the pass responsible for detecting and\n+// reporting the error does not run in certain modes of pretty-printing.\n+\n+// Make sure the error is reported if we do not just pretty-print:\n+// revisions: pretty normal\n+// [pretty]compile-flags: -Zunpretty=everybody_loops\n+// [pretty]check-pass\n+\n+#[repr(\"C\")]\n+//[normal]~^ ERROR: meta item in `repr` must be an identifier [E0565]\n+struct A {}\n+\n+fn main() {}"}]}