{"sha": "3e80d3988d70847e6b870749641ea6d434ff261b", "node_id": "C_kwDOAAsO6NoAKDNlODBkMzk4OGQ3MDg0N2U2Yjg3MDc0OTY0MWVhNmQ0MzRmZjI2MWI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-02T04:59:58Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-02T04:59:58Z"}, "message": "Fix ICE in `dereference.rs`", "tree": {"sha": "55461fd5852d96d93378e18b65e39316473384bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55461fd5852d96d93378e18b65e39316473384bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e80d3988d70847e6b870749641ea6d434ff261b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e80d3988d70847e6b870749641ea6d434ff261b", "html_url": "https://github.com/rust-lang/rust/commit/3e80d3988d70847e6b870749641ea6d434ff261b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e80d3988d70847e6b870749641ea6d434ff261b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c341d66a1203d58e53fad206a131357550b2d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c341d66a1203d58e53fad206a131357550b2d7b", "html_url": "https://github.com/rust-lang/rust/commit/8c341d66a1203d58e53fad206a131357550b2d7b"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "14e8d5940cffbcfd65c8c317bc10512de89dfbe2", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e80d3988d70847e6b870749641ea6d434ff261b/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e80d3988d70847e6b870749641ea6d434ff261b/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=3e80d3988d70847e6b870749641ea6d434ff261b", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{\n-    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Expr, ExprKind, GenericArg, HirId, ImplItem,\n+    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Expr, ExprKind, FnRetTy, GenericArg, HirId, ImplItem,\n     ImplItemKind, Item, ItemKind, Local, MatchSource, Mutability, Node, Pat, PatKind, Path, QPath, TraitItem,\n     TraitItemKind, TyKind, UnOp,\n };\n@@ -717,18 +717,32 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n \n             Node::Expr(parent) if parent.span.ctxt() == ctxt => match parent.kind {\n                 ExprKind::Ret(_) => {\n-                    let output = cx\n-                        .tcx\n-                        .fn_sig(cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()))\n-                        .skip_binder()\n-                        .output();\n-                    Some(if !output.is_ref() {\n-                        Position::Other(precedence)\n-                    } else if output.has_placeholders() || output.has_opaque_types() {\n-                        Position::ReborrowStable(precedence)\n-                    } else {\n-                        Position::DerefStable(precedence)\n-                    })\n+                    let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n+                    Some(\n+                        if let Node::Expr(Expr {\n+                            kind: ExprKind::Closure { fn_decl, .. },\n+                            ..\n+                        }) = cx.tcx.hir().get(owner_id)\n+                        {\n+                            match fn_decl.output {\n+                                FnRetTy::Return(ty) => binding_ty_auto_deref_stability(ty, precedence),\n+                                FnRetTy::DefaultReturn(_) => Position::Other(precedence),\n+                            }\n+                        } else {\n+                            let output = cx\n+                                .tcx\n+                                .fn_sig(cx.tcx.hir().local_def_id(owner_id))\n+                                .skip_binder()\n+                                .output();\n+                            if !output.is_ref() {\n+                                Position::Other(precedence)\n+                            } else if output.has_placeholders() || output.has_opaque_types() {\n+                                Position::ReborrowStable(precedence)\n+                            } else {\n+                                Position::DerefStable(precedence)\n+                            }\n+                        },\n+                    )\n                 },\n                 ExprKind::Call(func, _) if func.hir_id == child_id => (child_id == e.hir_id).then(|| Position::Callee),\n                 ExprKind::Call(func, args) => args"}, {"sha": "a650fdc1f897256ab98026823f52aaeec250c19e", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e80d3988d70847e6b870749641ea6d434ff261b/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3e80d3988d70847e6b870749641ea6d434ff261b/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=3e80d3988d70847e6b870749641ea6d434ff261b", "patch": "@@ -211,4 +211,8 @@ fn main() {\n     unsafe {\n         var(0, &**x);\n     }\n+\n+    let s = &\"str\";\n+    let _ = || return *s;\n+    let _ = || -> &'static str { return s };\n }"}, {"sha": "8f4f352576a734514f2648b826205efc4eb219e9", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e80d3988d70847e6b870749641ea6d434ff261b/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e80d3988d70847e6b870749641ea6d434ff261b/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=3e80d3988d70847e6b870749641ea6d434ff261b", "patch": "@@ -211,4 +211,8 @@ fn main() {\n     unsafe {\n         var(0, &**x);\n     }\n+\n+    let s = &\"str\";\n+    let _ = || return *s;\n+    let _ = || -> &'static str { return *s };\n }"}, {"sha": "92765307ea73d55f30a30ecdbc984ba42a645066", "filename": "tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e80d3988d70847e6b870749641ea6d434ff261b/tests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e80d3988d70847e6b870749641ea6d434ff261b/tests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.stderr?ref=3e80d3988d70847e6b870749641ea6d434ff261b", "patch": "@@ -192,5 +192,11 @@ error: deref which would be done by auto-deref\n LL |     f_str(&&**ref_str); // `needless_borrow` will suggest removing only one reference\n    |            ^^^^^^^^^^ help: try this: `ref_str`\n \n-error: aborting due to 32 previous errors\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:217:41\n+   |\n+LL |     let _ = || -> &'static str { return *s };\n+   |                                         ^^ help: try this: `s`\n+\n+error: aborting due to 33 previous errors\n "}]}