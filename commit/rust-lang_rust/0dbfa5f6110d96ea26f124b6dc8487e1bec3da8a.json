{"sha": "0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYmZhNWY2MTEwZDk2ZWEyNmYxMjRiNmRjODQ4N2UxYmVjM2RhOGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-01T17:17:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-02T04:53:43Z"}, "message": "rustdoc: Fix some more broken links", "tree": {"sha": "81ac467b2261814fbc7e7c8abf27818b75abd026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ac467b2261814fbc7e7c8abf27818b75abd026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a", "html_url": "https://github.com/rust-lang/rust/commit/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c605c2b57b412402e6b491e91852fd9dbadeb551", "url": "https://api.github.com/repos/rust-lang/rust/commits/c605c2b57b412402e6b491e91852fd9dbadeb551", "html_url": "https://github.com/rust-lang/rust/commit/c605c2b57b412402e6b491e91852fd9dbadeb551"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "df43e0850a457d6a51012c1c9806d83782a227a4", "filename": "src/doc/index.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a", "patch": "@@ -61,7 +61,6 @@ li {list-style-type: none; }\n * [The `time` library](time/index.html)\n * [The `uuid` 128-bit universally unique identifier library](uuid/index.html)\n * [The `url` library](url/index.html)\n-* [The `workcache` library](workcache/index.html)\n * [The `log` library](log/index.html)\n \n # Tooling"}, {"sha": "1feebbb35b69ea6c602cdcc2ad6732f544ce7c9f", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a", "patch": "@@ -14,24 +14,24 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n-#![allow(missing_doc)]\n-#![doc(hidden)]\n-\n use option::Option;\n \n+#[doc(hidden)]\n pub enum Piece<'a> {\n     String(&'a str),\n     // FIXME(#8259): this shouldn't require the unit-value here\n     CurrentArgument(()),\n     Argument(Argument<'a>),\n }\n \n+#[doc(hidden)]\n pub struct Argument<'a> {\n     pub position: Position,\n     pub format: FormatSpec,\n     pub method: Option<&'a Method<'a>>\n }\n \n+#[doc(hidden)]\n pub struct FormatSpec {\n     pub fill: char,\n     pub align: Alignment,\n@@ -40,38 +40,60 @@ pub struct FormatSpec {\n     pub width: Count,\n }\n \n+/// Possible alignments that can be requested as part of a formatting directive.\n #[deriving(PartialEq)]\n pub enum Alignment {\n+    /// Indication that contents should be left-aligned.\n     AlignLeft,\n+    /// Indication that contents should be right-aligned.\n     AlignRight,\n+    /// No alignment was requested.\n     AlignUnknown,\n }\n \n+#[doc(hidden)]\n pub enum Count {\n     CountIs(uint), CountIsParam(uint), CountIsNextParam, CountImplied,\n }\n \n+#[doc(hidden)]\n pub enum Position {\n     ArgumentNext, ArgumentIs(uint)\n }\n \n+/// Flags which can be passed to formatting via a directive.\n+///\n+/// These flags are discovered through the `flags` field of the `Formatter`\n+/// structure. The flag in that structure is a union of these flags into a\n+/// `uint` where each flag's discriminant is the corresponding bit.\n pub enum Flag {\n+    /// A flag which enables number formatting to always print the sign of a\n+    /// number.\n     FlagSignPlus,\n+    /// Currently not a used flag\n     FlagSignMinus,\n+    /// Indicates that the \"alternate formatting\" for a type should be used.\n+    ///\n+    /// The meaning of this flag is type-specific.\n     FlagAlternate,\n+    /// Indicates that padding should be done with a `0` character as well as\n+    /// being aware of the sign to be printed.\n     FlagSignAwareZeroPad,\n }\n \n+#[doc(hidden)]\n pub enum Method<'a> {\n     Plural(Option<uint>, &'a [PluralArm<'a>], &'a [Piece<'a>]),\n     Select(&'a [SelectArm<'a>], &'a [Piece<'a>]),\n }\n \n+#[doc(hidden)]\n pub enum PluralSelector {\n     Keyword(PluralKeyword),\n     Literal(uint),\n }\n \n+#[doc(hidden)]\n pub enum PluralKeyword {\n     Zero,\n     One,\n@@ -80,11 +102,13 @@ pub enum PluralKeyword {\n     Many,\n }\n \n+#[doc(hidden)]\n pub struct PluralArm<'a> {\n     pub selector: PluralSelector,\n     pub result: &'a [Piece<'a>],\n }\n \n+#[doc(hidden)]\n pub struct SelectArm<'a> {\n     pub selector: &'a str,\n     pub result: &'a [Piece<'a>],"}, {"sha": "440b829c80c4dfb98a1f021ee124b0e5a5f10349", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=0dbfa5f6110d96ea26f124b6dc8487e1bec3da8a", "patch": "@@ -664,7 +664,10 @@\n             for (var j = 0; j < structs.length; j++) {\n                 var code = $('<code>').append(structs[j]);\n                 $.each(code.find('a'), function(idx, a) {\n-                    $(a).attr('href', rootPath + $(a).attr('href'));\n+                    var href = $(a).attr('href');\n+                    if (!href.startsWith('http')) {\n+                        $(a).attr('href', rootPath + $(a).attr('href'));\n+                    }\n                 });\n                 var li = $('<li>').append(code);\n                 list.append(li);"}]}