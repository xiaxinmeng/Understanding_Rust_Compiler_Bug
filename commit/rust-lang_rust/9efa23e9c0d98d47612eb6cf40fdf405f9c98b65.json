{"sha": "9efa23e9c0d98d47612eb6cf40fdf405f9c98b65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZmEyM2U5YzBkOThkNDc2MTJlYjZjZjQwZmRmNDA1ZjljOThiNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-21T14:21:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-21T14:21:48Z"}, "message": "auto merge of #19042 : SimonSapin/rust/generic-utf16-encoder, r=alexcrichton\n\nThis allows encoding to UTF-16 something that is not in UTF-8, e.g. a `[char]` UTF-32 string.\r\n\r\nThis might help with servo/servo#4023", "tree": {"sha": "7bb764af5e6dacf3173643be5c4461ab98dc5b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bb764af5e6dacf3173643be5c4461ab98dc5b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65", "html_url": "https://github.com/rust-lang/rust/commit/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c1d437c93872e6776570beac839f2587782f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c1d437c93872e6776570beac839f2587782f94", "html_url": "https://github.com/rust-lang/rust/commit/47c1d437c93872e6776570beac839f2587782f94"}, {"sha": "dff48a99d6bf9d2c4828f187bfa2c9ba382fe791", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff48a99d6bf9d2c4828f187bfa2c9ba382fe791", "html_url": "https://github.com/rust-lang/rust/commit/dff48a99d6bf9d2c4828f187bfa2c9ba382fe791"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "9c93669b5acbd065bb5a27eb432b88ef7af9db3c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=9efa23e9c0d98d47612eb6cf40fdf405f9c98b65", "patch": "@@ -74,7 +74,8 @@ use vec::Vec;\n pub use core::str::{from_utf8, CharEq, Chars, CharOffsets};\n pub use core::str::{Bytes, CharSplits};\n pub use core::str::{CharSplitsN, AnyLines, MatchIndices, StrSplits};\n-pub use core::str::{Utf16CodeUnits, eq_slice, is_utf8, is_utf16, Utf16Items};\n+pub use core::str::{Utf16Encoder, Utf16CodeUnits};\n+pub use core::str::{eq_slice, is_utf8, is_utf16, Utf16Items};\n pub use core::str::{Utf16Item, ScalarValue, LoneSurrogate, utf16_items};\n pub use core::str::{truncate_utf16_at_nul, utf8_char_width, CharRange};\n pub use core::str::{FromStr, from_str};"}, {"sha": "68e490ecb19c44e2b233667c0cf39bfd4d4ccb72", "filename": "src/libcore/str.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9efa23e9c0d98d47612eb6cf40fdf405f9c98b65", "patch": "@@ -762,11 +762,33 @@ impl<'a> Iterator<&'a str> for StrSplits<'a> {\n /// Use with the `std::iter` module.\n #[deriving(Clone)]\n pub struct Utf16CodeUnits<'a> {\n-    chars: Chars<'a>,\n-    extra: u16\n+    encoder: Utf16Encoder<Chars<'a>>\n }\n \n impl<'a> Iterator<u16> for Utf16CodeUnits<'a> {\n+    #[inline]\n+    fn next(&mut self) -> Option<u16> { self.encoder.next() }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.encoder.size_hint() }\n+}\n+\n+\n+/// Iterator adaptor for encoding `char`s to UTF-16.\n+#[deriving(Clone)]\n+pub struct Utf16Encoder<I> {\n+    chars: I,\n+    extra: u16\n+}\n+\n+impl<I> Utf16Encoder<I> {\n+    /// Create an UTF-16 encoder from any `char` iterator.\n+    pub fn new(chars: I) -> Utf16Encoder<I> where I: Iterator<char> {\n+        Utf16Encoder { chars: chars, extra: 0 }\n+    }\n+}\n+\n+impl<I> Iterator<u16> for Utf16Encoder<I> where I: Iterator<char> {\n     #[inline]\n     fn next(&mut self) -> Option<u16> {\n         if self.extra != 0 {\n@@ -2225,7 +2247,7 @@ impl StrPrelude for str {\n \n     #[inline]\n     fn utf16_units(&self) -> Utf16CodeUnits {\n-        Utf16CodeUnits{ chars: self.chars(), extra: 0}\n+        Utf16CodeUnits { encoder: Utf16Encoder::new(self.chars()) }\n     }\n \n     #[inline]"}, {"sha": "9574aeb3762de230f7e2244809796a90aae6a170", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efa23e9c0d98d47612eb6cf40fdf405f9c98b65/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=9efa23e9c0d98d47612eb6cf40fdf405f9c98b65", "patch": "@@ -114,3 +114,10 @@ fn test_rev_split_char_iterator_no_trailing() {\n     split.reverse();\n     assert_eq!(split, vec![\"\", \"M\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\", \"Little l\u00e4mb\"]);\n }\n+\n+#[test]\n+fn test_utf16_code_units() {\n+    use core::str::Utf16Encoder;\n+    assert_eq!(Utf16Encoder::new(vec!['\u00e9', '\\U0001F4A9'].into_iter()).collect::<Vec<u16>>(),\n+               vec![0xE9, 0xD83D, 0xDCA9])\n+}"}]}