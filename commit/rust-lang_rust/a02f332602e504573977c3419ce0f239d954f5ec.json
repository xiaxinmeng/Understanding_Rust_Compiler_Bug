{"sha": "a02f332602e504573977c3419ce0f239d954f5ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMmYzMzI2MDJlNTA0NTczOTc3YzM0MTljZTBmMjM5ZDk1NGY1ZWM=", "commit": {"author": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2012-02-03T10:53:00Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-03T11:02:57Z"}, "message": "std: rename sort::lteq to sort::le.", "tree": {"sha": "b3c8afc0857e38dcbabc46290445e3130933bcbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c8afc0857e38dcbabc46290445e3130933bcbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a02f332602e504573977c3419ce0f239d954f5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a02f332602e504573977c3419ce0f239d954f5ec", "html_url": "https://github.com/rust-lang/rust/commit/a02f332602e504573977c3419ce0f239d954f5ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a02f332602e504573977c3419ce0f239d954f5ec/comments", "author": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ce38375d95fcc33c550037bfb96ef2a75ce253", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ce38375d95fcc33c550037bfb96ef2a75ce253", "html_url": "https://github.com/rust-lang/rust/commit/43ce38375d95fcc33c550037bfb96ef2a75ce253"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "8c4ac9240552eca581c2ebf28ede011cff2eb9b3", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a02f332602e504573977c3419ce0f239d954f5ec/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02f332602e504573977c3419ce0f239d954f5ec/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=a02f332602e504573977c3419ce0f239d954f5ec", "patch": "@@ -9,8 +9,8 @@ export merge_sort;\n export quick_sort;\n export quick_sort3;\n \n-/* Type: lteq */\n-type lteq<T> = fn(T, T) -> bool;\n+/* Type: le */\n+type le<T> = fn(T, T) -> bool;\n \n /*\n Function: merge_sort\n@@ -20,8 +20,8 @@ Merge sort. Returns a new vector containing the sorted list.\n Has worst case O(n log n) performance, best case O(n), but\n is not space efficient. This is a stable sort.\n */\n-fn merge_sort<T: copy>(le: lteq<T>, v: [const T]) -> [T] {\n-    fn merge<T: copy>(le: lteq<T>, a: [T], b: [T]) -> [T] {\n+fn merge_sort<T: copy>(le: le<T>, v: [const T]) -> [T] {\n+    fn merge<T: copy>(le: le<T>, a: [T], b: [T]) -> [T] {\n         let rs: [T] = [];\n         let a_len: uint = len::<T>(a);\n         let a_ix: uint = 0u;\n@@ -46,7 +46,7 @@ fn merge_sort<T: copy>(le: lteq<T>, v: [const T]) -> [T] {\n     ret merge::<T>(le, merge_sort::<T>(le, a), merge_sort::<T>(le, b));\n }\n \n-fn part<T: copy>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n+fn part<T: copy>(compare_func: le<T>, arr: [mutable T], left: uint,\n                 right: uint, pivot: uint) -> uint {\n     let pivot_value = arr[pivot];\n     arr[pivot] <-> arr[right];\n@@ -63,7 +63,7 @@ fn part<T: copy>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n     ret storage_index;\n }\n \n-fn qsort<T: copy>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n+fn qsort<T: copy>(compare_func: le<T>, arr: [mutable T], left: uint,\n              right: uint) {\n     if right > left {\n         let pivot = (left + right) / 2u;\n@@ -84,12 +84,12 @@ Quicksort. Sorts a mutable vector in place.\n Has worst case O(n^2) performance, average case O(n log n).\n This is an unstable sort.\n */\n-fn quick_sort<T: copy>(compare_func: lteq<T>, arr: [mutable T]) {\n+fn quick_sort<T: copy>(compare_func: le<T>, arr: [mutable T]) {\n     if len::<T>(arr) == 0u { ret; }\n     qsort::<T>(compare_func, arr, 0u, len::<T>(arr) - 1u);\n }\n \n-fn qsort3<T: copy>(compare_func_lt: lteq<T>, compare_func_eq: lteq<T>,\n+fn qsort3<T: copy>(compare_func_lt: le<T>, compare_func_eq: le<T>,\n                   arr: [mutable T], left: int, right: int) {\n     if right <= left { ret; }\n     let v: T = arr[right];\n@@ -150,7 +150,7 @@ According to these slides this is the algorithm of choice for\n \n This is an unstable sort.\n */\n-fn quick_sort3<T: copy>(compare_func_lt: lteq<T>, compare_func_eq: lteq<T>,\n+fn quick_sort3<T: copy>(compare_func_lt: le<T>, compare_func_eq: le<T>,\n                        arr: [mutable T]) {\n     if len::<T>(arr) == 0u { ret; }\n     qsort3::<T>(compare_func_lt, compare_func_eq, arr, 0,\n@@ -204,8 +204,8 @@ mod test_qsort3 {\n mod test_qsort {\n     fn check_sort(v1: [mutable int], v2: [mutable int]) {\n         let len = vec::len::<int>(v1);\n-        fn ltequal(&&a: int, &&b: int) -> bool { ret a <= b; }\n-        let f = ltequal;\n+        fn leual(&&a: int, &&b: int) -> bool { ret a <= b; }\n+        let f = leual;\n         quick_sort::<int>(f, v1);\n         let i = 0u;\n         while i < len {\n@@ -247,8 +247,8 @@ mod test_qsort {\n \n         let expected = [1, 2, 3];\n \n-        fn lteq(&&a: int, &&b: int) -> bool { int::le(a, b) }\n-        sort::quick_sort(lteq, names);\n+        fn le(&&a: int, &&b: int) -> bool { int::le(a, b) }\n+        sort::quick_sort(le, names);\n \n         let immut_names = vec::from_mut(names);\n \n@@ -264,8 +264,8 @@ mod tests {\n \n     fn check_sort(v1: [int], v2: [int]) {\n         let len = vec::len::<int>(v1);\n-        fn lteq(&&a: int, &&b: int) -> bool { ret a <= b; }\n-        let f = lteq;\n+        fn le(&&a: int, &&b: int) -> bool { ret a <= b; }\n+        let f = le;\n         let v3 = merge_sort::<int>(f, v1);\n         let i = 0u;\n         while i < len {\n@@ -294,9 +294,9 @@ mod tests {\n \n     #[test]\n     fn test_merge_sort_mutable() {\n-        fn lteq(&&a: int, &&b: int) -> bool { ret a <= b; }\n+        fn le(&&a: int, &&b: int) -> bool { ret a <= b; }\n         let v1 = [mutable 3, 2, 1];\n-        let v2 = merge_sort(lteq, v1);\n+        let v2 = merge_sort(le, v1);\n         assert v2 == [1, 2, 3];\n     }\n }"}]}