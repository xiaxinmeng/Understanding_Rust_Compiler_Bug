{"sha": "b0e3cb5f32ec25efb9af65293f9d776b6374b657", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZTNjYjVmMzJlYzI1ZWZiOWFmNjUyOTNmOWQ3NzZiNjM3NGI2NTc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-27T17:31:00Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-28T16:28:04Z"}, "message": "Remove a RefCell from pprust::State.", "tree": {"sha": "b6e0f1933631b5e7977c451b1c98f6229fcea1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e0f1933631b5e7977c451b1c98f6229fcea1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e3cb5f32ec25efb9af65293f9d776b6374b657", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e3cb5f32ec25efb9af65293f9d776b6374b657", "html_url": "https://github.com/rust-lang/rust/commit/b0e3cb5f32ec25efb9af65293f9d776b6374b657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e3cb5f32ec25efb9af65293f9d776b6374b657/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f65638e669256f37ddaf4ada6617b57cc6dee0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65638e669256f37ddaf4ada6617b57cc6dee0da", "html_url": "https://github.com/rust-lang/rust/commit/f65638e669256f37ddaf4ada6617b57cc6dee0da"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "b410e0c7169ab49b038f69743c21f63e2a336c38", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b0e3cb5f32ec25efb9af65293f9d776b6374b657/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e3cb5f32ec25efb9af65293f9d776b6374b657/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b0e3cb5f32ec25efb9af65293f9d776b6374b657", "patch": "@@ -26,7 +26,6 @@ use print::pp::{Breaks, Consistent, Inconsistent, eof};\n use print::pp;\n \n use std::cast;\n-use std::cell::RefCell;\n use std::char;\n use std::str;\n use std::io;\n@@ -61,7 +60,7 @@ pub struct State<'a> {\n     comments: Option<Vec<comments::Comment> >,\n     literals: Option<Vec<comments::Literal> >,\n     cur_cmnt_and_lit: CurrentCommentAndLiteral,\n-    boxes: RefCell<Vec<pp::Breaks> >,\n+    boxes: Vec<pp::Breaks>,\n     ann: &'a PpAnn\n }\n \n@@ -82,7 +81,7 @@ pub fn rust_printer_annotated<'a>(writer: ~io::Writer,\n             cur_cmnt: 0,\n             cur_lit: 0\n         },\n-        boxes: RefCell::new(Vec::new()),\n+        boxes: Vec::new(),\n         ann: ann\n     }\n }\n@@ -124,7 +123,7 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n             cur_cmnt: 0,\n             cur_lit: 0\n         },\n-        boxes: RefCell::new(Vec::new()),\n+        boxes: Vec::new(),\n         ann: ann\n     };\n     try!(s.print_mod(&krate.module, krate.attrs.as_slice()));\n@@ -238,23 +237,23 @@ pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> ~str {\n \n impl<'a> State<'a> {\n     pub fn ibox(&mut self, u: uint) -> IoResult<()> {\n-        self.boxes.borrow_mut().push(pp::Inconsistent);\n+        self.boxes.push(pp::Inconsistent);\n         pp::ibox(&mut self.s, u)\n     }\n \n     pub fn end(&mut self) -> IoResult<()> {\n-        self.boxes.borrow_mut().pop().unwrap();\n+        self.boxes.pop().unwrap();\n         pp::end(&mut self.s)\n     }\n \n     pub fn cbox(&mut self, u: uint) -> IoResult<()> {\n-        self.boxes.borrow_mut().push(pp::Consistent);\n+        self.boxes.push(pp::Consistent);\n         pp::cbox(&mut self.s, u)\n     }\n \n     // \"raw box\"\n     pub fn rbox(&mut self, u: uint, b: pp::Breaks) -> IoResult<()> {\n-        self.boxes.borrow_mut().push(b);\n+        self.boxes.push(b);\n         pp::rbox(&mut self.s, u, b)\n     }\n \n@@ -321,8 +320,8 @@ impl<'a> State<'a> {\n         self.s.last_token().is_eof() || self.s.last_token().is_hardbreak_tok()\n     }\n \n-    pub fn in_cbox(&mut self) -> bool {\n-        match self.boxes.borrow().last() {\n+    pub fn in_cbox(&self) -> bool {\n+        match self.boxes.last() {\n             Some(&last_box) => last_box == pp::Consistent,\n             None => false\n         }"}]}