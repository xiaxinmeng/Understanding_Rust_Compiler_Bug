{"sha": "1e653aa96b392a04ed489eadc4cd040bc2859b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjUzYWE5NmIzOTJhMDRlZDQ4OWVhZGM0Y2QwNDBiYzI4NTliNGI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-06T14:35:43Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:17Z"}, "message": "Report a best guess span if no stack is available anymore", "tree": {"sha": "e9fc95111549298617baa831cdd6e251ca7b99fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fc95111549298617baa831cdd6e251ca7b99fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e653aa96b392a04ed489eadc4cd040bc2859b4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53kACgkQpp+NIls6\n19n8UxAAgdjtsi1xbrOpucN++noIBSzSnMrsAs2783W57orRCdF/lWYS5OG1jgma\nBPvEBVdQNMpDU3uEcAnfI3G9TE6AzGHahP/lshKx5Qk9MD9mocf9GK34BAq9MMvP\nppZ4Z8kmIO5IBhwJrnQHV2/8bP649dycLwbVB3Ei0fV8iaLa/eVgI4N9Merfxc61\nLplXDQi/0zhDHOJb5Dar0R+c2UH2FdogcThLHTs9sNwzyVK+8ksjLO1uCOn3M3RA\n260RlU5dELff3vJdaK2XCd2vl4F7GVVtG+2TieMt1xFo3K0I++YRHDXOch+ciqMx\n1hyYKFB6npempRVJYvt3kGKlfL+smZH/TCFRyKDegKRJIBewjWfgKYsmKZc+1Wru\nrS57Sml0OSXSJORE9+hORyZT3QFvsUg/syJhFRpuP8n9YYBbjZ+ds8b0CFPTp8my\nGdGEOmwJoY3R0iwp487dHKBlRXjxDalOdgwSgP9/k/Cwxt/YTDrPQ7TUKhU1GD1K\nrQ5oWUkeqkUoHVaBJM7U+61nA//XoPzV2aJnYaRF48qCZkZIY4QSyA6nIqP0l7vy\nEJYlPr+6B/XLIAZoA+IEKntTUxZZFROgT/Bg1uKGK3V2hltRFpFYkje2dAaIoehp\nqvmGDUcb55em21MC/4oJ9V1lju6xSJ84KkJlZ2w5k7Iz78LCH4s=\n=Ol3L\n-----END PGP SIGNATURE-----", "payload": "tree e9fc95111549298617baa831cdd6e251ca7b99fa\nparent f363e08c9dbddc339eed14b59580de784f74d4e2\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517927743 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494457 +0100\n\nReport a best guess span if no stack is available anymore\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e653aa96b392a04ed489eadc4cd040bc2859b4b", "html_url": "https://github.com/rust-lang/rust/commit/1e653aa96b392a04ed489eadc4cd040bc2859b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e653aa96b392a04ed489eadc4cd040bc2859b4b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f363e08c9dbddc339eed14b59580de784f74d4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f363e08c9dbddc339eed14b59580de784f74d4e2", "html_url": "https://github.com/rust-lang/rust/commit/f363e08c9dbddc339eed14b59580de784f74d4e2"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "b44e91d7b74738de1a8c47941663f9a74575013f", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e653aa96b392a04ed489eadc4cd040bc2859b4b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e653aa96b392a04ed489eadc4cd040bc2859b4b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=1e653aa96b392a04ed489eadc4cd040bc2859b4b", "patch": "@@ -24,7 +24,7 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n ) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>> {\n     debug!(\"mk_borrowck_eval_cx: {:?}\", instance);\n     let param_env = tcx.param_env(instance.def_id());\n-    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n+    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, (), span);\n     // insert a stack frame so any queries have the correct substs\n     ecx.push_stack_frame(\n         instance,\n@@ -42,7 +42,8 @@ pub fn mk_eval_cx<'a, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, EvalContext<'a, 'tcx, 'tcx, CompileTimeEvaluator>> {\n     debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n-    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n+    let span = tcx.def_span(instance.def_id());\n+    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, (), span);\n     let mir = ecx.load_mir(instance.def)?;\n     // insert a stack frame so any queries have the correct substs\n     ecx.push_stack_frame(\n@@ -93,10 +94,10 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> (EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)>, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>) {\n     debug!(\"eval_body: {:?}, {:?}\", cid, param_env);\n-    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n     // we start out with the best span we have\n     // and try improving it down the road when more information is available\n     let mut span = tcx.def_span(cid.instance.def_id());\n+    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, (), mir.map(|mir| mir.span).unwrap_or(span));\n     let res = (|| {\n         let mut mir = match mir {\n             Some(mir) => mir,"}, {"sha": "23ab6be1b46c28c03aa0d76be92de74d940b038c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e653aa96b392a04ed489eadc4cd040bc2859b4b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e653aa96b392a04ed489eadc4cd040bc2859b4b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1e653aa96b392a04ed489eadc4cd040bc2859b4b", "patch": "@@ -45,6 +45,11 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// This prevents infinite loops and huge computations from freezing up const eval.\n     /// Remove once halting problem is solved.\n     pub(crate) steps_remaining: usize,\n+\n+    /// The span that is used if no more stack frames are available\n+    ///\n+    /// This happens after successful evaluation when the result is inspected\n+    root_span: codemap::Span,\n }\n \n /// A stack frame.\n@@ -186,6 +191,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         param_env: ty::ParamEnv<'tcx>,\n         machine: M,\n         memory_data: M::MemoryData,\n+        root_span: codemap::Span,\n     ) -> Self {\n         EvalContext {\n             machine,\n@@ -195,6 +201,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             stack: Vec::new(),\n             stack_limit: tcx.sess.const_eval_stack_frame_limit.get(),\n             steps_remaining: tcx.sess.const_eval_step_limit.get(),\n+            root_span,\n         }\n     }\n \n@@ -1594,12 +1601,15 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             };\n             frames.push(FrameInfo { span, location });\n         }\n-        let frame = self.frame();\n-        let bb = &frame.mir.basic_blocks()[frame.block];\n-        let span = if let Some(stmt) = bb.statements.get(frame.stmt) {\n-            stmt.source_info.span\n+        let span = if let Some(frame) = self.stack().last() {\n+            let bb = &frame.mir.basic_blocks()[frame.block];\n+            if let Some(stmt) = bb.statements.get(frame.stmt) {\n+                stmt.source_info.span\n+            } else {\n+                bb.terminator().source_info.span\n+            }\n         } else {\n-            bb.terminator().source_info.span\n+            self.root_span\n         };\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n         (frames, span)"}]}