{"sha": "2a9fa202fef9b1717fff3cbbe59f980c9f762c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOWZhMjAyZmVmOWIxNzE3ZmZmM2NiYmU1OWY5ODBjOWY3NjJjNTQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-05-13T16:56:33Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-02T14:23:11Z"}, "message": "Add/update tests", "tree": {"sha": "5e3a36f5cb7585b05ad5969fa7b219acd70b34cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3a36f5cb7585b05ad5969fa7b219acd70b34cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9fa202fef9b1717fff3cbbe59f980c9f762c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9fa202fef9b1717fff3cbbe59f980c9f762c54", "html_url": "https://github.com/rust-lang/rust/commit/2a9fa202fef9b1717fff3cbbe59f980c9f762c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9fa202fef9b1717fff3cbbe59f980c9f762c54/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "141546c355f2de7501c1df75dd97229ed350eeb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/141546c355f2de7501c1df75dd97229ed350eeb3", "html_url": "https://github.com/rust-lang/rust/commit/141546c355f2de7501c1df75dd97229ed350eeb3"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "146be23bbb3c0390b153c009f66382157d7185dd", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2a9fa202fef9b1717fff3cbbe59f980c9f762c54/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9fa202fef9b1717fff3cbbe59f980c9f762c54/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=2a9fa202fef9b1717fff3cbbe59f980c9f762c54", "patch": "@@ -0,0 +1,104 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// cdb-command: g\n+\n+// Note: The natvis used to visualize niche-layout enums don't work correctly in cdb\n+//       so the best we can do is to make sure we are generating the right debuginfo\n+\n+// cdb-command: dx -r2 a,!\n+// cdb-check:a,!              [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n+// cdb-check:        [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x2 [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n+\n+// cdb-command: dx -r2 b,!\n+// cdb-check:b,!              [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n+// cdb-check:        [+0x000] __0              : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : None (0x11) [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n+\n+// cdb-command: dx -r2 c,!\n+// cdb-check:c,!              [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n+// cdb-check:        [+0x000] my_data          : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : Tag1 (0x11) [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+\n+// cdb-command: dx -r2 d,!\n+// cdb-check:d,!              [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n+// cdb-check:        [+0x000] my_data          : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x10 [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+\n+// cdb-command: dx -r2 e,!\n+// cdb-check:e,!              [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n+// cdb-check:        [+0x000] my_data          : 0x13 [Type: msvc_pretty_enums::CStyleEnum]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : Tag2 (0x13) [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+\n+// cdb-command: dx -r2 f,!\n+// cdb-check:f,!              [Type: _enum<core::option::Option<u32*>, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::Some]\n+// cdb-check:        [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::tag$]\n+\n+// cdb-command: dx -r2 g,!\n+// cdb-check:g,!              [Type: _enum<core::option::Option<u32*>, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::Some]\n+// cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : None (0x0) [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::tag$]\n+\n+// cdb-command: dx h\n+// cdb-check:h                : Some [Type: _enum<core::option::Option<u32>>]\n+// cdb-check:    [+0x000] variant$         : Some (0x1) [Type: core::option::Option]\n+// cdb-check:    [+0x004] __0              : 0xc [Type: unsigned int]\n+\n+// cdb-command: dx i\n+// cdb-check:i                : None [Type: _enum<core::option::Option<u32>>]\n+// cdb-check:    [+0x000] variant$         : None (0x0) [Type: core::option::Option]\n+\n+// cdb-command: dx j\n+// cdb-check:j                : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n+\n+// cdb-command: dx -r2 k,!\n+// cdb-check:k,!              [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>::Some]\n+// cdb-check:        [+0x000] __0              [Type: alloc::string::String]\n+// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>::tag$]\n+\n+pub enum CStyleEnum {\n+    Low = 2,\n+    High = 16,\n+}\n+\n+pub enum NicheLayoutEnum {\n+    Tag1,\n+    Data { my_data: CStyleEnum },\n+    Tag2,\n+}\n+\n+fn main() {\n+    let a = Some(CStyleEnum::Low);\n+    let b = Option::<CStyleEnum>::None;\n+    let c = NicheLayoutEnum::Tag1;\n+    let d = NicheLayoutEnum::Data { my_data: CStyleEnum::High };\n+    let e = NicheLayoutEnum::Tag2;\n+    let f = Some(&1u32);\n+    let g = Option::<&'static u32>::None;\n+    let h = Some(12u32);\n+    let i = Option::<u32>::None;\n+    let j = CStyleEnum::High;\n+    let k = Some(\"IAMA optional string!\".to_string());\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }\n\\ No newline at end of file"}, {"sha": "aad8ae5cd9fbe8d78e5e8aeb5640c1de5d65adf6", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9fa202fef9b1717fff3cbbe59f980c9f762c54/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9fa202fef9b1717fff3cbbe59f980c9f762c54/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=2a9fa202fef9b1717fff3cbbe59f980c9f762c54", "patch": "@@ -111,11 +111,11 @@\n // NOTE: OsString doesn't have a .natvis entry yet.\n \n // cdb-command: dx some\n-// cdb-check:some             : Some(8) [Type: [...]::Option<i16>]\n+// cdb-check:some             : Some [Type: _enum<core::option::Option<i16>>]\n // cdb-command: dx none\n-// cdb-check:none             : None [Type: [...]::Option<i64>]\n+// cdb-check:none             : None [Type: _enum<core::option::Option<i64>>]\n // cdb-command: dx some_string\n-// cdb-check:some_string      : Some(\"IAMA optional string!\") [[...]::Option<[...]::String>]\n+// cdb-check:some_string      [Type: _enum<core::option::Option<alloc::string::String>, 1, 18446744073709551615, Some>]\n \n #![allow(unused_variables)]\n use std::ffi::OsString;"}]}