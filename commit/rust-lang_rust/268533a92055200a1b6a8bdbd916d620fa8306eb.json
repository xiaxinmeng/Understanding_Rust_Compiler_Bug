{"sha": "268533a92055200a1b6a8bdbd916d620fa8306eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ODUzM2E5MjA1NTIwMGExYjZhOGJkYmQ5MTZkNjIwZmE4MzA2ZWI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-30T23:22:21Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-30T23:39:22Z"}, "message": "Add a precondition on vec::zip\n\nvec::zip now has the precondition that the two argument vectors\nare the same length. Changed uses of it to reflect that.\n\nAlso added a few vector-enumerating utilities to vec.rs, which\nnecessitated in making some functions in u8 declared-pure.", "tree": {"sha": "a8c85f34962d6dc0dc6a987456652cab7c810611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c85f34962d6dc0dc6a987456652cab7c810611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/268533a92055200a1b6a8bdbd916d620fa8306eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/268533a92055200a1b6a8bdbd916d620fa8306eb", "html_url": "https://github.com/rust-lang/rust/commit/268533a92055200a1b6a8bdbd916d620fa8306eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/268533a92055200a1b6a8bdbd916d620fa8306eb/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d37e8cfc6723f0f2dbefdb686a7e220062c1374c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d37e8cfc6723f0f2dbefdb686a7e220062c1374c", "html_url": "https://github.com/rust-lang/rust/commit/d37e8cfc6723f0f2dbefdb686a7e220062c1374c"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "5dea03b0bdd19b9f396904b21df29eb143f11b60", "filename": "src/lib/u8.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Flib%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Flib%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu8.rs?ref=268533a92055200a1b6a8bdbd916d620fa8306eb", "patch": "@@ -1,26 +1,26 @@\n \n \n-fn add(x: u8, y: u8) -> u8 { ret x + y; }\n+pure fn add(x: u8, y: u8) -> u8 { ret x + y; }\n \n-fn sub(x: u8, y: u8) -> u8 { ret x - y; }\n+pure fn sub(x: u8, y: u8) -> u8 { ret x - y; }\n \n-fn mul(x: u8, y: u8) -> u8 { ret x * y; }\n+pure fn mul(x: u8, y: u8) -> u8 { ret x * y; }\n \n-fn div(x: u8, y: u8) -> u8 { ret x / y; }\n+pure fn div(x: u8, y: u8) -> u8 { ret x / y; }\n \n-fn rem(x: u8, y: u8) -> u8 { ret x % y; }\n+pure fn rem(x: u8, y: u8) -> u8 { ret x % y; }\n \n-fn lt(x: u8, y: u8) -> bool { ret x < y; }\n+pure fn lt(x: u8, y: u8) -> bool { ret x < y; }\n \n-fn le(x: u8, y: u8) -> bool { ret x <= y; }\n+pure fn le(x: u8, y: u8) -> bool { ret x <= y; }\n \n-fn eq(x: u8, y: u8) -> bool { ret x == y; }\n+pure fn eq(x: u8, y: u8) -> bool { ret x == y; }\n \n-fn ne(x: u8, y: u8) -> bool { ret x != y; }\n+pure fn ne(x: u8, y: u8) -> bool { ret x != y; }\n \n-fn ge(x: u8, y: u8) -> bool { ret x >= y; }\n+pure fn ge(x: u8, y: u8) -> bool { ret x >= y; }\n \n-fn gt(x: u8, y: u8) -> bool { ret x > y; }\n+pure fn gt(x: u8, y: u8) -> bool { ret x > y; }\n \n iter range(lo: u8, hi: u8) -> u8 { while lo < hi { put lo; lo += 1u8; } }\n // Local Variables:"}, {"sha": "daa1d499d582d8f33b8f228ddd3d7c8b45ea9006", "filename": "src/lib/vec.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=268533a92055200a1b6a8bdbd916d620fa8306eb", "patch": "@@ -57,12 +57,15 @@ fn init_elt_mut<@T>(t: &T, n_elts: uint) -> [mutable T] {\n     ret v;\n }\n \n+// FIXME: Possible typestate postcondition:\n+// len(result) == len(v) (needs issue #586)\n fn to_mut<@T>(v: &[T]) -> [mutable T] {\n     let vres = [mutable];\n     for t: T in v { vres += [mutable t]; }\n     ret vres;\n }\n \n+// Same comment as from_mut\n fn from_mut<@T>(v: &[mutable T]) -> [T] {\n     let vres = [];\n     for t: T in v { vres += [t]; }\n@@ -253,14 +256,23 @@ fn position_pred<T>(f: fn(&T) -> bool, v: &[T]) -> option::t<uint> {\n     ret none;\n }\n \n+pure fn same_length<T, U>(xs: &[T], ys: &[U]) -> bool {\n+    let xlen = unchecked { vec::len(xs) };\n+    let ylen = unchecked { vec::len(ys) };\n+    xlen == ylen\n+}\n+\n+// FIXME: if issue #586 gets implemented, could have a postcondition\n+// saying the two result lists have the same length -- or, could\n+// return a nominal record with a constraint saying that, instead of\n+// returning a tuple (contingent on issue #869)\n fn unzip<@T, @U>(v: &[(T, U)]) -> ([T], [U]) {\n     let as = [], bs = [];\n     for (a, b) in v { as += [a]; bs += [b]; }\n     ret (as, bs);\n }\n \n-// FIXME make the lengths being equal a constraint\n-fn zip<@T, @U>(v: &[T], u: &[U]) -> [(T, U)] {\n+fn zip<@T, @U>(v: &[T], u: &[U]) : same_length(v, u) -> [(T, U)] {\n     let zipped = [];\n     let sz = len(v), i = 0u;\n     assert (sz == len(u));\n@@ -293,6 +305,27 @@ fn reversed<@T>(v: &[T]) -> [T] {\n     ret rs;\n }\n \n+// Generating vecs.\n+fn enum_chars(start:u8, end:u8) : u8::le(start, end) -> [char] {\n+    let i = start;\n+    let r = [];\n+    while (i <= end) {\n+        r += [i as char];\n+        i += (1u as u8);\n+    }\n+    ret r;\n+}\n+\n+fn enum_uints(start:uint, end:uint) : uint::le(start, end) -> [uint] {\n+    let i = start;\n+    let r = [];\n+    while (i <= end) {\n+        r += [i];\n+        i += 1u;\n+    }\n+    ret r;\n+}\n+\n // Iterate over a list with with the indexes\n iter iter2<@T>(v: &[T]) -> (uint, T) {\n     let i = 0u;"}, {"sha": "32109dc1caa8fca4983df450abc12de88f0bd634", "filename": "src/test/stdtest/qsort.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Ftest%2Fstdtest%2Fqsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Ftest%2Fstdtest%2Fqsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort.rs?ref=268533a92055200a1b6a8bdbd916d620fa8306eb", "patch": "@@ -49,7 +49,11 @@ fn test_simple() {\n     fn lteq(a: &int, b: &int) -> bool { int::le(a, b) }\n     sort::quick_sort(lteq, names);\n \n-    let pairs = vec::zip(expected, vec::from_mut(names));\n+    let immut_names = vec::from_mut(names);\n+\n+ // Silly, but what else can we do?\n+    check vec::same_length(expected, immut_names);\n+    let pairs = vec::zip(expected, immut_names);\n     for (a, b) in pairs { log #fmt[\"%d %d\", a, b]; assert (a == b); }\n }\n "}, {"sha": "a1fc943609e9d876d28992008753217eec75ecc4", "filename": "src/test/stdtest/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Ftest%2Fstdtest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Ftest%2Fstdtest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftest.rs?ref=268533a92055200a1b6a8bdbd916d620fa8306eb", "patch": "@@ -86,6 +86,7 @@ fn sort_tests() {\n          \"test::ignored_tests_result_in_ignored\", \"test::parse_ignored_flag\",\n          \"test::sort_tests\"];\n \n+    check vec::same_length(expected, filtered);\n     let pairs = vec::zip(expected, filtered);\n \n "}, {"sha": "3d1df4590678b90978828c131e338dfaabee8628", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268533a92055200a1b6a8bdbd916d620fa8306eb/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=268533a92055200a1b6a8bdbd916d620fa8306eb", "patch": "@@ -302,6 +302,8 @@ fn test_any_and_all() {\n fn test_zip_unzip() {\n     let v1 = [1, 2, 3];\n     let v2 = [4, 5, 6];\n+\n+    check same_length(v1, v2); // Silly, but what else can we do?\n     let z1 = vec::zip(v1, v2);\n \n     assert ((1, 4) == z1[0]);"}]}