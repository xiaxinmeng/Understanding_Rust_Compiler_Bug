{"sha": "e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOWUzYzg5OGNiYzM3MWU4YzNmOWU2ZjFiZTU0MTdiMzBkYWEyNGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-03T10:34:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "fix nits and handling of extern static", "tree": {"sha": "9ff790831abf37a0f0db961b16aadafbc9a60cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff790831abf37a0f0db961b16aadafbc9a60cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "html_url": "https://github.com/rust-lang/rust/commit/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322017b2bc578216a62a297de84b98eb7143923e", "url": "https://api.github.com/repos/rust-lang/rust/commits/322017b2bc578216a62a297de84b98eb7143923e", "html_url": "https://github.com/rust-lang/rust/commit/322017b2bc578216a62a297de84b98eb7143923e"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "5437c8ababc27642f753c42adb32a71250867f7d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "patch": "@@ -19,7 +19,7 @@\n use std::collections::VecDeque;\n use std::ptr;\n \n-use rustc::ty::{self, Instance, query::TyCtxtAt};\n+use rustc::ty::{self, Instance, ParamEnv, query::TyCtxtAt};\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size, HasDataLayout};\n use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, GlobalId,\n                             EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n@@ -235,7 +235,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // Check non-NULL/Undef, extract offset\n         let (offset, alloc_align) = match ptr {\n             Scalar::Ptr(ptr) => {\n-                let (size, align) = self.get_size_and_align(ptr.alloc_id)?;\n+                let (size, align) = self.get_size_and_align(ptr.alloc_id);\n                 // check this is not NULL -- which we can ensure only if this is in-bounds\n                 // of some (potentially dead) allocation.\n                 if ptr.offset > size {\n@@ -359,19 +359,28 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n     }\n \n-    pub fn get_size_and_align(&self, id: AllocId) -> EvalResult<'tcx, (Size, Align)> {\n-        Ok(match self.get(id) {\n-            Ok(alloc) => (Size::from_bytes(alloc.bytes.len() as u64), alloc.align),\n-            Err(err) => match err.kind {\n-                EvalErrorKind::DanglingPointerDeref =>\n-                    // This should be in the dead allocation map\n-                    *self.dead_alloc_map.get(&id).expect(\n-                        \"allocation missing in dead_alloc_map\"\n-                    ),\n-                // E.g. a function ptr allocation\n-                _ => return Err(err)\n+    pub fn get_size_and_align(&self, id: AllocId) -> (Size, Align) {\n+        if let Ok(alloc) = self.get(id) {\n+            return (Size::from_bytes(alloc.bytes.len() as u64), alloc.align);\n+        }\n+        // Could also be a fn ptr or extern static\n+        match self.tcx.alloc_map.lock().get(id) {\n+            Some(AllocType::Function(..)) => (Size::ZERO, Align::from_bytes(1, 1).unwrap()),\n+            Some(AllocType::Static(did)) => {\n+                // The only way `get` couldn\u00c4t have worked here is if this is an extern static\n+                assert!(self.tcx.is_foreign_item(did));\n+                // Use size and align of the type\n+                let ty = self.tcx.type_of(did);\n+                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                (layout.size, layout.align)\n             }\n-        })\n+            _ => {\n+                // Must be a deallocated pointer\n+                *self.dead_alloc_map.get(&id).expect(\n+                    \"allocation missing in dead_alloc_map\"\n+                )\n+            }\n+        }\n     }\n \n     pub fn get_mut("}, {"sha": "862f61df227be2b103f18d15a621c544cb54137a", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "patch": "@@ -384,7 +384,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     } else {\n                         // FIXME: The caller thinks this function cannot return. How do\n                         // we verify that the callee agrees?\n-                        // On the plus side, the the callee every writes to its return place,\n+                        // On the plus side, the the callee ever writes to its return place,\n                         // that will be detected as UB (because we set that to NULL above).\n                     }\n                     Ok(())"}, {"sha": "f0a51000cd8756b32cb790b5530dfafdfa05ed3e", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "patch": "@@ -209,22 +209,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 }\n                 // for safe ptrs, recursively check\n                 if let ty::Ref(..) = value.layout.ty.sty {\n-                    if const_mode {\n-                        // Skip validation entirely for some external statics\n-                        if let Scalar::Ptr(ptr) = place.ptr {\n-                            let alloc_kind = self.tcx.alloc_map.lock().get(ptr.alloc_id);\n-                            if let Some(AllocType::Static(did)) = alloc_kind {\n-                                // `extern static` cannot be validated as they have no body.\n-                                // They are not even properly aligned.\n-                                // Statics from other crates are already checked.\n-                                // They might be checked at a different type, but for now we want\n-                                // to avoid recursing too deeply.  This is not sound!\n-                                if !did.is_local() || self.tcx.is_foreign_item(did) {\n-                                    return Ok(());\n-                                }\n-                            }\n-                        }\n-                    }\n                     // Make sure this is non-NULL and aligned\n                     let (size, align) = self.size_and_align_of(place.extra, place.layout)?;\n                     match self.memory.check_align(place.ptr, align) {\n@@ -244,6 +228,19 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     if !place.layout.is_zst() {\n                         let ptr = try_validation!(place.ptr.to_ptr(),\n                             \"integer pointer in non-ZST reference\", path);\n+                        if const_mode {\n+                            // Skip validation entirely for some external statics\n+                            let alloc_kind = self.tcx.alloc_map.lock().get(ptr.alloc_id);\n+                            if let Some(AllocType::Static(did)) = alloc_kind {\n+                                // `extern static` cannot be validated as they have no body.\n+                                // FIXME: Statics from other crates are also skipped.\n+                                // They might be checked at a different type, but for now we\n+                                // want to avoid recursing too deeply.  This is not sound!\n+                                if !did.is_local() || self.tcx.is_foreign_item(did) {\n+                                    return Ok(());\n+                                }\n+                            }\n+                        }\n                         try_validation!(self.memory.check_bounds(ptr, size, false),\n                             \"dangling (not entirely in bounds) reference\", path);\n                     }"}, {"sha": "857db50edbbc166f3971cb611b3674291251f33c", "filename": "src/test/ui/issues/issue-14227.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs?ref=e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "patch": "@@ -11,9 +11,9 @@\n #![allow(safe_extern_statics, warnings)]\n \n extern {\n-    pub static symbol: ();\n+    pub static symbol: u32;\n }\n-static CRASH: () = symbol;\n+static CRASH: u32 = symbol;\n //~^ ERROR could not evaluate static initializer\n //~| tried to read from foreign (extern) static\n "}, {"sha": "dc6c72d8a725620a92b6d0935565f5908683ca0d", "filename": "src/test/ui/issues/issue-14227.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e09e3c898cbc371e8c3f9e6f1be5417b30daa24a/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr?ref=e09e3c898cbc371e8c3f9e6f1be5417b30daa24a", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-14227.rs:16:20\n+  --> $DIR/issue-14227.rs:16:21\n    |\n-LL | static CRASH: () = symbol;\n-   |                    ^^^^^^ tried to read from foreign (extern) static\n+LL | static CRASH: u32 = symbol;\n+   |                     ^^^^^^ tried to read from foreign (extern) static\n \n error: aborting due to previous error\n "}]}