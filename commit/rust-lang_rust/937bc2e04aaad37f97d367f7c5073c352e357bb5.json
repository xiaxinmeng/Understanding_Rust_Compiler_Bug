{"sha": "937bc2e04aaad37f97d367f7c5073c352e357bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzN2JjMmUwNGFhYWQzN2Y5N2QzNjdmN2M1MDczYzM1MmUzNTdiYjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-18T11:47:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-29T06:10:50Z"}, "message": "Add approximate suggestions for rustfix\n\nThis adds `span_approximate_suggestion()` that lets you emit a\nsuggestion marked as \"approximate\" in the JSON output. UI\nusers see no difference. This is for when rustc and clippy wish to\n emit suggestions which will make sense to the reader (e.g. they may\nhave placeholders like `<type>`) but are not source-applicable, so that\nrustfix/etc can ignore these.\n\nfixes #39254", "tree": {"sha": "d145db7363e4645e9fd8dea3ccd3e368c92ed180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d145db7363e4645e9fd8dea3ccd3e368c92ed180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/937bc2e04aaad37f97d367f7c5073c352e357bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/937bc2e04aaad37f97d367f7c5073c352e357bb5", "html_url": "https://github.com/rust-lang/rust/commit/937bc2e04aaad37f97d367f7c5073c352e357bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/937bc2e04aaad37f97d367f7c5073c352e357bb5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "html_url": "https://github.com/rust-lang/rust/commit/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "40e4efb397d305087b223e4cad8d8143f3d771a7", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=937bc2e04aaad37f97d367f7c5073c352e357bb5", "patch": "@@ -222,6 +222,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: false,\n+            approximate: false,\n         });\n         self\n     }\n@@ -252,6 +253,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n+            approximate: false,\n         });\n         self\n     }\n@@ -267,6 +269,41 @@ impl Diagnostic {\n             }).collect(),\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n+            approximate: false,\n+        });\n+        self\n+    }\n+\n+    /// This is a suggestion that may contain mistakes or fillers and should\n+    /// be read and understood by a human.\n+    pub fn span_approximate_suggestion(&mut self, sp: Span, msg: &str,\n+                                       suggestion: String) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet: suggestion,\n+                    span: sp,\n+                }],\n+            }],\n+            msg: msg.to_owned(),\n+            show_code_when_inline: true,\n+            approximate: true,\n+        });\n+        self\n+    }\n+\n+    pub fn span_approximate_suggestions(&mut self, sp: Span, msg: &str,\n+                                        suggestions: Vec<String>) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: suggestions.into_iter().map(|snippet| Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet,\n+                    span: sp,\n+                }],\n+            }).collect(),\n+            msg: msg.to_owned(),\n+            show_code_when_inline: true,\n+            approximate: true,\n         });\n         self\n     }"}, {"sha": "2536fc648c70ad693f8356b6dfc8d2bf9345e11f", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=937bc2e04aaad37f97d367f7c5073c352e357bb5", "patch": "@@ -186,6 +186,16 @@ impl<'a> DiagnosticBuilder<'a> {\n                                      msg: &str,\n                                      suggestions: Vec<String>)\n                                      -> &mut Self);\n+    forward!(pub fn span_approximate_suggestion(&mut self,\n+                                                sp: Span,\n+                                                msg: &str,\n+                                                suggestion: String)\n+                                                -> &mut Self);\n+    forward!(pub fn span_approximate_suggestions(&mut self,\n+                                                 sp: Span,\n+                                                 msg: &str,\n+                                                 suggestions: Vec<String>)\n+                                                 -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n "}, {"sha": "7df467ab0d4f4f81c0eaeafcefd6a45dbdcc2e3b", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=937bc2e04aaad37f97d367f7c5073c352e357bb5", "patch": "@@ -83,6 +83,12 @@ pub struct CodeSuggestion {\n     pub substitutions: Vec<Substitution>,\n     pub msg: String,\n     pub show_code_when_inline: bool,\n+    /// Whether or not the suggestion is approximate\n+    ///\n+    /// Sometimes we may show suggestions with placeholders,\n+    /// which are useful for users but not useful for\n+    /// tools like rustfix\n+    pub approximate: bool,\n }\n \n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "0dec26e4f741b0ebcf93dfb3e419a19e561b3892", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937bc2e04aaad37f97d367f7c5073c352e357bb5/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=937bc2e04aaad37f97d367f7c5073c352e357bb5", "patch": "@@ -121,6 +121,8 @@ struct DiagnosticSpan {\n     /// If we are suggesting a replacement, this will contain text\n     /// that should be sliced in atop this span.\n     suggested_replacement: Option<String>,\n+    /// If the suggestion is approximate\n+    suggestion_approximate: Option<bool>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n@@ -220,7 +222,7 @@ impl Diagnostic {\n \n impl DiagnosticSpan {\n     fn from_span_label(span: SpanLabel,\n-                       suggestion: Option<&String>,\n+                       suggestion: Option<(&String, bool)>,\n                        je: &JsonEmitter)\n                        -> DiagnosticSpan {\n         Self::from_span_etc(span.span,\n@@ -233,7 +235,7 @@ impl DiagnosticSpan {\n     fn from_span_etc(span: Span,\n                      is_primary: bool,\n                      label: Option<String>,\n-                     suggestion: Option<&String>,\n+                     suggestion: Option<(&String, bool)>,\n                      je: &JsonEmitter)\n                      -> DiagnosticSpan {\n         // obtain the full backtrace from the `macro_backtrace`\n@@ -253,7 +255,7 @@ impl DiagnosticSpan {\n     fn from_span_full(span: Span,\n                       is_primary: bool,\n                       label: Option<String>,\n-                      suggestion: Option<&String>,\n+                      suggestion: Option<(&String, bool)>,\n                       mut backtrace: vec::IntoIter<MacroBacktrace>,\n                       je: &JsonEmitter)\n                       -> DiagnosticSpan {\n@@ -291,7 +293,8 @@ impl DiagnosticSpan {\n             column_end: end.col.0 + 1,\n             is_primary,\n             text: DiagnosticSpanLine::from_span(span, je),\n-            suggested_replacement: suggestion.cloned(),\n+            suggested_replacement: suggestion.map(|x| x.0.clone()),\n+            suggestion_approximate: suggestion.map(|x| x.1),\n             expansion: backtrace_step,\n             label,\n         }\n@@ -309,14 +312,15 @@ impl DiagnosticSpan {\n         suggestion.substitutions\n                       .iter()\n                       .flat_map(|substitution| {\n-                          substitution.parts.iter().map(move |suggestion| {\n+                          substitution.parts.iter().map(move |suggestion_inner| {\n                               let span_label = SpanLabel {\n-                                  span: suggestion.span,\n+                                  span: suggestion_inner.span,\n                                   is_primary: true,\n                                   label: None,\n                               };\n                               DiagnosticSpan::from_span_label(span_label,\n-                                                              Some(&suggestion.snippet),\n+                                                              Some((&suggestion_inner.snippet,\n+                                                                   suggestion.approximate)),\n                                                               je)\n                           })\n                       })"}]}