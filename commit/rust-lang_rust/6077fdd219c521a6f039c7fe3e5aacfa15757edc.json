{"sha": "6077fdd219c521a6f039c7fe3e5aacfa15757edc", "node_id": "C_kwDOAAsO6NoAKDYwNzdmZGQyMTljNTIxYTZmMDM5YzdmZTNlNWFhY2ZhMTU3NTdlZGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-05T17:31:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-05T17:58:46Z"}, "message": "Mark `ErrorGuaranteed` constructor as deprecated so people don't use it", "tree": {"sha": "faddedca44d6a2fc2fbffa1b9535a4818226b3a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faddedca44d6a2fc2fbffa1b9535a4818226b3a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6077fdd219c521a6f039c7fe3e5aacfa15757edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6077fdd219c521a6f039c7fe3e5aacfa15757edc", "html_url": "https://github.com/rust-lang/rust/commit/6077fdd219c521a6f039c7fe3e5aacfa15757edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6077fdd219c521a6f039c7fe3e5aacfa15757edc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82cd953c7c43e64dae6f705ce2f07b291f0e22e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/82cd953c7c43e64dae6f705ce2f07b291f0e22e3", "html_url": "https://github.com/rust-lang/rust/commit/82cd953c7c43e64dae6f705ce2f07b291f0e22e3"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "2d529a34d8eeb3521fe6ccd62d3908d5b9af4ef9", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=6077fdd219c521a6f039c7fe3e5aacfa15757edc", "patch": "@@ -1178,6 +1178,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorGuaranteed> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n         if value.is::<rustc_errors::FatalErrorMarker>() {\n+            #[allow(deprecated)]\n             ErrorGuaranteed::unchecked_claim_error_was_emitted()\n         } else {\n             panic::resume_unwind(value);"}, {"sha": "ef528d87cb227cdb22c038cfe74423196ebdf87f", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=6077fdd219c521a6f039c7fe3e5aacfa15757edc", "patch": "@@ -192,6 +192,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n                      became non-error ({:?}), after original `.emit()`\",\n                     db.inner.diagnostic.level,\n                 );\n+                #[allow(deprecated)]\n                 ErrorGuaranteed::unchecked_claim_error_was_emitted()\n             }\n         }"}, {"sha": "fcbd9a53b48b74ba5bd073df11ed81150b063af4", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=6077fdd219c521a6f039c7fe3e5aacfa15757edc", "patch": "@@ -1069,26 +1069,29 @@ impl Handler {\n     }\n \n     pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n-        self.inner.borrow().has_errors().then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n+        self.inner.borrow().has_errors().then(|| {\n+            #[allow(deprecated)]\n+            ErrorGuaranteed::unchecked_claim_error_was_emitted()\n+        })\n     }\n \n     pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n-        self.inner\n-            .borrow()\n-            .has_errors_or_lint_errors()\n-            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n+        self.inner.borrow().has_errors_or_lint_errors().then(|| {\n+            #[allow(deprecated)]\n+            ErrorGuaranteed::unchecked_claim_error_was_emitted()\n+        })\n     }\n     pub fn has_errors_or_delayed_span_bugs(&self) -> Option<ErrorGuaranteed> {\n-        self.inner\n-            .borrow()\n-            .has_errors_or_delayed_span_bugs()\n-            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n+        self.inner.borrow().has_errors_or_delayed_span_bugs().then(|| {\n+            #[allow(deprecated)]\n+            ErrorGuaranteed::unchecked_claim_error_was_emitted()\n+        })\n     }\n     pub fn is_compilation_going_to_fail(&self) -> Option<ErrorGuaranteed> {\n-        self.inner\n-            .borrow()\n-            .is_compilation_going_to_fail()\n-            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n+        self.inner.borrow().is_compilation_going_to_fail().then(|| {\n+            #[allow(deprecated)]\n+            ErrorGuaranteed::unchecked_claim_error_was_emitted()\n+        })\n     }\n \n     pub fn print_error_count(&self, registry: &Registry) {\n@@ -1333,6 +1336,7 @@ impl HandlerInner {\n                 .push(DelayedDiagnostic::with_backtrace(diagnostic.clone(), backtrace));\n \n             if !self.flags.report_delayed_bugs {\n+                #[allow(deprecated)]\n                 return Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n             }\n         }\n@@ -1411,7 +1415,10 @@ impl HandlerInner {\n                     self.bump_err_count();\n                 }\n \n-                guaranteed = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+                #[allow(deprecated)]\n+                {\n+                    guaranteed = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+                }\n             } else {\n                 self.bump_warn_count();\n             }"}, {"sha": "9e78e6acba54b206e76eb19af794b1af0a5bcbfc", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=6077fdd219c521a6f039c7fe3e5aacfa15757edc", "patch": "@@ -854,9 +854,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let result = self\n             .resolve_fully_qualified_call(span, item_name, ty.normalized, qself.span, hir_id)\n             .or_else(|error| {\n+                let guar = self\n+                    .tcx\n+                    .sess\n+                    .delay_span_bug(span, \"method resolution should've emitted an error\");\n                 let result = match error {\n                     method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n-                    _ => Err(ErrorGuaranteed::unchecked_claim_error_was_emitted()),\n+                    _ => Err(guar),\n                 };\n \n                 // If we have a path like `MyTrait::missing_method`, then don't register"}, {"sha": "5106bd8da1bde3fc909c5d1f4be1459e38cee588", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6077fdd219c521a6f039c7fe3e5aacfa15757edc/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=6077fdd219c521a6f039c7fe3e5aacfa15757edc", "patch": "@@ -2200,6 +2200,7 @@ pub struct ErrorGuaranteed(());\n impl ErrorGuaranteed {\n     /// To be used only if you really know what you are doing... ideally, we would find a way to\n     /// eliminate all calls to this method.\n+    #[deprecated = \"`Session::delay_span_bug` should be preferred over this function\"]\n     pub fn unchecked_claim_error_was_emitted() -> Self {\n         ErrorGuaranteed(())\n     }"}, {"sha": "1d4892bcb2a9f807b85a0abe7c1428b052d87c2b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6077fdd219c521a6f039c7fe3e5aacfa15757edc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6077fdd219c521a6f039c7fe3e5aacfa15757edc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6077fdd219c521a6f039c7fe3e5aacfa15757edc", "patch": "@@ -172,7 +172,11 @@ pub fn main() {\n \n     let exit_code = rustc_driver::catch_with_exit_code(|| match get_args() {\n         Some(args) => main_args(&args),\n-        _ => Err(ErrorGuaranteed::unchecked_claim_error_was_emitted()),\n+        _ =>\n+        {\n+            #[allow(deprecated)]\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        }\n     });\n     process::exit(exit_code);\n }\n@@ -725,6 +729,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n             return if code == 0 {\n                 Ok(())\n             } else {\n+                #[allow(deprecated)]\n                 Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n             };\n         }"}]}