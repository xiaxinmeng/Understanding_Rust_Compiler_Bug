{"sha": "299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OWJkMTJmZTVlZGI0YTk5Zjg1YjFhOTRiOWY5ZTdjZTUzNjU2NTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-14T22:12:11Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-03T01:24:07Z"}, "message": "Point at associated types when they have a default type\n\nAssociated types with a default type in a trait can't be relied upon to\nremain of that default type when in use, so literals of that type can't\nbe used in the trait's items. Point at the associated type and state\nthat information.\n\nReduce verbosity for associated consts of the wrong type.", "tree": {"sha": "b2bd331ba3db485963edbf6dbebe535500cf509c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2bd331ba3db485963edbf6dbebe535500cf509c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "html_url": "https://github.com/rust-lang/rust/commit/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee96b8b11945f8bee1bcfa8f39ed06097c1dc9c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee96b8b11945f8bee1bcfa8f39ed06097c1dc9c8", "html_url": "https://github.com/rust-lang/rust/commit/ee96b8b11945f8bee1bcfa8f39ed06097c1dc9c8"}], "stats": {"total": 121, "additions": 96, "deletions": 25}, "files": [{"sha": "3a05d577bfa7e9f792e83c6027d93cf9bb6e3f18", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -193,6 +193,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     DerivedObligation(DerivedObligationCause<'tcx>),\n \n+    /// Error derived when matching traits/impls; see ObligationCause for more details\n+    CompareImplConstObligation,\n+\n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n         item_name: ast::Name,"}, {"sha": "668c84ad5e6df09703ce467403d249f9a1e47e45", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -164,6 +164,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 tcx.lift(cause).map(super::ImplDerivedObligation)\n             }\n             super::DerivedObligation(ref cause) => tcx.lift(cause).map(super::DerivedObligation),\n+            super::CompareImplConstObligation => Some(super::CompareImplConstObligation),\n             super::CompareImplMethodObligation {\n                 item_name,\n                 impl_item_def_id,"}, {"sha": "14909fff1cedb87d02871ec9274b6775de34c789", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 64, "deletions": 6, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -339,7 +339,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         body_owner_def_id: DefId,\n     ) {\n         use self::TypeError::*;\n-\n+        debug!(\"note_and_explain_type_err err={:?} cause={:?}\", err, cause);\n         match err {\n             Sorts(values) => {\n                 let expected_str = values.expected.sort_string(self);\n@@ -623,8 +623,12 @@ impl<T> Trait<T> for X {\n             ) => false,\n             _ => true,\n         };\n-        let impl_comparison =\n-            matches!(cause_code, ObligationCauseCode::CompareImplMethodObligation { .. });\n+        let impl_comparison = matches!(\n+            cause_code,\n+            ObligationCauseCode::CompareImplMethodObligation { .. }\n+                | ObligationCauseCode::CompareImplTypeObligation { .. }\n+                | ObligationCauseCode::CompareImplConstObligation\n+        );\n         if !callable_scope || impl_comparison {\n             // We do not want to suggest calling functions when the reason of the\n             // type error is a comparison of an `impl` with its `trait` or when the\n@@ -679,12 +683,66 @@ impl<T> Trait<T> for X {\n             suggested |=\n                 self.suggest_constraint(db, &msg, body_owner_def_id, proj_ty, values.found);\n         }\n+        if let (Some(hir_id), false) = (self.hir().as_local_hir_id(body_owner_def_id), suggested) {\n+            // When `body_owner` is an `impl` or `trait` item, look in its associated types for\n+            // `expected` and point at it.\n+            let parent_id = self.hir().get_parent_item(hir_id);\n+            let item = self.hir().find(parent_id);\n+            debug!(\"expected_projection parent item {:?}\", item);\n+            match item {\n+                Some(hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Trait(.., items), ..\n+                })) => {\n+                    // FIXME: account for `#![feature(specialization)]`\n+                    for item in &items[..] {\n+                        match item.kind {\n+                            hir::AssocItemKind::Type | hir::AssocItemKind::OpaqueTy => {\n+                                if self.type_of(self.hir().local_def_id(item.id.hir_id))\n+                                    == values.found\n+                                {\n+                                    if let hir::Defaultness::Default { has_value: true } =\n+                                        item.defaultness\n+                                    {\n+                                        db.span_label(\n+                                            item.span,\n+                                            \"associated type defaults can't be assumed inside the \\\n+                                                trait defining them\",\n+                                        );\n+                                    } else {\n+                                        db.span_label(item.span, \"expected this associated type\");\n+                                    }\n+                                    suggested = true;\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+                Some(hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl { items, .. },\n+                    ..\n+                })) => {\n+                    for item in &items[..] {\n+                        match item.kind {\n+                            hir::AssocItemKind::Type | hir::AssocItemKind::OpaqueTy => {\n+                                if self.type_of(self.hir().local_def_id(item.id.hir_id))\n+                                    == values.found\n+                                {\n+                                    db.span_label(item.span, \"expected this associated type\");\n+                                    suggested = true;\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n         if !suggested && !impl_comparison {\n             // Generic suggestion when we can't be more specific.\n             if callable_scope {\n-                db.help(\n-                    &format!(\"{} or calling a method that returns `{}`\", msg, values.expected,),\n-                );\n+                db.help(&format!(\"{} or calling a method that returns `{}`\", msg, values.expected));\n             } else {\n                 db.help(&msg);\n             }"}, {"sha": "ce7b1390d46b6dcb740e7cdcb6fbd8a8e97a2b8a", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -1738,6 +1738,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     predicate\n                 ));\n             }\n+            ObligationCauseCode::CompareImplConstObligation => {\n+                err.note(&format!(\n+                    \"the requirement `{}` appears on the associated impl constant \\\n+                     but not on the corresponding associated trait constant\",\n+                    predicate\n+                ));\n+            }\n             ObligationCauseCode::ReturnType\n             | ObligationCauseCode::ReturnValue(_)\n             | ObligationCauseCode::BlockTailExpression(_) => (),"}, {"sha": "29cd9681295be4246ce8824e8d52efd289375003", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -966,6 +966,7 @@ crate fn compare_const_impl<'tcx>(\n         let impl_ty = tcx.type_of(impl_c.def_id);\n         let trait_ty = tcx.type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n         let mut cause = ObligationCause::misc(impl_c_span, impl_c_hir_id);\n+        cause.code = ObligationCauseCode::CompareImplConstObligation;\n \n         // There is no \"body\" here, so just pass dummy id.\n         let impl_ty ="}, {"sha": "d8bac07e058da3278f528134c023b0949f0e4794", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -9,8 +9,6 @@ LL |     const FROM: &'static str = \"foo\";\n    |\n    = note: expected associated type `<T as Foo>::Out`\n                     found reference `&'static str`\n-   = help: consider constraining the associated type `<T as Foo>::Out` to `&'static str`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "4014f46285d70aeaeebb1ea4430c10868e3926a0", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -3,15 +3,13 @@\n // Associated type defaults may not be assumed inside the trait defining them.\n // ie. they only resolve to `<Self as Tr>::A`, not the actual type `()`\n trait Tr {\n-    type A = ();\n+    type A = (); //~ NOTE associated type defaults can't be assumed inside the trait defining them\n \n     fn f(p: Self::A) {\n         let () = p;\n         //~^ ERROR mismatched types\n         //~| NOTE expected associated type, found `()`\n         //~| NOTE expected associated type `<Self as Tr>::A`\n-        //~| HELP consider constraining the associated type\n-        //~| NOTE for more information, visit\n     }\n }\n \n@@ -31,15 +29,13 @@ impl Tr for u8 {\n }\n \n trait AssocConst {\n-    type Ty = u8;\n+    type Ty = u8; //~ NOTE associated type defaults can't be assumed inside the trait defining them\n \n     // Assoc. consts also cannot assume that default types hold\n     const C: Self::Ty = 0u8;\n     //~^ ERROR mismatched types\n     //~| NOTE expected associated type, found `u8`\n     //~| NOTE expected associated type `<Self as AssocConst>::Ty`\n-    //~| HELP consider constraining the associated type\n-    //~| NOTE for more information, visit\n }\n \n // An impl can, however"}, {"sha": "493df30a64daf25f5a54076a8070ee6c5ddd311c", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -1,24 +1,26 @@\n error[E0308]: mismatched types\n   --> $DIR/defaults-in-other-trait-items.rs:9:13\n    |\n+LL |     type A = ();\n+   |     ------------ associated type defaults can't be assumed inside the trait defining them\n+...\n LL |         let () = p;\n    |             ^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<Self as Tr>::A`\n                     found unit type `()`\n-   = help: consider constraining the associated type `<Self as Tr>::A` to `()` or calling a method that returns `<Self as Tr>::A`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-in-other-trait-items.rs:37:25\n+  --> $DIR/defaults-in-other-trait-items.rs:35:25\n    |\n+LL |     type Ty = u8;\n+   |     ------------- associated type defaults can't be assumed inside the trait defining them\n+...\n LL |     const C: Self::Ty = 0u8;\n    |                         ^^^ expected associated type, found `u8`\n    |\n    = note: expected associated type `<Self as AssocConst>::Ty`\n                          found type `u8`\n-   = help: consider constraining the associated type `<Self as AssocConst>::Ty` to `u8`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "37a4d9b60fdfdc48beab55a685755c2494406f4a", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -16,6 +16,9 @@ error[E0053]: method `make` has an incompatible type for trait\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n ...\n+LL |     default type Ty = bool;\n+   |     ----------------------- expected this associated type\n+LL | \n LL |     fn make() -> bool { true }\n    |                  ^^^^ expected associated type, found `bool`\n    |\n@@ -25,15 +28,16 @@ LL |     fn make() -> bool { true }\n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:9:9\n    |\n+LL |     type Ty = u8;\n+   |     ------------- associated type defaults can't be assumed inside the trait defining them\n+LL | \n LL |     fn make() -> Self::Ty {\n    |                  -------- expected `<Self as Tr>::Ty` because of return type\n LL |         0u8\n    |         ^^^ expected associated type, found `u8`\n    |\n    = note: expected associated type `<Self as Tr>::Ty`\n                          found type `u8`\n-   = help: consider constraining the associated type `<Self as Tr>::Ty` to `u8` or calling a method that returns `<Self as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:25:29\n@@ -51,15 +55,16 @@ LL |     fn make() -> Self::Ty { 0u8 }\n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:43:29\n    |\n+LL |     default type Ty = bool;\n+   |     ----------------------- expected this associated type\n+LL | \n LL |     fn make() -> Self::Ty { true }\n    |                  --------   ^^^^ expected associated type, found `bool`\n    |                  |\n    |                  expected `<B2<T> as Tr>::Ty` because of return type\n    |\n    = note: expected associated type `<B2<T> as Tr>::Ty`\n                          found type `bool`\n-   = help: consider constraining the associated type `<B2<T> as Tr>::Ty` to `bool` or calling a method that returns `<B2<T> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:86:32"}, {"sha": "7233387eba1fabcdeba657c874762056c91af620", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/299bd12fe5edb4a99f85b1a94b9f9e7ce5365654/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=299bd12fe5edb4a99f85b1a94b9f9e7ce5365654", "patch": "@@ -1,15 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:15:9\n    |\n+LL |     default type Output = Box<T>;\n+   |     ----------------------------- expected this associated type\n LL |     default fn generate(self) -> Self::Output {\n    |                                  ------------ expected `<T as Example>::Output` because of return type\n LL |         Box::new(self)\n    |         ^^^^^^^^^^^^^^ expected associated type, found struct `std::boxed::Box`\n    |\n    = note: expected associated type `<T as Example>::Output`\n                        found struct `std::boxed::Box<T>`\n-   = help: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>` or calling a method that returns `<T as Example>::Output`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:25:5"}]}