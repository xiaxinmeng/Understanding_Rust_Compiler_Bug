{"sha": "ca4557ac524c104bff03d5f6dfc7bece7c919608", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDU1N2FjNTI0YzEwNGJmZjAzZDVmNmRmYzdiZWNlN2M5MTk2MDg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-22T22:23:33Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-22T22:44:15Z"}, "message": "Fix the tests", "tree": {"sha": "29529e62a16e8ac5db32706c6f44402bbc575c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29529e62a16e8ac5db32706c6f44402bbc575c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca4557ac524c104bff03d5f6dfc7bece7c919608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4557ac524c104bff03d5f6dfc7bece7c919608", "html_url": "https://github.com/rust-lang/rust/commit/ca4557ac524c104bff03d5f6dfc7bece7c919608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca4557ac524c104bff03d5f6dfc7bece7c919608/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6670868d0976e1bf9dc320d4ab31b0d8297e505d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6670868d0976e1bf9dc320d4ab31b0d8297e505d", "html_url": "https://github.com/rust-lang/rust/commit/6670868d0976e1bf9dc320d4ab31b0d8297e505d"}], "stats": {"total": 110, "additions": 105, "deletions": 5}, "files": [{"sha": "8d1c447ef28786d1e7fcefd7c8772546910d9e8a", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 105, "deletions": 5, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ca4557ac524c104bff03d5f6dfc7bece7c919608/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4557ac524c104bff03d5f6dfc7bece7c919608/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=ca4557ac524c104bff03d5f6dfc7bece7c919608", "patch": "@@ -284,11 +284,6 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n-            InlayHint {\n-                range: [584; 585),\n-                kind: TypeHint,\n-                label: \"i32\",\n-            },\n             InlayHint {\n                 range: [577; 578),\n                 kind: TypeHint,\n@@ -299,6 +294,11 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"f64\",\n             },\n+            InlayHint {\n+                range: [584; 585),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n             InlayHint {\n                 range: [627; 628),\n                 kind: TypeHint,\n@@ -446,6 +446,11 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n+            InlayHint {\n+                range: [287; 291),\n+                kind: TypeHint,\n+                label: \"&CustomOption<Test>\",\n+            },\n             InlayHint {\n                 range: [334; 338),\n                 kind: TypeHint,\n@@ -461,11 +466,36 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n+            InlayHint {\n+                range: [449; 450),\n+                kind: TypeHint,\n+                label: \"&CustomOption<u32>\",\n+            },\n+            InlayHint {\n+                range: [455; 456),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n             InlayHint {\n                 range: [531; 532),\n                 kind: TypeHint,\n                 label: \"&u32\",\n             },\n+            InlayHint {\n+                range: [538; 539),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n+            InlayHint {\n+                range: [618; 619),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n+            InlayHint {\n+                range: [675; 676),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n         ]\n         \"###\n         );\n@@ -509,6 +539,11 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n+            InlayHint {\n+                range: [293; 297),\n+                kind: TypeHint,\n+                label: \"&CustomOption<Test>\",\n+            },\n             InlayHint {\n                 range: [343; 347),\n                 kind: TypeHint,\n@@ -524,11 +559,36 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n+            InlayHint {\n+                range: [464; 465),\n+                kind: TypeHint,\n+                label: \"&CustomOption<u32>\",\n+            },\n+            InlayHint {\n+                range: [470; 471),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n             InlayHint {\n                 range: [549; 550),\n                 kind: TypeHint,\n                 label: \"&u32\",\n             },\n+            InlayHint {\n+                range: [556; 557),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n+            InlayHint {\n+                range: [639; 640),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n+            InlayHint {\n+                range: [699; 700),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n         ]\n         \"###\n         );\n@@ -567,6 +627,11 @@ fn main() {\n \n         assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n+            InlayHint {\n+                range: [272; 276),\n+                kind: TypeHint,\n+                label: \"CustomOption<Test>\",\n+            },\n             InlayHint {\n                 range: [311; 315),\n                 kind: TypeHint,\n@@ -582,11 +647,36 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n+            InlayHint {\n+                range: [410; 411),\n+                kind: TypeHint,\n+                label: \"CustomOption<u32>\",\n+            },\n+            InlayHint {\n+                range: [416; 417),\n+                kind: TypeHint,\n+                label: \"u8\",\n+            },\n             InlayHint {\n                 range: [484; 485),\n                 kind: TypeHint,\n                 label: \"u32\",\n             },\n+            InlayHint {\n+                range: [491; 492),\n+                kind: TypeHint,\n+                label: \"u8\",\n+            },\n+            InlayHint {\n+                range: [563; 564),\n+                kind: TypeHint,\n+                label: \"u8\",\n+            },\n+            InlayHint {\n+                range: [612; 613),\n+                kind: TypeHint,\n+                label: \"u8\",\n+            },\n         ]\n         \"###\n         );\n@@ -676,11 +766,21 @@ fn main() {\n                 kind: ParameterHint,\n                 label: \"msg\",\n             },\n+            InlayHint {\n+                range: [277; 288),\n+                kind: ParameterHint,\n+                label: \"last\",\n+            },\n             InlayHint {\n                 range: [331; 334),\n                 kind: ParameterHint,\n                 label: \"param\",\n             },\n+            InlayHint {\n+                range: [354; 356),\n+                kind: ParameterHint,\n+                label: \"&self\",\n+            },\n             InlayHint {\n                 range: [358; 362),\n                 kind: ParameterHint,"}]}