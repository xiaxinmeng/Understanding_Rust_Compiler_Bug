{"sha": "4df405a7680c99df325bec3849634f31442bce79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZjQwNWE3NjgwYzk5ZGYzMjViZWMzODQ5NjM0ZjMxNDQyYmNlNzk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-12T22:25:46Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-12T22:25:46Z"}, "message": "Line breaking around generics in tuple structs", "tree": {"sha": "918a1a8855311b898dc1cfb9ed5d95dde4adbeef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918a1a8855311b898dc1cfb9ed5d95dde4adbeef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4df405a7680c99df325bec3849634f31442bce79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4df405a7680c99df325bec3849634f31442bce79", "html_url": "https://github.com/rust-lang/rust/commit/4df405a7680c99df325bec3849634f31442bce79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4df405a7680c99df325bec3849634f31442bce79/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5478f7d455f30ba0edfa3a604f96704331f785e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5478f7d455f30ba0edfa3a604f96704331f785e", "html_url": "https://github.com/rust-lang/rust/commit/d5478f7d455f30ba0edfa3a604f96704331f785e"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "e0912828f2d69fa3eed2faea33199093803bf801", "filename": "src/items.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4df405a7680c99df325bec3849634f31442bce79/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df405a7680c99df325bec3849634f31442bce79/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4df405a7680c99df325bec3849634f31442bce79", "patch": "@@ -1018,19 +1018,16 @@ fn format_tuple_struct(context: &RewriteContext,\n \n     let (tactic, item_indent) = match context.config.fn_args_layout {\n         FnArgLayoutStyle::Visual => {\n-            result.push('(');\n-            (ListTactic::HorizontalVertical, offset.block_only() + result.len())\n+            // 1 = `(`\n+            (ListTactic::HorizontalVertical, offset.block_only() + result.len() + 1)\n         }\n         FnArgLayoutStyle::Block |\n         FnArgLayoutStyle::BlockAlways => {\n-            let indent = offset.block_only().block_indent(&context.config);\n-            result.push_str(\"(\\n\");\n-            result.push_str(&indent.to_string(&context.config));\n-            (ListTactic::Vertical, indent)\n+            (ListTactic::HorizontalVertical, offset.block_only().block_indent(&context.config))\n         }\n     };\n-    // 2 = \");\"\n-    let item_budget = try_opt!(context.config.max_width.checked_sub(item_indent.width() + 2));\n+    // 3 = `();`\n+    let item_budget = try_opt!(context.config.max_width.checked_sub(item_indent.width() + 3));\n \n     let items =\n         itemize_list(context.codemap,\n@@ -1048,31 +1045,34 @@ fn format_tuple_struct(context: &RewriteContext,\n                      |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n                      context.codemap.span_after(span, \"(\"),\n                      span.hi);\n+    let body_budget = try_opt!(context.config.max_width.checked_sub(offset.block_only().width() +\n+                                                                    result.len() +\n+                                                                    3));\n     let body = try_opt!(list_helper(items,\n-                                    Shape::legacy(item_budget, item_indent),\n+                                    // TODO budget is wrong in block case\n+                                    Shape::legacy(body_budget, item_indent),\n                                     context.config,\n                                     tactic));\n \n-    if context.config.spaces_within_parens && body.len() > 0 {\n-        result.push(' ');\n-    }\n-\n-    result.push_str(&body);\n+    if context.config.fn_args_layout == FnArgLayoutStyle::Visual || !body.contains('\\n') {\n+        result.push('(');\n+        if context.config.spaces_within_parens && body.len() > 0 {\n+            result.push(' ');\n+        }\n \n-    if context.config.spaces_within_parens && body.len() > 0 {\n-        result.push(' ');\n-    }\n+        result.push_str(&body);\n \n-    match context.config.fn_args_layout {\n-        FnArgLayoutStyle::Visual => {\n-            result.push(')');\n-        }\n-        FnArgLayoutStyle::Block |\n-        FnArgLayoutStyle::BlockAlways => {\n-            result.push('\\n');\n-            result.push_str(&offset.block_only().to_string(&context.config));\n-            result.push(')');\n+        if context.config.spaces_within_parens && body.len() > 0 {\n+            result.push(' ');\n         }\n+        result.push(')');\n+    } else {\n+        result.push_str(\"(\\n\");\n+        result.push_str(&item_indent.to_string(&context.config));\n+        result.push_str(&body);\n+        result.push('\\n');\n+        result.push_str(&offset.block_only().to_string(&context.config));\n+        result.push(')');\n     }\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n@@ -1563,12 +1563,11 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     let multi_line_arg_str = arg_str.contains('\\n');\n \n-    let put_args_in_block = (match context.config.fn_args_layout {\n-                                 FnArgLayoutStyle::Block => multi_line_arg_str,\n-                                 FnArgLayoutStyle::BlockAlways => true,\n-                                 _ => false,\n-                             } || generics_str.contains('\\n')) &&\n-                            !fd.inputs.is_empty();\n+    let put_args_in_block = match context.config.fn_args_layout {\n+        FnArgLayoutStyle::Block => multi_line_arg_str || generics_str.contains('\\n'),\n+        FnArgLayoutStyle::BlockAlways => true,\n+        _ => false,\n+    } && !fd.inputs.is_empty();\n \n     if put_args_in_block {\n         arg_indent = indent.block_indent(context.config);"}, {"sha": "ff67084b2021a179bb71a4d947b23da98d46066b", "filename": "tests/target/fn-custom-2.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4df405a7680c99df325bec3849634f31442bce79/tests%2Ftarget%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df405a7680c99df325bec3849634f31442bce79/tests%2Ftarget%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-2.rs?ref=4df405a7680c99df325bec3849634f31442bce79", "patch": "@@ -12,10 +12,11 @@ e: Eeeeeeeeeeeeeeeeeee) {\n     foo();\n }\n \n-fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+fn bar<\n+    'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n     TTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n-    (a: Aaaaaaaaaaaaaaa) {\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+>(a: Aaaaaaaaaaaaaaa) {\n     bar();\n }\n \n@@ -42,9 +43,11 @@ impl Foo {\n         foo();\n     }\n \n-    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    fn bar<\n+        'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n         TTTTTTTTTTTTT,\n-        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+    >\n         (a: Aaaaaaaaaaaaaaa) {\n         bar();\n     }\n@@ -56,10 +59,11 @@ impl Foo {\n     }\n }\n \n-struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+struct Foo<\n+    TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUU,\n     VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n-    WWWWWWWWWWWWWWWWWWWWWWWW>\n-{\n+    WWWWWWWWWWWWWWWWWWWWWWWW\n+> {\n     foo: Foo,\n }"}, {"sha": "f8de7f4a34310b37e385f7b83d534b770f1db77c", "filename": "tests/target/fn-custom-3.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4df405a7680c99df325bec3849634f31442bce79/tests%2Ftarget%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df405a7680c99df325bec3849634f31442bce79/tests%2Ftarget%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-3.rs?ref=4df405a7680c99df325bec3849634f31442bce79", "patch": "@@ -11,10 +11,11 @@ fn foo(a: Aaaaaaaaaaaaaaa,\n     foo();\n }\n \n-fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+fn bar<\n+'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n TTTTTTTTTTTTT,\n-UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n-    (a: Aaaaaaaaaaaaaaa) {\n+UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+>(a: Aaaaaaaaaaaaaaa) {\n     bar();\n }\n \n@@ -43,18 +44,21 @@ impl Foo {\n         foo();\n     }\n \n-    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    fn bar<\n+    'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n     TTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n+    >\n         (a: Aaaaaaaaaaaaaaa) {\n         bar();\n     }\n }\n \n-struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+struct Foo<\n+TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n UUUUUUUUUUUUUUUUUUUUUU,\n VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n-WWWWWWWWWWWWWWWWWWWWWWWW>\n-{\n+WWWWWWWWWWWWWWWWWWWWWWWW\n+> {\n     foo: Foo,\n }"}]}