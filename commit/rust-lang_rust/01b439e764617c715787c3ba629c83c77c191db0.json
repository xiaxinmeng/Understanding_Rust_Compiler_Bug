{"sha": "01b439e764617c715787c3ba629c83c77c191db0", "node_id": "C_kwDOAAsO6NoAKDAxYjQzOWU3NjQ2MTdjNzE1Nzg3YzNiYTYyOWM4M2M3N2MxOTFkYjA", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-12T01:15:57Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-12T01:15:57Z"}, "message": "Add #[must_use] to is_condition tests\n\nA continuation of #89718.", "tree": {"sha": "b7d15aea60e683c024fb16b8eb37aa984633b335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7d15aea60e683c024fb16b8eb37aa984633b335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b439e764617c715787c3ba629c83c77c191db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b439e764617c715787c3ba629c83c77c191db0", "html_url": "https://github.com/rust-lang/rust/commit/01b439e764617c715787c3ba629c83c77c191db0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b439e764617c715787c3ba629c83c77c191db0/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "html_url": "https://github.com/rust-lang/rust/commit/7cc8c44871b6e789d29fc0d42dacad9804c3a41c"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "9f45e89aa7504217fcb23f898c9c9073376ba9e4", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=01b439e764617c715787c3ba629c83c77c191db0", "patch": "@@ -1005,6 +1005,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_dir(&self) -> bool {\n         self.file_type().is_dir()\n@@ -1033,6 +1034,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_file(&self) -> bool {\n         self.file_type().is_file()\n@@ -1059,6 +1061,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n     pub fn is_symlink(&self) -> bool {\n         self.file_type().is_symlink()\n@@ -1306,6 +1309,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_dir(&self) -> bool {\n         self.0.is_dir()\n@@ -1338,6 +1342,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_file(&self) -> bool {\n         self.0.is_file()\n@@ -1373,6 +1378,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_symlink(&self) -> bool {\n         self.0.is_symlink()"}, {"sha": "a689d2a56b721d2c8fd1574c907e0de28e21418c", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=01b439e764617c715787c3ba629c83c77c191db0", "patch": "@@ -232,6 +232,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv4(), true);\n     /// assert_eq!(socket.is_ipv6(), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn is_ipv4(&self) -> bool {\n@@ -253,6 +254,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv4(), false);\n     /// assert_eq!(socket.is_ipv6(), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn is_ipv6(&self) -> bool {"}, {"sha": "68b8bb8f3e1908c831d0e884563d3c5ba9daa51f", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=01b439e764617c715787c3ba629c83c77c191db0", "patch": "@@ -233,6 +233,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         match self {\n@@ -256,6 +257,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         match self {\n@@ -281,6 +283,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self {\n@@ -304,6 +307,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         match self {\n@@ -332,6 +336,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self {\n@@ -356,6 +361,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0)).is_benchmarking(), true);\n     /// ```\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         match self {\n@@ -379,6 +385,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(self, IpAddr::V4(_))\n@@ -399,6 +406,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n@@ -527,6 +535,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n@@ -548,6 +557,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n@@ -578,6 +588,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_private(&self) -> bool {\n         match self.octets() {\n@@ -605,6 +616,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_link_local(&self) -> bool {\n         matches!(self.octets(), [169, 254, ..])\n@@ -680,6 +692,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n@@ -720,6 +733,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n@@ -745,6 +759,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n@@ -779,6 +794,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n@@ -802,6 +818,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n@@ -823,6 +840,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_broadcast(&self) -> bool {\n         u32::from_be_bytes(self.octets()) == u32::from_be_bytes(Self::BROADCAST.octets())\n@@ -850,6 +868,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self.octets() {\n@@ -1291,6 +1310,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n@@ -1314,6 +1334,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n@@ -1340,6 +1361,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n@@ -1367,6 +1389,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n@@ -1395,6 +1418,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast(&self) -> bool {\n         !self.is_multicast()\n@@ -1446,6 +1470,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n@@ -1470,6 +1495,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n@@ -1492,6 +1518,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0).is_benchmarking(), true);\n     /// ```\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0x2) && (self.segments()[2] == 0)\n@@ -1529,6 +1556,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n         self.is_unicast()\n@@ -1590,6 +1618,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00"}, {"sha": "9b2eb793dfd2cbe15f8923beb2578e580ac578ec", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=01b439e764617c715787c3ba629c83c77c191db0", "patch": "@@ -156,6 +156,7 @@ impl SocketAddr {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn is_unnamed(&self) -> bool {\n         if let AddressKind::Unnamed = self.address() { true } else { false }"}, {"sha": "d3c31b006baf9544b8433c336cd3ebd268e4c556", "filename": "library/std/src/path.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=01b439e764617c715787c3ba629c83c77c191db0", "patch": "@@ -215,6 +215,7 @@ impl<'a> Prefix<'a> {\n     /// assert!(!Disk(b'C').is_verbatim());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_verbatim(&self) -> bool {\n         use self::Prefix::*;\n@@ -247,6 +248,7 @@ impl<'a> Prefix<'a> {\n /// assert!(path::is_separator('/')); // '/' works for both Unix and Windows\n /// assert!(!path::is_separator('\u2764'));\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn is_separator(c: char) -> bool {\n     c.is_ascii() && is_sep_byte(c as u8)\n@@ -2011,6 +2013,7 @@ impl Path {\n     ///\n     /// [`has_root`]: Path::has_root\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[allow(deprecated)]\n     pub fn is_absolute(&self) -> bool {\n         if cfg!(target_os = \"redox\") {\n@@ -2035,6 +2038,7 @@ impl Path {\n     ///\n     /// [`is_absolute`]: Path::is_absolute\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_relative(&self) -> bool {\n         !self.is_absolute()\n@@ -2061,6 +2065,7 @@ impl Path {\n     /// assert!(Path::new(\"/etc/passwd\").has_root());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn has_root(&self) -> bool {\n         self.components().has_root()\n@@ -2698,6 +2703,7 @@ impl Path {\n     /// a Unix-like system for example. See [`fs::File::open`] or\n     /// [`fs::OpenOptions::open`] for more information.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     pub fn is_file(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)\n     }\n@@ -2724,6 +2730,7 @@ impl Path {\n     /// check errors, call [`fs::metadata`] and handle its [`Result`]. Then call\n     /// [`fs::Metadata::is_dir`] if it was [`Ok`].\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     pub fn is_dir(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n@@ -2750,6 +2757,7 @@ impl Path {\n     /// assert_eq!(link_path.exists(), false);\n     /// ```\n     #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n+    #[must_use]\n     pub fn is_symlink(&self) -> bool {\n         fs::symlink_metadata(self).map(|m| m.is_symlink()).unwrap_or(false)\n     }"}, {"sha": "133c3e46cd8a66a997638a477a714e48169114fd", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b439e764617c715787c3ba629c83c77c191db0/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=01b439e764617c715787c3ba629c83c77c191db0", "patch": "@@ -167,6 +167,7 @@ impl BarrierWaitResult {\n     /// println!(\"{:?}\", barrier_wait_result.is_leader());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn is_leader(&self) -> bool {\n         self.0\n     }"}]}