{"sha": "5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjNkZWM1OWYzZGJhNzQxY2UxN2NiM2ZjZWE2ZGRmYWYwNThmNmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-08T22:27:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-08T22:27:43Z"}, "message": "Suggest return type", "tree": {"sha": "46ced8d82ea713a81dba03747ec3207e2750192a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ced8d82ea713a81dba03747ec3207e2750192a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "html_url": "https://github.com/rust-lang/rust/commit/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147649d4b91b43c77f3f46c04b6daaa37f4e0955", "url": "https://api.github.com/repos/rust-lang/rust/commits/147649d4b91b43c77f3f46c04b6daaa37f4e0955", "html_url": "https://github.com/rust-lang/rust/commit/147649d4b91b43c77f3f46c04b6daaa37f4e0955"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "9fd3a170ece464f49f2858890bdf9211b8d1c62a", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "patch": "@@ -329,7 +329,33 @@ fn compare_predicate_entailment<'tcx>(\n                     );\n                 }\n                 TypeError::ArgumentMutability(i) | TypeError::ArgumentSorts(_, i) => {\n-                    if let Some(trait_ty) = trait_sig.inputs().get(*i) {\n+                    if trait_sig.inputs().len() == *i {\n+                        // Suggestion to change output type. We do not suggest in `async` functions\n+                        // to avoid complex logic or incorrect output.\n+                        let impl_m_hir_id =\n+                            tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n+                        match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+                            ImplItemKind::Fn(ref sig, _)\n+                                if sig.header.asyncness == hir::IsAsync::NotAsync =>\n+                            {\n+                                let (span, sugg) = match sig.decl.output {\n+                                    hir::FnRetTy::DefaultReturn(sp) => {\n+                                        (sp, format!(\" -> {} \", trait_sig.output()))\n+                                    }\n+                                    hir::FnRetTy::Return(hir_ty) => {\n+                                        (hir_ty.span, trait_sig.output().to_string())\n+                                    }\n+                                };\n+                                diag.span_suggestion(\n+                                    span,\n+                                    \"change the output type to match the trait\",\n+                                    sugg,\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            _ => {}\n+                        };\n+                    } else if let Some(trait_ty) = trait_sig.inputs().get(*i) {\n                         diag.span_suggestion(\n                             impl_err_span,\n                             \"change the parameter type to match the trait\","}, {"sha": "3c7dc1fc3c9b23f88e97439f934418204b48713c", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "patch": "@@ -15,7 +15,10 @@ LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n ...\n LL |     fn make() -> u8 { 0 }\n-   |                  ^^ expected associated type, found `u8`\n+   |                  ^^\n+   |                  |\n+   |                  expected associated type, found `u8`\n+   |                  help: change the output type to match the trait: `<A<T> as Tr>::Ty`\n    |\n    = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n               found fn pointer `fn() -> u8`\n@@ -30,7 +33,10 @@ LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n LL | \n LL |     fn make() -> bool { true }\n-   |                  ^^^^ expected associated type, found `bool`\n+   |                  ^^^^\n+   |                  |\n+   |                  expected associated type, found `bool`\n+   |                  help: change the output type to match the trait: `<B<T> as Tr>::Ty`\n    |\n    = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n               found fn pointer `fn() -> bool`"}, {"sha": "f42a9e49abdff5947c5a947fa3c0cb9ce08c4693", "filename": "src/test/ui/compare-method/bad-self-type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs?ref=5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "patch": "@@ -15,9 +15,12 @@ impl Future for MyFuture {\n \n trait T {\n     fn foo(self);\n+    fn bar(self) -> Option<()>;\n }\n \n impl T for MyFuture {\n     fn foo(self: Box<Self>) {}\n     //~^ ERROR method `foo` has an incompatible type for trait\n+    fn bar(self) {}\n+    //~^ ERROR method `bar` has an incompatible type for trait\n }"}, {"sha": "74e7c562aa76bf41431370f857d6f92132061f33", "filename": "src/test/ui/compare-method/bad-self-type.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "patch": "@@ -11,7 +11,7 @@ LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n               found fn pointer `fn(MyFuture, &mut Context<'_>) -> Poll<_>`\n \n error[E0053]: method `foo` has an incompatible type for trait\n-  --> $DIR/bad-self-type.rs:21:18\n+  --> $DIR/bad-self-type.rs:22:18\n    |\n LL |     fn foo(self);\n    |            ---- type in trait\n@@ -25,6 +25,21 @@ LL |     fn foo(self: Box<Self>) {}\n    = note: expected fn pointer `fn(MyFuture)`\n               found fn pointer `fn(Box<MyFuture>)`\n \n-error: aborting due to 2 previous errors\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/bad-self-type.rs:24:18\n+   |\n+LL |     fn bar(self) -> Option<()>;\n+   |                     ---------- type in trait\n+...\n+LL |     fn bar(self) {}\n+   |                  ^\n+   |                  |\n+   |                  expected enum `Option`, found `()`\n+   |                  help: change the output type to match the trait: `-> Option<()>`\n+   |\n+   = note: expected fn pointer `fn(MyFuture) -> Option<()>`\n+              found fn pointer `fn(MyFuture)`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0053`."}, {"sha": "d92966da17c4ceb7e2db6a3fb02c81a502cf3560", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "patch": "@@ -2,7 +2,10 @@ error[E0053]: method `next` has an incompatible type for trait\n   --> $DIR/issue-21332.rs:5:27\n    |\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n-   |                           ^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `Result`\n+   |                           ^^^^^^^^^^^^^^^^\n+   |                           |\n+   |                           expected enum `Option`, found enum `Result`\n+   |                           help: change the output type to match the trait: `Option<i32>`\n    |\n    = note: expected fn pointer `fn(&mut S) -> Option<i32>`\n               found fn pointer `fn(&mut S) -> Result<i32, i32>`"}, {"sha": "71b2a9df09553d49538f881b6c13c3d346223f2b", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "patch": "@@ -50,7 +50,10 @@ LL |     fn qux() -> u8;\n    |                 -- type in trait\n ...\n LL |     fn qux() -> u16 { 5u16 }\n-   |                 ^^^ expected `u8`, found `u16`\n+   |                 ^^^\n+   |                 |\n+   |                 expected `u8`, found `u16`\n+   |                 help: change the output type to match the trait: `u8`\n    |\n    = note: expected fn pointer `fn() -> u8`\n               found fn pointer `fn() -> u16`"}, {"sha": "9f8896f01ee06f90e776c07c1ccbfdfa8a496216", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=5af3dec59f3dba741ce17cb3fcea6ddfaf058f6c", "patch": "@@ -26,7 +26,10 @@ error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:52:29\n    |\n LL |     fn mul(self, s: f64) -> f64 {\n-   |                             ^^^ expected `i32`, found `f64`\n+   |                             ^^^\n+   |                             |\n+   |                             expected `i32`, found `f64`\n+   |                             help: change the output type to match the trait: `i32`\n    |\n    = note: expected fn pointer `fn(Vec3, _) -> i32`\n               found fn pointer `fn(Vec3, _) -> f64`"}]}