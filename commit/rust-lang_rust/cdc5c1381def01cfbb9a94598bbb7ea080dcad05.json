{"sha": "cdc5c1381def01cfbb9a94598bbb7ea080dcad05", "node_id": "C_kwDOAAsO6NoAKGNkYzVjMTM4MWRlZjAxY2ZiYjlhOTQ1OThiYmI3ZWEwODBkY2FkMDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-06T22:15:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-06T22:15:13Z"}, "message": "Rollup merge of #91055 - lcnr:type_of-closures, r=nikomatsakis\n\nreturn the correct type for closures in `type_of`\n\nA bit unhappy about the way `typeck::check_crate` works rn. Would have preferred to not change `CollectItemTypesVisitor` in this way.\n\nr? ``@nikomatsakis``", "tree": {"sha": "043eff2944274f053ab51f9b64f351097b903ffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043eff2944274f053ab51f9b64f351097b903ffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc5c1381def01cfbb9a94598bbb7ea080dcad05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh12nxCRBK7hj4Ov3rIwAArEkIACsxK2geoVjGvdNUxodTpE2I\nZyl4oDU57fgCjxD8nJbCnwgBvegNTXAlqDPjyiJxuW2andIBvTmYZn0RD+4O57P9\n2AbX3SurLGldTLNsCjXgONm2obZphZdk99MUbEnyeyHyj4uZ2sXw5q5K5+2wKagU\nzJ5zHeKQ1r9DZfQPBNeyk42UzmQ4mpEupafzCduV/gb1CO5yv3dmdZMxxncZ/dAh\nIzb47FmbWl5D1dAhfWZAST62qXPg2xXNMsZHZenX6OV+KjkgoMMUznK42HmI0BWD\nRgEW5qDPimJHd1pImIxdEV0mC3FSWHfm0rw6CGi7Z6/h9GjVnSrFwEW2GSCuC9k=\n=VBpD\n-----END PGP SIGNATURE-----\n", "payload": "tree 043eff2944274f053ab51f9b64f351097b903ffb\nparent cfa4ac66c194046f631ce076c75516ecfdeb77ee\nparent 6bd534dbdb48f14a761356e22573904e5d419706\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641507313 +0100\ncommitter GitHub <noreply@github.com> 1641507313 +0100\n\nRollup merge of #91055 - lcnr:type_of-closures, r=nikomatsakis\n\nreturn the correct type for closures in `type_of`\n\nA bit unhappy about the way `typeck::check_crate` works rn. Would have preferred to not change `CollectItemTypesVisitor` in this way.\n\nr? ``@nikomatsakis``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc5c1381def01cfbb9a94598bbb7ea080dcad05", "html_url": "https://github.com/rust-lang/rust/commit/cdc5c1381def01cfbb9a94598bbb7ea080dcad05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc5c1381def01cfbb9a94598bbb7ea080dcad05/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa4ac66c194046f631ce076c75516ecfdeb77ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa4ac66c194046f631ce076c75516ecfdeb77ee", "html_url": "https://github.com/rust-lang/rust/commit/cfa4ac66c194046f631ce076c75516ecfdeb77ee"}, {"sha": "6bd534dbdb48f14a761356e22573904e5d419706", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd534dbdb48f14a761356e22573904e5d419706", "html_url": "https://github.com/rust-lang/rust/commit/6bd534dbdb48f14a761356e22573904e5d419706"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "41c8a37a71a6d03a1c7dfd7c7cab5a0545cb1e28", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5c1381def01cfbb9a94598bbb7ea080dcad05/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5c1381def01cfbb9a94598bbb7ea080dcad05/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=cdc5c1381def01cfbb9a94598bbb7ea080dcad05", "patch": "@@ -295,7 +295,9 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n         if let hir::ExprKind::Closure(..) = expr.kind {\n             let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             self.tcx.ensure().generics_of(def_id);\n-            self.tcx.ensure().type_of(def_id);\n+            // We do not call `type_of` for closures here as that\n+            // depends on typecheck and would therefore hide\n+            // any further errors in case one typeck fails.\n         }\n         intravisit::walk_expr(self, expr);\n     }"}, {"sha": "ae8d262fcf17654cab28a52d20e1a848ff03e557", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5c1381def01cfbb9a94598bbb7ea080dcad05/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5c1381def01cfbb9a94598bbb7ea080dcad05/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=cdc5c1381def01cfbb9a94598bbb7ea080dcad05", "patch": "@@ -470,14 +470,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Field(field) => icx.to_ty(field.ty),\n \n-        Node::Expr(&Expr { kind: ExprKind::Closure(.., gen), .. }) => {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n-            if let Some(movability) = gen {\n-                tcx.mk_generator(def_id.to_def_id(), substs, movability)\n-            } else {\n-                tcx.mk_closure(def_id.to_def_id(), substs)\n-            }\n-        }\n+        Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => tcx.typeck(def_id).node_type(hir_id),\n \n         Node::AnonConst(_) if let Some(param) = tcx.opt_const_param_of(def_id) => {\n             // We defer to `type_of` of the corresponding parameter"}, {"sha": "1ae0ff3036471d75391f4872ab8ed7ef599b1f16", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5c1381def01cfbb9a94598bbb7ea080dcad05/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5c1381def01cfbb9a94598bbb7ea080dcad05/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=cdc5c1381def01cfbb9a94598bbb7ea080dcad05", "patch": "@@ -715,13 +715,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         debug!(\"walk_captures({:?})\", closure_expr);\n \n-        let closure_def_id = self.tcx().hir().local_def_id(closure_expr.hir_id).to_def_id();\n-        let upvars = self.tcx().upvars_mentioned(self.body_owner);\n+        let tcx = self.tcx();\n+        let closure_def_id = tcx.hir().local_def_id(closure_expr.hir_id).to_def_id();\n+        let upvars = tcx.upvars_mentioned(self.body_owner);\n \n         // For purposes of this function, generator and closures are equivalent.\n         let body_owner_is_closure = matches!(\n-            self.tcx().type_of(self.body_owner.to_def_id()).kind(),\n-            ty::Closure(..) | ty::Generator(..)\n+            tcx.hir().body_owner_kind(tcx.hir().local_def_id_to_hir_id(self.body_owner)),\n+            hir::BodyOwnerKind::Closure,\n         );\n \n         // If we have a nested closure, we want to include the fake reads present in the nested closure."}]}