{"sha": "7e3791469fce12a95d5d85b9a8744a61a0970fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMzc5MTQ2OWZjZTEyYTk1ZDVkODViOWE4NzQ0YTYxYTA5NzBmZTE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-05T21:12:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-10T11:12:28Z"}, "message": "Replace src: &mut dyn Read with String", "tree": {"sha": "fc75e8c28fc1afec977d0861974a3a25d2458ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc75e8c28fc1afec977d0861974a3a25d2458ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e3791469fce12a95d5d85b9a8744a61a0970fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3791469fce12a95d5d85b9a8744a61a0970fe1", "html_url": "https://github.com/rust-lang/rust/commit/7e3791469fce12a95d5d85b9a8744a61a0970fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e3791469fce12a95d5d85b9a8744a61a0970fe1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb2e566c1d9ee6526e670802debda9c0afabde5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb2e566c1d9ee6526e670802debda9c0afabde5", "html_url": "https://github.com/rust-lang/rust/commit/0eb2e566c1d9ee6526e670802debda9c0afabde5"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "fc3430566a0def1c1bc779e19f377e6d9f3c2a28", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=7e3791469fce12a95d5d85b9a8744a61a0970fe1", "patch": "@@ -16,7 +16,6 @@ use crate::hir::ptr::P;\n \n use std::borrow::Cow;\n use std::cell::Cell;\n-use std::io::Read;\n use std::vec;\n \n pub enum AnnNode<'a> {\n@@ -93,7 +92,7 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n                        sess: &ParseSess,\n                        krate: &hir::Crate,\n                        filename: FileName,\n-                       input: &mut dyn Read,\n+                       input: String,\n                        out: &'a mut String,\n                        ann: &'a dyn PpAnn)\n                        {\n@@ -111,7 +110,7 @@ impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a SourceMap,\n                           sess: &ParseSess,\n                           filename: FileName,\n-                          input: &mut dyn Read,\n+                          input: String,\n                           out: &'a mut String,\n                           ann: &'a dyn PpAnn)\n                           -> State<'a> {"}, {"sha": "df8dc3871b7edd87c977d6301d33d29fbb7d6c18", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=7e3791469fce12a95d5d85b9a8744a61a0970fe1", "patch": "@@ -687,16 +687,14 @@ pub fn visit_crate(sess: &Session, krate: &mut ast::Crate, ppm: PpMode) {\n     }\n }\n \n-fn get_source(input: &Input, sess: &Session) -> (Vec<u8>, FileName) {\n+fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     let src_name = source_name(input);\n-    let src = sess.source_map()\n+    let src = String::clone(&sess.source_map()\n         .get_source_file(&src_name)\n         .unwrap()\n         .src\n         .as_ref()\n-        .unwrap()\n-        .as_bytes()\n-        .to_vec();\n+        .unwrap());\n     (src, src_name)\n }\n \n@@ -719,7 +717,6 @@ pub fn print_after_parsing(sess: &Session,\n                            ofile: Option<&Path>) {\n     let (src, src_name) = get_source(input, sess);\n \n-    let mut rdr = &*src;\n     let mut out = String::new();\n \n     if let PpmSource(s) = ppm {\n@@ -732,7 +729,7 @@ pub fn print_after_parsing(sess: &Session,\n                                 &sess.parse_sess,\n                                 krate,\n                                 src_name,\n-                                &mut rdr,\n+                                src,\n                                 out,\n                                 annotation.pp_ann(),\n                                 false)\n@@ -764,21 +761,21 @@ pub fn print_after_hir_lowering<'tcx>(\n \n     let (src, src_name) = get_source(input, tcx.sess);\n \n-    let mut rdr = &src[..];\n     let mut out = String::new();\n \n     match (ppm, opt_uii) {\n             (PpmSource(s), _) => {\n                 // Silently ignores an identified node.\n                 let out = &mut out;\n+                let src = src.clone();\n                 s.call_with_pp_support(tcx.sess, Some(tcx), move |annotation| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     pprust::print_crate(sess.source_map(),\n                                         &sess.parse_sess,\n                                         krate,\n                                         src_name,\n-                                        &mut rdr,\n+                                        src,\n                                         out,\n                                         annotation.pp_ann(),\n                                         true)\n@@ -787,14 +784,15 @@ pub fn print_after_hir_lowering<'tcx>(\n \n             (PpmHir(s), None) => {\n                 let out = &mut out;\n+                let src = src.clone();\n                 s.call_with_pp_support_hir(tcx, move |annotation, krate| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     pprust_hir::print_crate(sess.source_map(),\n                                             &sess.parse_sess,\n                                             krate,\n                                             src_name,\n-                                            &mut rdr,\n+                                            src,\n                                             out,\n                                             annotation.pp_ann())\n                 })\n@@ -810,14 +808,15 @@ pub fn print_after_hir_lowering<'tcx>(\n \n             (PpmHir(s), Some(uii)) => {\n                 let out = &mut out;\n+                let src = src.clone();\n                 s.call_with_pp_support_hir(tcx, move |annotation, _| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     let hir_map = annotation.hir_map().expect(\"-Z unpretty missing HIR map\");\n                     let mut pp_state = pprust_hir::State::new_from_input(sess.source_map(),\n                                                                          &sess.parse_sess,\n                                                                          src_name,\n-                                                                         &mut rdr,\n+                                                                         src,\n                                                                          out,\n                                                                          annotation.pp_ann());\n                     for node_id in uii.all_matching_node_ids(hir_map) {"}, {"sha": "6ed2a7adad1c2c8255ca27a6266c833bba55193b", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=7e3791469fce12a95d5d85b9a8744a61a0970fe1", "patch": "@@ -8,7 +8,6 @@ use crate::parse::lexer::{self, ParseSess, StringReader};\n use syntax_pos::{BytePos, CharPos, Pos, FileName};\n use log::debug;\n \n-use std::io::Read;\n use std::usize;\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n@@ -340,10 +339,8 @@ fn consume_comment(rdr: &mut StringReader<'_>,\n \n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n-pub fn gather_comments(sess: &ParseSess, path: FileName, srdr: &mut dyn Read) -> Vec<Comment>\n+pub fn gather_comments(sess: &ParseSess, path: FileName, src: String) -> Vec<Comment>\n {\n-    let mut src = String::new();\n-    srdr.read_to_string(&mut src).unwrap();\n     let cm = SourceMap::new(sess.source_map().path_mapping().clone());\n     let source_file = cm.new_source_file(path, src);\n     let mut rdr = lexer::StringReader::new(sess, source_file, None);"}, {"sha": "a6680ee02b5204f26eb1153e6560d9282e2c8ced", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3791469fce12a95d5d85b9a8744a61a0970fe1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7e3791469fce12a95d5d85b9a8744a61a0970fe1", "patch": "@@ -21,7 +21,6 @@ use syntax_pos::{self, BytePos};\n use syntax_pos::{DUMMY_SP, FileName, Span};\n \n use std::borrow::Cow;\n-use std::io::Read;\n \n pub enum AnnNode<'a> {\n     Ident(&'a ast::Ident),\n@@ -102,7 +101,7 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n                        sess: &ParseSess,\n                        krate: &ast::Crate,\n                        filename: FileName,\n-                       input: &mut dyn Read,\n+                       input: String,\n                        out: &mut String,\n                        ann: &'a dyn PpAnn,\n                        is_expanded: bool) {\n@@ -136,7 +135,7 @@ impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a SourceMap,\n                           sess: &ParseSess,\n                           filename: FileName,\n-                          input: &mut dyn Read,\n+                          input: String,\n                           out: &'a mut String,\n                           ann: &'a dyn PpAnn,\n                           is_expanded: bool) -> State<'a> {"}]}