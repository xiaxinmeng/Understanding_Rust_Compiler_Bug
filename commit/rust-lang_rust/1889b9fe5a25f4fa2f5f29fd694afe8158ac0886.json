{"sha": "1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ODliOWZlNWEyNWY0ZmEyZjVmMjlmZDY5NGFmZTgxNThhYzA4ODY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-07T13:44:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T13:44:14Z"}, "message": "Merge pull request #616 from RalfJung/cargo-miri\n\nFix cargo miri on unit tests, refactor it a bit, set rust flag instead of feature flag", "tree": {"sha": "ee25eb519df43f4b5f7561e470ef50aabf0b6de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee25eb519df43f4b5f7561e470ef50aabf0b6de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcXDYuCRBK7hj4Ov3rIwAAdHIIAEn1qmwk/HQ3IfmrJYYkIkdE\nkw78BUhO6F1tVRqkflcbCMeJGQOQzos2MXJKVFrZeDgfSJvl6qCRqAqgVhmIckGh\n3EjuTmqtIAh3qJYppas7S7wcFl0xgbIIgjhGXLLPlsMqm8zCvfYCtB67tkUwteoF\nkF/Ts9/N+81UnpEmRPYw1ZTTgwxi+aSjftIQf9dI4stnZ21BHWYHXYOUXqKIzb8U\ntIUX+63bcJ2FUn/mzkzuFF0XCXZgTaAej+89WKa0erqvKnaCIzimw/S+6pQUMpwi\n43aNI94FDp7zAdf/OMlymvZaLn64TMBSyOTjNhrrcHsPOi+25nJqG4Qgeb/X8VY=\n=HlCN\n-----END PGP SIGNATURE-----\n", "payload": "tree ee25eb519df43f4b5f7561e470ef50aabf0b6de2\nparent 2d4ebf017dc03fda3e05d5ebf42860dd1c45e547\nparent 5766b328713410dc0bc8e2d349b569937fb79e50\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1549547054 +0100\ncommitter GitHub <noreply@github.com> 1549547054 +0100\n\nMerge pull request #616 from RalfJung/cargo-miri\n\nFix cargo miri on unit tests, refactor it a bit, set rust flag instead of feature flag"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "html_url": "https://github.com/rust-lang/rust/commit/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547", "html_url": "https://github.com/rust-lang/rust/commit/2d4ebf017dc03fda3e05d5ebf42860dd1c45e547"}, {"sha": "5766b328713410dc0bc8e2d349b569937fb79e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/5766b328713410dc0bc8e2d349b569937fb79e50", "html_url": "https://github.com/rust-lang/rust/commit/5766b328713410dc0bc8e2d349b569937fb79e50"}], "stats": {"total": 592, "additions": 416, "deletions": 176}, "files": [{"sha": "16b5b2361bd4cf9b8ffbafe9f26a30e910af616d", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -55,3 +55,6 @@ rustc_tests = []\n [dev-dependencies]\n compiletest_rs = { version = \"0.3.17\", features = [\"tmp\"] }\n colored = \"1.6\"\n+\n+[profile.release]\n+debug = true"}, {"sha": "677c38d7c29544ca052e2e9ccad744e8e6af70fa", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 175, "deletions": 169, "changes": 344, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -7,10 +7,10 @@ use std::io::{self, Write, BufRead};\n use std::process::Command;\n use std::fs::{self, File};\n \n-const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates\n+const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates and tests in Miri\n \n Usage:\n-    cargo miri [subcommand] [options] [--] [<opts>...]\n+    cargo miri [subcommand] [options] [--] [<miri opts>...]\n \n Subcommands:\n     run                      Run binaries (default)\n@@ -22,12 +22,13 @@ Common options:\n     --features               Features to compile for the package\n     -V, --version            Print version info and exit\n \n-Other options are the same as `cargo rustc`.\n+Other [options] are the same as `cargo rustc`.  Everything after the \"--\" is\n+passed verbatim to Miri.\n \n-The feature `cargo-miri` is automatically defined for convenience. You can use\n+The config flag `miri` is automatically defined for convenience. You can use\n it to configure the resource limits\n \n-    #![cfg_attr(feature = \"cargo-miri\", memory_size = 42)]\n+    #![cfg_attr(miri, memory_size = 42)]\n \n available resource limits are `memory_size`, `step_limit`, `stack_limit`\n \"#;\n@@ -53,23 +54,32 @@ fn show_error(msg: String) -> ! {\n     std::process::exit(1)\n }\n \n+// Determines whether a --flag is present\n+fn has_arg_flag(name: &str) -> bool {\n+    let mut args = std::env::args().take_while(|val| val != \"--\");\n+    args.any(|val| val == name)\n+}\n+\n+/// Gets the value of a --flag\n fn get_arg_flag_value(name: &str) -> Option<String> {\n     // stop searching at `--`\n-    let mut args = std::env::args().skip_while(|val| !(val.starts_with(name) || val == \"--\"));\n-\n-    match args.next() {\n-        Some(ref p) if p == \"--\" => None,\n-        Some(ref p) if p == name => args.next(),\n-        Some(p) => {\n-            // Make sure this really starts with `$name=`, we didn't test for the `=` yet.\n-            let v = &p[name.len()..]; // strip leading `$name`\n-            if v.starts_with('=') {\n-                Some(v[1..].to_owned()) // strip leading `=`\n-            } else {\n-                None\n-            }\n-        },\n-        None => None,\n+    let mut args = std::env::args().take_while(|val| val != \"--\");\n+    loop {\n+        let arg = match args.next() {\n+            Some(arg) => arg,\n+            None => return None,\n+        };\n+        if !arg.starts_with(name) {\n+            continue;\n+        }\n+        let suffix = &arg[name.len()..]; // strip leading `name`\n+        if suffix.is_empty() {\n+            // This argument is exactly `name`, the next one is the value\n+            return args.next();\n+        } else if suffix.starts_with('=') {\n+            // This argument is `name=value`, get the value\n+            return Some(suffix[1..].to_owned()); // strip leading `=`\n+        }\n     }\n }\n \n@@ -272,167 +282,163 @@ fn main() {\n         // each applicable target, but with the RUSTC env var set to the `cargo-miri`\n         // binary so that we come back in the other branch, and dispatch\n         // the invocations to rustc and miri, respectively.\n-\n-        let (subcommand, skip) = match std::env::args().nth(2).deref() {\n-            Some(\"test\") => (MiriCommand::Test, 3),\n-            Some(\"run\") => (MiriCommand::Run, 3),\n-            Some(\"setup\") => (MiriCommand::Setup, 3),\n-            // Default command, if there is an option or nothing\n-            Some(s) if s.starts_with(\"-\") => (MiriCommand::Run, 2),\n-            None => (MiriCommand::Run, 2),\n-            // Unvalid command\n-            Some(s) => {\n-                show_error(format!(\"Unknown command `{}`\", s))\n-            }\n-        };\n-\n-        // We always setup\n-        let ask = subcommand != MiriCommand::Setup;\n-        setup(ask);\n-        if subcommand == MiriCommand::Setup {\n-            // Stop here.\n-            return;\n-        }\n-\n-        // Now run the command.\n-        for target in list_targets() {\n-            let args = std::env::args().skip(skip);\n-            let kind = target.kind.get(0).expect(\n-                \"badly formatted cargo metadata: target::kind is an empty array\",\n-            );\n-            match (subcommand, &kind[..]) {\n-                (MiriCommand::Test, \"test\") => {\n-                    // For test binaries we call `cargo rustc --test target -- <rustc args>`\n-                    if let Err(code) = process(\n-                        vec![\"--test\".to_string(), target.name].into_iter().chain(\n-                            args,\n-                        ),\n-                    )\n-                    {\n-                        std::process::exit(code);\n-                    }\n-                }\n-                (MiriCommand::Test, \"lib\") => {\n-                    // For libraries we call `cargo rustc -- --test <rustc args>`\n-                    // Notice now that `--test` is a rustc arg rather than a cargo arg. This tells\n-                    // rustc to build a test harness which calls all #[test] functions.\n-                    // We then execute that harness just like any other binary.\n-                    if let Err(code) = process(\n-                        vec![\"--\".to_string(), \"--test\".to_string()].into_iter().chain(\n-                            args,\n-                        ),\n-                    )\n-                    {\n-                        std::process::exit(code);\n-                    }\n-                }\n-                (MiriCommand::Run, \"bin\") => {\n-                    // For ordinary binaries we call `cargo rustc --bin target -- <rustc args>`\n-                    if let Err(code) = process(\n-                        vec![\"--bin\".to_string(), target.name].into_iter().chain(\n-                            args,\n-                        ),\n-                    )\n-                    {\n-                        std::process::exit(code);\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n+        in_cargo_miri();\n     } else if let Some(\"rustc\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // This arm is executed when cargo-miri runs `cargo rustc` with the `RUSTC_WRAPPER` env var set to itself:\n         // Dependencies get dispatched to rustc, the final test/binary to miri.\n+        inside_cargo_rustc();\n+    } else {\n+        show_error(format!(\"Must be called with either `miri` or `rustc` as first argument.\"))\n+    }\n+}\n \n-        let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-        let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-        let sys_root = if let Ok(sysroot) = ::std::env::var(\"MIRI_SYSROOT\") {\n-            sysroot\n-        } else if let (Some(home), Some(toolchain)) = (home, toolchain) {\n-            format!(\"{}/toolchains/{}\", home, toolchain)\n-        } else {\n-            option_env!(\"RUST_SYSROOT\")\n-                .map(|s| s.to_owned())\n-                .or_else(|| {\n-                    Command::new(\"rustc\")\n-                        .arg(\"--print\")\n-                        .arg(\"sysroot\")\n-                        .output()\n-                        .ok()\n-                        .and_then(|out| String::from_utf8(out.stdout).ok())\n-                        .map(|s| s.trim().to_owned())\n-                })\n-                .expect(\"need to specify RUST_SYSROOT env var during miri compilation, or use rustup or multirust\")\n-        };\n+fn in_cargo_miri() {\n+    let (subcommand, skip) = match std::env::args().nth(2).deref() {\n+        Some(\"test\") => (MiriCommand::Test, 3),\n+        Some(\"run\") => (MiriCommand::Run, 3),\n+        Some(\"setup\") => (MiriCommand::Setup, 3),\n+        // Default command, if there is an option or nothing\n+        Some(s) if s.starts_with(\"-\") => (MiriCommand::Run, 2),\n+        None => (MiriCommand::Run, 2),\n+        // Unvalid command\n+        Some(s) => {\n+            show_error(format!(\"Unknown command `{}`\", s))\n+        }\n+    };\n+    let verbose = has_arg_flag(\"-v\");\n \n-        // this conditional check for the --sysroot flag is there so users can call `cargo-miri` directly\n-        // without having to pass --sysroot or anything\n-        let rustc_args = std::env::args().skip(2);\n-        let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n-            rustc_args.collect()\n-        } else {\n-            rustc_args\n-                .chain(Some(\"--sysroot\".to_owned()))\n-                .chain(Some(sys_root))\n-                .collect()\n-        };\n-        args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n-        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n-\n-        // this check ensures that dependencies are built but not interpreted and the final crate is\n-        // interpreted but not built\n-        let miri_enabled = std::env::args().any(|s| s == \"--emit=dep-info,metadata\");\n-        let mut command = if miri_enabled {\n-            let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n-            path.set_file_name(\"miri\");\n-            Command::new(path)\n-        } else {\n-            Command::new(\"rustc\")\n-        };\n-        command.args(&args);\n+    // We always setup\n+    let ask = subcommand != MiriCommand::Setup;\n+    setup(ask);\n+    if subcommand == MiriCommand::Setup {\n+        // Stop here.\n+        return;\n+    }\n \n-        match command.status() {\n-            Ok(exit) => {\n-                if !exit.success() {\n-                    std::process::exit(exit.code().unwrap_or(42));\n-                }\n+    // Now run the command.\n+    for target in list_targets() {\n+        let mut args = std::env::args().skip(skip);\n+        let kind = target.kind.get(0).expect(\n+            \"badly formatted cargo metadata: target::kind is an empty array\",\n+        );\n+        // Now we run `cargo rustc $FLAGS $ARGS`, giving the user the\n+        // change to add additional flags.  \"FLAGS\" is set to identify\n+        // this target.  The user gets to control what gets actually passed to Miri.\n+        // However, we need to add a flag to what gets passed to rustc for the finaly\n+        // binary, so that we know to interpret that with Miri.\n+        // So after the first \"--\", we add \"-Zcargo-miri-marker\".\n+        let mut cmd = Command::new(\"cargo\");\n+        cmd.arg(\"rustc\");\n+        match (subcommand, &kind[..]) {\n+            (MiriCommand::Run, \"bin\") => {\n+                // FIXME: We just run all the binaries here.\n+                // We should instead support `cargo miri --bin foo`.\n+                cmd.arg(\"--bin\").arg(target.name);\n+            }\n+            (MiriCommand::Test, \"test\") => {\n+                cmd.arg(\"--test\").arg(target.name);\n             }\n-            Err(ref e) if miri_enabled => panic!(\"error during miri run: {:?}\", e),\n-            Err(ref e) => panic!(\"error during rustc call: {:?}\", e),\n+            (MiriCommand::Test, \"lib\") |\n+            (MiriCommand::Test, \"bin\") => {\n+                cmd.arg(format!(\"--{}\", kind)).arg(target.name).arg(\"--profile\").arg(\"test\");\n+            }\n+            // The remaining targets we do not even want to build\n+            _ => continue,\n+        }\n+        // add user-defined args until first \"--\"\n+        while let Some(arg) = args.next() {\n+            if arg == \"--\" {\n+                break;\n+            }\n+            cmd.arg(arg);\n+        }\n+        // add \"--\" \"-Zcargo-miri-marker\" and the remaining user flags\n+        cmd\n+            .arg(\"--\")\n+            .arg(\"cargo-miri-marker\")\n+            .args(args);\n+        let path = std::env::current_exe().expect(\"current executable path invalid\");\n+        cmd.env(\"RUSTC_WRAPPER\", path);\n+        if verbose {\n+            eprintln!(\"+ {:?}\", cmd);\n+        }\n+\n+        let exit_status = cmd\n+            .spawn()\n+            .expect(\"could not run cargo\")\n+            .wait()\n+            .expect(\"failed to wait for cargo?\");\n+\n+        if !exit_status.success() {\n+            std::process::exit(exit_status.code().unwrap_or(-1))\n         }\n-    } else {\n-        show_error(format!(\"Must be called with either `miri` or `rustc` as first argument.\"))\n     }\n }\n \n-fn process<I>(old_args: I) -> Result<(), i32>\n-where\n-    I: Iterator<Item = String>,\n-{\n-    let mut args = vec![\"rustc\".to_owned()];\n+fn inside_cargo_rustc() {\n+    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+    let sys_root = if let Ok(sysroot) = ::std::env::var(\"MIRI_SYSROOT\") {\n+        sysroot\n+    } else if let (Some(home), Some(toolchain)) = (home, toolchain) {\n+        format!(\"{}/toolchains/{}\", home, toolchain)\n+    } else {\n+        option_env!(\"RUST_SYSROOT\")\n+            .map(|s| s.to_owned())\n+            .or_else(|| {\n+                Command::new(\"rustc\")\n+                    .arg(\"--print\")\n+                    .arg(\"sysroot\")\n+                    .output()\n+                    .ok()\n+                    .and_then(|out| String::from_utf8(out.stdout).ok())\n+                    .map(|s| s.trim().to_owned())\n+            })\n+            .expect(\"need to specify RUST_SYSROOT env var during miri compilation, or use rustup or multirust\")\n+    };\n \n-    let mut found_dashes = false;\n-    for arg in old_args {\n-        found_dashes |= arg == \"--\";\n-        args.push(arg);\n-    }\n-    if !found_dashes {\n-        args.push(\"--\".to_owned());\n-    }\n-    args.push(\"--emit=dep-info,metadata\".to_owned());\n-\n-    let path = std::env::current_exe().expect(\"current executable path invalid\");\n-    let exit_status = Command::new(\"cargo\")\n-        .args(&args)\n-        .env(\"RUSTC_WRAPPER\", path)\n-        .spawn()\n-        .expect(\"could not run cargo\")\n-        .wait()\n-        .expect(\"failed to wait for cargo?\");\n-\n-    if exit_status.success() {\n-        Ok(())\n+    // this conditional check for the --sysroot flag is there so users can call `cargo-miri` directly\n+    // without having to pass --sysroot or anything\n+    let rustc_args = std::env::args().skip(2);\n+    let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n+        rustc_args.collect()\n+    } else {\n+        rustc_args\n+            .chain(Some(\"--sysroot\".to_owned()))\n+            .chain(Some(sys_root))\n+            .collect()\n+    };\n+    args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n+\n+    // see if we have cargo-miri-marker, which means we want to interpret this crate in Miri\n+    // (and remove the marker).\n+    let needs_miri = if let Some(pos) = args.iter().position(|arg| arg == \"cargo-miri-marker\") {\n+        args.remove(pos);\n+        true\n     } else {\n-        Err(exit_status.code().unwrap_or(-1))\n+        false\n+    };\n+\n+\n+    let mut command = if needs_miri {\n+        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n+        path.set_file_name(\"miri\");\n+        Command::new(path)\n+    } else {\n+        Command::new(\"rustc\")\n+    };\n+    command.args(&args);\n+    if has_arg_flag(\"-v\") {\n+        eprintln!(\"+ {:?}\", command);\n+    }\n+\n+    match command.status() {\n+        Ok(exit) => {\n+            if !exit.success() {\n+                std::process::exit(exit.code().unwrap_or(42));\n+            }\n+        }\n+        Err(ref e) if needs_miri => panic!(\"error during miri run: {:?}\", e),\n+        Err(ref e) => panic!(\"error during rustc call: {:?}\", e),\n     }\n }"}, {"sha": "4ff3e011c6ae5b2deede9ed99c3956902dcaf997", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -54,7 +54,7 @@ pub use crate::stacked_borrows::{Borrow, Stack, Stacks, BorStackItem};\n pub fn miri_default_args() -> &'static [&'static str] {\n     // The flags here should be kept in sync with what bootstrap adds when `test-miri` is\n     // set, which happens in `bootstrap/bin/rustc.rs` in the rustc sources.\n-    &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\"]\n+    &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\", \"--cfg=miri\"]\n }\n \n // Used by priroda"}, {"sha": "76fb04c6672aadd6898e9870cd948989a3c7d931", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -1,3 +1,15 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+[[package]]\n+name = \"autocfg\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"1.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"byteorder\"\n version = \"1.0.0\"\n@@ -8,7 +20,192 @@ name = \"cargo-miri-test\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cloudabi\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"fuchsia-cprng\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.48\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.6.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_jitter 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_os 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_pcg 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_chacha\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"rand_hc\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_isaac\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rand_jitter\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_os\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_pcg\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rdrand\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc_version\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver-parser\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [metadata]\n+\"checksum autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a6d640bee2da49f60a4068a7fae53acde8982514ab7bae8b8cea9e88cbcfd799\"\n+\"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n \"checksum byteorder 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c40977b0ee6b9885c9013cd41d9feffdd22deb3bb4dc3a71d901cc7a77de18c8\"\n+\"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n+\"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n+\"checksum libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e962c7641008ac010fa60a7dfdc1712449f29c44ef2d4702394aea943ee75047\"\n+\"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n+\"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n+\"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n+\"checksum rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0e7a549d590831370895ab7ba4ea0c1b6b011d106b5ff2da6eee112615e6dc0\"\n+\"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n+\"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n+\"checksum rand_jitter 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"080723c6145e37503a2224f801f252e14ac5531cb450f4502698542d188cb3c0\"\n+\"checksum rand_os 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b7c690732391ae0abafced5015ffb53656abfaec61b342290e5eb56b286a679d\"\n+\"checksum rand_pcg 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"086bd09a33c7044e56bb44d5bdde5a60e7f119a9e95b0775f545de759a32fe05\"\n+\"checksum rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n+\"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n+\"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n+\"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n+\"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n+\"checksum winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c1eb33641e276cfa214a0522acad57be5c56b10cb348b3c5117db75f3ac4b0\"\n+\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\""}, {"sha": "04f259a0aedba4f41f2a1a6e9fd111994ebefb80", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -6,3 +6,6 @@ edition = \"2018\"\n \n [dependencies]\n byteorder = \"1.0\"\n+\n+[dev-dependencies]\n+rand = \"0.6.5\""}, {"sha": "25e2cfdfa036812c2ff743e8f725dc07258a0ed4", "filename": "test-cargo-miri/src/main.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Fmain.rs?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -1,3 +1,7 @@\n+extern crate byteorder;\n+#[cfg(test)]\n+extern crate rand;\n+\n use byteorder::{BigEndian, ByteOrder};\n \n fn main() {\n@@ -7,3 +11,17 @@ fn main() {\n     println!(\"{:#010x}\", n);\n     eprintln!(\"standard error\");\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use rand::{Rng, SeedableRng};\n+\n+    // Make sure in-crate tests with dev-dependencies work\n+    #[test]\n+    fn rng() {\n+        let mut rng = rand::rngs::StdRng::seed_from_u64(0xcafebeef);\n+        let x: u32 = rng.gen();\n+        let y: u32 = rng.gen();\n+        assert_ne!(x, y);\n+    }\n+}"}, {"sha": "9c3621f21535bf1dfdf63a984cb3f1b956e63d9d", "filename": "test-cargo-miri/test.stdout.ref", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2Ftest.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2Ftest.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -1,7 +1,13 @@\n \n+running 1 test\n+test test::rng ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+\n+\n running 2 tests\n-test bar ... ok\n-test baz ... ok\n+test rng ... ok\n+test simple ... ok\n \n test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "e9faaf2fb2f19f9ef46477a576079f9258c1c37b", "filename": "test-cargo-miri/tests/test.rs", "status": "renamed", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1889b9fe5a25f4fa2f5f29fd694afe8158ac0886/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=1889b9fe5a25f4fa2f5f29fd694afe8158ac0886", "patch": "@@ -1,17 +1,24 @@\n+extern crate rand;\n+\n+use rand::{Rng, SeedableRng};\n+\n #[test]\n-fn bar() {\n+fn simple() {\n     assert_eq!(4, 4);\n }\n \n // Having more than 1 test does seem to make a difference\n // (i.e., this calls ptr::swap which having just one test does not).\n #[test]\n-fn baz() {\n-    assert_eq!(5, 5);\n+fn rng() {\n+    let mut rng = rand::rngs::StdRng::seed_from_u64(0xdeadcafe);\n+    let x: u32 = rng.gen();\n+    let y: u32 = rng.gen();\n+    assert_ne!(x, y);\n }\n \n // A test that won't work on miri\n-#[cfg(not(feature = \"cargo-miri\"))]\n+#[cfg(not(miri))]\n #[test]\n fn does_not_work_on_miri() {\n     let x = 0u8;", "previous_filename": "test-cargo-miri/tests/foo.rs"}]}