{"sha": "2951b70d1575f62771ac2da007ef426f9ac600c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NTFiNzBkMTU3NWY2Mjc3MWFjMmRhMDA3ZWY0MjZmOWFjNjAwYzY=", "commit": {"author": {"name": "Vikas Kumar", "email": "kr.vikas@gmail.com", "date": "2015-10-20T17:18:48Z"}, "committer": {"name": "Vikas Kumar", "email": "kr.vikas@gmail.com", "date": "2015-10-20T17:18:48Z"}, "message": "Match on bool should be replaced with if..else block\n\n1. Added another conditional in `check_expr` impl to lint if match expr\nis a bool.\n2. Test cases.", "tree": {"sha": "9a3482bff9cd27559b3e7d13244fc0f869a32419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a3482bff9cd27559b3e7d13244fc0f869a32419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2951b70d1575f62771ac2da007ef426f9ac600c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2951b70d1575f62771ac2da007ef426f9ac600c6", "html_url": "https://github.com/rust-lang/rust/commit/2951b70d1575f62771ac2da007ef426f9ac600c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2951b70d1575f62771ac2da007ef426f9ac600c6/comments", "author": {"login": "kvikas", "id": 1178022, "node_id": "MDQ6VXNlcjExNzgwMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1178022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvikas", "html_url": "https://github.com/kvikas", "followers_url": "https://api.github.com/users/kvikas/followers", "following_url": "https://api.github.com/users/kvikas/following{/other_user}", "gists_url": "https://api.github.com/users/kvikas/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvikas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvikas/subscriptions", "organizations_url": "https://api.github.com/users/kvikas/orgs", "repos_url": "https://api.github.com/users/kvikas/repos", "events_url": "https://api.github.com/users/kvikas/events{/privacy}", "received_events_url": "https://api.github.com/users/kvikas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kvikas", "id": 1178022, "node_id": "MDQ6VXNlcjExNzgwMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1178022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvikas", "html_url": "https://github.com/kvikas", "followers_url": "https://api.github.com/users/kvikas/followers", "following_url": "https://api.github.com/users/kvikas/following{/other_user}", "gists_url": "https://api.github.com/users/kvikas/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvikas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvikas/subscriptions", "organizations_url": "https://api.github.com/users/kvikas/orgs", "repos_url": "https://api.github.com/users/kvikas/repos", "events_url": "https://api.github.com/users/kvikas/events{/privacy}", "received_events_url": "https://api.github.com/users/kvikas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "html_url": "https://github.com/rust-lang/rust/commit/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "6d6c6dfeeb0c0b4bf4def02c3f7a2c7c40ba3c64", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2951b70d1575f62771ac2da007ef426f9ac600c6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2951b70d1575f62771ac2da007ef426f9ac600c6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2951b70d1575f62771ac2da007ef426f9ac600c6", "patch": "@@ -138,6 +138,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::WHILE_LET_LOOP,\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,\n+        matches::MATCH_BOOL,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::STR_TO_STRING,\n         methods::STRING_TO_STRING,"}, {"sha": "0606c2447476e00e609eb3a2e162b68a2a18f834", "filename": "src/matches.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2951b70d1575f62771ac2da007ef426f9ac600c6/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2951b70d1575f62771ac2da007ef426f9ac600c6/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=2951b70d1575f62771ac2da007ef426f9ac600c6", "patch": "@@ -1,5 +1,6 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n+use rustc::middle::ty;\n \n use utils::{snippet, span_lint, span_help_and_lint, in_external_macro, expr_block};\n \n@@ -9,13 +10,15 @@ declare_lint!(pub SINGLE_MATCH, Warn,\n declare_lint!(pub MATCH_REF_PATS, Warn,\n               \"a match has all arms prefixed with `&`; the match expression can be \\\n                dereferenced instead\");\n+declare_lint!(pub MATCH_BOOL, Warn,\n+              \"a match on boolean expression; recommends `if..else` block instead\");\n \n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n impl LintPass for MatchPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SINGLE_MATCH, MATCH_REF_PATS)\n+        lint_array!(SINGLE_MATCH, MATCH_REF_PATS, MATCH_BOOL)\n     }\n }\n \n@@ -59,6 +62,16 @@ impl LateLintPass for MatchPass {\n                          expression to match: `match *{} {{ ...`\", snippet(cx, ex.span, \"..\")));\n                 }\n             }\n+\n+            // check preconditions for MATCH_BOOL\n+            // type of expression == bool\n+            if is_bool_expr(cx, ex) {\n+                if in_external_macro(cx, expr.span) { return; }\n+\n+                span_lint(cx, MATCH_BOOL, expr.span,\n+                                   \"you seem to be trying to match on a boolean expression. \\\n+                                   Consider using if..else block\");\n+            }\n         }\n     }\n }\n@@ -71,6 +84,10 @@ fn is_unit_expr(expr: &Expr) -> bool {\n     }\n }\n \n+fn is_bool_expr(cx: &LateContext, ex: &Expr ) -> bool {\n+    cx.tcx.expr_ty(ex).sty == ty::TyBool\n+}\n+\n fn has_only_ref_pats(arms: &[Arm]) -> bool {\n     let mapped = arms.iter().flat_map(|a| &a.pats).map(|p| match p.node {\n         PatRegion(..) => Some(true),  // &-patterns"}, {"sha": "1cdf813bc00b9e93eff2cd125eff6ef5ffb2f412", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2951b70d1575f62771ac2da007ef426f9ac600c6/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2951b70d1575f62771ac2da007ef426f9ac600c6/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=2951b70d1575f62771ac2da007ef426f9ac600c6", "patch": "@@ -38,6 +38,28 @@ fn single_match(){\n     }\n }\n \n+fn match_bool() {\n+    let test: bool = true;\n+\n+    match test {  //~ ERROR you seem to be trying to match on a boolean expression\n+        true => (),\n+        false => (),\n+    };\n+\n+    let option = 1;\n+    match option == 1 {  //~ ERROR you seem to be trying to match on a boolean expression\n+        true => (),\n+        false => (),\n+    };\n+\n+    // Not linted\n+    match option {\n+        1 ... 10 => (),\n+        10 ... 20 => (),\n+        _ => (),\n+    };\n+}\n+\n fn ref_pats() {\n     {\n         let v = &Some(0);"}]}