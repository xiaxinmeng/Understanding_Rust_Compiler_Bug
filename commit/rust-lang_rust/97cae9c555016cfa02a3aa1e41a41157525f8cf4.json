{"sha": "97cae9c555016cfa02a3aa1e41a41157525f8cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3Y2FlOWM1NTUwMTZjZmEwMmEzYWExZTQxYTQxMTU3NTI1ZjhjZjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-20T18:34:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-20T18:34:29Z"}, "message": "promoteds in statics may refer to statics", "tree": {"sha": "1108cdd59b4527414a19af585ccdaba9d342eb0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1108cdd59b4527414a19af585ccdaba9d342eb0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97cae9c555016cfa02a3aa1e41a41157525f8cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97cae9c555016cfa02a3aa1e41a41157525f8cf4", "html_url": "https://github.com/rust-lang/rust/commit/97cae9c555016cfa02a3aa1e41a41157525f8cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97cae9c555016cfa02a3aa1e41a41157525f8cf4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ca7b700cae83324b4bad8be3286da4f964bb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ca7b700cae83324b4bad8be3286da4f964bb58", "html_url": "https://github.com/rust-lang/rust/commit/06ca7b700cae83324b4bad8be3286da4f964bb58"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "df163f6562842d1be5387996021df23c8c2fed46", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97cae9c555016cfa02a3aa1e41a41157525f8cf4/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cae9c555016cfa02a3aa1e41a41157525f8cf4/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=97cae9c555016cfa02a3aa1e41a41157525f8cf4", "patch": "@@ -387,8 +387,12 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 let mut inner = false;\n                 while let Some((mplace, path)) = ref_tracking.todo.pop() {\n                     let mode = match tcx.static_mutability(cid.instance.def_id()) {\n-                        Some(_) if cid.promoted.is_none() => CtfeValidationMode::Regular, // a `static`\n-                        _ => CtfeValidationMode::Const { inner },\n+                        Some(_) if cid.promoted.is_some() => {\n+                            // Promoteds in statics are allowed to point to statics.\n+                            CtfeValidationMode::Const { inner, allow_static_ptrs: true }\n+                        }\n+                        Some(_) => CtfeValidationMode::Regular, // a `static`\n+                        None => CtfeValidationMode::Const { inner, allow_static_ptrs: false },\n                     };\n                     ecx.const_validate_operand(mplace.into(), path, &mut ref_tracking, mode)?;\n                     inner = true;"}, {"sha": "57aec0953b8c29e24e228465f0f94d6c42db8afb", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97cae9c555016cfa02a3aa1e41a41157525f8cf4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cae9c555016cfa02a3aa1e41a41157525f8cf4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=97cae9c555016cfa02a3aa1e41a41157525f8cf4", "patch": "@@ -117,11 +117,12 @@ pub enum PathElem {\n pub enum CtfeValidationMode {\n     /// Regular validation, nothing special happening.\n     Regular,\n-    /// Validation of a `const`. `inner` says if this is an inner, indirect allocation (as opposed\n-    /// to the top-level const allocation).\n-    /// Being an inner allocation makes a difference because the top-level allocation of a `const`\n-    /// is copied for each use, but the inner allocations are implicitly shared.\n-    Const { inner: bool },\n+    /// Validation of a `const`.\n+    /// `inner` says if this is an inner, indirect allocation (as opposed to the top-level const\n+    /// allocation). Being an inner allocation makes a difference because the top-level allocation\n+    /// of a `const` is copied for each use, but the inner allocations are implicitly shared.\n+    /// `allow_static_ptrs` says if pointers to statics are permitted (which is the case for promoteds in statics).\n+    Const { inner: bool, allow_static_ptrs: bool },\n }\n \n /// State for tracking recursive validation of references\n@@ -437,7 +438,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n                     assert!(!self.ecx.tcx.is_thread_local_static(did));\n                     assert!(self.ecx.tcx.is_static(did));\n-                    if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. })) {\n+                    if matches!(\n+                        self.ctfe_mode,\n+                        Some(CtfeValidationMode::Const { allow_static_ptrs: false, .. })\n+                    ) {\n                         // See const_eval::machine::MemoryExtra::can_access_statics for why\n                         // this check is so important.\n                         // This check is reachable when the const just referenced the static,\n@@ -742,9 +746,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         // Sanity check: `builtin_deref` does not know any pointers that are not primitive.\n         assert!(op.layout.ty.builtin_deref(true).is_none());\n \n-        // Special check preventing `UnsafeCell` in constants\n+        // Special check preventing `UnsafeCell` in the inner part of constants\n         if let Some(def) = op.layout.ty.ty_adt_def() {\n-            if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true }))\n+            if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. }))\n                 && Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type()\n             {\n                 throw_validation_failure!(self.path, { \"`UnsafeCell` in a `const`\" });"}]}