{"sha": "a8e6d5b04d844a8b540a772dec4f6a233f307c35", "node_id": "C_kwDOAAsO6NoAKGE4ZTZkNWIwNGQ4NDRhOGI1NDBhNzcyZGVjNGY2YTIzM2YzMDdjMzU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-30T13:53:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-30T13:53:41Z"}, "message": "Merge commit '40b00f4200fbdeefd11815398cb46394b8cb0a5e' into sync_cg_clif-2021-12-30", "tree": {"sha": "e2e34051edd788079e52c067e9cf60048145227c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2e34051edd788079e52c067e9cf60048145227c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e6d5b04d844a8b540a772dec4f6a233f307c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e6d5b04d844a8b540a772dec4f6a233f307c35", "html_url": "https://github.com/rust-lang/rust/commit/a8e6d5b04d844a8b540a772dec4f6a233f307c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e6d5b04d844a8b540a772dec4f6a233f307c35/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d8785f0a85d233e00fc84445f1aab451ec9f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d8785f0a85d233e00fc84445f1aab451ec9f4f", "html_url": "https://github.com/rust-lang/rust/commit/65d8785f0a85d233e00fc84445f1aab451ec9f4f"}, {"sha": "40b00f4200fbdeefd11815398cb46394b8cb0a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/40b00f4200fbdeefd11815398cb46394b8cb0a5e", "html_url": "https://github.com/rust-lang/rust/commit/40b00f4200fbdeefd11815398cb46394b8cb0a5e"}], "stats": {"total": 171, "additions": 90, "deletions": 81}, "files": [{"sha": "3aba528abfd6d193bb09847884514a4cb32d9af1", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -5,6 +5,21 @@ on:\n   - pull_request\n \n jobs:\n+  rustfmt:\n+    runs-on: ubuntu-latest\n+    timeout-minutes: 10\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - name: Install rustfmt\n+      run: |\n+        rustup component add rustfmt\n+\n+    - name: Rustfmt\n+      run: |\n+        cargo fmt --check\n+\n   build:\n     runs-on: ${{ matrix.os }}\n     timeout-minutes: 60"}, {"sha": "a019793edd8d25481d6b1a4d733097b1fd3eaf89", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/nightly-cranelift.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -3,7 +3,7 @@ name: Test nightly Cranelift\n on:\n   push:\n   schedule:\n-    - cron: '1 17 * * *' # At 01:17 UTC every day.\n+    - cron: '17 1 * * *' # At 01:17 UTC every day.\n \n jobs:\n   build:"}, {"sha": "5aeaf3a1788043134ceb20fa64b11ec7e6f09cb7", "filename": "compiler/rustc_codegen_cranelift/.gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.gitignore?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -7,6 +7,7 @@ perf.data.old\n *.events\n *.string*\n /y.bin\n+/y.bin.dSYM\n /build\n /build_sysroot/sysroot_src\n /build_sysroot/compiler-builtins"}, {"sha": "3be4250296e774e1c5d2fb13def047985e97e4ec", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -40,31 +40,12 @@ unstable-features = [\"jit\", \"inline_asm\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n \n-[profile.dev]\n-# By compiling dependencies with optimizations, performing tests gets much faster.\n-opt-level = 3\n-\n-[profile.dev.package.rustc_codegen_cranelift]\n-# Disabling optimizations for cg_clif itself makes compilation after a change faster.\n-opt-level = 0\n-\n-[profile.release.package.rustc_codegen_cranelift]\n-incremental = true\n-\n # Disable optimizations and debuginfo of build scripts and some of the heavy build deps, as the\n # execution time of build scripts is so fast that optimizing them slows down the total build time.\n-[profile.dev.build-override]\n-opt-level = 0\n-debug = false\n-\n [profile.release.build-override]\n opt-level = 0\n debug = false\n \n-[profile.dev.package.cranelift-codegen-meta]\n-opt-level = 0\n-debug = false\n-\n [profile.release.package.cranelift-codegen-meta]\n opt-level = 0\n debug = false"}, {"sha": "8a2db5a43ecbf60488434ae6738677b8baad2d5b", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -37,7 +37,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo build\n+$ $cg_clif_dir/build/cargo-clif build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend."}, {"sha": "1382c7e53793e997f1e2d699289c41c909664506", "filename": "compiler/rustc_codegen_cranelift/build_system/build_backend.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -10,6 +10,18 @@ pub(crate) fn build_backend(\n     let mut cmd = Command::new(\"cargo\");\n     cmd.arg(\"build\").arg(\"--target\").arg(host_triple);\n \n+    cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n+\n+    let mut rustflags = env::var(\"RUSTFLAGS\").unwrap_or_default();\n+\n+    if env::var(\"CI\").as_ref().map(|val| &**val) == Ok(\"true\") {\n+        // Deny warnings on CI\n+        rustflags += \" -Dwarnings\";\n+\n+        // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n+        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n+    }\n+\n     if use_unstable_features {\n         cmd.arg(\"--features\").arg(\"unstable-features\");\n     }\n@@ -22,25 +34,20 @@ pub(crate) fn build_backend(\n         _ => unreachable!(),\n     }\n \n+    // Set the rpath to make the cg_clif executable find librustc_codegen_cranelift without changing\n+    // LD_LIBRARY_PATH\n     if cfg!(unix) {\n         if cfg!(target_os = \"macos\") {\n-            cmd.env(\n-                \"RUSTFLAGS\",\n-                \"-Csplit-debuginfo=unpacked \\\n+            rustflags += \" -Csplit-debuginfo=unpacked \\\n                 -Clink-arg=-Wl,-rpath,@loader_path/../lib \\\n-                -Zosx-rpath-install-name\"\n-                    .to_string()\n-                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n-            );\n+                -Zosx-rpath-install-name\";\n         } else {\n-            cmd.env(\n-                \"RUSTFLAGS\",\n-                \"-Clink-arg=-Wl,-rpath=$ORIGIN/../lib \".to_string()\n-                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n-            );\n+            rustflags += \" -Clink-arg=-Wl,-rpath=$ORIGIN/../lib \";\n         }\n     }\n \n+    cmd.env(\"RUSTFLAGS\", rustflags);\n+\n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n     crate::utils::spawn_and_wait(cmd);\n "}, {"sha": "2956fb698e17545307ac38dcfb701100e824da79", "filename": "compiler/rustc_codegen_cranelift/build_system/build_sysroot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -46,9 +46,9 @@ pub(crate) fn build_sysroot(\n     // Build and copy cargo wrapper\n     let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n     build_cargo_wrapper_cmd\n-        .arg(\"scripts/cargo.rs\")\n+        .arg(\"scripts/cargo-clif.rs\")\n         .arg(\"-o\")\n-        .arg(target_dir.join(\"cargo\"))\n+        .arg(target_dir.join(\"cargo-clif\"))\n         .arg(\"-g\");\n     spawn_and_wait(build_cargo_wrapper_cmd);\n "}, {"sha": "785c7383783741701feea05580f26d527cfd0757", "filename": "compiler/rustc_codegen_cranelift/docs/usage.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -9,7 +9,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo build\n+$ $cg_clif_dir/build/cargo-clif build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n@@ -32,7 +32,7 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/build/cargo jit\n+$ $cg_clif_dir/build/cargo-clif jit\n ```\n \n or\n@@ -45,7 +45,7 @@ There is also an experimental lazy jit mode. In this mode functions are only com\n first called.\n \n ```bash\n-$ $cg_clif_dir/build/cargo lazy-jit\n+$ $cg_clif_dir/build/cargo-clif lazy-jit\n ```\n \n ## Shell"}, {"sha": "ef3b575d39314f39a9b51957cd49812a0852d11a", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -129,6 +129,7 @@ fn call_return_u128_pair() {\n     return_u128_pair();\n }\n \n+#[allow(unreachable_code)] // FIXME false positive\n fn main() {\n     take_unique(Unique {\n         pointer: 0 as *const (),"}, {"sha": "cab94c0b8cfa7ee659f48c907789d6575ff539ce", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-12-20\"\n+channel = \"nightly-2021-12-30\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "41d82b581cd8cc07111c7f5b6a6f491a178dc801", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo-clif.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "previous_filename": "compiler/rustc_codegen_cranelift/scripts/cargo.rs"}, {"sha": "73600faa1e9c2ead9194c8b9fb8afef89d831910", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash\n set -e\n \n-./y.rs build\n+./y.rs build --no-unstable-features\n source scripts/config.sh\n \n echo \"[SETUP] Rust fork\""}, {"sha": "6bcc3049ecc4eefc978e75ce8f2f0ee51f54de11", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -47,6 +47,8 @@ rm src/test/ui/codegen/init-large-type.rs # same\n rm src/test/ui/sse2.rs # cpuid not supported, so sse2 not detected\n rm src/test/ui/issues/issue-33992.rs # unsupported linkages\n rm src/test/ui/issues/issue-51947.rs # same\n+rm src/test/incremental/hashes/function_interfaces.rs # same\n+rm src/test/incremental/hashes/statics.rs # same\n rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n@@ -60,18 +62,14 @@ rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and n\n \n rm src/test/incremental/hashes/inline_asm.rs # inline asm\n rm src/test/incremental/issue-72386.rs # same\n-rm src/test/incremental/issue-49482.rs # same\n-rm src/test/incremental/issue-54059.rs # same\n rm src/test/incremental/lto.rs # requires lto\n+rm src/test/incremental/dirty_clean.rs # TODO\n \n rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in build/bin/\n rm -r src/test/run-make/unstable-flag-required # same\n rm -r src/test/run-make/rustdoc-* # same\n rm -r src/test/run-make/emit-named-files # requires full --emit support\n \n-rm src/test/pretty/asm.rs # inline asm\n-rm src/test/pretty/raw-str-nonexpr.rs # same\n-\n rm -r src/test/run-pass-valgrind/unsized-locals\n \n rm src/test/ui/json-bom-plus-crlf-multifile.rs # differing warning\n@@ -97,6 +95,12 @@ rm src/test/ui/command/command-current-dir.rs # can't find libstd.so\n \n rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n \n+rm src/test/incremental/issue-80691-bad-eval-cache.rs # wrong exit code\n+rm src/test/incremental/spike-neg1.rs # errors out for some reason\n+rm src/test/incremental/spike-neg2.rs # same\n+\n+rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+\n echo \"[TEST] rustc test suite\"\n-RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui}\n+RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n popd"}, {"sha": "bdb3de0936dc90dc1f7b10543170b9e599e6a972", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -80,73 +80,73 @@ function base_sysroot_tests() {\n \n function extended_sysroot_tests() {\n     pushd rand\n-    ../build/cargo clean\n+    ../build/cargo-clif clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-random/rand\"\n-        ../build/cargo test --workspace\n+        ../build/cargo-clif test --workspace\n     else\n         echo \"[AOT] rust-random/rand\"\n-        ../build/cargo build --workspace --target $TARGET_TRIPLE --tests\n+        ../build/cargo-clif build --workspace --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo clean\" \\\n+        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo-clif clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-        \"../build/cargo build\"\n+        \"../build/cargo-clif build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n         hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n     else\n-        ../build/cargo clean\n+        ../build/cargo-clif clean\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../build/cargo build --target $TARGET_TRIPLE\n+        ../build/cargo-clif build --target $TARGET_TRIPLE\n         echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n     fi\n     popd\n \n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n-    ../../../../../build/cargo clean\n+    ../../../../../build/cargo-clif clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../../../../../build/cargo test\n+        ../../../../../build/cargo-clif test\n     else\n-        ../../../../../build/cargo build --target $TARGET_TRIPLE --tests\n+        ../../../../../build/cargo-clif build --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    ../build/cargo clean\n+    ../build/cargo-clif clean\n     export RUSTFLAGS=\"$RUSTFLAGS --cap-lints warn\" # newer aho_corasick versions throw a deprecation warning\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo build --example shootout-regex-dna --target $TARGET_TRIPLE\n+    ../build/cargo-clif build --example shootout-regex-dna --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         cat examples/regexdna-input.txt \\\n-            | ../build/cargo run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n+            | ../build/cargo-clif run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n             | grep -v \"Spawned thread\" > res.txt\n         diff -u res.txt examples/regexdna-output.txt\n     fi\n \n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-lang/regex tests\"\n-        ../build/cargo test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+        ../build/cargo-clif test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n     else\n         echo \"[AOT] rust-lang/regex tests\"\n-        ../build/cargo build --tests --target $TARGET_TRIPLE\n+        ../build/cargo-clif build --tests --target $TARGET_TRIPLE\n     fi\n     popd\n \n     pushd portable-simd\n     echo \"[TEST] rust-lang/portable-simd\"\n-    ../build/cargo clean\n-    ../build/cargo build --all-targets --target $TARGET_TRIPLE\n+    ../build/cargo-clif clean\n+    ../build/cargo-clif build --all-targets --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../build/cargo test -q\n+        ../build/cargo-clif test -q\n     fi\n     popd\n }"}, {"sha": "3b6025c73d10bd7a0113e2b31662dd7a20d9753a", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -237,7 +237,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) module: &'m mut dyn Module,\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) target_config: TargetFrontendConfig, // Cached from module\n-    pub(crate) pointer_type: Type, // Cached from module\n+    pub(crate) pointer_type: Type,                  // Cached from module\n     pub(crate) constants_cx: ConstantCx,\n \n     pub(crate) instance: Instance<'tcx>,"}, {"sha": "589910ede9688ce330e42bc2552ae3b9ea67cd54", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -67,7 +67,7 @@ impl WriterRelocate {\n     }\n \n     /// Perform the collected relocations to be usable for JIT usage.\n-    #[cfg(feature = \"jit\")]\n+    #[cfg(all(feature = \"jit\", not(windows)))]\n     pub(super) fn relocate_for_jit(mut self, jit_module: &cranelift_jit::JITModule) -> Vec<u8> {\n         for reloc in self.relocs.drain(..) {\n             match reloc.name {"}, {"sha": "638b025be229d57170e607b15fc0508def83986b", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -10,7 +10,7 @@ use crate::prelude::*;\n use rustc_index::vec::IndexVec;\n \n use cranelift_codegen::entity::EntityRef;\n-use cranelift_codegen::ir::{LabelValueLoc, ValueLabel};\n+use cranelift_codegen::ir::{Endianness, LabelValueLoc, ValueLabel};\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n \n@@ -23,15 +23,6 @@ use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n pub(crate) use emit::{DebugReloc, DebugRelocName};\n pub(crate) use unwind::UnwindContext;\n \n-fn target_endian(tcx: TyCtxt<'_>) -> RunTimeEndian {\n-    use rustc_target::abi::Endian;\n-\n-    match tcx.data_layout.endian {\n-        Endian::Big => RunTimeEndian::Big,\n-        Endian::Little => RunTimeEndian::Little,\n-    }\n-}\n-\n pub(crate) struct DebugContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n@@ -60,6 +51,11 @@ impl<'tcx> DebugContext<'tcx> {\n             address_size: isa.frontend_config().pointer_bytes(),\n         };\n \n+        let endian = match isa.endianness() {\n+            Endianness::Little => RunTimeEndian::Little,\n+            Endianness::Big => RunTimeEndian::Big,\n+        };\n+\n         let mut dwarf = DwarfUnit::new(encoding);\n \n         let producer = format!(\n@@ -108,7 +104,7 @@ impl<'tcx> DebugContext<'tcx> {\n         DebugContext {\n             tcx,\n \n-            endian: target_endian(tcx),\n+            endian,\n \n             dwarf,\n             unit_range_list: RangeList(Vec::new()),"}, {"sha": "e4f28338096e1cec0175fd0c78a0d2ae567829ff", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -2,6 +2,7 @@\n \n use crate::prelude::*;\n \n+use cranelift_codegen::ir::Endianness;\n use cranelift_codegen::isa::{unwind::UnwindInfo, TargetIsa};\n \n use cranelift_object::ObjectProduct;\n@@ -17,8 +18,11 @@ pub(crate) struct UnwindContext {\n }\n \n impl UnwindContext {\n-    pub(crate) fn new(tcx: TyCtxt<'_>, isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n-        let endian = super::target_endian(tcx);\n+    pub(crate) fn new(isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n+        let endian = match isa.endianness() {\n+            Endianness::Little => RunTimeEndian::Little,\n+            Endianness::Big => RunTimeEndian::Big,\n+        };\n         let mut frame_table = FrameTable::default();\n \n         let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {"}, {"sha": "046e4393a68d6c4306cae8642b10500f8b438eec", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -243,7 +243,7 @@ pub(crate) fn run_aot(\n     let isa = crate::build_isa(tcx.sess, &backend_config);\n     let mut allocator_module = make_module(tcx.sess, isa, \"allocator_shim\".to_string());\n     assert_eq!(pointer_ty(tcx), allocator_module.target_config().pointer_type());\n-    let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa(), true);\n+    let mut allocator_unwind_context = UnwindContext::new(allocator_module.isa(), true);\n     let created_alloc_shim =\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n "}, {"sha": "cb18f42f741d80b208b92bcfbf9a2143b68dbede", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6d5b04d844a8b540a772dec4f6a233f307c35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=a8e6d5b04d844a8b540a772dec4f6a233f307c35", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> CodegenCx<'tcx> {\n         assert_eq!(pointer_ty(tcx), isa.pointer_type());\n \n         let unwind_context =\n-            UnwindContext::new(tcx, isa, matches!(backend_config.codegen_mode, CodegenMode::Aot));\n+            UnwindContext::new(isa, matches!(backend_config.codegen_mode, CodegenMode::Aot));\n         let debug_context = if debug_info { Some(DebugContext::new(tcx, isa)) } else { None };\n         CodegenCx {\n             tcx,"}]}