{"sha": "ad3bd1b46d52ccb339a09558064b9bf687c47a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkM2JkMWI0NmQ1MmNjYjMzOWEwOTU1ODA2NGI5YmY2ODdjNDdhNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-11T00:25:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-11T00:25:08Z"}, "message": "Auto merge of #29726 - petrochenkov:privsan, r=alexcrichton\n\n- Check privacy sanity in all blocks, not only function bodies\n- Check all fields, not only named\n- Check all impl items, not only methods\n- Check default impls\n- Move the sanity check in the beginning of privacy checking, so others could rely on it\n\nTechnically it's a [breaking-change], but I expect no breakage because, well, it's *sane* privacy visitor, if code is broken it must be insane by definition!", "tree": {"sha": "5060bf6cf38a50cc04b9bee356f963673be4506d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5060bf6cf38a50cc04b9bee356f963673be4506d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad3bd1b46d52ccb339a09558064b9bf687c47a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3bd1b46d52ccb339a09558064b9bf687c47a75", "html_url": "https://github.com/rust-lang/rust/commit/ad3bd1b46d52ccb339a09558064b9bf687c47a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad3bd1b46d52ccb339a09558064b9bf687c47a75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f64201ee4dab77a908a79c25a441bfe13546480", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f64201ee4dab77a908a79c25a441bfe13546480", "html_url": "https://github.com/rust-lang/rust/commit/5f64201ee4dab77a908a79c25a441bfe13546480"}, {"sha": "41ccd44f767ec5f87f0c90d5f8d48c33bb9bddff", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ccd44f767ec5f87f0c90d5f8d48c33bb9bddff", "html_url": "https://github.com/rust-lang/rust/commit/41ccd44f767ec5f87f0c90d5f8d48c33bb9bddff"}], "stats": {"total": 244, "additions": 167, "deletions": 77}, "files": [{"sha": "81f7ea104e48f1379b03388b41c1eba7de84a163", "filename": "src/doc/trpl/associated-constants.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Fdoc%2Ftrpl%2Fassociated-constants.md", "raw_url": "https://github.com/rust-lang/rust/raw/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Fdoc%2Ftrpl%2Fassociated-constants.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fassociated-constants.md?ref=ad3bd1b46d52ccb339a09558064b9bf687c47a75", "patch": "@@ -74,6 +74,6 @@ for a `struct` or an `enum` works fine too:\n struct Foo;\n \n impl Foo {\n-    pub const FOO: u32 = 3;\n+    const FOO: u32 = 3;\n }\n ```"}, {"sha": "a8600d91a26894af0622df21e49615e286afae8c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 53, "deletions": 70, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ad3bd1b46d52ccb339a09558064b9bf687c47a75", "patch": "@@ -1031,32 +1031,29 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n \n struct SanePrivacyVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n-    in_fn: bool,\n+    in_block: bool,\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n-        if self.in_fn {\n+        self.check_sane_privacy(item);\n+        if self.in_block {\n             self.check_all_inherited(item);\n-        } else {\n-            self.check_sane_privacy(item);\n         }\n \n-        let in_fn = self.in_fn;\n-        let orig_in_fn = replace(&mut self.in_fn, match item.node {\n-            hir::ItemMod(..) => false, // modules turn privacy back on\n-            _ => in_fn,           // otherwise we inherit\n-        });\n+        let orig_in_block = self.in_block;\n+\n+        // Modules turn privacy back on, otherwise we inherit\n+        self.in_block = if let hir::ItemMod(..) = item.node { false } else { orig_in_block };\n+\n         visit::walk_item(self, item);\n-        self.in_fn = orig_in_fn;\n+        self.in_block = orig_in_block;\n     }\n \n-    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, _: ast::NodeId) {\n-        // This catches both functions and methods\n-        let orig_in_fn = replace(&mut self.in_fn, true);\n-        visit::walk_fn(self, fk, fd, b, s);\n-        self.in_fn = orig_in_fn;\n+    fn visit_block(&mut self, b: &'v hir::Block) {\n+        let orig_in_block = replace(&mut self.in_block, true);\n+        visit::walk_block(self, b);\n+        self.in_block = orig_in_block;\n     }\n }\n \n@@ -1066,89 +1063,75 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n     /// anything. In theory these qualifiers wouldn't parse, but that may happen\n     /// later on down the road...\n     fn check_sane_privacy(&self, item: &hir::Item) {\n-        let tcx = self.tcx;\n-        let check_inherited = |sp: Span, vis: hir::Visibility, note: &str| {\n+        let check_inherited = |sp, vis, note: &str| {\n             if vis != hir::Inherited {\n-                span_err!(tcx.sess, sp, E0449,\n-                          \"unnecessary visibility qualifier\");\n+                span_err!(self.tcx.sess, sp, E0449, \"unnecessary visibility qualifier\");\n                 if !note.is_empty() {\n-                    tcx.sess.span_note(sp, note);\n+                    self.tcx.sess.span_note(sp, note);\n                 }\n             }\n         };\n+\n         match item.node {\n             // implementations of traits don't need visibility qualifiers because\n             // that's controlled by having the trait in scope.\n             hir::ItemImpl(_, _, _, Some(..), _, ref impl_items) => {\n                 check_inherited(item.span, item.vis,\n-                                \"visibility qualifiers have no effect on trait \\\n-                                 impls\");\n+                                \"visibility qualifiers have no effect on trait impls\");\n                 for impl_item in impl_items {\n                     check_inherited(impl_item.span, impl_item.vis, \"\");\n                 }\n             }\n-\n-            hir::ItemImpl(..) => {\n+            hir::ItemImpl(_, _, _, None, _, _) => {\n                 check_inherited(item.span, item.vis,\n                                 \"place qualifiers on individual methods instead\");\n             }\n+            hir::ItemDefaultImpl(..) => {\n+                check_inherited(item.span, item.vis,\n+                                \"visibility qualifiers have no effect on trait impls\");\n+            }\n             hir::ItemForeignMod(..) => {\n                 check_inherited(item.span, item.vis,\n-                                \"place qualifiers on individual functions \\\n-                                 instead\");\n+                                \"place qualifiers on individual functions instead\");\n             }\n-\n-            hir::ItemEnum(..) |\n-            hir::ItemTrait(..) | hir::ItemDefaultImpl(..) |\n-            hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemStruct(..) |\n-            hir::ItemFn(..) | hir::ItemMod(..) | hir::ItemTy(..) |\n-            hir::ItemExternCrate(_) | hir::ItemUse(_) => {}\n+            hir::ItemStruct(..) | hir::ItemEnum(..) | hir::ItemTrait(..) |\n+            hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n+            hir::ItemMod(..) | hir::ItemExternCrate(..) |\n+            hir::ItemUse(..) | hir::ItemTy(..) => {}\n         }\n     }\n \n     /// When inside of something like a function or a method, visibility has no\n     /// control over anything so this forbids any mention of any visibility\n     fn check_all_inherited(&self, item: &hir::Item) {\n-        let tcx = self.tcx;\n-        fn check_inherited(tcx: &ty::ctxt, sp: Span, vis: hir::Visibility) {\n+        let check_inherited = |sp, vis| {\n             if vis != hir::Inherited {\n-                span_err!(tcx.sess, sp, E0447,\n-                          \"visibility has no effect inside functions\");\n-            }\n-        }\n-        let check_struct = |def: &hir::VariantData| {\n-            for f in def.fields() {\n-               match f.node.kind {\n-                    hir::NamedField(_, p) => check_inherited(tcx, f.span, p),\n-                    hir::UnnamedField(..) => {}\n-                }\n+                span_err!(self.tcx.sess, sp, E0447,\n+                          \"visibility has no effect inside functions or block expressions\");\n             }\n         };\n-        check_inherited(tcx, item.span, item.vis);\n+\n+        check_inherited(item.span, item.vis);\n         match item.node {\n             hir::ItemImpl(_, _, _, _, _, ref impl_items) => {\n                 for impl_item in impl_items {\n-                    match impl_item.node {\n-                        hir::MethodImplItem(..) => {\n-                            check_inherited(tcx, impl_item.span, impl_item.vis);\n-                        }\n-                        _ => {}\n-                    }\n+                    check_inherited(impl_item.span, impl_item.vis);\n                 }\n             }\n             hir::ItemForeignMod(ref fm) => {\n-                for i in &fm.items {\n-                    check_inherited(tcx, i.span, i.vis);\n+                for fi in &fm.items {\n+                    check_inherited(fi.span, fi.vis);\n                 }\n             }\n-\n-            hir::ItemStruct(ref def, _) => check_struct(def),\n-\n-            hir::ItemEnum(..) |\n-            hir::ItemExternCrate(_) | hir::ItemUse(_) |\n-            hir::ItemTrait(..) | hir::ItemDefaultImpl(..) |\n-            hir::ItemStatic(..) | hir::ItemConst(..) |\n-            hir::ItemFn(..) | hir::ItemMod(..) | hir::ItemTy(..) => {}\n+            hir::ItemStruct(ref vdata, _) => {\n+                for f in vdata.fields() {\n+                    check_inherited(f.span, f.node.kind.visibility());\n+                }\n+            }\n+            hir::ItemDefaultImpl(..) | hir::ItemEnum(..) | hir::ItemTrait(..) |\n+            hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n+            hir::ItemMod(..) | hir::ItemExternCrate(..) |\n+            hir::ItemUse(..) | hir::ItemTy(..) => {}\n         }\n     }\n }\n@@ -1492,6 +1475,14 @@ pub fn check_crate(tcx: &ty::ctxt,\n                    -> (ExportedItems, PublicItems) {\n     let krate = tcx.map.krate();\n \n+    // Sanity check to make sure that all privacy usage and controls are\n+    // reasonable.\n+    let mut visitor = SanePrivacyVisitor {\n+        tcx: tcx,\n+        in_block: false,\n+    };\n+    visit::walk_crate(&mut visitor, krate);\n+\n     // Figure out who everyone's parent is\n     let mut visitor = ParentVisitor {\n         parents: NodeMap(),\n@@ -1509,14 +1500,6 @@ pub fn check_crate(tcx: &ty::ctxt,\n     };\n     visit::walk_crate(&mut visitor, krate);\n \n-    // Sanity check to make sure that all privacy usage and controls are\n-    // reasonable.\n-    let mut visitor = SanePrivacyVisitor {\n-        in_fn: false,\n-        tcx: tcx,\n-    };\n-    visit::walk_crate(&mut visitor, krate);\n-\n     tcx.sess.abort_if_errors();\n \n     // Build up a set of all exported items in the AST. This is a set of all"}, {"sha": "336913b8772719d41631c22fd034bc3c9a0b3b5f", "filename": "src/test/compile-fail/privacy-sanity.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs?ref=ad3bd1b46d52ccb339a09558064b9bf687c47a75", "patch": "@@ -0,0 +1,113 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+#![feature(optin_builtin_traits)]\n+\n+trait MarkerTr {}\n+pub trait Tr {\n+    fn f();\n+    const C: u8;\n+    type T;\n+}\n+pub struct S {\n+    pub a: u8\n+}\n+struct Ts(pub u8);\n+\n+pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n+pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n+    pub fn f() {} //~ ERROR unnecessary visibility qualifier\n+    pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n+    pub type T = u8; //~ ERROR unnecessary visibility qualifier\n+}\n+pub impl S { //~ ERROR unnecessary visibility qualifier\n+    pub fn f() {}\n+    pub const C: u8 = 0;\n+    // pub type T = u8;\n+}\n+pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n+    pub fn f();\n+    pub static St: u8;\n+}\n+\n+const MAIN: u8 = {\n+    trait MarkerTr {}\n+    pub trait Tr { //~ ERROR visibility has no effect inside functions or block\n+        fn f();\n+        const C: u8;\n+        type T;\n+    }\n+    pub struct S { //~ ERROR visibility has no effect inside functions or block\n+        pub a: u8 //~ ERROR visibility has no effect inside functions or block\n+    }\n+    struct Ts(pub u8); //~ ERROR visibility has no effect inside functions or block\n+\n+    pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+    pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+        pub fn f() {} //~ ERROR unnecessary visibility qualifier\n+        //~^ ERROR visibility has no effect inside functions or block\n+        pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n+        //~^ ERROR visibility has no effect inside functions or block\n+        pub type T = u8; //~ ERROR unnecessary visibility qualifier\n+        //~^ ERROR visibility has no effect inside functions or block\n+    }\n+    pub impl S { //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+        pub fn f() {} //~ ERROR visibility has no effect inside functions or block\n+        pub const C: u8 = 0; //~ ERROR visibility has no effect inside functions or block\n+        // pub type T = u8; // ERROR visibility has no effect inside functions or block\n+    }\n+    pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+        pub fn f(); //~ ERROR visibility has no effect inside functions or block\n+        pub static St: u8; //~ ERROR visibility has no effect inside functions or block\n+    }\n+\n+    0\n+};\n+\n+fn main() {\n+    trait MarkerTr {}\n+    pub trait Tr { //~ ERROR visibility has no effect inside functions or block\n+        fn f();\n+        const C: u8;\n+        type T;\n+    }\n+    pub struct S { //~ ERROR visibility has no effect inside functions or block\n+        pub a: u8 //~ ERROR visibility has no effect inside functions or block\n+    }\n+    struct Ts(pub u8); //~ ERROR visibility has no effect inside functions or block\n+\n+    pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+    pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+        pub fn f() {} //~ ERROR unnecessary visibility qualifier\n+        //~^ ERROR visibility has no effect inside functions or block\n+        pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n+        //~^ ERROR visibility has no effect inside functions or block\n+        pub type T = u8; //~ ERROR unnecessary visibility qualifier\n+        //~^ ERROR visibility has no effect inside functions or block\n+    }\n+    pub impl S { //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+        pub fn f() {} //~ ERROR visibility has no effect inside functions or block\n+        pub const C: u8 = 0; //~ ERROR visibility has no effect inside functions or block\n+        // pub type T = u8; // ERROR visibility has no effect inside functions or block\n+    }\n+    pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility has no effect inside functions or block\n+        pub fn f(); //~ ERROR visibility has no effect inside functions or block\n+        pub static St: u8; //~ ERROR visibility has no effect inside functions or block\n+    }\n+}"}, {"sha": "51ebc240e7288b990f48b1e8d5fa89e3158dcc98", "filename": "src/test/run-pass/const-block-item.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3bd1b46d52ccb339a09558064b9bf687c47a75/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item.rs?ref=ad3bd1b46d52ccb339a09558064b9bf687c47a75", "patch": "@@ -20,11 +20,6 @@ static BLOCK_USE: usize = {\n     100\n };\n \n-static BLOCK_PUB_USE: usize = {\n-    pub use foo::Value;\n-    200\n-};\n-\n static BLOCK_STRUCT_DEF: usize = {\n     struct Foo {\n         a: usize\n@@ -48,7 +43,6 @@ static BLOCK_MACRO_RULES: usize = {\n \n pub fn main() {\n     assert_eq!(BLOCK_USE, 100);\n-    assert_eq!(BLOCK_PUB_USE, 200);\n     assert_eq!(BLOCK_STRUCT_DEF, 300);\n     assert_eq!(BLOCK_FN_DEF(390), 400);\n     assert_eq!(BLOCK_MACRO_RULES, 412);"}]}