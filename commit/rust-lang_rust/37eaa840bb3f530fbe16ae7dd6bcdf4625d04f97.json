{"sha": "37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZWFhODQwYmIzZjUzMGZiZTE2YWU3ZGQ2YmNkZjQ2MjVkMDRmOTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-30T21:04:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-30T21:04:58Z"}, "message": "Merge #2134 #2137\n\n2134: More match ast r=matklad a=kjeremy\n\nUse `match_ast!` in more places\n\n2137: Add link to the vscode VIM extension compatibility warning. r=matklad a=krk\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/1831\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: krk <keremkat@gmail.com>", "tree": {"sha": "2d582d7eb93616f6f8dcaa36bb7c182567ef41d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d582d7eb93616f6f8dcaa36bb7c182567ef41d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdufr6CRBK7hj4Ov3rIwAAdHIIAB5xCSAwsko1/CDlO3EOsw42\ncKYoQ0Mxll1U4c4zjH896z6EL+2kL1asQydMOw+e2QGxinbRYw2UjIbK46R3I6Jx\nUIq/WHHvFs51Jr6uoNVENwxbXlx3lDxUvmnTu1WvRAyr5oho6Ti38qPEenTSV83e\nVyrT7DfUJ5iRGZwh7RtArRQrvXe1kws72KQgrawatoF4aAjyF9QkMBEczolidHiQ\n+BoPszaZzn3uSF3vbuoq2dWbV19T7o6i92JuJcJQWvMvI3g0r96BKz7zx/Zwp8C+\nlrj2XqhS4ap66N63KWpi12kdvrjhvXf1D/vXxhT9NF7MkmZjd+ikJsBbjBR2Qik=\n=iYMd\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d582d7eb93616f6f8dcaa36bb7c182567ef41d4\nparent f70d3e41cf6c93c54eb904af00599f4ba6557390\nparent 4ad37df22339ff91779782d37ab315ef0ce274eb\nparent 9bbb27604d12b97506da6ee3fed95c66d696a6ac\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572469498 +0000\ncommitter GitHub <noreply@github.com> 1572469498 +0000\n\nMerge #2134 #2137\n\n2134: More match ast r=matklad a=kjeremy\n\nUse `match_ast!` in more places\n\n2137: Add link to the vscode VIM extension compatibility warning. r=matklad a=krk\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/1831\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: krk <keremkat@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "html_url": "https://github.com/rust-lang/rust/commit/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f70d3e41cf6c93c54eb904af00599f4ba6557390", "url": "https://api.github.com/repos/rust-lang/rust/commits/f70d3e41cf6c93c54eb904af00599f4ba6557390", "html_url": "https://github.com/rust-lang/rust/commit/f70d3e41cf6c93c54eb904af00599f4ba6557390"}, {"sha": "4ad37df22339ff91779782d37ab315ef0ce274eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad37df22339ff91779782d37ab315ef0ce274eb", "html_url": "https://github.com/rust-lang/rust/commit/4ad37df22339ff91779782d37ab315ef0ce274eb"}, {"sha": "9bbb27604d12b97506da6ee3fed95c66d696a6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbb27604d12b97506da6ee3fed95c66d696a6ac", "html_url": "https://github.com/rust-lang/rust/commit/9bbb27604d12b97506da6ee3fed95c66d696a6ac"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "152bc71bd28772fb135d53dfc7e64f48d025809e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "patch": "@@ -12,7 +12,7 @@ use hir_expand::name::AsName;\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n-    AstPtr,\n+    match_ast, AstPtr,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n };\n@@ -37,24 +37,34 @@ fn try_get_resolver_for_node(\n     file_id: FileId,\n     node: &SyntaxNode,\n ) -> Option<Resolver> {\n-    if let Some(module) = ast::Module::cast(node.clone()) {\n-        let src = crate::Source { file_id: file_id.into(), ast: module };\n-        Some(crate::Module::from_declaration(db, src)?.resolver(db))\n-    } else if let Some(file) = ast::SourceFile::cast(node.clone()) {\n-        let src =\n-            crate::Source { file_id: file_id.into(), ast: crate::ModuleSource::SourceFile(file) };\n-        Some(crate::Module::from_definition(db, src)?.resolver(db))\n-    } else if let Some(s) = ast::StructDef::cast(node.clone()) {\n-        let src = crate::Source { file_id: file_id.into(), ast: s };\n-        Some(Struct::from_source(db, src)?.resolver(db))\n-    } else if let Some(e) = ast::EnumDef::cast(node.clone()) {\n-        let src = crate::Source { file_id: file_id.into(), ast: e };\n-        Some(Enum::from_source(db, src)?.resolver(db))\n-    } else if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n-        Some(def_with_body_from_child_node(db, file_id, node)?.resolver(db))\n-    } else {\n-        // FIXME add missing cases\n-        None\n+    match_ast! {\n+        match node {\n+            ast::Module(it) => {\n+                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                Some(crate::Module::from_declaration(db, src)?.resolver(db))\n+            },\n+             ast::SourceFile(it) => {\n+                let src =\n+                    crate::Source { file_id: file_id.into(), ast: crate::ModuleSource::SourceFile(it) };\n+                Some(crate::Module::from_definition(db, src)?.resolver(db))\n+            },\n+            ast::StructDef(it) => {\n+                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                Some(Struct::from_source(db, src)?.resolver(db))\n+            },\n+            ast::EnumDef(it) => {\n+                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                Some(Enum::from_source(db, src)?.resolver(db))\n+            },\n+            _ => {\n+                if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n+                    Some(def_with_body_from_child_node(db, file_id, node)?.resolver(db))\n+                } else {\n+                    // FIXME add missing cases\n+                    None\n+                }\n+            },\n+        }\n     }\n }\n \n@@ -68,16 +78,14 @@ fn def_with_body_from_child_node(\n     let ctx = LocationCtx::new(db, module.id, file_id.into());\n \n     node.ancestors().find_map(|node| {\n-        if let Some(def) = ast::FnDef::cast(node.clone()) {\n-            return Some(Function { id: ctx.to_def(&def) }.into());\n-        }\n-        if let Some(def) = ast::ConstDef::cast(node.clone()) {\n-            return Some(Const { id: ctx.to_def(&def) }.into());\n-        }\n-        if let Some(def) = ast::StaticDef::cast(node) {\n-            return Some(Static { id: ctx.to_def(&def) }.into());\n+        match_ast! {\n+            match node {\n+                ast::FnDef(def)  => { Some(Function {id: ctx.to_def(&def) }.into()) },\n+                ast::ConstDef(def) => { Some(Const { id: ctx.to_def(&def) }.into()) },\n+                ast::StaticDef(def) => { Some(Static { id: ctx.to_def(&def) }.into()) },\n+                _ => { None },\n+            }\n         }\n-        None\n     })\n }\n "}, {"sha": "1b5c8deea0f88a2b5a771ad5d6c859efb6c6aba0", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "patch": "@@ -4,7 +4,7 @@ use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, ModuleItemOwner, NameOwner},\n-    SyntaxNode, TextRange,\n+    match_ast, SyntaxNode, TextRange,\n };\n \n use crate::{db::RootDatabase, FileId};\n@@ -29,12 +29,12 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n }\n \n fn runnable(db: &RootDatabase, file_id: FileId, item: SyntaxNode) -> Option<Runnable> {\n-    if let Some(fn_def) = ast::FnDef::cast(item.clone()) {\n-        runnable_fn(fn_def)\n-    } else if let Some(m) = ast::Module::cast(item) {\n-        runnable_mod(db, file_id, m)\n-    } else {\n-        None\n+    match_ast! {\n+        match item {\n+            ast::FnDef(it) => { runnable_fn(it) },\n+            ast::Module(it) => { runnable_mod(db, file_id, it) },\n+            _ => { None },\n+        }\n     }\n }\n "}, {"sha": "c2b005886a97f58b5beea1b46eb43dbf7db7ebf3", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "patch": "@@ -6,6 +6,7 @@ use itertools::Itertools;\n \n use crate::{\n     ast::{self, child_opt, children, AstChildren, AstNode, AstToken},\n+    match_ast,\n     syntax_node::{SyntaxElementChildren, SyntaxNodeChildren},\n };\n \n@@ -68,11 +69,12 @@ impl Iterator for ItemOrMacroIter {\n     fn next(&mut self) -> Option<ItemOrMacro> {\n         loop {\n             let n = self.0.next()?;\n-            if let Some(item) = ast::ModuleItem::cast(n.clone()) {\n-                return Some(ItemOrMacro::Item(item));\n-            }\n-            if let Some(call) = ast::MacroCall::cast(n) {\n-                return Some(ItemOrMacro::Macro(call));\n+            match_ast! {\n+                match n {\n+                    ast::ModuleItem(it) => { return Some(ItemOrMacro::Item(it)) },\n+                    ast::MacroCall(it) => { return Some(ItemOrMacro::Macro(it)) },\n+                    _ => {},\n+                }\n             }\n         }\n     }"}, {"sha": "c06928d122ba0c0129c10a551d529258ad645ed2", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=37eaa840bb3f530fbe16ae7dd6bcdf4625d04f97", "patch": "@@ -45,7 +45,7 @@ export function activate(context: vscode.ExtensionContext) {\n             });\n         } catch (_) {\n             vscode.window.showWarningMessage(\n-                'Enhanced typing feature is disabled because of incompatibility with VIM extension'\n+                'Enhanced typing feature is disabled because of incompatibility with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings'\n             );\n         }\n     }"}]}