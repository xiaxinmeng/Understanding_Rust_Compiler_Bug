{"sha": "6e79310c55d8a7d594780689c16b129070d9032b", "node_id": "C_kwDOAAsO6NoAKDZlNzkzMTBjNTVkOGE3ZDU5NDc4MDY4OWMxNmIxMjkwNzBkOTAzMmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-22T10:43:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-22T10:43:06Z"}, "message": "Rollup merge of #107111 - chenyukang:yukang/fix-107090-fluent-parameters, r=petrochenkov\n\nFix missing arguments issues and copy-paste bug for fluent\n\nFixes #107090", "tree": {"sha": "2d68f6990cf2e592b413bce7a2c2ccac84df0471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d68f6990cf2e592b413bce7a2c2ccac84df0471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e79310c55d8a7d594780689c16b129070d9032b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjzRM6CRBK7hj4Ov3rIwAAEvgIAJd/+g4M5UZJl/ismyrI1z6F\nNGUgbvDUYJBXJ9jng3kAAyerNdWRwcSWL4JVqyCzcxMA7g+1ofE7Gq6DTvQ5mOTw\n7ZU0PjxF0SZikPhRFknhI3wRBsh5Xc6n7yC0CZUmITORzkCeVB1b5sqg0tyoiLmQ\nmeCaP+EPQw5ORtrty73sjdaJdCe3tGutgkchz+hNR9yd1P6zk84rJuoSeeNV/u7k\nR+wOOEL3401NllHHsiUXhhWw714+bphZgul9U0nMrzQT5zD4Ro/dJ7mzAOz5kBCC\niEQpjmYne7Kq/fpqlDpFmiTV8Uhg/mrJq2fJLjuHla0H327FfCbeIz8mAmXwYhI=\n=AjNW\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d68f6990cf2e592b413bce7a2c2ccac84df0471\nparent d022013eb74df8a6b915cd144c983ac533589a28\nparent 81efdab3f8871ecbef2a504c34ef90ecd3989cf4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674384186 +0100\ncommitter GitHub <noreply@github.com> 1674384186 +0100\n\nRollup merge of #107111 - chenyukang:yukang/fix-107090-fluent-parameters, r=petrochenkov\n\nFix missing arguments issues and copy-paste bug for fluent\n\nFixes #107090\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e79310c55d8a7d594780689c16b129070d9032b", "html_url": "https://github.com/rust-lang/rust/commit/6e79310c55d8a7d594780689c16b129070d9032b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e79310c55d8a7d594780689c16b129070d9032b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d022013eb74df8a6b915cd144c983ac533589a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/d022013eb74df8a6b915cd144c983ac533589a28", "html_url": "https://github.com/rust-lang/rust/commit/d022013eb74df8a6b915cd144c983ac533589a28"}, {"sha": "81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "html_url": "https://github.com/rust-lang/rust/commit/81efdab3f8871ecbef2a504c34ef90ecd3989cf4"}], "stats": {"total": 237, "additions": 223, "deletions": 14}, "files": [{"sha": "164d6d26d230d656f0896e69cf8269b9d8845aaa", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6e79310c55d8a7d594780689c16b129070d9032b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6e79310c55d8a7d594780689c16b129070d9032b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=6e79310c55d8a7d594780689c16b129070d9032b", "patch": "@@ -268,28 +268,28 @@ infer_but_calling_introduces = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$lifetime_kind ->\n-    [named] lifetime `{$lifetime}`\n-    *[anon] an anonymous lifetime `'_`\n-} but calling `{assoc_item}` introduces an implicit `'static` lifetime requirement\n+    [true] lifetime `{$lifetime}`\n+    *[false] an anonymous lifetime `'_`\n+} but calling `{$assoc_item}` introduces an implicit `'static` lifetime requirement\n     .label1 = {$has_lifetime ->\n-        [named] lifetime `{$lifetime}`\n-        *[anon] an anonymous lifetime `'_`\n+        [true] lifetime `{$lifetime}`\n+        *[false] an anonymous lifetime `'_`\n     }\n     .label2 = ...is used and required to live as long as `'static` here because of an implicit lifetime bound on the {$has_impl_path ->\n-        [named] `impl` of `{$impl_path}`\n-        *[anon] inherent `impl`\n+        [true] `impl` of `{$impl_path}`\n+        *[false] inherent `impl`\n     }\n \n infer_but_needs_to_satisfy = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$has_lifetime ->\n-    [named] lifetime `{$lifetime}`\n-    *[anon] an anonymous lifetime `'_`\n+    [true] lifetime `{$lifetime}`\n+    *[false] an anonymous lifetime `'_`\n } but it needs to satisfy a `'static` lifetime requirement\n     .influencer = this data with {$has_lifetime ->\n-        [named] lifetime `{$lifetime}`\n-        *[anon] an anonymous lifetime `'_`\n+        [true] lifetime `{$lifetime}`\n+        *[false] an anonymous lifetime `'_`\n     }...\n     .require = {$spans_empty ->\n         *[true] ...is used and required to live as long as `'static` here\n@@ -302,8 +302,8 @@ infer_more_targeted = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$has_lifetime ->\n-    [named] lifetime `{$lifetime}`\n-    *[anon] an anonymous lifetime `'_`\n+    [true] lifetime `{$lifetime}`\n+    *[false] an anonymous lifetime `'_`\n } but calling `{$ident}` introduces an implicit `'static` lifetime requirement\n \n infer_ril_introduced_here = `'static` requirement introduced here"}, {"sha": "8bf3a160abbb4aaf2f064fef5967b0f3b7b83e8b", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e79310c55d8a7d594780689c16b129070d9032b/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e79310c55d8a7d594780689c16b129070d9032b/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=6e79310c55d8a7d594780689c16b129070d9032b", "patch": "@@ -927,6 +927,8 @@ pub struct ButNeedsToSatisfy {\n     #[subdiagnostic]\n     pub req_introduces_loc: Option<ReqIntroducedLocations>,\n \n+    pub has_param_name: bool,\n+    pub param_name: String,\n     pub spans_empty: bool,\n     pub has_lifetime: bool,\n     pub lifetime: String,"}, {"sha": "6a463583dfb0ff42573d3cbf0c308ef67fe434a1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e79310c55d8a7d594780689c16b129070d9032b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e79310c55d8a7d594780689c16b129070d9032b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6e79310c55d8a7d594780689c16b129070d9032b", "patch": "@@ -98,6 +98,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let sp = var_origin.span();\n         let return_sp = sub_origin.span();\n         let param = self.find_param_with_region(*sup_r, *sub_r)?;\n+        let simple_ident = param.param.pat.simple_ident();\n         let lifetime_name = if sup_r.has_name() { sup_r.to_string() } else { \"'_\".to_owned() };\n \n         let (mention_influencer, influencer_point) =\n@@ -187,7 +188,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             req_introduces_loc: subdiag,\n \n             has_lifetime: sup_r.has_name(),\n-            lifetime: sup_r.to_string(),\n+            lifetime: lifetime_name.clone(),\n+            has_param_name: simple_ident.is_some(),\n+            param_name: simple_ident.map(|x| x.to_string()).unwrap_or_default(),\n             spans_empty,\n             bound,\n         };"}, {"sha": "9426445656f23dc4561c2249007a213727858c39", "filename": "tests/ui/inference/issue-107090.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6e79310c55d8a7d594780689c16b129070d9032b/tests%2Fui%2Finference%2Fissue-107090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e79310c55d8a7d594780689c16b129070d9032b/tests%2Fui%2Finference%2Fissue-107090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.rs?ref=6e79310c55d8a7d594780689c16b129070d9032b", "patch": "@@ -0,0 +1,31 @@\n+use std::marker::PhantomData;\n+struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+where\n+    Foo<'short, 'out, T>: Convert<'a, 'b>;\n+    //~^ ERROR mismatched types\n+    //~^^ ERROR mismatched types\n+    //~^^^ ERROR use of undeclared lifetime name\n+    //~| ERROR use of undeclared lifetime name `'out`\n+\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+    //~^ ERROR use of undeclared lifetime name\n+    //~^^ ERROR use of undeclared lifetime name `'out`\n+    //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n+    fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+        //~^ ERROR use of undeclared lifetime name\n+        //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n+        self\n+    }\n+}\n+\n+fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+    //~^ ERROR use of undeclared lifetime name\n+    //~^^ ERROR incompatible lifetime on type\n+    //~| ERROR `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n+    sadness.cast()\n+}\n+\n+fn main() {}"}, {"sha": "33cb39014acfa658853824fdb08f20a484589d0b", "filename": "tests/ui/inference/issue-107090.stderr", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/6e79310c55d8a7d594780689c16b129070d9032b/tests%2Fui%2Finference%2Fissue-107090.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e79310c55d8a7d594780689c16b129070d9032b/tests%2Fui%2Finference%2Fissue-107090.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.stderr?ref=6e79310c55d8a7d594780689c16b129070d9032b", "patch": "@@ -0,0 +1,173 @@\n+error[E0261]: use of undeclared lifetime name `'short`\n+  --> $DIR/issue-107090.rs:4:9\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |         ^^^^^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'short` lifetime\n+   |\n+LL |     for<'short> Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |     +++++++++++\n+help: consider introducing lifetime `'short` here\n+   |\n+LL | struct Foo<'short, 'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            +++++++\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:4:17\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                 ^^^^ undeclared lifetime\n+   |\n+help: consider making the bound lifetime-generic with a new `'out` lifetime\n+   |\n+LL |     for<'out> Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |     +++++++++\n+help: consider introducing lifetime `'out` here\n+   |\n+LL | struct Foo<'out, 'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            +++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/issue-107090.rs:13:47\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      -                                        ^^ undeclared lifetime\n+   |      |\n+   |      help: consider introducing lifetime `'b` here: `'b,`\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:13:67\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      - help: consider introducing lifetime `'out` here: `'out,`   ^^^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:17:49\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |                                                 ^^^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'out` here\n+   |\n+LL |     fn cast<'out>(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |            ++++++\n+help: consider introducing lifetime `'out` here\n+   |\n+LL | impl<'out, 'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      +++++\n+\n+error[E0261]: use of undeclared lifetime name `'short`\n+  --> $DIR/issue-107090.rs:24:68\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |           -                                                        ^^^^^^ undeclared lifetime\n+   |           |\n+   |           help: consider introducing lifetime `'short` here: `'short,`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `Convert<'static, 'static>`\n+              found trait `Convert<'a, 'b>`\n+note: the lifetime `'a` as defined here...\n+  --> $DIR/issue-107090.rs:2:12\n+   |\n+LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `Convert<'static, 'static>`\n+              found trait `Convert<'a, 'b>`\n+note: the lifetime `'b` as defined here...\n+  --> $DIR/issue-107090.rs:2:16\n+   |\n+LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |                ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n+  --> $DIR/issue-107090.rs:13:55\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n+  --> $DIR/issue-107090.rs:13:21\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                     ^^^^^^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/issue-107090.rs:13:55\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^\n+   = note: expected `Convert<'short, 'static>`\n+              found `Convert<'_, 'static>`\n+\n+error: incompatible lifetime on type\n+  --> $DIR/issue-107090.rs:24:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^\n+   |\n+note: because this has an unmet lifetime requirement\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ introduces a `'static` lifetime requirement\n+note: the lifetime `'out` as defined here...\n+  --> $DIR/issue-107090.rs:24:17\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                 ^^^^\n+note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+  --> $DIR/issue-107090.rs:13:1\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0759]: `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-107090.rs:24:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^\n+   |                             |\n+   |                             this data with lifetime `'in_`...\n+   |                             ...is used and required to live as long as `'static` here\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n+  --> $DIR/issue-107090.rs:17:13\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |             ^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n+  --> $DIR/issue-107090.rs:13:21\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                     ^^^^^^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/issue-107090.rs:17:13\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |             ^^^^^^^^^^^\n+   = note: expected `Convert<'short, 'static>`\n+              found `Convert<'_, 'static>`\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0261, E0308, E0495, E0759.\n+For more information about an error, try `rustc --explain E0261`."}]}