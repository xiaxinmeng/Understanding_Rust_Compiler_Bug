{"sha": "6a51d374904e0486b2f1de2a33027ea80c1049f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTFkMzc0OTA0ZTA0ODZiMmYxZGUyYTMzMDI3ZWE4MGMxMDQ5ZjA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-22T19:27:53Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-22T19:27:53Z"}, "message": "ICH: Add test case for InlineAsm hashes.", "tree": {"sha": "e870c62c5ab1d9654b61046e2cb99d6750358399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e870c62c5ab1d9654b61046e2cb99d6750358399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a51d374904e0486b2f1de2a33027ea80c1049f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a51d374904e0486b2f1de2a33027ea80c1049f0", "html_url": "https://github.com/rust-lang/rust/commit/6a51d374904e0486b2f1de2a33027ea80c1049f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a51d374904e0486b2f1de2a33027ea80c1049f0/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2432f69b351676f6f77369347a82810c821024b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2432f69b351676f6f77369347a82810c821024b3", "html_url": "https://github.com/rust-lang/rust/commit/2432f69b351676f6f77369347a82810c821024b3"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "a1057c036d6c4f771ffeb63ef270b3bd92b6b69b", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/rust-lang/rust/blob/6a51d374904e0486b2f1de2a33027ea80c1049f0/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a51d374904e0486b2f1de2a33027ea80c1049f0/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=6a51d374904e0486b2f1de2a33027ea80c1049f0", "patch": "@@ -0,0 +1,265 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for inline asm.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![feature(asm)]\n+#![crate_type=\"rlib\"]\n+\n+\n+\n+// Change template -------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_template(a: i32) -> i32 {\n+    let c: i32;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(c)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    c\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_template(a: i32) -> i32 {\n+    let c: i32;\n+    unsafe {\n+        asm!(\"add 2, $0\"\n+             : \"=r\"(c)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    c\n+}\n+\n+\n+\n+// Change output -------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_output(a: i32) -> i32 {\n+    let mut _out1: i32 = 0;\n+    let mut _out2: i32 = 0;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out1)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    _out1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_output(a: i32) -> i32 {\n+    let mut _out1: i32 = 0;\n+    let mut _out2: i32 = 0;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out2)\n+             : \"0\"(a)\n+             :\n+             :\n+             );\n+    }\n+    _out1\n+}\n+\n+\n+\n+// Change input -------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_b)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+\n+\n+// Change input constraint -----------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a), \"r\"(_b)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"r\"(_a), \"0\"(_b)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+\n+\n+// Change clobber --------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_clobber(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_clobber(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             : \"eax\"\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+\n+\n+// Change options --------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_options(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             :\n+             );\n+    }\n+    _out\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn change_options(_a: i32) -> i32 {\n+    let _out;\n+    unsafe {\n+        asm!(\"add 1, $0\"\n+             : \"=r\"(_out)\n+             : \"0\"(_a)\n+             :\n+             : \"volatile\"\n+             );\n+    }\n+    _out\n+}\n+\n+\n+"}]}