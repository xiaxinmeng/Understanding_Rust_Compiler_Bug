{"sha": "288b6672be6560fe45f8bb033d581379ec38b4a0", "node_id": "C_kwDOAAsO6NoAKDI4OGI2NjcyYmU2NTYwZmU0NWY4YmIwMzNkNTgxMzc5ZWMzOGI0YTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-11T02:18:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-11T02:46:49Z"}, "message": "Improve AST stat collector.\n\nThis commit:\n- Adds a comment explaining which `visit_*` methods should be\n  implemented.\n- Adds and removes some `visit_*` methods accordingly, improving\n  coverage, and avoiding some double counting.", "tree": {"sha": "ce7a88557c24660858e29f8e17e25821b506adee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7a88557c24660858e29f8e17e25821b506adee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/288b6672be6560fe45f8bb033d581379ec38b4a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/288b6672be6560fe45f8bb033d581379ec38b4a0", "html_url": "https://github.com/rust-lang/rust/commit/288b6672be6560fe45f8bb033d581379ec38b4a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/288b6672be6560fe45f8bb033d581379ec38b4a0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf20777d1310431178c50b7b8dad0537d5e4d4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf20777d1310431178c50b7b8dad0537d5e4d4f7", "html_url": "https://github.com/rust-lang/rust/commit/bf20777d1310431178c50b7b8dad0537d5e4d4f7"}], "stats": {"total": 99, "additions": 81, "deletions": 18}, "files": [{"sha": "080c7df47a0e9c1e10160680520128b4f9e31131", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/288b6672be6560fe45f8bb033d581379ec38b4a0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288b6672be6560fe45f8bb033d581379ec38b4a0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=288b6672be6560fe45f8bb033d581379ec38b4a0", "patch": "@@ -26,6 +26,23 @@ struct NodeData {\n     size: usize,\n }\n \n+/// This type measures the size of AST and HIR nodes, by implementing the AST\n+/// and HIR `Visitor` traits. But we don't measure every visited type because\n+/// that could cause double counting.\n+///\n+/// For example, `ast::Visitor` has `visit_ident`, but `Ident`s are always\n+/// stored inline within other AST nodes, so we don't implement `visit_ident`\n+/// here. In constrast, we do implement `visit_expr` because `ast::Expr` is\n+/// always stored as `P<ast::Expr>`, and every such expression should be\n+/// measured separately.\n+///\n+/// In general, a `visit_foo` method should be implemented here if the\n+/// corresponding `Foo` type is always stored on its own, e.g.: `P<Foo>`,\n+/// `Box<Foo>`, `Vec<Foo>`, `Box<[Foo]>`.\n+///\n+/// There are some types in the AST and HIR tree that the visitors do not have\n+/// a `visit_*` method for, and so we cannot measure these, which is\n+/// unfortunate.\n struct StatCollector<'k> {\n     krate: Option<Map<'k>>,\n     data: FxHashMap<&'static str, NodeData>,\n@@ -44,9 +61,11 @@ pub fn print_hir_stats(tcx: TyCtxt<'_>) {\n }\n \n pub fn print_ast_stats(krate: &ast::Crate, title: &str) {\n+    use rustc_ast::visit::Visitor;\n+\n     let mut collector =\n         StatCollector { krate: None, data: FxHashMap::default(), seen: FxHashSet::default() };\n-    ast_visit::walk_crate(&mut collector, krate);\n+    collector.visit_crate(krate);\n     collector.print(title);\n }\n \n@@ -228,6 +247,10 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_path(self, path)\n     }\n \n+    // `PathSegment` has one inline use (in `ast::ExprKind::MethodCall`) and\n+    // one non-inline use (in `Path::segments`). The latter case is more common\n+    // than the former case, so we implement this visitor and tolerate the\n+    // double counting in the former case.\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v hir::PathSegment<'v>) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n         hir_visit::walk_path_segment(self, path_span, path_segment)\n@@ -269,6 +292,11 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_stmt(self, s)\n     }\n \n+    fn visit_param(&mut self, p: &'v ast::Param) {\n+        self.record(\"Param\", Id::None, p);\n+        ast_visit::walk_param(self, p)\n+    }\n+\n     fn visit_arm(&mut self, a: &'v ast::Arm) {\n         self.record(\"Arm\", Id::None, a);\n         ast_visit::walk_arm(self, a)\n@@ -289,6 +317,16 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_ty(self, t)\n     }\n \n+    fn visit_generic_param(&mut self, g: &'v ast::GenericParam) {\n+        self.record(\"GenericParam\", Id::None, g);\n+        ast_visit::walk_generic_param(self, g)\n+    }\n+\n+    fn visit_where_predicate(&mut self, p: &'v ast::WherePredicate) {\n+        self.record(\"WherePredicate\", Id::None, p);\n+        ast_visit::walk_where_predicate(self, p)\n+    }\n+\n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, s: Span, _: NodeId) {\n         self.record(\"FnDecl\", Id::None, fk.decl());\n         ast_visit::walk_fn(self, fk, s)\n@@ -318,27 +356,42 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_variant(self, v)\n     }\n \n-    fn visit_lifetime(&mut self, lifetime: &'v ast::Lifetime, _: ast_visit::LifetimeCtxt) {\n-        self.record(\"Lifetime\", Id::None, lifetime);\n-        ast_visit::walk_lifetime(self, lifetime)\n-    }\n-\n-    fn visit_mac_call(&mut self, mac: &'v ast::MacCall) {\n-        self.record(\"MacCall\", Id::None, mac);\n-        ast_visit::walk_mac(self, mac)\n-    }\n+    // `UseTree` has one inline use (in `ast::ItemKind::Use`) and one\n+    // non-inline use (in `ast::UseTreeKind::Nested). The former case is more\n+    // common, so we don't implement `visit_use_tree` and tolerate the missed\n+    // coverage in the latter case.\n \n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v ast::PathSegment) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n         ast_visit::walk_path_segment(self, path_span, path_segment)\n     }\n \n-    fn visit_assoc_constraint(&mut self, constraint: &'v ast::AssocConstraint) {\n-        self.record(\"AssocConstraint\", Id::None, constraint);\n-        ast_visit::walk_assoc_constraint(self, constraint)\n+    // `GenericArgs` has one inline use (in `ast::AssocConstraint::gen_args`) and one\n+    // non-inline use (in `ast::PathSegment::args`). The latter case is more\n+    // common, so we implement `visit_generic_args` and tolerate the double\n+    // counting in the former case.\n+    fn visit_generic_args(&mut self, sp: Span, g: &'v ast::GenericArgs) {\n+        self.record(\"GenericArgs\", Id::None, g);\n+        ast_visit::walk_generic_args(self, sp, g)\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n         self.record(\"Attribute\", Id::None, attr);\n+        ast_visit::walk_attribute(self, attr)\n+    }\n+\n+    fn visit_expr_field(&mut self, f: &'v ast::ExprField) {\n+        self.record(\"ExprField\", Id::None, f);\n+        ast_visit::walk_expr_field(self, f)\n+    }\n+\n+    fn visit_crate(&mut self, krate: &'v ast::Crate) {\n+        self.record(\"Crate\", Id::None, krate);\n+        ast_visit::walk_crate(self, krate)\n+    }\n+\n+    fn visit_inline_asm(&mut self, asm: &'v ast::InlineAsm) {\n+        self.record(\"InlineAsm\", Id::None, asm);\n+        ast_visit::walk_inline_asm(self, asm)\n     }\n }"}, {"sha": "8e2daebcf0ad0d11973e44ef65bb7b7b67f69ba6", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/288b6672be6560fe45f8bb033d581379ec38b4a0/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/288b6672be6560fe45f8bb033d581379ec38b4a0/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=288b6672be6560fe45f8bb033d581379ec38b4a0", "patch": "@@ -3,53 +3,63 @@ PRE EXPANSION AST STATS\n \n Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n-Lifetime                          32             2            16\n-MacCall                           64             1            64\n+ExprField                         48             1            48\n+GenericArgs                       64             1            64\n Local                             72             1            72\n+WherePredicate                    72             1            72\n+Crate                             72             1            72\n Arm                               96             2            48\n FieldDef                         160             2            80\n ForeignItem                      160             1           160\n Stmt                             160             5            32\n+Param                            160             4            40\n FnDecl                           200             5            40\n Variant                          240             2           120\n Block                            288             6            48\n Attribute                        304             2           152\n ImplItem                         320             2           160\n TraitItem                        320             2           160\n GenericBound                     352             4            88\n+GenericParam                     520             5           104\n PathSegment                      720            30            24\n Expr                             832             8           104\n Pat                              840             7           120\n Ty                             1_344            14            96\n Item                           1_800             9           200\n ----------------------------------------------------------------\n-Total                          8_304\n+Total                          9_144\n \n \n POST EXPANSION AST STATS\n \n Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n-Lifetime                          32             2            16\n+ExprField                         48             1            48\n+GenericArgs                       64             1            64\n Local                             72             1            72\n+WherePredicate                    72             1            72\n+Crate                             72             1            72\n Arm                               96             2            48\n+InlineAsm                        120             1           120\n FieldDef                         160             2            80\n ForeignItem                      160             1           160\n Stmt                             160             5            32\n+Param                            160             4            40\n FnDecl                           200             5            40\n Variant                          240             2           120\n Block                            288             6            48\n ImplItem                         320             2           160\n TraitItem                        320             2           160\n GenericBound                     352             4            88\n+GenericParam                     520             5           104\n Attribute                        608             4           152\n PathSegment                      792            33            24\n Pat                              840             7           120\n Expr                             936             9           104\n Ty                             1_344            14            96\n Item                           2_200            11           200\n ----------------------------------------------------------------\n-Total                          9_120\n+Total                         10_144\n \n \n HIR STATS"}]}