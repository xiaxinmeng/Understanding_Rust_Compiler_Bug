{"sha": "a5743b3b5701e1c2f33a447350ff7b8f929f2ed4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NzQzYjNiNTcwMWUxYzJmMzNhNDQ3MzUwZmY3YjhmOTI5ZjJlZDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-21T08:27:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-22T20:54:51Z"}, "message": "change `with_in_scope_lifetime_defs` to take an iterator", "tree": {"sha": "1117ec7cd6bd3aa529d12249ad11b3dd77c4a4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1117ec7cd6bd3aa529d12249ad11b3dd77c4a4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4", "html_url": "https://github.com/rust-lang/rust/commit/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b26be575020c26b400b918342ac5c0c9ec76c58", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b26be575020c26b400b918342ac5c0c9ec76c58", "html_url": "https://github.com/rust-lang/rust/commit/1b26be575020c26b400b918342ac5c0c9ec76c58"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "3b09c49bd90cbfea1f1432868d3498bea93e82e2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a5743b3b5701e1c2f33a447350ff7b8f929f2ed4", "patch": "@@ -612,12 +612,16 @@ impl<'a> LoweringContext<'a> {\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n     // for them.\n-    fn with_in_scope_lifetime_defs<T, F>(&mut self, lt_defs: &[LifetimeDef], f: F) -> T\n+    fn with_in_scope_lifetime_defs<'l, T, F>(\n+        &mut self,\n+        lt_defs: impl Iterator<Item = &'l LifetimeDef>,\n+        f: F,\n+    ) -> T\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n-        let lt_def_names = lt_defs.iter().map(|lt_def| lt_def.lifetime.ident.name);\n+        let lt_def_names = lt_defs.map(|lt_def| lt_def.lifetime.ident.name);\n         self.in_scope_lifetimes.extend(lt_def_names);\n \n         let res = f(self);\n@@ -657,14 +661,13 @@ impl<'a> LoweringContext<'a> {\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n-            &generics\n+            generics\n                 .params\n                 .iter()\n-                .filter_map(|p| match *p {\n-                    GenericParam::Lifetime(ref ld) => Some(ld.clone()),\n+                .filter_map(|p| match p {\n+                    GenericParam::Lifetime(ld) => Some(ld),\n                     _ => None,\n-                })\n-                .collect::<Vec<_>>(),\n+                }),\n             |this| {\n                 this.collect_in_band_defs(parent_id, |this| {\n                     (this.lower_generics(generics), f(this))\n@@ -923,13 +926,12 @@ impl<'a> LoweringContext<'a> {\n                 hir::TyRptr(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(\n-                &f.generic_params\n+                f.generic_params\n                     .iter()\n-                    .filter_map(|p| match *p {\n-                        GenericParam::Lifetime(ref ld) => Some(ld.clone()),\n+                    .filter_map(|p| match p {\n+                        GenericParam::Lifetime(ld) => Some(ld),\n                         _ => None,\n-                    })\n-                    .collect::<Vec<_>>(),\n+                    }),\n                 |this| {\n                     hir::TyBareFn(P(hir::BareFnTy {\n                         generic_params: this.lower_generic_params(&f.generic_params, &NodeMap()),\n@@ -1874,13 +1876,12 @@ impl<'a> LoweringContext<'a> {\n                 span,\n             }) => {\n                 self.with_in_scope_lifetime_defs(\n-                    &bound_generic_params\n+                    bound_generic_params\n                         .iter()\n-                        .filter_map(|p| match *p {\n-                            GenericParam::Lifetime(ref ld) => Some(ld.clone()),\n+                        .filter_map(|p| match p {\n+                            GenericParam::Lifetime(ld) => Some(ld),\n                             _ => None,\n-                        })\n-                        .collect::<Vec<_>>(),\n+                        }),\n                     |this| {\n                         hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                             bound_generic_params: this.lower_generic_params(\n@@ -2169,14 +2170,13 @@ impl<'a> LoweringContext<'a> {\n                     });\n \n                 let new_impl_items = self.with_in_scope_lifetime_defs(\n-                    &ast_generics\n+                    ast_generics\n                         .params\n                         .iter()\n-                        .filter_map(|p| match *p {\n-                            GenericParam::Lifetime(ref ld) => Some(ld.clone()),\n+                        .filter_map(|p| match p {\n+                            GenericParam::Lifetime(ld) => Some(ld),\n                             _ => None,\n-                        })\n-                        .collect::<Vec<_>>(),\n+                        }),\n                     |this| {\n                         impl_items\n                             .iter()"}]}