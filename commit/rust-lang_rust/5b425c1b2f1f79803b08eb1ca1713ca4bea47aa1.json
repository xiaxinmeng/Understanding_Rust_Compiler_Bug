{"sha": "5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNDI1YzFiMmYxZjc5ODAzYjA4ZWIxY2ExNzEzY2E0YmVhNDdhYTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-19T11:54:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T17:08:36Z"}, "message": "Fix fallout in tests.", "tree": {"sha": "b6ad8a5f275fe945ff0fe012d93d67fdb87a6e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ad8a5f275fe945ff0fe012d93d67fdb87a6e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "html_url": "https://github.com/rust-lang/rust/commit/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b3734f8ae01a07ee3104775976b34cbb281795f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3734f8ae01a07ee3104775976b34cbb281795f", "html_url": "https://github.com/rust-lang/rust/commit/1b3734f8ae01a07ee3104775976b34cbb281795f"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "eb4d62b01ad1a07189e9ef766b199ae1f156e1eb", "filename": "src/test/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -32,7 +32,7 @@ impl Foo {\n     }\n }\n \n-pub trait Bar {\n+pub trait Bar : Sized {\n     fn foo1(&self);\n     fn foo2(self);\n     fn foo3(self: Box<Self>);"}, {"sha": "ea5becbf229c0e0aca0c1602e6e953783ac0b467", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -12,7 +12,7 @@\n // parameter, the corresponding value must be sized. Also that the\n // self type must be sized if appropriate.\n \n-trait Foo<T> { fn take(self, x: &T) { } } // Note: T is sized\n+trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[int]> for uint { }\n //~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `[int]`"}, {"sha": "f970cdb1b8304c6b797ae3f3333ea231d9331470", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -15,5 +15,4 @@ fn main() {\n     let r: Box<Foo> = box 5;\n     let _m: Box<Foo> = r as Box<Foo>;\n     //~^ ERROR `core::kinds::Sized` is not implemented for the type `Foo`\n-    //~| ERROR `Foo` is not implemented for the type `Foo`\n }"}, {"sha": "aeb003ca5d091047daa90fbc0e7bb007c9bfb46a", "filename": "src/test/compile-fail/regions-infer-bound-from-trait-self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Fregions-infer-bound-from-trait-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Fregions-infer-bound-from-trait-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-bound-from-trait-self.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -23,12 +23,12 @@ fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n \n // In these case, `Self` inherits `'static`.\n \n-trait InheritsFromStatic : 'static {\n+trait InheritsFromStatic : Sized + 'static {\n     fn foo1<'a>(self, x: Inv<'a>) {\n         check_bound(x, self)\n     }\n }\n-trait InheritsFromStaticIndirectly : Static {\n+trait InheritsFromStaticIndirectly : Sized + Static {\n     fn foo1<'a>(self, x: Inv<'a>) {\n         check_bound(x, self)\n     }\n@@ -37,21 +37,21 @@ trait InheritsFromStaticIndirectly : Static {\n \n // In these case, `Self` inherits `'a`.\n \n-trait InheritsFromIs<'a> : 'a {\n+trait InheritsFromIs<'a> : Sized + 'a {\n     fn foo(self, x: Inv<'a>) {\n         check_bound(x, self)\n     }\n }\n \n-trait InheritsFromIsIndirectly<'a> : Is<'a> {\n+trait InheritsFromIsIndirectly<'a> : Sized + Is<'a> {\n     fn foo(self, x: Inv<'a>) {\n         check_bound(x, self)\n     }\n }\n \n // In this case, `Self` inherits nothing.\n \n-trait InheritsFromNothing<'a> {\n+trait InheritsFromNothing<'a> : Sized {\n     fn foo(self, x: Inv<'a>) {\n         check_bound(x, self)\n             //~^ ERROR parameter type `Self` may not live long enough"}, {"sha": "333730e0c4b802c62bf7d3a341a2f6ea17594cfe", "filename": "src/test/compile-fail/trait-matching-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftrait-matching-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftrait-matching-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-matching-lifetimes.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -16,7 +16,7 @@ struct Foo<'a,'b> {\n     y: &'b int,\n }\n \n-trait Tr {\n+trait Tr : Sized {\n     fn foo(x: Self) {}\n }\n "}, {"sha": "f894e2ee28e2f9327fa8ae8eb3ec522d99bd3f46", "filename": "src/test/compile-fail/trait-safety-fn-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -11,7 +11,7 @@\n // Check that an unsafe impl does not imply that unsafe actions are\n // legal in the methods.\n \n-unsafe trait UnsafeTrait {\n+unsafe trait UnsafeTrait : Sized {\n     fn foo(self) { }\n }\n "}, {"sha": "3a4cc9e874e7d2d0f91da799ebfb9f2d4cc570dd", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -11,7 +11,7 @@\n // Test static calls to make sure that we align the Self and input\n // type parameters on a trait correctly.\n \n-trait Tr<T> {\n+trait Tr<T> : Sized {\n     fn op(T) -> Self;\n }\n "}, {"sha": "c113e1b7815212a6f39bd9433095aee0d77c91c8", "filename": "src/test/compile-fail/type-params-in-different-spaces-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-3.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Tr {\n+trait Tr : Sized {\n     fn test<X>(u: X) -> Self {\n         u   //~ ERROR mismatched types\n     }"}, {"sha": "f9ece8e6843db8756d0c6cbd4a80d4d28d229577", "filename": "src/test/compile-fail/unsized4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Funsized4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fcompile-fail%2Funsized4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized4.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -10,8 +10,7 @@\n \n // Test that bounds are sized-compatible.\n \n-trait T {}\n-\n+trait T : Sized {}\n fn f<Sized? Y: T>() {\n //~^ERROR incompatible bounds on `Y`, bound `T` does not allow unsized type\n }"}, {"sha": "94458a7fb4bccbce7c95a7d20f8d1fb78dc27502", "filename": "src/test/debuginfo/issue7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fdebuginfo%2Fissue7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fdebuginfo%2Fissue7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue7712.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -11,7 +11,7 @@\n // compile-flags:--debuginfo=1\n // min-lldb-version: 310\n \n-pub trait TraitWithDefaultMethod {\n+pub trait TraitWithDefaultMethod : Sized {\n     fn method(self) {\n         ()\n     }"}, {"sha": "87884d2f95629b41ae0afa6ea0451e2fcf9bff01", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -118,7 +118,7 @@ struct Struct {\n     x: int\n }\n \n-trait Trait {\n+trait Trait : Sized {\n     fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n         zzz(); // #break\n         arg1 + arg2"}, {"sha": "62b5e6872ee4986d567b0525a21a185210262507", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -118,7 +118,7 @@ struct Struct {\n     x: int\n }\n \n-trait Trait {\n+trait Trait : Sized {\n \n     fn self_by_ref<T>(&self, arg1: int, arg2: T) -> int {\n         zzz(); // #break"}, {"sha": "ce7f5dde2ad194e355052db804eef23f90ccde09", "filename": "src/test/run-pass/associated-types-impl-redirect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -19,6 +19,7 @@\n #![feature(associated_types, lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n+use std::kinds::Sized;\n use std::option::Option::{None, Some, mod};\n \n trait Iterator {\n@@ -27,7 +28,7 @@ trait Iterator {\n     fn next(&mut self) -> Option<Self::Item>;\n }\n \n-trait IteratorExt: Iterator {\n+trait IteratorExt: Iterator + Sized {\n     fn by_ref(&mut self) -> ByRef<Self> {\n         ByRef(self)\n     }"}, {"sha": "92daee5225d01729edcd8fc88f28e658fa65f47c", "filename": "src/test/run-pass/associated-types-projection-bound-in-supertraits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -21,7 +21,7 @@ trait Not {\n     fn not(self) -> Self::Result;\n }\n \n-trait Int: Not<Result=Self> {\n+trait Int: Not<Result=Self> + Sized {\n     fn count_ones(self) -> uint;\n     fn count_zeros(self) -> uint {\n         // neither works"}, {"sha": "7afaf290424af80ee490be278535a62b3eecf59d", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -19,6 +19,7 @@\n #![feature(associated_types, lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n+use std::kinds::Sized;\n use std::option::Option::{None, Some, mod};\n \n trait Iterator {\n@@ -27,7 +28,7 @@ trait Iterator {\n     fn next(&mut self) -> Option<Self::Item>;\n }\n \n-trait IteratorExt: Iterator {\n+trait IteratorExt: Iterator + Sized {\n     fn by_ref(&mut self) -> ByRef<Self> {\n         ByRef(self)\n     }"}, {"sha": "bf8d303f34174941d2281a97bb9f5abafd77a654", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Speak {\n+trait Speak : Sized {\n     fn say(&self, s:&str) -> String;\n     fn hi(&self) -> String { hello(self) }\n }"}, {"sha": "ab775132dde4499d9b7db43a1b3afcd963e5421c", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -11,7 +11,7 @@\n // Tests the ability for the Self type in default methods to use\n // capabilities granted by builtin kinds as supertraits.\n \n-trait Foo : Send {\n+trait Foo : Send + Sized {\n     fn foo(self, tx: Sender<Self>) {\n         tx.send(self);\n     }"}, {"sha": "727cada21fa66549304cf788e1fbed9b4c3841d5", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -21,7 +21,7 @@ trait Y {\n }\n \n \n-trait Z: Y {\n+trait Z: Y + Sized {\n     fn x(self) -> int {\n         require_y(self)\n     }"}, {"sha": "bd57a3956c76dab9c80ebe33f0a3891b7255121c", "filename": "src/test/run-pass/issue-7320.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fissue-7320.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fissue-7320.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7320.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-trait Foo {\n+trait Foo : Sized {\n     fn foo(self: Box<Self>) { bar(self as Box<Foo>); }\n }\n "}, {"sha": "3238c24163e17578ae572e570ae4ad02a3e779b6", "filename": "src/test/run-pass/issue-8171-default-method-self-inherit-builtin-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -16,7 +16,7 @@\n \n fn require_send<T: Send>(_: T){}\n \n-trait TragicallySelfIsNotSend: Send {\n+trait TragicallySelfIsNotSend: Send + Sized {\n     fn x(self) {\n         require_send(self);\n     }"}, {"sha": "29d100beb064f7c2161b9f69f59c2a044fb6e3b2", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -16,7 +16,7 @@ struct Foo;\n \n impl Copy for Foo {}\n \n-trait Bar {\n+trait Bar : Sized {\n     fn foo1(&self);\n     fn foo2(self);\n     fn foo3(self: Box<Self>);"}, {"sha": "bced8012b683245de468dd792897230d304dffa8", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "patch": "@@ -13,7 +13,7 @@ struct X {\n     a: int\n }\n \n-trait Changer {\n+trait Changer : Sized {\n     fn change(mut self) -> Self {\n         self.set_to(55);\n         self"}]}