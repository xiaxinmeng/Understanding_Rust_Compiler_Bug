{"sha": "09a5d319ab8fbfd43530289bfff3899f9035e37f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YTVkMzE5YWI4ZmJmZDQzNTMwMjg5YmZmZjM4OTlmOTAzNWUzN2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-11T19:57:05Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:26Z"}, "message": "Remove support for `gen arg`", "tree": {"sha": "663406df0155f3a95cbdc573aefb7b7cc7b5c5e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/663406df0155f3a95cbdc573aefb7b7cc7b5c5e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09a5d319ab8fbfd43530289bfff3899f9035e37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09a5d319ab8fbfd43530289bfff3899f9035e37f", "html_url": "https://github.com/rust-lang/rust/commit/09a5d319ab8fbfd43530289bfff3899f9035e37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09a5d319ab8fbfd43530289bfff3899f9035e37f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93172045c817ffa998d5e28a0899f33edf889f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/93172045c817ffa998d5e28a0899f33edf889f62", "html_url": "https://github.com/rust-lang/rust/commit/93172045c817ffa998d5e28a0899f33edf889f62"}], "stats": {"total": 614, "additions": 106, "deletions": 508}, "files": [{"sha": "a8d449382eec41aec3c71f261e563b8609084fdd", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -36,11 +36,11 @@ fn main() {\n         return \"foo\"\n     };\n \n-    match generator.resume(()) {\n+    match generator.resume() {\n         State::Yielded(1) => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n-    match generator.resume(()) {\n+    match generator.resume() {\n         State::Complete(\"foo\") => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n@@ -69,9 +69,9 @@ fn main() {\n     };\n \n     println!(\"1\");\n-    generator.resume(());\n+    generator.resume();\n     println!(\"3\");\n-    generator.resume(());\n+    generator.resume();\n     println!(\"5\");\n }\n ```\n@@ -175,8 +175,8 @@ fn main() {\n         return ret\n     };\n \n-    generator.resume(());\n-    generator.resume(());\n+    generator.resume();\n+    generator.resume();\n }\n ```\n \n@@ -200,7 +200,7 @@ fn main() {\n             type Yield = i32;\n             type Return = &'static str;\n \n-            fn resume(&mut self, arg: ()) -> State<i32, &'static str> {\n+            fn resume(&mut self) -> State<i32, &'static str> {\n                 use std::mem;\n                 match mem::replace(self, __Generator::Done) {\n                     __Generator::Start(s) => {\n@@ -223,8 +223,8 @@ fn main() {\n         __Generator::Start(ret)\n     };\n \n-    generator.resume(());\n-    generator.resume(());\n+    generator.resume();\n+    generator.resume();\n }\n ```\n "}, {"sha": "f9eeb74ea00353cc8089593a1aa0e7b05cd0d9da", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -786,12 +786,12 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<T, U> Generator<U> for Box<T>\n-    where T: Generator<U> + ?Sized\n+impl<T> Generator for Box<T>\n+    where T: Generator + ?Sized\n {\n     type Yield = T::Yield;\n     type Return = T::Return;\n-    fn resume(&mut self, arg: U) -> State<Self::Yield, Self::Return> {\n-        (**self).resume(arg)\n+    fn resume(&mut self) -> State<Self::Yield, Self::Return> {\n+        (**self).resume()\n     }\n }"}, {"sha": "44b9835daf5f25cac0846b7e7f90523cb50e848e", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -56,11 +56,11 @@ pub enum State<Y, R> {\n ///         return \"foo\"\n ///     };\n ///\n-///     match generator.resume(()) {\n+///     match generator.resume() {\n ///         State::Yielded(1) => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n-///     match generator.resume(()) {\n+///     match generator.resume() {\n ///         State::Complete(\"foo\") => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n@@ -73,7 +73,7 @@ pub enum State<Y, R> {\n #[cfg_attr(not(stage0), lang = \"generator\")]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n #[fundamental]\n-pub trait Generator<Arg = ()> {\n+pub trait Generator {\n     /// The type of value this generator yields.\n     ///\n     /// This associated type corresponds to the `yield` expression and the\n@@ -116,16 +116,16 @@ pub trait Generator<Arg = ()> {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    fn resume(&mut self, arg: Arg) -> State<Self::Yield, Self::Return>;\n+    fn resume(&mut self) -> State<Self::Yield, Self::Return>;\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<'a, T, U> Generator<U> for &'a mut T\n-    where T: Generator<U> + ?Sized\n+impl<'a, T> Generator for &'a mut T\n+    where T: Generator + ?Sized\n {\n     type Yield = T::Yield;\n     type Return = T::Return;\n-    fn resume(&mut self, arg: U) -> State<Self::Yield, Self::Return> {\n-        (**self).resume(arg)\n+    fn resume(&mut self) -> State<Self::Yield, Self::Return> {\n+        (**self).resume()\n     }\n }"}, {"sha": "e7e2c84fc4efa3c99ffb85e50cc5a4674e8dbcb5", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -402,7 +402,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n             hir::ExprClosure(..) |\n             hir::ExprLit(..) |\n-            hir::ExprImplArg(_) |\n             hir::ExprPath(_) => {\n                 self.straightline(expr, pred, None::<hir::Expr>.iter())\n             }"}, {"sha": "43496540c1177f8f8f76b3c8c4cd77a058b51e1c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -399,9 +399,6 @@ pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body) {\n         visitor.visit_id(argument.id);\n         visitor.visit_pat(&argument.pat);\n     }\n-    if let Some(ref impl_arg) = body.impl_arg {\n-        visitor.visit_id(impl_arg.id);\n-    }\n     visitor.visit_expr(&body.value);\n }\n \n@@ -1048,9 +1045,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprYield(ref subexpression) => {\n             visitor.visit_expr(subexpression);\n         }\n-        ExprImplArg(id) => {\n-            visitor.visit_id(id);\n-        },\n     }\n }\n "}, {"sha": "32fa343e911ff134b254c60c3acf586159b0a49c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -92,7 +92,7 @@ pub struct LoweringContext<'a> {\n     trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n     trait_default_impl: BTreeMap<DefId, NodeId>,\n \n-    impl_arg: Option<NodeId>,\n+    is_generator: hir::IsGenerator,\n \n     catch_scopes: Vec<NodeId>,\n     loop_scopes: Vec<NodeId>,\n@@ -139,14 +139,14 @@ pub fn lower_crate(sess: &Session,\n         trait_impls: BTreeMap::new(),\n         trait_default_impl: BTreeMap::new(),\n         exported_macros: Vec::new(),\n-        impl_arg: None,\n         catch_scopes: Vec::new(),\n         loop_scopes: Vec::new(),\n         is_in_loop_condition: false,\n         type_def_lifetime_params: DefIdMap(),\n         current_hir_id_owner: vec![(CRATE_DEF_INDEX, 0)],\n         item_local_id_counters: NodeMap(),\n         node_id_to_hir_id: IndexVec::new(),\n+        is_generator: hir::IsGenerator::No,\n     }.lower_crate(krate)\n }\n \n@@ -365,24 +365,13 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn impl_arg_id(&mut self) -> NodeId {\n-        if self.impl_arg.is_none() {\n-            self.impl_arg = Some(self.next_id());\n-        }\n-        self.impl_arg.unwrap()\n-    }\n-\n     fn record_body(&mut self, value: hir::Expr, decl: Option<&FnDecl>)\n                    -> hir::BodyId {\n-        let span = value.span;\n         let body = hir::Body {\n             arguments: decl.map_or(hir_vec![], |decl| {\n                 decl.inputs.iter().map(|x| self.lower_arg(x)).collect()\n             }),\n-            impl_arg: self.impl_arg.map(|id| hir::ImplArg {\n-                id,\n-                span,\n-            }),\n+            is_generator: self.is_generator == hir::IsGenerator::Yes,\n             value,\n         };\n         let id = body.id();\n@@ -443,12 +432,11 @@ impl<'a> LoweringContext<'a> {\n     fn lower_body<F>(&mut self, decl: Option<&FnDecl>, f: F) -> hir::BodyId\n         where F: FnOnce(&mut LoweringContext) -> hir::Expr\n     {\n-        let old_impl_arg = self.impl_arg;\n-        self.impl_arg = None;\n+        let prev = mem::replace(&mut self.is_generator, hir::IsGenerator::No);\n         let result = f(self);\n         let r = self.record_body(result, decl);\n-        self.impl_arg = old_impl_arg;\n-        r\n+        self.is_generator = prev;\n+        return r\n     }\n \n     fn with_loop_scope<T, F>(&mut self, loop_id: NodeId, f: F) -> T\n@@ -1952,13 +1940,13 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Closure(capture_clause, ref decl, ref body, fn_decl_span) => {\n                 self.with_new_scopes(|this| {\n                     this.with_parent_def(e.id, |this| {\n-                        let mut gen = None;\n+                        let mut gen = hir::IsGenerator::No;\n                         let body_id = this.lower_body(Some(decl), |this| {\n                             let e = this.lower_expr(body);\n-                            gen = this.impl_arg.map(|_| hir::GeneratorClause::Movable);\n+                            gen = this.is_generator;\n                             e\n                         });\n-                        if gen.is_some() && !decl.inputs.is_empty() {\n+                        if gen == hir::IsGenerator::Yes && !decl.inputs.is_empty() {\n                             this.sess.span_fatal(\n                                     fn_decl_span,\n                                     &format!(\"generators cannot have explicit arguments\"));\n@@ -2104,17 +2092,13 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             ExprKind::Yield(ref opt_expr) => {\n-                self.impl_arg_id();\n+                self.is_generator = hir::IsGenerator::Yes;\n                 let expr = opt_expr.as_ref().map(|x| self.lower_expr(x)).unwrap_or_else(|| {\n                     self.expr(e.span, hir::ExprTup(hir_vec![]), ThinVec::new())\n                 });\n                 hir::ExprYield(P(expr))\n             }\n \n-            ExprKind::ImplArg => {\n-                hir::ExprImplArg(self.impl_arg_id())\n-            }\n-\n             // Desugar ExprIfLet\n             // From: `if let <pat> = <sub_expr> <body> [<else_opt>]`\n             ExprKind::IfLet(ref pat, ref sub_expr, ref body, ref else_opt) => {"}, {"sha": "d3ae3e0e8e8ac4a027e11739a9ce51ac4d32268c", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -182,13 +182,6 @@ impl<'hir> Visitor<'hir> for NodeCollector<'hir> {\n         });\n     }\n \n-    fn visit_body(&mut self, b: &'hir Body) {\n-        if let Some(ref impl_arg) = b.impl_arg {\n-            self.insert(impl_arg.id, NodeImplArg(impl_arg));\n-        }\n-        intravisit::walk_body(self, b);\n-    }\n-\n     fn visit_fn(&mut self, fk: intravisit::FnKind<'hir>, fd: &'hir FnDecl,\n                 b: BodyId, s: Span, id: NodeId) {\n         assert_eq!(self.parent_node, id);"}, {"sha": "6bbff608be4264fc9698301c986c9a4f1711e490", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -55,7 +55,6 @@ pub enum Node<'hir> {\n     NodeTraitRef(&'hir TraitRef),\n     NodeLocal(&'hir Pat),\n     NodePat(&'hir Pat),\n-    NodeImplArg(&'hir ImplArg),\n     NodeBlock(&'hir Block),\n \n     /// NodeStructCtor represents a tuple struct.\n@@ -85,7 +84,6 @@ enum MapEntry<'hir> {\n     EntryTy(NodeId, &'hir Ty),\n     EntryTraitRef(NodeId, &'hir TraitRef),\n     EntryLocal(NodeId, &'hir Pat),\n-    EntryImplArg(NodeId, &'hir ImplArg),\n     EntryPat(NodeId, &'hir Pat),\n     EntryBlock(NodeId, &'hir Block),\n     EntryStructCtor(NodeId, &'hir VariantData),\n@@ -117,7 +115,6 @@ impl<'hir> MapEntry<'hir> {\n             NodeTy(n) => EntryTy(p, n),\n             NodeTraitRef(n) => EntryTraitRef(p, n),\n             NodeLocal(n) => EntryLocal(p, n),\n-            NodeImplArg(n) => EntryImplArg(p, n),\n             NodePat(n) => EntryPat(p, n),\n             NodeBlock(n) => EntryBlock(p, n),\n             NodeStructCtor(n) => EntryStructCtor(p, n),\n@@ -139,7 +136,6 @@ impl<'hir> MapEntry<'hir> {\n             EntryStmt(id, _) => id,\n             EntryTy(id, _) => id,\n             EntryTraitRef(id, _) => id,\n-            EntryImplArg(id, _) => id,\n             EntryLocal(id, _) => id,\n             EntryPat(id, _) => id,\n             EntryBlock(id, _) => id,\n@@ -166,7 +162,6 @@ impl<'hir> MapEntry<'hir> {\n             EntryTy(_, n) => NodeTy(n),\n             EntryTraitRef(_, n) => NodeTraitRef(n),\n             EntryLocal(_, n) => NodeLocal(n),\n-            EntryImplArg(_, n) => NodeImplArg(n),\n             EntryPat(_, n) => NodePat(n),\n             EntryBlock(_, n) => NodeBlock(n),\n             EntryStructCtor(_, n) => NodeStructCtor(n),\n@@ -327,7 +322,6 @@ impl<'hir> Map<'hir> {\n                 EntryTy(p, _) |\n                 EntryTraitRef(p, _) |\n                 EntryLocal(p, _) |\n-                EntryImplArg(p, _) |\n                 EntryPat(p, _) |\n                 EntryBlock(p, _) |\n                 EntryStructCtor(p, _) |\n@@ -903,7 +897,6 @@ impl<'hir> Map<'hir> {\n             Some(EntryTy(_, ty)) => ty.span,\n             Some(EntryTraitRef(_, tr)) => tr.path.span,\n             Some(EntryLocal(_, pat)) => pat.span,\n-            Some(EntryImplArg(_, impl_arg)) => impl_arg.span,\n             Some(EntryPat(_, pat)) => pat.span,\n             Some(EntryBlock(_, block)) => block.span,\n             Some(EntryStructCtor(_, _)) => self.expect_item(self.get_parent(id)).span,\n@@ -1113,7 +1106,6 @@ impl<'a> print::State<'a> {\n             }\n             NodeLifetime(a)    => self.print_lifetime(&a),\n             NodeVisibility(a)  => self.print_visibility(&a),\n-            NodeImplArg(_)     => bug!(\"cannot print ImplArg\"),\n             NodeTyParam(_)     => bug!(\"cannot print TyParam\"),\n             NodeField(_)       => bug!(\"cannot print StructField\"),\n             // these cases do not carry enough information in the\n@@ -1215,9 +1207,6 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeLocal(_)) => {\n             format!(\"local {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n-        Some(NodeImplArg(_)) => {\n-            format!(\"impl_arg {}{}\", map.node_to_pretty_string(id), id_str)\n-        }\n         Some(NodePat(_)) => {\n             format!(\"pat {}{}\", map.node_to_pretty_string(id), id_str)\n         }"}, {"sha": "8fb7ca643a7c9224d4523f1de6cc7aa7facf6e75", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -925,13 +925,6 @@ pub enum UnsafeSource {\n     UserProvided,\n }\n \n-/// represents an implicit argument of a generator\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct ImplArg {\n-    pub id: NodeId,\n-    pub span: Span,\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct BodyId {\n     pub node_id: NodeId,\n@@ -942,7 +935,7 @@ pub struct BodyId {\n pub struct Body {\n     pub arguments: HirVec<Arg>,\n     pub value: Expr,\n-    pub impl_arg: Option<ImplArg>,\n+    pub is_generator: bool,\n }\n \n impl Body {\n@@ -951,10 +944,6 @@ impl Body {\n             node_id: self.value.id\n         }\n     }\n-\n-    pub fn is_generator(&self) -> bool {\n-        self.impl_arg.is_some()\n-    }\n }\n \n /// An expression\n@@ -1025,7 +1014,7 @@ pub enum Expr_ {\n     /// The final span is the span of the argument block `|...|`\n     ///\n     /// This may also be a generator literal, in that case there is an GeneratorClause.\n-    ExprClosure(CaptureClause, P<FnDecl>, BodyId, Span, Option<GeneratorClause>),\n+    ExprClosure(CaptureClause, P<FnDecl>, BodyId, Span, IsGenerator),\n     /// A block (`{ ... }`)\n     ExprBlock(P<Block>),\n \n@@ -1073,9 +1062,6 @@ pub enum Expr_ {\n \n     /// A suspension point for generators. This is `yield <expr>` in Rust.\n     ExprYield(P<Expr>),\n-\n-    /// The argument to a generator\n-    ExprImplArg(NodeId),\n }\n \n /// Optionally `Self`-qualified value/type path or associated extension.\n@@ -1205,9 +1191,9 @@ pub struct Destination {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum GeneratorClause {\n-    Immovable,\n-    Movable,\n+pub enum IsGenerator {\n+    Yes,\n+    No,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "f4d7b101e9cc4c180a4efaabdb4cc1525fde5c99", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -1463,12 +1463,8 @@ impl<'a> State<'a> {\n             }\n             hir::ExprYield(ref expr) => {\n                 self.s.word(\"yield\")?;\n-                self.s.space()?;\n                 self.print_expr(&expr)?;\n             }\n-            hir::ExprImplArg(_) => {\n-                self.s.word(\"gen arg\")?;\n-            }\n         }\n         self.ann.post(self, NodeExpr(expr))?;\n         self.end()"}, {"sha": "04e8cbeb7ff9fd1959be3b40db1b880af6148476", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -574,7 +574,6 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::E\n                 hir::ExprAgain(..)      |\n                 hir::ExprRet(..)        |\n                 hir::ExprYield(..)    |\n-                hir::ExprImplArg(..)    |\n                 hir::ExprInlineAsm(..)  |\n                 hir::ExprRepeat(..)     |\n                 hir::ExprTup(..)        => {\n@@ -654,8 +653,7 @@ impl_stable_hash_for!(enum hir::Expr_ {\n     ExprInlineAsm(asm, inputs, outputs),\n     ExprStruct(path, fields, base),\n     ExprRepeat(val, times),\n-    ExprYield(val),\n-    ExprImplArg(id)\n+    ExprYield(val)\n });\n \n impl_stable_hash_for!(enum hir::LocalSource {\n@@ -690,9 +688,9 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::M\n     }\n }\n \n-impl_stable_hash_for!(enum hir::GeneratorClause {\n-    Immovable,\n-    Movable\n+impl_stable_hash_for!(enum hir::IsGenerator {\n+    Yes,\n+    No\n });\n \n impl_stable_hash_for!(enum hir::CaptureClause {\n@@ -1031,15 +1029,10 @@ impl_stable_hash_for!(struct hir::Arg {\n     id\n });\n \n-impl_stable_hash_for!(struct hir::ImplArg {\n-    id,\n-    span\n-});\n-\n impl_stable_hash_for!(struct hir::Body {\n     arguments,\n     value,\n-    impl_arg\n+    is_generator\n });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::BodyId {"}, {"sha": "7042f3993e12df68aa916bc19439e8c16a6deeee", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -143,7 +143,6 @@ for ty::UpvarCapture<'tcx> {\n }\n \n impl_stable_hash_for!(struct ty::GenSig<'tcx> {\n-    impl_arg_ty,\n     yield_ty,\n     return_ty\n });"}, {"sha": "a684881c0912abbb7ee967433d60d15c5ab6ecbd", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -16,15 +16,13 @@ use ty::{self, Ty, TyInfer, TyVar};\n \n use syntax::ast::NodeId;\n use syntax_pos::Span;\n-use syntax_pos::DUMMY_SP;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     target_ty: &'a Ty<'tcx>,\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_local_pattern: Option<&'gcx Pat>,\n     found_arg_pattern: Option<&'gcx Pat>,\n-    found_impl_arg: bool,\n }\n \n impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -70,11 +68,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n                 self.found_arg_pattern = Some(&*argument.pat);\n             }\n         }\n-        if let Some(ref impl_arg) = body.impl_arg {\n-            if !self.found_impl_arg && self.node_matches_type(impl_arg.id) {\n-                self.found_impl_arg = true;\n-            }\n-        }\n         intravisit::walk_body(self, body);\n     }\n }\n@@ -108,7 +101,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             hir_map: &self.tcx.hir,\n             found_local_pattern: None,\n             found_arg_pattern: None,\n-            found_impl_arg: false,\n         };\n \n         if let Some(body_id) = body_id {\n@@ -145,11 +137,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        if local_visitor.found_impl_arg {\n-            labels.push((DUMMY_SP, format!(\"consider giving a type to the \\\n-                                            implicit generator argument\")));\n-        }\n-\n         let mut err = struct_span_err!(self.tcx.sess,\n                                        err_span,\n                                        E0282,"}, {"sha": "2d7ce4a82daeeb030385e712385fdef6a6ae3f35", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -992,25 +992,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.next_region_var(EarlyBoundRegion(span, def.name, def.issue_32330))\n     }\n \n-    pub fn type_var_for_impl_arg(&self,\n-                                span: Span,\n-                                def_id: DefId)\n-                            -> Ty<'tcx> {\n-        let default = Some(type_variable::Default {\n-            ty: self.tcx.mk_nil(),\n-            origin_span: span,\n-            def_id: def_id,\n-        });\n-\n-        let ty_var_id = self.type_variables\n-                            .borrow_mut()\n-                            .new_var(false,\n-                                     TypeVariableOrigin::TypeInference(span),\n-                                     default);\n-\n-        self.tcx.mk_var(ty_var_id)\n-    }\n-\n     /// Create a type inference variable for the given\n     /// type parameter definition. The substitutions are\n     /// for actual parameters that may be referred to by"}, {"sha": "899068a2b3b61968f37ff23e9b20a12322973419", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -528,8 +528,6 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             hir::ExprYield(ref value) => {\n                 self.consume_expr(&value);\n             }\n-\n-            hir::ExprImplArg(_) => { }\n         }\n     }\n "}, {"sha": "abb75c96c10a2d965bc78d59d1e45f1c0084fe5f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -249,7 +249,6 @@ struct LocalInfo {\n \n #[derive(Copy, Clone, Debug)]\n enum VarKind {\n-    ImplArg(NodeId),\n     Arg(NodeId, ast::Name),\n     Local(LocalInfo),\n     CleanExit\n@@ -305,7 +304,7 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n         self.num_vars += 1;\n \n         match vk {\n-            Local(LocalInfo { id: node_id, .. }) | Arg(node_id, _) | ImplArg(node_id) => {\n+            Local(LocalInfo { id: node_id, .. }) | Arg(node_id, _) => {\n                 self.variable_map.insert(node_id, v);\n             },\n             CleanExit => {}\n@@ -330,7 +329,6 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n             Local(LocalInfo { name, .. }) | Arg(_, name) => {\n                 name.to_string()\n             },\n-            ImplArg(_) => \"<impl-arg>\".to_string(),\n             CleanExit => \"<clean-exit>\".to_string()\n         }\n     }\n@@ -367,10 +365,6 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n         })\n     };\n \n-    if let Some(ref impl_arg) = body.impl_arg {\n-        fn_maps.add_variable(ImplArg(impl_arg.id));\n-    }\n-\n     // gather up the various local variables, significant expressions,\n     // and so forth:\n     intravisit::walk_fn(&mut fn_maps, fk, decl, body_id, sp, id);\n@@ -423,10 +417,6 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n         }\n         intravisit::walk_expr(ir, expr);\n       }\n-      hir::ExprImplArg(_) => {\n-          ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n-          intravisit::walk_expr(ir, expr);\n-      }\n       hir::ExprClosure(..) => {\n         // Interesting control flow (for loops can contain labeled\n         // breaks or continues)\n@@ -891,10 +881,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n         match expr.node {\n           // Interesting cases with control flow or which gen/kill\n-          hir::ExprImplArg(arg_id) => {\n-              self.access_var(expr.id, arg_id, succ, ACC_READ | ACC_USE, expr.span)\n-          }\n-\n           hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {\n               self.access_path(expr.id, path, succ, ACC_READ | ACC_USE)\n           }\n@@ -1226,9 +1212,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: u32)\n                     -> LiveNode {\n         match expr.node {\n-          hir::ExprImplArg(arg_id) => {\n-              self.access_var(expr.id, arg_id, succ, acc, expr.span)\n-          }\n           hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {\n               self.access_path(expr.id, path, succ, acc)\n           }\n@@ -1419,7 +1402,7 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprRet(..) |\n       hir::ExprBreak(..) | hir::ExprAgain(..) | hir::ExprLit(_) |\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |\n-      hir::ExprStruct(..) | hir::ExprRepeat(..) | hir::ExprImplArg(_) |\n+      hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprClosure(..) | hir::ExprPath(_) | hir::ExprYield(..) |\n       hir::ExprBox(..) | hir::ExprType(..) => {\n         intravisit::walk_expr(this, expr);\n@@ -1442,7 +1425,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     self.warn_about_dead_assign(expr.span, expr.id, ln, var);\n                 }\n             }\n-            hir::ExprImplArg(_) => bug!(),\n             _ => {\n                 // For other kinds of lvalues, no checks are required,\n                 // and any embedded expressions are actually rvalues"}, {"sha": "f06d4a3d9e3e7ed957d58ce1643a894611f5879c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -602,17 +602,6 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             self.cat_def(expr.id, expr.span, expr_ty, def)\n           }\n \n-          hir::ExprImplArg(id) => {\n-            Ok(Rc::new(cmt_ {\n-                id: expr.id,\n-                span: expr.span,\n-                cat: Categorization::Local(id),\n-                mutbl: MutabilityCategory::McDeclared,\n-                ty: expr_ty,\n-                note: NoteNone\n-            }))\n-          },\n-\n           hir::ExprType(ref e, _) => {\n             self.cat_expr(&e)\n           }"}, {"sha": "269522e826920a90269dbc4c809d60c81b34d279", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -1072,9 +1072,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n         for argument in &body.arguments {\n             self.visit_pat(&argument.pat);\n         }\n-        if let Some(ref impl_arg) = body.impl_arg {\n-            record_var_lifetime(self, impl_arg.id, impl_arg.span);\n-        }\n \n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;"}, {"sha": "a255221c87156ea90621bd2711cb36e47833aee6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -181,10 +181,6 @@ impl<'tcx> Mir<'tcx> {\n         }\n     }\n \n-    pub fn impl_arg_lvalue() -> Lvalue<'tcx> {\n-        Lvalue::Local(Local::new(1))\n-    }\n-\n     #[inline]\n     pub fn basic_blocks(&self) -> &IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         &self.basic_blocks"}, {"sha": "28abd1577dadea39ff7b126f582a3a0329a2a031", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -521,7 +521,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,\n-            substs: self.mk_substs_trait(self_ty, &[sig.skip_binder().impl_arg_ty]),\n+            substs: self.mk_substs_trait(self_ty, &[]),\n         };\n         ty::Binder((trait_ref, sig.skip_binder().yield_ty, sig.skip_binder().return_ty))\n     }"}, {"sha": "85218c6baa57798924a97357500528dbb5e97b0a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -1979,7 +1979,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     },\n                 }\n             },\n-            Some(hir_map::NodeImplArg(_)) => Symbol::intern(\"impl arg\").as_str(),\n             r => bug!(\"Variable id {} maps to {:?}, not local\", id, r),\n         }\n     }\n@@ -2000,7 +1999,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprUnary(hir::UnDeref, _) |\n             hir::ExprField(..) |\n             hir::ExprTupField(..) |\n-            hir::ExprImplArg(_) |\n             hir::ExprIndex(..) => {\n                 true\n             }"}, {"sha": "f93626b7cb18710ca4980dd69518900600886d61", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -304,10 +304,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&(self.impl_arg_ty, self.yield_ty, self.return_ty))\n-            .map(|(impl_arg_ty, yield_ty, return_ty)| {\n+        tcx.lift(&(self.yield_ty, self.return_ty))\n+            .map(|(yield_ty, return_ty)| {\n                 ty::GenSig {\n-                    impl_arg_ty,\n                     yield_ty,\n                     return_ty,\n                 }\n@@ -637,14 +636,12 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for ty::GenSig<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::GenSig {\n-            impl_arg_ty: self.impl_arg_ty.fold_with(folder),\n             yield_ty: self.yield_ty.fold_with(folder),\n             return_ty: self.return_ty.fold_with(folder),\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.impl_arg_ty.visit_with(visitor) ||\n         self.yield_ty.visit_with(visitor) ||\n         self.return_ty.visit_with(visitor)\n     }"}, {"sha": "9a180b3552da3bf869763c999b4a9e34f8dec6a0", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -648,7 +648,6 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct GenSig<'tcx> {\n-    pub impl_arg_ty: Ty<'tcx>,\n     pub yield_ty: Ty<'tcx>,\n     pub return_ty: Ty<'tcx>,\n }"}, {"sha": "21d6ebe5687028dd8a24f8452604d55d63aec1f7", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -133,22 +133,6 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n                bk={:?}, loan_cause={:?})\",\n                borrow_id, cmt, loan_region,\n                bk, loan_cause);\n-\n-         let borrows_impl_arg = match cmt.cat {\n-             Categorization::Local(id) => match self.bccx.tcx.hir.find(id) {\n-                 Some(hir::map::NodeImplArg(..)) => true,\n-                 _ => false,\n-             },\n-             _ => false,\n-         };\n-\n-         if borrows_impl_arg {\n-             span_err!(self.bccx.tcx.sess,\n-                borrow_span,\n-                E0623,\n-                \"cannot borrow the implicit argument of a generator\");\n-         }\n-\n         self.guarantee_valid(borrow_id,\n                              borrow_span,\n                              cmt,"}, {"sha": "38dcc731236911bc1b432dea44e3bd89699912f6", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -1191,5 +1191,4 @@ register_diagnostics! {\n     E0594, // cannot assign to {}\n     E0595, // closure cannot assign to {}\n     E0598, // lifetime of {} is too short to guarantee its contents can be...\n-    E0623, // borrow of the implicit argument of a generator\n }"}, {"sha": "72eeaca8b101f3fe92ac5cea2c3d9bf5b1f3bfe8", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -80,9 +80,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 success.and(slice.index(idx))\n             }\n             ExprKind::SelfRef => {\n-                block.and(Lvalue::Local(Local::new(this.arg_offset + 1)))\n-            }\n-            ExprKind::ImplArg => {\n                 block.and(Lvalue::Local(Local::new(1)))\n             }\n             ExprKind::VarRef { id } => {"}, {"sha": "c1209f4fbe25cb30d2faaf6459da9182ac8bc30f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -241,11 +241,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Yield { value } => {\n                 let value = unpack!(block = this.as_operand(block, scope, value));\n-                let impl_arg_ty = this.impl_arg_ty.unwrap();\n-                block = unpack!(this.build_drop(block,\n-                    expr_span,\n-                    Lvalue::Local(Local::new(1)),\n-                    impl_arg_ty));\n                 let resume = this.cfg.start_new_block();\n                 let cleanup = this.generator_drop_cleanup(expr_span);\n                 this.cfg.terminate(block, source_info, TerminatorKind::Yield {\n@@ -272,7 +267,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Continue { .. } |\n             ExprKind::Return { .. } |\n             ExprKind::InlineAsm { .. } |\n-            ExprKind::ImplArg |\n             ExprKind::StaticRef { .. } => {\n                 // these do not have corresponding `Rvalue` variants,\n                 // so make an operand and then return that"}, {"sha": "9be306d2848b3f4c37f86f47895a9a54ee42e418", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // anything because no values with a destructor can be created in\n         // a constant at this time, even if the type may need dropping.\n         if let Some(temp_lifetime) = temp_lifetime {\n-            this.schedule_drop(expr_span, temp_lifetime, &temp, expr_ty, false);\n+            this.schedule_drop(expr_span, temp_lifetime, &temp, expr_ty);\n         }\n \n         block.and(temp)"}, {"sha": "f05411aacab19801c427e9b2cd8d992240394054", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -50,7 +50,6 @@ impl Category {\n             ExprKind::Index { .. } |\n             ExprKind::SelfRef |\n             ExprKind::VarRef { .. } |\n-            ExprKind::ImplArg |\n             ExprKind::StaticRef { .. } =>\n                 Some(Category::Lvalue),\n "}, {"sha": "e8fb918f76c6fccea1cac00c7f8cf9f8316c0c2d", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -285,7 +285,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Deref { .. } |\n             ExprKind::Literal { .. } |\n             ExprKind::Yield { .. } |\n-            ExprKind::ImplArg |\n             ExprKind::Field { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     Category::Rvalue(RvalueFunc::Into) => false,"}, {"sha": "54f285480ab5371506e6fb1d3a7b78fb35f6a5a3", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let local_id = self.var_indices[&var];\n         let var_ty = self.local_decls[local_id].ty;\n         let extent = self.hir.region_maps.var_scope(var);\n-        self.schedule_drop(span, extent, &Lvalue::Local(local_id), var_ty, false);\n+        self.schedule_drop(span, extent, &Lvalue::Local(local_id), var_ty);\n     }\n \n     pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, mut f: &mut F)"}, {"sha": "d8d6c398b51959e553ce0723352701ad3c457c2e", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -119,14 +119,14 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n \n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n \n-            let (yield_ty, impl_arg_ty, return_ty) = if body.is_generator() {\n+            let (yield_ty, return_ty) = if body.is_generator {\n                 let gen_sig = cx.tables().generator_sigs[&id].clone().unwrap();\n-                (Some(gen_sig.yield_ty), Some(gen_sig.impl_arg_ty), gen_sig.return_ty)\n+                (Some(gen_sig.yield_ty), gen_sig.return_ty)\n             } else {\n-                (None, None, fn_sig.output())\n+                (None, fn_sig.output())\n             };\n \n-            build::construct_fn(cx, id, arguments, abi, return_ty, yield_ty, impl_arg_ty, body)\n+            build::construct_fn(cx, id, arguments, abi, return_ty, yield_ty, body)\n         } else {\n             build::construct_const(cx, body_id)\n         };\n@@ -244,9 +244,6 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     fn_span: Span,\n     arg_count: usize,\n-    arg_offset: usize,\n-\n-    impl_arg_ty: Option<Ty<'tcx>>,\n \n     /// the current set of scopes, updated as we traverse;\n     /// see the `scope` module for more details\n@@ -343,7 +340,6 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    abi: Abi,\n                                    return_ty: Ty<'gcx>,\n                                    yield_ty: Option<Ty<'gcx>>,\n-                                   impl_arg_ty: Option<Ty<'gcx>>,\n                                    body: &'gcx hir::Body)\n                                    -> Mir<'tcx>\n     where A: Iterator<Item=(Ty<'gcx>, Option<&'gcx hir::Pat>)>\n@@ -352,12 +348,9 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n \n     let tcx = hir.tcx();\n     let span = tcx.hir.span(fn_id);\n-    let arg_offset = if impl_arg_ty.is_some() { 1 } else { 0 };\n     let mut builder = Builder::new(hir.clone(),\n         span,\n-        arguments.len() + arg_offset,\n-        arg_offset,\n-        impl_arg_ty,\n+        arguments.len(),\n         return_ty);\n \n     let call_site_extent = CodeExtent::CallSiteScope(body.id());\n@@ -366,7 +359,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let source_info = builder.source_info(span);\n     unpack!(block = builder.in_scope((call_site_extent, source_info), block, |builder| {\n         unpack!(block = builder.in_scope((arg_extent, source_info), block, |builder| {\n-            builder.args_and_body(block, &arguments, arg_extent, impl_arg_ty, &body.value)\n+            builder.args_and_body(block, &arguments, arg_extent, &body.value)\n         }));\n         // Attribute epilogue to function's closing brace\n         let fn_end = Span { lo: span.hi, ..span };\n@@ -424,7 +417,7 @@ fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir.body_owner(body_id);\n     let span = tcx.hir.span(owner_id);\n-    let mut builder = Builder::new(hir.clone(), span, 0, 0, None, ty);\n+    let mut builder = Builder::new(hir.clone(), span, 0, ty);\n \n     let mut block = START_BLOCK;\n     let expr = builder.hir.mirror(ast_expr);\n@@ -444,7 +437,7 @@ fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n                                        -> Mir<'tcx> {\n     let span = hir.tcx().hir.span(hir.tcx().hir.body_owner(body_id));\n     let ty = hir.tcx().types.err;\n-    let mut builder = Builder::new(hir, span, 0, 0, None, ty);\n+    let mut builder = Builder::new(hir, span, 0, ty);\n     let source_info = builder.source_info(span);\n     builder.cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n     builder.finish(vec![], ty, None)\n@@ -454,17 +447,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn new(hir: Cx<'a, 'gcx, 'tcx>,\n            span: Span,\n            arg_count: usize,\n-           arg_offset: usize,\n-           impl_arg_ty: Option<Ty<'tcx>>,\n            return_ty: Ty<'tcx>)\n            -> Builder<'a, 'gcx, 'tcx> {\n         let mut builder = Builder {\n             hir: hir,\n             cfg: CFG { basic_blocks: IndexVec::new() },\n             fn_span: span,\n             arg_count: arg_count,\n-            arg_offset,\n-            impl_arg_ty,\n             scopes: vec![],\n             visibility_scopes: IndexVec::new(),\n             visibility_scope: ARGUMENT_VISIBILITY_SCOPE,\n@@ -511,26 +500,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                      mut block: BasicBlock,\n                      arguments: &[(Ty<'gcx>, Option<&'gcx hir::Pat>)],\n                      argument_extent: CodeExtent,\n-                     impl_arg_ty: Option<Ty<'gcx>>,\n                      ast_body: &'gcx hir::Expr)\n                      -> BlockAnd<()>\n     {\n-        if let Some(impl_arg_ty) = impl_arg_ty {\n-            self.local_decls.push(LocalDecl {\n-                mutability: Mutability::Mut,\n-                ty: impl_arg_ty,\n-                is_user_variable: false,\n-                source_info:  SourceInfo {\n-                    scope: ARGUMENT_VISIBILITY_SCOPE,\n-                    span: self.fn_span,\n-                },\n-                name: None,\n-            });\n-            let lvalue = Lvalue::Local(Local::new(1));\n-            // Make sure we drop the argument on completion\n-            self.schedule_drop(ast_body.span, argument_extent, &lvalue, impl_arg_ty, true);\n-        };\n-\n         // Allocate locals for the function arguments\n         for &(ty, pattern) in arguments.iter() {\n             // If this is a simple binding pattern, give the local a nice name for debuginfo.\n@@ -557,7 +529,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // Bind the argument patterns\n         for (index, &(ty, pattern)) in arguments.iter().enumerate() {\n             // Function arguments always get the first Local indices after the return pointer\n-            let lvalue = Lvalue::Local(Local::new(self.arg_offset + index + 1));\n+            let lvalue = Lvalue::Local(Local::new(index + 1));\n \n             if let Some(pattern) = pattern {\n                 let pattern = Pattern::from_hir(self.hir.tcx().global_tcx(),\n@@ -570,7 +542,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             // Make sure we drop (parts of) the argument even when not matched on.\n             self.schedule_drop(pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n-                               argument_extent, &lvalue, ty, false);\n+                               argument_extent, &lvalue, ty);\n \n         }\n "}, {"sha": "32b429be4a677924affbfe8220d4f4b3da48e715", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -124,9 +124,6 @@ pub struct Scope<'tcx> {\n     /// end of the vector (top of the stack) first.\n     drops: Vec<DropData<'tcx>>,\n \n-    /// Is the first drop the drop of the implicit argument?\n-    impl_arg_drop: bool,\n-\n     /// A scope may only have one associated free, because:\n     ///\n     /// 1. We require a `free` to only be scheduled in the scope of\n@@ -254,28 +251,12 @@ impl<'tcx> Scope<'tcx> {\n         }\n     }\n \n-    fn drops(&self, generator_drop: bool) -> &[DropData<'tcx>] {\n-        if self.impl_arg_drop && generator_drop {\n-            &self.drops[1..]\n-        } else {\n-            &self.drops[..]\n-        }\n-    }\n-\n-    fn drops_mut(&mut self, generator_drop: bool) -> &mut [DropData<'tcx>] {\n-        if self.impl_arg_drop && generator_drop {\n-            &mut self.drops[1..]\n-        } else {\n-            &mut self.drops[..]\n-        }\n-    }\n-\n     /// Returns the cached entrypoint for diverging exit from this scope.\n     ///\n     /// Precondition: the caches must be fully filled (i.e. diverge_cleanup is called) in order for\n     /// this method to work correctly.\n     fn cached_block(&self, generator_drop: bool) -> Option<BasicBlock> {\n-        let mut drops = self.drops(generator_drop).iter().rev().filter_map(|data| {\n+        let mut drops = self.drops.iter().rev().filter_map(|data| {\n             match data.kind {\n                 DropKind::Value { cached_block } => {\n                     Some(cached_block.get(generator_drop))\n@@ -375,7 +356,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             extent: extent,\n             needs_cleanup: false,\n             drops: vec![],\n-            impl_arg_drop: false,\n             free: None,\n             cached_generator_drop: None,\n             cached_exits: FxHashMap()\n@@ -617,8 +597,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                          span: Span,\n                          extent: CodeExtent,\n                          lvalue: &Lvalue<'tcx>,\n-                         lvalue_ty: Ty<'tcx>,\n-                         impl_arg: bool) {\n+                         lvalue_ty: Ty<'tcx>) {\n         let needs_drop = self.hir.needs_drop(lvalue_ty);\n         let drop_kind = if needs_drop {\n             DropKind::Value { cached_block: CachedBlock::default() }\n@@ -688,10 +667,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let extent_span = extent.span(&tcx.hir).unwrap();\n                 // Attribute scope exit drops to scope's closing brace\n                 let scope_end = Span { lo: extent_span.hi, .. extent_span};\n-                if impl_arg {\n-                    assert!(scope.drops.is_empty());\n-                    scope.impl_arg_drop = true;\n-                }\n                 scope.drops.push(DropData {\n                     span: scope_end,\n                     location: lvalue.clone(),\n@@ -865,7 +840,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                            generator_drop: bool)\n                            -> BlockAnd<()> {\n \n-    let mut iter = scope.drops(generator_drop).iter().rev().peekable();\n+    let mut iter = scope.drops.iter().rev().peekable();\n     while let Some(drop_data) = iter.next() {\n         let source_info = scope.source_info(drop_data.span);\n         if let DropKind::Value { .. } = drop_data.kind {\n@@ -958,7 +933,7 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // Next, build up the drops. Here we iterate the vector in\n     // *forward* order, so that we generate drops[0] first (right to\n     // left in diagram above).\n-    for (j, drop_data) in scope.drops_mut(generator_drop).iter_mut().enumerate() {\n+    for (j, drop_data) in scope.drops.iter_mut().enumerate() {\n         debug!(\"build_diverge_scope drop_data[{}]: {:?}\", j, drop_data);\n         // Only full value drops are emitted in the diverging path,\n         // not StorageDead."}, {"sha": "daafbecc5dfa3ba0d96642d125ac6ba5bd081b1f", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -299,11 +299,6 @@ pub(crate) fn drop_flag_effects_for_location<'a, 'tcx, F>(\n                                           move_data.rev_lookup.find(location),\n                                           |moi| callback(moi, DropFlagState::Present))\n                 }\n-                mir::TerminatorKind::Yield { .. } => {\n-                    on_lookup_result_bits(tcx, mir, move_data,\n-                                          move_data.rev_lookup.find(&Mir::impl_arg_lvalue()),\n-                                          |moi| callback(moi, DropFlagState::Present))\n-                }\n                 _ => {\n                     // other terminators do not contain move-ins\n                 }"}, {"sha": "4d4161d4c809c3c87f1ff973f40dc0293d3278dc", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -475,7 +475,6 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             }\n \n             TerminatorKind::Yield { ref value,  .. } => {\n-                self.create_move_path(&Mir::impl_arg_lvalue());\n                 self.gather_operand(loc, value);\n             }\n "}, {"sha": "338c46a4c93b7891ecb8093a54736520f551211e", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -447,7 +447,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 closure_id: def_id,\n                 substs: substs,\n                 upvars: upvars,\n-                generator: gen.is_some(),\n+                generator: gen == hir::IsGenerator::Yes,\n             }\n         }\n \n@@ -567,7 +567,6 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprArray(ref fields) => ExprKind::Array { fields: fields.to_ref() },\n         hir::ExprTup(ref fields) => ExprKind::Tuple { fields: fields.to_ref() },\n \n-        hir::ExprImplArg(_) => ExprKind::ImplArg,\n         hir::ExprYield(ref v) => ExprKind::Yield { value: v.to_ref() },\n     };\n "}, {"sha": "ff239a2adddd348dddadb9d9111988b56cd6fbe4", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -249,7 +249,6 @@ pub enum ExprKind<'tcx> {\n         outputs: Vec<ExprRef<'tcx>>,\n         inputs: Vec<ExprRef<'tcx>>\n     },\n-    ImplArg,\n     Yield {\n         value: ExprRef<'tcx>,\n     },"}, {"sha": "f5a2b1b974c3d8238490bf4da21ba25505263f14", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -96,11 +96,9 @@ fn find_dead_unwinds<'a, 'tcx>(\n                            MaybeInitializedLvals::new(tcx, mir, &env),\n                            |bd, p| &bd.move_data().move_paths[p]);\n     for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n-        let impl_arg = Mir::impl_arg_lvalue();\n         let location = match bb_data.terminator().kind {\n             TerminatorKind::Drop { ref location, unwind: Some(_), .. } |\n             TerminatorKind::DropAndReplace { ref location, unwind: Some(_), .. } => location,\n-            TerminatorKind::Yield { .. } => &impl_arg,\n             _ => continue,\n         };\n \n@@ -344,11 +342,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     {\n         for (bb, data) in self.mir.basic_blocks().iter_enumerated() {\n             let terminator = data.terminator();\n-            let impl_arg = Mir::impl_arg_lvalue();\n             let location = match terminator.kind {\n                 TerminatorKind::Drop { ref location, .. } |\n                 TerminatorKind::DropAndReplace { ref location, .. } => location,\n-                TerminatorKind::Yield { .. } => &impl_arg,\n                 _ => continue\n             };\n "}, {"sha": "603e9d1849f8ada68cd15eb4808707e7a0f35529", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 49, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -47,35 +47,6 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n     }\n }\n \n-struct SwapLocalVisitor {\n-    a: Local,\n-    b: Local,\n-}\n-\n-impl<'tcx> MutVisitor<'tcx> for SwapLocalVisitor {\n-    fn visit_local(&mut self,\n-                        local: &mut Local) {\n-        if *local == self.a {\n-            *local = self.b;\n-        } else if *local == self.b {\n-            *local = self.a;\n-        }\n-    }\n-}\n-\n-struct InsertLocalVisitor {\n-    local: Local,\n-}\n-\n-impl<'tcx> MutVisitor<'tcx> for InsertLocalVisitor {\n-    fn visit_local(&mut self,\n-                        local: &mut Local) {\n-        if local.index() >= self.local.index() {\n-            *local = Local::new(local.index() + 1);\n-        }\n-    }\n-}\n-\n struct DerefArgVisitor;\n \n impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n@@ -251,17 +222,7 @@ fn ensure_generator_state_argument<'a, 'tcx>(\n                 def_id: DefId,\n                 mir: &mut Mir<'tcx>) -> (Ty<'tcx>, GeneratorInterior<'tcx>) {\n     let interior = *tcx.typeck_tables_of(def_id).generator_interiors.get(&node_id).unwrap();\n-\n-    let gen_ty = mir.local_decls.raw[2].ty;\n-\n-    // Swap generator and implicit argument\n-    SwapLocalVisitor {\n-        a: Local::new(1),\n-        b: Local::new(2),\n-    }.visit_mir(mir);\n-\n-    mir.local_decls.raw[..].swap(1, 2);\n-\n+    let gen_ty = mir.local_decls.raw[1].ty;\n     (gen_ty, interior)\n }\n \n@@ -330,10 +291,6 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    // The implicit argument is defined after each suspend point so it can never\n-    // be live in a suspend point.\n-    set.remove(&Local::new(2));\n-\n     // The generator argument is ignored\n     set.remove(&Local::new(1));\n \n@@ -513,10 +470,6 @@ fn generate_drop<'a, 'tcx>(\n         }\n     }\n \n-    // Remove the implicit argument\n-    mir.arg_count = 1;\n-    mir.local_decls.raw.pop();\n-\n     // Replace the return variable\n     let source_info = SourceInfo {\n         span: mir.span,\n@@ -788,7 +741,7 @@ impl MirPass for StateTransform {\n \n         mir.return_ty = ret_ty;\n         mir.yield_ty = None;\n-        mir.arg_count = 2;\n+        mir.arg_count = 1;\n         mir.spread_arg = None;\n         mir.generator_layout = Some(layout);\n "}, {"sha": "9bc198c59a9fe4b4c1f49cc81153ec90d1092cf2", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -437,7 +437,6 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n \n         // Generator expressions\n         hir::ExprYield(_) |\n-        hir::ExprImplArg(_) |\n \n         // Expressions with side-effects.\n         hir::ExprAssign(..) |"}, {"sha": "7bbaf50d21b24dfd166729b7e4736bd4ee57cb02", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -542,7 +542,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     Kind::from(sig.return_ty)].iter());\n                 let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n-                tcx.mk_fn_sig(iter::once(env_ty).chain(iter::once(sig.impl_arg_ty)),\n+                tcx.mk_fn_sig(iter::once(env_ty),\n                     ret_ty,\n                     false,\n                     hir::Unsafety::Normal,"}, {"sha": "6125300fd2e6c09ca9e1ada1ff8dc8e8828cca16", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -507,7 +507,6 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     ret_coercion: Option<RefCell<DynamicCoerceMany<'gcx, 'tcx>>>,\n \n     yield_ty: Option<Ty<'tcx>>,\n-    impl_arg_ty: Option<Ty<'tcx>>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -1012,29 +1011,10 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         fn_sig.abi\n     );\n \n-    let def_id = fcx.tcx.hir.local_def_id(fn_id);\n     let span = body.value.span;\n \n-    if let Some(ref impl_arg) = body.impl_arg {\n-        if can_be_generator {\n-            let impl_arg_ty = fcx.infcx.type_var_for_impl_arg(span, def_id);\n-\n-            // Require impl_arg: 'static\n-            let cause = traits::ObligationCause::new(span,\n-                                                     body.value.id,\n-                                                     traits::MiscObligation);\n-            fcx.fulfillment_cx.borrow_mut()\n-                            .register_region_obligation(impl_arg_ty,\n-                                                        fcx.tcx.types.re_static,\n-                                                        cause);\n-\n-            fcx.impl_arg_ty = Some(impl_arg_ty);\n-\n-            // Write the type to the impl arg id\n-            fcx.write_ty(impl_arg.id, impl_arg_ty);\n-\n-            fcx.yield_ty = Some(fcx.next_ty_var(TypeVariableOrigin::TypeInference(span)));\n-        }\n+    if body.is_generator && can_be_generator {\n+        fcx.yield_ty = Some(fcx.next_ty_var(TypeVariableOrigin::TypeInference(span)));\n     }\n \n     GatherLocalsVisitor { fcx: &fcx, }.visit_body(body);\n@@ -1055,9 +1035,8 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         fcx.write_ty(arg.id, arg_ty);\n     }\n \n-    let gen_ty = if can_be_generator && body.is_generator() {\n+    let gen_ty = if can_be_generator && body.is_generator {\n         let gen_sig = ty::GenSig {\n-            impl_arg_ty: fcx.impl_arg_ty.unwrap(),\n             yield_ty: fcx.yield_ty.unwrap(),\n             return_ty: ret_ty,\n         };\n@@ -1747,7 +1726,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n             yield_ty: None,\n-            impl_arg_ty: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal,\n                                                      ast::CRATE_NODE_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n@@ -2573,7 +2551,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 let is_closure = match arg.node {\n                     // FIXME: Should this be applied for generators?\n-                    hir::ExprClosure(.., None) => true,\n+                    hir::ExprClosure(.., hir::IsGenerator::No) => true,\n                     _ => false\n                 };\n \n@@ -3992,25 +3970,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                   }\n               }\n            }\n-          hir::ExprImplArg(_) => {\n-            match self.impl_arg_ty {\n-                Some(ty) => {\n-                    ty\n-                }\n-                None => {\n-                    struct_span_err!(self.tcx.sess, expr.span, E0626,\n-                                 \"gen arg expression outside of generator literal\").emit();\n-                    tcx.types.err\n-                }\n-            }\n-          }\n           hir::ExprYield(ref value) => {\n             match self.yield_ty {\n                 Some(ty) => {\n                     self.check_expr_coercable_to_type(&value, ty);\n                 }\n                 None => {\n-                    struct_span_err!(self.tcx.sess, expr.span, E0625,\n+                    struct_span_err!(self.tcx.sess, expr.span, E0623,\n                                  \"yield statement outside of generator literal\").emit();\n                 }\n             }"}, {"sha": "ffaf6afb6e8d7c18ae90fed63bab186a43aa1671", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -78,7 +78,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for InferBorrowKindVisitor<'a, 'gcx, 'tcx> {\n             hir::ExprClosure(cc, _, body_id, _, gen) => {\n                 let body = self.fcx.tcx.hir.body(body_id);\n                 self.visit_body(body);\n-                self.fcx.analyze_closure(expr.id, expr.span, body, cc, gen.is_some());\n+                self.fcx.analyze_closure(expr.id, expr.span, body, cc,\n+                                         gen == hir::IsGenerator::Yes);\n             }\n \n             _ => { }"}, {"sha": "2f4a9ce4013d9d6d5d0f925433c8e3c320930355", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -36,9 +36,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         for arg in &body.arguments {\n             wbcx.visit_node_id(arg.pat.span, arg.id);\n         }\n-        if let Some(ref impl_arg) = body.impl_arg {\n-            wbcx.visit_node_id(impl_arg.span, impl_arg.id);\n-        }\n         wbcx.visit_body(body);\n         wbcx.visit_upvar_borrow_map();\n         wbcx.visit_closures();\n@@ -328,7 +325,6 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     fn visit_generator_sigs(&mut self) {\n         for (&node_id, gen_sig) in self.fcx.tables.borrow().generator_sigs.iter() {\n             let gen_sig = gen_sig.map(|s| ty::GenSig {\n-                impl_arg_ty: self.resolve(&s.impl_arg_ty, &node_id),\n                 yield_ty: self.resolve(&s.yield_ty, &node_id),\n                 return_ty: self.resolve(&s.return_ty, &node_id),\n             });"}, {"sha": "05f5c4070d348601652d60aa8750fa607409c659", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -1156,7 +1156,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         NodeField(field) => icx.to_ty(&field.ty),\n \n         NodeExpr(&hir::Expr { node: hir::ExprClosure(.., gen), .. }) => {\n-            if gen.is_some() {\n+            if gen == hir::IsGenerator::Yes {\n                 return tcx.typeck_tables_of(def_id).node_id_to_type(node_id);\n             }\n "}, {"sha": "b646678d7d2ec495f8f5b8f4f1e255e94ad3d33f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -4667,6 +4667,5 @@ register_diagnostics! {\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n //  E0613, // Removed (merged with E0609)\n-    E0625, // yield statement outside of generator literal\n-    E0626, // gen arg expression outside of generator literal\n+    E0623, // yield statement outside of generator literal\n }"}, {"sha": "0128bf73a359ac96b798ac639c3a7f99ff1a1c04", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -984,9 +984,6 @@ pub enum ExprKind {\n \n     /// A `yield`, with an optional value to be yielded\n     Yield(Option<P<Expr>>),\n-\n-    /// A reference to the implicit argument of a generator\n-    ImplArg,\n }\n \n /// The explicit Self type in a \"qualified path\". The actual"}, {"sha": "bf19a7e038395e2043810fb6c33ca7baa972340a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -1335,11 +1335,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                   e.span,\n                                   \"yield syntax is experimental\");\n             }\n-            ast::ExprKind::ImplArg => {\n-                gate_feature_post!(&self, generators,\n-                                  e.span,\n-                                  \"gen arg syntax is experimental\");\n-            }\n             ast::ExprKind::Lit(ref lit) => {\n                 if let ast::LitKind::Int(_, ref ty) = lit.node {\n                     match *ty {"}, {"sha": "580c2aa58a5c30e9afa601c2fd34df608a11ed25", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -1304,7 +1304,6 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 };\n             }\n             ExprKind::Yield(ex) => ExprKind::Yield(ex.map(|x| folder.fold_expr(x))),\n-            ExprKind::ImplArg => ExprKind::ImplArg,\n             ExprKind::Try(ex) => ExprKind::Try(folder.fold_expr(ex)),\n             ExprKind::Catch(body) => ExprKind::Catch(folder.fold_block(body)),\n         },"}, {"sha": "b7ae025db5f7cde3d6cc869738d52ed1b6985583", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -2146,12 +2146,6 @@ impl<'a> Parser<'a> {\n                     assert!(self.eat_keyword(keywords::Catch));\n                     return self.parse_catch_expr(lo, attrs);\n                 }\n-                if self.is_gen_arg() {\n-                    assert!(self.eat_keyword(keywords::Gen));\n-                    assert!(self.eat_keyword(keywords::Arg));\n-                    let hi = self.prev_span;\n-                    return Ok(self.mk_expr(lo.to(hi), ExprKind::ImplArg, attrs));\n-                }\n                 if self.eat_keyword(keywords::Return) {\n                     if self.token.can_begin_expr() {\n                         let e = self.parse_expr()?;\n@@ -3710,11 +3704,6 @@ impl<'a> Parser<'a> {\n         self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n     }\n \n-    fn is_gen_arg(&self) -> bool {\n-        self.token.is_keyword(keywords::Gen) &&\n-        self.look_ahead(1, |t| t.is_keyword(keywords::Arg))\n-    }\n-\n     fn is_defaultness(&self) -> bool {\n         // `pub` is included for better error messages\n         self.token.is_keyword(keywords::Default) &&\n@@ -3818,8 +3807,7 @@ impl<'a> Parser<'a> {\n         // Starts like a simple path, but not a union item.\n         } else if self.token.is_path_start() &&\n                   !self.token.is_qpath_start() &&\n-                  !self.is_union_item() &&\n-                  !self.is_gen_arg() {\n+                  !self.is_union_item() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {"}, {"sha": "9e36fb83696a6f786a1e51bd7cd042f09d1c2791", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -2290,9 +2290,6 @@ impl<'a> State<'a> {\n                     _ => ()\n                 }\n             }\n-            ast::ExprKind::ImplArg => {\n-                self.s.word(\"impl arg\")?;\n-            }\n             ast::ExprKind::Try(ref e) => {\n                 self.print_expr(e)?;\n                 self.s.word(\"?\")?"}, {"sha": "05077d42a0bedb6886ee60069cc03490f6513c26", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -787,7 +787,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Yield(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::ImplArg => (),\n         ExprKind::Try(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }"}, {"sha": "debac70545a99d0f2ff39c08f69bd3c006d753db", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -307,8 +307,6 @@ declare_keywords! {\n     (56, StaticLifetime, \"'static\")\n     (57, Union,          \"union\")\n     (58, Catch,          \"catch\")\n-    (59, Arg,            \"arg\")\n-    (60, Gen,            \"gen\")\n }\n \n // If an interner exists in TLS, return it. Otherwise, prepare a fresh one."}, {"sha": "3754f92d8cde28abfc3033b8fa89b3076e599af8", "filename": "src/test/compile-fail/feature-gate-generators.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Ffeature-gate-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Ffeature-gate-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-generators.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -10,5 +10,4 @@\n \n fn main() {\n     yield true; //~ ERROR yield syntax is experimental\n-    gen arg;  //~ ERROR gen arg syntax is experimental\n }"}, {"sha": "0bbb212b09b6fa528b58de7a81bd2b490e08bd9f", "filename": "src/test/compile-fail/generator/borrowing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fborrowing.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -16,14 +16,13 @@ use std::cell::Cell;\n fn main() {\n     let _b = {\n         let a = 3;\n-        (|| yield &a).resume(())\n+        (|| yield &a).resume()\n         //~^ ERROR: `a` does not live long enough\n     };\n \n     let _b = {\n         let a = 3;\n         || {\n-            let _: () = gen arg; // FIXME: shouldn't be needed for inference\n             yield &a\n             //~^ ERROR: `a` does not live long enough\n         }"}, {"sha": "a7e98fe4509278a699b3cff9e03dcd2832297fd1", "filename": "src/test/compile-fail/generator/no-arguments-on-generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fno-arguments-on-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fno-arguments-on-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fno-arguments-on-generators.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -14,4 +14,4 @@ fn main() {\n     let gen = |start| { //~ ERROR generators cannot have explicit arguments\n         yield;\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "31f80029b06b7e8d6dab71d31064e22f821fb3f7", "filename": "src/test/compile-fail/generator/not-send-sync.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fnot-send-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fnot-send-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fnot-send-sync.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -21,14 +21,12 @@ fn main() {\n         //~^ ERROR: Sync` is not satisfied\n         let a = Cell::new(2);\n         yield;\n-        let _: () = gen arg;\n     });\n \n     let a = Cell::new(2);\n     assert_send(|| {\n         //~^ ERROR: Sync` is not satisfied\n         drop(&a);\n         yield;\n-        let _: () = gen arg;\n     });\n }"}, {"sha": "e166d2651597565eca1ae0d4917acee885905080", "filename": "src/test/compile-fail/generator/yield-in-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-const.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -10,6 +10,5 @@\n \n #![feature(generators)]\n \n-const A: u8 = { yield 3u8; gen arg; 3u8};\n+const A: u8 = { yield 3u8; 3u8};\n //~^ ERROR yield statement outside\n-//~| ERROR gen arg expression outside"}, {"sha": "2f6c5a9ef754c317390f4356d8c7eed132828498", "filename": "src/test/compile-fail/generator/yield-in-function.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-function.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -10,6 +10,5 @@\n \n #![feature(generators)]\n \n-fn main() { yield; gen arg; }\n+fn main() { yield; }\n //~^ ERROR yield statement outside\n-//~| ERROR gen arg expression outside"}, {"sha": "823a2aa425e2cfdfeff4db50ca127bd8e094e2f0", "filename": "src/test/compile-fail/generator/yield-in-static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-in-static.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -10,6 +10,5 @@\n \n #![feature(generators)]\n \n-static B: u8 = { yield 3u8; gen arg; 3u8};\n+static B: u8 = { yield 3u8; 3u8};\n //~^ ERROR yield statement outside\n-//~| ERROR gen arg expression outside"}, {"sha": "d627e835c6303a92aee23fb385cc5e71da64366e", "filename": "src/test/run-pass/generator/control-flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -13,10 +13,10 @@\n use std::ops::{State, Generator};\n \n fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n-    where T: Generator<(), Yield = ()>\n+    where T: Generator<Yield = ()>\n {\n     loop {\n-        match t.resume(()) {\n+        match t.resume() {\n             State::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n             State::Complete(ret) => {\n                 assert_eq!(amt, 0);"}, {"sha": "ac42a25899dbbc7a3f2be339e789c518c9f7de1a", "filename": "src/test/run-pass/generator/drop-env.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -37,7 +37,7 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(foo.resume(()));\n+    drop(foo.resume());\n     assert_eq!(A.load(Ordering::SeqCst), n);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n@@ -50,7 +50,7 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(foo.resume(()));\n+    drop(foo.resume());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n@@ -59,7 +59,6 @@ fn t2() {\n fn t3() {\n     let b = B;\n     let foo = || {\n-        let _: () = gen arg; // FIXME: this line should not be necessary\n         yield;\n         drop(b);\n     };"}, {"sha": "635d8fb3cdc63d340994558c74fe9aaab4f8a859", "filename": "src/test/run-pass/generator/implicit-argument-dead-when-suspended.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/93172045c817ffa998d5e28a0899f33edf889f62/src%2Ftest%2Frun-pass%2Fgenerator%2Fimplicit-argument-dead-when-suspended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93172045c817ffa998d5e28a0899f33edf889f62/src%2Ftest%2Frun-pass%2Fgenerator%2Fimplicit-argument-dead-when-suspended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fimplicit-argument-dead-when-suspended.rs?ref=93172045c817ffa998d5e28a0899f33edf889f62", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(generators, generator_trait)]\n-\n-use std::ops::Generator;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n-\n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n-\n-struct B;\n-\n-impl Drop for B {\n-    fn drop(&mut self) {\n-        A.fetch_add(1, Ordering::SeqCst);\n-    }\n-}\n-\n-fn main() {\n-    let b = B;\n-\n-    let mut gen = || {\n-        yield;\n-    };\n-\n-    assert_eq!(A.load(Ordering::SeqCst), 0);\n-    gen.resume(b);\n-    assert_eq!(A.load(Ordering::SeqCst), 1);\n-    drop(gen);\n-    assert_eq!(A.load(Ordering::SeqCst), 1);\n-}"}, {"sha": "8de0e71b85796608f6800b156dd15e961eea67c9", "filename": "src/test/run-pass/generator/iterator-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -18,7 +18,7 @@ impl<T: Generator<Return = ()>> Iterator for W<T> {\n     type Item = T::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match self.0.resume(()) {\n+        match self.0.resume() {\n             State::Complete(..) => None,\n             State::Yielded(v) => Some(v),\n         }"}, {"sha": "4837f68be5eb24ef9efc496ecb451f24cff5ff9b", "filename": "src/test/run-pass/generator/panic-drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 0);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        foo.resume(())\n+        foo.resume()\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);\n@@ -51,7 +51,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 1);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        foo.resume(())\n+        foo.resume()\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);"}, {"sha": "a583f42b93d8c52c67decee88c7178fd75cb6b7f", "filename": "src/test/run-pass/generator/panic-safe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -22,13 +22,13 @@ fn main() {\n     };\n \n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        foo.resume(())\n+        foo.resume()\n     }));\n     assert!(res.is_err());\n \n     for _ in 0..10 {\n         let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-            foo.resume(())\n+            foo.resume()\n         }));\n         assert!(res.is_err());\n     }"}, {"sha": "d5f81d5eecd2ef66a53a2b93c6dad9f22141ffbe", "filename": "src/test/run-pass/generator/resume-after-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -21,12 +21,12 @@ fn main() {\n         yield;\n     };\n \n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n-    match panic::catch_unwind(move || foo.resume(())) {\n+    match panic::catch_unwind(move || foo.resume()) {\n         Ok(_) => panic!(\"generator successfully resumed\"),\n         Err(_) => {}\n     }"}, {"sha": "21c7b434d2a8cfdfa2442184d58df3415361f6e1", "filename": "src/test/run-pass/generator/smoke.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a5d319ab8fbfd43530289bfff3899f9035e37f/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs?ref=09a5d319ab8fbfd43530289bfff3899f9035e37f", "patch": "@@ -23,7 +23,7 @@ fn simple() {\n         }\n     };\n \n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -39,7 +39,7 @@ fn return_capture() {\n         a\n     };\n \n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -51,11 +51,11 @@ fn simple_yield() {\n         yield;\n     };\n \n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -68,11 +68,11 @@ fn yield_capture() {\n         yield b;\n     };\n \n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Yielded(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -85,11 +85,11 @@ fn simple_yield_value() {\n         return String::from(\"foo\")\n     };\n \n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Yielded(ref s) if *s == \"bar\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -103,11 +103,11 @@ fn return_after_yield() {\n         return a\n     };\n \n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume(()) {\n+    match foo.resume() {\n         State::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -116,40 +116,33 @@ fn return_after_yield() {\n #[test]\n fn send_and_sync() {\n     assert_send_sync(|| {\n-        let _: () = gen arg;\n         yield\n     });\n     assert_send_sync(|| {\n-        let _: () = gen arg;\n         yield String::from(\"foo\");\n     });\n     assert_send_sync(|| {\n-        let _: () = gen arg;\n         yield;\n         return String::from(\"foo\");\n     });\n     let a = 3;\n     assert_send_sync(|| {\n-        let _: () = gen arg;\n         yield a;\n         return\n     });\n     let a = 3;\n     assert_send_sync(move || {\n-        let _: () = gen arg;\n         yield a;\n         return\n     });\n     let a = String::from(\"a\");\n     assert_send_sync(|| {\n-        let _: () = gen arg;\n         yield ;\n         drop(a);\n         return\n     });\n     let a = String::from(\"a\");\n     assert_send_sync(move || {\n-        let _: () = gen arg;\n         yield ;\n         drop(a);\n         return\n@@ -162,11 +155,11 @@ fn send_and_sync() {\n fn send_over_threads() {\n     let mut foo = || { yield };\n     thread::spawn(move || {\n-        match foo.resume(()) {\n+        match foo.resume() {\n             State::Yielded(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match foo.resume(()) {\n+        match foo.resume() {\n             State::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n@@ -175,11 +168,11 @@ fn send_over_threads() {\n     let a = String::from(\"a\");\n     let mut foo = || { yield a };\n     thread::spawn(move || {\n-        match foo.resume(()) {\n+        match foo.resume() {\n             State::Yielded(ref s) if *s == \"a\" => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match foo.resume(()) {\n+        match foo.resume() {\n             State::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }"}]}