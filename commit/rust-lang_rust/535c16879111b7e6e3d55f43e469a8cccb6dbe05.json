{"sha": "535c16879111b7e6e3d55f43e469a8cccb6dbe05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNWMxNjg3OTExMWI3ZTZlM2Q1NWY0M2U0NjlhOGNjY2I2ZGJlMDU=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-06-25T00:06:57Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-06-25T10:25:20Z"}, "message": "Fix the tests that got broken by the fixes", "tree": {"sha": "264a5eb09c1ca9b0d26fe37e13ab0a01f8c106e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/264a5eb09c1ca9b0d26fe37e13ab0a01f8c106e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535c16879111b7e6e3d55f43e469a8cccb6dbe05", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAlswxZYACgkQnxhOEWSD\nEYH+sA//UFKj/sOiuTsettHh94BOTSYohQAoH33fHdNdbG0PtwpuCZqDDHwLh8tG\nybyqsPzDOJmhDDyq4LWNi16/aUV/YzRXCMDk3kvmE/DWT0EWGWM9Wjd1QK9xWeFv\nvhU2KTsS92pbCcMlWaVSyW1y7FYUt1Gb6lXLdp71FRe3+tbbqXbxgOcHA/vjy9S6\nb3kSYqsuAmS8M3d3ZlTtV5Tf4XW0bp4SxfJBmI+AE/uLvrm9NU5SdVkqzrCOGcan\nCQgFlssr6GcbMvm2ZNERdojijFJo2qMxEHJj1jmJA4DrfcIHKKYKMMiWJw62v5d3\nYygjDQOuHxfC9wYni4aycX1/EEA7XFn7HvL9mGiWhV7gqSwlpxwnPTzGwGEVhJkh\nYSHF3IabY73wOCodNVDMsU5fhtJXV0Jmg5/5Bt+/ftKaNG42E/UbeVILf6UwBB6x\ndowmQ2SVyj82BKXv9n2f6cUCNrxe04zB695Hl/GBpVp6X3pkbqnf+luZR+rdVHfR\ndjfsXXJf2TxdTnGmx1gK/hoPySCriiOiKMQQUPwZWf7KGyv0wsbTJaW56VFDE2zK\nZMruRMGEGVlvSp912Ednv7ZTqOW7UCY/bxC4FNUUgLILUT/zQMpxzEPPjjp3pZYG\n3O6OeYQHnnwcptE7XjhQWi40ON4vfI6b+kyGjGIaHRD3pAAsc9k=\n=uxU3\n-----END PGP SIGNATURE-----", "payload": "tree 264a5eb09c1ca9b0d26fe37e13ab0a01f8c106e9\nparent c83fd39e0e4a8e9262fc31823303df7bcb522720\nauthor flip1995 <9744647+flip1995@users.noreply.github.com> 1529885217 +0200\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1529922320 +0200\n\nFix the tests that got broken by the fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535c16879111b7e6e3d55f43e469a8cccb6dbe05", "html_url": "https://github.com/rust-lang/rust/commit/535c16879111b7e6e3d55f43e469a8cccb6dbe05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535c16879111b7e6e3d55f43e469a8cccb6dbe05/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c83fd39e0e4a8e9262fc31823303df7bcb522720", "url": "https://api.github.com/repos/rust-lang/rust/commits/c83fd39e0e4a8e9262fc31823303df7bcb522720", "html_url": "https://github.com/rust-lang/rust/commit/c83fd39e0e4a8e9262fc31823303df7bcb522720"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "1c063464fcc27a00cc7da016151ca94b583b9cd4", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/535c16879111b7e6e3d55f43e469a8cccb6dbe05/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535c16879111b7e6e3d55f43e469a8cccb6dbe05/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=535c16879111b7e6e3d55f43e469a8cccb6dbe05", "patch": "@@ -101,38 +101,40 @@ fn check_fn_inner<'a, 'tcx>(\n     }\n \n     let mut bounds_lts = Vec::new();\n-    generics.params.iter().for_each(|param| match param.kind {\n-        GenericParamKind::Lifetime { .. } => {},\n-        GenericParamKind::Type { .. } => {\n-            for bound in &param.bounds {\n-                let mut visitor = RefVisitor::new(cx);\n-                walk_param_bound(&mut visitor, bound);\n-                if visitor.lts.iter().any(|lt| matches!(lt, RefLt::Named(_))) {\n-                    return;\n-                }\n-                if let GenericBound::Trait(ref trait_ref, _) = *bound {\n-                    let params = &trait_ref\n-                        .trait_ref\n-                        .path\n-                        .segments\n-                        .last()\n-                        .expect(\"a path must have at least one segment\")\n-                        .args;\n-                    if let Some(ref params) = *params {\n-                        params.args.iter().for_each(|param| match param {\n-                            GenericArg::Lifetime(bound) => {\n-                                if bound.name.name() != \"'static\" && !bound.is_elided() {\n-                                    return;\n-                                }\n-                                bounds_lts.push(bound);\n-                            },\n-                            _ => {},\n-                        });\n+    let types = generics.params.iter().filter_map(|param| match param.kind {\n+        GenericParamKind::Type { .. } => Some(param),\n+        GenericParamKind::Lifetime { .. } => None,\n+    });\n+    for typ in types {\n+        for bound in &typ.bounds {\n+            let mut visitor = RefVisitor::new(cx);\n+            walk_param_bound(&mut visitor, bound);\n+            if visitor.lts.iter().any(|lt| matches!(lt, RefLt::Named(_))) {\n+                return;\n+            }\n+            if let GenericBound::Trait(ref trait_ref, _) = *bound {\n+                let params = &trait_ref\n+                    .trait_ref\n+                    .path\n+                    .segments\n+                    .last()\n+                    .expect(\"a path must have at least one segment\")\n+                    .args;\n+                if let Some(ref params) = *params {\n+                    let lifetimes = params.args.iter().filter_map(|arg| match arg {\n+                        GenericArg::Lifetime(lt) => Some(lt),\n+                        GenericArg::Type(_) => None,\n+                    });\n+                    for bound in lifetimes {\n+                        if bound.name.name() != \"'static\" && !bound.is_elided() {\n+                            return;\n+                        }\n+                        bounds_lts.push(bound);\n                     }\n                 }\n             }\n-        },\n-    });\n+        }\n+    }\n     if could_use_elision(cx, decl, body, &generics.params, bounds_lts) {\n         span_lint(\n             cx,"}, {"sha": "68cecc8de678fb02f5ff42d98cac1c9f0737dd7c", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/535c16879111b7e6e3d55f43e469a8cccb6dbe05/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535c16879111b7e6e3d55f43e469a8cccb6dbe05/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=535c16879111b7e6e3d55f43e469a8cccb6dbe05", "patch": "@@ -225,8 +225,10 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                     if let [ref bx] = *pp.segments;\n                     if let Some(ref params) = bx.args;\n                     if !params.parenthesized;\n-                    if let [ref inner] = *params.args;\n-                    if let GenericArg::Type(inner) = inner;\n+                    if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n+                        GenericArg::Type(ty) => Some(ty),\n+                        GenericArg::Lifetime(_) => None,\n+                    });\n                     then {\n                         let replacement = snippet_opt(cx, inner.span);\n                         if let Some(r) = replacement {"}, {"sha": "887e9f12712b423a19404fdb1928e75faebe6372", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/535c16879111b7e6e3d55f43e469a8cccb6dbe05/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535c16879111b7e6e3d55f43e469a8cccb6dbe05/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=535c16879111b7e6e3d55f43e469a8cccb6dbe05", "patch": "@@ -304,8 +304,10 @@ fn check_ty_rptr(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool, lt: &Lifeti\n                 if let [ref bx] = *path.segments;\n                 if let Some(ref params) = bx.args;\n                 if !params.parenthesized;\n-                if let [ref inner] = *params.args;\n-                if let GenericArg::Type(inner) = inner;\n+                if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n+                    GenericArg::Type(ty) => Some(ty),\n+                    GenericArg::Lifetime(_) => None,\n+                });\n                 then {\n                     if is_any_trait(inner) {\n                         // Ignore `Box<Any>` types, see #1884 for details."}]}