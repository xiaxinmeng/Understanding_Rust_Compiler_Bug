{"sha": "7a09755148c4b1543f25862e785e04834feb8b61", "node_id": "C_kwDOAAsO6NoAKDdhMDk3NTUxNDhjNGIxNTQzZjI1ODYyZTc4NWUwNDgzNGZlYjhiNjE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T06:56:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T06:56:16Z"}, "message": "Rollup merge of #88234 - hkmatsumoto:rustdoc-impls-for-primitive, r=jyn514\n\nrustdoc-json: Don't ignore impls for primitive types\n\nFix the issue discussed at [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/.E2.9C.94.20Json.20output.20lacks.20some.20item.20which.20are.20supposed.20to.20be.20there)\n\nr? ``@jyn514``", "tree": {"sha": "cf7ed9b36935bb86960652089881ef77e4fd671d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7ed9b36935bb86960652089881ef77e4fd671d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a09755148c4b1543f25862e785e04834feb8b61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW/cQCRBK7hj4Ov3rIwAA/UIIAIkTtfranXYAeqY2pVcnWwJ4\nv4g9NJ8oMe4hJBXr1B8LrMnydx2iZDAsNYFID0ar3bXkIjZ+yw2jlclZOEZhS6Af\nVD2nm9s2FpCQfM1L1d525IqJtGolavwwOAb7yH4dWCz5+36Ga95FfGM2CgFGoDww\nRybTxaueBX1A6AQNn6tvA3qE4q5517H0swLpc67bh0xv1Fo5lDn4Lzeu9ejxRRWd\n8Sy7Xh29lG8qNO4xPGLqbX7cXKgWYV5IozOiQFkD1eqZ0X5aryd87QzOAlW611n1\nphBIAVu5NOaDEamlphyFT5voPz6hgvX4iFmMptPKhI/X4LwP3ODLF4X/H3ttp2U=\n=AhwN\n-----END PGP SIGNATURE-----\n", "payload": "tree cf7ed9b36935bb86960652089881ef77e4fd671d\nparent 0fb01224dd6d1966ca4f64416e092243ae19ec84\nparent e18a8efb8b8b87eb2576a12176c45dd59e5c5d18\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633416976 -0700\ncommitter GitHub <noreply@github.com> 1633416976 -0700\n\nRollup merge of #88234 - hkmatsumoto:rustdoc-impls-for-primitive, r=jyn514\n\nrustdoc-json: Don't ignore impls for primitive types\n\nFix the issue discussed at [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/.E2.9C.94.20Json.20output.20lacks.20some.20item.20which.20are.20supposed.20to.20be.20there)\n\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a09755148c4b1543f25862e785e04834feb8b61", "html_url": "https://github.com/rust-lang/rust/commit/7a09755148c4b1543f25862e785e04834feb8b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a09755148c4b1543f25862e785e04834feb8b61/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb01224dd6d1966ca4f64416e092243ae19ec84", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb01224dd6d1966ca4f64416e092243ae19ec84", "html_url": "https://github.com/rust-lang/rust/commit/0fb01224dd6d1966ca4f64416e092243ae19ec84"}, {"sha": "e18a8efb8b8b87eb2576a12176c45dd59e5c5d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18a8efb8b8b87eb2576a12176c45dd59e5c5d18", "html_url": "https://github.com/rust-lang/rust/commit/e18a8efb8b8b87eb2576a12176c45dd59e5c5d18"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "731fc4ff3ce00623469485a6c7d5447d9694d1ce", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a09755148c4b1543f25862e785e04834feb8b61/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a09755148c4b1543f25862e785e04834feb8b61/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=7a09755148c4b1543f25862e785e04834feb8b61", "patch": "@@ -218,14 +218,15 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         ConstantItem(c) => ItemEnum::Constant(c.into_tcx(tcx)),\n         MacroItem(m) => ItemEnum::Macro(m.source),\n         ProcMacroItem(m) => ItemEnum::ProcMacro(m.into_tcx(tcx)),\n+        PrimitiveItem(p) => ItemEnum::PrimitiveType(p.as_sym().to_string()),\n         AssocConstItem(t, s) => ItemEnum::AssocConst { type_: t.into_tcx(tcx), default: s },\n         AssocTypeItem(g, t) => ItemEnum::AssocType {\n             bounds: g.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: t.map(|x| x.into_tcx(tcx)),\n         },\n         // `convert_item` early returns `None` for striped items\n         StrippedItem(_) => unreachable!(),\n-        PrimitiveItem(_) | KeywordItem(_) => {\n+        KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }\n         ExternCrateItem { ref src } => ItemEnum::ExternCrate {"}, {"sha": "040a880ace947c16c14192ba6169ac5231f78b10", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a09755148c4b1543f25862e785e04834feb8b61/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a09755148c4b1543f25862e785e04834feb8b61/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=7a09755148c4b1543f25862e785e04834feb8b61", "patch": "@@ -69,7 +69,21 @@ impl JsonRenderer<'tcx> {\n                     .iter()\n                     .filter_map(|i| {\n                         let item = &i.impl_item;\n-                        if item.def_id.is_local() {\n+\n+                        // HACK(hkmatsumoto): For impls of primitive types, we index them\n+                        // regardless of whether they're local. This is because users can\n+                        // document primitive items in an arbitrary crate by using\n+                        // `doc(primitive)`.\n+                        let mut is_primitive_impl = false;\n+                        if let clean::types::ItemKind::ImplItem(ref impl_) = *item.kind {\n+                            if impl_.trait_.is_none() {\n+                                if let clean::types::Type::Primitive(_) = impl_.for_ {\n+                                    is_primitive_impl = true;\n+                                }\n+                            }\n+                        }\n+\n+                        if item.def_id.is_local() || is_primitive_impl {\n                             self.item(item.clone()).unwrap();\n                             Some(from_item_id(item.def_id))\n                         } else {\n@@ -191,6 +205,11 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n     fn after_krate(&mut self) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n+\n+        for primitive in Rc::clone(&self.cache).primitive_locations.values() {\n+            self.get_impls(primitive.clone());\n+        }\n+\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());\n         // This needs to be the default HashMap for compatibility with the public interface for\n@@ -236,7 +255,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 7,\n+            format_version: 8,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "22debd296c2367505c423da217b10bf023c7c7c4", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a09755148c4b1543f25862e785e04834feb8b61/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a09755148c4b1543f25862e785e04834feb8b61/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=7a09755148c4b1543f25862e785e04834feb8b61", "patch": "@@ -221,6 +221,8 @@ pub enum ItemEnum {\n     Macro(String),\n     ProcMacro(ProcMacro),\n \n+    PrimitiveType(String),\n+\n     AssocConst {\n         #[serde(rename = \"type\")]\n         type_: Type,"}, {"sha": "3a7d6d18c1bd0639f64ccfa6d19c501c795906fe", "filename": "src/test/rustdoc-json/primitive.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a09755148c4b1543f25862e785e04834feb8b61/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a09755148c4b1543f25862e785e04834feb8b61/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitive.rs?ref=7a09755148c4b1543f25862e785e04834feb8b61", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+#![feature(doc_primitive)]\n+\n+#[doc(primitive = \"usize\")]\n+mod usize {}\n+\n+// @set local_crate_id = primitive.json \"$.index[*][?(@.name=='primitive')].crate_id\"\n+\n+// @has - \"$.index[*][?(@.name=='log10')]\"\n+// @!is - \"$.index[*][?(@.name=='log10')].crate_id\" $local_crate_id\n+// @has - \"$.index[*][?(@.name=='checked_add')]\"\n+// @!is - \"$.index[*][?(@.name=='checked_add')]\" $local_crate_id\n+// @!has - \"$.index[*][?(@.name=='is_ascii_uppercase')]\""}]}