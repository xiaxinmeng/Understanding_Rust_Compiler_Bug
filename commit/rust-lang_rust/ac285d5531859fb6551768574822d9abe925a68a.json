{"sha": "ac285d5531859fb6551768574822d9abe925a68a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjg1ZDU1MzE4NTlmYjY1NTE3Njg1NzQ4MjJkOWFiZTkyNWE2OGE=", "commit": {"author": {"name": "Victory", "email": "git@dfhu.org", "date": "2015-01-27T01:18:24Z"}, "committer": {"name": "Victory", "email": "git@dfhu.org", "date": "2015-01-27T01:18:24Z"}, "message": "Don't use  if we can avoid it", "tree": {"sha": "9873f5427a0382a0200756ab3246836b10237d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9873f5427a0382a0200756ab3246836b10237d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac285d5531859fb6551768574822d9abe925a68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac285d5531859fb6551768574822d9abe925a68a", "html_url": "https://github.com/rust-lang/rust/commit/ac285d5531859fb6551768574822d9abe925a68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac285d5531859fb6551768574822d9abe925a68a/comments", "author": {"login": "Victory", "id": 116593, "node_id": "MDQ6VXNlcjExNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/116593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Victory", "html_url": "https://github.com/Victory", "followers_url": "https://api.github.com/users/Victory/followers", "following_url": "https://api.github.com/users/Victory/following{/other_user}", "gists_url": "https://api.github.com/users/Victory/gists{/gist_id}", "starred_url": "https://api.github.com/users/Victory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Victory/subscriptions", "organizations_url": "https://api.github.com/users/Victory/orgs", "repos_url": "https://api.github.com/users/Victory/repos", "events_url": "https://api.github.com/users/Victory/events{/privacy}", "received_events_url": "https://api.github.com/users/Victory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Victory", "id": 116593, "node_id": "MDQ6VXNlcjExNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/116593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Victory", "html_url": "https://github.com/Victory", "followers_url": "https://api.github.com/users/Victory/followers", "following_url": "https://api.github.com/users/Victory/following{/other_user}", "gists_url": "https://api.github.com/users/Victory/gists{/gist_id}", "starred_url": "https://api.github.com/users/Victory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Victory/subscriptions", "organizations_url": "https://api.github.com/users/Victory/orgs", "repos_url": "https://api.github.com/users/Victory/repos", "events_url": "https://api.github.com/users/Victory/events{/privacy}", "received_events_url": "https://api.github.com/users/Victory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23fd8cad042da5d2346487759cb8ea718cb5974d", "url": "https://api.github.com/repos/rust-lang/rust/commits/23fd8cad042da5d2346487759cb8ea718cb5974d", "html_url": "https://github.com/rust-lang/rust/commit/23fd8cad042da5d2346487759cb8ea718cb5974d"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "7ae7e8080afa5e656f61ff34f09d7b39ab8772a0", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ac285d5531859fb6551768574822d9abe925a68a/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac285d5531859fb6551768574822d9abe925a68a/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=ac285d5531859fb6551768574822d9abe925a68a", "patch": "@@ -99,10 +99,10 @@\n //!    let between = Range::new(-1f64, 1.);\n //!    let mut rng = rand::thread_rng();\n //!\n-//!    let total = 1_000_000us;\n-//!    let mut in_circle = 0us;\n+//!    let total = 1_000_000;\n+//!    let mut in_circle = 0;\n //!\n-//!    for _ in range(0us, total) {\n+//!    for _ in range(0, total) {\n //!        let a = between.ind_sample(&mut rng);\n //!        let b = between.ind_sample(&mut rng);\n //!        if a*a + b*b <= 1. {\n@@ -176,18 +176,18 @@\n //! }\n //!\n //! fn free_doors(blocked: &[uint]) -> Vec<uint> {\n-//!     range(0us, 3).filter(|x| !blocked.contains(x)).collect()\n+//!     range(0, 3).filter(|x| !blocked.contains(x)).collect()\n //! }\n //!\n //! fn main() {\n //!     // The estimation will be more accurate with more simulations\n-//!     let num_simulations = 10000us;\n+//!     let num_simulations = 10000;\n //!\n //!     let mut rng = rand::thread_rng();\n-//!     let random_door = Range::new(0us, 3);\n+//!     let random_door = Range::new(0, 3);\n //!\n-//!     let (mut switch_wins, mut switch_losses) = (0us, 0us);\n-//!     let (mut keep_wins, mut keep_losses) = (0us, 0us);\n+//!     let (mut switch_wins, mut switch_losses) = (0, 0);\n+//!     let (mut keep_wins, mut keep_losses) = (0, 0);\n //!\n //!     println!(\"Running {} simulations...\", num_simulations);\n //!     for _ in range(0, num_simulations) {\n@@ -480,18 +480,18 @@ mod test {\n     #[test]\n     fn test_gen_range() {\n         let mut r = thread_rng();\n-        for _ in range(0us, 1000) {\n+        for _ in range(0, 1000) {\n             let a = r.gen_range(-3i, 42);\n             assert!(a >= -3 && a < 42);\n             assert_eq!(r.gen_range(0i, 1), 0);\n             assert_eq!(r.gen_range(-12i, -11), -12);\n         }\n \n-        for _ in range(0us, 1000) {\n+        for _ in range(0, 1000) {\n             let a = r.gen_range(10i, 42);\n             assert!(a >= 10 && a < 42);\n             assert_eq!(r.gen_range(0i, 1), 0);\n-            assert_eq!(r.gen_range(3_000_000us, 3_000_001), 3_000_000);\n+            assert_eq!(r.gen_range(3_000_000, 3_000_001), 3_000_000);\n         }\n \n     }\n@@ -521,24 +521,24 @@ mod test {\n     #[test]\n     fn test_gen_weighted_bool() {\n         let mut r = thread_rng();\n-        assert_eq!(r.gen_weighted_bool(0us), true);\n-        assert_eq!(r.gen_weighted_bool(1us), true);\n+        assert_eq!(r.gen_weighted_bool(0), true);\n+        assert_eq!(r.gen_weighted_bool(1), true);\n     }\n \n     #[test]\n     fn test_gen_ascii_str() {\n         let mut r = thread_rng();\n-        assert_eq!(r.gen_ascii_chars().take(0).count(), 0us);\n-        assert_eq!(r.gen_ascii_chars().take(10).count(), 10us);\n-        assert_eq!(r.gen_ascii_chars().take(16).count(), 16us);\n+        assert_eq!(r.gen_ascii_chars().take(0).count(), 0);\n+        assert_eq!(r.gen_ascii_chars().take(10).count(), 10);\n+        assert_eq!(r.gen_ascii_chars().take(16).count(), 16);\n     }\n \n     #[test]\n     fn test_gen_vec() {\n         let mut r = thread_rng();\n-        assert_eq!(r.gen_iter::<u8>().take(0).count(), 0us);\n-        assert_eq!(r.gen_iter::<u8>().take(10).count(), 10us);\n-        assert_eq!(r.gen_iter::<f64>().take(16).count(), 16us);\n+        assert_eq!(r.gen_iter::<u8>().take(0).count(), 0);\n+        assert_eq!(r.gen_iter::<u8>().take(10).count(), 10);\n+        assert_eq!(r.gen_iter::<f64>().take(16).count(), 16);\n     }\n \n     #[test]\n@@ -578,7 +578,7 @@ mod test {\n         r.shuffle(&mut v);\n         let b: &[_] = &[1, 1, 1];\n         assert_eq!(v, b);\n-        assert_eq!(r.gen_range(0us, 1us), 0us);\n+        assert_eq!(r.gen_range(0, 1), 0);\n     }\n \n     #[test]"}, {"sha": "043922fc60a0efb8e296989da7d1d54e9841a8da", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac285d5531859fb6551768574822d9abe925a68a/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac285d5531859fb6551768574822d9abe925a68a/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=ac285d5531859fb6551768574822d9abe925a68a", "patch": "@@ -49,7 +49,7 @@ mod imp {\n         const NR_GETRANDOM: libc::c_long = 384;\n \n         unsafe {\n-            syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), 0us)\n+            syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), 0)\n         }\n     }\n \n@@ -378,7 +378,7 @@ mod test {\n     fn test_os_rng_tasks() {\n \n         let mut txs = vec!();\n-        for _ in range(0us, 20) {\n+        for _ in range(0, 20) {\n             let (tx, rx) = channel();\n             txs.push(tx);\n \n@@ -392,7 +392,7 @@ mod test {\n                 Thread::yield_now();\n                 let mut v = [0u8; 1000];\n \n-                for _ in range(0us, 100) {\n+                for _ in range(0, 100) {\n                     r.next_u32();\n                     Thread::yield_now();\n                     r.next_u64();"}]}