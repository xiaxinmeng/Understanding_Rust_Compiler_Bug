{"sha": "261b727d7626506f0eabb88e99c9d6a27b2a4f24", "node_id": "C_kwDOAAsO6NoAKDI2MWI3MjdkNzYyNjUwNmYwZWFiYjg4ZTk5YzlkNmEyN2IyYTRmMjQ", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-03-13T02:04:56Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-05-06T01:34:21Z"}, "message": "fix some nits", "tree": {"sha": "39ba926a5f89231e12e08ca0cd5531062a18732f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39ba926a5f89231e12e08ca0cd5531062a18732f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/261b727d7626506f0eabb88e99c9d6a27b2a4f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/261b727d7626506f0eabb88e99c9d6a27b2a4f24", "html_url": "https://github.com/rust-lang/rust/commit/261b727d7626506f0eabb88e99c9d6a27b2a4f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/261b727d7626506f0eabb88e99c9d6a27b2a4f24/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9746ce03901fc39707c8c2d0405caf5384b4e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9746ce03901fc39707c8c2d0405caf5384b4e97", "html_url": "https://github.com/rust-lang/rust/commit/b9746ce03901fc39707c8c2d0405caf5384b4e97"}], "stats": {"total": 66, "additions": 27, "deletions": 39}, "files": [{"sha": "2af7bc917c2a0ba24fd5d2d70329a001d49d9d17", "filename": "compiler/rustc_data_structures/src/marker.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/261b727d7626506f0eabb88e99c9d6a27b2a4f24/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261b727d7626506f0eabb88e99c9d6a27b2a4f24/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs?ref=261b727d7626506f0eabb88e99c9d6a27b2a4f24", "patch": "@@ -8,31 +8,20 @@ cfg_if!(\n     } else {\n         #[rustc_on_unimplemented(\n             message = \"`{Self}` doesn't implement `DynSend`. \\\n-            Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Send`\",\n-            label = \"`{Self}` doesn't implement `DynSend`. \\\n             Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Send`\"\n         )]\n-        // Ensure data structures is `Send` if `sync::active()` is true.\n-        // `sync::active()` should be checked before using these data structures.\n-        // Note: Ensure that the data structure **will not break**\n-        // thread safety after being created.\n-        //\n-        // `sync::active()` should be checked when downcasting these data structures\n-        // to `Send` via `FromDyn`.\n+        // This is an auto trait for types which can be sent across threads if `sync::active()`\n+        // is true. These types can be wrapped in a `FromDyn` to get a `Send` type. Wrapping a\n+        // `Send` type in `IntoDyn` will create a `DynSend` type.\n         pub unsafe auto trait DynSend {}\n \n         #[rustc_on_unimplemented(\n             message = \"`{Self}` doesn't implement `DynSync`. \\\n-            Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Sync`\",\n-            label = \"`{Self}` doesn't implement `DynSync`. \\\n             Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Sync`\"\n         )]\n-        // Ensure data structures is `Sync` if `sync::active()` is true.\n-        // Note: Ensure that the data structure **will not break**\n-        // thread safety after being checked.\n-        //\n-        // `sync::active()` should be checked when downcasting these data structures\n-        // to `Send` via `FromDyn`.\n+        // This is an auto trait for types which can be shared across threads if `sync::active()`\n+        // is true. These types can be wrapped in a `FromDyn` to get a `Sync` type. Wrapping a\n+        // `Sync` type in `IntoDyn` will create a `DynSync` type.\n         pub unsafe auto trait DynSync {}\n \n         // Same with `Sync` and `Send`.\n@@ -110,8 +99,8 @@ cfg_if!(\n             [thin_vec::ThinVec<T> where T: DynSend]\n             [smallvec::SmallVec<A> where A: smallvec::Array + DynSend]\n \n-            // We use `Send` here to omit some extra code, since they are only\n-            // used in `Send` situations now.\n+            // We use `Send` here, since they are only used in `Send` situations now.\n+            // In this case we don't need copy or change the codes in `crate::owning_ref`.\n             [crate::owning_ref::OwningRef<O, T> where O: Send, T: ?Sized + Send]\n             [crate::owning_ref::OwningRefMut<O, T> where O: Send, T: ?Sized + Send]\n         );\n@@ -196,8 +185,8 @@ cfg_if!(\n             [smallvec::SmallVec<A> where A: smallvec::Array + DynSync]\n             [thin_vec::ThinVec<T> where T: DynSync]\n \n-            // We use `Sync` here to omit some extra code, since they are only\n-            // used in `Sync` situations now.\n+            // We use `Sync` here, since they are only used in `Sync` situations now.\n+            // In this case we don't need copy or change the codes in `crate::owning_ref`.\n             [crate::owning_ref::OwningRef<O, T> where O: Sync, T: ?Sized + Sync]\n             [crate::owning_ref::OwningRefMut<O, T> where O: Sync, T: ?Sized + Sync]\n         );\n@@ -213,11 +202,11 @@ pub fn assert_dyn_send_sync_val<T: ?Sized + DynSync + DynSend>(_t: &T) {}\n pub struct FromDyn<T>(T);\n \n impl<T> FromDyn<T> {\n-    // Check `sync::active()` when creating this structure\n-    // and downcasting to `Send`. So we can ensure it is\n-    // thread-safe.\n     #[inline(always)]\n     pub fn from(val: T) -> Self {\n+        // Check that `sync::active()` is true on creation so we can\n+        // implement `Send` and `Sync` for this structure when `T`\n+        // implements `DynSend` and `DynSync` respectively.\n         #[cfg(parallel_compiler)]\n         assert!(crate::sync::active());\n         FromDyn(val)\n@@ -229,11 +218,11 @@ impl<T> FromDyn<T> {\n     }\n }\n \n-// `FromDyn` is `Send` if `T` is `DynSend`, since it check when created.\n+// `FromDyn` is `Send` if `T` is `DynSend`, since it ensures that sync::active() is true.\n #[cfg(parallel_compiler)]\n unsafe impl<T: DynSend> Send for FromDyn<T> {}\n \n-// `FromDyn` is `Sync` if `T` is `DynSync`, since it check when created.\n+// `FromDyn` is `Sync` if `T` is `DynSync`, since it ensures that sync::active() is true.\n #[cfg(parallel_compiler)]\n unsafe impl<T: DynSync> Sync for FromDyn<T> {}\n "}, {"sha": "bffb98630c835c618705d2222082a9eb603f1f0a", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/261b727d7626506f0eabb88e99c9d6a27b2a4f24/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261b727d7626506f0eabb88e99c9d6a27b2a4f24/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=261b727d7626506f0eabb88e99c9d6a27b2a4f24", "patch": "@@ -181,7 +181,7 @@ cfg_if! {\n \n         #[macro_export]\n         macro_rules! parallel {\n-            ($($blocks:block),*) => {{\n+            ($($blocks:block),*) => {\n                 // We catch panics here ensuring that all the blocks execute.\n                 // This makes behavior consistent with the parallel compiler.\n                 let mut panic = None;\n@@ -197,7 +197,7 @@ cfg_if! {\n                 if let Some(panic) = panic {\n                     ::std::panic::resume_unwind(panic);\n                 }\n-            }}\n+            }\n         }\n \n         pub fn par_for_each_in<T: IntoIterator>(t: T, mut for_each: impl FnMut(T::Item) + Sync + Send) {\n@@ -368,6 +368,7 @@ cfg_if! {\n             }\n         }\n \n+        // This function only works when `mode::active()`.\n         pub fn scope<'scope, OP, R>(op: OP) -> R\n         where\n             OP: FnOnce(&rayon::Scope<'scope>) -> R + DynSend,\n@@ -381,24 +382,22 @@ cfg_if! {\n         /// the current thread. Use that for the longest running block.\n         #[macro_export]\n         macro_rules! parallel {\n-            ($fblock:block [$($c:expr,)*] [$block:expr $(, $rest:expr)*]) => {\n-                parallel!($fblock [$block, $($c,)*] [$($rest),*])\n+            (impl $fblock:block [$($c:expr,)*] [$block:expr $(, $rest:expr)*]) => {\n+                parallel!(impl $fblock [$block, $($c,)*] [$($rest),*])\n             };\n-            ($fblock:block [$($blocks:expr,)*] []) => {\n-                {\n-                    ::rustc_data_structures::sync::scope(|s| {\n-                        $(let block = rustc_data_structures::sync::FromDyn::from(|| $blocks);\n-                        s.spawn(move |_| block.into_inner()());)*\n-                        (|| $fblock)();\n-                    });\n-                }\n+            (impl $fblock:block [$($blocks:expr,)*] []) => {\n+                ::rustc_data_structures::sync::scope(|s| {\n+                    $(let block = rustc_data_structures::sync::FromDyn::from(|| $blocks);\n+                    s.spawn(move |_| block.into_inner()());)*\n+                    (|| $fblock)();\n+                });\n             };\n             ($fblock:block, $($blocks:block),*) => {\n                 if rustc_data_structures::sync::active() {\n                     // Reverse the order of the later blocks since Rayon executes them in reverse order\n                     // when using a single thread. This ensures the execution order matches that\n                     // of a single threaded rustc\n-                    parallel!($fblock [] [$($blocks),*]);\n+                    parallel!(impl $fblock [] [$($blocks),*]);\n                 } else {\n                     // We catch panics here ensuring that all the blocks execute.\n                     // This makes behavior consistent with the parallel compiler."}]}