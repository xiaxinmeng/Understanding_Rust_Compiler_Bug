{"sha": "91d913168cf357d4c7ba9b91d4656065477e3c2c", "node_id": "C_kwDOAAsO6NoAKDkxZDkxMzE2OGNmMzU3ZDRjN2JhOWI5MWQ0NjU2MDY1NDc3ZTNjMmM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T11:38:13Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T11:38:13Z"}, "message": "Deduplicate fn trait compatibility checks", "tree": {"sha": "51608c36faa22aa55b4c602c8bf67c3fd31a24ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51608c36faa22aa55b4c602c8bf67c3fd31a24ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d913168cf357d4c7ba9b91d4656065477e3c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d913168cf357d4c7ba9b91d4656065477e3c2c", "html_url": "https://github.com/rust-lang/rust/commit/91d913168cf357d4c7ba9b91d4656065477e3c2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d913168cf357d4c7ba9b91d4656065477e3c2c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "html_url": "https://github.com/rust-lang/rust/commit/fb9e171ab7b0303fc983b6955e684ebb2a0f5944"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "2a0536a1af72d66e2de2dedb9e14f6ce46f79c13", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91d913168cf357d4c7ba9b91d4656065477e3c2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d913168cf357d4c7ba9b91d4656065477e3c2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=91d913168cf357d4c7ba9b91d4656065477e3c2c", "patch": "@@ -23,7 +23,7 @@ use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n-use rustc_target::spec::abi;\n+use rustc_target::spec::abi::{self, Abi};\n use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::fmt;\n@@ -1403,6 +1403,18 @@ impl<'tcx> PolyFnSig<'tcx> {\n     pub fn abi(&self) -> abi::Abi {\n         self.skip_binder().abi\n     }\n+\n+    pub fn is_fn_trait_compatible(&self) -> bool {\n+        matches!(\n+            self.skip_binder(),\n+            ty::FnSig {\n+                unsafety: rustc_hir::Unsafety::Normal,\n+                abi: Abi::Rust,\n+                c_variadic: false,\n+                ..\n+            }\n+        )\n+    }\n }\n \n pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;"}, {"sha": "ecebe3fbcfb599e608d6816a1632b5b628a09fd0", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91d913168cf357d4c7ba9b91d4656065477e3c2c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d913168cf357d4c7ba9b91d4656065477e3c2c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=91d913168cf357d4c7ba9b91d4656065477e3c2c", "patch": "@@ -2,7 +2,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id::DefId, Movability, Mutability};\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n-use rustc_target::spec::abi::Abi;\n \n use crate::solve::EvalCtxt;\n \n@@ -197,13 +196,7 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         )),\n         // keep this in sync with assemble_fn_pointer_candidates until the old solver is removed.\n         ty::FnPtr(sig) => {\n-            if let ty::FnSig {\n-                unsafety: rustc_hir::Unsafety::Normal,\n-                abi: Abi::Rust,\n-                c_variadic: false,\n-                ..\n-            } = sig.skip_binder()\n-            {\n+            if sig.is_fn_trait_compatible() {\n                 Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output()))))\n             } else {\n                 Err(NoSolution)"}, {"sha": "e06eff34df21a4cf6c9cf347d8b7498b872c77aa", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91d913168cf357d4c7ba9b91d4656065477e3c2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d913168cf357d4c7ba9b91d4656065477e3c2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=91d913168cf357d4c7ba9b91d4656065477e3c2c", "patch": "@@ -11,7 +11,6 @@ use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_middle::ty::fast_reject::TreatProjections;\n use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n-use rustc_target::spec::abi::Abi;\n \n use crate::traits;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -302,31 +301,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 candidates.ambiguous = true; // Could wind up being a fn() type.\n             }\n             // Provide an impl, but only for suitable `fn` pointers.\n-            ty::FnPtr(_) => {\n-                if let ty::FnSig {\n-                    unsafety: hir::Unsafety::Normal,\n-                    abi: Abi::Rust,\n-                    c_variadic: false,\n-                    ..\n-                } = self_ty.fn_sig(self.tcx()).skip_binder()\n-                {\n+            ty::FnPtr(sig) => {\n+                if sig.is_fn_trait_compatible() {\n                     candidates.vec.push(FnPointerCandidate { is_const: false });\n                 }\n             }\n             // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).\n             ty::FnDef(def_id, _) => {\n-                if let ty::FnSig {\n-                    unsafety: hir::Unsafety::Normal,\n-                    abi: Abi::Rust,\n-                    c_variadic: false,\n-                    ..\n-                } = self_ty.fn_sig(self.tcx()).skip_binder()\n+                if self.tcx().fn_sig(def_id).skip_binder().is_fn_trait_compatible()\n+                    && self.tcx().codegen_fn_attrs(def_id).target_features.is_empty()\n                 {\n-                    if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {\n-                        candidates\n-                            .vec\n-                            .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });\n-                    }\n+                    candidates\n+                        .vec\n+                        .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });\n                 }\n             }\n             _ => {}"}]}