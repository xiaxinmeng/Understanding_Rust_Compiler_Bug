{"sha": "a6993d6469f73adab1bc2a73e148d1caad0ab257", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OTkzZDY0NjlmNzNhZGFiMWJjMmE3M2UxNDhkMWNhYWQwYWIyNTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-29T23:28:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-30T09:27:57Z"}, "message": "resolve: Fix instability in import suggestions", "tree": {"sha": "4e63cb6c1a25dc344d2f4b066de39257cdf37476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e63cb6c1a25dc344d2f4b066de39257cdf37476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6993d6469f73adab1bc2a73e148d1caad0ab257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6993d6469f73adab1bc2a73e148d1caad0ab257", "html_url": "https://github.com/rust-lang/rust/commit/a6993d6469f73adab1bc2a73e148d1caad0ab257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6993d6469f73adab1bc2a73e148d1caad0ab257/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "html_url": "https://github.com/rust-lang/rust/commit/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9"}], "stats": {"total": 129, "additions": 55, "deletions": 74}, "files": [{"sha": "a907b5399acc76f7060370b64614ce6f21f07e2c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a6993d6469f73adab1bc2a73e148d1caad0ab257", "patch": "@@ -546,7 +546,7 @@ impl<'a> PathSource<'a> {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub enum Namespace {\n     TypeNS,\n     ValueNS,\n@@ -898,6 +898,19 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n+    fn for_each_child_stable<F: FnMut(Ident, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n+        let resolutions = self.resolutions.borrow();\n+        let mut resolutions = resolutions.iter().map(|(&(ident, ns), &resolution)| {\n+                                                    // Pre-compute keys for sorting\n+                                                    (ident.name.as_str(), ns, ident, resolution)\n+                                                })\n+                                                .collect::<Vec<_>>();\n+        resolutions.sort_unstable_by_key(|&(str, ns, ..)| (str, ns));\n+        for &(_, ns, ident, resolution) in resolutions.iter() {\n+            resolution.borrow().binding.map(|binding| f(ident, ns, binding));\n+        }\n+    }\n+\n     fn def(&self) -> Option<Def> {\n         match self.kind {\n             ModuleKind::Def(def, _) => Some(def),\n@@ -3351,8 +3364,9 @@ impl<'a> Resolver<'a> {\n                         in_module_is_extern)) = worklist.pop() {\n             self.populate_module_if_necessary(in_module);\n \n-            in_module.for_each_child(|ident, ns, name_binding| {\n-\n+            // We have to visit module children in deterministic order to avoid\n+            // instabilities in reported imports (#43552).\n+            in_module.for_each_child_stable(|ident, ns, name_binding| {\n                 // avoid imports entirely\n                 if name_binding.is_import() && !name_binding.is_extern_crate() { return; }\n                 // avoid non-importable candidates as well"}, {"sha": "e49f1f28e5f1db904603d9b282e78b8003850ad6", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=a6993d6469f73adab1bc2a73e148d1caad0ab257", "patch": "@@ -326,7 +326,7 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n /// destroyed. In particular, they must not access string contents. This can\n /// be fixed in the future by just leaking all strings until thread death\n /// somehow.\n-#[derive(Clone, Hash, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n pub struct InternedString {\n     string: &'static str,\n }"}, {"sha": "c09e56cbc5bcaeeaf15e7238b45e82bc8cd55e33", "filename": "src/test/compile-fail/issue-35675.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -1,67 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// these two HELPs are actually in a new line between this line and the `enum Fruit` line\n-enum Fruit { //~ HELP possible candidate is found in another module, you can import it into scope\n-    //~^ HELP possible candidate is found in another module, you can import it into scope\n-    Apple(i64),\n-    Orange(i64),\n-}\n-\n-fn should_return_fruit() -> Apple {\n-    //~^ ERROR cannot find type `Apple` in this scope\n-    //~| NOTE not found in this scope\n-    //~| HELP you can try using the variant's enum\n-    Apple(5)\n-    //~^ ERROR cannot find function `Apple` in this scope\n-    //~| NOTE not found in this scope\n-}\n-\n-fn should_return_fruit_too() -> Fruit::Apple {\n-    //~^ ERROR expected type, found variant `Fruit::Apple`\n-    //~| HELP you can try using the variant's enum\n-    //~| NOTE not a type\n-    Apple(5)\n-    //~^ ERROR cannot find function `Apple` in this scope\n-    //~| NOTE not found in this scope\n-}\n-\n-fn foo() -> Ok {\n-    //~^ ERROR expected type, found variant `Ok`\n-    //~| NOTE not a type\n-    //~| HELP there is an enum variant\n-    //~| HELP there is an enum variant\n-    Ok(())\n-}\n-\n-fn bar() -> Variant3 {\n-    //~^ ERROR cannot find type `Variant3` in this scope\n-    //~| HELP you can try using the variant's enum\n-    //~| NOTE not found in this scope\n-}\n-\n-fn qux() -> Some {\n-    //~^ ERROR expected type, found variant `Some`\n-    //~| NOTE not a type\n-    //~| HELP there is an enum variant\n-    //~| HELP there is an enum variant\n-    Some(1)\n-}\n-\n-fn main() {}\n-\n-mod x {\n-    enum Enum {\n-        Variant1,\n-        Variant2(),\n-        Variant3(usize),\n-        Variant4 {},\n-    }\n-}"}, {"sha": "001c1f2eddca1e3ccbeabaf58450b6296547847c", "filename": "src/test/ui/issue-35675.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Ftest%2Fui%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Ftest%2Fui%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.rs?ref=a6993d6469f73adab1bc2a73e148d1caad0ab257", "patch": "@@ -33,11 +33,27 @@ fn should_return_fruit_too() -> Fruit::Apple {\n     //~| NOTE not found in this scope\n }\n \n+fn foo() -> Ok {\n+    //~^ ERROR expected type, found variant `Ok`\n+    //~| NOTE not a type\n+    //~| HELP there is an enum variant\n+    //~| HELP there is an enum variant\n+    Ok(())\n+}\n+\n fn bar() -> Variant3 {\n     //~^ ERROR cannot find type `Variant3` in this scope\n     //~| NOTE not found in this scope\n }\n \n+fn qux() -> Some {\n+    //~^ ERROR expected type, found variant `Some`\n+    //~| NOTE not a type\n+    //~| HELP there is an enum variant\n+    //~| HELP there is an enum variant\n+    Some(1)\n+}\n+\n fn main() {}\n \n mod x {"}, {"sha": "ed330f47208ebfd1fdbf6125328989c158ad3724", "filename": "src/test/ui/issue-35675.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Ftest%2Fui%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6993d6469f73adab1bc2a73e148d1caad0ab257/src%2Ftest%2Fui%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.stderr?ref=a6993d6469f73adab1bc2a73e148d1caad0ab257", "patch": "@@ -38,14 +38,32 @@ help: possible candidate is found in another module, you can import it into scop\n 12 | use Fruit::Apple;\n    |\n \n-error[E0412]: cannot find type `Variant3` in this scope\n+error[E0573]: expected type, found variant `Ok`\n   --> $DIR/issue-35675.rs:36:13\n    |\n-36 | fn bar() -> Variant3 {\n+36 | fn foo() -> Ok {\n+   |             ^^ not a type\n+   |\n+   = help: there is an enum variant `std::prelude::v1::Ok`, try using `std::prelude::v1`?\n+   = help: there is an enum variant `std::result::Result::Ok`, try using `std::result::Result`?\n+\n+error[E0412]: cannot find type `Variant3` in this scope\n+  --> $DIR/issue-35675.rs:44:13\n+   |\n+44 | fn bar() -> Variant3 {\n    |             ^^^^^^^^\n    |             |\n    |             not found in this scope\n    |             help: you can try using the variant's enum: `x::Enum`\n \n-error: aborting due to 5 previous errors\n+error[E0573]: expected type, found variant `Some`\n+  --> $DIR/issue-35675.rs:49:13\n+   |\n+49 | fn qux() -> Some {\n+   |             ^^^^ not a type\n+   |\n+   = help: there is an enum variant `std::prelude::v1::Option::Some`, try using `std::prelude::v1::Option`?\n+   = help: there is an enum variant `std::prelude::v1::Some`, try using `std::prelude::v1`?\n+\n+error: aborting due to 7 previous errors\n "}]}