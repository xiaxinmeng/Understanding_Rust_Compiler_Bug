{"sha": "61b6f6588402123ee20467f7df9863a9194d4fe2", "node_id": "C_kwDOAAsO6NoAKDYxYjZmNjU4ODQwMjEyM2VlMjA0NjdmN2RmOTg2M2E5MTk0ZDRmZTI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-04-28T19:55:14Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-04-29T20:53:10Z"}, "message": "Get `repr` information through `AdtDef` for foreign items", "tree": {"sha": "47effa36b836e88762e413ec5dda6edf6f4c0f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47effa36b836e88762e413ec5dda6edf6f4c0f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61b6f6588402123ee20467f7df9863a9194d4fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61b6f6588402123ee20467f7df9863a9194d4fe2", "html_url": "https://github.com/rust-lang/rust/commit/61b6f6588402123ee20467f7df9863a9194d4fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61b6f6588402123ee20467f7df9863a9194d4fe2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344dd0e82805ce18d0569e9da8e14a7f0a9fdefe", "url": "https://api.github.com/repos/rust-lang/rust/commits/344dd0e82805ce18d0569e9da8e14a7f0a9fdefe", "html_url": "https://github.com/rust-lang/rust/commit/344dd0e82805ce18d0569e9da8e14a7f0a9fdefe"}], "stats": {"total": 93, "additions": 72, "deletions": 21}, "files": [{"sha": "55b249f8bbf83c394eabfe563c730849968d7695", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/61b6f6588402123ee20467f7df9863a9194d4fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b6f6588402123ee20467f7df9863a9194d4fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=61b6f6588402123ee20467f7df9863a9194d4fe2", "patch": "@@ -849,10 +849,10 @@ fn assoc_method(\n     let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n         header_len += 4;\n         let indent_str = \"    \";\n-        write!(w, \"{}\", render_attributes_in_pre(meth, indent_str));\n+        write!(w, \"{}\", render_attributes_in_pre(meth, indent_str, tcx));\n         (4, indent_str, Ending::NoNewline)\n     } else {\n-        render_attributes_in_code(w, meth);\n+        render_attributes_in_code(w, meth, tcx);\n         (0, \"\", Ending::Newline)\n     };\n     w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fn\\\">{\".len() + \"</a>\".len());\n@@ -1024,8 +1024,12 @@ fn render_assoc_item(\n const ALLOWED_ATTRIBUTES: &[Symbol] =\n     &[sym::export_name, sym::link_section, sym::no_mangle, sym::repr, sym::non_exhaustive];\n \n-fn attributes(it: &clean::Item) -> Vec<String> {\n-    it.attrs\n+fn attributes(it: &clean::Item, tcx: TyCtxt<'_>) -> Vec<String> {\n+    use rustc_abi::IntegerType;\n+    use rustc_middle::ty::ReprFlags;\n+\n+    let mut attrs: Vec<String> = it\n+        .attrs\n         .other_attrs\n         .iter()\n         .filter_map(|attr| {\n@@ -1040,17 +1044,62 @@ fn attributes(it: &clean::Item) -> Vec<String> {\n                 None\n             }\n         })\n-        .collect()\n+        .collect();\n+    if let Some(def_id) = it.item_id.as_def_id() &&\n+        !def_id.is_local() &&\n+        // This check is needed because `adt_def` will panic if not a compatible type otherwise...\n+        matches!(it.type_(), ItemType::Struct | ItemType::Enum | ItemType::Union)\n+    {\n+        let repr = tcx.adt_def(def_id).repr();\n+        let mut out = Vec::new();\n+        if repr.flags.contains(ReprFlags::IS_C) {\n+            out.push(\"C\");\n+        }\n+        if repr.flags.contains(ReprFlags::IS_TRANSPARENT) {\n+            out.push(\"transparent\");\n+        }\n+        if repr.flags.contains(ReprFlags::IS_SIMD) {\n+            out.push(\"simd\");\n+        }\n+        let pack_s;\n+        if let Some(pack) = repr.pack {\n+            pack_s = format!(\"packed({})\", pack.bytes());\n+            out.push(&pack_s);\n+        }\n+        let align_s;\n+        if let Some(align) = repr.align {\n+            align_s = format!(\"align({})\", align.bytes());\n+            out.push(&align_s);\n+        }\n+        let int_s;\n+        if let Some(int) = repr.int {\n+            int_s = match int {\n+                IntegerType::Pointer(is_signed) => {\n+                    format!(\"{}size\", if is_signed { 'i' } else { 'u' })\n+                }\n+                IntegerType::Fixed(size, is_signed) => {\n+                    format!(\"{}{}\", if is_signed { 'i' } else { 'u' }, size.size().bytes() * 8)\n+                }\n+            };\n+            out.push(&int_s);\n+        }\n+        if out.is_empty() {\n+            return Vec::new();\n+        }\n+        attrs.push(format!(\"#[repr({})]\", out.join(\", \")));\n+    }\n+    attrs\n }\n \n // When an attribute is rendered inside a `<pre>` tag, it is formatted using\n // a whitespace prefix and newline.\n-fn render_attributes_in_pre<'a>(\n+fn render_attributes_in_pre<'a, 'b: 'a>(\n     it: &'a clean::Item,\n     prefix: &'a str,\n-) -> impl fmt::Display + Captures<'a> {\n+    tcx: TyCtxt<'b>,\n+) -> impl fmt::Display + Captures<'a> + Captures<'b> {\n     crate::html::format::display_fn(move |f| {\n-        for a in attributes(it) {\n+        for a in attributes(it, tcx) {\n             writeln!(f, \"{}{}\", prefix, a)?;\n         }\n         Ok(())\n@@ -1059,8 +1108,8 @@ fn render_attributes_in_pre<'a>(\n \n // When an attribute is rendered inside a <code> tag, it is formatted using\n // a div to produce a newline after it.\n-fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item) {\n-    for a in attributes(it) {\n+fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item, tcx: TyCtxt<'_>) {\n+    for a in attributes(it, tcx) {\n         write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n     }\n }"}, {"sha": "40f69189a8eba2147e75d5a9ed2cf7fffa299ce7", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61b6f6588402123ee20467f7df9863a9194d4fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b6f6588402123ee20467f7df9863a9194d4fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=61b6f6588402123ee20467f7df9863a9194d4fe2", "patch": "@@ -548,7 +548,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n             w,\n             \"{attrs}{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", tcx),\n             vis = visibility,\n             constness = constness,\n             asyncness = asyncness,\n@@ -589,7 +589,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             it.name.unwrap(),\n             t.generics.print(cx),\n             bounds,\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", tcx),\n         );\n \n         if !t.generics.where_predicates.is_empty() {\n@@ -1063,7 +1063,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n             t.generics.print(cx),\n             print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds(&t.bounds, true, cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n         );\n     });\n \n@@ -1085,7 +1085,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n             t.generics.print(cx),\n             where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds = bounds(&t.bounds, false, cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n         );\n     });\n \n@@ -1109,7 +1109,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n                 t.generics.print(cx),\n                 where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 type_ = t.type_.print(cx),\n-                attrs = render_attributes_in_pre(it, \"\"),\n+                attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n             );\n         });\n     }\n@@ -1168,7 +1168,8 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n             &'b self,\n         ) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n             display_fn(move |f| {\n-                let v = render_attributes_in_pre(self.it, \"\");\n+                let tcx = self.cx.borrow().tcx();\n+                let v = render_attributes_in_pre(self.it, \"\", tcx);\n                 write!(f, \"{v}\")\n             })\n         }\n@@ -1250,7 +1251,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n             visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n             it.name.unwrap(),\n             e.generics.print(cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", tcx),\n         );\n         if !print_where_clause_and_check(w, &e.generics, cx) {\n             // If there wasn't a `where` clause, we add a whitespace.\n@@ -1445,7 +1446,7 @@ fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     wrap_item(w, |w| {\n         let tcx = cx.tcx();\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, tcx);\n \n         write!(\n             w,\n@@ -1492,7 +1493,7 @@ fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &cle\n \n fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_item(w, |w| {\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n     });\n \n@@ -1542,7 +1543,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n \n fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n     wrap_item(w, |w| {\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         write!(\n             w,\n             \"{vis}static {mutability}{name}: {typ}\",\n@@ -1558,7 +1559,7 @@ fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n     wrap_item(w, |w| {\n         w.write_str(\"extern {\\n\");\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         write!(\n             w,\n             \"    {}type {};\\n}}\","}, {"sha": "eb589bb2414f4426c48ca4f0c364c89940e1f9b1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61b6f6588402123ee20467f7df9863a9194d4fe2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b6f6588402123ee20467f7df9863a9194d4fe2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=61b6f6588402123ee20467f7df9863a9194d4fe2", "patch": "@@ -33,6 +33,7 @@ extern crate tracing;\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n \n extern crate pulldown_cmark;\n+extern crate rustc_abi;\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;"}]}