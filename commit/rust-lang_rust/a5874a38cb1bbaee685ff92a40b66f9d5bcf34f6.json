{"sha": "a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ODc0YTM4Y2IxYmJhZWU2ODVmZjkyYTQwYjY2ZjlkNWJjZjM0ZjY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-20T18:20:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-20T18:20:55Z"}, "message": "Reduce code duplication in pattern completion", "tree": {"sha": "90997c417f7249cb0f6073a4a37159a401ae5eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90997c417f7249cb0f6073a4a37159a401ae5eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6", "html_url": "https://github.com/rust-lang/rust/commit/a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "html_url": "https://github.com/rust-lang/rust/commit/2f6a24950a555bdfecbda7a50735d643f9d0e7f9"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "cfe2116bd2c29d2bf4d84b705525c626685b45a6", "filename": "crates/completion/src/render/pattern.rs", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs?ref=a5874a38cb1bbaee685ff92a40b66f9d5bcf34f6", "patch": "@@ -8,8 +8,8 @@ use crate::{\n     CompletionItemKind,\n };\n \n-pub(crate) fn render_struct_pat<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_struct_pat(\n+    ctx: RenderContext<'_>,\n     strukt: hir::Struct,\n     local_name: Option<Name>,\n ) -> Option<CompletionItem> {\n@@ -30,24 +30,7 @@ pub(crate) fn render_struct_pat<'a>(\n     let fields_omitted = n_fields - fields.len() > 0;\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_string();\n-    let mut pat = match strukt.kind(ctx.db()) {\n-        StructKind::Tuple if ctx.snippet_cap().is_some() => {\n-            render_tuple_as_pat(&fields, &name, fields_omitted)\n-        }\n-        StructKind::Record => {\n-            render_record_as_pat(ctx.db(), ctx.snippet_cap(), &fields, &name, fields_omitted)\n-        }\n-        _ => return None,\n-    };\n-\n-    if ctx.completion.is_param {\n-        pat.push(':');\n-        pat.push(' ');\n-        pat.push_str(&name);\n-    }\n-    if ctx.snippet_cap().is_some() {\n-        pat.push_str(\"$0\");\n-    }\n+    let pat = render_pat(&ctx, &name, strukt.kind(ctx.db()), &fields, fields_omitted)?;\n \n     let mut completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n         .kind(CompletionItemKind::Binding)\n@@ -62,8 +45,8 @@ pub(crate) fn render_struct_pat<'a>(\n     Some(completion.build())\n }\n \n-pub(crate) fn render_variant_pat<'a>(\n-    ctx: RenderContext<'a>,\n+pub(crate) fn render_variant_pat(\n+    ctx: RenderContext<'_>,\n     variant: hir::Variant,\n     local_name: Option<Name>,\n ) -> Option<CompletionItem> {\n@@ -80,7 +63,29 @@ pub(crate) fn render_variant_pat<'a>(\n     let fields_omitted = n_fields - fields.len() > 0;\n \n     let name = local_name.unwrap_or_else(|| variant.name(ctx.db())).to_string();\n-    let mut pat = match variant.kind(ctx.db()) {\n+    let pat = render_pat(&ctx, &name, variant.kind(ctx.db()), &fields, fields_omitted)?;\n+\n+    let mut completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n+        .kind(CompletionItemKind::Binding)\n+        .set_documentation(ctx.docs(variant))\n+        .set_deprecated(ctx.is_deprecated(variant))\n+        .detail(&pat);\n+    if let Some(snippet_cap) = ctx.snippet_cap() {\n+        completion = completion.insert_snippet(snippet_cap, pat);\n+    } else {\n+        completion = completion.insert_text(pat);\n+    }\n+    Some(completion.build())\n+}\n+\n+fn render_pat(\n+    ctx: &RenderContext<'_>,\n+    name: &str,\n+    kind: StructKind,\n+    fields: &[hir::Field],\n+    fields_omitted: bool,\n+) -> Option<String> {\n+    let mut pat = match kind {\n         StructKind::Tuple if ctx.snippet_cap().is_some() => {\n             render_tuple_as_pat(&fields, &name, fields_omitted)\n         }\n@@ -98,17 +103,7 @@ pub(crate) fn render_variant_pat<'a>(\n     if ctx.snippet_cap().is_some() {\n         pat.push_str(\"$0\");\n     }\n-    let mut completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n-        .kind(CompletionItemKind::Binding)\n-        .set_documentation(ctx.docs(variant))\n-        .set_deprecated(ctx.is_deprecated(variant))\n-        .detail(&pat);\n-    if let Some(snippet_cap) = ctx.snippet_cap() {\n-        completion = completion.insert_snippet(snippet_cap, pat);\n-    } else {\n-        completion = completion.insert_text(pat);\n-    }\n-    Some(completion.build())\n+    Some(pat)\n }\n \n fn render_record_as_pat("}]}