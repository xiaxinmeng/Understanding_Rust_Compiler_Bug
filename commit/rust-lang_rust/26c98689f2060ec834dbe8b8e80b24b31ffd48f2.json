{"sha": "26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "node_id": "C_kwDOAAsO6NoAKDI2Yzk4Njg5ZjIwNjBlYzgzNGRiZThiOGU4MGIyNGIzMWZmZDQ4ZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T10:26:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T10:26:57Z"}, "message": "Auto merge of #108233 - ChrisDenton:move-std-tests, r=thomcc\n\nMove some std tests from `tests/ui-fulldeps` into `library/std`\n\nThis allows them to be tested normally along with other `./x test std` tests. Moving `rename_directory` is simple enough but `create_dir_all_bare` needed to be an std integration test.\n\nAdditionally, some tests that I couldn't move atm have instead been placed in an `std` subdirectory. These tests include ones that do fun things with processes or that intentionally abort the test process.\n\nr? libs", "tree": {"sha": "3cf8d712ece40242a743bd3a9350c0dcb6dd8161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf8d712ece40242a743bd3a9350c0dcb6dd8161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "html_url": "https://github.com/rust-lang/rust/commit/26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "html_url": "https://github.com/rust-lang/rust/commit/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb"}, {"sha": "0f221cc034f1f9bc30e2e2bcf37b3fc2ddb0ecf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f221cc034f1f9bc30e2e2bcf37b3fc2ddb0ecf2", "html_url": "https://github.com/rust-lang/rust/commit/0f221cc034f1f9bc30e2e2bcf37b3fc2ddb0ecf2"}], "stats": {"total": 168, "additions": 115, "deletions": 53}, "files": [{"sha": "909d9bf4093b36d6d4f7f93dd2f9bd43431d49ca", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "patch": "@@ -1595,3 +1595,19 @@ fn test_read_dir_infinite_loop() {\n     // Check for duplicate errors\n     assert!(dir.filter(|e| e.is_err()).take(2).count() < 2);\n }\n+\n+#[test]\n+fn rename_directory() {\n+    let tmpdir = tmpdir();\n+    let old_path = tmpdir.join(\"foo/bar/baz\");\n+    fs::create_dir_all(&old_path).unwrap();\n+    let test_file = &old_path.join(\"temp.txt\");\n+\n+    File::create(test_file).unwrap();\n+\n+    let new_path = tmpdir.join(\"quux/blat\");\n+    fs::create_dir_all(&new_path).unwrap();\n+    fs::rename(&old_path, &new_path.join(\"newdir\")).unwrap();\n+    assert!(new_path.join(\"newdir\").is_dir());\n+    assert!(new_path.join(\"newdir/temp.txt\").exists());\n+}"}, {"sha": "fce220223a055dd3d18c9b35a42866a25fff0317", "filename": "library/std/tests/common/mod.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Ftests%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Ftests%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Fcommon%2Fmod.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "patch": "@@ -0,0 +1,58 @@\n+#![allow(unused)]\n+\n+use std::env;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n+use std::thread;\n+use rand::RngCore;\n+\n+/// Copied from `std::test_helpers::test_rng`, since these tests rely on the\n+/// seed not being the same for every RNG invocation too.\n+#[track_caller]\n+pub(crate) fn test_rng() -> rand_xorshift::XorShiftRng {\n+    use core::hash::{BuildHasher, Hash, Hasher};\n+    let mut hasher = std::collections::hash_map::RandomState::new().build_hasher();\n+    core::panic::Location::caller().hash(&mut hasher);\n+    let hc64 = hasher.finish();\n+    let seed_vec = hc64.to_le_bytes().into_iter().chain(0u8..8).collect::<Vec<u8>>();\n+    let seed: [u8; 16] = seed_vec.as_slice().try_into().unwrap();\n+    rand::SeedableRng::from_seed(seed)\n+}\n+\n+// Copied from std::sys_common::io\n+pub struct TempDir(PathBuf);\n+\n+impl TempDir {\n+    pub fn join(&self, path: &str) -> PathBuf {\n+        let TempDir(ref p) = *self;\n+        p.join(path)\n+    }\n+\n+    pub fn path(&self) -> &Path {\n+        let TempDir(ref p) = *self;\n+        p\n+    }\n+}\n+\n+impl Drop for TempDir {\n+    fn drop(&mut self) {\n+        // Gee, seeing how we're testing the fs module I sure hope that we\n+        // at least implement this correctly!\n+        let TempDir(ref p) = *self;\n+        let result = fs::remove_dir_all(p);\n+        // Avoid panicking while panicking as this causes the process to\n+        // immediately abort, without displaying test results.\n+        if !thread::panicking() {\n+            result.unwrap();\n+        }\n+    }\n+}\n+\n+#[track_caller] // for `test_rng`\n+pub fn tmpdir() -> TempDir {\n+    let p = env::temp_dir();\n+    let mut r = test_rng();\n+    let ret = p.join(&format!(\"rust-{}\", r.next_u32()));\n+    fs::create_dir(&ret).unwrap();\n+    TempDir(ret)\n+}"}, {"sha": "fe789323f97c0ddb371e25f9c96320c99e1f32eb", "filename": "library/std/tests/create_dir_all_bare.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Ftests%2Fcreate_dir_all_bare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Ftests%2Fcreate_dir_all_bare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Fcreate_dir_all_bare.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "patch": "@@ -0,0 +1,39 @@\n+#![cfg(all(test, not(any(target_os = \"emscripten\", target_env = \"sgx\"))))]\n+\n+//! Note that this test changes the current directory so\n+//! should not be in the same process as other tests.\n+use std::env;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n+\n+mod common;\n+\n+// On some platforms, setting the current directory will prevent deleting it.\n+// So this helper ensures the current directory is reset.\n+struct CurrentDir(PathBuf);\n+impl CurrentDir {\n+    fn new() -> Self {\n+        Self(env::current_dir().unwrap())\n+    }\n+    fn set(&self, path: &Path) {\n+        env::set_current_dir(path).unwrap();\n+    }\n+    fn with(path: &Path, f: impl FnOnce()) {\n+        let current_dir = Self::new();\n+        current_dir.set(path);\n+        f();\n+    }\n+}\n+impl Drop for CurrentDir {\n+    fn drop(&mut self) {\n+        env::set_current_dir(&self.0).unwrap();\n+    }\n+}\n+\n+#[test]\n+fn create_dir_all_bare() {\n+    let tmpdir = common::tmpdir();\n+    CurrentDir::with(tmpdir.path(), || {\n+        fs::create_dir_all(\"create-dir-all-bare\").unwrap();\n+    });\n+}"}, {"sha": "96b4f372b8b1094eaed922d7caea33a47350968b", "filename": "library/std/tests/env.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Ftests%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/library%2Fstd%2Ftests%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Fenv.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "patch": "@@ -3,18 +3,8 @@ use std::ffi::{OsStr, OsString};\n \n use rand::distributions::{Alphanumeric, DistString};\n \n-/// Copied from `std::test_helpers::test_rng`, since these tests rely on the\n-/// seed not being the same for every RNG invocation too.\n-#[track_caller]\n-pub(crate) fn test_rng() -> rand_xorshift::XorShiftRng {\n-    use core::hash::{BuildHasher, Hash, Hasher};\n-    let mut hasher = std::collections::hash_map::RandomState::new().build_hasher();\n-    core::panic::Location::caller().hash(&mut hasher);\n-    let hc64 = hasher.finish();\n-    let seed_vec = hc64.to_le_bytes().into_iter().chain(0u8..8).collect::<Vec<u8>>();\n-    let seed: [u8; 16] = seed_vec.as_slice().try_into().unwrap();\n-    rand::SeedableRng::from_seed(seed)\n-}\n+mod common;\n+use common::test_rng;\n \n #[track_caller]\n fn make_rand_name() -> OsString {"}, {"sha": "4554680ec2470adcde055d03b783e55efa1aeb4f", "filename": "tests/ui-fulldeps/create-dir-all-bare.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fui-fulldeps%2Fcreate-dir-all-bare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fui-fulldeps%2Fcreate-dir-all-bare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fcreate-dir-all-bare.rs?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -1,11 +0,0 @@\n-// run-pass\n-\n-use std::env;\n-use std::fs;\n-use std::path::PathBuf;\n-\n-fn main() {\n-    let path = PathBuf::from(env::var_os(\"RUST_TEST_TMPDIR\").unwrap());\n-    env::set_current_dir(&path).unwrap();\n-    fs::create_dir_all(\"create-dir-all-bare\").unwrap();\n-}"}, {"sha": "8fc340cb9187214794c071230ae4f8eab2910baf", "filename": "tests/ui-fulldeps/rename-directory.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fui-fulldeps%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fui-fulldeps%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Frename-directory.rs?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -1,30 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_must_use)]\n-#![allow(unused_imports)]\n-// This test can't be a unit test in std,\n-// because it needs TempDir, which is in extra\n-\n-// ignore-cross-compile\n-\n-use std::env;\n-use std::ffi::CString;\n-use std::fs::{self, File};\n-use std::path::PathBuf;\n-\n-fn rename_directory() {\n-    let tmpdir = PathBuf::from(env::var_os(\"RUST_TEST_TMPDIR\").unwrap());\n-    let old_path = tmpdir.join(\"foo/bar/baz\");\n-    fs::create_dir_all(&old_path).unwrap();\n-    let test_file = &old_path.join(\"temp.txt\");\n-\n-    File::create(test_file).unwrap();\n-\n-    let new_path = tmpdir.join(\"quux/blat\");\n-    fs::create_dir_all(&new_path).unwrap();\n-    fs::rename(&old_path, &new_path.join(\"newdir\"));\n-    assert!(new_path.join(\"newdir\").is_dir());\n-    assert!(new_path.join(\"newdir/temp.txt\").exists());\n-}\n-\n-pub fn main() { rename_directory() }"}, {"sha": "064472f5785a1f80823eca178058754472deaf48", "filename": "tests/ui-fulldeps/std/issue-15149.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstd%2Fissue-15149.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "previous_filename": "tests/ui-fulldeps/issue-15149.rs"}, {"sha": "fdf1150f8d25a7fb22f499a48cd033453819bcd8", "filename": "tests/ui-fulldeps/std/issue-81357-unsound-file-methods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fissue-81357-unsound-file-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fissue-81357-unsound-file-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstd%2Fissue-81357-unsound-file-methods.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "previous_filename": "tests/ui-fulldeps/issue-81357-unsound-file-methods.rs"}, {"sha": "fef9f27fcdffd0addc7ce13de50668ba6e766519", "filename": "tests/ui-fulldeps/std/stdio-from.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fstdio-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fstdio-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstd%2Fstdio-from.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "previous_filename": "tests/ui-fulldeps/stdio-from.rs"}, {"sha": "e9501a809308bd9bed50724c3d830558149331b3", "filename": "tests/ui-fulldeps/std/switch-stdout.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fswitch-stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c98689f2060ec834dbe8b8e80b24b31ffd48f2/tests%2Fui-fulldeps%2Fstd%2Fswitch-stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstd%2Fswitch-stdout.rs?ref=26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "previous_filename": "tests/ui-fulldeps/switch-stdout.rs"}]}