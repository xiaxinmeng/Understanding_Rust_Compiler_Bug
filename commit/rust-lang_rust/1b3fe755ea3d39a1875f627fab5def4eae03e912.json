{"sha": "1b3fe755ea3d39a1875f627fab5def4eae03e912", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiM2ZlNzU1ZWEzZDM5YTE4NzVmNjI3ZmFiNWRlZjRlYWUwM2U5MTI=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-09-11T14:47:28Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-09-11T14:55:14Z"}, "message": "Allow simd_shuffle to accept vectors of any length", "tree": {"sha": "a2fc1b6f1ffd29360478062716f30da422eb7945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2fc1b6f1ffd29360478062716f30da422eb7945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b3fe755ea3d39a1875f627fab5def4eae03e912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3fe755ea3d39a1875f627fab5def4eae03e912", "html_url": "https://github.com/rust-lang/rust/commit/1b3fe755ea3d39a1875f627fab5def4eae03e912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b3fe755ea3d39a1875f627fab5def4eae03e912/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69fe57261086e70aea9d5b58819a1794bf7c121", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69fe57261086e70aea9d5b58819a1794bf7c121", "html_url": "https://github.com/rust-lang/rust/commit/b69fe57261086e70aea9d5b58819a1794bf7c121"}], "stats": {"total": 158, "additions": 125, "deletions": 33}, "files": [{"sha": "f6219b06d2d6c37f46164eedab0b4bd7b3c7aa12", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -918,12 +918,29 @@ fn generic_simd_intrinsic(\n     }\n \n     if let Some(stripped) = name_str.strip_prefix(\"simd_shuffle\") {\n-        let n: u64 = stripped.parse().unwrap_or_else(|_| {\n-            span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n-        });\n+        // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n+        // If there is no suffix, use the index array length.\n+        let n: u64 = if stripped.is_empty() {\n+            // Make sure this is actually an array, since typeck only checks the length-suffixed\n+            // version of this intrinsic.\n+            match args[2].layout.ty.kind() {\n+                ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n+                    len.try_eval_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n+                        span_bug!(span, \"could not evaluate shuffle index array length\")\n+                    })\n+                }\n+                _ => return_error!(\n+                    \"simd_shuffle index must be an array of `u32`, got `{}`\",\n+                    args[2].layout.ty\n+                ),\n+            }\n+        } else {\n+            stripped.parse().unwrap_or_else(|_| {\n+                span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n+            })\n+        };\n \n         require_simd!(ret_ty, \"return\");\n-\n         let (out_len, out_ty) = ret_ty.simd_size_and_type(bx.tcx());\n         require!(\n             out_len == n,"}, {"sha": "24268aef2222a8b51a0093b36abc97c73951faad", "filename": "compiler/rustc_error_codes/src/error_codes/E0439.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0439.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0439.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0439.md?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n The length of the platform-intrinsic function `simd_shuffle` wasn't specified.\n \n Erroneous code example:\n \n-```compile_fail,E0439\n+```ignore (no longer emitted)\n #![feature(platform_intrinsics)]\n \n extern \"platform-intrinsic\" {"}, {"sha": "e96005ec7b68aa96353b47b0106824648d139f77", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -1210,6 +1210,7 @@ symbols! {\n         simd_select_bitmask,\n         simd_shl,\n         simd_shr,\n+        simd_shuffle,\n         simd_sub,\n         simd_trunc,\n         simd_xor,"}, {"sha": "ff7a26853b1885c273d22baeeb8d36b9514ff7ed", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -2,7 +2,7 @@\n //! intrinsics that the compiler exposes.\n \n use crate::errors::{\n-    SimdShuffleMissingLength, UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n+    UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n     WrongNumberOfGenericArgumentsToIntrinsic,\n };\n use crate::require_same_types;\n@@ -468,14 +468,17 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         | sym::simd_reduce_max\n         | sym::simd_reduce_min_nanless\n         | sym::simd_reduce_max_nanless => (2, vec![param(0)], param(1)),\n+        sym::simd_shuffle => (3, vec![param(0), param(0), param(1)], param(2)),\n         name if name.as_str().starts_with(\"simd_shuffle\") => {\n             match name.as_str()[\"simd_shuffle\".len()..].parse() {\n                 Ok(n) => {\n                     let params = vec![param(0), param(0), tcx.mk_array(tcx.types.u32, n)];\n                     (2, params, param(1))\n                 }\n                 Err(_) => {\n-                    tcx.sess.emit_err(SimdShuffleMissingLength { span: it.span, name });\n+                    let msg =\n+                        format!(\"unrecognized platform-specific intrinsic function: `{}`\", name);\n+                    tcx.sess.struct_span_err(it.span, &msg).emit();\n                     return;\n                 }\n             }"}, {"sha": "47077779616c012ae8a257213c829a37136e3390", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -121,14 +121,6 @@ pub struct AssocTypeBindingNotAllowed {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error = \"E0439\"]\n-pub struct SimdShuffleMissingLength {\n-    #[message = \"invalid `simd_shuffle`, needs length: `{name}`\"]\n-    pub span: Span,\n-    pub name: Symbol,\n-}\n-\n #[derive(SessionDiagnostic)]\n #[error = \"E0436\"]\n pub struct FunctionalRecordUpdateOnNonStruct {"}, {"sha": "86e9cb55a9c865b797d3883d2d46241628d1b4e7", "filename": "src/test/ui/error-codes/E0439.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b69fe57261086e70aea9d5b58819a1794bf7c121/src%2Ftest%2Fui%2Ferror-codes%2FE0439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69fe57261086e70aea9d5b58819a1794bf7c121/src%2Ftest%2Fui%2Ferror-codes%2FE0439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0439.rs?ref=b69fe57261086e70aea9d5b58819a1794bf7c121", "patch": "@@ -1,8 +0,0 @@\n-#![feature(platform_intrinsics)]\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B; //~ ERROR E0439\n-}\n-\n-fn main () {\n-}"}, {"sha": "8021f7d3951a887f083641e3bb2d6232cbf7cacc", "filename": "src/test/ui/error-codes/E0439.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b69fe57261086e70aea9d5b58819a1794bf7c121/src%2Ftest%2Fui%2Ferror-codes%2FE0439.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b69fe57261086e70aea9d5b58819a1794bf7c121/src%2Ftest%2Fui%2Ferror-codes%2FE0439.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0439.stderr?ref=b69fe57261086e70aea9d5b58819a1794bf7c121", "patch": "@@ -1,9 +0,0 @@\n-error[E0439]: invalid `simd_shuffle`, needs length: `simd_shuffle`\n-  --> $DIR/E0439.rs:4:5\n-   |\n-LL |     fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0439`."}, {"sha": "9611780ac079ecb4b72c436630067571a2812ea8", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-shuffle.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.rs?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -0,0 +1,33 @@\n+// build-fail\n+\n+// Test that the simd_shuffle intrinsic produces ok-ish error\n+// messages when misused.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct Simd<T, const N: usize>([T; N]);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n+}\n+\n+fn main() {\n+    const I: [u32; 2] = [0; 2];\n+    const I2: [f32; 2] = [0.; 2];\n+    let v = Simd::<u32, 4>([0; 4]);\n+\n+    unsafe {\n+        let _: Simd<u32, 2> = simd_shuffle(v, v, I);\n+\n+        let _: Simd<u32, 4> = simd_shuffle(v, v, I);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+\n+        let _: Simd<f32, 2> = simd_shuffle(v, v, I);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+\n+        let _: Simd<u32, 2> = simd_shuffle(v, v, I2);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+    }\n+}"}, {"sha": "9eeb000fd261f6a98143720a92767f440ddb2ca4", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-shuffle.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.stderr?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -0,0 +1,21 @@\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return type of length 2, found `Simd<u32, 4_usize>` with length 4\n+  --> $DIR/simd-intrinsic-generic-shuffle.rs:24:31\n+   |\n+LL |         let _: Simd<u32, 4> = simd_shuffle(v, v, I);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return element type `u32` (element of input `Simd<u32, 4_usize>`), found `Simd<f32, 2_usize>` with element type `f32`\n+  --> $DIR/simd-intrinsic-generic-shuffle.rs:27:31\n+   |\n+LL |         let _: Simd<f32, 2> = simd_shuffle(v, v, I);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: simd_shuffle index must be an array of `u32`, got `[f32; 2]`\n+  --> $DIR/simd-intrinsic-generic-shuffle.rs:30:31\n+   |\n+LL |         let _: Simd<u32, 2> = simd_shuffle(v, v, I2);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0511`."}, {"sha": "aae6ce4663fbacd32705b45ff14c5578698ea50a", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -188,4 +188,14 @@ fn main() {\n          48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n          32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+\n+    extern \"platform-intrinsic\" {\n+        fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n+    }\n+    let v = u8x2(0, 0);\n+    const I: [u32; 2] = [4, 4];\n+    unsafe {\n+        let _: u8x2 = simd_shuffle(v, v, I);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+    }\n }"}, {"sha": "737fb5e6e51e25c3f7f7cfb36a4294b5790e1f71", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -71,6 +71,12 @@ LL | |          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: shuffle index #0 is out of bounds (limit 4)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:198:23\n+   |\n+LL |         let _: u8x2 = simd_shuffle(v, v, I);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0511`."}, {"sha": "3592adfdc6ad1132904d0840e556c59ca894a8dc", "filename": "src/test/ui/simd/shuffle.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd%2Fshuffle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3fe755ea3d39a1875f627fab5def4eae03e912/src%2Ftest%2Fui%2Fsimd%2Fshuffle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle.rs?ref=1b3fe755ea3d39a1875f627fab5def4eae03e912", "patch": "@@ -0,0 +1,24 @@\n+//run-pass\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct Simd<T, const N: usize>([T; N]);\n+\n+fn main() {\n+    const I1: [u32; 4] = [0, 2, 4, 6];\n+    const I2: [u32; 2] = [1, 5];\n+    let a = Simd::<u8, 4>([0, 1, 2, 3]);\n+    let b = Simd::<u8, 4>([4, 5, 6, 7]);\n+    unsafe {\n+        let x: Simd<u8, 4> = simd_shuffle(a, b, I1);\n+        assert_eq!(x.0, [0, 2, 4, 6]);\n+\n+        let y: Simd<u8, 2> = simd_shuffle(a, b, I2);\n+        assert_eq!(y.0, [1, 5]);\n+    }\n+}"}]}