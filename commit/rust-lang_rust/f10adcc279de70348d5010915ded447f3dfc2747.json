{"sha": "f10adcc279de70348d5010915ded447f3dfc2747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMGFkY2MyNzlkZTcwMzQ4ZDUwMTA5MTVkZWQ0NDdmM2RmYzI3NDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-02T10:29:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-02T10:29:41Z"}, "message": "Rollup merge of #40175 - d-e-s-o:fix-inconsistency-in-guessing-game-readme, r=steveklabnik\n\ndoc: fix inconsistency in error output in guessing-game.md\n\nThe line '.expect(\"failed to read line\");' is partly started with a\nlower case 'f' and partly with an uppercase one, adding additional\nspurious changes to otherwise clean diffs if each sample is\ncopy-and-pasted over the previous.\nThis change starts the string with an uppercase everywhere which is in\nline with the style of the other strings.", "tree": {"sha": "d54cdb4f9ff7d0b9fdaf943da5a561a61602046c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d54cdb4f9ff7d0b9fdaf943da5a561a61602046c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f10adcc279de70348d5010915ded447f3dfc2747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f10adcc279de70348d5010915ded447f3dfc2747", "html_url": "https://github.com/rust-lang/rust/commit/f10adcc279de70348d5010915ded447f3dfc2747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f10adcc279de70348d5010915ded447f3dfc2747/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf072d48072379ad07a7b75cc881f5d48fb5fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf072d48072379ad07a7b75cc881f5d48fb5fc7", "html_url": "https://github.com/rust-lang/rust/commit/4cf072d48072379ad07a7b75cc881f5d48fb5fc7"}, {"sha": "471e65571b11c5187449a83e9f8daacf6443e523", "url": "https://api.github.com/repos/rust-lang/rust/commits/471e65571b11c5187449a83e9f8daacf6443e523", "html_url": "https://github.com/rust-lang/rust/commit/471e65571b11c5187449a83e9f8daacf6443e523"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4d81438b11deadfe9cfb3c7a8c587df46fd09747", "filename": "src/doc/book/src/guessing-game.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f10adcc279de70348d5010915ded447f3dfc2747/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/f10adcc279de70348d5010915ded447f3dfc2747/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md?ref=f10adcc279de70348d5010915ded447f3dfc2747", "patch": "@@ -255,7 +255,7 @@ and other whitespace. This helps you split up long lines. We _could_ have\n done:\n \n ```rust,ignore\n-    io::stdin().read_line(&mut guess).expect(\"failed to read line\");\n+    io::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n ```\n \n But that gets hard to read. So we\u2019ve split it up, two lines for two method\n@@ -473,7 +473,7 @@ fn main() {\n     let mut guess = String::new();\n \n     io::stdin().read_line(&mut guess)\n-        .expect(\"failed to read line\");\n+        .expect(\"Failed to read line\");\n \n     println!(\"You guessed: {}\", guess);\n }\n@@ -563,7 +563,7 @@ fn main() {\n     let mut guess = String::new();\n \n     io::stdin().read_line(&mut guess)\n-        .expect(\"failed to read line\");\n+        .expect(\"Failed to read line\");\n \n     println!(\"You guessed: {}\", guess);\n \n@@ -678,7 +678,7 @@ fn main() {\n     let mut guess = String::new();\n \n     io::stdin().read_line(&mut guess)\n-        .expect(\"failed to read line\");\n+        .expect(\"Failed to read line\");\n \n     let guess: u32 = guess.trim().parse()\n         .expect(\"Please type a number!\");\n@@ -780,7 +780,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = guess.trim().parse()\n             .expect(\"Please type a number!\");\n@@ -847,7 +847,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = guess.trim().parse()\n             .expect(\"Please type a number!\");\n@@ -892,7 +892,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = match guess.trim().parse() {\n             Ok(num) => num,\n@@ -981,7 +981,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = match guess.trim().parse() {\n             Ok(num) => num,"}]}