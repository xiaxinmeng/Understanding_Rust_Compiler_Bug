{"sha": "cf715827187791a82dd8401ca210d1e881b8e3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNzE1ODI3MTg3NzkxYTgyZGQ4NDAxY2EyMTBkMWU4ODFiOGUzZTU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-05T15:19:51Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-05T15:19:51Z"}, "message": "Use `// revisions` in the dropck-eyepatch tests instead of relying on compare-mode=nll.\n\nNLL has increased precision in its analysis of drop order, and we want\nthe test annotations to deliberately reflect this by having fewer\nERROR annotations for NLL than for AST-borrowck. The best way to get\nthis effect is via `// revisions`.\n\nAs a drive-by, also added uses of all the borrows just to make it\nclear that NLL isn't somehow sidestepping things by using shorter\nborrows than you might have otherwise expected. (Of course, the added\nuses do not make all that much difference since the relevant types all\ndeclare `impl Drop` and thus those drops have implicit uses anyway.)", "tree": {"sha": "26df9580c4805a2bfd7b1c500766996a0d87499b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26df9580c4805a2bfd7b1c500766996a0d87499b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf715827187791a82dd8401ca210d1e881b8e3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf715827187791a82dd8401ca210d1e881b8e3e5", "html_url": "https://github.com/rust-lang/rust/commit/cf715827187791a82dd8401ca210d1e881b8e3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf715827187791a82dd8401ca210d1e881b8e3e5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25319fcfc5046b91b773c87edbfdb087e875343", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25319fcfc5046b91b773c87edbfdb087e875343", "html_url": "https://github.com/rust-lang/rust/commit/c25319fcfc5046b91b773c87edbfdb087e875343"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "31adb2f3f1471fbe4d55e14bbb3fd497e3756826", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr?ref=cf715827187791a82dd8401ca210d1e881b8e3e5", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:49:20\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:50:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr"}, {"sha": "68065639398a591409ab042d6251431d54d335a8", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=cf715827187791a82dd8401ca210d1e881b8e3e5", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n // aux-build:dropck_eyepatch_extern_crate.rs\n \n@@ -39,29 +39,32 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "ddd47e97434970c79282b77a95f25a4a78de5e7a", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr?ref=cf715827187791a82dd8401ca210d1e881b8e3e5", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:66:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:67:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr"}, {"sha": "16aaa2612576821c954b62ca84e1247ac71ee034", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=cf715827187791a82dd8401ca210d1e881b8e3e5", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n #![feature(dropck_eyepatch, rustc_attrs)]\n \n@@ -56,29 +56,32 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "0952ed0d6b793f8a1427e2479f49e8a98b18ee35", "filename": "src/test/ui/dropck/dropck-eyepatch.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr?ref=cf715827187791a82dd8401ca210d1e881b8e3e5", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:89:20\n+  --> $DIR/dropck-eyepatch.rs:90:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch.stderr"}, {"sha": "d7a671fd33c2c62713325081c71edbe326b16556", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf715827187791a82dd8401ca210d1e881b8e3e5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=cf715827187791a82dd8401ca210d1e881b8e3e5", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n #![feature(dropck_eyepatch, rustc_attrs)]\n \n@@ -79,30 +79,33 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}]}