{"sha": "583f5c961239c806e9467da346967e75c87f6618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4M2Y1Yzk2MTIzOWM4MDZlOTQ2N2RhMzQ2OTY3ZTc1Yzg3ZjY2MTg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-24T16:52:26Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-25T12:17:28Z"}, "message": "Fix linter issues", "tree": {"sha": "e4349687f593ed2fe2b884452e2a2dece4ddaa1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4349687f593ed2fe2b884452e2a2dece4ddaa1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/583f5c961239c806e9467da346967e75c87f6618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/583f5c961239c806e9467da346967e75c87f6618", "html_url": "https://github.com/rust-lang/rust/commit/583f5c961239c806e9467da346967e75c87f6618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/583f5c961239c806e9467da346967e75c87f6618/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a", "html_url": "https://github.com/rust-lang/rust/commit/f7b8ae1ee7793bd9b34ecea27037a01159cd5d7a"}], "stats": {"total": 104, "additions": 72, "deletions": 32}, "files": [{"sha": "c194bd2eaccc198131edf9db778d80011a8766f2", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/583f5c961239c806e9467da346967e75c87f6618/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/583f5c961239c806e9467da346967e75c87f6618/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=583f5c961239c806e9467da346967e75c87f6618", "patch": "@@ -1,12 +1,12 @@\n import * as analyzerStatus from './analyzer_status';\n import * as applySourceChange from './apply_source_change';\n+import * as inlayHints from './inlay_hints';\n import * as joinLines from './join_lines';\n import * as matchingBrace from './matching_brace';\n import * as onEnter from './on_enter';\n import * as parentModule from './parent_module';\n import * as runnables from './runnables';\n import * as syntaxTree from './syntaxTree';\n-import * as inlayHints from './inlay_hints';\n \n export {\n     analyzerStatus,\n@@ -17,5 +17,5 @@ export {\n     runnables,\n     syntaxTree,\n     onEnter,\n-    inlayHints,\n+    inlayHints\n };"}, {"sha": "056d7c8e3bdee32eb2822634e2002f22fd394722", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 61, "deletions": 27, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/583f5c961239c806e9467da346967e75c87f6618/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/583f5c961239c806e9467da346967e75c87f6618/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=583f5c961239c806e9467da346967e75c87f6618", "patch": "@@ -1,5 +1,10 @@\n import * as vscode from 'vscode';\n-import { Range, TextDocumentChangeEvent, TextDocumentContentChangeEvent, TextEditor } from 'vscode';\n+import {\n+    Range,\n+    TextDocumentChangeEvent,\n+    TextDocumentContentChangeEvent,\n+    TextEditor\n+} from 'vscode';\n import { TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n \n@@ -8,23 +13,28 @@ interface InlayHintsParams {\n }\n \n interface InlayHint {\n-    range: Range,\n-    kind: string,\n-    label: string,\n+    range: Range;\n+    kind: string;\n+    label: string;\n }\n \n const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     after: {\n-        color: new vscode.ThemeColor('ralsp.inlayHint'),\n-    },\n+        color: new vscode.ThemeColor('ralsp.inlayHint')\n+    }\n });\n \n export class HintsUpdater {\n     private displayHints = true;\n \n-    public async loadHints(editor: vscode.TextEditor | undefined): Promise<void> {\n+    public async loadHints(\n+        editor: vscode.TextEditor | undefined\n+    ): Promise<void> {\n         if (this.displayHints && editor !== undefined) {\n-            await this.updateDecorationsFromServer(editor.document.uri.toString(), editor);\n+            await this.updateDecorationsFromServer(\n+                editor.document.uri.toString(),\n+                editor\n+            );\n         }\n     }\n \n@@ -37,7 +47,7 @@ export class HintsUpdater {\n             } else {\n                 const editor = vscode.window.activeTextEditor;\n                 if (editor != null) {\n-                    return editor.setDecorations(typeHintDecorationType, [])\n+                    return editor.setDecorations(typeHintDecorationType, []);\n                 }\n             }\n         }\n@@ -58,38 +68,62 @@ export class HintsUpdater {\n \n         // If the dbg! macro is used in the lsp-server, an endless stream of events with `cause.contentChanges` with the dbg messages.\n         // Should not be a real situation, but better to filter such things out.\n-        if (cause !== undefined && cause.contentChanges.filter(changeEvent => this.isEventInFile(document.lineCount, changeEvent)).length === 0) {\n+        if (\n+            cause !== undefined &&\n+            cause.contentChanges.filter(changeEvent =>\n+                this.isEventInFile(document.lineCount, changeEvent)\n+            ).length === 0\n+        ) {\n             return;\n         }\n-        return await this.updateDecorationsFromServer(document.uri.toString(), editor);\n+        return await this.updateDecorationsFromServer(\n+            document.uri.toString(),\n+            editor\n+        );\n     }\n \n-    private isEventInFile(documentLineCount: number, event: TextDocumentContentChangeEvent): boolean {\n+    private isEventInFile(\n+        documentLineCount: number,\n+        event: TextDocumentContentChangeEvent\n+    ): boolean {\n         const eventText = event.text;\n         if (eventText.length === 0) {\n-            return event.range.start.line <= documentLineCount || event.range.end.line <= documentLineCount;\n+            return (\n+                event.range.start.line <= documentLineCount ||\n+                event.range.end.line <= documentLineCount\n+            );\n         } else {\n-            return event.range.start.line <= documentLineCount && event.range.end.line <= documentLineCount;\n+            return (\n+                event.range.start.line <= documentLineCount &&\n+                event.range.end.line <= documentLineCount\n+            );\n         }\n     }\n \n-    private async updateDecorationsFromServer(documentUri: string, editor: TextEditor): Promise<void> {\n-        const newHints = await this.queryHints(documentUri) || [];\n-        const newDecorations = newHints.map(hint => (\n-            {\n-                range: hint.range,\n-                renderOptions: { after: { contentText: `: ${hint.label}` } },\n-            }\n-        ));\n+    private async updateDecorationsFromServer(\n+        documentUri: string,\n+        editor: TextEditor\n+    ): Promise<void> {\n+        const newHints = (await this.queryHints(documentUri)) || [];\n+        const newDecorations = newHints.map(hint => ({\n+            range: hint.range,\n+            renderOptions: { after: { contentText: `: ${hint.label}` } }\n+        }));\n         return editor.setDecorations(typeHintDecorationType, newDecorations);\n     }\n \n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n-        const request: InlayHintsParams = { textDocument: { uri: documentUri } };\n+        const request: InlayHintsParams = {\n+            textDocument: { uri: documentUri }\n+        };\n         const client = Server.client;\n-        return client.onReady().then(() => client.sendRequest<InlayHint[] | null>(\n-            'rust-analyzer/inlayHints',\n-            request\n-        ));\n+        return client\n+            .onReady()\n+            .then(() =>\n+                client.sendRequest<InlayHint[] | null>(\n+                    'rust-analyzer/inlayHints',\n+                    request\n+                )\n+            );\n     }\n }"}, {"sha": "2ec3a2b359bf366e792581e446a463ceabe938e4", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/583f5c961239c806e9467da346967e75c87f6618/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/583f5c961239c806e9467da346967e75c87f6618/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=583f5c961239c806e9467da346967e75c87f6618", "patch": "@@ -152,9 +152,15 @@ export function activate(context: vscode.ExtensionContext) {\n     if (Server.config.displayInlayHints) {\n         const hintsUpdater = new HintsUpdater();\n         hintsUpdater.loadHints(vscode.window.activeTextEditor).then(() => {\n-            vscode.window.onDidChangeActiveTextEditor(editor => hintsUpdater.loadHints(editor));\n-            vscode.workspace.onDidChangeTextDocument(e => hintsUpdater.updateHints(e));\n-            vscode.workspace.onDidChangeConfiguration(_ => hintsUpdater.toggleHintsDisplay(Server.config.displayInlayHints));\n+            vscode.window.onDidChangeActiveTextEditor(editor =>\n+                hintsUpdater.loadHints(editor)\n+            );\n+            vscode.workspace.onDidChangeTextDocument(e =>\n+                hintsUpdater.updateHints(e)\n+            );\n+            vscode.workspace.onDidChangeConfiguration(_ =>\n+                hintsUpdater.toggleHintsDisplay(Server.config.displayInlayHints)\n+            );\n         });\n     }\n }"}]}