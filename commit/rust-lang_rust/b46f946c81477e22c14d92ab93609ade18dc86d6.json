{"sha": "b46f946c81477e22c14d92ab93609ade18dc86d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NmY5NDZjODE0NzdlMjJjMTRkOTJhYjkzNjA5YWRlMThkYzg2ZDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-27T09:57:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-27T09:57:43Z"}, "message": "supply our own implementation of the CTFE pointer comparison intrinsics", "tree": {"sha": "bd38678d8897bb42aadc9991fce5ddf89cd80cc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd38678d8897bb42aadc9991fce5ddf89cd80cc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b46f946c81477e22c14d92ab93609ade18dc86d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b46f946c81477e22c14d92ab93609ade18dc86d6", "html_url": "https://github.com/rust-lang/rust/commit/b46f946c81477e22c14d92ab93609ade18dc86d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b46f946c81477e22c14d92ab93609ade18dc86d6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d99cfa68d96a591e3e132cf73ef750f09d1a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d99cfa68d96a591e3e132cf73ef750f09d1a8a", "html_url": "https://github.com/rust-lang/rust/commit/76d99cfa68d96a591e3e132cf73ef750f09d1a8a"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "015d9edc11b709364d80581bd185bda4c4731dbe", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b46f946c81477e22c14d92ab93609ade18dc86d6/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46f946c81477e22c14d92ab93609ade18dc86d6/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=b46f946c81477e22c14d92ab93609ade18dc86d6", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::{mir, ty};\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_apfloat::{Float, Round};\n use rustc_target::abi::{Align, Integer, LayoutOf};\n+use rustc_span::symbol::sym;\n \n use crate::*;\n use helpers::check_arg_count;\n@@ -20,17 +21,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        if this.emulate_intrinsic(instance, args, ret)? {\n+        let intrinsic_name = this.tcx.item_name(instance.def_id());\n+        // We want to overwrite some of the intrinsic implementations that CTFE uses.\n+        let prefer_miri_intrinsic = match intrinsic_name {\n+            sym::ptr_guaranteed_eq | sym::ptr_guaranteed_ne => true,\n+            _ => false,\n+        };\n+\n+        if !prefer_miri_intrinsic && this.emulate_intrinsic(instance, args, ret)? {\n             return Ok(());\n         }\n-        let substs = instance.substs;\n-\n-        // All these intrinsics take raw pointers, so if we access memory directly\n-        // (as opposed to through a place), we have to remember to erase any tag\n-        // that might still hang around!\n-        let intrinsic_name = &*this.tcx.item_name(instance.def_id()).as_str();\n \n         // First handle intrinsics without return place.\n+        let intrinsic_name = &*intrinsic_name.as_str();\n         let (dest, ret) = match ret {\n             None => match intrinsic_name {\n                 \"miri_start_panic\" => return this.handle_miri_start_panic(args, unwind),\n@@ -42,13 +45,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Then handle terminating intrinsics.\n         match intrinsic_name {\n+            // Miri overwriting CTFE intrinsics.\n+            \"ptr_guaranteed_eq\" => {\n+                let &[left, right] = check_arg_count(args)?;\n+                let left = this.read_immediate(left)?;\n+                let right = this.read_immediate(right)?;\n+                this.binop_ignore_overflow(mir::BinOp::Eq, left, right, dest)?;\n+            }\n+            \"ptr_guaranteed_ne\" => {\n+                let &[left, right] = check_arg_count(args)?;\n+                let left = this.read_immediate(left)?;\n+                let right = this.read_immediate(right)?;\n+                this.binop_ignore_overflow(mir::BinOp::Ne, left, right, dest)?;\n+            }\n+\n             // Raw memory accesses\n             #[rustfmt::skip]\n             | \"copy\"\n             | \"copy_nonoverlapping\"\n             => {\n                 let &[src, dest, count] = check_arg_count(args)?;\n-                let elem_ty = substs.type_at(0);\n+                let elem_ty = instance.substs.type_at(0);\n                 let elem_layout = this.layout_of(elem_ty)?;\n                 let count = this.read_scalar(count)?.to_machine_usize(this)?;\n                 let elem_align = elem_layout.align.abi;\n@@ -89,7 +106,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             \"write_bytes\" => {\n                 let &[ptr, val_byte, count] = check_arg_count(args)?;\n-                let ty = substs.type_at(0);\n+                let ty = instance.substs.type_at(0);\n                 let ty_layout = this.layout_of(ty)?;\n                 let val_byte = this.read_scalar(val_byte)?.to_u8()?;\n                 let ptr = this.read_scalar(ptr)?.not_undef()?;\n@@ -455,7 +472,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"assert_zero_valid\" |\n             \"assert_uninit_valid\" => {\n                 let &[] = check_arg_count(args)?;\n-                let ty = substs.type_at(0);\n+                let ty = instance.substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n                 // Abort here because the caller might not be panic safe.\n                 if layout.abi.is_uninhabited() {"}, {"sha": "8f7dbac670646b626de6a97270067b814c813311", "filename": "tests/run-pass/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b46f946c81477e22c14d92ab93609ade18dc86d6/tests%2Frun-pass%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46f946c81477e22c14d92ab93609ade18dc86d6/tests%2Frun-pass%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics.rs?ref=b46f946c81477e22c14d92ab93609ade18dc86d6", "patch": "@@ -1,4 +1,4 @@\n-#![feature(core_intrinsics)]\n+#![feature(core_intrinsics, const_raw_ptr_comparison)]\n \n use std::intrinsics;\n use std::mem::{size_of, size_of_val};\n@@ -30,4 +30,9 @@ fn main() {\n     let _v = intrinsics::discriminant_value(&0);\n     let _v = intrinsics::discriminant_value(&true);\n     let _v = intrinsics::discriminant_value(&vec![1,2,3]);\n+\n+    let addr = &13 as *const i32;\n+    let addr2 = (addr as usize).wrapping_add(usize::MAX).wrapping_add(1);\n+    assert!(addr.guaranteed_eq(addr2 as *const _));\n+    assert!(addr.guaranteed_ne(0x100 as *const _));\n }"}]}