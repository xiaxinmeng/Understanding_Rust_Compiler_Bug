{"sha": "64e7bf9faed35585e8054f968abae792b1b690ce", "node_id": "C_kwDOAAsO6NoAKDY0ZTdiZjlmYWVkMzU1ODVlODA1NGY5NjhhYmFlNzkyYjFiNjkwY2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-06T23:59:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-06T23:59:22Z"}, "message": "Rollup merge of #95626 - saethlin:pass-pointer-to-prctl, r=cuviper\n\nDon't cast thread name to an integer for prctl\n\n`libc::prctl` and the `prctl` definitions in glibc, musl, and the kernel headers are C variadic functions. Therefore, all the arguments (except for the first) are untyped. It is only the Linux man page which says that `prctl` takes 4 `unsigned long` arguments. I have no idea why it says this.\n\nIn any case, the upshot is that we don't need to cast the pointer to an integer and confuse Miri.\n\nBut in light of this... what are we doing with those three `0`s? We're passing 3 `i32`s to `prctl`, which doesn't fill me with confidence. The man page says `unsigned long` and all the constants in the linux kernel are macros for expressions of the form `1UL << N`. I'm mostly commenting on this because looks a whole lot like some UB that was found in SQLite a few years ago: <https://youtu.be/LbzbHWdLAI0?t=1925> that was related to accidentally passing a 32-bit value from a literal `0` instead of a pointer-sized value. This happens to work on x86 due to the size of pointers and happens to work on x86_64 due to the calling convention. But also, there is no good reason for an implementation to be looking at those arguments. Some other calls to `prctl` require that other arguments be zeroed, but not `PR_SET_NAME`... so why are we even passing them?\n\nI would prefer to end such questions by either passing 3 `libc::c_ulong`, or not passing those at all, but I'm not sure which is better.", "tree": {"sha": "80a6c8d0bb74fe237e6896442ce41797166090df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80a6c8d0bb74fe237e6896442ce41797166090df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64e7bf9faed35585e8054f968abae792b1b690ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTilaCRBK7hj4Ov3rIwAAHhAIALChhPKSa2SCpW/O0aa+SqeJ\necAwmrHeyd8VJIk77oq56IkX/FKkSnjti8HVoJ25FDHt0V5NCQUATZeGzaio6UOy\nvdg3mj+rsSMnTHtmejYkzABr24GlyJotBKhenNtZ79f3KUcMGF7VQiXixAgL6gZ/\nI/V6hBSzMuyJURqoL0a7eBliqEcmrwmo57ZjcXZdglEnckPT7ELyWMH2nPaMo1Gw\nGNQwRoAnoMVDtNoLL+osB2G3F/llj4JksfgTDz02uVYNjbhwMIqflHN9TkJCusSb\naGH3ucbvBhGYNYaPrq98gIoyGIwk/nXBqTgGli0kxIAtci3X5ykEo/SJ/t80uVk=\n=3BCX\n-----END PGP SIGNATURE-----\n", "payload": "tree 80a6c8d0bb74fe237e6896442ce41797166090df\nparent d2f1a0b88cb540079466692f4251d9dd89c6e3c0\nparent e8a6f53af82b43f79ae36de139cb6867a7bc73ee\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649289562 +0200\ncommitter GitHub <noreply@github.com> 1649289562 +0200\n\nRollup merge of #95626 - saethlin:pass-pointer-to-prctl, r=cuviper\n\nDon't cast thread name to an integer for prctl\n\n`libc::prctl` and the `prctl` definitions in glibc, musl, and the kernel headers are C variadic functions. Therefore, all the arguments (except for the first) are untyped. It is only the Linux man page which says that `prctl` takes 4 `unsigned long` arguments. I have no idea why it says this.\n\nIn any case, the upshot is that we don't need to cast the pointer to an integer and confuse Miri.\n\nBut in light of this... what are we doing with those three `0`s? We're passing 3 `i32`s to `prctl`, which doesn't fill me with confidence. The man page says `unsigned long` and all the constants in the linux kernel are macros for expressions of the form `1UL << N`. I'm mostly commenting on this because looks a whole lot like some UB that was found in SQLite a few years ago: <https://youtu.be/LbzbHWdLAI0?t=1925> that was related to accidentally passing a 32-bit value from a literal `0` instead of a pointer-sized value. This happens to work on x86 due to the size of pointers and happens to work on x86_64 due to the calling convention. But also, there is no good reason for an implementation to be looking at those arguments. Some other calls to `prctl` require that other arguments be zeroed, but not `PR_SET_NAME`... so why are we even passing them?\n\nI would prefer to end such questions by either passing 3 `libc::c_ulong`, or not passing those at all, but I'm not sure which is better.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64e7bf9faed35585e8054f968abae792b1b690ce", "html_url": "https://github.com/rust-lang/rust/commit/64e7bf9faed35585e8054f968abae792b1b690ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64e7bf9faed35585e8054f968abae792b1b690ce/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f1a0b88cb540079466692f4251d9dd89c6e3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f1a0b88cb540079466692f4251d9dd89c6e3c0", "html_url": "https://github.com/rust-lang/rust/commit/d2f1a0b88cb540079466692f4251d9dd89c6e3c0"}, {"sha": "e8a6f53af82b43f79ae36de139cb6867a7bc73ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a6f53af82b43f79ae36de139cb6867a7bc73ee", "html_url": "https://github.com/rust-lang/rust/commit/e8a6f53af82b43f79ae36de139cb6867a7bc73ee"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "d191e1fe7a650ffe0be849958ceac2f5b61c0f59", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64e7bf9faed35585e8054f968abae792b1b690ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e7bf9faed35585e8054f968abae792b1b690ce/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=64e7bf9faed35585e8054f968abae792b1b690ce", "patch": "@@ -122,7 +122,13 @@ impl Thread {\n         // pthread wrapper only appeared in glibc 2.12, so we use syscall\n         // directly.\n         unsafe {\n-            libc::prctl(PR_SET_NAME, name.as_ptr() as libc::c_ulong, 0, 0, 0);\n+            libc::prctl(\n+                PR_SET_NAME,\n+                name.as_ptr(),\n+                0 as libc::c_ulong,\n+                0 as libc::c_ulong,\n+                0 as libc::c_ulong,\n+            );\n         }\n     }\n "}]}