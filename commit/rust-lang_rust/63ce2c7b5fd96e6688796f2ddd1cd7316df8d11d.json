{"sha": "63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzY2UyYzdiNWZkOTZlNjY4ODc5NmYyZGRkMWNkNzMxNmRmOGQxMWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-08T17:58:45Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-09T10:16:29Z"}, "message": "Add argument count mismatch diagnostic", "tree": {"sha": "8e3ce783592c9c136efac6bbf78ffff177c077cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e3ce783592c9c136efac6bbf78ffff177c077cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "html_url": "https://github.com/rust-lang/rust/commit/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91005ecc27427f46529b9372f91e5072dfe5e179", "url": "https://api.github.com/repos/rust-lang/rust/commits/91005ecc27427f46529b9372f91e5072dfe5e179", "html_url": "https://github.com/rust-lang/rust/commit/91005ecc27427f46529b9372f91e5072dfe5e179"}], "stats": {"total": 109, "additions": 103, "deletions": 6}, "files": [{"sha": "11a0ecb8b23136258725045169c06e62c30381f0", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "patch": "@@ -1,4 +1,6 @@\n //! FIXME: write short doc here\n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n-pub use hir_ty::diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField};\n+pub use hir_ty::diagnostics::{\n+    MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField,\n+};"}, {"sha": "daac669e65764ced59d55be3d18aed021545580f", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "patch": "@@ -197,3 +197,32 @@ impl AstDiagnostic for MissingUnsafe {\n         ast::Expr::cast(node).unwrap()\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct MismatchedArgCount {\n+    pub file: HirFileId,\n+    pub call_expr: AstPtr<ast::Expr>,\n+    pub expected: usize,\n+    pub found: usize,\n+}\n+\n+impl Diagnostic for MismatchedArgCount {\n+    fn message(&self) -> String {\n+        format!(\"Expected {} arguments, found {}\", self.expected, self.found)\n+    }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.call_expr.clone().into() }\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+impl AstDiagnostic for MismatchedArgCount {\n+    type AST = ast::CallExpr;\n+    fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n+        let root = db.parse_or_expand(self.source().file_id).unwrap();\n+        let node = self.source().value.to_node(&root);\n+        ast::CallExpr::cast(node).unwrap()\n+    }\n+}"}, {"sha": "7c3cd7952cbd10bbf0c38a339463a67b3d57a001", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "patch": "@@ -9,9 +9,11 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n-    diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields},\n+    diagnostics::{\n+        MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields,\n+    },\n     utils::variant_data,\n-    ApplicationTy, InferenceResult, Ty, TypeCtor,\n+    ApplicationTy, CallableDef, InferenceResult, Ty, TypeCtor,\n     _match::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n };\n \n@@ -24,7 +26,8 @@ pub use hir_def::{\n         ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n         MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement, UnaryOp,\n     },\n-    LocalFieldId, VariantId,\n+    src::HasSource,\n+    LocalFieldId, Lookup, VariantId,\n };\n \n pub struct ExprValidator<'a, 'b: 'a> {\n@@ -56,8 +59,15 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                     missed_fields,\n                 );\n             }\n-            if let Expr::Match { expr, arms } = expr {\n-                self.validate_match(id, *expr, arms, db, self.infer.clone());\n+\n+            match expr {\n+                Expr::Match { expr, arms } => {\n+                    self.validate_match(id, *expr, arms, db, self.infer.clone());\n+                }\n+                Expr::Call { .. } | Expr::MethodCall { .. } => {\n+                    self.validate_call(db, id, expr);\n+                }\n+                _ => {}\n             }\n         }\n         for (id, pat) in body.pats.iter() {\n@@ -138,6 +148,54 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n     }\n \n+    fn validate_call(&mut self, db: &dyn HirDatabase, call_id: ExprId, expr: &Expr) -> Option<()> {\n+        // Check that the number of arguments matches the number of parameters.\n+        let (callee, args) = match expr {\n+            Expr::Call { callee, args } => {\n+                let callee = &self.infer.type_of_expr[*callee];\n+                let (callable, _) = callee.as_callable()?;\n+                let callee = match callable {\n+                    CallableDef::FunctionId(func) => func,\n+                    _ => return None,\n+                };\n+\n+                (callee, args.clone())\n+            }\n+            Expr::MethodCall { receiver, args, .. } => {\n+                let callee = self.infer.method_resolution(call_id)?;\n+                let mut args = args.clone();\n+                args.insert(0, *receiver);\n+                (callee, args)\n+            }\n+            _ => return None,\n+        };\n+\n+        let loc = callee.lookup(db.upcast());\n+        let ast = loc.source(db.upcast());\n+        let params = ast.value.param_list()?;\n+\n+        let mut param_count = params.params().count();\n+        if params.self_param().is_some() {\n+            param_count += 1;\n+        }\n+        let arg_count = args.len();\n+\n+        if arg_count != param_count {\n+            let (_, source_map): (Arc<Body>, Arc<BodySourceMap>) =\n+                db.body_with_source_map(self.func.into());\n+            if let Ok(source_ptr) = source_map.expr_syntax(call_id) {\n+                self.sink.push(MismatchedArgCount {\n+                    file: source_ptr.file_id,\n+                    call_expr: source_ptr.value,\n+                    expected: param_count,\n+                    found: arg_count,\n+                });\n+            }\n+        }\n+\n+        None\n+    }\n+\n     fn validate_match(\n         &mut self,\n         id: ExprId,"}, {"sha": "d984f58ba248f753eccccf7c983236721e9d55ba", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=63ce2c7b5fd96e6688796f2ddd1cd7316df8d11d", "patch": "@@ -127,6 +127,14 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             severity: Severity::Error,\n             fix: missing_struct_field_fix(&sema, file_id, d),\n         })\n+    })\n+    .on::<hir::diagnostics::MismatchedArgCount, _>(|d| {\n+        res.borrow_mut().push(Diagnostic {\n+            range: sema.diagnostics_range(d).range,\n+            message: d.message(),\n+            severity: Severity::Error,\n+            fix: None,\n+        })\n     });\n \n     if let Some(m) = sema.to_module_def(file_id) {"}]}