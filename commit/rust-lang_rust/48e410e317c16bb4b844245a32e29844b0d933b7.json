{"sha": "48e410e317c16bb4b844245a32e29844b0d933b7", "node_id": "C_kwDOAAsO6NoAKDQ4ZTQxMGUzMTdjMTZiYjRiODQ0MjQ1YTMyZTI5ODQ0YjBkOTMzYjc", "commit": {"author": {"name": "bdbai", "email": "bdbaiapp@163.com", "date": "2023-06-10T08:30:26Z"}, "committer": {"name": "bdbai", "email": "bdbaiapp@163.com", "date": "2023-06-10T08:34:20Z"}, "message": "Lazy load ntdll functions on UWP", "tree": {"sha": "fdf5e05559644657ada1ac2457490790e1800dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf5e05559644657ada1ac2457490790e1800dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e410e317c16bb4b844245a32e29844b0d933b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e410e317c16bb4b844245a32e29844b0d933b7", "html_url": "https://github.com/rust-lang/rust/commit/48e410e317c16bb4b844245a32e29844b0d933b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e410e317c16bb4b844245a32e29844b0d933b7/comments", "author": {"login": "bdbai", "id": 5270106, "node_id": "MDQ6VXNlcjUyNzAxMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5270106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdbai", "html_url": "https://github.com/bdbai", "followers_url": "https://api.github.com/users/bdbai/followers", "following_url": "https://api.github.com/users/bdbai/following{/other_user}", "gists_url": "https://api.github.com/users/bdbai/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdbai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdbai/subscriptions", "organizations_url": "https://api.github.com/users/bdbai/orgs", "repos_url": "https://api.github.com/users/bdbai/repos", "events_url": "https://api.github.com/users/bdbai/events{/privacy}", "received_events_url": "https://api.github.com/users/bdbai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bdbai", "id": 5270106, "node_id": "MDQ6VXNlcjUyNzAxMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5270106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdbai", "html_url": "https://github.com/bdbai", "followers_url": "https://api.github.com/users/bdbai/followers", "following_url": "https://api.github.com/users/bdbai/following{/other_user}", "gists_url": "https://api.github.com/users/bdbai/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdbai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdbai/subscriptions", "organizations_url": "https://api.github.com/users/bdbai/orgs", "repos_url": "https://api.github.com/users/bdbai/repos", "events_url": "https://api.github.com/users/bdbai/events{/privacy}", "received_events_url": "https://api.github.com/users/bdbai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "html_url": "https://github.com/rust-lang/rust/commit/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "929aaf5a266ea5d065046799323392a26de959f6", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/48e410e317c16bb4b844245a32e29844b0d933b7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e410e317c16bb4b844245a32e29844b0d933b7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=48e410e317c16bb4b844245a32e29844b0d933b7", "patch": "@@ -19,6 +19,7 @@ pub use windows_sys::*;\n pub type DWORD = c_ulong;\n pub type NonZeroDWORD = NonZero_c_ulong;\n pub type LARGE_INTEGER = c_longlong;\n+#[cfg_attr(target_vendor = \"uwp\", allow(unused))]\n pub type LONG = c_long;\n pub type UINT = c_uint;\n pub type WCHAR = u16;\n@@ -50,6 +51,9 @@ pub type CONDITION_VARIABLE = RTL_CONDITION_VARIABLE;\n pub type SRWLOCK = RTL_SRWLOCK;\n pub type INIT_ONCE = RTL_RUN_ONCE;\n \n+#[cfg(target_vendor = \"uwp\")]\n+pub const STATUS_NOT_IMPLEMENTED: NTSTATUS = 0xC0000002_u32 as _;\n+\n pub const CONDITION_VARIABLE_INIT: CONDITION_VARIABLE = CONDITION_VARIABLE { Ptr: ptr::null_mut() };\n pub const SRWLOCK_INIT: SRWLOCK = SRWLOCK { Ptr: ptr::null_mut() };\n pub const INIT_ONCE_STATIC_INIT: INIT_ONCE = INIT_ONCE { Ptr: ptr::null_mut() };\n@@ -267,6 +271,8 @@ pub unsafe fn getaddrinfo(\n     windows_sys::getaddrinfo(node.cast::<u8>(), service.cast::<u8>(), hints, res)\n }\n \n+cfg_if::cfg_if! {\n+if #[cfg(not(target_vendor = \"uwp\"))] {\n pub unsafe fn NtReadFile(\n     filehandle: BorrowedHandle<'_>,\n     event: HANDLE,\n@@ -313,6 +319,8 @@ pub unsafe fn NtWriteFile(\n         key.map(|k| k as *const u32).unwrap_or(ptr::null()),\n     )\n }\n+}\n+}\n \n // Functions that aren't available on every version of Windows that we support,\n // but we still use them and just provide some form of a fallback implementation.\n@@ -376,4 +384,54 @@ compat_fn_with_fallback! {\n     ) -> NTSTATUS {\n         panic!(\"keyed events not available\")\n     }\n+\n+    // These functions are available on UWP when lazily loaded. They will fail WACK if loaded statically.\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn NtCreateFile(\n+        filehandle: *mut HANDLE,\n+        desiredaccess: FILE_ACCESS_RIGHTS,\n+        objectattributes: *const OBJECT_ATTRIBUTES,\n+        iostatusblock: *mut IO_STATUS_BLOCK,\n+        allocationsize: *const i64,\n+        fileattributes: FILE_FLAGS_AND_ATTRIBUTES,\n+        shareaccess: FILE_SHARE_MODE,\n+        createdisposition: NTCREATEFILE_CREATE_DISPOSITION,\n+        createoptions: NTCREATEFILE_CREATE_OPTIONS,\n+        eabuffer: *const ::core::ffi::c_void,\n+        ealength: u32\n+    ) -> NTSTATUS {\n+        STATUS_NOT_IMPLEMENTED\n+    }\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn NtReadFile(\n+        filehandle: BorrowedHandle<'_>,\n+        event: HANDLE,\n+        apcroutine: PIO_APC_ROUTINE,\n+        apccontext: *mut c_void,\n+        iostatusblock: &mut IO_STATUS_BLOCK,\n+        buffer: *mut crate::mem::MaybeUninit<u8>,\n+        length: ULONG,\n+        byteoffset: Option<&LARGE_INTEGER>,\n+        key: Option<&ULONG>\n+    ) -> NTSTATUS {\n+        STATUS_NOT_IMPLEMENTED\n+    }\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn NtWriteFile(\n+        filehandle: BorrowedHandle<'_>,\n+        event: HANDLE,\n+        apcroutine: PIO_APC_ROUTINE,\n+        apccontext: *mut c_void,\n+        iostatusblock: &mut IO_STATUS_BLOCK,\n+        buffer: *const u8,\n+        length: ULONG,\n+        byteoffset: Option<&LARGE_INTEGER>,\n+        key: Option<&ULONG>\n+    ) -> NTSTATUS {\n+        STATUS_NOT_IMPLEMENTED\n+    }\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn RtlNtStatusToDosError(Status: NTSTATUS) -> ULONG {\n+        Status as ULONG\n+    }\n }"}, {"sha": "5d8fd13785a09e6a4b05eef54254b27e7d071f25", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48e410e317c16bb4b844245a32e29844b0d933b7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e410e317c16bb4b844245a32e29844b0d933b7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=48e410e317c16bb4b844245a32e29844b0d933b7", "patch": "@@ -1,5 +1,3 @@\n-use crate::ffi::c_void;\n-use crate::io;\n use crate::mem;\n use crate::ptr;\n use crate::sys::c;\n@@ -25,6 +23,9 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n #[cfg(not(target_vendor = \"uwp\"))]\n #[inline(never)]\n fn fallback_rng() -> (u64, u64) {\n+    use crate::ffi::c_void;\n+    use crate::io;\n+\n     let mut v = (0, 0);\n     let ret = unsafe {\n         c::RtlGenRandom(&mut v as *mut _ as *mut c_void, mem::size_of_val(&v) as c::ULONG)"}]}