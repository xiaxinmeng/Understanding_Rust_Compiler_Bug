{"sha": "ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYWE1NWVhNDUxYzhmZjQwY2U5YzkxZjVkOWMyZjJiMzBlOTZkM2I=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-18T18:05:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-18T18:05:44Z"}, "message": "Rollup merge of #41360 - nikomatsakis:incr-comp-issue-40746-visitors, r=eddyb\n\nconvert calls to `visit_all_item_likes_in_krate`\n\nWe no longer need to track the tasks in these cases since these\nparticular tasks have no outputs (except, potentially, errors...)  and\nthey always execute.\n\ncc #40746\n\nr? @eddyb", "tree": {"sha": "274cbcd99a15e6970a11c11d9f5ed971a9b01ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274cbcd99a15e6970a11c11d9f5ed971a9b01ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "html_url": "https://github.com/rust-lang/rust/commit/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddf4781c1b1bc51b92094a874cb89f6545f23b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf4781c1b1bc51b92094a874cb89f6545f23b9d", "html_url": "https://github.com/rust-lang/rust/commit/ddf4781c1b1bc51b92094a874cb89f6545f23b9d"}, {"sha": "c8427831eaad76c92b49e7661e2f23864fb16ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8427831eaad76c92b49e7661e2f23864fb16ce0", "html_url": "https://github.com/rust-lang/rust/commit/c8427831eaad76c92b49e7661e2f23864fb16ce0"}], "stats": {"total": 178, "additions": 22, "deletions": 156}, "files": [{"sha": "fd9750dbfe3f56d9d90ac81b0023149ee7111176", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -56,30 +56,15 @@ pub enum DepNode<D: Clone + Debug> {\n     WorkProduct(Arc<WorkProductId>),\n \n     // Represents different phases in the compiler.\n-    CollectLanguageItems,\n-    ResolveLifetimes,\n     RegionResolveCrate,\n-    PluginRegistrar,\n-    StabilityIndex,\n-    CollectItem(D),\n-    CollectItemSig(D),\n     Coherence,\n     Resolve,\n-    EntryPoint,\n-    CheckEntryFn,\n     CoherenceCheckTrait(D),\n     CoherenceCheckImpl(D),\n     CoherenceOverlapCheck(D),\n     CoherenceOverlapCheckSpecial(D),\n-    CoherenceOrphanCheck(D),\n     Variance,\n-    WfCheck(D),\n-    TypeckItemType(D),\n-    UnusedTraitCheck,\n-    CheckConst(D),\n     PrivacyAccessLevels(CrateNum),\n-    IntrinsicCheck(D),\n-    MatchCheck(D),\n \n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n@@ -91,14 +76,10 @@ pub enum DepNode<D: Clone + Debug> {\n     BorrowCheck(D),\n     RvalueCheck(D),\n     Reachability,\n-    DeadCheck,\n-    StabilityCheck(D),\n     LateLintCheck,\n-    TransCrate,\n     TransCrateItem(D),\n     TransInlinedItem(D),\n     TransWriteMetadata,\n-    LinkBinary,\n \n     // Nodes representing bits of computed IR in the tcx. Each shared\n     // table in the tcx (or elsewhere) maps to one of these\n@@ -184,12 +165,10 @@ impl<D: Clone + Debug> DepNode<D> {\n         }\n \n         check! {\n-            CollectItem,\n             BorrowCheck,\n             Hir,\n             HirBody,\n             TransCrateItem,\n-            TypeckItemType,\n             AssociatedItems,\n             ItemSignature,\n             AssociatedItemDefIds,\n@@ -211,24 +190,14 @@ impl<D: Clone + Debug> DepNode<D> {\n             BorrowCheckKrate => Some(BorrowCheckKrate),\n             MirKrate => Some(MirKrate),\n             TypeckBodiesKrate => Some(TypeckBodiesKrate),\n-            CollectLanguageItems => Some(CollectLanguageItems),\n-            ResolveLifetimes => Some(ResolveLifetimes),\n             RegionResolveCrate => Some(RegionResolveCrate),\n-            PluginRegistrar => Some(PluginRegistrar),\n-            StabilityIndex => Some(StabilityIndex),\n             Coherence => Some(Coherence),\n             Resolve => Some(Resolve),\n-            EntryPoint => Some(EntryPoint),\n-            CheckEntryFn => Some(CheckEntryFn),\n             Variance => Some(Variance),\n-            UnusedTraitCheck => Some(UnusedTraitCheck),\n             PrivacyAccessLevels(k) => Some(PrivacyAccessLevels(k)),\n             Reachability => Some(Reachability),\n-            DeadCheck => Some(DeadCheck),\n             LateLintCheck => Some(LateLintCheck),\n-            TransCrate => Some(TransCrate),\n             TransWriteMetadata => Some(TransWriteMetadata),\n-            LinkBinary => Some(LinkBinary),\n \n             // work product names do not need to be mapped, because\n             // they are always absolute.\n@@ -237,26 +206,17 @@ impl<D: Clone + Debug> DepNode<D> {\n             Hir(ref d) => op(d).map(Hir),\n             HirBody(ref d) => op(d).map(HirBody),\n             MetaData(ref d) => op(d).map(MetaData),\n-            CollectItem(ref d) => op(d).map(CollectItem),\n-            CollectItemSig(ref d) => op(d).map(CollectItemSig),\n             CoherenceCheckTrait(ref d) => op(d).map(CoherenceCheckTrait),\n             CoherenceCheckImpl(ref d) => op(d).map(CoherenceCheckImpl),\n             CoherenceOverlapCheck(ref d) => op(d).map(CoherenceOverlapCheck),\n             CoherenceOverlapCheckSpecial(ref d) => op(d).map(CoherenceOverlapCheckSpecial),\n-            CoherenceOrphanCheck(ref d) => op(d).map(CoherenceOrphanCheck),\n-            WfCheck(ref d) => op(d).map(WfCheck),\n-            TypeckItemType(ref d) => op(d).map(TypeckItemType),\n-            CheckConst(ref d) => op(d).map(CheckConst),\n-            IntrinsicCheck(ref d) => op(d).map(IntrinsicCheck),\n-            MatchCheck(ref d) => op(d).map(MatchCheck),\n             Mir(ref d) => op(d).map(Mir),\n             MirShim(ref def_ids) => {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(MirShim)\n             }\n             BorrowCheck(ref d) => op(d).map(BorrowCheck),\n             RvalueCheck(ref d) => op(d).map(RvalueCheck),\n-            StabilityCheck(ref d) => op(d).map(StabilityCheck),\n             TransCrateItem(ref d) => op(d).map(TransCrateItem),\n             TransInlinedItem(ref d) => op(d).map(TransInlinedItem),\n             AssociatedItems(ref d) => op(d).map(AssociatedItems),"}, {"sha": "63d90d93bb51b38c9c3702a3b47c222f256735a0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -12,7 +12,6 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::{self, PatKind};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -594,7 +593,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::DeadCheck);\n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "8da7560387f879d3794ad17068c760e4bcac60bf", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n@@ -57,8 +56,6 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n }\n \n pub fn find_entry_point(session: &Session, hir_map: &hir_map::Map) {\n-    let _task = hir_map.dep_graph.in_task(DepNode::EntryPoint);\n-\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeExecutable\n     });"}, {"sha": "ecc0bb9fe497f2b70d87d188776cb00f7e470dfd", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::DepNode;\n use hir::def::Def;\n use hir::def_id::DefId;\n use infer::InferCtxt;\n@@ -25,7 +24,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = ItemVisitor {\n         tcx: tcx\n     };\n-    tcx.visit_all_item_likes_in_krate(DepNode::IntrinsicCheck, &mut visitor.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n struct ItemVisitor<'a, 'tcx: 'a> {"}, {"sha": "5989fa9007c4446ee177acd71be6de9ed68de0db", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -21,7 +21,6 @@\n \n pub use self::LangItem::*;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use session::Session;\n use hir::def_id::DefId;\n@@ -236,7 +235,6 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n pub fn collect_language_items(session: &Session,\n                               map: &hir_map::Map)\n                               -> LanguageItems {\n-    let _task = map.dep_graph.in_task(DepNode::CollectLanguageItems);\n     let krate: &hir::Crate = map.krate();\n     let mut collector = LanguageItemCollector::new(session, map);\n     collector.collect(krate);"}, {"sha": "a1aabc775a31a69f4269767959832481e919fba9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -15,7 +15,6 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore we break lifetime name resolution into a separate pass.\n \n-use dep_graph::DepNode;\n use hir::map::Map;\n use session::Session;\n use hir::def::Def;\n@@ -259,7 +258,6 @@ const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n pub fn krate(sess: &Session,\n              hir_map: &Map)\n              -> Result<NamedRegionMap, usize> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::ResolveLifetimes);\n     let krate = hir_map.krate();\n     let mut map = NamedRegionMap {\n         defs: NodeMap(),"}, {"sha": "1e856f6716ef7f248cb0913a9fa7cc81fd20a203", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -13,7 +13,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use lint;\n use hir::def::Def;\n@@ -383,7 +382,6 @@ impl<'a, 'tcx> Index<'tcx> {\n         // Put the active features into a map for quick lookup\n         self.active_features = active_lib_features.iter().map(|&(ref s, _)| s.clone()).collect();\n \n-        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();\n         let mut annotator = Annotator {\n             tcx: tcx,\n@@ -397,7 +395,6 @@ impl<'a, 'tcx> Index<'tcx> {\n     }\n \n     pub fn new(hir_map: &hir_map::Map) -> Index<'tcx> {\n-        let _task = hir_map.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = hir_map.krate();\n \n         let mut is_staged_api = false;\n@@ -424,7 +421,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// features and possibly prints errors.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut checker = Checker { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::StabilityCheck, &mut checker.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n \n struct Checker<'a, 'tcx: 'a> {\n@@ -662,7 +659,6 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n \n     if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n-        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();\n         let mut missing = MissingStabilityAnnotations {\n             tcx: tcx,"}, {"sha": "2e0afe789c62dbba3c9e6590f3be0666285372e7", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -14,8 +14,6 @@ use _match::WitnessPreference::*;\n \n use pattern::{Pattern, PatternContext, PatternError, PatternKind};\n \n-use rustc::dep_graph::DepNode;\n-\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n@@ -56,8 +54,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_item_likes_in_krate(DepNode::MatchCheck,\n-                                      &mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "9983efce6af0bdd0b139def4c9f3dc9af5f73951", "filename": "src/librustc_driver/derive_registrar.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_driver%2Fderive_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_driver%2Fderive_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fderive_registrar.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepNode;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Map;\n use rustc::hir;\n use syntax::ast;\n use syntax::attr;\n \n pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::PluginRegistrar);\n     let krate = hir_map.krate();\n \n     let mut finder = Finder { registrar: None };"}, {"sha": "9dfe1a34c9ce03aa5a2ae0bf9eb74c7de4c6fb99", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -68,7 +68,7 @@ pub fn build_mir_for_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n                 NestedVisitorMap::None\n             }\n         }\n-        tcx.visit_all_item_likes_in_krate(DepNode::Mir, &mut GatherCtors {\n+        tcx.hir.krate().visit_all_item_likes(&mut GatherCtors {\n             tcx: tcx\n         }.as_deep_visitor());\n     }"}, {"sha": "2c4439f80a23906e250356a4a0d86729d90adfe6", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -24,7 +24,6 @@\n // - It's not possible to take the address of a static item with unsafe interior. This is enforced\n // by borrowck::gather_loans\n \n-use rustc::dep_graph::DepNode;\n use rustc::ty::cast::CastKind;\n use rustc_const_eval::ConstContext;\n use rustc::middle::const_val::ConstEvalErr;\n@@ -459,15 +458,14 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_item_likes_in_krate(DepNode::CheckConst,\n-                                      &mut CheckCrateVisitor {\n-                                          tcx: tcx,\n-                                          tables: &ty::TypeckTables::empty(),\n-                                          in_fn: false,\n-                                          promotable: false,\n-                                          mut_rvalue_borrows: NodeSet(),\n-                                          param_env: tcx.empty_parameter_environment(),\n-                                      }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut CheckCrateVisitor {\n+        tcx: tcx,\n+        tables: &ty::TypeckTables::empty(),\n+        in_fn: false,\n+        promotable: false,\n+        mut_rvalue_borrows: NodeSet(),\n+        param_env: tcx.empty_parameter_environment(),\n+    }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "88af8b49b9e7e72905c93a69322b4255d69cd8fa", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -14,7 +14,6 @@ use syntax::ast;\n use syntax::attr;\n use errors;\n use syntax_pos::Span;\n-use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n@@ -44,7 +43,6 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n                              hir_map: &Map)\n                              -> Option<ast::NodeId> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::PluginRegistrar);\n     let krate = hir_map.krate();\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };"}, {"sha": "7c0522a9c8cf81422c017437c79143e25d07ab43", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -192,8 +192,6 @@ pub fn link_binary(sess: &Session,\n                    trans: &CrateTranslation,\n                    outputs: &OutputFilenames,\n                    crate_name: &str) -> Vec<PathBuf> {\n-    let _task = sess.dep_graph.in_task(DepNode::LinkBinary);\n-\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-trans, as they will error."}, {"sha": "cb8022efedb84146a166b0682771dc539f77f574", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -38,7 +38,7 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use middle::lang_items::StartFnLangItem;\n use middle::cstore::EncodedMetadata;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::dep_graph::{AssertDepGraphSafe, DepNode};\n+use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n@@ -1057,8 +1057,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              analysis: ty::CrateAnalysis,\n                              incremental_hashes_map: &IncrementalHashesMap)\n                              -> CrateTranslation {\n-    let _task = tcx.dep_graph.in_task(DepNode::TransCrate);\n-\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n     // `TransCrate`, you need to be careful to register \"reads\" of the"}, {"sha": "32aeeeb110556804c12f3287f0f8b35cb3d5941a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -82,7 +82,6 @@ pub use self::compare_method::{compare_impl_method, compare_const_impl};\n use self::TupleArgumentsFlag::*;\n \n use astconv::AstConv;\n-use dep_graph::DepNode;\n use fmt_macros::{Parser, Piece, Position};\n use hir::def::{Def, CtorKind};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -577,14 +576,13 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut visit.as_deep_visitor());\n+        tcx.hir.krate().visit_all_item_likes(&mut visit.as_deep_visitor());\n     })\n }\n \n pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n-        tcx.visit_all_item_likes_in_krate(DepNode::TypeckItemType,\n-                                          &mut CheckItemTypesVisitor { tcx });\n+        tcx.hir.krate().visit_all_item_likes(&mut CheckItemTypesVisitor { tcx });\n     })\n }\n "}, {"sha": "c9479c5cebc3ed469cc8dec39ebfd4083273bff6", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use lint;\n-use rustc::dep_graph::DepNode;\n use rustc::ty::TyCtxt;\n \n use syntax::ast;\n@@ -62,8 +61,6 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::UnusedTraitCheck);\n-\n     let mut used_trait_imports = DefIdSet();\n     for &body_id in tcx.hir.krate().bodies.keys() {\n         let item_id = tcx.hir.body_owner(body_id);"}, {"sha": "b385ddc49c1ee094432220d0af1472ef610b837b", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -18,7 +18,6 @@\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::maps::Providers;\n-use rustc::dep_graph::DepNode;\n \n use syntax::ast;\n use syntax_pos::DUMMY_SP;\n@@ -132,7 +131,6 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::Coherence);\n     for &trait_def_id in tcx.hir.krate().trait_impls.keys() {\n         ty::queries::coherent_trait::get(tcx, DUMMY_SP, (LOCAL_CRATE, trait_def_id));\n     }"}, {"sha": "8ded3003c78eb312fa943f79f6f287d71156b5d8", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -13,13 +13,12 @@\n \n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n-use rustc::dep_graph::DepNode;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOrphanCheck, &mut orphan);\n+    tcx.hir.krate().visit_all_item_likes(&mut orphan);\n }\n \n struct OrphanChecker<'cx, 'tcx: 'cx> {"}, {"sha": "74edc7bff495c24dfcbcd4ee2fdca0ef7eeb801f", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -24,7 +24,7 @@ pub fn check_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     // this secondary walk specifically checks for some other cases,\n     // like defaulted traits, for which additional overlap rules exist\n-    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOverlapCheckSpecial, &mut overlap);\n+    tcx.hir.krate().visit_all_item_likes(&mut overlap);\n }\n \n pub fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {"}, {"sha": "af0ef279e4f0dfdc894524d9ea31fede68b117aa", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -64,7 +64,6 @@ use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n-use rustc::dep_graph::DepNode;\n use util::nodemap::{NodeMap, FxHashMap};\n \n use rustc_const_math::ConstInt;\n@@ -87,7 +86,7 @@ use rustc::hir::def_id::DefId;\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = CollectItemTypesVisitor { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::CollectItem, &mut visitor.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -126,57 +125,13 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>\n }\n \n-impl<'a, 'tcx> CollectItemTypesVisitor<'a, 'tcx> {\n-    /// Collect item types is structured into two tasks. The outer\n-    /// task, `CollectItem`, walks the entire content of an item-like\n-    /// thing, including its body. It also spawns an inner task,\n-    /// `CollectItemSig`, which walks only the signature. This inner\n-    /// task is the one that writes the item-type into the various\n-    /// maps.  This setup ensures that the item body is never\n-    /// accessible to the task that computes its signature, so that\n-    /// changes to the body don't affect the signature.\n-    ///\n-    /// Consider an example function `foo` that also has a closure in its body:\n-    ///\n-    /// ```\n-    /// fn foo(<sig>) {\n-    ///     ...\n-    ///     let bar = || ...; // we'll label this closure as \"bar\" below\n-    /// }\n-    /// ```\n-    ///\n-    /// This results in a dep-graph like so. I've labeled the edges to\n-    /// document where they arise.\n-    ///\n-    /// ```\n-    /// [HirBody(foo)] -2--> [CollectItem(foo)] -4-> [ItemSignature(bar)]\n-    ///                       ^           ^\n-    ///                       1           3\n-    /// [Hir(foo)] -----------+-6-> [CollectItemSig(foo)] -5-> [ItemSignature(foo)]\n-    /// ```\n-    ///\n-    /// 1. This is added by the `visit_all_item_likes_in_krate`.\n-    /// 2. This is added when we fetch the item body.\n-    /// 3. This is added because `CollectItem` launches `CollectItemSig`.\n-    ///    - it is arguably false; if we refactor the `with_task` system;\n-    ///      we could get probably rid of it, but it is also harmless enough.\n-    /// 4. This is added by the code in `visit_expr` when we write to `item_types`.\n-    /// 5. This is added by the code in `convert_item` when we write to `item_types`;\n-    ///    note that this write occurs inside the `CollectItemSig` task.\n-    /// 6. Added by reads from within `op`.\n-    fn with_collect_item_sig(&self, id: ast::NodeId, op: fn(TyCtxt<'a, 'tcx, 'tcx>, ast::NodeId)) {\n-        let def_id = self.tcx.hir.local_def_id(id);\n-        self.tcx.dep_graph.with_task(DepNode::CollectItemSig(def_id), self.tcx, id, op);\n-    }\n-}\n-\n impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir)\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        self.with_collect_item_sig(item.id, convert_item);\n+        convert_item(self.tcx, item.id);\n         intravisit::walk_item(self, item);\n     }\n \n@@ -209,12 +164,12 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        self.with_collect_item_sig(trait_item.id, convert_trait_item);\n+        convert_trait_item(self.tcx, trait_item.id);\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        self.with_collect_item_sig(impl_item.id, convert_impl_item);\n+        convert_impl_item(self.tcx, impl_item.id);\n         intravisit::walk_impl_item(self, impl_item);\n     }\n }"}, {"sha": "5751dc5ab8a0ab867a8500694ccb8bc09ead1f3f", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -19,7 +19,6 @@\n //! fixed, but for the moment it's easier to do these checks early.\n \n use constrained_type_params as ctp;\n-use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n@@ -63,7 +62,7 @@ pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut ImplWfCheck { tcx: tcx });\n+    tcx.hir.krate().visit_all_item_likes(&mut ImplWfCheck { tcx: tcx });\n }\n \n struct ImplWfCheck<'a, 'tcx: 'a> {"}, {"sha": "e9a606dc0ab1dfe10f9130f264869935d397c4dc", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -104,7 +104,6 @@ pub use rustc::middle;\n pub use rustc::session;\n pub use rustc::util;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n@@ -273,7 +272,6 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::CheckEntryFn);\n     if let Some((id, sp)) = *tcx.sess.entry_fn.borrow() {\n         match tcx.sess.entry_type.get() {\n             Some(config::EntryMain) => check_main_fn_ty(tcx, id, sp),"}, {"sha": "7ed8b95f88b002b2a0f3748b9d6ca6db3284f6e8", "filename": "src/test/compile-fail/dep-graph-struct-signature.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs?ref=ceaa55ea451c8ff40ce9c91f5d9c2f2b30e96d3b", "patch": "@@ -35,62 +35,51 @@ mod signatures {\n     use WillChange;\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path\n     trait Bar {\n         #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-        #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n         fn do_something(x: WillChange);\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     fn some_fn(x: WillChange) { }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     fn new_foo(x: u32, y: u32) -> WillChange {\n         WillChange { x: x, y: y }\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     impl WillChange {\n         fn new(x: u32, y: u32) -> WillChange { loop { } }\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     impl WillChange {\n         fn method(&self, x: u32) { }\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     struct WillChanges {\n         x: WillChange,\n         y: WillChange\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n     fn indirect(x: WillChanges) { }\n }\n \n mod invalid_signatures {\n     use WontChange;\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path\n     trait A {\n         fn do_something_else_twice(x: WontChange);\n     }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path\n     fn b(x: WontChange) { }\n \n     #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path from `WillChange`\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path from `WillChange`\n     fn c(x: u32) { }\n }\n "}]}