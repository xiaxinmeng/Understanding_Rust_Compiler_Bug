{"sha": "cd85120ef9be436b8cd32c7208a913cc41c66e13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkODUxMjBlZjliZTQzNmI4Y2QzMmM3MjA4YTkxM2NjNDFjNjZlMTM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-14T05:39:23Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-14T05:39:23Z"}, "message": "trans: always register an item's symbol, even if duplicated.", "tree": {"sha": "ecdb9201e08f64666529d54fa808808926c5ed4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecdb9201e08f64666529d54fa808808926c5ed4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd85120ef9be436b8cd32c7208a913cc41c66e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd85120ef9be436b8cd32c7208a913cc41c66e13", "html_url": "https://github.com/rust-lang/rust/commit/cd85120ef9be436b8cd32c7208a913cc41c66e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd85120ef9be436b8cd32c7208a913cc41c66e13/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adb0923492d737a4b3243db05f042e22a672b2d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb0923492d737a4b3243db05f042e22a672b2d8", "html_url": "https://github.com/rust-lang/rust/commit/adb0923492d737a4b3243db05f042e22a672b2d8"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "8c22ddbb462c025c5ce1dfa5c8fbec40cbe2094c", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd85120ef9be436b8cd32c7208a913cc41c66e13/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd85120ef9be436b8cd32c7208a913cc41c66e13/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=cd85120ef9be436b8cd32c7208a913cc41c66e13", "patch": "@@ -582,15 +582,19 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         debug!(\"get_fn: not casting pointer!\");\n \n         attributes::from_fn_attrs(ccx, attrs, llfn);\n-        if let Some(id) = local_item {\n+        if local_item.is_some() {\n             // FIXME(eddyb) Doubt all extern fn should allow unwinding.\n             attributes::unwind(llfn, true);\n-            ccx.item_symbols().borrow_mut().insert(id, sym);\n         }\n \n         llfn\n     };\n \n+    // Always insert into item_symbols, in case this item is exported.\n+    if let Some(id) = local_item {\n+        ccx.item_symbols().borrow_mut().insert(id, sym);\n+    }\n+\n     ccx.instances().borrow_mut().insert(instance, llfn);\n \n     immediate_rvalue(llfn, fn_ptr_ty)"}, {"sha": "460d0a0088ce2918813c5374d8558d63a99409fd", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd85120ef9be436b8cd32c7208a913cc41c66e13/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd85120ef9be436b8cd32c7208a913cc41c66e13/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=cd85120ef9be436b8cd32c7208a913cc41c66e13", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"foreign_lib\"]\n+\n #![feature(libc)]\n \n pub mod rustrt {\n@@ -19,3 +20,29 @@ pub mod rustrt {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n+\n+pub mod rustrt2 {\n+    extern crate libc;\n+\n+    extern {\n+        pub fn rust_get_test_int() -> libc::intptr_t;\n+    }\n+}\n+\n+pub mod rustrt3 {\n+    // Different type, but same ABI (on all supported platforms).\n+    // Ensures that we don't ICE or trigger LLVM asserts when\n+    // importing the same symbol under different types.\n+    // See https://github.com/rust-lang/rust/issues/32740.\n+    extern {\n+        pub fn rust_get_test_int() -> *const u8;\n+    }\n+}\n+\n+pub fn local_uses() {\n+    unsafe {\n+        let x = rustrt::rust_get_test_int();\n+        assert_eq!(x, rustrt2::rust_get_test_int());\n+        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n+    }\n+}"}, {"sha": "fb162d8793356a35f625a49a5091b105ab56f312", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd85120ef9be436b8cd32c7208a913cc41c66e13/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd85120ef9be436b8cd32c7208a913cc41c66e13/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=cd85120ef9be436b8cd32c7208a913cc41c66e13", "patch": "@@ -8,41 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// calling pin_thread and that's having weird side-effects.\n+// aux-build:foreign_lib.rs\n \n-#![feature(libc)]\n+// Check that we can still call duplicated extern (imported) functions\n+// which were declared in another crate. See issues #32740 and #32783.\n \n-mod rustrt1 {\n-    extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-mod rustrt2 {\n-    extern crate libc;\n-\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-mod rustrt3 {\n-    // Different type, but same ABI (on all supported platforms).\n-    // Ensures that we don't ICE or trigger LLVM asserts when\n-    // importing the same symbol under different types.\n-    // See https://github.com/rust-lang/rust/issues/32740.\n-    extern {\n-        pub fn rust_get_test_int() -> *const u8;\n-    }\n-}\n+extern crate foreign_lib;\n \n pub fn main() {\n     unsafe {\n-        let x = rustrt1::rust_get_test_int();\n-        assert_eq!(x, rustrt2::rust_get_test_int());\n-        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n+        let x = foreign_lib::rustrt::rust_get_test_int();\n+        assert_eq!(x, foreign_lib::rustrt2::rust_get_test_int());\n+        assert_eq!(x as *const _, foreign_lib::rustrt3::rust_get_test_int());\n     }\n }"}]}