{"sha": "c4c2ab57a43737867982fafc8cfacd9b069fee96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YzJhYjU3YTQzNzM3ODY3OTgyZmFmYzhjZmFjZDliMDY5ZmVlOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T07:10:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T07:10:55Z"}, "message": "Auto merge of #85959 - RalfJung:miri-stage-0, r=Mark-Simulacrum\n\nfix testing Miri with --stage 0\n\nFixes https://github.com/rust-lang/rust/issues/78778 for Miri.\n\nThe issue remains open for error_index_generator, which has its own dylib logic:\nhttps://github.com/rust-lang/rust/blob/903e369c831d52726a5292f847e384622189d9a0/src/bootstrap/tool.rs#L396-L400\n`@jyn514` I could just copy the logic from `add_rustc_lib_path`, but that does not seem great. Any other suggestions?\n\nAlso I wonder if maybe `prepare_tool_cargo` should already call `add_rustc_lib_path`.", "tree": {"sha": "fa35d027efccc77a852ff3985a3ef25e1d5f1ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa35d027efccc77a852ff3985a3ef25e1d5f1ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c2ab57a43737867982fafc8cfacd9b069fee96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c2ab57a43737867982fafc8cfacd9b069fee96", "html_url": "https://github.com/rust-lang/rust/commit/c4c2ab57a43737867982fafc8cfacd9b069fee96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c2ab57a43737867982fafc8cfacd9b069fee96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4afa3a80926f52aa361fe4e89643dac2e2e57f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/4afa3a80926f52aa361fe4e89643dac2e2e57f34", "html_url": "https://github.com/rust-lang/rust/commit/4afa3a80926f52aa361fe4e89643dac2e2e57f34"}, {"sha": "9e674af66903a82676118a409a3487beb05fbfc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e674af66903a82676118a409a3487beb05fbfc9", "html_url": "https://github.com/rust-lang/rust/commit/9e674af66903a82676118a409a3487beb05fbfc9"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "da298f7edb9f45b7141963a92c4739c09e0d85dd", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4c2ab57a43737867982fafc8cfacd9b069fee96/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c2ab57a43737867982fafc8cfacd9b069fee96/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c4c2ab57a43737867982fafc8cfacd9b069fee96", "patch": "@@ -709,7 +709,15 @@ impl<'a> Builder<'a> {\n             return;\n         }\n \n-        add_dylib_path(vec![self.rustc_libdir(compiler)], cmd);\n+        let mut dylib_dirs = vec![self.rustc_libdir(compiler)];\n+\n+        // Ensure that the downloaded LLVM libraries can be found.\n+        if self.config.llvm_from_ci {\n+            let ci_llvm_lib = self.out.join(&*compiler.host.triple).join(\"ci-llvm\").join(\"lib\");\n+            dylib_dirs.push(ci_llvm_lib);\n+        }\n+\n+        add_dylib_path(dylib_dirs, cmd);\n     }\n \n     /// Gets a path to the compiler specified."}, {"sha": "7bd29c61b0cdb7b4e6b9f7168fbc4ab7751e9329", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4c2ab57a43737867982fafc8cfacd9b069fee96/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c2ab57a43737867982fafc8cfacd9b069fee96/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c4c2ab57a43737867982fafc8cfacd9b069fee96", "patch": "@@ -449,6 +449,7 @@ impl Step for Miri {\n                 SourceType::Submodule,\n                 &[],\n             );\n+            cargo.add_rustc_lib_path(builder, compiler);\n             cargo.arg(\"--\").arg(\"miri\").arg(\"setup\");\n \n             // Tell `cargo miri setup` where to find the sources.\n@@ -500,6 +501,7 @@ impl Step for Miri {\n                 SourceType::Submodule,\n                 &[],\n             );\n+            cargo.add_rustc_lib_path(builder, compiler);\n \n             // miri tests need to know about the stage sysroot\n             cargo.env(\"MIRI_SYSROOT\", miri_sysroot);\n@@ -508,8 +510,6 @@ impl Step for Miri {\n \n             cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-            cargo.add_rustc_lib_path(builder, compiler);\n-\n             let mut cargo = Command::from(cargo);\n             if !try_run(builder, &mut cargo) {\n                 return;"}, {"sha": "4c1cd758f0d1577f8dd06fa30680495bae3e8b01", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4c2ab57a43737867982fafc8cfacd9b069fee96/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c2ab57a43737867982fafc8cfacd9b069fee96/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=c4c2ab57a43737867982fafc8cfacd9b069fee96", "patch": "@@ -45,6 +45,7 @@ pub fn libdir(target: TargetSelection) -> &'static str {\n }\n \n /// Adds a list of lookup paths to `cmd`'s dynamic library lookup path.\n+/// If The dylib_path_par is already set for this cmd, the old value will be overwritten!\n pub fn add_dylib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     let mut list = dylib_path();\n     for path in path {"}]}