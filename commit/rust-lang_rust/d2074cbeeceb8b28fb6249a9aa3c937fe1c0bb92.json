{"sha": "d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "node_id": "C_kwDOAAsO6NoAKGQyMDc0Y2JlZWNlYjhiMjhmYjYyNDlhOWFhM2M5MzdmZTFjMGJiOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-04T12:32:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-04T12:32:39Z"}, "message": "Auto merge of #98817 - the8472:dont-optimize-ui-tests, r=Mark-Simulacrum\n\nOnly obey optimize-tests flag on UI tests that are run-pass\n\nstage1 UI tests walltime on my machine:\n\n```\noptimize-tests = false, master\n25.98s\n\noptimize-tests = true, master\n34.69s\n\noptimize-tests = true, patched\n28.79s\n```\n\nEffects:\n\n- faster UI tests\n- llvm asserts get exercised less on build-pass tests\n- the difference between opt and nopt builds shrinks a bit\n- aux libs don't get optimized since they don't have a pass mode and almost never have explicit compile flags", "tree": {"sha": "b32099863f914d7ab93bbdb1fbaf2370d1a5f5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b32099863f914d7ab93bbdb1fbaf2370d1a5f5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "html_url": "https://github.com/rust-lang/rust/commit/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3beeaa84da241f35888338ded6659938206ff13", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3beeaa84da241f35888338ded6659938206ff13", "html_url": "https://github.com/rust-lang/rust/commit/a3beeaa84da241f35888338ded6659938206ff13"}, {"sha": "f71923942499124357b9005ea3567b20f4f5ab26", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71923942499124357b9005ea3567b20f4f5ab26", "html_url": "https://github.com/rust-lang/rust/commit/f71923942499124357b9005ea3567b20f4f5ab26"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "f3395507bb08bd25e58aae276cd4a6e8b58f17bb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "patch": "@@ -1363,13 +1363,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         if let Some(ref npm) = builder.config.npm {\n             cmd.arg(\"--npm\").arg(npm);\n         }\n-\n-        let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n-        if !is_rustdoc {\n-            if builder.config.rust_optimize_tests {\n-                flags.push(\"-O\".to_string());\n-            }\n+        if builder.config.rust_optimize_tests {\n+            cmd.arg(\"--optimize-tests\");\n         }\n+        let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n         flags.push(format!(\"-Cdebuginfo={}\", builder.config.rust_debuginfo_level_tests));\n         flags.push(builder.config.cmd.rustc_args().join(\" \"));\n "}, {"sha": "be81ff881f3a897f4e827ab93ebae7711ef44c97", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "patch": "@@ -269,6 +269,10 @@ pub struct Config {\n     /// Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n+    /// Whether tests should be optimized by default. Individual test-suites and test files may\n+    /// override this setting.\n+    pub optimize_tests: bool,\n+\n     /// What panic strategy the target is built with.  Unwind supports Abort, but\n     /// not vice versa.\n     pub target_panic: PanicStrategy,"}, {"sha": "7cf4a88c47043593e870e675e51d0dfcf2100ac4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "patch": "@@ -244,6 +244,7 @@ impl TestProps {\n \n         // copy over select properties to the aux build:\n         props.incremental_dir = self.incremental_dir.clone();\n+        props.ignore_pass = true;\n         props.load_from(testfile, cfg, config);\n \n         props"}, {"sha": "a8a151ca114d2aa82960e2458312d5cccf843468", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "patch": "@@ -102,6 +102,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         )\n         .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n         .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optflag(\"\", \"optimize-tests\", \"run tests with optimizations enabled\")\n         .optopt(\"\", \"target-panic\", \"what panic strategy the target supports\", \"unwind | abort\")\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n         .optflag(\n@@ -253,6 +254,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: Some(matches.opt_strs(\"host-rustcflags\").join(\" \")),\n         target_rustcflags: Some(matches.opt_strs(\"target-rustcflags\").join(\" \")),\n+        optimize_tests: matches.opt_present(\"optimize-tests\"),\n         target_panic: match matches.opt_str(\"target-panic\").as_deref() {\n             Some(\"unwind\") | None => PanicStrategy::Unwind,\n             Some(\"abort\") => PanicStrategy::Abort,"}, {"sha": "dd9e2a6687e7a8294ce78ae9ebeddfd31a98708a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d2074cbeeceb8b28fb6249a9aa3c937fe1c0bb92", "patch": "@@ -1862,6 +1862,31 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n+        if self.config.optimize_tests && !is_rustdoc {\n+            match self.config.mode {\n+                Ui => {\n+                    // If optimize-tests is true we still only want to optimize tests that actually get\n+                    // executed and that don't specify their own optimization levels.\n+                    // Note: aux libs don't have a pass-mode, so they won't get optimized\n+                    // unless compile-flags are set in the aux file.\n+                    if self.config.optimize_tests\n+                        && self.props.pass_mode(&self.config) == Some(PassMode::Run)\n+                        && !self\n+                            .props\n+                            .compile_flags\n+                            .iter()\n+                            .any(|arg| arg == \"-O\" || arg.contains(\"opt-level\"))\n+                    {\n+                        rustc.arg(\"-O\");\n+                    }\n+                }\n+                DebugInfo => { /* debuginfo tests must be unoptimized */ }\n+                _ => {\n+                    rustc.arg(\"-O\");\n+                }\n+            }\n+        }\n+\n         match self.config.mode {\n             Incremental => {\n                 // If we are extracting and matching errors in the new"}]}