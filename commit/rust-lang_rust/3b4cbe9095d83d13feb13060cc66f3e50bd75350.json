{"sha": "3b4cbe9095d83d13feb13060cc66f3e50bd75350", "node_id": "C_kwDOAAsO6NoAKDNiNGNiZTkwOTVkODNkMTNmZWIxMzA2MGNjNjZmM2U1MGJkNzUzNTA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-03T17:38:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-03T17:38:16Z"}, "message": "add test for self-referential future", "tree": {"sha": "33e1bf0106f2187b725add3bec08aae5acfdc71c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e1bf0106f2187b725add3bec08aae5acfdc71c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b4cbe9095d83d13feb13060cc66f3e50bd75350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4cbe9095d83d13feb13060cc66f3e50bd75350", "html_url": "https://github.com/rust-lang/rust/commit/3b4cbe9095d83d13feb13060cc66f3e50bd75350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b4cbe9095d83d13feb13060cc66f3e50bd75350/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229e65af51d75ec1a02ca24d2f638fd2b8d4d516", "url": "https://api.github.com/repos/rust-lang/rust/commits/229e65af51d75ec1a02ca24d2f638fd2b8d4d516", "html_url": "https://github.com/rust-lang/rust/commit/229e65af51d75ec1a02ca24d2f638fd2b8d4d516"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "3ba21552fd362da1ce18c442c6e4a559e095f17e", "filename": "src/tools/miri/tests/pass/stacked-borrows/future-self-referential.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/3b4cbe9095d83d13feb13060cc66f3e50bd75350/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Ffuture-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4cbe9095d83d13feb13060cc66f3e50bd75350/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Ffuture-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Ffuture-self-referential.rs?ref=3b4cbe9095d83d13feb13060cc66f3e50bd75350", "patch": "@@ -0,0 +1,102 @@\n+#![feature(pin_macro)]\n+\n+use std::future::*;\n+use std::marker::PhantomPinned;\n+use std::pin::*;\n+use std::ptr;\n+use std::task::*;\n+\n+struct Delay {\n+    delay: usize,\n+}\n+\n+impl Delay {\n+    fn new(delay: usize) -> Self {\n+        Delay { delay }\n+    }\n+}\n+\n+impl Future for Delay {\n+    type Output = ();\n+    fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<()> {\n+        if self.delay > 0 {\n+            self.delay -= 1;\n+            Poll::Pending\n+        } else {\n+            Poll::Ready(())\n+        }\n+    }\n+}\n+\n+async fn do_stuff() {\n+    (&mut Delay::new(1)).await;\n+}\n+\n+// Same thing implemented by hand\n+struct DoStuff {\n+    state: usize,\n+    delay: Delay,\n+    delay_ref: *mut Delay,\n+    _marker: PhantomPinned,\n+}\n+\n+impl DoStuff {\n+    fn new() -> Self {\n+        DoStuff {\n+            state: 0,\n+            delay: Delay::new(1),\n+            delay_ref: ptr::null_mut(),\n+            _marker: PhantomPinned,\n+        }\n+    }\n+}\n+\n+impl Future for DoStuff {\n+    type Output = ();\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n+        unsafe {\n+            let this = self.get_unchecked_mut();\n+            match this.state {\n+                0 => {\n+                    // Set up self-ref.\n+                    this.delay_ref = &mut this.delay;\n+                    // Move to next state.\n+                    this.state = 1;\n+                    Poll::Pending\n+                }\n+                1 => {\n+                    let delay = &mut *this.delay_ref;\n+                    Pin::new_unchecked(delay).poll(cx)\n+                }\n+                _ => unreachable!(),\n+            }\n+        }\n+    }\n+}\n+\n+fn run_fut<T>(fut: impl Future<Output = T>) -> T {\n+    use std::sync::Arc;\n+\n+    struct MyWaker;\n+    impl Wake for MyWaker {\n+        fn wake(self: Arc<Self>) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    let waker = Waker::from(Arc::new(MyWaker));\n+    let mut context = Context::from_waker(&waker);\n+\n+    let mut pinned = pin!(fut);\n+    loop {\n+        match pinned.as_mut().poll(&mut context) {\n+            Poll::Pending => continue,\n+            Poll::Ready(v) => return v,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    run_fut(do_stuff());\n+    run_fut(DoStuff::new());\n+}"}]}