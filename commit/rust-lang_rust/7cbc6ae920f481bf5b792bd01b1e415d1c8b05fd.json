{"sha": "7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd", "node_id": "C_kwDOAAsO6NoAKDdjYmM2YWU5MjBmNDgxYmY1Yjc5MmJkMDFiMWU0MTVkMWM4YjA1ZmQ", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-20T11:30:53Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-20T11:45:12Z"}, "message": "ide: hover omits unnamed where preds", "tree": {"sha": "14b7c34f6d16ec03d4e2ec964b1e8b774849ea94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b7c34f6d16ec03d4e2ec964b1e8b774849ea94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd", "html_url": "https://github.com/rust-lang/rust/commit/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14dff25107cec4473fde8c999256a3484a7ef1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/14dff25107cec4473fde8c999256a3484a7ef1d0", "html_url": "https://github.com/rust-lang/rust/commit/14dff25107cec4473fde8c999256a3484a7ef1d0"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "38bbf4179714395ba6f5a4be0d5659015a4d6fe9", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd", "patch": "@@ -325,7 +325,21 @@ fn write_generic_params(def: GenericDefId, f: &mut HirFormatter) -> Result<(), H\n \n fn write_where_clause(def: GenericDefId, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n     let params = f.db.generic_params(def);\n-    if params.where_predicates.is_empty() {\n+\n+    // unnamed type targets are displayed inline with the argument itself, e.g. `f: impl Y`.\n+    let is_unnamed_type_target = |target: &WherePredicateTypeTarget| match target {\n+        WherePredicateTypeTarget::TypeRef(_) => false,\n+        WherePredicateTypeTarget::TypeParam(id) => params.types[*id].name.is_none(),\n+    };\n+\n+    let has_displayable_predicate = params\n+        .where_predicates\n+        .iter()\n+        .any(|pred| {\n+            !matches!(pred, WherePredicate::TypeBound { target, .. } if is_unnamed_type_target(target))\n+        });\n+\n+    if !has_displayable_predicate {\n         return Ok(());\n     }\n \n@@ -348,6 +362,7 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter) -> Result<(), Hir\n         };\n \n         match pred {\n+            WherePredicate::TypeBound { target, .. } if is_unnamed_type_target(target) => {}\n             WherePredicate::TypeBound { target, bound } => {\n                 if matches!(prev_pred, Some(WherePredicate::TypeBound { target: target_, .. }) if target_ == target)\n                 {"}, {"sha": "c745f86d84e9b3ec0db016275aafcacbe80e8a45", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=7cbc6ae920f481bf5b792bd01b1e415d1c8b05fd", "patch": "@@ -340,6 +340,48 @@ fn main() { m::f$0oo(); }\n     );\n }\n \n+#[test]\n+fn hover_omits_unnamed_where_preds() {\n+    check(\n+        r#\"\n+pub fn foo(bar: impl T) { }\n+\n+fn main() { fo$0o(); }\n+        \"#,\n+        expect![[r#\"\n+            *foo*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub fn foo(bar: impl T)\n+            ```\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+pub fn foo<V: AsRef<str>>(bar: impl T, baz: V) { }\n+\n+fn main() { fo$0o(); }\n+        \"#,\n+        expect![[r#\"\n+            *foo*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub fn foo<V>(bar: impl T, baz: V)\n+            where\n+                V: AsRef<str>,\n+            ```\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_shows_fn_signature_with_type_params() {\n     check("}]}