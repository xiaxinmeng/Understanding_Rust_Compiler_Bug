{"sha": "50eb39757e471ed50ab34862af776f044c88222d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZWIzOTc1N2U0NzFlZDUwYWIzNDg2MmFmNzc2ZjA0NGM4ODIyMmQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-13T20:32:40Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-13T20:37:20Z"}, "message": "allow const generics in const fn", "tree": {"sha": "ebff0ebf52af9ba20b6f0ac1df76e29b4e88b553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebff0ebf52af9ba20b6f0ac1df76e29b4e88b553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50eb39757e471ed50ab34862af776f044c88222d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50eb39757e471ed50ab34862af776f044c88222d", "html_url": "https://github.com/rust-lang/rust/commit/50eb39757e471ed50ab34862af776f044c88222d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50eb39757e471ed50ab34862af776f044c88222d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58c53274401acdc739f177aa3e408241e2e52d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58c53274401acdc739f177aa3e408241e2e52d8", "html_url": "https://github.com/rust-lang/rust/commit/c58c53274401acdc739f177aa3e408241e2e52d8"}], "stats": {"total": 46, "additions": 5, "deletions": 41}, "files": [{"sha": "395fd7460850f1de623bfbe733735eaa5d31501d", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/50eb39757e471ed50ab34862af776f044c88222d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50eb39757e471ed50ab34862af776f044c88222d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=50eb39757e471ed50ab34862af776f044c88222d", "patch": "@@ -561,28 +561,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    /// We currently do not permit const generics in `const fn`,\n-    /// as this is tantamount to allowing compile-time dependent typing.\n-    ///\n-    /// FIXME(const_generics): Is this really true / necessary? Discuss with @varkor.\n-    /// At any rate, the restriction feels too syntactic. Consider moving it to e.g. typeck.\n-    fn check_const_fn_const_generic(&self, span: Span, sig: &FnSig, generics: &Generics) {\n-        if let Const::Yes(const_span) = sig.header.constness {\n-            // Look for const generics and error if we find any.\n-            for param in &generics.params {\n-                if let GenericParamKind::Const { .. } = param.kind {\n-                    self.err_handler()\n-                        .struct_span_err(\n-                            span,\n-                            \"const parameters are not permitted in const functions\",\n-                        )\n-                        .span_label(const_span, \"`const` because of this\")\n-                        .emit();\n-                }\n-            }\n-        }\n-    }\n-\n     fn check_item_named(&self, ident: Ident, kind: &str) {\n         if ident.name != kw::Underscore {\n             return;\n@@ -966,9 +944,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(def, ref sig, ref generics, ref body) => {\n+            ItemKind::Fn(def, _, _, ref body) => {\n                 self.check_defaultness(item.span, def);\n-                self.check_const_fn_const_generic(item.span, sig, generics);\n \n                 if body.is_none() {\n                     let msg = \"free function without a body\";"}, {"sha": "3d8b77bcf7b47d4444e0d1c5069c451cbd4c9a69", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50eb39757e471ed50ab34862af776f044c88222d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50eb39757e471ed50ab34862af776f044c88222d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=50eb39757e471ed50ab34862af776f044c88222d", "patch": "@@ -1,11 +1,11 @@\n+// run-pass\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n const fn const_u32_identity<const X: u32>() -> u32 {\n-    //~^ ERROR const parameters are not permitted in const functions\n     X\n }\n \n fn main() {\n-    println!(\"{:?}\", const_u32_identity::<18>());\n+    assert_eq!(const_u32_identity::<18>(), 18);\n }"}, {"sha": "64b9c18a8f5255f2c4a6a1c298e3be8e792e64d0", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/50eb39757e471ed50ab34862af776f044c88222d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50eb39757e471ed50ab34862af776f044c88222d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=50eb39757e471ed50ab34862af776f044c88222d", "patch": "@@ -1,23 +1,10 @@\n-error: const parameters are not permitted in const functions\n-  --> $DIR/const-fn-with-const-param.rs:4:1\n-   |\n-LL |   const fn const_u32_identity<const X: u32>() -> u32 {\n-   |   ^----\n-   |   |\n-   |  _`const` because of this\n-   | |\n-LL | |\n-LL | |     X\n-LL | | }\n-   | |_^\n-\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/const-fn-with-const-param.rs:1:12\n+  --> $DIR/const-fn-with-const-param.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error: aborting due to previous error; 1 warning emitted\n+warning: 1 warning emitted\n "}]}