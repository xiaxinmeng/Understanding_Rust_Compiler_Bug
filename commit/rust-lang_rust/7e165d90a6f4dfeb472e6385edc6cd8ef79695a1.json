{"sha": "7e165d90a6f4dfeb472e6385edc6cd8ef79695a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTY1ZDkwYTZmNGRmZWI0NzJlNjM4NWVkYzZjZDhlZjc5Njk1YTE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-07-04T18:30:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-29T08:10:58Z"}, "message": "Add a list of known facts re: validity\n\nAlso rewrites the reads/writes section to be less reliant on `*const`,\n`*mut`", "tree": {"sha": "57014f06685362f843533f6307c89152a01702a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57014f06685362f843533f6307c89152a01702a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e165d90a6f4dfeb472e6385edc6cd8ef79695a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e165d90a6f4dfeb472e6385edc6cd8ef79695a1", "html_url": "https://github.com/rust-lang/rust/commit/7e165d90a6f4dfeb472e6385edc6cd8ef79695a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e165d90a6f4dfeb472e6385edc6cd8ef79695a1/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a9088603368fb8f80a1841bc8ddb20509cfd45", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a9088603368fb8f80a1841bc8ddb20509cfd45", "html_url": "https://github.com/rust-lang/rust/commit/95a9088603368fb8f80a1841bc8ddb20509cfd45"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "7687f16b4ce4952c69c456da0af0046a34a09523", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7e165d90a6f4dfeb472e6385edc6cd8ef79695a1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e165d90a6f4dfeb472e6385edc6cd8ef79695a1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=7e165d90a6f4dfeb472e6385edc6cd8ef79695a1", "patch": "@@ -21,23 +21,37 @@\n //! rust does not yet have a formal memory model, determining whether an\n //! arbitrary pointer is valid for a given operation can be tricky.\n //!\n-//! There are two types of operations on memory, reads and writes. It is\n-//! possible for a `*mut` to be valid for one operation and not the other. Since\n-//! a `*const` can only be read and not written, it has no such ambiguity. For\n-//! example, a `*mut` is not valid for writes if a a reference exists which\n-//! [refers to the same memory][aliasing]. Therefore, each function in this\n-//! module will document which operations must be valid on any `*mut` arguments.\n+//! There are two types of operations on memory, reads and writes. A single\n+//! pointer can be valid for any combination of these operations. For example, a\n+//! pointer is not valid for writes if a `&mut` exists which [refers to the same\n+//! memory][aliasing]. The set of operations for which a pointer argument must\n+//! be valid is explicitly documented for each function. This is not strictly\n+//! necessary for `*const` arguments, as they can only be used for reads and\n+//! never for writes.\n //!\n-//! Additionally, some functions (e.g. [`copy`]) take a single pointer but\n+//! Some functions (e.g. [`copy`]) take a single pointer but\n //! operate on many values. In this case, the function will state the size of\n //! the operation for which the pointer must be valid. For example,\n //! `copy::<T>(&src, &mut dst, 3)` requires `dst` to be valid for writes of\n //! `size_of::<T>() * 3` bytes. When the documentation requires that a pointer\n //! be valid for an operation but omits the size of that operation, the size is\n //! implied to be `size_of::<T>()` bytes.\n //!\n-//! For more information on the safety implications of dereferencing raw\n-//! pointers, see the both the [book] and the section in the reference devoted\n+//! While we can't yet define whether an arbitrary pointer is a valid one, there\n+//! are a few rules regarding validity:\n+//!\n+//! * The result of casting a reference to a pointer is valid for as long as the\n+//!   underlying object is live.\n+//! * All pointers to types with a [size of zero][zst] are valid for all\n+//!   operations of size zero.\n+//! * A [null] pointer is *never* valid, except when it points to a zero-sized\n+//!   type.\n+//!\n+//! These axioms, along with careful use of [`offset`] for pointer arithmentic,\n+//! are enough to correctly implement many useful things in unsafe code. Still,\n+//! unsafe code should be carefully examined since some of the finer\n+//! details\u2014notably the [aliasing] rules\u2014are not yet settled. For more\n+//! information, see the [book] as well as the section in the reference devoted\n //! to [undefined behavior][ub].\n //!\n //! ## Alignment\n@@ -50,7 +64,10 @@\n //! [aliasing]: ../../nomicon/aliasing.html\n //! [book]: ../../book/second-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\n //! [ub]: ../../reference/behavior-considered-undefined.html\n+//! [null]: ./fn.null.html\n+//! [zst]: ../../nomicon/exotic-sizes.html#zero-sized-types-zsts\n //! [`copy`]: ../../std/ptr/fn.copy.html\n+//! [`offset`]: ../../std/primitive.pointer.html#method.offset\n //! [`read_unaligned`]: ./fn.read_unaligned.html\n //! [`write_unaligned`]: ./fn.write_unaligned.html\n "}]}