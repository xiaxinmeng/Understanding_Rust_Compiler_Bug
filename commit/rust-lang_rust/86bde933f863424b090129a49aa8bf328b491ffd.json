{"sha": "86bde933f863424b090129a49aa8bf328b491ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YmRlOTMzZjg2MzQyNGIwOTAxMjlhNDlhYThiZjMyOGI0OTFmZmQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-01-26T12:38:33Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-01-27T09:26:52Z"}, "message": "accommodate new scoping rules in rustc and rustdoc source.", "tree": {"sha": "c90837de136dd91f1fd88b83f6fa43af6e4e7647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90837de136dd91f1fd88b83f6fa43af6e4e7647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86bde933f863424b090129a49aa8bf328b491ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86bde933f863424b090129a49aa8bf328b491ffd", "html_url": "https://github.com/rust-lang/rust/commit/86bde933f863424b090129a49aa8bf328b491ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86bde933f863424b090129a49aa8bf328b491ffd/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c87af2ebacf58f5cf87a05d1092ed55b4e0cd78", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c87af2ebacf58f5cf87a05d1092ed55b4e0cd78", "html_url": "https://github.com/rust-lang/rust/commit/1c87af2ebacf58f5cf87a05d1092ed55b4e0cd78"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "cfef88a8deb4471ace63d15f69ed09b5144c343b", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -809,6 +809,8 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n         let scope_id = same_regions[0].scope_id;\n         let parent = self.tcx.map.get_parent(scope_id);\n         let parent_node = self.tcx.map.find(parent);\n+        let taken = lifetimes_in_scope(self.tcx, scope_id);\n+        let life_giver = LifeGiver::with_taken(&taken[]);\n         let node_inner = match parent_node {\n             Some(ref node) => match *node {\n                 ast_map::NodeItem(ref item) => {\n@@ -851,8 +853,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         let (fn_decl, generics, unsafety, ident, expl_self, span)\n                                     = node_inner.expect(\"expect item fn\");\n-        let taken = lifetimes_in_scope(self.tcx, scope_id);\n-        let life_giver = LifeGiver::with_taken(&taken[]);\n         let rebuilder = Rebuilder::new(self.tcx, fn_decl, expl_self,\n                                        generics, same_regions, &life_giver);\n         let (fn_decl, expl_self, generics) = rebuilder.rebuild();"}, {"sha": "25b90041505a76e768604a5aeb80018081c78f93", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -100,6 +100,7 @@ pub fn compile_input(sess: Session,\n                                                                  &id[]));\n \n         let mut forest = ast_map::Forest::new(expanded_crate);\n+        let arenas = ty::CtxtArenas::new();\n         let ast_map = assign_node_ids_and_map(&sess, &mut forest);\n \n         write_out_deps(&sess, input, &outputs, &id[]);\n@@ -111,7 +112,6 @@ pub fn compile_input(sess: Session,\n                                                                      &ast_map,\n                                                                      &id[]));\n \n-        let arenas = ty::CtxtArenas::new();\n         let analysis = phase_3_run_analysis_passes(sess,\n                                                    ast_map,\n                                                    &arenas,"}, {"sha": "5a98bc4da3682384b3cd28089555918cc6f2461c", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -1784,15 +1784,16 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     debug!(\"trans_closure(..., param_substs={})\",\n            param_substs.repr(ccx.tcx()));\n \n-    let arena = TypedArena::new();\n-    let fcx = new_fn_ctxt(ccx,\n-                          llfndecl,\n-                          fn_ast_id,\n-                          closure_env.kind != closure::NotClosure,\n-                          output_type,\n-                          param_substs,\n-                          Some(body.span),\n-                          &arena);\n+    let (arena, fcx): (TypedArena<_>, FunctionContext);\n+    arena = TypedArena::new();\n+    fcx = new_fn_ctxt(ccx,\n+                      llfndecl,\n+                      fn_ast_id,\n+                      closure_env.kind != closure::NotClosure,\n+                      output_type,\n+                      param_substs,\n+                      Some(body.span),\n+                      &arena);\n     let mut bcx = init_function(&fcx, false, output_type);\n \n     // cleanup scope for the incoming arguments\n@@ -2046,9 +2047,10 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n                     ty_to_string(ccx.tcx(), ctor_ty))[])\n     };\n \n-    let arena = TypedArena::new();\n-    let fcx = new_fn_ctxt(ccx, llfndecl, ctor_id, false, result_ty,\n-                          param_substs, None, &arena);\n+    let (arena, fcx): (TypedArena<_>, FunctionContext);\n+    arena = TypedArena::new();\n+    fcx = new_fn_ctxt(ccx, llfndecl, ctor_id, false, result_ty,\n+                      param_substs, None, &arena);\n     let bcx = init_function(&fcx, false, result_ty);\n \n     assert!(!fcx.needs_ret_allocas);"}, {"sha": "d038407791ef6a8e7c4a613776fb4de480afaf6f", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -322,16 +322,17 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n                               &function_name[]);\n \n     //\n-    let block_arena = TypedArena::new();\n     let empty_substs = Substs::trans_empty();\n-    let fcx = new_fn_ctxt(ccx,\n-                          llfn,\n-                          ast::DUMMY_NODE_ID,\n-                          false,\n-                          sig.output,\n-                          &empty_substs,\n-                          None,\n-                          &block_arena);\n+    let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n+    block_arena = TypedArena::new();\n+    fcx = new_fn_ctxt(ccx,\n+                      llfn,\n+                      ast::DUMMY_NODE_ID,\n+                      false,\n+                      sig.output,\n+                      &empty_substs,\n+                      None,\n+                      &block_arena);\n     let mut bcx = init_function(&fcx, false, sig.output);\n \n     // the first argument (`self`) will be ptr to the the fn pointer"}, {"sha": "69d1922ab9adb3e271a2f51a4cd1eef04e5f19fb", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -540,11 +540,12 @@ fn make_generic_glue<'a, 'tcx, F>(ccx: &CrateContext<'a, 'tcx>,\n     let glue_name = format!(\"glue {} {}\", name, ty_to_short_str(ccx.tcx(), t));\n     let _s = StatRecorder::new(ccx, glue_name);\n \n-    let arena = TypedArena::new();\n     let empty_param_substs = Substs::trans_empty();\n-    let fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, false,\n-                          ty::FnConverging(ty::mk_nil(ccx.tcx())),\n-                          &empty_param_substs, None, &arena);\n+    let (arena, fcx): (TypedArena<_>, FunctionContext);\n+    arena = TypedArena::new();\n+    fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, false,\n+                      ty::FnConverging(ty::mk_nil(ccx.tcx())),\n+                      &empty_param_substs, None, &arena);\n \n     let bcx = init_function(&fcx, false, ty::FnConverging(ty::mk_nil(ccx.tcx())));\n "}, {"sha": "187b73b1b0952fc0b49172506d94239a609e5458", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -601,17 +601,17 @@ pub fn trans_object_shim<'a, 'tcx>(\n \n     let sig = ty::erase_late_bound_regions(ccx.tcx(), &fty.sig);\n \n-    //\n-    let block_arena = TypedArena::new();\n     let empty_substs = Substs::trans_empty();\n-    let fcx = new_fn_ctxt(ccx,\n-                          llfn,\n-                          ast::DUMMY_NODE_ID,\n-                          false,\n-                          sig.output,\n-                          &empty_substs,\n-                          None,\n-                          &block_arena);\n+    let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n+    block_arena = TypedArena::new();\n+    fcx = new_fn_ctxt(ccx,\n+                      llfn,\n+                      ast::DUMMY_NODE_ID,\n+                      false,\n+                      sig.output,\n+                      &empty_substs,\n+                      None,\n+                      &block_arena);\n     let mut bcx = init_function(&fcx, false, sig.output);\n \n     // the first argument (`self`) will be a trait object"}, {"sha": "4c5a8144cbd064ead01dd46c4dcd90d774084cc2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -1049,8 +1049,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // if there are any.\n         assert_eq!(substs.types.len(subst::FnSpace), 0);\n         assert_eq!(substs.regions().len(subst::FnSpace), 0);\n-        let mut substs = substs;\n         let placeholder;\n+        let mut substs = substs;\n         if\n             !method.generics.types.is_empty_in(subst::FnSpace) ||\n             !method.generics.regions.is_empty_in(subst::FnSpace)"}, {"sha": "65560040f47c28e923d83017f4288ab48531f433", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -3101,8 +3101,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         let name = ident.get();\n         // only find fits with at least one matching letter\n         let mut best_dist = name.len();\n-        let mut best = None;\n         let fields = ty::lookup_struct_fields(tcx, id);\n+        let mut best = None;\n         for elem in fields.iter() {\n             let n = elem.name.as_str();\n             // ignore already set fields"}, {"sha": "90a0a0f843e94a314d53d48a043d57e8f75a3ff9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bde933f863424b090129a49aa8bf328b491ffd/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=86bde933f863424b090129a49aa8bf328b491ffd", "patch": "@@ -126,9 +126,9 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n                     .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n     let mut forest = ast_map::Forest::new(krate);\n+    let arenas = ty::CtxtArenas::new();\n     let ast_map = driver::assign_node_ids_and_map(&sess, &mut forest);\n \n-    let arenas = ty::CtxtArenas::new();\n     let ty::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n     } = driver::phase_3_run_analysis_passes(sess,"}]}