{"sha": "5882cce54ea902c234421c19de0a26a2adcaf6cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODJjY2U1NGVhOTAyYzIzNDQyMWMxOWRlMGEyNmEyYWRjYWY2Y2M=", "commit": {"author": {"name": "Ingvar Stepanyan", "email": "rreverser@google.com", "date": "2021-01-30T02:12:40Z"}, "committer": {"name": "Ingvar Stepanyan", "email": "rreverser@google.com", "date": "2021-01-30T02:30:52Z"}, "message": "Expose correct symlink API on WASI\n\nAs described in https://github.com/rust-lang/rust/issues/68574, the currently exposed API for symlinks is, in fact, a thin wrapper around the corresponding syscall, and not suitable for public usage.\n\nThe reason is that the 2nd param in the call is expected to be a handle of a \"preopened directory\" (a WASI concept for exposing dirs), and the only way to retrieve such handle right now is by tinkering with a private `__wasilibc_find_relpath` API, which is an implementation detail and definitely not something we want users to call directly.\n\nMaking matters worse, the semantics of this param aren't obvious from its name (`fd`), and easy to misinterpret, resulting in people trying to pass a handle of the target file itself (as in https://github.com/vitiral/path_abs/pull/50), which doesn't work as expected.\n\nI did a codesearch among open-source repos, and the usage above is so far the only usage of this API at all, but we should fix it before more people start using it incorrectly.\n\nWhile this is technically a breaking API change, I believe it's a justified one, as 1) it's OS-specific and 2) there was strictly no way to correctly use the previous form of the API, and if someone does use it, they're likely doing it wrong like in the example above.\n\nThe new API does not lead to the same confusion, as it mirrors `std::os::unix::fs::symlink` and `std::os::windows::fs::symlink_{file,dir}` variants by accepting source/target paths.\n\nFixes #68574.", "tree": {"sha": "c79a307c8c2d7e58074850745c8b208cd098b7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c79a307c8c2d7e58074850745c8b208cd098b7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5882cce54ea902c234421c19de0a26a2adcaf6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5882cce54ea902c234421c19de0a26a2adcaf6cc", "html_url": "https://github.com/rust-lang/rust/commit/5882cce54ea902c234421c19de0a26a2adcaf6cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5882cce54ea902c234421c19de0a26a2adcaf6cc/comments", "author": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa9b58a37587d60252c6bef4b86c05027cdcd1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa9b58a37587d60252c6bef4b86c05027cdcd1a", "html_url": "https://github.com/rust-lang/rust/commit/9fa9b58a37587d60252c6bef4b86c05027cdcd1a"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "36530e4bb35a662895b69e74852a439a4122506e", "filename": "library/std/src/sys/wasi/ext/fs.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5882cce54ea902c234421c19de0a26a2adcaf6cc/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5882cce54ea902c234421c19de0a26a2adcaf6cc/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=5882cce54ea902c234421c19de0a26a2adcaf6cc", "patch": "@@ -504,13 +504,9 @@ pub fn rename<P: AsRef<Path>, U: AsRef<Path>>(\n \n /// Create a symbolic link.\n ///\n-/// This corresponds to the `path_symlink` syscall.\n-pub fn symlink<P: AsRef<Path>, U: AsRef<Path>>(\n-    old_path: P,\n-    fd: &File,\n-    new_path: U,\n-) -> io::Result<()> {\n-    fd.as_inner()\n-        .fd()\n-        .symlink(osstr2str(old_path.as_ref().as_ref())?, osstr2str(new_path.as_ref().as_ref())?)\n+/// This is similar to [`std::os::unix::fs::symlink`] and\n+/// [`std::os::windows::fs::symlink_file`] and [`symlink_dir`](std::os::windows::fs::symlink_dir)\n+/// counterparts.\n+pub fn symlink<P: AsRef<Path>, U: AsRef<Path>>(old_path: P, new_path: U) -> io::Result<()> {\n+    crate::sys::fs::symlink(old_path.as_ref(), new_path.as_ref())\n }"}]}