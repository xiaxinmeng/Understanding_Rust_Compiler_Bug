{"sha": "6bea872edd9523a06213270f68725c9fe33f3919", "node_id": "C_kwDOAAsO6NoAKDZiZWE4NzJlZGQ5NTIzYTA2MjEzMjcwZjY4NzI1YzlmZTMzZjM5MTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T18:39:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T18:39:53Z"}, "message": "Auto merge of #13095 - jonas-schievink:avoid-liveshare-error, r=jonas-schievink\n\nfix: Avoid error popup when using in Live Share\n\ncc https://github.com/rust-lang/rust-analyzer/issues/8844\n\nNot sure if there's a better way to do this, feedback appreciated!", "tree": {"sha": "77d2baf9349d6aae1166e8cc22a89e6af36bf65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77d2baf9349d6aae1166e8cc22a89e6af36bf65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bea872edd9523a06213270f68725c9fe33f3919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bea872edd9523a06213270f68725c9fe33f3919", "html_url": "https://github.com/rust-lang/rust/commit/6bea872edd9523a06213270f68725c9fe33f3919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bea872edd9523a06213270f68725c9fe33f3919/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4e10b7fc868830233c67bc8fcd26d889549bfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4e10b7fc868830233c67bc8fcd26d889549bfd", "html_url": "https://github.com/rust-lang/rust/commit/ca4e10b7fc868830233c67bc8fcd26d889549bfd"}, {"sha": "dcbbb7f211771fc08281312310067469e58efa0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbbb7f211771fc08281312310067469e58efa0b", "html_url": "https://github.com/rust-lang/rust/commit/dcbbb7f211771fc08281312310067469e58efa0b"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "e9b62e0cc2578b876747093577439bfec057192e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6bea872edd9523a06213270f68725c9fe33f3919/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6bea872edd9523a06213270f68725c9fe33f3919/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=6bea872edd9523a06213270f68725c9fe33f3919", "patch": "@@ -33,7 +33,7 @@ export function outputChannel() {\n }\n \n export interface RustAnalyzerExtensionApi {\n-    client: lc.LanguageClient;\n+    client?: lc.LanguageClient;\n }\n \n export async function activate(\n@@ -48,6 +48,23 @@ export async function activate(\n }\n \n async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyzerExtensionApi> {\n+    // We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n+    // only those are in use.\n+    // (r-a still somewhat works with Live Share, because commands are tunneled to the host)\n+    const folders = (vscode.workspace.workspaceFolders || []).filter(\n+        (folder) => folder.uri.scheme === \"file\"\n+    );\n+    const rustDocuments = vscode.workspace.textDocuments.filter((document) =>\n+        isRustDocument(document)\n+    );\n+\n+    if (folders.length === 0 && rustDocuments.length === 0) {\n+        // FIXME: Ideally we would choose not to activate at all (and avoid registering\n+        // non-functional editor commands), but VS Code doesn't seem to have a good way of doing\n+        // that\n+        return {};\n+    }\n+\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n     const serverPath = await bootstrap(context, config, state).catch((err) => {\n@@ -60,18 +77,11 @@ async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyz\n         throw new Error(message);\n     });\n \n-    if ((vscode.workspace.workspaceFolders || []).length === 0) {\n-        const rustDocuments = vscode.workspace.textDocuments.filter((document) =>\n-            isRustDocument(document)\n-        );\n-        if (rustDocuments.length > 0) {\n-            ctx = await Ctx.create(config, context, serverPath, {\n-                kind: \"Detached Files\",\n-                files: rustDocuments,\n-            });\n-        } else {\n-            throw new Error(\"no rust files are opened\");\n-        }\n+    if (folders.length === 0) {\n+        ctx = await Ctx.create(config, context, serverPath, {\n+            kind: \"Detached Files\",\n+            files: rustDocuments,\n+        });\n     } else {\n         // Note: we try to start the server before we activate type hints so that it\n         // registers its `onDidChangeDocument` handler before us."}]}