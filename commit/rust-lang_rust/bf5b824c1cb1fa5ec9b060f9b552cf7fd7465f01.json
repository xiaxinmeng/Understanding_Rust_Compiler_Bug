{"sha": "bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNWI4MjRjMWNiMWZhNWVjOWIwNjBmOWI1NTJjZjdmZDc0NjVmMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-31T14:22:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-31T14:22:58Z"}, "message": "Auto merge of #37494 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #37438, #37458, #37462, #37475, #37486\n- Failed merges:", "tree": {"sha": "15e383540bf913f11e7567f7724185179f45b8f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15e383540bf913f11e7567f7724185179f45b8f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "html_url": "https://github.com/rust-lang/rust/commit/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074d30d030a3339565ab737c23312e6bbe625431", "url": "https://api.github.com/repos/rust-lang/rust/commits/074d30d030a3339565ab737c23312e6bbe625431", "html_url": "https://github.com/rust-lang/rust/commit/074d30d030a3339565ab737c23312e6bbe625431"}, {"sha": "0a59eba0e836e01cbb00dc70c0781c4754bd751b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a59eba0e836e01cbb00dc70c0781c4754bd751b", "html_url": "https://github.com/rust-lang/rust/commit/0a59eba0e836e01cbb00dc70c0781c4754bd751b"}], "stats": {"total": 137, "additions": 112, "deletions": 25}, "files": [{"sha": "62aa57bbbbf055e5eeb33f80727ab9de99220c0f", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 68, "deletions": 19, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "patch": "@@ -1645,7 +1645,7 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang = \"bitand_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait BitAndAssign<Rhs=Self> {\n-    /// The method for the `&` operator\n+    /// The method for the `&=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitand_assign(&mut self, Rhs);\n }\n@@ -1879,10 +1879,18 @@ shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// The `Index` trait is used to specify the functionality of indexing operations\n /// like `container[index]` when used in an immutable context.\n ///\n+/// `container[index]` is actually syntactic sugar for `*container.index(index)`,\n+/// but only when used as an immutable value. If a mutable value is requested,\n+/// [`IndexMut`] is used instead. This allows nice things such as\n+/// `let value = v[index]` if `value` implements [`Copy`].\n+///\n+/// [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n+///\n /// # Examples\n ///\n-/// This example implements `Index` on a read-only `NucleotideCount` container,\n-/// enabling individual counts to be retrieved with index syntax.\n+/// The following example implements `Index` on a read-only `NucleotideCount`\n+/// container, enabling individual counts to be retrieved with index syntax.\n ///\n /// ```\n /// use std::ops::Index;\n@@ -1934,37 +1942,78 @@ pub trait Index<Idx: ?Sized> {\n }\n \n /// The `IndexMut` trait is used to specify the functionality of indexing\n-/// operations like `container[index]`, when used in a mutable context.\n+/// operations like `container[index]` when used in a mutable context.\n+///\n+/// `container[index]` is actually syntactic sugar for\n+/// `*container.index_mut(index)`, but only when used as a mutable value. If\n+/// an immutable value is requested, the [`Index`] trait is used instead. This\n+/// allows nice things such as `v[index] = value` if `value` implements [`Copy`].\n+///\n+/// [`Index`]: ../../std/ops/trait.Index.html\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `IndexMut` for a type `Foo`. When `&mut Foo[2]`\n-/// happens, it ends up calling `index_mut`, and therefore, `main` prints\n-/// `Mutable indexing with 2!`.\n+/// A very simple implementation of a `Balance` struct that has two sides, where\n+/// each can be indexed mutably and immutably.\n ///\n /// ```\n-/// use std::ops::{Index, IndexMut};\n+/// use std::ops::{Index,IndexMut};\n ///\n-/// #[derive(Copy, Clone)]\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// enum Side {\n+///     Left,\n+///     Right,\n+/// }\n ///\n-/// impl Index<usize> for Foo {\n-///     type Output = Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// enum Weight {\n+///     Kilogram(f32),\n+///     Pound(f32),\n+/// }\n+///\n+/// struct Balance {\n+///     pub left: Weight,\n+///     pub right:Weight,\n+/// }\n ///\n-///     fn index(&self, _index: usize) -> &Foo {\n-///         self\n+/// impl Index<Side> for Balance {\n+///     type Output = Weight;\n+///\n+///     fn index<'a>(&'a self, index: Side) -> &'a Weight {\n+///         println!(\"Accessing {:?}-side of balance immutably\", index);\n+///         match index {\n+///             Side::Left => &self.left,\n+///             Side::Right => &self.right,\n+///         }\n ///     }\n /// }\n ///\n-/// impl IndexMut<usize> for Foo {\n-///     fn index_mut(&mut self, index: usize) -> &mut Foo {\n-///         println!(\"Mutable indexing with {}!\", index);\n-///         self\n+/// impl IndexMut<Side> for Balance {\n+///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Weight {\n+///         println!(\"Accessing {:?}-side of balance mutably\", index);\n+///         match index {\n+///             Side::Left => &mut self.left,\n+///             Side::Right => &mut self.right,\n+///         }\n ///     }\n /// }\n ///\n /// fn main() {\n-///     &mut Foo[2];\n+///     let mut balance = Balance {\n+///         right: Weight::Kilogram(2.5),\n+///         left: Weight::Pound(1.5),\n+///     };\n+///\n+///     // In this case balance[Side::Right] is sugar for\n+///     // *balance.index(Side::Right), since we are only reading\n+///     // balance[Side::Right], not writing it.\n+///     assert_eq!(balance[Side::Right],Weight::Kilogram(2.5));\n+///\n+///     // However in this case balance[Side::Left] is sugar for\n+///     // *balance.index_mut(Side::Left), since we are writing\n+///     // balance[Side::Left].\n+///     balance[Side::Left] = Weight::Kilogram(3.0);\n /// }\n /// ```\n #[lang = \"index_mut\"]"}, {"sha": "77b3e76fc541fd2da706a3c13f745bf41648da47", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "patch": "@@ -859,9 +859,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n     // expression/block context can't possibly contain exported things.\n     // (Making them no-ops stops us from traversing the whole AST without\n     // having to be super careful about our `walk_...` calls above.)\n-    // FIXME(#29524): Unfortunately this ^^^ is not true, blocks can contain\n-    // exported items (e.g. impls) and actual code in rustc itself breaks\n-    // if we don't traverse blocks in `EmbargoVisitor`\n     fn visit_block(&mut self, _: &hir::Block) {}\n     fn visit_expr(&mut self, _: &hir::Expr) {}\n }"}, {"sha": "5eb269030a004fa2b1ce8b2d43ee9809cf027321", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "patch": "@@ -1461,6 +1461,47 @@ match r {\n ```\n \"##,\n \n+E0532: r##\"\n+Pattern arm did not match expected kind.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0532\n+enum State {\n+    Succeeded,\n+    Failed(String),\n+}\n+\n+fn print_on_failure(state: &State) {\n+    match *state {\n+        // error: expected unit struct/variant or constant, found tuple\n+        //        variant `State::Failed`\n+        State::Failed => println!(\"Failed\"),\n+        _ => ()\n+    }\n+}\n+```\n+\n+To fix this error, ensure the match arm kind is the same as the expression\n+matched.\n+\n+Fixed example:\n+\n+```\n+enum State {\n+    Succeeded,\n+    Failed(String),\n+}\n+\n+fn print_on_failure(state: &State) {\n+    match *state {\n+        State::Failed(ref msg) => println!(\"Failed with {}\", msg),\n+        _ => ()\n+    }\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {\n@@ -1480,6 +1521,5 @@ register_diagnostics! {\n //  E0421, merged into 531\n //  E0422, merged into 531/532\n     E0531, // unresolved pattern path kind `name`\n-    E0532, // expected pattern path kind, found another pattern path kind\n //  E0427, merged into 530\n }"}, {"sha": "e6b63be3efc0d963f063d7b665c56966f38bf8b3", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "patch": "@@ -1546,7 +1546,7 @@ impl<'a> TraitDef<'a> {\n                             cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");\n                         }\n                         codemap::Spanned {\n-                            span: pat.span,\n+                            span: Span { expn_id: self.span.expn_id, ..pat.span },\n                             node: ast::FieldPat {\n                                 ident: ident.unwrap(),\n                                 pat: pat,\n@@ -1577,7 +1577,8 @@ impl<'a> TraitDef<'a> {\n          mutbl: ast::Mutability)\n          -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n         let variant_ident = variant.node.name;\n-        let variant_path = cx.path(variant.span, vec![enum_ident, variant_ident]);\n+        let sp = Span { expn_id: self.span.expn_id, ..variant.span };\n+        let variant_path = cx.path(sp, vec![enum_ident, variant_ident]);\n         self.create_struct_pattern(cx, variant_path, &variant.node.data, prefix, mutbl)\n     }\n }"}]}