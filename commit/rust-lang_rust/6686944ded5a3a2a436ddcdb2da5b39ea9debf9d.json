{"sha": "6686944ded5a3a2a436ddcdb2da5b39ea9debf9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ODY5NDRkZWQ1YTNhMmE0MzZkZGNkYjJkYTViMzllYTlkZWJmOWQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-05T06:23:37Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-05T06:23:37Z"}, "message": "Refactor memory range access error checnking.", "tree": {"sha": "4e2993f3d1de4cbe999e4a4dd2f3f3fd80406de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e2993f3d1de4cbe999e4a4dd2f3f3fd80406de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d", "html_url": "https://github.com/rust-lang/rust/commit/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45677b453c191124138950f20d11b52a9a9407f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/45677b453c191124138950f20d11b52a9a9407f1", "html_url": "https://github.com/rust-lang/rust/commit/45677b453c191124138950f20d11b52a9a9407f1"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "7390d5bb8cf32e437c4fa05e10b2085ad3eecc9f", "filename": "src/interpreter.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=6686944ded5a3a2a436ddcdb2da5b39ea9debf9d", "patch": "@@ -101,11 +101,21 @@ mod memory {\n             self.alloc_map.get_mut(&id.0).ok_or(EvalError::DanglingPointerDeref)\n         }\n \n+        fn get_bytes(&self, ptr: &Pointer, size: usize) -> EvalResult<&[u8]> {\n+            let alloc = try!(self.get(ptr.alloc_id));\n+            try!(alloc.check_bytes(ptr.offset, ptr.offset + size));\n+            Ok(&alloc.bytes[ptr.offset..ptr.offset + size])\n+        }\n+\n+        fn get_bytes_mut(&mut self, ptr: &Pointer, size: usize) -> EvalResult<&mut [u8]> {\n+            let alloc = try!(self.get_mut(ptr.alloc_id));\n+            try!(alloc.check_bytes(ptr.offset, ptr.offset + size));\n+            Ok(&mut alloc.bytes[ptr.offset..ptr.offset + size])\n+        }\n+\n         pub fn copy(&mut self, src: &Pointer, dest: &Pointer, size: usize) -> EvalResult<()> {\n-            let src_bytes = try!(self.get_mut(src.alloc_id))\n-                .bytes[src.offset..src.offset + size].as_mut_ptr();\n-            let dest_bytes = try!(self.get_mut(dest.alloc_id))\n-                .bytes[dest.offset..dest.offset + size].as_mut_ptr();\n+            let src_bytes = try!(self.get_bytes_mut(src, size)).as_mut_ptr();\n+            let dest_bytes = try!(self.get_bytes_mut(dest, size)).as_mut_ptr();\n \n             // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n             // behind `src` and `dest`. Also, we use the overlapping-safe `ptr::copy` if `src` and\n@@ -122,6 +132,15 @@ mod memory {\n         }\n     }\n \n+    impl Allocation {\n+        fn check_bytes(&self, start: usize, end: usize) -> EvalResult<()> {\n+            if start >= self.bytes.len() || end > self.bytes.len() {\n+                return Err(EvalError::PointerOutOfBounds);\n+            }\n+            Ok(())\n+        }\n+    }\n+\n     impl Pointer {\n         pub fn offset(&self, i: usize) -> Self {\n             Pointer { offset: self.offset + i, ..self.clone() }\n@@ -161,19 +180,21 @@ use self::memory::{Pointer, Repr, Allocation};\n \n #[derive(Clone, Debug)]\n pub enum EvalError {\n-    DanglingPointerDeref\n+    DanglingPointerDeref,\n+    PointerOutOfBounds,\n }\n \n pub type EvalResult<T> = Result<T, EvalError>;\n \n impl Error for EvalError {\n     fn description(&self) -> &str {\n-        \"error during MIR evaluation\"\n+        match *self {\n+            EvalError::DanglingPointerDeref => \"dangling pointer was dereferenced\",\n+            EvalError::PointerOutOfBounds => \"pointer offset outside bounds of allocation\",\n+        }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n-        None\n-    }\n+    fn cause(&self) -> Option<&Error> { None }\n }\n \n impl fmt::Display for EvalError {"}]}