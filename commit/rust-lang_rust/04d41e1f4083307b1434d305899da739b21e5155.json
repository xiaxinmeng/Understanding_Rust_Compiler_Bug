{"sha": "04d41e1f4083307b1434d305899da739b21e5155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZDQxZTFmNDA4MzMwN2IxNDM0ZDMwNTg5OWRhNzM5YjIxZTUxNTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-11T21:54:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-12T16:40:41Z"}, "message": "rustc_target: Mark UEFI targets as `is_like_windows`/`is_like_msvc`\n\nDocument what `is_like_windows` and `is_like_msvc` mean in more detail.", "tree": {"sha": "08455baf7e35a693b952f2c9a0abd38fa8c7cf0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08455baf7e35a693b952f2c9a0abd38fa8c7cf0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04d41e1f4083307b1434d305899da739b21e5155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04d41e1f4083307b1434d305899da739b21e5155", "html_url": "https://github.com/rust-lang/rust/commit/04d41e1f4083307b1434d305899da739b21e5155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04d41e1f4083307b1434d305899da739b21e5155/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5a42b073dc2bee2aa625052eb066ee07072048", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5a42b073dc2bee2aa625052eb066ee07072048", "html_url": "https://github.com/rust-lang/rust/commit/7f5a42b073dc2bee2aa625052eb066ee07072048"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "6237a4c0020ebb58e5313bdcaf7d219ae17ddb50", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=04d41e1f4083307b1434d305899da739b21e5155", "patch": "@@ -925,9 +925,7 @@ unsafe fn embed_bitcode(\n         || cgcx.opts.target_triple.triple().starts_with(\"asmjs\")\n     {\n         // nothing to do here\n-    } else if cgcx.opts.target_triple.triple().contains(\"windows\")\n-        || cgcx.opts.target_triple.triple().contains(\"uefi\")\n-    {\n+    } else if cgcx.is_pe_coff {\n         let asm = \"\n             .section .llvmbc,\\\"n\\\"\n             .section .llvmcmd,\\\"n\\\""}, {"sha": "7f2bb7b5bcdaffd7b4189f0f8c1699d6f326f87e", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=04d41e1f4083307b1434d305899da739b21e5155", "patch": "@@ -307,6 +307,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub allocator_module_config: Arc<ModuleConfig>,\n     pub tm_factory: TargetMachineFactory<B>,\n     pub msvc_imps_needed: bool,\n+    pub is_pe_coff: bool,\n     pub target_pointer_width: u32,\n     pub target_arch: String,\n     pub debuginfo: config::DebugInfo,\n@@ -1022,6 +1023,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol)),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n+        is_pe_coff: tcx.sess.target.is_like_windows,\n         target_pointer_width: tcx.sess.target.pointer_width,\n         target_arch: tcx.sess.target.arch.clone(),\n         debuginfo: tcx.sess.opts.debuginfo,"}, {"sha": "cf45d8b7f6abd5d5e2d2fc0de61110cf09f78f51", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=04d41e1f4083307b1434d305899da739b21e5155", "patch": "@@ -819,10 +819,23 @@ pub struct TargetOptions {\n     /// Only useful for compiling against Illumos/Solaris,\n     /// as they have a different set of linker flags. Defaults to false.\n     pub is_like_solaris: bool,\n-    /// Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\n-    /// only really used for figuring out how to find libraries, since Windows uses its own\n-    /// library naming convention. Defaults to false.\n+    /// Whether the target is like Windows.\n+    /// This is a combination of several more specific properties represented as a single flag:\n+    ///   - The target uses a Windows ABI,\n+    ///   - uses PE/COFF as a format for object code,\n+    ///   - uses Windows-style dllexport/dllimport for shared libraries,\n+    ///   - uses import libraries and .def files for symbol exports,\n+    ///   - executables support setting a subsystem.\n     pub is_like_windows: bool,\n+    /// Whether the target is like MSVC.\n+    /// This is a combination of several more specific properties represented as a single flag:\n+    ///   - The target has all the properties from `is_like_windows`\n+    ///     (for in-tree targets \"is_like_msvc \u21d2 is_like_windows\" is ensured by a unit test),\n+    ///   - has some MSVC-specific Windows ABI properties,\n+    ///   - uses a link.exe-like linker,\n+    ///   - uses CodeView/PDB for debuginfo and natvis for its visualization,\n+    ///   - uses SEH-based unwinding,\n+    ///   - supports control flow guard mechanism.\n     pub is_like_msvc: bool,\n     /// Whether the target toolchain is like Emscripten's. Only useful for compiling with\n     /// Emscripten toolchain."}, {"sha": "10e62f6b672e3ac9bf89fd1ede48c9fe61b3c617", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=04d41e1f4083307b1434d305899da739b21e5155", "patch": "@@ -8,6 +8,7 @@ pub(super) fn test_target(target: Target) {\n \n impl Target {\n     fn check_consistency(&self) {\n+        assert!(self.is_like_windows || !self.is_like_msvc);\n         // Check that LLD with the given flavor is treated identically to the linker it emulates.\n         // If your target really needs to deviate from the rules below, except it and document the\n         // reasons.\n@@ -16,6 +17,7 @@ impl Target {\n                 || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n             self.lld_flavor == LldFlavor::Link,\n         );\n+        assert_eq!(self.is_like_msvc, self.lld_flavor == LldFlavor::Link);\n         for args in &[\n             &self.pre_link_args,\n             &self.late_link_args,"}, {"sha": "322b6f530e9fdc9cd87a5e6d03bba1dcf98327d4", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d41e1f4083307b1434d305899da739b21e5155/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=04d41e1f4083307b1434d305899da739b21e5155", "patch": "@@ -46,15 +46,6 @@ pub fn opts() -> TargetOptions {\n         stack_probes: true,\n         singlethread: true,\n         linker: Some(\"rust-lld\".to_string()),\n-        // FIXME: This should likely be `true` inherited from `msvc_base`\n-        // because UEFI follows Windows ABI and uses PE/COFF.\n-        // The `false` is probably causing ABI bugs right now.\n-        is_like_windows: false,\n-        // FIXME: This should likely be `true` inherited from `msvc_base`\n-        // because UEFI follows Windows ABI and uses PE/COFF.\n-        // The `false` is probably causing ABI bugs right now.\n-        is_like_msvc: false,\n-\n         ..base\n     }\n }"}]}