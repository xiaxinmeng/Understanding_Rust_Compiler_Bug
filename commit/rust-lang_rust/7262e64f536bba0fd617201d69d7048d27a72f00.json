{"sha": "7262e64f536bba0fd617201d69d7048d27a72f00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjJlNjRmNTM2YmJhMGZkNjE3MjAxZDY5ZDcwNDhkMjdhNzJmMDA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-06-18T01:30:50Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-06-26T00:30:37Z"}, "message": "Make FlowAtLocation support borrowing flow data", "tree": {"sha": "372783a0ba3861c1b4cac37c3cc47f10f2c4f4b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372783a0ba3861c1b4cac37c3cc47f10f2c4f4b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7262e64f536bba0fd617201d69d7048d27a72f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7262e64f536bba0fd617201d69d7048d27a72f00", "html_url": "https://github.com/rust-lang/rust/commit/7262e64f536bba0fd617201d69d7048d27a72f00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7262e64f536bba0fd617201d69d7048d27a72f00/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303f77ee1d60e1b351ff6478143dd866403c27f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/303f77ee1d60e1b351ff6478143dd866403c27f5", "html_url": "https://github.com/rust-lang/rust/commit/303f77ee1d60e1b351ff6478143dd866403c27f5"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "f0014602e2d6b161089727ccbcf901fcf80c8362", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7262e64f536bba0fd617201d69d7048d27a72f00/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262e64f536bba0fd617201d69d7048d27a72f00/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=7262e64f536bba0fd617201d69d7048d27a72f00", "patch": "@@ -8,6 +8,7 @@ use crate::dataflow::{BitDenotation, DataflowResults, GenKillSet};\n use crate::dataflow::move_paths::{HasMoveData, MovePathIndex};\n \n use std::iter;\n+use std::borrow::Borrow;\n \n /// A trait for \"cartesian products\" of multiple FlowAtLocation.\n ///\n@@ -60,18 +61,20 @@ pub trait FlowsAtLocation {\n /// (e.g., via `reconstruct_statement_effect` and\n /// `reconstruct_terminator_effect`; don't forget to call\n /// `apply_local_effect`).\n-pub struct FlowAtLocation<'tcx, BD>\n+pub struct FlowAtLocation<'tcx, BD, DR = DataflowResults<'tcx, BD>>\n where\n     BD: BitDenotation<'tcx>,\n+    DR: Borrow<DataflowResults<'tcx, BD>>,\n {\n-    base_results: DataflowResults<'tcx, BD>,\n+    base_results: DR,\n     curr_state: BitSet<BD::Idx>,\n     stmt_trans: GenKillSet<BD::Idx>,\n }\n \n-impl<'tcx, BD> FlowAtLocation<'tcx, BD>\n+impl<'tcx, BD, DR> FlowAtLocation<'tcx, BD, DR>\n where\n     BD: BitDenotation<'tcx>,\n+    DR: Borrow<DataflowResults<'tcx, BD>>,\n {\n     /// Iterate over each bit set in the current state.\n     pub fn each_state_bit<F>(&self, f: F)\n@@ -91,8 +94,8 @@ where\n         self.stmt_trans.gen_set.iter().for_each(f)\n     }\n \n-    pub fn new(results: DataflowResults<'tcx, BD>) -> Self {\n-        let bits_per_block = results.sets().bits_per_block();\n+    pub fn new(results: DR) -> Self {\n+        let bits_per_block = results.borrow().sets().bits_per_block();\n         let curr_state = BitSet::new_empty(bits_per_block);\n         let stmt_trans = GenKillSet::from_elem(HybridBitSet::new_empty(bits_per_block));\n         FlowAtLocation {\n@@ -104,7 +107,7 @@ where\n \n     /// Access the underlying operator.\n     pub fn operator(&self) -> &BD {\n-        self.base_results.operator()\n+        self.base_results.borrow().operator()\n     }\n \n     pub fn contains(&self, x: BD::Idx) -> bool {\n@@ -134,39 +137,45 @@ where\n     }\n }\n \n-impl<'tcx, BD> FlowsAtLocation for FlowAtLocation<'tcx, BD>\n-    where BD: BitDenotation<'tcx>\n+impl<'tcx, BD, DR> FlowsAtLocation for FlowAtLocation<'tcx, BD, DR>\n+where\n+    BD: BitDenotation<'tcx>,\n+    DR: Borrow<DataflowResults<'tcx, BD>>,\n {\n     fn reset_to_entry_of(&mut self, bb: BasicBlock) {\n-        self.curr_state.overwrite(self.base_results.sets().entry_set_for(bb.index()));\n+        self.curr_state.overwrite(self.base_results.borrow().sets().entry_set_for(bb.index()));\n     }\n \n     fn reset_to_exit_of(&mut self, bb: BasicBlock) {\n         self.reset_to_entry_of(bb);\n-        let trans = self.base_results.sets().trans_for(bb.index());\n+        let trans = self.base_results.borrow().sets().trans_for(bb.index());\n         trans.apply(&mut self.curr_state)\n     }\n \n     fn reconstruct_statement_effect(&mut self, loc: Location) {\n         self.stmt_trans.clear();\n         self.base_results\n+            .borrow()\n             .operator()\n             .before_statement_effect(&mut self.stmt_trans, loc);\n         self.stmt_trans.apply(&mut self.curr_state);\n \n         self.base_results\n+            .borrow()\n             .operator()\n             .statement_effect(&mut self.stmt_trans, loc);\n     }\n \n     fn reconstruct_terminator_effect(&mut self, loc: Location) {\n         self.stmt_trans.clear();\n         self.base_results\n+            .borrow()\n             .operator()\n             .before_terminator_effect(&mut self.stmt_trans, loc);\n         self.stmt_trans.apply(&mut self.curr_state);\n \n         self.base_results\n+            .borrow()\n             .operator()\n             .terminator_effect(&mut self.stmt_trans, loc);\n     }\n@@ -177,9 +186,10 @@ impl<'tcx, BD> FlowsAtLocation for FlowAtLocation<'tcx, BD>\n }\n \n \n-impl<'tcx, T> FlowAtLocation<'tcx, T>\n+impl<'tcx, T, DR> FlowAtLocation<'tcx, T, DR>\n where\n     T: HasMoveData<'tcx> + BitDenotation<'tcx, Idx = MovePathIndex>,\n+    DR: Borrow<DataflowResults<'tcx, T>>,\n {\n     pub fn has_any_child_of(&self, mpi: T::Idx) -> Option<T::Idx> {\n         // We process `mpi` before the loop below, for two reasons:"}, {"sha": "3d0d565c53bec7883b4760ba86786d3acb9715b8", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7262e64f536bba0fd617201d69d7048d27a72f00/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262e64f536bba0fd617201d69d7048d27a72f00/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=7262e64f536bba0fd617201d69d7048d27a72f00", "patch": "@@ -66,7 +66,7 @@ use std::mem;\n use crate::transform::{MirPass, MirSource};\n use crate::transform::simplify;\n use crate::transform::no_landing_pads::no_landing_pads;\n-use crate::dataflow::{DataflowResults, DataflowResultsConsumer, FlowAtLocation};\n+use crate::dataflow::{DataflowResults, DataflowResultsConsumer, FlowAtLocation, FlowAtLocationOwned};\n use crate::dataflow::{do_dataflow, DebugFormatted, state_for_location};\n use crate::dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals};\n use crate::util::dump_mir;\n@@ -627,7 +627,7 @@ struct StorageConflictVisitor<'body, 'tcx, 's> {\n impl<'body, 'tcx, 's> DataflowResultsConsumer<'body, 'tcx>\n     for StorageConflictVisitor<'body, 'tcx, 's>\n {\n-    type FlowState = FlowAtLocation<'tcx, MaybeStorageLive<'body, 'tcx>>;\n+    type FlowState = FlowAtLocationOwned<'tcx, MaybeStorageLive<'body, 'tcx>>;\n \n     fn body(&self) -> &'body Body<'tcx> {\n         self.body\n@@ -657,7 +657,7 @@ impl<'body, 'tcx, 's> DataflowResultsConsumer<'body, 'tcx>\n \n impl<'body, 'tcx, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n     fn apply_state(&mut self,\n-                   flow_state: &FlowAtLocation<'tcx, MaybeStorageLive<'body, 'tcx>>,\n+                   flow_state: &FlowAtLocationOwned<'tcx, MaybeStorageLive<'body, 'tcx>>,\n                    loc: Location) {\n         // Ignore unreachable blocks.\n         match self.body.basic_blocks()[loc.block].terminator().kind {"}]}