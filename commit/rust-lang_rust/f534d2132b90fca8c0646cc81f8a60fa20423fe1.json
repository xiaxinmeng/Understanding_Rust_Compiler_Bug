{"sha": "f534d2132b90fca8c0646cc81f8a60fa20423fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzRkMjEzMmI5MGZjYThjMDY0NmNjODFmOGE2MGZhMjA0MjNmZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T19:38:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-03T09:26:40Z"}, "message": "move some logic to navigation target", "tree": {"sha": "ce4243dc1f6e6e1a8ac41105b1e84c39a7cd89d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4243dc1f6e6e1a8ac41105b1e84c39a7cd89d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f534d2132b90fca8c0646cc81f8a60fa20423fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f534d2132b90fca8c0646cc81f8a60fa20423fe1", "html_url": "https://github.com/rust-lang/rust/commit/f534d2132b90fca8c0646cc81f8a60fa20423fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f534d2132b90fca8c0646cc81f8a60fa20423fe1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a91e6735c62b0fad817fdb651ab06171aa5568", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a91e6735c62b0fad817fdb651ab06171aa5568", "html_url": "https://github.com/rust-lang/rust/commit/80a91e6735c62b0fad817fdb651ab06171aa5568"}], "stats": {"total": 240, "additions": 127, "deletions": 113}, "files": [{"sha": "5f67c95f69aa6fc9b92d66b1508578313cbd5b25", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 105, "deletions": 19, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/f534d2132b90fca8c0646cc81f8a60fa20423fe1/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d2132b90fca8c0646cc81f8a60fa20423fe1/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=f534d2132b90fca8c0646cc81f8a60fa20423fe1", "patch": "@@ -8,11 +8,11 @@ use hir::{\n use ra_db::{FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase};\n use ra_editor::{self, find_node_at_offset, LocalEdit, Severity};\n use ra_syntax::{\n-    algo::find_covering_node,\n+    algo::{find_covering_node, visit::{visitor, Visitor}},\n     ast::{self, ArgListOwner, Expr, FnDef, NameOwner},\n     AstNode, SourceFileNode,\n     SyntaxKind::*,\n-    SyntaxNodeRef, TextRange, TextUnit,\n+    SyntaxNode, SyntaxNodeRef, TextRange, TextUnit,\n };\n \n use crate::{\n@@ -116,12 +116,12 @@ impl db::RootDatabase {\n         };\n         let decl = decl.borrowed();\n         let decl_name = decl.name().unwrap();\n-        let symbol = FileSymbol {\n+        Ok(vec![NavigationTarget {\n+            file_id,\n             name: decl_name.text(),\n-            node_range: decl_name.syntax().range(),\n+            range: decl_name.syntax().range(),\n             kind: MODULE,\n-        };\n-        Ok(vec![NavigationTarget { file_id, symbol }])\n+        }])\n     }\n     /// Returns `Vec` for the same reason as `parent_module`\n     pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n@@ -153,14 +153,12 @@ impl db::RootDatabase {\n                 let scope = fn_descr.scopes(self);\n                 // First try to resolve the symbol locally\n                 if let Some(entry) = scope.resolve_local_name(name_ref) {\n-                    rr.add_resolution(\n-                        position.file_id,\n-                        FileSymbol {\n-                            name: entry.name().to_string().into(),\n-                            node_range: entry.ptr().range(),\n-                            kind: NAME,\n-                        },\n-                    );\n+                    rr.resolves_to.push(NavigationTarget {\n+                        file_id: position.file_id,\n+                        name: entry.name().to_string().into(),\n+                        range: entry.ptr().range(),\n+                        kind: NAME,\n+                    });\n                     return Ok(Some(rr));\n                 };\n             }\n@@ -182,12 +180,13 @@ impl db::RootDatabase {\n                             Some(name) => name.to_string().into(),\n                             None => \"\".into(),\n                         };\n-                        let symbol = FileSymbol {\n+                        let symbol = NavigationTarget {\n+                            file_id,\n                             name,\n-                            node_range: TextRange::offset_len(0.into(), 0.into()),\n+                            range: TextRange::offset_len(0.into(), 0.into()),\n                             kind: MODULE,\n                         };\n-                        rr.add_resolution(file_id, symbol);\n+                        rr.resolves_to.push(symbol);\n                         return Ok(Some(rr));\n                     }\n                 }\n@@ -253,8 +252,7 @@ impl db::RootDatabase {\n         }\n     }\n     pub(crate) fn doc_text_for(&self, nav: NavigationTarget) -> Cancelable<Option<String>> {\n-        let file = self.source_file(nav.file_id);\n-        let result = match (nav.symbol.description(&file), nav.symbol.docs(&file)) {\n+        let result = match (nav.description(self), nav.docs(self)) {\n             (Some(desc), Some(docs)) => {\n                 Some(\"```rust\\n\".to_string() + &*desc + \"\\n```\\n\\n\" + &*docs)\n             }\n@@ -511,3 +509,91 @@ impl<'a> FnCallNode<'a> {\n         }\n     }\n }\n+\n+impl NavigationTarget {\n+    fn node(&self, db: &db::RootDatabase) -> Option<SyntaxNode> {\n+        let source_file = db.source_file(self.file_id);\n+        let source_file = source_file.syntax();\n+        let node = source_file\n+            .descendants()\n+            .find(|node| node.kind() == self.kind && node.range() == self.range)?\n+            .owned();\n+        Some(node)\n+    }\n+\n+    fn docs(&self, db: &db::RootDatabase) -> Option<String> {\n+        let node = self.node(db)?;\n+        let node = node.borrowed();\n+        fn doc_comments<'a, N: ast::DocCommentsOwner<'a>>(node: N) -> Option<String> {\n+            let comments = node.doc_comment_text();\n+            if comments.is_empty() {\n+                None\n+            } else {\n+                Some(comments)\n+            }\n+        }\n+\n+        visitor()\n+            .visit(doc_comments::<ast::FnDef>)\n+            .visit(doc_comments::<ast::StructDef>)\n+            .visit(doc_comments::<ast::EnumDef>)\n+            .visit(doc_comments::<ast::TraitDef>)\n+            .visit(doc_comments::<ast::Module>)\n+            .visit(doc_comments::<ast::TypeDef>)\n+            .visit(doc_comments::<ast::ConstDef>)\n+            .visit(doc_comments::<ast::StaticDef>)\n+            .accept(node)?\n+    }\n+\n+    /// Get a description of this node.\n+    ///\n+    /// e.g. `struct Name`, `enum Name`, `fn Name`\n+    fn description(&self, db: &db::RootDatabase) -> Option<String> {\n+        // TODO: After type inference is done, add type information to improve the output\n+        let node = self.node(db)?;\n+        let node = node.borrowed();\n+        // TODO: Refactor to be have less repetition\n+        visitor()\n+            .visit(|node: ast::FnDef| {\n+                let mut string = \"fn \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .visit(|node: ast::StructDef| {\n+                let mut string = \"struct \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .visit(|node: ast::EnumDef| {\n+                let mut string = \"enum \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .visit(|node: ast::TraitDef| {\n+                let mut string = \"trait \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .visit(|node: ast::Module| {\n+                let mut string = \"mod \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .visit(|node: ast::TypeDef| {\n+                let mut string = \"type \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .visit(|node: ast::ConstDef| {\n+                let mut string = \"const \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .visit(|node: ast::StaticDef| {\n+                let mut string = \"static \".to_string();\n+                node.name()?.syntax().text().push_to(&mut string);\n+                Some(string)\n+            })\n+            .accept(node)?\n+    }\n+}"}, {"sha": "8247914c0a4c60cb1ed84919530883e579887188", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f534d2132b90fca8c0646cc81f8a60fa20423fe1/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d2132b90fca8c0646cc81f8a60fa20423fe1/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=f534d2132b90fca8c0646cc81f8a60fa20423fe1", "patch": "@@ -222,21 +222,31 @@ impl Query {\n #[derive(Debug)]\n pub struct NavigationTarget {\n     file_id: FileId,\n-    symbol: FileSymbol,\n+    name: SmolStr,\n+    kind: SyntaxKind,\n+    range: TextRange,\n }\n \n impl NavigationTarget {\n-    pub fn name(&self) -> SmolStr {\n-        self.symbol.name.clone()\n+    fn from_symbol(file_id: FileId, symbol: FileSymbol) -> NavigationTarget {\n+        NavigationTarget {\n+            name: symbol.name.clone(),\n+            kind: symbol.kind.clone(),\n+            file_id,\n+            range: symbol.node_range.clone(),\n+        }\n+    }\n+    pub fn name(&self) -> &SmolStr {\n+        &self.name\n     }\n     pub fn kind(&self) -> SyntaxKind {\n-        self.symbol.kind\n+        self.kind\n     }\n     pub fn file_id(&self) -> FileId {\n         self.file_id\n     }\n     pub fn range(&self) -> TextRange {\n-        self.symbol.node_range\n+        self.range\n     }\n }\n \n@@ -260,7 +270,8 @@ impl ReferenceResolution {\n     }\n \n     fn add_resolution(&mut self, file_id: FileId, symbol: FileSymbol) {\n-        self.resolves_to.push(NavigationTarget { file_id, symbol })\n+        self.resolves_to\n+            .push(NavigationTarget::from_symbol(file_id, symbol))\n     }\n }\n \n@@ -359,7 +370,7 @@ impl Analysis {\n     pub fn symbol_search(&self, query: Query) -> Cancelable<Vec<NavigationTarget>> {\n         let res = symbol_index::world_symbols(&*self.db, query)?\n             .into_iter()\n-            .map(|(file_id, symbol)| NavigationTarget { file_id, symbol })\n+            .map(|(file_id, symbol)| NavigationTarget::from_symbol(file_id, symbol))\n             .collect();\n         Ok(res)\n     }"}, {"sha": "65abaec2e5882b4874e06fa07365e290c68c1ae2", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 4, "deletions": 87, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/f534d2132b90fca8c0646cc81f8a60fa20423fe1/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f534d2132b90fca8c0646cc81f8a60fa20423fe1/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=f534d2132b90fca8c0646cc81f8a60fa20423fe1", "patch": "@@ -5,10 +5,10 @@ use std::{\n \n use fst::{self, Streamer};\n use ra_syntax::{\n-    AstNode, SyntaxNodeRef, SourceFileNode, SmolStr, TextRange,\n+    SyntaxNodeRef, SourceFileNode, SmolStr, TextRange,\n     algo::visit::{visitor, Visitor},\n     SyntaxKind::{self, *},\n-    ast::{self, NameOwner, DocCommentsOwner},\n+    ast::{self, NameOwner},\n };\n use ra_db::{SyntaxDatabase, SourceRootId, FilesDatabase};\n use salsa::ParallelDatabase;\n@@ -165,91 +165,7 @@ pub(crate) struct FileSymbol {\n     pub(crate) name: SmolStr,\n     pub(crate) node_range: TextRange,\n     pub(crate) kind: SyntaxKind,\n-}\n-\n-impl FileSymbol {\n-    pub(crate) fn docs(&self, file: &SourceFileNode) -> Option<String> {\n-        file.syntax()\n-            .descendants()\n-            .filter(|node| node.kind() == self.kind && node.range() == self.node_range)\n-            .filter_map(|node: SyntaxNodeRef| {\n-                fn doc_comments<'a, N: DocCommentsOwner<'a>>(node: N) -> Option<String> {\n-                    let comments = node.doc_comment_text();\n-                    if comments.is_empty() {\n-                        None\n-                    } else {\n-                        Some(comments)\n-                    }\n-                }\n-\n-                visitor()\n-                    .visit(doc_comments::<ast::FnDef>)\n-                    .visit(doc_comments::<ast::StructDef>)\n-                    .visit(doc_comments::<ast::EnumDef>)\n-                    .visit(doc_comments::<ast::TraitDef>)\n-                    .visit(doc_comments::<ast::Module>)\n-                    .visit(doc_comments::<ast::TypeDef>)\n-                    .visit(doc_comments::<ast::ConstDef>)\n-                    .visit(doc_comments::<ast::StaticDef>)\n-                    .accept(node)?\n-            })\n-            .nth(0)\n-    }\n-    /// Get a description of this node.\n-    ///\n-    /// e.g. `struct Name`, `enum Name`, `fn Name`\n-    pub(crate) fn description(&self, file: &SourceFileNode) -> Option<String> {\n-        // TODO: After type inference is done, add type information to improve the output\n-        file.syntax()\n-            .descendants()\n-            .filter(|node| node.kind() == self.kind && node.range() == self.node_range)\n-            .filter_map(|node: SyntaxNodeRef| {\n-                // TODO: Refactor to be have less repetition\n-                visitor()\n-                    .visit(|node: ast::FnDef| {\n-                        let mut string = \"fn \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .visit(|node: ast::StructDef| {\n-                        let mut string = \"struct \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .visit(|node: ast::EnumDef| {\n-                        let mut string = \"enum \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .visit(|node: ast::TraitDef| {\n-                        let mut string = \"trait \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .visit(|node: ast::Module| {\n-                        let mut string = \"mod \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .visit(|node: ast::TypeDef| {\n-                        let mut string = \"type \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .visit(|node: ast::ConstDef| {\n-                        let mut string = \"const \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .visit(|node: ast::StaticDef| {\n-                        let mut string = \"static \".to_string();\n-                        node.name()?.syntax().text().push_to(&mut string);\n-                        Some(string)\n-                    })\n-                    .accept(node)?\n-            })\n-            .nth(0)\n-    }\n+    _x: (),\n }\n \n fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n@@ -259,6 +175,7 @@ fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n             name: name.text(),\n             node_range: node.syntax().range(),\n             kind: node.syntax().kind(),\n+            _x: (),\n         })\n     }\n     visitor()"}]}