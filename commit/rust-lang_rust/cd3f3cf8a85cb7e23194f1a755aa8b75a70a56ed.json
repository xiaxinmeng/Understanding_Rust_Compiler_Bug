{"sha": "cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "node_id": "C_kwDOAAsO6NoAKGNkM2YzY2Y4YTg1Y2I3ZTIzMTk0ZjFhNzU1YWE4Yjc1YTcwYTU2ZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T16:14:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T16:14:29Z"}, "message": "Auto merge of #7707 - Jarcho:suspicious_else_proc_mac, r=Manishearth\n\nDon't lint `suspicious_else_formatting` inside proc-macros\n\nfixes: #7650\n\nI'll add a test for this one soon.\n\nchangelog: Don't lint `suspicious_else_formatting` inside proc-macros", "tree": {"sha": "cbb7fe03120c53d7dd2397cd737bbc079cefdd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb7fe03120c53d7dd2397cd737bbc079cefdd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "html_url": "https://github.com/rust-lang/rust/commit/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "html_url": "https://github.com/rust-lang/rust/commit/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2"}, {"sha": "e69154f3705af1f69d61469d581f4c20ac5efd9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69154f3705af1f69d61469d581f4c20ac5efd9d", "html_url": "https://github.com/rust-lang/rust/commit/e69154f3705af1f69d61469d581f4c20ac5efd9d"}], "stats": {"total": 159, "additions": 124, "deletions": 35}, "files": [{"sha": "b4f186525c562ea4cd33c4dcdcf9bddd08ed1d92", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "patch": "@@ -286,34 +286,39 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n }\n \n fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n-    if !differing_macro_contexts(first.span, second.span)\n-        && !first.span.from_expansion()\n-        && is_if(first)\n-        && (is_block(second) || is_if(second))\n-    {\n-        // where the else would be\n-        let else_span = first.span.between(second.span);\n+    if_chain! {\n+        if !differing_macro_contexts(first.span, second.span);\n+        if !first.span.from_expansion();\n+        if let ExprKind::If(cond_expr, ..) = &first.kind;\n+        if is_block(second) || is_if(second);\n \n-        if let Some(else_snippet) = snippet_opt(cx, else_span) {\n-            if !else_snippet.contains('\\n') {\n-                let (looks_like, next_thing) = if is_if(second) {\n-                    (\"an `else if`\", \"the second `if`\")\n-                } else {\n-                    (\"an `else {..}`\", \"the next block\")\n-                };\n+        // Proc-macros can give weird spans. Make sure this is actually an `if`.\n+        if let Some(if_snip) = snippet_opt(cx, first.span.until(cond_expr.span));\n+        if if_snip.starts_with(\"if\");\n \n-                span_lint_and_note(\n-                    cx,\n-                    SUSPICIOUS_ELSE_FORMATTING,\n-                    else_span,\n-                    &format!(\"this looks like {} but the `else` is missing\", looks_like),\n-                    None,\n-                    &format!(\n-                        \"to remove this lint, add the missing `else` or add a new line before {}\",\n-                        next_thing,\n-                    ),\n-                );\n-            }\n+        // If there is a line break between the two expressions, don't lint.\n+        // If there is a non-whitespace character, this span came from a proc-macro.\n+        let else_span = first.span.between(second.span);\n+        if let Some(else_snippet) = snippet_opt(cx, else_span);\n+        if !else_snippet.chars().any(|c| c == '\\n' || !c.is_whitespace());\n+        then {\n+            let (looks_like, next_thing) = if is_if(second) {\n+                (\"an `else if`\", \"the second `if`\")\n+            } else {\n+                (\"an `else {..}`\", \"the next block\")\n+            };\n+\n+            span_lint_and_note(\n+                cx,\n+                SUSPICIOUS_ELSE_FORMATTING,\n+                else_span,\n+                &format!(\"this looks like {} but the `else` is missing\", looks_like),\n+                None,\n+                &format!(\n+                    \"to remove this lint, add the missing `else` or add a new line before {}\",\n+                    next_thing,\n+                ),\n+            );\n         }\n     }\n }"}, {"sha": "26c88489b03cb4d9e75b7880ce19d3c9720ea082", "filename": "tests/ui/auxiliary/proc_macro_suspicious_else_formatting.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs?ref=cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "patch": "@@ -0,0 +1,75 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{token_stream, Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n+use std::iter::FromIterator;\n+\n+fn read_ident(iter: &mut token_stream::IntoIter) -> Ident {\n+    match iter.next() {\n+        Some(TokenTree::Ident(i)) => i,\n+        _ => panic!(\"expected ident\"),\n+    }\n+}\n+\n+#[proc_macro_derive(DeriveBadSpan)]\n+pub fn derive_bad_span(input: TokenStream) -> TokenStream {\n+    let mut input = input.into_iter();\n+    assert_eq!(read_ident(&mut input).to_string(), \"struct\");\n+    let ident = read_ident(&mut input);\n+    let mut tys = match input.next() {\n+        Some(TokenTree::Group(g)) if g.delimiter() == Delimiter::Parenthesis => g.stream().into_iter(),\n+        _ => panic!(),\n+    };\n+    let field1 = read_ident(&mut tys);\n+    tys.next();\n+    let field2 = read_ident(&mut tys);\n+\n+    <TokenStream as FromIterator<TokenTree>>::from_iter(\n+        [\n+            Ident::new(\"impl\", Span::call_site()).into(),\n+            ident.into(),\n+            Group::new(\n+                Delimiter::Brace,\n+                <TokenStream as FromIterator<TokenTree>>::from_iter(\n+                    [\n+                        Ident::new(\"fn\", Span::call_site()).into(),\n+                        Ident::new(\"_foo\", Span::call_site()).into(),\n+                        Group::new(Delimiter::Parenthesis, TokenStream::new()).into(),\n+                        Group::new(\n+                            Delimiter::Brace,\n+                            <TokenStream as FromIterator<TokenTree>>::from_iter(\n+                                [\n+                                    Ident::new(\"if\", field1.span()).into(),\n+                                    Ident::new(\"true\", field1.span()).into(),\n+                                    {\n+                                        let mut group = Group::new(Delimiter::Brace, TokenStream::new());\n+                                        group.set_span(field1.span());\n+                                        group.into()\n+                                    },\n+                                    Ident::new(\"if\", field2.span()).into(),\n+                                    Ident::new(\"true\", field2.span()).into(),\n+                                    {\n+                                        let mut group = Group::new(Delimiter::Brace, TokenStream::new());\n+                                        group.set_span(field2.span());\n+                                        group.into()\n+                                    },\n+                                ]\n+                                .iter()\n+                                .cloned(),\n+                            ),\n+                        )\n+                        .into(),\n+                    ]\n+                    .iter()\n+                    .cloned(),\n+                ),\n+            )\n+            .into(),\n+        ]\n+        .iter()\n+        .cloned(),\n+    )\n+}"}, {"sha": "be8bc22bf98a05d062caff083c4c6e1d1d903c85", "filename": "tests/ui/suspicious_else_formatting.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/tests%2Fui%2Fsuspicious_else_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/tests%2Fui%2Fsuspicious_else_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_else_formatting.rs?ref=cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "patch": "@@ -1,5 +1,10 @@\n+// aux-build:proc_macro_suspicious_else_formatting.rs\n+\n #![warn(clippy::suspicious_else_formatting)]\n \n+extern crate proc_macro_suspicious_else_formatting;\n+use proc_macro_suspicious_else_formatting::DeriveBadSpan;\n+\n fn foo() -> bool {\n     true\n }\n@@ -103,3 +108,7 @@ fn main() {\n     {\n     }\n }\n+\n+// #7650 - Don't lint. Proc-macro using bad spans for `if` expressions.\n+#[derive(DeriveBadSpan)]\n+struct _Foo(u32, u32);"}, {"sha": "d1db195cbb8787bc0003738f2f2c1e37adbf7fe3", "filename": "tests/ui/suspicious_else_formatting.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/tests%2Fui%2Fsuspicious_else_formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed/tests%2Fui%2Fsuspicious_else_formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_else_formatting.stderr?ref=cd3f3cf8a85cb7e23194f1a755aa8b75a70a56ed", "patch": "@@ -1,5 +1,5 @@\n error: this looks like an `else {..}` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:11:6\n+  --> $DIR/suspicious_else_formatting.rs:16:6\n    |\n LL |     } {\n    |      ^\n@@ -8,31 +8,31 @@ LL |     } {\n    = note: to remove this lint, add the missing `else` or add a new line before the next block\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:15:6\n+  --> $DIR/suspicious_else_formatting.rs:20:6\n    |\n LL |     } if foo() {\n    |      ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:22:10\n+  --> $DIR/suspicious_else_formatting.rs:27:10\n    |\n LL |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/suspicious_else_formatting.rs:30:10\n+  --> $DIR/suspicious_else_formatting.rs:35:10\n    |\n LL |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this is an `else {..}` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:39:6\n+  --> $DIR/suspicious_else_formatting.rs:44:6\n    |\n LL |       } else\n    |  ______^\n@@ -42,7 +42,7 @@ LL | |     {\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n \n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:51:6\n+  --> $DIR/suspicious_else_formatting.rs:56:6\n    |\n LL |       } else\n    |  ______^\n@@ -52,7 +52,7 @@ LL | |     if foo() { // the span of the above error should continue here\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:56:6\n+  --> $DIR/suspicious_else_formatting.rs:61:6\n    |\n LL |       }\n    |  ______^\n@@ -63,7 +63,7 @@ LL | |     if foo() { // the span of the above error should continue here\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this is an `else {..}` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:83:6\n+  --> $DIR/suspicious_else_formatting.rs:88:6\n    |\n LL |       }\n    |  ______^\n@@ -75,7 +75,7 @@ LL | |     {\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n \n error: this is an `else {..}` but the formatting might hide it\n-  --> $DIR/suspicious_else_formatting.rs:91:6\n+  --> $DIR/suspicious_else_formatting.rs:96:6\n    |\n LL |       }\n    |  ______^"}]}