{"sha": "355c798ac3eba15bb2d53a6c553c6149391f9615", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NWM3OThhYzNlYmExNWJiMmQ1M2E2YzU1M2M2MTQ5MzkxZjk2MTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T05:49:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-30T14:06:44Z"}, "message": "native: Don't deadlock the runtime on spawn failure\n\nPreviously, the call to bookkeeping::increment() was never paired with a\ndecrement when the spawn failed (due to unwinding). This fixes the problem by\nreturning a \"bomb\" from increment() which will decrement on drop, and then\nmoving the bomb into the child task's procedure which will be dropped naturally.", "tree": {"sha": "7426185c4107170da393d78489638b505b7994cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7426185c4107170da393d78489638b505b7994cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/355c798ac3eba15bb2d53a6c553c6149391f9615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/355c798ac3eba15bb2d53a6c553c6149391f9615", "html_url": "https://github.com/rust-lang/rust/commit/355c798ac3eba15bb2d53a6c553c6149391f9615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/355c798ac3eba15bb2d53a6c553c6149391f9615/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e156d001c6577593295f6eee417ea8758fbc4a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/e156d001c6577593295f6eee417ea8758fbc4a84", "html_url": "https://github.com/rust-lang/rust/commit/e156d001c6577593295f6eee417ea8758fbc4a84"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "c72d6c24a7c16ffa5b6cd661c9b8d2698322323c", "filename": "src/libnative/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/355c798ac3eba15bb2d53a6c553c6149391f9615/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355c798ac3eba15bb2d53a6c553c6149391f9615/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=355c798ac3eba15bb2d53a6c553c6149391f9615", "patch": "@@ -71,7 +71,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc():Send) {\n     // Note that this increment must happen *before* the spawn in order to\n     // guarantee that if this task exits it will always end up waiting for the\n     // spawned task to exit.\n-    bookkeeping::increment();\n+    let token = bookkeeping::increment();\n \n     // Spawning a new OS thread guarantees that __morestack will never get\n     // triggered, but we must manually set up the actual stack bounds once this\n@@ -93,7 +93,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc():Send) {\n         let mut task = task;\n         task.put_runtime(ops);\n         drop(task.run(|| { f.take_unwrap()() }).destroy());\n-        bookkeeping::decrement();\n+        drop(token);\n     })\n }\n "}, {"sha": "ba9995e34ca3a149d2ef9ec9c3165eaf1e4ab967", "filename": "src/librustrt/bookkeeping.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/355c798ac3eba15bb2d53a6c553c6149391f9615/src%2Flibrustrt%2Fbookkeeping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355c798ac3eba15bb2d53a6c553c6149391f9615/src%2Flibrustrt%2Fbookkeeping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fbookkeeping.rs?ref=355c798ac3eba15bb2d53a6c553c6149391f9615", "patch": "@@ -19,14 +19,24 @@\n //! decrement() manually.\n \n use core::atomics;\n+use core::ops::Drop;\n \n use mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n \n static mut TASK_COUNT: atomics::AtomicUint = atomics::INIT_ATOMIC_UINT;\n static mut TASK_LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n \n-pub fn increment() {\n+pub struct Token(());\n+\n+impl Drop for Token {\n+    fn drop(&mut self) { decrement() }\n+}\n+\n+/// Increment the number of live tasks, returning a token which will decrement\n+/// the count when dropped.\n+pub fn increment() -> Token {\n     let _ = unsafe { TASK_COUNT.fetch_add(1, atomics::SeqCst) };\n+    Token(())\n }\n \n pub fn decrement() {"}]}