{"sha": "13b3294e91664fa039a9999f37f16a2494c72078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYjMyOTRlOTE2NjRmYTAzOWE5OTk5ZjM3ZjE2YTI0OTRjNzIwNzg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-31T00:47:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T00:47:31Z"}, "message": "Rollup merge of #81198 - dtolnay:partialeq, r=m-ou-se\n\nRemove requirement that forces symmetric and transitive PartialEq impls to exist\n\n### Counterexample of symmetry:\n\nIf you [have](https://docs.rs/proc-macro2/1.0.24/proc_macro2/struct.Ident.html#impl-PartialEq%3CT%3E) an impl like:\n\n```rust\nimpl<T> PartialEq<T> for Ident\nwhere\n    T: ?Sized + AsRef<str>\n```\n\nthen Rust will not even allow the symmetric impl to exist.\n\n```console\nerror[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Ident`)\n --> src/main.rs:9:6\n  |\n9 | impl<T> PartialEq<Ident> for T where T: ?Sized + AsRef<str> {\n  |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Ident`)\n  |\n  = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local, and no uncovered type parameters appear before that first local type\n  = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n```\n\n<br>\n\n### Counterexample of transitivity:\n\nConsider these two existing impls from `regex` and `clap`:\n\n```rust\n// regex\n\n/// An inline representation of `Option<char>`.\npub struct Char(u32);\n\nimpl PartialEq<char> for Char {\n    fn eq(&self, other: &char) -> bool {\n        self.0 == *other as u32\n    }\n}\n```\n\n```rust\n// clap\n\npub(crate) enum KeyType {\n    Short(char),\n    Long(OsString),\n    Position(u64),\n}\n\nimpl PartialEq<char> for KeyType {\n    fn eq(&self, rhs: &char) -> bool {\n        match self {\n            KeyType::Short(c) => c == rhs,\n            _ => false,\n        }\n    }\n}\n```\n\nIt's nice to be able to add `PartialEq<proc_macro::Punct> for char` in libproc_macro (https://github.com/rust-lang/rust/pull/80595), but it makes no sense to force an `impl PartialEq<Punct> for Char` and `impl PartialEq<Punct> for KeyType` in `regex` and `clap` in code that otherwise has nothing to do with proc macros.\n\n<br>\n\n`@rust-lang/libs`", "tree": {"sha": "79c5e59a210abd68570b280e8b447578eb4c8c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c5e59a210abd68570b280e8b447578eb4c8c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b3294e91664fa039a9999f37f16a2494c72078", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFf4jCRBK7hj4Ov3rIwAAdHIIAK7A/gfv6fQT6n7tJ92wkEMN\nL/YFHif1uwafAiPJIx1Vcx2nvQIAMbCQojXPnI/XEtdCjNTpjqv34VQ5Vr1KjP7F\n6em1HGXUIwRggy/Qwabxt1Dc5YijySHIbNeCKbYghkBpGD+CVWEYTGAhw9bYnw2W\nTbxy9CR3Gv/9paqmnEtO/2HX+xuu5KmP8ZFxiO8nlhQpNJ9Tk8I1hYgwBvqT/SR4\nUf49T4aqnrx5Q/+MVeJLoIoNBYJzEjpXpxvn+bhK0s5TXFBZEtsB8vVyedUGN75c\nZm6ssvPDVSoos1RzX2QohgwQ4/PqyUOThk81jo7dCdsOZXJ7JAKGl9N1Uai5QoE=\n=BJu4\n-----END PGP SIGNATURE-----\n", "payload": "tree 79c5e59a210abd68570b280e8b447578eb4c8c41\nparent 0793fab0c3e06105fce97aaf278de3137b820dfe\nparent 8758083aad5d455e83fc3ea630d991195b0c588c\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612054051 +0100\ncommitter GitHub <noreply@github.com> 1612054051 +0100\n\nRollup merge of #81198 - dtolnay:partialeq, r=m-ou-se\n\nRemove requirement that forces symmetric and transitive PartialEq impls to exist\n\n### Counterexample of symmetry:\n\nIf you [have](https://docs.rs/proc-macro2/1.0.24/proc_macro2/struct.Ident.html#impl-PartialEq%3CT%3E) an impl like:\n\n```rust\nimpl<T> PartialEq<T> for Ident\nwhere\n    T: ?Sized + AsRef<str>\n```\n\nthen Rust will not even allow the symmetric impl to exist.\n\n```console\nerror[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Ident`)\n --> src/main.rs:9:6\n  |\n9 | impl<T> PartialEq<Ident> for T where T: ?Sized + AsRef<str> {\n  |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Ident`)\n  |\n  = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local, and no uncovered type parameters appear before that first local type\n  = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n```\n\n<br>\n\n### Counterexample of transitivity:\n\nConsider these two existing impls from `regex` and `clap`:\n\n```rust\n// regex\n\n/// An inline representation of `Option<char>`.\npub struct Char(u32);\n\nimpl PartialEq<char> for Char {\n    fn eq(&self, other: &char) -> bool {\n        self.0 == *other as u32\n    }\n}\n```\n\n```rust\n// clap\n\npub(crate) enum KeyType {\n    Short(char),\n    Long(OsString),\n    Position(u64),\n}\n\nimpl PartialEq<char> for KeyType {\n    fn eq(&self, rhs: &char) -> bool {\n        match self {\n            KeyType::Short(c) => c == rhs,\n            _ => false,\n        }\n    }\n}\n```\n\nIt's nice to be able to add `PartialEq<proc_macro::Punct> for char` in libproc_macro (https://github.com/rust-lang/rust/pull/80595), but it makes no sense to force an `impl PartialEq<Punct> for Char` and `impl PartialEq<Punct> for KeyType` in `regex` and `clap` in code that otherwise has nothing to do with proc macros.\n\n<br>\n\n`@rust-lang/libs`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b3294e91664fa039a9999f37f16a2494c72078", "html_url": "https://github.com/rust-lang/rust/commit/13b3294e91664fa039a9999f37f16a2494c72078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b3294e91664fa039a9999f37f16a2494c72078/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0793fab0c3e06105fce97aaf278de3137b820dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0793fab0c3e06105fce97aaf278de3137b820dfe", "html_url": "https://github.com/rust-lang/rust/commit/0793fab0c3e06105fce97aaf278de3137b820dfe"}, {"sha": "8758083aad5d455e83fc3ea630d991195b0c588c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8758083aad5d455e83fc3ea630d991195b0c588c", "html_url": "https://github.com/rust-lang/rust/commit/8758083aad5d455e83fc3ea630d991195b0c588c"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "4a15b185a83e7747d9ff400940fffda5b3da7092", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13b3294e91664fa039a9999f37f16a2494c72078/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b3294e91664fa039a9999f37f16a2494c72078/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=13b3294e91664fa039a9999f37f16a2494c72078", "patch": "@@ -31,14 +31,18 @@ use self::Ordering::*;\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n /// so floating point types implement `PartialEq` but not [`trait@Eq`].\n ///\n-/// Formally, the equality must be (for all `a`, `b` and `c`):\n+/// Formally, the equality must be (for all `a`, `b`, `c` of type `A`, `B`,\n+/// `C`):\n ///\n-/// - symmetric: `a == b` implies `b == a`; and\n-/// - transitive: `a == b` and `b == c` implies `a == c`.\n+/// - **Symmetric**: if `A: PartialEq<B>` and `B: PartialEq<A>`, then **`a == b`\n+///   implies `b == a`**; and\n+///\n+/// - **Transitive**: if `A: PartialEq<B>` and `B: PartialEq<C>` and `A:\n+///   PartialEq<C>`, then **`a == b` and `b == c` implies `a == c`**.\n ///\n-/// Note that these requirements mean that the trait itself must be implemented\n-/// symmetrically and transitively: if `T: PartialEq<U>` and `U: PartialEq<V>`\n-/// then `U: PartialEq<T>` and `T: PartialEq<V>`.\n+/// Note that the `B: PartialEq<A>` (symmetric) and `A: PartialEq<C>`\n+/// (transitive) impls are not forced to exist, but these requirements apply\n+/// whenever they do exist.\n ///\n /// ## Derivable\n ///"}]}